#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1080;
float _3727;
float _3728;
float _3729;
float _3730;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _255 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _261 = _255.x * cbMtdParam._m0[9u].x;
    float _262 = _255.y * cbMtdParam._m0[9u].y;
    float _263 = _255.z * cbMtdParam._m0[9u].z;
    vec4 _276 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _280 = _276.z;
    float _285 = (_276.x * 2.0) + (-1.0);
    float _287 = (_276.y * 2.0) + (-1.0);
    float _288 = dot(vec2(_285, _287), vec2(_285, _287));
    float _3739 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _294 = sqrt(1.0 - (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))));
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _328 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _314) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _315) + cbTextureTilingScale._m0[19u].w));
    float _330 = _328.x;
    float _331 = 1.0 - _330;
    float _364 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_330 - _331) * cbMtdParam._m0[24u].w) + _331) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3750 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _365 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _373 = ((((cbMtdParam._m0[10u].x - _261) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _365) + _261;
    float _374 = ((((cbMtdParam._m0[10u].y - _262) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _365) + _262;
    float _375 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _263)) * _365) + _263;
    float _379 = ((cbMtdParam._m0[23u].y - _280) * _365) + _280;
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _314) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _315) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _403 = _401.x;
    float _404 = _401.y;
    float _413 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_225, _226, _227, 0.0));
    vec4 _428 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _314) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _315) + cbTextureTilingScale._m0[18u].w));
    float _430 = _428.x;
    float _435 = fract(_428.w + cbPerFrame._m0[22u].x);
    float _437 = (1.0 - _435) * _430;
    float _442 = ((_435 + (-1.0)) + _430) * 9.0;
    float _444 = ((_430 + (-1.0)) + _435) * 9.0;
    float _445 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _446 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _460 = (_437 * ((_428.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _445 : (isnan(_445) ? 3.0 : min(_445, 3.0))) * 3.1415927410125732421875);
    float _462 = (_437 * ((_428.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _446 : (isnan(_446) ? 3.0 : min(_446, 3.0))) * 3.1415927410125732421875);
    float _466 = inversesqrt(dot(vec3(_460, _462, 1.0), vec3(_460, _462, 1.0)));
    float _482 = (((((0.5 - _403) + ((_460 * 0.5) * _466)) * _413) + _403) * 2.0) + (-1.0);
    float _483 = (((((0.5 - _404) + ((_466 * 0.5) * _462)) * _413) + _404) * 2.0) + (-1.0);
    float _484 = dot(vec2(_482, _483), vec2(_482, _483));
    float _3781 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _500 = ((((cbMtdParam._m0[22u].z * _285) - _285) + _482) * _365) + _285;
    float _501 = ((((cbMtdParam._m0[22u].z * _287) - _287) + _483) * _365) + _287;
    float _502 = (_365 * (sqrt(1.0 - (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) - _294)) + _294;
    float _504 = cbMtdParam._m0[22u].x + _276.w;
    float _507 = fma(_502, _225, fma(_501, _231 * TANGENT.x, (_217 * _209) * _500));
    float _510 = fma(_502, _226, fma(_501, _231 * TANGENT.y, (_217 * _210) * _500));
    float _513 = fma(_502, _227, fma(_501, _231 * TANGENT.z, (_217 * _211) * _500));
    float _517 = inversesqrt(dot(vec3(_507, _510, _513), vec3(_507, _510, _513)));
    float _518 = _517 * _507;
    float _519 = _517 * _510;
    float _520 = _517 * _513;
    float _3792 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _521 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _3803 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _3814 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3825 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3836 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _539 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _580 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _590 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _580);
    float _591 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _580);
    float _592 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _580);
    float _596 = inversesqrt(dot(vec3(_590, _591, _592), vec3(_590, _591, _592)));
    float _597 = _590 * _596;
    float _598 = _591 * _596;
    float _599 = _592 * _596;
    vec4 _604 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _606 = _604.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _762 = sqrt(((_590 * _590) + (_591 * _591)) + (_592 * _592));
        float _768 = (cbMatDynParam._m0[5u].x * _762) + cbMatDynParam._m0[5u].y;
        float _3847 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _773 = (cbMatDynParam._m0[5u].z * _762) + cbMatDynParam._m0[5u].w;
        float _3858 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) - _769)) + _769) < ((_606 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _618 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _619 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _639 = fma(_520, cbSceneParam._m0[5u].z, fma(_519, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _518));
    float _642 = fma(_520, cbSceneParam._m0[6u].z, fma(_519, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _518));
    float _645 = fma(_520, cbSceneParam._m0[7u].z, fma(_519, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _518));
    uint _658 = _295 + 9u;
    uint _659 = _658 + uint(cbMatDynParam._m0[0u].w);
    float _665 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0)))) * cbInstanceData._m0[_659].x;
    float _666 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * cbInstanceData._m0[_659].y;
    float _667 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * cbInstanceData._m0[_659].z;
    float _3869 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _3891 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    vec4 _679 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _618, cbSceneParam._m0[86u].y * _619));
    float _683 = ((isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * TEXCOORD_5.w) * _679.x;
    float _684 = dot(vec3(_518, _519, _520), vec3(_597, _598, _599));
    float _687 = _684 * 2.0;
    float _691 = (_687 * _518) - _597;
    float _692 = (_687 * _519) - _598;
    float _693 = (_687 * _520) - _599;
    float _697 = abs(dot(vec3(_597, _598, _599), vec3(_518, _519, _520)));
    float _3902 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _699 = sqrt(_521);
    float _711 = exp2((_699 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_699 * 3.0));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1079;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _805 = fma(_751, cbModelParam._m0[26u].z, fma(_747, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _743));
        float _809 = fma(_751, cbModelParam._m0[27u].z, fma(_747, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _743));
        float _813 = fma(_751, cbModelParam._m0[28u].z, fma(_747, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _743));
        float _837 = _743 + _518;
        float _838 = _747 + _519;
        float _839 = _751 + _520;
        float _849 = fma(_839, cbModelParam._m0[26u].z, fma(_838, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _837)) - _805;
        float _850 = fma(_839, cbModelParam._m0[27u].z, fma(_838, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _837)) - _809;
        float _851 = fma(_839, cbModelParam._m0[28u].z, fma(_838, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _837)) - _813;
        float _855 = inversesqrt(dot(vec3(_849, _850, _851), vec3(_849, _850, _851)));
        float _868 = ((_855 * _849) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_805 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _869 = ((_855 * _850) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_809 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _870 = ((_855 * _851) / cbModelParam._m0[34u].z) + ((((((_813 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        float _907 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_873.x + (-0.5));
        float _909 = _907 * (_873.y + (-0.5));
        float _910 = _907 * (_873.z + (-0.5));
        float _917 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_880.x + (-0.5));
        float _919 = _917 * (_880.y + (-0.5));
        float _920 = _917 * (_880.z + (-0.5));
        float _927 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_887.x + (-0.5));
        float _929 = _927 * (_887.y + (-0.5));
        float _930 = _927 * (_887.z + (-0.5));
        float _937 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_894.x + (-0.5));
        float _939 = _937 * (_894.y + (-0.5));
        float _940 = _937 * (_894.z + (-0.5));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = _908 * 0.5;
        float _945 = _918 * 0.5;
        float _946 = _928 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _961 = (dot(vec3(_518, _519, _520), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _971 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3950 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_973 + 1.0))) + _978) * _941;
        float _988 = _909 * 0.5;
        float _989 = _919 * 0.5;
        float _990 = _929 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_518, _519, _520), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3961 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3972 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3983 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1015 + 1.0))) + _1020) * _942;
        float _1030 = _910 * 0.5;
        float _1031 = _920 * 0.5;
        float _1032 = _930 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_518, _519, _520), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _4016 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1057 + 1.0))) + _1062) * _943;
        _1079 = _910;
        _1081 = _909;
        _1082 = _908;
        _1083 = _920;
        _1084 = _919;
        _1085 = _918;
        _1086 = _930;
        _1087 = _929;
        _1088 = _928;
        _1089 = _943;
        _1090 = _942;
        _1091 = _941;
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1093 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
    }
    else
    {
        _1079 = _1080;
        _1081 = _1080;
        _1082 = _1080;
        _1083 = _1080;
        _1084 = _1080;
        _1085 = _1080;
        _1086 = _1080;
        _1087 = _1080;
        _1088 = _1080;
        _1089 = _1080;
        _1090 = _1080;
        _1091 = _1080;
        _1092 = 0.0;
        _1093 = 0.0;
        _1094 = 0.0;
    }
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1122 = fma(_751, cbModelParam._m0[30u].z, fma(_747, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _743));
        float _1126 = fma(_751, cbModelParam._m0[31u].z, fma(_747, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _743));
        float _1130 = fma(_751, cbModelParam._m0[32u].z, fma(_747, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _743));
        float _1153 = _743 + _518;
        float _1154 = _747 + _519;
        float _1155 = _751 + _520;
        float _1165 = fma(_1155, cbModelParam._m0[30u].z, fma(_1154, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1153)) - _1122;
        float _1166 = fma(_1155, cbModelParam._m0[31u].z, fma(_1154, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1153)) - _1126;
        float _1167 = fma(_1155, cbModelParam._m0[32u].z, fma(_1154, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1153)) - _1130;
        float _1171 = inversesqrt(dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167)));
        float _1184 = ((_1171 * _1165) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1122 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1171 * _1166) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1126 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1171 * _1167) / cbModelParam._m0[35u].z) + ((((((_1130 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        float _1221 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1188.x + (-0.5));
        float _1223 = _1221 * (_1188.y + (-0.5));
        float _1224 = _1221 * (_1188.z + (-0.5));
        float _1231 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1195.x + (-0.5));
        float _1233 = _1231 * (_1195.y + (-0.5));
        float _1234 = _1231 * (_1195.z + (-0.5));
        float _1241 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1202.x + (-0.5));
        float _1243 = _1241 * (_1202.y + (-0.5));
        float _1244 = _1241 * (_1202.z + (-0.5));
        float _1251 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1209.x + (-0.5));
        float _1253 = _1251 * (_1209.y + (-0.5));
        float _1254 = _1251 * (_1209.z + (-0.5));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = _1222 * 0.5;
        float _1259 = _1232 * 0.5;
        float _1260 = _1242 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_518, _519, _520), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _4057 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _4068 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _4079 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1285 + 1.0))) + _1290) * _1255;
        float _1300 = _1223 * 0.5;
        float _1301 = _1233 * 0.5;
        float _1302 = _1243 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_518, _519, _520), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _4090 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _4101 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _4112 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1327 + 1.0))) + _1332) * _1256;
        float _1342 = _1224 * 0.5;
        float _1343 = _1234 * 0.5;
        float _1344 = _1244 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_518, _519, _520), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _4145 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1369 + 1.0))) + _1374) * _1257;
        _1391 = _1224;
        _1392 = _1223;
        _1393 = _1222;
        _1394 = _1234;
        _1395 = _1233;
        _1396 = _1232;
        _1397 = _1244;
        _1398 = _1243;
        _1399 = _1242;
        _1400 = _1257;
        _1401 = _1256;
        _1402 = _1255;
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
    }
    else
    {
        _1391 = _1080;
        _1392 = _1080;
        _1393 = _1080;
        _1394 = _1080;
        _1395 = _1080;
        _1396 = _1080;
        _1397 = _1080;
        _1398 = _1080;
        _1399 = _1080;
        _1400 = _1080;
        _1401 = _1080;
        _1402 = _1080;
        _1403 = 0.0;
        _1404 = 0.0;
        _1405 = 0.0;
    }
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1092)) + _1092;
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1093)) + _1093;
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1094)) + _1094;
    float _1438 = fma(_1417, cbSceneParam._m0[89u].z, fma(_1416, cbSceneParam._m0[89u].y, _1415 * cbSceneParam._m0[89u].x));
    float _1441 = fma(_1417, cbSceneParam._m0[90u].z, fma(_1416, cbSceneParam._m0[90u].y, _1415 * cbSceneParam._m0[90u].x));
    float _1444 = fma(_1417, cbSceneParam._m0[91u].z, fma(_1416, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1415));
    float _1459 = _691 * 0.5;
    float _1460 = _692 * 0.5;
    float _1461 = _693 * 0.5;
    float _1462 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1465 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1468 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1502;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1475 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1079, _1083, _1086, _1089));
        float _1479 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1081, _1084, _1087, _1090));
        float _1483 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1082, _1085, _1088, _1091));
        float _1490 = dot(vec4(cbModelParam._m0[39u]), vec4(_1459, _1460, _1461, 1.0));
        _1502 = dot(vec3(isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1490) ? 0.0 : (isnan(0.0) ? _1490 : max(0.0, _1490))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1502 = 1.0;
    }
    float _1513;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1504 = dot(vec4(cbModelParam._m0[40u]), vec4(_1459, _1460, _1461, 1.0));
        _1513 = dot(vec3(isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1504) ? 0.0 : (isnan(0.0) ? _1504 : max(0.0, _1504))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1513 = 1.0;
    }
    float _1517 = (_1513 * cbModelParam._m0[1u].x) + (_1502 * (1.0 - cbModelParam._m0[1u].x));
    float _1527 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _521);
    float _1528 = isnan(_1527) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1527 : min(cbModelParam._m0[25u].z, _1527));
    float _1610;
    float _1612;
    float _1614;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1577 = fma(_751, cbModelParam._m0[13u].z, fma(_747, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _743)) + cbModelParam._m0[13u].w;
        float _1581 = fma(_751, cbModelParam._m0[14u].z, fma(_747, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _743)) + cbModelParam._m0[14u].w;
        float _1585 = fma(_751, cbModelParam._m0[15u].z, fma(_747, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _743)) + cbModelParam._m0[15u].w;
        float _1588 = fma(_693, cbModelParam._m0[13u].z, fma(_692, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691));
        float _1591 = fma(_693, cbModelParam._m0[14u].z, fma(_692, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691));
        float _1594 = fma(_693, cbModelParam._m0[15u].z, fma(_692, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691));
        float _1622;
        if (_1588 > 0.0)
        {
            _1622 = abs((1.0 - _1577) / _1588);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1577 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1622 = frontier_phi_17_15_ladder;
        }
        float _1793;
        if (_1591 > 0.0)
        {
            _1793 = abs((1.0 - _1581) / _1591);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1581 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1793 = frontier_phi_26_22_ladder;
        }
        float _2089;
        if (_1594 > 0.0)
        {
            _2089 = abs((1.0 - _1585) / _1594);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1585 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2089 = frontier_phi_38_33_ladder;
        }
        float _2091 = isnan(_1793) ? _1622 : (isnan(_1622) ? _1793 : min(_1622, _1793));
        float _2092 = isnan(_2089) ? _2091 : (isnan(_2091) ? _2089 : min(_2091, _2089));
        float _2096 = (_2092 * _1588) + _1577;
        float _2097 = (_2092 * _1591) + _1581;
        float _2098 = (_2092 * _1594) + _1585;
        float _2099 = _2092 * 9.9999997473787516355514526367188e-05;
        float _2101 = (-1.0) - _2099;
        float _2103 = _2099 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2098 > _2103) || ((_2098 < _2101) || ((_2097 > _2103) || ((_2097 < _2101) || ((_2096 < _2101) || (_2096 > _2103))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2243 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2098, cbModelParam._m0[9u].z, fma(_2097, cbModelParam._m0[9u].y, _2096 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2098, cbModelParam._m0[10u].z, fma(_2097, cbModelParam._m0[10u].y, _2096 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2098, cbModelParam._m0[11u].z, fma(_2097, cbModelParam._m0[11u].y, _2096 * cbModelParam._m0[11u].x))), _1528);
            frontier_phi_16_38_ladder = _2243.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2243.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2243.x * cbModelParam._m0[1u].y;
        }
        _1610 = frontier_phi_16_38_ladder_2;
        _1612 = frontier_phi_16_38_ladder_1;
        _1614 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1598 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_691, _692, _693), _1528);
        _1610 = _1598.x * cbModelParam._m0[1u].y;
        _1612 = _1598.y * cbModelParam._m0[1u].y;
        _1614 = _1598.z * cbModelParam._m0[1u].y;
    }
    float _1618 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _521);
    float _1619 = isnan(_1618) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1618 : min(cbModelParam._m0[25u].w, _1618));
    float _1709;
    float _1711;
    float _1713;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1673 = fma(_751, cbModelParam._m0[21u].z, fma(_747, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _743)) + cbModelParam._m0[21u].w;
        float _1677 = fma(_751, cbModelParam._m0[22u].z, fma(_747, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _743)) + cbModelParam._m0[22u].w;
        float _1681 = fma(_751, cbModelParam._m0[23u].z, fma(_747, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _743)) + cbModelParam._m0[23u].w;
        float _1684 = fma(_693, cbModelParam._m0[21u].z, fma(_692, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691));
        float _1687 = fma(_693, cbModelParam._m0[22u].z, fma(_692, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691));
        float _1690 = fma(_693, cbModelParam._m0[23u].z, fma(_692, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691));
        float _1798;
        if (_1684 > 0.0)
        {
            _1798 = abs((1.0 - _1673) / _1684);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1673 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1798 = frontier_phi_28_24_ladder;
        }
        float _2116;
        if (_1687 > 0.0)
        {
            _2116 = abs((1.0 - _1677) / _1687);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1677 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2116 = frontier_phi_40_35_ladder;
        }
        float _2443;
        if (_1690 > 0.0)
        {
            _2443 = abs((1.0 - _1681) / _1690);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1681 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2443 = frontier_phi_50_47_ladder;
        }
        float _2445 = isnan(_2116) ? _1798 : (isnan(_1798) ? _2116 : min(_1798, _2116));
        float _2446 = isnan(_2443) ? _2445 : (isnan(_2445) ? _2443 : min(_2445, _2443));
        float _2450 = (_2446 * _1684) + _1673;
        float _2451 = (_2446 * _1687) + _1677;
        float _2452 = (_2446 * _1690) + _1681;
        float _2453 = _2446 * 9.9999997473787516355514526367188e-05;
        float _2454 = (-1.0) - _2453;
        float _2456 = _2453 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2452 > _2456) || ((_2452 < _2454) || ((_2451 > _2456) || ((_2451 < _2454) || ((_2450 < _2454) || (_2450 > _2456))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2570 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2452, cbModelParam._m0[17u].z, fma(_2451, cbModelParam._m0[17u].y, _2450 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2452, cbModelParam._m0[18u].z, fma(_2451, cbModelParam._m0[18u].y, _2450 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2452, cbModelParam._m0[19u].z, fma(_2451, cbModelParam._m0[19u].y, _2450 * cbModelParam._m0[19u].x))), _1619);
            frontier_phi_25_50_ladder = _2570.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2570.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2570.x * cbModelParam._m0[1u].z;
        }
        _1709 = frontier_phi_25_50_ladder_2;
        _1711 = frontier_phi_25_50_ladder_1;
        _1713 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1693 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_691, _692, _693), _1619);
        _1709 = _1693.x * cbModelParam._m0[1u].z;
        _1711 = _1693.y * cbModelParam._m0[1u].z;
        _1713 = _1693.z * cbModelParam._m0[1u].z;
    }
    float _1725 = ((((1.0 - _711) * ((_699 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_711 * _699)) * _683;
    float _1726 = _1725 * ((cbModelParam._m0[1u].w * (_1709 - _1610)) + _1610);
    float _1727 = _1725 * ((cbModelParam._m0[1u].w * (_1711 - _1612)) + _1612);
    float _1728 = _1725 * ((cbModelParam._m0[1u].w * (_1713 - _1614)) + _1614);
    float _1731 = fma(_1728, cbSceneParam._m0[89u].z, fma(_1727, cbSceneParam._m0[89u].y, _1726 * cbSceneParam._m0[89u].x));
    float _1734 = fma(_1728, cbSceneParam._m0[90u].z, fma(_1727, cbSceneParam._m0[90u].y, _1726 * cbSceneParam._m0[90u].x));
    float _1737 = fma(_1728, cbSceneParam._m0[91u].z, fma(_1727, cbSceneParam._m0[91u].y, _1726 * cbSceneParam._m0[91u].x));
    float _1772 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1776 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1780 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1784 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1785 = _1772 / _1784;
    float _1786 = _1776 / _1784;
    float _1787 = _1780 / _1784;
    float _1934;
    float _1935;
    float _1936;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1814 = ((uint(_1787 > cbSceneParam._m0[59u].y) + uint(_1787 > cbSceneParam._m0[59u].x)) + uint(_1787 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1815 = _1814 + 43u;
        uint _1823 = _1814 + 44u;
        uint _1831 = _1814 + 45u;
        uint _1839 = _1814 + 46u;
        float _1850 = fma(_1784, cbSceneParam._m0[_1815].w, fma(_1780, cbSceneParam._m0[_1815].z, fma(_1776, cbSceneParam._m0[_1815].y, _1772 * cbSceneParam._m0[_1815].x)));
        float _1854 = fma(_1784, cbSceneParam._m0[_1823].w, fma(_1780, cbSceneParam._m0[_1823].z, fma(_1776, cbSceneParam._m0[_1823].y, _1772 * cbSceneParam._m0[_1823].x)));
        float _1862 = fma(_1784, cbSceneParam._m0[_1839].w, fma(_1780, cbSceneParam._m0[_1839].z, fma(_1776, cbSceneParam._m0[_1839].y, _1772 * cbSceneParam._m0[_1839].x)));
        float _1867 = cbSceneParam._m0[33u].z * _1862;
        float _1869 = cbSceneParam._m0[33u].w * _1862;
        float _1872 = fma(_1784, cbSceneParam._m0[_1831].w, fma(_1780, cbSceneParam._m0[_1831].z, fma(_1776, cbSceneParam._m0[_1831].y, _1772 * cbSceneParam._m0[_1831].x))) / _1862;
        float _1920 = (cbSceneParam._m0[33u].x - sqrt(((_1786 * _1786) + (_1785 * _1785)) + (_1787 * _1787))) * cbSceneParam._m0[33u].y;
        float _4271 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1927 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1867 + _1850) / _1862, (_1869 + _1854) / _1862), _1872), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1869 + _1850) / _1862, (_1854 - _1867) / _1862), _1872), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1850 - _1867) / _1862, (_1854 - _1869) / _1862), _1872), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1850 - _1869) / _1862, (_1867 + _1854) / _1862), _1872), 0.0)).x), vec4(0.25)));
        _1934 = 1.0 - (_1927 * cbSceneParam._m0[34u].x);
        _1935 = 1.0 - (_1927 * cbSceneParam._m0[34u].y);
        _1936 = 1.0 - (_1927 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1934 = 1.0;
        _1935 = 1.0;
        _1936 = 1.0;
    }
    float _2000;
    float _2002;
    float _2004;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1988 = fma(_1784, cbSceneParam._m0[63u].w, fma(_1780, cbSceneParam._m0[63u].z, fma(_1776, cbSceneParam._m0[63u].y, _1772 * cbSceneParam._m0[63u].x)));
        float _1989 = fma(_1784, cbSceneParam._m0[60u].w, fma(_1780, cbSceneParam._m0[60u].z, fma(_1776, cbSceneParam._m0[60u].y, _1772 * cbSceneParam._m0[60u].x))) / _1988;
        float _1990 = fma(_1784, cbSceneParam._m0[61u].w, fma(_1780, cbSceneParam._m0[61u].z, fma(_1776, cbSceneParam._m0[61u].y, _1772 * cbSceneParam._m0[61u].x))) / _1988;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1989 >= cbSceneParam._m0[64u].x) && (_1990 >= cbSceneParam._m0[64u].y)) && (_1989 <= cbSceneParam._m0[64u].z)) && (_1990 <= cbSceneParam._m0[64u].w))
        {
            float _2129 = fma(_1784, cbSceneParam._m0[62u].w, fma(_1780, cbSceneParam._m0[62u].z, fma(_1776, cbSceneParam._m0[62u].y, _1772 * cbSceneParam._m0[62u].x))) / _1988;
            float _2133 = isnan(cbSceneParam._m0[41u].w) ? _2129 : (isnan(_2129) ? cbSceneParam._m0[41u].w : max(_2129, cbSceneParam._m0[41u].w));
            float _2176 = (cbSceneParam._m0[33u].x - sqrt(((_1786 * _1786) + (_1785 * _1785)) + (_1787 * _1787))) * cbSceneParam._m0[33u].y;
            float _4287 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
            float _2183 = (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1989, cbSceneParam._m0[33u].w + _1990), _2133), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1989, _1990 - cbSceneParam._m0[33u].z), _2133), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1989 - cbSceneParam._m0[33u].z, _1990 - cbSceneParam._m0[33u].w), _2133), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1989 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1990), _2133), 0.0)).x), vec4(0.25)));
            float _2187 = 1.0 - (_2183 * cbSceneParam._m0[34u].x);
            float _2188 = 1.0 - (_2183 * cbSceneParam._m0[34u].y);
            float _2189 = 1.0 - (_2183 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2189) ? _1936 : (isnan(_1936) ? _2189 : min(_1936, _2189));
            frontier_phi_37_36_ladder_1 = isnan(_2188) ? _1935 : (isnan(_1935) ? _2188 : min(_1935, _2188));
            frontier_phi_37_36_ladder_2 = isnan(_2187) ? _1934 : (isnan(_1934) ? _2187 : min(_1934, _2187));
        }
        else
        {
            frontier_phi_37_36_ladder = _1936;
            frontier_phi_37_36_ladder_1 = _1935;
            frontier_phi_37_36_ladder_2 = _1934;
        }
        _2000 = frontier_phi_37_36_ladder_2;
        _2002 = frontier_phi_37_36_ladder_1;
        _2004 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2000 = _1934;
        _2002 = _1935;
        _2004 = _1936;
    }
    uvec4 _2009 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _2011 = _2009.x * 14u;
    uint _2012 = _2011 + 13u;
    float _2019 = _683 + (-1.0);
    float _2024 = (cbLight._m0[_2012].x * _2019) + 1.0;
    float _2025 = (cbLight._m0[_2012].y * _2019) + 1.0;
    float _2026 = (cbLight._m0[_2012].z * _2019) + 1.0;
    float _2027 = (cbLight._m0[_2012].w * _2019) + 1.0;
    uint _2028 = _2011 + 5u;
    float _2034 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
    uint _2038 = _2011 + 4u;
    float _2048 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
    uint _2052 = _2011 | 1u;
    float _2063 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_518, _519, _520));
    float _2066 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_518, _519, _520));
    float _4323 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _4334 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2071 = (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * 0.3183098733425140380859375;
    float _2073 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * 0.3183098733425140380859375;
    float _2080 = ((cbLight._m0[_2028].x * _2034) * _2073) + (((cbLight._m0[_2038].x * _2000) * _2048) * _2071);
    float _2081 = ((_2034 * cbLight._m0[_2028].y) * _2073) + (((cbLight._m0[_2038].y * _2002) * _2048) * _2071);
    float _2082 = ((_2034 * cbLight._m0[_2028].z) * _2073) + (((cbLight._m0[_2038].z * _2004) * _2048) * _2071);
    uvec4 _2086 = floatBitsToUint(cbLight._m0[_2011 + 12u]);
    bool _2088 = _2086.x == 0u;
    float _2190;
    float _2192;
    float _2194;
    if (_2088)
    {
        _2190 = _2080;
        _2192 = _2081;
        _2194 = _2082;
    }
    else
    {
        uint _2198 = _2011 + 6u;
        float _2214 = (dot(vec3(cbLight._m0[_2011 + 2u].xyz), vec3(_518, _519, _520)) * 0.5) + 0.5;
        float _2215 = _2214 * _2214;
        float _4345 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2216 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2217 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
        _2190 = (((cbLight._m0[_2198].x * 0.3183098733425140380859375) * _2216) * _2217) + _2080;
        _2192 = (((cbLight._m0[_2198].y * 0.3183098733425140380859375) * _2216) * _2217) + _2081;
        _2194 = (((cbLight._m0[_2198].z * 0.3183098733425140380859375) * _2216) * _2217) + _2082;
    }
    bool _2197 = _2086.y == 0u;
    float _2252;
    float _2254;
    float _2256;
    if (_2197)
    {
        _2252 = _2190;
        _2254 = _2192;
        _2256 = _2194;
    }
    else
    {
        uint _2414 = _2011 + 7u;
        float _2430 = (dot(vec3(cbLight._m0[_2011 + 3u].xyz), vec3(_518, _519, _520)) * 0.5) + 0.5;
        float _2431 = _2430 * _2430;
        float _4361 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2432 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2433 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
        _2252 = (((cbLight._m0[_2414].x * 0.3183098733425140380859375) * _2432) * _2433) + _2190;
        _2254 = (((cbLight._m0[_2414].y * 0.3183098733425140380859375) * _2432) * _2433) + _2192;
        _2256 = (((cbLight._m0[_2414].z * 0.3183098733425140380859375) * _2432) * _2433) + _2194;
    }
    uint _2259 = _2011 + 8u;
    float _2272 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2011].w)) * _521) * 0.949999988079071044921875);
    float _2273 = _2272 * _2272;
    float _2274 = cbLight._m0[_2011].x + _597;
    float _2275 = cbLight._m0[_2011].y + _598;
    float _2276 = cbLight._m0[_2011].z + _599;
    float _2280 = inversesqrt(dot(vec3(_2274, _2275, _2276), vec3(_2274, _2275, _2276)));
    float _2281 = _2280 * _2274;
    float _2282 = _2280 * _2275;
    float _2283 = _2280 * _2276;
    float _2284 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_2011].xyz));
    float _4377 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _4388 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _2288 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _2289 = dot(vec3(_518, _519, _520), vec3(_2281, _2282, _2283));
    float _4399 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2292 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _2293 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_2281, _2282, _2283));
    float _4410 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2297 = _2273 * _2273;
    float _2301 = ((_2292 * _2292) * (_2297 + (-1.0))) + 1.0;
    float _2312 = (exp2(log2(1.0 - (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2313 = 1.0 - _2273;
    float _2324 = (0.5 / (((_2288 * ((_2287 * _2313) + _2273)) + 9.9999999392252902907785028219223e-09) + (((_2288 * _2313) + _2273) * _2287))) * _2287;
    float _4421 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2326 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_2297 / ((_2301 * _2301) * 3.141590118408203125));
    uint _2340 = _2011 + 9u;
    float _2351 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2052].w)) * _521) * 0.949999988079071044921875);
    float _2352 = _2351 * _2351;
    float _2353 = cbLight._m0[_2052].x + _597;
    float _2354 = cbLight._m0[_2052].y + _598;
    float _2355 = cbLight._m0[_2052].z + _599;
    float _2359 = inversesqrt(dot(vec3(_2353, _2354, _2355), vec3(_2353, _2354, _2355)));
    float _2360 = _2359 * _2353;
    float _2361 = _2359 * _2354;
    float _2362 = _2359 * _2355;
    float _2363 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_2052].xyz));
    float _4432 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2366 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _2367 = dot(vec3(_518, _519, _520), vec3(_2360, _2361, _2362));
    float _4443 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2370 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2371 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_2360, _2361, _2362));
    float _4454 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2375 = _2352 * _2352;
    float _2379 = ((_2370 * _2370) * (_2375 + (-1.0))) + 1.0;
    float _2388 = (exp2(log2(1.0 - (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2389 = 1.0 - _2352;
    float _2399 = (0.5 / (((_2288 * ((_2366 * _2389) + _2352)) + 9.9999999392252902907785028219223e-09) + (((_2288 * _2389) + _2352) * _2366))) * _2366;
    float _4465 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2401 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2375 / ((_2379 * _2379) * 3.141590118408203125));
    float _2411 = (((_2388 * cbLight._m0[_2340].x) * _2401) * _2034) + ((((cbLight._m0[_2259].x * _2000) * _2312) * _2326) * _2048);
    float _2412 = (((_2388 * cbLight._m0[_2340].y) * _2401) * _2034) + ((((cbLight._m0[_2259].y * _2002) * _2312) * _2326) * _2048);
    float _2413 = (((_2388 * cbLight._m0[_2340].z) * _2401) * _2034) + ((((cbLight._m0[_2259].z * _2004) * _2312) * _2326) * _2048);
    float _2469;
    float _2471;
    float _2473;
    if (_2088)
    {
        _2469 = _2411;
        _2471 = _2412;
        _2473 = _2413;
    }
    else
    {
        uint _2475 = _2011 + 2u;
        uint _2479 = _2011 + 10u;
        float _2493 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2475].w)) * _521) * 0.949999988079071044921875);
        float _2494 = _2493 * _2493;
        float _2495 = cbLight._m0[_2475].x + _597;
        float _2496 = cbLight._m0[_2475].y + _598;
        float _2497 = cbLight._m0[_2475].z + _599;
        float _2501 = inversesqrt(dot(vec3(_2495, _2496, _2497), vec3(_2495, _2496, _2497)));
        float _2502 = _2501 * _2495;
        float _2503 = _2501 * _2496;
        float _2504 = _2501 * _2497;
        float _2505 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_2475].xyz));
        float _4476 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2508 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _2509 = dot(vec3(_518, _519, _520), vec3(_2502, _2503, _2504));
        float _4487 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2512 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2513 = dot(vec3(cbLight._m0[_2475].xyz), vec3(_2502, _2503, _2504));
        float _4498 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2517 = _2494 * _2494;
        float _2521 = ((_2512 * _2512) * (_2517 + (-1.0))) + 1.0;
        float _2530 = (exp2(log2(1.0 - (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2531 = 1.0 - _2494;
        float _2541 = (0.5 / (((_2288 * ((_2508 * _2531) + _2494)) + 9.9999999392252902907785028219223e-09) + (((_2288 * _2531) + _2494) * _2508))) * _2508;
        float _4509 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2543 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2517 / ((_2521 * _2521) * 3.141590118408203125));
        float _2544 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
        _2469 = (((_2530 * cbLight._m0[_2479].x) * _2543) * _2544) + _2411;
        _2471 = (((_2530 * cbLight._m0[_2479].y) * _2543) * _2544) + _2412;
        _2473 = (((_2530 * cbLight._m0[_2479].z) * _2543) * _2544) + _2413;
    }
    float _2575;
    float _2577;
    float _2579;
    if (_2197)
    {
        _2575 = _2469;
        _2577 = _2471;
        _2579 = _2473;
    }
    else
    {
        uint _2586 = _2011 + 3u;
        uint _2590 = _2011 + 11u;
        float _2604 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2586].w)) * _521) * 0.949999988079071044921875);
        float _2605 = _2604 * _2604;
        float _2606 = cbLight._m0[_2586].x + _597;
        float _2607 = cbLight._m0[_2586].y + _598;
        float _2608 = cbLight._m0[_2586].z + _599;
        float _2612 = inversesqrt(dot(vec3(_2606, _2607, _2608), vec3(_2606, _2607, _2608)));
        float _2613 = _2612 * _2606;
        float _2614 = _2612 * _2607;
        float _2615 = _2612 * _2608;
        float _2616 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_2586].xyz));
        float _4525 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2619 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2620 = dot(vec3(_518, _519, _520), vec3(_2613, _2614, _2615));
        float _4536 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2623 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2624 = dot(vec3(cbLight._m0[_2586].xyz), vec3(_2613, _2614, _2615));
        float _4547 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2628 = _2605 * _2605;
        float _2632 = ((_2623 * _2623) * (_2628 + (-1.0))) + 1.0;
        float _2641 = (exp2(log2(1.0 - (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2642 = 1.0 - _2605;
        float _2652 = (0.5 / (((_2288 * ((_2619 * _2642) + _2605)) + 9.9999999392252902907785028219223e-09) + (((_2288 * _2642) + _2605) * _2619))) * _2619;
        float _4558 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2654 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2628 / ((_2632 * _2632) * 3.141590118408203125));
        float _2655 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
        _2575 = (((_2641 * cbLight._m0[_2590].x) * _2654) * _2655) + _2469;
        _2577 = (((_2641 * cbLight._m0[_2590].y) * _2654) * _2655) + _2471;
        _2579 = (((_2641 * cbLight._m0[_2590].z) * _2654) * _2655) + _2473;
    }
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    float _2731;
    if (_2009.y == 0u)
    {
        uvec4 _2676 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2677 = _2676.x;
        uint _2688 = uint((float(_2676.y) * floor(float(uint(cbSceneParam._m0[85u].y * _619) / _2677))) + floor(float(uint(cbSceneParam._m0[85u].x * _618) / _2677)));
        float _2698 = (log2(_1787 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2699 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        uint _2702 = uint(isnan(14.0) ? _2699 : (isnan(_2699) ? 14.0 : min(_2699, 14.0)));
        uvec4 _2707 = texelFetch(g_lightClusterGridBuffer, int(((_2702 << 2u) + (_2688 << 6u)) >> 2u));
        uint _2708 = _2707.x;
        uint _2709 = _2676.z;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        if (((((1u << ((_2709 >> 4u) & 15u)) + 4294967295u) & _2708) == 0u) || ((_2709 & 240u) == 0u))
        {
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
            _2798 = 0.0;
        }
        else
        {
            float _2789;
            float _2791;
            float _2793;
            float _2795;
            float _2797;
            float _2799;
            float _2941 = 0.0;
            float _2942 = 0.0;
            float _2943 = 0.0;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            uint _2947 = 0u;
            uint _2956;
            bool _2957;
            for (;;)
            {
                _2956 = texelFetch(g_lightClassification, int((((_2702 << 5u) + (_2688 << 9u)) + (_2947 << 2u)) >> 2u)).x;
                _2957 = _2956 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2957)
                {
                    frontier_phi_71_pred = _2946;
                    frontier_phi_71_pred_1 = _2945;
                    frontier_phi_71_pred_2 = _2944;
                    frontier_phi_71_pred_3 = _2943;
                    frontier_phi_71_pred_4 = _2942;
                    frontier_phi_71_pred_5 = _2941;
                }
                else
                {
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    uint _3092;
                    _3086 = _2941;
                    _3087 = _2942;
                    _3088 = _2943;
                    _3089 = _2944;
                    _3090 = _2945;
                    _3091 = _2946;
                    _3092 = _2956;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    for (;;)
                    {
                        uint _3096 = uint(findLSB(_3092)) + (_2947 << 5u);
                        uint _3093 = (_3092 + 4294967295u) & _3092;
                        uint _3098 = _3096 * 48u;
                        vec4 _3112 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3098)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 3u)).x));
                        uint _3118 = (_3096 * 48u) + 4u;
                        vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3118)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 3u)).x));
                        uint _3137 = (_3096 * 48u) + 8u;
                        vec3 _3148 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3137)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 2u)).x));
                        float _3152 = _3112.x - _1785;
                        float _3153 = _3112.y - _1786;
                        float _3154 = _3112.z - _1787;
                        float _3155 = dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154));
                        float _3158 = inversesqrt(_3155);
                        float _3159 = _3158 * _3152;
                        float _3160 = _3158 * _3153;
                        float _3161 = _3158 * _3154;
                        float _3162 = dot(vec3(_639, _642, _645), vec3(_3159, _3160, _3161));
                        float _3167 = 1.0 - (_3155 * _3112.w);
                        float _4584 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3168 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                        float _3169 = sqrt(_3155) * _3131.w;
                        float _3172 = 1.39999997615814208984375 / (_3169 + 1.39999997615814208984375);
                        float _3173 = _3172 * _3172;
                        float _3176 = ((1.0 - _3173) * _3162) + _3173;
                        float _3179 = _3169 * _3169;
                        float _3183 = ((isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0))) * _3168) / ((_3179 * 0.699999988079071044921875) + 1.0);
                        float _3187 = (-0.0) - _1785;
                        float _3188 = (-0.0) - _1786;
                        float _3189 = (-0.0) - _1787;
                        float _3193 = inversesqrt(dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189)));
                        float _3194 = _3193 * _3187;
                        float _3195 = _3193 * _3188;
                        float _3196 = _3193 * _3189;
                        float _3203 = exp2(log2(1.0 / ((_3179 * 3.5) + 5.0)) * 0.25);
                        float _3204 = 1.0 - _699;
                        float _3211 = sqrt(1.0 - ((1.0 - (_3204 * _3204)) * (1.0 - (_3203 * _3203))));
                        float _3212 = _3211 * _3211;
                        float _3213 = _3212 * _3212;
                        float _3214 = _3194 + _3159;
                        float _3215 = _3195 + _3160;
                        float _3216 = _3196 + _3161;
                        float _3220 = inversesqrt(dot(vec3(_3214, _3215, _3216), vec3(_3214, _3215, _3216)));
                        float _3224 = dot(vec3(_639, _642, _645), vec3(_3194, _3195, _3196));
                        float _4600 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3227 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                        float _3228 = dot(vec3(_639, _642, _645), vec3(_3220 * _3214, _3220 * _3215, _3220 * _3216));
                        float _4611 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3231 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                        float _3235 = ((_3231 * _3231) * (_3213 + (-1.0))) + 1.0;
                        float _3236 = _3172 * _3212;
                        float _3237 = _3236 * _3236;
                        float _3240 = ((1.0 - _3237) * _3162) + _3237;
                        float _4622 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3241 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3242 = 1.0 - _3212;
                        float _3252 = (0.5 / (((_3241 * ((_3227 * _3242) + _3212)) + 9.9999999392252902907785028219223e-09) + (((_3241 * _3242) + _3212) * _3227))) * _3241;
                        float _4633 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                        float _3262 = (((_3213 * 3.1415927410125732421875) * (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) / ((_3235 * _3235) * ((_3179 * 2.1991131305694580078125) + 3.141590118408203125))) * _3168;
                        _3016 = (_3183 * _3131.x) + _3089;
                        _3017 = (_3183 * _3131.y) + _3090;
                        _3018 = (_3183 * _3131.z) + _3091;
                        _3013 = (_3262 * _3148.x) + _3086;
                        _3014 = (_3262 * _3148.y) + _3087;
                        _3015 = (_3262 * _3148.z) + _3088;
                        if (_3093 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3086 = _3013;
                            _3087 = _3014;
                            _3088 = _3015;
                            _3089 = _3016;
                            _3090 = _3017;
                            _3091 = _3018;
                            _3092 = _3093;
                        }
                    }
                    frontier_phi_71_pred = _3018;
                    frontier_phi_71_pred_1 = _3017;
                    frontier_phi_71_pred_2 = _3016;
                    frontier_phi_71_pred_3 = _3015;
                    frontier_phi_71_pred_4 = _3014;
                    frontier_phi_71_pred_5 = _3013;
                }
                _2799 = frontier_phi_71_pred;
                _2797 = frontier_phi_71_pred_1;
                _2795 = frontier_phi_71_pred_2;
                _2793 = frontier_phi_71_pred_3;
                _2791 = frontier_phi_71_pred_4;
                _2789 = frontier_phi_71_pred_5;
                uint _2948 = _2947 + 1u;
                if (_2948 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2941 = _2789;
                    _2942 = _2791;
                    _2943 = _2793;
                    _2944 = _2795;
                    _2945 = _2797;
                    _2946 = _2799;
                    _2947 = _2948;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
            _2798 = _2799;
        }
        uvec4 _2802 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2803 = _2802.z;
        uint _2805 = (_2803 >> 8u) & 15u;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        if (((4294967295u << _2805) & _2708) == 0u)
        {
            _2909 = _2788;
            _2911 = _2790;
            _2913 = _2792;
            _2915 = _2794;
            _2917 = _2796;
            _2919 = _2798;
        }
        else
        {
            float _2934 = inversesqrt(dot(vec3(_1785, _1786, _1787), vec3(_1785, _1786, _1787)));
            float _2935 = _2934 * _1785;
            float _2936 = _2934 * _1786;
            float _2937 = _2934 * _1787;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2805 < ((_2803 >> 12u) & 15u))
            {
                float _2910;
                float _2912;
                float _2914;
                float _2916;
                float _2918;
                float _2920;
                float _3069 = _2788;
                float _3070 = _2790;
                float _3071 = _2792;
                float _3072 = _2794;
                float _3073 = _2796;
                float _3074 = _2798;
                uint _3075 = _2805;
                uint _3084;
                bool _3085;
                for (;;)
                {
                    _3084 = texelFetch(g_lightClassification, int((((_2702 << 5u) + (_2688 << 9u)) + (_3075 << 2u)) >> 2u)).x;
                    _3085 = _3084 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3085)
                    {
                        frontier_phi_82_pred = _3074;
                        frontier_phi_82_pred_1 = _3073;
                        frontier_phi_82_pred_2 = _3072;
                        frontier_phi_82_pred_3 = _3071;
                        frontier_phi_82_pred_4 = _3070;
                        frontier_phi_82_pred_5 = _3069;
                    }
                    else
                    {
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3289 = _3069;
                        float _3290 = _3070;
                        float _3291 = _3071;
                        float _3292 = _3072;
                        float _3293 = _3073;
                        float _3294 = _3074;
                        uint _3295 = _3084;
                        uint _3296;
                        vec4 _3321;
                        float _3322;
                        vec4 _3337;
                        vec3 _3349;
                        vec4 _3365;
                        vec4 _3381;
                        float _3427;
                        bool _3428;
                        for (;;)
                        {
                            uint _3306 = ((_3075 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3295));
                            _3296 = (_3295 + 4294967295u) & _3295;
                            uint _3308 = _3306 * 40u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            _3322 = _3321.w;
                            uint _3324 = (_3306 * 40u) + 4u;
                            _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3339 = (_3306 * 40u) + 8u;
                            _3349 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x));
                            uint _3352 = (_3306 * 40u) + 16u;
                            _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            uint _3368 = (_3306 * 40u) + 20u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3383 = (_3306 * 40u) + 24u;
                            vec4 _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3402 = (_3306 * 40u) + 28u;
                            vec4 _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            _3427 = fma(_1787, _3415.z, fma(_1786, _3415.y, _3415.x * _1785)) + _3415.w;
                            _3428 = !((fma(_1787, _3396.z, fma(_1786, _3396.y, _3396.x * _1785)) + _3396.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3428)
                            {
                                float _3455 = _3321.x - _1785;
                                float _3456 = _3321.y - _1786;
                                float _3457 = _3321.z - _1787;
                                float _3458 = dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457));
                                float _3461 = inversesqrt(_3458);
                                float _3462 = _3461 * _3455;
                                float _3463 = _3461 * _3456;
                                float _3464 = _3461 * _3457;
                                float _3468 = 1.0 - (_3458 / (_3322 * _3322));
                                float _4644 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                                float _3469 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                                float _3473 = sqrt(_3458) * _3337.w;
                                float _3475 = 1.39999997615814208984375 / (_3473 + 1.39999997615814208984375);
                                float _3476 = _3475 * _3475;
                                float _3479 = ((1.0 - _3476) * dot(vec3(_3462, _3463, _3464), vec3(_639, _642, _645))) + _3476;
                                float _3482 = _3473 * _3473;
                                float _3486 = (fma(_1787, _3365.z, fma(_1786, _3365.y, _3365.x * _1785)) + _3365.w) / _3427;
                                float _3487 = (fma(_1787, _3381.z, fma(_1786, _3381.y, _3381.x * _1785)) + _3381.w) / _3427;
                                float _3491 = 1.0 - dot(vec2(_3486, _3487), vec2(_3486, _3487));
                                float _4660 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3492 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                                float _3493 = _3492 * (((isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0))) * _3469) / ((_3482 * 0.699999988079071044921875) + 1.0));
                                float _3505 = exp2(log2(1.0 / ((_3482 * 3.5) + 5.0)) * 0.25);
                                float _3506 = 1.0 - _699;
                                float _3513 = sqrt(1.0 - ((1.0 - (_3506 * _3506)) * (1.0 - (_3505 * _3505))));
                                float _3514 = _3513 * _3513;
                                float _3515 = _3514 * _3514;
                                float _3516 = _3462 - _2935;
                                float _3517 = _3463 - _2936;
                                float _3518 = _3464 - _2937;
                                float _3522 = inversesqrt(dot(vec3(_3516, _3517, _3518), vec3(_3516, _3517, _3518)));
                                float _3526 = dot(vec3(_639, _642, _645), vec3((-0.0) - _2935, (-0.0) - _2936, (-0.0) - _2937));
                                float _4671 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3529 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                                float _3530 = dot(vec3(_639, _642, _645), vec3(_3522 * _3516, _3522 * _3517, _3522 * _3518));
                                float _4682 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3533 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3537 = ((_3533 * _3533) * (_3515 + (-1.0))) + 1.0;
                                float _3538 = _3475 * _3514;
                                float _3539 = _3538 * _3538;
                                float _3545 = ((1.0 - _3539) * dot(vec3(_639, _642, _645), vec3(_3462, _3463, _3464))) + _3539;
                                float _4693 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3546 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3547 = 1.0 - _3514;
                                float _3557 = (0.5 / (((_3546 * ((_3529 * _3547) + _3514)) + 9.9999999392252902907785028219223e-09) + (((_3546 * _3547) + _3514) * _3529))) * _3546;
                                float _4704 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3567 = (_3492 * _3469) * (((_3515 * 3.1415927410125732421875) * (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) / ((_3537 * _3537) * ((_3482 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3493 * _3337.z;
                                frontier_phi_88_pred_1 = _3493 * _3337.y;
                                frontier_phi_88_pred_2 = _3493 * _3337.x;
                                frontier_phi_88_pred_3 = _3567 * _3349.z;
                                frontier_phi_88_pred_4 = _3567 * _3349.y;
                                frontier_phi_88_pred_5 = _3567 * _3349.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3576 = frontier_phi_88_pred;
                            _3575 = frontier_phi_88_pred_1;
                            _3574 = frontier_phi_88_pred_2;
                            _3573 = frontier_phi_88_pred_3;
                            _3572 = frontier_phi_88_pred_4;
                            _3571 = frontier_phi_88_pred_5;
                            _3279 = _3574 + _3292;
                            _3280 = _3575 + _3293;
                            _3281 = _3576 + _3294;
                            _3276 = _3571 + _3289;
                            _3277 = _3572 + _3290;
                            _3278 = _3573 + _3291;
                            if (_3296 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3296;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3281;
                        frontier_phi_82_pred_1 = _3280;
                        frontier_phi_82_pred_2 = _3279;
                        frontier_phi_82_pred_3 = _3278;
                        frontier_phi_82_pred_4 = _3277;
                        frontier_phi_82_pred_5 = _3276;
                    }
                    _2920 = frontier_phi_82_pred;
                    _2918 = frontier_phi_82_pred_1;
                    _2916 = frontier_phi_82_pred_2;
                    _2914 = frontier_phi_82_pred_3;
                    _2912 = frontier_phi_82_pred_4;
                    _2910 = frontier_phi_82_pred_5;
                    uint _3076 = _3075 + 1u;
                    if (_3076 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3069 = _2910;
                        _3070 = _2912;
                        _3071 = _2914;
                        _3072 = _2916;
                        _3073 = _2918;
                        _3074 = _2920;
                        _3075 = _3076;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2916;
                frontier_phi_63_64_ladder_1 = _2920;
                frontier_phi_63_64_ladder_2 = _2918;
                frontier_phi_63_64_ladder_3 = _2914;
                frontier_phi_63_64_ladder_4 = _2912;
                frontier_phi_63_64_ladder_5 = _2910;
            }
            else
            {
                frontier_phi_63_64_ladder = _2794;
                frontier_phi_63_64_ladder_1 = _2798;
                frontier_phi_63_64_ladder_2 = _2796;
                frontier_phi_63_64_ladder_3 = _2792;
                frontier_phi_63_64_ladder_4 = _2790;
                frontier_phi_63_64_ladder_5 = _2788;
            }
            _2909 = frontier_phi_63_64_ladder_5;
            _2911 = frontier_phi_63_64_ladder_4;
            _2913 = frontier_phi_63_64_ladder_3;
            _2915 = frontier_phi_63_64_ladder;
            _2917 = frontier_phi_63_64_ladder_2;
            _2919 = frontier_phi_63_64_ladder_1;
        }
        float _2924 = isnan(1.0) ? _683 : (isnan(_683) ? 1.0 : min(_683, 1.0));
        _2721 = (_2924 * _2915) + _2252;
        _2723 = (_2924 * _2917) + _2254;
        _2725 = (_2924 * _2919) + _2256;
        _2727 = ((_2909 * 0.039999999105930328369140625) * _2924) + _2575;
        _2729 = ((_2911 * 0.039999999105930328369140625) * _2924) + _2577;
        _2731 = ((_2913 * 0.039999999105930328369140625) * _2924) + _2579;
    }
    else
    {
        _2721 = _2252;
        _2723 = _2254;
        _2725 = _2256;
        _2727 = _2575;
        _2729 = _2577;
        _2731 = _2579;
    }
    float _4720 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4731 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4742 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _2748 = ((isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_2721 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _683))) + ((_2727 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1517)) * cbPerFrame._m0[3u].x);
    float _2749 = ((isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2723 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _683))) + ((_2729 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1517)) * cbPerFrame._m0[3u].x);
    float _2750 = ((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2725 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _683))) + ((_2731 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1517)) * cbPerFrame._m0[3u].x);
    uint _2751 = _295 + 6u;
    float _2759 = _618 / cbSceneParam._m0[86u].x;
    float _2760 = _619 / cbSceneParam._m0[86u].y;
    vec4 _2774 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2759, _2760, (log2((isnan(cbSceneParam._m0[77u].w) ? _539 : (isnan(_539) ? cbSceneParam._m0[77u].w : min(_539, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2776 = _2774.x;
    float _2777 = _2774.y;
    float _2778 = _2774.z;
    float _2779 = _2774.w;
    float _2851;
    float _2853;
    float _2855;
    float _2857;
    if (_539 > cbSceneParam._m0[78u].w)
    {
        float _2813 = isnan(_539) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _539 : min(cbSceneParam._m0[80u].w, _539));
        float _2814 = _2813 / _539;
        float _2825 = _2814 * _590;
        float _2826 = _591 * _2814;
        float _2827 = (-0.0) - _2826;
        float _2829 = _2814 * _592;
        float _2831 = (cbSceneParam._m0[77u].w * _2827) / _2813;
        float _2832 = _2831 + cbSceneParam._m0[79u].w;
        float _2833 = cbSceneParam._m0[79u].w - _2826;
        float _2839 = sqrt(((_2825 * _2825) + (_2826 * _2826)) + (_2829 * _2829));
        float _2842 = (1.0 - (cbSceneParam._m0[77u].w / _2813)) * _2839;
        float _2847 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2849 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3026;
        if (abs((_2827 - _2831) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3026 = ((((_2832 > 0.0) ? exp2(_2847 * _2832) : (2.0 - exp2(_2849 * _2832))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2842;
        }
        else
        {
            float _2970 = 1.0 / cbSceneParam._m0[80u].x;
            float _2971 = isnan(_2833) ? _2832 : (isnan(_2832) ? _2833 : max(_2832, _2833));
            float _2972 = isnan(_2833) ? _2832 : (isnan(_2832) ? _2833 : min(_2832, _2833));
            float _2981 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : min(_2971, 0.0));
            float _2982 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : min(_2972, 0.0));
            _3026 = ((abs(_2839 / _2827) * cbSceneParam._m0[80u].y) * ((((_2981 - _2982) * 2.0) - ((exp2(_2847 * (isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0)))) - exp2(_2847 * (isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0))))) * _2970)) - ((exp2(_2849 * _2981) - exp2(_2849 * _2982)) * _2970))) + (_2842 * cbSceneParam._m0[80u].z);
        }
        vec4 _3028 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2759, _2760, 1.0), 0.0);
        float _3037 = exp2((_3026 * (-1.44269502162933349609375)) * (1.0 - _3028.w));
        float _3038 = log2(_3037);
        float _3054 = log2(_2779);
        _2851 = (exp2(_3054 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3038 * cbSceneParam._m0[78u].x)) * _3028.x) / cbSceneParam._m0[78u].x)) + _2776;
        _2853 = (exp2(_3054 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3038 * cbSceneParam._m0[78u].y)) * _3028.y) / cbSceneParam._m0[78u].y)) + _2777;
        _2855 = (exp2(_3054 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3038 * cbSceneParam._m0[78u].z)) * _3028.z) / cbSceneParam._m0[78u].z)) + _2778;
        _2857 = _3037 * _2779;
    }
    else
    {
        _2851 = _2776;
        _2853 = _2777;
        _2855 = _2778;
        _2857 = _2779;
    }
    bool _3064;
    vec4 _2867;
    vec4 _2889;
    float _2891;
    float _2895;
    float _2896;
    float _2897;
    float _2898;
    bool _2908;
    for (;;)
    {
        _2867 = cbMatDynParam._m0[0u];
        float _2869 = roundEven(_2867.y);
        bool _2870 = _2869 == 3.0;
        float _2871 = log2(_2857);
        float _2878 = exp2(_2871 * cbSceneParam._m0[78u].x) * _2748;
        float _2879 = exp2(_2871 * cbSceneParam._m0[78u].y) * _2749;
        float _2880 = exp2(_2871 * cbSceneParam._m0[78u].z) * _2750;
        float _2887 = _606 + (-0.5);
        _2889 = cbMtdParam._m0[1u];
        _2891 = _2889.y * _2887;
        float _2894 = (_2869 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2895 = _2894 * (_2870 ? _2878 : (_2878 + (cbSceneParam._m0[72u].w * _2851)));
        _2896 = _2894 * (_2870 ? _2879 : (_2879 + (cbSceneParam._m0[72u].w * _2853)));
        _2897 = _2894 * (_2870 ? _2880 : (_2880 + (cbSceneParam._m0[72u].w * _2855)));
        _2898 = _2887 * 0.999000012874603271484375;
        _2908 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2908)
        {
            if ((cbInstanceData._m0[_295 + 7u].x + _2898) < 0.5)
            {
                _3064 = true;
                break;
            }
        }
        uint _3005 = _658 + uint(_2867.w);
        if ((cbInstanceData._m0[_3005].w < 1.0) && ((cbInstanceData._m0[_3005].w + _2898) < 0.5))
        {
            _3064 = true;
            break;
        }
        if ((_2891 + 1.0) < _2889.x)
        {
            _3064 = true;
            break;
        }
        _3064 = false;
        break;
    }
    float _3267;
    if (_3064)
    {
        discard_state = true;
        _3267 = 0.0;
    }
    else
    {
        _3267 = cbInstanceData._m0[_2751].w;
    }
    SV_Target.x = _2895;
    SV_Target.y = _2896;
    SV_Target.z = _2897;
    SV_Target.w = _3267;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2751].w;
    discard_exit();
}


