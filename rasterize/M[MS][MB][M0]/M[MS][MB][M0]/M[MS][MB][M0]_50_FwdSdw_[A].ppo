#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1199;
float _3842;
float _3843;
float _3844;
float _3845;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _286 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _292 = _286.x * cbMtdParam._m0[9u].x;
    float _293 = _286.y * cbMtdParam._m0[9u].y;
    float _294 = _286.z * cbMtdParam._m0[9u].z;
    vec4 _313 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _333 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _359 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _363 = _359.z;
    float _367 = (_359.x * 2.0) + (-1.0);
    float _368 = (_359.y * 2.0) + (-1.0);
    float _369 = dot(vec2(_367, _368), vec2(_367, _368));
    float _3854 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _375 = sqrt(1.0 - (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))));
    float _380 = _367 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_333.x * 2.0) + (-1.0)));
    float _381 = _368 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_333.y * 2.0) + (-1.0)));
    float _384 = fma(_375, _235, fma(_381, _242, _380 * _228));
    float _387 = fma(_375, _236, fma(_381, _243, _380 * _229));
    float _390 = fma(_375, _237, fma(_381, _244, _380 * _230));
    float _394 = inversesqrt(dot(vec3(_384, _387, _390), vec3(_384, _387, _390)));
    vec4 _430 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _432 = _430.x;
    float _433 = 1.0 - _432;
    float _442 = (cbMtdParam._m0[19u].x + dot(vec4(_394 * _384, _394 * _387, _394 * _390, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_432 - _433) * cbMtdParam._m0[24u].z) + _433) * cbMtdParam._m0[21u].z);
    float _3865 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _445 = (-0.0) - cbMtdParam._m0[24u].y;
    float _447 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _447 : (isnan(_447) ? 1.0 : min(_447, 1.0));
    float _455 = _443 - ((_443 * TEXCOORD_8.x) * _448);
    float _456 = _443 - ((_443 * TEXCOORD_8.y) * _448);
    float _457 = _443 - ((_443 * TEXCOORD_8.z) * _448);
    float _464 = (_455 * ((_313.x * cbMtdParam._m0[18u].x) - _292)) + _292;
    float _465 = (_456 * ((_313.y * cbMtdParam._m0[18u].y) - _293)) + _293;
    float _466 = (_457 * ((_313.z * cbMtdParam._m0[18u].z) - _294)) + _294;
    vec4 _478 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _480 = _478.x;
    float _481 = 1.0 - _480;
    float _511 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_480 - _481) * cbMtdParam._m0[24u].w) + _481) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3886 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _520 = ((((cbMtdParam._m0[10u].x - _464) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _512) + _464;
    float _521 = ((((cbMtdParam._m0[10u].y - _465) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _512) + _465;
    float _522 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _466)) * _512) + _466;
    float _527 = (((_333.z - _363) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _363;
    vec4 _541 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _548 = (_541.x * 2.0) + (-1.0);
    float _549 = (_541.y * 2.0) + (-1.0);
    float _550 = dot(vec2(_548, _549), vec2(_548, _549));
    float _3897 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _558 = ((_541.z - _527) * _455) + _527;
    float _561 = ((cbMtdParam._m0[23u].y - _558) * _512) + _558;
    vec4 _580 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _586 = (_580.x * 2.0) + (-1.0);
    float _587 = (_580.y * 2.0) + (-1.0);
    float _588 = dot(vec2(_586, _587), vec2(_586, _587));
    float _3908 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _603 = ((sqrt(1.0 - (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) - _375) * _457) + _375;
    float _606 = (((_548 - _380) * _455) + _380) + (cbMtdParam._m0[21u].x * _380);
    float _607 = (((_549 - _381) * _456) + _381) + (cbMtdParam._m0[21u].x * _381);
    float _618 = (((_586 - _606) + (_606 * cbMtdParam._m0[22u].z)) * _512) + _606;
    float _619 = (((_587 - _607) + (_607 * cbMtdParam._m0[22u].z)) * _512) + _607;
    float _620 = (_512 * (sqrt(1.0 - (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) - _603)) + _603;
    float _622 = cbMtdParam._m0[22u].x + _359.w;
    float _625 = fma(_620, _235, fma(_619, _242, _618 * _228));
    float _628 = fma(_620, _236, fma(_619, _243, _618 * _229));
    float _631 = fma(_620, _237, fma(_619, _244, _618 * _230));
    float _635 = inversesqrt(dot(vec3(_625, _628, _631), vec3(_625, _628, _631)));
    float _636 = _635 * _625;
    float _637 = _635 * _628;
    float _638 = _635 * _631;
    float _3919 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _639 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _3930 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3941 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _3952 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _3963 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _657 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _707 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _697);
    float _708 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _697);
    float _709 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _697);
    float _713 = inversesqrt(dot(vec3(_707, _708, _709), vec3(_707, _708, _709)));
    float _714 = _707 * _713;
    float _715 = _708 * _713;
    float _716 = _709 * _713;
    vec4 _721 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _723 = _721.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _880 = sqrt(((_707 * _707) + (_708 * _708)) + (_709 * _709));
        float _886 = (cbMatDynParam._m0[5u].x * _880) + cbMatDynParam._m0[5u].y;
        float _3974 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _891 = (cbMatDynParam._m0[5u].z * _880) + cbMatDynParam._m0[5u].w;
        float _3985 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) - _887)) + _887) < ((_723 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _735 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _736 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _756 = fma(_638, cbSceneParam._m0[5u].z, fma(_637, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _636));
    float _759 = fma(_638, cbSceneParam._m0[6u].z, fma(_637, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _636));
    float _762 = fma(_638, cbSceneParam._m0[7u].z, fma(_637, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _636));
    uint _775 = _247 + 9u;
    uint _776 = _775 + uint(cbMatDynParam._m0[0u].w);
    float _782 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * cbInstanceData._m0[_776].x;
    float _783 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) * cbInstanceData._m0[_776].y;
    float _784 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * cbInstanceData._m0[_776].z;
    float _3996 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _4007 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    vec4 _796 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _735, cbSceneParam._m0[86u].y * _736));
    float _800 = ((isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * TEXCOORD_5.w) * _796.x;
    float _801 = dot(vec3(_636, _637, _638), vec3(_714, _715, _716));
    float _804 = _801 * 2.0;
    float _808 = (_804 * _636) - _714;
    float _809 = (_804 * _637) - _715;
    float _810 = (_804 * _638) - _716;
    float _814 = abs(dot(vec3(_714, _715, _716), vec3(_636, _637, _638)));
    float _4029 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _816 = sqrt(_639);
    float _829 = exp2((_816 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_816 * 3.0));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1198;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _923 = fma(_869, cbModelParam._m0[26u].z, fma(_865, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _861));
        float _927 = fma(_869, cbModelParam._m0[27u].z, fma(_865, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _861));
        float _931 = fma(_869, cbModelParam._m0[28u].z, fma(_865, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _861));
        float _956 = _861 + _636;
        float _957 = _865 + _637;
        float _958 = _869 + _638;
        float _968 = fma(_958, cbModelParam._m0[26u].z, fma(_957, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _956)) - _923;
        float _969 = fma(_958, cbModelParam._m0[27u].z, fma(_957, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _956)) - _927;
        float _970 = fma(_958, cbModelParam._m0[28u].z, fma(_957, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _956)) - _931;
        float _974 = inversesqrt(dot(vec3(_968, _969, _970), vec3(_968, _969, _970)));
        float _987 = ((_974 * _968) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_923 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_974 * _969) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_927 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _989 = ((_974 * _970) / cbModelParam._m0[34u].z) + ((((((_931 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        float _1026 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_992.x + (-0.5));
        float _1028 = _1026 * (_992.y + (-0.5));
        float _1029 = _1026 * (_992.z + (-0.5));
        float _1036 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_999.x + (-0.5));
        float _1038 = _1036 * (_999.y + (-0.5));
        float _1039 = _1036 * (_999.z + (-0.5));
        float _1046 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1006.x + (-0.5));
        float _1048 = _1046 * (_1006.y + (-0.5));
        float _1049 = _1046 * (_1006.z + (-0.5));
        float _1056 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1013.x + (-0.5));
        float _1058 = _1056 * (_1013.y + (-0.5));
        float _1059 = _1056 * (_1013.z + (-0.5));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = _1027 * 0.5;
        float _1064 = _1037 * 0.5;
        float _1065 = _1047 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1080 = (dot(vec3(_636, _637, _638), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1090 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _4077 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1092 + 1.0))) + _1097) * _1060;
        float _1107 = _1028 * 0.5;
        float _1108 = _1038 * 0.5;
        float _1109 = _1048 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_636, _637, _638), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _4088 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _4099 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _4110 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1134 + 1.0))) + _1139) * _1061;
        float _1149 = _1029 * 0.5;
        float _1150 = _1039 * 0.5;
        float _1151 = _1049 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_636, _637, _638), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _4143 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1176 + 1.0))) + _1181) * _1062;
        _1198 = _1029;
        _1200 = _1028;
        _1201 = _1027;
        _1202 = _1039;
        _1203 = _1038;
        _1204 = _1037;
        _1205 = _1049;
        _1206 = _1048;
        _1207 = _1047;
        _1208 = _1062;
        _1209 = _1061;
        _1210 = _1060;
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1212 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1213 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
    }
    else
    {
        _1198 = _1199;
        _1200 = _1199;
        _1201 = _1199;
        _1202 = _1199;
        _1203 = _1199;
        _1204 = _1199;
        _1205 = _1199;
        _1206 = _1199;
        _1207 = _1199;
        _1208 = _1199;
        _1209 = _1199;
        _1210 = _1199;
        _1211 = 0.0;
        _1212 = 0.0;
        _1213 = 0.0;
    }
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1241 = fma(_869, cbModelParam._m0[30u].z, fma(_865, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _861));
        float _1245 = fma(_869, cbModelParam._m0[31u].z, fma(_865, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _861));
        float _1249 = fma(_869, cbModelParam._m0[32u].z, fma(_865, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _861));
        float _1272 = _861 + _636;
        float _1273 = _865 + _637;
        float _1274 = _869 + _638;
        float _1284 = fma(_1274, cbModelParam._m0[30u].z, fma(_1273, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1272)) - _1241;
        float _1285 = fma(_1274, cbModelParam._m0[31u].z, fma(_1273, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1272)) - _1245;
        float _1286 = fma(_1274, cbModelParam._m0[32u].z, fma(_1273, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1272)) - _1249;
        float _1290 = inversesqrt(dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286)));
        float _1303 = ((_1290 * _1284) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1241 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1304 = ((_1290 * _1285) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1245 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1305 = ((_1290 * _1286) / cbModelParam._m0[35u].z) + ((((((_1249 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        float _1340 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1307.x + (-0.5));
        float _1342 = _1340 * (_1307.y + (-0.5));
        float _1343 = _1340 * (_1307.z + (-0.5));
        float _1350 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1314.x + (-0.5));
        float _1352 = _1350 * (_1314.y + (-0.5));
        float _1353 = _1350 * (_1314.z + (-0.5));
        float _1360 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1321.x + (-0.5));
        float _1362 = _1360 * (_1321.y + (-0.5));
        float _1363 = _1360 * (_1321.z + (-0.5));
        float _1370 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1328.x + (-0.5));
        float _1372 = _1370 * (_1328.y + (-0.5));
        float _1373 = _1370 * (_1328.z + (-0.5));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = _1341 * 0.5;
        float _1378 = _1351 * 0.5;
        float _1379 = _1361 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_636, _637, _638), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _4206 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1404 + 1.0))) + _1409) * _1374;
        float _1419 = _1342 * 0.5;
        float _1420 = _1352 * 0.5;
        float _1421 = _1362 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_636, _637, _638), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _4239 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1446 + 1.0))) + _1451) * _1375;
        float _1461 = _1343 * 0.5;
        float _1462 = _1353 * 0.5;
        float _1463 = _1363 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_636, _637, _638), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _4250 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _4261 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _4272 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_1488 + 1.0))) + _1493) * _1376;
        _1510 = _1343;
        _1511 = _1342;
        _1512 = _1341;
        _1513 = _1353;
        _1514 = _1352;
        _1515 = _1351;
        _1516 = _1363;
        _1517 = _1362;
        _1518 = _1361;
        _1519 = _1376;
        _1520 = _1375;
        _1521 = _1374;
        _1522 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
        _1523 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
        _1524 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
    }
    else
    {
        _1510 = _1199;
        _1511 = _1199;
        _1512 = _1199;
        _1513 = _1199;
        _1514 = _1199;
        _1515 = _1199;
        _1516 = _1199;
        _1517 = _1199;
        _1518 = _1199;
        _1519 = _1199;
        _1520 = _1199;
        _1521 = _1199;
        _1522 = 0.0;
        _1523 = 0.0;
        _1524 = 0.0;
    }
    float _1534 = (cbModelParam._m0[1u].x * (_1522 - _1211)) + _1211;
    float _1535 = (cbModelParam._m0[1u].x * (_1523 - _1212)) + _1212;
    float _1536 = (cbModelParam._m0[1u].x * (_1524 - _1213)) + _1213;
    float _1557 = fma(_1536, cbSceneParam._m0[89u].z, fma(_1535, cbSceneParam._m0[89u].y, _1534 * cbSceneParam._m0[89u].x));
    float _1560 = fma(_1536, cbSceneParam._m0[90u].z, fma(_1535, cbSceneParam._m0[90u].y, _1534 * cbSceneParam._m0[90u].x));
    float _1563 = fma(_1536, cbSceneParam._m0[91u].z, fma(_1535, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1534));
    float _1578 = _808 * 0.5;
    float _1579 = _809 * 0.5;
    float _1580 = _810 * 0.5;
    float _1581 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1512, _1515, _1518, _1521));
    float _1584 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1511, _1514, _1517, _1520));
    float _1587 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1510, _1513, _1516, _1519));
    float _1621;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1594 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1198, _1202, _1205, _1208));
        float _1598 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1200, _1203, _1206, _1209));
        float _1602 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1201, _1204, _1207, _1210));
        float _1609 = dot(vec4(cbModelParam._m0[39u]), vec4(_1578, _1579, _1580, 1.0));
        _1621 = dot(vec3(isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1609) ? 0.0 : (isnan(0.0) ? _1609 : max(0.0, _1609))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1621 = 1.0;
    }
    float _1632;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1623 = dot(vec4(cbModelParam._m0[40u]), vec4(_1578, _1579, _1580, 1.0));
        _1632 = dot(vec3(isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1623) ? 0.0 : (isnan(0.0) ? _1623 : max(0.0, _1623))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1632 = 1.0;
    }
    float _1636 = (_1632 * cbModelParam._m0[1u].x) + (_1621 * (1.0 - cbModelParam._m0[1u].x));
    float _1646 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _639);
    float _1647 = isnan(_1646) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1646 : min(cbModelParam._m0[25u].z, _1646));
    float _1727;
    float _1729;
    float _1731;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1694 = fma(_869, cbModelParam._m0[13u].z, fma(_865, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _861)) + cbModelParam._m0[13u].w;
        float _1698 = fma(_869, cbModelParam._m0[14u].z, fma(_865, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _861)) + cbModelParam._m0[14u].w;
        float _1702 = fma(_869, cbModelParam._m0[15u].z, fma(_865, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _861)) + cbModelParam._m0[15u].w;
        float _1705 = fma(_810, cbModelParam._m0[13u].z, fma(_809, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _808));
        float _1708 = fma(_810, cbModelParam._m0[14u].z, fma(_809, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _808));
        float _1711 = fma(_810, cbModelParam._m0[15u].z, fma(_809, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _808));
        float _1739;
        if (_1705 > 0.0)
        {
            _1739 = abs((1.0 - _1694) / _1705);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1694 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1739 = frontier_phi_17_15_ladder;
        }
        float _1909;
        if (_1708 > 0.0)
        {
            _1909 = abs((1.0 - _1698) / _1708);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1698 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1909 = frontier_phi_26_22_ladder;
        }
        float _2205;
        if (_1711 > 0.0)
        {
            _2205 = abs((1.0 - _1702) / _1711);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1702 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2205 = frontier_phi_38_33_ladder;
        }
        float _2207 = isnan(_1909) ? _1739 : (isnan(_1739) ? _1909 : min(_1739, _1909));
        float _2208 = isnan(_2205) ? _2207 : (isnan(_2207) ? _2205 : min(_2207, _2205));
        float _2212 = (_2208 * _1705) + _1694;
        float _2213 = (_2208 * _1708) + _1698;
        float _2214 = (_2208 * _1711) + _1702;
        float _2215 = _2208 * 9.9999997473787516355514526367188e-05;
        float _2217 = (-1.0) - _2215;
        float _2219 = _2215 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2214 > _2219) || ((_2214 < _2217) || ((_2213 > _2219) || ((_2213 < _2217) || ((_2212 < _2217) || (_2212 > _2219))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2359 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2214, cbModelParam._m0[9u].z, fma(_2213, cbModelParam._m0[9u].y, _2212 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2214, cbModelParam._m0[10u].z, fma(_2213, cbModelParam._m0[10u].y, _2212 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2214, cbModelParam._m0[11u].z, fma(_2213, cbModelParam._m0[11u].y, _2212 * cbModelParam._m0[11u].x))), _1647);
            frontier_phi_16_38_ladder = _2359.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2359.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2359.x * cbModelParam._m0[1u].y;
        }
        _1727 = frontier_phi_16_38_ladder_2;
        _1729 = frontier_phi_16_38_ladder_1;
        _1731 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1715 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_808, _809, _810), _1647);
        _1727 = _1715.x * cbModelParam._m0[1u].y;
        _1729 = _1715.y * cbModelParam._m0[1u].y;
        _1731 = _1715.z * cbModelParam._m0[1u].y;
    }
    float _1735 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _639);
    float _1736 = isnan(_1735) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1735 : min(cbModelParam._m0[25u].w, _1735));
    float _1825;
    float _1827;
    float _1829;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1789 = fma(_869, cbModelParam._m0[21u].z, fma(_865, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _861)) + cbModelParam._m0[21u].w;
        float _1793 = fma(_869, cbModelParam._m0[22u].z, fma(_865, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _861)) + cbModelParam._m0[22u].w;
        float _1797 = fma(_869, cbModelParam._m0[23u].z, fma(_865, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _861)) + cbModelParam._m0[23u].w;
        float _1800 = fma(_810, cbModelParam._m0[21u].z, fma(_809, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _808));
        float _1803 = fma(_810, cbModelParam._m0[22u].z, fma(_809, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _808));
        float _1806 = fma(_810, cbModelParam._m0[23u].z, fma(_809, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _808));
        float _1914;
        if (_1800 > 0.0)
        {
            _1914 = abs((1.0 - _1789) / _1800);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1789 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1914 = frontier_phi_28_24_ladder;
        }
        float _2232;
        if (_1803 > 0.0)
        {
            _2232 = abs((1.0 - _1793) / _1803);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1793 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2232 = frontier_phi_40_35_ladder;
        }
        float _2559;
        if (_1806 > 0.0)
        {
            _2559 = abs((1.0 - _1797) / _1806);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1797 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2559 = frontier_phi_50_47_ladder;
        }
        float _2561 = isnan(_2232) ? _1914 : (isnan(_1914) ? _2232 : min(_1914, _2232));
        float _2562 = isnan(_2559) ? _2561 : (isnan(_2561) ? _2559 : min(_2561, _2559));
        float _2566 = (_2562 * _1800) + _1789;
        float _2567 = (_2562 * _1803) + _1793;
        float _2568 = (_2562 * _1806) + _1797;
        float _2569 = _2562 * 9.9999997473787516355514526367188e-05;
        float _2570 = (-1.0) - _2569;
        float _2572 = _2569 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2568 > _2572) || ((_2568 < _2570) || ((_2567 > _2572) || ((_2567 < _2570) || ((_2566 < _2570) || (_2566 > _2572))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2686 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2568, cbModelParam._m0[17u].z, fma(_2567, cbModelParam._m0[17u].y, _2566 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2568, cbModelParam._m0[18u].z, fma(_2567, cbModelParam._m0[18u].y, _2566 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2568, cbModelParam._m0[19u].z, fma(_2567, cbModelParam._m0[19u].y, _2566 * cbModelParam._m0[19u].x))), _1736);
            frontier_phi_25_50_ladder = _2686.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2686.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2686.x * cbModelParam._m0[1u].z;
        }
        _1825 = frontier_phi_25_50_ladder_2;
        _1827 = frontier_phi_25_50_ladder_1;
        _1829 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1809 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_808, _809, _810), _1736);
        _1825 = _1809.x * cbModelParam._m0[1u].z;
        _1827 = _1809.y * cbModelParam._m0[1u].z;
        _1829 = _1809.z * cbModelParam._m0[1u].z;
    }
    float _1841 = ((((1.0 - _829) * ((_816 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_829 * _816)) * _800;
    float _1842 = _1841 * ((cbModelParam._m0[1u].w * (_1825 - _1727)) + _1727);
    float _1843 = _1841 * ((cbModelParam._m0[1u].w * (_1827 - _1729)) + _1729);
    float _1844 = _1841 * ((cbModelParam._m0[1u].w * (_1829 - _1731)) + _1731);
    float _1847 = fma(_1844, cbSceneParam._m0[89u].z, fma(_1843, cbSceneParam._m0[89u].y, _1842 * cbSceneParam._m0[89u].x));
    float _1850 = fma(_1844, cbSceneParam._m0[90u].z, fma(_1843, cbSceneParam._m0[90u].y, _1842 * cbSceneParam._m0[90u].x));
    float _1853 = fma(_1844, cbSceneParam._m0[91u].z, fma(_1843, cbSceneParam._m0[91u].y, _1842 * cbSceneParam._m0[91u].x));
    float _1888 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1892 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1896 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1900 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1901 = _1888 / _1900;
    float _1902 = _1892 / _1900;
    float _1903 = _1896 / _1900;
    float _2050;
    float _2051;
    float _2052;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1930 = ((uint(_1903 > cbSceneParam._m0[59u].y) + uint(_1903 > cbSceneParam._m0[59u].x)) + uint(_1903 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1931 = _1930 + 43u;
        uint _1939 = _1930 + 44u;
        uint _1947 = _1930 + 45u;
        uint _1955 = _1930 + 46u;
        float _1966 = fma(_1900, cbSceneParam._m0[_1931].w, fma(_1896, cbSceneParam._m0[_1931].z, fma(_1892, cbSceneParam._m0[_1931].y, _1888 * cbSceneParam._m0[_1931].x)));
        float _1970 = fma(_1900, cbSceneParam._m0[_1939].w, fma(_1896, cbSceneParam._m0[_1939].z, fma(_1892, cbSceneParam._m0[_1939].y, _1888 * cbSceneParam._m0[_1939].x)));
        float _1978 = fma(_1900, cbSceneParam._m0[_1955].w, fma(_1896, cbSceneParam._m0[_1955].z, fma(_1892, cbSceneParam._m0[_1955].y, _1888 * cbSceneParam._m0[_1955].x)));
        float _1983 = cbSceneParam._m0[33u].z * _1978;
        float _1985 = cbSceneParam._m0[33u].w * _1978;
        float _1988 = fma(_1900, cbSceneParam._m0[_1947].w, fma(_1896, cbSceneParam._m0[_1947].z, fma(_1892, cbSceneParam._m0[_1947].y, _1888 * cbSceneParam._m0[_1947].x))) / _1978;
        float _2036 = (cbSceneParam._m0[33u].x - sqrt(((_1902 * _1902) + (_1901 * _1901)) + (_1903 * _1903))) * cbSceneParam._m0[33u].y;
        float _4398 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2043 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1983 + _1966) / _1978, (_1985 + _1970) / _1978), _1988), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1985 + _1966) / _1978, (_1970 - _1983) / _1978), _1988), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1966 - _1983) / _1978, (_1970 - _1985) / _1978), _1988), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1966 - _1985) / _1978, (_1983 + _1970) / _1978), _1988), 0.0)).x), vec4(0.25)));
        _2050 = 1.0 - (_2043 * cbSceneParam._m0[34u].x);
        _2051 = 1.0 - (_2043 * cbSceneParam._m0[34u].y);
        _2052 = 1.0 - (_2043 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2050 = 1.0;
        _2051 = 1.0;
        _2052 = 1.0;
    }
    float _2116;
    float _2118;
    float _2120;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2104 = fma(_1900, cbSceneParam._m0[63u].w, fma(_1896, cbSceneParam._m0[63u].z, fma(_1892, cbSceneParam._m0[63u].y, _1888 * cbSceneParam._m0[63u].x)));
        float _2105 = fma(_1900, cbSceneParam._m0[60u].w, fma(_1896, cbSceneParam._m0[60u].z, fma(_1892, cbSceneParam._m0[60u].y, _1888 * cbSceneParam._m0[60u].x))) / _2104;
        float _2106 = fma(_1900, cbSceneParam._m0[61u].w, fma(_1896, cbSceneParam._m0[61u].z, fma(_1892, cbSceneParam._m0[61u].y, _1888 * cbSceneParam._m0[61u].x))) / _2104;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2105 >= cbSceneParam._m0[64u].x) && (_2106 >= cbSceneParam._m0[64u].y)) && (_2105 <= cbSceneParam._m0[64u].z)) && (_2106 <= cbSceneParam._m0[64u].w))
        {
            float _2245 = fma(_1900, cbSceneParam._m0[62u].w, fma(_1896, cbSceneParam._m0[62u].z, fma(_1892, cbSceneParam._m0[62u].y, _1888 * cbSceneParam._m0[62u].x))) / _2104;
            float _2249 = isnan(cbSceneParam._m0[41u].w) ? _2245 : (isnan(_2245) ? cbSceneParam._m0[41u].w : max(_2245, cbSceneParam._m0[41u].w));
            float _2292 = (cbSceneParam._m0[33u].x - sqrt(((_1902 * _1902) + (_1901 * _1901)) + (_1903 * _1903))) * cbSceneParam._m0[33u].y;
            float _4414 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
            float _2299 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2105, cbSceneParam._m0[33u].w + _2106), _2249), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2105, _2106 - cbSceneParam._m0[33u].z), _2249), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2105 - cbSceneParam._m0[33u].z, _2106 - cbSceneParam._m0[33u].w), _2249), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2105 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2106), _2249), 0.0)).x), vec4(0.25)));
            float _2303 = 1.0 - (_2299 * cbSceneParam._m0[34u].x);
            float _2304 = 1.0 - (_2299 * cbSceneParam._m0[34u].y);
            float _2305 = 1.0 - (_2299 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2305) ? _2052 : (isnan(_2052) ? _2305 : min(_2052, _2305));
            frontier_phi_37_36_ladder_1 = isnan(_2304) ? _2051 : (isnan(_2051) ? _2304 : min(_2051, _2304));
            frontier_phi_37_36_ladder_2 = isnan(_2303) ? _2050 : (isnan(_2050) ? _2303 : min(_2050, _2303));
        }
        else
        {
            frontier_phi_37_36_ladder = _2052;
            frontier_phi_37_36_ladder_1 = _2051;
            frontier_phi_37_36_ladder_2 = _2050;
        }
        _2116 = frontier_phi_37_36_ladder_2;
        _2118 = frontier_phi_37_36_ladder_1;
        _2120 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2116 = _2050;
        _2118 = _2051;
        _2120 = _2052;
    }
    uvec4 _2125 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _2127 = _2125.x * 14u;
    uint _2128 = _2127 + 13u;
    float _2135 = _800 + (-1.0);
    float _2140 = (cbLight._m0[_2128].x * _2135) + 1.0;
    float _2141 = (cbLight._m0[_2128].y * _2135) + 1.0;
    float _2142 = (cbLight._m0[_2128].z * _2135) + 1.0;
    float _2143 = (cbLight._m0[_2128].w * _2135) + 1.0;
    uint _2144 = _2127 + 5u;
    float _2150 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
    uint _2154 = _2127 + 4u;
    float _2164 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
    uint _2168 = _2127 | 1u;
    float _2179 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_636, _637, _638));
    float _2182 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_636, _637, _638));
    float _4450 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _4461 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2187 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * 0.3183098733425140380859375;
    float _2189 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * 0.3183098733425140380859375;
    float _2196 = ((cbLight._m0[_2144].x * _2150) * _2189) + (((cbLight._m0[_2154].x * _2116) * _2164) * _2187);
    float _2197 = ((_2150 * cbLight._m0[_2144].y) * _2189) + (((cbLight._m0[_2154].y * _2118) * _2164) * _2187);
    float _2198 = ((_2150 * cbLight._m0[_2144].z) * _2189) + (((cbLight._m0[_2154].z * _2120) * _2164) * _2187);
    uvec4 _2202 = floatBitsToUint(cbLight._m0[_2127 + 12u]);
    bool _2204 = _2202.x == 0u;
    float _2306;
    float _2308;
    float _2310;
    if (_2204)
    {
        _2306 = _2196;
        _2308 = _2197;
        _2310 = _2198;
    }
    else
    {
        uint _2314 = _2127 + 6u;
        float _2330 = (dot(vec3(cbLight._m0[_2127 + 2u].xyz), vec3(_636, _637, _638)) * 0.5) + 0.5;
        float _2331 = _2330 * _2330;
        float _4472 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2332 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2333 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
        _2306 = (((cbLight._m0[_2314].x * 0.3183098733425140380859375) * _2332) * _2333) + _2196;
        _2308 = (((cbLight._m0[_2314].y * 0.3183098733425140380859375) * _2332) * _2333) + _2197;
        _2310 = (((cbLight._m0[_2314].z * 0.3183098733425140380859375) * _2332) * _2333) + _2198;
    }
    bool _2313 = _2202.y == 0u;
    float _2368;
    float _2370;
    float _2372;
    if (_2313)
    {
        _2368 = _2306;
        _2370 = _2308;
        _2372 = _2310;
    }
    else
    {
        uint _2530 = _2127 + 7u;
        float _2546 = (dot(vec3(cbLight._m0[_2127 + 3u].xyz), vec3(_636, _637, _638)) * 0.5) + 0.5;
        float _2547 = _2546 * _2546;
        float _4488 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2548 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2549 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2368 = (((cbLight._m0[_2530].x * 0.3183098733425140380859375) * _2548) * _2549) + _2306;
        _2370 = (((cbLight._m0[_2530].y * 0.3183098733425140380859375) * _2548) * _2549) + _2308;
        _2372 = (((cbLight._m0[_2530].z * 0.3183098733425140380859375) * _2548) * _2549) + _2310;
    }
    uint _2375 = _2127 + 8u;
    float _2388 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _639) * 0.949999988079071044921875);
    float _2389 = _2388 * _2388;
    float _2390 = cbLight._m0[_2127].x + _714;
    float _2391 = cbLight._m0[_2127].y + _715;
    float _2392 = cbLight._m0[_2127].z + _716;
    float _2396 = inversesqrt(dot(vec3(_2390, _2391, _2392), vec3(_2390, _2391, _2392)));
    float _2397 = _2396 * _2390;
    float _2398 = _2396 * _2391;
    float _2399 = _2396 * _2392;
    float _2400 = dot(vec3(_636, _637, _638), vec3(cbLight._m0[_2127].xyz));
    float _4504 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2403 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    float _4515 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _2404 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _2405 = dot(vec3(_636, _637, _638), vec3(_2397, _2398, _2399));
    float _4526 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2408 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    float _2409 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2397, _2398, _2399));
    float _4537 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2413 = _2389 * _2389;
    float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
    float _2428 = (exp2(log2(1.0 - (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2429 = 1.0 - _2389;
    float _2440 = (0.5 / (((_2404 * ((_2403 * _2429) + _2389)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2429) + _2389) * _2403))) * _2403;
    float _4548 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2442 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
    uint _2456 = _2127 + 9u;
    float _2467 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2168].w)) * _639) * 0.949999988079071044921875);
    float _2468 = _2467 * _2467;
    float _2469 = cbLight._m0[_2168].x + _714;
    float _2470 = cbLight._m0[_2168].y + _715;
    float _2471 = cbLight._m0[_2168].z + _716;
    float _2475 = inversesqrt(dot(vec3(_2469, _2470, _2471), vec3(_2469, _2470, _2471)));
    float _2476 = _2475 * _2469;
    float _2477 = _2475 * _2470;
    float _2478 = _2475 * _2471;
    float _2479 = dot(vec3(_636, _637, _638), vec3(cbLight._m0[_2168].xyz));
    float _4559 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2482 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _2483 = dot(vec3(_636, _637, _638), vec3(_2476, _2477, _2478));
    float _4570 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2486 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
    float _2487 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2476, _2477, _2478));
    float _4581 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2491 = _2468 * _2468;
    float _2495 = ((_2486 * _2486) * (_2491 + (-1.0))) + 1.0;
    float _2504 = (exp2(log2(1.0 - (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2505 = 1.0 - _2468;
    float _2515 = (0.5 / (((_2404 * ((_2482 * _2505) + _2468)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2505) + _2468) * _2482))) * _2482;
    float _4592 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2517 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2491 / ((_2495 * _2495) * 3.141590118408203125));
    float _2527 = (((_2504 * cbLight._m0[_2456].x) * _2517) * _2150) + ((((cbLight._m0[_2375].x * _2116) * _2428) * _2442) * _2164);
    float _2528 = (((_2504 * cbLight._m0[_2456].y) * _2517) * _2150) + ((((cbLight._m0[_2375].y * _2118) * _2428) * _2442) * _2164);
    float _2529 = (((_2504 * cbLight._m0[_2456].z) * _2517) * _2150) + ((((cbLight._m0[_2375].z * _2120) * _2428) * _2442) * _2164);
    float _2585;
    float _2587;
    float _2589;
    if (_2204)
    {
        _2585 = _2527;
        _2587 = _2528;
        _2589 = _2529;
    }
    else
    {
        uint _2591 = _2127 + 2u;
        uint _2595 = _2127 + 10u;
        float _2609 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2591].w)) * _639) * 0.949999988079071044921875);
        float _2610 = _2609 * _2609;
        float _2611 = cbLight._m0[_2591].x + _714;
        float _2612 = cbLight._m0[_2591].y + _715;
        float _2613 = cbLight._m0[_2591].z + _716;
        float _2617 = inversesqrt(dot(vec3(_2611, _2612, _2613), vec3(_2611, _2612, _2613)));
        float _2618 = _2617 * _2611;
        float _2619 = _2617 * _2612;
        float _2620 = _2617 * _2613;
        float _2621 = dot(vec3(_636, _637, _638), vec3(cbLight._m0[_2591].xyz));
        float _4603 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2624 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2625 = dot(vec3(_636, _637, _638), vec3(_2618, _2619, _2620));
        float _4614 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2628 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _2629 = dot(vec3(cbLight._m0[_2591].xyz), vec3(_2618, _2619, _2620));
        float _4625 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2633 = _2610 * _2610;
        float _2637 = ((_2628 * _2628) * (_2633 + (-1.0))) + 1.0;
        float _2646 = (exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2647 = 1.0 - _2610;
        float _2657 = (0.5 / (((_2404 * ((_2624 * _2647) + _2610)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2647) + _2610) * _2624))) * _2624;
        float _4636 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2659 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2633 / ((_2637 * _2637) * 3.141590118408203125));
        float _2660 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
        _2585 = (((_2646 * cbLight._m0[_2595].x) * _2659) * _2660) + _2527;
        _2587 = (((_2646 * cbLight._m0[_2595].y) * _2659) * _2660) + _2528;
        _2589 = (((_2646 * cbLight._m0[_2595].z) * _2659) * _2660) + _2529;
    }
    float _2691;
    float _2693;
    float _2695;
    if (_2313)
    {
        _2691 = _2585;
        _2693 = _2587;
        _2695 = _2589;
    }
    else
    {
        uint _2702 = _2127 + 3u;
        uint _2706 = _2127 + 11u;
        float _2720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2702].w)) * _639) * 0.949999988079071044921875);
        float _2721 = _2720 * _2720;
        float _2722 = cbLight._m0[_2702].x + _714;
        float _2723 = cbLight._m0[_2702].y + _715;
        float _2724 = cbLight._m0[_2702].z + _716;
        float _2728 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
        float _2729 = _2728 * _2722;
        float _2730 = _2728 * _2723;
        float _2731 = _2728 * _2724;
        float _2732 = dot(vec3(_636, _637, _638), vec3(cbLight._m0[_2702].xyz));
        float _4652 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2735 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2736 = dot(vec3(_636, _637, _638), vec3(_2729, _2730, _2731));
        float _4663 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2739 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _2740 = dot(vec3(cbLight._m0[_2702].xyz), vec3(_2729, _2730, _2731));
        float _4674 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2744 = _2721 * _2721;
        float _2748 = ((_2739 * _2739) * (_2744 + (-1.0))) + 1.0;
        float _2757 = (exp2(log2(1.0 - (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2758 = 1.0 - _2721;
        float _2768 = (0.5 / (((_2404 * ((_2735 * _2758) + _2721)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2758) + _2721) * _2735))) * _2735;
        float _4685 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2770 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2744 / ((_2748 * _2748) * 3.141590118408203125));
        float _2771 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2691 = (((_2757 * cbLight._m0[_2706].x) * _2770) * _2771) + _2585;
        _2693 = (((_2757 * cbLight._m0[_2706].y) * _2770) * _2771) + _2587;
        _2695 = (((_2757 * cbLight._m0[_2706].z) * _2770) * _2771) + _2589;
    }
    float _2837;
    float _2839;
    float _2841;
    float _2843;
    float _2845;
    float _2847;
    if (_2125.y == 0u)
    {
        uvec4 _2792 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2793 = _2792.x;
        uint _2804 = uint((float(_2792.y) * floor(float(uint(cbSceneParam._m0[85u].y * _736) / _2793))) + floor(float(uint(cbSceneParam._m0[85u].x * _735) / _2793)));
        float _2814 = (log2(_1903 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2815 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        uint _2818 = uint(isnan(14.0) ? _2815 : (isnan(_2815) ? 14.0 : min(_2815, 14.0)));
        uvec4 _2823 = texelFetch(g_lightClusterGridBuffer, int(((_2818 << 2u) + (_2804 << 6u)) >> 2u));
        uint _2824 = _2823.x;
        uint _2825 = _2792.z;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        if (((((1u << ((_2825 >> 4u) & 15u)) + 4294967295u) & _2824) == 0u) || ((_2825 & 240u) == 0u))
        {
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
            _2912 = 0.0;
            _2914 = 0.0;
        }
        else
        {
            float _2905;
            float _2907;
            float _2909;
            float _2911;
            float _2913;
            float _2915;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            uint _3062 = 0u;
            uint _3071;
            bool _3072;
            for (;;)
            {
                _3071 = texelFetch(g_lightClassification, int((((_2818 << 5u) + (_2804 << 9u)) + (_3062 << 2u)) >> 2u)).x;
                _3072 = _3071 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3072)
                {
                    frontier_phi_71_pred = _3061;
                    frontier_phi_71_pred_1 = _3060;
                    frontier_phi_71_pred_2 = _3059;
                    frontier_phi_71_pred_3 = _3058;
                    frontier_phi_71_pred_4 = _3057;
                    frontier_phi_71_pred_5 = _3056;
                }
                else
                {
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    uint _3207;
                    _3201 = _3056;
                    _3202 = _3057;
                    _3203 = _3058;
                    _3204 = _3059;
                    _3205 = _3060;
                    _3206 = _3061;
                    _3207 = _3071;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    for (;;)
                    {
                        uint _3211 = uint(findLSB(_3207)) + (_3062 << 5u);
                        uint _3208 = (_3207 + 4294967295u) & _3207;
                        uint _3213 = _3211 * 48u;
                        vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3213)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 3u)).x));
                        uint _3233 = (_3211 * 48u) + 4u;
                        vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3233)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 3u)).x));
                        uint _3252 = (_3211 * 48u) + 8u;
                        vec3 _3263 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3252)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 2u)).x));
                        float _3267 = _3227.x - _1901;
                        float _3268 = _3227.y - _1902;
                        float _3269 = _3227.z - _1903;
                        float _3270 = dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269));
                        float _3273 = inversesqrt(_3270);
                        float _3274 = _3273 * _3267;
                        float _3275 = _3273 * _3268;
                        float _3276 = _3273 * _3269;
                        float _3277 = dot(vec3(_756, _759, _762), vec3(_3274, _3275, _3276));
                        float _3282 = 1.0 - (_3270 * _3227.w);
                        float _4711 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3283 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                        float _3284 = sqrt(_3270) * _3246.w;
                        float _3287 = 1.39999997615814208984375 / (_3284 + 1.39999997615814208984375);
                        float _3288 = _3287 * _3287;
                        float _3291 = ((1.0 - _3288) * _3277) + _3288;
                        float _3294 = _3284 * _3284;
                        float _3298 = ((isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0))) * _3283) / ((_3294 * 0.699999988079071044921875) + 1.0);
                        float _3302 = (-0.0) - _1901;
                        float _3303 = (-0.0) - _1902;
                        float _3304 = (-0.0) - _1903;
                        float _3308 = inversesqrt(dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304)));
                        float _3309 = _3308 * _3302;
                        float _3310 = _3308 * _3303;
                        float _3311 = _3308 * _3304;
                        float _3318 = exp2(log2(1.0 / ((_3294 * 3.5) + 5.0)) * 0.25);
                        float _3319 = 1.0 - _816;
                        float _3326 = sqrt(1.0 - ((1.0 - (_3319 * _3319)) * (1.0 - (_3318 * _3318))));
                        float _3327 = _3326 * _3326;
                        float _3328 = _3327 * _3327;
                        float _3329 = _3309 + _3274;
                        float _3330 = _3310 + _3275;
                        float _3331 = _3311 + _3276;
                        float _3335 = inversesqrt(dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331)));
                        float _3339 = dot(vec3(_756, _759, _762), vec3(_3309, _3310, _3311));
                        float _4727 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3342 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                        float _3343 = dot(vec3(_756, _759, _762), vec3(_3335 * _3329, _3335 * _3330, _3335 * _3331));
                        float _4738 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3346 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3350 = ((_3346 * _3346) * (_3328 + (-1.0))) + 1.0;
                        float _3351 = _3287 * _3327;
                        float _3352 = _3351 * _3351;
                        float _3355 = ((1.0 - _3352) * _3277) + _3352;
                        float _4749 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3356 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                        float _3357 = 1.0 - _3327;
                        float _3367 = (0.5 / (((_3356 * ((_3342 * _3357) + _3327)) + 9.9999999392252902907785028219223e-09) + (((_3356 * _3357) + _3327) * _3342))) * _3356;
                        float _4760 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3378 = (((_3328 * 3.1415927410125732421875) * (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0)))) / ((_3350 * _3350) * ((_3294 * 2.1991131305694580078125) + 3.141590118408203125))) * _3283;
                        _3131 = (_3298 * _3246.x) + _3204;
                        _3132 = (_3298 * _3246.y) + _3205;
                        _3133 = (_3298 * _3246.z) + _3206;
                        _3128 = (_3378 * _3263.x) + _3201;
                        _3129 = (_3378 * _3263.y) + _3202;
                        _3130 = (_3378 * _3263.z) + _3203;
                        if (_3208 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3201 = _3128;
                            _3202 = _3129;
                            _3203 = _3130;
                            _3204 = _3131;
                            _3205 = _3132;
                            _3206 = _3133;
                            _3207 = _3208;
                        }
                    }
                    frontier_phi_71_pred = _3133;
                    frontier_phi_71_pred_1 = _3132;
                    frontier_phi_71_pred_2 = _3131;
                    frontier_phi_71_pred_3 = _3130;
                    frontier_phi_71_pred_4 = _3129;
                    frontier_phi_71_pred_5 = _3128;
                }
                _2915 = frontier_phi_71_pred;
                _2913 = frontier_phi_71_pred_1;
                _2911 = frontier_phi_71_pred_2;
                _2909 = frontier_phi_71_pred_3;
                _2907 = frontier_phi_71_pred_4;
                _2905 = frontier_phi_71_pred_5;
                uint _3063 = _3062 + 1u;
                if (_3063 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3056 = _2905;
                    _3057 = _2907;
                    _3058 = _2909;
                    _3059 = _2911;
                    _3060 = _2913;
                    _3061 = _2915;
                    _3062 = _3063;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
            _2912 = _2913;
            _2914 = _2915;
        }
        uvec4 _2918 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2919 = _2918.z;
        uint _2921 = (_2919 >> 8u) & 15u;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        if (((4294967295u << _2921) & _2824) == 0u)
        {
            _3024 = _2904;
            _3026 = _2906;
            _3028 = _2908;
            _3030 = _2910;
            _3032 = _2912;
            _3034 = _2914;
        }
        else
        {
            float _3049 = inversesqrt(dot(vec3(_1901, _1902, _1903), vec3(_1901, _1902, _1903)));
            float _3050 = _3049 * _1901;
            float _3051 = _3049 * _1902;
            float _3052 = _3049 * _1903;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2921 < ((_2919 >> 12u) & 15u))
            {
                float _3025;
                float _3027;
                float _3029;
                float _3031;
                float _3033;
                float _3035;
                float _3184 = _2904;
                float _3185 = _2906;
                float _3186 = _2908;
                float _3187 = _2910;
                float _3188 = _2912;
                float _3189 = _2914;
                uint _3190 = _2921;
                uint _3199;
                bool _3200;
                for (;;)
                {
                    _3199 = texelFetch(g_lightClassification, int((((_2818 << 5u) + (_2804 << 9u)) + (_3190 << 2u)) >> 2u)).x;
                    _3200 = _3199 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3200)
                    {
                        frontier_phi_82_pred = _3189;
                        frontier_phi_82_pred_1 = _3188;
                        frontier_phi_82_pred_2 = _3187;
                        frontier_phi_82_pred_3 = _3186;
                        frontier_phi_82_pred_4 = _3185;
                        frontier_phi_82_pred_5 = _3184;
                    }
                    else
                    {
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3691;
                        float _3405 = _3184;
                        float _3406 = _3185;
                        float _3407 = _3186;
                        float _3408 = _3187;
                        float _3409 = _3188;
                        float _3410 = _3189;
                        uint _3411 = _3199;
                        uint _3412;
                        vec4 _3437;
                        float _3438;
                        vec4 _3453;
                        vec3 _3465;
                        vec4 _3481;
                        vec4 _3496;
                        float _3542;
                        bool _3543;
                        for (;;)
                        {
                            uint _3422 = ((_3190 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3411));
                            _3412 = (_3411 + 4294967295u) & _3411;
                            uint _3424 = _3422 * 40u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            _3438 = _3437.w;
                            uint _3440 = (_3422 * 40u) + 4u;
                            _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3455 = (_3422 * 40u) + 8u;
                            _3465 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x));
                            uint _3468 = (_3422 * 40u) + 16u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3483 = (_3422 * 40u) + 20u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3498 = (_3422 * 40u) + 24u;
                            vec4 _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            uint _3517 = (_3422 * 40u) + 28u;
                            vec4 _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            _3542 = fma(_1903, _3530.z, fma(_1902, _3530.y, _3530.x * _1901)) + _3530.w;
                            _3543 = !((fma(_1903, _3511.z, fma(_1902, _3511.y, _3511.x * _1901)) + _3511.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3543)
                            {
                                float _3570 = _3437.x - _1901;
                                float _3571 = _3437.y - _1902;
                                float _3572 = _3437.z - _1903;
                                float _3573 = dot(vec3(_3570, _3571, _3572), vec3(_3570, _3571, _3572));
                                float _3576 = inversesqrt(_3573);
                                float _3577 = _3576 * _3570;
                                float _3578 = _3576 * _3571;
                                float _3579 = _3576 * _3572;
                                float _3583 = 1.0 - (_3573 / (_3438 * _3438));
                                float _4771 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3584 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                                float _3588 = sqrt(_3573) * _3453.w;
                                float _3590 = 1.39999997615814208984375 / (_3588 + 1.39999997615814208984375);
                                float _3591 = _3590 * _3590;
                                float _3594 = ((1.0 - _3591) * dot(vec3(_3577, _3578, _3579), vec3(_756, _759, _762))) + _3591;
                                float _3597 = _3588 * _3588;
                                float _3601 = (fma(_1903, _3481.z, fma(_1902, _3481.y, _3481.x * _1901)) + _3481.w) / _3542;
                                float _3602 = (fma(_1903, _3496.z, fma(_1902, _3496.y, _3496.x * _1901)) + _3496.w) / _3542;
                                float _3606 = 1.0 - dot(vec2(_3601, _3602), vec2(_3601, _3602));
                                float _4787 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3607 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                                float _3608 = _3607 * (((isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0))) * _3584) / ((_3597 * 0.699999988079071044921875) + 1.0));
                                float _3620 = exp2(log2(1.0 / ((_3597 * 3.5) + 5.0)) * 0.25);
                                float _3621 = 1.0 - _816;
                                float _3628 = sqrt(1.0 - ((1.0 - (_3621 * _3621)) * (1.0 - (_3620 * _3620))));
                                float _3629 = _3628 * _3628;
                                float _3630 = _3629 * _3629;
                                float _3631 = _3577 - _3050;
                                float _3632 = _3578 - _3051;
                                float _3633 = _3579 - _3052;
                                float _3637 = inversesqrt(dot(vec3(_3631, _3632, _3633), vec3(_3631, _3632, _3633)));
                                float _3641 = dot(vec3(_756, _759, _762), vec3((-0.0) - _3050, (-0.0) - _3051, (-0.0) - _3052));
                                float _4798 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3644 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3645 = dot(vec3(_756, _759, _762), vec3(_3637 * _3631, _3637 * _3632, _3637 * _3633));
                                float _4809 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3648 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3652 = ((_3648 * _3648) * (_3630 + (-1.0))) + 1.0;
                                float _3653 = _3590 * _3629;
                                float _3654 = _3653 * _3653;
                                float _3660 = ((1.0 - _3654) * dot(vec3(_756, _759, _762), vec3(_3577, _3578, _3579))) + _3654;
                                float _4820 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3661 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3662 = 1.0 - _3629;
                                float _3672 = (0.5 / (((_3661 * ((_3644 * _3662) + _3629)) + 9.9999999392252902907785028219223e-09) + (((_3661 * _3662) + _3629) * _3644))) * _3661;
                                float _4831 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3682 = (_3607 * _3584) * (((_3630 * 3.1415927410125732421875) * (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) / ((_3652 * _3652) * ((_3597 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3608 * _3453.z;
                                frontier_phi_88_pred_1 = _3608 * _3453.y;
                                frontier_phi_88_pred_2 = _3608 * _3453.x;
                                frontier_phi_88_pred_3 = _3682 * _3465.z;
                                frontier_phi_88_pred_4 = _3682 * _3465.y;
                                frontier_phi_88_pred_5 = _3682 * _3465.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3691 = frontier_phi_88_pred;
                            _3690 = frontier_phi_88_pred_1;
                            _3689 = frontier_phi_88_pred_2;
                            _3688 = frontier_phi_88_pred_3;
                            _3687 = frontier_phi_88_pred_4;
                            _3686 = frontier_phi_88_pred_5;
                            _3395 = _3689 + _3408;
                            _3396 = _3690 + _3409;
                            _3397 = _3691 + _3410;
                            _3392 = _3686 + _3405;
                            _3393 = _3687 + _3406;
                            _3394 = _3688 + _3407;
                            if (_3412 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3412;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3397;
                        frontier_phi_82_pred_1 = _3396;
                        frontier_phi_82_pred_2 = _3395;
                        frontier_phi_82_pred_3 = _3394;
                        frontier_phi_82_pred_4 = _3393;
                        frontier_phi_82_pred_5 = _3392;
                    }
                    _3035 = frontier_phi_82_pred;
                    _3033 = frontier_phi_82_pred_1;
                    _3031 = frontier_phi_82_pred_2;
                    _3029 = frontier_phi_82_pred_3;
                    _3027 = frontier_phi_82_pred_4;
                    _3025 = frontier_phi_82_pred_5;
                    uint _3191 = _3190 + 1u;
                    if (_3191 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3184 = _3025;
                        _3185 = _3027;
                        _3186 = _3029;
                        _3187 = _3031;
                        _3188 = _3033;
                        _3189 = _3035;
                        _3190 = _3191;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3031;
                frontier_phi_63_64_ladder_1 = _3035;
                frontier_phi_63_64_ladder_2 = _3033;
                frontier_phi_63_64_ladder_3 = _3029;
                frontier_phi_63_64_ladder_4 = _3027;
                frontier_phi_63_64_ladder_5 = _3025;
            }
            else
            {
                frontier_phi_63_64_ladder = _2910;
                frontier_phi_63_64_ladder_1 = _2914;
                frontier_phi_63_64_ladder_2 = _2912;
                frontier_phi_63_64_ladder_3 = _2908;
                frontier_phi_63_64_ladder_4 = _2906;
                frontier_phi_63_64_ladder_5 = _2904;
            }
            _3024 = frontier_phi_63_64_ladder_5;
            _3026 = frontier_phi_63_64_ladder_4;
            _3028 = frontier_phi_63_64_ladder_3;
            _3030 = frontier_phi_63_64_ladder;
            _3032 = frontier_phi_63_64_ladder_2;
            _3034 = frontier_phi_63_64_ladder_1;
        }
        float _3039 = isnan(1.0) ? _800 : (isnan(_800) ? 1.0 : min(_800, 1.0));
        _2837 = (_3039 * _3030) + _2368;
        _2839 = (_3039 * _3032) + _2370;
        _2841 = (_3039 * _3034) + _2372;
        _2843 = ((_3024 * 0.039999999105930328369140625) * _3039) + _2691;
        _2845 = ((_3026 * 0.039999999105930328369140625) * _3039) + _2693;
        _2847 = ((_3028 * 0.039999999105930328369140625) * _3039) + _2695;
    }
    else
    {
        _2837 = _2368;
        _2839 = _2370;
        _2841 = _2372;
        _2843 = _2691;
        _2845 = _2693;
        _2847 = _2695;
    }
    float _4847 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _4858 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4869 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _2864 = ((isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2837 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _800))) + ((_2843 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1636)) * cbPerFrame._m0[3u].x);
    float _2865 = ((isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2839 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _800))) + ((_2845 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1636)) * cbPerFrame._m0[3u].x);
    float _2866 = ((isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * (_2841 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _800))) + ((_2847 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1636)) * cbPerFrame._m0[3u].x);
    uint _2867 = _247 + 6u;
    float _2875 = _735 / cbSceneParam._m0[86u].x;
    float _2876 = _736 / cbSceneParam._m0[86u].y;
    vec4 _2890 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2875, _2876, (log2((isnan(cbSceneParam._m0[77u].w) ? _657 : (isnan(_657) ? cbSceneParam._m0[77u].w : min(_657, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2892 = _2890.x;
    float _2893 = _2890.y;
    float _2894 = _2890.z;
    float _2895 = _2890.w;
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    if (_657 > cbSceneParam._m0[78u].w)
    {
        float _2929 = isnan(_657) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _657 : min(cbSceneParam._m0[80u].w, _657));
        float _2930 = _2929 / _657;
        float _2941 = _2930 * _707;
        float _2942 = _708 * _2930;
        float _2943 = (-0.0) - _2942;
        float _2944 = _2930 * _709;
        float _2946 = (cbSceneParam._m0[77u].w * _2943) / _2929;
        float _2947 = _2946 + cbSceneParam._m0[79u].w;
        float _2948 = cbSceneParam._m0[79u].w - _2942;
        float _2954 = sqrt(((_2941 * _2941) + (_2942 * _2942)) + (_2944 * _2944));
        float _2957 = (1.0 - (cbSceneParam._m0[77u].w / _2929)) * _2954;
        float _2962 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2964 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3141;
        if (abs((_2943 - _2946) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3141 = ((((_2947 > 0.0) ? exp2(_2962 * _2947) : (2.0 - exp2(_2964 * _2947))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2957;
        }
        else
        {
            float _3085 = 1.0 / cbSceneParam._m0[80u].x;
            float _3086 = isnan(_2948) ? _2947 : (isnan(_2947) ? _2948 : max(_2947, _2948));
            float _3087 = isnan(_2948) ? _2947 : (isnan(_2947) ? _2948 : min(_2947, _2948));
            float _3096 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : min(_3086, 0.0));
            float _3097 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : min(_3087, 0.0));
            _3141 = ((abs(_2954 / _2943) * cbSceneParam._m0[80u].y) * ((((_3096 - _3097) * 2.0) - ((exp2(_2962 * (isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0)))) - exp2(_2962 * (isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0))))) * _3085)) - ((exp2(_2964 * _3096) - exp2(_2964 * _3097)) * _3085))) + (_2957 * cbSceneParam._m0[80u].z);
        }
        vec4 _3143 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2875, _2876, 1.0), 0.0);
        float _3152 = exp2((_3141 * (-1.44269502162933349609375)) * (1.0 - _3143.w));
        float _3153 = log2(_3152);
        float _3169 = log2(_2895);
        _2966 = (exp2(_3169 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].x)) * _3143.x) / cbSceneParam._m0[78u].x)) + _2892;
        _2968 = (exp2(_3169 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].y)) * _3143.y) / cbSceneParam._m0[78u].y)) + _2893;
        _2970 = (exp2(_3169 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].z)) * _3143.z) / cbSceneParam._m0[78u].z)) + _2894;
        _2972 = _3152 * _2895;
    }
    else
    {
        _2966 = _2892;
        _2968 = _2893;
        _2970 = _2894;
        _2972 = _2895;
    }
    bool _3179;
    vec4 _2982;
    vec4 _3004;
    float _3006;
    float _3010;
    float _3011;
    float _3012;
    float _3013;
    bool _3023;
    for (;;)
    {
        _2982 = cbMatDynParam._m0[0u];
        float _2984 = roundEven(_2982.y);
        bool _2985 = _2984 == 3.0;
        float _2986 = log2(_2972);
        float _2993 = exp2(_2986 * cbSceneParam._m0[78u].x) * _2864;
        float _2994 = exp2(_2986 * cbSceneParam._m0[78u].y) * _2865;
        float _2995 = exp2(_2986 * cbSceneParam._m0[78u].z) * _2866;
        float _3002 = _723 + (-0.5);
        _3004 = cbMtdParam._m0[1u];
        _3006 = _3004.y * _3002;
        float _3009 = (_2984 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3010 = _3009 * (_2985 ? _2993 : (_2993 + (cbSceneParam._m0[72u].w * _2966)));
        _3011 = _3009 * (_2985 ? _2994 : (_2994 + (cbSceneParam._m0[72u].w * _2968)));
        _3012 = _3009 * (_2985 ? _2995 : (_2995 + (cbSceneParam._m0[72u].w * _2970)));
        _3013 = _3002 * 0.999000012874603271484375;
        _3023 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3023)
        {
            if ((cbInstanceData._m0[_247 + 7u].x + _3013) < 0.5)
            {
                _3179 = true;
                break;
            }
        }
        uint _3120 = _775 + uint(_2982.w);
        if ((cbInstanceData._m0[_3120].w < 1.0) && ((cbInstanceData._m0[_3120].w + _3013) < 0.5))
        {
            _3179 = true;
            break;
        }
        if ((_3006 + 1.0) < _3004.x)
        {
            _3179 = true;
            break;
        }
        _3179 = false;
        break;
    }
    float _3383;
    if (_3179)
    {
        discard_state = true;
        _3383 = 0.0;
    }
    else
    {
        _3383 = cbInstanceData._m0[_2867].w;
    }
    SV_Target.x = _3010;
    SV_Target.y = _3011;
    SV_Target.z = _3012;
    SV_Target.w = _3383;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2867].w;
    discard_exit();
}


