#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1140;
float _3785;
float _3786;
float _3787;
float _3788;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3797 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3808 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3819 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    uint _262 = uint(roundEven(NORMAL.w)) * 13u;
    uint _267 = _262 + 1u;
    uint _271 = _262 + 2u;
    float _280 = sqrt(((cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x)) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x));
    float _281 = _280 * TEXCOORD.z;
    float _282 = _280 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _281) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _282) + cbTextureTilingScale._m0[13u].w));
    vec4 _319 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _324 = _319.x * cbMtdParam._m0[11u].x;
    float _325 = _319.y * cbMtdParam._m0[11u].y;
    float _326 = _319.z * cbMtdParam._m0[11u].z;
    vec4 _345 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _281) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _282) + cbTextureTilingScale._m0[5u].w));
    vec4 _381 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _383 = _381.x;
    float _393 = dot(vec4(_383, _381.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _410 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_383 - _393) * cbMtdParam._m0[24u].x) + _393) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3830 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _418 = (_411 * ((_345.x * cbMtdParam._m0[12u].x) - _324)) + _324;
    float _419 = (_411 * ((_345.y * cbMtdParam._m0[12u].y) - _325)) + _325;
    float _420 = (_411 * ((_345.z * cbMtdParam._m0[12u].z) - _326)) + _326;
    float _424 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _295.x) * _418;
    float _427 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _295.y) * _419;
    float _430 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _295.z) * _420;
    float _437 = ((_418 - _424) * (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) + _424;
    float _438 = ((_419 - _427) * (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) + _427;
    float _439 = ((_420 - _430) * (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) + _430;
    vec4 _452 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _281) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _282) + cbTextureTilingScale._m0[20u].w));
    vec4 _477 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _281) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _282) + cbTextureTilingScale._m0[4u].w));
    vec4 _494 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _496 = _494.x;
    float _497 = _494.y;
    float _498 = _494.z;
    float _507 = ((_477.z - _498) * _411) + _498;
    float _510 = ((((_477.x - _496) * _411) + _496) * 2.0) + (-1.0);
    float _511 = ((((_477.y - _497) * _411) + _497) * 2.0) + (-1.0);
    float _512 = dot(vec2(_510, _511), vec2(_510, _511));
    float _3841 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _517 = sqrt(1.0 - (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))));
    vec4 _539 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _551 = (_510 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_452.x * 2.0) + (-1.0)))) + (((_539.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _552 = (_511 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_452.y * 2.0) + (-1.0)))) + (((_539.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _557 = (((_452.z - _507) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _507;
    float _561 = ((_539.z - _557) * cbMtdParam._m0[19u].w) + _557;
    float _563 = cbMtdParam._m0[22u].x + _539.w;
    float _566 = fma(_517, _228 * NORMAL.x, fma(_552, _235 * TANGENT.x, (_221 * _213) * _551));
    float _569 = fma(_517, _228 * NORMAL.y, fma(_552, _235 * TANGENT.y, (_221 * _214) * _551));
    float _572 = fma(_517, _228 * NORMAL.z, fma(_552, _235 * TANGENT.z, (_221 * _215) * _551));
    float _576 = inversesqrt(dot(vec3(_566, _569, _572), vec3(_566, _569, _572)));
    float _577 = _576 * _566;
    float _578 = _576 * _569;
    float _579 = _576 * _572;
    float _3852 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _580 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3874 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _3885 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _3896 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _598 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _640 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _650 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _640);
    float _651 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _640);
    float _652 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _640);
    float _656 = inversesqrt(dot(vec3(_650, _651, _652), vec3(_650, _651, _652)));
    float _657 = _650 * _656;
    float _658 = _651 * _656;
    float _659 = _652 * _656;
    vec4 _664 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _666 = _664.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _820 = sqrt(((_650 * _650) + (_651 * _651)) + (_652 * _652));
        float _826 = (cbMatDynParam._m0[5u].x * _820) + cbMatDynParam._m0[5u].y;
        float _3907 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _831 = (cbMatDynParam._m0[5u].z * _820) + cbMatDynParam._m0[5u].w;
        float _3918 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) - _827)) + _827) < ((_666 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _677 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _678 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _696 = fma(_579, cbSceneParam._m0[5u].z, fma(_578, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _577));
    float _699 = fma(_579, cbSceneParam._m0[6u].z, fma(_578, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _577));
    float _702 = fma(_579, cbSceneParam._m0[7u].z, fma(_578, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _577));
    uint _715 = _262 + 9u;
    uint _716 = _715 + uint(cbMatDynParam._m0[0u].w);
    float _722 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * cbInstanceData._m0[_716].x;
    float _723 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_716].y;
    float _724 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * cbInstanceData._m0[_716].z;
    float _3929 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _3940 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    vec4 _736 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _677, cbSceneParam._m0[86u].y * _678));
    float _740 = ((isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * TEXCOORD_5.w) * _736.x;
    float _741 = dot(vec3(_577, _578, _579), vec3(_657, _658, _659));
    float _744 = _741 * 2.0;
    float _748 = (_744 * _577) - _657;
    float _749 = (_744 * _578) - _658;
    float _750 = (_744 * _579) - _659;
    float _754 = abs(dot(vec3(_657, _658, _659), vec3(_577, _578, _579)));
    float _3962 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _756 = sqrt(_580);
    float _769 = exp2((_756 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_756 * 3.0));
    float _801 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _805 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1139;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _864 = fma(_809, cbModelParam._m0[26u].z, fma(_805, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _801));
        float _868 = fma(_809, cbModelParam._m0[27u].z, fma(_805, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _801));
        float _872 = fma(_809, cbModelParam._m0[28u].z, fma(_805, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _801));
        float _897 = _801 + _577;
        float _898 = _805 + _578;
        float _899 = _809 + _579;
        float _909 = fma(_899, cbModelParam._m0[26u].z, fma(_898, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _897)) - _864;
        float _910 = fma(_899, cbModelParam._m0[27u].z, fma(_898, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _897)) - _868;
        float _911 = fma(_899, cbModelParam._m0[28u].z, fma(_898, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _897)) - _872;
        float _915 = inversesqrt(dot(vec3(_909, _910, _911), vec3(_909, _910, _911)));
        float _928 = ((_915 * _909) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_864 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _929 = ((_915 * _910) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_868 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _930 = ((_915 * _911) / cbModelParam._m0[34u].z) + ((((((_872 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        float _967 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_933.x + (-0.5));
        float _969 = _967 * (_933.y + (-0.5));
        float _970 = _967 * (_933.z + (-0.5));
        float _977 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_940.x + (-0.5));
        float _979 = _977 * (_940.y + (-0.5));
        float _980 = _977 * (_940.z + (-0.5));
        float _987 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_947.x + (-0.5));
        float _989 = _987 * (_947.y + (-0.5));
        float _990 = _987 * (_947.z + (-0.5));
        float _997 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_954.x + (-0.5));
        float _999 = _997 * (_954.y + (-0.5));
        float _1000 = _997 * (_954.z + (-0.5));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = _968 * 0.5;
        float _1005 = _978 * 0.5;
        float _1006 = _988 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1021 = (dot(vec3(_577, _578, _579), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1031 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _4010 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1033 + 1.0))) + _1038) * _1001;
        float _1048 = _969 * 0.5;
        float _1049 = _979 * 0.5;
        float _1050 = _989 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_577, _578, _579), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _4043 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1075 + 1.0))) + _1080) * _1002;
        float _1090 = _970 * 0.5;
        float _1091 = _980 * 0.5;
        float _1092 = _990 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_577, _578, _579), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _4076 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1117 + 1.0))) + _1122) * _1003;
        _1139 = _970;
        _1141 = _969;
        _1142 = _968;
        _1143 = _980;
        _1144 = _979;
        _1145 = _978;
        _1146 = _990;
        _1147 = _989;
        _1148 = _988;
        _1149 = _1003;
        _1150 = _1002;
        _1151 = _1001;
        _1152 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
        _1153 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1154 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
    }
    else
    {
        _1139 = _1140;
        _1141 = _1140;
        _1142 = _1140;
        _1143 = _1140;
        _1144 = _1140;
        _1145 = _1140;
        _1146 = _1140;
        _1147 = _1140;
        _1148 = _1140;
        _1149 = _1140;
        _1150 = _1140;
        _1151 = _1140;
        _1152 = 0.0;
        _1153 = 0.0;
        _1154 = 0.0;
    }
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1182 = fma(_809, cbModelParam._m0[30u].z, fma(_805, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _801));
        float _1186 = fma(_809, cbModelParam._m0[31u].z, fma(_805, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _801));
        float _1190 = fma(_809, cbModelParam._m0[32u].z, fma(_805, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _801));
        float _1213 = _801 + _577;
        float _1214 = _805 + _578;
        float _1215 = _809 + _579;
        float _1225 = fma(_1215, cbModelParam._m0[30u].z, fma(_1214, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1213)) - _1182;
        float _1226 = fma(_1215, cbModelParam._m0[31u].z, fma(_1214, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1213)) - _1186;
        float _1227 = fma(_1215, cbModelParam._m0[32u].z, fma(_1214, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1213)) - _1190;
        float _1231 = inversesqrt(dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227)));
        float _1244 = ((_1231 * _1225) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1182 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1245 = ((_1231 * _1226) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1186 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1231 * _1227) / cbModelParam._m0[35u].z) + ((((((_1190 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        float _1281 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1248.x + (-0.5));
        float _1283 = _1281 * (_1248.y + (-0.5));
        float _1284 = _1281 * (_1248.z + (-0.5));
        float _1291 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1255.x + (-0.5));
        float _1293 = _1291 * (_1255.y + (-0.5));
        float _1294 = _1291 * (_1255.z + (-0.5));
        float _1301 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1262.x + (-0.5));
        float _1303 = _1301 * (_1262.y + (-0.5));
        float _1304 = _1301 * (_1262.z + (-0.5));
        float _1311 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1269.x + (-0.5));
        float _1313 = _1311 * (_1269.y + (-0.5));
        float _1314 = _1311 * (_1269.z + (-0.5));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = _1282 * 0.5;
        float _1319 = _1292 * 0.5;
        float _1320 = _1302 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_577, _578, _579), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4139 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1345 + 1.0))) + _1350) * _1315;
        float _1360 = _1283 * 0.5;
        float _1361 = _1293 * 0.5;
        float _1362 = _1303 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_577, _578, _579), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4172 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1387 + 1.0))) + _1392) * _1316;
        float _1402 = _1284 * 0.5;
        float _1403 = _1294 * 0.5;
        float _1404 = _1304 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_577, _578, _579), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _4205 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1429 + 1.0))) + _1434) * _1317;
        _1451 = _1284;
        _1452 = _1283;
        _1453 = _1282;
        _1454 = _1294;
        _1455 = _1293;
        _1456 = _1292;
        _1457 = _1304;
        _1458 = _1303;
        _1459 = _1302;
        _1460 = _1317;
        _1461 = _1316;
        _1462 = _1315;
        _1463 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1464 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
        _1465 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
    }
    else
    {
        _1451 = _1140;
        _1452 = _1140;
        _1453 = _1140;
        _1454 = _1140;
        _1455 = _1140;
        _1456 = _1140;
        _1457 = _1140;
        _1458 = _1140;
        _1459 = _1140;
        _1460 = _1140;
        _1461 = _1140;
        _1462 = _1140;
        _1463 = 0.0;
        _1464 = 0.0;
        _1465 = 0.0;
    }
    float _1475 = (cbModelParam._m0[1u].x * (_1463 - _1152)) + _1152;
    float _1476 = (cbModelParam._m0[1u].x * (_1464 - _1153)) + _1153;
    float _1477 = (cbModelParam._m0[1u].x * (_1465 - _1154)) + _1154;
    float _1498 = fma(_1477, cbSceneParam._m0[89u].z, fma(_1476, cbSceneParam._m0[89u].y, _1475 * cbSceneParam._m0[89u].x));
    float _1501 = fma(_1477, cbSceneParam._m0[90u].z, fma(_1476, cbSceneParam._m0[90u].y, _1475 * cbSceneParam._m0[90u].x));
    float _1504 = fma(_1477, cbSceneParam._m0[91u].z, fma(_1476, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1475));
    float _1519 = _748 * 0.5;
    float _1520 = _749 * 0.5;
    float _1521 = _750 * 0.5;
    float _1522 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1453, _1456, _1459, _1462));
    float _1525 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1452, _1455, _1458, _1461));
    float _1528 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1451, _1454, _1457, _1460));
    float _1562;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1535 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1139, _1143, _1146, _1149));
        float _1539 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1141, _1144, _1147, _1150));
        float _1543 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1142, _1145, _1148, _1151));
        float _1550 = dot(vec4(cbModelParam._m0[39u]), vec4(_1519, _1520, _1521, 1.0));
        _1562 = dot(vec3(isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1550) ? 0.0 : (isnan(0.0) ? _1550 : max(0.0, _1550))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1562 = 1.0;
    }
    float _1573;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1564 = dot(vec4(cbModelParam._m0[40u]), vec4(_1519, _1520, _1521, 1.0));
        _1573 = dot(vec3(isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1564) ? 0.0 : (isnan(0.0) ? _1564 : max(0.0, _1564))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1573 = 1.0;
    }
    float _1577 = (_1573 * cbModelParam._m0[1u].x) + (_1562 * (1.0 - cbModelParam._m0[1u].x));
    float _1587 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _580);
    float _1588 = isnan(_1587) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1587 : min(cbModelParam._m0[25u].z, _1587));
    float _1670;
    float _1672;
    float _1674;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1637 = fma(_809, cbModelParam._m0[13u].z, fma(_805, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _801)) + cbModelParam._m0[13u].w;
        float _1641 = fma(_809, cbModelParam._m0[14u].z, fma(_805, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _801)) + cbModelParam._m0[14u].w;
        float _1645 = fma(_809, cbModelParam._m0[15u].z, fma(_805, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _801)) + cbModelParam._m0[15u].w;
        float _1648 = fma(_750, cbModelParam._m0[13u].z, fma(_749, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _748));
        float _1651 = fma(_750, cbModelParam._m0[14u].z, fma(_749, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _748));
        float _1654 = fma(_750, cbModelParam._m0[15u].z, fma(_749, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _748));
        float _1682;
        if (_1648 > 0.0)
        {
            _1682 = abs((1.0 - _1637) / _1648);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1637 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1682 = frontier_phi_17_15_ladder;
        }
        float _1853;
        if (_1651 > 0.0)
        {
            _1853 = abs((1.0 - _1641) / _1651);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1641 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1853 = frontier_phi_26_22_ladder;
        }
        float _2148;
        if (_1654 > 0.0)
        {
            _2148 = abs((1.0 - _1645) / _1654);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1645 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2148 = frontier_phi_38_33_ladder;
        }
        float _2150 = isnan(_1853) ? _1682 : (isnan(_1682) ? _1853 : min(_1682, _1853));
        float _2151 = isnan(_2148) ? _2150 : (isnan(_2150) ? _2148 : min(_2150, _2148));
        float _2155 = (_2151 * _1648) + _1637;
        float _2156 = (_2151 * _1651) + _1641;
        float _2157 = (_2151 * _1654) + _1645;
        float _2158 = _2151 * 9.9999997473787516355514526367188e-05;
        float _2160 = (-1.0) - _2158;
        float _2162 = _2158 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2157 > _2162) || ((_2157 < _2160) || ((_2156 > _2162) || ((_2156 < _2160) || ((_2155 < _2160) || (_2155 > _2162))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2302 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2157, cbModelParam._m0[9u].z, fma(_2156, cbModelParam._m0[9u].y, _2155 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2157, cbModelParam._m0[10u].z, fma(_2156, cbModelParam._m0[10u].y, _2155 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2157, cbModelParam._m0[11u].z, fma(_2156, cbModelParam._m0[11u].y, _2155 * cbModelParam._m0[11u].x))), _1588);
            frontier_phi_16_38_ladder = _2302.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2302.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2302.x * cbModelParam._m0[1u].y;
        }
        _1670 = frontier_phi_16_38_ladder_2;
        _1672 = frontier_phi_16_38_ladder_1;
        _1674 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1658 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_748, _749, _750), _1588);
        _1670 = _1658.x * cbModelParam._m0[1u].y;
        _1672 = _1658.y * cbModelParam._m0[1u].y;
        _1674 = _1658.z * cbModelParam._m0[1u].y;
    }
    float _1678 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _580);
    float _1679 = isnan(_1678) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1678 : min(cbModelParam._m0[25u].w, _1678));
    float _1770;
    float _1772;
    float _1774;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1734 = fma(_809, cbModelParam._m0[21u].z, fma(_805, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _801)) + cbModelParam._m0[21u].w;
        float _1738 = fma(_809, cbModelParam._m0[22u].z, fma(_805, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _801)) + cbModelParam._m0[22u].w;
        float _1742 = fma(_809, cbModelParam._m0[23u].z, fma(_805, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _801)) + cbModelParam._m0[23u].w;
        float _1745 = fma(_750, cbModelParam._m0[21u].z, fma(_749, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _748));
        float _1748 = fma(_750, cbModelParam._m0[22u].z, fma(_749, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _748));
        float _1751 = fma(_750, cbModelParam._m0[23u].z, fma(_749, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _748));
        float _1858;
        if (_1745 > 0.0)
        {
            _1858 = abs((1.0 - _1734) / _1745);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1734 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1858 = frontier_phi_28_24_ladder;
        }
        float _2175;
        if (_1748 > 0.0)
        {
            _2175 = abs((1.0 - _1738) / _1748);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1738 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2175 = frontier_phi_40_35_ladder;
        }
        float _2502;
        if (_1751 > 0.0)
        {
            _2502 = abs((1.0 - _1742) / _1751);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1742 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2502 = frontier_phi_50_47_ladder;
        }
        float _2504 = isnan(_2175) ? _1858 : (isnan(_1858) ? _2175 : min(_1858, _2175));
        float _2505 = isnan(_2502) ? _2504 : (isnan(_2504) ? _2502 : min(_2504, _2502));
        float _2509 = (_2505 * _1745) + _1734;
        float _2510 = (_2505 * _1748) + _1738;
        float _2511 = (_2505 * _1751) + _1742;
        float _2512 = _2505 * 9.9999997473787516355514526367188e-05;
        float _2513 = (-1.0) - _2512;
        float _2515 = _2512 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2511 > _2515) || ((_2511 < _2513) || ((_2510 > _2515) || ((_2510 < _2513) || ((_2509 < _2513) || (_2509 > _2515))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2629 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2511, cbModelParam._m0[17u].z, fma(_2510, cbModelParam._m0[17u].y, _2509 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2511, cbModelParam._m0[18u].z, fma(_2510, cbModelParam._m0[18u].y, _2509 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2511, cbModelParam._m0[19u].z, fma(_2510, cbModelParam._m0[19u].y, _2509 * cbModelParam._m0[19u].x))), _1679);
            frontier_phi_25_50_ladder = _2629.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2629.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2629.x * cbModelParam._m0[1u].z;
        }
        _1770 = frontier_phi_25_50_ladder_2;
        _1772 = frontier_phi_25_50_ladder_1;
        _1774 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1754 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_748, _749, _750), _1679);
        _1770 = _1754.x * cbModelParam._m0[1u].z;
        _1772 = _1754.y * cbModelParam._m0[1u].z;
        _1774 = _1754.z * cbModelParam._m0[1u].z;
    }
    float _1786 = ((((1.0 - _769) * ((_756 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_769 * _756)) * _740;
    float _1787 = _1786 * ((cbModelParam._m0[1u].w * (_1770 - _1670)) + _1670);
    float _1788 = _1786 * ((cbModelParam._m0[1u].w * (_1772 - _1672)) + _1672);
    float _1789 = _1786 * ((cbModelParam._m0[1u].w * (_1774 - _1674)) + _1674);
    float _1792 = fma(_1789, cbSceneParam._m0[89u].z, fma(_1788, cbSceneParam._m0[89u].y, _1787 * cbSceneParam._m0[89u].x));
    float _1795 = fma(_1789, cbSceneParam._m0[90u].z, fma(_1788, cbSceneParam._m0[90u].y, _1787 * cbSceneParam._m0[90u].x));
    float _1798 = fma(_1789, cbSceneParam._m0[91u].z, fma(_1788, cbSceneParam._m0[91u].y, _1787 * cbSceneParam._m0[91u].x));
    float _1832 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1836 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1840 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1844 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1845 = _1832 / _1844;
    float _1846 = _1836 / _1844;
    float _1847 = _1840 / _1844;
    float _1994;
    float _1995;
    float _1996;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1874 = ((uint(_1847 > cbSceneParam._m0[59u].y) + uint(_1847 > cbSceneParam._m0[59u].x)) + uint(_1847 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1875 = _1874 + 43u;
        uint _1883 = _1874 + 44u;
        uint _1891 = _1874 + 45u;
        uint _1899 = _1874 + 46u;
        float _1910 = fma(_1844, cbSceneParam._m0[_1875].w, fma(_1840, cbSceneParam._m0[_1875].z, fma(_1836, cbSceneParam._m0[_1875].y, _1832 * cbSceneParam._m0[_1875].x)));
        float _1914 = fma(_1844, cbSceneParam._m0[_1883].w, fma(_1840, cbSceneParam._m0[_1883].z, fma(_1836, cbSceneParam._m0[_1883].y, _1832 * cbSceneParam._m0[_1883].x)));
        float _1922 = fma(_1844, cbSceneParam._m0[_1899].w, fma(_1840, cbSceneParam._m0[_1899].z, fma(_1836, cbSceneParam._m0[_1899].y, _1832 * cbSceneParam._m0[_1899].x)));
        float _1927 = cbSceneParam._m0[33u].z * _1922;
        float _1929 = cbSceneParam._m0[33u].w * _1922;
        float _1932 = fma(_1844, cbSceneParam._m0[_1891].w, fma(_1840, cbSceneParam._m0[_1891].z, fma(_1836, cbSceneParam._m0[_1891].y, _1832 * cbSceneParam._m0[_1891].x))) / _1922;
        float _1980 = (cbSceneParam._m0[33u].x - sqrt(((_1846 * _1846) + (_1845 * _1845)) + (_1847 * _1847))) * cbSceneParam._m0[33u].y;
        float _4331 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1987 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1927 + _1910) / _1922, (_1929 + _1914) / _1922), _1932), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1929 + _1910) / _1922, (_1914 - _1927) / _1922), _1932), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1910 - _1927) / _1922, (_1914 - _1929) / _1922), _1932), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1910 - _1929) / _1922, (_1927 + _1914) / _1922), _1932), 0.0)).x), vec4(0.25)));
        _1994 = 1.0 - (_1987 * cbSceneParam._m0[34u].x);
        _1995 = 1.0 - (_1987 * cbSceneParam._m0[34u].y);
        _1996 = 1.0 - (_1987 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1994 = 1.0;
        _1995 = 1.0;
        _1996 = 1.0;
    }
    float _2060;
    float _2062;
    float _2064;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2048 = fma(_1844, cbSceneParam._m0[63u].w, fma(_1840, cbSceneParam._m0[63u].z, fma(_1836, cbSceneParam._m0[63u].y, _1832 * cbSceneParam._m0[63u].x)));
        float _2049 = fma(_1844, cbSceneParam._m0[60u].w, fma(_1840, cbSceneParam._m0[60u].z, fma(_1836, cbSceneParam._m0[60u].y, _1832 * cbSceneParam._m0[60u].x))) / _2048;
        float _2050 = fma(_1844, cbSceneParam._m0[61u].w, fma(_1840, cbSceneParam._m0[61u].z, fma(_1836, cbSceneParam._m0[61u].y, _1832 * cbSceneParam._m0[61u].x))) / _2048;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2049 >= cbSceneParam._m0[64u].x) && (_2050 >= cbSceneParam._m0[64u].y)) && (_2049 <= cbSceneParam._m0[64u].z)) && (_2050 <= cbSceneParam._m0[64u].w))
        {
            float _2188 = fma(_1844, cbSceneParam._m0[62u].w, fma(_1840, cbSceneParam._m0[62u].z, fma(_1836, cbSceneParam._m0[62u].y, _1832 * cbSceneParam._m0[62u].x))) / _2048;
            float _2192 = isnan(cbSceneParam._m0[41u].w) ? _2188 : (isnan(_2188) ? cbSceneParam._m0[41u].w : max(_2188, cbSceneParam._m0[41u].w));
            float _2235 = (cbSceneParam._m0[33u].x - sqrt(((_1846 * _1846) + (_1845 * _1845)) + (_1847 * _1847))) * cbSceneParam._m0[33u].y;
            float _4347 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
            float _2242 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2049, cbSceneParam._m0[33u].w + _2050), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2049, _2050 - cbSceneParam._m0[33u].z), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2049 - cbSceneParam._m0[33u].z, _2050 - cbSceneParam._m0[33u].w), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2049 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2050), _2192), 0.0)).x), vec4(0.25)));
            float _2246 = 1.0 - (_2242 * cbSceneParam._m0[34u].x);
            float _2247 = 1.0 - (_2242 * cbSceneParam._m0[34u].y);
            float _2248 = 1.0 - (_2242 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2248) ? _1996 : (isnan(_1996) ? _2248 : min(_1996, _2248));
            frontier_phi_37_36_ladder_1 = isnan(_2247) ? _1995 : (isnan(_1995) ? _2247 : min(_1995, _2247));
            frontier_phi_37_36_ladder_2 = isnan(_2246) ? _1994 : (isnan(_1994) ? _2246 : min(_1994, _2246));
        }
        else
        {
            frontier_phi_37_36_ladder = _1996;
            frontier_phi_37_36_ladder_1 = _1995;
            frontier_phi_37_36_ladder_2 = _1994;
        }
        _2060 = frontier_phi_37_36_ladder_2;
        _2062 = frontier_phi_37_36_ladder_1;
        _2064 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2060 = _1994;
        _2062 = _1995;
        _2064 = _1996;
    }
    uvec4 _2069 = floatBitsToUint(cbInstanceData._m0[_262 + 5u]);
    uint _2071 = _2069.x * 14u;
    uint _2072 = _2071 + 13u;
    float _2079 = _740 + (-1.0);
    float _2084 = (cbLight._m0[_2072].x * _2079) + 1.0;
    float _2085 = (cbLight._m0[_2072].y * _2079) + 1.0;
    float _2086 = (cbLight._m0[_2072].z * _2079) + 1.0;
    float _2087 = (cbLight._m0[_2072].w * _2079) + 1.0;
    uint _2088 = _2071 + 5u;
    float _2094 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
    uint _2098 = _2071 + 4u;
    float _2107 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
    uint _2111 = _2071 | 1u;
    float _2122 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_577, _578, _579));
    float _2125 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_577, _578, _579));
    float _4383 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _4394 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2130 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * 0.3183098733425140380859375;
    float _2132 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * 0.3183098733425140380859375;
    float _2139 = ((cbLight._m0[_2088].x * _2094) * _2132) + (((cbLight._m0[_2098].x * _2060) * _2107) * _2130);
    float _2140 = ((_2094 * cbLight._m0[_2088].y) * _2132) + (((cbLight._m0[_2098].y * _2062) * _2107) * _2130);
    float _2141 = ((_2094 * cbLight._m0[_2088].z) * _2132) + (((cbLight._m0[_2098].z * _2064) * _2107) * _2130);
    uvec4 _2145 = floatBitsToUint(cbLight._m0[_2071 + 12u]);
    bool _2147 = _2145.x == 0u;
    float _2249;
    float _2251;
    float _2253;
    if (_2147)
    {
        _2249 = _2139;
        _2251 = _2140;
        _2253 = _2141;
    }
    else
    {
        uint _2257 = _2071 + 6u;
        float _2273 = (dot(vec3(cbLight._m0[_2071 + 2u].xyz), vec3(_577, _578, _579)) * 0.5) + 0.5;
        float _2274 = _2273 * _2273;
        float _4405 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2275 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2276 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
        _2249 = (((cbLight._m0[_2257].x * 0.3183098733425140380859375) * _2275) * _2276) + _2139;
        _2251 = (((cbLight._m0[_2257].y * 0.3183098733425140380859375) * _2275) * _2276) + _2140;
        _2253 = (((cbLight._m0[_2257].z * 0.3183098733425140380859375) * _2275) * _2276) + _2141;
    }
    bool _2256 = _2145.y == 0u;
    float _2311;
    float _2313;
    float _2315;
    if (_2256)
    {
        _2311 = _2249;
        _2313 = _2251;
        _2315 = _2253;
    }
    else
    {
        uint _2473 = _2071 + 7u;
        float _2489 = (dot(vec3(cbLight._m0[_2071 + 3u].xyz), vec3(_577, _578, _579)) * 0.5) + 0.5;
        float _2490 = _2489 * _2489;
        float _4421 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2491 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2492 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
        _2311 = (((cbLight._m0[_2473].x * 0.3183098733425140380859375) * _2491) * _2492) + _2249;
        _2313 = (((cbLight._m0[_2473].y * 0.3183098733425140380859375) * _2491) * _2492) + _2251;
        _2315 = (((cbLight._m0[_2473].z * 0.3183098733425140380859375) * _2491) * _2492) + _2253;
    }
    uint _2318 = _2071 + 8u;
    float _2331 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2071].w)) * _580) * 0.949999988079071044921875);
    float _2332 = _2331 * _2331;
    float _2333 = cbLight._m0[_2071].x + _657;
    float _2334 = cbLight._m0[_2071].y + _658;
    float _2335 = cbLight._m0[_2071].z + _659;
    float _2339 = inversesqrt(dot(vec3(_2333, _2334, _2335), vec3(_2333, _2334, _2335)));
    float _2340 = _2339 * _2333;
    float _2341 = _2339 * _2334;
    float _2342 = _2339 * _2335;
    float _2343 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2071].xyz));
    float _4437 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2346 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _4448 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _2347 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _2348 = dot(vec3(_577, _578, _579), vec3(_2340, _2341, _2342));
    float _4459 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2351 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2352 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_2340, _2341, _2342));
    float _4470 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2356 = _2332 * _2332;
    float _2360 = ((_2351 * _2351) * (_2356 + (-1.0))) + 1.0;
    float _2371 = (exp2(log2(1.0 - (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2372 = 1.0 - _2332;
    float _2383 = (0.5 / (((_2347 * ((_2346 * _2372) + _2332)) + 9.9999999392252902907785028219223e-09) + (((_2347 * _2372) + _2332) * _2346))) * _2346;
    float _4481 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2385 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2356 / ((_2360 * _2360) * 3.141590118408203125));
    uint _2399 = _2071 + 9u;
    float _2410 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2111].w)) * _580) * 0.949999988079071044921875);
    float _2411 = _2410 * _2410;
    float _2412 = cbLight._m0[_2111].x + _657;
    float _2413 = cbLight._m0[_2111].y + _658;
    float _2414 = cbLight._m0[_2111].z + _659;
    float _2418 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
    float _2419 = _2418 * _2412;
    float _2420 = _2418 * _2413;
    float _2421 = _2418 * _2414;
    float _2422 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2111].xyz));
    float _4492 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2425 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _2426 = dot(vec3(_577, _578, _579), vec3(_2419, _2420, _2421));
    float _4503 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2429 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _2430 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_2419, _2420, _2421));
    float _4514 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2434 = _2411 * _2411;
    float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
    float _2447 = (exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2448 = 1.0 - _2411;
    float _2458 = (0.5 / (((_2347 * ((_2425 * _2448) + _2411)) + 9.9999999392252902907785028219223e-09) + (((_2347 * _2448) + _2411) * _2425))) * _2425;
    float _4525 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2460 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
    float _2470 = (((_2447 * cbLight._m0[_2399].x) * _2460) * _2094) + ((((cbLight._m0[_2318].x * _2060) * _2371) * _2385) * _2107);
    float _2471 = (((_2447 * cbLight._m0[_2399].y) * _2460) * _2094) + ((((cbLight._m0[_2318].y * _2062) * _2371) * _2385) * _2107);
    float _2472 = (((_2447 * cbLight._m0[_2399].z) * _2460) * _2094) + ((((cbLight._m0[_2318].z * _2064) * _2371) * _2385) * _2107);
    float _2528;
    float _2530;
    float _2532;
    if (_2147)
    {
        _2528 = _2470;
        _2530 = _2471;
        _2532 = _2472;
    }
    else
    {
        uint _2534 = _2071 + 2u;
        uint _2538 = _2071 + 10u;
        float _2552 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2534].w)) * _580) * 0.949999988079071044921875);
        float _2553 = _2552 * _2552;
        float _2554 = cbLight._m0[_2534].x + _657;
        float _2555 = cbLight._m0[_2534].y + _658;
        float _2556 = cbLight._m0[_2534].z + _659;
        float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
        float _2561 = _2560 * _2554;
        float _2562 = _2560 * _2555;
        float _2563 = _2560 * _2556;
        float _2564 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2534].xyz));
        float _4536 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2567 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2568 = dot(vec3(_577, _578, _579), vec3(_2561, _2562, _2563));
        float _4547 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2571 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2572 = dot(vec3(cbLight._m0[_2534].xyz), vec3(_2561, _2562, _2563));
        float _4558 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2576 = _2553 * _2553;
        float _2580 = ((_2571 * _2571) * (_2576 + (-1.0))) + 1.0;
        float _2589 = (exp2(log2(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2590 = 1.0 - _2553;
        float _2600 = (0.5 / (((_2347 * ((_2567 * _2590) + _2553)) + 9.9999999392252902907785028219223e-09) + (((_2347 * _2590) + _2553) * _2567))) * _2567;
        float _4569 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2602 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2576 / ((_2580 * _2580) * 3.141590118408203125));
        float _2603 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
        _2528 = (((_2589 * cbLight._m0[_2538].x) * _2602) * _2603) + _2470;
        _2530 = (((_2589 * cbLight._m0[_2538].y) * _2602) * _2603) + _2471;
        _2532 = (((_2589 * cbLight._m0[_2538].z) * _2602) * _2603) + _2472;
    }
    float _2634;
    float _2636;
    float _2638;
    if (_2256)
    {
        _2634 = _2528;
        _2636 = _2530;
        _2638 = _2532;
    }
    else
    {
        uint _2645 = _2071 + 3u;
        uint _2649 = _2071 + 11u;
        float _2663 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2645].w)) * _580) * 0.949999988079071044921875);
        float _2664 = _2663 * _2663;
        float _2665 = cbLight._m0[_2645].x + _657;
        float _2666 = cbLight._m0[_2645].y + _658;
        float _2667 = cbLight._m0[_2645].z + _659;
        float _2671 = inversesqrt(dot(vec3(_2665, _2666, _2667), vec3(_2665, _2666, _2667)));
        float _2672 = _2671 * _2665;
        float _2673 = _2671 * _2666;
        float _2674 = _2671 * _2667;
        float _2675 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2645].xyz));
        float _4585 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2678 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2679 = dot(vec3(_577, _578, _579), vec3(_2672, _2673, _2674));
        float _4596 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2682 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2683 = dot(vec3(cbLight._m0[_2645].xyz), vec3(_2672, _2673, _2674));
        float _4607 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2687 = _2664 * _2664;
        float _2691 = ((_2682 * _2682) * (_2687 + (-1.0))) + 1.0;
        float _2700 = (exp2(log2(1.0 - (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2701 = 1.0 - _2664;
        float _2711 = (0.5 / (((_2347 * ((_2678 * _2701) + _2664)) + 9.9999999392252902907785028219223e-09) + (((_2347 * _2701) + _2664) * _2678))) * _2678;
        float _4618 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2713 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2687 / ((_2691 * _2691) * 3.141590118408203125));
        float _2714 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
        _2634 = (((_2700 * cbLight._m0[_2649].x) * _2713) * _2714) + _2528;
        _2636 = (((_2700 * cbLight._m0[_2649].y) * _2713) * _2714) + _2530;
        _2638 = (((_2700 * cbLight._m0[_2649].z) * _2713) * _2714) + _2532;
    }
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    float _2788;
    float _2790;
    if (_2069.y == 0u)
    {
        uvec4 _2735 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2736 = _2735.x;
        uint _2747 = uint((float(_2735.y) * floor(float(uint(cbSceneParam._m0[85u].y * _678) / _2736))) + floor(float(uint(cbSceneParam._m0[85u].x * _677) / _2736)));
        float _2757 = (log2(_1847 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2758 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        uint _2761 = uint(isnan(14.0) ? _2758 : (isnan(_2758) ? 14.0 : min(_2758, 14.0)));
        uvec4 _2766 = texelFetch(g_lightClusterGridBuffer, int(((_2761 << 2u) + (_2747 << 6u)) >> 2u));
        uint _2767 = _2766.x;
        uint _2768 = _2735.z;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        if (((((1u << ((_2768 >> 4u) & 15u)) + 4294967295u) & _2767) == 0u) || ((_2768 & 240u) == 0u))
        {
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
        }
        else
        {
            float _2848;
            float _2850;
            float _2852;
            float _2854;
            float _2856;
            float _2858;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            uint _3006 = 0u;
            uint _3015;
            bool _3016;
            for (;;)
            {
                _3015 = texelFetch(g_lightClassification, int((((_2761 << 5u) + (_2747 << 9u)) + (_3006 << 2u)) >> 2u)).x;
                _3016 = _3015 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3016)
                {
                    frontier_phi_71_pred = _3005;
                    frontier_phi_71_pred_1 = _3004;
                    frontier_phi_71_pred_2 = _3003;
                    frontier_phi_71_pred_3 = _3002;
                    frontier_phi_71_pred_4 = _3001;
                    frontier_phi_71_pred_5 = _3000;
                }
                else
                {
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    uint _3151;
                    _3145 = _3000;
                    _3146 = _3001;
                    _3147 = _3002;
                    _3148 = _3003;
                    _3149 = _3004;
                    _3150 = _3005;
                    _3151 = _3015;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    for (;;)
                    {
                        uint _3155 = uint(findLSB(_3151)) + (_3006 << 5u);
                        uint _3152 = (_3151 + 4294967295u) & _3151;
                        uint _3157 = _3155 * 48u;
                        vec4 _3171 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3157)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 3u)).x));
                        uint _3177 = (_3155 * 48u) + 4u;
                        vec4 _3190 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3177)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 3u)).x));
                        uint _3196 = (_3155 * 48u) + 8u;
                        vec3 _3207 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3196)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 2u)).x));
                        float _3211 = _3171.x - _1845;
                        float _3212 = _3171.y - _1846;
                        float _3213 = _3171.z - _1847;
                        float _3214 = dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213));
                        float _3217 = inversesqrt(_3214);
                        float _3218 = _3217 * _3211;
                        float _3219 = _3217 * _3212;
                        float _3220 = _3217 * _3213;
                        float _3221 = dot(vec3(_696, _699, _702), vec3(_3218, _3219, _3220));
                        float _3226 = 1.0 - (_3214 * _3171.w);
                        float _4644 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3227 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3228 = sqrt(_3214) * _3190.w;
                        float _3231 = 1.39999997615814208984375 / (_3228 + 1.39999997615814208984375);
                        float _3232 = _3231 * _3231;
                        float _3235 = ((1.0 - _3232) * _3221) + _3232;
                        float _3238 = _3228 * _3228;
                        float _3242 = ((isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0))) * _3227) / ((_3238 * 0.699999988079071044921875) + 1.0);
                        float _3246 = (-0.0) - _1845;
                        float _3247 = (-0.0) - _1846;
                        float _3248 = (-0.0) - _1847;
                        float _3252 = inversesqrt(dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248)));
                        float _3253 = _3252 * _3246;
                        float _3254 = _3252 * _3247;
                        float _3255 = _3252 * _3248;
                        float _3262 = exp2(log2(1.0 / ((_3238 * 3.5) + 5.0)) * 0.25);
                        float _3263 = 1.0 - _756;
                        float _3270 = sqrt(1.0 - ((1.0 - (_3263 * _3263)) * (1.0 - (_3262 * _3262))));
                        float _3271 = _3270 * _3270;
                        float _3272 = _3271 * _3271;
                        float _3273 = _3253 + _3218;
                        float _3274 = _3254 + _3219;
                        float _3275 = _3255 + _3220;
                        float _3279 = inversesqrt(dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275)));
                        float _3283 = dot(vec3(_696, _699, _702), vec3(_3253, _3254, _3255));
                        float _4660 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3286 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                        float _3287 = dot(vec3(_696, _699, _702), vec3(_3279 * _3273, _3279 * _3274, _3279 * _3275));
                        float _4671 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3290 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3294 = ((_3290 * _3290) * (_3272 + (-1.0))) + 1.0;
                        float _3295 = _3231 * _3271;
                        float _3296 = _3295 * _3295;
                        float _3299 = ((1.0 - _3296) * _3221) + _3296;
                        float _4682 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3300 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                        float _3301 = 1.0 - _3271;
                        float _3311 = (0.5 / (((_3300 * ((_3286 * _3301) + _3271)) + 9.9999999392252902907785028219223e-09) + (((_3300 * _3301) + _3271) * _3286))) * _3300;
                        float _4693 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3322 = (((_3272 * 3.1415927410125732421875) * (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0)))) / ((_3294 * _3294) * ((_3238 * 2.1991131305694580078125) + 3.141590118408203125))) * _3227;
                        _3075 = (_3242 * _3190.x) + _3148;
                        _3076 = (_3242 * _3190.y) + _3149;
                        _3077 = (_3242 * _3190.z) + _3150;
                        _3072 = (_3322 * _3207.x) + _3145;
                        _3073 = (_3322 * _3207.y) + _3146;
                        _3074 = (_3322 * _3207.z) + _3147;
                        if (_3152 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3145 = _3072;
                            _3146 = _3073;
                            _3147 = _3074;
                            _3148 = _3075;
                            _3149 = _3076;
                            _3150 = _3077;
                            _3151 = _3152;
                        }
                    }
                    frontier_phi_71_pred = _3077;
                    frontier_phi_71_pred_1 = _3076;
                    frontier_phi_71_pred_2 = _3075;
                    frontier_phi_71_pred_3 = _3074;
                    frontier_phi_71_pred_4 = _3073;
                    frontier_phi_71_pred_5 = _3072;
                }
                _2858 = frontier_phi_71_pred;
                _2856 = frontier_phi_71_pred_1;
                _2854 = frontier_phi_71_pred_2;
                _2852 = frontier_phi_71_pred_3;
                _2850 = frontier_phi_71_pred_4;
                _2848 = frontier_phi_71_pred_5;
                uint _3007 = _3006 + 1u;
                if (_3007 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3000 = _2848;
                    _3001 = _2850;
                    _3002 = _2852;
                    _3003 = _2854;
                    _3004 = _2856;
                    _3005 = _2858;
                    _3006 = _3007;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
        }
        uvec4 _2861 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2862 = _2861.z;
        uint _2864 = (_2862 >> 8u) & 15u;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        if (((4294967295u << _2864) & _2767) == 0u)
        {
            _2968 = _2847;
            _2970 = _2849;
            _2972 = _2851;
            _2974 = _2853;
            _2976 = _2855;
            _2978 = _2857;
        }
        else
        {
            float _2993 = inversesqrt(dot(vec3(_1845, _1846, _1847), vec3(_1845, _1846, _1847)));
            float _2994 = _2993 * _1845;
            float _2995 = _2993 * _1846;
            float _2996 = _2993 * _1847;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2864 < ((_2862 >> 12u) & 15u))
            {
                float _2969;
                float _2971;
                float _2973;
                float _2975;
                float _2977;
                float _2979;
                float _3128 = _2847;
                float _3129 = _2849;
                float _3130 = _2851;
                float _3131 = _2853;
                float _3132 = _2855;
                float _3133 = _2857;
                uint _3134 = _2864;
                uint _3143;
                bool _3144;
                for (;;)
                {
                    _3143 = texelFetch(g_lightClassification, int((((_2761 << 5u) + (_2747 << 9u)) + (_3134 << 2u)) >> 2u)).x;
                    _3144 = _3143 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3144)
                    {
                        frontier_phi_82_pred = _3133;
                        frontier_phi_82_pred_1 = _3132;
                        frontier_phi_82_pred_2 = _3131;
                        frontier_phi_82_pred_3 = _3130;
                        frontier_phi_82_pred_4 = _3129;
                        frontier_phi_82_pred_5 = _3128;
                    }
                    else
                    {
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3349 = _3128;
                        float _3350 = _3129;
                        float _3351 = _3130;
                        float _3352 = _3131;
                        float _3353 = _3132;
                        float _3354 = _3133;
                        uint _3355 = _3143;
                        uint _3356;
                        vec4 _3381;
                        float _3382;
                        vec4 _3397;
                        vec3 _3409;
                        vec4 _3424;
                        vec4 _3439;
                        float _3485;
                        bool _3486;
                        for (;;)
                        {
                            uint _3366 = ((_3134 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3355));
                            _3356 = (_3355 + 4294967295u) & _3355;
                            uint _3368 = _3366 * 40u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            _3382 = _3381.w;
                            uint _3384 = (_3366 * 40u) + 4u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3399 = (_3366 * 40u) + 8u;
                            _3409 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x));
                            uint _3411 = (_3366 * 40u) + 16u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            uint _3426 = (_3366 * 40u) + 20u;
                            _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            uint _3441 = (_3366 * 40u) + 24u;
                            vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3460 = (_3366 * 40u) + 28u;
                            vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            _3485 = fma(_1847, _3473.z, fma(_1846, _3473.y, _3473.x * _1845)) + _3473.w;
                            _3486 = !((fma(_1847, _3454.z, fma(_1846, _3454.y, _3454.x * _1845)) + _3454.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3486)
                            {
                                float _3513 = _3381.x - _1845;
                                float _3514 = _3381.y - _1846;
                                float _3515 = _3381.z - _1847;
                                float _3516 = dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515));
                                float _3519 = inversesqrt(_3516);
                                float _3520 = _3519 * _3513;
                                float _3521 = _3519 * _3514;
                                float _3522 = _3519 * _3515;
                                float _3526 = 1.0 - (_3516 / (_3382 * _3382));
                                float _4704 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3531 = sqrt(_3516) * _3397.w;
                                float _3533 = 1.39999997615814208984375 / (_3531 + 1.39999997615814208984375);
                                float _3534 = _3533 * _3533;
                                float _3537 = ((1.0 - _3534) * dot(vec3(_3520, _3521, _3522), vec3(_696, _699, _702))) + _3534;
                                float _3540 = _3531 * _3531;
                                float _3544 = (fma(_1847, _3424.z, fma(_1846, _3424.y, _3424.x * _1845)) + _3424.w) / _3485;
                                float _3545 = (fma(_1847, _3439.z, fma(_1846, _3439.y, _3439.x * _1845)) + _3439.w) / _3485;
                                float _3549 = 1.0 - dot(vec2(_3544, _3545), vec2(_3544, _3545));
                                float _4720 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3550 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3551 = _3550 * (((isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0))) * _3527) / ((_3540 * 0.699999988079071044921875) + 1.0));
                                float _3563 = exp2(log2(1.0 / ((_3540 * 3.5) + 5.0)) * 0.25);
                                float _3564 = 1.0 - _756;
                                float _3571 = sqrt(1.0 - ((1.0 - (_3564 * _3564)) * (1.0 - (_3563 * _3563))));
                                float _3572 = _3571 * _3571;
                                float _3573 = _3572 * _3572;
                                float _3574 = _3520 - _2994;
                                float _3575 = _3521 - _2995;
                                float _3576 = _3522 - _2996;
                                float _3580 = inversesqrt(dot(vec3(_3574, _3575, _3576), vec3(_3574, _3575, _3576)));
                                float _3584 = dot(vec3(_696, _699, _702), vec3((-0.0) - _2994, (-0.0) - _2995, (-0.0) - _2996));
                                float _4731 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3587 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3588 = dot(vec3(_696, _699, _702), vec3(_3580 * _3574, _3580 * _3575, _3580 * _3576));
                                float _4742 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3591 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3595 = ((_3591 * _3591) * (_3573 + (-1.0))) + 1.0;
                                float _3596 = _3533 * _3572;
                                float _3597 = _3596 * _3596;
                                float _3603 = ((1.0 - _3597) * dot(vec3(_696, _699, _702), vec3(_3520, _3521, _3522))) + _3597;
                                float _4753 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3604 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3605 = 1.0 - _3572;
                                float _3615 = (0.5 / (((_3604 * ((_3587 * _3605) + _3572)) + 9.9999999392252902907785028219223e-09) + (((_3604 * _3605) + _3572) * _3587))) * _3604;
                                float _4764 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3625 = (_3550 * _3527) * (((_3573 * 3.1415927410125732421875) * (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) / ((_3595 * _3595) * ((_3540 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3551 * _3397.z;
                                frontier_phi_88_pred_1 = _3551 * _3397.y;
                                frontier_phi_88_pred_2 = _3551 * _3397.x;
                                frontier_phi_88_pred_3 = _3625 * _3409.z;
                                frontier_phi_88_pred_4 = _3625 * _3409.y;
                                frontier_phi_88_pred_5 = _3625 * _3409.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3634 = frontier_phi_88_pred;
                            _3633 = frontier_phi_88_pred_1;
                            _3632 = frontier_phi_88_pred_2;
                            _3631 = frontier_phi_88_pred_3;
                            _3630 = frontier_phi_88_pred_4;
                            _3629 = frontier_phi_88_pred_5;
                            _3339 = _3632 + _3352;
                            _3340 = _3633 + _3353;
                            _3341 = _3634 + _3354;
                            _3336 = _3629 + _3349;
                            _3337 = _3630 + _3350;
                            _3338 = _3631 + _3351;
                            if (_3356 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3356;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3341;
                        frontier_phi_82_pred_1 = _3340;
                        frontier_phi_82_pred_2 = _3339;
                        frontier_phi_82_pred_3 = _3338;
                        frontier_phi_82_pred_4 = _3337;
                        frontier_phi_82_pred_5 = _3336;
                    }
                    _2979 = frontier_phi_82_pred;
                    _2977 = frontier_phi_82_pred_1;
                    _2975 = frontier_phi_82_pred_2;
                    _2973 = frontier_phi_82_pred_3;
                    _2971 = frontier_phi_82_pred_4;
                    _2969 = frontier_phi_82_pred_5;
                    uint _3135 = _3134 + 1u;
                    if (_3135 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3128 = _2969;
                        _3129 = _2971;
                        _3130 = _2973;
                        _3131 = _2975;
                        _3132 = _2977;
                        _3133 = _2979;
                        _3134 = _3135;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2975;
                frontier_phi_63_64_ladder_1 = _2979;
                frontier_phi_63_64_ladder_2 = _2977;
                frontier_phi_63_64_ladder_3 = _2973;
                frontier_phi_63_64_ladder_4 = _2971;
                frontier_phi_63_64_ladder_5 = _2969;
            }
            else
            {
                frontier_phi_63_64_ladder = _2853;
                frontier_phi_63_64_ladder_1 = _2857;
                frontier_phi_63_64_ladder_2 = _2855;
                frontier_phi_63_64_ladder_3 = _2851;
                frontier_phi_63_64_ladder_4 = _2849;
                frontier_phi_63_64_ladder_5 = _2847;
            }
            _2968 = frontier_phi_63_64_ladder_5;
            _2970 = frontier_phi_63_64_ladder_4;
            _2972 = frontier_phi_63_64_ladder_3;
            _2974 = frontier_phi_63_64_ladder;
            _2976 = frontier_phi_63_64_ladder_2;
            _2978 = frontier_phi_63_64_ladder_1;
        }
        float _2983 = isnan(1.0) ? _740 : (isnan(_740) ? 1.0 : min(_740, 1.0));
        _2780 = (_2983 * _2974) + _2311;
        _2782 = (_2983 * _2976) + _2313;
        _2784 = (_2983 * _2978) + _2315;
        _2786 = ((_2968 * 0.039999999105930328369140625) * _2983) + _2634;
        _2788 = ((_2970 * 0.039999999105930328369140625) * _2983) + _2636;
        _2790 = ((_2972 * 0.039999999105930328369140625) * _2983) + _2638;
    }
    else
    {
        _2780 = _2311;
        _2782 = _2313;
        _2784 = _2315;
        _2786 = _2634;
        _2788 = _2636;
        _2790 = _2638;
    }
    float _4780 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _4791 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _4802 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _2807 = ((isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2780 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _740))) + ((_2786 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1577)) * cbPerFrame._m0[3u].x);
    float _2808 = ((isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2782 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _740))) + ((_2788 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1577)) * cbPerFrame._m0[3u].x);
    float _2809 = ((isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2784 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _740))) + ((_2790 + ((isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))) * _1577)) * cbPerFrame._m0[3u].x);
    uint _2810 = _262 + 6u;
    float _2818 = _677 / cbSceneParam._m0[86u].x;
    float _2819 = _678 / cbSceneParam._m0[86u].y;
    vec4 _2833 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2818, _2819, (log2((isnan(cbSceneParam._m0[77u].w) ? _598 : (isnan(_598) ? cbSceneParam._m0[77u].w : min(_598, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2835 = _2833.x;
    float _2836 = _2833.y;
    float _2837 = _2833.z;
    float _2838 = _2833.w;
    float _2910;
    float _2912;
    float _2914;
    float _2916;
    if (_598 > cbSceneParam._m0[78u].w)
    {
        float _2872 = isnan(_598) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _598 : min(cbSceneParam._m0[80u].w, _598));
        float _2873 = _2872 / _598;
        float _2884 = _2873 * _650;
        float _2885 = _651 * _2873;
        float _2886 = (-0.0) - _2885;
        float _2888 = _2873 * _652;
        float _2890 = (cbSceneParam._m0[77u].w * _2886) / _2872;
        float _2891 = _2890 + cbSceneParam._m0[79u].w;
        float _2892 = cbSceneParam._m0[79u].w - _2885;
        float _2898 = sqrt(((_2884 * _2884) + (_2885 * _2885)) + (_2888 * _2888));
        float _2901 = (1.0 - (cbSceneParam._m0[77u].w / _2872)) * _2898;
        float _2906 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2908 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3085;
        if (abs((_2886 - _2890) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3085 = ((((_2891 > 0.0) ? exp2(_2906 * _2891) : (2.0 - exp2(_2908 * _2891))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2901;
        }
        else
        {
            float _3029 = 1.0 / cbSceneParam._m0[80u].x;
            float _3030 = isnan(_2892) ? _2891 : (isnan(_2891) ? _2892 : max(_2891, _2892));
            float _3031 = isnan(_2892) ? _2891 : (isnan(_2891) ? _2892 : min(_2891, _2892));
            float _3040 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : min(_3030, 0.0));
            float _3041 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : min(_3031, 0.0));
            _3085 = ((abs(_2898 / _2886) * cbSceneParam._m0[80u].y) * ((((_3040 - _3041) * 2.0) - ((exp2(_2906 * (isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0)))) - exp2(_2906 * (isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0))))) * _3029)) - ((exp2(_2908 * _3040) - exp2(_2908 * _3041)) * _3029))) + (_2901 * cbSceneParam._m0[80u].z);
        }
        vec4 _3087 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2818, _2819, 1.0), 0.0);
        float _3096 = exp2((_3085 * (-1.44269502162933349609375)) * (1.0 - _3087.w));
        float _3097 = log2(_3096);
        float _3113 = log2(_2838);
        _2910 = (exp2(_3113 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3097 * cbSceneParam._m0[78u].x)) * _3087.x) / cbSceneParam._m0[78u].x)) + _2835;
        _2912 = (exp2(_3113 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3097 * cbSceneParam._m0[78u].y)) * _3087.y) / cbSceneParam._m0[78u].y)) + _2836;
        _2914 = (exp2(_3113 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3097 * cbSceneParam._m0[78u].z)) * _3087.z) / cbSceneParam._m0[78u].z)) + _2837;
        _2916 = _3096 * _2838;
    }
    else
    {
        _2910 = _2835;
        _2912 = _2836;
        _2914 = _2837;
        _2916 = _2838;
    }
    bool _3123;
    vec4 _2926;
    vec4 _2948;
    float _2950;
    float _2954;
    float _2955;
    float _2956;
    float _2957;
    bool _2967;
    for (;;)
    {
        _2926 = cbMatDynParam._m0[0u];
        float _2928 = roundEven(_2926.y);
        bool _2929 = _2928 == 3.0;
        float _2930 = log2(_2916);
        float _2937 = exp2(_2930 * cbSceneParam._m0[78u].x) * _2807;
        float _2938 = exp2(_2930 * cbSceneParam._m0[78u].y) * _2808;
        float _2939 = exp2(_2930 * cbSceneParam._m0[78u].z) * _2809;
        float _2946 = _666 + (-0.5);
        _2948 = cbMtdParam._m0[1u];
        _2950 = _2948.y * _2946;
        float _2953 = (_2928 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2954 = _2953 * (_2929 ? _2937 : (_2937 + (cbSceneParam._m0[72u].w * _2910)));
        _2955 = _2953 * (_2929 ? _2938 : (_2938 + (cbSceneParam._m0[72u].w * _2912)));
        _2956 = _2953 * (_2929 ? _2939 : (_2939 + (cbSceneParam._m0[72u].w * _2914)));
        _2957 = _2946 * 0.999000012874603271484375;
        _2967 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2967)
        {
            if ((cbInstanceData._m0[_262 + 7u].x + _2957) < 0.5)
            {
                _3123 = true;
                break;
            }
        }
        uint _3064 = _715 + uint(_2926.w);
        if ((cbInstanceData._m0[_3064].w < 1.0) && ((cbInstanceData._m0[_3064].w + _2957) < 0.5))
        {
            _3123 = true;
            break;
        }
        if ((_2950 + 1.0) < _2948.x)
        {
            _3123 = true;
            break;
        }
        _3123 = false;
        break;
    }
    float _3327;
    if (_3123)
    {
        discard_state = true;
        _3327 = 0.0;
    }
    else
    {
        _3327 = cbInstanceData._m0[_2810].w;
    }
    SV_Target.x = _2954;
    SV_Target.y = _2955;
    SV_Target.z = _2956;
    SV_Target.w = _3327;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2810].w;
    discard_exit();
}


