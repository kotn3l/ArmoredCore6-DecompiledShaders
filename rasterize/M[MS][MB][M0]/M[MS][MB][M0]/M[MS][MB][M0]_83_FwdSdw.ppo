#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1119;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _356 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _356) * cbMtdParam._m0[24u].x) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3708 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _381 = (_374 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _382 = (_374 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _383 = (_374 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _258) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _259) + cbTextureTilingScale._m0[20u].w));
    vec4 _426 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _443 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    float _447 = _443.z;
    float _456 = ((_426.z - _447) * _374) + _447;
    float _459 = ((((_426.x - _445) * _374) + _445) * 2.0) + (-1.0);
    float _460 = ((((_426.y - _446) * _374) + _446) * 2.0) + (-1.0);
    float _461 = dot(vec2(_459, _460), vec2(_459, _460));
    float _3719 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _466 = sqrt(1.0 - (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))));
    vec4 _479 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _497 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _499 = _497.x;
    float _500 = 1.0 - _499;
    float _513 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_499 - _500) * cbMtdParam._m0[24u].z) + _500) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3730 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _521 = (_514 * (cbMtdParam._m0[17u].x - _381)) + _381;
    float _522 = (_514 * (cbMtdParam._m0[17u].y - _382)) + _382;
    float _523 = (_514 * (cbMtdParam._m0[17u].z - _383)) + _383;
    float _528 = (((_401.z - _456) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _456;
    vec4 _541 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _548 = (_541.x * 2.0) + (-1.0);
    float _549 = (_541.y * 2.0) + (-1.0);
    float _550 = dot(vec2(_548, _549), vec2(_548, _549));
    float _3741 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _558 = (_514 * (_541.z - _528)) + _528;
    float _563 = _459 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_401.x * 2.0) + (-1.0)));
    float _564 = _460 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_401.y * 2.0) + (-1.0)));
    float _576 = (((_548 - _563) + (cbMtdParam._m0[21u].x * _563)) * _514) + _563;
    float _577 = (((_549 - _564) + (cbMtdParam._m0[21u].x * _564)) * _514) + _564;
    float _578 = (_514 * (sqrt(1.0 - (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) - _466)) + _466;
    float _583 = cbMtdParam._m0[22u].x + _479.w;
    float _586 = fma(_578, _225 * NORMAL.x, fma(_577, _232 * TANGENT.x, (_218 * _210) * _576));
    float _589 = fma(_578, _225 * NORMAL.y, fma(_577, _232 * TANGENT.y, (_218 * _211) * _576));
    float _592 = fma(_578, _225 * NORMAL.z, fma(_577, _232 * TANGENT.z, (_218 * _212) * _576));
    float _596 = inversesqrt(dot(vec3(_586, _589, _592), vec3(_586, _589, _592)));
    float _597 = _596 * _586;
    float _598 = _596 * _589;
    float _599 = _596 * _592;
    float _3752 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _600 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _3763 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _3774 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _3785 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _3796 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _618 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _660 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _670 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _660);
    float _671 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _660);
    float _672 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _660);
    float _676 = inversesqrt(dot(vec3(_670, _671, _672), vec3(_670, _671, _672)));
    float _677 = _670 * _676;
    float _678 = _671 * _676;
    float _679 = _672 * _676;
    float _685 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _686 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _704 = fma(_599, cbSceneParam._m0[5u].z, fma(_598, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _597));
    float _707 = fma(_599, cbSceneParam._m0[6u].z, fma(_598, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _597));
    float _710 = fma(_599, cbSceneParam._m0[7u].z, fma(_598, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _597));
    uint _724 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _730 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) * cbInstanceData._m0[_724].x;
    float _731 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * cbInstanceData._m0[_724].y;
    float _732 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) * cbInstanceData._m0[_724].z;
    float _3807 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _3818 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _3829 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _735 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    vec4 _744 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _685, cbSceneParam._m0[86u].y * _686));
    float _748 = ((isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * TEXCOORD_5.w) * _744.x;
    float _749 = dot(vec3(_597, _598, _599), vec3(_677, _678, _679));
    float _752 = _749 * 2.0;
    float _756 = (_752 * _597) - _677;
    float _757 = (_752 * _598) - _678;
    float _758 = (_752 * _599) - _679;
    float _762 = abs(dot(vec3(_677, _678, _679), vec3(_597, _598, _599)));
    float _3840 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _764 = sqrt(_600);
    float _777 = exp2((_764 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_764 * 3.0));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1118;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _843 = fma(_817, cbModelParam._m0[26u].z, fma(_813, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _809));
        float _847 = fma(_817, cbModelParam._m0[27u].z, fma(_813, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _809));
        float _851 = fma(_817, cbModelParam._m0[28u].z, fma(_813, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _809));
        float _876 = _809 + _597;
        float _877 = _813 + _598;
        float _878 = _817 + _599;
        float _888 = fma(_878, cbModelParam._m0[26u].z, fma(_877, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _876)) - _843;
        float _889 = fma(_878, cbModelParam._m0[27u].z, fma(_877, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _876)) - _847;
        float _890 = fma(_878, cbModelParam._m0[28u].z, fma(_877, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _876)) - _851;
        float _894 = inversesqrt(dot(vec3(_888, _889, _890), vec3(_888, _889, _890)));
        float _907 = ((_894 * _888) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_843 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _908 = ((_894 * _889) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_847 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _909 = ((_894 * _890) / cbModelParam._m0[34u].z) + ((((((_851 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        float _946 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_912.x + (-0.5));
        float _948 = _946 * (_912.y + (-0.5));
        float _949 = _946 * (_912.z + (-0.5));
        float _956 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_919.x + (-0.5));
        float _958 = _956 * (_919.y + (-0.5));
        float _959 = _956 * (_919.z + (-0.5));
        float _966 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_926.x + (-0.5));
        float _968 = _966 * (_926.y + (-0.5));
        float _969 = _966 * (_926.z + (-0.5));
        float _976 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_933.x + (-0.5));
        float _978 = _976 * (_933.y + (-0.5));
        float _979 = _976 * (_933.z + (-0.5));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = _947 * 0.5;
        float _984 = _957 * 0.5;
        float _985 = _967 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _1000 = (dot(vec3(_597, _598, _599), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1010 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3888 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1012 + 1.0))) + _1017) * _980;
        float _1027 = _948 * 0.5;
        float _1028 = _958 * 0.5;
        float _1029 = _968 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1043 = (dot(vec3(_597, _598, _599), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1052 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3921 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1054 + 1.0))) + _1059) * _981;
        float _1069 = _949 * 0.5;
        float _1070 = _959 * 0.5;
        float _1071 = _969 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_597, _598, _599), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3932 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3943 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3954 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1096 + 1.0))) + _1101) * _982;
        _1118 = _949;
        _1120 = _948;
        _1121 = _947;
        _1122 = _959;
        _1123 = _958;
        _1124 = _957;
        _1125 = _969;
        _1126 = _968;
        _1127 = _967;
        _1128 = _982;
        _1129 = _981;
        _1130 = _980;
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
        _1132 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1133 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
    }
    else
    {
        _1118 = _1119;
        _1120 = _1119;
        _1121 = _1119;
        _1122 = _1119;
        _1123 = _1119;
        _1124 = _1119;
        _1125 = _1119;
        _1126 = _1119;
        _1127 = _1119;
        _1128 = _1119;
        _1129 = _1119;
        _1130 = _1119;
        _1131 = 0.0;
        _1132 = 0.0;
        _1133 = 0.0;
    }
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1158 = fma(_817, cbModelParam._m0[30u].z, fma(_813, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _809));
        float _1162 = fma(_817, cbModelParam._m0[31u].z, fma(_813, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _809));
        float _1166 = fma(_817, cbModelParam._m0[32u].z, fma(_813, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _809));
        float _1189 = _809 + _597;
        float _1190 = _813 + _598;
        float _1191 = _817 + _599;
        float _1201 = fma(_1191, cbModelParam._m0[30u].z, fma(_1190, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1189)) - _1158;
        float _1202 = fma(_1191, cbModelParam._m0[31u].z, fma(_1190, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1189)) - _1162;
        float _1203 = fma(_1191, cbModelParam._m0[32u].z, fma(_1190, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1189)) - _1166;
        float _1207 = inversesqrt(dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203)));
        float _1220 = ((_1207 * _1201) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1158 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1207 * _1202) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1162 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1207 * _1203) / cbModelParam._m0[35u].z) + ((((((_1166 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        float _1257 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1224.x + (-0.5));
        float _1259 = _1257 * (_1224.y + (-0.5));
        float _1260 = _1257 * (_1224.z + (-0.5));
        float _1267 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1231.x + (-0.5));
        float _1269 = _1267 * (_1231.y + (-0.5));
        float _1270 = _1267 * (_1231.z + (-0.5));
        float _1277 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1238.x + (-0.5));
        float _1279 = _1277 * (_1238.y + (-0.5));
        float _1280 = _1277 * (_1238.z + (-0.5));
        float _1287 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1245.x + (-0.5));
        float _1289 = _1287 * (_1245.y + (-0.5));
        float _1290 = _1287 * (_1245.z + (-0.5));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = _1258 * 0.5;
        float _1295 = _1268 * 0.5;
        float _1296 = _1278 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_597, _598, _599), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _4017 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1321 + 1.0))) + _1326) * _1291;
        float _1336 = _1259 * 0.5;
        float _1337 = _1269 * 0.5;
        float _1338 = _1279 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_597, _598, _599), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _4050 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1363 + 1.0))) + _1368) * _1292;
        float _1378 = _1260 * 0.5;
        float _1379 = _1270 * 0.5;
        float _1380 = _1280 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_597, _598, _599), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _4083 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1405 + 1.0))) + _1410) * _1293;
        _1427 = _1260;
        _1428 = _1259;
        _1429 = _1258;
        _1430 = _1270;
        _1431 = _1269;
        _1432 = _1268;
        _1433 = _1280;
        _1434 = _1279;
        _1435 = _1278;
        _1436 = _1293;
        _1437 = _1292;
        _1438 = _1291;
        _1439 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1440 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
    }
    else
    {
        _1427 = _1119;
        _1428 = _1119;
        _1429 = _1119;
        _1430 = _1119;
        _1431 = _1119;
        _1432 = _1119;
        _1433 = _1119;
        _1434 = _1119;
        _1435 = _1119;
        _1436 = _1119;
        _1437 = _1119;
        _1438 = _1119;
        _1439 = 0.0;
        _1440 = 0.0;
        _1441 = 0.0;
    }
    float _1451 = (cbModelParam._m0[1u].x * (_1439 - _1131)) + _1131;
    float _1452 = (cbModelParam._m0[1u].x * (_1440 - _1132)) + _1132;
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1133)) + _1133;
    float _1474 = fma(_1453, cbSceneParam._m0[89u].z, fma(_1452, cbSceneParam._m0[89u].y, _1451 * cbSceneParam._m0[89u].x));
    float _1477 = fma(_1453, cbSceneParam._m0[90u].z, fma(_1452, cbSceneParam._m0[90u].y, _1451 * cbSceneParam._m0[90u].x));
    float _1480 = fma(_1453, cbSceneParam._m0[91u].z, fma(_1452, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1451));
    float _1495 = _756 * 0.5;
    float _1496 = _757 * 0.5;
    float _1497 = _758 * 0.5;
    float _1498 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1501 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1428, _1431, _1434, _1437));
    float _1504 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1427, _1430, _1433, _1436));
    float _1538;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1511 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1118, _1122, _1125, _1128));
        float _1515 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1120, _1123, _1126, _1129));
        float _1519 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1121, _1124, _1127, _1130));
        float _1526 = dot(vec4(cbModelParam._m0[39u]), vec4(_1495, _1496, _1497, 1.0));
        _1538 = dot(vec3(isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1526) ? 0.0 : (isnan(0.0) ? _1526 : max(0.0, _1526))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1538 = 1.0;
    }
    float _1549;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1540 = dot(vec4(cbModelParam._m0[40u]), vec4(_1495, _1496, _1497, 1.0));
        _1549 = dot(vec3(isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1540) ? 0.0 : (isnan(0.0) ? _1540 : max(0.0, _1540))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1549 = 1.0;
    }
    float _1553 = (_1549 * cbModelParam._m0[1u].x) + (_1538 * (1.0 - cbModelParam._m0[1u].x));
    float _1563 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _600);
    float _1564 = isnan(_1563) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1563 : min(cbModelParam._m0[25u].z, _1563));
    float _1645;
    float _1647;
    float _1649;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1612 = fma(_817, cbModelParam._m0[13u].z, fma(_813, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _809)) + cbModelParam._m0[13u].w;
        float _1616 = fma(_817, cbModelParam._m0[14u].z, fma(_813, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _809)) + cbModelParam._m0[14u].w;
        float _1620 = fma(_817, cbModelParam._m0[15u].z, fma(_813, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _809)) + cbModelParam._m0[15u].w;
        float _1623 = fma(_758, cbModelParam._m0[13u].z, fma(_757, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _756));
        float _1626 = fma(_758, cbModelParam._m0[14u].z, fma(_757, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _756));
        float _1629 = fma(_758, cbModelParam._m0[15u].z, fma(_757, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _756));
        float _1657;
        if (_1623 > 0.0)
        {
            _1657 = abs((1.0 - _1612) / _1623);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1612 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1657 = frontier_phi_14_12_ladder;
        }
        float _1827;
        if (_1626 > 0.0)
        {
            _1827 = abs((1.0 - _1616) / _1626);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1616 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1827 = frontier_phi_23_19_ladder;
        }
        float _2122;
        if (_1629 > 0.0)
        {
            _2122 = abs((1.0 - _1620) / _1629);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1620 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2122 = frontier_phi_35_30_ladder;
        }
        float _2124 = isnan(_1827) ? _1657 : (isnan(_1657) ? _1827 : min(_1657, _1827));
        float _2125 = isnan(_2122) ? _2124 : (isnan(_2124) ? _2122 : min(_2124, _2122));
        float _2129 = (_2125 * _1623) + _1612;
        float _2130 = (_2125 * _1626) + _1616;
        float _2131 = (_2125 * _1629) + _1620;
        float _2132 = _2125 * 9.9999997473787516355514526367188e-05;
        float _2134 = (-1.0) - _2132;
        float _2136 = _2132 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2131 > _2136) || ((_2131 < _2134) || ((_2130 > _2136) || ((_2130 < _2134) || ((_2129 < _2134) || (_2129 > _2136))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2276 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2131, cbModelParam._m0[9u].z, fma(_2130, cbModelParam._m0[9u].y, _2129 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2131, cbModelParam._m0[10u].z, fma(_2130, cbModelParam._m0[10u].y, _2129 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2131, cbModelParam._m0[11u].z, fma(_2130, cbModelParam._m0[11u].y, _2129 * cbModelParam._m0[11u].x))), _1564);
            frontier_phi_13_35_ladder = _2276.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2276.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2276.x * cbModelParam._m0[1u].y;
        }
        _1645 = frontier_phi_13_35_ladder_2;
        _1647 = frontier_phi_13_35_ladder_1;
        _1649 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1633 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_756, _757, _758), _1564);
        _1645 = _1633.x * cbModelParam._m0[1u].y;
        _1647 = _1633.y * cbModelParam._m0[1u].y;
        _1649 = _1633.z * cbModelParam._m0[1u].y;
    }
    float _1653 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _600);
    float _1654 = isnan(_1653) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1653 : min(cbModelParam._m0[25u].w, _1653));
    float _1744;
    float _1746;
    float _1748;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1708 = fma(_817, cbModelParam._m0[21u].z, fma(_813, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _809)) + cbModelParam._m0[21u].w;
        float _1712 = fma(_817, cbModelParam._m0[22u].z, fma(_813, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _809)) + cbModelParam._m0[22u].w;
        float _1716 = fma(_817, cbModelParam._m0[23u].z, fma(_813, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _809)) + cbModelParam._m0[23u].w;
        float _1719 = fma(_758, cbModelParam._m0[21u].z, fma(_757, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _756));
        float _1722 = fma(_758, cbModelParam._m0[22u].z, fma(_757, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _756));
        float _1725 = fma(_758, cbModelParam._m0[23u].z, fma(_757, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _756));
        float _1832;
        if (_1719 > 0.0)
        {
            _1832 = abs((1.0 - _1708) / _1719);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1708 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1832 = frontier_phi_25_21_ladder;
        }
        float _2149;
        if (_1722 > 0.0)
        {
            _2149 = abs((1.0 - _1712) / _1722);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1712 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2149 = frontier_phi_37_32_ladder;
        }
        float _2476;
        if (_1725 > 0.0)
        {
            _2476 = abs((1.0 - _1716) / _1725);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1716 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2476 = frontier_phi_47_44_ladder;
        }
        float _2478 = isnan(_2149) ? _1832 : (isnan(_1832) ? _2149 : min(_1832, _2149));
        float _2479 = isnan(_2476) ? _2478 : (isnan(_2478) ? _2476 : min(_2478, _2476));
        float _2483 = (_2479 * _1719) + _1708;
        float _2484 = (_2479 * _1722) + _1712;
        float _2485 = (_2479 * _1725) + _1716;
        float _2486 = _2479 * 9.9999997473787516355514526367188e-05;
        float _2487 = (-1.0) - _2486;
        float _2489 = _2486 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2485 > _2489) || ((_2485 < _2487) || ((_2484 > _2489) || ((_2484 < _2487) || ((_2483 < _2487) || (_2483 > _2489))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2603 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2485, cbModelParam._m0[17u].z, fma(_2484, cbModelParam._m0[17u].y, _2483 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2485, cbModelParam._m0[18u].z, fma(_2484, cbModelParam._m0[18u].y, _2483 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2485, cbModelParam._m0[19u].z, fma(_2484, cbModelParam._m0[19u].y, _2483 * cbModelParam._m0[19u].x))), _1654);
            frontier_phi_22_47_ladder = _2603.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2603.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2603.x * cbModelParam._m0[1u].z;
        }
        _1744 = frontier_phi_22_47_ladder_2;
        _1746 = frontier_phi_22_47_ladder_1;
        _1748 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1728 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_756, _757, _758), _1654);
        _1744 = _1728.x * cbModelParam._m0[1u].z;
        _1746 = _1728.y * cbModelParam._m0[1u].z;
        _1748 = _1728.z * cbModelParam._m0[1u].z;
    }
    float _1760 = ((((1.0 - _777) * ((_764 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_777 * _764)) * _748;
    float _1761 = _1760 * ((cbModelParam._m0[1u].w * (_1744 - _1645)) + _1645);
    float _1762 = _1760 * ((cbModelParam._m0[1u].w * (_1746 - _1647)) + _1647);
    float _1763 = _1760 * ((cbModelParam._m0[1u].w * (_1748 - _1649)) + _1649);
    float _1766 = fma(_1763, cbSceneParam._m0[89u].z, fma(_1762, cbSceneParam._m0[89u].y, _1761 * cbSceneParam._m0[89u].x));
    float _1769 = fma(_1763, cbSceneParam._m0[90u].z, fma(_1762, cbSceneParam._m0[90u].y, _1761 * cbSceneParam._m0[90u].x));
    float _1772 = fma(_1763, cbSceneParam._m0[91u].z, fma(_1762, cbSceneParam._m0[91u].y, _1761 * cbSceneParam._m0[91u].x));
    float _1806 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1810 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1814 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1818 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1819 = _1806 / _1818;
    float _1820 = _1810 / _1818;
    float _1821 = _1814 / _1818;
    float _1968;
    float _1969;
    float _1970;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1848 = ((uint(_1821 > cbSceneParam._m0[59u].y) + uint(_1821 > cbSceneParam._m0[59u].x)) + uint(_1821 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1849 = _1848 + 43u;
        uint _1857 = _1848 + 44u;
        uint _1865 = _1848 + 45u;
        uint _1873 = _1848 + 46u;
        float _1884 = fma(_1818, cbSceneParam._m0[_1849].w, fma(_1814, cbSceneParam._m0[_1849].z, fma(_1810, cbSceneParam._m0[_1849].y, _1806 * cbSceneParam._m0[_1849].x)));
        float _1888 = fma(_1818, cbSceneParam._m0[_1857].w, fma(_1814, cbSceneParam._m0[_1857].z, fma(_1810, cbSceneParam._m0[_1857].y, _1806 * cbSceneParam._m0[_1857].x)));
        float _1896 = fma(_1818, cbSceneParam._m0[_1873].w, fma(_1814, cbSceneParam._m0[_1873].z, fma(_1810, cbSceneParam._m0[_1873].y, _1806 * cbSceneParam._m0[_1873].x)));
        float _1901 = cbSceneParam._m0[33u].z * _1896;
        float _1903 = cbSceneParam._m0[33u].w * _1896;
        float _1906 = fma(_1818, cbSceneParam._m0[_1865].w, fma(_1814, cbSceneParam._m0[_1865].z, fma(_1810, cbSceneParam._m0[_1865].y, _1806 * cbSceneParam._m0[_1865].x))) / _1896;
        float _1954 = (cbSceneParam._m0[33u].x - sqrt(((_1820 * _1820) + (_1819 * _1819)) + (_1821 * _1821))) * cbSceneParam._m0[33u].y;
        float _4209 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1961 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1901 + _1884) / _1896, (_1903 + _1888) / _1896), _1906), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1903 + _1884) / _1896, (_1888 - _1901) / _1896), _1906), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1884 - _1901) / _1896, (_1888 - _1903) / _1896), _1906), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1884 - _1903) / _1896, (_1901 + _1888) / _1896), _1906), 0.0)).x), vec4(0.25)));
        _1968 = 1.0 - (_1961 * cbSceneParam._m0[34u].x);
        _1969 = 1.0 - (_1961 * cbSceneParam._m0[34u].y);
        _1970 = 1.0 - (_1961 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1968 = 1.0;
        _1969 = 1.0;
        _1970 = 1.0;
    }
    float _2034;
    float _2036;
    float _2038;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2022 = fma(_1818, cbSceneParam._m0[63u].w, fma(_1814, cbSceneParam._m0[63u].z, fma(_1810, cbSceneParam._m0[63u].y, _1806 * cbSceneParam._m0[63u].x)));
        float _2023 = fma(_1818, cbSceneParam._m0[60u].w, fma(_1814, cbSceneParam._m0[60u].z, fma(_1810, cbSceneParam._m0[60u].y, _1806 * cbSceneParam._m0[60u].x))) / _2022;
        float _2024 = fma(_1818, cbSceneParam._m0[61u].w, fma(_1814, cbSceneParam._m0[61u].z, fma(_1810, cbSceneParam._m0[61u].y, _1806 * cbSceneParam._m0[61u].x))) / _2022;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2023 >= cbSceneParam._m0[64u].x) && (_2024 >= cbSceneParam._m0[64u].y)) && (_2023 <= cbSceneParam._m0[64u].z)) && (_2024 <= cbSceneParam._m0[64u].w))
        {
            float _2162 = fma(_1818, cbSceneParam._m0[62u].w, fma(_1814, cbSceneParam._m0[62u].z, fma(_1810, cbSceneParam._m0[62u].y, _1806 * cbSceneParam._m0[62u].x))) / _2022;
            float _2166 = isnan(cbSceneParam._m0[41u].w) ? _2162 : (isnan(_2162) ? cbSceneParam._m0[41u].w : max(_2162, cbSceneParam._m0[41u].w));
            float _2209 = (cbSceneParam._m0[33u].x - sqrt(((_1820 * _1820) + (_1819 * _1819)) + (_1821 * _1821))) * cbSceneParam._m0[33u].y;
            float _4225 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
            float _2216 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2023, cbSceneParam._m0[33u].w + _2024), _2166), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2023, _2024 - cbSceneParam._m0[33u].z), _2166), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2023 - cbSceneParam._m0[33u].z, _2024 - cbSceneParam._m0[33u].w), _2166), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2023 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2024), _2166), 0.0)).x), vec4(0.25)));
            float _2220 = 1.0 - (_2216 * cbSceneParam._m0[34u].x);
            float _2221 = 1.0 - (_2216 * cbSceneParam._m0[34u].y);
            float _2222 = 1.0 - (_2216 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2222) ? _1970 : (isnan(_1970) ? _2222 : min(_1970, _2222));
            frontier_phi_34_33_ladder_1 = isnan(_2221) ? _1969 : (isnan(_1969) ? _2221 : min(_1969, _2221));
            frontier_phi_34_33_ladder_2 = isnan(_2220) ? _1968 : (isnan(_1968) ? _2220 : min(_1968, _2220));
        }
        else
        {
            frontier_phi_34_33_ladder = _1970;
            frontier_phi_34_33_ladder_1 = _1969;
            frontier_phi_34_33_ladder_2 = _1968;
        }
        _2034 = frontier_phi_34_33_ladder_2;
        _2036 = frontier_phi_34_33_ladder_1;
        _2038 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2034 = _1968;
        _2036 = _1969;
        _2038 = _1970;
    }
    uvec4 _2043 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _2045 = _2043.x * 14u;
    uint _2046 = _2045 + 13u;
    float _2053 = _748 + (-1.0);
    float _2058 = (cbLight._m0[_2046].x * _2053) + 1.0;
    float _2059 = (cbLight._m0[_2046].y * _2053) + 1.0;
    float _2060 = (cbLight._m0[_2046].z * _2053) + 1.0;
    float _2061 = (cbLight._m0[_2046].w * _2053) + 1.0;
    uint _2062 = _2045 + 5u;
    float _2068 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
    uint _2072 = _2045 + 4u;
    float _2081 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
    uint _2085 = _2045 | 1u;
    float _2096 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_597, _598, _599));
    float _2099 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_597, _598, _599));
    float _4261 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _4272 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2104 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * 0.3183098733425140380859375;
    float _2106 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * 0.3183098733425140380859375;
    float _2113 = ((cbLight._m0[_2062].x * _2068) * _2106) + (((cbLight._m0[_2072].x * _2034) * _2081) * _2104);
    float _2114 = ((_2068 * cbLight._m0[_2062].y) * _2106) + (((cbLight._m0[_2072].y * _2036) * _2081) * _2104);
    float _2115 = ((_2068 * cbLight._m0[_2062].z) * _2106) + (((cbLight._m0[_2072].z * _2038) * _2081) * _2104);
    uvec4 _2119 = floatBitsToUint(cbLight._m0[_2045 + 12u]);
    bool _2121 = _2119.x == 0u;
    float _2223;
    float _2225;
    float _2227;
    if (_2121)
    {
        _2223 = _2113;
        _2225 = _2114;
        _2227 = _2115;
    }
    else
    {
        uint _2231 = _2045 + 6u;
        float _2247 = (dot(vec3(cbLight._m0[_2045 + 2u].xyz), vec3(_597, _598, _599)) * 0.5) + 0.5;
        float _2248 = _2247 * _2247;
        float _4283 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2249 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2250 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2223 = (((cbLight._m0[_2231].x * 0.3183098733425140380859375) * _2249) * _2250) + _2113;
        _2225 = (((cbLight._m0[_2231].y * 0.3183098733425140380859375) * _2249) * _2250) + _2114;
        _2227 = (((cbLight._m0[_2231].z * 0.3183098733425140380859375) * _2249) * _2250) + _2115;
    }
    bool _2230 = _2119.y == 0u;
    float _2285;
    float _2287;
    float _2289;
    if (_2230)
    {
        _2285 = _2223;
        _2287 = _2225;
        _2289 = _2227;
    }
    else
    {
        uint _2447 = _2045 + 7u;
        float _2463 = (dot(vec3(cbLight._m0[_2045 + 3u].xyz), vec3(_597, _598, _599)) * 0.5) + 0.5;
        float _2464 = _2463 * _2463;
        float _4299 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2465 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _2466 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
        _2285 = (((cbLight._m0[_2447].x * 0.3183098733425140380859375) * _2465) * _2466) + _2223;
        _2287 = (((cbLight._m0[_2447].y * 0.3183098733425140380859375) * _2465) * _2466) + _2225;
        _2289 = (((cbLight._m0[_2447].z * 0.3183098733425140380859375) * _2465) * _2466) + _2227;
    }
    uint _2292 = _2045 + 8u;
    float _2305 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2045].w)) * _600) * 0.949999988079071044921875);
    float _2306 = _2305 * _2305;
    float _2307 = cbLight._m0[_2045].x + _677;
    float _2308 = cbLight._m0[_2045].y + _678;
    float _2309 = cbLight._m0[_2045].z + _679;
    float _2313 = inversesqrt(dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309)));
    float _2314 = _2313 * _2307;
    float _2315 = _2313 * _2308;
    float _2316 = _2313 * _2309;
    float _2317 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_2045].xyz));
    float _4315 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2320 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _4326 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _2321 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2322 = dot(vec3(_597, _598, _599), vec3(_2314, _2315, _2316));
    float _4337 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2325 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _2326 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_2314, _2315, _2316));
    float _4348 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2330 = _2306 * _2306;
    float _2334 = ((_2325 * _2325) * (_2330 + (-1.0))) + 1.0;
    float _2345 = (exp2(log2(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2346 = 1.0 - _2306;
    float _2357 = (0.5 / (((_2321 * ((_2320 * _2346) + _2306)) + 9.9999999392252902907785028219223e-09) + (((_2321 * _2346) + _2306) * _2320))) * _2320;
    float _4359 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2359 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2330 / ((_2334 * _2334) * 3.141590118408203125));
    uint _2373 = _2045 + 9u;
    float _2384 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2085].w)) * _600) * 0.949999988079071044921875);
    float _2385 = _2384 * _2384;
    float _2386 = cbLight._m0[_2085].x + _677;
    float _2387 = cbLight._m0[_2085].y + _678;
    float _2388 = cbLight._m0[_2085].z + _679;
    float _2392 = inversesqrt(dot(vec3(_2386, _2387, _2388), vec3(_2386, _2387, _2388)));
    float _2393 = _2392 * _2386;
    float _2394 = _2392 * _2387;
    float _2395 = _2392 * _2388;
    float _2396 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_2085].xyz));
    float _4370 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2399 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _2400 = dot(vec3(_597, _598, _599), vec3(_2393, _2394, _2395));
    float _4381 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2403 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _2404 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_2393, _2394, _2395));
    float _4392 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2408 = _2385 * _2385;
    float _2412 = ((_2403 * _2403) * (_2408 + (-1.0))) + 1.0;
    float _2421 = (exp2(log2(1.0 - (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2422 = 1.0 - _2385;
    float _2432 = (0.5 / (((_2321 * ((_2399 * _2422) + _2385)) + 9.9999999392252902907785028219223e-09) + (((_2321 * _2422) + _2385) * _2399))) * _2399;
    float _4403 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2434 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2408 / ((_2412 * _2412) * 3.141590118408203125));
    float _2444 = (((_2421 * cbLight._m0[_2373].x) * _2434) * _2068) + ((((cbLight._m0[_2292].x * _2034) * _2345) * _2359) * _2081);
    float _2445 = (((_2421 * cbLight._m0[_2373].y) * _2434) * _2068) + ((((cbLight._m0[_2292].y * _2036) * _2345) * _2359) * _2081);
    float _2446 = (((_2421 * cbLight._m0[_2373].z) * _2434) * _2068) + ((((cbLight._m0[_2292].z * _2038) * _2345) * _2359) * _2081);
    float _2502;
    float _2504;
    float _2506;
    if (_2121)
    {
        _2502 = _2444;
        _2504 = _2445;
        _2506 = _2446;
    }
    else
    {
        uint _2508 = _2045 + 2u;
        uint _2512 = _2045 + 10u;
        float _2526 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2508].w)) * _600) * 0.949999988079071044921875);
        float _2527 = _2526 * _2526;
        float _2528 = cbLight._m0[_2508].x + _677;
        float _2529 = cbLight._m0[_2508].y + _678;
        float _2530 = cbLight._m0[_2508].z + _679;
        float _2534 = inversesqrt(dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530)));
        float _2535 = _2534 * _2528;
        float _2536 = _2534 * _2529;
        float _2537 = _2534 * _2530;
        float _2538 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_2508].xyz));
        float _4414 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2541 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2542 = dot(vec3(_597, _598, _599), vec3(_2535, _2536, _2537));
        float _4425 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2545 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _2546 = dot(vec3(cbLight._m0[_2508].xyz), vec3(_2535, _2536, _2537));
        float _4436 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2550 = _2527 * _2527;
        float _2554 = ((_2545 * _2545) * (_2550 + (-1.0))) + 1.0;
        float _2563 = (exp2(log2(1.0 - (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2564 = 1.0 - _2527;
        float _2574 = (0.5 / (((_2321 * ((_2541 * _2564) + _2527)) + 9.9999999392252902907785028219223e-09) + (((_2321 * _2564) + _2527) * _2541))) * _2541;
        float _4447 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2576 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2550 / ((_2554 * _2554) * 3.141590118408203125));
        float _2577 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2502 = (((_2563 * cbLight._m0[_2512].x) * _2576) * _2577) + _2444;
        _2504 = (((_2563 * cbLight._m0[_2512].y) * _2576) * _2577) + _2445;
        _2506 = (((_2563 * cbLight._m0[_2512].z) * _2576) * _2577) + _2446;
    }
    float _2608;
    float _2610;
    float _2612;
    if (_2230)
    {
        _2608 = _2502;
        _2610 = _2504;
        _2612 = _2506;
    }
    else
    {
        uint _2619 = _2045 + 3u;
        uint _2623 = _2045 + 11u;
        float _2637 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2619].w)) * _600) * 0.949999988079071044921875);
        float _2638 = _2637 * _2637;
        float _2639 = cbLight._m0[_2619].x + _677;
        float _2640 = cbLight._m0[_2619].y + _678;
        float _2641 = cbLight._m0[_2619].z + _679;
        float _2645 = inversesqrt(dot(vec3(_2639, _2640, _2641), vec3(_2639, _2640, _2641)));
        float _2646 = _2645 * _2639;
        float _2647 = _2645 * _2640;
        float _2648 = _2645 * _2641;
        float _2649 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_2619].xyz));
        float _4463 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2652 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2653 = dot(vec3(_597, _598, _599), vec3(_2646, _2647, _2648));
        float _4474 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2656 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _2657 = dot(vec3(cbLight._m0[_2619].xyz), vec3(_2646, _2647, _2648));
        float _4485 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2661 = _2638 * _2638;
        float _2665 = ((_2656 * _2656) * (_2661 + (-1.0))) + 1.0;
        float _2674 = (exp2(log2(1.0 - (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2675 = 1.0 - _2638;
        float _2685 = (0.5 / (((_2321 * ((_2652 * _2675) + _2638)) + 9.9999999392252902907785028219223e-09) + (((_2321 * _2675) + _2638) * _2652))) * _2652;
        float _4496 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2687 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2661 / ((_2665 * _2665) * 3.141590118408203125));
        float _2688 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
        _2608 = (((_2674 * cbLight._m0[_2623].x) * _2687) * _2688) + _2502;
        _2610 = (((_2674 * cbLight._m0[_2623].y) * _2687) * _2688) + _2504;
        _2612 = (((_2674 * cbLight._m0[_2623].z) * _2687) * _2688) + _2506;
    }
    float _2754;
    float _2756;
    float _2758;
    float _2760;
    float _2762;
    float _2764;
    if (_2043.y == 0u)
    {
        uvec4 _2709 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2710 = _2709.x;
        uint _2721 = uint((float(_2709.y) * floor(float(uint(cbSceneParam._m0[85u].y * _686) / _2710))) + floor(float(uint(cbSceneParam._m0[85u].x * _685) / _2710)));
        float _2731 = (log2(_1821 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2732 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        uint _2735 = uint(isnan(14.0) ? _2732 : (isnan(_2732) ? 14.0 : min(_2732, 14.0)));
        uvec4 _2740 = texelFetch(g_lightClusterGridBuffer, int(((_2735 << 2u) + (_2721 << 6u)) >> 2u));
        uint _2741 = _2740.x;
        uint _2742 = _2709.z;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        if (((((1u << ((_2742 >> 4u) & 15u)) + 4294967295u) & _2741) == 0u) || ((_2742 & 240u) == 0u))
        {
            _2821 = 0.0;
            _2823 = 0.0;
            _2825 = 0.0;
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
        }
        else
        {
            float _2822;
            float _2824;
            float _2826;
            float _2828;
            float _2830;
            float _2832;
            float _2966 = 0.0;
            float _2967 = 0.0;
            float _2968 = 0.0;
            float _2969 = 0.0;
            float _2970 = 0.0;
            float _2971 = 0.0;
            uint _2972 = 0u;
            uint _2981;
            bool _2982;
            for (;;)
            {
                _2981 = texelFetch(g_lightClassification, int((((_2735 << 5u) + (_2721 << 9u)) + (_2972 << 2u)) >> 2u)).x;
                _2982 = _2981 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2982)
                {
                    frontier_phi_66_pred = _2971;
                    frontier_phi_66_pred_1 = _2970;
                    frontier_phi_66_pred_2 = _2969;
                    frontier_phi_66_pred_3 = _2968;
                    frontier_phi_66_pred_4 = _2967;
                    frontier_phi_66_pred_5 = _2966;
                }
                else
                {
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    uint _3096;
                    _3090 = _2966;
                    _3091 = _2967;
                    _3092 = _2968;
                    _3093 = _2969;
                    _3094 = _2970;
                    _3095 = _2971;
                    _3096 = _2981;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    for (;;)
                    {
                        uint _3100 = uint(findLSB(_3096)) + (_2972 << 5u);
                        uint _3097 = (_3096 + 4294967295u) & _3096;
                        uint _3102 = _3100 * 48u;
                        vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3102)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 3u)).x));
                        uint _3122 = (_3100 * 48u) + 4u;
                        vec4 _3135 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3122)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 3u)).x));
                        uint _3141 = (_3100 * 48u) + 8u;
                        vec3 _3152 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3141)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 2u)).x));
                        float _3156 = _3116.x - _1819;
                        float _3157 = _3116.y - _1820;
                        float _3158 = _3116.z - _1821;
                        float _3159 = dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158));
                        float _3162 = inversesqrt(_3159);
                        float _3163 = _3162 * _3156;
                        float _3164 = _3162 * _3157;
                        float _3165 = _3162 * _3158;
                        float _3166 = dot(vec3(_704, _707, _710), vec3(_3163, _3164, _3165));
                        float _3171 = 1.0 - (_3159 * _3116.w);
                        float _4522 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3172 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                        float _3173 = sqrt(_3159) * _3135.w;
                        float _3176 = 1.39999997615814208984375 / (_3173 + 1.39999997615814208984375);
                        float _3177 = _3176 * _3176;
                        float _3180 = ((1.0 - _3177) * _3166) + _3177;
                        float _3183 = _3173 * _3173;
                        float _3187 = ((isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0))) * _3172) / ((_3183 * 0.699999988079071044921875) + 1.0);
                        float _3191 = (-0.0) - _1819;
                        float _3192 = (-0.0) - _1820;
                        float _3193 = (-0.0) - _1821;
                        float _3197 = inversesqrt(dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193)));
                        float _3198 = _3197 * _3191;
                        float _3199 = _3197 * _3192;
                        float _3200 = _3197 * _3193;
                        float _3207 = exp2(log2(1.0 / ((_3183 * 3.5) + 5.0)) * 0.25);
                        float _3208 = 1.0 - _764;
                        float _3215 = sqrt(1.0 - ((1.0 - (_3208 * _3208)) * (1.0 - (_3207 * _3207))));
                        float _3216 = _3215 * _3215;
                        float _3217 = _3216 * _3216;
                        float _3218 = _3198 + _3163;
                        float _3219 = _3199 + _3164;
                        float _3220 = _3200 + _3165;
                        float _3224 = inversesqrt(dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220)));
                        float _3228 = dot(vec3(_704, _707, _710), vec3(_3198, _3199, _3200));
                        float _4538 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3231 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                        float _3232 = dot(vec3(_704, _707, _710), vec3(_3224 * _3218, _3224 * _3219, _3224 * _3220));
                        float _4549 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3235 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                        float _3239 = ((_3235 * _3235) * (_3217 + (-1.0))) + 1.0;
                        float _3240 = _3176 * _3216;
                        float _3241 = _3240 * _3240;
                        float _3244 = ((1.0 - _3241) * _3166) + _3241;
                        float _4560 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3245 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                        float _3246 = 1.0 - _3216;
                        float _3256 = (0.5 / (((_3245 * ((_3231 * _3246) + _3216)) + 9.9999999392252902907785028219223e-09) + (((_3245 * _3246) + _3216) * _3231))) * _3245;
                        float _4571 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                        float _3267 = (((_3217 * 3.1415927410125732421875) * (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) / ((_3239 * _3239) * ((_3183 * 2.1991131305694580078125) + 3.141590118408203125))) * _3172;
                        _3025 = (_3187 * _3135.x) + _3093;
                        _3026 = (_3187 * _3135.y) + _3094;
                        _3027 = (_3187 * _3135.z) + _3095;
                        _3022 = (_3267 * _3152.x) + _3090;
                        _3023 = (_3267 * _3152.y) + _3091;
                        _3024 = (_3267 * _3152.z) + _3092;
                        if (_3097 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3090 = _3022;
                            _3091 = _3023;
                            _3092 = _3024;
                            _3093 = _3025;
                            _3094 = _3026;
                            _3095 = _3027;
                            _3096 = _3097;
                        }
                    }
                    frontier_phi_66_pred = _3027;
                    frontier_phi_66_pred_1 = _3026;
                    frontier_phi_66_pred_2 = _3025;
                    frontier_phi_66_pred_3 = _3024;
                    frontier_phi_66_pred_4 = _3023;
                    frontier_phi_66_pred_5 = _3022;
                }
                _2832 = frontier_phi_66_pred;
                _2830 = frontier_phi_66_pred_1;
                _2828 = frontier_phi_66_pred_2;
                _2826 = frontier_phi_66_pred_3;
                _2824 = frontier_phi_66_pred_4;
                _2822 = frontier_phi_66_pred_5;
                uint _2973 = _2972 + 1u;
                if (_2973 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2966 = _2822;
                    _2967 = _2824;
                    _2968 = _2826;
                    _2969 = _2828;
                    _2970 = _2830;
                    _2971 = _2832;
                    _2972 = _2973;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2821 = _2822;
            _2823 = _2824;
            _2825 = _2826;
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
        }
        uvec4 _2835 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2836 = _2835.z;
        uint _2838 = (_2836 >> 8u) & 15u;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        if (((4294967295u << _2838) & _2741) == 0u)
        {
            _2934 = _2821;
            _2936 = _2823;
            _2938 = _2825;
            _2940 = _2827;
            _2942 = _2829;
            _2944 = _2831;
        }
        else
        {
            float _2959 = inversesqrt(dot(vec3(_1819, _1820, _1821), vec3(_1819, _1820, _1821)));
            float _2960 = _2959 * _1819;
            float _2961 = _2959 * _1820;
            float _2962 = _2959 * _1821;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2838 < ((_2836 >> 12u) & 15u))
            {
                float _2935;
                float _2937;
                float _2939;
                float _2941;
                float _2943;
                float _2945;
                float _3073 = _2821;
                float _3074 = _2823;
                float _3075 = _2825;
                float _3076 = _2827;
                float _3077 = _2829;
                float _3078 = _2831;
                uint _3079 = _2838;
                uint _3088;
                bool _3089;
                for (;;)
                {
                    _3088 = texelFetch(g_lightClassification, int((((_2735 << 5u) + (_2721 << 9u)) + (_3079 << 2u)) >> 2u)).x;
                    _3089 = _3088 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3089)
                    {
                        frontier_phi_72_pred = _3078;
                        frontier_phi_72_pred_1 = _3077;
                        frontier_phi_72_pred_2 = _3076;
                        frontier_phi_72_pred_3 = _3075;
                        frontier_phi_72_pred_4 = _3074;
                        frontier_phi_72_pred_5 = _3073;
                    }
                    else
                    {
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3285 = _3073;
                        float _3286 = _3074;
                        float _3287 = _3075;
                        float _3288 = _3076;
                        float _3289 = _3077;
                        float _3290 = _3078;
                        uint _3291 = _3088;
                        uint _3292;
                        vec4 _3317;
                        float _3318;
                        vec4 _3333;
                        vec3 _3345;
                        vec4 _3360;
                        vec4 _3375;
                        float _3421;
                        bool _3422;
                        for (;;)
                        {
                            uint _3302 = ((_3079 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3291));
                            _3292 = (_3291 + 4294967295u) & _3291;
                            uint _3304 = _3302 * 40u;
                            _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            _3318 = _3317.w;
                            uint _3320 = (_3302 * 40u) + 4u;
                            _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            uint _3335 = (_3302 * 40u) + 8u;
                            _3345 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x));
                            uint _3347 = (_3302 * 40u) + 16u;
                            _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3362 = (_3302 * 40u) + 20u;
                            _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3377 = (_3302 * 40u) + 24u;
                            vec4 _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3396 = (_3302 * 40u) + 28u;
                            vec4 _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            _3421 = fma(_1821, _3409.z, fma(_1820, _3409.y, _3409.x * _1819)) + _3409.w;
                            _3422 = !((fma(_1821, _3390.z, fma(_1820, _3390.y, _3390.x * _1819)) + _3390.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3422)
                            {
                                float _3449 = _3317.x - _1819;
                                float _3450 = _3317.y - _1820;
                                float _3451 = _3317.z - _1821;
                                float _3452 = dot(vec3(_3449, _3450, _3451), vec3(_3449, _3450, _3451));
                                float _3455 = inversesqrt(_3452);
                                float _3456 = _3455 * _3449;
                                float _3457 = _3455 * _3450;
                                float _3458 = _3455 * _3451;
                                float _3462 = 1.0 - (_3452 / (_3318 * _3318));
                                float _4582 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3463 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                                float _3467 = sqrt(_3452) * _3333.w;
                                float _3469 = 1.39999997615814208984375 / (_3467 + 1.39999997615814208984375);
                                float _3470 = _3469 * _3469;
                                float _3473 = ((1.0 - _3470) * dot(vec3(_3456, _3457, _3458), vec3(_704, _707, _710))) + _3470;
                                float _3476 = _3467 * _3467;
                                float _3480 = (fma(_1821, _3360.z, fma(_1820, _3360.y, _3360.x * _1819)) + _3360.w) / _3421;
                                float _3481 = (fma(_1821, _3375.z, fma(_1820, _3375.y, _3375.x * _1819)) + _3375.w) / _3421;
                                float _3485 = 1.0 - dot(vec2(_3480, _3481), vec2(_3480, _3481));
                                float _4598 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3486 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                                float _3487 = _3486 * (((isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0))) * _3463) / ((_3476 * 0.699999988079071044921875) + 1.0));
                                float _3499 = exp2(log2(1.0 / ((_3476 * 3.5) + 5.0)) * 0.25);
                                float _3500 = 1.0 - _764;
                                float _3507 = sqrt(1.0 - ((1.0 - (_3500 * _3500)) * (1.0 - (_3499 * _3499))));
                                float _3508 = _3507 * _3507;
                                float _3509 = _3508 * _3508;
                                float _3510 = _3456 - _2960;
                                float _3511 = _3457 - _2961;
                                float _3512 = _3458 - _2962;
                                float _3516 = inversesqrt(dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512)));
                                float _3520 = dot(vec3(_704, _707, _710), vec3((-0.0) - _2960, (-0.0) - _2961, (-0.0) - _2962));
                                float _4609 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3523 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3524 = dot(vec3(_704, _707, _710), vec3(_3516 * _3510, _3516 * _3511, _3516 * _3512));
                                float _4620 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3527 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3531 = ((_3527 * _3527) * (_3509 + (-1.0))) + 1.0;
                                float _3532 = _3469 * _3508;
                                float _3533 = _3532 * _3532;
                                float _3539 = ((1.0 - _3533) * dot(vec3(_704, _707, _710), vec3(_3456, _3457, _3458))) + _3533;
                                float _4631 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3540 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                                float _3541 = 1.0 - _3508;
                                float _3551 = (0.5 / (((_3540 * ((_3523 * _3541) + _3508)) + 9.9999999392252902907785028219223e-09) + (((_3540 * _3541) + _3508) * _3523))) * _3540;
                                float _4642 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3561 = (_3486 * _3463) * (((_3509 * 3.1415927410125732421875) * (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0)))) / ((_3531 * _3531) * ((_3476 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3487 * _3333.y;
                                frontier_phi_78_pred_1 = _3487 * _3333.x;
                                frontier_phi_78_pred_2 = _3561 * _3345.z;
                                frontier_phi_78_pred_3 = _3561 * _3345.y;
                                frontier_phi_78_pred_4 = _3561 * _3345.x;
                                frontier_phi_78_pred_5 = _3487 * _3333.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3569 = frontier_phi_78_pred;
                            _3568 = frontier_phi_78_pred_1;
                            _3567 = frontier_phi_78_pred_2;
                            _3566 = frontier_phi_78_pred_3;
                            _3565 = frontier_phi_78_pred_4;
                            _3570 = frontier_phi_78_pred_5;
                            _3275 = _3568 + _3288;
                            _3276 = _3569 + _3289;
                            _3277 = _3570 + _3290;
                            _3272 = _3565 + _3285;
                            _3273 = _3566 + _3286;
                            _3274 = _3567 + _3287;
                            if (_3292 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3275;
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3292;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3277;
                        frontier_phi_72_pred_1 = _3276;
                        frontier_phi_72_pred_2 = _3275;
                        frontier_phi_72_pred_3 = _3274;
                        frontier_phi_72_pred_4 = _3273;
                        frontier_phi_72_pred_5 = _3272;
                    }
                    _2945 = frontier_phi_72_pred;
                    _2943 = frontier_phi_72_pred_1;
                    _2941 = frontier_phi_72_pred_2;
                    _2939 = frontier_phi_72_pred_3;
                    _2937 = frontier_phi_72_pred_4;
                    _2935 = frontier_phi_72_pred_5;
                    uint _3080 = _3079 + 1u;
                    if (_3080 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3073 = _2935;
                        _3074 = _2937;
                        _3075 = _2939;
                        _3076 = _2941;
                        _3077 = _2943;
                        _3078 = _2945;
                        _3079 = _3080;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2945;
                frontier_phi_60_61_ladder_1 = _2943;
                frontier_phi_60_61_ladder_2 = _2939;
                frontier_phi_60_61_ladder_3 = _2937;
                frontier_phi_60_61_ladder_4 = _2935;
                frontier_phi_60_61_ladder_5 = _2941;
            }
            else
            {
                frontier_phi_60_61_ladder = _2831;
                frontier_phi_60_61_ladder_1 = _2829;
                frontier_phi_60_61_ladder_2 = _2825;
                frontier_phi_60_61_ladder_3 = _2823;
                frontier_phi_60_61_ladder_4 = _2821;
                frontier_phi_60_61_ladder_5 = _2827;
            }
            _2934 = frontier_phi_60_61_ladder_4;
            _2936 = frontier_phi_60_61_ladder_3;
            _2938 = frontier_phi_60_61_ladder_2;
            _2940 = frontier_phi_60_61_ladder_5;
            _2942 = frontier_phi_60_61_ladder_1;
            _2944 = frontier_phi_60_61_ladder;
        }
        float _2949 = isnan(1.0) ? _748 : (isnan(_748) ? 1.0 : min(_748, 1.0));
        _2754 = (_2949 * _2940) + _2285;
        _2756 = (_2949 * _2942) + _2287;
        _2758 = (_2949 * _2944) + _2289;
        _2760 = ((_2934 * 0.039999999105930328369140625) * _2949) + _2608;
        _2762 = ((_2936 * 0.039999999105930328369140625) * _2949) + _2610;
        _2764 = ((_2938 * 0.039999999105930328369140625) * _2949) + _2612;
    }
    else
    {
        _2754 = _2285;
        _2756 = _2287;
        _2758 = _2289;
        _2760 = _2608;
        _2762 = _2610;
        _2764 = _2612;
    }
    float _4658 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4669 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _4680 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    uint _2784 = _238 + 6u;
    float _2792 = _685 / cbSceneParam._m0[86u].x;
    float _2793 = _686 / cbSceneParam._m0[86u].y;
    vec4 _2807 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2792, _2793, (log2((isnan(cbSceneParam._m0[77u].w) ? _618 : (isnan(_618) ? cbSceneParam._m0[77u].w : min(_618, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2809 = _2807.x;
    float _2810 = _2807.y;
    float _2811 = _2807.z;
    float _2812 = _2807.w;
    float _2884;
    float _2886;
    float _2888;
    float _2890;
    if (_618 > cbSceneParam._m0[78u].w)
    {
        float _2846 = isnan(_618) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _618 : min(cbSceneParam._m0[80u].w, _618));
        float _2847 = _2846 / _618;
        float _2858 = _2847 * _670;
        float _2859 = _671 * _2847;
        float _2860 = (-0.0) - _2859;
        float _2862 = _2847 * _672;
        float _2864 = (cbSceneParam._m0[77u].w * _2860) / _2846;
        float _2865 = _2864 + cbSceneParam._m0[79u].w;
        float _2866 = cbSceneParam._m0[79u].w - _2859;
        float _2872 = sqrt(((_2858 * _2858) + (_2859 * _2859)) + (_2862 * _2862));
        float _2875 = (1.0 - (cbSceneParam._m0[77u].w / _2846)) * _2872;
        float _2880 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2882 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3035;
        if (abs((_2860 - _2864) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3035 = ((((_2865 > 0.0) ? exp2(_2880 * _2865) : (2.0 - exp2(_2882 * _2865))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2875;
        }
        else
        {
            float _2995 = 1.0 / cbSceneParam._m0[80u].x;
            float _2996 = isnan(_2866) ? _2865 : (isnan(_2865) ? _2866 : max(_2865, _2866));
            float _2997 = isnan(_2866) ? _2865 : (isnan(_2865) ? _2866 : min(_2865, _2866));
            float _3006 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : min(_2996, 0.0));
            float _3007 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : min(_2997, 0.0));
            _3035 = ((abs(_2872 / _2860) * cbSceneParam._m0[80u].y) * ((((_3006 - _3007) * 2.0) - ((exp2(_2880 * (isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0)))) - exp2(_2880 * (isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))))) * _2995)) - ((exp2(_2882 * _3006) - exp2(_2882 * _3007)) * _2995))) + (_2875 * cbSceneParam._m0[80u].z);
        }
        vec4 _3037 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2792, _2793, 1.0), 0.0);
        float _3046 = exp2((_3035 * (-1.44269502162933349609375)) * (1.0 - _3037.w));
        float _3047 = log2(_3046);
        float _3063 = log2(_2812);
        _2884 = (exp2(_3063 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3047 * cbSceneParam._m0[78u].x)) * _3037.x) / cbSceneParam._m0[78u].x)) + _2809;
        _2886 = (exp2(_3063 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3047 * cbSceneParam._m0[78u].y)) * _3037.y) / cbSceneParam._m0[78u].y)) + _2810;
        _2888 = (exp2(_3063 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3047 * cbSceneParam._m0[78u].z)) * _3037.z) / cbSceneParam._m0[78u].z)) + _2811;
        _2890 = _3046 * _2812;
    }
    else
    {
        _2884 = _2809;
        _2886 = _2810;
        _2888 = _2811;
        _2890 = _2812;
    }
    float _2902 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2903 = _2902 == 3.0;
    float _2904 = log2(_2890);
    float _2911 = exp2(_2904 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2754 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _748))) + ((_2760 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1553)) * cbPerFrame._m0[3u].x));
    float _2912 = exp2(_2904 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2756 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _748))) + ((_2762 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1553)) * cbPerFrame._m0[3u].x));
    float _2913 = exp2(_2904 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2758 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _748))) + ((_2764 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1553)) * cbPerFrame._m0[3u].x));
    float _2922 = (_2902 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2922 * (_2903 ? _2911 : (_2911 + (cbSceneParam._m0[72u].w * _2884)));
    SV_Target.y = _2922 * (_2903 ? _2912 : (_2912 + (cbSceneParam._m0[72u].w * _2886)));
    SV_Target.z = _2922 * (_2903 ? _2913 : (_2913 + (cbSceneParam._m0[72u].w * _2888)));
    SV_Target.w = cbInstanceData._m0[_2784].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2784].w;
}


