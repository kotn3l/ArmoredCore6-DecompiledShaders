#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1217;
float _3860;
float _3861;
float _3862;
float _3863;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _223 = _222 * _214;
    float _224 = _222 * _215;
    float _225 = _222 * _216;
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = _236 * TANGENT.x;
    float _238 = _236 * TANGENT.y;
    float _239 = _236 * TANGENT.z;
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _360 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _360) * cbMtdParam._m0[24u].x) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3872 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _385 = (_378 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _386 = (_378 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _387 = (_378 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _405 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _432 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _449 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _451 = _449.x;
    float _452 = _449.y;
    float _453 = _449.z;
    float _462 = ((_432.z - _453) * _378) + _453;
    float _465 = ((((_432.x - _451) * _378) + _451) * 2.0) + (-1.0);
    float _466 = ((((_432.y - _452) * _378) + _452) * 2.0) + (-1.0);
    float _467 = dot(vec2(_465, _466), vec2(_465, _466));
    float _3883 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _472 = sqrt(1.0 - (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))));
    vec4 _492 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _504 = (_465 + ((((_405.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_492.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _505 = (_466 + ((((_405.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_492.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _508 = fma(_472, _230, fma(_505, _237, _504 * _223));
    float _511 = fma(_472, _231, fma(_505, _238, _504 * _224));
    float _514 = fma(_472, _232, fma(_505, _239, _504 * _225));
    float _518 = inversesqrt(dot(vec3(_508, _511, _514), vec3(_508, _511, _514)));
    vec4 _547 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _549 = _547.x;
    float _550 = 1.0 - _549;
    float _554 = ((_549 - _550) * cbMtdParam._m0[24u].z) + _550;
    float _556 = (cbMtdParam._m0[19u].x + dot(vec4(_518 * _508, _518 * _511, _518 * _514, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_554 * cbMtdParam._m0[21u].z);
    float _3894 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _572 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_554 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3905 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _573 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _577 = ((_557 * (cbMtdParam._m0[17u].x - _385)) * _573) + _385;
    float _578 = ((_557 * (cbMtdParam._m0[17u].y - _386)) * _573) + _386;
    float _579 = ((_557 * (cbMtdParam._m0[17u].z - _387)) * _573) + _387;
    float _584 = (((_405.z - _462) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _462;
    float _588 = ((_492.z - _584) * cbMtdParam._m0[19u].w) + _584;
    vec4 _601 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _608 = (_601.x * 2.0) + (-1.0);
    float _609 = (_601.y * 2.0) + (-1.0);
    float _610 = dot(vec2(_608, _609), vec2(_608, _609));
    float _3916 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _619 = (((_601.z - _588) * _557) * _573) + _588;
    float _634 = (((cbMtdParam._m0[21u].x * _504) + ((_608 - _504) * _557)) * _573) + _504;
    float _635 = (((cbMtdParam._m0[21u].x * _505) + ((_609 - _505) * _557)) * _573) + _505;
    float _636 = (((sqrt(1.0 - (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) - _472) * _557) * _573) + _472;
    float _641 = cbMtdParam._m0[22u].x + _492.w;
    float _644 = fma(_636, _230, fma(_635, _237, _634 * _223));
    float _647 = fma(_636, _231, fma(_635, _238, _634 * _224));
    float _650 = fma(_636, _232, fma(_635, _239, _634 * _225));
    float _654 = inversesqrt(dot(vec3(_644, _647, _650), vec3(_644, _647, _650)));
    float _655 = _654 * _644;
    float _656 = _654 * _647;
    float _657 = _654 * _650;
    float _3927 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _658 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3949 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _3960 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _3971 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _676 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _718 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _728 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _718);
    float _729 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _718);
    float _730 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _718);
    float _734 = inversesqrt(dot(vec3(_728, _729, _730), vec3(_728, _729, _730)));
    float _735 = _728 * _734;
    float _736 = _729 * _734;
    float _737 = _730 * _734;
    vec4 _742 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _744 = _742.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _898 = sqrt(((_728 * _728) + (_729 * _729)) + (_730 * _730));
        float _904 = (cbMatDynParam._m0[5u].x * _898) + cbMatDynParam._m0[5u].y;
        float _3982 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _909 = (cbMatDynParam._m0[5u].z * _898) + cbMatDynParam._m0[5u].w;
        float _3993 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) - _905)) + _905) < ((_744 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _755 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _756 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _774 = fma(_657, cbSceneParam._m0[5u].z, fma(_656, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _655));
    float _777 = fma(_657, cbSceneParam._m0[6u].z, fma(_656, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _655));
    float _780 = fma(_657, cbSceneParam._m0[7u].z, fma(_656, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _655));
    uint _793 = _242 + 9u;
    uint _794 = _793 + uint(cbMatDynParam._m0[0u].w);
    float _800 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) * cbInstanceData._m0[_794].x;
    float _801 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) * cbInstanceData._m0[_794].y;
    float _802 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) * cbInstanceData._m0[_794].z;
    float _4004 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _4015 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _804 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _4026 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    vec4 _814 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _755, cbSceneParam._m0[86u].y * _756));
    float _818 = ((isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * TEXCOORD_5.w) * _814.x;
    float _819 = dot(vec3(_655, _656, _657), vec3(_735, _736, _737));
    float _822 = _819 * 2.0;
    float _826 = (_822 * _655) - _735;
    float _827 = (_822 * _656) - _736;
    float _828 = (_822 * _657) - _737;
    float _832 = abs(dot(vec3(_735, _736, _737), vec3(_655, _656, _657)));
    float _4037 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _834 = sqrt(_658);
    float _847 = exp2((_834 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_834 * 3.0));
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1216;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _941 = fma(_887, cbModelParam._m0[26u].z, fma(_883, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _879));
        float _945 = fma(_887, cbModelParam._m0[27u].z, fma(_883, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _879));
        float _949 = fma(_887, cbModelParam._m0[28u].z, fma(_883, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _879));
        float _974 = _879 + _655;
        float _975 = _883 + _656;
        float _976 = _887 + _657;
        float _986 = fma(_976, cbModelParam._m0[26u].z, fma(_975, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _974)) - _941;
        float _987 = fma(_976, cbModelParam._m0[27u].z, fma(_975, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _974)) - _945;
        float _988 = fma(_976, cbModelParam._m0[28u].z, fma(_975, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _974)) - _949;
        float _992 = inversesqrt(dot(vec3(_986, _987, _988), vec3(_986, _987, _988)));
        float _1005 = ((_992 * _986) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_941 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_992 * _987) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_945 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_992 * _988) / cbModelParam._m0[34u].z) + ((((((_949 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        float _1044 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1010.x + (-0.5));
        float _1046 = _1044 * (_1010.y + (-0.5));
        float _1047 = _1044 * (_1010.z + (-0.5));
        float _1054 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1017.x + (-0.5));
        float _1056 = _1054 * (_1017.y + (-0.5));
        float _1057 = _1054 * (_1017.z + (-0.5));
        float _1064 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1024.x + (-0.5));
        float _1066 = _1064 * (_1024.y + (-0.5));
        float _1067 = _1064 * (_1024.z + (-0.5));
        float _1074 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1031.x + (-0.5));
        float _1076 = _1074 * (_1031.y + (-0.5));
        float _1077 = _1074 * (_1031.z + (-0.5));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = _1045 * 0.5;
        float _1082 = _1055 * 0.5;
        float _1083 = _1065 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1098 = (dot(vec3(_655, _656, _657), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1108 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _4085 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1110 + 1.0))) + _1115) * _1078;
        float _1125 = _1046 * 0.5;
        float _1126 = _1056 * 0.5;
        float _1127 = _1066 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_655, _656, _657), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _4096 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _4107 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _4118 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1152 + 1.0))) + _1157) * _1079;
        float _1167 = _1047 * 0.5;
        float _1168 = _1057 * 0.5;
        float _1169 = _1067 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_655, _656, _657), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _4151 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1194 + 1.0))) + _1199) * _1080;
        _1216 = _1047;
        _1218 = _1046;
        _1219 = _1045;
        _1220 = _1057;
        _1221 = _1056;
        _1222 = _1055;
        _1223 = _1067;
        _1224 = _1066;
        _1225 = _1065;
        _1226 = _1080;
        _1227 = _1079;
        _1228 = _1078;
        _1229 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
    }
    else
    {
        _1216 = _1217;
        _1218 = _1217;
        _1219 = _1217;
        _1220 = _1217;
        _1221 = _1217;
        _1222 = _1217;
        _1223 = _1217;
        _1224 = _1217;
        _1225 = _1217;
        _1226 = _1217;
        _1227 = _1217;
        _1228 = _1217;
        _1229 = 0.0;
        _1230 = 0.0;
        _1231 = 0.0;
    }
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1259 = fma(_887, cbModelParam._m0[30u].z, fma(_883, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _879));
        float _1263 = fma(_887, cbModelParam._m0[31u].z, fma(_883, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _879));
        float _1267 = fma(_887, cbModelParam._m0[32u].z, fma(_883, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _879));
        float _1290 = _879 + _655;
        float _1291 = _883 + _656;
        float _1292 = _887 + _657;
        float _1302 = fma(_1292, cbModelParam._m0[30u].z, fma(_1291, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1290)) - _1259;
        float _1303 = fma(_1292, cbModelParam._m0[31u].z, fma(_1291, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1290)) - _1263;
        float _1304 = fma(_1292, cbModelParam._m0[32u].z, fma(_1291, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1290)) - _1267;
        float _1308 = inversesqrt(dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304)));
        float _1321 = ((_1308 * _1302) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1259 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1308 * _1303) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1263 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1308 * _1304) / cbModelParam._m0[35u].z) + ((((((_1267 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        float _1358 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1325.x + (-0.5));
        float _1360 = _1358 * (_1325.y + (-0.5));
        float _1361 = _1358 * (_1325.z + (-0.5));
        float _1368 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1332.x + (-0.5));
        float _1370 = _1368 * (_1332.y + (-0.5));
        float _1371 = _1368 * (_1332.z + (-0.5));
        float _1378 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1339.x + (-0.5));
        float _1380 = _1378 * (_1339.y + (-0.5));
        float _1381 = _1378 * (_1339.z + (-0.5));
        float _1388 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1346.x + (-0.5));
        float _1390 = _1388 * (_1346.y + (-0.5));
        float _1391 = _1388 * (_1346.z + (-0.5));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = _1359 * 0.5;
        float _1396 = _1369 * 0.5;
        float _1397 = _1379 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_655, _656, _657), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4214 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1422 + 1.0))) + _1427) * _1392;
        float _1437 = _1360 * 0.5;
        float _1438 = _1370 * 0.5;
        float _1439 = _1380 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_655, _656, _657), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4225 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4236 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4247 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_1464 + 1.0))) + _1469) * _1393;
        float _1479 = _1361 * 0.5;
        float _1480 = _1371 * 0.5;
        float _1481 = _1381 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_655, _656, _657), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4280 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1506 + 1.0))) + _1511) * _1394;
        _1528 = _1361;
        _1529 = _1360;
        _1530 = _1359;
        _1531 = _1371;
        _1532 = _1370;
        _1533 = _1369;
        _1534 = _1381;
        _1535 = _1380;
        _1536 = _1379;
        _1537 = _1394;
        _1538 = _1393;
        _1539 = _1392;
        _1540 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
        _1542 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
    }
    else
    {
        _1528 = _1217;
        _1529 = _1217;
        _1530 = _1217;
        _1531 = _1217;
        _1532 = _1217;
        _1533 = _1217;
        _1534 = _1217;
        _1535 = _1217;
        _1536 = _1217;
        _1537 = _1217;
        _1538 = _1217;
        _1539 = _1217;
        _1540 = 0.0;
        _1541 = 0.0;
        _1542 = 0.0;
    }
    float _1552 = (cbModelParam._m0[1u].x * (_1540 - _1229)) + _1229;
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1230)) + _1230;
    float _1554 = (cbModelParam._m0[1u].x * (_1542 - _1231)) + _1231;
    float _1575 = fma(_1554, cbSceneParam._m0[89u].z, fma(_1553, cbSceneParam._m0[89u].y, _1552 * cbSceneParam._m0[89u].x));
    float _1578 = fma(_1554, cbSceneParam._m0[90u].z, fma(_1553, cbSceneParam._m0[90u].y, _1552 * cbSceneParam._m0[90u].x));
    float _1581 = fma(_1554, cbSceneParam._m0[91u].z, fma(_1553, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1552));
    float _1596 = _826 * 0.5;
    float _1597 = _827 * 0.5;
    float _1598 = _828 * 0.5;
    float _1599 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1530, _1533, _1536, _1539));
    float _1602 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1605 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1528, _1531, _1534, _1537));
    float _1639;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1612 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1216, _1220, _1223, _1226));
        float _1616 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1218, _1221, _1224, _1227));
        float _1620 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1219, _1222, _1225, _1228));
        float _1627 = dot(vec4(cbModelParam._m0[39u]), vec4(_1596, _1597, _1598, 1.0));
        _1639 = dot(vec3(isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1627) ? 0.0 : (isnan(0.0) ? _1627 : max(0.0, _1627))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1639 = 1.0;
    }
    float _1650;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1641 = dot(vec4(cbModelParam._m0[40u]), vec4(_1596, _1597, _1598, 1.0));
        _1650 = dot(vec3(isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1641) ? 0.0 : (isnan(0.0) ? _1641 : max(0.0, _1641))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1650 = 1.0;
    }
    float _1654 = (_1650 * cbModelParam._m0[1u].x) + (_1639 * (1.0 - cbModelParam._m0[1u].x));
    float _1664 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _658);
    float _1665 = isnan(_1664) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1664 : min(cbModelParam._m0[25u].z, _1664));
    float _1746;
    float _1748;
    float _1750;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1713 = fma(_887, cbModelParam._m0[13u].z, fma(_883, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _879)) + cbModelParam._m0[13u].w;
        float _1717 = fma(_887, cbModelParam._m0[14u].z, fma(_883, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _879)) + cbModelParam._m0[14u].w;
        float _1721 = fma(_887, cbModelParam._m0[15u].z, fma(_883, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _879)) + cbModelParam._m0[15u].w;
        float _1724 = fma(_828, cbModelParam._m0[13u].z, fma(_827, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _826));
        float _1727 = fma(_828, cbModelParam._m0[14u].z, fma(_827, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _826));
        float _1730 = fma(_828, cbModelParam._m0[15u].z, fma(_827, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _826));
        float _1758;
        if (_1724 > 0.0)
        {
            _1758 = abs((1.0 - _1713) / _1724);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1713 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1758 = frontier_phi_17_15_ladder;
        }
        float _1928;
        if (_1727 > 0.0)
        {
            _1928 = abs((1.0 - _1717) / _1727);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1717 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1928 = frontier_phi_26_22_ladder;
        }
        float _2223;
        if (_1730 > 0.0)
        {
            _2223 = abs((1.0 - _1721) / _1730);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1721 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2223 = frontier_phi_38_33_ladder;
        }
        float _2225 = isnan(_1928) ? _1758 : (isnan(_1758) ? _1928 : min(_1758, _1928));
        float _2226 = isnan(_2223) ? _2225 : (isnan(_2225) ? _2223 : min(_2225, _2223));
        float _2230 = (_2226 * _1724) + _1713;
        float _2231 = (_2226 * _1727) + _1717;
        float _2232 = (_2226 * _1730) + _1721;
        float _2233 = _2226 * 9.9999997473787516355514526367188e-05;
        float _2235 = (-1.0) - _2233;
        float _2237 = _2233 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2232 > _2237) || ((_2232 < _2235) || ((_2231 > _2237) || ((_2231 < _2235) || ((_2230 < _2235) || (_2230 > _2237))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2377 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2232, cbModelParam._m0[9u].z, fma(_2231, cbModelParam._m0[9u].y, _2230 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2232, cbModelParam._m0[10u].z, fma(_2231, cbModelParam._m0[10u].y, _2230 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2232, cbModelParam._m0[11u].z, fma(_2231, cbModelParam._m0[11u].y, _2230 * cbModelParam._m0[11u].x))), _1665);
            frontier_phi_16_38_ladder = _2377.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2377.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2377.x * cbModelParam._m0[1u].y;
        }
        _1746 = frontier_phi_16_38_ladder_2;
        _1748 = frontier_phi_16_38_ladder_1;
        _1750 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1734 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_826, _827, _828), _1665);
        _1746 = _1734.x * cbModelParam._m0[1u].y;
        _1748 = _1734.y * cbModelParam._m0[1u].y;
        _1750 = _1734.z * cbModelParam._m0[1u].y;
    }
    float _1754 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _658);
    float _1755 = isnan(_1754) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1754 : min(cbModelParam._m0[25u].w, _1754));
    float _1845;
    float _1847;
    float _1849;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1809 = fma(_887, cbModelParam._m0[21u].z, fma(_883, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _879)) + cbModelParam._m0[21u].w;
        float _1813 = fma(_887, cbModelParam._m0[22u].z, fma(_883, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _879)) + cbModelParam._m0[22u].w;
        float _1817 = fma(_887, cbModelParam._m0[23u].z, fma(_883, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _879)) + cbModelParam._m0[23u].w;
        float _1820 = fma(_828, cbModelParam._m0[21u].z, fma(_827, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _826));
        float _1823 = fma(_828, cbModelParam._m0[22u].z, fma(_827, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _826));
        float _1826 = fma(_828, cbModelParam._m0[23u].z, fma(_827, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _826));
        float _1933;
        if (_1820 > 0.0)
        {
            _1933 = abs((1.0 - _1809) / _1820);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1809 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1933 = frontier_phi_28_24_ladder;
        }
        float _2250;
        if (_1823 > 0.0)
        {
            _2250 = abs((1.0 - _1813) / _1823);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1813 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2250 = frontier_phi_40_35_ladder;
        }
        float _2577;
        if (_1826 > 0.0)
        {
            _2577 = abs((1.0 - _1817) / _1826);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1817 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2577 = frontier_phi_50_47_ladder;
        }
        float _2579 = isnan(_2250) ? _1933 : (isnan(_1933) ? _2250 : min(_1933, _2250));
        float _2580 = isnan(_2577) ? _2579 : (isnan(_2579) ? _2577 : min(_2579, _2577));
        float _2584 = (_2580 * _1820) + _1809;
        float _2585 = (_2580 * _1823) + _1813;
        float _2586 = (_2580 * _1826) + _1817;
        float _2587 = _2580 * 9.9999997473787516355514526367188e-05;
        float _2588 = (-1.0) - _2587;
        float _2590 = _2587 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2586 > _2590) || ((_2586 < _2588) || ((_2585 > _2590) || ((_2585 < _2588) || ((_2584 < _2588) || (_2584 > _2590))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2704 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2586, cbModelParam._m0[17u].z, fma(_2585, cbModelParam._m0[17u].y, _2584 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2586, cbModelParam._m0[18u].z, fma(_2585, cbModelParam._m0[18u].y, _2584 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2586, cbModelParam._m0[19u].z, fma(_2585, cbModelParam._m0[19u].y, _2584 * cbModelParam._m0[19u].x))), _1755);
            frontier_phi_25_50_ladder = _2704.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2704.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2704.x * cbModelParam._m0[1u].z;
        }
        _1845 = frontier_phi_25_50_ladder_2;
        _1847 = frontier_phi_25_50_ladder_1;
        _1849 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1829 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_826, _827, _828), _1755);
        _1845 = _1829.x * cbModelParam._m0[1u].z;
        _1847 = _1829.y * cbModelParam._m0[1u].z;
        _1849 = _1829.z * cbModelParam._m0[1u].z;
    }
    float _1861 = ((((1.0 - _847) * ((_834 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_847 * _834)) * _818;
    float _1862 = _1861 * ((cbModelParam._m0[1u].w * (_1845 - _1746)) + _1746);
    float _1863 = _1861 * ((cbModelParam._m0[1u].w * (_1847 - _1748)) + _1748);
    float _1864 = _1861 * ((cbModelParam._m0[1u].w * (_1849 - _1750)) + _1750);
    float _1867 = fma(_1864, cbSceneParam._m0[89u].z, fma(_1863, cbSceneParam._m0[89u].y, _1862 * cbSceneParam._m0[89u].x));
    float _1870 = fma(_1864, cbSceneParam._m0[90u].z, fma(_1863, cbSceneParam._m0[90u].y, _1862 * cbSceneParam._m0[90u].x));
    float _1873 = fma(_1864, cbSceneParam._m0[91u].z, fma(_1863, cbSceneParam._m0[91u].y, _1862 * cbSceneParam._m0[91u].x));
    float _1907 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1911 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1915 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1919 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1920 = _1907 / _1919;
    float _1921 = _1911 / _1919;
    float _1922 = _1915 / _1919;
    float _2069;
    float _2070;
    float _2071;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1949 = ((uint(_1922 > cbSceneParam._m0[59u].y) + uint(_1922 > cbSceneParam._m0[59u].x)) + uint(_1922 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1950 = _1949 + 43u;
        uint _1958 = _1949 + 44u;
        uint _1966 = _1949 + 45u;
        uint _1974 = _1949 + 46u;
        float _1985 = fma(_1919, cbSceneParam._m0[_1950].w, fma(_1915, cbSceneParam._m0[_1950].z, fma(_1911, cbSceneParam._m0[_1950].y, _1907 * cbSceneParam._m0[_1950].x)));
        float _1989 = fma(_1919, cbSceneParam._m0[_1958].w, fma(_1915, cbSceneParam._m0[_1958].z, fma(_1911, cbSceneParam._m0[_1958].y, _1907 * cbSceneParam._m0[_1958].x)));
        float _1997 = fma(_1919, cbSceneParam._m0[_1974].w, fma(_1915, cbSceneParam._m0[_1974].z, fma(_1911, cbSceneParam._m0[_1974].y, _1907 * cbSceneParam._m0[_1974].x)));
        float _2002 = cbSceneParam._m0[33u].z * _1997;
        float _2004 = cbSceneParam._m0[33u].w * _1997;
        float _2007 = fma(_1919, cbSceneParam._m0[_1966].w, fma(_1915, cbSceneParam._m0[_1966].z, fma(_1911, cbSceneParam._m0[_1966].y, _1907 * cbSceneParam._m0[_1966].x))) / _1997;
        float _2055 = (cbSceneParam._m0[33u].x - sqrt(((_1921 * _1921) + (_1920 * _1920)) + (_1922 * _1922))) * cbSceneParam._m0[33u].y;
        float _4406 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2062 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2002 + _1985) / _1997, (_2004 + _1989) / _1997), _2007), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2004 + _1985) / _1997, (_1989 - _2002) / _1997), _2007), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1985 - _2002) / _1997, (_1989 - _2004) / _1997), _2007), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1985 - _2004) / _1997, (_2002 + _1989) / _1997), _2007), 0.0)).x), vec4(0.25)));
        _2069 = 1.0 - (_2062 * cbSceneParam._m0[34u].x);
        _2070 = 1.0 - (_2062 * cbSceneParam._m0[34u].y);
        _2071 = 1.0 - (_2062 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2069 = 1.0;
        _2070 = 1.0;
        _2071 = 1.0;
    }
    float _2135;
    float _2137;
    float _2139;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2123 = fma(_1919, cbSceneParam._m0[63u].w, fma(_1915, cbSceneParam._m0[63u].z, fma(_1911, cbSceneParam._m0[63u].y, _1907 * cbSceneParam._m0[63u].x)));
        float _2124 = fma(_1919, cbSceneParam._m0[60u].w, fma(_1915, cbSceneParam._m0[60u].z, fma(_1911, cbSceneParam._m0[60u].y, _1907 * cbSceneParam._m0[60u].x))) / _2123;
        float _2125 = fma(_1919, cbSceneParam._m0[61u].w, fma(_1915, cbSceneParam._m0[61u].z, fma(_1911, cbSceneParam._m0[61u].y, _1907 * cbSceneParam._m0[61u].x))) / _2123;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2124 >= cbSceneParam._m0[64u].x) && (_2125 >= cbSceneParam._m0[64u].y)) && (_2124 <= cbSceneParam._m0[64u].z)) && (_2125 <= cbSceneParam._m0[64u].w))
        {
            float _2263 = fma(_1919, cbSceneParam._m0[62u].w, fma(_1915, cbSceneParam._m0[62u].z, fma(_1911, cbSceneParam._m0[62u].y, _1907 * cbSceneParam._m0[62u].x))) / _2123;
            float _2267 = isnan(cbSceneParam._m0[41u].w) ? _2263 : (isnan(_2263) ? cbSceneParam._m0[41u].w : max(_2263, cbSceneParam._m0[41u].w));
            float _2310 = (cbSceneParam._m0[33u].x - sqrt(((_1921 * _1921) + (_1920 * _1920)) + (_1922 * _1922))) * cbSceneParam._m0[33u].y;
            float _4422 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
            float _2317 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2124, cbSceneParam._m0[33u].w + _2125), _2267), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2124, _2125 - cbSceneParam._m0[33u].z), _2267), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2124 - cbSceneParam._m0[33u].z, _2125 - cbSceneParam._m0[33u].w), _2267), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2124 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2125), _2267), 0.0)).x), vec4(0.25)));
            float _2321 = 1.0 - (_2317 * cbSceneParam._m0[34u].x);
            float _2322 = 1.0 - (_2317 * cbSceneParam._m0[34u].y);
            float _2323 = 1.0 - (_2317 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2323) ? _2071 : (isnan(_2071) ? _2323 : min(_2071, _2323));
            frontier_phi_37_36_ladder_1 = isnan(_2322) ? _2070 : (isnan(_2070) ? _2322 : min(_2070, _2322));
            frontier_phi_37_36_ladder_2 = isnan(_2321) ? _2069 : (isnan(_2069) ? _2321 : min(_2069, _2321));
        }
        else
        {
            frontier_phi_37_36_ladder = _2071;
            frontier_phi_37_36_ladder_1 = _2070;
            frontier_phi_37_36_ladder_2 = _2069;
        }
        _2135 = frontier_phi_37_36_ladder_2;
        _2137 = frontier_phi_37_36_ladder_1;
        _2139 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2135 = _2069;
        _2137 = _2070;
        _2139 = _2071;
    }
    uvec4 _2144 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _2146 = _2144.x * 14u;
    uint _2147 = _2146 + 13u;
    float _2154 = _818 + (-1.0);
    float _2159 = (cbLight._m0[_2147].x * _2154) + 1.0;
    float _2160 = (cbLight._m0[_2147].y * _2154) + 1.0;
    float _2161 = (cbLight._m0[_2147].z * _2154) + 1.0;
    float _2162 = (cbLight._m0[_2147].w * _2154) + 1.0;
    uint _2163 = _2146 + 5u;
    float _2169 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
    uint _2173 = _2146 + 4u;
    float _2182 = isnan(1.0) ? _2159 : (isnan(_2159) ? 1.0 : min(_2159, 1.0));
    uint _2186 = _2146 | 1u;
    float _2197 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_655, _656, _657));
    float _2200 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_655, _656, _657));
    float _4458 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _4469 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2205 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * 0.3183098733425140380859375;
    float _2207 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * 0.3183098733425140380859375;
    float _2214 = ((cbLight._m0[_2163].x * _2169) * _2207) + (((cbLight._m0[_2173].x * _2135) * _2182) * _2205);
    float _2215 = ((_2169 * cbLight._m0[_2163].y) * _2207) + (((cbLight._m0[_2173].y * _2137) * _2182) * _2205);
    float _2216 = ((_2169 * cbLight._m0[_2163].z) * _2207) + (((cbLight._m0[_2173].z * _2139) * _2182) * _2205);
    uvec4 _2220 = floatBitsToUint(cbLight._m0[_2146 + 12u]);
    bool _2222 = _2220.x == 0u;
    float _2324;
    float _2326;
    float _2328;
    if (_2222)
    {
        _2324 = _2214;
        _2326 = _2215;
        _2328 = _2216;
    }
    else
    {
        uint _2332 = _2146 + 6u;
        float _2348 = (dot(vec3(cbLight._m0[_2146 + 2u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2349 = _2348 * _2348;
        float _4480 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2350 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2351 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
        _2324 = (((cbLight._m0[_2332].x * 0.3183098733425140380859375) * _2350) * _2351) + _2214;
        _2326 = (((cbLight._m0[_2332].y * 0.3183098733425140380859375) * _2350) * _2351) + _2215;
        _2328 = (((cbLight._m0[_2332].z * 0.3183098733425140380859375) * _2350) * _2351) + _2216;
    }
    bool _2331 = _2220.y == 0u;
    float _2386;
    float _2388;
    float _2390;
    if (_2331)
    {
        _2386 = _2324;
        _2388 = _2326;
        _2390 = _2328;
    }
    else
    {
        uint _2548 = _2146 + 7u;
        float _2564 = (dot(vec3(cbLight._m0[_2146 + 3u].xyz), vec3(_655, _656, _657)) * 0.5) + 0.5;
        float _2565 = _2564 * _2564;
        float _4496 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2566 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2567 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
        _2386 = (((cbLight._m0[_2548].x * 0.3183098733425140380859375) * _2566) * _2567) + _2324;
        _2388 = (((cbLight._m0[_2548].y * 0.3183098733425140380859375) * _2566) * _2567) + _2326;
        _2390 = (((cbLight._m0[_2548].z * 0.3183098733425140380859375) * _2566) * _2567) + _2328;
    }
    uint _2393 = _2146 + 8u;
    float _2406 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2146].w)) * _658) * 0.949999988079071044921875);
    float _2407 = _2406 * _2406;
    float _2408 = cbLight._m0[_2146].x + _735;
    float _2409 = cbLight._m0[_2146].y + _736;
    float _2410 = cbLight._m0[_2146].z + _737;
    float _2414 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
    float _2415 = _2414 * _2408;
    float _2416 = _2414 * _2409;
    float _2417 = _2414 * _2410;
    float _2418 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2146].xyz));
    float _4512 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2421 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
    float _4523 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _2422 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
    float _2423 = dot(vec3(_655, _656, _657), vec3(_2415, _2416, _2417));
    float _4534 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2426 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _2427 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_2415, _2416, _2417));
    float _4545 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2431 = _2407 * _2407;
    float _2435 = ((_2426 * _2426) * (_2431 + (-1.0))) + 1.0;
    float _2446 = (exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2447 = 1.0 - _2407;
    float _2458 = (0.5 / (((_2422 * ((_2421 * _2447) + _2407)) + 9.9999999392252902907785028219223e-09) + (((_2422 * _2447) + _2407) * _2421))) * _2421;
    float _4556 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2460 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2431 / ((_2435 * _2435) * 3.141590118408203125));
    uint _2474 = _2146 + 9u;
    float _2485 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2186].w)) * _658) * 0.949999988079071044921875);
    float _2486 = _2485 * _2485;
    float _2487 = cbLight._m0[_2186].x + _735;
    float _2488 = cbLight._m0[_2186].y + _736;
    float _2489 = cbLight._m0[_2186].z + _737;
    float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
    float _2494 = _2493 * _2487;
    float _2495 = _2493 * _2488;
    float _2496 = _2493 * _2489;
    float _2497 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2186].xyz));
    float _4567 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2500 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _2501 = dot(vec3(_655, _656, _657), vec3(_2494, _2495, _2496));
    float _4578 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2504 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _2505 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_2494, _2495, _2496));
    float _4589 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2509 = _2486 * _2486;
    float _2513 = ((_2504 * _2504) * (_2509 + (-1.0))) + 1.0;
    float _2522 = (exp2(log2(1.0 - (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2523 = 1.0 - _2486;
    float _2533 = (0.5 / (((_2422 * ((_2500 * _2523) + _2486)) + 9.9999999392252902907785028219223e-09) + (((_2422 * _2523) + _2486) * _2500))) * _2500;
    float _4600 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2535 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2509 / ((_2513 * _2513) * 3.141590118408203125));
    float _2545 = (((_2522 * cbLight._m0[_2474].x) * _2535) * _2169) + ((((cbLight._m0[_2393].x * _2135) * _2446) * _2460) * _2182);
    float _2546 = (((_2522 * cbLight._m0[_2474].y) * _2535) * _2169) + ((((cbLight._m0[_2393].y * _2137) * _2446) * _2460) * _2182);
    float _2547 = (((_2522 * cbLight._m0[_2474].z) * _2535) * _2169) + ((((cbLight._m0[_2393].z * _2139) * _2446) * _2460) * _2182);
    float _2603;
    float _2605;
    float _2607;
    if (_2222)
    {
        _2603 = _2545;
        _2605 = _2546;
        _2607 = _2547;
    }
    else
    {
        uint _2609 = _2146 + 2u;
        uint _2613 = _2146 + 10u;
        float _2627 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2609].w)) * _658) * 0.949999988079071044921875);
        float _2628 = _2627 * _2627;
        float _2629 = cbLight._m0[_2609].x + _735;
        float _2630 = cbLight._m0[_2609].y + _736;
        float _2631 = cbLight._m0[_2609].z + _737;
        float _2635 = inversesqrt(dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631)));
        float _2636 = _2635 * _2629;
        float _2637 = _2635 * _2630;
        float _2638 = _2635 * _2631;
        float _2639 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2609].xyz));
        float _4611 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2642 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _2643 = dot(vec3(_655, _656, _657), vec3(_2636, _2637, _2638));
        float _4622 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2646 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _2647 = dot(vec3(cbLight._m0[_2609].xyz), vec3(_2636, _2637, _2638));
        float _4633 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2651 = _2628 * _2628;
        float _2655 = ((_2646 * _2646) * (_2651 + (-1.0))) + 1.0;
        float _2664 = (exp2(log2(1.0 - (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2665 = 1.0 - _2628;
        float _2675 = (0.5 / (((_2422 * ((_2642 * _2665) + _2628)) + 9.9999999392252902907785028219223e-09) + (((_2422 * _2665) + _2628) * _2642))) * _2642;
        float _4644 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2677 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2651 / ((_2655 * _2655) * 3.141590118408203125));
        float _2678 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
        _2603 = (((_2664 * cbLight._m0[_2613].x) * _2677) * _2678) + _2545;
        _2605 = (((_2664 * cbLight._m0[_2613].y) * _2677) * _2678) + _2546;
        _2607 = (((_2664 * cbLight._m0[_2613].z) * _2677) * _2678) + _2547;
    }
    float _2709;
    float _2711;
    float _2713;
    if (_2331)
    {
        _2709 = _2603;
        _2711 = _2605;
        _2713 = _2607;
    }
    else
    {
        uint _2720 = _2146 + 3u;
        uint _2724 = _2146 + 11u;
        float _2738 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2720].w)) * _658) * 0.949999988079071044921875);
        float _2739 = _2738 * _2738;
        float _2740 = cbLight._m0[_2720].x + _735;
        float _2741 = cbLight._m0[_2720].y + _736;
        float _2742 = cbLight._m0[_2720].z + _737;
        float _2746 = inversesqrt(dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742)));
        float _2747 = _2746 * _2740;
        float _2748 = _2746 * _2741;
        float _2749 = _2746 * _2742;
        float _2750 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_2720].xyz));
        float _4660 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2753 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _2754 = dot(vec3(_655, _656, _657), vec3(_2747, _2748, _2749));
        float _4671 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2757 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _2758 = dot(vec3(cbLight._m0[_2720].xyz), vec3(_2747, _2748, _2749));
        float _4682 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2762 = _2739 * _2739;
        float _2766 = ((_2757 * _2757) * (_2762 + (-1.0))) + 1.0;
        float _2775 = (exp2(log2(1.0 - (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2776 = 1.0 - _2739;
        float _2786 = (0.5 / (((_2422 * ((_2753 * _2776) + _2739)) + 9.9999999392252902907785028219223e-09) + (((_2422 * _2776) + _2739) * _2753))) * _2753;
        float _4693 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2788 = (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_2762 / ((_2766 * _2766) * 3.141590118408203125));
        float _2789 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
        _2709 = (((_2775 * cbLight._m0[_2724].x) * _2788) * _2789) + _2603;
        _2711 = (((_2775 * cbLight._m0[_2724].y) * _2788) * _2789) + _2605;
        _2713 = (((_2775 * cbLight._m0[_2724].z) * _2788) * _2789) + _2607;
    }
    float _2855;
    float _2857;
    float _2859;
    float _2861;
    float _2863;
    float _2865;
    if (_2144.y == 0u)
    {
        uvec4 _2810 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2811 = _2810.x;
        uint _2822 = uint((float(_2810.y) * floor(float(uint(cbSceneParam._m0[85u].y * _756) / _2811))) + floor(float(uint(cbSceneParam._m0[85u].x * _755) / _2811)));
        float _2832 = (log2(_1922 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2833 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        uint _2836 = uint(isnan(14.0) ? _2833 : (isnan(_2833) ? 14.0 : min(_2833, 14.0)));
        uvec4 _2841 = texelFetch(g_lightClusterGridBuffer, int(((_2836 << 2u) + (_2822 << 6u)) >> 2u));
        uint _2842 = _2841.x;
        uint _2843 = _2810.z;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        if (((((1u << ((_2843 >> 4u) & 15u)) + 4294967295u) & _2842) == 0u) || ((_2843 & 240u) == 0u))
        {
            _2922 = 0.0;
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
        }
        else
        {
            float _2923;
            float _2925;
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _3075 = 0.0;
            float _3076 = 0.0;
            float _3077 = 0.0;
            float _3078 = 0.0;
            float _3079 = 0.0;
            float _3080 = 0.0;
            uint _3081 = 0u;
            uint _3090;
            bool _3091;
            for (;;)
            {
                _3090 = texelFetch(g_lightClassification, int((((_2836 << 5u) + (_2822 << 9u)) + (_3081 << 2u)) >> 2u)).x;
                _3091 = _3090 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3091)
                {
                    frontier_phi_71_pred = _3080;
                    frontier_phi_71_pred_1 = _3079;
                    frontier_phi_71_pred_2 = _3078;
                    frontier_phi_71_pred_3 = _3077;
                    frontier_phi_71_pred_4 = _3076;
                    frontier_phi_71_pred_5 = _3075;
                }
                else
                {
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    uint _3226;
                    _3220 = _3075;
                    _3221 = _3076;
                    _3222 = _3077;
                    _3223 = _3078;
                    _3224 = _3079;
                    _3225 = _3080;
                    _3226 = _3090;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    for (;;)
                    {
                        uint _3230 = uint(findLSB(_3226)) + (_3081 << 5u);
                        uint _3227 = (_3226 + 4294967295u) & _3226;
                        uint _3232 = _3230 * 48u;
                        vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3232)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 3u)).x));
                        uint _3252 = (_3230 * 48u) + 4u;
                        vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3252)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 3u)).x));
                        uint _3271 = (_3230 * 48u) + 8u;
                        vec3 _3282 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3271)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3271 + 2u)).x));
                        float _3286 = _3246.x - _1920;
                        float _3287 = _3246.y - _1921;
                        float _3288 = _3246.z - _1922;
                        float _3289 = dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288));
                        float _3292 = inversesqrt(_3289);
                        float _3293 = _3292 * _3286;
                        float _3294 = _3292 * _3287;
                        float _3295 = _3292 * _3288;
                        float _3296 = dot(vec3(_774, _777, _780), vec3(_3293, _3294, _3295));
                        float _3301 = 1.0 - (_3289 * _3246.w);
                        float _4719 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3302 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                        float _3303 = sqrt(_3289) * _3265.w;
                        float _3306 = 1.39999997615814208984375 / (_3303 + 1.39999997615814208984375);
                        float _3307 = _3306 * _3306;
                        float _3310 = ((1.0 - _3307) * _3296) + _3307;
                        float _3313 = _3303 * _3303;
                        float _3317 = ((isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0))) * _3302) / ((_3313 * 0.699999988079071044921875) + 1.0);
                        float _3321 = (-0.0) - _1920;
                        float _3322 = (-0.0) - _1921;
                        float _3323 = (-0.0) - _1922;
                        float _3327 = inversesqrt(dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323)));
                        float _3328 = _3327 * _3321;
                        float _3329 = _3327 * _3322;
                        float _3330 = _3327 * _3323;
                        float _3337 = exp2(log2(1.0 / ((_3313 * 3.5) + 5.0)) * 0.25);
                        float _3338 = 1.0 - _834;
                        float _3345 = sqrt(1.0 - ((1.0 - (_3338 * _3338)) * (1.0 - (_3337 * _3337))));
                        float _3346 = _3345 * _3345;
                        float _3347 = _3346 * _3346;
                        float _3348 = _3328 + _3293;
                        float _3349 = _3329 + _3294;
                        float _3350 = _3330 + _3295;
                        float _3354 = inversesqrt(dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350)));
                        float _3358 = dot(vec3(_774, _777, _780), vec3(_3328, _3329, _3330));
                        float _4735 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3361 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                        float _3362 = dot(vec3(_774, _777, _780), vec3(_3354 * _3348, _3354 * _3349, _3354 * _3350));
                        float _4746 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3365 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                        float _3369 = ((_3365 * _3365) * (_3347 + (-1.0))) + 1.0;
                        float _3370 = _3306 * _3346;
                        float _3371 = _3370 * _3370;
                        float _3374 = ((1.0 - _3371) * _3296) + _3371;
                        float _4757 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3375 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                        float _3376 = 1.0 - _3346;
                        float _3386 = (0.5 / (((_3375 * ((_3361 * _3376) + _3346)) + 9.9999999392252902907785028219223e-09) + (((_3375 * _3376) + _3346) * _3361))) * _3375;
                        float _4768 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3397 = (((_3347 * 3.1415927410125732421875) * (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) / ((_3369 * _3369) * ((_3313 * 2.1991131305694580078125) + 3.141590118408203125))) * _3302;
                        _3150 = (_3317 * _3265.x) + _3223;
                        _3151 = (_3317 * _3265.y) + _3224;
                        _3152 = (_3317 * _3265.z) + _3225;
                        _3147 = (_3397 * _3282.x) + _3220;
                        _3148 = (_3397 * _3282.y) + _3221;
                        _3149 = (_3397 * _3282.z) + _3222;
                        if (_3227 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3220 = _3147;
                            _3221 = _3148;
                            _3222 = _3149;
                            _3223 = _3150;
                            _3224 = _3151;
                            _3225 = _3152;
                            _3226 = _3227;
                        }
                    }
                    frontier_phi_71_pred = _3152;
                    frontier_phi_71_pred_1 = _3151;
                    frontier_phi_71_pred_2 = _3150;
                    frontier_phi_71_pred_3 = _3149;
                    frontier_phi_71_pred_4 = _3148;
                    frontier_phi_71_pred_5 = _3147;
                }
                _2933 = frontier_phi_71_pred;
                _2931 = frontier_phi_71_pred_1;
                _2929 = frontier_phi_71_pred_2;
                _2927 = frontier_phi_71_pred_3;
                _2925 = frontier_phi_71_pred_4;
                _2923 = frontier_phi_71_pred_5;
                uint _3082 = _3081 + 1u;
                if (_3082 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3075 = _2923;
                    _3076 = _2925;
                    _3077 = _2927;
                    _3078 = _2929;
                    _3079 = _2931;
                    _3080 = _2933;
                    _3081 = _3082;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2922 = _2923;
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
        }
        uvec4 _2936 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2937 = _2936.z;
        uint _2939 = (_2937 >> 8u) & 15u;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        if (((4294967295u << _2939) & _2842) == 0u)
        {
            _3043 = _2922;
            _3045 = _2924;
            _3047 = _2926;
            _3049 = _2928;
            _3051 = _2930;
            _3053 = _2932;
        }
        else
        {
            float _3068 = inversesqrt(dot(vec3(_1920, _1921, _1922), vec3(_1920, _1921, _1922)));
            float _3069 = _3068 * _1920;
            float _3070 = _3068 * _1921;
            float _3071 = _3068 * _1922;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2939 < ((_2937 >> 12u) & 15u))
            {
                float _3044;
                float _3046;
                float _3048;
                float _3050;
                float _3052;
                float _3054;
                float _3203 = _2922;
                float _3204 = _2924;
                float _3205 = _2926;
                float _3206 = _2928;
                float _3207 = _2930;
                float _3208 = _2932;
                uint _3209 = _2939;
                uint _3218;
                bool _3219;
                for (;;)
                {
                    _3218 = texelFetch(g_lightClassification, int((((_2836 << 5u) + (_2822 << 9u)) + (_3209 << 2u)) >> 2u)).x;
                    _3219 = _3218 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3219)
                    {
                        frontier_phi_82_pred = _3208;
                        frontier_phi_82_pred_1 = _3207;
                        frontier_phi_82_pred_2 = _3206;
                        frontier_phi_82_pred_3 = _3205;
                        frontier_phi_82_pred_4 = _3204;
                        frontier_phi_82_pred_5 = _3203;
                    }
                    else
                    {
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3709;
                        float _3424 = _3203;
                        float _3425 = _3204;
                        float _3426 = _3205;
                        float _3427 = _3206;
                        float _3428 = _3207;
                        float _3429 = _3208;
                        uint _3430 = _3218;
                        uint _3431;
                        vec4 _3456;
                        float _3457;
                        vec4 _3472;
                        vec3 _3484;
                        vec4 _3499;
                        vec4 _3514;
                        float _3560;
                        bool _3561;
                        for (;;)
                        {
                            uint _3441 = ((_3209 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3430));
                            _3431 = (_3430 + 4294967295u) & _3430;
                            uint _3443 = _3441 * 40u;
                            _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            _3457 = _3456.w;
                            uint _3459 = (_3441 * 40u) + 4u;
                            _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            uint _3474 = (_3441 * 40u) + 8u;
                            _3484 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x));
                            uint _3486 = (_3441 * 40u) + 16u;
                            _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            uint _3501 = (_3441 * 40u) + 20u;
                            _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            uint _3516 = (_3441 * 40u) + 24u;
                            vec4 _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            uint _3535 = (_3441 * 40u) + 28u;
                            vec4 _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            _3560 = fma(_1922, _3548.z, fma(_1921, _3548.y, _3548.x * _1920)) + _3548.w;
                            _3561 = !((fma(_1922, _3529.z, fma(_1921, _3529.y, _3529.x * _1920)) + _3529.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3561)
                            {
                                float _3588 = _3456.x - _1920;
                                float _3589 = _3456.y - _1921;
                                float _3590 = _3456.z - _1922;
                                float _3591 = dot(vec3(_3588, _3589, _3590), vec3(_3588, _3589, _3590));
                                float _3594 = inversesqrt(_3591);
                                float _3595 = _3594 * _3588;
                                float _3596 = _3594 * _3589;
                                float _3597 = _3594 * _3590;
                                float _3601 = 1.0 - (_3591 / (_3457 * _3457));
                                float _4779 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3602 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                                float _3606 = sqrt(_3591) * _3472.w;
                                float _3608 = 1.39999997615814208984375 / (_3606 + 1.39999997615814208984375);
                                float _3609 = _3608 * _3608;
                                float _3612 = ((1.0 - _3609) * dot(vec3(_3595, _3596, _3597), vec3(_774, _777, _780))) + _3609;
                                float _3615 = _3606 * _3606;
                                float _3619 = (fma(_1922, _3499.z, fma(_1921, _3499.y, _3499.x * _1920)) + _3499.w) / _3560;
                                float _3620 = (fma(_1922, _3514.z, fma(_1921, _3514.y, _3514.x * _1920)) + _3514.w) / _3560;
                                float _3624 = 1.0 - dot(vec2(_3619, _3620), vec2(_3619, _3620));
                                float _4795 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3625 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                                float _3626 = _3625 * (((isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0))) * _3602) / ((_3615 * 0.699999988079071044921875) + 1.0));
                                float _3638 = exp2(log2(1.0 / ((_3615 * 3.5) + 5.0)) * 0.25);
                                float _3639 = 1.0 - _834;
                                float _3646 = sqrt(1.0 - ((1.0 - (_3639 * _3639)) * (1.0 - (_3638 * _3638))));
                                float _3647 = _3646 * _3646;
                                float _3648 = _3647 * _3647;
                                float _3649 = _3595 - _3069;
                                float _3650 = _3596 - _3070;
                                float _3651 = _3597 - _3071;
                                float _3655 = inversesqrt(dot(vec3(_3649, _3650, _3651), vec3(_3649, _3650, _3651)));
                                float _3659 = dot(vec3(_774, _777, _780), vec3((-0.0) - _3069, (-0.0) - _3070, (-0.0) - _3071));
                                float _4806 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3662 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                                float _3663 = dot(vec3(_774, _777, _780), vec3(_3655 * _3649, _3655 * _3650, _3655 * _3651));
                                float _4817 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3666 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                                float _3670 = ((_3666 * _3666) * (_3648 + (-1.0))) + 1.0;
                                float _3671 = _3608 * _3647;
                                float _3672 = _3671 * _3671;
                                float _3678 = ((1.0 - _3672) * dot(vec3(_774, _777, _780), vec3(_3595, _3596, _3597))) + _3672;
                                float _4828 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3679 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                                float _3680 = 1.0 - _3647;
                                float _3690 = (0.5 / (((_3679 * ((_3662 * _3680) + _3647)) + 9.9999999392252902907785028219223e-09) + (((_3679 * _3680) + _3647) * _3662))) * _3679;
                                float _4839 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3700 = (_3625 * _3602) * (((_3648 * 3.1415927410125732421875) * (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0)))) / ((_3670 * _3670) * ((_3615 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3626 * _3472.z;
                                frontier_phi_88_pred_1 = _3626 * _3472.y;
                                frontier_phi_88_pred_2 = _3626 * _3472.x;
                                frontier_phi_88_pred_3 = _3700 * _3484.z;
                                frontier_phi_88_pred_4 = _3700 * _3484.y;
                                frontier_phi_88_pred_5 = _3700 * _3484.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3709 = frontier_phi_88_pred;
                            _3708 = frontier_phi_88_pred_1;
                            _3707 = frontier_phi_88_pred_2;
                            _3706 = frontier_phi_88_pred_3;
                            _3705 = frontier_phi_88_pred_4;
                            _3704 = frontier_phi_88_pred_5;
                            _3414 = _3707 + _3427;
                            _3415 = _3708 + _3428;
                            _3416 = _3709 + _3429;
                            _3411 = _3704 + _3424;
                            _3412 = _3705 + _3425;
                            _3413 = _3706 + _3426;
                            if (_3431 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3431;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3416;
                        frontier_phi_82_pred_1 = _3415;
                        frontier_phi_82_pred_2 = _3414;
                        frontier_phi_82_pred_3 = _3413;
                        frontier_phi_82_pred_4 = _3412;
                        frontier_phi_82_pred_5 = _3411;
                    }
                    _3054 = frontier_phi_82_pred;
                    _3052 = frontier_phi_82_pred_1;
                    _3050 = frontier_phi_82_pred_2;
                    _3048 = frontier_phi_82_pred_3;
                    _3046 = frontier_phi_82_pred_4;
                    _3044 = frontier_phi_82_pred_5;
                    uint _3210 = _3209 + 1u;
                    if (_3210 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3203 = _3044;
                        _3204 = _3046;
                        _3205 = _3048;
                        _3206 = _3050;
                        _3207 = _3052;
                        _3208 = _3054;
                        _3209 = _3210;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3050;
                frontier_phi_63_64_ladder_1 = _3054;
                frontier_phi_63_64_ladder_2 = _3052;
                frontier_phi_63_64_ladder_3 = _3048;
                frontier_phi_63_64_ladder_4 = _3046;
                frontier_phi_63_64_ladder_5 = _3044;
            }
            else
            {
                frontier_phi_63_64_ladder = _2928;
                frontier_phi_63_64_ladder_1 = _2932;
                frontier_phi_63_64_ladder_2 = _2930;
                frontier_phi_63_64_ladder_3 = _2926;
                frontier_phi_63_64_ladder_4 = _2924;
                frontier_phi_63_64_ladder_5 = _2922;
            }
            _3043 = frontier_phi_63_64_ladder_5;
            _3045 = frontier_phi_63_64_ladder_4;
            _3047 = frontier_phi_63_64_ladder_3;
            _3049 = frontier_phi_63_64_ladder;
            _3051 = frontier_phi_63_64_ladder_2;
            _3053 = frontier_phi_63_64_ladder_1;
        }
        float _3058 = isnan(1.0) ? _818 : (isnan(_818) ? 1.0 : min(_818, 1.0));
        _2855 = (_3058 * _3049) + _2386;
        _2857 = (_3058 * _3051) + _2388;
        _2859 = (_3058 * _3053) + _2390;
        _2861 = ((_3043 * 0.039999999105930328369140625) * _3058) + _2709;
        _2863 = ((_3045 * 0.039999999105930328369140625) * _3058) + _2711;
        _2865 = ((_3047 * 0.039999999105930328369140625) * _3058) + _2713;
    }
    else
    {
        _2855 = _2386;
        _2857 = _2388;
        _2859 = _2390;
        _2861 = _2709;
        _2863 = _2711;
        _2865 = _2713;
    }
    float _4855 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _4866 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _4877 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _2882 = ((isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0))) * (_2855 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _818))) + ((_2861 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1654)) * cbPerFrame._m0[3u].x);
    float _2883 = ((isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * (_2857 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _818))) + ((_2863 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1654)) * cbPerFrame._m0[3u].x);
    float _2884 = ((isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0))) * (_2859 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _818))) + ((_2865 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1654)) * cbPerFrame._m0[3u].x);
    uint _2885 = _242 + 6u;
    float _2893 = _755 / cbSceneParam._m0[86u].x;
    float _2894 = _756 / cbSceneParam._m0[86u].y;
    vec4 _2908 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2893, _2894, (log2((isnan(cbSceneParam._m0[77u].w) ? _676 : (isnan(_676) ? cbSceneParam._m0[77u].w : min(_676, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2910 = _2908.x;
    float _2911 = _2908.y;
    float _2912 = _2908.z;
    float _2913 = _2908.w;
    float _2985;
    float _2987;
    float _2989;
    float _2991;
    if (_676 > cbSceneParam._m0[78u].w)
    {
        float _2947 = isnan(_676) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _676 : min(cbSceneParam._m0[80u].w, _676));
        float _2948 = _2947 / _676;
        float _2959 = _2948 * _728;
        float _2960 = _729 * _2948;
        float _2961 = (-0.0) - _2960;
        float _2963 = _2948 * _730;
        float _2965 = (cbSceneParam._m0[77u].w * _2961) / _2947;
        float _2966 = _2965 + cbSceneParam._m0[79u].w;
        float _2967 = cbSceneParam._m0[79u].w - _2960;
        float _2973 = sqrt(((_2959 * _2959) + (_2960 * _2960)) + (_2963 * _2963));
        float _2976 = (1.0 - (cbSceneParam._m0[77u].w / _2947)) * _2973;
        float _2981 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2983 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3160;
        if (abs((_2961 - _2965) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3160 = ((((_2966 > 0.0) ? exp2(_2981 * _2966) : (2.0 - exp2(_2983 * _2966))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2976;
        }
        else
        {
            float _3104 = 1.0 / cbSceneParam._m0[80u].x;
            float _3105 = isnan(_2967) ? _2966 : (isnan(_2966) ? _2967 : max(_2966, _2967));
            float _3106 = isnan(_2967) ? _2966 : (isnan(_2966) ? _2967 : min(_2966, _2967));
            float _3115 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : min(_3105, 0.0));
            float _3116 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : min(_3106, 0.0));
            _3160 = ((abs(_2973 / _2961) * cbSceneParam._m0[80u].y) * ((((_3115 - _3116) * 2.0) - ((exp2(_2981 * (isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0)))) - exp2(_2981 * (isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0))))) * _3104)) - ((exp2(_2983 * _3115) - exp2(_2983 * _3116)) * _3104))) + (_2976 * cbSceneParam._m0[80u].z);
        }
        vec4 _3162 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2893, _2894, 1.0), 0.0);
        float _3171 = exp2((_3160 * (-1.44269502162933349609375)) * (1.0 - _3162.w));
        float _3172 = log2(_3171);
        float _3188 = log2(_2913);
        _2985 = (exp2(_3188 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3172 * cbSceneParam._m0[78u].x)) * _3162.x) / cbSceneParam._m0[78u].x)) + _2910;
        _2987 = (exp2(_3188 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3172 * cbSceneParam._m0[78u].y)) * _3162.y) / cbSceneParam._m0[78u].y)) + _2911;
        _2989 = (exp2(_3188 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3172 * cbSceneParam._m0[78u].z)) * _3162.z) / cbSceneParam._m0[78u].z)) + _2912;
        _2991 = _3171 * _2913;
    }
    else
    {
        _2985 = _2910;
        _2987 = _2911;
        _2989 = _2912;
        _2991 = _2913;
    }
    bool _3198;
    vec4 _3001;
    vec4 _3023;
    float _3025;
    float _3029;
    float _3030;
    float _3031;
    float _3032;
    bool _3042;
    for (;;)
    {
        _3001 = cbMatDynParam._m0[0u];
        float _3003 = roundEven(_3001.y);
        bool _3004 = _3003 == 3.0;
        float _3005 = log2(_2991);
        float _3012 = exp2(_3005 * cbSceneParam._m0[78u].x) * _2882;
        float _3013 = exp2(_3005 * cbSceneParam._m0[78u].y) * _2883;
        float _3014 = exp2(_3005 * cbSceneParam._m0[78u].z) * _2884;
        float _3021 = _744 + (-0.5);
        _3023 = cbMtdParam._m0[1u];
        _3025 = _3023.y * _3021;
        float _3028 = (_3003 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3029 = _3028 * (_3004 ? _3012 : (_3012 + (cbSceneParam._m0[72u].w * _2985)));
        _3030 = _3028 * (_3004 ? _3013 : (_3013 + (cbSceneParam._m0[72u].w * _2987)));
        _3031 = _3028 * (_3004 ? _3014 : (_3014 + (cbSceneParam._m0[72u].w * _2989)));
        _3032 = _3021 * 0.999000012874603271484375;
        _3042 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3042)
        {
            if ((cbInstanceData._m0[_242 + 7u].x + _3032) < 0.5)
            {
                _3198 = true;
                break;
            }
        }
        uint _3139 = _793 + uint(_3001.w);
        if ((cbInstanceData._m0[_3139].w < 1.0) && ((cbInstanceData._m0[_3139].w + _3032) < 0.5))
        {
            _3198 = true;
            break;
        }
        if ((_3025 + 1.0) < _3023.x)
        {
            _3198 = true;
            break;
        }
        _3198 = false;
        break;
    }
    float _3402;
    if (_3198)
    {
        discard_state = true;
        _3402 = 0.0;
    }
    else
    {
        _3402 = cbInstanceData._m0[_2885].w;
    }
    SV_Target.x = _3029;
    SV_Target.y = _3030;
    SV_Target.z = _3031;
    SV_Target.w = _3402;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2885].w;
    discard_exit();
}


