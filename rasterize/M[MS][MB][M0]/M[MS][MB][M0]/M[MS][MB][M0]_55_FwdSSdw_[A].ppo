#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1143;
float _3527;
float _3528;
float _3529;
float _3530;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _248 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3539 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3550 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3561 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    uint _258 = uint(roundEven(NORMAL.w)) * 13u;
    uint _263 = _258 + 1u;
    uint _267 = _258 + 2u;
    float _276 = sqrt(((cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x)) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x));
    float _277 = _276 * TEXCOORD.z;
    float _278 = _276 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _277) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _278) + cbTextureTilingScale._m0[13u].w));
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _319 = _314.x * cbMtdParam._m0[9u].x;
    float _320 = _314.y * cbMtdParam._m0[9u].y;
    float _321 = _314.z * cbMtdParam._m0[9u].z;
    float _325 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _291.x) * _319;
    float _328 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _291.y) * _320;
    float _331 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _291.z) * _321;
    float _338 = ((_319 - _325) * (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) + _325;
    float _339 = ((_320 - _328) * (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) + _328;
    float _340 = ((_321 - _331) * (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) + _331;
    vec4 _359 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _277) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _278) + cbTextureTilingScale._m0[14u].w));
    vec4 _379 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _277) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _278) + cbTextureTilingScale._m0[20u].w));
    vec4 _405 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _409 = _405.z;
    float _413 = (_405.x * 2.0) + (-1.0);
    float _414 = (_405.y * 2.0) + (-1.0);
    float _415 = dot(vec2(_413, _414), vec2(_413, _414));
    float _3572 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _420 = sqrt(1.0 - (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))));
    float _425 = _413 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_379.x * 2.0) + (-1.0)));
    float _426 = _414 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_379.y * 2.0) + (-1.0)));
    float _429 = fma(_420, _225, fma(_426, _232, _425 * _218));
    float _432 = fma(_420, _226, fma(_426, _233, _425 * _219));
    float _435 = fma(_420, _227, fma(_426, _234, _425 * _220));
    float _439 = inversesqrt(dot(vec3(_429, _432, _435), vec3(_429, _432, _435)));
    vec4 _475 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _277) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _278) + cbTextureTilingScale._m0[11u].w));
    float _477 = _475.x;
    float _478 = 1.0 - _477;
    float _485 = ((_477 - _478) * cbMtdParam._m0[24u].z) + _478;
    float _487 = (cbMtdParam._m0[19u].x + dot(vec4(_439 * _429, _439 * _432, _439 * _435, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_485 * cbMtdParam._m0[21u].z);
    float _3583 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _503 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_485 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3594 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _504 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _508 = ((_488 * ((_359.x * cbMtdParam._m0[18u].x) - _338)) * _504) + _338;
    float _509 = ((_488 * ((_359.y * cbMtdParam._m0[18u].y) - _339)) * _504) + _339;
    float _510 = ((_488 * ((_359.z * cbMtdParam._m0[18u].z) - _340)) * _504) + _340;
    float _515 = (((_379.z - _409) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _409;
    vec4 _528 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _277) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _278) + cbTextureTilingScale._m0[15u].w));
    float _535 = (_528.x * 2.0) + (-1.0);
    float _536 = (_528.y * 2.0) + (-1.0);
    float _537 = dot(vec2(_535, _536), vec2(_535, _536));
    float _3605 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _546 = (((_528.z - _515) * _488) * _504) + _515;
    float _561 = (((cbMtdParam._m0[21u].x * _425) + ((_535 - _425) * _488)) * _504) + _425;
    float _562 = (((cbMtdParam._m0[21u].x * _426) + ((_536 - _426) * _488)) * _504) + _426;
    float _563 = (((sqrt(1.0 - (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) - _420) * _488) * _504) + _420;
    float _565 = cbMtdParam._m0[22u].x + _405.w;
    float _568 = fma(_563, _225, fma(_562, _232, _561 * _218));
    float _571 = fma(_563, _226, fma(_562, _233, _561 * _219));
    float _574 = fma(_563, _227, fma(_562, _234, _561 * _220));
    float _578 = inversesqrt(dot(vec3(_568, _571, _574), vec3(_568, _571, _574)));
    float _579 = _578 * _568;
    float _580 = _578 * _571;
    float _581 = _578 * _574;
    float _3616 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _582 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _3627 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3638 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _3649 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _3660 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _600 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _651 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _641);
    float _652 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _641);
    float _653 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _641);
    float _657 = inversesqrt(dot(vec3(_651, _652, _653), vec3(_651, _652, _653)));
    float _658 = _651 * _657;
    float _659 = _652 * _657;
    float _660 = _653 * _657;
    vec4 _665 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _667 = _665.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _824 = sqrt(((_651 * _651) + (_652 * _652)) + (_653 * _653));
        float _830 = (cbMatDynParam._m0[5u].x * _824) + cbMatDynParam._m0[5u].y;
        float _3671 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _835 = (cbMatDynParam._m0[5u].z * _824) + cbMatDynParam._m0[5u].w;
        float _3682 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) - _831)) + _831) < ((_667 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _679 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _680 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _700 = fma(_581, cbSceneParam._m0[5u].z, fma(_580, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _579));
    float _703 = fma(_581, cbSceneParam._m0[6u].z, fma(_580, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _579));
    float _706 = fma(_581, cbSceneParam._m0[7u].z, fma(_580, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _579));
    uint _719 = _258 + 9u;
    uint _720 = _719 + uint(cbMatDynParam._m0[0u].w);
    float _726 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0)))) * cbInstanceData._m0[_720].x;
    float _727 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0)))) * cbInstanceData._m0[_720].y;
    float _728 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0)))) * cbInstanceData._m0[_720].z;
    float _3693 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _3704 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _3715 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    vec4 _740 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _679, cbSceneParam._m0[86u].y * _680));
    float _744 = ((isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * TEXCOORD_5.w) * _740.x;
    float _745 = dot(vec3(_579, _580, _581), vec3(_658, _659, _660));
    float _748 = _745 * 2.0;
    float _752 = (_748 * _579) - _658;
    float _753 = (_748 * _580) - _659;
    float _754 = (_748 * _581) - _660;
    float _758 = abs(dot(vec3(_658, _659, _660), vec3(_579, _580, _581)));
    float _3726 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _760 = sqrt(_582);
    float _773 = exp2((_760 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_760 * 3.0));
    float _805 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1142;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _867 = fma(_813, cbModelParam._m0[26u].z, fma(_809, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _805));
        float _871 = fma(_813, cbModelParam._m0[27u].z, fma(_809, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _805));
        float _875 = fma(_813, cbModelParam._m0[28u].z, fma(_809, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _805));
        float _900 = _805 + _579;
        float _901 = _809 + _580;
        float _902 = _813 + _581;
        float _912 = fma(_902, cbModelParam._m0[26u].z, fma(_901, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _900)) - _867;
        float _913 = fma(_902, cbModelParam._m0[27u].z, fma(_901, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _900)) - _871;
        float _914 = fma(_902, cbModelParam._m0[28u].z, fma(_901, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _900)) - _875;
        float _918 = inversesqrt(dot(vec3(_912, _913, _914), vec3(_912, _913, _914)));
        float _931 = ((_918 * _912) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_867 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _932 = ((_918 * _913) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_871 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _933 = ((_918 * _914) / cbModelParam._m0[34u].z) + ((((((_875 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_931, _932, _933), 0.0);
        float _970 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_936.x + (-0.5));
        float _972 = _970 * (_936.y + (-0.5));
        float _973 = _970 * (_936.z + (-0.5));
        float _980 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_943.x + (-0.5));
        float _982 = _980 * (_943.y + (-0.5));
        float _983 = _980 * (_943.z + (-0.5));
        float _990 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_950.x + (-0.5));
        float _992 = _990 * (_950.y + (-0.5));
        float _993 = _990 * (_950.z + (-0.5));
        float _1000 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_957.x + (-0.5));
        float _1002 = _1000 * (_957.y + (-0.5));
        float _1003 = _1000 * (_957.z + (-0.5));
        float _1004 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = _971 * 0.5;
        float _1008 = _981 * 0.5;
        float _1009 = _991 * 0.5;
        float _1010 = dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009));
        float _1015 = (_1010 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1010);
        float _1024 = (dot(vec3(_579, _580, _581), vec3(_1015 * _1007, _1015 * _1008, _1015 * _1009)) + 1.0) * 0.5;
        float _3752 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1034 = sqrt(((_1008 * _1008) + (_1007 * _1007)) + (_1009 * _1009)) / (_1004 + 9.9999997473787516355514526367188e-06);
        float _3763 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _3774 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_1036 + 1.0))) + _1041) * _1004;
        float _1051 = _972 * 0.5;
        float _1052 = _982 * 0.5;
        float _1053 = _992 * 0.5;
        float _1054 = dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053));
        float _1059 = (_1054 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1054);
        float _1067 = (dot(vec3(_579, _580, _581), vec3(_1059 * _1051, _1059 * _1052, _1059 * _1053)) + 1.0) * 0.5;
        float _3785 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1076 = sqrt(((_1052 * _1052) + (_1051 * _1051)) + (_1053 * _1053)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _3796 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1078 = _1077 * 2.0;
        float _1082 = (1.0 - _1077) / (_1077 + 1.0);
        float _3807 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1092 = ((((1.0 - _1083) * (_1078 + 2.0)) * exp2(log2(isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_1078 + 1.0))) + _1083) * _1005;
        float _1093 = _973 * 0.5;
        float _1094 = _983 * 0.5;
        float _1095 = _993 * 0.5;
        float _1096 = dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095));
        float _1101 = (_1096 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1096);
        float _1109 = (dot(vec3(_579, _580, _581), vec3(_1101 * _1093, _1101 * _1094, _1101 * _1095)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1118 = sqrt(((_1094 * _1094) + (_1093 * _1093)) + (_1095 * _1095)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1120 = _1119 * 2.0;
        float _1124 = (1.0 - _1119) / (_1119 + 1.0);
        float _3840 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1134 = ((((1.0 - _1125) * (_1120 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1120 + 1.0))) + _1125) * _1006;
        _1142 = _973;
        _1144 = _972;
        _1145 = _971;
        _1146 = _983;
        _1147 = _982;
        _1148 = _981;
        _1149 = _993;
        _1150 = _992;
        _1151 = _991;
        _1152 = _1006;
        _1153 = _1005;
        _1154 = _1004;
        _1155 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
        _1156 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0)));
        _1157 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)));
    }
    else
    {
        _1142 = _1143;
        _1144 = _1143;
        _1145 = _1143;
        _1146 = _1143;
        _1147 = _1143;
        _1148 = _1143;
        _1149 = _1143;
        _1150 = _1143;
        _1151 = _1143;
        _1152 = _1143;
        _1153 = _1143;
        _1154 = _1143;
        _1155 = 0.0;
        _1156 = 0.0;
        _1157 = 0.0;
    }
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1185 = fma(_813, cbModelParam._m0[30u].z, fma(_809, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _805));
        float _1189 = fma(_813, cbModelParam._m0[31u].z, fma(_809, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _805));
        float _1193 = fma(_813, cbModelParam._m0[32u].z, fma(_809, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _805));
        float _1216 = _805 + _579;
        float _1217 = _809 + _580;
        float _1218 = _813 + _581;
        float _1228 = fma(_1218, cbModelParam._m0[30u].z, fma(_1217, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1216)) - _1185;
        float _1229 = fma(_1218, cbModelParam._m0[31u].z, fma(_1217, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1216)) - _1189;
        float _1230 = fma(_1218, cbModelParam._m0[32u].z, fma(_1217, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1216)) - _1193;
        float _1234 = inversesqrt(dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230)));
        float _1247 = ((_1234 * _1228) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1185 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1248 = ((_1234 * _1229) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1189 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1249 = ((_1234 * _1230) / cbModelParam._m0[35u].z) + ((((((_1193 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        float _1284 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1251.x + (-0.5));
        float _1286 = _1284 * (_1251.y + (-0.5));
        float _1287 = _1284 * (_1251.z + (-0.5));
        float _1294 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1258.x + (-0.5));
        float _1296 = _1294 * (_1258.y + (-0.5));
        float _1297 = _1294 * (_1258.z + (-0.5));
        float _1304 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1265.x + (-0.5));
        float _1306 = _1304 * (_1265.y + (-0.5));
        float _1307 = _1304 * (_1265.z + (-0.5));
        float _1314 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1272.x + (-0.5));
        float _1316 = _1314 * (_1272.y + (-0.5));
        float _1317 = _1314 * (_1272.z + (-0.5));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = _1285 * 0.5;
        float _1322 = _1295 * 0.5;
        float _1323 = _1305 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_579, _580, _581), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _3881 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _3892 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _3903 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1348 + 1.0))) + _1353) * _1318;
        float _1363 = _1286 * 0.5;
        float _1364 = _1296 * 0.5;
        float _1365 = _1306 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_579, _580, _581), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _3914 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _3925 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _3936 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1390 + 1.0))) + _1395) * _1319;
        float _1405 = _1287 * 0.5;
        float _1406 = _1297 * 0.5;
        float _1407 = _1307 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_579, _580, _581), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _3969 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1432 + 1.0))) + _1437) * _1320;
        _1454 = _1287;
        _1455 = _1286;
        _1456 = _1285;
        _1457 = _1297;
        _1458 = _1296;
        _1459 = _1295;
        _1460 = _1307;
        _1461 = _1306;
        _1462 = _1305;
        _1463 = _1320;
        _1464 = _1319;
        _1465 = _1318;
        _1466 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
        _1467 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1468 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
    }
    else
    {
        _1454 = _1143;
        _1455 = _1143;
        _1456 = _1143;
        _1457 = _1143;
        _1458 = _1143;
        _1459 = _1143;
        _1460 = _1143;
        _1461 = _1143;
        _1462 = _1143;
        _1463 = _1143;
        _1464 = _1143;
        _1465 = _1143;
        _1466 = 0.0;
        _1467 = 0.0;
        _1468 = 0.0;
    }
    float _1478 = (cbModelParam._m0[1u].x * (_1466 - _1155)) + _1155;
    float _1479 = (cbModelParam._m0[1u].x * (_1467 - _1156)) + _1156;
    float _1480 = (cbModelParam._m0[1u].x * (_1468 - _1157)) + _1157;
    float _1501 = fma(_1480, cbSceneParam._m0[89u].z, fma(_1479, cbSceneParam._m0[89u].y, _1478 * cbSceneParam._m0[89u].x));
    float _1504 = fma(_1480, cbSceneParam._m0[90u].z, fma(_1479, cbSceneParam._m0[90u].y, _1478 * cbSceneParam._m0[90u].x));
    float _1507 = fma(_1480, cbSceneParam._m0[91u].z, fma(_1479, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1478));
    float _1522 = _752 * 0.5;
    float _1523 = _753 * 0.5;
    float _1524 = _754 * 0.5;
    float _1525 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1456, _1459, _1462, _1465));
    float _1528 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1455, _1458, _1461, _1464));
    float _1531 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1454, _1457, _1460, _1463));
    float _1565;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1538 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1142, _1146, _1149, _1152));
        float _1542 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1144, _1147, _1150, _1153));
        float _1546 = dot(vec4(_1522, _1523, _1524, 1.0), vec4(_1145, _1148, _1151, _1154));
        float _1553 = dot(vec4(cbModelParam._m0[39u]), vec4(_1522, _1523, _1524, 1.0));
        _1565 = dot(vec3(isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)), isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1553) ? 0.0 : (isnan(0.0) ? _1553 : max(0.0, _1553))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1565 = 1.0;
    }
    float _1576;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1567 = dot(vec4(cbModelParam._m0[40u]), vec4(_1522, _1523, _1524, 1.0));
        _1576 = dot(vec3(isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1567) ? 0.0 : (isnan(0.0) ? _1567 : max(0.0, _1567))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1576 = 1.0;
    }
    float _1580 = (_1576 * cbModelParam._m0[1u].x) + (_1565 * (1.0 - cbModelParam._m0[1u].x));
    float _1590 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _582);
    float _1591 = isnan(_1590) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1590 : min(cbModelParam._m0[25u].z, _1590));
    float _1671;
    float _1673;
    float _1675;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1638 = fma(_813, cbModelParam._m0[13u].z, fma(_809, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _805)) + cbModelParam._m0[13u].w;
        float _1642 = fma(_813, cbModelParam._m0[14u].z, fma(_809, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _805)) + cbModelParam._m0[14u].w;
        float _1646 = fma(_813, cbModelParam._m0[15u].z, fma(_809, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _805)) + cbModelParam._m0[15u].w;
        float _1649 = fma(_754, cbModelParam._m0[13u].z, fma(_753, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _752));
        float _1652 = fma(_754, cbModelParam._m0[14u].z, fma(_753, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _752));
        float _1655 = fma(_754, cbModelParam._m0[15u].z, fma(_753, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _752));
        float _1683;
        if (_1649 > 0.0)
        {
            _1683 = abs((1.0 - _1638) / _1649);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1638 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1683 = frontier_phi_17_15_ladder;
        }
        float _1906;
        if (_1652 > 0.0)
        {
            _1906 = abs((1.0 - _1642) / _1652);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1642 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1906 = frontier_phi_26_22_ladder;
        }
        float _2152;
        if (_1655 > 0.0)
        {
            _2152 = abs((1.0 - _1646) / _1655);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1646 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2152 = frontier_phi_38_33_ladder;
        }
        float _2154 = isnan(_1906) ? _1683 : (isnan(_1683) ? _1906 : min(_1683, _1906));
        float _2155 = isnan(_2152) ? _2154 : (isnan(_2154) ? _2152 : min(_2154, _2152));
        float _2159 = (_2155 * _1649) + _1638;
        float _2160 = (_2155 * _1652) + _1642;
        float _2161 = (_2155 * _1655) + _1646;
        float _2162 = _2155 * 9.9999997473787516355514526367188e-05;
        float _2164 = (-1.0) - _2162;
        float _2166 = _2162 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2161 > _2166) || ((_2161 < _2164) || ((_2160 > _2166) || ((_2160 < _2164) || ((_2159 < _2164) || (_2159 > _2166))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2285 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2161, cbModelParam._m0[9u].z, fma(_2160, cbModelParam._m0[9u].y, _2159 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2161, cbModelParam._m0[10u].z, fma(_2160, cbModelParam._m0[10u].y, _2159 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2161, cbModelParam._m0[11u].z, fma(_2160, cbModelParam._m0[11u].y, _2159 * cbModelParam._m0[11u].x))), _1591);
            frontier_phi_16_38_ladder = _2285.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2285.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2285.x * cbModelParam._m0[1u].y;
        }
        _1671 = frontier_phi_16_38_ladder_2;
        _1673 = frontier_phi_16_38_ladder_1;
        _1675 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1659 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_752, _753, _754), _1591);
        _1671 = _1659.x * cbModelParam._m0[1u].y;
        _1673 = _1659.y * cbModelParam._m0[1u].y;
        _1675 = _1659.z * cbModelParam._m0[1u].y;
    }
    float _1679 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _582);
    float _1680 = isnan(_1679) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1679 : min(cbModelParam._m0[25u].w, _1679));
    float _1769;
    float _1771;
    float _1773;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1733 = fma(_813, cbModelParam._m0[21u].z, fma(_809, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _805)) + cbModelParam._m0[21u].w;
        float _1737 = fma(_813, cbModelParam._m0[22u].z, fma(_809, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _805)) + cbModelParam._m0[22u].w;
        float _1741 = fma(_813, cbModelParam._m0[23u].z, fma(_809, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _805)) + cbModelParam._m0[23u].w;
        float _1744 = fma(_754, cbModelParam._m0[21u].z, fma(_753, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _752));
        float _1747 = fma(_754, cbModelParam._m0[22u].z, fma(_753, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _752));
        float _1750 = fma(_754, cbModelParam._m0[23u].z, fma(_753, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _752));
        float _1911;
        if (_1744 > 0.0)
        {
            _1911 = abs((1.0 - _1733) / _1744);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1733 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1911 = frontier_phi_28_24_ladder;
        }
        float _2179;
        if (_1747 > 0.0)
        {
            _2179 = abs((1.0 - _1737) / _1747);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1737 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2179 = frontier_phi_40_35_ladder;
        }
        float _2384;
        if (_1750 > 0.0)
        {
            _2384 = abs((1.0 - _1741) / _1750);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1741 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2384 = frontier_phi_49_46_ladder;
        }
        float _2386 = isnan(_2179) ? _1911 : (isnan(_1911) ? _2179 : min(_1911, _2179));
        float _2387 = isnan(_2384) ? _2386 : (isnan(_2386) ? _2384 : min(_2386, _2384));
        float _2391 = (_2387 * _1744) + _1733;
        float _2392 = (_2387 * _1747) + _1737;
        float _2393 = (_2387 * _1750) + _1741;
        float _2394 = _2387 * 9.9999997473787516355514526367188e-05;
        float _2395 = (-1.0) - _2394;
        float _2397 = _2394 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2393 > _2397) || ((_2393 < _2395) || ((_2392 > _2397) || ((_2392 < _2395) || ((_2391 < _2395) || (_2391 > _2397))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2592 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2393, cbModelParam._m0[17u].z, fma(_2392, cbModelParam._m0[17u].y, _2391 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2393, cbModelParam._m0[18u].z, fma(_2392, cbModelParam._m0[18u].y, _2391 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2393, cbModelParam._m0[19u].z, fma(_2392, cbModelParam._m0[19u].y, _2391 * cbModelParam._m0[19u].x))), _1680);
            frontier_phi_25_49_ladder = _2592.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2592.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2592.x * cbModelParam._m0[1u].z;
        }
        _1769 = frontier_phi_25_49_ladder_2;
        _1771 = frontier_phi_25_49_ladder_1;
        _1773 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1753 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_752, _753, _754), _1680);
        _1769 = _1753.x * cbModelParam._m0[1u].z;
        _1771 = _1753.y * cbModelParam._m0[1u].z;
        _1773 = _1753.z * cbModelParam._m0[1u].z;
    }
    float _1785 = ((((1.0 - _773) * ((_760 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_773 * _760)) * _744;
    float _1786 = _1785 * ((cbModelParam._m0[1u].w * (_1769 - _1671)) + _1671);
    float _1787 = _1785 * ((cbModelParam._m0[1u].w * (_1771 - _1673)) + _1673);
    float _1788 = _1785 * ((cbModelParam._m0[1u].w * (_1773 - _1675)) + _1675);
    float _1791 = fma(_1788, cbSceneParam._m0[89u].z, fma(_1787, cbSceneParam._m0[89u].y, _1786 * cbSceneParam._m0[89u].x));
    float _1794 = fma(_1788, cbSceneParam._m0[90u].z, fma(_1787, cbSceneParam._m0[90u].y, _1786 * cbSceneParam._m0[90u].x));
    float _1797 = fma(_1788, cbSceneParam._m0[91u].z, fma(_1787, cbSceneParam._m0[91u].y, _1786 * cbSceneParam._m0[91u].x));
    vec4 _1805 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_679, _680));
    float _1807 = _1805.w;
    float _1819 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1807);
    float _1820 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1807);
    float _1821 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1807);
    uvec4 _1825 = floatBitsToUint(cbInstanceData._m0[_258 + 5u]);
    uint _1827 = _1825.x * 14u;
    uint _1828 = _1827 + 13u;
    float _1835 = _744 + (-1.0);
    float _1840 = (cbLight._m0[_1828].x * _1835) + 1.0;
    float _1841 = (cbLight._m0[_1828].y * _1835) + 1.0;
    float _1842 = (cbLight._m0[_1828].z * _1835) + 1.0;
    float _1843 = (cbLight._m0[_1828].w * _1835) + 1.0;
    uint _1844 = _1827 + 5u;
    float _1850 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
    uint _1854 = _1827 + 4u;
    float _1864 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
    uint _1868 = _1827 | 1u;
    float _1879 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_579, _580, _581));
    float _1882 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_579, _580, _581));
    float _4105 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _4116 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1887 = (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * 0.3183098733425140380859375;
    float _1889 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * 0.3183098733425140380859375;
    float _1896 = ((cbLight._m0[_1844].x * _1850) * _1889) + (((cbLight._m0[_1854].x * _1819) * _1864) * _1887);
    float _1897 = ((_1850 * cbLight._m0[_1844].y) * _1889) + (((cbLight._m0[_1854].y * _1820) * _1864) * _1887);
    float _1898 = ((_1850 * cbLight._m0[_1844].z) * _1889) + (((cbLight._m0[_1854].z * _1821) * _1864) * _1887);
    uvec4 _1903 = floatBitsToUint(cbLight._m0[_1827 + 12u]);
    bool _1905 = _1903.x == 0u;
    float _1916;
    float _1918;
    float _1920;
    if (_1905)
    {
        _1916 = _1896;
        _1918 = _1897;
        _1920 = _1898;
    }
    else
    {
        uint _1924 = _1827 + 6u;
        float _1940 = (dot(vec3(cbLight._m0[_1827 + 2u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _1941 = _1940 * _1940;
        float _4127 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1942 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1943 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
        _1916 = (((cbLight._m0[_1924].x * 0.3183098733425140380859375) * _1942) * _1943) + _1896;
        _1918 = (((cbLight._m0[_1924].y * 0.3183098733425140380859375) * _1942) * _1943) + _1897;
        _1920 = (((cbLight._m0[_1924].z * 0.3183098733425140380859375) * _1942) * _1943) + _1898;
    }
    bool _1923 = _1903.y == 0u;
    float _1961;
    float _1963;
    float _1965;
    if (_1923)
    {
        _1961 = _1916;
        _1963 = _1918;
        _1965 = _1920;
    }
    else
    {
        uint _2123 = _1827 + 7u;
        float _2139 = (dot(vec3(cbLight._m0[_1827 + 3u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _2140 = _2139 * _2139;
        float _4143 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2141 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _2142 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
        _1961 = (((cbLight._m0[_2123].x * 0.3183098733425140380859375) * _2141) * _2142) + _1916;
        _1963 = (((cbLight._m0[_2123].y * 0.3183098733425140380859375) * _2141) * _2142) + _1918;
        _1965 = (((cbLight._m0[_2123].z * 0.3183098733425140380859375) * _2141) * _2142) + _1920;
    }
    uint _1968 = _1827 + 8u;
    float _1981 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1827].w)) * _582) * 0.949999988079071044921875);
    float _1982 = _1981 * _1981;
    float _1983 = cbLight._m0[_1827].x + _658;
    float _1984 = cbLight._m0[_1827].y + _659;
    float _1985 = cbLight._m0[_1827].z + _660;
    float _1989 = inversesqrt(dot(vec3(_1983, _1984, _1985), vec3(_1983, _1984, _1985)));
    float _1990 = _1989 * _1983;
    float _1991 = _1989 * _1984;
    float _1992 = _1989 * _1985;
    float _1993 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_1827].xyz));
    float _4159 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1996 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _4170 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _1997 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _1998 = dot(vec3(_579, _580, _581), vec3(_1990, _1991, _1992));
    float _4181 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _2002 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_1990, _1991, _1992));
    float _4192 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2006 = _1982 * _1982;
    float _2010 = ((_2001 * _2001) * (_2006 + (-1.0))) + 1.0;
    float _2021 = (exp2(log2(1.0 - (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2022 = 1.0 - _1982;
    float _2033 = (0.5 / (((_1997 * ((_1996 * _2022) + _1982)) + 9.9999999392252902907785028219223e-09) + (((_1997 * _2022) + _1982) * _1996))) * _1996;
    float _4203 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2035 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2006 / ((_2010 * _2010) * 3.141590118408203125));
    uint _2049 = _1827 + 9u;
    float _2060 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1868].w)) * _582) * 0.949999988079071044921875);
    float _2061 = _2060 * _2060;
    float _2062 = cbLight._m0[_1868].x + _658;
    float _2063 = cbLight._m0[_1868].y + _659;
    float _2064 = cbLight._m0[_1868].z + _660;
    float _2068 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
    float _2069 = _2068 * _2062;
    float _2070 = _2068 * _2063;
    float _2071 = _2068 * _2064;
    float _2072 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_1868].xyz));
    float _4214 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2075 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _2076 = dot(vec3(_579, _580, _581), vec3(_2069, _2070, _2071));
    float _4225 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _2080 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_2069, _2070, _2071));
    float _4236 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2084 = _2061 * _2061;
    float _2088 = ((_2079 * _2079) * (_2084 + (-1.0))) + 1.0;
    float _2097 = (exp2(log2(1.0 - (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2098 = 1.0 - _2061;
    float _2108 = (0.5 / (((_1997 * ((_2075 * _2098) + _2061)) + 9.9999999392252902907785028219223e-09) + (((_1997 * _2098) + _2061) * _2075))) * _2075;
    float _4247 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2110 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2084 / ((_2088 * _2088) * 3.141590118408203125));
    float _2120 = (((_2097 * cbLight._m0[_2049].x) * _2110) * _1850) + ((((cbLight._m0[_1968].x * _1819) * _2021) * _2035) * _1864);
    float _2121 = (((_2097 * cbLight._m0[_2049].y) * _2110) * _1850) + ((((cbLight._m0[_1968].y * _1820) * _2021) * _2035) * _1864);
    float _2122 = (((_2097 * cbLight._m0[_2049].z) * _2110) * _1850) + ((((cbLight._m0[_1968].z * _1821) * _2021) * _2035) * _1864);
    float _2184;
    float _2186;
    float _2188;
    if (_1905)
    {
        _2184 = _2120;
        _2186 = _2121;
        _2188 = _2122;
    }
    else
    {
        uint _2190 = _1827 + 2u;
        uint _2194 = _1827 + 10u;
        float _2208 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2190].w)) * _582) * 0.949999988079071044921875);
        float _2209 = _2208 * _2208;
        float _2210 = cbLight._m0[_2190].x + _658;
        float _2211 = cbLight._m0[_2190].y + _659;
        float _2212 = cbLight._m0[_2190].z + _660;
        float _2216 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
        float _2217 = _2216 * _2210;
        float _2218 = _2216 * _2211;
        float _2219 = _2216 * _2212;
        float _2220 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2190].xyz));
        float _4258 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2223 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2224 = dot(vec3(_579, _580, _581), vec3(_2217, _2218, _2219));
        float _4269 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2227 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2228 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_2217, _2218, _2219));
        float _4280 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2232 = _2209 * _2209;
        float _2236 = ((_2227 * _2227) * (_2232 + (-1.0))) + 1.0;
        float _2245 = (exp2(log2(1.0 - (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2246 = 1.0 - _2209;
        float _2256 = (0.5 / (((_1997 * ((_2223 * _2246) + _2209)) + 9.9999999392252902907785028219223e-09) + (((_1997 * _2246) + _2209) * _2223))) * _2223;
        float _4291 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2258 = (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_2232 / ((_2236 * _2236) * 3.141590118408203125));
        float _2259 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
        _2184 = (((_2245 * cbLight._m0[_2194].x) * _2258) * _2259) + _2120;
        _2186 = (((_2245 * cbLight._m0[_2194].y) * _2258) * _2259) + _2121;
        _2188 = (((_2245 * cbLight._m0[_2194].z) * _2258) * _2259) + _2122;
    }
    float _2294;
    float _2296;
    float _2298;
    if (_1923)
    {
        _2294 = _2184;
        _2296 = _2186;
        _2298 = _2188;
    }
    else
    {
        uint _2305 = _1827 + 3u;
        uint _2309 = _1827 + 11u;
        float _2323 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2305].w)) * _582) * 0.949999988079071044921875);
        float _2324 = _2323 * _2323;
        float _2325 = cbLight._m0[_2305].x + _658;
        float _2326 = cbLight._m0[_2305].y + _659;
        float _2327 = cbLight._m0[_2305].z + _660;
        float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
        float _2332 = _2331 * _2325;
        float _2333 = _2331 * _2326;
        float _2334 = _2331 * _2327;
        float _2335 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2305].xyz));
        float _4307 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2338 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2339 = dot(vec3(_579, _580, _581), vec3(_2332, _2333, _2334));
        float _4318 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2342 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2343 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_2332, _2333, _2334));
        float _4329 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2347 = _2324 * _2324;
        float _2351 = ((_2342 * _2342) * (_2347 + (-1.0))) + 1.0;
        float _2360 = (exp2(log2(1.0 - (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2361 = 1.0 - _2324;
        float _2371 = (0.5 / (((_1997 * ((_2338 * _2361) + _2324)) + 9.9999999392252902907785028219223e-09) + (((_1997 * _2361) + _2324) * _2338))) * _2338;
        float _4340 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2373 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2347 / ((_2351 * _2351) * 3.141590118408203125));
        float _2374 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
        _2294 = (((_2360 * cbLight._m0[_2309].x) * _2373) * _2374) + _2184;
        _2296 = (((_2360 * cbLight._m0[_2309].y) * _2373) * _2374) + _2186;
        _2298 = (((_2360 * cbLight._m0[_2309].z) * _2373) * _2374) + _2188;
    }
    float _2509;
    float _2511;
    float _2513;
    float _2515;
    float _2517;
    float _2519;
    if (_1825.y == 0u)
    {
        float _2449 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2450 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2449;
        float _2451 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2449;
        float _2452 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2449;
        uvec4 _2464 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2465 = _2464.x;
        uint _2476 = uint((float(_2464.y) * floor(float(uint(cbSceneParam._m0[85u].y * _680) / _2465))) + floor(float(uint(cbSceneParam._m0[85u].x * _679) / _2465)));
        float _2486 = (log2(_2452 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2487 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        uint _2490 = uint(isnan(14.0) ? _2487 : (isnan(_2487) ? 14.0 : min(_2487, 14.0)));
        uvec4 _2495 = texelFetch(g_lightClusterGridBuffer, int(((_2490 << 2u) + (_2476 << 6u)) >> 2u));
        uint _2496 = _2495.x;
        uint _2497 = _2464.z;
        float _2597;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        if (((((1u << ((_2497 >> 4u) & 15u)) + 4294967295u) & _2496) == 0u) || ((_2497 & 240u) == 0u))
        {
            _2597 = 0.0;
            _2599 = 0.0;
            _2601 = 0.0;
            _2603 = 0.0;
            _2605 = 0.0;
            _2607 = 0.0;
        }
        else
        {
            float _2598;
            float _2600;
            float _2602;
            float _2604;
            float _2606;
            float _2608;
            float _2750 = 0.0;
            float _2751 = 0.0;
            float _2752 = 0.0;
            float _2753 = 0.0;
            float _2754 = 0.0;
            float _2755 = 0.0;
            uint _2756 = 0u;
            uint _2765;
            bool _2766;
            for (;;)
            {
                _2765 = texelFetch(g_lightClassification, int((((_2490 << 5u) + (_2476 << 9u)) + (_2756 << 2u)) >> 2u)).x;
                _2766 = _2765 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2766)
                {
                    frontier_phi_66_pred = _2750;
                    frontier_phi_66_pred_1 = _2755;
                    frontier_phi_66_pred_2 = _2754;
                    frontier_phi_66_pred_3 = _2753;
                    frontier_phi_66_pred_4 = _2752;
                    frontier_phi_66_pred_5 = _2751;
                }
                else
                {
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    uint _2901;
                    _2895 = _2750;
                    _2896 = _2751;
                    _2897 = _2752;
                    _2898 = _2753;
                    _2899 = _2754;
                    _2900 = _2755;
                    _2901 = _2765;
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    for (;;)
                    {
                        uint _2905 = uint(findLSB(_2901)) + (_2756 << 5u);
                        uint _2902 = (_2901 + 4294967295u) & _2901;
                        uint _2907 = _2905 * 48u;
                        vec4 _2921 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2907)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 3u)).x));
                        uint _2927 = (_2905 * 48u) + 4u;
                        vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2927)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 3u)).x));
                        uint _2946 = (_2905 * 48u) + 8u;
                        vec3 _2957 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2946)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 2u)).x));
                        float _2961 = _2921.x - _2450;
                        float _2962 = _2921.y - _2451;
                        float _2963 = _2921.z - _2452;
                        float _2964 = dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963));
                        float _2967 = inversesqrt(_2964);
                        float _2968 = _2967 * _2961;
                        float _2969 = _2967 * _2962;
                        float _2970 = _2967 * _2963;
                        float _2971 = dot(vec3(_700, _703, _706), vec3(_2968, _2969, _2970));
                        float _2976 = 1.0 - (_2964 * _2921.w);
                        float _4366 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2977 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                        float _2978 = sqrt(_2964) * _2940.w;
                        float _2981 = 1.39999997615814208984375 / (_2978 + 1.39999997615814208984375);
                        float _2982 = _2981 * _2981;
                        float _2985 = ((1.0 - _2982) * _2971) + _2982;
                        float _2988 = _2978 * _2978;
                        float _2992 = ((isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0))) * _2977) / ((_2988 * 0.699999988079071044921875) + 1.0);
                        float _2996 = (-0.0) - _2450;
                        float _2997 = (-0.0) - _2451;
                        float _2998 = (-0.0) - _2452;
                        float _3002 = inversesqrt(dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998)));
                        float _3003 = _3002 * _2996;
                        float _3004 = _3002 * _2997;
                        float _3005 = _3002 * _2998;
                        float _3013 = exp2(log2(1.0 / ((_2988 * 3.5) + 5.0)) * 0.25);
                        float _3014 = 1.0 - _760;
                        float _3021 = sqrt(1.0 - ((1.0 - (_3014 * _3014)) * (1.0 - (_3013 * _3013))));
                        float _3022 = _3021 * _3021;
                        float _3023 = _3022 * _3022;
                        float _3024 = _3003 + _2968;
                        float _3025 = _3004 + _2969;
                        float _3026 = _3005 + _2970;
                        float _3030 = inversesqrt(dot(vec3(_3024, _3025, _3026), vec3(_3024, _3025, _3026)));
                        float _3034 = dot(vec3(_700, _703, _706), vec3(_3003, _3004, _3005));
                        float _4382 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3037 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                        float _3038 = dot(vec3(_700, _703, _706), vec3(_3030 * _3024, _3030 * _3025, _3030 * _3026));
                        float _4393 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3041 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                        float _3045 = ((_3041 * _3041) * (_3023 + (-1.0))) + 1.0;
                        float _3046 = _2981 * _3022;
                        float _3047 = _3046 * _3046;
                        float _3050 = ((1.0 - _3047) * _2971) + _3047;
                        float _4404 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3051 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                        float _3052 = 1.0 - _3022;
                        float _3062 = (0.5 / (((_3051 * ((_3037 * _3052) + _3022)) + 9.9999999392252902907785028219223e-09) + (((_3051 * _3052) + _3022) * _3037))) * _3051;
                        float _4415 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3073 = (((_3023 * 3.1415927410125732421875) * (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0)))) / ((_3045 * _3045) * ((_2988 * 2.1991131305694580078125) + 3.141590118408203125))) * _2977;
                        _2825 = (_2992 * _2940.x) + _2898;
                        _2826 = (_2992 * _2940.y) + _2899;
                        _2827 = (_2992 * _2940.z) + _2900;
                        _2822 = (_3073 * _2957.x) + _2895;
                        _2823 = (_3073 * _2957.y) + _2896;
                        _2824 = (_3073 * _2957.z) + _2897;
                        if (_2902 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2895 = _2822;
                            _2896 = _2823;
                            _2897 = _2824;
                            _2898 = _2825;
                            _2899 = _2826;
                            _2900 = _2827;
                            _2901 = _2902;
                        }
                    }
                    frontier_phi_66_pred = _2822;
                    frontier_phi_66_pred_1 = _2827;
                    frontier_phi_66_pred_2 = _2826;
                    frontier_phi_66_pred_3 = _2825;
                    frontier_phi_66_pred_4 = _2824;
                    frontier_phi_66_pred_5 = _2823;
                }
                _2598 = frontier_phi_66_pred;
                _2608 = frontier_phi_66_pred_1;
                _2606 = frontier_phi_66_pred_2;
                _2604 = frontier_phi_66_pred_3;
                _2602 = frontier_phi_66_pred_4;
                _2600 = frontier_phi_66_pred_5;
                uint _2757 = _2756 + 1u;
                if (_2757 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2750 = _2598;
                    _2751 = _2600;
                    _2752 = _2602;
                    _2753 = _2604;
                    _2754 = _2606;
                    _2755 = _2608;
                    _2756 = _2757;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2597 = _2598;
            _2599 = _2600;
            _2601 = _2602;
            _2603 = _2604;
            _2605 = _2606;
            _2607 = _2608;
        }
        uvec4 _2611 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2612 = _2611.z;
        uint _2614 = (_2612 >> 8u) & 15u;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        if (((4294967295u << _2614) & _2496) == 0u)
        {
            _2718 = _2597;
            _2720 = _2599;
            _2722 = _2601;
            _2724 = _2603;
            _2726 = _2605;
            _2728 = _2607;
        }
        else
        {
            float _2743 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
            float _2744 = _2743 * _2450;
            float _2745 = _2743 * _2451;
            float _2746 = _2743 * _2452;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2614 < ((_2612 >> 12u) & 15u))
            {
                float _2719;
                float _2721;
                float _2723;
                float _2725;
                float _2727;
                float _2729;
                float _2878 = _2597;
                float _2879 = _2599;
                float _2880 = _2601;
                float _2881 = _2603;
                float _2882 = _2605;
                float _2883 = _2607;
                uint _2884 = _2614;
                uint _2893;
                bool _2894;
                for (;;)
                {
                    _2893 = texelFetch(g_lightClassification, int((((_2490 << 5u) + (_2476 << 9u)) + (_2884 << 2u)) >> 2u)).x;
                    _2894 = _2893 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2894)
                    {
                        frontier_phi_77_pred = _2883;
                        frontier_phi_77_pred_1 = _2882;
                        frontier_phi_77_pred_2 = _2881;
                        frontier_phi_77_pred_3 = _2880;
                        frontier_phi_77_pred_4 = _2879;
                        frontier_phi_77_pred_5 = _2878;
                    }
                    else
                    {
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3100 = _2878;
                        float _3101 = _2879;
                        float _3102 = _2880;
                        float _3103 = _2881;
                        float _3104 = _2882;
                        float _3105 = _2883;
                        uint _3106 = _2893;
                        uint _3107;
                        vec4 _3132;
                        float _3133;
                        vec4 _3148;
                        vec3 _3160;
                        vec4 _3175;
                        vec4 _3190;
                        float _3236;
                        bool _3237;
                        for (;;)
                        {
                            uint _3117 = ((_2884 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3106));
                            _3107 = (_3106 + 4294967295u) & _3106;
                            uint _3119 = _3117 * 40u;
                            _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            _3133 = _3132.w;
                            uint _3135 = (_3117 * 40u) + 4u;
                            _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            uint _3150 = (_3117 * 40u) + 8u;
                            _3160 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x));
                            uint _3162 = (_3117 * 40u) + 16u;
                            _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            uint _3177 = (_3117 * 40u) + 20u;
                            _3190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 3u)).x));
                            uint _3192 = (_3117 * 40u) + 24u;
                            vec4 _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            uint _3211 = (_3117 * 40u) + 28u;
                            vec4 _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            _3236 = fma(_2452, _3224.z, fma(_2451, _3224.y, _3224.x * _2450)) + _3224.w;
                            _3237 = !((fma(_2452, _3205.z, fma(_2451, _3205.y, _3205.x * _2450)) + _3205.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3237)
                            {
                                float _3264 = _3132.x - _2450;
                                float _3265 = _3132.y - _2451;
                                float _3266 = _3132.z - _2452;
                                float _3267 = dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266));
                                float _3270 = inversesqrt(_3267);
                                float _3271 = _3270 * _3264;
                                float _3272 = _3270 * _3265;
                                float _3273 = _3270 * _3266;
                                float _3277 = 1.0 - (_3267 / (_3133 * _3133));
                                float _4426 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3278 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                                float _3282 = sqrt(_3267) * _3148.w;
                                float _3284 = 1.39999997615814208984375 / (_3282 + 1.39999997615814208984375);
                                float _3285 = _3284 * _3284;
                                float _3288 = ((1.0 - _3285) * dot(vec3(_3271, _3272, _3273), vec3(_700, _703, _706))) + _3285;
                                float _3291 = _3282 * _3282;
                                float _3295 = (fma(_2452, _3175.z, fma(_2451, _3175.y, _3175.x * _2450)) + _3175.w) / _3236;
                                float _3296 = (fma(_2452, _3190.z, fma(_2451, _3190.y, _3190.x * _2450)) + _3190.w) / _3236;
                                float _3300 = 1.0 - dot(vec2(_3295, _3296), vec2(_3295, _3296));
                                float _4442 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3301 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                                float _3302 = _3301 * (((isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0))) * _3278) / ((_3291 * 0.699999988079071044921875) + 1.0));
                                float _3314 = exp2(log2(1.0 / ((_3291 * 3.5) + 5.0)) * 0.25);
                                float _3315 = 1.0 - _760;
                                float _3322 = sqrt(1.0 - ((1.0 - (_3315 * _3315)) * (1.0 - (_3314 * _3314))));
                                float _3323 = _3322 * _3322;
                                float _3324 = _3323 * _3323;
                                float _3325 = _3271 - _2744;
                                float _3326 = _3272 - _2745;
                                float _3327 = _3273 - _2746;
                                float _3331 = inversesqrt(dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327)));
                                float _3335 = dot(vec3(_700, _703, _706), vec3((-0.0) - _2744, (-0.0) - _2745, (-0.0) - _2746));
                                float _4453 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3338 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                                float _3339 = dot(vec3(_700, _703, _706), vec3(_3331 * _3325, _3331 * _3326, _3331 * _3327));
                                float _4464 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3342 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                                float _3346 = ((_3342 * _3342) * (_3324 + (-1.0))) + 1.0;
                                float _3347 = _3284 * _3323;
                                float _3348 = _3347 * _3347;
                                float _3354 = ((1.0 - _3348) * dot(vec3(_700, _703, _706), vec3(_3271, _3272, _3273))) + _3348;
                                float _4475 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3355 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                                float _3356 = 1.0 - _3323;
                                float _3366 = (0.5 / (((_3355 * ((_3338 * _3356) + _3323)) + 9.9999999392252902907785028219223e-09) + (((_3355 * _3356) + _3323) * _3338))) * _3355;
                                float _4486 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3376 = (_3301 * _3278) * (((_3324 * 3.1415927410125732421875) * (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) / ((_3346 * _3346) * ((_3291 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3302 * _3148.y;
                                frontier_phi_83_pred_1 = _3302 * _3148.x;
                                frontier_phi_83_pred_2 = _3376 * _3160.z;
                                frontier_phi_83_pred_3 = _3376 * _3160.y;
                                frontier_phi_83_pred_4 = _3376 * _3160.x;
                                frontier_phi_83_pred_5 = _3302 * _3148.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3384 = frontier_phi_83_pred;
                            _3383 = frontier_phi_83_pred_1;
                            _3382 = frontier_phi_83_pred_2;
                            _3381 = frontier_phi_83_pred_3;
                            _3380 = frontier_phi_83_pred_4;
                            _3385 = frontier_phi_83_pred_5;
                            _3090 = _3383 + _3103;
                            _3091 = _3384 + _3104;
                            _3092 = _3385 + _3105;
                            _3087 = _3380 + _3100;
                            _3088 = _3381 + _3101;
                            _3089 = _3382 + _3102;
                            if (_3107 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3107;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3092;
                        frontier_phi_77_pred_1 = _3091;
                        frontier_phi_77_pred_2 = _3090;
                        frontier_phi_77_pred_3 = _3089;
                        frontier_phi_77_pred_4 = _3088;
                        frontier_phi_77_pred_5 = _3087;
                    }
                    _2729 = frontier_phi_77_pred;
                    _2727 = frontier_phi_77_pred_1;
                    _2725 = frontier_phi_77_pred_2;
                    _2723 = frontier_phi_77_pred_3;
                    _2721 = frontier_phi_77_pred_4;
                    _2719 = frontier_phi_77_pred_5;
                    uint _2885 = _2884 + 1u;
                    if (_2885 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2878 = _2719;
                        _2879 = _2721;
                        _2880 = _2723;
                        _2881 = _2725;
                        _2882 = _2727;
                        _2883 = _2729;
                        _2884 = _2885;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2723;
                frontier_phi_58_59_ladder_1 = _2729;
                frontier_phi_58_59_ladder_2 = _2727;
                frontier_phi_58_59_ladder_3 = _2725;
                frontier_phi_58_59_ladder_4 = _2721;
                frontier_phi_58_59_ladder_5 = _2719;
            }
            else
            {
                frontier_phi_58_59_ladder = _2601;
                frontier_phi_58_59_ladder_1 = _2607;
                frontier_phi_58_59_ladder_2 = _2605;
                frontier_phi_58_59_ladder_3 = _2603;
                frontier_phi_58_59_ladder_4 = _2599;
                frontier_phi_58_59_ladder_5 = _2597;
            }
            _2718 = frontier_phi_58_59_ladder_5;
            _2720 = frontier_phi_58_59_ladder_4;
            _2722 = frontier_phi_58_59_ladder;
            _2724 = frontier_phi_58_59_ladder_3;
            _2726 = frontier_phi_58_59_ladder_2;
            _2728 = frontier_phi_58_59_ladder_1;
        }
        float _2733 = isnan(1.0) ? _744 : (isnan(_744) ? 1.0 : min(_744, 1.0));
        _2509 = (_2733 * _2724) + _1961;
        _2511 = (_2733 * _2726) + _1963;
        _2513 = (_2733 * _2728) + _1965;
        _2515 = ((_2718 * 0.039999999105930328369140625) * _2733) + _2294;
        _2517 = ((_2720 * 0.039999999105930328369140625) * _2733) + _2296;
        _2519 = ((_2722 * 0.039999999105930328369140625) * _2733) + _2298;
    }
    else
    {
        _2509 = _1961;
        _2511 = _1963;
        _2513 = _1965;
        _2515 = _2294;
        _2517 = _2296;
        _2519 = _2298;
    }
    float _4502 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _4513 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _4524 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _2536 = ((isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2509 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _744))) + ((_2515 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1580)) * cbPerFrame._m0[3u].x);
    float _2537 = ((isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2511 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _744))) + ((_2517 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1580)) * cbPerFrame._m0[3u].x);
    float _2538 = ((isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2513 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _744))) + ((_2519 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1580)) * cbPerFrame._m0[3u].x);
    uint _2539 = _258 + 6u;
    float _2547 = _679 / cbSceneParam._m0[86u].x;
    float _2548 = _680 / cbSceneParam._m0[86u].y;
    vec4 _2562 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2547, _2548, (log2((isnan(cbSceneParam._m0[77u].w) ? _600 : (isnan(_600) ? cbSceneParam._m0[77u].w : min(_600, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2564 = _2562.x;
    float _2565 = _2562.y;
    float _2566 = _2562.z;
    float _2567 = _2562.w;
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    if (_600 > cbSceneParam._m0[78u].w)
    {
        float _2622 = isnan(_600) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _600 : min(cbSceneParam._m0[80u].w, _600));
        float _2623 = _2622 / _600;
        float _2634 = _2623 * _651;
        float _2635 = _652 * _2623;
        float _2636 = (-0.0) - _2635;
        float _2638 = _2623 * _653;
        float _2640 = (cbSceneParam._m0[77u].w * _2636) / _2622;
        float _2641 = _2640 + cbSceneParam._m0[79u].w;
        float _2642 = cbSceneParam._m0[79u].w - _2635;
        float _2648 = sqrt(((_2634 * _2634) + (_2635 * _2635)) + (_2638 * _2638));
        float _2651 = (1.0 - (cbSceneParam._m0[77u].w / _2622)) * _2648;
        float _2656 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2658 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2835;
        if (abs((_2636 - _2640) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2835 = ((((_2641 > 0.0) ? exp2(_2656 * _2641) : (2.0 - exp2(_2658 * _2641))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2651;
        }
        else
        {
            float _2779 = 1.0 / cbSceneParam._m0[80u].x;
            float _2780 = isnan(_2642) ? _2641 : (isnan(_2641) ? _2642 : max(_2641, _2642));
            float _2781 = isnan(_2642) ? _2641 : (isnan(_2641) ? _2642 : min(_2641, _2642));
            float _2790 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : min(_2780, 0.0));
            float _2791 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : min(_2781, 0.0));
            _2835 = ((abs(_2648 / _2636) * cbSceneParam._m0[80u].y) * ((((_2790 - _2791) * 2.0) - ((exp2(_2656 * (isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0)))) - exp2(_2656 * (isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0))))) * _2779)) - ((exp2(_2658 * _2790) - exp2(_2658 * _2791)) * _2779))) + (_2651 * cbSceneParam._m0[80u].z);
        }
        vec4 _2837 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2547, _2548, 1.0), 0.0);
        float _2846 = exp2((_2835 * (-1.44269502162933349609375)) * (1.0 - _2837.w));
        float _2847 = log2(_2846);
        float _2863 = log2(_2567);
        _2660 = (exp2(_2863 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2847 * cbSceneParam._m0[78u].x)) * _2837.x) / cbSceneParam._m0[78u].x)) + _2564;
        _2662 = (exp2(_2863 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2847 * cbSceneParam._m0[78u].y)) * _2837.y) / cbSceneParam._m0[78u].y)) + _2565;
        _2664 = (exp2(_2863 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2847 * cbSceneParam._m0[78u].z)) * _2837.z) / cbSceneParam._m0[78u].z)) + _2566;
        _2666 = _2846 * _2567;
    }
    else
    {
        _2660 = _2564;
        _2662 = _2565;
        _2664 = _2566;
        _2666 = _2567;
    }
    bool _2873;
    vec4 _2676;
    vec4 _2698;
    float _2700;
    float _2704;
    float _2705;
    float _2706;
    float _2707;
    bool _2717;
    for (;;)
    {
        _2676 = cbMatDynParam._m0[0u];
        float _2678 = roundEven(_2676.y);
        bool _2679 = _2678 == 3.0;
        float _2680 = log2(_2666);
        float _2687 = exp2(_2680 * cbSceneParam._m0[78u].x) * _2536;
        float _2688 = exp2(_2680 * cbSceneParam._m0[78u].y) * _2537;
        float _2689 = exp2(_2680 * cbSceneParam._m0[78u].z) * _2538;
        float _2696 = _667 + (-0.5);
        _2698 = cbMtdParam._m0[1u];
        _2700 = _2698.y * _2696;
        float _2703 = (_2678 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2704 = _2703 * (_2679 ? _2687 : (_2687 + (cbSceneParam._m0[72u].w * _2660)));
        _2705 = _2703 * (_2679 ? _2688 : (_2688 + (cbSceneParam._m0[72u].w * _2662)));
        _2706 = _2703 * (_2679 ? _2689 : (_2689 + (cbSceneParam._m0[72u].w * _2664)));
        _2707 = _2696 * 0.999000012874603271484375;
        _2717 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2717)
        {
            if ((cbInstanceData._m0[_258 + 7u].x + _2707) < 0.5)
            {
                _2873 = true;
                break;
            }
        }
        uint _2814 = _719 + uint(_2676.w);
        if ((cbInstanceData._m0[_2814].w < 1.0) && ((cbInstanceData._m0[_2814].w + _2707) < 0.5))
        {
            _2873 = true;
            break;
        }
        if ((_2700 + 1.0) < _2698.x)
        {
            _2873 = true;
            break;
        }
        _2873 = false;
        break;
    }
    float _3078;
    if (_2873)
    {
        discard_state = true;
        _3078 = 0.0;
    }
    else
    {
        _3078 = cbInstanceData._m0[_2539].w;
    }
    SV_Target.x = _2704;
    SV_Target.y = _2705;
    SV_Target.z = _2706;
    SV_Target.w = _3078;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2539].w;
    discard_exit();
}


