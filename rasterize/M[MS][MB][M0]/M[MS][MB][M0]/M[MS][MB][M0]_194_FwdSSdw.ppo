#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1204;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _345 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _347 = _345.x;
    float _357 = dot(vec4(_347, _345.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _374 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_347 - _357) * cbMtdParam._m0[24u].x) + _357) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3531 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _375 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _382 = (_375 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _383 = (_375 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _384 = (_375 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _258) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _259) + cbTextureTilingScale._m0[3u].w));
    vec4 _421 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _423 = _421.x;
    float _433 = dot(vec4(_423, _421.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _447 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_423 - _433) * cbMtdParam._m0[24u].x) + _433) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3542 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _455 = (_448 * ((_401.x * cbMtdParam._m0[13u].x) - _382)) + _382;
    float _456 = (_448 * ((_401.y * cbMtdParam._m0[13u].y) - _383)) + _383;
    float _457 = (_448 * ((_401.z * cbMtdParam._m0[13u].z) - _384)) + _384;
    vec4 _476 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _496 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _513 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _515 = _513.x;
    float _516 = _513.y;
    float _517 = _513.z;
    float _524 = ((_496.x - _515) * _375) + _515;
    float _525 = ((_496.y - _516) * _375) + _516;
    float _526 = ((_496.z - _517) * _375) + _517;
    vec4 _538 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _258) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _259) + cbTextureTilingScale._m0[2u].w));
    float _551 = ((_538.z - _526) * _448) + _526;
    float _554 = ((((_538.x - _524) * _448) + _524) * 2.0) + (-1.0);
    float _556 = ((((_538.y - _525) * _448) + _525) * 2.0) + (-1.0);
    float _557 = dot(vec2(_554, _556), vec2(_554, _556));
    float _3553 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _562 = sqrt(1.0 - (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))));
    vec4 _575 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _593 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _595 = _593.x;
    float _596 = 1.0 - _595;
    float _609 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_595 - _596) * cbMtdParam._m0[24u].z) + _596) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3564 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _610 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    float _617 = (_610 * ((_476.x * cbMtdParam._m0[18u].x) - _455)) + _455;
    float _618 = (_610 * ((_476.y * cbMtdParam._m0[18u].y) - _456)) + _456;
    float _619 = (_610 * ((_476.z * cbMtdParam._m0[18u].z) - _457)) + _457;
    vec4 _632 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _639 = (_632.x * 2.0) + (-1.0);
    float _640 = (_632.y * 2.0) + (-1.0);
    float _641 = dot(vec2(_639, _640), vec2(_639, _640));
    float _3575 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _649 = (_610 * (_632.z - _551)) + _551;
    float _661 = (((_639 - _554) + (cbMtdParam._m0[21u].x * _554)) * _610) + _554;
    float _662 = (((_640 - _556) + (cbMtdParam._m0[21u].x * _556)) * _610) + _556;
    float _663 = (_610 * (sqrt(1.0 - (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) - _562)) + _562;
    float _668 = cbMtdParam._m0[22u].x + _575.w;
    float _671 = fma(_663, _225 * NORMAL.x, fma(_662, _232 * TANGENT.x, (_218 * _210) * _661));
    float _674 = fma(_663, _225 * NORMAL.y, fma(_662, _232 * TANGENT.y, (_218 * _211) * _661));
    float _677 = fma(_663, _225 * NORMAL.z, fma(_662, _232 * TANGENT.z, (_218 * _212) * _661));
    float _681 = inversesqrt(dot(vec3(_671, _674, _677), vec3(_671, _674, _677)));
    float _682 = _681 * _671;
    float _683 = _681 * _674;
    float _684 = _681 * _677;
    float _3586 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _685 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _3597 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _3608 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3619 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3630 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _703 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _755 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _745);
    float _756 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _745);
    float _757 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _745);
    float _761 = inversesqrt(dot(vec3(_755, _756, _757), vec3(_755, _756, _757)));
    float _762 = _755 * _761;
    float _763 = _756 * _761;
    float _764 = _757 * _761;
    float _770 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _771 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _789 = fma(_684, cbSceneParam._m0[5u].z, fma(_683, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _682));
    float _792 = fma(_684, cbSceneParam._m0[6u].z, fma(_683, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _682));
    float _795 = fma(_684, cbSceneParam._m0[7u].z, fma(_683, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _682));
    uint _809 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _815 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) * cbInstanceData._m0[_809].x;
    float _816 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) * cbInstanceData._m0[_809].y;
    float _817 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) * cbInstanceData._m0[_809].z;
    float _3641 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _818 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _3652 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _819 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _3663 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _820 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    vec4 _829 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _770, cbSceneParam._m0[86u].y * _771));
    float _833 = ((isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * TEXCOORD_5.w) * _829.x;
    float _834 = dot(vec3(_682, _683, _684), vec3(_762, _763, _764));
    float _837 = _834 * 2.0;
    float _841 = (_837 * _682) - _762;
    float _842 = (_837 * _683) - _763;
    float _843 = (_837 * _684) - _764;
    float _847 = abs(dot(vec3(_762, _763, _764), vec3(_682, _683, _684)));
    float _3674 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _849 = sqrt(_685);
    float _862 = exp2((_849 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_849 * 3.0));
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _902 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1203;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _928 = fma(_902, cbModelParam._m0[26u].z, fma(_898, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _894));
        float _932 = fma(_902, cbModelParam._m0[27u].z, fma(_898, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _894));
        float _936 = fma(_902, cbModelParam._m0[28u].z, fma(_898, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _894));
        float _961 = _894 + _682;
        float _962 = _898 + _683;
        float _963 = _902 + _684;
        float _973 = fma(_963, cbModelParam._m0[26u].z, fma(_962, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _961)) - _928;
        float _974 = fma(_963, cbModelParam._m0[27u].z, fma(_962, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _961)) - _932;
        float _975 = fma(_963, cbModelParam._m0[28u].z, fma(_962, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _961)) - _936;
        float _979 = inversesqrt(dot(vec3(_973, _974, _975), vec3(_973, _974, _975)));
        float _992 = ((_979 * _973) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_928 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _993 = ((_979 * _974) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_932 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _994 = ((_979 * _975) / cbModelParam._m0[34u].z) + ((((((_936 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        float _1031 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_997.x + (-0.5));
        float _1033 = _1031 * (_997.y + (-0.5));
        float _1034 = _1031 * (_997.z + (-0.5));
        float _1041 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1004.x + (-0.5));
        float _1043 = _1041 * (_1004.y + (-0.5));
        float _1044 = _1041 * (_1004.z + (-0.5));
        float _1051 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1011.x + (-0.5));
        float _1053 = _1051 * (_1011.y + (-0.5));
        float _1054 = _1051 * (_1011.z + (-0.5));
        float _1061 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1018.x + (-0.5));
        float _1063 = _1061 * (_1018.y + (-0.5));
        float _1064 = _1061 * (_1018.z + (-0.5));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = _1032 * 0.5;
        float _1069 = _1042 * 0.5;
        float _1070 = _1052 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1085 = (dot(vec3(_682, _683, _684), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1095 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3722 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1097 + 1.0))) + _1102) * _1065;
        float _1112 = _1033 * 0.5;
        float _1113 = _1043 * 0.5;
        float _1114 = _1053 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_682, _683, _684), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3755 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1139 + 1.0))) + _1144) * _1066;
        float _1154 = _1034 * 0.5;
        float _1155 = _1044 * 0.5;
        float _1156 = _1054 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_682, _683, _684), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3788 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1181 + 1.0))) + _1186) * _1067;
        _1203 = _1034;
        _1205 = _1033;
        _1206 = _1032;
        _1207 = _1044;
        _1208 = _1043;
        _1209 = _1042;
        _1210 = _1054;
        _1211 = _1053;
        _1212 = _1052;
        _1213 = _1067;
        _1214 = _1066;
        _1215 = _1065;
        _1216 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
        _1217 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1218 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
    }
    else
    {
        _1203 = _1204;
        _1205 = _1204;
        _1206 = _1204;
        _1207 = _1204;
        _1208 = _1204;
        _1209 = _1204;
        _1210 = _1204;
        _1211 = _1204;
        _1212 = _1204;
        _1213 = _1204;
        _1214 = _1204;
        _1215 = _1204;
        _1216 = 0.0;
        _1217 = 0.0;
        _1218 = 0.0;
    }
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1242 = fma(_902, cbModelParam._m0[30u].z, fma(_898, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _894));
        float _1246 = fma(_902, cbModelParam._m0[31u].z, fma(_898, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _894));
        float _1250 = fma(_902, cbModelParam._m0[32u].z, fma(_898, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _894));
        float _1273 = _894 + _682;
        float _1274 = _898 + _683;
        float _1275 = _902 + _684;
        float _1285 = fma(_1275, cbModelParam._m0[30u].z, fma(_1274, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1273)) - _1242;
        float _1286 = fma(_1275, cbModelParam._m0[31u].z, fma(_1274, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1273)) - _1246;
        float _1287 = fma(_1275, cbModelParam._m0[32u].z, fma(_1274, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1273)) - _1250;
        float _1291 = inversesqrt(dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287)));
        float _1304 = ((_1291 * _1285) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1242 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1305 = ((_1291 * _1286) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1246 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1306 = ((_1291 * _1287) / cbModelParam._m0[35u].z) + ((((((_1250 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        float _1341 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1308.x + (-0.5));
        float _1343 = _1341 * (_1308.y + (-0.5));
        float _1344 = _1341 * (_1308.z + (-0.5));
        float _1351 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1315.x + (-0.5));
        float _1353 = _1351 * (_1315.y + (-0.5));
        float _1354 = _1351 * (_1315.z + (-0.5));
        float _1361 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1322.x + (-0.5));
        float _1363 = _1361 * (_1322.y + (-0.5));
        float _1364 = _1361 * (_1322.z + (-0.5));
        float _1371 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1329.x + (-0.5));
        float _1373 = _1371 * (_1329.y + (-0.5));
        float _1374 = _1371 * (_1329.z + (-0.5));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1378 = _1342 * 0.5;
        float _1379 = _1352 * 0.5;
        float _1380 = _1362 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_682, _683, _684), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _3851 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1405 + 1.0))) + _1410) * _1375;
        float _1420 = _1343 * 0.5;
        float _1421 = _1353 * 0.5;
        float _1422 = _1363 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_682, _683, _684), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _3884 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1447 + 1.0))) + _1452) * _1376;
        float _1462 = _1344 * 0.5;
        float _1463 = _1354 * 0.5;
        float _1464 = _1364 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_682, _683, _684), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1377 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _3917 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1489 + 1.0))) + _1494) * _1377;
        _1511 = _1344;
        _1512 = _1343;
        _1513 = _1342;
        _1514 = _1354;
        _1515 = _1353;
        _1516 = _1352;
        _1517 = _1364;
        _1518 = _1363;
        _1519 = _1362;
        _1520 = _1377;
        _1521 = _1376;
        _1522 = _1375;
        _1523 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
        _1524 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1525 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
    }
    else
    {
        _1511 = _1204;
        _1512 = _1204;
        _1513 = _1204;
        _1514 = _1204;
        _1515 = _1204;
        _1516 = _1204;
        _1517 = _1204;
        _1518 = _1204;
        _1519 = _1204;
        _1520 = _1204;
        _1521 = _1204;
        _1522 = _1204;
        _1523 = 0.0;
        _1524 = 0.0;
        _1525 = 0.0;
    }
    float _1535 = (cbModelParam._m0[1u].x * (_1523 - _1216)) + _1216;
    float _1536 = (cbModelParam._m0[1u].x * (_1524 - _1217)) + _1217;
    float _1537 = (cbModelParam._m0[1u].x * (_1525 - _1218)) + _1218;
    float _1558 = fma(_1537, cbSceneParam._m0[89u].z, fma(_1536, cbSceneParam._m0[89u].y, _1535 * cbSceneParam._m0[89u].x));
    float _1561 = fma(_1537, cbSceneParam._m0[90u].z, fma(_1536, cbSceneParam._m0[90u].y, _1535 * cbSceneParam._m0[90u].x));
    float _1564 = fma(_1537, cbSceneParam._m0[91u].z, fma(_1536, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1535));
    float _1579 = _841 * 0.5;
    float _1580 = _842 * 0.5;
    float _1581 = _843 * 0.5;
    float _1582 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1513, _1516, _1519, _1522));
    float _1585 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1512, _1515, _1518, _1521));
    float _1588 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1511, _1514, _1517, _1520));
    float _1622;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1595 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1203, _1207, _1210, _1213));
        float _1599 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1205, _1208, _1211, _1214));
        float _1603 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1206, _1209, _1212, _1215));
        float _1610 = dot(vec4(cbModelParam._m0[39u]), vec4(_1579, _1580, _1581, 1.0));
        _1622 = dot(vec3(isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1610) ? 0.0 : (isnan(0.0) ? _1610 : max(0.0, _1610))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1622 = 1.0;
    }
    float _1633;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1624 = dot(vec4(cbModelParam._m0[40u]), vec4(_1579, _1580, _1581, 1.0));
        _1633 = dot(vec3(isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)), isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1624) ? 0.0 : (isnan(0.0) ? _1624 : max(0.0, _1624))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1633 = 1.0;
    }
    float _1637 = (_1633 * cbModelParam._m0[1u].x) + (_1622 * (1.0 - cbModelParam._m0[1u].x));
    float _1647 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _685);
    float _1648 = isnan(_1647) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1647 : min(cbModelParam._m0[25u].z, _1647));
    float _1728;
    float _1730;
    float _1732;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1695 = fma(_902, cbModelParam._m0[13u].z, fma(_898, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _894)) + cbModelParam._m0[13u].w;
        float _1699 = fma(_902, cbModelParam._m0[14u].z, fma(_898, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _894)) + cbModelParam._m0[14u].w;
        float _1703 = fma(_902, cbModelParam._m0[15u].z, fma(_898, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _894)) + cbModelParam._m0[15u].w;
        float _1706 = fma(_843, cbModelParam._m0[13u].z, fma(_842, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _841));
        float _1709 = fma(_843, cbModelParam._m0[14u].z, fma(_842, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _841));
        float _1712 = fma(_843, cbModelParam._m0[15u].z, fma(_842, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _841));
        float _1740;
        if (_1706 > 0.0)
        {
            _1740 = abs((1.0 - _1695) / _1706);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1695 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1740 = frontier_phi_14_12_ladder;
        }
        float _1961;
        if (_1709 > 0.0)
        {
            _1961 = abs((1.0 - _1699) / _1709);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1699 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1961 = frontier_phi_23_19_ladder;
        }
        float _2207;
        if (_1712 > 0.0)
        {
            _2207 = abs((1.0 - _1703) / _1712);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1703 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2207 = frontier_phi_35_30_ladder;
        }
        float _2209 = isnan(_1961) ? _1740 : (isnan(_1740) ? _1961 : min(_1740, _1961));
        float _2210 = isnan(_2207) ? _2209 : (isnan(_2209) ? _2207 : min(_2209, _2207));
        float _2214 = (_2210 * _1706) + _1695;
        float _2215 = (_2210 * _1709) + _1699;
        float _2216 = (_2210 * _1712) + _1703;
        float _2217 = _2210 * 9.9999997473787516355514526367188e-05;
        float _2219 = (-1.0) - _2217;
        float _2221 = _2217 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2216 > _2221) || ((_2216 < _2219) || ((_2215 > _2221) || ((_2215 < _2219) || ((_2214 < _2219) || (_2214 > _2221))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2340 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2216, cbModelParam._m0[9u].z, fma(_2215, cbModelParam._m0[9u].y, _2214 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2216, cbModelParam._m0[10u].z, fma(_2215, cbModelParam._m0[10u].y, _2214 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2216, cbModelParam._m0[11u].z, fma(_2215, cbModelParam._m0[11u].y, _2214 * cbModelParam._m0[11u].x))), _1648);
            frontier_phi_13_35_ladder = _2340.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2340.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2340.x * cbModelParam._m0[1u].y;
        }
        _1728 = frontier_phi_13_35_ladder_2;
        _1730 = frontier_phi_13_35_ladder_1;
        _1732 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1716 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_841, _842, _843), _1648);
        _1728 = _1716.x * cbModelParam._m0[1u].y;
        _1730 = _1716.y * cbModelParam._m0[1u].y;
        _1732 = _1716.z * cbModelParam._m0[1u].y;
    }
    float _1736 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _685);
    float _1737 = isnan(_1736) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1736 : min(cbModelParam._m0[25u].w, _1736));
    float _1826;
    float _1828;
    float _1830;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1790 = fma(_902, cbModelParam._m0[21u].z, fma(_898, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _894)) + cbModelParam._m0[21u].w;
        float _1794 = fma(_902, cbModelParam._m0[22u].z, fma(_898, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _894)) + cbModelParam._m0[22u].w;
        float _1798 = fma(_902, cbModelParam._m0[23u].z, fma(_898, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _894)) + cbModelParam._m0[23u].w;
        float _1801 = fma(_843, cbModelParam._m0[21u].z, fma(_842, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _841));
        float _1804 = fma(_843, cbModelParam._m0[22u].z, fma(_842, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _841));
        float _1807 = fma(_843, cbModelParam._m0[23u].z, fma(_842, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _841));
        float _1966;
        if (_1801 > 0.0)
        {
            _1966 = abs((1.0 - _1790) / _1801);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1790 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1966 = frontier_phi_25_21_ladder;
        }
        float _2234;
        if (_1804 > 0.0)
        {
            _2234 = abs((1.0 - _1794) / _1804);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1794 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2234 = frontier_phi_37_32_ladder;
        }
        float _2439;
        if (_1807 > 0.0)
        {
            _2439 = abs((1.0 - _1798) / _1807);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1798 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2439 = frontier_phi_46_43_ladder;
        }
        float _2441 = isnan(_2234) ? _1966 : (isnan(_1966) ? _2234 : min(_1966, _2234));
        float _2442 = isnan(_2439) ? _2441 : (isnan(_2441) ? _2439 : min(_2441, _2439));
        float _2446 = (_2442 * _1801) + _1790;
        float _2447 = (_2442 * _1804) + _1794;
        float _2448 = (_2442 * _1807) + _1798;
        float _2449 = _2442 * 9.9999997473787516355514526367188e-05;
        float _2450 = (-1.0) - _2449;
        float _2452 = _2449 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2448 > _2452) || ((_2448 < _2450) || ((_2447 > _2452) || ((_2447 < _2450) || ((_2446 < _2450) || (_2446 > _2452))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2647 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2448, cbModelParam._m0[17u].z, fma(_2447, cbModelParam._m0[17u].y, _2446 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2448, cbModelParam._m0[18u].z, fma(_2447, cbModelParam._m0[18u].y, _2446 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2448, cbModelParam._m0[19u].z, fma(_2447, cbModelParam._m0[19u].y, _2446 * cbModelParam._m0[19u].x))), _1737);
            frontier_phi_22_46_ladder = _2647.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2647.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2647.x * cbModelParam._m0[1u].z;
        }
        _1826 = frontier_phi_22_46_ladder_2;
        _1828 = frontier_phi_22_46_ladder_1;
        _1830 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1810 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_841, _842, _843), _1737);
        _1826 = _1810.x * cbModelParam._m0[1u].z;
        _1828 = _1810.y * cbModelParam._m0[1u].z;
        _1830 = _1810.z * cbModelParam._m0[1u].z;
    }
    float _1842 = ((((1.0 - _862) * ((_849 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_862 * _849)) * _833;
    float _1843 = _1842 * ((cbModelParam._m0[1u].w * (_1826 - _1728)) + _1728);
    float _1844 = _1842 * ((cbModelParam._m0[1u].w * (_1828 - _1730)) + _1730);
    float _1845 = _1842 * ((cbModelParam._m0[1u].w * (_1830 - _1732)) + _1732);
    float _1848 = fma(_1845, cbSceneParam._m0[89u].z, fma(_1844, cbSceneParam._m0[89u].y, _1843 * cbSceneParam._m0[89u].x));
    float _1851 = fma(_1845, cbSceneParam._m0[90u].z, fma(_1844, cbSceneParam._m0[90u].y, _1843 * cbSceneParam._m0[90u].x));
    float _1854 = fma(_1845, cbSceneParam._m0[91u].z, fma(_1844, cbSceneParam._m0[91u].y, _1843 * cbSceneParam._m0[91u].x));
    vec4 _1862 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_770, _771));
    float _1864 = _1862.w;
    float _1876 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1864);
    float _1877 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1864);
    float _1878 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1864);
    uvec4 _1882 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1884 = _1882.x * 14u;
    uint _1885 = _1884 + 13u;
    float _1892 = _833 + (-1.0);
    float _1897 = (cbLight._m0[_1885].x * _1892) + 1.0;
    float _1898 = (cbLight._m0[_1885].y * _1892) + 1.0;
    float _1899 = (cbLight._m0[_1885].z * _1892) + 1.0;
    float _1900 = (cbLight._m0[_1885].w * _1892) + 1.0;
    uint _1901 = _1884 + 5u;
    float _1907 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
    uint _1911 = _1884 + 4u;
    float _1920 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
    uint _1924 = _1884 | 1u;
    float _1935 = dot(vec3(cbLight._m0[_1884].xyz), vec3(_682, _683, _684));
    float _1938 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_682, _683, _684));
    float _4053 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _4064 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1943 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * 0.3183098733425140380859375;
    float _1945 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * 0.3183098733425140380859375;
    float _1952 = ((cbLight._m0[_1901].x * _1907) * _1945) + (((cbLight._m0[_1911].x * _1876) * _1920) * _1943);
    float _1953 = ((_1907 * cbLight._m0[_1901].y) * _1945) + (((cbLight._m0[_1911].y * _1877) * _1920) * _1943);
    float _1954 = ((_1907 * cbLight._m0[_1901].z) * _1945) + (((cbLight._m0[_1911].z * _1878) * _1920) * _1943);
    uvec4 _1958 = floatBitsToUint(cbLight._m0[_1884 + 12u]);
    bool _1960 = _1958.x == 0u;
    float _1971;
    float _1973;
    float _1975;
    if (_1960)
    {
        _1971 = _1952;
        _1973 = _1953;
        _1975 = _1954;
    }
    else
    {
        uint _1979 = _1884 + 6u;
        float _1995 = (dot(vec3(cbLight._m0[_1884 + 2u].xyz), vec3(_682, _683, _684)) * 0.5) + 0.5;
        float _1996 = _1995 * _1995;
        float _4075 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1997 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1998 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
        _1971 = (((cbLight._m0[_1979].x * 0.3183098733425140380859375) * _1997) * _1998) + _1952;
        _1973 = (((cbLight._m0[_1979].y * 0.3183098733425140380859375) * _1997) * _1998) + _1953;
        _1975 = (((cbLight._m0[_1979].z * 0.3183098733425140380859375) * _1997) * _1998) + _1954;
    }
    bool _1978 = _1958.y == 0u;
    float _2016;
    float _2018;
    float _2020;
    if (_1978)
    {
        _2016 = _1971;
        _2018 = _1973;
        _2020 = _1975;
    }
    else
    {
        uint _2178 = _1884 + 7u;
        float _2194 = (dot(vec3(cbLight._m0[_1884 + 3u].xyz), vec3(_682, _683, _684)) * 0.5) + 0.5;
        float _2195 = _2194 * _2194;
        float _4091 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2196 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2197 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
        _2016 = (((cbLight._m0[_2178].x * 0.3183098733425140380859375) * _2196) * _2197) + _1971;
        _2018 = (((cbLight._m0[_2178].y * 0.3183098733425140380859375) * _2196) * _2197) + _1973;
        _2020 = (((cbLight._m0[_2178].z * 0.3183098733425140380859375) * _2196) * _2197) + _1975;
    }
    uint _2023 = _1884 + 8u;
    float _2036 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1884].w)) * _685) * 0.949999988079071044921875);
    float _2037 = _2036 * _2036;
    float _2038 = cbLight._m0[_1884].x + _762;
    float _2039 = cbLight._m0[_1884].y + _763;
    float _2040 = cbLight._m0[_1884].z + _764;
    float _2044 = inversesqrt(dot(vec3(_2038, _2039, _2040), vec3(_2038, _2039, _2040)));
    float _2045 = _2044 * _2038;
    float _2046 = _2044 * _2039;
    float _2047 = _2044 * _2040;
    float _2048 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_1884].xyz));
    float _4107 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2051 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _2052 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _2053 = dot(vec3(_682, _683, _684), vec3(_2045, _2046, _2047));
    float _4129 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2056 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _2057 = dot(vec3(cbLight._m0[_1884].xyz), vec3(_2045, _2046, _2047));
    float _4140 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2061 = _2037 * _2037;
    float _2065 = ((_2056 * _2056) * (_2061 + (-1.0))) + 1.0;
    float _2076 = (exp2(log2(1.0 - (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2077 = 1.0 - _2037;
    float _2088 = (0.5 / (((_2052 * ((_2051 * _2077) + _2037)) + 9.9999999392252902907785028219223e-09) + (((_2052 * _2077) + _2037) * _2051))) * _2051;
    float _4151 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2090 = (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_2061 / ((_2065 * _2065) * 3.141590118408203125));
    uint _2104 = _1884 + 9u;
    float _2115 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1924].w)) * _685) * 0.949999988079071044921875);
    float _2116 = _2115 * _2115;
    float _2117 = cbLight._m0[_1924].x + _762;
    float _2118 = cbLight._m0[_1924].y + _763;
    float _2119 = cbLight._m0[_1924].z + _764;
    float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
    float _2124 = _2123 * _2117;
    float _2125 = _2123 * _2118;
    float _2126 = _2123 * _2119;
    float _2127 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_1924].xyz));
    float _4162 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _2131 = dot(vec3(_682, _683, _684), vec3(_2124, _2125, _2126));
    float _4173 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _2135 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_2124, _2125, _2126));
    float _4184 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2139 = _2116 * _2116;
    float _2143 = ((_2134 * _2134) * (_2139 + (-1.0))) + 1.0;
    float _2152 = (exp2(log2(1.0 - (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2153 = 1.0 - _2116;
    float _2163 = (0.5 / (((_2052 * ((_2130 * _2153) + _2116)) + 9.9999999392252902907785028219223e-09) + (((_2052 * _2153) + _2116) * _2130))) * _2130;
    float _4195 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2165 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2139 / ((_2143 * _2143) * 3.141590118408203125));
    float _2175 = (((_2152 * cbLight._m0[_2104].x) * _2165) * _1907) + ((((cbLight._m0[_2023].x * _1876) * _2076) * _2090) * _1920);
    float _2176 = (((_2152 * cbLight._m0[_2104].y) * _2165) * _1907) + ((((cbLight._m0[_2023].y * _1877) * _2076) * _2090) * _1920);
    float _2177 = (((_2152 * cbLight._m0[_2104].z) * _2165) * _1907) + ((((cbLight._m0[_2023].z * _1878) * _2076) * _2090) * _1920);
    float _2239;
    float _2241;
    float _2243;
    if (_1960)
    {
        _2239 = _2175;
        _2241 = _2176;
        _2243 = _2177;
    }
    else
    {
        uint _2245 = _1884 + 2u;
        uint _2249 = _1884 + 10u;
        float _2263 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _685) * 0.949999988079071044921875);
        float _2264 = _2263 * _2263;
        float _2265 = cbLight._m0[_2245].x + _762;
        float _2266 = cbLight._m0[_2245].y + _763;
        float _2267 = cbLight._m0[_2245].z + _764;
        float _2271 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
        float _2272 = _2271 * _2265;
        float _2273 = _2271 * _2266;
        float _2274 = _2271 * _2267;
        float _2275 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_2245].xyz));
        float _4206 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2278 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _2279 = dot(vec3(_682, _683, _684), vec3(_2272, _2273, _2274));
        float _4217 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2282 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2283 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2272, _2273, _2274));
        float _4228 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2287 = _2264 * _2264;
        float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
        float _2300 = (exp2(log2(1.0 - (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2301 = 1.0 - _2264;
        float _2311 = (0.5 / (((_2052 * ((_2278 * _2301) + _2264)) + 9.9999999392252902907785028219223e-09) + (((_2052 * _2301) + _2264) * _2278))) * _2278;
        float _4239 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2313 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
        float _2314 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
        _2239 = (((_2300 * cbLight._m0[_2249].x) * _2313) * _2314) + _2175;
        _2241 = (((_2300 * cbLight._m0[_2249].y) * _2313) * _2314) + _2176;
        _2243 = (((_2300 * cbLight._m0[_2249].z) * _2313) * _2314) + _2177;
    }
    float _2349;
    float _2351;
    float _2353;
    if (_1978)
    {
        _2349 = _2239;
        _2351 = _2241;
        _2353 = _2243;
    }
    else
    {
        uint _2360 = _1884 + 3u;
        uint _2364 = _1884 + 11u;
        float _2378 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2360].w)) * _685) * 0.949999988079071044921875);
        float _2379 = _2378 * _2378;
        float _2380 = cbLight._m0[_2360].x + _762;
        float _2381 = cbLight._m0[_2360].y + _763;
        float _2382 = cbLight._m0[_2360].z + _764;
        float _2386 = inversesqrt(dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382)));
        float _2387 = _2386 * _2380;
        float _2388 = _2386 * _2381;
        float _2389 = _2386 * _2382;
        float _2390 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_2360].xyz));
        float _4255 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2393 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2394 = dot(vec3(_682, _683, _684), vec3(_2387, _2388, _2389));
        float _4266 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2398 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_2387, _2388, _2389));
        float _4277 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2402 = _2379 * _2379;
        float _2406 = ((_2397 * _2397) * (_2402 + (-1.0))) + 1.0;
        float _2415 = (exp2(log2(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2416 = 1.0 - _2379;
        float _2426 = (0.5 / (((_2052 * ((_2393 * _2416) + _2379)) + 9.9999999392252902907785028219223e-09) + (((_2052 * _2416) + _2379) * _2393))) * _2393;
        float _4288 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2428 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2402 / ((_2406 * _2406) * 3.141590118408203125));
        float _2429 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
        _2349 = (((_2415 * cbLight._m0[_2364].x) * _2428) * _2429) + _2239;
        _2351 = (((_2415 * cbLight._m0[_2364].y) * _2428) * _2429) + _2241;
        _2353 = (((_2415 * cbLight._m0[_2364].z) * _2428) * _2429) + _2243;
    }
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    if (_1882.y == 0u)
    {
        float _2504 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2505 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2504;
        float _2506 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2504;
        float _2507 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2504;
        uvec4 _2519 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2520 = _2519.x;
        uint _2531 = uint((float(_2519.y) * floor(float(uint(cbSceneParam._m0[85u].y * _771) / _2520))) + floor(float(uint(cbSceneParam._m0[85u].x * _770) / _2520)));
        float _2541 = (log2(_2507 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2542 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        uint _2545 = uint(isnan(14.0) ? _2542 : (isnan(_2542) ? 14.0 : min(_2542, 14.0)));
        uvec4 _2550 = texelFetch(g_lightClusterGridBuffer, int(((_2545 << 2u) + (_2531 << 6u)) >> 2u));
        uint _2551 = _2550.x;
        uint _2552 = _2519.z;
        float _2652;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        if (((((1u << ((_2552 >> 4u) & 15u)) + 4294967295u) & _2551) == 0u) || ((_2552 & 240u) == 0u))
        {
            _2652 = 0.0;
            _2654 = 0.0;
            _2656 = 0.0;
            _2658 = 0.0;
            _2660 = 0.0;
            _2662 = 0.0;
        }
        else
        {
            float _2653;
            float _2655;
            float _2657;
            float _2659;
            float _2661;
            float _2663;
            float _2797 = 0.0;
            float _2798 = 0.0;
            float _2799 = 0.0;
            float _2800 = 0.0;
            float _2801 = 0.0;
            float _2802 = 0.0;
            uint _2803 = 0u;
            uint _2812;
            bool _2813;
            for (;;)
            {
                _2812 = texelFetch(g_lightClassification, int((((_2545 << 5u) + (_2531 << 9u)) + (_2803 << 2u)) >> 2u)).x;
                _2813 = _2812 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2813)
                {
                    frontier_phi_61_pred = _2797;
                    frontier_phi_61_pred_1 = _2802;
                    frontier_phi_61_pred_2 = _2801;
                    frontier_phi_61_pred_3 = _2800;
                    frontier_phi_61_pred_4 = _2799;
                    frontier_phi_61_pred_5 = _2798;
                }
                else
                {
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    uint _2927;
                    _2921 = _2797;
                    _2922 = _2798;
                    _2923 = _2799;
                    _2924 = _2800;
                    _2925 = _2801;
                    _2926 = _2802;
                    _2927 = _2812;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    for (;;)
                    {
                        uint _2931 = uint(findLSB(_2927)) + (_2803 << 5u);
                        uint _2928 = (_2927 + 4294967295u) & _2927;
                        uint _2933 = _2931 * 48u;
                        vec4 _2947 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2933)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 3u)).x));
                        uint _2953 = (_2931 * 48u) + 4u;
                        vec4 _2966 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2953)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 3u)).x));
                        uint _2972 = (_2931 * 48u) + 8u;
                        vec3 _2983 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2972)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 2u)).x));
                        float _2987 = _2947.x - _2505;
                        float _2988 = _2947.y - _2506;
                        float _2989 = _2947.z - _2507;
                        float _2990 = dot(vec3(_2987, _2988, _2989), vec3(_2987, _2988, _2989));
                        float _2993 = inversesqrt(_2990);
                        float _2994 = _2993 * _2987;
                        float _2995 = _2993 * _2988;
                        float _2996 = _2993 * _2989;
                        float _2997 = dot(vec3(_789, _792, _795), vec3(_2994, _2995, _2996));
                        float _3002 = 1.0 - (_2990 * _2947.w);
                        float _4314 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3003 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                        float _3004 = sqrt(_2990) * _2966.w;
                        float _3007 = 1.39999997615814208984375 / (_3004 + 1.39999997615814208984375);
                        float _3008 = _3007 * _3007;
                        float _3011 = ((1.0 - _3008) * _2997) + _3008;
                        float _3014 = _3004 * _3004;
                        float _3018 = ((isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0))) * _3003) / ((_3014 * 0.699999988079071044921875) + 1.0);
                        float _3022 = (-0.0) - _2505;
                        float _3023 = (-0.0) - _2506;
                        float _3024 = (-0.0) - _2507;
                        float _3028 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
                        float _3029 = _3028 * _3022;
                        float _3030 = _3028 * _3023;
                        float _3031 = _3028 * _3024;
                        float _3039 = exp2(log2(1.0 / ((_3014 * 3.5) + 5.0)) * 0.25);
                        float _3040 = 1.0 - _849;
                        float _3047 = sqrt(1.0 - ((1.0 - (_3040 * _3040)) * (1.0 - (_3039 * _3039))));
                        float _3048 = _3047 * _3047;
                        float _3049 = _3048 * _3048;
                        float _3050 = _3029 + _2994;
                        float _3051 = _3030 + _2995;
                        float _3052 = _3031 + _2996;
                        float _3056 = inversesqrt(dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052)));
                        float _3060 = dot(vec3(_789, _792, _795), vec3(_3029, _3030, _3031));
                        float _4330 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3063 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                        float _3064 = dot(vec3(_789, _792, _795), vec3(_3056 * _3050, _3056 * _3051, _3056 * _3052));
                        float _4341 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3067 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _3071 = ((_3067 * _3067) * (_3049 + (-1.0))) + 1.0;
                        float _3072 = _3007 * _3048;
                        float _3073 = _3072 * _3072;
                        float _3076 = ((1.0 - _3073) * _2997) + _3073;
                        float _4352 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3077 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                        float _3078 = 1.0 - _3048;
                        float _3088 = (0.5 / (((_3077 * ((_3063 * _3078) + _3048)) + 9.9999999392252902907785028219223e-09) + (((_3077 * _3078) + _3048) * _3063))) * _3077;
                        float _4363 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3099 = (((_3049 * 3.1415927410125732421875) * (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) / ((_3071 * _3071) * ((_3014 * 2.1991131305694580078125) + 3.141590118408203125))) * _3003;
                        _2856 = (_3018 * _2966.x) + _2924;
                        _2857 = (_3018 * _2966.y) + _2925;
                        _2858 = (_3018 * _2966.z) + _2926;
                        _2853 = (_3099 * _2983.x) + _2921;
                        _2854 = (_3099 * _2983.y) + _2922;
                        _2855 = (_3099 * _2983.z) + _2923;
                        if (_2928 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2921 = _2853;
                            _2922 = _2854;
                            _2923 = _2855;
                            _2924 = _2856;
                            _2925 = _2857;
                            _2926 = _2858;
                            _2927 = _2928;
                        }
                    }
                    frontier_phi_61_pred = _2853;
                    frontier_phi_61_pred_1 = _2858;
                    frontier_phi_61_pred_2 = _2857;
                    frontier_phi_61_pred_3 = _2856;
                    frontier_phi_61_pred_4 = _2855;
                    frontier_phi_61_pred_5 = _2854;
                }
                _2653 = frontier_phi_61_pred;
                _2663 = frontier_phi_61_pred_1;
                _2661 = frontier_phi_61_pred_2;
                _2659 = frontier_phi_61_pred_3;
                _2657 = frontier_phi_61_pred_4;
                _2655 = frontier_phi_61_pred_5;
                uint _2804 = _2803 + 1u;
                if (_2804 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2797 = _2653;
                    _2798 = _2655;
                    _2799 = _2657;
                    _2800 = _2659;
                    _2801 = _2661;
                    _2802 = _2663;
                    _2803 = _2804;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2652 = _2653;
            _2654 = _2655;
            _2656 = _2657;
            _2658 = _2659;
            _2660 = _2661;
            _2662 = _2663;
        }
        uvec4 _2666 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2667 = _2666.z;
        uint _2669 = (_2667 >> 8u) & 15u;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        if (((4294967295u << _2669) & _2551) == 0u)
        {
            _2765 = _2652;
            _2767 = _2654;
            _2769 = _2656;
            _2771 = _2658;
            _2773 = _2660;
            _2775 = _2662;
        }
        else
        {
            float _2790 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
            float _2791 = _2790 * _2505;
            float _2792 = _2790 * _2506;
            float _2793 = _2790 * _2507;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2669 < ((_2667 >> 12u) & 15u))
            {
                float _2766;
                float _2768;
                float _2770;
                float _2772;
                float _2774;
                float _2776;
                float _2904 = _2652;
                float _2905 = _2654;
                float _2906 = _2656;
                float _2907 = _2658;
                float _2908 = _2660;
                float _2909 = _2662;
                uint _2910 = _2669;
                uint _2919;
                bool _2920;
                for (;;)
                {
                    _2919 = texelFetch(g_lightClassification, int((((_2545 << 5u) + (_2531 << 9u)) + (_2910 << 2u)) >> 2u)).x;
                    _2920 = _2919 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2920)
                    {
                        frontier_phi_67_pred = _2907;
                        frontier_phi_67_pred_1 = _2908;
                        frontier_phi_67_pred_2 = _2909;
                        frontier_phi_67_pred_3 = _2906;
                        frontier_phi_67_pred_4 = _2905;
                        frontier_phi_67_pred_5 = _2904;
                    }
                    else
                    {
                        float _3104;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3117 = _2904;
                        float _3118 = _2905;
                        float _3119 = _2906;
                        float _3120 = _2907;
                        float _3121 = _2908;
                        float _3122 = _2909;
                        uint _3123 = _2919;
                        uint _3124;
                        vec4 _3149;
                        float _3150;
                        vec4 _3165;
                        vec3 _3177;
                        vec4 _3192;
                        vec4 _3207;
                        float _3253;
                        bool _3254;
                        for (;;)
                        {
                            uint _3134 = ((_2910 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3123));
                            _3124 = (_3123 + 4294967295u) & _3123;
                            uint _3136 = _3134 * 40u;
                            _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            _3150 = _3149.w;
                            uint _3152 = (_3134 * 40u) + 4u;
                            _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            uint _3167 = (_3134 * 40u) + 8u;
                            _3177 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x));
                            uint _3179 = (_3134 * 40u) + 16u;
                            _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            uint _3194 = (_3134 * 40u) + 20u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            uint _3209 = (_3134 * 40u) + 24u;
                            vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            uint _3228 = (_3134 * 40u) + 28u;
                            vec4 _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            _3253 = fma(_2507, _3241.z, fma(_2506, _3241.y, _3241.x * _2505)) + _3241.w;
                            _3254 = !((fma(_2507, _3222.z, fma(_2506, _3222.y, _3222.x * _2505)) + _3222.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3254)
                            {
                                float _3281 = _3149.x - _2505;
                                float _3282 = _3149.y - _2506;
                                float _3283 = _3149.z - _2507;
                                float _3284 = dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283));
                                float _3287 = inversesqrt(_3284);
                                float _3288 = _3287 * _3281;
                                float _3289 = _3287 * _3282;
                                float _3290 = _3287 * _3283;
                                float _3294 = 1.0 - (_3284 / (_3150 * _3150));
                                float _4374 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3295 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                                float _3299 = sqrt(_3284) * _3165.w;
                                float _3301 = 1.39999997615814208984375 / (_3299 + 1.39999997615814208984375);
                                float _3302 = _3301 * _3301;
                                float _3305 = ((1.0 - _3302) * dot(vec3(_3288, _3289, _3290), vec3(_789, _792, _795))) + _3302;
                                float _3308 = _3299 * _3299;
                                float _3312 = (fma(_2507, _3192.z, fma(_2506, _3192.y, _3192.x * _2505)) + _3192.w) / _3253;
                                float _3313 = (fma(_2507, _3207.z, fma(_2506, _3207.y, _3207.x * _2505)) + _3207.w) / _3253;
                                float _3317 = 1.0 - dot(vec2(_3312, _3313), vec2(_3312, _3313));
                                float _4390 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3318 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3319 = _3318 * (((isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0))) * _3295) / ((_3308 * 0.699999988079071044921875) + 1.0));
                                float _3331 = exp2(log2(1.0 / ((_3308 * 3.5) + 5.0)) * 0.25);
                                float _3332 = 1.0 - _849;
                                float _3339 = sqrt(1.0 - ((1.0 - (_3332 * _3332)) * (1.0 - (_3331 * _3331))));
                                float _3340 = _3339 * _3339;
                                float _3341 = _3340 * _3340;
                                float _3342 = _3288 - _2791;
                                float _3343 = _3289 - _2792;
                                float _3344 = _3290 - _2793;
                                float _3348 = inversesqrt(dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344)));
                                float _3352 = dot(vec3(_789, _792, _795), vec3((-0.0) - _2791, (-0.0) - _2792, (-0.0) - _2793));
                                float _4401 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3355 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3356 = dot(vec3(_789, _792, _795), vec3(_3348 * _3342, _3348 * _3343, _3348 * _3344));
                                float _4412 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                                float _3359 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3363 = ((_3359 * _3359) * (_3341 + (-1.0))) + 1.0;
                                float _3364 = _3301 * _3340;
                                float _3365 = _3364 * _3364;
                                float _3371 = ((1.0 - _3365) * dot(vec3(_789, _792, _795), vec3(_3288, _3289, _3290))) + _3365;
                                float _4423 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3372 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3373 = 1.0 - _3340;
                                float _3383 = (0.5 / (((_3372 * ((_3355 * _3373) + _3340)) + 9.9999999392252902907785028219223e-09) + (((_3372 * _3373) + _3340) * _3355))) * _3372;
                                float _4434 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3393 = (_3318 * _3295) * (((_3341 * 3.1415927410125732421875) * (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) / ((_3363 * _3363) * ((_3308 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3393 * _3177.x;
                                frontier_phi_73_pred_1 = _3393 * _3177.y;
                                frontier_phi_73_pred_2 = _3319 * _3165.z;
                                frontier_phi_73_pred_3 = _3319 * _3165.y;
                                frontier_phi_73_pred_4 = _3319 * _3165.x;
                                frontier_phi_73_pred_5 = _3393 * _3177.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3397 = frontier_phi_73_pred;
                            _3398 = frontier_phi_73_pred_1;
                            _3402 = frontier_phi_73_pred_2;
                            _3401 = frontier_phi_73_pred_3;
                            _3400 = frontier_phi_73_pred_4;
                            _3399 = frontier_phi_73_pred_5;
                            _3107 = _3400 + _3120;
                            _3108 = _3401 + _3121;
                            _3109 = _3402 + _3122;
                            _3104 = _3397 + _3117;
                            _3105 = _3398 + _3118;
                            _3106 = _3399 + _3119;
                            if (_3124 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3117 = _3104;
                                _3118 = _3105;
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3124;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3107;
                        frontier_phi_67_pred_1 = _3108;
                        frontier_phi_67_pred_2 = _3109;
                        frontier_phi_67_pred_3 = _3106;
                        frontier_phi_67_pred_4 = _3105;
                        frontier_phi_67_pred_5 = _3104;
                    }
                    _2772 = frontier_phi_67_pred;
                    _2774 = frontier_phi_67_pred_1;
                    _2776 = frontier_phi_67_pred_2;
                    _2770 = frontier_phi_67_pred_3;
                    _2768 = frontier_phi_67_pred_4;
                    _2766 = frontier_phi_67_pred_5;
                    uint _2911 = _2910 + 1u;
                    if (_2911 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2904 = _2766;
                        _2905 = _2768;
                        _2906 = _2770;
                        _2907 = _2772;
                        _2908 = _2774;
                        _2909 = _2776;
                        _2910 = _2911;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2774;
                frontier_phi_55_56_ladder_1 = _2776;
                frontier_phi_55_56_ladder_2 = _2772;
                frontier_phi_55_56_ladder_3 = _2770;
                frontier_phi_55_56_ladder_4 = _2768;
                frontier_phi_55_56_ladder_5 = _2766;
            }
            else
            {
                frontier_phi_55_56_ladder = _2660;
                frontier_phi_55_56_ladder_1 = _2662;
                frontier_phi_55_56_ladder_2 = _2658;
                frontier_phi_55_56_ladder_3 = _2656;
                frontier_phi_55_56_ladder_4 = _2654;
                frontier_phi_55_56_ladder_5 = _2652;
            }
            _2765 = frontier_phi_55_56_ladder_5;
            _2767 = frontier_phi_55_56_ladder_4;
            _2769 = frontier_phi_55_56_ladder_3;
            _2771 = frontier_phi_55_56_ladder_2;
            _2773 = frontier_phi_55_56_ladder;
            _2775 = frontier_phi_55_56_ladder_1;
        }
        float _2780 = isnan(1.0) ? _833 : (isnan(_833) ? 1.0 : min(_833, 1.0));
        _2564 = (_2780 * _2771) + _2016;
        _2566 = (_2780 * _2773) + _2018;
        _2568 = (_2780 * _2775) + _2020;
        _2570 = ((_2765 * 0.039999999105930328369140625) * _2780) + _2349;
        _2572 = ((_2767 * 0.039999999105930328369140625) * _2780) + _2351;
        _2574 = ((_2769 * 0.039999999105930328369140625) * _2780) + _2353;
    }
    else
    {
        _2564 = _2016;
        _2566 = _2018;
        _2568 = _2020;
        _2570 = _2349;
        _2572 = _2351;
        _2574 = _2353;
    }
    float _4450 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _4461 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _4472 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    uint _2594 = _238 + 6u;
    float _2602 = _770 / cbSceneParam._m0[86u].x;
    float _2603 = _771 / cbSceneParam._m0[86u].y;
    vec4 _2617 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2602, _2603, (log2((isnan(cbSceneParam._m0[77u].w) ? _703 : (isnan(_703) ? cbSceneParam._m0[77u].w : min(_703, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2619 = _2617.x;
    float _2620 = _2617.y;
    float _2621 = _2617.z;
    float _2622 = _2617.w;
    float _2715;
    float _2717;
    float _2719;
    float _2721;
    if (_703 > cbSceneParam._m0[78u].w)
    {
        float _2677 = isnan(_703) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _703 : min(cbSceneParam._m0[80u].w, _703));
        float _2678 = _2677 / _703;
        float _2689 = _2678 * _755;
        float _2690 = _756 * _2678;
        float _2691 = (-0.0) - _2690;
        float _2693 = _2678 * _757;
        float _2695 = (cbSceneParam._m0[77u].w * _2691) / _2677;
        float _2696 = _2695 + cbSceneParam._m0[79u].w;
        float _2697 = cbSceneParam._m0[79u].w - _2690;
        float _2703 = sqrt(((_2689 * _2689) + (_2690 * _2690)) + (_2693 * _2693));
        float _2706 = (1.0 - (cbSceneParam._m0[77u].w / _2677)) * _2703;
        float _2711 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2713 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2866;
        if (abs((_2691 - _2695) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2866 = ((((_2696 > 0.0) ? exp2(_2711 * _2696) : (2.0 - exp2(_2713 * _2696))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2706;
        }
        else
        {
            float _2826 = 1.0 / cbSceneParam._m0[80u].x;
            float _2827 = isnan(_2697) ? _2696 : (isnan(_2696) ? _2697 : max(_2696, _2697));
            float _2828 = isnan(_2697) ? _2696 : (isnan(_2696) ? _2697 : min(_2696, _2697));
            float _2837 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : min(_2827, 0.0));
            float _2838 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : min(_2828, 0.0));
            _2866 = ((abs(_2703 / _2691) * cbSceneParam._m0[80u].y) * ((((_2837 - _2838) * 2.0) - ((exp2(_2711 * (isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0)))) - exp2(_2711 * (isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0))))) * _2826)) - ((exp2(_2713 * _2837) - exp2(_2713 * _2838)) * _2826))) + (_2706 * cbSceneParam._m0[80u].z);
        }
        vec4 _2868 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2602, _2603, 1.0), 0.0);
        float _2877 = exp2((_2866 * (-1.44269502162933349609375)) * (1.0 - _2868.w));
        float _2878 = log2(_2877);
        float _2894 = log2(_2622);
        _2715 = (exp2(_2894 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].x)) * _2868.x) / cbSceneParam._m0[78u].x)) + _2619;
        _2717 = (exp2(_2894 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].y)) * _2868.y) / cbSceneParam._m0[78u].y)) + _2620;
        _2719 = (exp2(_2894 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].z)) * _2868.z) / cbSceneParam._m0[78u].z)) + _2621;
        _2721 = _2877 * _2622;
    }
    else
    {
        _2715 = _2619;
        _2717 = _2620;
        _2719 = _2621;
        _2721 = _2622;
    }
    float _2733 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2734 = _2733 == 3.0;
    float _2735 = log2(_2721);
    float _2742 = exp2(_2735 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2564 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _833))) + ((_2570 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1637)) * cbPerFrame._m0[3u].x));
    float _2743 = exp2(_2735 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2566 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _833))) + ((_2572 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1637)) * cbPerFrame._m0[3u].x));
    float _2744 = exp2(_2735 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2568 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _833))) + ((_2574 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1637)) * cbPerFrame._m0[3u].x));
    float _2753 = (_2733 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2753 * (_2734 ? _2742 : (_2742 + (cbSceneParam._m0[72u].w * _2715)));
    SV_Target.y = _2753 * (_2734 ? _2743 : (_2743 + (cbSceneParam._m0[72u].w * _2717)));
    SV_Target.z = _2753 * (_2734 ? _2744 : (_2744 + (cbSceneParam._m0[72u].w * _2719)));
    SV_Target.w = cbInstanceData._m0[_2594].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2594].w;
}


