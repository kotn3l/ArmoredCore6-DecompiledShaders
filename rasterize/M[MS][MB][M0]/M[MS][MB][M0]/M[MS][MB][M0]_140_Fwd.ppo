#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1132;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _269 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _275 = _269.x * cbMtdParam._m0[11u].x;
    float _276 = _269.y * cbMtdParam._m0[11u].y;
    float _277 = _269.z * cbMtdParam._m0[11u].z;
    vec4 _296 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _248) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _249) + cbTextureTilingScale._m0[5u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _336 = _334.x;
    float _346 = dot(vec4(_336, _334.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _363 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_336 - _346) * cbMtdParam._m0[24u].x) + _346) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3437 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _371 = (_364 * ((_296.x * cbMtdParam._m0[12u].x) - _275)) + _275;
    float _372 = (_364 * ((_296.y * cbMtdParam._m0[12u].y) - _276)) + _276;
    float _373 = (_364 * ((_296.z * cbMtdParam._m0[12u].z) - _277)) + _277;
    vec4 _392 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _248) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _249) + cbTextureTilingScale._m0[14u].w));
    vec4 _412 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _248) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _249) + cbTextureTilingScale._m0[4u].w));
    vec4 _429 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _431 = _429.x;
    float _432 = _429.y;
    float _433 = _429.z;
    float _442 = ((_412.z - _433) * _364) + _433;
    float _445 = ((((_412.x - _431) * _364) + _431) * 2.0) + (-1.0);
    float _447 = ((((_412.y - _432) * _364) + _432) * 2.0) + (-1.0);
    float _448 = dot(vec2(_445, _447), vec2(_445, _447));
    float _3448 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _453 = sqrt(1.0 - (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))));
    vec4 _469 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _481 = (((_469.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _445;
    float _482 = (((_469.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _447;
    float _485 = fma(_453, _216, fma(_482, _223, _481 * _209));
    float _488 = fma(_453, _217, fma(_482, _224, _481 * _210));
    float _491 = fma(_453, _218, fma(_482, _225, _481 * _211));
    float _495 = inversesqrt(dot(vec3(_485, _488, _491), vec3(_485, _488, _491)));
    vec4 _524 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _526 = _524.x;
    float _527 = 1.0 - _526;
    float _533 = (cbMtdParam._m0[19u].x + dot(vec4(_495 * _485, _495 * _488, _495 * _491, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_526 - _527) * cbMtdParam._m0[24u].z) + _527) * cbMtdParam._m0[21u].z);
    float _3459 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _534 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _541 = (_534 * ((_392.x * cbMtdParam._m0[18u].x) - _371)) + _371;
    float _542 = (_534 * ((_392.y * cbMtdParam._m0[18u].y) - _372)) + _372;
    float _543 = (_534 * ((_392.z * cbMtdParam._m0[18u].z) - _373)) + _373;
    float _547 = (cbMtdParam._m0[19u].w * (_469.z - _442)) + _442;
    vec4 _560 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _567 = (_560.x * 2.0) + (-1.0);
    float _568 = (_560.y * 2.0) + (-1.0);
    float _569 = dot(vec2(_567, _568), vec2(_567, _568));
    float _3470 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _577 = ((_560.z - _547) * _534) + _547;
    float _587 = ((sqrt(1.0 - (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0)))) - _453) * _534) + _453;
    float _590 = (((_567 - _481) * _534) + _481) + (cbMtdParam._m0[21u].x * _481);
    float _591 = (((_568 - _482) * _534) + _482) + (cbMtdParam._m0[21u].x * _482);
    float _596 = cbMtdParam._m0[22u].x + _469.w;
    float _599 = fma(_587, _216, fma(_591, _223, _590 * _209));
    float _602 = fma(_587, _217, fma(_591, _224, _590 * _210));
    float _605 = fma(_587, _218, fma(_591, _225, _590 * _211));
    float _609 = inversesqrt(dot(vec3(_599, _602, _605), vec3(_599, _602, _605)));
    float _610 = _609 * _599;
    float _611 = _609 * _602;
    float _612 = _609 * _605;
    float _3481 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _613 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _3492 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _3503 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _3514 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _3525 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _631 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _673 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _683 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _673);
    float _684 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _673);
    float _685 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _673);
    float _689 = inversesqrt(dot(vec3(_683, _684, _685), vec3(_683, _684, _685)));
    float _690 = _683 * _689;
    float _691 = _684 * _689;
    float _692 = _685 * _689;
    float _698 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _699 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _717 = fma(_612, cbSceneParam._m0[5u].z, fma(_611, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _610));
    float _720 = fma(_612, cbSceneParam._m0[6u].z, fma(_611, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _610));
    float _723 = fma(_612, cbSceneParam._m0[7u].z, fma(_611, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _610));
    uint _737 = (_228 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _743 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0)))) * cbInstanceData._m0[_737].x;
    float _744 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)))) * cbInstanceData._m0[_737].y;
    float _745 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0)))) * cbInstanceData._m0[_737].z;
    float _3536 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _746 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _3547 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _747 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _3558 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    vec4 _757 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _698, cbSceneParam._m0[86u].y * _699));
    float _761 = ((isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * TEXCOORD_5.w) * _757.x;
    float _762 = dot(vec3(_610, _611, _612), vec3(_690, _691, _692));
    float _765 = _762 * 2.0;
    float _769 = (_765 * _610) - _690;
    float _770 = (_765 * _611) - _691;
    float _771 = (_765 * _612) - _692;
    float _775 = abs(dot(vec3(_690, _691, _692), vec3(_610, _611, _612)));
    float _3569 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _777 = sqrt(_613);
    float _790 = exp2((_777 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_777 * 3.0));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1131;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _856 = fma(_830, cbModelParam._m0[26u].z, fma(_826, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _822));
        float _860 = fma(_830, cbModelParam._m0[27u].z, fma(_826, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _822));
        float _864 = fma(_830, cbModelParam._m0[28u].z, fma(_826, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _822));
        float _889 = _822 + _610;
        float _890 = _826 + _611;
        float _891 = _830 + _612;
        float _901 = fma(_891, cbModelParam._m0[26u].z, fma(_890, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _889)) - _856;
        float _902 = fma(_891, cbModelParam._m0[27u].z, fma(_890, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _889)) - _860;
        float _903 = fma(_891, cbModelParam._m0[28u].z, fma(_890, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _889)) - _864;
        float _907 = inversesqrt(dot(vec3(_901, _902, _903), vec3(_901, _902, _903)));
        float _920 = ((_907 * _901) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_856 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _921 = ((_907 * _902) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_860 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _922 = ((_907 * _903) / cbModelParam._m0[34u].z) + ((((((_864 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        float _959 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_925.x + (-0.5));
        float _961 = _959 * (_925.y + (-0.5));
        float _962 = _959 * (_925.z + (-0.5));
        float _969 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_932.x + (-0.5));
        float _971 = _969 * (_932.y + (-0.5));
        float _972 = _969 * (_932.z + (-0.5));
        float _979 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_939.x + (-0.5));
        float _981 = _979 * (_939.y + (-0.5));
        float _982 = _979 * (_939.z + (-0.5));
        float _989 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_946.x + (-0.5));
        float _991 = _989 * (_946.y + (-0.5));
        float _992 = _989 * (_946.z + (-0.5));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = _960 * 0.5;
        float _997 = _970 * 0.5;
        float _998 = _980 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1013 = (dot(vec3(_610, _611, _612), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3595 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1023 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3606 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3617 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_1025 + 1.0))) + _1030) * _993;
        float _1040 = _961 * 0.5;
        float _1041 = _971 * 0.5;
        float _1042 = _981 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_610, _611, _612), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3650 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_1067 + 1.0))) + _1072) * _994;
        float _1082 = _962 * 0.5;
        float _1083 = _972 * 0.5;
        float _1084 = _982 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_610, _611, _612), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3683 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_1109 + 1.0))) + _1114) * _995;
        _1131 = _962;
        _1133 = _961;
        _1134 = _960;
        _1135 = _972;
        _1136 = _971;
        _1137 = _970;
        _1138 = _982;
        _1139 = _981;
        _1140 = _980;
        _1141 = _995;
        _1142 = _994;
        _1143 = _993;
        _1144 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
        _1145 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
        _1146 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
    }
    else
    {
        _1131 = _1132;
        _1133 = _1132;
        _1134 = _1132;
        _1135 = _1132;
        _1136 = _1132;
        _1137 = _1132;
        _1138 = _1132;
        _1139 = _1132;
        _1140 = _1132;
        _1141 = _1132;
        _1142 = _1132;
        _1143 = _1132;
        _1144 = 0.0;
        _1145 = 0.0;
        _1146 = 0.0;
    }
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1171 = fma(_830, cbModelParam._m0[30u].z, fma(_826, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _822));
        float _1175 = fma(_830, cbModelParam._m0[31u].z, fma(_826, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _822));
        float _1179 = fma(_830, cbModelParam._m0[32u].z, fma(_826, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _822));
        float _1202 = _822 + _610;
        float _1203 = _826 + _611;
        float _1204 = _830 + _612;
        float _1214 = fma(_1204, cbModelParam._m0[30u].z, fma(_1203, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1202)) - _1171;
        float _1215 = fma(_1204, cbModelParam._m0[31u].z, fma(_1203, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1202)) - _1175;
        float _1216 = fma(_1204, cbModelParam._m0[32u].z, fma(_1203, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1202)) - _1179;
        float _1220 = inversesqrt(dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216)));
        float _1233 = ((_1220 * _1214) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1171 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1234 = ((_1220 * _1215) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1175 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1235 = ((_1220 * _1216) / cbModelParam._m0[35u].z) + ((((((_1179 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        float _1270 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1237.x + (-0.5));
        float _1272 = _1270 * (_1237.y + (-0.5));
        float _1273 = _1270 * (_1237.z + (-0.5));
        float _1280 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1244.x + (-0.5));
        float _1282 = _1280 * (_1244.y + (-0.5));
        float _1283 = _1280 * (_1244.z + (-0.5));
        float _1290 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1251.x + (-0.5));
        float _1292 = _1290 * (_1251.y + (-0.5));
        float _1293 = _1290 * (_1251.z + (-0.5));
        float _1300 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1258.x + (-0.5));
        float _1302 = _1300 * (_1258.y + (-0.5));
        float _1303 = _1300 * (_1258.z + (-0.5));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = _1271 * 0.5;
        float _1308 = _1281 * 0.5;
        float _1309 = _1291 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_610, _611, _612), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _3746 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1334 + 1.0))) + _1339) * _1304;
        float _1349 = _1272 * 0.5;
        float _1350 = _1282 * 0.5;
        float _1351 = _1292 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_610, _611, _612), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _3779 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1376 + 1.0))) + _1381) * _1305;
        float _1391 = _1273 * 0.5;
        float _1392 = _1283 * 0.5;
        float _1393 = _1293 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_610, _611, _612), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _3812 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1418 + 1.0))) + _1423) * _1306;
        _1440 = _1273;
        _1441 = _1272;
        _1442 = _1271;
        _1443 = _1283;
        _1444 = _1282;
        _1445 = _1281;
        _1446 = _1293;
        _1447 = _1292;
        _1448 = _1291;
        _1449 = _1306;
        _1450 = _1305;
        _1451 = _1304;
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
        _1453 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1454 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
    }
    else
    {
        _1440 = _1132;
        _1441 = _1132;
        _1442 = _1132;
        _1443 = _1132;
        _1444 = _1132;
        _1445 = _1132;
        _1446 = _1132;
        _1447 = _1132;
        _1448 = _1132;
        _1449 = _1132;
        _1450 = _1132;
        _1451 = _1132;
        _1452 = 0.0;
        _1453 = 0.0;
        _1454 = 0.0;
    }
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1144)) + _1144;
    float _1465 = (cbModelParam._m0[1u].x * (_1453 - _1145)) + _1145;
    float _1466 = (cbModelParam._m0[1u].x * (_1454 - _1146)) + _1146;
    float _1487 = fma(_1466, cbSceneParam._m0[89u].z, fma(_1465, cbSceneParam._m0[89u].y, _1464 * cbSceneParam._m0[89u].x));
    float _1490 = fma(_1466, cbSceneParam._m0[90u].z, fma(_1465, cbSceneParam._m0[90u].y, _1464 * cbSceneParam._m0[90u].x));
    float _1493 = fma(_1466, cbSceneParam._m0[91u].z, fma(_1465, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1464));
    float _1508 = _769 * 0.5;
    float _1509 = _770 * 0.5;
    float _1510 = _771 * 0.5;
    float _1511 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1442, _1445, _1448, _1451));
    float _1514 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1441, _1444, _1447, _1450));
    float _1517 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1551;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1524 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1131, _1135, _1138, _1141));
        float _1528 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1133, _1136, _1139, _1142));
        float _1532 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1134, _1137, _1140, _1143));
        float _1539 = dot(vec4(cbModelParam._m0[39u]), vec4(_1508, _1509, _1510, 1.0));
        _1551 = dot(vec3(isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1539) ? 0.0 : (isnan(0.0) ? _1539 : max(0.0, _1539))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1551 = 1.0;
    }
    float _1562;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1553 = dot(vec4(cbModelParam._m0[40u]), vec4(_1508, _1509, _1510, 1.0));
        _1562 = dot(vec3(isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1553) ? 0.0 : (isnan(0.0) ? _1553 : max(0.0, _1553))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1562 = 1.0;
    }
    float _1566 = (_1562 * cbModelParam._m0[1u].x) + (_1551 * (1.0 - cbModelParam._m0[1u].x));
    float _1576 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _613);
    float _1577 = isnan(_1576) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1576 : min(cbModelParam._m0[25u].z, _1576));
    float _1657;
    float _1659;
    float _1661;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1624 = fma(_830, cbModelParam._m0[13u].z, fma(_826, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _822)) + cbModelParam._m0[13u].w;
        float _1628 = fma(_830, cbModelParam._m0[14u].z, fma(_826, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _822)) + cbModelParam._m0[14u].w;
        float _1632 = fma(_830, cbModelParam._m0[15u].z, fma(_826, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _822)) + cbModelParam._m0[15u].w;
        float _1635 = fma(_771, cbModelParam._m0[13u].z, fma(_770, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _769));
        float _1638 = fma(_771, cbModelParam._m0[14u].z, fma(_770, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _769));
        float _1641 = fma(_771, cbModelParam._m0[15u].z, fma(_770, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _769));
        float _1669;
        if (_1635 > 0.0)
        {
            _1669 = abs((1.0 - _1624) / _1635);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1624 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1669 = frontier_phi_14_12_ladder;
        }
        float _1869;
        if (_1638 > 0.0)
        {
            _1869 = abs((1.0 - _1628) / _1638);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1628 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1869 = frontier_phi_23_19_ladder;
        }
        float _2112;
        if (_1641 > 0.0)
        {
            _2112 = abs((1.0 - _1632) / _1641);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1632 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2112 = frontier_phi_35_30_ladder;
        }
        float _2114 = isnan(_1869) ? _1669 : (isnan(_1669) ? _1869 : min(_1669, _1869));
        float _2115 = isnan(_2112) ? _2114 : (isnan(_2114) ? _2112 : min(_2114, _2112));
        float _2119 = (_2115 * _1635) + _1624;
        float _2120 = (_2115 * _1638) + _1628;
        float _2121 = (_2115 * _1641) + _1632;
        float _2122 = _2115 * 9.9999997473787516355514526367188e-05;
        float _2124 = (-1.0) - _2122;
        float _2126 = _2122 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2121 > _2126) || ((_2121 < _2124) || ((_2120 > _2126) || ((_2120 < _2124) || ((_2119 < _2124) || (_2119 > _2126))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2245 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2121, cbModelParam._m0[9u].z, fma(_2120, cbModelParam._m0[9u].y, _2119 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2121, cbModelParam._m0[10u].z, fma(_2120, cbModelParam._m0[10u].y, _2119 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2121, cbModelParam._m0[11u].z, fma(_2120, cbModelParam._m0[11u].y, _2119 * cbModelParam._m0[11u].x))), _1577);
            frontier_phi_13_35_ladder = _2245.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2245.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2245.x * cbModelParam._m0[1u].y;
        }
        _1657 = frontier_phi_13_35_ladder_2;
        _1659 = frontier_phi_13_35_ladder_1;
        _1661 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1645 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_769, _770, _771), _1577);
        _1657 = _1645.x * cbModelParam._m0[1u].y;
        _1659 = _1645.y * cbModelParam._m0[1u].y;
        _1661 = _1645.z * cbModelParam._m0[1u].y;
    }
    float _1665 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _613);
    float _1666 = isnan(_1665) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1665 : min(cbModelParam._m0[25u].w, _1665));
    float _1755;
    float _1757;
    float _1759;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1719 = fma(_830, cbModelParam._m0[21u].z, fma(_826, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _822)) + cbModelParam._m0[21u].w;
        float _1723 = fma(_830, cbModelParam._m0[22u].z, fma(_826, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _822)) + cbModelParam._m0[22u].w;
        float _1727 = fma(_830, cbModelParam._m0[23u].z, fma(_826, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _822)) + cbModelParam._m0[23u].w;
        float _1730 = fma(_771, cbModelParam._m0[21u].z, fma(_770, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _769));
        float _1733 = fma(_771, cbModelParam._m0[22u].z, fma(_770, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _769));
        float _1736 = fma(_771, cbModelParam._m0[23u].z, fma(_770, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _769));
        float _1874;
        if (_1730 > 0.0)
        {
            _1874 = abs((1.0 - _1719) / _1730);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1719 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1874 = frontier_phi_25_21_ladder;
        }
        float _2139;
        if (_1733 > 0.0)
        {
            _2139 = abs((1.0 - _1723) / _1733);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1723 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2139 = frontier_phi_37_32_ladder;
        }
        float _2344;
        if (_1736 > 0.0)
        {
            _2344 = abs((1.0 - _1727) / _1736);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1727 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2344 = frontier_phi_46_43_ladder;
        }
        float _2346 = isnan(_2139) ? _1874 : (isnan(_1874) ? _2139 : min(_1874, _2139));
        float _2347 = isnan(_2344) ? _2346 : (isnan(_2346) ? _2344 : min(_2346, _2344));
        float _2351 = (_2347 * _1730) + _1719;
        float _2352 = (_2347 * _1733) + _1723;
        float _2353 = (_2347 * _1736) + _1727;
        float _2354 = _2347 * 9.9999997473787516355514526367188e-05;
        float _2355 = (-1.0) - _2354;
        float _2357 = _2354 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2353 > _2357) || ((_2353 < _2355) || ((_2352 > _2357) || ((_2352 < _2355) || ((_2351 < _2355) || (_2351 > _2357))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2552 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2353, cbModelParam._m0[17u].z, fma(_2352, cbModelParam._m0[17u].y, _2351 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2353, cbModelParam._m0[18u].z, fma(_2352, cbModelParam._m0[18u].y, _2351 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2353, cbModelParam._m0[19u].z, fma(_2352, cbModelParam._m0[19u].y, _2351 * cbModelParam._m0[19u].x))), _1666);
            frontier_phi_22_46_ladder = _2552.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2552.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2552.x * cbModelParam._m0[1u].z;
        }
        _1755 = frontier_phi_22_46_ladder_2;
        _1757 = frontier_phi_22_46_ladder_1;
        _1759 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1739 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_769, _770, _771), _1666);
        _1755 = _1739.x * cbModelParam._m0[1u].z;
        _1757 = _1739.y * cbModelParam._m0[1u].z;
        _1759 = _1739.z * cbModelParam._m0[1u].z;
    }
    float _1771 = ((((1.0 - _790) * ((_777 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_790 * _777)) * _761;
    float _1772 = _1771 * ((cbModelParam._m0[1u].w * (_1755 - _1657)) + _1657);
    float _1773 = _1771 * ((cbModelParam._m0[1u].w * (_1757 - _1659)) + _1659);
    float _1774 = _1771 * ((cbModelParam._m0[1u].w * (_1759 - _1661)) + _1661);
    float _1777 = fma(_1774, cbSceneParam._m0[89u].z, fma(_1773, cbSceneParam._m0[89u].y, _1772 * cbSceneParam._m0[89u].x));
    float _1780 = fma(_1774, cbSceneParam._m0[90u].z, fma(_1773, cbSceneParam._m0[90u].y, _1772 * cbSceneParam._m0[90u].x));
    float _1783 = fma(_1774, cbSceneParam._m0[91u].z, fma(_1773, cbSceneParam._m0[91u].y, _1772 * cbSceneParam._m0[91u].x));
    uvec4 _1793 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1795 = _1793.x * 14u;
    uint _1796 = _1795 + 13u;
    float _1803 = _761 + (-1.0);
    float _1808 = (cbLight._m0[_1796].x * _1803) + 1.0;
    float _1809 = (cbLight._m0[_1796].y * _1803) + 1.0;
    float _1810 = (cbLight._m0[_1796].z * _1803) + 1.0;
    float _1811 = (cbLight._m0[_1796].w * _1803) + 1.0;
    uint _1812 = _1795 + 5u;
    float _1818 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
    uint _1822 = _1795 + 4u;
    float _1828 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
    uint _1832 = _1795 | 1u;
    float _1843 = dot(vec3(cbLight._m0[_1795].xyz), vec3(_610, _611, _612));
    float _1846 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_610, _611, _612));
    float _3948 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _3959 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1851 = (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * 0.3183098733425140380859375;
    float _1853 = (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * 0.3183098733425140380859375;
    float _1860 = ((cbLight._m0[_1812].x * _1818) * _1853) + ((cbLight._m0[_1822].x * _1828) * _1851);
    float _1861 = ((_1818 * cbLight._m0[_1812].y) * _1853) + ((_1828 * cbLight._m0[_1822].y) * _1851);
    float _1862 = ((_1818 * cbLight._m0[_1812].z) * _1853) + ((_1828 * cbLight._m0[_1822].z) * _1851);
    uvec4 _1866 = floatBitsToUint(cbLight._m0[_1795 + 12u]);
    bool _1868 = _1866.x == 0u;
    float _1879;
    float _1881;
    float _1883;
    if (_1868)
    {
        _1879 = _1860;
        _1881 = _1861;
        _1883 = _1862;
    }
    else
    {
        uint _1887 = _1795 + 6u;
        float _1903 = (dot(vec3(cbLight._m0[_1795 + 2u].xyz), vec3(_610, _611, _612)) * 0.5) + 0.5;
        float _1904 = _1903 * _1903;
        float _3970 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1905 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1906 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
        _1879 = (((cbLight._m0[_1887].x * 0.3183098733425140380859375) * _1905) * _1906) + _1860;
        _1881 = (((cbLight._m0[_1887].y * 0.3183098733425140380859375) * _1905) * _1906) + _1861;
        _1883 = (((cbLight._m0[_1887].z * 0.3183098733425140380859375) * _1905) * _1906) + _1862;
    }
    bool _1886 = _1866.y == 0u;
    float _1924;
    float _1926;
    float _1928;
    if (_1886)
    {
        _1924 = _1879;
        _1926 = _1881;
        _1928 = _1883;
    }
    else
    {
        uint _2083 = _1795 + 7u;
        float _2099 = (dot(vec3(cbLight._m0[_1795 + 3u].xyz), vec3(_610, _611, _612)) * 0.5) + 0.5;
        float _2100 = _2099 * _2099;
        float _3986 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2101 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _2102 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _1924 = (((cbLight._m0[_2083].x * 0.3183098733425140380859375) * _2101) * _2102) + _1879;
        _1926 = (((cbLight._m0[_2083].y * 0.3183098733425140380859375) * _2101) * _2102) + _1881;
        _1928 = (((cbLight._m0[_2083].z * 0.3183098733425140380859375) * _2101) * _2102) + _1883;
    }
    uint _1931 = _1795 + 8u;
    float _1944 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1795].w)) * _613) * 0.949999988079071044921875);
    float _1945 = _1944 * _1944;
    float _1946 = cbLight._m0[_1795].x + _690;
    float _1947 = cbLight._m0[_1795].y + _691;
    float _1948 = cbLight._m0[_1795].z + _692;
    float _1952 = inversesqrt(dot(vec3(_1946, _1947, _1948), vec3(_1946, _1947, _1948)));
    float _1953 = _1952 * _1946;
    float _1954 = _1952 * _1947;
    float _1955 = _1952 * _1948;
    float _1956 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_1795].xyz));
    float _4002 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1959 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _4013 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _1960 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _1961 = dot(vec3(_610, _611, _612), vec3(_1953, _1954, _1955));
    float _4024 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1964 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _1965 = dot(vec3(cbLight._m0[_1795].xyz), vec3(_1953, _1954, _1955));
    float _4035 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1969 = _1945 * _1945;
    float _1973 = ((_1964 * _1964) * (_1969 + (-1.0))) + 1.0;
    float _1984 = (exp2(log2(1.0 - (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1985 = 1.0 - _1945;
    float _1996 = (0.5 / (((_1960 * ((_1959 * _1985) + _1945)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _1985) + _1945) * _1959))) * _1959;
    float _4046 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1998 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1969 / ((_1973 * _1973) * 3.141590118408203125));
    uint _2009 = _1795 + 9u;
    float _2020 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1832].w)) * _613) * 0.949999988079071044921875);
    float _2021 = _2020 * _2020;
    float _2022 = cbLight._m0[_1832].x + _690;
    float _2023 = cbLight._m0[_1832].y + _691;
    float _2024 = cbLight._m0[_1832].z + _692;
    float _2028 = inversesqrt(dot(vec3(_2022, _2023, _2024), vec3(_2022, _2023, _2024)));
    float _2029 = _2028 * _2022;
    float _2030 = _2028 * _2023;
    float _2031 = _2028 * _2024;
    float _2032 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_1832].xyz));
    float _4057 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2035 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _2036 = dot(vec3(_610, _611, _612), vec3(_2029, _2030, _2031));
    float _4068 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2039 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _2040 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_2029, _2030, _2031));
    float _4079 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2044 = _2021 * _2021;
    float _2048 = ((_2039 * _2039) * (_2044 + (-1.0))) + 1.0;
    float _2057 = (exp2(log2(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2058 = 1.0 - _2021;
    float _2068 = (0.5 / (((_1960 * ((_2035 * _2058) + _2021)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _2058) + _2021) * _2035))) * _2035;
    float _4090 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2070 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_2044 / ((_2048 * _2048) * 3.141590118408203125));
    float _2080 = (((_2057 * cbLight._m0[_2009].x) * _2070) * _1818) + (((_1984 * cbLight._m0[_1931].x) * _1998) * _1828);
    float _2081 = (((_2057 * cbLight._m0[_2009].y) * _2070) * _1818) + (((_1984 * cbLight._m0[_1931].y) * _1998) * _1828);
    float _2082 = (((_2057 * cbLight._m0[_2009].z) * _2070) * _1818) + (((_1984 * cbLight._m0[_1931].z) * _1998) * _1828);
    float _2144;
    float _2146;
    float _2148;
    if (_1868)
    {
        _2144 = _2080;
        _2146 = _2081;
        _2148 = _2082;
    }
    else
    {
        uint _2150 = _1795 + 2u;
        uint _2154 = _1795 + 10u;
        float _2168 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2150].w)) * _613) * 0.949999988079071044921875);
        float _2169 = _2168 * _2168;
        float _2170 = cbLight._m0[_2150].x + _690;
        float _2171 = cbLight._m0[_2150].y + _691;
        float _2172 = cbLight._m0[_2150].z + _692;
        float _2176 = inversesqrt(dot(vec3(_2170, _2171, _2172), vec3(_2170, _2171, _2172)));
        float _2177 = _2176 * _2170;
        float _2178 = _2176 * _2171;
        float _2179 = _2176 * _2172;
        float _2180 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_2150].xyz));
        float _4101 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2183 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _2184 = dot(vec3(_610, _611, _612), vec3(_2177, _2178, _2179));
        float _4112 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2187 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _2188 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_2177, _2178, _2179));
        float _4123 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2192 = _2169 * _2169;
        float _2196 = ((_2187 * _2187) * (_2192 + (-1.0))) + 1.0;
        float _2205 = (exp2(log2(1.0 - (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2206 = 1.0 - _2169;
        float _2216 = (0.5 / (((_1960 * ((_2183 * _2206) + _2169)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _2206) + _2169) * _2183))) * _2183;
        float _4134 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2218 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_2192 / ((_2196 * _2196) * 3.141590118408203125));
        float _2219 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
        _2144 = (((_2205 * cbLight._m0[_2154].x) * _2218) * _2219) + _2080;
        _2146 = (((_2205 * cbLight._m0[_2154].y) * _2218) * _2219) + _2081;
        _2148 = (((_2205 * cbLight._m0[_2154].z) * _2218) * _2219) + _2082;
    }
    float _2254;
    float _2256;
    float _2258;
    if (_1886)
    {
        _2254 = _2144;
        _2256 = _2146;
        _2258 = _2148;
    }
    else
    {
        uint _2265 = _1795 + 3u;
        uint _2269 = _1795 + 11u;
        float _2283 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2265].w)) * _613) * 0.949999988079071044921875);
        float _2284 = _2283 * _2283;
        float _2285 = cbLight._m0[_2265].x + _690;
        float _2286 = cbLight._m0[_2265].y + _691;
        float _2287 = cbLight._m0[_2265].z + _692;
        float _2291 = inversesqrt(dot(vec3(_2285, _2286, _2287), vec3(_2285, _2286, _2287)));
        float _2292 = _2291 * _2285;
        float _2293 = _2291 * _2286;
        float _2294 = _2291 * _2287;
        float _2295 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_2265].xyz));
        float _4150 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2298 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _2299 = dot(vec3(_610, _611, _612), vec3(_2292, _2293, _2294));
        float _4161 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2302 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _2303 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_2292, _2293, _2294));
        float _4172 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2307 = _2284 * _2284;
        float _2311 = ((_2302 * _2302) * (_2307 + (-1.0))) + 1.0;
        float _2320 = (exp2(log2(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2321 = 1.0 - _2284;
        float _2331 = (0.5 / (((_1960 * ((_2298 * _2321) + _2284)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _2321) + _2284) * _2298))) * _2298;
        float _4183 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2333 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2307 / ((_2311 * _2311) * 3.141590118408203125));
        float _2334 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _2254 = (((_2320 * cbLight._m0[_2269].x) * _2333) * _2334) + _2144;
        _2256 = (((_2320 * cbLight._m0[_2269].y) * _2333) * _2334) + _2146;
        _2258 = (((_2320 * cbLight._m0[_2269].z) * _2333) * _2334) + _2148;
    }
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    float _2477;
    float _2479;
    if (_1793.y == 0u)
    {
        float _2409 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2410 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2409;
        float _2411 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2409;
        float _2412 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2409;
        uvec4 _2424 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2425 = _2424.x;
        uint _2436 = uint((float(_2424.y) * floor(float(uint(cbSceneParam._m0[85u].y * _699) / _2425))) + floor(float(uint(cbSceneParam._m0[85u].x * _698) / _2425)));
        float _2446 = (log2(_2412 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2447 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        uint _2450 = uint(isnan(14.0) ? _2447 : (isnan(_2447) ? 14.0 : min(_2447, 14.0)));
        uvec4 _2455 = texelFetch(g_lightClusterGridBuffer, int(((_2450 << 2u) + (_2436 << 6u)) >> 2u));
        uint _2456 = _2455.x;
        uint _2457 = _2424.z;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        float _2567;
        if (((((1u << ((_2457 >> 4u) & 15u)) + 4294967295u) & _2456) == 0u) || ((_2457 & 240u) == 0u))
        {
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
        }
        else
        {
            float _2558;
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2568;
            float _2702 = 0.0;
            float _2703 = 0.0;
            float _2704 = 0.0;
            float _2705 = 0.0;
            float _2706 = 0.0;
            float _2707 = 0.0;
            uint _2708 = 0u;
            uint _2717;
            bool _2718;
            for (;;)
            {
                _2717 = texelFetch(g_lightClassification, int((((_2450 << 5u) + (_2436 << 9u)) + (_2708 << 2u)) >> 2u)).x;
                _2718 = _2717 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2718)
                {
                    frontier_phi_61_pred = _2702;
                    frontier_phi_61_pred_1 = _2707;
                    frontier_phi_61_pred_2 = _2706;
                    frontier_phi_61_pred_3 = _2705;
                    frontier_phi_61_pred_4 = _2704;
                    frontier_phi_61_pred_5 = _2703;
                }
                else
                {
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    uint _2832;
                    _2826 = _2702;
                    _2827 = _2703;
                    _2828 = _2704;
                    _2829 = _2705;
                    _2830 = _2706;
                    _2831 = _2707;
                    _2832 = _2717;
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    for (;;)
                    {
                        uint _2836 = uint(findLSB(_2832)) + (_2708 << 5u);
                        uint _2833 = (_2832 + 4294967295u) & _2832;
                        uint _2838 = _2836 * 48u;
                        vec4 _2852 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2838)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 3u)).x));
                        uint _2858 = (_2836 * 48u) + 4u;
                        vec4 _2871 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2858)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 3u)).x));
                        uint _2877 = (_2836 * 48u) + 8u;
                        vec3 _2888 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2877)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 2u)).x));
                        float _2892 = _2852.x - _2410;
                        float _2893 = _2852.y - _2411;
                        float _2894 = _2852.z - _2412;
                        float _2895 = dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894));
                        float _2898 = inversesqrt(_2895);
                        float _2899 = _2898 * _2892;
                        float _2900 = _2898 * _2893;
                        float _2901 = _2898 * _2894;
                        float _2902 = dot(vec3(_717, _720, _723), vec3(_2899, _2900, _2901));
                        float _2907 = 1.0 - (_2895 * _2852.w);
                        float _4209 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                        float _2908 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                        float _2909 = sqrt(_2895) * _2871.w;
                        float _2912 = 1.39999997615814208984375 / (_2909 + 1.39999997615814208984375);
                        float _2913 = _2912 * _2912;
                        float _2916 = ((1.0 - _2913) * _2902) + _2913;
                        float _2919 = _2909 * _2909;
                        float _2923 = ((isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0))) * _2908) / ((_2919 * 0.699999988079071044921875) + 1.0);
                        float _2927 = (-0.0) - _2410;
                        float _2928 = (-0.0) - _2411;
                        float _2929 = (-0.0) - _2412;
                        float _2933 = inversesqrt(dot(vec3(_2927, _2928, _2929), vec3(_2927, _2928, _2929)));
                        float _2934 = _2933 * _2927;
                        float _2935 = _2933 * _2928;
                        float _2936 = _2933 * _2929;
                        float _2944 = exp2(log2(1.0 / ((_2919 * 3.5) + 5.0)) * 0.25);
                        float _2945 = 1.0 - _777;
                        float _2952 = sqrt(1.0 - ((1.0 - (_2945 * _2945)) * (1.0 - (_2944 * _2944))));
                        float _2953 = _2952 * _2952;
                        float _2954 = _2953 * _2953;
                        float _2955 = _2934 + _2899;
                        float _2956 = _2935 + _2900;
                        float _2957 = _2936 + _2901;
                        float _2961 = inversesqrt(dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957)));
                        float _2965 = dot(vec3(_717, _720, _723), vec3(_2934, _2935, _2936));
                        float _4225 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2968 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                        float _2969 = dot(vec3(_717, _720, _723), vec3(_2961 * _2955, _2961 * _2956, _2961 * _2957));
                        float _4236 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                        float _2972 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                        float _2976 = ((_2972 * _2972) * (_2954 + (-1.0))) + 1.0;
                        float _2977 = _2912 * _2953;
                        float _2978 = _2977 * _2977;
                        float _2981 = ((1.0 - _2978) * _2902) + _2978;
                        float _4247 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2982 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                        float _2983 = 1.0 - _2953;
                        float _2993 = (0.5 / (((_2982 * ((_2968 * _2983) + _2953)) + 9.9999999392252902907785028219223e-09) + (((_2982 * _2983) + _2953) * _2968))) * _2982;
                        float _4258 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _3004 = (((_2954 * 3.1415927410125732421875) * (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) / ((_2976 * _2976) * ((_2919 * 2.1991131305694580078125) + 3.141590118408203125))) * _2908;
                        _2761 = (_2923 * _2871.x) + _2829;
                        _2762 = (_2923 * _2871.y) + _2830;
                        _2763 = (_2923 * _2871.z) + _2831;
                        _2758 = (_3004 * _2888.x) + _2826;
                        _2759 = (_3004 * _2888.y) + _2827;
                        _2760 = (_3004 * _2888.z) + _2828;
                        if (_2833 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2826 = _2758;
                            _2827 = _2759;
                            _2828 = _2760;
                            _2829 = _2761;
                            _2830 = _2762;
                            _2831 = _2763;
                            _2832 = _2833;
                        }
                    }
                    frontier_phi_61_pred = _2758;
                    frontier_phi_61_pred_1 = _2763;
                    frontier_phi_61_pred_2 = _2762;
                    frontier_phi_61_pred_3 = _2761;
                    frontier_phi_61_pred_4 = _2760;
                    frontier_phi_61_pred_5 = _2759;
                }
                _2558 = frontier_phi_61_pred;
                _2568 = frontier_phi_61_pred_1;
                _2566 = frontier_phi_61_pred_2;
                _2564 = frontier_phi_61_pred_3;
                _2562 = frontier_phi_61_pred_4;
                _2560 = frontier_phi_61_pred_5;
                uint _2709 = _2708 + 1u;
                if (_2709 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2702 = _2558;
                    _2703 = _2560;
                    _2704 = _2562;
                    _2705 = _2564;
                    _2706 = _2566;
                    _2707 = _2568;
                    _2708 = _2709;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
        }
        uvec4 _2571 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2572 = _2571.z;
        uint _2574 = (_2572 >> 8u) & 15u;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        if (((4294967295u << _2574) & _2456) == 0u)
        {
            _2670 = _2557;
            _2672 = _2559;
            _2674 = _2561;
            _2676 = _2563;
            _2678 = _2565;
            _2680 = _2567;
        }
        else
        {
            float _2695 = inversesqrt(dot(vec3(_2410, _2411, _2412), vec3(_2410, _2411, _2412)));
            float _2696 = _2695 * _2410;
            float _2697 = _2695 * _2411;
            float _2698 = _2695 * _2412;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2574 < ((_2572 >> 12u) & 15u))
            {
                float _2671;
                float _2673;
                float _2675;
                float _2677;
                float _2679;
                float _2681;
                float _2809 = _2557;
                float _2810 = _2559;
                float _2811 = _2561;
                float _2812 = _2563;
                float _2813 = _2565;
                float _2814 = _2567;
                uint _2815 = _2574;
                uint _2824;
                bool _2825;
                for (;;)
                {
                    _2824 = texelFetch(g_lightClassification, int((((_2450 << 5u) + (_2436 << 9u)) + (_2815 << 2u)) >> 2u)).x;
                    _2825 = _2824 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2825)
                    {
                        frontier_phi_67_pred = _2812;
                        frontier_phi_67_pred_1 = _2813;
                        frontier_phi_67_pred_2 = _2814;
                        frontier_phi_67_pred_3 = _2811;
                        frontier_phi_67_pred_4 = _2810;
                        frontier_phi_67_pred_5 = _2809;
                    }
                    else
                    {
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3022 = _2809;
                        float _3023 = _2810;
                        float _3024 = _2811;
                        float _3025 = _2812;
                        float _3026 = _2813;
                        float _3027 = _2814;
                        uint _3028 = _2824;
                        uint _3029;
                        vec4 _3054;
                        float _3055;
                        vec4 _3070;
                        vec3 _3082;
                        vec4 _3097;
                        vec4 _3113;
                        float _3159;
                        bool _3160;
                        for (;;)
                        {
                            uint _3039 = ((_2815 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3028));
                            _3029 = (_3028 + 4294967295u) & _3028;
                            uint _3041 = _3039 * 40u;
                            _3054 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 3u)).x));
                            _3055 = _3054.w;
                            uint _3057 = (_3039 * 40u) + 4u;
                            _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            uint _3072 = (_3039 * 40u) + 8u;
                            _3082 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x));
                            uint _3084 = (_3039 * 40u) + 16u;
                            _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            uint _3100 = (_3039 * 40u) + 20u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3115 = (_3039 * 40u) + 24u;
                            vec4 _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3134 = (_3039 * 40u) + 28u;
                            vec4 _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            _3159 = fma(_2412, _3147.z, fma(_2411, _3147.y, _3147.x * _2410)) + _3147.w;
                            _3160 = !((fma(_2412, _3128.z, fma(_2411, _3128.y, _3128.x * _2410)) + _3128.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3160)
                            {
                                float _3187 = _3054.x - _2410;
                                float _3188 = _3054.y - _2411;
                                float _3189 = _3054.z - _2412;
                                float _3190 = dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189));
                                float _3193 = inversesqrt(_3190);
                                float _3194 = _3193 * _3187;
                                float _3195 = _3193 * _3188;
                                float _3196 = _3193 * _3189;
                                float _3200 = 1.0 - (_3190 / (_3055 * _3055));
                                float _4269 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3201 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3205 = sqrt(_3190) * _3070.w;
                                float _3207 = 1.39999997615814208984375 / (_3205 + 1.39999997615814208984375);
                                float _3208 = _3207 * _3207;
                                float _3211 = ((1.0 - _3208) * dot(vec3(_3194, _3195, _3196), vec3(_717, _720, _723))) + _3208;
                                float _3214 = _3205 * _3205;
                                float _3218 = (fma(_2412, _3097.z, fma(_2411, _3097.y, _3097.x * _2410)) + _3097.w) / _3159;
                                float _3219 = (fma(_2412, _3113.z, fma(_2411, _3113.y, _3113.x * _2410)) + _3113.w) / _3159;
                                float _3223 = 1.0 - dot(vec2(_3218, _3219), vec2(_3218, _3219));
                                float _4285 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3224 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                                float _3225 = _3224 * (((isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0))) * _3201) / ((_3214 * 0.699999988079071044921875) + 1.0));
                                float _3237 = exp2(log2(1.0 / ((_3214 * 3.5) + 5.0)) * 0.25);
                                float _3238 = 1.0 - _777;
                                float _3245 = sqrt(1.0 - ((1.0 - (_3238 * _3238)) * (1.0 - (_3237 * _3237))));
                                float _3246 = _3245 * _3245;
                                float _3247 = _3246 * _3246;
                                float _3248 = _3194 - _2696;
                                float _3249 = _3195 - _2697;
                                float _3250 = _3196 - _2698;
                                float _3254 = inversesqrt(dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250)));
                                float _3258 = dot(vec3(_717, _720, _723), vec3((-0.0) - _2696, (-0.0) - _2697, (-0.0) - _2698));
                                float _4296 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3261 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                                float _3262 = dot(vec3(_717, _720, _723), vec3(_3254 * _3248, _3254 * _3249, _3254 * _3250));
                                float _4307 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3265 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                                float _3269 = ((_3265 * _3265) * (_3247 + (-1.0))) + 1.0;
                                float _3270 = _3207 * _3246;
                                float _3271 = _3270 * _3270;
                                float _3277 = ((1.0 - _3271) * dot(vec3(_717, _720, _723), vec3(_3194, _3195, _3196))) + _3271;
                                float _4318 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3278 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                                float _3279 = 1.0 - _3246;
                                float _3289 = (0.5 / (((_3278 * ((_3261 * _3279) + _3246)) + 9.9999999392252902907785028219223e-09) + (((_3278 * _3279) + _3246) * _3261))) * _3278;
                                float _4329 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3299 = (_3224 * _3201) * (((_3247 * 3.1415927410125732421875) * (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) / ((_3269 * _3269) * ((_3214 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3299 * _3082.x;
                                frontier_phi_73_pred_1 = _3299 * _3082.y;
                                frontier_phi_73_pred_2 = _3225 * _3070.z;
                                frontier_phi_73_pred_3 = _3225 * _3070.y;
                                frontier_phi_73_pred_4 = _3225 * _3070.x;
                                frontier_phi_73_pred_5 = _3299 * _3082.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3303 = frontier_phi_73_pred;
                            _3304 = frontier_phi_73_pred_1;
                            _3308 = frontier_phi_73_pred_2;
                            _3307 = frontier_phi_73_pred_3;
                            _3306 = frontier_phi_73_pred_4;
                            _3305 = frontier_phi_73_pred_5;
                            _3012 = _3306 + _3025;
                            _3013 = _3307 + _3026;
                            _3014 = _3308 + _3027;
                            _3009 = _3303 + _3022;
                            _3010 = _3304 + _3023;
                            _3011 = _3305 + _3024;
                            if (_3029 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3029;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3012;
                        frontier_phi_67_pred_1 = _3013;
                        frontier_phi_67_pred_2 = _3014;
                        frontier_phi_67_pred_3 = _3011;
                        frontier_phi_67_pred_4 = _3010;
                        frontier_phi_67_pred_5 = _3009;
                    }
                    _2677 = frontier_phi_67_pred;
                    _2679 = frontier_phi_67_pred_1;
                    _2681 = frontier_phi_67_pred_2;
                    _2675 = frontier_phi_67_pred_3;
                    _2673 = frontier_phi_67_pred_4;
                    _2671 = frontier_phi_67_pred_5;
                    uint _2816 = _2815 + 1u;
                    if (_2816 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2809 = _2671;
                        _2810 = _2673;
                        _2811 = _2675;
                        _2812 = _2677;
                        _2813 = _2679;
                        _2814 = _2681;
                        _2815 = _2816;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2679;
                frontier_phi_55_56_ladder_1 = _2681;
                frontier_phi_55_56_ladder_2 = _2677;
                frontier_phi_55_56_ladder_3 = _2675;
                frontier_phi_55_56_ladder_4 = _2673;
                frontier_phi_55_56_ladder_5 = _2671;
            }
            else
            {
                frontier_phi_55_56_ladder = _2565;
                frontier_phi_55_56_ladder_1 = _2567;
                frontier_phi_55_56_ladder_2 = _2563;
                frontier_phi_55_56_ladder_3 = _2561;
                frontier_phi_55_56_ladder_4 = _2559;
                frontier_phi_55_56_ladder_5 = _2557;
            }
            _2670 = frontier_phi_55_56_ladder_5;
            _2672 = frontier_phi_55_56_ladder_4;
            _2674 = frontier_phi_55_56_ladder_3;
            _2676 = frontier_phi_55_56_ladder_2;
            _2678 = frontier_phi_55_56_ladder;
            _2680 = frontier_phi_55_56_ladder_1;
        }
        float _2685 = isnan(1.0) ? _761 : (isnan(_761) ? 1.0 : min(_761, 1.0));
        _2469 = (_2685 * _2676) + _1924;
        _2471 = (_2685 * _2678) + _1926;
        _2473 = (_2685 * _2680) + _1928;
        _2475 = ((_2670 * 0.039999999105930328369140625) * _2685) + _2254;
        _2477 = ((_2672 * 0.039999999105930328369140625) * _2685) + _2256;
        _2479 = ((_2674 * 0.039999999105930328369140625) * _2685) + _2258;
    }
    else
    {
        _2469 = _1924;
        _2471 = _1926;
        _2473 = _1928;
        _2475 = _2254;
        _2477 = _2256;
        _2479 = _2258;
    }
    float _4345 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _4356 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _4367 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    uint _2499 = _228 + 6u;
    float _2507 = _698 / cbSceneParam._m0[86u].x;
    float _2508 = _699 / cbSceneParam._m0[86u].y;
    vec4 _2522 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2507, _2508, (log2((isnan(cbSceneParam._m0[77u].w) ? _631 : (isnan(_631) ? cbSceneParam._m0[77u].w : min(_631, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2524 = _2522.x;
    float _2525 = _2522.y;
    float _2526 = _2522.z;
    float _2527 = _2522.w;
    float _2620;
    float _2622;
    float _2624;
    float _2626;
    if (_631 > cbSceneParam._m0[78u].w)
    {
        float _2582 = isnan(_631) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _631 : min(cbSceneParam._m0[80u].w, _631));
        float _2583 = _2582 / _631;
        float _2594 = _2583 * _683;
        float _2595 = _684 * _2583;
        float _2596 = (-0.0) - _2595;
        float _2598 = _2583 * _685;
        float _2600 = (cbSceneParam._m0[77u].w * _2596) / _2582;
        float _2601 = _2600 + cbSceneParam._m0[79u].w;
        float _2602 = cbSceneParam._m0[79u].w - _2595;
        float _2608 = sqrt(((_2594 * _2594) + (_2595 * _2595)) + (_2598 * _2598));
        float _2611 = (1.0 - (cbSceneParam._m0[77u].w / _2582)) * _2608;
        float _2616 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2618 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2771;
        if (abs((_2596 - _2600) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2771 = ((((_2601 > 0.0) ? exp2(_2616 * _2601) : (2.0 - exp2(_2618 * _2601))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2611;
        }
        else
        {
            float _2731 = 1.0 / cbSceneParam._m0[80u].x;
            float _2732 = isnan(_2602) ? _2601 : (isnan(_2601) ? _2602 : max(_2601, _2602));
            float _2733 = isnan(_2602) ? _2601 : (isnan(_2601) ? _2602 : min(_2601, _2602));
            float _2742 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : min(_2732, 0.0));
            float _2743 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : min(_2733, 0.0));
            _2771 = ((abs(_2608 / _2596) * cbSceneParam._m0[80u].y) * ((((_2742 - _2743) * 2.0) - ((exp2(_2616 * (isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0)))) - exp2(_2616 * (isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0))))) * _2731)) - ((exp2(_2618 * _2742) - exp2(_2618 * _2743)) * _2731))) + (_2611 * cbSceneParam._m0[80u].z);
        }
        vec4 _2773 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2507, _2508, 1.0), 0.0);
        float _2782 = exp2((_2771 * (-1.44269502162933349609375)) * (1.0 - _2773.w));
        float _2783 = log2(_2782);
        float _2799 = log2(_2527);
        _2620 = (exp2(_2799 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2783 * cbSceneParam._m0[78u].x)) * _2773.x) / cbSceneParam._m0[78u].x)) + _2524;
        _2622 = (exp2(_2799 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2783 * cbSceneParam._m0[78u].y)) * _2773.y) / cbSceneParam._m0[78u].y)) + _2525;
        _2624 = (exp2(_2799 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2783 * cbSceneParam._m0[78u].z)) * _2773.z) / cbSceneParam._m0[78u].z)) + _2526;
        _2626 = _2782 * _2527;
    }
    else
    {
        _2620 = _2524;
        _2622 = _2525;
        _2624 = _2526;
        _2626 = _2527;
    }
    float _2638 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2639 = _2638 == 3.0;
    float _2640 = log2(_2626);
    float _2647 = exp2(_2640 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2469 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _761))) + ((_2475 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1566)) * cbPerFrame._m0[3u].x));
    float _2648 = exp2(_2640 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_2471 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _761))) + ((_2477 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1566)) * cbPerFrame._m0[3u].x));
    float _2649 = exp2(_2640 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2473 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _761))) + ((_2479 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1566)) * cbPerFrame._m0[3u].x));
    float _2658 = (_2638 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2658 * (_2639 ? _2647 : (_2647 + (cbSceneParam._m0[72u].w * _2620)));
    SV_Target.y = _2658 * (_2639 ? _2648 : (_2648 + (cbSceneParam._m0[72u].w * _2622)));
    SV_Target.z = _2658 * (_2639 ? _2649 : (_2649 + (cbSceneParam._m0[72u].w * _2624)));
    SV_Target.w = cbInstanceData._m0[_2499].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2499].w;
}


