#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1231;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3560 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3571 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3582 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _286) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _287) + cbTextureTilingScale._m0[13u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _328 = _323.x * cbMtdParam._m0[9u].x;
    float _329 = _323.y * cbMtdParam._m0[9u].y;
    float _330 = _323.z * cbMtdParam._m0[9u].z;
    float _334 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _300.x) * _328;
    float _337 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _300.y) * _329;
    float _340 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _300.z) * _330;
    float _347 = ((_328 - _334) * (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0)))) + _334;
    float _348 = ((_329 - _337) * (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0)))) + _337;
    float _349 = ((_330 - _340) * (isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0)))) + _340;
    vec4 _368 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _286) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _287) + cbTextureTilingScale._m0[14u].w));
    vec4 _388 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _286) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _287) + cbTextureTilingScale._m0[20u].w));
    vec4 _414 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _418 = _414.z;
    float _422 = (_414.x * 2.0) + (-1.0);
    float _423 = (_414.y * 2.0) + (-1.0);
    float _424 = dot(vec2(_422, _423), vec2(_422, _423));
    float _3593 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _429 = sqrt(1.0 - (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))));
    float _434 = _422 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_388.x * 2.0) + (-1.0)));
    float _435 = _423 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_388.y * 2.0) + (-1.0)));
    float _438 = fma(_429, _236, fma(_435, _243, _434 * _229));
    float _441 = fma(_429, _237, fma(_435, _244, _434 * _230));
    float _444 = fma(_429, _238, fma(_435, _245, _434 * _231));
    float _448 = inversesqrt(dot(vec3(_438, _441, _444), vec3(_438, _441, _444)));
    vec4 _484 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _486 = _484.x;
    float _487 = 1.0 - _486;
    float _494 = ((_486 - _487) * cbMtdParam._m0[24u].z) + _487;
    float _496 = (cbMtdParam._m0[19u].x + dot(vec4(_448 * _438, _448 * _441, _448 * _444, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_494 * cbMtdParam._m0[21u].z);
    float _3604 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _499 = (-0.0) - cbMtdParam._m0[24u].y;
    float _501 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _502 = isnan(1.0) ? _501 : (isnan(_501) ? 1.0 : min(_501, 1.0));
    float _509 = _497 - ((_497 * TEXCOORD_8.x) * _502);
    float _510 = _497 - ((_497 * TEXCOORD_8.y) * _502);
    float _511 = _497 - ((_497 * TEXCOORD_8.z) * _502);
    float _518 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _522 = ((isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : min(_518, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _530 = (_522 - (((_494 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _522))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3635 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _531 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _535 = ((_509 * ((_368.x * cbMtdParam._m0[18u].x) - _347)) * _531) + _347;
    float _536 = ((_510 * ((_368.y * cbMtdParam._m0[18u].y) - _348)) * _531) + _348;
    float _537 = ((_511 * ((_368.z * cbMtdParam._m0[18u].z) - _349)) * _531) + _349;
    vec4 _549 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _551 = _549.x;
    float _552 = 1.0 - _551;
    float _579 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_551 - _552) * cbMtdParam._m0[24u].w) + _552) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3646 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _580 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _588 = ((((cbMtdParam._m0[10u].x - _535) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _580) + _535;
    float _589 = ((((cbMtdParam._m0[10u].y - _536) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _580) + _536;
    float _590 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _537)) * _580) + _537;
    float _595 = (((_388.z - _418) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _418;
    vec4 _609 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _616 = (_609.x * 2.0) + (-1.0);
    float _617 = (_609.y * 2.0) + (-1.0);
    float _618 = dot(vec2(_616, _617), vec2(_616, _617));
    float _3657 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _627 = (((_609.z - _595) * _509) * _531) + _595;
    float _630 = ((cbMtdParam._m0[23u].y - _627) * _580) + _627;
    vec4 _649 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _655 = (_649.x * 2.0) + (-1.0);
    float _656 = (_649.y * 2.0) + (-1.0);
    float _657 = dot(vec2(_655, _656), vec2(_655, _656));
    float _3668 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _677 = (((cbMtdParam._m0[21u].x * _434) + ((_616 - _434) * _509)) * _531) + _434;
    float _678 = (((cbMtdParam._m0[21u].x * _435) + ((_617 - _435) * _510)) * _531) + _435;
    float _679 = (((sqrt(1.0 - (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) - _429) * _511) * _531) + _429;
    float _690 = (((_655 - _677) + (_677 * cbMtdParam._m0[22u].z)) * _580) + _677;
    float _691 = (((_656 - _678) + (_678 * cbMtdParam._m0[22u].z)) * _580) + _678;
    float _692 = ((sqrt(1.0 - (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) - _679) * _580) + _679;
    float _694 = cbMtdParam._m0[22u].x + _414.w;
    float _697 = fma(_692, _236, fma(_691, _243, _690 * _229));
    float _700 = fma(_692, _237, fma(_691, _244, _690 * _230));
    float _703 = fma(_692, _238, fma(_691, _245, _690 * _231));
    float _707 = inversesqrt(dot(vec3(_697, _700, _703), vec3(_697, _700, _703)));
    float _708 = _707 * _697;
    float _709 = _707 * _700;
    float _710 = _707 * _703;
    float _3679 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _711 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _3690 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _3701 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _3712 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _3723 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _729 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _779 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _769);
    float _780 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _769);
    float _781 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _769);
    float _785 = inversesqrt(dot(vec3(_779, _780, _781), vec3(_779, _780, _781)));
    float _786 = _779 * _785;
    float _787 = _780 * _785;
    float _788 = _781 * _785;
    float _794 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _795 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _816 = fma(_710, cbSceneParam._m0[5u].z, fma(_709, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _708));
    float _819 = fma(_710, cbSceneParam._m0[6u].z, fma(_709, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _708));
    float _822 = fma(_710, cbSceneParam._m0[7u].z, fma(_709, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _708));
    uint _836 = (_267 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _842 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0)))) * cbInstanceData._m0[_836].x;
    float _843 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) * cbInstanceData._m0[_836].y;
    float _844 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) * cbInstanceData._m0[_836].z;
    float _3734 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _3745 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _846 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _3756 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _847 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    vec4 _856 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _794, cbSceneParam._m0[86u].y * _795));
    float _860 = ((isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * TEXCOORD_5.w) * _856.x;
    float _861 = dot(vec3(_708, _709, _710), vec3(_786, _787, _788));
    float _864 = _861 * 2.0;
    float _868 = (_864 * _708) - _786;
    float _869 = (_864 * _709) - _787;
    float _870 = (_864 * _710) - _788;
    float _874 = abs(dot(vec3(_786, _787, _788), vec3(_708, _709, _710)));
    float _3767 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _876 = sqrt(_711);
    float _889 = exp2((_876 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_876 * 3.0));
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _925 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1230;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _955 = fma(_929, cbModelParam._m0[26u].z, fma(_925, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _921));
        float _959 = fma(_929, cbModelParam._m0[27u].z, fma(_925, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _921));
        float _963 = fma(_929, cbModelParam._m0[28u].z, fma(_925, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _921));
        float _988 = _921 + _708;
        float _989 = _925 + _709;
        float _990 = _929 + _710;
        float _1000 = fma(_990, cbModelParam._m0[26u].z, fma(_989, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _988)) - _955;
        float _1001 = fma(_990, cbModelParam._m0[27u].z, fma(_989, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _988)) - _959;
        float _1002 = fma(_990, cbModelParam._m0[28u].z, fma(_989, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _988)) - _963;
        float _1006 = inversesqrt(dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002)));
        float _1019 = ((_1006 * _1000) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_955 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1020 = ((_1006 * _1001) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_959 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1021 = ((_1006 * _1002) / cbModelParam._m0[34u].z) + ((((((_963 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        float _1058 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1024.x + (-0.5));
        float _1060 = _1058 * (_1024.y + (-0.5));
        float _1061 = _1058 * (_1024.z + (-0.5));
        float _1068 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1031.x + (-0.5));
        float _1070 = _1068 * (_1031.y + (-0.5));
        float _1071 = _1068 * (_1031.z + (-0.5));
        float _1078 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1038.x + (-0.5));
        float _1080 = _1078 * (_1038.y + (-0.5));
        float _1081 = _1078 * (_1038.z + (-0.5));
        float _1088 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1045.x + (-0.5));
        float _1090 = _1088 * (_1045.y + (-0.5));
        float _1091 = _1088 * (_1045.z + (-0.5));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = _1059 * 0.5;
        float _1096 = _1069 * 0.5;
        float _1097 = _1079 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1112 = (dot(vec3(_708, _709, _710), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1122 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _3815 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1124 + 1.0))) + _1129) * _1092;
        float _1139 = _1060 * 0.5;
        float _1140 = _1070 * 0.5;
        float _1141 = _1080 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1155 = (dot(vec3(_708, _709, _710), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1164 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3848 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1166 + 1.0))) + _1171) * _1093;
        float _1181 = _1061 * 0.5;
        float _1182 = _1071 * 0.5;
        float _1183 = _1081 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_708, _709, _710), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3881 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1208 + 1.0))) + _1213) * _1094;
        _1230 = _1061;
        _1232 = _1060;
        _1233 = _1059;
        _1234 = _1071;
        _1235 = _1070;
        _1236 = _1069;
        _1237 = _1081;
        _1238 = _1080;
        _1239 = _1079;
        _1240 = _1094;
        _1241 = _1093;
        _1242 = _1092;
        _1243 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
        _1244 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
        _1245 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
    }
    else
    {
        _1230 = _1231;
        _1232 = _1231;
        _1233 = _1231;
        _1234 = _1231;
        _1235 = _1231;
        _1236 = _1231;
        _1237 = _1231;
        _1238 = _1231;
        _1239 = _1231;
        _1240 = _1231;
        _1241 = _1231;
        _1242 = _1231;
        _1243 = 0.0;
        _1244 = 0.0;
        _1245 = 0.0;
    }
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1270 = fma(_929, cbModelParam._m0[30u].z, fma(_925, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _921));
        float _1274 = fma(_929, cbModelParam._m0[31u].z, fma(_925, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _921));
        float _1278 = fma(_929, cbModelParam._m0[32u].z, fma(_925, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _921));
        float _1301 = _921 + _708;
        float _1302 = _925 + _709;
        float _1303 = _929 + _710;
        float _1313 = fma(_1303, cbModelParam._m0[30u].z, fma(_1302, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1301)) - _1270;
        float _1314 = fma(_1303, cbModelParam._m0[31u].z, fma(_1302, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1301)) - _1274;
        float _1315 = fma(_1303, cbModelParam._m0[32u].z, fma(_1302, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1301)) - _1278;
        float _1319 = inversesqrt(dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315)));
        float _1332 = ((_1319 * _1313) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1270 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1333 = ((_1319 * _1314) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1274 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1334 = ((_1319 * _1315) / cbModelParam._m0[35u].z) + ((((((_1278 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        float _1369 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1336.x + (-0.5));
        float _1371 = _1369 * (_1336.y + (-0.5));
        float _1372 = _1369 * (_1336.z + (-0.5));
        float _1379 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1343.x + (-0.5));
        float _1381 = _1379 * (_1343.y + (-0.5));
        float _1382 = _1379 * (_1343.z + (-0.5));
        float _1389 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1350.x + (-0.5));
        float _1391 = _1389 * (_1350.y + (-0.5));
        float _1392 = _1389 * (_1350.z + (-0.5));
        float _1399 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1357.x + (-0.5));
        float _1401 = _1399 * (_1357.y + (-0.5));
        float _1402 = _1399 * (_1357.z + (-0.5));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = _1370 * 0.5;
        float _1407 = _1380 * 0.5;
        float _1408 = _1390 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_708, _709, _710), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _3944 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1433 + 1.0))) + _1438) * _1403;
        float _1448 = _1371 * 0.5;
        float _1449 = _1381 * 0.5;
        float _1450 = _1391 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_708, _709, _710), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _3977 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1475 + 1.0))) + _1480) * _1404;
        float _1490 = _1372 * 0.5;
        float _1491 = _1382 * 0.5;
        float _1492 = _1392 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_708, _709, _710), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4010 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1517 + 1.0))) + _1522) * _1405;
        _1539 = _1372;
        _1540 = _1371;
        _1541 = _1370;
        _1542 = _1382;
        _1543 = _1381;
        _1544 = _1380;
        _1545 = _1392;
        _1546 = _1391;
        _1547 = _1390;
        _1548 = _1405;
        _1549 = _1404;
        _1550 = _1403;
        _1551 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
        _1552 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1553 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
    }
    else
    {
        _1539 = _1231;
        _1540 = _1231;
        _1541 = _1231;
        _1542 = _1231;
        _1543 = _1231;
        _1544 = _1231;
        _1545 = _1231;
        _1546 = _1231;
        _1547 = _1231;
        _1548 = _1231;
        _1549 = _1231;
        _1550 = _1231;
        _1551 = 0.0;
        _1552 = 0.0;
        _1553 = 0.0;
    }
    float _1563 = (cbModelParam._m0[1u].x * (_1551 - _1243)) + _1243;
    float _1564 = (cbModelParam._m0[1u].x * (_1552 - _1244)) + _1244;
    float _1565 = (cbModelParam._m0[1u].x * (_1553 - _1245)) + _1245;
    float _1586 = fma(_1565, cbSceneParam._m0[89u].z, fma(_1564, cbSceneParam._m0[89u].y, _1563 * cbSceneParam._m0[89u].x));
    float _1589 = fma(_1565, cbSceneParam._m0[90u].z, fma(_1564, cbSceneParam._m0[90u].y, _1563 * cbSceneParam._m0[90u].x));
    float _1592 = fma(_1565, cbSceneParam._m0[91u].z, fma(_1564, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1563));
    float _1607 = _868 * 0.5;
    float _1608 = _869 * 0.5;
    float _1609 = _870 * 0.5;
    float _1610 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1541, _1544, _1547, _1550));
    float _1613 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1540, _1543, _1546, _1549));
    float _1616 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1539, _1542, _1545, _1548));
    float _1650;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1623 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1230, _1234, _1237, _1240));
        float _1627 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1232, _1235, _1238, _1241));
        float _1631 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1233, _1236, _1239, _1242));
        float _1638 = dot(vec4(cbModelParam._m0[39u]), vec4(_1607, _1608, _1609, 1.0));
        _1650 = dot(vec3(isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1638) ? 0.0 : (isnan(0.0) ? _1638 : max(0.0, _1638))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1650 = 1.0;
    }
    float _1661;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1652 = dot(vec4(cbModelParam._m0[40u]), vec4(_1607, _1608, _1609, 1.0));
        _1661 = dot(vec3(isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1652) ? 0.0 : (isnan(0.0) ? _1652 : max(0.0, _1652))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1661 = 1.0;
    }
    float _1665 = (_1661 * cbModelParam._m0[1u].x) + (_1650 * (1.0 - cbModelParam._m0[1u].x));
    float _1675 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _711);
    float _1676 = isnan(_1675) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1675 : min(cbModelParam._m0[25u].z, _1675));
    float _1756;
    float _1758;
    float _1760;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1723 = fma(_929, cbModelParam._m0[13u].z, fma(_925, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _921)) + cbModelParam._m0[13u].w;
        float _1727 = fma(_929, cbModelParam._m0[14u].z, fma(_925, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _921)) + cbModelParam._m0[14u].w;
        float _1731 = fma(_929, cbModelParam._m0[15u].z, fma(_925, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _921)) + cbModelParam._m0[15u].w;
        float _1734 = fma(_870, cbModelParam._m0[13u].z, fma(_869, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _868));
        float _1737 = fma(_870, cbModelParam._m0[14u].z, fma(_869, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _868));
        float _1740 = fma(_870, cbModelParam._m0[15u].z, fma(_869, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _868));
        float _1768;
        if (_1734 > 0.0)
        {
            _1768 = abs((1.0 - _1723) / _1734);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1723 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1768 = frontier_phi_14_12_ladder;
        }
        float _1991;
        if (_1737 > 0.0)
        {
            _1991 = abs((1.0 - _1727) / _1737);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1727 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1991 = frontier_phi_23_19_ladder;
        }
        float _2237;
        if (_1740 > 0.0)
        {
            _2237 = abs((1.0 - _1731) / _1740);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1731 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2237 = frontier_phi_35_30_ladder;
        }
        float _2239 = isnan(_1991) ? _1768 : (isnan(_1768) ? _1991 : min(_1768, _1991));
        float _2240 = isnan(_2237) ? _2239 : (isnan(_2239) ? _2237 : min(_2239, _2237));
        float _2244 = (_2240 * _1734) + _1723;
        float _2245 = (_2240 * _1737) + _1727;
        float _2246 = (_2240 * _1740) + _1731;
        float _2247 = _2240 * 9.9999997473787516355514526367188e-05;
        float _2249 = (-1.0) - _2247;
        float _2251 = _2247 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2246 > _2251) || ((_2246 < _2249) || ((_2245 > _2251) || ((_2245 < _2249) || ((_2244 < _2249) || (_2244 > _2251))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2370 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2246, cbModelParam._m0[9u].z, fma(_2245, cbModelParam._m0[9u].y, _2244 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2246, cbModelParam._m0[10u].z, fma(_2245, cbModelParam._m0[10u].y, _2244 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2246, cbModelParam._m0[11u].z, fma(_2245, cbModelParam._m0[11u].y, _2244 * cbModelParam._m0[11u].x))), _1676);
            frontier_phi_13_35_ladder = _2370.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2370.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2370.x * cbModelParam._m0[1u].y;
        }
        _1756 = frontier_phi_13_35_ladder_2;
        _1758 = frontier_phi_13_35_ladder_1;
        _1760 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1744 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_868, _869, _870), _1676);
        _1756 = _1744.x * cbModelParam._m0[1u].y;
        _1758 = _1744.y * cbModelParam._m0[1u].y;
        _1760 = _1744.z * cbModelParam._m0[1u].y;
    }
    float _1764 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _711);
    float _1765 = isnan(_1764) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1764 : min(cbModelParam._m0[25u].w, _1764));
    float _1854;
    float _1856;
    float _1858;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1818 = fma(_929, cbModelParam._m0[21u].z, fma(_925, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _921)) + cbModelParam._m0[21u].w;
        float _1822 = fma(_929, cbModelParam._m0[22u].z, fma(_925, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _921)) + cbModelParam._m0[22u].w;
        float _1826 = fma(_929, cbModelParam._m0[23u].z, fma(_925, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _921)) + cbModelParam._m0[23u].w;
        float _1829 = fma(_870, cbModelParam._m0[21u].z, fma(_869, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _868));
        float _1832 = fma(_870, cbModelParam._m0[22u].z, fma(_869, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _868));
        float _1835 = fma(_870, cbModelParam._m0[23u].z, fma(_869, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _868));
        float _1996;
        if (_1829 > 0.0)
        {
            _1996 = abs((1.0 - _1818) / _1829);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1818 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1996 = frontier_phi_25_21_ladder;
        }
        float _2264;
        if (_1832 > 0.0)
        {
            _2264 = abs((1.0 - _1822) / _1832);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1822 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2264 = frontier_phi_37_32_ladder;
        }
        float _2469;
        if (_1835 > 0.0)
        {
            _2469 = abs((1.0 - _1826) / _1835);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1826 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2469 = frontier_phi_46_43_ladder;
        }
        float _2471 = isnan(_2264) ? _1996 : (isnan(_1996) ? _2264 : min(_1996, _2264));
        float _2472 = isnan(_2469) ? _2471 : (isnan(_2471) ? _2469 : min(_2471, _2469));
        float _2476 = (_2472 * _1829) + _1818;
        float _2477 = (_2472 * _1832) + _1822;
        float _2478 = (_2472 * _1835) + _1826;
        float _2479 = _2472 * 9.9999997473787516355514526367188e-05;
        float _2480 = (-1.0) - _2479;
        float _2482 = _2479 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2478 > _2482) || ((_2478 < _2480) || ((_2477 > _2482) || ((_2477 < _2480) || ((_2476 < _2480) || (_2476 > _2482))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2677 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2478, cbModelParam._m0[17u].z, fma(_2477, cbModelParam._m0[17u].y, _2476 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2478, cbModelParam._m0[18u].z, fma(_2477, cbModelParam._m0[18u].y, _2476 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2478, cbModelParam._m0[19u].z, fma(_2477, cbModelParam._m0[19u].y, _2476 * cbModelParam._m0[19u].x))), _1765);
            frontier_phi_22_46_ladder = _2677.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2677.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2677.x * cbModelParam._m0[1u].z;
        }
        _1854 = frontier_phi_22_46_ladder_2;
        _1856 = frontier_phi_22_46_ladder_1;
        _1858 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1838 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_868, _869, _870), _1765);
        _1854 = _1838.x * cbModelParam._m0[1u].z;
        _1856 = _1838.y * cbModelParam._m0[1u].z;
        _1858 = _1838.z * cbModelParam._m0[1u].z;
    }
    float _1870 = ((((1.0 - _889) * ((_876 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_889 * _876)) * _860;
    float _1871 = _1870 * ((cbModelParam._m0[1u].w * (_1854 - _1756)) + _1756);
    float _1872 = _1870 * ((cbModelParam._m0[1u].w * (_1856 - _1758)) + _1758);
    float _1873 = _1870 * ((cbModelParam._m0[1u].w * (_1858 - _1760)) + _1760);
    float _1876 = fma(_1873, cbSceneParam._m0[89u].z, fma(_1872, cbSceneParam._m0[89u].y, _1871 * cbSceneParam._m0[89u].x));
    float _1879 = fma(_1873, cbSceneParam._m0[90u].z, fma(_1872, cbSceneParam._m0[90u].y, _1871 * cbSceneParam._m0[90u].x));
    float _1882 = fma(_1873, cbSceneParam._m0[91u].z, fma(_1872, cbSceneParam._m0[91u].y, _1871 * cbSceneParam._m0[91u].x));
    vec4 _1890 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_794, _795));
    float _1892 = _1890.w;
    float _1904 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1892);
    float _1905 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1892);
    float _1906 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1892);
    uvec4 _1910 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _1912 = _1910.x * 14u;
    uint _1913 = _1912 + 13u;
    float _1920 = _860 + (-1.0);
    float _1925 = (cbLight._m0[_1913].x * _1920) + 1.0;
    float _1926 = (cbLight._m0[_1913].y * _1920) + 1.0;
    float _1927 = (cbLight._m0[_1913].z * _1920) + 1.0;
    float _1928 = (cbLight._m0[_1913].w * _1920) + 1.0;
    uint _1929 = _1912 + 5u;
    float _1935 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
    uint _1939 = _1912 + 4u;
    float _1949 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
    uint _1953 = _1912 | 1u;
    float _1964 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_708, _709, _710));
    float _1967 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_708, _709, _710));
    float _4146 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _4157 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1972 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * 0.3183098733425140380859375;
    float _1974 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * 0.3183098733425140380859375;
    float _1981 = ((cbLight._m0[_1929].x * _1935) * _1974) + (((cbLight._m0[_1939].x * _1904) * _1949) * _1972);
    float _1982 = ((_1935 * cbLight._m0[_1929].y) * _1974) + (((cbLight._m0[_1939].y * _1905) * _1949) * _1972);
    float _1983 = ((_1935 * cbLight._m0[_1929].z) * _1974) + (((cbLight._m0[_1939].z * _1906) * _1949) * _1972);
    uvec4 _1988 = floatBitsToUint(cbLight._m0[_1912 + 12u]);
    bool _1990 = _1988.x == 0u;
    float _2001;
    float _2003;
    float _2005;
    if (_1990)
    {
        _2001 = _1981;
        _2003 = _1982;
        _2005 = _1983;
    }
    else
    {
        uint _2009 = _1912 + 6u;
        float _2025 = (dot(vec3(cbLight._m0[_1912 + 2u].xyz), vec3(_708, _709, _710)) * 0.5) + 0.5;
        float _2026 = _2025 * _2025;
        float _4168 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2027 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _2028 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
        _2001 = (((cbLight._m0[_2009].x * 0.3183098733425140380859375) * _2027) * _2028) + _1981;
        _2003 = (((cbLight._m0[_2009].y * 0.3183098733425140380859375) * _2027) * _2028) + _1982;
        _2005 = (((cbLight._m0[_2009].z * 0.3183098733425140380859375) * _2027) * _2028) + _1983;
    }
    bool _2008 = _1988.y == 0u;
    float _2046;
    float _2048;
    float _2050;
    if (_2008)
    {
        _2046 = _2001;
        _2048 = _2003;
        _2050 = _2005;
    }
    else
    {
        uint _2208 = _1912 + 7u;
        float _2224 = (dot(vec3(cbLight._m0[_1912 + 3u].xyz), vec3(_708, _709, _710)) * 0.5) + 0.5;
        float _2225 = _2224 * _2224;
        float _4184 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2226 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _2227 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2046 = (((cbLight._m0[_2208].x * 0.3183098733425140380859375) * _2226) * _2227) + _2001;
        _2048 = (((cbLight._m0[_2208].y * 0.3183098733425140380859375) * _2226) * _2227) + _2003;
        _2050 = (((cbLight._m0[_2208].z * 0.3183098733425140380859375) * _2226) * _2227) + _2005;
    }
    uint _2053 = _1912 + 8u;
    float _2066 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1912].w)) * _711) * 0.949999988079071044921875);
    float _2067 = _2066 * _2066;
    float _2068 = cbLight._m0[_1912].x + _786;
    float _2069 = cbLight._m0[_1912].y + _787;
    float _2070 = cbLight._m0[_1912].z + _788;
    float _2074 = inversesqrt(dot(vec3(_2068, _2069, _2070), vec3(_2068, _2069, _2070)));
    float _2075 = _2074 * _2068;
    float _2076 = _2074 * _2069;
    float _2077 = _2074 * _2070;
    float _2078 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_1912].xyz));
    float _4200 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2081 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _4211 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _2082 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _2083 = dot(vec3(_708, _709, _710), vec3(_2075, _2076, _2077));
    float _4222 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2086 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _2087 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_2075, _2076, _2077));
    float _4233 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2091 = _2067 * _2067;
    float _2095 = ((_2086 * _2086) * (_2091 + (-1.0))) + 1.0;
    float _2106 = (exp2(log2(1.0 - (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2107 = 1.0 - _2067;
    float _2118 = (0.5 / (((_2082 * ((_2081 * _2107) + _2067)) + 9.9999999392252902907785028219223e-09) + (((_2082 * _2107) + _2067) * _2081))) * _2081;
    float _4244 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2120 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2091 / ((_2095 * _2095) * 3.141590118408203125));
    uint _2134 = _1912 + 9u;
    float _2145 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1953].w)) * _711) * 0.949999988079071044921875);
    float _2146 = _2145 * _2145;
    float _2147 = cbLight._m0[_1953].x + _786;
    float _2148 = cbLight._m0[_1953].y + _787;
    float _2149 = cbLight._m0[_1953].z + _788;
    float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
    float _2154 = _2153 * _2147;
    float _2155 = _2153 * _2148;
    float _2156 = _2153 * _2149;
    float _2157 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_1953].xyz));
    float _4255 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2160 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _2161 = dot(vec3(_708, _709, _710), vec3(_2154, _2155, _2156));
    float _4266 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _2165 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_2154, _2155, _2156));
    float _4277 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2169 = _2146 * _2146;
    float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
    float _2182 = (exp2(log2(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2183 = 1.0 - _2146;
    float _2193 = (0.5 / (((_2082 * ((_2160 * _2183) + _2146)) + 9.9999999392252902907785028219223e-09) + (((_2082 * _2183) + _2146) * _2160))) * _2160;
    float _4288 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2195 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
    float _2205 = (((_2182 * cbLight._m0[_2134].x) * _2195) * _1935) + ((((cbLight._m0[_2053].x * _1904) * _2106) * _2120) * _1949);
    float _2206 = (((_2182 * cbLight._m0[_2134].y) * _2195) * _1935) + ((((cbLight._m0[_2053].y * _1905) * _2106) * _2120) * _1949);
    float _2207 = (((_2182 * cbLight._m0[_2134].z) * _2195) * _1935) + ((((cbLight._m0[_2053].z * _1906) * _2106) * _2120) * _1949);
    float _2269;
    float _2271;
    float _2273;
    if (_1990)
    {
        _2269 = _2205;
        _2271 = _2206;
        _2273 = _2207;
    }
    else
    {
        uint _2275 = _1912 + 2u;
        uint _2279 = _1912 + 10u;
        float _2293 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2275].w)) * _711) * 0.949999988079071044921875);
        float _2294 = _2293 * _2293;
        float _2295 = cbLight._m0[_2275].x + _786;
        float _2296 = cbLight._m0[_2275].y + _787;
        float _2297 = cbLight._m0[_2275].z + _788;
        float _2301 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
        float _2302 = _2301 * _2295;
        float _2303 = _2301 * _2296;
        float _2304 = _2301 * _2297;
        float _2305 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2275].xyz));
        float _4299 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2308 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _2309 = dot(vec3(_708, _709, _710), vec3(_2302, _2303, _2304));
        float _4310 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2312 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2313 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_2302, _2303, _2304));
        float _4321 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2317 = _2294 * _2294;
        float _2321 = ((_2312 * _2312) * (_2317 + (-1.0))) + 1.0;
        float _2330 = (exp2(log2(1.0 - (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2331 = 1.0 - _2294;
        float _2341 = (0.5 / (((_2082 * ((_2308 * _2331) + _2294)) + 9.9999999392252902907785028219223e-09) + (((_2082 * _2331) + _2294) * _2308))) * _2308;
        float _4332 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2343 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2317 / ((_2321 * _2321) * 3.141590118408203125));
        float _2344 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
        _2269 = (((_2330 * cbLight._m0[_2279].x) * _2343) * _2344) + _2205;
        _2271 = (((_2330 * cbLight._m0[_2279].y) * _2343) * _2344) + _2206;
        _2273 = (((_2330 * cbLight._m0[_2279].z) * _2343) * _2344) + _2207;
    }
    float _2379;
    float _2381;
    float _2383;
    if (_2008)
    {
        _2379 = _2269;
        _2381 = _2271;
        _2383 = _2273;
    }
    else
    {
        uint _2390 = _1912 + 3u;
        uint _2394 = _1912 + 11u;
        float _2408 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2390].w)) * _711) * 0.949999988079071044921875);
        float _2409 = _2408 * _2408;
        float _2410 = cbLight._m0[_2390].x + _786;
        float _2411 = cbLight._m0[_2390].y + _787;
        float _2412 = cbLight._m0[_2390].z + _788;
        float _2416 = inversesqrt(dot(vec3(_2410, _2411, _2412), vec3(_2410, _2411, _2412)));
        float _2417 = _2416 * _2410;
        float _2418 = _2416 * _2411;
        float _2419 = _2416 * _2412;
        float _2420 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2390].xyz));
        float _4348 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2423 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _2424 = dot(vec3(_708, _709, _710), vec3(_2417, _2418, _2419));
        float _4359 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2427 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2428 = dot(vec3(cbLight._m0[_2390].xyz), vec3(_2417, _2418, _2419));
        float _4370 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2432 = _2409 * _2409;
        float _2436 = ((_2427 * _2427) * (_2432 + (-1.0))) + 1.0;
        float _2445 = (exp2(log2(1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2446 = 1.0 - _2409;
        float _2456 = (0.5 / (((_2082 * ((_2423 * _2446) + _2409)) + 9.9999999392252902907785028219223e-09) + (((_2082 * _2446) + _2409) * _2423))) * _2423;
        float _4381 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2458 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2432 / ((_2436 * _2436) * 3.141590118408203125));
        float _2459 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
        _2379 = (((_2445 * cbLight._m0[_2394].x) * _2458) * _2459) + _2269;
        _2381 = (((_2445 * cbLight._m0[_2394].y) * _2458) * _2459) + _2271;
        _2383 = (((_2445 * cbLight._m0[_2394].z) * _2458) * _2459) + _2273;
    }
    float _2594;
    float _2596;
    float _2598;
    float _2600;
    float _2602;
    float _2604;
    if (_1910.y == 0u)
    {
        float _2534 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2535 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2534;
        float _2536 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2534;
        float _2537 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2534;
        uvec4 _2549 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2550 = _2549.x;
        uint _2561 = uint((float(_2549.y) * floor(float(uint(cbSceneParam._m0[85u].y * _795) / _2550))) + floor(float(uint(cbSceneParam._m0[85u].x * _794) / _2550)));
        float _2571 = (log2(_2537 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2572 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        uint _2575 = uint(isnan(14.0) ? _2572 : (isnan(_2572) ? 14.0 : min(_2572, 14.0)));
        uvec4 _2580 = texelFetch(g_lightClusterGridBuffer, int(((_2575 << 2u) + (_2561 << 6u)) >> 2u));
        uint _2581 = _2580.x;
        uint _2582 = _2549.z;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        if (((((1u << ((_2582 >> 4u) & 15u)) + 4294967295u) & _2581) == 0u) || ((_2582 & 240u) == 0u))
        {
            _2682 = 0.0;
            _2684 = 0.0;
            _2686 = 0.0;
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
        }
        else
        {
            float _2683;
            float _2685;
            float _2687;
            float _2689;
            float _2691;
            float _2693;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            float _2831 = 0.0;
            uint _2832 = 0u;
            uint _2841;
            bool _2842;
            for (;;)
            {
                _2841 = texelFetch(g_lightClassification, int((((_2575 << 5u) + (_2561 << 9u)) + (_2832 << 2u)) >> 2u)).x;
                _2842 = _2841 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2842)
                {
                    frontier_phi_61_pred = _2826;
                    frontier_phi_61_pred_1 = _2831;
                    frontier_phi_61_pred_2 = _2830;
                    frontier_phi_61_pred_3 = _2829;
                    frontier_phi_61_pred_4 = _2828;
                    frontier_phi_61_pred_5 = _2827;
                }
                else
                {
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    uint _2956;
                    _2950 = _2826;
                    _2951 = _2827;
                    _2952 = _2828;
                    _2953 = _2829;
                    _2954 = _2830;
                    _2955 = _2831;
                    _2956 = _2841;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    for (;;)
                    {
                        uint _2960 = uint(findLSB(_2956)) + (_2832 << 5u);
                        uint _2957 = (_2956 + 4294967295u) & _2956;
                        uint _2962 = _2960 * 48u;
                        vec4 _2976 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2962)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 3u)).x));
                        uint _2982 = (_2960 * 48u) + 4u;
                        vec4 _2995 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2982)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 3u)).x));
                        uint _3001 = (_2960 * 48u) + 8u;
                        vec3 _3012 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3001)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 2u)).x));
                        float _3016 = _2976.x - _2535;
                        float _3017 = _2976.y - _2536;
                        float _3018 = _2976.z - _2537;
                        float _3019 = dot(vec3(_3016, _3017, _3018), vec3(_3016, _3017, _3018));
                        float _3022 = inversesqrt(_3019);
                        float _3023 = _3022 * _3016;
                        float _3024 = _3022 * _3017;
                        float _3025 = _3022 * _3018;
                        float _3026 = dot(vec3(_816, _819, _822), vec3(_3023, _3024, _3025));
                        float _3031 = 1.0 - (_3019 * _2976.w);
                        float _4407 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3032 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                        float _3033 = sqrt(_3019) * _2995.w;
                        float _3036 = 1.39999997615814208984375 / (_3033 + 1.39999997615814208984375);
                        float _3037 = _3036 * _3036;
                        float _3040 = ((1.0 - _3037) * _3026) + _3037;
                        float _3043 = _3033 * _3033;
                        float _3047 = ((isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0))) * _3032) / ((_3043 * 0.699999988079071044921875) + 1.0);
                        float _3051 = (-0.0) - _2535;
                        float _3052 = (-0.0) - _2536;
                        float _3053 = (-0.0) - _2537;
                        float _3057 = inversesqrt(dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053)));
                        float _3058 = _3057 * _3051;
                        float _3059 = _3057 * _3052;
                        float _3060 = _3057 * _3053;
                        float _3068 = exp2(log2(1.0 / ((_3043 * 3.5) + 5.0)) * 0.25);
                        float _3069 = 1.0 - _876;
                        float _3076 = sqrt(1.0 - ((1.0 - (_3069 * _3069)) * (1.0 - (_3068 * _3068))));
                        float _3077 = _3076 * _3076;
                        float _3078 = _3077 * _3077;
                        float _3079 = _3058 + _3023;
                        float _3080 = _3059 + _3024;
                        float _3081 = _3060 + _3025;
                        float _3085 = inversesqrt(dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081)));
                        float _3089 = dot(vec3(_816, _819, _822), vec3(_3058, _3059, _3060));
                        float _4423 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3092 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                        float _3093 = dot(vec3(_816, _819, _822), vec3(_3085 * _3079, _3085 * _3080, _3085 * _3081));
                        float _4434 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3096 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                        float _3100 = ((_3096 * _3096) * (_3078 + (-1.0))) + 1.0;
                        float _3101 = _3036 * _3077;
                        float _3102 = _3101 * _3101;
                        float _3105 = ((1.0 - _3102) * _3026) + _3102;
                        float _4445 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                        float _3106 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                        float _3107 = 1.0 - _3077;
                        float _3117 = (0.5 / (((_3106 * ((_3092 * _3107) + _3077)) + 9.9999999392252902907785028219223e-09) + (((_3106 * _3107) + _3077) * _3092))) * _3106;
                        float _4456 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3128 = (((_3078 * 3.1415927410125732421875) * (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) / ((_3100 * _3100) * ((_3043 * 2.1991131305694580078125) + 3.141590118408203125))) * _3032;
                        _2885 = (_3047 * _2995.x) + _2953;
                        _2886 = (_3047 * _2995.y) + _2954;
                        _2887 = (_3047 * _2995.z) + _2955;
                        _2882 = (_3128 * _3012.x) + _2950;
                        _2883 = (_3128 * _3012.y) + _2951;
                        _2884 = (_3128 * _3012.z) + _2952;
                        if (_2957 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2950 = _2882;
                            _2951 = _2883;
                            _2952 = _2884;
                            _2953 = _2885;
                            _2954 = _2886;
                            _2955 = _2887;
                            _2956 = _2957;
                        }
                    }
                    frontier_phi_61_pred = _2882;
                    frontier_phi_61_pred_1 = _2887;
                    frontier_phi_61_pred_2 = _2886;
                    frontier_phi_61_pred_3 = _2885;
                    frontier_phi_61_pred_4 = _2884;
                    frontier_phi_61_pred_5 = _2883;
                }
                _2683 = frontier_phi_61_pred;
                _2693 = frontier_phi_61_pred_1;
                _2691 = frontier_phi_61_pred_2;
                _2689 = frontier_phi_61_pred_3;
                _2687 = frontier_phi_61_pred_4;
                _2685 = frontier_phi_61_pred_5;
                uint _2833 = _2832 + 1u;
                if (_2833 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2826 = _2683;
                    _2827 = _2685;
                    _2828 = _2687;
                    _2829 = _2689;
                    _2830 = _2691;
                    _2831 = _2693;
                    _2832 = _2833;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2682 = _2683;
            _2684 = _2685;
            _2686 = _2687;
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
        }
        uvec4 _2696 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2697 = _2696.z;
        uint _2699 = (_2697 >> 8u) & 15u;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        if (((4294967295u << _2699) & _2581) == 0u)
        {
            _2794 = _2682;
            _2796 = _2684;
            _2798 = _2686;
            _2800 = _2688;
            _2802 = _2690;
            _2804 = _2692;
        }
        else
        {
            float _2819 = inversesqrt(dot(vec3(_2535, _2536, _2537), vec3(_2535, _2536, _2537)));
            float _2820 = _2819 * _2535;
            float _2821 = _2819 * _2536;
            float _2822 = _2819 * _2537;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2699 < ((_2697 >> 12u) & 15u))
            {
                float _2795;
                float _2797;
                float _2799;
                float _2801;
                float _2803;
                float _2805;
                float _2933 = _2682;
                float _2934 = _2684;
                float _2935 = _2686;
                float _2936 = _2688;
                float _2937 = _2690;
                float _2938 = _2692;
                uint _2939 = _2699;
                uint _2948;
                bool _2949;
                for (;;)
                {
                    _2948 = texelFetch(g_lightClassification, int((((_2575 << 5u) + (_2561 << 9u)) + (_2939 << 2u)) >> 2u)).x;
                    _2949 = _2948 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2949)
                    {
                        frontier_phi_67_pred = _2936;
                        frontier_phi_67_pred_1 = _2937;
                        frontier_phi_67_pred_2 = _2938;
                        frontier_phi_67_pred_3 = _2935;
                        frontier_phi_67_pred_4 = _2934;
                        frontier_phi_67_pred_5 = _2933;
                    }
                    else
                    {
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3146 = _2933;
                        float _3147 = _2934;
                        float _3148 = _2935;
                        float _3149 = _2936;
                        float _3150 = _2937;
                        float _3151 = _2938;
                        uint _3152 = _2948;
                        uint _3153;
                        vec4 _3178;
                        float _3179;
                        vec4 _3194;
                        vec3 _3206;
                        vec4 _3221;
                        vec4 _3236;
                        float _3282;
                        bool _3283;
                        for (;;)
                        {
                            uint _3163 = ((_2939 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3152));
                            _3153 = (_3152 + 4294967295u) & _3152;
                            uint _3165 = _3163 * 40u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            _3179 = _3178.w;
                            uint _3181 = (_3163 * 40u) + 4u;
                            _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3196 = (_3163 * 40u) + 8u;
                            _3206 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x));
                            uint _3208 = (_3163 * 40u) + 16u;
                            _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            uint _3223 = (_3163 * 40u) + 20u;
                            _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            uint _3238 = (_3163 * 40u) + 24u;
                            vec4 _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3257 = (_3163 * 40u) + 28u;
                            vec4 _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            _3282 = fma(_2537, _3270.z, fma(_2536, _3270.y, _3270.x * _2535)) + _3270.w;
                            _3283 = !((fma(_2537, _3251.z, fma(_2536, _3251.y, _3251.x * _2535)) + _3251.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3283)
                            {
                                float _3310 = _3178.x - _2535;
                                float _3311 = _3178.y - _2536;
                                float _3312 = _3178.z - _2537;
                                float _3313 = dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312));
                                float _3316 = inversesqrt(_3313);
                                float _3317 = _3316 * _3310;
                                float _3318 = _3316 * _3311;
                                float _3319 = _3316 * _3312;
                                float _3323 = 1.0 - (_3313 / (_3179 * _3179));
                                float _4467 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3324 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                                float _3328 = sqrt(_3313) * _3194.w;
                                float _3330 = 1.39999997615814208984375 / (_3328 + 1.39999997615814208984375);
                                float _3331 = _3330 * _3330;
                                float _3334 = ((1.0 - _3331) * dot(vec3(_3317, _3318, _3319), vec3(_816, _819, _822))) + _3331;
                                float _3337 = _3328 * _3328;
                                float _3341 = (fma(_2537, _3221.z, fma(_2536, _3221.y, _3221.x * _2535)) + _3221.w) / _3282;
                                float _3342 = (fma(_2537, _3236.z, fma(_2536, _3236.y, _3236.x * _2535)) + _3236.w) / _3282;
                                float _3346 = 1.0 - dot(vec2(_3341, _3342), vec2(_3341, _3342));
                                float _4483 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3347 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                                float _3348 = _3347 * (((isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0))) * _3324) / ((_3337 * 0.699999988079071044921875) + 1.0));
                                float _3360 = exp2(log2(1.0 / ((_3337 * 3.5) + 5.0)) * 0.25);
                                float _3361 = 1.0 - _876;
                                float _3368 = sqrt(1.0 - ((1.0 - (_3361 * _3361)) * (1.0 - (_3360 * _3360))));
                                float _3369 = _3368 * _3368;
                                float _3370 = _3369 * _3369;
                                float _3371 = _3317 - _2820;
                                float _3372 = _3318 - _2821;
                                float _3373 = _3319 - _2822;
                                float _3377 = inversesqrt(dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373)));
                                float _3381 = dot(vec3(_816, _819, _822), vec3((-0.0) - _2820, (-0.0) - _2821, (-0.0) - _2822));
                                float _4494 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3384 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3385 = dot(vec3(_816, _819, _822), vec3(_3377 * _3371, _3377 * _3372, _3377 * _3373));
                                float _4505 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3388 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                                float _3392 = ((_3388 * _3388) * (_3370 + (-1.0))) + 1.0;
                                float _3393 = _3330 * _3369;
                                float _3394 = _3393 * _3393;
                                float _3400 = ((1.0 - _3394) * dot(vec3(_816, _819, _822), vec3(_3317, _3318, _3319))) + _3394;
                                float _4516 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3401 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                                float _3402 = 1.0 - _3369;
                                float _3412 = (0.5 / (((_3401 * ((_3384 * _3402) + _3369)) + 9.9999999392252902907785028219223e-09) + (((_3401 * _3402) + _3369) * _3384))) * _3401;
                                float _4527 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3422 = (_3347 * _3324) * (((_3370 * 3.1415927410125732421875) * (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) / ((_3392 * _3392) * ((_3337 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3422 * _3206.x;
                                frontier_phi_73_pred_1 = _3422 * _3206.y;
                                frontier_phi_73_pred_2 = _3348 * _3194.z;
                                frontier_phi_73_pred_3 = _3348 * _3194.y;
                                frontier_phi_73_pred_4 = _3348 * _3194.x;
                                frontier_phi_73_pred_5 = _3422 * _3206.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3426 = frontier_phi_73_pred;
                            _3427 = frontier_phi_73_pred_1;
                            _3431 = frontier_phi_73_pred_2;
                            _3430 = frontier_phi_73_pred_3;
                            _3429 = frontier_phi_73_pred_4;
                            _3428 = frontier_phi_73_pred_5;
                            _3136 = _3429 + _3149;
                            _3137 = _3430 + _3150;
                            _3138 = _3431 + _3151;
                            _3133 = _3426 + _3146;
                            _3134 = _3427 + _3147;
                            _3135 = _3428 + _3148;
                            if (_3153 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3146 = _3133;
                                _3147 = _3134;
                                _3148 = _3135;
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3153;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3136;
                        frontier_phi_67_pred_1 = _3137;
                        frontier_phi_67_pred_2 = _3138;
                        frontier_phi_67_pred_3 = _3135;
                        frontier_phi_67_pred_4 = _3134;
                        frontier_phi_67_pred_5 = _3133;
                    }
                    _2801 = frontier_phi_67_pred;
                    _2803 = frontier_phi_67_pred_1;
                    _2805 = frontier_phi_67_pred_2;
                    _2799 = frontier_phi_67_pred_3;
                    _2797 = frontier_phi_67_pred_4;
                    _2795 = frontier_phi_67_pred_5;
                    uint _2940 = _2939 + 1u;
                    if (_2940 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2933 = _2795;
                        _2934 = _2797;
                        _2935 = _2799;
                        _2936 = _2801;
                        _2937 = _2803;
                        _2938 = _2805;
                        _2939 = _2940;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2803;
                frontier_phi_55_56_ladder_1 = _2805;
                frontier_phi_55_56_ladder_2 = _2801;
                frontier_phi_55_56_ladder_3 = _2799;
                frontier_phi_55_56_ladder_4 = _2797;
                frontier_phi_55_56_ladder_5 = _2795;
            }
            else
            {
                frontier_phi_55_56_ladder = _2690;
                frontier_phi_55_56_ladder_1 = _2692;
                frontier_phi_55_56_ladder_2 = _2688;
                frontier_phi_55_56_ladder_3 = _2686;
                frontier_phi_55_56_ladder_4 = _2684;
                frontier_phi_55_56_ladder_5 = _2682;
            }
            _2794 = frontier_phi_55_56_ladder_5;
            _2796 = frontier_phi_55_56_ladder_4;
            _2798 = frontier_phi_55_56_ladder_3;
            _2800 = frontier_phi_55_56_ladder_2;
            _2802 = frontier_phi_55_56_ladder;
            _2804 = frontier_phi_55_56_ladder_1;
        }
        float _2809 = isnan(1.0) ? _860 : (isnan(_860) ? 1.0 : min(_860, 1.0));
        _2594 = (_2809 * _2800) + _2046;
        _2596 = (_2809 * _2802) + _2048;
        _2598 = (_2809 * _2804) + _2050;
        _2600 = ((_2794 * 0.039999999105930328369140625) * _2809) + _2379;
        _2602 = ((_2796 * 0.039999999105930328369140625) * _2809) + _2381;
        _2604 = ((_2798 * 0.039999999105930328369140625) * _2809) + _2383;
    }
    else
    {
        _2594 = _2046;
        _2596 = _2048;
        _2598 = _2050;
        _2600 = _2379;
        _2602 = _2381;
        _2604 = _2383;
    }
    float _4543 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4554 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4565 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    uint _2624 = _267 + 6u;
    float _2632 = _794 / cbSceneParam._m0[86u].x;
    float _2633 = _795 / cbSceneParam._m0[86u].y;
    vec4 _2647 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2632, _2633, (log2((isnan(cbSceneParam._m0[77u].w) ? _729 : (isnan(_729) ? cbSceneParam._m0[77u].w : min(_729, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2649 = _2647.x;
    float _2650 = _2647.y;
    float _2651 = _2647.z;
    float _2652 = _2647.w;
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    if (_729 > cbSceneParam._m0[78u].w)
    {
        float _2707 = isnan(_729) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _729 : min(cbSceneParam._m0[80u].w, _729));
        float _2708 = _2707 / _729;
        float _2719 = _2708 * _779;
        float _2720 = _780 * _2708;
        float _2721 = (-0.0) - _2720;
        float _2722 = _2708 * _781;
        float _2724 = (cbSceneParam._m0[77u].w * _2721) / _2707;
        float _2725 = _2724 + cbSceneParam._m0[79u].w;
        float _2726 = cbSceneParam._m0[79u].w - _2720;
        float _2732 = sqrt(((_2719 * _2719) + (_2720 * _2720)) + (_2722 * _2722));
        float _2735 = (1.0 - (cbSceneParam._m0[77u].w / _2707)) * _2732;
        float _2740 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2742 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2895;
        if (abs((_2721 - _2724) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2895 = ((((_2725 > 0.0) ? exp2(_2740 * _2725) : (2.0 - exp2(_2742 * _2725))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2735;
        }
        else
        {
            float _2855 = 1.0 / cbSceneParam._m0[80u].x;
            float _2856 = isnan(_2726) ? _2725 : (isnan(_2725) ? _2726 : max(_2725, _2726));
            float _2857 = isnan(_2726) ? _2725 : (isnan(_2725) ? _2726 : min(_2725, _2726));
            float _2866 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : min(_2856, 0.0));
            float _2867 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : min(_2857, 0.0));
            _2895 = ((abs(_2732 / _2721) * cbSceneParam._m0[80u].y) * ((((_2866 - _2867) * 2.0) - ((exp2(_2740 * (isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0)))) - exp2(_2740 * (isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0))))) * _2855)) - ((exp2(_2742 * _2866) - exp2(_2742 * _2867)) * _2855))) + (_2735 * cbSceneParam._m0[80u].z);
        }
        vec4 _2897 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2632, _2633, 1.0), 0.0);
        float _2906 = exp2((_2895 * (-1.44269502162933349609375)) * (1.0 - _2897.w));
        float _2907 = log2(_2906);
        float _2923 = log2(_2652);
        _2744 = (exp2(_2923 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2907 * cbSceneParam._m0[78u].x)) * _2897.x) / cbSceneParam._m0[78u].x)) + _2649;
        _2746 = (exp2(_2923 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2907 * cbSceneParam._m0[78u].y)) * _2897.y) / cbSceneParam._m0[78u].y)) + _2650;
        _2748 = (exp2(_2923 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2907 * cbSceneParam._m0[78u].z)) * _2897.z) / cbSceneParam._m0[78u].z)) + _2651;
        _2750 = _2906 * _2652;
    }
    else
    {
        _2744 = _2649;
        _2746 = _2650;
        _2748 = _2651;
        _2750 = _2652;
    }
    float _2762 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2763 = _2762 == 3.0;
    float _2764 = log2(_2750);
    float _2771 = exp2(_2764 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2594 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _860))) + ((_2600 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1665)) * cbPerFrame._m0[3u].x));
    float _2772 = exp2(_2764 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2596 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _860))) + ((_2602 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1665)) * cbPerFrame._m0[3u].x));
    float _2773 = exp2(_2764 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2598 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _860))) + ((_2604 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1665)) * cbPerFrame._m0[3u].x));
    float _2782 = (_2762 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2782 * (_2763 ? _2771 : (_2771 + (cbSceneParam._m0[72u].w * _2744)));
    SV_Target.y = _2782 * (_2763 ? _2772 : (_2772 + (cbSceneParam._m0[72u].w * _2746)));
    SV_Target.z = _2782 * (_2763 ? _2773 : (_2773 + (cbSceneParam._m0[72u].w * _2748)));
    SV_Target.w = cbInstanceData._m0[_2624].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2624].w;
}


