#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1003;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _292 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _246) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _247) + cbTextureTilingScale._m0[20u].w));
    vec4 _318 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _322 = _318.z;
    float _326 = (_318.x * 2.0) + (-1.0);
    float _327 = (_318.y * 2.0) + (-1.0);
    float _328 = dot(vec2(_326, _327), vec2(_326, _327));
    float _3595 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _334 = sqrt(1.0 - (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))));
    float _339 = _326 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_292.x * 2.0) + (-1.0)));
    float _340 = _327 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_292.y * 2.0) + (-1.0)));
    float _343 = fma(_334, _214, fma(_340, _221, _339 * _207));
    float _346 = fma(_334, _215, fma(_340, _222, _339 * _208));
    float _349 = fma(_334, _216, fma(_340, _223, _339 * _209));
    float _353 = inversesqrt(dot(vec3(_343, _346, _349), vec3(_343, _346, _349)));
    vec4 _389 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _391 = _389.x;
    float _392 = 1.0 - _391;
    float _401 = (cbMtdParam._m0[19u].x + dot(vec4(_353 * _343, _353 * _346, _353 * _349, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_391 - _392) * cbMtdParam._m0[24u].z) + _392) * cbMtdParam._m0[21u].z);
    float _3606 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _409 = (_402 * (cbMtdParam._m0[17u].x - _272)) + _272;
    float _410 = (_402 * (cbMtdParam._m0[17u].y - _273)) + _273;
    float _411 = (_402 * (cbMtdParam._m0[17u].z - _274)) + _274;
    float _416 = (((_292.z - _322) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _322;
    vec4 _429 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _436 = (_429.x * 2.0) + (-1.0);
    float _437 = (_429.y * 2.0) + (-1.0);
    float _438 = dot(vec2(_436, _437), vec2(_436, _437));
    float _3617 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _446 = ((_429.z - _416) * _402) + _416;
    float _456 = ((sqrt(1.0 - (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) - _334) * _402) + _334;
    float _459 = (((_436 - _339) * _402) + _339) + (cbMtdParam._m0[21u].x * _339);
    float _460 = (((_437 - _340) * _402) + _340) + (cbMtdParam._m0[21u].x * _340);
    float _465 = cbMtdParam._m0[22u].x + _318.w;
    float _468 = fma(_456, _214, fma(_460, _221, _459 * _207));
    float _471 = fma(_456, _215, fma(_460, _222, _459 * _208));
    float _474 = fma(_456, _216, fma(_460, _223, _459 * _209));
    float _478 = inversesqrt(dot(vec3(_468, _471, _474), vec3(_468, _471, _474)));
    float _479 = _478 * _468;
    float _480 = _478 * _471;
    float _481 = _478 * _474;
    float _3628 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _482 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _3639 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3650 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _3661 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _3672 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _500 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _551 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _541);
    float _552 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _541);
    float _553 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _541);
    float _557 = inversesqrt(dot(vec3(_551, _552, _553), vec3(_551, _552, _553)));
    float _558 = _551 * _557;
    float _559 = _552 * _557;
    float _560 = _553 * _557;
    float _566 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _567 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _588 = fma(_481, cbSceneParam._m0[5u].z, fma(_480, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _479));
    float _591 = fma(_481, cbSceneParam._m0[6u].z, fma(_480, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _479));
    float _594 = fma(_481, cbSceneParam._m0[7u].z, fma(_480, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _479));
    uint _608 = (_226 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _614 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0)))) * cbInstanceData._m0[_608].x;
    float _615 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) * cbInstanceData._m0[_608].y;
    float _616 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) * cbInstanceData._m0[_608].z;
    float _3683 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _3694 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _618 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _3705 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    vec4 _628 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _566, cbSceneParam._m0[86u].y * _567));
    float _632 = ((isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * TEXCOORD_5.w) * _628.x;
    float _633 = dot(vec3(_479, _480, _481), vec3(_558, _559, _560));
    float _636 = _633 * 2.0;
    float _640 = (_636 * _479) - _558;
    float _641 = (_636 * _480) - _559;
    float _642 = (_636 * _481) - _560;
    float _646 = abs(dot(vec3(_558, _559, _560), vec3(_479, _480, _481)));
    float _3716 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _648 = sqrt(_482);
    float _661 = exp2((_648 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_648 * 3.0));
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1002;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _727 = fma(_701, cbModelParam._m0[26u].z, fma(_697, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _693));
        float _731 = fma(_701, cbModelParam._m0[27u].z, fma(_697, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _693));
        float _735 = fma(_701, cbModelParam._m0[28u].z, fma(_697, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _693));
        float _760 = _693 + _479;
        float _761 = _697 + _480;
        float _762 = _701 + _481;
        float _772 = fma(_762, cbModelParam._m0[26u].z, fma(_761, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _760)) - _727;
        float _773 = fma(_762, cbModelParam._m0[27u].z, fma(_761, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _760)) - _731;
        float _774 = fma(_762, cbModelParam._m0[28u].z, fma(_761, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _760)) - _735;
        float _778 = inversesqrt(dot(vec3(_772, _773, _774), vec3(_772, _773, _774)));
        float _791 = ((_778 * _772) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_727 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _792 = ((_778 * _773) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_731 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _793 = ((_778 * _774) / cbModelParam._m0[34u].z) + ((((((_735 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _796 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        vec4 _803 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        float _830 = exp2((_796.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_796.x + (-0.5));
        float _832 = _830 * (_796.y + (-0.5));
        float _833 = _830 * (_796.z + (-0.5));
        float _840 = exp2((_803.w + (-0.5)) * 20.0) * 2.0;
        float _841 = _840 * (_803.x + (-0.5));
        float _842 = _840 * (_803.y + (-0.5));
        float _843 = _840 * (_803.z + (-0.5));
        float _850 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _851 = _850 * (_810.x + (-0.5));
        float _852 = _850 * (_810.y + (-0.5));
        float _853 = _850 * (_810.z + (-0.5));
        float _860 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _861 = _860 * (_817.x + (-0.5));
        float _862 = _860 * (_817.y + (-0.5));
        float _863 = _860 * (_817.z + (-0.5));
        float _864 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _865 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = _831 * 0.5;
        float _868 = _841 * 0.5;
        float _869 = _851 * 0.5;
        float _870 = dot(vec3(_867, _868, _869), vec3(_867, _868, _869));
        float _875 = (_870 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_870);
        float _884 = (dot(vec3(_479, _480, _481), vec3(_875 * _867, _875 * _868, _875 * _869)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _894 = sqrt(((_868 * _868) + (_867 * _867)) + (_869 * _869)) / (_864 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _896 = _895 * 2.0;
        float _900 = (1.0 - _895) / (_895 + 1.0);
        float _3764 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _910 = ((((1.0 - _901) * (_896 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_896 + 1.0))) + _901) * _864;
        float _911 = _832 * 0.5;
        float _912 = _842 * 0.5;
        float _913 = _852 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _927 = (dot(vec3(_479, _480, _481), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _936 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_865 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3797 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_938 + 1.0))) + _943) * _865;
        float _953 = _833 * 0.5;
        float _954 = _843 * 0.5;
        float _955 = _853 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_479, _480, _481), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3830 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_980 + 1.0))) + _985) * _866;
        _1002 = _833;
        _1004 = _832;
        _1005 = _831;
        _1006 = _843;
        _1007 = _842;
        _1008 = _841;
        _1009 = _853;
        _1010 = _852;
        _1011 = _851;
        _1012 = _866;
        _1013 = _865;
        _1014 = _864;
        _1015 = cbModelParam._m0[36u].z * (isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0)));
        _1016 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1017 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
    }
    else
    {
        _1002 = _1003;
        _1004 = _1003;
        _1005 = _1003;
        _1006 = _1003;
        _1007 = _1003;
        _1008 = _1003;
        _1009 = _1003;
        _1010 = _1003;
        _1011 = _1003;
        _1012 = _1003;
        _1013 = _1003;
        _1014 = _1003;
        _1015 = 0.0;
        _1016 = 0.0;
        _1017 = 0.0;
    }
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1042 = fma(_701, cbModelParam._m0[30u].z, fma(_697, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _693));
        float _1046 = fma(_701, cbModelParam._m0[31u].z, fma(_697, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _693));
        float _1050 = fma(_701, cbModelParam._m0[32u].z, fma(_697, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _693));
        float _1073 = _693 + _479;
        float _1074 = _697 + _480;
        float _1075 = _701 + _481;
        float _1085 = fma(_1075, cbModelParam._m0[30u].z, fma(_1074, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1073)) - _1042;
        float _1086 = fma(_1075, cbModelParam._m0[31u].z, fma(_1074, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1073)) - _1046;
        float _1087 = fma(_1075, cbModelParam._m0[32u].z, fma(_1074, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1073)) - _1050;
        float _1091 = inversesqrt(dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087)));
        float _1104 = ((_1091 * _1085) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1042 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1091 * _1086) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1046 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1091 * _1087) / cbModelParam._m0[35u].z) + ((((((_1050 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        float _1141 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1108.x + (-0.5));
        float _1143 = _1141 * (_1108.y + (-0.5));
        float _1144 = _1141 * (_1108.z + (-0.5));
        float _1151 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1115.x + (-0.5));
        float _1153 = _1151 * (_1115.y + (-0.5));
        float _1154 = _1151 * (_1115.z + (-0.5));
        float _1161 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1122.x + (-0.5));
        float _1163 = _1161 * (_1122.y + (-0.5));
        float _1164 = _1161 * (_1122.z + (-0.5));
        float _1171 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1129.x + (-0.5));
        float _1173 = _1171 * (_1129.y + (-0.5));
        float _1174 = _1171 * (_1129.z + (-0.5));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = _1142 * 0.5;
        float _1179 = _1152 * 0.5;
        float _1180 = _1162 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_479, _480, _481), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3893 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1205 + 1.0))) + _1210) * _1175;
        float _1220 = _1143 * 0.5;
        float _1221 = _1153 * 0.5;
        float _1222 = _1163 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_479, _480, _481), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _3926 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1247 + 1.0))) + _1252) * _1176;
        float _1262 = _1144 * 0.5;
        float _1263 = _1154 * 0.5;
        float _1264 = _1164 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1278 = (dot(vec3(_479, _480, _481), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1287 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _3959 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1289 + 1.0))) + _1294) * _1177;
        _1311 = _1144;
        _1312 = _1143;
        _1313 = _1142;
        _1314 = _1154;
        _1315 = _1153;
        _1316 = _1152;
        _1317 = _1164;
        _1318 = _1163;
        _1319 = _1162;
        _1320 = _1177;
        _1321 = _1176;
        _1322 = _1175;
        _1323 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
        _1324 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
        _1325 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
    }
    else
    {
        _1311 = _1003;
        _1312 = _1003;
        _1313 = _1003;
        _1314 = _1003;
        _1315 = _1003;
        _1316 = _1003;
        _1317 = _1003;
        _1318 = _1003;
        _1319 = _1003;
        _1320 = _1003;
        _1321 = _1003;
        _1322 = _1003;
        _1323 = 0.0;
        _1324 = 0.0;
        _1325 = 0.0;
    }
    float _1335 = (cbModelParam._m0[1u].x * (_1323 - _1015)) + _1015;
    float _1336 = (cbModelParam._m0[1u].x * (_1324 - _1016)) + _1016;
    float _1337 = (cbModelParam._m0[1u].x * (_1325 - _1017)) + _1017;
    float _1358 = fma(_1337, cbSceneParam._m0[89u].z, fma(_1336, cbSceneParam._m0[89u].y, _1335 * cbSceneParam._m0[89u].x));
    float _1361 = fma(_1337, cbSceneParam._m0[90u].z, fma(_1336, cbSceneParam._m0[90u].y, _1335 * cbSceneParam._m0[90u].x));
    float _1364 = fma(_1337, cbSceneParam._m0[91u].z, fma(_1336, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1335));
    float _1379 = _640 * 0.5;
    float _1380 = _641 * 0.5;
    float _1381 = _642 * 0.5;
    float _1382 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1313, _1316, _1319, _1322));
    float _1385 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1312, _1315, _1318, _1321));
    float _1388 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1311, _1314, _1317, _1320));
    float _1422;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1395 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1002, _1006, _1009, _1012));
        float _1399 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1004, _1007, _1010, _1013));
        float _1403 = dot(vec4(_1379, _1380, _1381, 1.0), vec4(_1005, _1008, _1011, _1014));
        float _1410 = dot(vec4(cbModelParam._m0[39u]), vec4(_1379, _1380, _1381, 1.0));
        _1422 = dot(vec3(isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)), isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1410) ? 0.0 : (isnan(0.0) ? _1410 : max(0.0, _1410))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1422 = 1.0;
    }
    float _1433;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1424 = dot(vec4(cbModelParam._m0[40u]), vec4(_1379, _1380, _1381, 1.0));
        _1433 = dot(vec3(isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1424) ? 0.0 : (isnan(0.0) ? _1424 : max(0.0, _1424))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1433 = 1.0;
    }
    float _1437 = (_1433 * cbModelParam._m0[1u].x) + (_1422 * (1.0 - cbModelParam._m0[1u].x));
    float _1447 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _482);
    float _1448 = isnan(_1447) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1447 : min(cbModelParam._m0[25u].z, _1447));
    float _1529;
    float _1531;
    float _1533;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1496 = fma(_701, cbModelParam._m0[13u].z, fma(_697, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _693)) + cbModelParam._m0[13u].w;
        float _1500 = fma(_701, cbModelParam._m0[14u].z, fma(_697, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _693)) + cbModelParam._m0[14u].w;
        float _1504 = fma(_701, cbModelParam._m0[15u].z, fma(_697, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _693)) + cbModelParam._m0[15u].w;
        float _1507 = fma(_642, cbModelParam._m0[13u].z, fma(_641, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _640));
        float _1510 = fma(_642, cbModelParam._m0[14u].z, fma(_641, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _640));
        float _1513 = fma(_642, cbModelParam._m0[15u].z, fma(_641, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _640));
        float _1541;
        if (_1507 > 0.0)
        {
            _1541 = abs((1.0 - _1496) / _1507);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1496 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1541 = frontier_phi_14_12_ladder;
        }
        float _1712;
        if (_1510 > 0.0)
        {
            _1712 = abs((1.0 - _1500) / _1510);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1500 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1712 = frontier_phi_23_19_ladder;
        }
        float _2008;
        if (_1513 > 0.0)
        {
            _2008 = abs((1.0 - _1504) / _1513);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1504 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2008 = frontier_phi_35_30_ladder;
        }
        float _2010 = isnan(_1712) ? _1541 : (isnan(_1541) ? _1712 : min(_1541, _1712));
        float _2011 = isnan(_2008) ? _2010 : (isnan(_2010) ? _2008 : min(_2010, _2008));
        float _2015 = (_2011 * _1507) + _1496;
        float _2016 = (_2011 * _1510) + _1500;
        float _2017 = (_2011 * _1513) + _1504;
        float _2018 = _2011 * 9.9999997473787516355514526367188e-05;
        float _2020 = (-1.0) - _2018;
        float _2022 = _2018 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2017 > _2022) || ((_2017 < _2020) || ((_2016 > _2022) || ((_2016 < _2020) || ((_2015 < _2020) || (_2015 > _2022))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2162 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2017, cbModelParam._m0[9u].z, fma(_2016, cbModelParam._m0[9u].y, _2015 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2017, cbModelParam._m0[10u].z, fma(_2016, cbModelParam._m0[10u].y, _2015 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2017, cbModelParam._m0[11u].z, fma(_2016, cbModelParam._m0[11u].y, _2015 * cbModelParam._m0[11u].x))), _1448);
            frontier_phi_13_35_ladder = _2162.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2162.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2162.x * cbModelParam._m0[1u].y;
        }
        _1529 = frontier_phi_13_35_ladder_2;
        _1531 = frontier_phi_13_35_ladder_1;
        _1533 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1517 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_640, _641, _642), _1448);
        _1529 = _1517.x * cbModelParam._m0[1u].y;
        _1531 = _1517.y * cbModelParam._m0[1u].y;
        _1533 = _1517.z * cbModelParam._m0[1u].y;
    }
    float _1537 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _482);
    float _1538 = isnan(_1537) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1537 : min(cbModelParam._m0[25u].w, _1537));
    float _1628;
    float _1630;
    float _1632;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1592 = fma(_701, cbModelParam._m0[21u].z, fma(_697, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _693)) + cbModelParam._m0[21u].w;
        float _1596 = fma(_701, cbModelParam._m0[22u].z, fma(_697, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _693)) + cbModelParam._m0[22u].w;
        float _1600 = fma(_701, cbModelParam._m0[23u].z, fma(_697, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _693)) + cbModelParam._m0[23u].w;
        float _1603 = fma(_642, cbModelParam._m0[21u].z, fma(_641, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _640));
        float _1606 = fma(_642, cbModelParam._m0[22u].z, fma(_641, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _640));
        float _1609 = fma(_642, cbModelParam._m0[23u].z, fma(_641, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _640));
        float _1717;
        if (_1603 > 0.0)
        {
            _1717 = abs((1.0 - _1592) / _1603);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1592 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1717 = frontier_phi_25_21_ladder;
        }
        float _2035;
        if (_1606 > 0.0)
        {
            _2035 = abs((1.0 - _1596) / _1606);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1596 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2035 = frontier_phi_37_32_ladder;
        }
        float _2362;
        if (_1609 > 0.0)
        {
            _2362 = abs((1.0 - _1600) / _1609);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1600 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2362 = frontier_phi_47_44_ladder;
        }
        float _2364 = isnan(_2035) ? _1717 : (isnan(_1717) ? _2035 : min(_1717, _2035));
        float _2365 = isnan(_2362) ? _2364 : (isnan(_2364) ? _2362 : min(_2364, _2362));
        float _2369 = (_2365 * _1603) + _1592;
        float _2370 = (_2365 * _1606) + _1596;
        float _2371 = (_2365 * _1609) + _1600;
        float _2372 = _2365 * 9.9999997473787516355514526367188e-05;
        float _2373 = (-1.0) - _2372;
        float _2375 = _2372 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2371 > _2375) || ((_2371 < _2373) || ((_2370 > _2375) || ((_2370 < _2373) || ((_2369 < _2373) || (_2369 > _2375))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2489 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2371, cbModelParam._m0[17u].z, fma(_2370, cbModelParam._m0[17u].y, _2369 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2371, cbModelParam._m0[18u].z, fma(_2370, cbModelParam._m0[18u].y, _2369 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2371, cbModelParam._m0[19u].z, fma(_2370, cbModelParam._m0[19u].y, _2369 * cbModelParam._m0[19u].x))), _1538);
            frontier_phi_22_47_ladder = _2489.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2489.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2489.x * cbModelParam._m0[1u].z;
        }
        _1628 = frontier_phi_22_47_ladder_2;
        _1630 = frontier_phi_22_47_ladder_1;
        _1632 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1612 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_640, _641, _642), _1538);
        _1628 = _1612.x * cbModelParam._m0[1u].z;
        _1630 = _1612.y * cbModelParam._m0[1u].z;
        _1632 = _1612.z * cbModelParam._m0[1u].z;
    }
    float _1644 = ((((1.0 - _661) * ((_648 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_661 * _648)) * _632;
    float _1645 = _1644 * ((cbModelParam._m0[1u].w * (_1628 - _1529)) + _1529);
    float _1646 = _1644 * ((cbModelParam._m0[1u].w * (_1630 - _1531)) + _1531);
    float _1647 = _1644 * ((cbModelParam._m0[1u].w * (_1632 - _1533)) + _1533);
    float _1650 = fma(_1647, cbSceneParam._m0[89u].z, fma(_1646, cbSceneParam._m0[89u].y, _1645 * cbSceneParam._m0[89u].x));
    float _1653 = fma(_1647, cbSceneParam._m0[90u].z, fma(_1646, cbSceneParam._m0[90u].y, _1645 * cbSceneParam._m0[90u].x));
    float _1656 = fma(_1647, cbSceneParam._m0[91u].z, fma(_1646, cbSceneParam._m0[91u].y, _1645 * cbSceneParam._m0[91u].x));
    float _1691 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1695 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1699 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1703 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1704 = _1691 / _1703;
    float _1705 = _1695 / _1703;
    float _1706 = _1699 / _1703;
    float _1853;
    float _1854;
    float _1855;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1733 = ((uint(_1706 > cbSceneParam._m0[59u].y) + uint(_1706 > cbSceneParam._m0[59u].x)) + uint(_1706 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1734 = _1733 + 43u;
        uint _1742 = _1733 + 44u;
        uint _1750 = _1733 + 45u;
        uint _1758 = _1733 + 46u;
        float _1769 = fma(_1703, cbSceneParam._m0[_1734].w, fma(_1699, cbSceneParam._m0[_1734].z, fma(_1695, cbSceneParam._m0[_1734].y, _1691 * cbSceneParam._m0[_1734].x)));
        float _1773 = fma(_1703, cbSceneParam._m0[_1742].w, fma(_1699, cbSceneParam._m0[_1742].z, fma(_1695, cbSceneParam._m0[_1742].y, _1691 * cbSceneParam._m0[_1742].x)));
        float _1781 = fma(_1703, cbSceneParam._m0[_1758].w, fma(_1699, cbSceneParam._m0[_1758].z, fma(_1695, cbSceneParam._m0[_1758].y, _1691 * cbSceneParam._m0[_1758].x)));
        float _1786 = cbSceneParam._m0[33u].z * _1781;
        float _1788 = cbSceneParam._m0[33u].w * _1781;
        float _1791 = fma(_1703, cbSceneParam._m0[_1750].w, fma(_1699, cbSceneParam._m0[_1750].z, fma(_1695, cbSceneParam._m0[_1750].y, _1691 * cbSceneParam._m0[_1750].x))) / _1781;
        float _1839 = (cbSceneParam._m0[33u].x - sqrt(((_1705 * _1705) + (_1704 * _1704)) + (_1706 * _1706))) * cbSceneParam._m0[33u].y;
        float _4085 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        float _1846 = (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1786 + _1769) / _1781, (_1788 + _1773) / _1781), _1791), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1788 + _1769) / _1781, (_1773 - _1786) / _1781), _1791), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1769 - _1786) / _1781, (_1773 - _1788) / _1781), _1791), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1769 - _1788) / _1781, (_1786 + _1773) / _1781), _1791), 0.0)).x), vec4(0.25)));
        _1853 = 1.0 - (_1846 * cbSceneParam._m0[34u].x);
        _1854 = 1.0 - (_1846 * cbSceneParam._m0[34u].y);
        _1855 = 1.0 - (_1846 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1853 = 1.0;
        _1854 = 1.0;
        _1855 = 1.0;
    }
    float _1919;
    float _1921;
    float _1923;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1907 = fma(_1703, cbSceneParam._m0[63u].w, fma(_1699, cbSceneParam._m0[63u].z, fma(_1695, cbSceneParam._m0[63u].y, _1691 * cbSceneParam._m0[63u].x)));
        float _1908 = fma(_1703, cbSceneParam._m0[60u].w, fma(_1699, cbSceneParam._m0[60u].z, fma(_1695, cbSceneParam._m0[60u].y, _1691 * cbSceneParam._m0[60u].x))) / _1907;
        float _1909 = fma(_1703, cbSceneParam._m0[61u].w, fma(_1699, cbSceneParam._m0[61u].z, fma(_1695, cbSceneParam._m0[61u].y, _1691 * cbSceneParam._m0[61u].x))) / _1907;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1908 >= cbSceneParam._m0[64u].x) && (_1909 >= cbSceneParam._m0[64u].y)) && (_1908 <= cbSceneParam._m0[64u].z)) && (_1909 <= cbSceneParam._m0[64u].w))
        {
            float _2048 = fma(_1703, cbSceneParam._m0[62u].w, fma(_1699, cbSceneParam._m0[62u].z, fma(_1695, cbSceneParam._m0[62u].y, _1691 * cbSceneParam._m0[62u].x))) / _1907;
            float _2052 = isnan(cbSceneParam._m0[41u].w) ? _2048 : (isnan(_2048) ? cbSceneParam._m0[41u].w : max(_2048, cbSceneParam._m0[41u].w));
            float _2095 = (cbSceneParam._m0[33u].x - sqrt(((_1705 * _1705) + (_1704 * _1704)) + (_1706 * _1706))) * cbSceneParam._m0[33u].y;
            float _4101 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
            float _2102 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1908, cbSceneParam._m0[33u].w + _1909), _2052), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1908, _1909 - cbSceneParam._m0[33u].z), _2052), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1908 - cbSceneParam._m0[33u].z, _1909 - cbSceneParam._m0[33u].w), _2052), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1908 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1909), _2052), 0.0)).x), vec4(0.25)));
            float _2106 = 1.0 - (_2102 * cbSceneParam._m0[34u].x);
            float _2107 = 1.0 - (_2102 * cbSceneParam._m0[34u].y);
            float _2108 = 1.0 - (_2102 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2108) ? _1855 : (isnan(_1855) ? _2108 : min(_1855, _2108));
            frontier_phi_34_33_ladder_1 = isnan(_2107) ? _1854 : (isnan(_1854) ? _2107 : min(_1854, _2107));
            frontier_phi_34_33_ladder_2 = isnan(_2106) ? _1853 : (isnan(_1853) ? _2106 : min(_1853, _2106));
        }
        else
        {
            frontier_phi_34_33_ladder = _1855;
            frontier_phi_34_33_ladder_1 = _1854;
            frontier_phi_34_33_ladder_2 = _1853;
        }
        _1919 = frontier_phi_34_33_ladder_2;
        _1921 = frontier_phi_34_33_ladder_1;
        _1923 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1919 = _1853;
        _1921 = _1854;
        _1923 = _1855;
    }
    uvec4 _1928 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1930 = _1928.x * 14u;
    uint _1931 = _1930 + 13u;
    float _1938 = _632 + (-1.0);
    float _1943 = (cbLight._m0[_1931].x * _1938) + 1.0;
    float _1944 = (cbLight._m0[_1931].y * _1938) + 1.0;
    float _1945 = (cbLight._m0[_1931].z * _1938) + 1.0;
    float _1946 = (cbLight._m0[_1931].w * _1938) + 1.0;
    uint _1947 = _1930 + 5u;
    float _1953 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
    uint _1957 = _1930 + 4u;
    float _1967 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
    uint _1971 = _1930 | 1u;
    float _1982 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_479, _480, _481));
    float _1985 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_479, _480, _481));
    float _4137 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _4148 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1990 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * 0.3183098733425140380859375;
    float _1992 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * 0.3183098733425140380859375;
    float _1999 = ((cbLight._m0[_1947].x * _1953) * _1992) + (((cbLight._m0[_1957].x * _1919) * _1967) * _1990);
    float _2000 = ((_1953 * cbLight._m0[_1947].y) * _1992) + (((cbLight._m0[_1957].y * _1921) * _1967) * _1990);
    float _2001 = ((_1953 * cbLight._m0[_1947].z) * _1992) + (((cbLight._m0[_1957].z * _1923) * _1967) * _1990);
    uvec4 _2005 = floatBitsToUint(cbLight._m0[_1930 + 12u]);
    bool _2007 = _2005.x == 0u;
    float _2109;
    float _2111;
    float _2113;
    if (_2007)
    {
        _2109 = _1999;
        _2111 = _2000;
        _2113 = _2001;
    }
    else
    {
        uint _2117 = _1930 + 6u;
        float _2133 = (dot(vec3(cbLight._m0[_1930 + 2u].xyz), vec3(_479, _480, _481)) * 0.5) + 0.5;
        float _2134 = _2133 * _2133;
        float _4159 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2135 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _2136 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2109 = (((cbLight._m0[_2117].x * 0.3183098733425140380859375) * _2135) * _2136) + _1999;
        _2111 = (((cbLight._m0[_2117].y * 0.3183098733425140380859375) * _2135) * _2136) + _2000;
        _2113 = (((cbLight._m0[_2117].z * 0.3183098733425140380859375) * _2135) * _2136) + _2001;
    }
    bool _2116 = _2005.y == 0u;
    float _2171;
    float _2173;
    float _2175;
    if (_2116)
    {
        _2171 = _2109;
        _2173 = _2111;
        _2175 = _2113;
    }
    else
    {
        uint _2333 = _1930 + 7u;
        float _2349 = (dot(vec3(cbLight._m0[_1930 + 3u].xyz), vec3(_479, _480, _481)) * 0.5) + 0.5;
        float _2350 = _2349 * _2349;
        float _4175 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2351 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2352 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2171 = (((cbLight._m0[_2333].x * 0.3183098733425140380859375) * _2351) * _2352) + _2109;
        _2173 = (((cbLight._m0[_2333].y * 0.3183098733425140380859375) * _2351) * _2352) + _2111;
        _2175 = (((cbLight._m0[_2333].z * 0.3183098733425140380859375) * _2351) * _2352) + _2113;
    }
    uint _2178 = _1930 + 8u;
    float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1930].w)) * _482) * 0.949999988079071044921875);
    float _2192 = _2191 * _2191;
    float _2193 = cbLight._m0[_1930].x + _558;
    float _2194 = cbLight._m0[_1930].y + _559;
    float _2195 = cbLight._m0[_1930].z + _560;
    float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
    float _2200 = _2199 * _2193;
    float _2201 = _2199 * _2194;
    float _2202 = _2199 * _2195;
    float _2203 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_1930].xyz));
    float _4191 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _4202 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _2207 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _2208 = dot(vec3(_479, _480, _481), vec3(_2200, _2201, _2202));
    float _4213 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _2212 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_2200, _2201, _2202));
    float _4224 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2216 = _2192 * _2192;
    float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
    float _2231 = (exp2(log2(1.0 - (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2232 = 1.0 - _2192;
    float _2243 = (0.5 / (((_2207 * ((_2206 * _2232) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2232) + _2192) * _2206))) * _2206;
    float _4235 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2245 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
    uint _2259 = _1930 + 9u;
    float _2270 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1971].w)) * _482) * 0.949999988079071044921875);
    float _2271 = _2270 * _2270;
    float _2272 = cbLight._m0[_1971].x + _558;
    float _2273 = cbLight._m0[_1971].y + _559;
    float _2274 = cbLight._m0[_1971].z + _560;
    float _2278 = inversesqrt(dot(vec3(_2272, _2273, _2274), vec3(_2272, _2273, _2274)));
    float _2279 = _2278 * _2272;
    float _2280 = _2278 * _2273;
    float _2281 = _2278 * _2274;
    float _2282 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_1971].xyz));
    float _4246 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2285 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _2286 = dot(vec3(_479, _480, _481), vec3(_2279, _2280, _2281));
    float _4257 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _2290 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_2279, _2280, _2281));
    float _4268 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2294 = _2271 * _2271;
    float _2298 = ((_2289 * _2289) * (_2294 + (-1.0))) + 1.0;
    float _2307 = (exp2(log2(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2308 = 1.0 - _2271;
    float _2318 = (0.5 / (((_2207 * ((_2285 * _2308) + _2271)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2308) + _2271) * _2285))) * _2285;
    float _4279 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2320 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2294 / ((_2298 * _2298) * 3.141590118408203125));
    float _2330 = (((_2307 * cbLight._m0[_2259].x) * _2320) * _1953) + ((((cbLight._m0[_2178].x * _1919) * _2231) * _2245) * _1967);
    float _2331 = (((_2307 * cbLight._m0[_2259].y) * _2320) * _1953) + ((((cbLight._m0[_2178].y * _1921) * _2231) * _2245) * _1967);
    float _2332 = (((_2307 * cbLight._m0[_2259].z) * _2320) * _1953) + ((((cbLight._m0[_2178].z * _1923) * _2231) * _2245) * _1967);
    float _2388;
    float _2390;
    float _2392;
    if (_2007)
    {
        _2388 = _2330;
        _2390 = _2331;
        _2392 = _2332;
    }
    else
    {
        uint _2394 = _1930 + 2u;
        uint _2398 = _1930 + 10u;
        float _2412 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2394].w)) * _482) * 0.949999988079071044921875);
        float _2413 = _2412 * _2412;
        float _2414 = cbLight._m0[_2394].x + _558;
        float _2415 = cbLight._m0[_2394].y + _559;
        float _2416 = cbLight._m0[_2394].z + _560;
        float _2420 = inversesqrt(dot(vec3(_2414, _2415, _2416), vec3(_2414, _2415, _2416)));
        float _2421 = _2420 * _2414;
        float _2422 = _2420 * _2415;
        float _2423 = _2420 * _2416;
        float _2424 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_2394].xyz));
        float _4290 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2427 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _2428 = dot(vec3(_479, _480, _481), vec3(_2421, _2422, _2423));
        float _4301 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2431 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _2432 = dot(vec3(cbLight._m0[_2394].xyz), vec3(_2421, _2422, _2423));
        float _4312 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2436 = _2413 * _2413;
        float _2440 = ((_2431 * _2431) * (_2436 + (-1.0))) + 1.0;
        float _2449 = (exp2(log2(1.0 - (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2450 = 1.0 - _2413;
        float _2460 = (0.5 / (((_2207 * ((_2427 * _2450) + _2413)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2450) + _2413) * _2427))) * _2427;
        float _4323 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2462 = (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2436 / ((_2440 * _2440) * 3.141590118408203125));
        float _2463 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2388 = (((_2449 * cbLight._m0[_2398].x) * _2462) * _2463) + _2330;
        _2390 = (((_2449 * cbLight._m0[_2398].y) * _2462) * _2463) + _2331;
        _2392 = (((_2449 * cbLight._m0[_2398].z) * _2462) * _2463) + _2332;
    }
    float _2494;
    float _2496;
    float _2498;
    if (_2116)
    {
        _2494 = _2388;
        _2496 = _2390;
        _2498 = _2392;
    }
    else
    {
        uint _2505 = _1930 + 3u;
        uint _2509 = _1930 + 11u;
        float _2523 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2505].w)) * _482) * 0.949999988079071044921875);
        float _2524 = _2523 * _2523;
        float _2525 = cbLight._m0[_2505].x + _558;
        float _2526 = cbLight._m0[_2505].y + _559;
        float _2527 = cbLight._m0[_2505].z + _560;
        float _2531 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
        float _2532 = _2531 * _2525;
        float _2533 = _2531 * _2526;
        float _2534 = _2531 * _2527;
        float _2535 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_2505].xyz));
        float _4339 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2538 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _2539 = dot(vec3(_479, _480, _481), vec3(_2532, _2533, _2534));
        float _4350 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2543 = dot(vec3(cbLight._m0[_2505].xyz), vec3(_2532, _2533, _2534));
        float _4361 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2547 = _2524 * _2524;
        float _2551 = ((_2542 * _2542) * (_2547 + (-1.0))) + 1.0;
        float _2560 = (exp2(log2(1.0 - (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2561 = 1.0 - _2524;
        float _2571 = (0.5 / (((_2207 * ((_2538 * _2561) + _2524)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2561) + _2524) * _2538))) * _2538;
        float _4372 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2573 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2547 / ((_2551 * _2551) * 3.141590118408203125));
        float _2574 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2494 = (((_2560 * cbLight._m0[_2509].x) * _2573) * _2574) + _2388;
        _2496 = (((_2560 * cbLight._m0[_2509].y) * _2573) * _2574) + _2390;
        _2498 = (((_2560 * cbLight._m0[_2509].z) * _2573) * _2574) + _2392;
    }
    float _2640;
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    float _2650;
    if (_1928.y == 0u)
    {
        uvec4 _2595 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2596 = _2595.x;
        uint _2607 = uint((float(_2595.y) * floor(float(uint(cbSceneParam._m0[85u].y * _567) / _2596))) + floor(float(uint(cbSceneParam._m0[85u].x * _566) / _2596)));
        float _2617 = (log2(_1706 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2618 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        uint _2621 = uint(isnan(14.0) ? _2618 : (isnan(_2618) ? 14.0 : min(_2618, 14.0)));
        uvec4 _2626 = texelFetch(g_lightClusterGridBuffer, int(((_2621 << 2u) + (_2607 << 6u)) >> 2u));
        uint _2627 = _2626.x;
        uint _2628 = _2595.z;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        if (((((1u << ((_2628 >> 4u) & 15u)) + 4294967295u) & _2627) == 0u) || ((_2628 & 240u) == 0u))
        {
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
        }
        else
        {
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2716;
            float _2718;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            uint _2858 = 0u;
            uint _2867;
            bool _2868;
            for (;;)
            {
                _2867 = texelFetch(g_lightClassification, int((((_2621 << 5u) + (_2607 << 9u)) + (_2858 << 2u)) >> 2u)).x;
                _2868 = _2867 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2868)
                {
                    frontier_phi_66_pred = _2857;
                    frontier_phi_66_pred_1 = _2856;
                    frontier_phi_66_pred_2 = _2855;
                    frontier_phi_66_pred_3 = _2854;
                    frontier_phi_66_pred_4 = _2853;
                    frontier_phi_66_pred_5 = _2852;
                }
                else
                {
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    uint _2982;
                    _2976 = _2852;
                    _2977 = _2853;
                    _2978 = _2854;
                    _2979 = _2855;
                    _2980 = _2856;
                    _2981 = _2857;
                    _2982 = _2867;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    for (;;)
                    {
                        uint _2986 = uint(findLSB(_2982)) + (_2858 << 5u);
                        uint _2983 = (_2982 + 4294967295u) & _2982;
                        uint _2988 = _2986 * 48u;
                        vec4 _3002 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2988)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 3u)).x));
                        uint _3008 = (_2986 * 48u) + 4u;
                        vec4 _3021 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3008)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 3u)).x));
                        uint _3027 = (_2986 * 48u) + 8u;
                        vec3 _3038 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3027)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 2u)).x));
                        float _3042 = _3002.x - _1704;
                        float _3043 = _3002.y - _1705;
                        float _3044 = _3002.z - _1706;
                        float _3045 = dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044));
                        float _3048 = inversesqrt(_3045);
                        float _3049 = _3048 * _3042;
                        float _3050 = _3048 * _3043;
                        float _3051 = _3048 * _3044;
                        float _3052 = dot(vec3(_588, _591, _594), vec3(_3049, _3050, _3051));
                        float _3057 = 1.0 - (_3045 * _3002.w);
                        float _4398 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3058 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                        float _3059 = sqrt(_3045) * _3021.w;
                        float _3062 = 1.39999997615814208984375 / (_3059 + 1.39999997615814208984375);
                        float _3063 = _3062 * _3062;
                        float _3066 = ((1.0 - _3063) * _3052) + _3063;
                        float _3069 = _3059 * _3059;
                        float _3073 = ((isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0))) * _3058) / ((_3069 * 0.699999988079071044921875) + 1.0);
                        float _3077 = (-0.0) - _1704;
                        float _3078 = (-0.0) - _1705;
                        float _3079 = (-0.0) - _1706;
                        float _3083 = inversesqrt(dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079)));
                        float _3084 = _3083 * _3077;
                        float _3085 = _3083 * _3078;
                        float _3086 = _3083 * _3079;
                        float _3093 = exp2(log2(1.0 / ((_3069 * 3.5) + 5.0)) * 0.25);
                        float _3094 = 1.0 - _648;
                        float _3101 = sqrt(1.0 - ((1.0 - (_3094 * _3094)) * (1.0 - (_3093 * _3093))));
                        float _3102 = _3101 * _3101;
                        float _3103 = _3102 * _3102;
                        float _3104 = _3084 + _3049;
                        float _3105 = _3085 + _3050;
                        float _3106 = _3086 + _3051;
                        float _3110 = inversesqrt(dot(vec3(_3104, _3105, _3106), vec3(_3104, _3105, _3106)));
                        float _3114 = dot(vec3(_588, _591, _594), vec3(_3084, _3085, _3086));
                        float _4414 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3117 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                        float _3118 = dot(vec3(_588, _591, _594), vec3(_3110 * _3104, _3110 * _3105, _3110 * _3106));
                        float _4425 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3121 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                        float _3125 = ((_3121 * _3121) * (_3103 + (-1.0))) + 1.0;
                        float _3126 = _3062 * _3102;
                        float _3127 = _3126 * _3126;
                        float _3130 = ((1.0 - _3127) * _3052) + _3127;
                        float _4436 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3131 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                        float _3132 = 1.0 - _3102;
                        float _3142 = (0.5 / (((_3131 * ((_3117 * _3132) + _3102)) + 9.9999999392252902907785028219223e-09) + (((_3131 * _3132) + _3102) * _3117))) * _3131;
                        float _4447 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3153 = (((_3103 * 3.1415927410125732421875) * (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) / ((_3125 * _3125) * ((_3069 * 2.1991131305694580078125) + 3.141590118408203125))) * _3058;
                        _2911 = (_3073 * _3021.x) + _2979;
                        _2912 = (_3073 * _3021.y) + _2980;
                        _2913 = (_3073 * _3021.z) + _2981;
                        _2908 = (_3153 * _3038.x) + _2976;
                        _2909 = (_3153 * _3038.y) + _2977;
                        _2910 = (_3153 * _3038.z) + _2978;
                        if (_2983 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2976 = _2908;
                            _2977 = _2909;
                            _2978 = _2910;
                            _2979 = _2911;
                            _2980 = _2912;
                            _2981 = _2913;
                            _2982 = _2983;
                        }
                    }
                    frontier_phi_66_pred = _2913;
                    frontier_phi_66_pred_1 = _2912;
                    frontier_phi_66_pred_2 = _2911;
                    frontier_phi_66_pred_3 = _2910;
                    frontier_phi_66_pred_4 = _2909;
                    frontier_phi_66_pred_5 = _2908;
                }
                _2718 = frontier_phi_66_pred;
                _2716 = frontier_phi_66_pred_1;
                _2714 = frontier_phi_66_pred_2;
                _2712 = frontier_phi_66_pred_3;
                _2710 = frontier_phi_66_pred_4;
                _2708 = frontier_phi_66_pred_5;
                uint _2859 = _2858 + 1u;
                if (_2859 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2852 = _2708;
                    _2853 = _2710;
                    _2854 = _2712;
                    _2855 = _2714;
                    _2856 = _2716;
                    _2857 = _2718;
                    _2858 = _2859;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
        }
        uvec4 _2721 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2722 = _2721.z;
        uint _2724 = (_2722 >> 8u) & 15u;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        if (((4294967295u << _2724) & _2627) == 0u)
        {
            _2820 = _2707;
            _2822 = _2709;
            _2824 = _2711;
            _2826 = _2713;
            _2828 = _2715;
            _2830 = _2717;
        }
        else
        {
            float _2845 = inversesqrt(dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706)));
            float _2846 = _2845 * _1704;
            float _2847 = _2845 * _1705;
            float _2848 = _2845 * _1706;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2724 < ((_2722 >> 12u) & 15u))
            {
                float _2821;
                float _2823;
                float _2825;
                float _2827;
                float _2829;
                float _2831;
                float _2959 = _2707;
                float _2960 = _2709;
                float _2961 = _2711;
                float _2962 = _2713;
                float _2963 = _2715;
                float _2964 = _2717;
                uint _2965 = _2724;
                uint _2974;
                bool _2975;
                for (;;)
                {
                    _2974 = texelFetch(g_lightClassification, int((((_2621 << 5u) + (_2607 << 9u)) + (_2965 << 2u)) >> 2u)).x;
                    _2975 = _2974 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2975)
                    {
                        frontier_phi_72_pred = _2964;
                        frontier_phi_72_pred_1 = _2963;
                        frontier_phi_72_pred_2 = _2962;
                        frontier_phi_72_pred_3 = _2961;
                        frontier_phi_72_pred_4 = _2960;
                        frontier_phi_72_pred_5 = _2959;
                    }
                    else
                    {
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3171 = _2959;
                        float _3172 = _2960;
                        float _3173 = _2961;
                        float _3174 = _2962;
                        float _3175 = _2963;
                        float _3176 = _2964;
                        uint _3177 = _2974;
                        uint _3178;
                        vec4 _3203;
                        float _3204;
                        vec4 _3219;
                        vec3 _3231;
                        vec4 _3247;
                        vec4 _3262;
                        float _3308;
                        bool _3309;
                        for (;;)
                        {
                            uint _3188 = ((_2965 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3177));
                            _3178 = (_3177 + 4294967295u) & _3177;
                            uint _3190 = _3188 * 40u;
                            _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            _3204 = _3203.w;
                            uint _3206 = (_3188 * 40u) + 4u;
                            _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3221 = (_3188 * 40u) + 8u;
                            _3231 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x));
                            uint _3234 = (_3188 * 40u) + 16u;
                            _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            uint _3249 = (_3188 * 40u) + 20u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3264 = (_3188 * 40u) + 24u;
                            vec4 _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3283 = (_3188 * 40u) + 28u;
                            vec4 _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            _3308 = fma(_1706, _3296.z, fma(_1705, _3296.y, _3296.x * _1704)) + _3296.w;
                            _3309 = !((fma(_1706, _3277.z, fma(_1705, _3277.y, _3277.x * _1704)) + _3277.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3309)
                            {
                                float _3336 = _3203.x - _1704;
                                float _3337 = _3203.y - _1705;
                                float _3338 = _3203.z - _1706;
                                float _3339 = dot(vec3(_3336, _3337, _3338), vec3(_3336, _3337, _3338));
                                float _3342 = inversesqrt(_3339);
                                float _3343 = _3342 * _3336;
                                float _3344 = _3342 * _3337;
                                float _3345 = _3342 * _3338;
                                float _3349 = 1.0 - (_3339 / (_3204 * _3204));
                                float _4458 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3350 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                                float _3354 = sqrt(_3339) * _3219.w;
                                float _3356 = 1.39999997615814208984375 / (_3354 + 1.39999997615814208984375);
                                float _3357 = _3356 * _3356;
                                float _3360 = ((1.0 - _3357) * dot(vec3(_3343, _3344, _3345), vec3(_588, _591, _594))) + _3357;
                                float _3363 = _3354 * _3354;
                                float _3367 = (fma(_1706, _3247.z, fma(_1705, _3247.y, _3247.x * _1704)) + _3247.w) / _3308;
                                float _3368 = (fma(_1706, _3262.z, fma(_1705, _3262.y, _3262.x * _1704)) + _3262.w) / _3308;
                                float _3372 = 1.0 - dot(vec2(_3367, _3368), vec2(_3367, _3368));
                                float _4474 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3373 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3374 = _3373 * (((isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0))) * _3350) / ((_3363 * 0.699999988079071044921875) + 1.0));
                                float _3386 = exp2(log2(1.0 / ((_3363 * 3.5) + 5.0)) * 0.25);
                                float _3387 = 1.0 - _648;
                                float _3394 = sqrt(1.0 - ((1.0 - (_3387 * _3387)) * (1.0 - (_3386 * _3386))));
                                float _3395 = _3394 * _3394;
                                float _3396 = _3395 * _3395;
                                float _3397 = _3343 - _2846;
                                float _3398 = _3344 - _2847;
                                float _3399 = _3345 - _2848;
                                float _3403 = inversesqrt(dot(vec3(_3397, _3398, _3399), vec3(_3397, _3398, _3399)));
                                float _3407 = dot(vec3(_588, _591, _594), vec3((-0.0) - _2846, (-0.0) - _2847, (-0.0) - _2848));
                                float _4485 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3410 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                                float _3411 = dot(vec3(_588, _591, _594), vec3(_3403 * _3397, _3403 * _3398, _3403 * _3399));
                                float _4496 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3414 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                                float _3418 = ((_3414 * _3414) * (_3396 + (-1.0))) + 1.0;
                                float _3419 = _3356 * _3395;
                                float _3420 = _3419 * _3419;
                                float _3426 = ((1.0 - _3420) * dot(vec3(_588, _591, _594), vec3(_3343, _3344, _3345))) + _3420;
                                float _4507 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3427 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                                float _3428 = 1.0 - _3395;
                                float _3438 = (0.5 / (((_3427 * ((_3410 * _3428) + _3395)) + 9.9999999392252902907785028219223e-09) + (((_3427 * _3428) + _3395) * _3410))) * _3427;
                                float _4518 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3448 = (_3373 * _3350) * (((_3396 * 3.1415927410125732421875) * (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) / ((_3418 * _3418) * ((_3363 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3374 * _3219.y;
                                frontier_phi_78_pred_1 = _3374 * _3219.x;
                                frontier_phi_78_pred_2 = _3448 * _3231.z;
                                frontier_phi_78_pred_3 = _3448 * _3231.y;
                                frontier_phi_78_pred_4 = _3448 * _3231.x;
                                frontier_phi_78_pred_5 = _3374 * _3219.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3456 = frontier_phi_78_pred;
                            _3455 = frontier_phi_78_pred_1;
                            _3454 = frontier_phi_78_pred_2;
                            _3453 = frontier_phi_78_pred_3;
                            _3452 = frontier_phi_78_pred_4;
                            _3457 = frontier_phi_78_pred_5;
                            _3161 = _3455 + _3174;
                            _3162 = _3456 + _3175;
                            _3163 = _3457 + _3176;
                            _3158 = _3452 + _3171;
                            _3159 = _3453 + _3172;
                            _3160 = _3454 + _3173;
                            if (_3178 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3178;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3163;
                        frontier_phi_72_pred_1 = _3162;
                        frontier_phi_72_pred_2 = _3161;
                        frontier_phi_72_pred_3 = _3160;
                        frontier_phi_72_pred_4 = _3159;
                        frontier_phi_72_pred_5 = _3158;
                    }
                    _2831 = frontier_phi_72_pred;
                    _2829 = frontier_phi_72_pred_1;
                    _2827 = frontier_phi_72_pred_2;
                    _2825 = frontier_phi_72_pred_3;
                    _2823 = frontier_phi_72_pred_4;
                    _2821 = frontier_phi_72_pred_5;
                    uint _2966 = _2965 + 1u;
                    if (_2966 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2959 = _2821;
                        _2960 = _2823;
                        _2961 = _2825;
                        _2962 = _2827;
                        _2963 = _2829;
                        _2964 = _2831;
                        _2965 = _2966;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2831;
                frontier_phi_60_61_ladder_1 = _2829;
                frontier_phi_60_61_ladder_2 = _2825;
                frontier_phi_60_61_ladder_3 = _2823;
                frontier_phi_60_61_ladder_4 = _2821;
                frontier_phi_60_61_ladder_5 = _2827;
            }
            else
            {
                frontier_phi_60_61_ladder = _2717;
                frontier_phi_60_61_ladder_1 = _2715;
                frontier_phi_60_61_ladder_2 = _2711;
                frontier_phi_60_61_ladder_3 = _2709;
                frontier_phi_60_61_ladder_4 = _2707;
                frontier_phi_60_61_ladder_5 = _2713;
            }
            _2820 = frontier_phi_60_61_ladder_4;
            _2822 = frontier_phi_60_61_ladder_3;
            _2824 = frontier_phi_60_61_ladder_2;
            _2826 = frontier_phi_60_61_ladder_5;
            _2828 = frontier_phi_60_61_ladder_1;
            _2830 = frontier_phi_60_61_ladder;
        }
        float _2835 = isnan(1.0) ? _632 : (isnan(_632) ? 1.0 : min(_632, 1.0));
        _2640 = (_2835 * _2826) + _2171;
        _2642 = (_2835 * _2828) + _2173;
        _2644 = (_2835 * _2830) + _2175;
        _2646 = ((_2820 * 0.039999999105930328369140625) * _2835) + _2494;
        _2648 = ((_2822 * 0.039999999105930328369140625) * _2835) + _2496;
        _2650 = ((_2824 * 0.039999999105930328369140625) * _2835) + _2498;
    }
    else
    {
        _2640 = _2171;
        _2642 = _2173;
        _2644 = _2175;
        _2646 = _2494;
        _2648 = _2496;
        _2650 = _2498;
    }
    float _4534 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _4545 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _4556 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    uint _2670 = _226 + 6u;
    float _2678 = _566 / cbSceneParam._m0[86u].x;
    float _2679 = _567 / cbSceneParam._m0[86u].y;
    vec4 _2693 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2678, _2679, (log2((isnan(cbSceneParam._m0[77u].w) ? _500 : (isnan(_500) ? cbSceneParam._m0[77u].w : min(_500, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2695 = _2693.x;
    float _2696 = _2693.y;
    float _2697 = _2693.z;
    float _2698 = _2693.w;
    float _2770;
    float _2772;
    float _2774;
    float _2776;
    if (_500 > cbSceneParam._m0[78u].w)
    {
        float _2732 = isnan(_500) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _500 : min(cbSceneParam._m0[80u].w, _500));
        float _2733 = _2732 / _500;
        float _2744 = _2733 * _551;
        float _2745 = _552 * _2733;
        float _2746 = (-0.0) - _2745;
        float _2748 = _2733 * _553;
        float _2750 = (cbSceneParam._m0[77u].w * _2746) / _2732;
        float _2751 = _2750 + cbSceneParam._m0[79u].w;
        float _2752 = cbSceneParam._m0[79u].w - _2745;
        float _2758 = sqrt(((_2744 * _2744) + (_2745 * _2745)) + (_2748 * _2748));
        float _2761 = (1.0 - (cbSceneParam._m0[77u].w / _2732)) * _2758;
        float _2766 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2768 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2921;
        if (abs((_2746 - _2750) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2921 = ((((_2751 > 0.0) ? exp2(_2766 * _2751) : (2.0 - exp2(_2768 * _2751))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2761;
        }
        else
        {
            float _2881 = 1.0 / cbSceneParam._m0[80u].x;
            float _2882 = isnan(_2752) ? _2751 : (isnan(_2751) ? _2752 : max(_2751, _2752));
            float _2883 = isnan(_2752) ? _2751 : (isnan(_2751) ? _2752 : min(_2751, _2752));
            float _2892 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : min(_2882, 0.0));
            float _2893 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : min(_2883, 0.0));
            _2921 = ((abs(_2758 / _2746) * cbSceneParam._m0[80u].y) * ((((_2892 - _2893) * 2.0) - ((exp2(_2766 * (isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0)))) - exp2(_2766 * (isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0))))) * _2881)) - ((exp2(_2768 * _2892) - exp2(_2768 * _2893)) * _2881))) + (_2761 * cbSceneParam._m0[80u].z);
        }
        vec4 _2923 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2678, _2679, 1.0), 0.0);
        float _2932 = exp2((_2921 * (-1.44269502162933349609375)) * (1.0 - _2923.w));
        float _2933 = log2(_2932);
        float _2949 = log2(_2698);
        _2770 = (exp2(_2949 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].x)) * _2923.x) / cbSceneParam._m0[78u].x)) + _2695;
        _2772 = (exp2(_2949 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].y)) * _2923.y) / cbSceneParam._m0[78u].y)) + _2696;
        _2774 = (exp2(_2949 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].z)) * _2923.z) / cbSceneParam._m0[78u].z)) + _2697;
        _2776 = _2932 * _2698;
    }
    else
    {
        _2770 = _2695;
        _2772 = _2696;
        _2774 = _2697;
        _2776 = _2698;
    }
    float _2788 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2789 = _2788 == 3.0;
    float _2790 = log2(_2776);
    float _2797 = exp2(_2790 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2640 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _632))) + ((_2646 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _1437)) * cbPerFrame._m0[3u].x));
    float _2798 = exp2(_2790 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_2642 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _632))) + ((_2648 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _1437)) * cbPerFrame._m0[3u].x));
    float _2799 = exp2(_2790 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2644 + ((isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))) * _632))) + ((_2650 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _1437)) * cbPerFrame._m0[3u].x));
    float _2808 = (_2788 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2808 * (_2789 ? _2797 : (_2797 + (cbSceneParam._m0[72u].w * _2770)));
    SV_Target.y = _2808 * (_2789 ? _2798 : (_2798 + (cbSceneParam._m0[72u].w * _2772)));
    SV_Target.z = _2808 * (_2789 ? _2799 : (_2799 + (cbSceneParam._m0[72u].w * _2774)));
    SV_Target.w = cbInstanceData._m0[_2670].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2670].w;
}


