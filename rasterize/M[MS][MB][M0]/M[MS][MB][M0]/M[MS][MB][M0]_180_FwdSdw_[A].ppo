#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1227;
float _3869;
float _3870;
float _3871;
float _3872;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _349 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _351 = _349.x;
    float _361 = dot(vec4(_351, _349.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _378 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_351 - _361) * cbMtdParam._m0[24u].x) + _361) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3881 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _379 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _386 = (_379 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _387 = (_379 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _388 = (_379 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _405 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _262) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _263) + cbTextureTilingScale._m0[3u].w));
    vec4 _425 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _437 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _451 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_427 - _437) * cbMtdParam._m0[24u].x) + _437) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3892 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _459 = (_452 * ((_405.x * cbMtdParam._m0[13u].x) - _386)) + _386;
    float _460 = (_452 * ((_405.y * cbMtdParam._m0[13u].y) - _387)) + _387;
    float _461 = (_452 * ((_405.z * cbMtdParam._m0[13u].z) - _388)) + _388;
    vec4 _479 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _496 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _498 = _496.x;
    float _499 = _496.y;
    float _500 = _496.z;
    float _507 = ((_479.x - _498) * _379) + _498;
    float _508 = ((_479.y - _499) * _379) + _499;
    float _509 = ((_479.z - _500) * _379) + _500;
    vec4 _521 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _262) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _263) + cbTextureTilingScale._m0[2u].w));
    float _534 = ((_521.z - _509) * _452) + _509;
    float _537 = ((((_521.x - _507) * _452) + _507) * 2.0) + (-1.0);
    float _539 = ((((_521.y - _508) * _452) + _508) * 2.0) + (-1.0);
    float _540 = dot(vec2(_537, _539), vec2(_537, _539));
    float _3903 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _545 = sqrt(1.0 - (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))));
    vec4 _558 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _576 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _578 = _576.x;
    float _579 = 1.0 - _578;
    float _592 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_578 - _579) * cbMtdParam._m0[24u].z) + _579) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3914 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _593 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _600 = (_593 * (cbMtdParam._m0[17u].x - _459)) + _459;
    float _601 = (_593 * (cbMtdParam._m0[17u].y - _460)) + _460;
    float _602 = (_593 * (cbMtdParam._m0[17u].z - _461)) + _461;
    vec4 _615 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _622 = (_615.x * 2.0) + (-1.0);
    float _623 = (_615.y * 2.0) + (-1.0);
    float _624 = dot(vec2(_622, _623), vec2(_622, _623));
    float _3925 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _632 = (_593 * (_615.z - _534)) + _534;
    float _644 = (((_622 - _537) + (cbMtdParam._m0[21u].x * _537)) * _593) + _537;
    float _645 = (((_623 - _539) + (cbMtdParam._m0[21u].x * _539)) * _593) + _539;
    float _646 = (_593 * (sqrt(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) - _545)) + _545;
    float _651 = cbMtdParam._m0[22u].x + _558.w;
    float _654 = fma(_646, _229 * NORMAL.x, fma(_645, _236 * TANGENT.x, (_222 * _214) * _644));
    float _657 = fma(_646, _229 * NORMAL.y, fma(_645, _236 * TANGENT.y, (_222 * _215) * _644));
    float _660 = fma(_646, _229 * NORMAL.z, fma(_645, _236 * TANGENT.z, (_222 * _216) * _644));
    float _664 = inversesqrt(dot(vec3(_654, _657, _660), vec3(_654, _657, _660)));
    float _665 = _664 * _654;
    float _666 = _664 * _657;
    float _667 = _664 * _660;
    float _3936 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _668 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _3958 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _3969 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3980 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _686 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _738 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _728);
    float _739 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _728);
    float _740 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _728);
    float _744 = inversesqrt(dot(vec3(_738, _739, _740), vec3(_738, _739, _740)));
    float _745 = _738 * _744;
    float _746 = _739 * _744;
    float _747 = _740 * _744;
    vec4 _752 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _754 = _752.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _908 = sqrt(((_738 * _738) + (_739 * _739)) + (_740 * _740));
        float _914 = (cbMatDynParam._m0[5u].x * _908) + cbMatDynParam._m0[5u].y;
        float _3991 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _919 = (cbMatDynParam._m0[5u].z * _908) + cbMatDynParam._m0[5u].w;
        float _4002 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) - _915)) + _915) < ((_754 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _765 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _766 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _784 = fma(_667, cbSceneParam._m0[5u].z, fma(_666, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _665));
    float _787 = fma(_667, cbSceneParam._m0[6u].z, fma(_666, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _665));
    float _790 = fma(_667, cbSceneParam._m0[7u].z, fma(_666, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _665));
    uint _803 = _242 + 9u;
    uint _804 = _803 + uint(cbMatDynParam._m0[0u].w);
    float _810 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * cbInstanceData._m0[_804].x;
    float _811 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * cbInstanceData._m0[_804].y;
    float _812 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * cbInstanceData._m0[_804].z;
    float _4013 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _813 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _4024 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _814 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    vec4 _824 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _765, cbSceneParam._m0[86u].y * _766));
    float _828 = ((isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * TEXCOORD_5.w) * _824.x;
    float _829 = dot(vec3(_665, _666, _667), vec3(_745, _746, _747));
    float _832 = _829 * 2.0;
    float _836 = (_832 * _665) - _745;
    float _837 = (_832 * _666) - _746;
    float _838 = (_832 * _667) - _747;
    float _842 = abs(dot(vec3(_745, _746, _747), vec3(_665, _666, _667)));
    float _4046 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _844 = sqrt(_668);
    float _857 = exp2((_844 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_844 * 3.0));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _893 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1226;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _951 = fma(_897, cbModelParam._m0[26u].z, fma(_893, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _889));
        float _955 = fma(_897, cbModelParam._m0[27u].z, fma(_893, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _889));
        float _959 = fma(_897, cbModelParam._m0[28u].z, fma(_893, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _889));
        float _984 = _889 + _665;
        float _985 = _893 + _666;
        float _986 = _897 + _667;
        float _996 = fma(_986, cbModelParam._m0[26u].z, fma(_985, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _984)) - _951;
        float _997 = fma(_986, cbModelParam._m0[27u].z, fma(_985, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _984)) - _955;
        float _998 = fma(_986, cbModelParam._m0[28u].z, fma(_985, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _984)) - _959;
        float _1002 = inversesqrt(dot(vec3(_996, _997, _998), vec3(_996, _997, _998)));
        float _1015 = ((_1002 * _996) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_951 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1002 * _997) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_955 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1002 * _998) / cbModelParam._m0[34u].z) + ((((((_959 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        float _1054 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1020.x + (-0.5));
        float _1056 = _1054 * (_1020.y + (-0.5));
        float _1057 = _1054 * (_1020.z + (-0.5));
        float _1064 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1027.x + (-0.5));
        float _1066 = _1064 * (_1027.y + (-0.5));
        float _1067 = _1064 * (_1027.z + (-0.5));
        float _1074 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1034.x + (-0.5));
        float _1076 = _1074 * (_1034.y + (-0.5));
        float _1077 = _1074 * (_1034.z + (-0.5));
        float _1084 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1041.x + (-0.5));
        float _1086 = _1084 * (_1041.y + (-0.5));
        float _1087 = _1084 * (_1041.z + (-0.5));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = _1055 * 0.5;
        float _1092 = _1065 * 0.5;
        float _1093 = _1075 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1108 = (dot(vec3(_665, _666, _667), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _4072 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1118 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _4083 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1120 = _1119 * 2.0;
        float _1124 = (1.0 - _1119) / (_1119 + 1.0);
        float _4094 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1134 = ((((1.0 - _1125) * (_1120 + 2.0)) * exp2(log2(isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1120 + 1.0))) + _1125) * _1088;
        float _1135 = _1056 * 0.5;
        float _1136 = _1066 * 0.5;
        float _1137 = _1076 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1151 = (dot(vec3(_665, _666, _667), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1160 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _4127 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1162 + 1.0))) + _1167) * _1089;
        float _1177 = _1057 * 0.5;
        float _1178 = _1067 * 0.5;
        float _1179 = _1077 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_665, _666, _667), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _4160 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1204 + 1.0))) + _1209) * _1090;
        _1226 = _1057;
        _1228 = _1056;
        _1229 = _1055;
        _1230 = _1067;
        _1231 = _1066;
        _1232 = _1065;
        _1233 = _1077;
        _1234 = _1076;
        _1235 = _1075;
        _1236 = _1090;
        _1237 = _1089;
        _1238 = _1088;
        _1239 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)));
        _1240 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
        _1241 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
    }
    else
    {
        _1226 = _1227;
        _1228 = _1227;
        _1229 = _1227;
        _1230 = _1227;
        _1231 = _1227;
        _1232 = _1227;
        _1233 = _1227;
        _1234 = _1227;
        _1235 = _1227;
        _1236 = _1227;
        _1237 = _1227;
        _1238 = _1227;
        _1239 = 0.0;
        _1240 = 0.0;
        _1241 = 0.0;
    }
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1268 = fma(_897, cbModelParam._m0[30u].z, fma(_893, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _889));
        float _1272 = fma(_897, cbModelParam._m0[31u].z, fma(_893, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _889));
        float _1276 = fma(_897, cbModelParam._m0[32u].z, fma(_893, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _889));
        float _1299 = _889 + _665;
        float _1300 = _893 + _666;
        float _1301 = _897 + _667;
        float _1311 = fma(_1301, cbModelParam._m0[30u].z, fma(_1300, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1299)) - _1268;
        float _1312 = fma(_1301, cbModelParam._m0[31u].z, fma(_1300, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1299)) - _1272;
        float _1313 = fma(_1301, cbModelParam._m0[32u].z, fma(_1300, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1299)) - _1276;
        float _1317 = inversesqrt(dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313)));
        float _1330 = ((_1317 * _1311) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1268 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1331 = ((_1317 * _1312) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1272 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1332 = ((_1317 * _1313) / cbModelParam._m0[35u].z) + ((((((_1276 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        float _1367 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1334.x + (-0.5));
        float _1369 = _1367 * (_1334.y + (-0.5));
        float _1370 = _1367 * (_1334.z + (-0.5));
        float _1377 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1341.x + (-0.5));
        float _1379 = _1377 * (_1341.y + (-0.5));
        float _1380 = _1377 * (_1341.z + (-0.5));
        float _1387 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1348.x + (-0.5));
        float _1389 = _1387 * (_1348.y + (-0.5));
        float _1390 = _1387 * (_1348.z + (-0.5));
        float _1397 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1355.x + (-0.5));
        float _1399 = _1397 * (_1355.y + (-0.5));
        float _1400 = _1397 * (_1355.z + (-0.5));
        float _1401 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1402 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = _1368 * 0.5;
        float _1405 = _1378 * 0.5;
        float _1406 = _1388 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_665, _666, _667), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _4201 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1401 + 9.9999997473787516355514526367188e-06);
        float _4212 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _4223 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1431 + 1.0))) + _1436) * _1401;
        float _1446 = _1369 * 0.5;
        float _1447 = _1379 * 0.5;
        float _1448 = _1389 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_665, _666, _667), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1402 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _4256 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1473 + 1.0))) + _1478) * _1402;
        float _1488 = _1370 * 0.5;
        float _1489 = _1380 * 0.5;
        float _1490 = _1390 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_665, _666, _667), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _4289 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1515 + 1.0))) + _1520) * _1403;
        _1537 = _1370;
        _1538 = _1369;
        _1539 = _1368;
        _1540 = _1380;
        _1541 = _1379;
        _1542 = _1378;
        _1543 = _1390;
        _1544 = _1389;
        _1545 = _1388;
        _1546 = _1403;
        _1547 = _1402;
        _1548 = _1401;
        _1549 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
        _1550 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
        _1551 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
    }
    else
    {
        _1537 = _1227;
        _1538 = _1227;
        _1539 = _1227;
        _1540 = _1227;
        _1541 = _1227;
        _1542 = _1227;
        _1543 = _1227;
        _1544 = _1227;
        _1545 = _1227;
        _1546 = _1227;
        _1547 = _1227;
        _1548 = _1227;
        _1549 = 0.0;
        _1550 = 0.0;
        _1551 = 0.0;
    }
    float _1561 = (cbModelParam._m0[1u].x * (_1549 - _1239)) + _1239;
    float _1562 = (cbModelParam._m0[1u].x * (_1550 - _1240)) + _1240;
    float _1563 = (cbModelParam._m0[1u].x * (_1551 - _1241)) + _1241;
    float _1584 = fma(_1563, cbSceneParam._m0[89u].z, fma(_1562, cbSceneParam._m0[89u].y, _1561 * cbSceneParam._m0[89u].x));
    float _1587 = fma(_1563, cbSceneParam._m0[90u].z, fma(_1562, cbSceneParam._m0[90u].y, _1561 * cbSceneParam._m0[90u].x));
    float _1590 = fma(_1563, cbSceneParam._m0[91u].z, fma(_1562, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1561));
    float _1605 = _836 * 0.5;
    float _1606 = _837 * 0.5;
    float _1607 = _838 * 0.5;
    float _1608 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1539, _1542, _1545, _1548));
    float _1611 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1538, _1541, _1544, _1547));
    float _1614 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1537, _1540, _1543, _1546));
    float _1648;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1621 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1226, _1230, _1233, _1236));
        float _1625 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1228, _1231, _1234, _1237));
        float _1629 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1229, _1232, _1235, _1238));
        float _1636 = dot(vec4(cbModelParam._m0[39u]), vec4(_1605, _1606, _1607, 1.0));
        _1648 = dot(vec3(isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1636) ? 0.0 : (isnan(0.0) ? _1636 : max(0.0, _1636))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1648 = 1.0;
    }
    float _1659;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1650 = dot(vec4(cbModelParam._m0[40u]), vec4(_1605, _1606, _1607, 1.0));
        _1659 = dot(vec3(isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1650) ? 0.0 : (isnan(0.0) ? _1650 : max(0.0, _1650))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1659 = 1.0;
    }
    float _1663 = (_1659 * cbModelParam._m0[1u].x) + (_1648 * (1.0 - cbModelParam._m0[1u].x));
    float _1673 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _668);
    float _1674 = isnan(_1673) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1673 : min(cbModelParam._m0[25u].z, _1673));
    float _1755;
    float _1757;
    float _1759;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1722 = fma(_897, cbModelParam._m0[13u].z, fma(_893, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _889)) + cbModelParam._m0[13u].w;
        float _1726 = fma(_897, cbModelParam._m0[14u].z, fma(_893, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _889)) + cbModelParam._m0[14u].w;
        float _1730 = fma(_897, cbModelParam._m0[15u].z, fma(_893, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _889)) + cbModelParam._m0[15u].w;
        float _1733 = fma(_838, cbModelParam._m0[13u].z, fma(_837, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _836));
        float _1736 = fma(_838, cbModelParam._m0[14u].z, fma(_837, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _836));
        float _1739 = fma(_838, cbModelParam._m0[15u].z, fma(_837, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _836));
        float _1767;
        if (_1733 > 0.0)
        {
            _1767 = abs((1.0 - _1722) / _1733);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1722 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1767 = frontier_phi_17_15_ladder;
        }
        float _1937;
        if (_1736 > 0.0)
        {
            _1937 = abs((1.0 - _1726) / _1736);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1726 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1937 = frontier_phi_26_22_ladder;
        }
        float _2232;
        if (_1739 > 0.0)
        {
            _2232 = abs((1.0 - _1730) / _1739);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1730 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2232 = frontier_phi_38_33_ladder;
        }
        float _2234 = isnan(_1937) ? _1767 : (isnan(_1767) ? _1937 : min(_1767, _1937));
        float _2235 = isnan(_2232) ? _2234 : (isnan(_2234) ? _2232 : min(_2234, _2232));
        float _2239 = (_2235 * _1733) + _1722;
        float _2240 = (_2235 * _1736) + _1726;
        float _2241 = (_2235 * _1739) + _1730;
        float _2242 = _2235 * 9.9999997473787516355514526367188e-05;
        float _2244 = (-1.0) - _2242;
        float _2246 = _2242 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2241 > _2246) || ((_2241 < _2244) || ((_2240 > _2246) || ((_2240 < _2244) || ((_2239 < _2244) || (_2239 > _2246))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2386 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2241, cbModelParam._m0[9u].z, fma(_2240, cbModelParam._m0[9u].y, _2239 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2241, cbModelParam._m0[10u].z, fma(_2240, cbModelParam._m0[10u].y, _2239 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2241, cbModelParam._m0[11u].z, fma(_2240, cbModelParam._m0[11u].y, _2239 * cbModelParam._m0[11u].x))), _1674);
            frontier_phi_16_38_ladder = _2386.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2386.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2386.x * cbModelParam._m0[1u].y;
        }
        _1755 = frontier_phi_16_38_ladder_2;
        _1757 = frontier_phi_16_38_ladder_1;
        _1759 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1743 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_836, _837, _838), _1674);
        _1755 = _1743.x * cbModelParam._m0[1u].y;
        _1757 = _1743.y * cbModelParam._m0[1u].y;
        _1759 = _1743.z * cbModelParam._m0[1u].y;
    }
    float _1763 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _668);
    float _1764 = isnan(_1763) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1763 : min(cbModelParam._m0[25u].w, _1763));
    float _1854;
    float _1856;
    float _1858;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1818 = fma(_897, cbModelParam._m0[21u].z, fma(_893, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _889)) + cbModelParam._m0[21u].w;
        float _1822 = fma(_897, cbModelParam._m0[22u].z, fma(_893, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _889)) + cbModelParam._m0[22u].w;
        float _1826 = fma(_897, cbModelParam._m0[23u].z, fma(_893, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _889)) + cbModelParam._m0[23u].w;
        float _1829 = fma(_838, cbModelParam._m0[21u].z, fma(_837, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _836));
        float _1832 = fma(_838, cbModelParam._m0[22u].z, fma(_837, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _836));
        float _1835 = fma(_838, cbModelParam._m0[23u].z, fma(_837, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _836));
        float _1942;
        if (_1829 > 0.0)
        {
            _1942 = abs((1.0 - _1818) / _1829);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1818 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1942 = frontier_phi_28_24_ladder;
        }
        float _2259;
        if (_1832 > 0.0)
        {
            _2259 = abs((1.0 - _1822) / _1832);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1822 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2259 = frontier_phi_40_35_ladder;
        }
        float _2586;
        if (_1835 > 0.0)
        {
            _2586 = abs((1.0 - _1826) / _1835);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1826 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2586 = frontier_phi_50_47_ladder;
        }
        float _2588 = isnan(_2259) ? _1942 : (isnan(_1942) ? _2259 : min(_1942, _2259));
        float _2589 = isnan(_2586) ? _2588 : (isnan(_2588) ? _2586 : min(_2588, _2586));
        float _2593 = (_2589 * _1829) + _1818;
        float _2594 = (_2589 * _1832) + _1822;
        float _2595 = (_2589 * _1835) + _1826;
        float _2596 = _2589 * 9.9999997473787516355514526367188e-05;
        float _2597 = (-1.0) - _2596;
        float _2599 = _2596 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2595 > _2599) || ((_2595 < _2597) || ((_2594 > _2599) || ((_2594 < _2597) || ((_2593 < _2597) || (_2593 > _2599))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2713 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2595, cbModelParam._m0[17u].z, fma(_2594, cbModelParam._m0[17u].y, _2593 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2595, cbModelParam._m0[18u].z, fma(_2594, cbModelParam._m0[18u].y, _2593 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2595, cbModelParam._m0[19u].z, fma(_2594, cbModelParam._m0[19u].y, _2593 * cbModelParam._m0[19u].x))), _1764);
            frontier_phi_25_50_ladder = _2713.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2713.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2713.x * cbModelParam._m0[1u].z;
        }
        _1854 = frontier_phi_25_50_ladder_2;
        _1856 = frontier_phi_25_50_ladder_1;
        _1858 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1838 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_836, _837, _838), _1764);
        _1854 = _1838.x * cbModelParam._m0[1u].z;
        _1856 = _1838.y * cbModelParam._m0[1u].z;
        _1858 = _1838.z * cbModelParam._m0[1u].z;
    }
    float _1870 = ((((1.0 - _857) * ((_844 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_857 * _844)) * _828;
    float _1871 = _1870 * ((cbModelParam._m0[1u].w * (_1854 - _1755)) + _1755);
    float _1872 = _1870 * ((cbModelParam._m0[1u].w * (_1856 - _1757)) + _1757);
    float _1873 = _1870 * ((cbModelParam._m0[1u].w * (_1858 - _1759)) + _1759);
    float _1876 = fma(_1873, cbSceneParam._m0[89u].z, fma(_1872, cbSceneParam._m0[89u].y, _1871 * cbSceneParam._m0[89u].x));
    float _1879 = fma(_1873, cbSceneParam._m0[90u].z, fma(_1872, cbSceneParam._m0[90u].y, _1871 * cbSceneParam._m0[90u].x));
    float _1882 = fma(_1873, cbSceneParam._m0[91u].z, fma(_1872, cbSceneParam._m0[91u].y, _1871 * cbSceneParam._m0[91u].x));
    float _1916 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1920 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1924 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1928 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1929 = _1916 / _1928;
    float _1930 = _1920 / _1928;
    float _1931 = _1924 / _1928;
    float _2078;
    float _2079;
    float _2080;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1958 = ((uint(_1931 > cbSceneParam._m0[59u].y) + uint(_1931 > cbSceneParam._m0[59u].x)) + uint(_1931 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1959 = _1958 + 43u;
        uint _1967 = _1958 + 44u;
        uint _1975 = _1958 + 45u;
        uint _1983 = _1958 + 46u;
        float _1994 = fma(_1928, cbSceneParam._m0[_1959].w, fma(_1924, cbSceneParam._m0[_1959].z, fma(_1920, cbSceneParam._m0[_1959].y, _1916 * cbSceneParam._m0[_1959].x)));
        float _1998 = fma(_1928, cbSceneParam._m0[_1967].w, fma(_1924, cbSceneParam._m0[_1967].z, fma(_1920, cbSceneParam._m0[_1967].y, _1916 * cbSceneParam._m0[_1967].x)));
        float _2006 = fma(_1928, cbSceneParam._m0[_1983].w, fma(_1924, cbSceneParam._m0[_1983].z, fma(_1920, cbSceneParam._m0[_1983].y, _1916 * cbSceneParam._m0[_1983].x)));
        float _2011 = cbSceneParam._m0[33u].z * _2006;
        float _2013 = cbSceneParam._m0[33u].w * _2006;
        float _2016 = fma(_1928, cbSceneParam._m0[_1975].w, fma(_1924, cbSceneParam._m0[_1975].z, fma(_1920, cbSceneParam._m0[_1975].y, _1916 * cbSceneParam._m0[_1975].x))) / _2006;
        float _2064 = (cbSceneParam._m0[33u].x - sqrt(((_1930 * _1930) + (_1929 * _1929)) + (_1931 * _1931))) * cbSceneParam._m0[33u].y;
        float _4415 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2071 = (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2011 + _1994) / _2006, (_2013 + _1998) / _2006), _2016), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2013 + _1994) / _2006, (_1998 - _2011) / _2006), _2016), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1994 - _2011) / _2006, (_1998 - _2013) / _2006), _2016), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1994 - _2013) / _2006, (_2011 + _1998) / _2006), _2016), 0.0)).x), vec4(0.25)));
        _2078 = 1.0 - (_2071 * cbSceneParam._m0[34u].x);
        _2079 = 1.0 - (_2071 * cbSceneParam._m0[34u].y);
        _2080 = 1.0 - (_2071 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2078 = 1.0;
        _2079 = 1.0;
        _2080 = 1.0;
    }
    float _2144;
    float _2146;
    float _2148;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2132 = fma(_1928, cbSceneParam._m0[63u].w, fma(_1924, cbSceneParam._m0[63u].z, fma(_1920, cbSceneParam._m0[63u].y, _1916 * cbSceneParam._m0[63u].x)));
        float _2133 = fma(_1928, cbSceneParam._m0[60u].w, fma(_1924, cbSceneParam._m0[60u].z, fma(_1920, cbSceneParam._m0[60u].y, _1916 * cbSceneParam._m0[60u].x))) / _2132;
        float _2134 = fma(_1928, cbSceneParam._m0[61u].w, fma(_1924, cbSceneParam._m0[61u].z, fma(_1920, cbSceneParam._m0[61u].y, _1916 * cbSceneParam._m0[61u].x))) / _2132;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2133 >= cbSceneParam._m0[64u].x) && (_2134 >= cbSceneParam._m0[64u].y)) && (_2133 <= cbSceneParam._m0[64u].z)) && (_2134 <= cbSceneParam._m0[64u].w))
        {
            float _2272 = fma(_1928, cbSceneParam._m0[62u].w, fma(_1924, cbSceneParam._m0[62u].z, fma(_1920, cbSceneParam._m0[62u].y, _1916 * cbSceneParam._m0[62u].x))) / _2132;
            float _2276 = isnan(cbSceneParam._m0[41u].w) ? _2272 : (isnan(_2272) ? cbSceneParam._m0[41u].w : max(_2272, cbSceneParam._m0[41u].w));
            float _2319 = (cbSceneParam._m0[33u].x - sqrt(((_1930 * _1930) + (_1929 * _1929)) + (_1931 * _1931))) * cbSceneParam._m0[33u].y;
            float _4431 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
            float _2326 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2133, cbSceneParam._m0[33u].w + _2134), _2276), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2133, _2134 - cbSceneParam._m0[33u].z), _2276), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2133 - cbSceneParam._m0[33u].z, _2134 - cbSceneParam._m0[33u].w), _2276), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2133 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2134), _2276), 0.0)).x), vec4(0.25)));
            float _2330 = 1.0 - (_2326 * cbSceneParam._m0[34u].x);
            float _2331 = 1.0 - (_2326 * cbSceneParam._m0[34u].y);
            float _2332 = 1.0 - (_2326 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2332) ? _2080 : (isnan(_2080) ? _2332 : min(_2080, _2332));
            frontier_phi_37_36_ladder_1 = isnan(_2331) ? _2079 : (isnan(_2079) ? _2331 : min(_2079, _2331));
            frontier_phi_37_36_ladder_2 = isnan(_2330) ? _2078 : (isnan(_2078) ? _2330 : min(_2078, _2330));
        }
        else
        {
            frontier_phi_37_36_ladder = _2080;
            frontier_phi_37_36_ladder_1 = _2079;
            frontier_phi_37_36_ladder_2 = _2078;
        }
        _2144 = frontier_phi_37_36_ladder_2;
        _2146 = frontier_phi_37_36_ladder_1;
        _2148 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2144 = _2078;
        _2146 = _2079;
        _2148 = _2080;
    }
    uvec4 _2153 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _2155 = _2153.x * 14u;
    uint _2156 = _2155 + 13u;
    float _2163 = _828 + (-1.0);
    float _2168 = (cbLight._m0[_2156].x * _2163) + 1.0;
    float _2169 = (cbLight._m0[_2156].y * _2163) + 1.0;
    float _2170 = (cbLight._m0[_2156].z * _2163) + 1.0;
    float _2171 = (cbLight._m0[_2156].w * _2163) + 1.0;
    uint _2172 = _2155 + 5u;
    float _2178 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
    uint _2182 = _2155 + 4u;
    float _2191 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
    uint _2195 = _2155 | 1u;
    float _2206 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_665, _666, _667));
    float _2209 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_665, _666, _667));
    float _4467 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _4478 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2214 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * 0.3183098733425140380859375;
    float _2216 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * 0.3183098733425140380859375;
    float _2223 = ((cbLight._m0[_2172].x * _2178) * _2216) + (((cbLight._m0[_2182].x * _2144) * _2191) * _2214);
    float _2224 = ((_2178 * cbLight._m0[_2172].y) * _2216) + (((cbLight._m0[_2182].y * _2146) * _2191) * _2214);
    float _2225 = ((_2178 * cbLight._m0[_2172].z) * _2216) + (((cbLight._m0[_2182].z * _2148) * _2191) * _2214);
    uvec4 _2229 = floatBitsToUint(cbLight._m0[_2155 + 12u]);
    bool _2231 = _2229.x == 0u;
    float _2333;
    float _2335;
    float _2337;
    if (_2231)
    {
        _2333 = _2223;
        _2335 = _2224;
        _2337 = _2225;
    }
    else
    {
        uint _2341 = _2155 + 6u;
        float _2357 = (dot(vec3(cbLight._m0[_2155 + 2u].xyz), vec3(_665, _666, _667)) * 0.5) + 0.5;
        float _2358 = _2357 * _2357;
        float _4489 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2359 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _2360 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
        _2333 = (((cbLight._m0[_2341].x * 0.3183098733425140380859375) * _2359) * _2360) + _2223;
        _2335 = (((cbLight._m0[_2341].y * 0.3183098733425140380859375) * _2359) * _2360) + _2224;
        _2337 = (((cbLight._m0[_2341].z * 0.3183098733425140380859375) * _2359) * _2360) + _2225;
    }
    bool _2340 = _2229.y == 0u;
    float _2395;
    float _2397;
    float _2399;
    if (_2340)
    {
        _2395 = _2333;
        _2397 = _2335;
        _2399 = _2337;
    }
    else
    {
        uint _2557 = _2155 + 7u;
        float _2573 = (dot(vec3(cbLight._m0[_2155 + 3u].xyz), vec3(_665, _666, _667)) * 0.5) + 0.5;
        float _2574 = _2573 * _2573;
        float _4505 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2575 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2576 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
        _2395 = (((cbLight._m0[_2557].x * 0.3183098733425140380859375) * _2575) * _2576) + _2333;
        _2397 = (((cbLight._m0[_2557].y * 0.3183098733425140380859375) * _2575) * _2576) + _2335;
        _2399 = (((cbLight._m0[_2557].z * 0.3183098733425140380859375) * _2575) * _2576) + _2337;
    }
    uint _2402 = _2155 + 8u;
    float _2415 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2155].w)) * _668) * 0.949999988079071044921875);
    float _2416 = _2415 * _2415;
    float _2417 = cbLight._m0[_2155].x + _745;
    float _2418 = cbLight._m0[_2155].y + _746;
    float _2419 = cbLight._m0[_2155].z + _747;
    float _2423 = inversesqrt(dot(vec3(_2417, _2418, _2419), vec3(_2417, _2418, _2419)));
    float _2424 = _2423 * _2417;
    float _2425 = _2423 * _2418;
    float _2426 = _2423 * _2419;
    float _2427 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2155].xyz));
    float _4521 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2430 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _4532 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _2431 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _2432 = dot(vec3(_665, _666, _667), vec3(_2424, _2425, _2426));
    float _4543 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2435 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _2436 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_2424, _2425, _2426));
    float _4554 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2440 = _2416 * _2416;
    float _2444 = ((_2435 * _2435) * (_2440 + (-1.0))) + 1.0;
    float _2455 = (exp2(log2(1.0 - (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2456 = 1.0 - _2416;
    float _2467 = (0.5 / (((_2431 * ((_2430 * _2456) + _2416)) + 9.9999999392252902907785028219223e-09) + (((_2431 * _2456) + _2416) * _2430))) * _2430;
    float _4565 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2469 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2440 / ((_2444 * _2444) * 3.141590118408203125));
    uint _2483 = _2155 + 9u;
    float _2494 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2195].w)) * _668) * 0.949999988079071044921875);
    float _2495 = _2494 * _2494;
    float _2496 = cbLight._m0[_2195].x + _745;
    float _2497 = cbLight._m0[_2195].y + _746;
    float _2498 = cbLight._m0[_2195].z + _747;
    float _2502 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
    float _2503 = _2502 * _2496;
    float _2504 = _2502 * _2497;
    float _2505 = _2502 * _2498;
    float _2506 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2195].xyz));
    float _4576 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2509 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _2510 = dot(vec3(_665, _666, _667), vec3(_2503, _2504, _2505));
    float _4587 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2513 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
    float _2514 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_2503, _2504, _2505));
    float _4598 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2518 = _2495 * _2495;
    float _2522 = ((_2513 * _2513) * (_2518 + (-1.0))) + 1.0;
    float _2531 = (exp2(log2(1.0 - (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2532 = 1.0 - _2495;
    float _2542 = (0.5 / (((_2431 * ((_2509 * _2532) + _2495)) + 9.9999999392252902907785028219223e-09) + (((_2431 * _2532) + _2495) * _2509))) * _2509;
    float _4609 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2544 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2518 / ((_2522 * _2522) * 3.141590118408203125));
    float _2554 = (((_2531 * cbLight._m0[_2483].x) * _2544) * _2178) + ((((cbLight._m0[_2402].x * _2144) * _2455) * _2469) * _2191);
    float _2555 = (((_2531 * cbLight._m0[_2483].y) * _2544) * _2178) + ((((cbLight._m0[_2402].y * _2146) * _2455) * _2469) * _2191);
    float _2556 = (((_2531 * cbLight._m0[_2483].z) * _2544) * _2178) + ((((cbLight._m0[_2402].z * _2148) * _2455) * _2469) * _2191);
    float _2612;
    float _2614;
    float _2616;
    if (_2231)
    {
        _2612 = _2554;
        _2614 = _2555;
        _2616 = _2556;
    }
    else
    {
        uint _2618 = _2155 + 2u;
        uint _2622 = _2155 + 10u;
        float _2636 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2618].w)) * _668) * 0.949999988079071044921875);
        float _2637 = _2636 * _2636;
        float _2638 = cbLight._m0[_2618].x + _745;
        float _2639 = cbLight._m0[_2618].y + _746;
        float _2640 = cbLight._m0[_2618].z + _747;
        float _2644 = inversesqrt(dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640)));
        float _2645 = _2644 * _2638;
        float _2646 = _2644 * _2639;
        float _2647 = _2644 * _2640;
        float _2648 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2618].xyz));
        float _4620 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2651 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _2652 = dot(vec3(_665, _666, _667), vec3(_2645, _2646, _2647));
        float _4631 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2655 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2656 = dot(vec3(cbLight._m0[_2618].xyz), vec3(_2645, _2646, _2647));
        float _4642 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2660 = _2637 * _2637;
        float _2664 = ((_2655 * _2655) * (_2660 + (-1.0))) + 1.0;
        float _2673 = (exp2(log2(1.0 - (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2674 = 1.0 - _2637;
        float _2684 = (0.5 / (((_2431 * ((_2651 * _2674) + _2637)) + 9.9999999392252902907785028219223e-09) + (((_2431 * _2674) + _2637) * _2651))) * _2651;
        float _4653 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2686 = (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_2660 / ((_2664 * _2664) * 3.141590118408203125));
        float _2687 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
        _2612 = (((_2673 * cbLight._m0[_2622].x) * _2686) * _2687) + _2554;
        _2614 = (((_2673 * cbLight._m0[_2622].y) * _2686) * _2687) + _2555;
        _2616 = (((_2673 * cbLight._m0[_2622].z) * _2686) * _2687) + _2556;
    }
    float _2718;
    float _2720;
    float _2722;
    if (_2340)
    {
        _2718 = _2612;
        _2720 = _2614;
        _2722 = _2616;
    }
    else
    {
        uint _2729 = _2155 + 3u;
        uint _2733 = _2155 + 11u;
        float _2747 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2729].w)) * _668) * 0.949999988079071044921875);
        float _2748 = _2747 * _2747;
        float _2749 = cbLight._m0[_2729].x + _745;
        float _2750 = cbLight._m0[_2729].y + _746;
        float _2751 = cbLight._m0[_2729].z + _747;
        float _2755 = inversesqrt(dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751)));
        float _2756 = _2755 * _2749;
        float _2757 = _2755 * _2750;
        float _2758 = _2755 * _2751;
        float _2759 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2729].xyz));
        float _4669 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2762 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2763 = dot(vec3(_665, _666, _667), vec3(_2756, _2757, _2758));
        float _4680 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2766 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2767 = dot(vec3(cbLight._m0[_2729].xyz), vec3(_2756, _2757, _2758));
        float _4691 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2771 = _2748 * _2748;
        float _2775 = ((_2766 * _2766) * (_2771 + (-1.0))) + 1.0;
        float _2784 = (exp2(log2(1.0 - (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2785 = 1.0 - _2748;
        float _2795 = (0.5 / (((_2431 * ((_2762 * _2785) + _2748)) + 9.9999999392252902907785028219223e-09) + (((_2431 * _2785) + _2748) * _2762))) * _2762;
        float _4702 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2797 = (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2771 / ((_2775 * _2775) * 3.141590118408203125));
        float _2798 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
        _2718 = (((_2784 * cbLight._m0[_2733].x) * _2797) * _2798) + _2612;
        _2720 = (((_2784 * cbLight._m0[_2733].y) * _2797) * _2798) + _2614;
        _2722 = (((_2784 * cbLight._m0[_2733].z) * _2797) * _2798) + _2616;
    }
    float _2864;
    float _2866;
    float _2868;
    float _2870;
    float _2872;
    float _2874;
    if (_2153.y == 0u)
    {
        uvec4 _2819 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2820 = _2819.x;
        uint _2831 = uint((float(_2819.y) * floor(float(uint(cbSceneParam._m0[85u].y * _766) / _2820))) + floor(float(uint(cbSceneParam._m0[85u].x * _765) / _2820)));
        float _2841 = (log2(_1931 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2842 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        uint _2845 = uint(isnan(14.0) ? _2842 : (isnan(_2842) ? 14.0 : min(_2842, 14.0)));
        uvec4 _2850 = texelFetch(g_lightClusterGridBuffer, int(((_2845 << 2u) + (_2831 << 6u)) >> 2u));
        uint _2851 = _2850.x;
        uint _2852 = _2819.z;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        if (((((1u << ((_2852 >> 4u) & 15u)) + 4294967295u) & _2851) == 0u) || ((_2852 & 240u) == 0u))
        {
            _2931 = 0.0;
            _2933 = 0.0;
            _2935 = 0.0;
            _2937 = 0.0;
            _2939 = 0.0;
            _2941 = 0.0;
        }
        else
        {
            float _2932;
            float _2934;
            float _2936;
            float _2938;
            float _2940;
            float _2942;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            uint _3090 = 0u;
            uint _3099;
            bool _3100;
            for (;;)
            {
                _3099 = texelFetch(g_lightClassification, int((((_2845 << 5u) + (_2831 << 9u)) + (_3090 << 2u)) >> 2u)).x;
                _3100 = _3099 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3100)
                {
                    frontier_phi_71_pred = _3089;
                    frontier_phi_71_pred_1 = _3088;
                    frontier_phi_71_pred_2 = _3087;
                    frontier_phi_71_pred_3 = _3086;
                    frontier_phi_71_pred_4 = _3085;
                    frontier_phi_71_pred_5 = _3084;
                }
                else
                {
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    uint _3235;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3088;
                    _3234 = _3089;
                    _3235 = _3099;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    for (;;)
                    {
                        uint _3239 = uint(findLSB(_3235)) + (_3090 << 5u);
                        uint _3236 = (_3235 + 4294967295u) & _3235;
                        uint _3241 = _3239 * 48u;
                        vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3241)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 3u)).x));
                        uint _3261 = (_3239 * 48u) + 4u;
                        vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3261)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 3u)).x));
                        uint _3280 = (_3239 * 48u) + 8u;
                        vec3 _3291 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3280)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 2u)).x));
                        float _3295 = _3255.x - _1929;
                        float _3296 = _3255.y - _1930;
                        float _3297 = _3255.z - _1931;
                        float _3298 = dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297));
                        float _3301 = inversesqrt(_3298);
                        float _3302 = _3301 * _3295;
                        float _3303 = _3301 * _3296;
                        float _3304 = _3301 * _3297;
                        float _3305 = dot(vec3(_784, _787, _790), vec3(_3302, _3303, _3304));
                        float _3310 = 1.0 - (_3298 * _3255.w);
                        float _4728 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3311 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                        float _3312 = sqrt(_3298) * _3274.w;
                        float _3315 = 1.39999997615814208984375 / (_3312 + 1.39999997615814208984375);
                        float _3316 = _3315 * _3315;
                        float _3319 = ((1.0 - _3316) * _3305) + _3316;
                        float _3322 = _3312 * _3312;
                        float _3326 = ((isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))) * _3311) / ((_3322 * 0.699999988079071044921875) + 1.0);
                        float _3330 = (-0.0) - _1929;
                        float _3331 = (-0.0) - _1930;
                        float _3332 = (-0.0) - _1931;
                        float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                        float _3337 = _3336 * _3330;
                        float _3338 = _3336 * _3331;
                        float _3339 = _3336 * _3332;
                        float _3346 = exp2(log2(1.0 / ((_3322 * 3.5) + 5.0)) * 0.25);
                        float _3347 = 1.0 - _844;
                        float _3354 = sqrt(1.0 - ((1.0 - (_3347 * _3347)) * (1.0 - (_3346 * _3346))));
                        float _3355 = _3354 * _3354;
                        float _3356 = _3355 * _3355;
                        float _3357 = _3337 + _3302;
                        float _3358 = _3338 + _3303;
                        float _3359 = _3339 + _3304;
                        float _3363 = inversesqrt(dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359)));
                        float _3367 = dot(vec3(_784, _787, _790), vec3(_3337, _3338, _3339));
                        float _4744 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3370 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                        float _3371 = dot(vec3(_784, _787, _790), vec3(_3363 * _3357, _3363 * _3358, _3363 * _3359));
                        float _4755 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                        float _3374 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                        float _3378 = ((_3374 * _3374) * (_3356 + (-1.0))) + 1.0;
                        float _3379 = _3315 * _3355;
                        float _3380 = _3379 * _3379;
                        float _3383 = ((1.0 - _3380) * _3305) + _3380;
                        float _4766 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3384 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                        float _3385 = 1.0 - _3355;
                        float _3395 = (0.5 / (((_3384 * ((_3370 * _3385) + _3355)) + 9.9999999392252902907785028219223e-09) + (((_3384 * _3385) + _3355) * _3370))) * _3384;
                        float _4777 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3406 = (((_3356 * 3.1415927410125732421875) * (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0)))) / ((_3378 * _3378) * ((_3322 * 2.1991131305694580078125) + 3.141590118408203125))) * _3311;
                        _3159 = (_3326 * _3274.x) + _3232;
                        _3160 = (_3326 * _3274.y) + _3233;
                        _3161 = (_3326 * _3274.z) + _3234;
                        _3156 = (_3406 * _3291.x) + _3229;
                        _3157 = (_3406 * _3291.y) + _3230;
                        _3158 = (_3406 * _3291.z) + _3231;
                        if (_3236 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3160;
                            _3234 = _3161;
                            _3235 = _3236;
                        }
                    }
                    frontier_phi_71_pred = _3161;
                    frontier_phi_71_pred_1 = _3160;
                    frontier_phi_71_pred_2 = _3159;
                    frontier_phi_71_pred_3 = _3158;
                    frontier_phi_71_pred_4 = _3157;
                    frontier_phi_71_pred_5 = _3156;
                }
                _2942 = frontier_phi_71_pred;
                _2940 = frontier_phi_71_pred_1;
                _2938 = frontier_phi_71_pred_2;
                _2936 = frontier_phi_71_pred_3;
                _2934 = frontier_phi_71_pred_4;
                _2932 = frontier_phi_71_pred_5;
                uint _3091 = _3090 + 1u;
                if (_3091 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3084 = _2932;
                    _3085 = _2934;
                    _3086 = _2936;
                    _3087 = _2938;
                    _3088 = _2940;
                    _3089 = _2942;
                    _3090 = _3091;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2931 = _2932;
            _2933 = _2934;
            _2935 = _2936;
            _2937 = _2938;
            _2939 = _2940;
            _2941 = _2942;
        }
        uvec4 _2945 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2946 = _2945.z;
        uint _2948 = (_2946 >> 8u) & 15u;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        if (((4294967295u << _2948) & _2851) == 0u)
        {
            _3052 = _2931;
            _3054 = _2933;
            _3056 = _2935;
            _3058 = _2937;
            _3060 = _2939;
            _3062 = _2941;
        }
        else
        {
            float _3077 = inversesqrt(dot(vec3(_1929, _1930, _1931), vec3(_1929, _1930, _1931)));
            float _3078 = _3077 * _1929;
            float _3079 = _3077 * _1930;
            float _3080 = _3077 * _1931;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2948 < ((_2946 >> 12u) & 15u))
            {
                float _3053;
                float _3055;
                float _3057;
                float _3059;
                float _3061;
                float _3063;
                float _3212 = _2931;
                float _3213 = _2933;
                float _3214 = _2935;
                float _3215 = _2937;
                float _3216 = _2939;
                float _3217 = _2941;
                uint _3218 = _2948;
                uint _3227;
                bool _3228;
                for (;;)
                {
                    _3227 = texelFetch(g_lightClassification, int((((_2845 << 5u) + (_2831 << 9u)) + (_3218 << 2u)) >> 2u)).x;
                    _3228 = _3227 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3228)
                    {
                        frontier_phi_82_pred = _3217;
                        frontier_phi_82_pred_1 = _3216;
                        frontier_phi_82_pred_2 = _3215;
                        frontier_phi_82_pred_3 = _3214;
                        frontier_phi_82_pred_4 = _3213;
                        frontier_phi_82_pred_5 = _3212;
                    }
                    else
                    {
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3433 = _3212;
                        float _3434 = _3213;
                        float _3435 = _3214;
                        float _3436 = _3215;
                        float _3437 = _3216;
                        float _3438 = _3217;
                        uint _3439 = _3227;
                        uint _3440;
                        vec4 _3465;
                        float _3466;
                        vec4 _3481;
                        vec3 _3493;
                        vec4 _3508;
                        vec4 _3523;
                        float _3569;
                        bool _3570;
                        for (;;)
                        {
                            uint _3450 = ((_3218 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3439));
                            _3440 = (_3439 + 4294967295u) & _3439;
                            uint _3452 = _3450 * 40u;
                            _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            _3466 = _3465.w;
                            uint _3468 = (_3450 * 40u) + 4u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3483 = (_3450 * 40u) + 8u;
                            _3493 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x));
                            uint _3495 = (_3450 * 40u) + 16u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            uint _3510 = (_3450 * 40u) + 20u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3525 = (_3450 * 40u) + 24u;
                            vec4 _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            uint _3544 = (_3450 * 40u) + 28u;
                            vec4 _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            _3569 = fma(_1931, _3557.z, fma(_1930, _3557.y, _3557.x * _1929)) + _3557.w;
                            _3570 = !((fma(_1931, _3538.z, fma(_1930, _3538.y, _3538.x * _1929)) + _3538.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3570)
                            {
                                float _3597 = _3465.x - _1929;
                                float _3598 = _3465.y - _1930;
                                float _3599 = _3465.z - _1931;
                                float _3600 = dot(vec3(_3597, _3598, _3599), vec3(_3597, _3598, _3599));
                                float _3603 = inversesqrt(_3600);
                                float _3604 = _3603 * _3597;
                                float _3605 = _3603 * _3598;
                                float _3606 = _3603 * _3599;
                                float _3610 = 1.0 - (_3600 / (_3466 * _3466));
                                float _4788 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3611 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                                float _3615 = sqrt(_3600) * _3481.w;
                                float _3617 = 1.39999997615814208984375 / (_3615 + 1.39999997615814208984375);
                                float _3618 = _3617 * _3617;
                                float _3621 = ((1.0 - _3618) * dot(vec3(_3604, _3605, _3606), vec3(_784, _787, _790))) + _3618;
                                float _3624 = _3615 * _3615;
                                float _3628 = (fma(_1931, _3508.z, fma(_1930, _3508.y, _3508.x * _1929)) + _3508.w) / _3569;
                                float _3629 = (fma(_1931, _3523.z, fma(_1930, _3523.y, _3523.x * _1929)) + _3523.w) / _3569;
                                float _3633 = 1.0 - dot(vec2(_3628, _3629), vec2(_3628, _3629));
                                float _4804 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3634 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                                float _3635 = _3634 * (((isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0))) * _3611) / ((_3624 * 0.699999988079071044921875) + 1.0));
                                float _3647 = exp2(log2(1.0 / ((_3624 * 3.5) + 5.0)) * 0.25);
                                float _3648 = 1.0 - _844;
                                float _3655 = sqrt(1.0 - ((1.0 - (_3648 * _3648)) * (1.0 - (_3647 * _3647))));
                                float _3656 = _3655 * _3655;
                                float _3657 = _3656 * _3656;
                                float _3658 = _3604 - _3078;
                                float _3659 = _3605 - _3079;
                                float _3660 = _3606 - _3080;
                                float _3664 = inversesqrt(dot(vec3(_3658, _3659, _3660), vec3(_3658, _3659, _3660)));
                                float _3668 = dot(vec3(_784, _787, _790), vec3((-0.0) - _3078, (-0.0) - _3079, (-0.0) - _3080));
                                float _4815 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3671 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                                float _3672 = dot(vec3(_784, _787, _790), vec3(_3664 * _3658, _3664 * _3659, _3664 * _3660));
                                float _4826 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3675 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3679 = ((_3675 * _3675) * (_3657 + (-1.0))) + 1.0;
                                float _3680 = _3617 * _3656;
                                float _3681 = _3680 * _3680;
                                float _3687 = ((1.0 - _3681) * dot(vec3(_784, _787, _790), vec3(_3604, _3605, _3606))) + _3681;
                                float _4837 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3688 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3689 = 1.0 - _3656;
                                float _3699 = (0.5 / (((_3688 * ((_3671 * _3689) + _3656)) + 9.9999999392252902907785028219223e-09) + (((_3688 * _3689) + _3656) * _3671))) * _3688;
                                float _4848 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3709 = (_3634 * _3611) * (((_3657 * 3.1415927410125732421875) * (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0)))) / ((_3679 * _3679) * ((_3624 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3635 * _3481.z;
                                frontier_phi_88_pred_1 = _3635 * _3481.y;
                                frontier_phi_88_pred_2 = _3635 * _3481.x;
                                frontier_phi_88_pred_3 = _3709 * _3493.z;
                                frontier_phi_88_pred_4 = _3709 * _3493.y;
                                frontier_phi_88_pred_5 = _3709 * _3493.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3718 = frontier_phi_88_pred;
                            _3717 = frontier_phi_88_pred_1;
                            _3716 = frontier_phi_88_pred_2;
                            _3715 = frontier_phi_88_pred_3;
                            _3714 = frontier_phi_88_pred_4;
                            _3713 = frontier_phi_88_pred_5;
                            _3423 = _3716 + _3436;
                            _3424 = _3717 + _3437;
                            _3425 = _3718 + _3438;
                            _3420 = _3713 + _3433;
                            _3421 = _3714 + _3434;
                            _3422 = _3715 + _3435;
                            if (_3440 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3440;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3425;
                        frontier_phi_82_pred_1 = _3424;
                        frontier_phi_82_pred_2 = _3423;
                        frontier_phi_82_pred_3 = _3422;
                        frontier_phi_82_pred_4 = _3421;
                        frontier_phi_82_pred_5 = _3420;
                    }
                    _3063 = frontier_phi_82_pred;
                    _3061 = frontier_phi_82_pred_1;
                    _3059 = frontier_phi_82_pred_2;
                    _3057 = frontier_phi_82_pred_3;
                    _3055 = frontier_phi_82_pred_4;
                    _3053 = frontier_phi_82_pred_5;
                    uint _3219 = _3218 + 1u;
                    if (_3219 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3212 = _3053;
                        _3213 = _3055;
                        _3214 = _3057;
                        _3215 = _3059;
                        _3216 = _3061;
                        _3217 = _3063;
                        _3218 = _3219;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3059;
                frontier_phi_63_64_ladder_1 = _3063;
                frontier_phi_63_64_ladder_2 = _3061;
                frontier_phi_63_64_ladder_3 = _3057;
                frontier_phi_63_64_ladder_4 = _3055;
                frontier_phi_63_64_ladder_5 = _3053;
            }
            else
            {
                frontier_phi_63_64_ladder = _2937;
                frontier_phi_63_64_ladder_1 = _2941;
                frontier_phi_63_64_ladder_2 = _2939;
                frontier_phi_63_64_ladder_3 = _2935;
                frontier_phi_63_64_ladder_4 = _2933;
                frontier_phi_63_64_ladder_5 = _2931;
            }
            _3052 = frontier_phi_63_64_ladder_5;
            _3054 = frontier_phi_63_64_ladder_4;
            _3056 = frontier_phi_63_64_ladder_3;
            _3058 = frontier_phi_63_64_ladder;
            _3060 = frontier_phi_63_64_ladder_2;
            _3062 = frontier_phi_63_64_ladder_1;
        }
        float _3067 = isnan(1.0) ? _828 : (isnan(_828) ? 1.0 : min(_828, 1.0));
        _2864 = (_3067 * _3058) + _2395;
        _2866 = (_3067 * _3060) + _2397;
        _2868 = (_3067 * _3062) + _2399;
        _2870 = ((_3052 * 0.039999999105930328369140625) * _3067) + _2718;
        _2872 = ((_3054 * 0.039999999105930328369140625) * _3067) + _2720;
        _2874 = ((_3056 * 0.039999999105930328369140625) * _3067) + _2722;
    }
    else
    {
        _2864 = _2395;
        _2866 = _2397;
        _2868 = _2399;
        _2870 = _2718;
        _2872 = _2720;
        _2874 = _2722;
    }
    float _4864 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _4875 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _4886 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _2891 = ((isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0))) * (_2864 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _828))) + ((_2870 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1663)) * cbPerFrame._m0[3u].x);
    float _2892 = ((isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * (_2866 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _828))) + ((_2872 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1663)) * cbPerFrame._m0[3u].x);
    float _2893 = ((isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (_2868 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _828))) + ((_2874 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1663)) * cbPerFrame._m0[3u].x);
    uint _2894 = _242 + 6u;
    float _2902 = _765 / cbSceneParam._m0[86u].x;
    float _2903 = _766 / cbSceneParam._m0[86u].y;
    vec4 _2917 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2902, _2903, (log2((isnan(cbSceneParam._m0[77u].w) ? _686 : (isnan(_686) ? cbSceneParam._m0[77u].w : min(_686, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2919 = _2917.x;
    float _2920 = _2917.y;
    float _2921 = _2917.z;
    float _2922 = _2917.w;
    float _2994;
    float _2996;
    float _2998;
    float _3000;
    if (_686 > cbSceneParam._m0[78u].w)
    {
        float _2956 = isnan(_686) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _686 : min(cbSceneParam._m0[80u].w, _686));
        float _2957 = _2956 / _686;
        float _2968 = _2957 * _738;
        float _2969 = _739 * _2957;
        float _2970 = (-0.0) - _2969;
        float _2972 = _2957 * _740;
        float _2974 = (cbSceneParam._m0[77u].w * _2970) / _2956;
        float _2975 = _2974 + cbSceneParam._m0[79u].w;
        float _2976 = cbSceneParam._m0[79u].w - _2969;
        float _2982 = sqrt(((_2968 * _2968) + (_2969 * _2969)) + (_2972 * _2972));
        float _2985 = (1.0 - (cbSceneParam._m0[77u].w / _2956)) * _2982;
        float _2990 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2992 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3169;
        if (abs((_2970 - _2974) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3169 = ((((_2975 > 0.0) ? exp2(_2990 * _2975) : (2.0 - exp2(_2992 * _2975))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2985;
        }
        else
        {
            float _3113 = 1.0 / cbSceneParam._m0[80u].x;
            float _3114 = isnan(_2976) ? _2975 : (isnan(_2975) ? _2976 : max(_2975, _2976));
            float _3115 = isnan(_2976) ? _2975 : (isnan(_2975) ? _2976 : min(_2975, _2976));
            float _3124 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : min(_3114, 0.0));
            float _3125 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : min(_3115, 0.0));
            _3169 = ((abs(_2982 / _2970) * cbSceneParam._m0[80u].y) * ((((_3124 - _3125) * 2.0) - ((exp2(_2990 * (isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0)))) - exp2(_2990 * (isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0))))) * _3113)) - ((exp2(_2992 * _3124) - exp2(_2992 * _3125)) * _3113))) + (_2985 * cbSceneParam._m0[80u].z);
        }
        vec4 _3171 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2902, _2903, 1.0), 0.0);
        float _3180 = exp2((_3169 * (-1.44269502162933349609375)) * (1.0 - _3171.w));
        float _3181 = log2(_3180);
        float _3197 = log2(_2922);
        _2994 = (exp2(_3197 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].x)) * _3171.x) / cbSceneParam._m0[78u].x)) + _2919;
        _2996 = (exp2(_3197 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].y)) * _3171.y) / cbSceneParam._m0[78u].y)) + _2920;
        _2998 = (exp2(_3197 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].z)) * _3171.z) / cbSceneParam._m0[78u].z)) + _2921;
        _3000 = _3180 * _2922;
    }
    else
    {
        _2994 = _2919;
        _2996 = _2920;
        _2998 = _2921;
        _3000 = _2922;
    }
    bool _3207;
    vec4 _3010;
    vec4 _3032;
    float _3034;
    float _3038;
    float _3039;
    float _3040;
    float _3041;
    bool _3051;
    for (;;)
    {
        _3010 = cbMatDynParam._m0[0u];
        float _3012 = roundEven(_3010.y);
        bool _3013 = _3012 == 3.0;
        float _3014 = log2(_3000);
        float _3021 = exp2(_3014 * cbSceneParam._m0[78u].x) * _2891;
        float _3022 = exp2(_3014 * cbSceneParam._m0[78u].y) * _2892;
        float _3023 = exp2(_3014 * cbSceneParam._m0[78u].z) * _2893;
        float _3030 = _754 + (-0.5);
        _3032 = cbMtdParam._m0[1u];
        _3034 = _3032.y * _3030;
        float _3037 = (_3012 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3038 = _3037 * (_3013 ? _3021 : (_3021 + (cbSceneParam._m0[72u].w * _2994)));
        _3039 = _3037 * (_3013 ? _3022 : (_3022 + (cbSceneParam._m0[72u].w * _2996)));
        _3040 = _3037 * (_3013 ? _3023 : (_3023 + (cbSceneParam._m0[72u].w * _2998)));
        _3041 = _3030 * 0.999000012874603271484375;
        _3051 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3051)
        {
            if ((cbInstanceData._m0[_242 + 7u].x + _3041) < 0.5)
            {
                _3207 = true;
                break;
            }
        }
        uint _3148 = _803 + uint(_3010.w);
        if ((cbInstanceData._m0[_3148].w < 1.0) && ((cbInstanceData._m0[_3148].w + _3041) < 0.5))
        {
            _3207 = true;
            break;
        }
        if ((_3034 + 1.0) < _3032.x)
        {
            _3207 = true;
            break;
        }
        _3207 = false;
        break;
    }
    float _3411;
    if (_3207)
    {
        discard_state = true;
        _3411 = 0.0;
    }
    else
    {
        _3411 = cbInstanceData._m0[_2894].w;
    }
    SV_Target.x = _3038;
    SV_Target.y = _3039;
    SV_Target.z = _3040;
    SV_Target.w = _3411;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2894].w;
    discard_exit();
}


