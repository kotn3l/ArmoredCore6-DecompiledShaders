#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1279;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _366 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _383 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _366) * cbMtdParam._m0[24u].x) + _366) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3608 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _391 = (_384 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _392 = (_384 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _393 = (_384 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _411 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _268) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _269) + cbTextureTilingScale._m0[20u].w));
    vec4 _438 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _455 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _457 = _455.x;
    float _458 = _455.y;
    float _459 = _455.z;
    float _468 = ((_438.z - _459) * _384) + _459;
    float _471 = ((((_438.x - _457) * _384) + _457) * 2.0) + (-1.0);
    float _472 = ((((_438.y - _458) * _384) + _458) * 2.0) + (-1.0);
    float _473 = dot(vec2(_471, _472), vec2(_471, _472));
    float _3619 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _478 = sqrt(1.0 - (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))));
    vec4 _498 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _510 = (_471 + ((((_411.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_498.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _511 = (_472 + ((((_411.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_498.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _514 = fma(_478, _237, fma(_511, _244, _510 * _230));
    float _517 = fma(_478, _238, fma(_511, _245, _510 * _231));
    float _520 = fma(_478, _239, fma(_511, _246, _510 * _232));
    float _524 = inversesqrt(dot(vec3(_514, _517, _520), vec3(_514, _517, _520)));
    vec4 _553 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _555 = _553.x;
    float _556 = 1.0 - _555;
    float _562 = (cbMtdParam._m0[19u].x + dot(vec4(_524 * _514, _524 * _517, _524 * _520, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_555 - _556) * cbMtdParam._m0[24u].z) + _556) * cbMtdParam._m0[21u].z);
    float _3630 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _565 = (-0.0) - cbMtdParam._m0[24u].y;
    float _567 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _568 = isnan(1.0) ? _567 : (isnan(_567) ? 1.0 : min(_567, 1.0));
    float _575 = _563 - ((_563 * TEXCOORD_8.x) * _568);
    float _576 = _563 - ((_563 * TEXCOORD_8.y) * _568);
    float _577 = _563 - ((_563 * TEXCOORD_8.z) * _568);
    float _584 = (_575 * (cbMtdParam._m0[17u].x - _391)) + _391;
    float _585 = (_576 * (cbMtdParam._m0[17u].y - _392)) + _392;
    float _586 = (_577 * (cbMtdParam._m0[17u].z - _393)) + _393;
    vec4 _598 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _600 = _598.x;
    float _601 = 1.0 - _600;
    float _629 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_600 - _601) * cbMtdParam._m0[24u].w) + _601) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3651 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _638 = ((((cbMtdParam._m0[10u].x - _584) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _630) + _584;
    float _639 = ((((cbMtdParam._m0[10u].y - _585) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _630) + _585;
    float _640 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _586)) * _630) + _586;
    float _645 = (((_411.z - _468) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _468;
    float _649 = ((_498.z - _645) * cbMtdParam._m0[19u].w) + _645;
    vec4 _663 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _670 = (_663.x * 2.0) + (-1.0);
    float _671 = (_663.y * 2.0) + (-1.0);
    float _672 = dot(vec2(_670, _671), vec2(_670, _671));
    float _3662 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _680 = ((_663.z - _649) * _575) + _649;
    float _683 = ((cbMtdParam._m0[23u].y - _680) * _630) + _680;
    vec4 _702 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _708 = (_702.x * 2.0) + (-1.0);
    float _709 = (_702.y * 2.0) + (-1.0);
    float _710 = dot(vec2(_708, _709), vec2(_708, _709));
    float _3673 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _725 = ((sqrt(1.0 - (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) - _478) * _577) + _478;
    float _728 = (((_670 - _510) * _575) + _510) + (cbMtdParam._m0[21u].x * _510);
    float _729 = (((_671 - _511) * _576) + _511) + (cbMtdParam._m0[21u].x * _511);
    float _740 = (((_708 - _728) + (_728 * cbMtdParam._m0[22u].z)) * _630) + _728;
    float _741 = (((_709 - _729) + (_729 * cbMtdParam._m0[22u].z)) * _630) + _729;
    float _742 = (_630 * (sqrt(1.0 - (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0)))) - _725)) + _725;
    float _744 = cbMtdParam._m0[22u].x + _498.w;
    float _747 = fma(_742, _237, fma(_741, _244, _740 * _230));
    float _750 = fma(_742, _238, fma(_741, _245, _740 * _231));
    float _753 = fma(_742, _239, fma(_741, _246, _740 * _232));
    float _757 = inversesqrt(dot(vec3(_747, _750, _753), vec3(_747, _750, _753)));
    float _758 = _757 * _747;
    float _759 = _757 * _750;
    float _760 = _757 * _753;
    float _3684 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _761 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _3706 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _3717 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3728 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _779 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _830 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _820);
    float _831 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _820);
    float _832 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _820);
    float _836 = inversesqrt(dot(vec3(_830, _831, _832), vec3(_830, _831, _832)));
    float _837 = _830 * _836;
    float _838 = _831 * _836;
    float _839 = _832 * _836;
    float _845 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _846 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _864 = fma(_760, cbSceneParam._m0[5u].z, fma(_759, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _758));
    float _867 = fma(_760, cbSceneParam._m0[6u].z, fma(_759, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _758));
    float _870 = fma(_760, cbSceneParam._m0[7u].z, fma(_759, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _758));
    uint _884 = (_249 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _890 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0)))) * cbInstanceData._m0[_884].x;
    float _891 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0)))) * cbInstanceData._m0[_884].y;
    float _892 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) * cbInstanceData._m0[_884].z;
    float _3739 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _3750 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _3761 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    vec4 _904 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _845, cbSceneParam._m0[86u].y * _846));
    float _908 = ((isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * TEXCOORD_5.w) * _904.x;
    float _909 = dot(vec3(_758, _759, _760), vec3(_837, _838, _839));
    float _912 = _909 * 2.0;
    float _916 = (_912 * _758) - _837;
    float _917 = (_912 * _759) - _838;
    float _918 = (_912 * _760) - _839;
    float _922 = abs(dot(vec3(_837, _838, _839), vec3(_758, _759, _760)));
    float _3772 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _924 = sqrt(_761);
    float _937 = exp2((_924 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_924 * 3.0));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _973 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _977 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1278;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1003 = fma(_977, cbModelParam._m0[26u].z, fma(_973, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _969));
        float _1007 = fma(_977, cbModelParam._m0[27u].z, fma(_973, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _969));
        float _1011 = fma(_977, cbModelParam._m0[28u].z, fma(_973, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _969));
        float _1036 = _969 + _758;
        float _1037 = _973 + _759;
        float _1038 = _977 + _760;
        float _1048 = fma(_1038, cbModelParam._m0[26u].z, fma(_1037, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1036)) - _1003;
        float _1049 = fma(_1038, cbModelParam._m0[27u].z, fma(_1037, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1036)) - _1007;
        float _1050 = fma(_1038, cbModelParam._m0[28u].z, fma(_1037, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1036)) - _1011;
        float _1054 = inversesqrt(dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050)));
        float _1067 = ((_1054 * _1048) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1003 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1068 = ((_1054 * _1049) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1007 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1069 = ((_1054 * _1050) / cbModelParam._m0[34u].z) + ((((((_1011 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        float _1106 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1072.x + (-0.5));
        float _1108 = _1106 * (_1072.y + (-0.5));
        float _1109 = _1106 * (_1072.z + (-0.5));
        float _1116 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1079.x + (-0.5));
        float _1118 = _1116 * (_1079.y + (-0.5));
        float _1119 = _1116 * (_1079.z + (-0.5));
        float _1126 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1086.x + (-0.5));
        float _1128 = _1126 * (_1086.y + (-0.5));
        float _1129 = _1126 * (_1086.z + (-0.5));
        float _1136 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1093.x + (-0.5));
        float _1138 = _1136 * (_1093.y + (-0.5));
        float _1139 = _1136 * (_1093.z + (-0.5));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = _1107 * 0.5;
        float _1144 = _1117 * 0.5;
        float _1145 = _1127 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1160 = (dot(vec3(_758, _759, _760), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1170 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3820 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1172 + 1.0))) + _1177) * _1140;
        float _1187 = _1108 * 0.5;
        float _1188 = _1118 * 0.5;
        float _1189 = _1128 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_758, _759, _760), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3853 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1214 + 1.0))) + _1219) * _1141;
        float _1229 = _1109 * 0.5;
        float _1230 = _1119 * 0.5;
        float _1231 = _1129 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_758, _759, _760), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3886 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1256 + 1.0))) + _1261) * _1142;
        _1278 = _1109;
        _1280 = _1108;
        _1281 = _1107;
        _1282 = _1119;
        _1283 = _1118;
        _1284 = _1117;
        _1285 = _1129;
        _1286 = _1128;
        _1287 = _1127;
        _1288 = _1142;
        _1289 = _1141;
        _1290 = _1140;
        _1291 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1292 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1293 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
    }
    else
    {
        _1278 = _1279;
        _1280 = _1279;
        _1281 = _1279;
        _1282 = _1279;
        _1283 = _1279;
        _1284 = _1279;
        _1285 = _1279;
        _1286 = _1279;
        _1287 = _1279;
        _1288 = _1279;
        _1289 = _1279;
        _1290 = _1279;
        _1291 = 0.0;
        _1292 = 0.0;
        _1293 = 0.0;
    }
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1318 = fma(_977, cbModelParam._m0[30u].z, fma(_973, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _969));
        float _1322 = fma(_977, cbModelParam._m0[31u].z, fma(_973, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _969));
        float _1326 = fma(_977, cbModelParam._m0[32u].z, fma(_973, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _969));
        float _1349 = _969 + _758;
        float _1350 = _973 + _759;
        float _1351 = _977 + _760;
        float _1361 = fma(_1351, cbModelParam._m0[30u].z, fma(_1350, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1349)) - _1318;
        float _1362 = fma(_1351, cbModelParam._m0[31u].z, fma(_1350, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1349)) - _1322;
        float _1363 = fma(_1351, cbModelParam._m0[32u].z, fma(_1350, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1349)) - _1326;
        float _1367 = inversesqrt(dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363)));
        float _1380 = ((_1367 * _1361) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1318 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1381 = ((_1367 * _1362) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1322 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1382 = ((_1367 * _1363) / cbModelParam._m0[35u].z) + ((((((_1326 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        float _1417 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1384.x + (-0.5));
        float _1419 = _1417 * (_1384.y + (-0.5));
        float _1420 = _1417 * (_1384.z + (-0.5));
        float _1427 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1391.x + (-0.5));
        float _1429 = _1427 * (_1391.y + (-0.5));
        float _1430 = _1427 * (_1391.z + (-0.5));
        float _1437 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1398.x + (-0.5));
        float _1439 = _1437 * (_1398.y + (-0.5));
        float _1440 = _1437 * (_1398.z + (-0.5));
        float _1447 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1405.x + (-0.5));
        float _1449 = _1447 * (_1405.y + (-0.5));
        float _1450 = _1447 * (_1405.z + (-0.5));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = _1418 * 0.5;
        float _1455 = _1428 * 0.5;
        float _1456 = _1438 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_758, _759, _760), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _3949 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1481 + 1.0))) + _1486) * _1451;
        float _1496 = _1419 * 0.5;
        float _1497 = _1429 * 0.5;
        float _1498 = _1439 * 0.5;
        float _1499 = dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498));
        float _1504 = (_1499 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1499);
        float _1512 = (dot(vec3(_758, _759, _760), vec3(_1504 * _1496, _1504 * _1497, _1504 * _1498)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1521 = sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _3982 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1523 + 1.0))) + _1528) * _1452;
        float _1538 = _1420 * 0.5;
        float _1539 = _1430 * 0.5;
        float _1540 = _1440 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_758, _759, _760), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _4015 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1565 + 1.0))) + _1570) * _1453;
        _1587 = _1420;
        _1588 = _1419;
        _1589 = _1418;
        _1590 = _1430;
        _1591 = _1429;
        _1592 = _1428;
        _1593 = _1440;
        _1594 = _1439;
        _1595 = _1438;
        _1596 = _1453;
        _1597 = _1452;
        _1598 = _1451;
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
        _1600 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
        _1601 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
    }
    else
    {
        _1587 = _1279;
        _1588 = _1279;
        _1589 = _1279;
        _1590 = _1279;
        _1591 = _1279;
        _1592 = _1279;
        _1593 = _1279;
        _1594 = _1279;
        _1595 = _1279;
        _1596 = _1279;
        _1597 = _1279;
        _1598 = _1279;
        _1599 = 0.0;
        _1600 = 0.0;
        _1601 = 0.0;
    }
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1291)) + _1291;
    float _1612 = (cbModelParam._m0[1u].x * (_1600 - _1292)) + _1292;
    float _1613 = (cbModelParam._m0[1u].x * (_1601 - _1293)) + _1293;
    float _1634 = fma(_1613, cbSceneParam._m0[89u].z, fma(_1612, cbSceneParam._m0[89u].y, _1611 * cbSceneParam._m0[89u].x));
    float _1637 = fma(_1613, cbSceneParam._m0[90u].z, fma(_1612, cbSceneParam._m0[90u].y, _1611 * cbSceneParam._m0[90u].x));
    float _1640 = fma(_1613, cbSceneParam._m0[91u].z, fma(_1612, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1611));
    float _1655 = _916 * 0.5;
    float _1656 = _917 * 0.5;
    float _1657 = _918 * 0.5;
    float _1658 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1589, _1592, _1595, _1598));
    float _1661 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1588, _1591, _1594, _1597));
    float _1664 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1698;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1671 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1278, _1282, _1285, _1288));
        float _1675 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1280, _1283, _1286, _1289));
        float _1679 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1281, _1284, _1287, _1290));
        float _1686 = dot(vec4(cbModelParam._m0[39u]), vec4(_1655, _1656, _1657, 1.0));
        _1698 = dot(vec3(isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1686) ? 0.0 : (isnan(0.0) ? _1686 : max(0.0, _1686))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1698 = 1.0;
    }
    float _1709;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1700 = dot(vec4(cbModelParam._m0[40u]), vec4(_1655, _1656, _1657, 1.0));
        _1709 = dot(vec3(isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1700) ? 0.0 : (isnan(0.0) ? _1700 : max(0.0, _1700))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1709 = 1.0;
    }
    float _1713 = (_1709 * cbModelParam._m0[1u].x) + (_1698 * (1.0 - cbModelParam._m0[1u].x));
    float _1723 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _761);
    float _1724 = isnan(_1723) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1723 : min(cbModelParam._m0[25u].z, _1723));
    float _1805;
    float _1807;
    float _1809;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1772 = fma(_977, cbModelParam._m0[13u].z, fma(_973, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _969)) + cbModelParam._m0[13u].w;
        float _1776 = fma(_977, cbModelParam._m0[14u].z, fma(_973, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _969)) + cbModelParam._m0[14u].w;
        float _1780 = fma(_977, cbModelParam._m0[15u].z, fma(_973, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _969)) + cbModelParam._m0[15u].w;
        float _1783 = fma(_918, cbModelParam._m0[13u].z, fma(_917, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _916));
        float _1786 = fma(_918, cbModelParam._m0[14u].z, fma(_917, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _916));
        float _1789 = fma(_918, cbModelParam._m0[15u].z, fma(_917, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _916));
        float _1817;
        if (_1783 > 0.0)
        {
            _1817 = abs((1.0 - _1772) / _1783);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1772 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1817 = frontier_phi_14_12_ladder;
        }
        float _2039;
        if (_1786 > 0.0)
        {
            _2039 = abs((1.0 - _1776) / _1786);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1776 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2039 = frontier_phi_23_19_ladder;
        }
        float _2285;
        if (_1789 > 0.0)
        {
            _2285 = abs((1.0 - _1780) / _1789);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1780 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2285 = frontier_phi_35_30_ladder;
        }
        float _2287 = isnan(_2039) ? _1817 : (isnan(_1817) ? _2039 : min(_1817, _2039));
        float _2288 = isnan(_2285) ? _2287 : (isnan(_2287) ? _2285 : min(_2287, _2285));
        float _2292 = (_2288 * _1783) + _1772;
        float _2293 = (_2288 * _1786) + _1776;
        float _2294 = (_2288 * _1789) + _1780;
        float _2295 = _2288 * 9.9999997473787516355514526367188e-05;
        float _2297 = (-1.0) - _2295;
        float _2299 = _2295 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2294 > _2299) || ((_2294 < _2297) || ((_2293 > _2299) || ((_2293 < _2297) || ((_2292 < _2297) || (_2292 > _2299))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2418 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2294, cbModelParam._m0[9u].z, fma(_2293, cbModelParam._m0[9u].y, _2292 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2294, cbModelParam._m0[10u].z, fma(_2293, cbModelParam._m0[10u].y, _2292 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2294, cbModelParam._m0[11u].z, fma(_2293, cbModelParam._m0[11u].y, _2292 * cbModelParam._m0[11u].x))), _1724);
            frontier_phi_13_35_ladder = _2418.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2418.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2418.x * cbModelParam._m0[1u].y;
        }
        _1805 = frontier_phi_13_35_ladder_2;
        _1807 = frontier_phi_13_35_ladder_1;
        _1809 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1793 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_916, _917, _918), _1724);
        _1805 = _1793.x * cbModelParam._m0[1u].y;
        _1807 = _1793.y * cbModelParam._m0[1u].y;
        _1809 = _1793.z * cbModelParam._m0[1u].y;
    }
    float _1813 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _761);
    float _1814 = isnan(_1813) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1813 : min(cbModelParam._m0[25u].w, _1813));
    float _1904;
    float _1906;
    float _1908;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1868 = fma(_977, cbModelParam._m0[21u].z, fma(_973, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _969)) + cbModelParam._m0[21u].w;
        float _1872 = fma(_977, cbModelParam._m0[22u].z, fma(_973, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _969)) + cbModelParam._m0[22u].w;
        float _1876 = fma(_977, cbModelParam._m0[23u].z, fma(_973, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _969)) + cbModelParam._m0[23u].w;
        float _1879 = fma(_918, cbModelParam._m0[21u].z, fma(_917, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _916));
        float _1882 = fma(_918, cbModelParam._m0[22u].z, fma(_917, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _916));
        float _1885 = fma(_918, cbModelParam._m0[23u].z, fma(_917, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _916));
        float _2044;
        if (_1879 > 0.0)
        {
            _2044 = abs((1.0 - _1868) / _1879);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1868 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2044 = frontier_phi_25_21_ladder;
        }
        float _2312;
        if (_1882 > 0.0)
        {
            _2312 = abs((1.0 - _1872) / _1882);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1872 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2312 = frontier_phi_37_32_ladder;
        }
        float _2517;
        if (_1885 > 0.0)
        {
            _2517 = abs((1.0 - _1876) / _1885);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1876 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2517 = frontier_phi_46_43_ladder;
        }
        float _2519 = isnan(_2312) ? _2044 : (isnan(_2044) ? _2312 : min(_2044, _2312));
        float _2520 = isnan(_2517) ? _2519 : (isnan(_2519) ? _2517 : min(_2519, _2517));
        float _2524 = (_2520 * _1879) + _1868;
        float _2525 = (_2520 * _1882) + _1872;
        float _2526 = (_2520 * _1885) + _1876;
        float _2527 = _2520 * 9.9999997473787516355514526367188e-05;
        float _2528 = (-1.0) - _2527;
        float _2530 = _2527 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2526 > _2530) || ((_2526 < _2528) || ((_2525 > _2530) || ((_2525 < _2528) || ((_2524 < _2528) || (_2524 > _2530))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2725 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2526, cbModelParam._m0[17u].z, fma(_2525, cbModelParam._m0[17u].y, _2524 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2526, cbModelParam._m0[18u].z, fma(_2525, cbModelParam._m0[18u].y, _2524 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2526, cbModelParam._m0[19u].z, fma(_2525, cbModelParam._m0[19u].y, _2524 * cbModelParam._m0[19u].x))), _1814);
            frontier_phi_22_46_ladder = _2725.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2725.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2725.x * cbModelParam._m0[1u].z;
        }
        _1904 = frontier_phi_22_46_ladder_2;
        _1906 = frontier_phi_22_46_ladder_1;
        _1908 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1888 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_916, _917, _918), _1814);
        _1904 = _1888.x * cbModelParam._m0[1u].z;
        _1906 = _1888.y * cbModelParam._m0[1u].z;
        _1908 = _1888.z * cbModelParam._m0[1u].z;
    }
    float _1920 = ((((1.0 - _937) * ((_924 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_937 * _924)) * _908;
    float _1921 = _1920 * ((cbModelParam._m0[1u].w * (_1904 - _1805)) + _1805);
    float _1922 = _1920 * ((cbModelParam._m0[1u].w * (_1906 - _1807)) + _1807);
    float _1923 = _1920 * ((cbModelParam._m0[1u].w * (_1908 - _1809)) + _1809);
    float _1926 = fma(_1923, cbSceneParam._m0[89u].z, fma(_1922, cbSceneParam._m0[89u].y, _1921 * cbSceneParam._m0[89u].x));
    float _1929 = fma(_1923, cbSceneParam._m0[90u].z, fma(_1922, cbSceneParam._m0[90u].y, _1921 * cbSceneParam._m0[90u].x));
    float _1932 = fma(_1923, cbSceneParam._m0[91u].z, fma(_1922, cbSceneParam._m0[91u].y, _1921 * cbSceneParam._m0[91u].x));
    vec4 _1940 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_845, _846));
    float _1942 = _1940.w;
    float _1954 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1942);
    float _1955 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1942);
    float _1956 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1942);
    uvec4 _1960 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _1962 = _1960.x * 14u;
    uint _1963 = _1962 + 13u;
    float _1970 = _908 + (-1.0);
    float _1975 = (cbLight._m0[_1963].x * _1970) + 1.0;
    float _1976 = (cbLight._m0[_1963].y * _1970) + 1.0;
    float _1977 = (cbLight._m0[_1963].z * _1970) + 1.0;
    float _1978 = (cbLight._m0[_1963].w * _1970) + 1.0;
    uint _1979 = _1962 + 5u;
    float _1985 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
    uint _1989 = _1962 + 4u;
    float _1998 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
    uint _2002 = _1962 | 1u;
    float _2013 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_758, _759, _760));
    float _2016 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_758, _759, _760));
    float _4151 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _4162 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2021 = (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * 0.3183098733425140380859375;
    float _2023 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * 0.3183098733425140380859375;
    float _2030 = ((cbLight._m0[_1979].x * _1985) * _2023) + (((cbLight._m0[_1989].x * _1954) * _1998) * _2021);
    float _2031 = ((_1985 * cbLight._m0[_1979].y) * _2023) + (((cbLight._m0[_1989].y * _1955) * _1998) * _2021);
    float _2032 = ((_1985 * cbLight._m0[_1979].z) * _2023) + (((cbLight._m0[_1989].z * _1956) * _1998) * _2021);
    uvec4 _2036 = floatBitsToUint(cbLight._m0[_1962 + 12u]);
    bool _2038 = _2036.x == 0u;
    float _2049;
    float _2051;
    float _2053;
    if (_2038)
    {
        _2049 = _2030;
        _2051 = _2031;
        _2053 = _2032;
    }
    else
    {
        uint _2057 = _1962 + 6u;
        float _2073 = (dot(vec3(cbLight._m0[_1962 + 2u].xyz), vec3(_758, _759, _760)) * 0.5) + 0.5;
        float _2074 = _2073 * _2073;
        float _4173 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2075 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _2076 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2049 = (((cbLight._m0[_2057].x * 0.3183098733425140380859375) * _2075) * _2076) + _2030;
        _2051 = (((cbLight._m0[_2057].y * 0.3183098733425140380859375) * _2075) * _2076) + _2031;
        _2053 = (((cbLight._m0[_2057].z * 0.3183098733425140380859375) * _2075) * _2076) + _2032;
    }
    bool _2056 = _2036.y == 0u;
    float _2094;
    float _2096;
    float _2098;
    if (_2056)
    {
        _2094 = _2049;
        _2096 = _2051;
        _2098 = _2053;
    }
    else
    {
        uint _2256 = _1962 + 7u;
        float _2272 = (dot(vec3(cbLight._m0[_1962 + 3u].xyz), vec3(_758, _759, _760)) * 0.5) + 0.5;
        float _2273 = _2272 * _2272;
        float _4189 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2274 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _2275 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2094 = (((cbLight._m0[_2256].x * 0.3183098733425140380859375) * _2274) * _2275) + _2049;
        _2096 = (((cbLight._m0[_2256].y * 0.3183098733425140380859375) * _2274) * _2275) + _2051;
        _2098 = (((cbLight._m0[_2256].z * 0.3183098733425140380859375) * _2274) * _2275) + _2053;
    }
    uint _2101 = _1962 + 8u;
    float _2114 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1962].w)) * _761) * 0.949999988079071044921875);
    float _2115 = _2114 * _2114;
    float _2116 = cbLight._m0[_1962].x + _837;
    float _2117 = cbLight._m0[_1962].y + _838;
    float _2118 = cbLight._m0[_1962].z + _839;
    float _2122 = inversesqrt(dot(vec3(_2116, _2117, _2118), vec3(_2116, _2117, _2118)));
    float _2123 = _2122 * _2116;
    float _2124 = _2122 * _2117;
    float _2125 = _2122 * _2118;
    float _2126 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_1962].xyz));
    float _4205 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2129 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _4216 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _2130 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _2131 = dot(vec3(_758, _759, _760), vec3(_2123, _2124, _2125));
    float _4227 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _2135 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_2123, _2124, _2125));
    float _4238 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2139 = _2115 * _2115;
    float _2143 = ((_2134 * _2134) * (_2139 + (-1.0))) + 1.0;
    float _2154 = (exp2(log2(1.0 - (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2155 = 1.0 - _2115;
    float _2166 = (0.5 / (((_2130 * ((_2129 * _2155) + _2115)) + 9.9999999392252902907785028219223e-09) + (((_2130 * _2155) + _2115) * _2129))) * _2129;
    float _4249 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2168 = (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2139 / ((_2143 * _2143) * 3.141590118408203125));
    uint _2182 = _1962 + 9u;
    float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2002].w)) * _761) * 0.949999988079071044921875);
    float _2194 = _2193 * _2193;
    float _2195 = cbLight._m0[_2002].x + _837;
    float _2196 = cbLight._m0[_2002].y + _838;
    float _2197 = cbLight._m0[_2002].z + _839;
    float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
    float _2202 = _2201 * _2195;
    float _2203 = _2201 * _2196;
    float _2204 = _2201 * _2197;
    float _2205 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2002].xyz));
    float _4260 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _2209 = dot(vec3(_758, _759, _760), vec3(_2202, _2203, _2204));
    float _4271 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _2213 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_2202, _2203, _2204));
    float _4282 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2217 = _2194 * _2194;
    float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
    float _2230 = (exp2(log2(1.0 - (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2231 = 1.0 - _2194;
    float _2241 = (0.5 / (((_2130 * ((_2208 * _2231) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_2130 * _2231) + _2194) * _2208))) * _2208;
    float _4293 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2243 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
    float _2253 = (((_2230 * cbLight._m0[_2182].x) * _2243) * _1985) + ((((cbLight._m0[_2101].x * _1954) * _2154) * _2168) * _1998);
    float _2254 = (((_2230 * cbLight._m0[_2182].y) * _2243) * _1985) + ((((cbLight._m0[_2101].y * _1955) * _2154) * _2168) * _1998);
    float _2255 = (((_2230 * cbLight._m0[_2182].z) * _2243) * _1985) + ((((cbLight._m0[_2101].z * _1956) * _2154) * _2168) * _1998);
    float _2317;
    float _2319;
    float _2321;
    if (_2038)
    {
        _2317 = _2253;
        _2319 = _2254;
        _2321 = _2255;
    }
    else
    {
        uint _2323 = _1962 + 2u;
        uint _2327 = _1962 + 10u;
        float _2341 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2323].w)) * _761) * 0.949999988079071044921875);
        float _2342 = _2341 * _2341;
        float _2343 = cbLight._m0[_2323].x + _837;
        float _2344 = cbLight._m0[_2323].y + _838;
        float _2345 = cbLight._m0[_2323].z + _839;
        float _2349 = inversesqrt(dot(vec3(_2343, _2344, _2345), vec3(_2343, _2344, _2345)));
        float _2350 = _2349 * _2343;
        float _2351 = _2349 * _2344;
        float _2352 = _2349 * _2345;
        float _2353 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2323].xyz));
        float _4304 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2357 = dot(vec3(_758, _759, _760), vec3(_2350, _2351, _2352));
        float _4315 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2360 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _2361 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_2350, _2351, _2352));
        float _4326 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2365 = _2342 * _2342;
        float _2369 = ((_2360 * _2360) * (_2365 + (-1.0))) + 1.0;
        float _2378 = (exp2(log2(1.0 - (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2379 = 1.0 - _2342;
        float _2389 = (0.5 / (((_2130 * ((_2356 * _2379) + _2342)) + 9.9999999392252902907785028219223e-09) + (((_2130 * _2379) + _2342) * _2356))) * _2356;
        float _4337 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2391 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2365 / ((_2369 * _2369) * 3.141590118408203125));
        float _2392 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2317 = (((_2378 * cbLight._m0[_2327].x) * _2391) * _2392) + _2253;
        _2319 = (((_2378 * cbLight._m0[_2327].y) * _2391) * _2392) + _2254;
        _2321 = (((_2378 * cbLight._m0[_2327].z) * _2391) * _2392) + _2255;
    }
    float _2427;
    float _2429;
    float _2431;
    if (_2056)
    {
        _2427 = _2317;
        _2429 = _2319;
        _2431 = _2321;
    }
    else
    {
        uint _2438 = _1962 + 3u;
        uint _2442 = _1962 + 11u;
        float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2438].w)) * _761) * 0.949999988079071044921875);
        float _2457 = _2456 * _2456;
        float _2458 = cbLight._m0[_2438].x + _837;
        float _2459 = cbLight._m0[_2438].y + _838;
        float _2460 = cbLight._m0[_2438].z + _839;
        float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
        float _2465 = _2464 * _2458;
        float _2466 = _2464 * _2459;
        float _2467 = _2464 * _2460;
        float _2468 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2438].xyz));
        float _4353 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _2472 = dot(vec3(_758, _759, _760), vec3(_2465, _2466, _2467));
        float _4364 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2476 = dot(vec3(cbLight._m0[_2438].xyz), vec3(_2465, _2466, _2467));
        float _4375 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2480 = _2457 * _2457;
        float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
        float _2493 = (exp2(log2(1.0 - (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2494 = 1.0 - _2457;
        float _2504 = (0.5 / (((_2130 * ((_2471 * _2494) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2130 * _2494) + _2457) * _2471))) * _2471;
        float _4386 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2506 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
        float _2507 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2427 = (((_2493 * cbLight._m0[_2442].x) * _2506) * _2507) + _2317;
        _2429 = (((_2493 * cbLight._m0[_2442].y) * _2506) * _2507) + _2319;
        _2431 = (((_2493 * cbLight._m0[_2442].z) * _2506) * _2507) + _2321;
    }
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    float _2650;
    float _2652;
    if (_1960.y == 0u)
    {
        float _2582 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2583 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2582;
        float _2584 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2582;
        float _2585 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2582;
        uvec4 _2597 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2598 = _2597.x;
        uint _2609 = uint((float(_2597.y) * floor(float(uint(cbSceneParam._m0[85u].y * _846) / _2598))) + floor(float(uint(cbSceneParam._m0[85u].x * _845) / _2598)));
        float _2619 = (log2(_2585 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2620 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        uint _2623 = uint(isnan(14.0) ? _2620 : (isnan(_2620) ? 14.0 : min(_2620, 14.0)));
        uvec4 _2628 = texelFetch(g_lightClusterGridBuffer, int(((_2623 << 2u) + (_2609 << 6u)) >> 2u));
        uint _2629 = _2628.x;
        uint _2630 = _2597.z;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        if (((((1u << ((_2630 >> 4u) & 15u)) + 4294967295u) & _2629) == 0u) || ((_2630 & 240u) == 0u))
        {
            _2730 = 0.0;
            _2732 = 0.0;
            _2734 = 0.0;
            _2736 = 0.0;
            _2738 = 0.0;
            _2740 = 0.0;
        }
        else
        {
            float _2731;
            float _2733;
            float _2735;
            float _2737;
            float _2739;
            float _2741;
            float _2874 = 0.0;
            float _2875 = 0.0;
            float _2876 = 0.0;
            float _2877 = 0.0;
            float _2878 = 0.0;
            float _2879 = 0.0;
            uint _2880 = 0u;
            uint _2889;
            bool _2890;
            for (;;)
            {
                _2889 = texelFetch(g_lightClassification, int((((_2623 << 5u) + (_2609 << 9u)) + (_2880 << 2u)) >> 2u)).x;
                _2890 = _2889 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2890)
                {
                    frontier_phi_61_pred = _2874;
                    frontier_phi_61_pred_1 = _2879;
                    frontier_phi_61_pred_2 = _2878;
                    frontier_phi_61_pred_3 = _2877;
                    frontier_phi_61_pred_4 = _2876;
                    frontier_phi_61_pred_5 = _2875;
                }
                else
                {
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    uint _3004;
                    _2998 = _2874;
                    _2999 = _2875;
                    _3000 = _2876;
                    _3001 = _2877;
                    _3002 = _2878;
                    _3003 = _2879;
                    _3004 = _2889;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    for (;;)
                    {
                        uint _3008 = uint(findLSB(_3004)) + (_2880 << 5u);
                        uint _3005 = (_3004 + 4294967295u) & _3004;
                        uint _3010 = _3008 * 48u;
                        vec4 _3024 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3010)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 3u)).x));
                        uint _3030 = (_3008 * 48u) + 4u;
                        vec4 _3043 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3030)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 3u)).x));
                        uint _3049 = (_3008 * 48u) + 8u;
                        vec3 _3060 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3049)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3049 + 2u)).x));
                        float _3064 = _3024.x - _2583;
                        float _3065 = _3024.y - _2584;
                        float _3066 = _3024.z - _2585;
                        float _3067 = dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066));
                        float _3070 = inversesqrt(_3067);
                        float _3071 = _3070 * _3064;
                        float _3072 = _3070 * _3065;
                        float _3073 = _3070 * _3066;
                        float _3074 = dot(vec3(_864, _867, _870), vec3(_3071, _3072, _3073));
                        float _3079 = 1.0 - (_3067 * _3024.w);
                        float _4412 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3080 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                        float _3081 = sqrt(_3067) * _3043.w;
                        float _3084 = 1.39999997615814208984375 / (_3081 + 1.39999997615814208984375);
                        float _3085 = _3084 * _3084;
                        float _3088 = ((1.0 - _3085) * _3074) + _3085;
                        float _3091 = _3081 * _3081;
                        float _3095 = ((isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0))) * _3080) / ((_3091 * 0.699999988079071044921875) + 1.0);
                        float _3099 = (-0.0) - _2583;
                        float _3100 = (-0.0) - _2584;
                        float _3101 = (-0.0) - _2585;
                        float _3105 = inversesqrt(dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101)));
                        float _3106 = _3105 * _3099;
                        float _3107 = _3105 * _3100;
                        float _3108 = _3105 * _3101;
                        float _3116 = exp2(log2(1.0 / ((_3091 * 3.5) + 5.0)) * 0.25);
                        float _3117 = 1.0 - _924;
                        float _3124 = sqrt(1.0 - ((1.0 - (_3117 * _3117)) * (1.0 - (_3116 * _3116))));
                        float _3125 = _3124 * _3124;
                        float _3126 = _3125 * _3125;
                        float _3127 = _3106 + _3071;
                        float _3128 = _3107 + _3072;
                        float _3129 = _3108 + _3073;
                        float _3133 = inversesqrt(dot(vec3(_3127, _3128, _3129), vec3(_3127, _3128, _3129)));
                        float _3137 = dot(vec3(_864, _867, _870), vec3(_3106, _3107, _3108));
                        float _4428 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3140 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                        float _3141 = dot(vec3(_864, _867, _870), vec3(_3133 * _3127, _3133 * _3128, _3133 * _3129));
                        float _4439 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3144 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                        float _3148 = ((_3144 * _3144) * (_3126 + (-1.0))) + 1.0;
                        float _3149 = _3084 * _3125;
                        float _3150 = _3149 * _3149;
                        float _3153 = ((1.0 - _3150) * _3074) + _3150;
                        float _4450 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3154 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                        float _3155 = 1.0 - _3125;
                        float _3165 = (0.5 / (((_3154 * ((_3140 * _3155) + _3125)) + 9.9999999392252902907785028219223e-09) + (((_3154 * _3155) + _3125) * _3140))) * _3154;
                        float _4461 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3176 = (((_3126 * 3.1415927410125732421875) * (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) / ((_3148 * _3148) * ((_3091 * 2.1991131305694580078125) + 3.141590118408203125))) * _3080;
                        _2933 = (_3095 * _3043.x) + _3001;
                        _2934 = (_3095 * _3043.y) + _3002;
                        _2935 = (_3095 * _3043.z) + _3003;
                        _2930 = (_3176 * _3060.x) + _2998;
                        _2931 = (_3176 * _3060.y) + _2999;
                        _2932 = (_3176 * _3060.z) + _3000;
                        if (_3005 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2998 = _2930;
                            _2999 = _2931;
                            _3000 = _2932;
                            _3001 = _2933;
                            _3002 = _2934;
                            _3003 = _2935;
                            _3004 = _3005;
                        }
                    }
                    frontier_phi_61_pred = _2930;
                    frontier_phi_61_pred_1 = _2935;
                    frontier_phi_61_pred_2 = _2934;
                    frontier_phi_61_pred_3 = _2933;
                    frontier_phi_61_pred_4 = _2932;
                    frontier_phi_61_pred_5 = _2931;
                }
                _2731 = frontier_phi_61_pred;
                _2741 = frontier_phi_61_pred_1;
                _2739 = frontier_phi_61_pred_2;
                _2737 = frontier_phi_61_pred_3;
                _2735 = frontier_phi_61_pred_4;
                _2733 = frontier_phi_61_pred_5;
                uint _2881 = _2880 + 1u;
                if (_2881 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2874 = _2731;
                    _2875 = _2733;
                    _2876 = _2735;
                    _2877 = _2737;
                    _2878 = _2739;
                    _2879 = _2741;
                    _2880 = _2881;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2730 = _2731;
            _2732 = _2733;
            _2734 = _2735;
            _2736 = _2737;
            _2738 = _2739;
            _2740 = _2741;
        }
        uvec4 _2744 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2745 = _2744.z;
        uint _2747 = (_2745 >> 8u) & 15u;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        if (((4294967295u << _2747) & _2629) == 0u)
        {
            _2842 = _2730;
            _2844 = _2732;
            _2846 = _2734;
            _2848 = _2736;
            _2850 = _2738;
            _2852 = _2740;
        }
        else
        {
            float _2867 = inversesqrt(dot(vec3(_2583, _2584, _2585), vec3(_2583, _2584, _2585)));
            float _2868 = _2867 * _2583;
            float _2869 = _2867 * _2584;
            float _2870 = _2867 * _2585;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2747 < ((_2745 >> 12u) & 15u))
            {
                float _2843;
                float _2845;
                float _2847;
                float _2849;
                float _2851;
                float _2853;
                float _2981 = _2730;
                float _2982 = _2732;
                float _2983 = _2734;
                float _2984 = _2736;
                float _2985 = _2738;
                float _2986 = _2740;
                uint _2987 = _2747;
                uint _2996;
                bool _2997;
                for (;;)
                {
                    _2996 = texelFetch(g_lightClassification, int((((_2623 << 5u) + (_2609 << 9u)) + (_2987 << 2u)) >> 2u)).x;
                    _2997 = _2996 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2997)
                    {
                        frontier_phi_67_pred = _2984;
                        frontier_phi_67_pred_1 = _2985;
                        frontier_phi_67_pred_2 = _2986;
                        frontier_phi_67_pred_3 = _2983;
                        frontier_phi_67_pred_4 = _2982;
                        frontier_phi_67_pred_5 = _2981;
                    }
                    else
                    {
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3194 = _2981;
                        float _3195 = _2982;
                        float _3196 = _2983;
                        float _3197 = _2984;
                        float _3198 = _2985;
                        float _3199 = _2986;
                        uint _3200 = _2996;
                        uint _3201;
                        vec4 _3226;
                        float _3227;
                        vec4 _3242;
                        vec3 _3254;
                        vec4 _3269;
                        vec4 _3284;
                        float _3330;
                        bool _3331;
                        for (;;)
                        {
                            uint _3211 = ((_2987 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3200));
                            _3201 = (_3200 + 4294967295u) & _3200;
                            uint _3213 = _3211 * 40u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            _3227 = _3226.w;
                            uint _3229 = (_3211 * 40u) + 4u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            uint _3244 = (_3211 * 40u) + 8u;
                            _3254 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x));
                            uint _3256 = (_3211 * 40u) + 16u;
                            _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            uint _3271 = (_3211 * 40u) + 20u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            uint _3286 = (_3211 * 40u) + 24u;
                            vec4 _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            uint _3305 = (_3211 * 40u) + 28u;
                            vec4 _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            _3330 = fma(_2585, _3318.z, fma(_2584, _3318.y, _3318.x * _2583)) + _3318.w;
                            _3331 = !((fma(_2585, _3299.z, fma(_2584, _3299.y, _3299.x * _2583)) + _3299.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3331)
                            {
                                float _3358 = _3226.x - _2583;
                                float _3359 = _3226.y - _2584;
                                float _3360 = _3226.z - _2585;
                                float _3361 = dot(vec3(_3358, _3359, _3360), vec3(_3358, _3359, _3360));
                                float _3364 = inversesqrt(_3361);
                                float _3365 = _3364 * _3358;
                                float _3366 = _3364 * _3359;
                                float _3367 = _3364 * _3360;
                                float _3371 = 1.0 - (_3361 / (_3227 * _3227));
                                float _4472 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3372 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                                float _3376 = sqrt(_3361) * _3242.w;
                                float _3378 = 1.39999997615814208984375 / (_3376 + 1.39999997615814208984375);
                                float _3379 = _3378 * _3378;
                                float _3382 = ((1.0 - _3379) * dot(vec3(_3365, _3366, _3367), vec3(_864, _867, _870))) + _3379;
                                float _3385 = _3376 * _3376;
                                float _3389 = (fma(_2585, _3269.z, fma(_2584, _3269.y, _3269.x * _2583)) + _3269.w) / _3330;
                                float _3390 = (fma(_2585, _3284.z, fma(_2584, _3284.y, _3284.x * _2583)) + _3284.w) / _3330;
                                float _3394 = 1.0 - dot(vec2(_3389, _3390), vec2(_3389, _3390));
                                float _4488 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3395 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                                float _3396 = _3395 * (((isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0))) * _3372) / ((_3385 * 0.699999988079071044921875) + 1.0));
                                float _3408 = exp2(log2(1.0 / ((_3385 * 3.5) + 5.0)) * 0.25);
                                float _3409 = 1.0 - _924;
                                float _3416 = sqrt(1.0 - ((1.0 - (_3409 * _3409)) * (1.0 - (_3408 * _3408))));
                                float _3417 = _3416 * _3416;
                                float _3418 = _3417 * _3417;
                                float _3419 = _3365 - _2868;
                                float _3420 = _3366 - _2869;
                                float _3421 = _3367 - _2870;
                                float _3425 = inversesqrt(dot(vec3(_3419, _3420, _3421), vec3(_3419, _3420, _3421)));
                                float _3429 = dot(vec3(_864, _867, _870), vec3((-0.0) - _2868, (-0.0) - _2869, (-0.0) - _2870));
                                float _4499 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3432 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                                float _3433 = dot(vec3(_864, _867, _870), vec3(_3425 * _3419, _3425 * _3420, _3425 * _3421));
                                float _4510 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3436 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                                float _3440 = ((_3436 * _3436) * (_3418 + (-1.0))) + 1.0;
                                float _3441 = _3378 * _3417;
                                float _3442 = _3441 * _3441;
                                float _3448 = ((1.0 - _3442) * dot(vec3(_864, _867, _870), vec3(_3365, _3366, _3367))) + _3442;
                                float _4521 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3449 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                                float _3450 = 1.0 - _3417;
                                float _3460 = (0.5 / (((_3449 * ((_3432 * _3450) + _3417)) + 9.9999999392252902907785028219223e-09) + (((_3449 * _3450) + _3417) * _3432))) * _3449;
                                float _4532 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3470 = (_3395 * _3372) * (((_3418 * 3.1415927410125732421875) * (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) / ((_3440 * _3440) * ((_3385 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3470 * _3254.x;
                                frontier_phi_73_pred_1 = _3470 * _3254.y;
                                frontier_phi_73_pred_2 = _3396 * _3242.z;
                                frontier_phi_73_pred_3 = _3396 * _3242.y;
                                frontier_phi_73_pred_4 = _3396 * _3242.x;
                                frontier_phi_73_pred_5 = _3470 * _3254.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3474 = frontier_phi_73_pred;
                            _3475 = frontier_phi_73_pred_1;
                            _3479 = frontier_phi_73_pred_2;
                            _3478 = frontier_phi_73_pred_3;
                            _3477 = frontier_phi_73_pred_4;
                            _3476 = frontier_phi_73_pred_5;
                            _3184 = _3477 + _3197;
                            _3185 = _3478 + _3198;
                            _3186 = _3479 + _3199;
                            _3181 = _3474 + _3194;
                            _3182 = _3475 + _3195;
                            _3183 = _3476 + _3196;
                            if (_3201 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3201;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3184;
                        frontier_phi_67_pred_1 = _3185;
                        frontier_phi_67_pred_2 = _3186;
                        frontier_phi_67_pred_3 = _3183;
                        frontier_phi_67_pred_4 = _3182;
                        frontier_phi_67_pred_5 = _3181;
                    }
                    _2849 = frontier_phi_67_pred;
                    _2851 = frontier_phi_67_pred_1;
                    _2853 = frontier_phi_67_pred_2;
                    _2847 = frontier_phi_67_pred_3;
                    _2845 = frontier_phi_67_pred_4;
                    _2843 = frontier_phi_67_pred_5;
                    uint _2988 = _2987 + 1u;
                    if (_2988 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2981 = _2843;
                        _2982 = _2845;
                        _2983 = _2847;
                        _2984 = _2849;
                        _2985 = _2851;
                        _2986 = _2853;
                        _2987 = _2988;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2851;
                frontier_phi_55_56_ladder_1 = _2853;
                frontier_phi_55_56_ladder_2 = _2849;
                frontier_phi_55_56_ladder_3 = _2847;
                frontier_phi_55_56_ladder_4 = _2845;
                frontier_phi_55_56_ladder_5 = _2843;
            }
            else
            {
                frontier_phi_55_56_ladder = _2738;
                frontier_phi_55_56_ladder_1 = _2740;
                frontier_phi_55_56_ladder_2 = _2736;
                frontier_phi_55_56_ladder_3 = _2734;
                frontier_phi_55_56_ladder_4 = _2732;
                frontier_phi_55_56_ladder_5 = _2730;
            }
            _2842 = frontier_phi_55_56_ladder_5;
            _2844 = frontier_phi_55_56_ladder_4;
            _2846 = frontier_phi_55_56_ladder_3;
            _2848 = frontier_phi_55_56_ladder_2;
            _2850 = frontier_phi_55_56_ladder;
            _2852 = frontier_phi_55_56_ladder_1;
        }
        float _2857 = isnan(1.0) ? _908 : (isnan(_908) ? 1.0 : min(_908, 1.0));
        _2642 = (_2857 * _2848) + _2094;
        _2644 = (_2857 * _2850) + _2096;
        _2646 = (_2857 * _2852) + _2098;
        _2648 = ((_2842 * 0.039999999105930328369140625) * _2857) + _2427;
        _2650 = ((_2844 * 0.039999999105930328369140625) * _2857) + _2429;
        _2652 = ((_2846 * 0.039999999105930328369140625) * _2857) + _2431;
    }
    else
    {
        _2642 = _2094;
        _2644 = _2096;
        _2646 = _2098;
        _2648 = _2427;
        _2650 = _2429;
        _2652 = _2431;
    }
    float _4548 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _4559 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _4570 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    uint _2672 = _249 + 6u;
    float _2680 = _845 / cbSceneParam._m0[86u].x;
    float _2681 = _846 / cbSceneParam._m0[86u].y;
    vec4 _2695 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2680, _2681, (log2((isnan(cbSceneParam._m0[77u].w) ? _779 : (isnan(_779) ? cbSceneParam._m0[77u].w : min(_779, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2697 = _2695.x;
    float _2698 = _2695.y;
    float _2699 = _2695.z;
    float _2700 = _2695.w;
    float _2792;
    float _2794;
    float _2796;
    float _2798;
    if (_779 > cbSceneParam._m0[78u].w)
    {
        float _2755 = isnan(_779) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _779 : min(cbSceneParam._m0[80u].w, _779));
        float _2756 = _2755 / _779;
        float _2767 = _2756 * _830;
        float _2768 = _831 * _2756;
        float _2769 = (-0.0) - _2768;
        float _2770 = _2756 * _832;
        float _2772 = (cbSceneParam._m0[77u].w * _2769) / _2755;
        float _2773 = _2772 + cbSceneParam._m0[79u].w;
        float _2774 = cbSceneParam._m0[79u].w - _2768;
        float _2780 = sqrt(((_2767 * _2767) + (_2768 * _2768)) + (_2770 * _2770));
        float _2783 = (1.0 - (cbSceneParam._m0[77u].w / _2755)) * _2780;
        float _2788 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2790 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2943;
        if (abs((_2769 - _2772) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2943 = ((((_2773 > 0.0) ? exp2(_2788 * _2773) : (2.0 - exp2(_2790 * _2773))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2783;
        }
        else
        {
            float _2903 = 1.0 / cbSceneParam._m0[80u].x;
            float _2904 = isnan(_2774) ? _2773 : (isnan(_2773) ? _2774 : max(_2773, _2774));
            float _2905 = isnan(_2774) ? _2773 : (isnan(_2773) ? _2774 : min(_2773, _2774));
            float _2914 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : min(_2904, 0.0));
            float _2915 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : min(_2905, 0.0));
            _2943 = ((abs(_2780 / _2769) * cbSceneParam._m0[80u].y) * ((((_2914 - _2915) * 2.0) - ((exp2(_2788 * (isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0)))) - exp2(_2788 * (isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0))))) * _2903)) - ((exp2(_2790 * _2914) - exp2(_2790 * _2915)) * _2903))) + (_2783 * cbSceneParam._m0[80u].z);
        }
        vec4 _2945 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2680, _2681, 1.0), 0.0);
        float _2954 = exp2((_2943 * (-1.44269502162933349609375)) * (1.0 - _2945.w));
        float _2955 = log2(_2954);
        float _2971 = log2(_2700);
        _2792 = (exp2(_2971 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2955 * cbSceneParam._m0[78u].x)) * _2945.x) / cbSceneParam._m0[78u].x)) + _2697;
        _2794 = (exp2(_2971 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2955 * cbSceneParam._m0[78u].y)) * _2945.y) / cbSceneParam._m0[78u].y)) + _2698;
        _2796 = (exp2(_2971 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2955 * cbSceneParam._m0[78u].z)) * _2945.z) / cbSceneParam._m0[78u].z)) + _2699;
        _2798 = _2954 * _2700;
    }
    else
    {
        _2792 = _2697;
        _2794 = _2698;
        _2796 = _2699;
        _2798 = _2700;
    }
    float _2810 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2811 = _2810 == 3.0;
    float _2812 = log2(_2798);
    float _2819 = exp2(_2812 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2642 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _908))) + ((_2648 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1713)) * cbPerFrame._m0[3u].x));
    float _2820 = exp2(_2812 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2644 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _908))) + ((_2650 + ((isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))) * _1713)) * cbPerFrame._m0[3u].x));
    float _2821 = exp2(_2812 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2646 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _908))) + ((_2652 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1713)) * cbPerFrame._m0[3u].x));
    float _2830 = (_2810 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2830 * (_2811 ? _2819 : (_2819 + (cbSceneParam._m0[72u].w * _2792)));
    SV_Target.y = _2830 * (_2811 ? _2820 : (_2820 + (cbSceneParam._m0[72u].w * _2794)));
    SV_Target.z = _2830 * (_2811 ? _2821 : (_2821 + (cbSceneParam._m0[72u].w * _2796)));
    SV_Target.w = cbInstanceData._m0[_2672].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2672].w;
}


