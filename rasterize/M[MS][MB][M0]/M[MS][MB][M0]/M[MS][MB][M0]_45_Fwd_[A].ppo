#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1026;
float _3388;
float _3389;
float _3390;
float _3391;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _203 = _202 * _194;
    float _204 = _202 * _195;
    float _205 = _202 * _196;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    uint _222 = uint(roundEven(NORMAL.w)) * 13u;
    uint _228 = _222 + 1u;
    uint _232 = _222 + 2u;
    float _241 = sqrt(((cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x) + (cbInstanceData._m0[_222].x * cbInstanceData._m0[_222].x)) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x));
    float _242 = _241 * TEXCOORD.z;
    float _243 = _241 * TEXCOORD.w;
    vec4 _262 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _268 = _262.x * cbMtdParam._m0[9u].x;
    float _269 = _262.y * cbMtdParam._m0[9u].y;
    float _270 = _262.z * cbMtdParam._m0[9u].z;
    vec4 _289 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _242) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _243) + cbTextureTilingScale._m0[14u].w));
    vec4 _309 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _313 = _309.z;
    float _318 = (_309.x * 2.0) + (-1.0);
    float _320 = (_309.y * 2.0) + (-1.0);
    float _321 = dot(vec2(_318, _320), vec2(_318, _320));
    float _3400 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _327 = sqrt(1.0 - (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))));
    float _330 = fma(_327, _210, fma(_320, _217, _318 * _203));
    float _333 = fma(_327, _211, fma(_320, _218, _318 * _204));
    float _336 = fma(_327, _212, fma(_320, _219, _318 * _205));
    float _340 = inversesqrt(dot(vec3(_330, _333, _336), vec3(_330, _333, _336)));
    vec4 _376 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _242) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _243) + cbTextureTilingScale._m0[11u].w));
    float _378 = _376.x;
    float _379 = 1.0 - _378;
    float _388 = (cbMtdParam._m0[19u].x + dot(vec4(_340 * _330, _340 * _333, _340 * _336, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_378 - _379) * cbMtdParam._m0[24u].z) + _379) * cbMtdParam._m0[21u].z);
    float _3411 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _389 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
    float _396 = (_389 * ((_289.x * cbMtdParam._m0[18u].x) - _268)) + _268;
    float _397 = (_389 * ((_289.y * cbMtdParam._m0[18u].y) - _269)) + _269;
    float _398 = (_389 * ((_289.z * cbMtdParam._m0[18u].z) - _270)) + _270;
    vec4 _411 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _242) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _243) + cbTextureTilingScale._m0[15u].w));
    float _418 = (_411.x * 2.0) + (-1.0);
    float _419 = (_411.y * 2.0) + (-1.0);
    float _420 = dot(vec2(_418, _419), vec2(_418, _419));
    float _3422 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _428 = ((_411.z - _313) * _389) + _313;
    float _438 = ((sqrt(1.0 - (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0)))) - _327) * _389) + _327;
    float _441 = (((_418 - _318) * _389) + _318) + (cbMtdParam._m0[21u].x * _318);
    float _442 = (((_419 - _320) * _389) + _320) + (cbMtdParam._m0[21u].x * _320);
    float _447 = cbMtdParam._m0[22u].x + _309.w;
    float _450 = fma(_438, _210, fma(_442, _217, _441 * _203));
    float _453 = fma(_438, _211, fma(_442, _218, _441 * _204));
    float _456 = fma(_438, _212, fma(_442, _219, _441 * _205));
    float _460 = inversesqrt(dot(vec3(_450, _453, _456), vec3(_450, _453, _456)));
    float _461 = _460 * _450;
    float _462 = _460 * _453;
    float _463 = _460 * _456;
    float _3433 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _464 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _3444 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3455 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _3466 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _3477 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _482 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _533 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _523);
    float _534 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _523);
    float _535 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _523);
    float _539 = inversesqrt(dot(vec3(_533, _534, _535), vec3(_533, _534, _535)));
    float _540 = _533 * _539;
    float _541 = _534 * _539;
    float _542 = _535 * _539;
    vec4 _547 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _549 = _547.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _706 = sqrt(((_533 * _533) + (_534 * _534)) + (_535 * _535));
        float _712 = (cbMatDynParam._m0[5u].x * _706) + cbMatDynParam._m0[5u].y;
        float _3488 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _717 = (cbMatDynParam._m0[5u].z * _706) + cbMatDynParam._m0[5u].w;
        float _3499 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) - _713)) + _713) < ((_549 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _561 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _562 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _582 = fma(_463, cbSceneParam._m0[5u].z, fma(_462, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _461));
    float _585 = fma(_463, cbSceneParam._m0[6u].z, fma(_462, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _461));
    float _588 = fma(_463, cbSceneParam._m0[7u].z, fma(_462, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _461));
    uint _601 = _222 + 9u;
    uint _602 = _601 + uint(cbMatDynParam._m0[0u].w);
    float _608 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * cbInstanceData._m0[_602].x;
    float _609 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0)))) * cbInstanceData._m0[_602].y;
    float _610 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0)))) * cbInstanceData._m0[_602].z;
    float _3510 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _611 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _3521 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _3532 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    vec4 _622 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _561, cbSceneParam._m0[86u].y * _562));
    float _626 = ((isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) * TEXCOORD_5.w) * _622.x;
    float _627 = dot(vec3(_461, _462, _463), vec3(_540, _541, _542));
    float _630 = _627 * 2.0;
    float _634 = (_630 * _461) - _540;
    float _635 = (_630 * _462) - _541;
    float _636 = (_630 * _463) - _542;
    float _640 = abs(dot(vec3(_540, _541, _542), vec3(_461, _462, _463)));
    float _3543 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _642 = sqrt(_464);
    float _655 = exp2((_642 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_642 * 3.0));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1025;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _750 = fma(_695, cbModelParam._m0[26u].z, fma(_691, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _687));
        float _754 = fma(_695, cbModelParam._m0[27u].z, fma(_691, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _687));
        float _758 = fma(_695, cbModelParam._m0[28u].z, fma(_691, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _687));
        float _783 = _687 + _461;
        float _784 = _691 + _462;
        float _785 = _695 + _463;
        float _795 = fma(_785, cbModelParam._m0[26u].z, fma(_784, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _783)) - _750;
        float _796 = fma(_785, cbModelParam._m0[27u].z, fma(_784, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _783)) - _754;
        float _797 = fma(_785, cbModelParam._m0[28u].z, fma(_784, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _783)) - _758;
        float _801 = inversesqrt(dot(vec3(_795, _796, _797), vec3(_795, _796, _797)));
        float _814 = ((_801 * _795) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_750 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _815 = ((_801 * _796) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_754 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _816 = ((_801 * _797) / cbModelParam._m0[34u].z) + ((((((_758 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        float _853 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_819.x + (-0.5));
        float _855 = _853 * (_819.y + (-0.5));
        float _856 = _853 * (_819.z + (-0.5));
        float _863 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_826.x + (-0.5));
        float _865 = _863 * (_826.y + (-0.5));
        float _866 = _863 * (_826.z + (-0.5));
        float _873 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_833.x + (-0.5));
        float _875 = _873 * (_833.y + (-0.5));
        float _876 = _873 * (_833.z + (-0.5));
        float _883 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_840.x + (-0.5));
        float _885 = _883 * (_840.y + (-0.5));
        float _886 = _883 * (_840.z + (-0.5));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _890 = _854 * 0.5;
        float _891 = _864 * 0.5;
        float _892 = _874 * 0.5;
        float _893 = dot(vec3(_890, _891, _892), vec3(_890, _891, _892));
        float _898 = (_893 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_893);
        float _907 = (dot(vec3(_461, _462, _463), vec3(_898 * _890, _898 * _891, _898 * _892)) + 1.0) * 0.5;
        float _3569 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _917 = sqrt(((_891 * _891) + (_890 * _890)) + (_892 * _892)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _3580 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _919 = _918 * 2.0;
        float _923 = (1.0 - _918) / (_918 + 1.0);
        float _3591 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _933 = ((((1.0 - _924) * (_919 + 2.0)) * exp2(log2(isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * (_919 + 1.0))) + _924) * _887;
        float _934 = _855 * 0.5;
        float _935 = _865 * 0.5;
        float _936 = _875 * 0.5;
        float _937 = dot(vec3(_934, _935, _936), vec3(_934, _935, _936));
        float _942 = (_937 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_937);
        float _950 = (dot(vec3(_461, _462, _463), vec3(_942 * _934, _942 * _935, _942 * _936)) + 1.0) * 0.5;
        float _3602 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _959 = sqrt(((_935 * _935) + (_934 * _934)) + (_936 * _936)) / (_888 + 9.9999997473787516355514526367188e-06);
        float _3613 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _961 = _960 * 2.0;
        float _965 = (1.0 - _960) / (_960 + 1.0);
        float _3624 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _975 = ((((1.0 - _966) * (_961 + 2.0)) * exp2(log2(isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (_961 + 1.0))) + _966) * _888;
        float _976 = _856 * 0.5;
        float _977 = _866 * 0.5;
        float _978 = _876 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _992 = (dot(vec3(_461, _462, _463), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3635 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1001 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_889 + 9.9999997473787516355514526367188e-06);
        float _3646 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3657 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (_1003 + 1.0))) + _1008) * _889;
        _1025 = _856;
        _1027 = _855;
        _1028 = _854;
        _1029 = _866;
        _1030 = _865;
        _1031 = _864;
        _1032 = _876;
        _1033 = _875;
        _1034 = _874;
        _1035 = _889;
        _1036 = _888;
        _1037 = _887;
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0)));
        _1039 = cbModelParam._m0[36u].z * (isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0)));
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
    }
    else
    {
        _1025 = _1026;
        _1027 = _1026;
        _1028 = _1026;
        _1029 = _1026;
        _1030 = _1026;
        _1031 = _1026;
        _1032 = _1026;
        _1033 = _1026;
        _1034 = _1026;
        _1035 = _1026;
        _1036 = _1026;
        _1037 = _1026;
        _1038 = 0.0;
        _1039 = 0.0;
        _1040 = 0.0;
    }
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1068 = fma(_695, cbModelParam._m0[30u].z, fma(_691, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _687));
        float _1072 = fma(_695, cbModelParam._m0[31u].z, fma(_691, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _687));
        float _1076 = fma(_695, cbModelParam._m0[32u].z, fma(_691, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _687));
        float _1099 = _687 + _461;
        float _1100 = _691 + _462;
        float _1101 = _695 + _463;
        float _1111 = fma(_1101, cbModelParam._m0[30u].z, fma(_1100, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1099)) - _1068;
        float _1112 = fma(_1101, cbModelParam._m0[31u].z, fma(_1100, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1099)) - _1072;
        float _1113 = fma(_1101, cbModelParam._m0[32u].z, fma(_1100, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1099)) - _1076;
        float _1117 = inversesqrt(dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113)));
        float _1130 = ((_1117 * _1111) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1068 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1117 * _1112) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1072 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1117 * _1113) / cbModelParam._m0[35u].z) + ((((((_1076 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        float _1167 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1134.x + (-0.5));
        float _1169 = _1167 * (_1134.y + (-0.5));
        float _1170 = _1167 * (_1134.z + (-0.5));
        float _1177 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1141.x + (-0.5));
        float _1179 = _1177 * (_1141.y + (-0.5));
        float _1180 = _1177 * (_1141.z + (-0.5));
        float _1187 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1148.x + (-0.5));
        float _1189 = _1187 * (_1148.y + (-0.5));
        float _1190 = _1187 * (_1148.z + (-0.5));
        float _1197 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1155.x + (-0.5));
        float _1199 = _1197 * (_1155.y + (-0.5));
        float _1200 = _1197 * (_1155.z + (-0.5));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = _1168 * 0.5;
        float _1205 = _1178 * 0.5;
        float _1206 = _1188 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_461, _462, _463), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3720 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1231 + 1.0))) + _1236) * _1201;
        float _1246 = _1169 * 0.5;
        float _1247 = _1179 * 0.5;
        float _1248 = _1189 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_461, _462, _463), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3753 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1273 + 1.0))) + _1278) * _1202;
        float _1288 = _1170 * 0.5;
        float _1289 = _1180 * 0.5;
        float _1290 = _1190 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_461, _462, _463), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _3786 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1315 + 1.0))) + _1320) * _1203;
        _1337 = _1170;
        _1338 = _1169;
        _1339 = _1168;
        _1340 = _1180;
        _1341 = _1179;
        _1342 = _1178;
        _1343 = _1190;
        _1344 = _1189;
        _1345 = _1188;
        _1346 = _1203;
        _1347 = _1202;
        _1348 = _1201;
        _1349 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1350 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1351 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
    }
    else
    {
        _1337 = _1026;
        _1338 = _1026;
        _1339 = _1026;
        _1340 = _1026;
        _1341 = _1026;
        _1342 = _1026;
        _1343 = _1026;
        _1344 = _1026;
        _1345 = _1026;
        _1346 = _1026;
        _1347 = _1026;
        _1348 = _1026;
        _1349 = 0.0;
        _1350 = 0.0;
        _1351 = 0.0;
    }
    float _1361 = (cbModelParam._m0[1u].x * (_1349 - _1038)) + _1038;
    float _1362 = (cbModelParam._m0[1u].x * (_1350 - _1039)) + _1039;
    float _1363 = (cbModelParam._m0[1u].x * (_1351 - _1040)) + _1040;
    float _1384 = fma(_1363, cbSceneParam._m0[89u].z, fma(_1362, cbSceneParam._m0[89u].y, _1361 * cbSceneParam._m0[89u].x));
    float _1387 = fma(_1363, cbSceneParam._m0[90u].z, fma(_1362, cbSceneParam._m0[90u].y, _1361 * cbSceneParam._m0[90u].x));
    float _1390 = fma(_1363, cbSceneParam._m0[91u].z, fma(_1362, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1361));
    float _1405 = _634 * 0.5;
    float _1406 = _635 * 0.5;
    float _1407 = _636 * 0.5;
    float _1408 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1339, _1342, _1345, _1348));
    float _1411 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1338, _1341, _1344, _1347));
    float _1414 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1337, _1340, _1343, _1346));
    float _1448;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1421 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1025, _1029, _1032, _1035));
        float _1425 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1027, _1030, _1033, _1036));
        float _1429 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1028, _1031, _1034, _1037));
        float _1436 = dot(vec4(cbModelParam._m0[39u]), vec4(_1405, _1406, _1407, 1.0));
        _1448 = dot(vec3(isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1436) ? 0.0 : (isnan(0.0) ? _1436 : max(0.0, _1436))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1448 = 1.0;
    }
    float _1459;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1450 = dot(vec4(cbModelParam._m0[40u]), vec4(_1405, _1406, _1407, 1.0));
        _1459 = dot(vec3(isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1450) ? 0.0 : (isnan(0.0) ? _1450 : max(0.0, _1450))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1459 = 1.0;
    }
    float _1463 = (_1459 * cbModelParam._m0[1u].x) + (_1448 * (1.0 - cbModelParam._m0[1u].x));
    float _1473 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _464);
    float _1474 = isnan(_1473) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1473 : min(cbModelParam._m0[25u].z, _1473));
    float _1554;
    float _1556;
    float _1558;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1521 = fma(_695, cbModelParam._m0[13u].z, fma(_691, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687)) + cbModelParam._m0[13u].w;
        float _1525 = fma(_695, cbModelParam._m0[14u].z, fma(_691, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687)) + cbModelParam._m0[14u].w;
        float _1529 = fma(_695, cbModelParam._m0[15u].z, fma(_691, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687)) + cbModelParam._m0[15u].w;
        float _1532 = fma(_636, cbModelParam._m0[13u].z, fma(_635, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _634));
        float _1535 = fma(_636, cbModelParam._m0[14u].z, fma(_635, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _634));
        float _1538 = fma(_636, cbModelParam._m0[15u].z, fma(_635, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _634));
        float _1566;
        if (_1532 > 0.0)
        {
            _1566 = abs((1.0 - _1521) / _1532);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1521 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1566 = frontier_phi_17_15_ladder;
        }
        float _1768;
        if (_1535 > 0.0)
        {
            _1768 = abs((1.0 - _1525) / _1535);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1525 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1768 = frontier_phi_26_22_ladder;
        }
        float _2011;
        if (_1538 > 0.0)
        {
            _2011 = abs((1.0 - _1529) / _1538);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1529 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2011 = frontier_phi_38_33_ladder;
        }
        float _2013 = isnan(_1768) ? _1566 : (isnan(_1566) ? _1768 : min(_1566, _1768));
        float _2014 = isnan(_2011) ? _2013 : (isnan(_2013) ? _2011 : min(_2013, _2011));
        float _2018 = (_2014 * _1532) + _1521;
        float _2019 = (_2014 * _1535) + _1525;
        float _2020 = (_2014 * _1538) + _1529;
        float _2021 = _2014 * 9.9999997473787516355514526367188e-05;
        float _2023 = (-1.0) - _2021;
        float _2025 = _2021 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2020 > _2025) || ((_2020 < _2023) || ((_2019 > _2025) || ((_2019 < _2023) || ((_2018 < _2023) || (_2018 > _2025))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2144 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2020, cbModelParam._m0[9u].z, fma(_2019, cbModelParam._m0[9u].y, _2018 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2020, cbModelParam._m0[10u].z, fma(_2019, cbModelParam._m0[10u].y, _2018 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2020, cbModelParam._m0[11u].z, fma(_2019, cbModelParam._m0[11u].y, _2018 * cbModelParam._m0[11u].x))), _1474);
            frontier_phi_16_38_ladder = _2144.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2144.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2144.x * cbModelParam._m0[1u].y;
        }
        _1554 = frontier_phi_16_38_ladder_2;
        _1556 = frontier_phi_16_38_ladder_1;
        _1558 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1542 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_634, _635, _636), _1474);
        _1554 = _1542.x * cbModelParam._m0[1u].y;
        _1556 = _1542.y * cbModelParam._m0[1u].y;
        _1558 = _1542.z * cbModelParam._m0[1u].y;
    }
    float _1562 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _464);
    float _1563 = isnan(_1562) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1562 : min(cbModelParam._m0[25u].w, _1562));
    float _1652;
    float _1654;
    float _1656;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1616 = fma(_695, cbModelParam._m0[21u].z, fma(_691, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687)) + cbModelParam._m0[21u].w;
        float _1620 = fma(_695, cbModelParam._m0[22u].z, fma(_691, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687)) + cbModelParam._m0[22u].w;
        float _1624 = fma(_695, cbModelParam._m0[23u].z, fma(_691, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687)) + cbModelParam._m0[23u].w;
        float _1627 = fma(_636, cbModelParam._m0[21u].z, fma(_635, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _634));
        float _1630 = fma(_636, cbModelParam._m0[22u].z, fma(_635, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _634));
        float _1633 = fma(_636, cbModelParam._m0[23u].z, fma(_635, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _634));
        float _1773;
        if (_1627 > 0.0)
        {
            _1773 = abs((1.0 - _1616) / _1627);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1616 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1773 = frontier_phi_28_24_ladder;
        }
        float _2038;
        if (_1630 > 0.0)
        {
            _2038 = abs((1.0 - _1620) / _1630);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1620 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2038 = frontier_phi_40_35_ladder;
        }
        float _2243;
        if (_1633 > 0.0)
        {
            _2243 = abs((1.0 - _1624) / _1633);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1624 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2243 = frontier_phi_49_46_ladder;
        }
        float _2245 = isnan(_2038) ? _1773 : (isnan(_1773) ? _2038 : min(_1773, _2038));
        float _2246 = isnan(_2243) ? _2245 : (isnan(_2245) ? _2243 : min(_2245, _2243));
        float _2250 = (_2246 * _1627) + _1616;
        float _2251 = (_2246 * _1630) + _1620;
        float _2252 = (_2246 * _1633) + _1624;
        float _2253 = _2246 * 9.9999997473787516355514526367188e-05;
        float _2254 = (-1.0) - _2253;
        float _2256 = _2253 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2252 > _2256) || ((_2252 < _2254) || ((_2251 > _2256) || ((_2251 < _2254) || ((_2250 < _2254) || (_2250 > _2256))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2451 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2252, cbModelParam._m0[17u].z, fma(_2251, cbModelParam._m0[17u].y, _2250 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2252, cbModelParam._m0[18u].z, fma(_2251, cbModelParam._m0[18u].y, _2250 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2252, cbModelParam._m0[19u].z, fma(_2251, cbModelParam._m0[19u].y, _2250 * cbModelParam._m0[19u].x))), _1563);
            frontier_phi_25_49_ladder = _2451.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2451.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2451.x * cbModelParam._m0[1u].z;
        }
        _1652 = frontier_phi_25_49_ladder_2;
        _1654 = frontier_phi_25_49_ladder_1;
        _1656 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1636 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_634, _635, _636), _1563);
        _1652 = _1636.x * cbModelParam._m0[1u].z;
        _1654 = _1636.y * cbModelParam._m0[1u].z;
        _1656 = _1636.z * cbModelParam._m0[1u].z;
    }
    float _1668 = ((((1.0 - _655) * ((_642 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_655 * _642)) * _626;
    float _1669 = _1668 * ((cbModelParam._m0[1u].w * (_1652 - _1554)) + _1554);
    float _1670 = _1668 * ((cbModelParam._m0[1u].w * (_1654 - _1556)) + _1556);
    float _1671 = _1668 * ((cbModelParam._m0[1u].w * (_1656 - _1558)) + _1558);
    float _1674 = fma(_1671, cbSceneParam._m0[89u].z, fma(_1670, cbSceneParam._m0[89u].y, _1669 * cbSceneParam._m0[89u].x));
    float _1677 = fma(_1671, cbSceneParam._m0[90u].z, fma(_1670, cbSceneParam._m0[90u].y, _1669 * cbSceneParam._m0[90u].x));
    float _1680 = fma(_1671, cbSceneParam._m0[91u].z, fma(_1670, cbSceneParam._m0[91u].y, _1669 * cbSceneParam._m0[91u].x));
    uvec4 _1690 = floatBitsToUint(cbInstanceData._m0[_222 + 5u]);
    uint _1692 = _1690.x * 14u;
    uint _1693 = _1692 + 13u;
    float _1700 = _626 + (-1.0);
    float _1705 = (cbLight._m0[_1693].x * _1700) + 1.0;
    float _1706 = (cbLight._m0[_1693].y * _1700) + 1.0;
    float _1707 = (cbLight._m0[_1693].z * _1700) + 1.0;
    float _1708 = (cbLight._m0[_1693].w * _1700) + 1.0;
    uint _1709 = _1692 + 5u;
    float _1715 = isnan(1.0) ? _1706 : (isnan(_1706) ? 1.0 : min(_1706, 1.0));
    uint _1719 = _1692 + 4u;
    float _1726 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
    uint _1730 = _1692 | 1u;
    float _1741 = dot(vec3(cbLight._m0[_1692].xyz), vec3(_461, _462, _463));
    float _1744 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_461, _462, _463));
    float _3922 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _3933 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1749 = (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * 0.3183098733425140380859375;
    float _1751 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * 0.3183098733425140380859375;
    float _1758 = ((cbLight._m0[_1709].x * _1715) * _1751) + ((cbLight._m0[_1719].x * _1726) * _1749);
    float _1759 = ((_1715 * cbLight._m0[_1709].y) * _1751) + ((_1726 * cbLight._m0[_1719].y) * _1749);
    float _1760 = ((_1715 * cbLight._m0[_1709].z) * _1751) + ((_1726 * cbLight._m0[_1719].z) * _1749);
    uvec4 _1765 = floatBitsToUint(cbLight._m0[_1692 + 12u]);
    bool _1767 = _1765.x == 0u;
    float _1778;
    float _1780;
    float _1782;
    if (_1767)
    {
        _1778 = _1758;
        _1780 = _1759;
        _1782 = _1760;
    }
    else
    {
        uint _1786 = _1692 + 6u;
        float _1802 = (dot(vec3(cbLight._m0[_1692 + 2u].xyz), vec3(_461, _462, _463)) * 0.5) + 0.5;
        float _1803 = _1802 * _1802;
        float _3944 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1805 = isnan(1.0) ? _1707 : (isnan(_1707) ? 1.0 : min(_1707, 1.0));
        _1778 = (((cbLight._m0[_1786].x * 0.3183098733425140380859375) * _1804) * _1805) + _1758;
        _1780 = (((cbLight._m0[_1786].y * 0.3183098733425140380859375) * _1804) * _1805) + _1759;
        _1782 = (((cbLight._m0[_1786].z * 0.3183098733425140380859375) * _1804) * _1805) + _1760;
    }
    bool _1785 = _1765.y == 0u;
    float _1823;
    float _1825;
    float _1827;
    if (_1785)
    {
        _1823 = _1778;
        _1825 = _1780;
        _1827 = _1782;
    }
    else
    {
        uint _1982 = _1692 + 7u;
        float _1998 = (dot(vec3(cbLight._m0[_1692 + 3u].xyz), vec3(_461, _462, _463)) * 0.5) + 0.5;
        float _1999 = _1998 * _1998;
        float _3960 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2000 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _2001 = isnan(1.0) ? _1708 : (isnan(_1708) ? 1.0 : min(_1708, 1.0));
        _1823 = (((cbLight._m0[_1982].x * 0.3183098733425140380859375) * _2000) * _2001) + _1778;
        _1825 = (((cbLight._m0[_1982].y * 0.3183098733425140380859375) * _2000) * _2001) + _1780;
        _1827 = (((cbLight._m0[_1982].z * 0.3183098733425140380859375) * _2000) * _2001) + _1782;
    }
    uint _1830 = _1692 + 8u;
    float _1843 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1692].w)) * _464) * 0.949999988079071044921875);
    float _1844 = _1843 * _1843;
    float _1845 = cbLight._m0[_1692].x + _540;
    float _1846 = cbLight._m0[_1692].y + _541;
    float _1847 = cbLight._m0[_1692].z + _542;
    float _1851 = inversesqrt(dot(vec3(_1845, _1846, _1847), vec3(_1845, _1846, _1847)));
    float _1852 = _1851 * _1845;
    float _1853 = _1851 * _1846;
    float _1854 = _1851 * _1847;
    float _1855 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_1692].xyz));
    float _3976 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1858 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _3987 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _1859 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _1860 = dot(vec3(_461, _462, _463), vec3(_1852, _1853, _1854));
    float _3998 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1863 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _1864 = dot(vec3(cbLight._m0[_1692].xyz), vec3(_1852, _1853, _1854));
    float _4009 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1868 = _1844 * _1844;
    float _1872 = ((_1863 * _1863) * (_1868 + (-1.0))) + 1.0;
    float _1883 = (exp2(log2(1.0 - (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1884 = 1.0 - _1844;
    float _1895 = (0.5 / (((_1859 * ((_1858 * _1884) + _1844)) + 9.9999999392252902907785028219223e-09) + (((_1859 * _1884) + _1844) * _1858))) * _1858;
    float _4020 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1897 = (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1868 / ((_1872 * _1872) * 3.141590118408203125));
    uint _1908 = _1692 + 9u;
    float _1919 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1730].w)) * _464) * 0.949999988079071044921875);
    float _1920 = _1919 * _1919;
    float _1921 = cbLight._m0[_1730].x + _540;
    float _1922 = cbLight._m0[_1730].y + _541;
    float _1923 = cbLight._m0[_1730].z + _542;
    float _1927 = inversesqrt(dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923)));
    float _1928 = _1927 * _1921;
    float _1929 = _1927 * _1922;
    float _1930 = _1927 * _1923;
    float _1931 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_1730].xyz));
    float _4031 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1934 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _1935 = dot(vec3(_461, _462, _463), vec3(_1928, _1929, _1930));
    float _4042 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1938 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _1939 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_1928, _1929, _1930));
    float _4053 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1943 = _1920 * _1920;
    float _1947 = ((_1938 * _1938) * (_1943 + (-1.0))) + 1.0;
    float _1956 = (exp2(log2(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1957 = 1.0 - _1920;
    float _1967 = (0.5 / (((_1859 * ((_1934 * _1957) + _1920)) + 9.9999999392252902907785028219223e-09) + (((_1859 * _1957) + _1920) * _1934))) * _1934;
    float _4064 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1969 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1943 / ((_1947 * _1947) * 3.141590118408203125));
    float _1979 = (((_1956 * cbLight._m0[_1908].x) * _1969) * _1715) + (((_1883 * cbLight._m0[_1830].x) * _1897) * _1726);
    float _1980 = (((_1956 * cbLight._m0[_1908].y) * _1969) * _1715) + (((_1883 * cbLight._m0[_1830].y) * _1897) * _1726);
    float _1981 = (((_1956 * cbLight._m0[_1908].z) * _1969) * _1715) + (((_1883 * cbLight._m0[_1830].z) * _1897) * _1726);
    float _2043;
    float _2045;
    float _2047;
    if (_1767)
    {
        _2043 = _1979;
        _2045 = _1980;
        _2047 = _1981;
    }
    else
    {
        uint _2049 = _1692 + 2u;
        uint _2053 = _1692 + 10u;
        float _2067 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2049].w)) * _464) * 0.949999988079071044921875);
        float _2068 = _2067 * _2067;
        float _2069 = cbLight._m0[_2049].x + _540;
        float _2070 = cbLight._m0[_2049].y + _541;
        float _2071 = cbLight._m0[_2049].z + _542;
        float _2075 = inversesqrt(dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071)));
        float _2076 = _2075 * _2069;
        float _2077 = _2075 * _2070;
        float _2078 = _2075 * _2071;
        float _2079 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2049].xyz));
        float _4075 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2082 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _2083 = dot(vec3(_461, _462, _463), vec3(_2076, _2077, _2078));
        float _4086 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2086 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _2087 = dot(vec3(cbLight._m0[_2049].xyz), vec3(_2076, _2077, _2078));
        float _4097 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2091 = _2068 * _2068;
        float _2095 = ((_2086 * _2086) * (_2091 + (-1.0))) + 1.0;
        float _2104 = (exp2(log2(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2105 = 1.0 - _2068;
        float _2115 = (0.5 / (((_1859 * ((_2082 * _2105) + _2068)) + 9.9999999392252902907785028219223e-09) + (((_1859 * _2105) + _2068) * _2082))) * _2082;
        float _4108 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2117 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2091 / ((_2095 * _2095) * 3.141590118408203125));
        float _2118 = isnan(1.0) ? _1707 : (isnan(_1707) ? 1.0 : min(_1707, 1.0));
        _2043 = (((_2104 * cbLight._m0[_2053].x) * _2117) * _2118) + _1979;
        _2045 = (((_2104 * cbLight._m0[_2053].y) * _2117) * _2118) + _1980;
        _2047 = (((_2104 * cbLight._m0[_2053].z) * _2117) * _2118) + _1981;
    }
    float _2153;
    float _2155;
    float _2157;
    if (_1785)
    {
        _2153 = _2043;
        _2155 = _2045;
        _2157 = _2047;
    }
    else
    {
        uint _2164 = _1692 + 3u;
        uint _2168 = _1692 + 11u;
        float _2182 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2164].w)) * _464) * 0.949999988079071044921875);
        float _2183 = _2182 * _2182;
        float _2184 = cbLight._m0[_2164].x + _540;
        float _2185 = cbLight._m0[_2164].y + _541;
        float _2186 = cbLight._m0[_2164].z + _542;
        float _2190 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
        float _2191 = _2190 * _2184;
        float _2192 = _2190 * _2185;
        float _2193 = _2190 * _2186;
        float _2194 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2164].xyz));
        float _4124 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2197 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _2198 = dot(vec3(_461, _462, _463), vec3(_2191, _2192, _2193));
        float _4135 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2201 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _2202 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_2191, _2192, _2193));
        float _4146 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2206 = _2183 * _2183;
        float _2210 = ((_2201 * _2201) * (_2206 + (-1.0))) + 1.0;
        float _2219 = (exp2(log2(1.0 - (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2220 = 1.0 - _2183;
        float _2230 = (0.5 / (((_1859 * ((_2197 * _2220) + _2183)) + 9.9999999392252902907785028219223e-09) + (((_1859 * _2220) + _2183) * _2197))) * _2197;
        float _4157 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2232 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_2206 / ((_2210 * _2210) * 3.141590118408203125));
        float _2233 = isnan(1.0) ? _1708 : (isnan(_1708) ? 1.0 : min(_1708, 1.0));
        _2153 = (((_2219 * cbLight._m0[_2168].x) * _2232) * _2233) + _2043;
        _2155 = (((_2219 * cbLight._m0[_2168].y) * _2232) * _2233) + _2045;
        _2157 = (((_2219 * cbLight._m0[_2168].z) * _2232) * _2233) + _2047;
    }
    float _2368;
    float _2370;
    float _2372;
    float _2374;
    float _2376;
    float _2378;
    if (_1690.y == 0u)
    {
        float _2308 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2309 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2308;
        float _2310 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2308;
        float _2311 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2308;
        uvec4 _2323 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2324 = _2323.x;
        uint _2335 = uint((float(_2323.y) * floor(float(uint(cbSceneParam._m0[85u].y * _562) / _2324))) + floor(float(uint(cbSceneParam._m0[85u].x * _561) / _2324)));
        float _2345 = (log2(_2311 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2346 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        uint _2349 = uint(isnan(14.0) ? _2346 : (isnan(_2346) ? 14.0 : min(_2346, 14.0)));
        uvec4 _2354 = texelFetch(g_lightClusterGridBuffer, int(((_2349 << 2u) + (_2335 << 6u)) >> 2u));
        uint _2355 = _2354.x;
        uint _2356 = _2323.z;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        if (((((1u << ((_2356 >> 4u) & 15u)) + 4294967295u) & _2355) == 0u) || ((_2356 & 240u) == 0u))
        {
            _2456 = 0.0;
            _2458 = 0.0;
            _2460 = 0.0;
            _2462 = 0.0;
            _2464 = 0.0;
            _2466 = 0.0;
        }
        else
        {
            float _2457;
            float _2459;
            float _2461;
            float _2463;
            float _2465;
            float _2467;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            float _2612 = 0.0;
            float _2613 = 0.0;
            float _2614 = 0.0;
            uint _2615 = 0u;
            uint _2624;
            bool _2625;
            for (;;)
            {
                _2624 = texelFetch(g_lightClassification, int((((_2349 << 5u) + (_2335 << 9u)) + (_2615 << 2u)) >> 2u)).x;
                _2625 = _2624 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2625)
                {
                    frontier_phi_66_pred = _2609;
                    frontier_phi_66_pred_1 = _2614;
                    frontier_phi_66_pred_2 = _2613;
                    frontier_phi_66_pred_3 = _2612;
                    frontier_phi_66_pred_4 = _2611;
                    frontier_phi_66_pred_5 = _2610;
                }
                else
                {
                    float _2754;
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    uint _2760;
                    _2754 = _2609;
                    _2755 = _2610;
                    _2756 = _2611;
                    _2757 = _2612;
                    _2758 = _2613;
                    _2759 = _2614;
                    _2760 = _2624;
                    float _2681;
                    float _2682;
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    for (;;)
                    {
                        uint _2764 = uint(findLSB(_2760)) + (_2615 << 5u);
                        uint _2761 = (_2760 + 4294967295u) & _2760;
                        uint _2766 = _2764 * 48u;
                        vec4 _2780 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2766)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 3u)).x));
                        uint _2786 = (_2764 * 48u) + 4u;
                        vec4 _2799 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2786)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 3u)).x));
                        uint _2805 = (_2764 * 48u) + 8u;
                        vec3 _2816 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2805)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 2u)).x));
                        float _2820 = _2780.x - _2309;
                        float _2821 = _2780.y - _2310;
                        float _2822 = _2780.z - _2311;
                        float _2823 = dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822));
                        float _2826 = inversesqrt(_2823);
                        float _2827 = _2826 * _2820;
                        float _2828 = _2826 * _2821;
                        float _2829 = _2826 * _2822;
                        float _2830 = dot(vec3(_582, _585, _588), vec3(_2827, _2828, _2829));
                        float _2835 = 1.0 - (_2823 * _2780.w);
                        float _4183 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                        float _2836 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                        float _2837 = sqrt(_2823) * _2799.w;
                        float _2840 = 1.39999997615814208984375 / (_2837 + 1.39999997615814208984375);
                        float _2841 = _2840 * _2840;
                        float _2844 = ((1.0 - _2841) * _2830) + _2841;
                        float _2847 = _2837 * _2837;
                        float _2851 = ((isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0))) * _2836) / ((_2847 * 0.699999988079071044921875) + 1.0);
                        float _2855 = (-0.0) - _2309;
                        float _2856 = (-0.0) - _2310;
                        float _2857 = (-0.0) - _2311;
                        float _2861 = inversesqrt(dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857)));
                        float _2862 = _2861 * _2855;
                        float _2863 = _2861 * _2856;
                        float _2864 = _2861 * _2857;
                        float _2872 = exp2(log2(1.0 / ((_2847 * 3.5) + 5.0)) * 0.25);
                        float _2873 = 1.0 - _642;
                        float _2880 = sqrt(1.0 - ((1.0 - (_2873 * _2873)) * (1.0 - (_2872 * _2872))));
                        float _2881 = _2880 * _2880;
                        float _2882 = _2881 * _2881;
                        float _2883 = _2862 + _2827;
                        float _2884 = _2863 + _2828;
                        float _2885 = _2864 + _2829;
                        float _2889 = inversesqrt(dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885)));
                        float _2893 = dot(vec3(_582, _585, _588), vec3(_2862, _2863, _2864));
                        float _4199 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                        float _2896 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                        float _2897 = dot(vec3(_582, _585, _588), vec3(_2889 * _2883, _2889 * _2884, _2889 * _2885));
                        float _4210 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                        float _2900 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                        float _2904 = ((_2900 * _2900) * (_2882 + (-1.0))) + 1.0;
                        float _2905 = _2840 * _2881;
                        float _2906 = _2905 * _2905;
                        float _2909 = ((1.0 - _2906) * _2830) + _2906;
                        float _4221 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                        float _2910 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                        float _2911 = 1.0 - _2881;
                        float _2921 = (0.5 / (((_2910 * ((_2896 * _2911) + _2881)) + 9.9999999392252902907785028219223e-09) + (((_2910 * _2911) + _2881) * _2896))) * _2910;
                        float _4232 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2932 = (((_2882 * 3.1415927410125732421875) * (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0)))) / ((_2904 * _2904) * ((_2847 * 2.1991131305694580078125) + 3.141590118408203125))) * _2836;
                        _2684 = (_2851 * _2799.x) + _2757;
                        _2685 = (_2851 * _2799.y) + _2758;
                        _2686 = (_2851 * _2799.z) + _2759;
                        _2681 = (_2932 * _2816.x) + _2754;
                        _2682 = (_2932 * _2816.y) + _2755;
                        _2683 = (_2932 * _2816.z) + _2756;
                        if (_2761 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2754 = _2681;
                            _2755 = _2682;
                            _2756 = _2683;
                            _2757 = _2684;
                            _2758 = _2685;
                            _2759 = _2686;
                            _2760 = _2761;
                        }
                    }
                    frontier_phi_66_pred = _2681;
                    frontier_phi_66_pred_1 = _2686;
                    frontier_phi_66_pred_2 = _2685;
                    frontier_phi_66_pred_3 = _2684;
                    frontier_phi_66_pred_4 = _2683;
                    frontier_phi_66_pred_5 = _2682;
                }
                _2457 = frontier_phi_66_pred;
                _2467 = frontier_phi_66_pred_1;
                _2465 = frontier_phi_66_pred_2;
                _2463 = frontier_phi_66_pred_3;
                _2461 = frontier_phi_66_pred_4;
                _2459 = frontier_phi_66_pred_5;
                uint _2616 = _2615 + 1u;
                if (_2616 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2609 = _2457;
                    _2610 = _2459;
                    _2611 = _2461;
                    _2612 = _2463;
                    _2613 = _2465;
                    _2614 = _2467;
                    _2615 = _2616;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2456 = _2457;
            _2458 = _2459;
            _2460 = _2461;
            _2462 = _2463;
            _2464 = _2465;
            _2466 = _2467;
        }
        uvec4 _2470 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2471 = _2470.z;
        uint _2473 = (_2471 >> 8u) & 15u;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        if (((4294967295u << _2473) & _2355) == 0u)
        {
            _2577 = _2456;
            _2579 = _2458;
            _2581 = _2460;
            _2583 = _2462;
            _2585 = _2464;
            _2587 = _2466;
        }
        else
        {
            float _2602 = inversesqrt(dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311)));
            float _2603 = _2602 * _2309;
            float _2604 = _2602 * _2310;
            float _2605 = _2602 * _2311;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2473 < ((_2471 >> 12u) & 15u))
            {
                float _2578;
                float _2580;
                float _2582;
                float _2584;
                float _2586;
                float _2588;
                float _2737 = _2456;
                float _2738 = _2458;
                float _2739 = _2460;
                float _2740 = _2462;
                float _2741 = _2464;
                float _2742 = _2466;
                uint _2743 = _2473;
                uint _2752;
                bool _2753;
                for (;;)
                {
                    _2752 = texelFetch(g_lightClassification, int((((_2349 << 5u) + (_2335 << 9u)) + (_2743 << 2u)) >> 2u)).x;
                    _2753 = _2752 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2753)
                    {
                        frontier_phi_77_pred = _2742;
                        frontier_phi_77_pred_1 = _2741;
                        frontier_phi_77_pred_2 = _2740;
                        frontier_phi_77_pred_3 = _2739;
                        frontier_phi_77_pred_4 = _2738;
                        frontier_phi_77_pred_5 = _2737;
                    }
                    else
                    {
                        float _2946;
                        float _2947;
                        float _2948;
                        float _2949;
                        float _2950;
                        float _2951;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _2959 = _2737;
                        float _2960 = _2738;
                        float _2961 = _2739;
                        float _2962 = _2740;
                        float _2963 = _2741;
                        float _2964 = _2742;
                        uint _2965 = _2752;
                        uint _2966;
                        vec4 _2991;
                        float _2992;
                        vec4 _3007;
                        vec3 _3019;
                        vec4 _3035;
                        vec4 _3051;
                        float _3097;
                        bool _3098;
                        for (;;)
                        {
                            uint _2976 = ((_2743 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2965));
                            _2966 = (_2965 + 4294967295u) & _2965;
                            uint _2978 = _2976 * 40u;
                            _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            _2992 = _2991.w;
                            uint _2994 = (_2976 * 40u) + 4u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3009 = (_2976 * 40u) + 8u;
                            _3019 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x));
                            uint _3022 = (_2976 * 40u) + 16u;
                            _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            uint _3038 = (_2976 * 40u) + 20u;
                            _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            uint _3053 = (_2976 * 40u) + 24u;
                            vec4 _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3072 = (_2976 * 40u) + 28u;
                            vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            _3097 = fma(_2311, _3085.z, fma(_2310, _3085.y, _3085.x * _2309)) + _3085.w;
                            _3098 = !((fma(_2311, _3066.z, fma(_2310, _3066.y, _3066.x * _2309)) + _3066.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3098)
                            {
                                float _3125 = _2991.x - _2309;
                                float _3126 = _2991.y - _2310;
                                float _3127 = _2991.z - _2311;
                                float _3128 = dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127));
                                float _3131 = inversesqrt(_3128);
                                float _3132 = _3131 * _3125;
                                float _3133 = _3131 * _3126;
                                float _3134 = _3131 * _3127;
                                float _3138 = 1.0 - (_3128 / (_2992 * _2992));
                                float _4243 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3139 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                                float _3143 = sqrt(_3128) * _3007.w;
                                float _3145 = 1.39999997615814208984375 / (_3143 + 1.39999997615814208984375);
                                float _3146 = _3145 * _3145;
                                float _3149 = ((1.0 - _3146) * dot(vec3(_3132, _3133, _3134), vec3(_582, _585, _588))) + _3146;
                                float _3152 = _3143 * _3143;
                                float _3156 = (fma(_2311, _3035.z, fma(_2310, _3035.y, _3035.x * _2309)) + _3035.w) / _3097;
                                float _3157 = (fma(_2311, _3051.z, fma(_2310, _3051.y, _3051.x * _2309)) + _3051.w) / _3097;
                                float _3161 = 1.0 - dot(vec2(_3156, _3157), vec2(_3156, _3157));
                                float _4259 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3162 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                                float _3163 = _3162 * (((isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0))) * _3139) / ((_3152 * 0.699999988079071044921875) + 1.0));
                                float _3175 = exp2(log2(1.0 / ((_3152 * 3.5) + 5.0)) * 0.25);
                                float _3176 = 1.0 - _642;
                                float _3183 = sqrt(1.0 - ((1.0 - (_3176 * _3176)) * (1.0 - (_3175 * _3175))));
                                float _3184 = _3183 * _3183;
                                float _3185 = _3184 * _3184;
                                float _3186 = _3132 - _2603;
                                float _3187 = _3133 - _2604;
                                float _3188 = _3134 - _2605;
                                float _3192 = inversesqrt(dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188)));
                                float _3196 = dot(vec3(_582, _585, _588), vec3((-0.0) - _2603, (-0.0) - _2604, (-0.0) - _2605));
                                float _4270 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3199 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                                float _3200 = dot(vec3(_582, _585, _588), vec3(_3192 * _3186, _3192 * _3187, _3192 * _3188));
                                float _4281 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3203 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                                float _3207 = ((_3203 * _3203) * (_3185 + (-1.0))) + 1.0;
                                float _3208 = _3145 * _3184;
                                float _3209 = _3208 * _3208;
                                float _3215 = ((1.0 - _3209) * dot(vec3(_582, _585, _588), vec3(_3132, _3133, _3134))) + _3209;
                                float _4292 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3216 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
                                float _3217 = 1.0 - _3184;
                                float _3227 = (0.5 / (((_3216 * ((_3199 * _3217) + _3184)) + 9.9999999392252902907785028219223e-09) + (((_3216 * _3217) + _3184) * _3199))) * _3216;
                                float _4303 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3237 = (_3162 * _3139) * (((_3185 * 3.1415927410125732421875) * (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) / ((_3207 * _3207) * ((_3152 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3163 * _3007.y;
                                frontier_phi_83_pred_1 = _3163 * _3007.x;
                                frontier_phi_83_pred_2 = _3237 * _3019.z;
                                frontier_phi_83_pred_3 = _3237 * _3019.y;
                                frontier_phi_83_pred_4 = _3237 * _3019.x;
                                frontier_phi_83_pred_5 = _3163 * _3007.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3245 = frontier_phi_83_pred;
                            _3244 = frontier_phi_83_pred_1;
                            _3243 = frontier_phi_83_pred_2;
                            _3242 = frontier_phi_83_pred_3;
                            _3241 = frontier_phi_83_pred_4;
                            _3246 = frontier_phi_83_pred_5;
                            _2949 = _3244 + _2962;
                            _2950 = _3245 + _2963;
                            _2951 = _3246 + _2964;
                            _2946 = _3241 + _2959;
                            _2947 = _3242 + _2960;
                            _2948 = _3243 + _2961;
                            if (_2966 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2948;
                                _2962 = _2949;
                                _2963 = _2950;
                                _2964 = _2951;
                                _2965 = _2966;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2951;
                        frontier_phi_77_pred_1 = _2950;
                        frontier_phi_77_pred_2 = _2949;
                        frontier_phi_77_pred_3 = _2948;
                        frontier_phi_77_pred_4 = _2947;
                        frontier_phi_77_pred_5 = _2946;
                    }
                    _2588 = frontier_phi_77_pred;
                    _2586 = frontier_phi_77_pred_1;
                    _2584 = frontier_phi_77_pred_2;
                    _2582 = frontier_phi_77_pred_3;
                    _2580 = frontier_phi_77_pred_4;
                    _2578 = frontier_phi_77_pred_5;
                    uint _2744 = _2743 + 1u;
                    if (_2744 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2737 = _2578;
                        _2738 = _2580;
                        _2739 = _2582;
                        _2740 = _2584;
                        _2741 = _2586;
                        _2742 = _2588;
                        _2743 = _2744;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2582;
                frontier_phi_58_59_ladder_1 = _2588;
                frontier_phi_58_59_ladder_2 = _2586;
                frontier_phi_58_59_ladder_3 = _2584;
                frontier_phi_58_59_ladder_4 = _2580;
                frontier_phi_58_59_ladder_5 = _2578;
            }
            else
            {
                frontier_phi_58_59_ladder = _2460;
                frontier_phi_58_59_ladder_1 = _2466;
                frontier_phi_58_59_ladder_2 = _2464;
                frontier_phi_58_59_ladder_3 = _2462;
                frontier_phi_58_59_ladder_4 = _2458;
                frontier_phi_58_59_ladder_5 = _2456;
            }
            _2577 = frontier_phi_58_59_ladder_5;
            _2579 = frontier_phi_58_59_ladder_4;
            _2581 = frontier_phi_58_59_ladder;
            _2583 = frontier_phi_58_59_ladder_3;
            _2585 = frontier_phi_58_59_ladder_2;
            _2587 = frontier_phi_58_59_ladder_1;
        }
        float _2592 = isnan(1.0) ? _626 : (isnan(_626) ? 1.0 : min(_626, 1.0));
        _2368 = (_2592 * _2583) + _1823;
        _2370 = (_2592 * _2585) + _1825;
        _2372 = (_2592 * _2587) + _1827;
        _2374 = ((_2577 * 0.039999999105930328369140625) * _2592) + _2153;
        _2376 = ((_2579 * 0.039999999105930328369140625) * _2592) + _2155;
        _2378 = ((_2581 * 0.039999999105930328369140625) * _2592) + _2157;
    }
    else
    {
        _2368 = _1823;
        _2370 = _1825;
        _2372 = _1827;
        _2374 = _2153;
        _2376 = _2155;
        _2378 = _2157;
    }
    float _4319 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _4330 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4341 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _2395 = ((isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2368 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _626))) + ((_2374 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _1463)) * cbPerFrame._m0[3u].x);
    float _2396 = ((isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2370 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _626))) + ((_2376 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _1463)) * cbPerFrame._m0[3u].x);
    float _2397 = ((isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2372 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _626))) + ((_2378 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _1463)) * cbPerFrame._m0[3u].x);
    uint _2398 = _222 + 6u;
    float _2406 = _561 / cbSceneParam._m0[86u].x;
    float _2407 = _562 / cbSceneParam._m0[86u].y;
    vec4 _2421 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2406, _2407, (log2((isnan(cbSceneParam._m0[77u].w) ? _482 : (isnan(_482) ? cbSceneParam._m0[77u].w : min(_482, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2423 = _2421.x;
    float _2424 = _2421.y;
    float _2425 = _2421.z;
    float _2426 = _2421.w;
    float _2519;
    float _2521;
    float _2523;
    float _2525;
    if (_482 > cbSceneParam._m0[78u].w)
    {
        float _2481 = isnan(_482) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _482 : min(cbSceneParam._m0[80u].w, _482));
        float _2482 = _2481 / _482;
        float _2493 = _2482 * _533;
        float _2494 = _534 * _2482;
        float _2495 = (-0.0) - _2494;
        float _2497 = _2482 * _535;
        float _2499 = (cbSceneParam._m0[77u].w * _2495) / _2481;
        float _2500 = _2499 + cbSceneParam._m0[79u].w;
        float _2501 = cbSceneParam._m0[79u].w - _2494;
        float _2507 = sqrt(((_2493 * _2493) + (_2494 * _2494)) + (_2497 * _2497));
        float _2510 = (1.0 - (cbSceneParam._m0[77u].w / _2481)) * _2507;
        float _2515 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2517 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2694;
        if (abs((_2495 - _2499) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2694 = ((((_2500 > 0.0) ? exp2(_2515 * _2500) : (2.0 - exp2(_2517 * _2500))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2510;
        }
        else
        {
            float _2638 = 1.0 / cbSceneParam._m0[80u].x;
            float _2639 = isnan(_2501) ? _2500 : (isnan(_2500) ? _2501 : max(_2500, _2501));
            float _2640 = isnan(_2501) ? _2500 : (isnan(_2500) ? _2501 : min(_2500, _2501));
            float _2649 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : min(_2639, 0.0));
            float _2650 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : min(_2640, 0.0));
            _2694 = ((abs(_2507 / _2495) * cbSceneParam._m0[80u].y) * ((((_2649 - _2650) * 2.0) - ((exp2(_2515 * (isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0)))) - exp2(_2515 * (isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0))))) * _2638)) - ((exp2(_2517 * _2649) - exp2(_2517 * _2650)) * _2638))) + (_2510 * cbSceneParam._m0[80u].z);
        }
        vec4 _2696 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2406, _2407, 1.0), 0.0);
        float _2705 = exp2((_2694 * (-1.44269502162933349609375)) * (1.0 - _2696.w));
        float _2706 = log2(_2705);
        float _2722 = log2(_2426);
        _2519 = (exp2(_2722 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2706 * cbSceneParam._m0[78u].x)) * _2696.x) / cbSceneParam._m0[78u].x)) + _2423;
        _2521 = (exp2(_2722 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2706 * cbSceneParam._m0[78u].y)) * _2696.y) / cbSceneParam._m0[78u].y)) + _2424;
        _2523 = (exp2(_2722 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2706 * cbSceneParam._m0[78u].z)) * _2696.z) / cbSceneParam._m0[78u].z)) + _2425;
        _2525 = _2705 * _2426;
    }
    else
    {
        _2519 = _2423;
        _2521 = _2424;
        _2523 = _2425;
        _2525 = _2426;
    }
    bool _2732;
    vec4 _2535;
    vec4 _2557;
    float _2559;
    float _2563;
    float _2564;
    float _2565;
    float _2566;
    bool _2576;
    for (;;)
    {
        _2535 = cbMatDynParam._m0[0u];
        float _2537 = roundEven(_2535.y);
        bool _2538 = _2537 == 3.0;
        float _2539 = log2(_2525);
        float _2546 = exp2(_2539 * cbSceneParam._m0[78u].x) * _2395;
        float _2547 = exp2(_2539 * cbSceneParam._m0[78u].y) * _2396;
        float _2548 = exp2(_2539 * cbSceneParam._m0[78u].z) * _2397;
        float _2555 = _549 + (-0.5);
        _2557 = cbMtdParam._m0[1u];
        _2559 = _2557.y * _2555;
        float _2562 = (_2537 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2563 = _2562 * (_2538 ? _2546 : (_2546 + (cbSceneParam._m0[72u].w * _2519)));
        _2564 = _2562 * (_2538 ? _2547 : (_2547 + (cbSceneParam._m0[72u].w * _2521)));
        _2565 = _2562 * (_2538 ? _2548 : (_2548 + (cbSceneParam._m0[72u].w * _2523)));
        _2566 = _2555 * 0.999000012874603271484375;
        _2576 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2576)
        {
            if ((cbInstanceData._m0[_222 + 7u].x + _2566) < 0.5)
            {
                _2732 = true;
                break;
            }
        }
        uint _2673 = _601 + uint(_2535.w);
        if ((cbInstanceData._m0[_2673].w < 1.0) && ((cbInstanceData._m0[_2673].w + _2566) < 0.5))
        {
            _2732 = true;
            break;
        }
        if ((_2559 + 1.0) < _2557.x)
        {
            _2732 = true;
            break;
        }
        _2732 = false;
        break;
    }
    float _2937;
    if (_2732)
    {
        discard_state = true;
        _2937 = 0.0;
    }
    else
    {
        _2937 = cbInstanceData._m0[_2398].w;
    }
    SV_Target.x = _2563;
    SV_Target.y = _2564;
    SV_Target.z = _2565;
    SV_Target.w = _2937;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2398].w;
    discard_exit();
}


