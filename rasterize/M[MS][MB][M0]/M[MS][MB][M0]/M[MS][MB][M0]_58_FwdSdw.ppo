#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1177;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _226 = _225 * _217;
    float _227 = _225 * _218;
    float _228 = _225 * _219;
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = _239 * TANGENT.x;
    float _241 = _239 * TANGENT.y;
    float _242 = _239 * TANGENT.z;
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _290 = _284.x * cbMtdParam._m0[9u].x;
    float _291 = _284.y * cbMtdParam._m0[9u].y;
    float _292 = _284.z * cbMtdParam._m0[9u].z;
    vec4 _311 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _331 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _357 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _361 = _357.z;
    float _365 = (_357.x * 2.0) + (-1.0);
    float _366 = (_357.y * 2.0) + (-1.0);
    float _367 = dot(vec2(_365, _366), vec2(_365, _366));
    float _3766 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _373 = sqrt(1.0 - (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))));
    float _378 = _365 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_331.x * 2.0) + (-1.0)));
    float _379 = _366 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_331.y * 2.0) + (-1.0)));
    float _382 = fma(_373, _233, fma(_379, _240, _378 * _226));
    float _385 = fma(_373, _234, fma(_379, _241, _378 * _227));
    float _388 = fma(_373, _235, fma(_379, _242, _378 * _228));
    float _392 = inversesqrt(dot(vec3(_382, _385, _388), vec3(_382, _385, _388)));
    vec4 _428 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _430 = _428.x;
    float _431 = 1.0 - _430;
    float _438 = ((_430 - _431) * cbMtdParam._m0[24u].z) + _431;
    float _440 = (cbMtdParam._m0[19u].x + dot(vec4(_392 * _382, _392 * _385, _392 * _388, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_438 * cbMtdParam._m0[21u].z);
    float _3777 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _443 = (-0.0) - cbMtdParam._m0[24u].y;
    float _445 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _445 : (isnan(_445) ? 1.0 : min(_445, 1.0));
    float _453 = _441 - ((_441 * TEXCOORD_8.x) * _446);
    float _454 = _441 - ((_441 * TEXCOORD_8.y) * _446);
    float _455 = _441 - ((_441 * TEXCOORD_8.z) * _446);
    float _462 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _466 = ((isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : min(_462, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _474 = (_466 - (((_438 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _466))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3808 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _475 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _479 = ((_453 * ((_311.x * cbMtdParam._m0[18u].x) - _290)) * _475) + _290;
    float _480 = ((_454 * ((_311.y * cbMtdParam._m0[18u].y) - _291)) * _475) + _291;
    float _481 = ((_455 * ((_311.z * cbMtdParam._m0[18u].z) - _292)) * _475) + _292;
    vec4 _493 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _495 = _493.x;
    float _496 = 1.0 - _495;
    float _525 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_495 - _496) * cbMtdParam._m0[24u].w) + _496) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3819 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _526 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _534 = ((((cbMtdParam._m0[10u].x - _479) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _526) + _479;
    float _535 = ((((cbMtdParam._m0[10u].y - _480) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _526) + _480;
    float _536 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _481)) * _526) + _481;
    float _541 = (((_331.z - _361) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _361;
    vec4 _555 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _562 = (_555.x * 2.0) + (-1.0);
    float _563 = (_555.y * 2.0) + (-1.0);
    float _564 = dot(vec2(_562, _563), vec2(_562, _563));
    float _3830 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _573 = (((_555.z - _541) * _453) * _475) + _541;
    float _576 = ((cbMtdParam._m0[23u].y - _573) * _526) + _573;
    vec4 _595 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _601 = (_595.x * 2.0) + (-1.0);
    float _602 = (_595.y * 2.0) + (-1.0);
    float _603 = dot(vec2(_601, _602), vec2(_601, _602));
    float _3841 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _623 = (((cbMtdParam._m0[21u].x * _378) + ((_562 - _378) * _453)) * _475) + _378;
    float _624 = (((cbMtdParam._m0[21u].x * _379) + ((_563 - _379) * _454)) * _475) + _379;
    float _625 = (((sqrt(1.0 - (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) - _373) * _455) * _475) + _373;
    float _636 = (((_601 - _623) + (_623 * cbMtdParam._m0[22u].z)) * _526) + _623;
    float _637 = (((_602 - _624) + (_624 * cbMtdParam._m0[22u].z)) * _526) + _624;
    float _638 = ((sqrt(1.0 - (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) - _625) * _526) + _625;
    float _640 = cbMtdParam._m0[22u].x + _357.w;
    float _643 = fma(_638, _233, fma(_637, _240, _636 * _226));
    float _646 = fma(_638, _234, fma(_637, _241, _636 * _227));
    float _649 = fma(_638, _235, fma(_637, _242, _636 * _228));
    float _653 = inversesqrt(dot(vec3(_643, _646, _649), vec3(_643, _646, _649)));
    float _654 = _653 * _643;
    float _655 = _653 * _646;
    float _656 = _653 * _649;
    float _3852 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _657 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _3874 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _3885 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _3896 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _675 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _725 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _715);
    float _726 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _715);
    float _727 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _715);
    float _731 = inversesqrt(dot(vec3(_725, _726, _727), vec3(_725, _726, _727)));
    float _732 = _725 * _731;
    float _733 = _726 * _731;
    float _734 = _727 * _731;
    float _740 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _741 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _762 = fma(_656, cbSceneParam._m0[5u].z, fma(_655, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _654));
    float _765 = fma(_656, cbSceneParam._m0[6u].z, fma(_655, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _654));
    float _768 = fma(_656, cbSceneParam._m0[7u].z, fma(_655, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _654));
    uint _782 = (_245 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _788 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * cbInstanceData._m0[_782].x;
    float _789 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_782].y;
    float _790 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * cbInstanceData._m0[_782].z;
    float _3907 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _792 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _793 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    vec4 _802 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _740, cbSceneParam._m0[86u].y * _741));
    float _806 = ((isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * TEXCOORD_5.w) * _802.x;
    float _807 = dot(vec3(_654, _655, _656), vec3(_732, _733, _734));
    float _810 = _807 * 2.0;
    float _814 = (_810 * _654) - _732;
    float _815 = (_810 * _655) - _733;
    float _816 = (_810 * _656) - _734;
    float _820 = abs(dot(vec3(_732, _733, _734), vec3(_654, _655, _656)));
    float _3940 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _822 = sqrt(_657);
    float _835 = exp2((_822 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_822 * 3.0));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _875 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1176;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _901 = fma(_875, cbModelParam._m0[26u].z, fma(_871, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _867));
        float _905 = fma(_875, cbModelParam._m0[27u].z, fma(_871, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _867));
        float _909 = fma(_875, cbModelParam._m0[28u].z, fma(_871, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _867));
        float _934 = _867 + _654;
        float _935 = _871 + _655;
        float _936 = _875 + _656;
        float _946 = fma(_936, cbModelParam._m0[26u].z, fma(_935, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _934)) - _901;
        float _947 = fma(_936, cbModelParam._m0[27u].z, fma(_935, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _934)) - _905;
        float _948 = fma(_936, cbModelParam._m0[28u].z, fma(_935, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _934)) - _909;
        float _952 = inversesqrt(dot(vec3(_946, _947, _948), vec3(_946, _947, _948)));
        float _965 = ((_952 * _946) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_901 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_952 * _947) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_905 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _967 = ((_952 * _948) / cbModelParam._m0[34u].z) + ((((((_909 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        float _1004 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_970.x + (-0.5));
        float _1006 = _1004 * (_970.y + (-0.5));
        float _1007 = _1004 * (_970.z + (-0.5));
        float _1014 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_977.x + (-0.5));
        float _1016 = _1014 * (_977.y + (-0.5));
        float _1017 = _1014 * (_977.z + (-0.5));
        float _1024 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_984.x + (-0.5));
        float _1026 = _1024 * (_984.y + (-0.5));
        float _1027 = _1024 * (_984.z + (-0.5));
        float _1034 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_991.x + (-0.5));
        float _1036 = _1034 * (_991.y + (-0.5));
        float _1037 = _1034 * (_991.z + (-0.5));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = _1005 * 0.5;
        float _1042 = _1015 * 0.5;
        float _1043 = _1025 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1058 = (dot(vec3(_654, _655, _656), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1068 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3988 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1070 + 1.0))) + _1075) * _1038;
        float _1085 = _1006 * 0.5;
        float _1086 = _1016 * 0.5;
        float _1087 = _1026 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_654, _655, _656), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _4021 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1112 + 1.0))) + _1117) * _1039;
        float _1127 = _1007 * 0.5;
        float _1128 = _1017 * 0.5;
        float _1129 = _1027 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_654, _655, _656), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _4054 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1154 + 1.0))) + _1159) * _1040;
        _1176 = _1007;
        _1178 = _1006;
        _1179 = _1005;
        _1180 = _1017;
        _1181 = _1016;
        _1182 = _1015;
        _1183 = _1027;
        _1184 = _1026;
        _1185 = _1025;
        _1186 = _1040;
        _1187 = _1039;
        _1188 = _1038;
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
        _1190 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1191 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
    }
    else
    {
        _1176 = _1177;
        _1178 = _1177;
        _1179 = _1177;
        _1180 = _1177;
        _1181 = _1177;
        _1182 = _1177;
        _1183 = _1177;
        _1184 = _1177;
        _1185 = _1177;
        _1186 = _1177;
        _1187 = _1177;
        _1188 = _1177;
        _1189 = 0.0;
        _1190 = 0.0;
        _1191 = 0.0;
    }
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1216 = fma(_875, cbModelParam._m0[30u].z, fma(_871, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _867));
        float _1220 = fma(_875, cbModelParam._m0[31u].z, fma(_871, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _867));
        float _1224 = fma(_875, cbModelParam._m0[32u].z, fma(_871, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _867));
        float _1247 = _867 + _654;
        float _1248 = _871 + _655;
        float _1249 = _875 + _656;
        float _1259 = fma(_1249, cbModelParam._m0[30u].z, fma(_1248, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1247)) - _1216;
        float _1260 = fma(_1249, cbModelParam._m0[31u].z, fma(_1248, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1247)) - _1220;
        float _1261 = fma(_1249, cbModelParam._m0[32u].z, fma(_1248, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1247)) - _1224;
        float _1265 = inversesqrt(dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261)));
        float _1278 = ((_1265 * _1259) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1216 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1279 = ((_1265 * _1260) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1220 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1280 = ((_1265 * _1261) / cbModelParam._m0[35u].z) + ((((((_1224 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        float _1315 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1282.x + (-0.5));
        float _1317 = _1315 * (_1282.y + (-0.5));
        float _1318 = _1315 * (_1282.z + (-0.5));
        float _1325 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1289.x + (-0.5));
        float _1327 = _1325 * (_1289.y + (-0.5));
        float _1328 = _1325 * (_1289.z + (-0.5));
        float _1335 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1296.x + (-0.5));
        float _1337 = _1335 * (_1296.y + (-0.5));
        float _1338 = _1335 * (_1296.z + (-0.5));
        float _1345 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1303.x + (-0.5));
        float _1347 = _1345 * (_1303.y + (-0.5));
        float _1348 = _1345 * (_1303.z + (-0.5));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = _1316 * 0.5;
        float _1353 = _1326 * 0.5;
        float _1354 = _1336 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_654, _655, _656), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _4095 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _4106 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _4117 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1379 + 1.0))) + _1384) * _1349;
        float _1394 = _1317 * 0.5;
        float _1395 = _1327 * 0.5;
        float _1396 = _1337 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_654, _655, _656), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _4150 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1421 + 1.0))) + _1426) * _1350;
        float _1436 = _1318 * 0.5;
        float _1437 = _1328 * 0.5;
        float _1438 = _1338 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_654, _655, _656), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4183 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1463 + 1.0))) + _1468) * _1351;
        _1485 = _1318;
        _1486 = _1317;
        _1487 = _1316;
        _1488 = _1328;
        _1489 = _1327;
        _1490 = _1326;
        _1491 = _1338;
        _1492 = _1337;
        _1493 = _1336;
        _1494 = _1351;
        _1495 = _1350;
        _1496 = _1349;
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
        _1498 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1499 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
    }
    else
    {
        _1485 = _1177;
        _1486 = _1177;
        _1487 = _1177;
        _1488 = _1177;
        _1489 = _1177;
        _1490 = _1177;
        _1491 = _1177;
        _1492 = _1177;
        _1493 = _1177;
        _1494 = _1177;
        _1495 = _1177;
        _1496 = _1177;
        _1497 = 0.0;
        _1498 = 0.0;
        _1499 = 0.0;
    }
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1189)) + _1189;
    float _1510 = (cbModelParam._m0[1u].x * (_1498 - _1190)) + _1190;
    float _1511 = (cbModelParam._m0[1u].x * (_1499 - _1191)) + _1191;
    float _1532 = fma(_1511, cbSceneParam._m0[89u].z, fma(_1510, cbSceneParam._m0[89u].y, _1509 * cbSceneParam._m0[89u].x));
    float _1535 = fma(_1511, cbSceneParam._m0[90u].z, fma(_1510, cbSceneParam._m0[90u].y, _1509 * cbSceneParam._m0[90u].x));
    float _1538 = fma(_1511, cbSceneParam._m0[91u].z, fma(_1510, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1509));
    float _1553 = _814 * 0.5;
    float _1554 = _815 * 0.5;
    float _1555 = _816 * 0.5;
    float _1556 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1487, _1490, _1493, _1496));
    float _1559 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1486, _1489, _1492, _1495));
    float _1562 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1596;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1569 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1176, _1180, _1183, _1186));
        float _1573 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1178, _1181, _1184, _1187));
        float _1577 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1179, _1182, _1185, _1188));
        float _1584 = dot(vec4(cbModelParam._m0[39u]), vec4(_1553, _1554, _1555, 1.0));
        _1596 = dot(vec3(isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1584) ? 0.0 : (isnan(0.0) ? _1584 : max(0.0, _1584))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1596 = 1.0;
    }
    float _1607;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1598 = dot(vec4(cbModelParam._m0[40u]), vec4(_1553, _1554, _1555, 1.0));
        _1607 = dot(vec3(isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1598) ? 0.0 : (isnan(0.0) ? _1598 : max(0.0, _1598))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1607 = 1.0;
    }
    float _1611 = (_1607 * cbModelParam._m0[1u].x) + (_1596 * (1.0 - cbModelParam._m0[1u].x));
    float _1621 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _657);
    float _1622 = isnan(_1621) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1621 : min(cbModelParam._m0[25u].z, _1621));
    float _1702;
    float _1704;
    float _1706;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1669 = fma(_875, cbModelParam._m0[13u].z, fma(_871, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _867)) + cbModelParam._m0[13u].w;
        float _1673 = fma(_875, cbModelParam._m0[14u].z, fma(_871, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _867)) + cbModelParam._m0[14u].w;
        float _1677 = fma(_875, cbModelParam._m0[15u].z, fma(_871, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _867)) + cbModelParam._m0[15u].w;
        float _1680 = fma(_816, cbModelParam._m0[13u].z, fma(_815, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _814));
        float _1683 = fma(_816, cbModelParam._m0[14u].z, fma(_815, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _814));
        float _1686 = fma(_816, cbModelParam._m0[15u].z, fma(_815, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _814));
        float _1714;
        if (_1680 > 0.0)
        {
            _1714 = abs((1.0 - _1669) / _1680);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1669 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1714 = frontier_phi_14_12_ladder;
        }
        float _1884;
        if (_1683 > 0.0)
        {
            _1884 = abs((1.0 - _1673) / _1683);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1673 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1884 = frontier_phi_23_19_ladder;
        }
        float _2180;
        if (_1686 > 0.0)
        {
            _2180 = abs((1.0 - _1677) / _1686);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1677 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2180 = frontier_phi_35_30_ladder;
        }
        float _2182 = isnan(_1884) ? _1714 : (isnan(_1714) ? _1884 : min(_1714, _1884));
        float _2183 = isnan(_2180) ? _2182 : (isnan(_2182) ? _2180 : min(_2182, _2180));
        float _2187 = (_2183 * _1680) + _1669;
        float _2188 = (_2183 * _1683) + _1673;
        float _2189 = (_2183 * _1686) + _1677;
        float _2190 = _2183 * 9.9999997473787516355514526367188e-05;
        float _2192 = (-1.0) - _2190;
        float _2194 = _2190 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2189 > _2194) || ((_2189 < _2192) || ((_2188 > _2194) || ((_2188 < _2192) || ((_2187 < _2192) || (_2187 > _2194))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2334 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2189, cbModelParam._m0[9u].z, fma(_2188, cbModelParam._m0[9u].y, _2187 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2189, cbModelParam._m0[10u].z, fma(_2188, cbModelParam._m0[10u].y, _2187 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2189, cbModelParam._m0[11u].z, fma(_2188, cbModelParam._m0[11u].y, _2187 * cbModelParam._m0[11u].x))), _1622);
            frontier_phi_13_35_ladder = _2334.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2334.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2334.x * cbModelParam._m0[1u].y;
        }
        _1702 = frontier_phi_13_35_ladder_2;
        _1704 = frontier_phi_13_35_ladder_1;
        _1706 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1690 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_814, _815, _816), _1622);
        _1702 = _1690.x * cbModelParam._m0[1u].y;
        _1704 = _1690.y * cbModelParam._m0[1u].y;
        _1706 = _1690.z * cbModelParam._m0[1u].y;
    }
    float _1710 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _657);
    float _1711 = isnan(_1710) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1710 : min(cbModelParam._m0[25u].w, _1710));
    float _1800;
    float _1802;
    float _1804;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1764 = fma(_875, cbModelParam._m0[21u].z, fma(_871, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _867)) + cbModelParam._m0[21u].w;
        float _1768 = fma(_875, cbModelParam._m0[22u].z, fma(_871, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _867)) + cbModelParam._m0[22u].w;
        float _1772 = fma(_875, cbModelParam._m0[23u].z, fma(_871, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _867)) + cbModelParam._m0[23u].w;
        float _1775 = fma(_816, cbModelParam._m0[21u].z, fma(_815, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _814));
        float _1778 = fma(_816, cbModelParam._m0[22u].z, fma(_815, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _814));
        float _1781 = fma(_816, cbModelParam._m0[23u].z, fma(_815, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _814));
        float _1889;
        if (_1775 > 0.0)
        {
            _1889 = abs((1.0 - _1764) / _1775);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1764 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1889 = frontier_phi_25_21_ladder;
        }
        float _2207;
        if (_1778 > 0.0)
        {
            _2207 = abs((1.0 - _1768) / _1778);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1768 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2207 = frontier_phi_37_32_ladder;
        }
        float _2534;
        if (_1781 > 0.0)
        {
            _2534 = abs((1.0 - _1772) / _1781);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1772 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2534 = frontier_phi_47_44_ladder;
        }
        float _2536 = isnan(_2207) ? _1889 : (isnan(_1889) ? _2207 : min(_1889, _2207));
        float _2537 = isnan(_2534) ? _2536 : (isnan(_2536) ? _2534 : min(_2536, _2534));
        float _2541 = (_2537 * _1775) + _1764;
        float _2542 = (_2537 * _1778) + _1768;
        float _2543 = (_2537 * _1781) + _1772;
        float _2544 = _2537 * 9.9999997473787516355514526367188e-05;
        float _2545 = (-1.0) - _2544;
        float _2547 = _2544 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2543 > _2547) || ((_2543 < _2545) || ((_2542 > _2547) || ((_2542 < _2545) || ((_2541 < _2545) || (_2541 > _2547))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2661 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2543, cbModelParam._m0[17u].z, fma(_2542, cbModelParam._m0[17u].y, _2541 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2543, cbModelParam._m0[18u].z, fma(_2542, cbModelParam._m0[18u].y, _2541 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2543, cbModelParam._m0[19u].z, fma(_2542, cbModelParam._m0[19u].y, _2541 * cbModelParam._m0[19u].x))), _1711);
            frontier_phi_22_47_ladder = _2661.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2661.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2661.x * cbModelParam._m0[1u].z;
        }
        _1800 = frontier_phi_22_47_ladder_2;
        _1802 = frontier_phi_22_47_ladder_1;
        _1804 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1784 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_814, _815, _816), _1711);
        _1800 = _1784.x * cbModelParam._m0[1u].z;
        _1802 = _1784.y * cbModelParam._m0[1u].z;
        _1804 = _1784.z * cbModelParam._m0[1u].z;
    }
    float _1816 = ((((1.0 - _835) * ((_822 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_835 * _822)) * _806;
    float _1817 = _1816 * ((cbModelParam._m0[1u].w * (_1800 - _1702)) + _1702);
    float _1818 = _1816 * ((cbModelParam._m0[1u].w * (_1802 - _1704)) + _1704);
    float _1819 = _1816 * ((cbModelParam._m0[1u].w * (_1804 - _1706)) + _1706);
    float _1822 = fma(_1819, cbSceneParam._m0[89u].z, fma(_1818, cbSceneParam._m0[89u].y, _1817 * cbSceneParam._m0[89u].x));
    float _1825 = fma(_1819, cbSceneParam._m0[90u].z, fma(_1818, cbSceneParam._m0[90u].y, _1817 * cbSceneParam._m0[90u].x));
    float _1828 = fma(_1819, cbSceneParam._m0[91u].z, fma(_1818, cbSceneParam._m0[91u].y, _1817 * cbSceneParam._m0[91u].x));
    float _1863 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1867 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1871 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1875 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1876 = _1863 / _1875;
    float _1877 = _1867 / _1875;
    float _1878 = _1871 / _1875;
    float _2025;
    float _2026;
    float _2027;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1905 = ((uint(_1878 > cbSceneParam._m0[59u].y) + uint(_1878 > cbSceneParam._m0[59u].x)) + uint(_1878 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1906 = _1905 + 43u;
        uint _1914 = _1905 + 44u;
        uint _1922 = _1905 + 45u;
        uint _1930 = _1905 + 46u;
        float _1941 = fma(_1875, cbSceneParam._m0[_1906].w, fma(_1871, cbSceneParam._m0[_1906].z, fma(_1867, cbSceneParam._m0[_1906].y, _1863 * cbSceneParam._m0[_1906].x)));
        float _1945 = fma(_1875, cbSceneParam._m0[_1914].w, fma(_1871, cbSceneParam._m0[_1914].z, fma(_1867, cbSceneParam._m0[_1914].y, _1863 * cbSceneParam._m0[_1914].x)));
        float _1953 = fma(_1875, cbSceneParam._m0[_1930].w, fma(_1871, cbSceneParam._m0[_1930].z, fma(_1867, cbSceneParam._m0[_1930].y, _1863 * cbSceneParam._m0[_1930].x)));
        float _1958 = cbSceneParam._m0[33u].z * _1953;
        float _1960 = cbSceneParam._m0[33u].w * _1953;
        float _1963 = fma(_1875, cbSceneParam._m0[_1922].w, fma(_1871, cbSceneParam._m0[_1922].z, fma(_1867, cbSceneParam._m0[_1922].y, _1863 * cbSceneParam._m0[_1922].x))) / _1953;
        float _2011 = (cbSceneParam._m0[33u].x - sqrt(((_1877 * _1877) + (_1876 * _1876)) + (_1878 * _1878))) * cbSceneParam._m0[33u].y;
        float _4309 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2018 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1958 + _1941) / _1953, (_1960 + _1945) / _1953), _1963), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1960 + _1941) / _1953, (_1945 - _1958) / _1953), _1963), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1941 - _1958) / _1953, (_1945 - _1960) / _1953), _1963), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1941 - _1960) / _1953, (_1958 + _1945) / _1953), _1963), 0.0)).x), vec4(0.25)));
        _2025 = 1.0 - (_2018 * cbSceneParam._m0[34u].x);
        _2026 = 1.0 - (_2018 * cbSceneParam._m0[34u].y);
        _2027 = 1.0 - (_2018 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2025 = 1.0;
        _2026 = 1.0;
        _2027 = 1.0;
    }
    float _2091;
    float _2093;
    float _2095;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2079 = fma(_1875, cbSceneParam._m0[63u].w, fma(_1871, cbSceneParam._m0[63u].z, fma(_1867, cbSceneParam._m0[63u].y, _1863 * cbSceneParam._m0[63u].x)));
        float _2080 = fma(_1875, cbSceneParam._m0[60u].w, fma(_1871, cbSceneParam._m0[60u].z, fma(_1867, cbSceneParam._m0[60u].y, _1863 * cbSceneParam._m0[60u].x))) / _2079;
        float _2081 = fma(_1875, cbSceneParam._m0[61u].w, fma(_1871, cbSceneParam._m0[61u].z, fma(_1867, cbSceneParam._m0[61u].y, _1863 * cbSceneParam._m0[61u].x))) / _2079;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2080 >= cbSceneParam._m0[64u].x) && (_2081 >= cbSceneParam._m0[64u].y)) && (_2080 <= cbSceneParam._m0[64u].z)) && (_2081 <= cbSceneParam._m0[64u].w))
        {
            float _2220 = fma(_1875, cbSceneParam._m0[62u].w, fma(_1871, cbSceneParam._m0[62u].z, fma(_1867, cbSceneParam._m0[62u].y, _1863 * cbSceneParam._m0[62u].x))) / _2079;
            float _2224 = isnan(cbSceneParam._m0[41u].w) ? _2220 : (isnan(_2220) ? cbSceneParam._m0[41u].w : max(_2220, cbSceneParam._m0[41u].w));
            float _2267 = (cbSceneParam._m0[33u].x - sqrt(((_1877 * _1877) + (_1876 * _1876)) + (_1878 * _1878))) * cbSceneParam._m0[33u].y;
            float _4325 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
            float _2274 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2080, cbSceneParam._m0[33u].w + _2081), _2224), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2080, _2081 - cbSceneParam._m0[33u].z), _2224), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2080 - cbSceneParam._m0[33u].z, _2081 - cbSceneParam._m0[33u].w), _2224), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2080 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2081), _2224), 0.0)).x), vec4(0.25)));
            float _2278 = 1.0 - (_2274 * cbSceneParam._m0[34u].x);
            float _2279 = 1.0 - (_2274 * cbSceneParam._m0[34u].y);
            float _2280 = 1.0 - (_2274 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2280) ? _2027 : (isnan(_2027) ? _2280 : min(_2027, _2280));
            frontier_phi_34_33_ladder_1 = isnan(_2279) ? _2026 : (isnan(_2026) ? _2279 : min(_2026, _2279));
            frontier_phi_34_33_ladder_2 = isnan(_2278) ? _2025 : (isnan(_2025) ? _2278 : min(_2025, _2278));
        }
        else
        {
            frontier_phi_34_33_ladder = _2027;
            frontier_phi_34_33_ladder_1 = _2026;
            frontier_phi_34_33_ladder_2 = _2025;
        }
        _2091 = frontier_phi_34_33_ladder_2;
        _2093 = frontier_phi_34_33_ladder_1;
        _2095 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2091 = _2025;
        _2093 = _2026;
        _2095 = _2027;
    }
    uvec4 _2100 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _2102 = _2100.x * 14u;
    uint _2103 = _2102 + 13u;
    float _2110 = _806 + (-1.0);
    float _2115 = (cbLight._m0[_2103].x * _2110) + 1.0;
    float _2116 = (cbLight._m0[_2103].y * _2110) + 1.0;
    float _2117 = (cbLight._m0[_2103].z * _2110) + 1.0;
    float _2118 = (cbLight._m0[_2103].w * _2110) + 1.0;
    uint _2119 = _2102 + 5u;
    float _2125 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
    uint _2129 = _2102 + 4u;
    float _2139 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
    uint _2143 = _2102 | 1u;
    float _2154 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_654, _655, _656));
    float _2157 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_654, _655, _656));
    float _4361 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _4372 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2162 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * 0.3183098733425140380859375;
    float _2164 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * 0.3183098733425140380859375;
    float _2171 = ((cbLight._m0[_2119].x * _2125) * _2164) + (((cbLight._m0[_2129].x * _2091) * _2139) * _2162);
    float _2172 = ((_2125 * cbLight._m0[_2119].y) * _2164) + (((cbLight._m0[_2129].y * _2093) * _2139) * _2162);
    float _2173 = ((_2125 * cbLight._m0[_2119].z) * _2164) + (((cbLight._m0[_2129].z * _2095) * _2139) * _2162);
    uvec4 _2177 = floatBitsToUint(cbLight._m0[_2102 + 12u]);
    bool _2179 = _2177.x == 0u;
    float _2281;
    float _2283;
    float _2285;
    if (_2179)
    {
        _2281 = _2171;
        _2283 = _2172;
        _2285 = _2173;
    }
    else
    {
        uint _2289 = _2102 + 6u;
        float _2305 = (dot(vec3(cbLight._m0[_2102 + 2u].xyz), vec3(_654, _655, _656)) * 0.5) + 0.5;
        float _2306 = _2305 * _2305;
        float _4383 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2307 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2308 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
        _2281 = (((cbLight._m0[_2289].x * 0.3183098733425140380859375) * _2307) * _2308) + _2171;
        _2283 = (((cbLight._m0[_2289].y * 0.3183098733425140380859375) * _2307) * _2308) + _2172;
        _2285 = (((cbLight._m0[_2289].z * 0.3183098733425140380859375) * _2307) * _2308) + _2173;
    }
    bool _2288 = _2177.y == 0u;
    float _2343;
    float _2345;
    float _2347;
    if (_2288)
    {
        _2343 = _2281;
        _2345 = _2283;
        _2347 = _2285;
    }
    else
    {
        uint _2505 = _2102 + 7u;
        float _2521 = (dot(vec3(cbLight._m0[_2102 + 3u].xyz), vec3(_654, _655, _656)) * 0.5) + 0.5;
        float _2522 = _2521 * _2521;
        float _4399 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2523 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2524 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2343 = (((cbLight._m0[_2505].x * 0.3183098733425140380859375) * _2523) * _2524) + _2281;
        _2345 = (((cbLight._m0[_2505].y * 0.3183098733425140380859375) * _2523) * _2524) + _2283;
        _2347 = (((cbLight._m0[_2505].z * 0.3183098733425140380859375) * _2523) * _2524) + _2285;
    }
    uint _2350 = _2102 + 8u;
    float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2102].w)) * _657) * 0.949999988079071044921875);
    float _2364 = _2363 * _2363;
    float _2365 = cbLight._m0[_2102].x + _732;
    float _2366 = cbLight._m0[_2102].y + _733;
    float _2367 = cbLight._m0[_2102].z + _734;
    float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
    float _2372 = _2371 * _2365;
    float _2373 = _2371 * _2366;
    float _2374 = _2371 * _2367;
    float _2375 = dot(vec3(_654, _655, _656), vec3(cbLight._m0[_2102].xyz));
    float _4415 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2378 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _4426 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _2379 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _2380 = dot(vec3(_654, _655, _656), vec3(_2372, _2373, _2374));
    float _4437 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2383 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _2384 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_2372, _2373, _2374));
    float _4448 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2388 = _2364 * _2364;
    float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
    float _2403 = (exp2(log2(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2404 = 1.0 - _2364;
    float _2415 = (0.5 / (((_2379 * ((_2378 * _2404) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2404) + _2364) * _2378))) * _2378;
    float _4459 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2417 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
    uint _2431 = _2102 + 9u;
    float _2442 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2143].w)) * _657) * 0.949999988079071044921875);
    float _2443 = _2442 * _2442;
    float _2444 = cbLight._m0[_2143].x + _732;
    float _2445 = cbLight._m0[_2143].y + _733;
    float _2446 = cbLight._m0[_2143].z + _734;
    float _2450 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
    float _2451 = _2450 * _2444;
    float _2452 = _2450 * _2445;
    float _2453 = _2450 * _2446;
    float _2454 = dot(vec3(_654, _655, _656), vec3(cbLight._m0[_2143].xyz));
    float _4470 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2457 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2458 = dot(vec3(_654, _655, _656), vec3(_2451, _2452, _2453));
    float _4481 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2461 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _2462 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_2451, _2452, _2453));
    float _4492 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2466 = _2443 * _2443;
    float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
    float _2479 = (exp2(log2(1.0 - (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2480 = 1.0 - _2443;
    float _2490 = (0.5 / (((_2379 * ((_2457 * _2480) + _2443)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2480) + _2443) * _2457))) * _2457;
    float _4503 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2492 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
    float _2502 = (((_2479 * cbLight._m0[_2431].x) * _2492) * _2125) + ((((cbLight._m0[_2350].x * _2091) * _2403) * _2417) * _2139);
    float _2503 = (((_2479 * cbLight._m0[_2431].y) * _2492) * _2125) + ((((cbLight._m0[_2350].y * _2093) * _2403) * _2417) * _2139);
    float _2504 = (((_2479 * cbLight._m0[_2431].z) * _2492) * _2125) + ((((cbLight._m0[_2350].z * _2095) * _2403) * _2417) * _2139);
    float _2560;
    float _2562;
    float _2564;
    if (_2179)
    {
        _2560 = _2502;
        _2562 = _2503;
        _2564 = _2504;
    }
    else
    {
        uint _2566 = _2102 + 2u;
        uint _2570 = _2102 + 10u;
        float _2584 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2566].w)) * _657) * 0.949999988079071044921875);
        float _2585 = _2584 * _2584;
        float _2586 = cbLight._m0[_2566].x + _732;
        float _2587 = cbLight._m0[_2566].y + _733;
        float _2588 = cbLight._m0[_2566].z + _734;
        float _2592 = inversesqrt(dot(vec3(_2586, _2587, _2588), vec3(_2586, _2587, _2588)));
        float _2593 = _2592 * _2586;
        float _2594 = _2592 * _2587;
        float _2595 = _2592 * _2588;
        float _2596 = dot(vec3(_654, _655, _656), vec3(cbLight._m0[_2566].xyz));
        float _4514 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2599 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2600 = dot(vec3(_654, _655, _656), vec3(_2593, _2594, _2595));
        float _4525 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2603 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2604 = dot(vec3(cbLight._m0[_2566].xyz), vec3(_2593, _2594, _2595));
        float _4536 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2608 = _2585 * _2585;
        float _2612 = ((_2603 * _2603) * (_2608 + (-1.0))) + 1.0;
        float _2621 = (exp2(log2(1.0 - (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2622 = 1.0 - _2585;
        float _2632 = (0.5 / (((_2379 * ((_2599 * _2622) + _2585)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2622) + _2585) * _2599))) * _2599;
        float _4547 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2634 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2608 / ((_2612 * _2612) * 3.141590118408203125));
        float _2635 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
        _2560 = (((_2621 * cbLight._m0[_2570].x) * _2634) * _2635) + _2502;
        _2562 = (((_2621 * cbLight._m0[_2570].y) * _2634) * _2635) + _2503;
        _2564 = (((_2621 * cbLight._m0[_2570].z) * _2634) * _2635) + _2504;
    }
    float _2666;
    float _2668;
    float _2670;
    if (_2288)
    {
        _2666 = _2560;
        _2668 = _2562;
        _2670 = _2564;
    }
    else
    {
        uint _2677 = _2102 + 3u;
        uint _2681 = _2102 + 11u;
        float _2695 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2677].w)) * _657) * 0.949999988079071044921875);
        float _2696 = _2695 * _2695;
        float _2697 = cbLight._m0[_2677].x + _732;
        float _2698 = cbLight._m0[_2677].y + _733;
        float _2699 = cbLight._m0[_2677].z + _734;
        float _2703 = inversesqrt(dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699)));
        float _2704 = _2703 * _2697;
        float _2705 = _2703 * _2698;
        float _2706 = _2703 * _2699;
        float _2707 = dot(vec3(_654, _655, _656), vec3(cbLight._m0[_2677].xyz));
        float _4563 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2711 = dot(vec3(_654, _655, _656), vec3(_2704, _2705, _2706));
        float _4574 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2714 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2715 = dot(vec3(cbLight._m0[_2677].xyz), vec3(_2704, _2705, _2706));
        float _4585 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2719 = _2696 * _2696;
        float _2723 = ((_2714 * _2714) * (_2719 + (-1.0))) + 1.0;
        float _2732 = (exp2(log2(1.0 - (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2733 = 1.0 - _2696;
        float _2743 = (0.5 / (((_2379 * ((_2710 * _2733) + _2696)) + 9.9999999392252902907785028219223e-09) + (((_2379 * _2733) + _2696) * _2710))) * _2710;
        float _4596 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2745 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2719 / ((_2723 * _2723) * 3.141590118408203125));
        float _2746 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2666 = (((_2732 * cbLight._m0[_2681].x) * _2745) * _2746) + _2560;
        _2668 = (((_2732 * cbLight._m0[_2681].y) * _2745) * _2746) + _2562;
        _2670 = (((_2732 * cbLight._m0[_2681].z) * _2745) * _2746) + _2564;
    }
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    if (_2100.y == 0u)
    {
        uvec4 _2767 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2768 = _2767.x;
        uint _2779 = uint((float(_2767.y) * floor(float(uint(cbSceneParam._m0[85u].y * _741) / _2768))) + floor(float(uint(cbSceneParam._m0[85u].x * _740) / _2768)));
        float _2789 = (log2(_1878 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2790 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        uint _2793 = uint(isnan(14.0) ? _2790 : (isnan(_2790) ? 14.0 : min(_2790, 14.0)));
        uvec4 _2798 = texelFetch(g_lightClusterGridBuffer, int(((_2793 << 2u) + (_2779 << 6u)) >> 2u));
        uint _2799 = _2798.x;
        uint _2800 = _2767.z;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        if (((((1u << ((_2800 >> 4u) & 15u)) + 4294967295u) & _2799) == 0u) || ((_2800 & 240u) == 0u))
        {
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
        }
        else
        {
            float _2880;
            float _2882;
            float _2884;
            float _2886;
            float _2888;
            float _2890;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            uint _3029 = 0u;
            uint _3038;
            bool _3039;
            for (;;)
            {
                _3038 = texelFetch(g_lightClassification, int((((_2793 << 5u) + (_2779 << 9u)) + (_3029 << 2u)) >> 2u)).x;
                _3039 = _3038 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3039)
                {
                    frontier_phi_66_pred = _3028;
                    frontier_phi_66_pred_1 = _3027;
                    frontier_phi_66_pred_2 = _3026;
                    frontier_phi_66_pred_3 = _3025;
                    frontier_phi_66_pred_4 = _3024;
                    frontier_phi_66_pred_5 = _3023;
                }
                else
                {
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    uint _3153;
                    _3147 = _3023;
                    _3148 = _3024;
                    _3149 = _3025;
                    _3150 = _3026;
                    _3151 = _3027;
                    _3152 = _3028;
                    _3153 = _3038;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    for (;;)
                    {
                        uint _3157 = uint(findLSB(_3153)) + (_3029 << 5u);
                        uint _3154 = (_3153 + 4294967295u) & _3153;
                        uint _3159 = _3157 * 48u;
                        vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3159)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 3u)).x));
                        uint _3179 = (_3157 * 48u) + 4u;
                        vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3179)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 3u)).x));
                        uint _3198 = (_3157 * 48u) + 8u;
                        vec3 _3209 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x));
                        float _3213 = _3173.x - _1876;
                        float _3214 = _3173.y - _1877;
                        float _3215 = _3173.z - _1878;
                        float _3216 = dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215));
                        float _3219 = inversesqrt(_3216);
                        float _3220 = _3219 * _3213;
                        float _3221 = _3219 * _3214;
                        float _3222 = _3219 * _3215;
                        float _3223 = dot(vec3(_762, _765, _768), vec3(_3220, _3221, _3222));
                        float _3228 = 1.0 - (_3216 * _3173.w);
                        float _4622 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3229 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3230 = sqrt(_3216) * _3192.w;
                        float _3233 = 1.39999997615814208984375 / (_3230 + 1.39999997615814208984375);
                        float _3234 = _3233 * _3233;
                        float _3237 = ((1.0 - _3234) * _3223) + _3234;
                        float _3240 = _3230 * _3230;
                        float _3244 = ((isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0))) * _3229) / ((_3240 * 0.699999988079071044921875) + 1.0);
                        float _3248 = (-0.0) - _1876;
                        float _3249 = (-0.0) - _1877;
                        float _3250 = (-0.0) - _1878;
                        float _3254 = inversesqrt(dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250)));
                        float _3255 = _3254 * _3248;
                        float _3256 = _3254 * _3249;
                        float _3257 = _3254 * _3250;
                        float _3264 = exp2(log2(1.0 / ((_3240 * 3.5) + 5.0)) * 0.25);
                        float _3265 = 1.0 - _822;
                        float _3272 = sqrt(1.0 - ((1.0 - (_3265 * _3265)) * (1.0 - (_3264 * _3264))));
                        float _3273 = _3272 * _3272;
                        float _3274 = _3273 * _3273;
                        float _3275 = _3255 + _3220;
                        float _3276 = _3256 + _3221;
                        float _3277 = _3257 + _3222;
                        float _3281 = inversesqrt(dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277)));
                        float _3285 = dot(vec3(_762, _765, _768), vec3(_3255, _3256, _3257));
                        float _4638 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3288 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3289 = dot(vec3(_762, _765, _768), vec3(_3281 * _3275, _3281 * _3276, _3281 * _3277));
                        float _4649 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3292 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3296 = ((_3292 * _3292) * (_3274 + (-1.0))) + 1.0;
                        float _3297 = _3233 * _3273;
                        float _3298 = _3297 * _3297;
                        float _3301 = ((1.0 - _3298) * _3223) + _3298;
                        float _4660 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3302 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                        float _3303 = 1.0 - _3273;
                        float _3313 = (0.5 / (((_3302 * ((_3288 * _3303) + _3273)) + 9.9999999392252902907785028219223e-09) + (((_3302 * _3303) + _3273) * _3288))) * _3302;
                        float _4671 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3324 = (((_3274 * 3.1415927410125732421875) * (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) / ((_3296 * _3296) * ((_3240 * 2.1991131305694580078125) + 3.141590118408203125))) * _3229;
                        _3082 = (_3244 * _3192.x) + _3150;
                        _3083 = (_3244 * _3192.y) + _3151;
                        _3084 = (_3244 * _3192.z) + _3152;
                        _3079 = (_3324 * _3209.x) + _3147;
                        _3080 = (_3324 * _3209.y) + _3148;
                        _3081 = (_3324 * _3209.z) + _3149;
                        if (_3154 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3147 = _3079;
                            _3148 = _3080;
                            _3149 = _3081;
                            _3150 = _3082;
                            _3151 = _3083;
                            _3152 = _3084;
                            _3153 = _3154;
                        }
                    }
                    frontier_phi_66_pred = _3084;
                    frontier_phi_66_pred_1 = _3083;
                    frontier_phi_66_pred_2 = _3082;
                    frontier_phi_66_pred_3 = _3081;
                    frontier_phi_66_pred_4 = _3080;
                    frontier_phi_66_pred_5 = _3079;
                }
                _2890 = frontier_phi_66_pred;
                _2888 = frontier_phi_66_pred_1;
                _2886 = frontier_phi_66_pred_2;
                _2884 = frontier_phi_66_pred_3;
                _2882 = frontier_phi_66_pred_4;
                _2880 = frontier_phi_66_pred_5;
                uint _3030 = _3029 + 1u;
                if (_3030 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3023 = _2880;
                    _3024 = _2882;
                    _3025 = _2884;
                    _3026 = _2886;
                    _3027 = _2888;
                    _3028 = _2890;
                    _3029 = _3030;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
        }
        uvec4 _2893 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2894 = _2893.z;
        uint _2896 = (_2894 >> 8u) & 15u;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        if (((4294967295u << _2896) & _2799) == 0u)
        {
            _2991 = _2879;
            _2993 = _2881;
            _2995 = _2883;
            _2997 = _2885;
            _2999 = _2887;
            _3001 = _2889;
        }
        else
        {
            float _3016 = inversesqrt(dot(vec3(_1876, _1877, _1878), vec3(_1876, _1877, _1878)));
            float _3017 = _3016 * _1876;
            float _3018 = _3016 * _1877;
            float _3019 = _3016 * _1878;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2896 < ((_2894 >> 12u) & 15u))
            {
                float _2992;
                float _2994;
                float _2996;
                float _2998;
                float _3000;
                float _3002;
                float _3130 = _2879;
                float _3131 = _2881;
                float _3132 = _2883;
                float _3133 = _2885;
                float _3134 = _2887;
                float _3135 = _2889;
                uint _3136 = _2896;
                uint _3145;
                bool _3146;
                for (;;)
                {
                    _3145 = texelFetch(g_lightClassification, int((((_2793 << 5u) + (_2779 << 9u)) + (_3136 << 2u)) >> 2u)).x;
                    _3146 = _3145 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3146)
                    {
                        frontier_phi_72_pred = _3135;
                        frontier_phi_72_pred_1 = _3134;
                        frontier_phi_72_pred_2 = _3133;
                        frontier_phi_72_pred_3 = _3132;
                        frontier_phi_72_pred_4 = _3131;
                        frontier_phi_72_pred_5 = _3130;
                    }
                    else
                    {
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3342 = _3130;
                        float _3343 = _3131;
                        float _3344 = _3132;
                        float _3345 = _3133;
                        float _3346 = _3134;
                        float _3347 = _3135;
                        uint _3348 = _3145;
                        uint _3349;
                        vec4 _3374;
                        float _3375;
                        vec4 _3390;
                        vec3 _3402;
                        vec4 _3418;
                        vec4 _3433;
                        float _3479;
                        bool _3480;
                        for (;;)
                        {
                            uint _3359 = ((_3136 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3348));
                            _3349 = (_3348 + 4294967295u) & _3348;
                            uint _3361 = _3359 * 40u;
                            _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            _3375 = _3374.w;
                            uint _3377 = (_3359 * 40u) + 4u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3392 = (_3359 * 40u) + 8u;
                            _3402 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x));
                            uint _3405 = (_3359 * 40u) + 16u;
                            _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            uint _3420 = (_3359 * 40u) + 20u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            uint _3435 = (_3359 * 40u) + 24u;
                            vec4 _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3454 = (_3359 * 40u) + 28u;
                            vec4 _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            _3479 = fma(_1878, _3467.z, fma(_1877, _3467.y, _3467.x * _1876)) + _3467.w;
                            _3480 = !((fma(_1878, _3448.z, fma(_1877, _3448.y, _3448.x * _1876)) + _3448.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3480)
                            {
                                float _3507 = _3374.x - _1876;
                                float _3508 = _3374.y - _1877;
                                float _3509 = _3374.z - _1878;
                                float _3510 = dot(vec3(_3507, _3508, _3509), vec3(_3507, _3508, _3509));
                                float _3513 = inversesqrt(_3510);
                                float _3514 = _3513 * _3507;
                                float _3515 = _3513 * _3508;
                                float _3516 = _3513 * _3509;
                                float _3520 = 1.0 - (_3510 / (_3375 * _3375));
                                float _4682 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3521 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3525 = sqrt(_3510) * _3390.w;
                                float _3527 = 1.39999997615814208984375 / (_3525 + 1.39999997615814208984375);
                                float _3528 = _3527 * _3527;
                                float _3531 = ((1.0 - _3528) * dot(vec3(_3514, _3515, _3516), vec3(_762, _765, _768))) + _3528;
                                float _3534 = _3525 * _3525;
                                float _3538 = (fma(_1878, _3418.z, fma(_1877, _3418.y, _3418.x * _1876)) + _3418.w) / _3479;
                                float _3539 = (fma(_1878, _3433.z, fma(_1877, _3433.y, _3433.x * _1876)) + _3433.w) / _3479;
                                float _3543 = 1.0 - dot(vec2(_3538, _3539), vec2(_3538, _3539));
                                float _4698 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3544 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3545 = _3544 * (((isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0))) * _3521) / ((_3534 * 0.699999988079071044921875) + 1.0));
                                float _3557 = exp2(log2(1.0 / ((_3534 * 3.5) + 5.0)) * 0.25);
                                float _3558 = 1.0 - _822;
                                float _3565 = sqrt(1.0 - ((1.0 - (_3558 * _3558)) * (1.0 - (_3557 * _3557))));
                                float _3566 = _3565 * _3565;
                                float _3567 = _3566 * _3566;
                                float _3568 = _3514 - _3017;
                                float _3569 = _3515 - _3018;
                                float _3570 = _3516 - _3019;
                                float _3574 = inversesqrt(dot(vec3(_3568, _3569, _3570), vec3(_3568, _3569, _3570)));
                                float _3578 = dot(vec3(_762, _765, _768), vec3((-0.0) - _3017, (-0.0) - _3018, (-0.0) - _3019));
                                float _4709 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3581 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3582 = dot(vec3(_762, _765, _768), vec3(_3574 * _3568, _3574 * _3569, _3574 * _3570));
                                float _4720 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3585 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3589 = ((_3585 * _3585) * (_3567 + (-1.0))) + 1.0;
                                float _3590 = _3527 * _3566;
                                float _3591 = _3590 * _3590;
                                float _3597 = ((1.0 - _3591) * dot(vec3(_762, _765, _768), vec3(_3514, _3515, _3516))) + _3591;
                                float _4731 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3598 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3599 = 1.0 - _3566;
                                float _3609 = (0.5 / (((_3598 * ((_3581 * _3599) + _3566)) + 9.9999999392252902907785028219223e-09) + (((_3598 * _3599) + _3566) * _3581))) * _3598;
                                float _4742 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3619 = (_3544 * _3521) * (((_3567 * 3.1415927410125732421875) * (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) / ((_3589 * _3589) * ((_3534 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3545 * _3390.y;
                                frontier_phi_78_pred_1 = _3545 * _3390.x;
                                frontier_phi_78_pred_2 = _3619 * _3402.z;
                                frontier_phi_78_pred_3 = _3619 * _3402.y;
                                frontier_phi_78_pred_4 = _3619 * _3402.x;
                                frontier_phi_78_pred_5 = _3545 * _3390.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3627 = frontier_phi_78_pred;
                            _3626 = frontier_phi_78_pred_1;
                            _3625 = frontier_phi_78_pred_2;
                            _3624 = frontier_phi_78_pred_3;
                            _3623 = frontier_phi_78_pred_4;
                            _3628 = frontier_phi_78_pred_5;
                            _3332 = _3626 + _3345;
                            _3333 = _3627 + _3346;
                            _3334 = _3628 + _3347;
                            _3329 = _3623 + _3342;
                            _3330 = _3624 + _3343;
                            _3331 = _3625 + _3344;
                            if (_3349 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3349;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3334;
                        frontier_phi_72_pred_1 = _3333;
                        frontier_phi_72_pred_2 = _3332;
                        frontier_phi_72_pred_3 = _3331;
                        frontier_phi_72_pred_4 = _3330;
                        frontier_phi_72_pred_5 = _3329;
                    }
                    _3002 = frontier_phi_72_pred;
                    _3000 = frontier_phi_72_pred_1;
                    _2998 = frontier_phi_72_pred_2;
                    _2996 = frontier_phi_72_pred_3;
                    _2994 = frontier_phi_72_pred_4;
                    _2992 = frontier_phi_72_pred_5;
                    uint _3137 = _3136 + 1u;
                    if (_3137 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3130 = _2992;
                        _3131 = _2994;
                        _3132 = _2996;
                        _3133 = _2998;
                        _3134 = _3000;
                        _3135 = _3002;
                        _3136 = _3137;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3002;
                frontier_phi_60_61_ladder_1 = _3000;
                frontier_phi_60_61_ladder_2 = _2996;
                frontier_phi_60_61_ladder_3 = _2994;
                frontier_phi_60_61_ladder_4 = _2992;
                frontier_phi_60_61_ladder_5 = _2998;
            }
            else
            {
                frontier_phi_60_61_ladder = _2889;
                frontier_phi_60_61_ladder_1 = _2887;
                frontier_phi_60_61_ladder_2 = _2883;
                frontier_phi_60_61_ladder_3 = _2881;
                frontier_phi_60_61_ladder_4 = _2879;
                frontier_phi_60_61_ladder_5 = _2885;
            }
            _2991 = frontier_phi_60_61_ladder_4;
            _2993 = frontier_phi_60_61_ladder_3;
            _2995 = frontier_phi_60_61_ladder_2;
            _2997 = frontier_phi_60_61_ladder_5;
            _2999 = frontier_phi_60_61_ladder_1;
            _3001 = frontier_phi_60_61_ladder;
        }
        float _3006 = isnan(1.0) ? _806 : (isnan(_806) ? 1.0 : min(_806, 1.0));
        _2812 = (_3006 * _2997) + _2343;
        _2814 = (_3006 * _2999) + _2345;
        _2816 = (_3006 * _3001) + _2347;
        _2818 = ((_2991 * 0.039999999105930328369140625) * _3006) + _2666;
        _2820 = ((_2993 * 0.039999999105930328369140625) * _3006) + _2668;
        _2822 = ((_2995 * 0.039999999105930328369140625) * _3006) + _2670;
    }
    else
    {
        _2812 = _2343;
        _2814 = _2345;
        _2816 = _2347;
        _2818 = _2666;
        _2820 = _2668;
        _2822 = _2670;
    }
    float _4758 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4769 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _4780 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    uint _2842 = _245 + 6u;
    float _2850 = _740 / cbSceneParam._m0[86u].x;
    float _2851 = _741 / cbSceneParam._m0[86u].y;
    vec4 _2865 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2850, _2851, (log2((isnan(cbSceneParam._m0[77u].w) ? _675 : (isnan(_675) ? cbSceneParam._m0[77u].w : min(_675, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2867 = _2865.x;
    float _2868 = _2865.y;
    float _2869 = _2865.z;
    float _2870 = _2865.w;
    float _2941;
    float _2943;
    float _2945;
    float _2947;
    if (_675 > cbSceneParam._m0[78u].w)
    {
        float _2904 = isnan(_675) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _675 : min(cbSceneParam._m0[80u].w, _675));
        float _2905 = _2904 / _675;
        float _2916 = _2905 * _725;
        float _2917 = _726 * _2905;
        float _2918 = (-0.0) - _2917;
        float _2919 = _2905 * _727;
        float _2921 = (cbSceneParam._m0[77u].w * _2918) / _2904;
        float _2922 = _2921 + cbSceneParam._m0[79u].w;
        float _2923 = cbSceneParam._m0[79u].w - _2917;
        float _2929 = sqrt(((_2916 * _2916) + (_2917 * _2917)) + (_2919 * _2919));
        float _2932 = (1.0 - (cbSceneParam._m0[77u].w / _2904)) * _2929;
        float _2937 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2939 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3092;
        if (abs((_2918 - _2921) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3092 = ((((_2922 > 0.0) ? exp2(_2937 * _2922) : (2.0 - exp2(_2939 * _2922))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2932;
        }
        else
        {
            float _3052 = 1.0 / cbSceneParam._m0[80u].x;
            float _3053 = isnan(_2923) ? _2922 : (isnan(_2922) ? _2923 : max(_2922, _2923));
            float _3054 = isnan(_2923) ? _2922 : (isnan(_2922) ? _2923 : min(_2922, _2923));
            float _3063 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : min(_3053, 0.0));
            float _3064 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : min(_3054, 0.0));
            _3092 = ((abs(_2929 / _2918) * cbSceneParam._m0[80u].y) * ((((_3063 - _3064) * 2.0) - ((exp2(_2937 * (isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0)))) - exp2(_2937 * (isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0))))) * _3052)) - ((exp2(_2939 * _3063) - exp2(_2939 * _3064)) * _3052))) + (_2932 * cbSceneParam._m0[80u].z);
        }
        vec4 _3094 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2850, _2851, 1.0), 0.0);
        float _3103 = exp2((_3092 * (-1.44269502162933349609375)) * (1.0 - _3094.w));
        float _3104 = log2(_3103);
        float _3120 = log2(_2870);
        _2941 = (exp2(_3120 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3104 * cbSceneParam._m0[78u].x)) * _3094.x) / cbSceneParam._m0[78u].x)) + _2867;
        _2943 = (exp2(_3120 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3104 * cbSceneParam._m0[78u].y)) * _3094.y) / cbSceneParam._m0[78u].y)) + _2868;
        _2945 = (exp2(_3120 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3104 * cbSceneParam._m0[78u].z)) * _3094.z) / cbSceneParam._m0[78u].z)) + _2869;
        _2947 = _3103 * _2870;
    }
    else
    {
        _2941 = _2867;
        _2943 = _2868;
        _2945 = _2869;
        _2947 = _2870;
    }
    float _2959 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2960 = _2959 == 3.0;
    float _2961 = log2(_2947);
    float _2968 = exp2(_2961 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2812 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _806))) + ((_2818 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1611)) * cbPerFrame._m0[3u].x));
    float _2969 = exp2(_2961 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2814 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _806))) + ((_2820 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1611)) * cbPerFrame._m0[3u].x));
    float _2970 = exp2(_2961 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2816 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _806))) + ((_2822 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1611)) * cbPerFrame._m0[3u].x));
    float _2979 = (_2959 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2979 * (_2960 ? _2968 : (_2968 + (cbSceneParam._m0[72u].w * _2941)));
    SV_Target.y = _2979 * (_2960 ? _2969 : (_2969 + (cbSceneParam._m0[72u].w * _2943)));
    SV_Target.z = _2979 * (_2960 ? _2970 : (_2970 + (cbSceneParam._m0[72u].w * _2945)));
    SV_Target.w = cbInstanceData._m0[_2842].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2842].w;
}


