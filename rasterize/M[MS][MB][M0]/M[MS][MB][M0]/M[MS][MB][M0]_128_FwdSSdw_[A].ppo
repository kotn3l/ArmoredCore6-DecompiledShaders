#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1202;
float _3584;
float _3585;
float _3586;
float _3587;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _360 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _360) * cbMtdParam._m0[24u].x) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3596 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _385 = (_378 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _386 = (_378 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _387 = (_378 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _406 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _262) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _426 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _451 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _468 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _470 = _468.x;
    float _471 = _468.y;
    float _472 = _468.z;
    float _481 = ((_451.z - _472) * _378) + _472;
    float _484 = ((((_451.x - _470) * _378) + _470) * 2.0) + (-1.0);
    float _485 = ((((_451.y - _471) * _378) + _471) * 2.0) + (-1.0);
    float _486 = dot(vec2(_484, _485), vec2(_484, _485));
    float _3607 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _491 = sqrt(1.0 - (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))));
    vec4 _507 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _532 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _534 = _532.x;
    float _535 = 1.0 - _534;
    float _548 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_534 - _535) * cbMtdParam._m0[24u].z) + _535) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3618 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _549 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _556 = (_549 * ((_406.x * cbMtdParam._m0[18u].x) - _385)) + _385;
    float _557 = (_549 * ((_406.y * cbMtdParam._m0[18u].y) - _386)) + _386;
    float _558 = (_549 * ((_406.z * cbMtdParam._m0[18u].z) - _387)) + _387;
    float _563 = (((_426.z - _481) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _481;
    float _567 = ((_507.z - _563) * cbMtdParam._m0[19u].w) + _563;
    vec4 _580 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _587 = (_580.x * 2.0) + (-1.0);
    float _588 = (_580.y * 2.0) + (-1.0);
    float _589 = dot(vec2(_587, _588), vec2(_587, _588));
    float _3629 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _597 = (_549 * (_580.z - _567)) + _567;
    float _606 = (_484 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_426.x * 2.0) + (-1.0)))) + (((_507.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _607 = (_485 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_426.y * 2.0) + (-1.0)))) + (((_507.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _619 = (((_587 - _606) + (cbMtdParam._m0[21u].x * _606)) * _549) + _606;
    float _620 = (((_588 - _607) + (cbMtdParam._m0[21u].x * _607)) * _549) + _607;
    float _621 = (_549 * (sqrt(1.0 - (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0)))) - _491)) + _491;
    float _626 = cbMtdParam._m0[22u].x + _507.w;
    float _629 = fma(_621, _229 * NORMAL.x, fma(_620, _236 * TANGENT.x, (_222 * _214) * _619));
    float _632 = fma(_621, _229 * NORMAL.y, fma(_620, _236 * TANGENT.y, (_222 * _215) * _619));
    float _635 = fma(_621, _229 * NORMAL.z, fma(_620, _236 * TANGENT.z, (_222 * _216) * _619));
    float _639 = inversesqrt(dot(vec3(_629, _632, _635), vec3(_629, _632, _635)));
    float _640 = _639 * _629;
    float _641 = _639 * _632;
    float _642 = _639 * _635;
    float _3640 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _643 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _3651 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _3662 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _3673 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _3684 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _661 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _703 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _713 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _703);
    float _714 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _703);
    float _715 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _703);
    float _719 = inversesqrt(dot(vec3(_713, _714, _715), vec3(_713, _714, _715)));
    float _720 = _713 * _719;
    float _721 = _714 * _719;
    float _722 = _715 * _719;
    vec4 _727 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _729 = _727.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _883 = sqrt(((_713 * _713) + (_714 * _714)) + (_715 * _715));
        float _889 = (cbMatDynParam._m0[5u].x * _883) + cbMatDynParam._m0[5u].y;
        float _3695 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _894 = (cbMatDynParam._m0[5u].z * _883) + cbMatDynParam._m0[5u].w;
        float _3706 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) - _890)) + _890) < ((_729 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _740 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _741 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _759 = fma(_642, cbSceneParam._m0[5u].z, fma(_641, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _640));
    float _762 = fma(_642, cbSceneParam._m0[6u].z, fma(_641, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _640));
    float _765 = fma(_642, cbSceneParam._m0[7u].z, fma(_641, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _640));
    uint _778 = _242 + 9u;
    uint _779 = _778 + uint(cbMatDynParam._m0[0u].w);
    float _785 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) * cbInstanceData._m0[_779].x;
    float _786 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0)))) * cbInstanceData._m0[_779].y;
    float _787 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0)))) * cbInstanceData._m0[_779].z;
    float _3717 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _3728 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    vec4 _799 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _740, cbSceneParam._m0[86u].y * _741));
    float _803 = ((isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * TEXCOORD_5.w) * _799.x;
    float _804 = dot(vec3(_640, _641, _642), vec3(_720, _721, _722));
    float _807 = _804 * 2.0;
    float _811 = (_807 * _640) - _720;
    float _812 = (_807 * _641) - _721;
    float _813 = (_807 * _642) - _722;
    float _817 = abs(dot(vec3(_720, _721, _722), vec3(_640, _641, _642)));
    float _3750 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _819 = sqrt(_643);
    float _832 = exp2((_819 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_819 * 3.0));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1201;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _926 = fma(_872, cbModelParam._m0[26u].z, fma(_868, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _864));
        float _930 = fma(_872, cbModelParam._m0[27u].z, fma(_868, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _864));
        float _934 = fma(_872, cbModelParam._m0[28u].z, fma(_868, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _864));
        float _959 = _864 + _640;
        float _960 = _868 + _641;
        float _961 = _872 + _642;
        float _971 = fma(_961, cbModelParam._m0[26u].z, fma(_960, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _959)) - _926;
        float _972 = fma(_961, cbModelParam._m0[27u].z, fma(_960, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _959)) - _930;
        float _973 = fma(_961, cbModelParam._m0[28u].z, fma(_960, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _959)) - _934;
        float _977 = inversesqrt(dot(vec3(_971, _972, _973), vec3(_971, _972, _973)));
        float _990 = ((_977 * _971) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_926 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _991 = ((_977 * _972) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_930 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _992 = ((_977 * _973) / cbModelParam._m0[34u].z) + ((((((_934 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_990, _991, _992), 0.0);
        float _1029 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_995.x + (-0.5));
        float _1031 = _1029 * (_995.y + (-0.5));
        float _1032 = _1029 * (_995.z + (-0.5));
        float _1039 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1002.x + (-0.5));
        float _1041 = _1039 * (_1002.y + (-0.5));
        float _1042 = _1039 * (_1002.z + (-0.5));
        float _1049 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1009.x + (-0.5));
        float _1051 = _1049 * (_1009.y + (-0.5));
        float _1052 = _1049 * (_1009.z + (-0.5));
        float _1059 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1016.x + (-0.5));
        float _1061 = _1059 * (_1016.y + (-0.5));
        float _1062 = _1059 * (_1016.z + (-0.5));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = _1030 * 0.5;
        float _1067 = _1040 * 0.5;
        float _1068 = _1050 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1083 = (dot(vec3(_640, _641, _642), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1093 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3798 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1095 + 1.0))) + _1100) * _1063;
        float _1110 = _1031 * 0.5;
        float _1111 = _1041 * 0.5;
        float _1112 = _1051 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_640, _641, _642), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3831 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1137 + 1.0))) + _1142) * _1064;
        float _1152 = _1032 * 0.5;
        float _1153 = _1042 * 0.5;
        float _1154 = _1052 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_640, _641, _642), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3864 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1179 + 1.0))) + _1184) * _1065;
        _1201 = _1032;
        _1203 = _1031;
        _1204 = _1030;
        _1205 = _1042;
        _1206 = _1041;
        _1207 = _1040;
        _1208 = _1052;
        _1209 = _1051;
        _1210 = _1050;
        _1211 = _1065;
        _1212 = _1064;
        _1213 = _1063;
        _1214 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1215 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1216 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
    }
    else
    {
        _1201 = _1202;
        _1203 = _1202;
        _1204 = _1202;
        _1205 = _1202;
        _1206 = _1202;
        _1207 = _1202;
        _1208 = _1202;
        _1209 = _1202;
        _1210 = _1202;
        _1211 = _1202;
        _1212 = _1202;
        _1213 = _1202;
        _1214 = 0.0;
        _1215 = 0.0;
        _1216 = 0.0;
    }
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1244 = fma(_872, cbModelParam._m0[30u].z, fma(_868, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _864));
        float _1248 = fma(_872, cbModelParam._m0[31u].z, fma(_868, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _864));
        float _1252 = fma(_872, cbModelParam._m0[32u].z, fma(_868, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _864));
        float _1275 = _864 + _640;
        float _1276 = _868 + _641;
        float _1277 = _872 + _642;
        float _1287 = fma(_1277, cbModelParam._m0[30u].z, fma(_1276, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1275)) - _1244;
        float _1288 = fma(_1277, cbModelParam._m0[31u].z, fma(_1276, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1275)) - _1248;
        float _1289 = fma(_1277, cbModelParam._m0[32u].z, fma(_1276, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1275)) - _1252;
        float _1293 = inversesqrt(dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289)));
        float _1306 = ((_1293 * _1287) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1244 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1307 = ((_1293 * _1288) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1248 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1308 = ((_1293 * _1289) / cbModelParam._m0[35u].z) + ((((((_1252 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        float _1343 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1310.x + (-0.5));
        float _1345 = _1343 * (_1310.y + (-0.5));
        float _1346 = _1343 * (_1310.z + (-0.5));
        float _1353 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1317.x + (-0.5));
        float _1355 = _1353 * (_1317.y + (-0.5));
        float _1356 = _1353 * (_1317.z + (-0.5));
        float _1363 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1324.x + (-0.5));
        float _1365 = _1363 * (_1324.y + (-0.5));
        float _1366 = _1363 * (_1324.z + (-0.5));
        float _1373 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1331.x + (-0.5));
        float _1375 = _1373 * (_1331.y + (-0.5));
        float _1376 = _1373 * (_1331.z + (-0.5));
        float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = _1344 * 0.5;
        float _1381 = _1354 * 0.5;
        float _1382 = _1364 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_640, _641, _642), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1377 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _3927 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1407 + 1.0))) + _1412) * _1377;
        float _1422 = _1345 * 0.5;
        float _1423 = _1355 * 0.5;
        float _1424 = _1365 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1438 = (dot(vec3(_640, _641, _642), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1447 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _3960 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1449 + 1.0))) + _1454) * _1378;
        float _1464 = _1346 * 0.5;
        float _1465 = _1356 * 0.5;
        float _1466 = _1366 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_640, _641, _642), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _3993 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1491 + 1.0))) + _1496) * _1379;
        _1513 = _1346;
        _1514 = _1345;
        _1515 = _1344;
        _1516 = _1356;
        _1517 = _1355;
        _1518 = _1354;
        _1519 = _1366;
        _1520 = _1365;
        _1521 = _1364;
        _1522 = _1379;
        _1523 = _1378;
        _1524 = _1377;
        _1525 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
        _1526 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
        _1527 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
    }
    else
    {
        _1513 = _1202;
        _1514 = _1202;
        _1515 = _1202;
        _1516 = _1202;
        _1517 = _1202;
        _1518 = _1202;
        _1519 = _1202;
        _1520 = _1202;
        _1521 = _1202;
        _1522 = _1202;
        _1523 = _1202;
        _1524 = _1202;
        _1525 = 0.0;
        _1526 = 0.0;
        _1527 = 0.0;
    }
    float _1537 = (cbModelParam._m0[1u].x * (_1525 - _1214)) + _1214;
    float _1538 = (cbModelParam._m0[1u].x * (_1526 - _1215)) + _1215;
    float _1539 = (cbModelParam._m0[1u].x * (_1527 - _1216)) + _1216;
    float _1560 = fma(_1539, cbSceneParam._m0[89u].z, fma(_1538, cbSceneParam._m0[89u].y, _1537 * cbSceneParam._m0[89u].x));
    float _1563 = fma(_1539, cbSceneParam._m0[90u].z, fma(_1538, cbSceneParam._m0[90u].y, _1537 * cbSceneParam._m0[90u].x));
    float _1566 = fma(_1539, cbSceneParam._m0[91u].z, fma(_1538, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1537));
    float _1581 = _811 * 0.5;
    float _1582 = _812 * 0.5;
    float _1583 = _813 * 0.5;
    float _1584 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1515, _1518, _1521, _1524));
    float _1587 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1514, _1517, _1520, _1523));
    float _1590 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1513, _1516, _1519, _1522));
    float _1624;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1597 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1201, _1205, _1208, _1211));
        float _1601 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1203, _1206, _1209, _1212));
        float _1605 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1204, _1207, _1210, _1213));
        float _1612 = dot(vec4(cbModelParam._m0[39u]), vec4(_1581, _1582, _1583, 1.0));
        _1624 = dot(vec3(isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1612) ? 0.0 : (isnan(0.0) ? _1612 : max(0.0, _1612))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1624 = 1.0;
    }
    float _1635;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1626 = dot(vec4(cbModelParam._m0[40u]), vec4(_1581, _1582, _1583, 1.0));
        _1635 = dot(vec3(isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1626) ? 0.0 : (isnan(0.0) ? _1626 : max(0.0, _1626))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1635 = 1.0;
    }
    float _1639 = (_1635 * cbModelParam._m0[1u].x) + (_1624 * (1.0 - cbModelParam._m0[1u].x));
    float _1649 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _643);
    float _1650 = isnan(_1649) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1649 : min(cbModelParam._m0[25u].z, _1649));
    float _1730;
    float _1732;
    float _1734;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1697 = fma(_872, cbModelParam._m0[13u].z, fma(_868, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _864)) + cbModelParam._m0[13u].w;
        float _1701 = fma(_872, cbModelParam._m0[14u].z, fma(_868, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _864)) + cbModelParam._m0[14u].w;
        float _1705 = fma(_872, cbModelParam._m0[15u].z, fma(_868, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _864)) + cbModelParam._m0[15u].w;
        float _1708 = fma(_813, cbModelParam._m0[13u].z, fma(_812, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _811));
        float _1711 = fma(_813, cbModelParam._m0[14u].z, fma(_812, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _811));
        float _1714 = fma(_813, cbModelParam._m0[15u].z, fma(_812, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _811));
        float _1742;
        if (_1708 > 0.0)
        {
            _1742 = abs((1.0 - _1697) / _1708);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1697 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1742 = frontier_phi_17_15_ladder;
        }
        float _1963;
        if (_1711 > 0.0)
        {
            _1963 = abs((1.0 - _1701) / _1711);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1701 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1963 = frontier_phi_26_22_ladder;
        }
        float _2209;
        if (_1714 > 0.0)
        {
            _2209 = abs((1.0 - _1705) / _1714);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1705 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2209 = frontier_phi_38_33_ladder;
        }
        float _2211 = isnan(_1963) ? _1742 : (isnan(_1742) ? _1963 : min(_1742, _1963));
        float _2212 = isnan(_2209) ? _2211 : (isnan(_2211) ? _2209 : min(_2211, _2209));
        float _2216 = (_2212 * _1708) + _1697;
        float _2217 = (_2212 * _1711) + _1701;
        float _2218 = (_2212 * _1714) + _1705;
        float _2219 = _2212 * 9.9999997473787516355514526367188e-05;
        float _2221 = (-1.0) - _2219;
        float _2223 = _2219 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2218 > _2223) || ((_2218 < _2221) || ((_2217 > _2223) || ((_2217 < _2221) || ((_2216 < _2221) || (_2216 > _2223))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2342 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2218, cbModelParam._m0[9u].z, fma(_2217, cbModelParam._m0[9u].y, _2216 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2218, cbModelParam._m0[10u].z, fma(_2217, cbModelParam._m0[10u].y, _2216 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2218, cbModelParam._m0[11u].z, fma(_2217, cbModelParam._m0[11u].y, _2216 * cbModelParam._m0[11u].x))), _1650);
            frontier_phi_16_38_ladder = _2342.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2342.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2342.x * cbModelParam._m0[1u].y;
        }
        _1730 = frontier_phi_16_38_ladder_2;
        _1732 = frontier_phi_16_38_ladder_1;
        _1734 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1718 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_811, _812, _813), _1650);
        _1730 = _1718.x * cbModelParam._m0[1u].y;
        _1732 = _1718.y * cbModelParam._m0[1u].y;
        _1734 = _1718.z * cbModelParam._m0[1u].y;
    }
    float _1738 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _643);
    float _1739 = isnan(_1738) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1738 : min(cbModelParam._m0[25u].w, _1738));
    float _1828;
    float _1830;
    float _1832;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1792 = fma(_872, cbModelParam._m0[21u].z, fma(_868, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _864)) + cbModelParam._m0[21u].w;
        float _1796 = fma(_872, cbModelParam._m0[22u].z, fma(_868, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _864)) + cbModelParam._m0[22u].w;
        float _1800 = fma(_872, cbModelParam._m0[23u].z, fma(_868, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _864)) + cbModelParam._m0[23u].w;
        float _1803 = fma(_813, cbModelParam._m0[21u].z, fma(_812, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _811));
        float _1806 = fma(_813, cbModelParam._m0[22u].z, fma(_812, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _811));
        float _1809 = fma(_813, cbModelParam._m0[23u].z, fma(_812, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _811));
        float _1968;
        if (_1803 > 0.0)
        {
            _1968 = abs((1.0 - _1792) / _1803);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1792 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1968 = frontier_phi_28_24_ladder;
        }
        float _2236;
        if (_1806 > 0.0)
        {
            _2236 = abs((1.0 - _1796) / _1806);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1796 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2236 = frontier_phi_40_35_ladder;
        }
        float _2441;
        if (_1809 > 0.0)
        {
            _2441 = abs((1.0 - _1800) / _1809);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1800 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2441 = frontier_phi_49_46_ladder;
        }
        float _2443 = isnan(_2236) ? _1968 : (isnan(_1968) ? _2236 : min(_1968, _2236));
        float _2444 = isnan(_2441) ? _2443 : (isnan(_2443) ? _2441 : min(_2443, _2441));
        float _2448 = (_2444 * _1803) + _1792;
        float _2449 = (_2444 * _1806) + _1796;
        float _2450 = (_2444 * _1809) + _1800;
        float _2451 = _2444 * 9.9999997473787516355514526367188e-05;
        float _2452 = (-1.0) - _2451;
        float _2454 = _2451 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2450 > _2454) || ((_2450 < _2452) || ((_2449 > _2454) || ((_2449 < _2452) || ((_2448 < _2452) || (_2448 > _2454))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2649 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2450, cbModelParam._m0[17u].z, fma(_2449, cbModelParam._m0[17u].y, _2448 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2450, cbModelParam._m0[18u].z, fma(_2449, cbModelParam._m0[18u].y, _2448 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2450, cbModelParam._m0[19u].z, fma(_2449, cbModelParam._m0[19u].y, _2448 * cbModelParam._m0[19u].x))), _1739);
            frontier_phi_25_49_ladder = _2649.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2649.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2649.x * cbModelParam._m0[1u].z;
        }
        _1828 = frontier_phi_25_49_ladder_2;
        _1830 = frontier_phi_25_49_ladder_1;
        _1832 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1812 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_811, _812, _813), _1739);
        _1828 = _1812.x * cbModelParam._m0[1u].z;
        _1830 = _1812.y * cbModelParam._m0[1u].z;
        _1832 = _1812.z * cbModelParam._m0[1u].z;
    }
    float _1844 = ((((1.0 - _832) * ((_819 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_832 * _819)) * _803;
    float _1845 = _1844 * ((cbModelParam._m0[1u].w * (_1828 - _1730)) + _1730);
    float _1846 = _1844 * ((cbModelParam._m0[1u].w * (_1830 - _1732)) + _1732);
    float _1847 = _1844 * ((cbModelParam._m0[1u].w * (_1832 - _1734)) + _1734);
    float _1850 = fma(_1847, cbSceneParam._m0[89u].z, fma(_1846, cbSceneParam._m0[89u].y, _1845 * cbSceneParam._m0[89u].x));
    float _1853 = fma(_1847, cbSceneParam._m0[90u].z, fma(_1846, cbSceneParam._m0[90u].y, _1845 * cbSceneParam._m0[90u].x));
    float _1856 = fma(_1847, cbSceneParam._m0[91u].z, fma(_1846, cbSceneParam._m0[91u].y, _1845 * cbSceneParam._m0[91u].x));
    vec4 _1864 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_740, _741));
    float _1866 = _1864.w;
    float _1878 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1866);
    float _1879 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1866);
    float _1880 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1866);
    uvec4 _1884 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _1886 = _1884.x * 14u;
    uint _1887 = _1886 + 13u;
    float _1894 = _803 + (-1.0);
    float _1899 = (cbLight._m0[_1887].x * _1894) + 1.0;
    float _1900 = (cbLight._m0[_1887].y * _1894) + 1.0;
    float _1901 = (cbLight._m0[_1887].z * _1894) + 1.0;
    float _1902 = (cbLight._m0[_1887].w * _1894) + 1.0;
    uint _1903 = _1886 + 5u;
    float _1909 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
    uint _1913 = _1886 + 4u;
    float _1922 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
    uint _1926 = _1886 | 1u;
    float _1937 = dot(vec3(cbLight._m0[_1886].xyz), vec3(_640, _641, _642));
    float _1940 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_640, _641, _642));
    float _4129 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _4140 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1945 = (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * 0.3183098733425140380859375;
    float _1947 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * 0.3183098733425140380859375;
    float _1954 = ((cbLight._m0[_1903].x * _1909) * _1947) + (((cbLight._m0[_1913].x * _1878) * _1922) * _1945);
    float _1955 = ((_1909 * cbLight._m0[_1903].y) * _1947) + (((cbLight._m0[_1913].y * _1879) * _1922) * _1945);
    float _1956 = ((_1909 * cbLight._m0[_1903].z) * _1947) + (((cbLight._m0[_1913].z * _1880) * _1922) * _1945);
    uvec4 _1960 = floatBitsToUint(cbLight._m0[_1886 + 12u]);
    bool _1962 = _1960.x == 0u;
    float _1973;
    float _1975;
    float _1977;
    if (_1962)
    {
        _1973 = _1954;
        _1975 = _1955;
        _1977 = _1956;
    }
    else
    {
        uint _1981 = _1886 + 6u;
        float _1997 = (dot(vec3(cbLight._m0[_1886 + 2u].xyz), vec3(_640, _641, _642)) * 0.5) + 0.5;
        float _1998 = _1997 * _1997;
        float _4151 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _1999 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _2000 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
        _1973 = (((cbLight._m0[_1981].x * 0.3183098733425140380859375) * _1999) * _2000) + _1954;
        _1975 = (((cbLight._m0[_1981].y * 0.3183098733425140380859375) * _1999) * _2000) + _1955;
        _1977 = (((cbLight._m0[_1981].z * 0.3183098733425140380859375) * _1999) * _2000) + _1956;
    }
    bool _1980 = _1960.y == 0u;
    float _2018;
    float _2020;
    float _2022;
    if (_1980)
    {
        _2018 = _1973;
        _2020 = _1975;
        _2022 = _1977;
    }
    else
    {
        uint _2180 = _1886 + 7u;
        float _2196 = (dot(vec3(cbLight._m0[_1886 + 3u].xyz), vec3(_640, _641, _642)) * 0.5) + 0.5;
        float _2197 = _2196 * _2196;
        float _4167 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2198 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _2199 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
        _2018 = (((cbLight._m0[_2180].x * 0.3183098733425140380859375) * _2198) * _2199) + _1973;
        _2020 = (((cbLight._m0[_2180].y * 0.3183098733425140380859375) * _2198) * _2199) + _1975;
        _2022 = (((cbLight._m0[_2180].z * 0.3183098733425140380859375) * _2198) * _2199) + _1977;
    }
    uint _2025 = _1886 + 8u;
    float _2038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1886].w)) * _643) * 0.949999988079071044921875);
    float _2039 = _2038 * _2038;
    float _2040 = cbLight._m0[_1886].x + _720;
    float _2041 = cbLight._m0[_1886].y + _721;
    float _2042 = cbLight._m0[_1886].z + _722;
    float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
    float _2047 = _2046 * _2040;
    float _2048 = _2046 * _2041;
    float _2049 = _2046 * _2042;
    float _2050 = dot(vec3(_640, _641, _642), vec3(cbLight._m0[_1886].xyz));
    float _4183 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _4194 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _2054 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _2055 = dot(vec3(_640, _641, _642), vec3(_2047, _2048, _2049));
    float _4205 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _2059 = dot(vec3(cbLight._m0[_1886].xyz), vec3(_2047, _2048, _2049));
    float _4216 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2063 = _2039 * _2039;
    float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
    float _2078 = (exp2(log2(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2079 = 1.0 - _2039;
    float _2090 = (0.5 / (((_2054 * ((_2053 * _2079) + _2039)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2079) + _2039) * _2053))) * _2053;
    float _4227 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2092 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
    uint _2106 = _1886 + 9u;
    float _2117 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1926].w)) * _643) * 0.949999988079071044921875);
    float _2118 = _2117 * _2117;
    float _2119 = cbLight._m0[_1926].x + _720;
    float _2120 = cbLight._m0[_1926].y + _721;
    float _2121 = cbLight._m0[_1926].z + _722;
    float _2125 = inversesqrt(dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121)));
    float _2126 = _2125 * _2119;
    float _2127 = _2125 * _2120;
    float _2128 = _2125 * _2121;
    float _2129 = dot(vec3(_640, _641, _642), vec3(cbLight._m0[_1926].xyz));
    float _4238 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2132 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _2133 = dot(vec3(_640, _641, _642), vec3(_2126, _2127, _2128));
    float _4249 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2136 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _2137 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_2126, _2127, _2128));
    float _4260 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2141 = _2118 * _2118;
    float _2145 = ((_2136 * _2136) * (_2141 + (-1.0))) + 1.0;
    float _2154 = (exp2(log2(1.0 - (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2155 = 1.0 - _2118;
    float _2165 = (0.5 / (((_2054 * ((_2132 * _2155) + _2118)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2155) + _2118) * _2132))) * _2132;
    float _4271 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2167 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_2141 / ((_2145 * _2145) * 3.141590118408203125));
    float _2177 = (((_2154 * cbLight._m0[_2106].x) * _2167) * _1909) + ((((cbLight._m0[_2025].x * _1878) * _2078) * _2092) * _1922);
    float _2178 = (((_2154 * cbLight._m0[_2106].y) * _2167) * _1909) + ((((cbLight._m0[_2025].y * _1879) * _2078) * _2092) * _1922);
    float _2179 = (((_2154 * cbLight._m0[_2106].z) * _2167) * _1909) + ((((cbLight._m0[_2025].z * _1880) * _2078) * _2092) * _1922);
    float _2241;
    float _2243;
    float _2245;
    if (_1962)
    {
        _2241 = _2177;
        _2243 = _2178;
        _2245 = _2179;
    }
    else
    {
        uint _2247 = _1886 + 2u;
        uint _2251 = _1886 + 10u;
        float _2265 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2247].w)) * _643) * 0.949999988079071044921875);
        float _2266 = _2265 * _2265;
        float _2267 = cbLight._m0[_2247].x + _720;
        float _2268 = cbLight._m0[_2247].y + _721;
        float _2269 = cbLight._m0[_2247].z + _722;
        float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
        float _2274 = _2273 * _2267;
        float _2275 = _2273 * _2268;
        float _2276 = _2273 * _2269;
        float _2277 = dot(vec3(_640, _641, _642), vec3(cbLight._m0[_2247].xyz));
        float _4282 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2280 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2281 = dot(vec3(_640, _641, _642), vec3(_2274, _2275, _2276));
        float _4293 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2284 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2285 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_2274, _2275, _2276));
        float _4304 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2289 = _2266 * _2266;
        float _2293 = ((_2284 * _2284) * (_2289 + (-1.0))) + 1.0;
        float _2302 = (exp2(log2(1.0 - (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2303 = 1.0 - _2266;
        float _2313 = (0.5 / (((_2054 * ((_2280 * _2303) + _2266)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2303) + _2266) * _2280))) * _2280;
        float _4315 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2315 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2289 / ((_2293 * _2293) * 3.141590118408203125));
        float _2316 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
        _2241 = (((_2302 * cbLight._m0[_2251].x) * _2315) * _2316) + _2177;
        _2243 = (((_2302 * cbLight._m0[_2251].y) * _2315) * _2316) + _2178;
        _2245 = (((_2302 * cbLight._m0[_2251].z) * _2315) * _2316) + _2179;
    }
    float _2351;
    float _2353;
    float _2355;
    if (_1980)
    {
        _2351 = _2241;
        _2353 = _2243;
        _2355 = _2245;
    }
    else
    {
        uint _2362 = _1886 + 3u;
        uint _2366 = _1886 + 11u;
        float _2380 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2362].w)) * _643) * 0.949999988079071044921875);
        float _2381 = _2380 * _2380;
        float _2382 = cbLight._m0[_2362].x + _720;
        float _2383 = cbLight._m0[_2362].y + _721;
        float _2384 = cbLight._m0[_2362].z + _722;
        float _2388 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
        float _2389 = _2388 * _2382;
        float _2390 = _2388 * _2383;
        float _2391 = _2388 * _2384;
        float _2392 = dot(vec3(_640, _641, _642), vec3(cbLight._m0[_2362].xyz));
        float _4331 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2395 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _2396 = dot(vec3(_640, _641, _642), vec3(_2389, _2390, _2391));
        float _4342 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2399 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _2400 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_2389, _2390, _2391));
        float _4353 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2404 = _2381 * _2381;
        float _2408 = ((_2399 * _2399) * (_2404 + (-1.0))) + 1.0;
        float _2417 = (exp2(log2(1.0 - (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2418 = 1.0 - _2381;
        float _2428 = (0.5 / (((_2054 * ((_2395 * _2418) + _2381)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2418) + _2381) * _2395))) * _2395;
        float _4364 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2430 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_2404 / ((_2408 * _2408) * 3.141590118408203125));
        float _2431 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
        _2351 = (((_2417 * cbLight._m0[_2366].x) * _2430) * _2431) + _2241;
        _2353 = (((_2417 * cbLight._m0[_2366].y) * _2430) * _2431) + _2243;
        _2355 = (((_2417 * cbLight._m0[_2366].z) * _2430) * _2431) + _2245;
    }
    float _2566;
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    float _2576;
    if (_1884.y == 0u)
    {
        float _2506 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2507 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2506;
        float _2508 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2506;
        float _2509 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2506;
        uvec4 _2521 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2522 = _2521.x;
        uint _2533 = uint((float(_2521.y) * floor(float(uint(cbSceneParam._m0[85u].y * _741) / _2522))) + floor(float(uint(cbSceneParam._m0[85u].x * _740) / _2522)));
        float _2543 = (log2(_2509 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2544 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        uint _2547 = uint(isnan(14.0) ? _2544 : (isnan(_2544) ? 14.0 : min(_2544, 14.0)));
        uvec4 _2552 = texelFetch(g_lightClusterGridBuffer, int(((_2547 << 2u) + (_2533 << 6u)) >> 2u));
        uint _2553 = _2552.x;
        uint _2554 = _2521.z;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        if (((((1u << ((_2554 >> 4u) & 15u)) + 4294967295u) & _2553) == 0u) || ((_2554 & 240u) == 0u))
        {
            _2654 = 0.0;
            _2656 = 0.0;
            _2658 = 0.0;
            _2660 = 0.0;
            _2662 = 0.0;
            _2664 = 0.0;
        }
        else
        {
            float _2655;
            float _2657;
            float _2659;
            float _2661;
            float _2663;
            float _2665;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            float _2810 = 0.0;
            float _2811 = 0.0;
            float _2812 = 0.0;
            uint _2813 = 0u;
            uint _2822;
            bool _2823;
            for (;;)
            {
                _2822 = texelFetch(g_lightClassification, int((((_2547 << 5u) + (_2533 << 9u)) + (_2813 << 2u)) >> 2u)).x;
                _2823 = _2822 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2823)
                {
                    frontier_phi_66_pred = _2807;
                    frontier_phi_66_pred_1 = _2812;
                    frontier_phi_66_pred_2 = _2811;
                    frontier_phi_66_pred_3 = _2810;
                    frontier_phi_66_pred_4 = _2809;
                    frontier_phi_66_pred_5 = _2808;
                }
                else
                {
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    uint _2958;
                    _2952 = _2807;
                    _2953 = _2808;
                    _2954 = _2809;
                    _2955 = _2810;
                    _2956 = _2811;
                    _2957 = _2812;
                    _2958 = _2822;
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    for (;;)
                    {
                        uint _2962 = uint(findLSB(_2958)) + (_2813 << 5u);
                        uint _2959 = (_2958 + 4294967295u) & _2958;
                        uint _2964 = _2962 * 48u;
                        vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 3u)).x));
                        uint _2984 = (_2962 * 48u) + 4u;
                        vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 3u)).x));
                        uint _3003 = (_2962 * 48u) + 8u;
                        vec3 _3014 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3003)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 2u)).x));
                        float _3018 = _2978.x - _2507;
                        float _3019 = _2978.y - _2508;
                        float _3020 = _2978.z - _2509;
                        float _3021 = dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020));
                        float _3024 = inversesqrt(_3021);
                        float _3025 = _3024 * _3018;
                        float _3026 = _3024 * _3019;
                        float _3027 = _3024 * _3020;
                        float _3028 = dot(vec3(_759, _762, _765), vec3(_3025, _3026, _3027));
                        float _3033 = 1.0 - (_3021 * _2978.w);
                        float _4390 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3034 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                        float _3035 = sqrt(_3021) * _2997.w;
                        float _3038 = 1.39999997615814208984375 / (_3035 + 1.39999997615814208984375);
                        float _3039 = _3038 * _3038;
                        float _3042 = ((1.0 - _3039) * _3028) + _3039;
                        float _3045 = _3035 * _3035;
                        float _3049 = ((isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0))) * _3034) / ((_3045 * 0.699999988079071044921875) + 1.0);
                        float _3053 = (-0.0) - _2507;
                        float _3054 = (-0.0) - _2508;
                        float _3055 = (-0.0) - _2509;
                        float _3059 = inversesqrt(dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055)));
                        float _3060 = _3059 * _3053;
                        float _3061 = _3059 * _3054;
                        float _3062 = _3059 * _3055;
                        float _3070 = exp2(log2(1.0 / ((_3045 * 3.5) + 5.0)) * 0.25);
                        float _3071 = 1.0 - _819;
                        float _3078 = sqrt(1.0 - ((1.0 - (_3071 * _3071)) * (1.0 - (_3070 * _3070))));
                        float _3079 = _3078 * _3078;
                        float _3080 = _3079 * _3079;
                        float _3081 = _3060 + _3025;
                        float _3082 = _3061 + _3026;
                        float _3083 = _3062 + _3027;
                        float _3087 = inversesqrt(dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083)));
                        float _3091 = dot(vec3(_759, _762, _765), vec3(_3060, _3061, _3062));
                        float _4406 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3094 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                        float _3095 = dot(vec3(_759, _762, _765), vec3(_3087 * _3081, _3087 * _3082, _3087 * _3083));
                        float _4417 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                        float _3098 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                        float _3102 = ((_3098 * _3098) * (_3080 + (-1.0))) + 1.0;
                        float _3103 = _3038 * _3079;
                        float _3104 = _3103 * _3103;
                        float _3107 = ((1.0 - _3104) * _3028) + _3104;
                        float _4428 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                        float _3108 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                        float _3109 = 1.0 - _3079;
                        float _3119 = (0.5 / (((_3108 * ((_3094 * _3109) + _3079)) + 9.9999999392252902907785028219223e-09) + (((_3108 * _3109) + _3079) * _3094))) * _3108;
                        float _4439 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                        float _3130 = (((_3080 * 3.1415927410125732421875) * (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) / ((_3102 * _3102) * ((_3045 * 2.1991131305694580078125) + 3.141590118408203125))) * _3034;
                        _2882 = (_3049 * _2997.x) + _2955;
                        _2883 = (_3049 * _2997.y) + _2956;
                        _2884 = (_3049 * _2997.z) + _2957;
                        _2879 = (_3130 * _3014.x) + _2952;
                        _2880 = (_3130 * _3014.y) + _2953;
                        _2881 = (_3130 * _3014.z) + _2954;
                        if (_2959 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2952 = _2879;
                            _2953 = _2880;
                            _2954 = _2881;
                            _2955 = _2882;
                            _2956 = _2883;
                            _2957 = _2884;
                            _2958 = _2959;
                        }
                    }
                    frontier_phi_66_pred = _2879;
                    frontier_phi_66_pred_1 = _2884;
                    frontier_phi_66_pred_2 = _2883;
                    frontier_phi_66_pred_3 = _2882;
                    frontier_phi_66_pred_4 = _2881;
                    frontier_phi_66_pred_5 = _2880;
                }
                _2655 = frontier_phi_66_pred;
                _2665 = frontier_phi_66_pred_1;
                _2663 = frontier_phi_66_pred_2;
                _2661 = frontier_phi_66_pred_3;
                _2659 = frontier_phi_66_pred_4;
                _2657 = frontier_phi_66_pred_5;
                uint _2814 = _2813 + 1u;
                if (_2814 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2807 = _2655;
                    _2808 = _2657;
                    _2809 = _2659;
                    _2810 = _2661;
                    _2811 = _2663;
                    _2812 = _2665;
                    _2813 = _2814;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2654 = _2655;
            _2656 = _2657;
            _2658 = _2659;
            _2660 = _2661;
            _2662 = _2663;
            _2664 = _2665;
        }
        uvec4 _2668 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2669 = _2668.z;
        uint _2671 = (_2669 >> 8u) & 15u;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        if (((4294967295u << _2671) & _2553) == 0u)
        {
            _2775 = _2654;
            _2777 = _2656;
            _2779 = _2658;
            _2781 = _2660;
            _2783 = _2662;
            _2785 = _2664;
        }
        else
        {
            float _2800 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
            float _2801 = _2800 * _2507;
            float _2802 = _2800 * _2508;
            float _2803 = _2800 * _2509;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2671 < ((_2669 >> 12u) & 15u))
            {
                float _2776;
                float _2778;
                float _2780;
                float _2782;
                float _2784;
                float _2786;
                float _2935 = _2654;
                float _2936 = _2656;
                float _2937 = _2658;
                float _2938 = _2660;
                float _2939 = _2662;
                float _2940 = _2664;
                uint _2941 = _2671;
                uint _2950;
                bool _2951;
                for (;;)
                {
                    _2950 = texelFetch(g_lightClassification, int((((_2547 << 5u) + (_2533 << 9u)) + (_2941 << 2u)) >> 2u)).x;
                    _2951 = _2950 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2951)
                    {
                        frontier_phi_77_pred = _2940;
                        frontier_phi_77_pred_1 = _2939;
                        frontier_phi_77_pred_2 = _2938;
                        frontier_phi_77_pred_3 = _2937;
                        frontier_phi_77_pred_4 = _2936;
                        frontier_phi_77_pred_5 = _2935;
                    }
                    else
                    {
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3157 = _2935;
                        float _3158 = _2936;
                        float _3159 = _2937;
                        float _3160 = _2938;
                        float _3161 = _2939;
                        float _3162 = _2940;
                        uint _3163 = _2950;
                        uint _3164;
                        vec4 _3189;
                        float _3190;
                        vec4 _3205;
                        vec3 _3217;
                        vec4 _3232;
                        vec4 _3247;
                        float _3293;
                        bool _3294;
                        for (;;)
                        {
                            uint _3174 = ((_2941 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3163));
                            _3164 = (_3163 + 4294967295u) & _3163;
                            uint _3176 = _3174 * 40u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            _3190 = _3189.w;
                            uint _3192 = (_3174 * 40u) + 4u;
                            _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            uint _3207 = (_3174 * 40u) + 8u;
                            _3217 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x));
                            uint _3219 = (_3174 * 40u) + 16u;
                            _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            uint _3234 = (_3174 * 40u) + 20u;
                            _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            uint _3249 = (_3174 * 40u) + 24u;
                            vec4 _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3268 = (_3174 * 40u) + 28u;
                            vec4 _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            _3293 = fma(_2509, _3281.z, fma(_2508, _3281.y, _3281.x * _2507)) + _3281.w;
                            _3294 = !((fma(_2509, _3262.z, fma(_2508, _3262.y, _3262.x * _2507)) + _3262.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3294)
                            {
                                float _3321 = _3189.x - _2507;
                                float _3322 = _3189.y - _2508;
                                float _3323 = _3189.z - _2509;
                                float _3324 = dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323));
                                float _3327 = inversesqrt(_3324);
                                float _3328 = _3327 * _3321;
                                float _3329 = _3327 * _3322;
                                float _3330 = _3327 * _3323;
                                float _3334 = 1.0 - (_3324 / (_3190 * _3190));
                                float _4450 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3335 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                                float _3339 = sqrt(_3324) * _3205.w;
                                float _3341 = 1.39999997615814208984375 / (_3339 + 1.39999997615814208984375);
                                float _3342 = _3341 * _3341;
                                float _3345 = ((1.0 - _3342) * dot(vec3(_3328, _3329, _3330), vec3(_759, _762, _765))) + _3342;
                                float _3348 = _3339 * _3339;
                                float _3352 = (fma(_2509, _3232.z, fma(_2508, _3232.y, _3232.x * _2507)) + _3232.w) / _3293;
                                float _3353 = (fma(_2509, _3247.z, fma(_2508, _3247.y, _3247.x * _2507)) + _3247.w) / _3293;
                                float _3357 = 1.0 - dot(vec2(_3352, _3353), vec2(_3352, _3353));
                                float _4466 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3358 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                                float _3359 = _3358 * (((isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0))) * _3335) / ((_3348 * 0.699999988079071044921875) + 1.0));
                                float _3371 = exp2(log2(1.0 / ((_3348 * 3.5) + 5.0)) * 0.25);
                                float _3372 = 1.0 - _819;
                                float _3379 = sqrt(1.0 - ((1.0 - (_3372 * _3372)) * (1.0 - (_3371 * _3371))));
                                float _3380 = _3379 * _3379;
                                float _3381 = _3380 * _3380;
                                float _3382 = _3328 - _2801;
                                float _3383 = _3329 - _2802;
                                float _3384 = _3330 - _2803;
                                float _3388 = inversesqrt(dot(vec3(_3382, _3383, _3384), vec3(_3382, _3383, _3384)));
                                float _3392 = dot(vec3(_759, _762, _765), vec3((-0.0) - _2801, (-0.0) - _2802, (-0.0) - _2803));
                                float _4477 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3395 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                                float _3396 = dot(vec3(_759, _762, _765), vec3(_3388 * _3382, _3388 * _3383, _3388 * _3384));
                                float _4488 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3399 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                                float _3403 = ((_3399 * _3399) * (_3381 + (-1.0))) + 1.0;
                                float _3404 = _3341 * _3380;
                                float _3405 = _3404 * _3404;
                                float _3411 = ((1.0 - _3405) * dot(vec3(_759, _762, _765), vec3(_3328, _3329, _3330))) + _3405;
                                float _4499 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3412 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                                float _3413 = 1.0 - _3380;
                                float _3423 = (0.5 / (((_3412 * ((_3395 * _3413) + _3380)) + 9.9999999392252902907785028219223e-09) + (((_3412 * _3413) + _3380) * _3395))) * _3412;
                                float _4510 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3433 = (_3358 * _3335) * (((_3381 * 3.1415927410125732421875) * (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) / ((_3403 * _3403) * ((_3348 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3359 * _3205.y;
                                frontier_phi_83_pred_1 = _3359 * _3205.x;
                                frontier_phi_83_pred_2 = _3433 * _3217.z;
                                frontier_phi_83_pred_3 = _3433 * _3217.y;
                                frontier_phi_83_pred_4 = _3433 * _3217.x;
                                frontier_phi_83_pred_5 = _3359 * _3205.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3441 = frontier_phi_83_pred;
                            _3440 = frontier_phi_83_pred_1;
                            _3439 = frontier_phi_83_pred_2;
                            _3438 = frontier_phi_83_pred_3;
                            _3437 = frontier_phi_83_pred_4;
                            _3442 = frontier_phi_83_pred_5;
                            _3147 = _3440 + _3160;
                            _3148 = _3441 + _3161;
                            _3149 = _3442 + _3162;
                            _3144 = _3437 + _3157;
                            _3145 = _3438 + _3158;
                            _3146 = _3439 + _3159;
                            if (_3164 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3157 = _3144;
                                _3158 = _3145;
                                _3159 = _3146;
                                _3160 = _3147;
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3164;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3149;
                        frontier_phi_77_pred_1 = _3148;
                        frontier_phi_77_pred_2 = _3147;
                        frontier_phi_77_pred_3 = _3146;
                        frontier_phi_77_pred_4 = _3145;
                        frontier_phi_77_pred_5 = _3144;
                    }
                    _2786 = frontier_phi_77_pred;
                    _2784 = frontier_phi_77_pred_1;
                    _2782 = frontier_phi_77_pred_2;
                    _2780 = frontier_phi_77_pred_3;
                    _2778 = frontier_phi_77_pred_4;
                    _2776 = frontier_phi_77_pred_5;
                    uint _2942 = _2941 + 1u;
                    if (_2942 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2935 = _2776;
                        _2936 = _2778;
                        _2937 = _2780;
                        _2938 = _2782;
                        _2939 = _2784;
                        _2940 = _2786;
                        _2941 = _2942;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2780;
                frontier_phi_58_59_ladder_1 = _2786;
                frontier_phi_58_59_ladder_2 = _2784;
                frontier_phi_58_59_ladder_3 = _2782;
                frontier_phi_58_59_ladder_4 = _2778;
                frontier_phi_58_59_ladder_5 = _2776;
            }
            else
            {
                frontier_phi_58_59_ladder = _2658;
                frontier_phi_58_59_ladder_1 = _2664;
                frontier_phi_58_59_ladder_2 = _2662;
                frontier_phi_58_59_ladder_3 = _2660;
                frontier_phi_58_59_ladder_4 = _2656;
                frontier_phi_58_59_ladder_5 = _2654;
            }
            _2775 = frontier_phi_58_59_ladder_5;
            _2777 = frontier_phi_58_59_ladder_4;
            _2779 = frontier_phi_58_59_ladder;
            _2781 = frontier_phi_58_59_ladder_3;
            _2783 = frontier_phi_58_59_ladder_2;
            _2785 = frontier_phi_58_59_ladder_1;
        }
        float _2790 = isnan(1.0) ? _803 : (isnan(_803) ? 1.0 : min(_803, 1.0));
        _2566 = (_2790 * _2781) + _2018;
        _2568 = (_2790 * _2783) + _2020;
        _2570 = (_2790 * _2785) + _2022;
        _2572 = ((_2775 * 0.039999999105930328369140625) * _2790) + _2351;
        _2574 = ((_2777 * 0.039999999105930328369140625) * _2790) + _2353;
        _2576 = ((_2779 * 0.039999999105930328369140625) * _2790) + _2355;
    }
    else
    {
        _2566 = _2018;
        _2568 = _2020;
        _2570 = _2022;
        _2572 = _2351;
        _2574 = _2353;
        _2576 = _2355;
    }
    float _4526 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _4537 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _4548 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _2593 = ((isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2566 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _803))) + ((_2572 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1639)) * cbPerFrame._m0[3u].x);
    float _2594 = ((isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2568 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _803))) + ((_2574 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1639)) * cbPerFrame._m0[3u].x);
    float _2595 = ((isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2570 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _803))) + ((_2576 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1639)) * cbPerFrame._m0[3u].x);
    uint _2596 = _242 + 6u;
    float _2604 = _740 / cbSceneParam._m0[86u].x;
    float _2605 = _741 / cbSceneParam._m0[86u].y;
    vec4 _2619 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2604, _2605, (log2((isnan(cbSceneParam._m0[77u].w) ? _661 : (isnan(_661) ? cbSceneParam._m0[77u].w : min(_661, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2621 = _2619.x;
    float _2622 = _2619.y;
    float _2623 = _2619.z;
    float _2624 = _2619.w;
    float _2717;
    float _2719;
    float _2721;
    float _2723;
    if (_661 > cbSceneParam._m0[78u].w)
    {
        float _2679 = isnan(_661) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _661 : min(cbSceneParam._m0[80u].w, _661));
        float _2680 = _2679 / _661;
        float _2691 = _2680 * _713;
        float _2692 = _714 * _2680;
        float _2693 = (-0.0) - _2692;
        float _2695 = _2680 * _715;
        float _2697 = (cbSceneParam._m0[77u].w * _2693) / _2679;
        float _2698 = _2697 + cbSceneParam._m0[79u].w;
        float _2699 = cbSceneParam._m0[79u].w - _2692;
        float _2705 = sqrt(((_2691 * _2691) + (_2692 * _2692)) + (_2695 * _2695));
        float _2708 = (1.0 - (cbSceneParam._m0[77u].w / _2679)) * _2705;
        float _2713 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2715 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2892;
        if (abs((_2693 - _2697) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2892 = ((((_2698 > 0.0) ? exp2(_2713 * _2698) : (2.0 - exp2(_2715 * _2698))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2708;
        }
        else
        {
            float _2836 = 1.0 / cbSceneParam._m0[80u].x;
            float _2837 = isnan(_2699) ? _2698 : (isnan(_2698) ? _2699 : max(_2698, _2699));
            float _2838 = isnan(_2699) ? _2698 : (isnan(_2698) ? _2699 : min(_2698, _2699));
            float _2847 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : min(_2837, 0.0));
            float _2848 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : min(_2838, 0.0));
            _2892 = ((abs(_2705 / _2693) * cbSceneParam._m0[80u].y) * ((((_2847 - _2848) * 2.0) - ((exp2(_2713 * (isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0)))) - exp2(_2713 * (isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0))))) * _2836)) - ((exp2(_2715 * _2847) - exp2(_2715 * _2848)) * _2836))) + (_2708 * cbSceneParam._m0[80u].z);
        }
        vec4 _2894 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2604, _2605, 1.0), 0.0);
        float _2903 = exp2((_2892 * (-1.44269502162933349609375)) * (1.0 - _2894.w));
        float _2904 = log2(_2903);
        float _2920 = log2(_2624);
        _2717 = (exp2(_2920 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2904 * cbSceneParam._m0[78u].x)) * _2894.x) / cbSceneParam._m0[78u].x)) + _2621;
        _2719 = (exp2(_2920 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2904 * cbSceneParam._m0[78u].y)) * _2894.y) / cbSceneParam._m0[78u].y)) + _2622;
        _2721 = (exp2(_2920 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2904 * cbSceneParam._m0[78u].z)) * _2894.z) / cbSceneParam._m0[78u].z)) + _2623;
        _2723 = _2903 * _2624;
    }
    else
    {
        _2717 = _2621;
        _2719 = _2622;
        _2721 = _2623;
        _2723 = _2624;
    }
    bool _2930;
    vec4 _2733;
    vec4 _2755;
    float _2757;
    float _2761;
    float _2762;
    float _2763;
    float _2764;
    bool _2774;
    for (;;)
    {
        _2733 = cbMatDynParam._m0[0u];
        float _2735 = roundEven(_2733.y);
        bool _2736 = _2735 == 3.0;
        float _2737 = log2(_2723);
        float _2744 = exp2(_2737 * cbSceneParam._m0[78u].x) * _2593;
        float _2745 = exp2(_2737 * cbSceneParam._m0[78u].y) * _2594;
        float _2746 = exp2(_2737 * cbSceneParam._m0[78u].z) * _2595;
        float _2753 = _729 + (-0.5);
        _2755 = cbMtdParam._m0[1u];
        _2757 = _2755.y * _2753;
        float _2760 = (_2735 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2761 = _2760 * (_2736 ? _2744 : (_2744 + (cbSceneParam._m0[72u].w * _2717)));
        _2762 = _2760 * (_2736 ? _2745 : (_2745 + (cbSceneParam._m0[72u].w * _2719)));
        _2763 = _2760 * (_2736 ? _2746 : (_2746 + (cbSceneParam._m0[72u].w * _2721)));
        _2764 = _2753 * 0.999000012874603271484375;
        _2774 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2774)
        {
            if ((cbInstanceData._m0[_242 + 7u].x + _2764) < 0.5)
            {
                _2930 = true;
                break;
            }
        }
        uint _2871 = _778 + uint(_2733.w);
        if ((cbInstanceData._m0[_2871].w < 1.0) && ((cbInstanceData._m0[_2871].w + _2764) < 0.5))
        {
            _2930 = true;
            break;
        }
        if ((_2757 + 1.0) < _2755.x)
        {
            _2930 = true;
            break;
        }
        _2930 = false;
        break;
    }
    float _3135;
    if (_2930)
    {
        discard_state = true;
        _3135 = 0.0;
    }
    else
    {
        _3135 = cbInstanceData._m0[_2596].w;
    }
    SV_Target.x = _2761;
    SV_Target.y = _2762;
    SV_Target.z = _2763;
    SV_Target.w = _3135;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2596].w;
    discard_exit();
}


