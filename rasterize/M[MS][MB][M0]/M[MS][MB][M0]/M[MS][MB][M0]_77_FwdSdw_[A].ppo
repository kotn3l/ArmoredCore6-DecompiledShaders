#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1228;
float _3872;
float _3873;
float _3874;
float _3875;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _354 = _352.x;
    float _364 = dot(vec4(_354, _352.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_354 - _364) * cbMtdParam._m0[24u].x) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3884 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _389 = (_382 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _390 = (_382 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _391 = (_382 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _404 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _421 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _423 = _421.x;
    float _424 = _421.y;
    float _425 = _421.z;
    float _434 = ((_404.z - _425) * _382) + _425;
    float _437 = ((((_404.x - _423) * _382) + _423) * 2.0) + (-1.0);
    float _439 = ((((_404.y - _424) * _382) + _424) * 2.0) + (-1.0);
    float _440 = dot(vec2(_437, _439), vec2(_437, _439));
    float _3895 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _445 = sqrt(1.0 - (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))));
    vec4 _461 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _473 = (((_461.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _437;
    float _474 = (((_461.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _439;
    vec4 _486 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _488 = _486.x;
    float _489 = 1.0 - _488;
    float _517 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_488 - _489) * cbMtdParam._m0[24u].w) + _489) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3906 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _518 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _526 = ((((cbMtdParam._m0[10u].x - _389) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _518) + _389;
    float _527 = ((((cbMtdParam._m0[10u].y - _390) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _518) + _390;
    float _528 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _391)) * _518) + _391;
    float _532 = (cbMtdParam._m0[19u].w * (_461.z - _434)) + _434;
    float _536 = ((cbMtdParam._m0[23u].y - _532) * _518) + _532;
    vec4 _555 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _557 = _555.x;
    float _558 = _555.y;
    float _564 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_235, _236, _237, 0.0));
    vec4 _579 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _266) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _267) + cbTextureTilingScale._m0[18u].w));
    float _581 = _579.x;
    float _586 = fract(_579.w + cbPerFrame._m0[22u].x);
    float _588 = (1.0 - _586) * _581;
    float _593 = ((_586 + (-1.0)) + _581) * 9.0;
    float _595 = ((_581 + (-1.0)) + _586) * 9.0;
    float _596 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _597 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _611 = (_588 * ((_579.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _596 : (isnan(_596) ? 3.0 : min(_596, 3.0))) * 3.1415927410125732421875);
    float _613 = (_588 * ((_579.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _597 : (isnan(_597) ? 3.0 : min(_597, 3.0))) * 3.1415927410125732421875);
    float _617 = inversesqrt(dot(vec3(_611, _613, 1.0), vec3(_611, _613, 1.0)));
    float _633 = (((((0.5 - _557) + ((_611 * 0.5) * _617)) * _564) + _557) * 2.0) + (-1.0);
    float _634 = (((((0.5 - _558) + ((_617 * 0.5) * _613)) * _564) + _558) * 2.0) + (-1.0);
    float _635 = dot(vec2(_633, _634), vec2(_633, _634));
    float _3937 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _651 = ((((cbMtdParam._m0[22u].z * _473) - _473) + _633) * _518) + _473;
    float _652 = ((((cbMtdParam._m0[22u].z * _474) - _474) + _634) * _518) + _474;
    float _653 = (_518 * (sqrt(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) - _445)) + _445;
    float _655 = cbMtdParam._m0[22u].x + _461.w;
    float _658 = fma(_653, _235, fma(_652, _241 * TANGENT.x, (_227 * _219) * _651));
    float _661 = fma(_653, _236, fma(_652, _241 * TANGENT.y, (_227 * _220) * _651));
    float _664 = fma(_653, _237, fma(_652, _241 * TANGENT.z, (_227 * _221) * _651));
    float _668 = inversesqrt(dot(vec3(_658, _661, _664), vec3(_658, _661, _664)));
    float _669 = _668 * _658;
    float _670 = _668 * _661;
    float _671 = _668 * _664;
    float _3948 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _672 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _3970 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _3981 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _3992 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _690 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _741 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _731);
    float _742 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _731);
    float _743 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _731);
    float _747 = inversesqrt(dot(vec3(_741, _742, _743), vec3(_741, _742, _743)));
    float _748 = _741 * _747;
    float _749 = _742 * _747;
    float _750 = _743 * _747;
    vec4 _755 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _757 = _755.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _910 = sqrt(((_741 * _741) + (_742 * _742)) + (_743 * _743));
        float _916 = (cbMatDynParam._m0[5u].x * _910) + cbMatDynParam._m0[5u].y;
        float _4003 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _921 = (cbMatDynParam._m0[5u].z * _910) + cbMatDynParam._m0[5u].w;
        float _4014 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) - _917)) + _917) < ((_757 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _768 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _769 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _787 = fma(_671, cbSceneParam._m0[5u].z, fma(_670, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _669));
    float _790 = fma(_671, cbSceneParam._m0[6u].z, fma(_670, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _669));
    float _793 = fma(_671, cbSceneParam._m0[7u].z, fma(_670, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _669));
    uint _806 = _247 + 9u;
    uint _807 = _806 + uint(cbMatDynParam._m0[0u].w);
    float _813 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * cbInstanceData._m0[_807].x;
    float _814 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) * cbInstanceData._m0[_807].y;
    float _815 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * cbInstanceData._m0[_807].z;
    float _4025 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _816 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _4036 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _817 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _4047 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _818 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    vec4 _827 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _768, cbSceneParam._m0[86u].y * _769));
    float _831 = ((isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * TEXCOORD_5.w) * _827.x;
    float _832 = dot(vec3(_669, _670, _671), vec3(_748, _749, _750));
    float _835 = _832 * 2.0;
    float _839 = (_835 * _669) - _748;
    float _840 = (_835 * _670) - _749;
    float _841 = (_835 * _671) - _750;
    float _845 = abs(dot(vec3(_748, _749, _750), vec3(_669, _670, _671)));
    float _4058 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _847 = sqrt(_672);
    float _859 = exp2((_847 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_847 * 3.0));
    float _891 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _895 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _899 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1227;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _953 = fma(_899, cbModelParam._m0[26u].z, fma(_895, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _891));
        float _957 = fma(_899, cbModelParam._m0[27u].z, fma(_895, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _891));
        float _961 = fma(_899, cbModelParam._m0[28u].z, fma(_895, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _891));
        float _985 = _891 + _669;
        float _986 = _895 + _670;
        float _987 = _899 + _671;
        float _997 = fma(_987, cbModelParam._m0[26u].z, fma(_986, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _985)) - _953;
        float _998 = fma(_987, cbModelParam._m0[27u].z, fma(_986, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _985)) - _957;
        float _999 = fma(_987, cbModelParam._m0[28u].z, fma(_986, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _985)) - _961;
        float _1003 = inversesqrt(dot(vec3(_997, _998, _999), vec3(_997, _998, _999)));
        float _1016 = ((_1003 * _997) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_953 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1003 * _998) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_957 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1018 = ((_1003 * _999) / cbModelParam._m0[34u].z) + ((((((_961 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        float _1055 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1021.x + (-0.5));
        float _1057 = _1055 * (_1021.y + (-0.5));
        float _1058 = _1055 * (_1021.z + (-0.5));
        float _1065 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1028.x + (-0.5));
        float _1067 = _1065 * (_1028.y + (-0.5));
        float _1068 = _1065 * (_1028.z + (-0.5));
        float _1075 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1035.x + (-0.5));
        float _1077 = _1075 * (_1035.y + (-0.5));
        float _1078 = _1075 * (_1035.z + (-0.5));
        float _1085 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1042.x + (-0.5));
        float _1087 = _1085 * (_1042.y + (-0.5));
        float _1088 = _1085 * (_1042.z + (-0.5));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = _1056 * 0.5;
        float _1093 = _1066 * 0.5;
        float _1094 = _1076 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1109 = (dot(vec3(_669, _670, _671), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1119 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _4106 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1121 + 1.0))) + _1126) * _1089;
        float _1136 = _1057 * 0.5;
        float _1137 = _1067 * 0.5;
        float _1138 = _1077 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_669, _670, _671), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _4139 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1163 + 1.0))) + _1168) * _1090;
        float _1178 = _1058 * 0.5;
        float _1179 = _1068 * 0.5;
        float _1180 = _1078 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_669, _670, _671), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _4172 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1205 + 1.0))) + _1210) * _1091;
        _1227 = _1058;
        _1229 = _1057;
        _1230 = _1056;
        _1231 = _1068;
        _1232 = _1067;
        _1233 = _1066;
        _1234 = _1078;
        _1235 = _1077;
        _1236 = _1076;
        _1237 = _1091;
        _1238 = _1090;
        _1239 = _1089;
        _1240 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
        _1241 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
        _1242 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
    }
    else
    {
        _1227 = _1228;
        _1229 = _1228;
        _1230 = _1228;
        _1231 = _1228;
        _1232 = _1228;
        _1233 = _1228;
        _1234 = _1228;
        _1235 = _1228;
        _1236 = _1228;
        _1237 = _1228;
        _1238 = _1228;
        _1239 = _1228;
        _1240 = 0.0;
        _1241 = 0.0;
        _1242 = 0.0;
    }
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1270 = fma(_899, cbModelParam._m0[30u].z, fma(_895, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _891));
        float _1274 = fma(_899, cbModelParam._m0[31u].z, fma(_895, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _891));
        float _1278 = fma(_899, cbModelParam._m0[32u].z, fma(_895, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _891));
        float _1301 = _891 + _669;
        float _1302 = _895 + _670;
        float _1303 = _899 + _671;
        float _1313 = fma(_1303, cbModelParam._m0[30u].z, fma(_1302, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1301)) - _1270;
        float _1314 = fma(_1303, cbModelParam._m0[31u].z, fma(_1302, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1301)) - _1274;
        float _1315 = fma(_1303, cbModelParam._m0[32u].z, fma(_1302, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1301)) - _1278;
        float _1319 = inversesqrt(dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315)));
        float _1332 = ((_1319 * _1313) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1270 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1333 = ((_1319 * _1314) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1274 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1334 = ((_1319 * _1315) / cbModelParam._m0[35u].z) + ((((((_1278 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        float _1369 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1336.x + (-0.5));
        float _1371 = _1369 * (_1336.y + (-0.5));
        float _1372 = _1369 * (_1336.z + (-0.5));
        float _1379 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1343.x + (-0.5));
        float _1381 = _1379 * (_1343.y + (-0.5));
        float _1382 = _1379 * (_1343.z + (-0.5));
        float _1389 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1350.x + (-0.5));
        float _1391 = _1389 * (_1350.y + (-0.5));
        float _1392 = _1389 * (_1350.z + (-0.5));
        float _1399 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1357.x + (-0.5));
        float _1401 = _1399 * (_1357.y + (-0.5));
        float _1402 = _1399 * (_1357.z + (-0.5));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = _1370 * 0.5;
        float _1407 = _1380 * 0.5;
        float _1408 = _1390 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_669, _670, _671), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _4235 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1433 + 1.0))) + _1438) * _1403;
        float _1448 = _1371 * 0.5;
        float _1449 = _1381 * 0.5;
        float _1450 = _1391 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_669, _670, _671), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _4246 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _4257 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _4268 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1475 + 1.0))) + _1480) * _1404;
        float _1490 = _1372 * 0.5;
        float _1491 = _1382 * 0.5;
        float _1492 = _1392 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_669, _670, _671), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4301 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1517 + 1.0))) + _1522) * _1405;
        _1539 = _1372;
        _1540 = _1371;
        _1541 = _1370;
        _1542 = _1382;
        _1543 = _1381;
        _1544 = _1380;
        _1545 = _1392;
        _1546 = _1391;
        _1547 = _1390;
        _1548 = _1405;
        _1549 = _1404;
        _1550 = _1403;
        _1551 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
        _1552 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1553 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
    }
    else
    {
        _1539 = _1228;
        _1540 = _1228;
        _1541 = _1228;
        _1542 = _1228;
        _1543 = _1228;
        _1544 = _1228;
        _1545 = _1228;
        _1546 = _1228;
        _1547 = _1228;
        _1548 = _1228;
        _1549 = _1228;
        _1550 = _1228;
        _1551 = 0.0;
        _1552 = 0.0;
        _1553 = 0.0;
    }
    float _1563 = (cbModelParam._m0[1u].x * (_1551 - _1240)) + _1240;
    float _1564 = (cbModelParam._m0[1u].x * (_1552 - _1241)) + _1241;
    float _1565 = (cbModelParam._m0[1u].x * (_1553 - _1242)) + _1242;
    float _1586 = fma(_1565, cbSceneParam._m0[89u].z, fma(_1564, cbSceneParam._m0[89u].y, _1563 * cbSceneParam._m0[89u].x));
    float _1589 = fma(_1565, cbSceneParam._m0[90u].z, fma(_1564, cbSceneParam._m0[90u].y, _1563 * cbSceneParam._m0[90u].x));
    float _1592 = fma(_1565, cbSceneParam._m0[91u].z, fma(_1564, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1563));
    float _1607 = _839 * 0.5;
    float _1608 = _840 * 0.5;
    float _1609 = _841 * 0.5;
    float _1610 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1541, _1544, _1547, _1550));
    float _1613 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1540, _1543, _1546, _1549));
    float _1616 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1539, _1542, _1545, _1548));
    float _1650;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1623 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1227, _1231, _1234, _1237));
        float _1627 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1229, _1232, _1235, _1238));
        float _1631 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1230, _1233, _1236, _1239));
        float _1638 = dot(vec4(cbModelParam._m0[39u]), vec4(_1607, _1608, _1609, 1.0));
        _1650 = dot(vec3(isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1638) ? 0.0 : (isnan(0.0) ? _1638 : max(0.0, _1638))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1650 = 1.0;
    }
    float _1661;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1652 = dot(vec4(cbModelParam._m0[40u]), vec4(_1607, _1608, _1609, 1.0));
        _1661 = dot(vec3(isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1652) ? 0.0 : (isnan(0.0) ? _1652 : max(0.0, _1652))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1661 = 1.0;
    }
    float _1665 = (_1661 * cbModelParam._m0[1u].x) + (_1650 * (1.0 - cbModelParam._m0[1u].x));
    float _1675 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _672);
    float _1676 = isnan(_1675) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1675 : min(cbModelParam._m0[25u].z, _1675));
    float _1758;
    float _1760;
    float _1762;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1725 = fma(_899, cbModelParam._m0[13u].z, fma(_895, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _891)) + cbModelParam._m0[13u].w;
        float _1729 = fma(_899, cbModelParam._m0[14u].z, fma(_895, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _891)) + cbModelParam._m0[14u].w;
        float _1733 = fma(_899, cbModelParam._m0[15u].z, fma(_895, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _891)) + cbModelParam._m0[15u].w;
        float _1736 = fma(_841, cbModelParam._m0[13u].z, fma(_840, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _839));
        float _1739 = fma(_841, cbModelParam._m0[14u].z, fma(_840, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _839));
        float _1742 = fma(_841, cbModelParam._m0[15u].z, fma(_840, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _839));
        float _1770;
        if (_1736 > 0.0)
        {
            _1770 = abs((1.0 - _1725) / _1736);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1725 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1770 = frontier_phi_17_15_ladder;
        }
        float _1940;
        if (_1739 > 0.0)
        {
            _1940 = abs((1.0 - _1729) / _1739);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1729 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1940 = frontier_phi_26_22_ladder;
        }
        float _2235;
        if (_1742 > 0.0)
        {
            _2235 = abs((1.0 - _1733) / _1742);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1733 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2235 = frontier_phi_38_33_ladder;
        }
        float _2237 = isnan(_1940) ? _1770 : (isnan(_1770) ? _1940 : min(_1770, _1940));
        float _2238 = isnan(_2235) ? _2237 : (isnan(_2237) ? _2235 : min(_2237, _2235));
        float _2242 = (_2238 * _1736) + _1725;
        float _2243 = (_2238 * _1739) + _1729;
        float _2244 = (_2238 * _1742) + _1733;
        float _2245 = _2238 * 9.9999997473787516355514526367188e-05;
        float _2247 = (-1.0) - _2245;
        float _2249 = _2245 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2244 > _2249) || ((_2244 < _2247) || ((_2243 > _2249) || ((_2243 < _2247) || ((_2242 < _2247) || (_2242 > _2249))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2389 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2244, cbModelParam._m0[9u].z, fma(_2243, cbModelParam._m0[9u].y, _2242 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2244, cbModelParam._m0[10u].z, fma(_2243, cbModelParam._m0[10u].y, _2242 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2244, cbModelParam._m0[11u].z, fma(_2243, cbModelParam._m0[11u].y, _2242 * cbModelParam._m0[11u].x))), _1676);
            frontier_phi_16_38_ladder = _2389.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2389.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2389.x * cbModelParam._m0[1u].y;
        }
        _1758 = frontier_phi_16_38_ladder_2;
        _1760 = frontier_phi_16_38_ladder_1;
        _1762 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1746 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_839, _840, _841), _1676);
        _1758 = _1746.x * cbModelParam._m0[1u].y;
        _1760 = _1746.y * cbModelParam._m0[1u].y;
        _1762 = _1746.z * cbModelParam._m0[1u].y;
    }
    float _1766 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _672);
    float _1767 = isnan(_1766) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1766 : min(cbModelParam._m0[25u].w, _1766));
    float _1857;
    float _1859;
    float _1861;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1821 = fma(_899, cbModelParam._m0[21u].z, fma(_895, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _891)) + cbModelParam._m0[21u].w;
        float _1825 = fma(_899, cbModelParam._m0[22u].z, fma(_895, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _891)) + cbModelParam._m0[22u].w;
        float _1829 = fma(_899, cbModelParam._m0[23u].z, fma(_895, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _891)) + cbModelParam._m0[23u].w;
        float _1832 = fma(_841, cbModelParam._m0[21u].z, fma(_840, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _839));
        float _1835 = fma(_841, cbModelParam._m0[22u].z, fma(_840, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _839));
        float _1838 = fma(_841, cbModelParam._m0[23u].z, fma(_840, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _839));
        float _1945;
        if (_1832 > 0.0)
        {
            _1945 = abs((1.0 - _1821) / _1832);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1821 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1945 = frontier_phi_28_24_ladder;
        }
        float _2262;
        if (_1835 > 0.0)
        {
            _2262 = abs((1.0 - _1825) / _1835);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1825 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2262 = frontier_phi_40_35_ladder;
        }
        float _2589;
        if (_1838 > 0.0)
        {
            _2589 = abs((1.0 - _1829) / _1838);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1829 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2589 = frontier_phi_50_47_ladder;
        }
        float _2591 = isnan(_2262) ? _1945 : (isnan(_1945) ? _2262 : min(_1945, _2262));
        float _2592 = isnan(_2589) ? _2591 : (isnan(_2591) ? _2589 : min(_2591, _2589));
        float _2596 = (_2592 * _1832) + _1821;
        float _2597 = (_2592 * _1835) + _1825;
        float _2598 = (_2592 * _1838) + _1829;
        float _2599 = _2592 * 9.9999997473787516355514526367188e-05;
        float _2600 = (-1.0) - _2599;
        float _2602 = _2599 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2598 > _2602) || ((_2598 < _2600) || ((_2597 > _2602) || ((_2597 < _2600) || ((_2596 < _2600) || (_2596 > _2602))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2716 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2598, cbModelParam._m0[17u].z, fma(_2597, cbModelParam._m0[17u].y, _2596 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2598, cbModelParam._m0[18u].z, fma(_2597, cbModelParam._m0[18u].y, _2596 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2598, cbModelParam._m0[19u].z, fma(_2597, cbModelParam._m0[19u].y, _2596 * cbModelParam._m0[19u].x))), _1767);
            frontier_phi_25_50_ladder = _2716.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2716.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2716.x * cbModelParam._m0[1u].z;
        }
        _1857 = frontier_phi_25_50_ladder_2;
        _1859 = frontier_phi_25_50_ladder_1;
        _1861 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1841 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_839, _840, _841), _1767);
        _1857 = _1841.x * cbModelParam._m0[1u].z;
        _1859 = _1841.y * cbModelParam._m0[1u].z;
        _1861 = _1841.z * cbModelParam._m0[1u].z;
    }
    float _1873 = ((((1.0 - _859) * ((_847 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_859 * _847)) * _831;
    float _1874 = _1873 * ((cbModelParam._m0[1u].w * (_1857 - _1758)) + _1758);
    float _1875 = _1873 * ((cbModelParam._m0[1u].w * (_1859 - _1760)) + _1760);
    float _1876 = _1873 * ((cbModelParam._m0[1u].w * (_1861 - _1762)) + _1762);
    float _1879 = fma(_1876, cbSceneParam._m0[89u].z, fma(_1875, cbSceneParam._m0[89u].y, _1874 * cbSceneParam._m0[89u].x));
    float _1882 = fma(_1876, cbSceneParam._m0[90u].z, fma(_1875, cbSceneParam._m0[90u].y, _1874 * cbSceneParam._m0[90u].x));
    float _1885 = fma(_1876, cbSceneParam._m0[91u].z, fma(_1875, cbSceneParam._m0[91u].y, _1874 * cbSceneParam._m0[91u].x));
    float _1919 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1923 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1927 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1931 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1932 = _1919 / _1931;
    float _1933 = _1923 / _1931;
    float _1934 = _1927 / _1931;
    float _2081;
    float _2082;
    float _2083;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1961 = ((uint(_1934 > cbSceneParam._m0[59u].y) + uint(_1934 > cbSceneParam._m0[59u].x)) + uint(_1934 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1962 = _1961 + 43u;
        uint _1970 = _1961 + 44u;
        uint _1978 = _1961 + 45u;
        uint _1986 = _1961 + 46u;
        float _1997 = fma(_1931, cbSceneParam._m0[_1962].w, fma(_1927, cbSceneParam._m0[_1962].z, fma(_1923, cbSceneParam._m0[_1962].y, _1919 * cbSceneParam._m0[_1962].x)));
        float _2001 = fma(_1931, cbSceneParam._m0[_1970].w, fma(_1927, cbSceneParam._m0[_1970].z, fma(_1923, cbSceneParam._m0[_1970].y, _1919 * cbSceneParam._m0[_1970].x)));
        float _2009 = fma(_1931, cbSceneParam._m0[_1986].w, fma(_1927, cbSceneParam._m0[_1986].z, fma(_1923, cbSceneParam._m0[_1986].y, _1919 * cbSceneParam._m0[_1986].x)));
        float _2014 = cbSceneParam._m0[33u].z * _2009;
        float _2016 = cbSceneParam._m0[33u].w * _2009;
        float _2019 = fma(_1931, cbSceneParam._m0[_1978].w, fma(_1927, cbSceneParam._m0[_1978].z, fma(_1923, cbSceneParam._m0[_1978].y, _1919 * cbSceneParam._m0[_1978].x))) / _2009;
        float _2067 = (cbSceneParam._m0[33u].x - sqrt(((_1933 * _1933) + (_1932 * _1932)) + (_1934 * _1934))) * cbSceneParam._m0[33u].y;
        float _4427 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2074 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2014 + _1997) / _2009, (_2016 + _2001) / _2009), _2019), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2016 + _1997) / _2009, (_2001 - _2014) / _2009), _2019), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1997 - _2014) / _2009, (_2001 - _2016) / _2009), _2019), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1997 - _2016) / _2009, (_2014 + _2001) / _2009), _2019), 0.0)).x), vec4(0.25)));
        _2081 = 1.0 - (_2074 * cbSceneParam._m0[34u].x);
        _2082 = 1.0 - (_2074 * cbSceneParam._m0[34u].y);
        _2083 = 1.0 - (_2074 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2081 = 1.0;
        _2082 = 1.0;
        _2083 = 1.0;
    }
    float _2147;
    float _2149;
    float _2151;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2135 = fma(_1931, cbSceneParam._m0[63u].w, fma(_1927, cbSceneParam._m0[63u].z, fma(_1923, cbSceneParam._m0[63u].y, _1919 * cbSceneParam._m0[63u].x)));
        float _2136 = fma(_1931, cbSceneParam._m0[60u].w, fma(_1927, cbSceneParam._m0[60u].z, fma(_1923, cbSceneParam._m0[60u].y, _1919 * cbSceneParam._m0[60u].x))) / _2135;
        float _2137 = fma(_1931, cbSceneParam._m0[61u].w, fma(_1927, cbSceneParam._m0[61u].z, fma(_1923, cbSceneParam._m0[61u].y, _1919 * cbSceneParam._m0[61u].x))) / _2135;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2136 >= cbSceneParam._m0[64u].x) && (_2137 >= cbSceneParam._m0[64u].y)) && (_2136 <= cbSceneParam._m0[64u].z)) && (_2137 <= cbSceneParam._m0[64u].w))
        {
            float _2275 = fma(_1931, cbSceneParam._m0[62u].w, fma(_1927, cbSceneParam._m0[62u].z, fma(_1923, cbSceneParam._m0[62u].y, _1919 * cbSceneParam._m0[62u].x))) / _2135;
            float _2279 = isnan(cbSceneParam._m0[41u].w) ? _2275 : (isnan(_2275) ? cbSceneParam._m0[41u].w : max(_2275, cbSceneParam._m0[41u].w));
            float _2322 = (cbSceneParam._m0[33u].x - sqrt(((_1933 * _1933) + (_1932 * _1932)) + (_1934 * _1934))) * cbSceneParam._m0[33u].y;
            float _4443 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
            float _2329 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2136, cbSceneParam._m0[33u].w + _2137), _2279), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2136, _2137 - cbSceneParam._m0[33u].z), _2279), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2136 - cbSceneParam._m0[33u].z, _2137 - cbSceneParam._m0[33u].w), _2279), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2136 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2137), _2279), 0.0)).x), vec4(0.25)));
            float _2333 = 1.0 - (_2329 * cbSceneParam._m0[34u].x);
            float _2334 = 1.0 - (_2329 * cbSceneParam._m0[34u].y);
            float _2335 = 1.0 - (_2329 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2335) ? _2083 : (isnan(_2083) ? _2335 : min(_2083, _2335));
            frontier_phi_37_36_ladder_1 = isnan(_2334) ? _2082 : (isnan(_2082) ? _2334 : min(_2082, _2334));
            frontier_phi_37_36_ladder_2 = isnan(_2333) ? _2081 : (isnan(_2081) ? _2333 : min(_2081, _2333));
        }
        else
        {
            frontier_phi_37_36_ladder = _2083;
            frontier_phi_37_36_ladder_1 = _2082;
            frontier_phi_37_36_ladder_2 = _2081;
        }
        _2147 = frontier_phi_37_36_ladder_2;
        _2149 = frontier_phi_37_36_ladder_1;
        _2151 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2147 = _2081;
        _2149 = _2082;
        _2151 = _2083;
    }
    uvec4 _2156 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _2158 = _2156.x * 14u;
    uint _2159 = _2158 + 13u;
    float _2166 = _831 + (-1.0);
    float _2171 = (cbLight._m0[_2159].x * _2166) + 1.0;
    float _2172 = (cbLight._m0[_2159].y * _2166) + 1.0;
    float _2173 = (cbLight._m0[_2159].z * _2166) + 1.0;
    float _2174 = (cbLight._m0[_2159].w * _2166) + 1.0;
    uint _2175 = _2158 + 5u;
    float _2181 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
    uint _2185 = _2158 + 4u;
    float _2194 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
    uint _2198 = _2158 | 1u;
    float _2209 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_669, _670, _671));
    float _2212 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_669, _670, _671));
    float _4479 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _4490 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2217 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * 0.3183098733425140380859375;
    float _2219 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * 0.3183098733425140380859375;
    float _2226 = ((cbLight._m0[_2175].x * _2181) * _2219) + (((cbLight._m0[_2185].x * _2147) * _2194) * _2217);
    float _2227 = ((_2181 * cbLight._m0[_2175].y) * _2219) + (((cbLight._m0[_2185].y * _2149) * _2194) * _2217);
    float _2228 = ((_2181 * cbLight._m0[_2175].z) * _2219) + (((cbLight._m0[_2185].z * _2151) * _2194) * _2217);
    uvec4 _2232 = floatBitsToUint(cbLight._m0[_2158 + 12u]);
    bool _2234 = _2232.x == 0u;
    float _2336;
    float _2338;
    float _2340;
    if (_2234)
    {
        _2336 = _2226;
        _2338 = _2227;
        _2340 = _2228;
    }
    else
    {
        uint _2344 = _2158 + 6u;
        float _2360 = (dot(vec3(cbLight._m0[_2158 + 2u].xyz), vec3(_669, _670, _671)) * 0.5) + 0.5;
        float _2361 = _2360 * _2360;
        float _4501 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2362 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2363 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2336 = (((cbLight._m0[_2344].x * 0.3183098733425140380859375) * _2362) * _2363) + _2226;
        _2338 = (((cbLight._m0[_2344].y * 0.3183098733425140380859375) * _2362) * _2363) + _2227;
        _2340 = (((cbLight._m0[_2344].z * 0.3183098733425140380859375) * _2362) * _2363) + _2228;
    }
    bool _2343 = _2232.y == 0u;
    float _2398;
    float _2400;
    float _2402;
    if (_2343)
    {
        _2398 = _2336;
        _2400 = _2338;
        _2402 = _2340;
    }
    else
    {
        uint _2560 = _2158 + 7u;
        float _2576 = (dot(vec3(cbLight._m0[_2158 + 3u].xyz), vec3(_669, _670, _671)) * 0.5) + 0.5;
        float _2577 = _2576 * _2576;
        float _4517 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2578 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2579 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2398 = (((cbLight._m0[_2560].x * 0.3183098733425140380859375) * _2578) * _2579) + _2336;
        _2400 = (((cbLight._m0[_2560].y * 0.3183098733425140380859375) * _2578) * _2579) + _2338;
        _2402 = (((cbLight._m0[_2560].z * 0.3183098733425140380859375) * _2578) * _2579) + _2340;
    }
    uint _2405 = _2158 + 8u;
    float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2158].w)) * _672) * 0.949999988079071044921875);
    float _2419 = _2418 * _2418;
    float _2420 = cbLight._m0[_2158].x + _748;
    float _2421 = cbLight._m0[_2158].y + _749;
    float _2422 = cbLight._m0[_2158].z + _750;
    float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
    float _2427 = _2426 * _2420;
    float _2428 = _2426 * _2421;
    float _2429 = _2426 * _2422;
    float _2430 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2158].xyz));
    float _4533 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2433 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _4544 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _2434 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _2435 = dot(vec3(_669, _670, _671), vec3(_2427, _2428, _2429));
    float _4555 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2438 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _2439 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_2427, _2428, _2429));
    float _4566 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2443 = _2419 * _2419;
    float _2447 = ((_2438 * _2438) * (_2443 + (-1.0))) + 1.0;
    float _2458 = (exp2(log2(1.0 - (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2459 = 1.0 - _2419;
    float _2470 = (0.5 / (((_2434 * ((_2433 * _2459) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2459) + _2419) * _2433))) * _2433;
    float _4577 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2472 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2443 / ((_2447 * _2447) * 3.141590118408203125));
    uint _2486 = _2158 + 9u;
    float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2198].w)) * _672) * 0.949999988079071044921875);
    float _2498 = _2497 * _2497;
    float _2499 = cbLight._m0[_2198].x + _748;
    float _2500 = cbLight._m0[_2198].y + _749;
    float _2501 = cbLight._m0[_2198].z + _750;
    float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
    float _2506 = _2505 * _2499;
    float _2507 = _2505 * _2500;
    float _2508 = _2505 * _2501;
    float _2509 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2198].xyz));
    float _4588 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2512 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2513 = dot(vec3(_669, _670, _671), vec3(_2506, _2507, _2508));
    float _4599 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2516 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2517 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_2506, _2507, _2508));
    float _4610 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2521 = _2498 * _2498;
    float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
    float _2534 = (exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2535 = 1.0 - _2498;
    float _2545 = (0.5 / (((_2434 * ((_2512 * _2535) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2535) + _2498) * _2512))) * _2512;
    float _4621 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2547 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
    float _2557 = (((_2534 * cbLight._m0[_2486].x) * _2547) * _2181) + ((((cbLight._m0[_2405].x * _2147) * _2458) * _2472) * _2194);
    float _2558 = (((_2534 * cbLight._m0[_2486].y) * _2547) * _2181) + ((((cbLight._m0[_2405].y * _2149) * _2458) * _2472) * _2194);
    float _2559 = (((_2534 * cbLight._m0[_2486].z) * _2547) * _2181) + ((((cbLight._m0[_2405].z * _2151) * _2458) * _2472) * _2194);
    float _2615;
    float _2617;
    float _2619;
    if (_2234)
    {
        _2615 = _2557;
        _2617 = _2558;
        _2619 = _2559;
    }
    else
    {
        uint _2621 = _2158 + 2u;
        uint _2625 = _2158 + 10u;
        float _2639 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2621].w)) * _672) * 0.949999988079071044921875);
        float _2640 = _2639 * _2639;
        float _2641 = cbLight._m0[_2621].x + _748;
        float _2642 = cbLight._m0[_2621].y + _749;
        float _2643 = cbLight._m0[_2621].z + _750;
        float _2647 = inversesqrt(dot(vec3(_2641, _2642, _2643), vec3(_2641, _2642, _2643)));
        float _2648 = _2647 * _2641;
        float _2649 = _2647 * _2642;
        float _2650 = _2647 * _2643;
        float _2651 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2621].xyz));
        float _4632 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2654 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2655 = dot(vec3(_669, _670, _671), vec3(_2648, _2649, _2650));
        float _4643 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2658 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2659 = dot(vec3(cbLight._m0[_2621].xyz), vec3(_2648, _2649, _2650));
        float _4654 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2663 = _2640 * _2640;
        float _2667 = ((_2658 * _2658) * (_2663 + (-1.0))) + 1.0;
        float _2676 = (exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2677 = 1.0 - _2640;
        float _2687 = (0.5 / (((_2434 * ((_2654 * _2677) + _2640)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2677) + _2640) * _2654))) * _2654;
        float _4665 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2689 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2663 / ((_2667 * _2667) * 3.141590118408203125));
        float _2690 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2615 = (((_2676 * cbLight._m0[_2625].x) * _2689) * _2690) + _2557;
        _2617 = (((_2676 * cbLight._m0[_2625].y) * _2689) * _2690) + _2558;
        _2619 = (((_2676 * cbLight._m0[_2625].z) * _2689) * _2690) + _2559;
    }
    float _2721;
    float _2723;
    float _2725;
    if (_2343)
    {
        _2721 = _2615;
        _2723 = _2617;
        _2725 = _2619;
    }
    else
    {
        uint _2732 = _2158 + 3u;
        uint _2736 = _2158 + 11u;
        float _2750 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2732].w)) * _672) * 0.949999988079071044921875);
        float _2751 = _2750 * _2750;
        float _2752 = cbLight._m0[_2732].x + _748;
        float _2753 = cbLight._m0[_2732].y + _749;
        float _2754 = cbLight._m0[_2732].z + _750;
        float _2758 = inversesqrt(dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754)));
        float _2759 = _2758 * _2752;
        float _2760 = _2758 * _2753;
        float _2761 = _2758 * _2754;
        float _2762 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2732].xyz));
        float _4681 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2765 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2766 = dot(vec3(_669, _670, _671), vec3(_2759, _2760, _2761));
        float _4692 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2769 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2770 = dot(vec3(cbLight._m0[_2732].xyz), vec3(_2759, _2760, _2761));
        float _4703 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2774 = _2751 * _2751;
        float _2778 = ((_2769 * _2769) * (_2774 + (-1.0))) + 1.0;
        float _2787 = (exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2788 = 1.0 - _2751;
        float _2798 = (0.5 / (((_2434 * ((_2765 * _2788) + _2751)) + 9.9999999392252902907785028219223e-09) + (((_2434 * _2788) + _2751) * _2765))) * _2765;
        float _4714 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2800 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2774 / ((_2778 * _2778) * 3.141590118408203125));
        float _2801 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2721 = (((_2787 * cbLight._m0[_2736].x) * _2800) * _2801) + _2615;
        _2723 = (((_2787 * cbLight._m0[_2736].y) * _2800) * _2801) + _2617;
        _2725 = (((_2787 * cbLight._m0[_2736].z) * _2800) * _2801) + _2619;
    }
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    float _2875;
    float _2877;
    if (_2156.y == 0u)
    {
        uvec4 _2822 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2823 = _2822.x;
        uint _2834 = uint((float(_2822.y) * floor(float(uint(cbSceneParam._m0[85u].y * _769) / _2823))) + floor(float(uint(cbSceneParam._m0[85u].x * _768) / _2823)));
        float _2844 = (log2(_1934 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2845 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        uint _2848 = uint(isnan(14.0) ? _2845 : (isnan(_2845) ? 14.0 : min(_2845, 14.0)));
        uvec4 _2853 = texelFetch(g_lightClusterGridBuffer, int(((_2848 << 2u) + (_2834 << 6u)) >> 2u));
        uint _2854 = _2853.x;
        uint _2855 = _2822.z;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        if (((((1u << ((_2855 >> 4u) & 15u)) + 4294967295u) & _2854) == 0u) || ((_2855 & 240u) == 0u))
        {
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
            _2944 = 0.0;
        }
        else
        {
            float _2935;
            float _2937;
            float _2939;
            float _2941;
            float _2943;
            float _2945;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            float _3091 = 0.0;
            float _3092 = 0.0;
            uint _3093 = 0u;
            uint _3102;
            bool _3103;
            for (;;)
            {
                _3102 = texelFetch(g_lightClassification, int((((_2848 << 5u) + (_2834 << 9u)) + (_3093 << 2u)) >> 2u)).x;
                _3103 = _3102 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3103)
                {
                    frontier_phi_71_pred = _3092;
                    frontier_phi_71_pred_1 = _3091;
                    frontier_phi_71_pred_2 = _3090;
                    frontier_phi_71_pred_3 = _3089;
                    frontier_phi_71_pred_4 = _3088;
                    frontier_phi_71_pred_5 = _3087;
                }
                else
                {
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    uint _3238;
                    _3232 = _3087;
                    _3233 = _3088;
                    _3234 = _3089;
                    _3235 = _3090;
                    _3236 = _3091;
                    _3237 = _3092;
                    _3238 = _3102;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    for (;;)
                    {
                        uint _3242 = uint(findLSB(_3238)) + (_3093 << 5u);
                        uint _3239 = (_3238 + 4294967295u) & _3238;
                        uint _3244 = _3242 * 48u;
                        vec4 _3258 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3244)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 3u)).x));
                        uint _3264 = (_3242 * 48u) + 4u;
                        vec4 _3277 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3264)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 3u)).x));
                        uint _3283 = (_3242 * 48u) + 8u;
                        vec3 _3294 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3283)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3283 + 2u)).x));
                        float _3298 = _3258.x - _1932;
                        float _3299 = _3258.y - _1933;
                        float _3300 = _3258.z - _1934;
                        float _3301 = dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300));
                        float _3304 = inversesqrt(_3301);
                        float _3305 = _3304 * _3298;
                        float _3306 = _3304 * _3299;
                        float _3307 = _3304 * _3300;
                        float _3308 = dot(vec3(_787, _790, _793), vec3(_3305, _3306, _3307));
                        float _3313 = 1.0 - (_3301 * _3258.w);
                        float _4740 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3314 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                        float _3315 = sqrt(_3301) * _3277.w;
                        float _3318 = 1.39999997615814208984375 / (_3315 + 1.39999997615814208984375);
                        float _3319 = _3318 * _3318;
                        float _3322 = ((1.0 - _3319) * _3308) + _3319;
                        float _3325 = _3315 * _3315;
                        float _3329 = ((isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0))) * _3314) / ((_3325 * 0.699999988079071044921875) + 1.0);
                        float _3333 = (-0.0) - _1932;
                        float _3334 = (-0.0) - _1933;
                        float _3335 = (-0.0) - _1934;
                        float _3339 = inversesqrt(dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335)));
                        float _3340 = _3339 * _3333;
                        float _3341 = _3339 * _3334;
                        float _3342 = _3339 * _3335;
                        float _3349 = exp2(log2(1.0 / ((_3325 * 3.5) + 5.0)) * 0.25);
                        float _3350 = 1.0 - _847;
                        float _3357 = sqrt(1.0 - ((1.0 - (_3350 * _3350)) * (1.0 - (_3349 * _3349))));
                        float _3358 = _3357 * _3357;
                        float _3359 = _3358 * _3358;
                        float _3360 = _3340 + _3305;
                        float _3361 = _3341 + _3306;
                        float _3362 = _3342 + _3307;
                        float _3366 = inversesqrt(dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362)));
                        float _3370 = dot(vec3(_787, _790, _793), vec3(_3340, _3341, _3342));
                        float _4756 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3373 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3374 = dot(vec3(_787, _790, _793), vec3(_3366 * _3360, _3366 * _3361, _3366 * _3362));
                        float _4767 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3377 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3381 = ((_3377 * _3377) * (_3359 + (-1.0))) + 1.0;
                        float _3382 = _3318 * _3358;
                        float _3383 = _3382 * _3382;
                        float _3386 = ((1.0 - _3383) * _3308) + _3383;
                        float _4778 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3387 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                        float _3388 = 1.0 - _3358;
                        float _3398 = (0.5 / (((_3387 * ((_3373 * _3388) + _3358)) + 9.9999999392252902907785028219223e-09) + (((_3387 * _3388) + _3358) * _3373))) * _3387;
                        float _4789 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3408 = (((_3359 * 3.1415927410125732421875) * (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) / ((_3381 * _3381) * ((_3325 * 2.1991131305694580078125) + 3.141590118408203125))) * _3314;
                        _3162 = (_3329 * _3277.x) + _3235;
                        _3163 = (_3329 * _3277.y) + _3236;
                        _3164 = (_3329 * _3277.z) + _3237;
                        _3159 = (_3408 * _3294.x) + _3232;
                        _3160 = (_3408 * _3294.y) + _3233;
                        _3161 = (_3408 * _3294.z) + _3234;
                        if (_3239 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3232 = _3159;
                            _3233 = _3160;
                            _3234 = _3161;
                            _3235 = _3162;
                            _3236 = _3163;
                            _3237 = _3164;
                            _3238 = _3239;
                        }
                    }
                    frontier_phi_71_pred = _3164;
                    frontier_phi_71_pred_1 = _3163;
                    frontier_phi_71_pred_2 = _3162;
                    frontier_phi_71_pred_3 = _3161;
                    frontier_phi_71_pred_4 = _3160;
                    frontier_phi_71_pred_5 = _3159;
                }
                _2945 = frontier_phi_71_pred;
                _2943 = frontier_phi_71_pred_1;
                _2941 = frontier_phi_71_pred_2;
                _2939 = frontier_phi_71_pred_3;
                _2937 = frontier_phi_71_pred_4;
                _2935 = frontier_phi_71_pred_5;
                uint _3094 = _3093 + 1u;
                if (_3094 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3087 = _2935;
                    _3088 = _2937;
                    _3089 = _2939;
                    _3090 = _2941;
                    _3091 = _2943;
                    _3092 = _2945;
                    _3093 = _3094;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
            _2944 = _2945;
        }
        uvec4 _2948 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2949 = _2948.z;
        uint _2951 = (_2949 >> 8u) & 15u;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        if (((4294967295u << _2951) & _2854) == 0u)
        {
            _3055 = _2934;
            _3057 = _2936;
            _3059 = _2938;
            _3061 = _2940;
            _3063 = _2942;
            _3065 = _2944;
        }
        else
        {
            float _3080 = inversesqrt(dot(vec3(_1932, _1933, _1934), vec3(_1932, _1933, _1934)));
            float _3081 = _3080 * _1932;
            float _3082 = _3080 * _1933;
            float _3083 = _3080 * _1934;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2951 < ((_2949 >> 12u) & 15u))
            {
                float _3056;
                float _3058;
                float _3060;
                float _3062;
                float _3064;
                float _3066;
                float _3215 = _2934;
                float _3216 = _2936;
                float _3217 = _2938;
                float _3218 = _2940;
                float _3219 = _2942;
                float _3220 = _2944;
                uint _3221 = _2951;
                uint _3230;
                bool _3231;
                for (;;)
                {
                    _3230 = texelFetch(g_lightClassification, int((((_2848 << 5u) + (_2834 << 9u)) + (_3221 << 2u)) >> 2u)).x;
                    _3231 = _3230 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3231)
                    {
                        frontier_phi_82_pred = _3220;
                        frontier_phi_82_pred_1 = _3219;
                        frontier_phi_82_pred_2 = _3218;
                        frontier_phi_82_pred_3 = _3217;
                        frontier_phi_82_pred_4 = _3216;
                        frontier_phi_82_pred_5 = _3215;
                    }
                    else
                    {
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3435 = _3215;
                        float _3436 = _3216;
                        float _3437 = _3217;
                        float _3438 = _3218;
                        float _3439 = _3219;
                        float _3440 = _3220;
                        uint _3441 = _3230;
                        uint _3442;
                        vec4 _3467;
                        float _3468;
                        vec4 _3483;
                        vec3 _3495;
                        vec4 _3510;
                        vec4 _3526;
                        float _3572;
                        bool _3573;
                        for (;;)
                        {
                            uint _3452 = ((_3221 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3441));
                            _3442 = (_3441 + 4294967295u) & _3441;
                            uint _3454 = _3452 * 40u;
                            _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            _3468 = _3467.w;
                            uint _3470 = (_3452 * 40u) + 4u;
                            _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            uint _3485 = (_3452 * 40u) + 8u;
                            _3495 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x));
                            uint _3497 = (_3452 * 40u) + 16u;
                            _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            uint _3513 = (_3452 * 40u) + 20u;
                            _3526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 3u)).x));
                            uint _3528 = (_3452 * 40u) + 24u;
                            vec4 _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            uint _3547 = (_3452 * 40u) + 28u;
                            vec4 _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            _3572 = fma(_1934, _3560.z, fma(_1933, _3560.y, _3560.x * _1932)) + _3560.w;
                            _3573 = !((fma(_1934, _3541.z, fma(_1933, _3541.y, _3541.x * _1932)) + _3541.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3573)
                            {
                                float _3600 = _3467.x - _1932;
                                float _3601 = _3467.y - _1933;
                                float _3602 = _3467.z - _1934;
                                float _3603 = dot(vec3(_3600, _3601, _3602), vec3(_3600, _3601, _3602));
                                float _3606 = inversesqrt(_3603);
                                float _3607 = _3606 * _3600;
                                float _3608 = _3606 * _3601;
                                float _3609 = _3606 * _3602;
                                float _3613 = 1.0 - (_3603 / (_3468 * _3468));
                                float _4800 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3614 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3618 = sqrt(_3603) * _3483.w;
                                float _3620 = 1.39999997615814208984375 / (_3618 + 1.39999997615814208984375);
                                float _3621 = _3620 * _3620;
                                float _3624 = ((1.0 - _3621) * dot(vec3(_3607, _3608, _3609), vec3(_787, _790, _793))) + _3621;
                                float _3627 = _3618 * _3618;
                                float _3631 = (fma(_1934, _3510.z, fma(_1933, _3510.y, _3510.x * _1932)) + _3510.w) / _3572;
                                float _3632 = (fma(_1934, _3526.z, fma(_1933, _3526.y, _3526.x * _1932)) + _3526.w) / _3572;
                                float _3636 = 1.0 - dot(vec2(_3631, _3632), vec2(_3631, _3632));
                                float _4816 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3637 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3638 = _3637 * (((isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0))) * _3614) / ((_3627 * 0.699999988079071044921875) + 1.0));
                                float _3650 = exp2(log2(1.0 / ((_3627 * 3.5) + 5.0)) * 0.25);
                                float _3651 = 1.0 - _847;
                                float _3658 = sqrt(1.0 - ((1.0 - (_3651 * _3651)) * (1.0 - (_3650 * _3650))));
                                float _3659 = _3658 * _3658;
                                float _3660 = _3659 * _3659;
                                float _3661 = _3607 - _3081;
                                float _3662 = _3608 - _3082;
                                float _3663 = _3609 - _3083;
                                float _3667 = inversesqrt(dot(vec3(_3661, _3662, _3663), vec3(_3661, _3662, _3663)));
                                float _3671 = dot(vec3(_787, _790, _793), vec3((-0.0) - _3081, (-0.0) - _3082, (-0.0) - _3083));
                                float _4827 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3674 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3675 = dot(vec3(_787, _790, _793), vec3(_3667 * _3661, _3667 * _3662, _3667 * _3663));
                                float _4838 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                                float _3678 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3682 = ((_3678 * _3678) * (_3660 + (-1.0))) + 1.0;
                                float _3683 = _3620 * _3659;
                                float _3684 = _3683 * _3683;
                                float _3690 = ((1.0 - _3684) * dot(vec3(_787, _790, _793), vec3(_3607, _3608, _3609))) + _3684;
                                float _4849 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3691 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3692 = 1.0 - _3659;
                                float _3702 = (0.5 / (((_3691 * ((_3674 * _3692) + _3659)) + 9.9999999392252902907785028219223e-09) + (((_3691 * _3692) + _3659) * _3674))) * _3691;
                                float _4860 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3712 = (_3637 * _3614) * (((_3660 * 3.1415927410125732421875) * (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0)))) / ((_3682 * _3682) * ((_3627 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3638 * _3483.z;
                                frontier_phi_88_pred_1 = _3638 * _3483.y;
                                frontier_phi_88_pred_2 = _3638 * _3483.x;
                                frontier_phi_88_pred_3 = _3712 * _3495.z;
                                frontier_phi_88_pred_4 = _3712 * _3495.y;
                                frontier_phi_88_pred_5 = _3712 * _3495.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3721 = frontier_phi_88_pred;
                            _3720 = frontier_phi_88_pred_1;
                            _3719 = frontier_phi_88_pred_2;
                            _3718 = frontier_phi_88_pred_3;
                            _3717 = frontier_phi_88_pred_4;
                            _3716 = frontier_phi_88_pred_5;
                            _3425 = _3719 + _3438;
                            _3426 = _3720 + _3439;
                            _3427 = _3721 + _3440;
                            _3422 = _3716 + _3435;
                            _3423 = _3717 + _3436;
                            _3424 = _3718 + _3437;
                            if (_3442 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3427;
                                _3441 = _3442;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3427;
                        frontier_phi_82_pred_1 = _3426;
                        frontier_phi_82_pred_2 = _3425;
                        frontier_phi_82_pred_3 = _3424;
                        frontier_phi_82_pred_4 = _3423;
                        frontier_phi_82_pred_5 = _3422;
                    }
                    _3066 = frontier_phi_82_pred;
                    _3064 = frontier_phi_82_pred_1;
                    _3062 = frontier_phi_82_pred_2;
                    _3060 = frontier_phi_82_pred_3;
                    _3058 = frontier_phi_82_pred_4;
                    _3056 = frontier_phi_82_pred_5;
                    uint _3222 = _3221 + 1u;
                    if (_3222 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3215 = _3056;
                        _3216 = _3058;
                        _3217 = _3060;
                        _3218 = _3062;
                        _3219 = _3064;
                        _3220 = _3066;
                        _3221 = _3222;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3062;
                frontier_phi_63_64_ladder_1 = _3066;
                frontier_phi_63_64_ladder_2 = _3064;
                frontier_phi_63_64_ladder_3 = _3060;
                frontier_phi_63_64_ladder_4 = _3058;
                frontier_phi_63_64_ladder_5 = _3056;
            }
            else
            {
                frontier_phi_63_64_ladder = _2940;
                frontier_phi_63_64_ladder_1 = _2944;
                frontier_phi_63_64_ladder_2 = _2942;
                frontier_phi_63_64_ladder_3 = _2938;
                frontier_phi_63_64_ladder_4 = _2936;
                frontier_phi_63_64_ladder_5 = _2934;
            }
            _3055 = frontier_phi_63_64_ladder_5;
            _3057 = frontier_phi_63_64_ladder_4;
            _3059 = frontier_phi_63_64_ladder_3;
            _3061 = frontier_phi_63_64_ladder;
            _3063 = frontier_phi_63_64_ladder_2;
            _3065 = frontier_phi_63_64_ladder_1;
        }
        float _3070 = isnan(1.0) ? _831 : (isnan(_831) ? 1.0 : min(_831, 1.0));
        _2867 = (_3070 * _3061) + _2398;
        _2869 = (_3070 * _3063) + _2400;
        _2871 = (_3070 * _3065) + _2402;
        _2873 = ((_3055 * 0.039999999105930328369140625) * _3070) + _2721;
        _2875 = ((_3057 * 0.039999999105930328369140625) * _3070) + _2723;
        _2877 = ((_3059 * 0.039999999105930328369140625) * _3070) + _2725;
    }
    else
    {
        _2867 = _2398;
        _2869 = _2400;
        _2871 = _2402;
        _2873 = _2721;
        _2875 = _2723;
        _2877 = _2725;
    }
    float _4876 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _4887 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _4898 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _2894 = ((isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2867 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _831))) + ((_2873 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1665)) * cbPerFrame._m0[3u].x);
    float _2895 = ((isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2869 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _831))) + ((_2875 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1665)) * cbPerFrame._m0[3u].x);
    float _2896 = ((isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2871 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _831))) + ((_2877 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1665)) * cbPerFrame._m0[3u].x);
    uint _2897 = _247 + 6u;
    float _2905 = _768 / cbSceneParam._m0[86u].x;
    float _2906 = _769 / cbSceneParam._m0[86u].y;
    vec4 _2920 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2905, _2906, (log2((isnan(cbSceneParam._m0[77u].w) ? _690 : (isnan(_690) ? cbSceneParam._m0[77u].w : min(_690, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2922 = _2920.x;
    float _2923 = _2920.y;
    float _2924 = _2920.z;
    float _2925 = _2920.w;
    float _2997;
    float _2999;
    float _3001;
    float _3003;
    if (_690 > cbSceneParam._m0[78u].w)
    {
        float _2959 = isnan(_690) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _690 : min(cbSceneParam._m0[80u].w, _690));
        float _2960 = _2959 / _690;
        float _2971 = _2960 * _741;
        float _2972 = _742 * _2960;
        float _2973 = (-0.0) - _2972;
        float _2975 = _2960 * _743;
        float _2977 = (cbSceneParam._m0[77u].w * _2973) / _2959;
        float _2978 = _2977 + cbSceneParam._m0[79u].w;
        float _2979 = cbSceneParam._m0[79u].w - _2972;
        float _2985 = sqrt(((_2971 * _2971) + (_2972 * _2972)) + (_2975 * _2975));
        float _2988 = (1.0 - (cbSceneParam._m0[77u].w / _2959)) * _2985;
        float _2993 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2995 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3172;
        if (abs((_2973 - _2977) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3172 = ((((_2978 > 0.0) ? exp2(_2993 * _2978) : (2.0 - exp2(_2995 * _2978))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2988;
        }
        else
        {
            float _3116 = 1.0 / cbSceneParam._m0[80u].x;
            float _3117 = isnan(_2979) ? _2978 : (isnan(_2978) ? _2979 : max(_2978, _2979));
            float _3118 = isnan(_2979) ? _2978 : (isnan(_2978) ? _2979 : min(_2978, _2979));
            float _3127 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : min(_3117, 0.0));
            float _3128 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : min(_3118, 0.0));
            _3172 = ((abs(_2985 / _2973) * cbSceneParam._m0[80u].y) * ((((_3127 - _3128) * 2.0) - ((exp2(_2993 * (isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0)))) - exp2(_2993 * (isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0))))) * _3116)) - ((exp2(_2995 * _3127) - exp2(_2995 * _3128)) * _3116))) + (_2988 * cbSceneParam._m0[80u].z);
        }
        vec4 _3174 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2905, _2906, 1.0), 0.0);
        float _3183 = exp2((_3172 * (-1.44269502162933349609375)) * (1.0 - _3174.w));
        float _3184 = log2(_3183);
        float _3200 = log2(_2925);
        _2997 = (exp2(_3200 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3184 * cbSceneParam._m0[78u].x)) * _3174.x) / cbSceneParam._m0[78u].x)) + _2922;
        _2999 = (exp2(_3200 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3184 * cbSceneParam._m0[78u].y)) * _3174.y) / cbSceneParam._m0[78u].y)) + _2923;
        _3001 = (exp2(_3200 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3184 * cbSceneParam._m0[78u].z)) * _3174.z) / cbSceneParam._m0[78u].z)) + _2924;
        _3003 = _3183 * _2925;
    }
    else
    {
        _2997 = _2922;
        _2999 = _2923;
        _3001 = _2924;
        _3003 = _2925;
    }
    bool _3210;
    vec4 _3013;
    vec4 _3035;
    float _3037;
    float _3041;
    float _3042;
    float _3043;
    float _3044;
    bool _3054;
    for (;;)
    {
        _3013 = cbMatDynParam._m0[0u];
        float _3015 = roundEven(_3013.y);
        bool _3016 = _3015 == 3.0;
        float _3017 = log2(_3003);
        float _3024 = exp2(_3017 * cbSceneParam._m0[78u].x) * _2894;
        float _3025 = exp2(_3017 * cbSceneParam._m0[78u].y) * _2895;
        float _3026 = exp2(_3017 * cbSceneParam._m0[78u].z) * _2896;
        float _3033 = _757 + (-0.5);
        _3035 = cbMtdParam._m0[1u];
        _3037 = _3035.y * _3033;
        float _3040 = (_3015 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3041 = _3040 * (_3016 ? _3024 : (_3024 + (cbSceneParam._m0[72u].w * _2997)));
        _3042 = _3040 * (_3016 ? _3025 : (_3025 + (cbSceneParam._m0[72u].w * _2999)));
        _3043 = _3040 * (_3016 ? _3026 : (_3026 + (cbSceneParam._m0[72u].w * _3001)));
        _3044 = _3033 * 0.999000012874603271484375;
        _3054 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3054)
        {
            if ((cbInstanceData._m0[_247 + 7u].x + _3044) < 0.5)
            {
                _3210 = true;
                break;
            }
        }
        uint _3151 = _806 + uint(_3013.w);
        if ((cbInstanceData._m0[_3151].w < 1.0) && ((cbInstanceData._m0[_3151].w + _3044) < 0.5))
        {
            _3210 = true;
            break;
        }
        if ((_3037 + 1.0) < _3035.x)
        {
            _3210 = true;
            break;
        }
        _3210 = false;
        break;
    }
    float _3413;
    if (_3210)
    {
        discard_state = true;
        _3413 = 0.0;
    }
    else
    {
        _3413 = cbInstanceData._m0[_2897].w;
    }
    SV_Target.x = _3041;
    SV_Target.y = _3042;
    SV_Target.z = _3043;
    SV_Target.w = _3413;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2897].w;
    discard_exit();
}


