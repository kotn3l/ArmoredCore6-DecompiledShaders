#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1169;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _215 = _214 * _206;
    float _216 = _214 * _207;
    float _217 = _214 * _208;
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229 = _228 * TANGENT.x;
    float _230 = _228 * TANGENT.y;
    float _231 = _228 * TANGENT.z;
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _342 = _340.x;
    float _352 = dot(vec4(_342, _340.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _369 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_342 - _352) * cbMtdParam._m0[24u].x) + _352) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3475 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _377 = (_370 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _378 = (_370 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _379 = (_370 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _397 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _254) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _255) + cbTextureTilingScale._m0[20u].w));
    vec4 _424 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _441 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _443 = _441.x;
    float _444 = _441.y;
    float _445 = _441.z;
    float _454 = ((_424.z - _445) * _370) + _445;
    float _457 = ((((_424.x - _443) * _370) + _443) * 2.0) + (-1.0);
    float _458 = ((((_424.y - _444) * _370) + _444) * 2.0) + (-1.0);
    float _459 = dot(vec2(_457, _458), vec2(_457, _458));
    float _3486 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _464 = sqrt(1.0 - (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))));
    vec4 _484 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _496 = (_457 + ((((_397.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_484.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _497 = (_458 + ((((_397.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_484.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _500 = fma(_464, _222, fma(_497, _229, _496 * _215));
    float _503 = fma(_464, _223, fma(_497, _230, _496 * _216));
    float _506 = fma(_464, _224, fma(_497, _231, _496 * _217));
    float _510 = inversesqrt(dot(vec3(_500, _503, _506), vec3(_500, _503, _506)));
    vec4 _539 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _541 = _539.x;
    float _542 = 1.0 - _541;
    float _546 = ((_541 - _542) * cbMtdParam._m0[24u].z) + _542;
    float _548 = (cbMtdParam._m0[19u].x + dot(vec4(_510 * _500, _510 * _503, _510 * _506, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_546 * cbMtdParam._m0[21u].z);
    float _3497 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _549 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _564 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_546 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3508 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _569 = ((_549 * (cbMtdParam._m0[17u].x - _377)) * _565) + _377;
    float _570 = ((_549 * (cbMtdParam._m0[17u].y - _378)) * _565) + _378;
    float _571 = ((_549 * (cbMtdParam._m0[17u].z - _379)) * _565) + _379;
    float _576 = (((_397.z - _454) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _454;
    float _580 = ((_484.z - _576) * cbMtdParam._m0[19u].w) + _576;
    vec4 _593 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _600 = (_593.x * 2.0) + (-1.0);
    float _601 = (_593.y * 2.0) + (-1.0);
    float _602 = dot(vec2(_600, _601), vec2(_600, _601));
    float _3519 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _611 = (((_593.z - _580) * _549) * _565) + _580;
    float _626 = (((cbMtdParam._m0[21u].x * _496) + ((_600 - _496) * _549)) * _565) + _496;
    float _627 = (((cbMtdParam._m0[21u].x * _497) + ((_601 - _497) * _549)) * _565) + _497;
    float _628 = (((sqrt(1.0 - (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0)))) - _464) * _549) * _565) + _464;
    float _633 = cbMtdParam._m0[22u].x + _484.w;
    float _636 = fma(_628, _222, fma(_627, _229, _626 * _215));
    float _639 = fma(_628, _223, fma(_627, _230, _626 * _216));
    float _642 = fma(_628, _224, fma(_627, _231, _626 * _217));
    float _646 = inversesqrt(dot(vec3(_636, _639, _642), vec3(_636, _639, _642)));
    float _647 = _646 * _636;
    float _648 = _646 * _639;
    float _649 = _646 * _642;
    float _3530 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _650 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _3541 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _3552 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3563 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _3574 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _668 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _720 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _710);
    float _721 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _710);
    float _722 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _710);
    float _726 = inversesqrt(dot(vec3(_720, _721, _722), vec3(_720, _721, _722)));
    float _727 = _720 * _726;
    float _728 = _721 * _726;
    float _729 = _722 * _726;
    float _735 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _736 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _754 = fma(_649, cbSceneParam._m0[5u].z, fma(_648, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _647));
    float _757 = fma(_649, cbSceneParam._m0[6u].z, fma(_648, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _647));
    float _760 = fma(_649, cbSceneParam._m0[7u].z, fma(_648, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _647));
    uint _774 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _780 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) * cbInstanceData._m0[_774].x;
    float _781 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0)))) * cbInstanceData._m0[_774].y;
    float _782 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0)))) * cbInstanceData._m0[_774].z;
    float _3585 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _3596 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _784 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _3607 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    vec4 _794 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _735, cbSceneParam._m0[86u].y * _736));
    float _798 = ((isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * TEXCOORD_5.w) * _794.x;
    float _799 = dot(vec3(_647, _648, _649), vec3(_727, _728, _729));
    float _802 = _799 * 2.0;
    float _806 = (_802 * _647) - _727;
    float _807 = (_802 * _648) - _728;
    float _808 = (_802 * _649) - _729;
    float _812 = abs(dot(vec3(_727, _728, _729), vec3(_647, _648, _649)));
    float _3618 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _814 = sqrt(_650);
    float _827 = exp2((_814 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_814 * 3.0));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1168;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _893 = fma(_867, cbModelParam._m0[26u].z, fma(_863, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _859));
        float _897 = fma(_867, cbModelParam._m0[27u].z, fma(_863, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _859));
        float _901 = fma(_867, cbModelParam._m0[28u].z, fma(_863, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _859));
        float _926 = _859 + _647;
        float _927 = _863 + _648;
        float _928 = _867 + _649;
        float _938 = fma(_928, cbModelParam._m0[26u].z, fma(_927, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926)) - _893;
        float _939 = fma(_928, cbModelParam._m0[27u].z, fma(_927, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926)) - _897;
        float _940 = fma(_928, cbModelParam._m0[28u].z, fma(_927, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926)) - _901;
        float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
        float _957 = ((_944 * _938) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_893 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_944 * _939) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_897 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_944 * _940) / cbModelParam._m0[34u].z) + ((((((_901 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        float _996 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_962.x + (-0.5));
        float _998 = _996 * (_962.y + (-0.5));
        float _999 = _996 * (_962.z + (-0.5));
        float _1006 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_969.x + (-0.5));
        float _1008 = _1006 * (_969.y + (-0.5));
        float _1009 = _1006 * (_969.z + (-0.5));
        float _1016 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_976.x + (-0.5));
        float _1018 = _1016 * (_976.y + (-0.5));
        float _1019 = _1016 * (_976.z + (-0.5));
        float _1026 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_983.x + (-0.5));
        float _1028 = _1026 * (_983.y + (-0.5));
        float _1029 = _1026 * (_983.z + (-0.5));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = _997 * 0.5;
        float _1034 = _1007 * 0.5;
        float _1035 = _1017 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1050 = (dot(vec3(_647, _648, _649), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3644 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1060 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3655 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3666 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_1062 + 1.0))) + _1067) * _1030;
        float _1077 = _998 * 0.5;
        float _1078 = _1008 * 0.5;
        float _1079 = _1018 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_647, _648, _649), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3677 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3688 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3699 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (_1104 + 1.0))) + _1109) * _1031;
        float _1119 = _999 * 0.5;
        float _1120 = _1009 * 0.5;
        float _1121 = _1019 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_647, _648, _649), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3732 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1146 + 1.0))) + _1151) * _1032;
        _1168 = _999;
        _1170 = _998;
        _1171 = _997;
        _1172 = _1009;
        _1173 = _1008;
        _1174 = _1007;
        _1175 = _1019;
        _1176 = _1018;
        _1177 = _1017;
        _1178 = _1032;
        _1179 = _1031;
        _1180 = _1030;
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1182 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
    }
    else
    {
        _1168 = _1169;
        _1170 = _1169;
        _1171 = _1169;
        _1172 = _1169;
        _1173 = _1169;
        _1174 = _1169;
        _1175 = _1169;
        _1176 = _1169;
        _1177 = _1169;
        _1178 = _1169;
        _1179 = _1169;
        _1180 = _1169;
        _1181 = 0.0;
        _1182 = 0.0;
        _1183 = 0.0;
    }
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1208 = fma(_867, cbModelParam._m0[30u].z, fma(_863, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _859));
        float _1212 = fma(_867, cbModelParam._m0[31u].z, fma(_863, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _859));
        float _1216 = fma(_867, cbModelParam._m0[32u].z, fma(_863, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _859));
        float _1239 = _859 + _647;
        float _1240 = _863 + _648;
        float _1241 = _867 + _649;
        float _1251 = fma(_1241, cbModelParam._m0[30u].z, fma(_1240, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1239)) - _1208;
        float _1252 = fma(_1241, cbModelParam._m0[31u].z, fma(_1240, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1239)) - _1212;
        float _1253 = fma(_1241, cbModelParam._m0[32u].z, fma(_1240, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1239)) - _1216;
        float _1257 = inversesqrt(dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253)));
        float _1270 = ((_1257 * _1251) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1208 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1257 * _1252) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1212 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1257 * _1253) / cbModelParam._m0[35u].z) + ((((((_1216 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        float _1307 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1274.x + (-0.5));
        float _1309 = _1307 * (_1274.y + (-0.5));
        float _1310 = _1307 * (_1274.z + (-0.5));
        float _1317 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1281.x + (-0.5));
        float _1319 = _1317 * (_1281.y + (-0.5));
        float _1320 = _1317 * (_1281.z + (-0.5));
        float _1327 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1288.x + (-0.5));
        float _1329 = _1327 * (_1288.y + (-0.5));
        float _1330 = _1327 * (_1288.z + (-0.5));
        float _1337 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1295.x + (-0.5));
        float _1339 = _1337 * (_1295.y + (-0.5));
        float _1340 = _1337 * (_1295.z + (-0.5));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = _1308 * 0.5;
        float _1345 = _1318 * 0.5;
        float _1346 = _1328 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_647, _648, _649), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _3773 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _3784 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _3795 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_1371 + 1.0))) + _1376) * _1341;
        float _1386 = _1309 * 0.5;
        float _1387 = _1319 * 0.5;
        float _1388 = _1329 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_647, _648, _649), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _3806 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _3817 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _3828 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_1413 + 1.0))) + _1418) * _1342;
        float _1428 = _1310 * 0.5;
        float _1429 = _1320 * 0.5;
        float _1430 = _1330 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_647, _648, _649), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _3839 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _3850 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _3861 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1455 + 1.0))) + _1460) * _1343;
        _1477 = _1310;
        _1478 = _1309;
        _1479 = _1308;
        _1480 = _1320;
        _1481 = _1319;
        _1482 = _1318;
        _1483 = _1330;
        _1484 = _1329;
        _1485 = _1328;
        _1486 = _1343;
        _1487 = _1342;
        _1488 = _1341;
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1490 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1491 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
    }
    else
    {
        _1477 = _1169;
        _1478 = _1169;
        _1479 = _1169;
        _1480 = _1169;
        _1481 = _1169;
        _1482 = _1169;
        _1483 = _1169;
        _1484 = _1169;
        _1485 = _1169;
        _1486 = _1169;
        _1487 = _1169;
        _1488 = _1169;
        _1489 = 0.0;
        _1490 = 0.0;
        _1491 = 0.0;
    }
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1181)) + _1181;
    float _1502 = (cbModelParam._m0[1u].x * (_1490 - _1182)) + _1182;
    float _1503 = (cbModelParam._m0[1u].x * (_1491 - _1183)) + _1183;
    float _1524 = fma(_1503, cbSceneParam._m0[89u].z, fma(_1502, cbSceneParam._m0[89u].y, _1501 * cbSceneParam._m0[89u].x));
    float _1527 = fma(_1503, cbSceneParam._m0[90u].z, fma(_1502, cbSceneParam._m0[90u].y, _1501 * cbSceneParam._m0[90u].x));
    float _1530 = fma(_1503, cbSceneParam._m0[91u].z, fma(_1502, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1501));
    float _1545 = _806 * 0.5;
    float _1546 = _807 * 0.5;
    float _1547 = _808 * 0.5;
    float _1548 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1479, _1482, _1485, _1488));
    float _1551 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1478, _1481, _1484, _1487));
    float _1554 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1588;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1561 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1168, _1172, _1175, _1178));
        float _1565 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1170, _1173, _1176, _1179));
        float _1569 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1171, _1174, _1177, _1180));
        float _1576 = dot(vec4(cbModelParam._m0[39u]), vec4(_1545, _1546, _1547, 1.0));
        _1588 = dot(vec3(isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1576) ? 0.0 : (isnan(0.0) ? _1576 : max(0.0, _1576))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1588 = 1.0;
    }
    float _1599;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1590 = dot(vec4(cbModelParam._m0[40u]), vec4(_1545, _1546, _1547, 1.0));
        _1599 = dot(vec3(isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1590) ? 0.0 : (isnan(0.0) ? _1590 : max(0.0, _1590))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1599 = 1.0;
    }
    float _1603 = (_1599 * cbModelParam._m0[1u].x) + (_1588 * (1.0 - cbModelParam._m0[1u].x));
    float _1613 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _650);
    float _1614 = isnan(_1613) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1613 : min(cbModelParam._m0[25u].z, _1613));
    float _1695;
    float _1697;
    float _1699;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1662 = fma(_867, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _859)) + cbModelParam._m0[13u].w;
        float _1666 = fma(_867, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _859)) + cbModelParam._m0[14u].w;
        float _1670 = fma(_867, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _859)) + cbModelParam._m0[15u].w;
        float _1673 = fma(_808, cbModelParam._m0[13u].z, fma(_807, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _806));
        float _1676 = fma(_808, cbModelParam._m0[14u].z, fma(_807, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _806));
        float _1679 = fma(_808, cbModelParam._m0[15u].z, fma(_807, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _806));
        float _1707;
        if (_1673 > 0.0)
        {
            _1707 = abs((1.0 - _1662) / _1673);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1662 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1707 = frontier_phi_14_12_ladder;
        }
        float _1908;
        if (_1676 > 0.0)
        {
            _1908 = abs((1.0 - _1666) / _1676);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1666 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1908 = frontier_phi_23_19_ladder;
        }
        float _2151;
        if (_1679 > 0.0)
        {
            _2151 = abs((1.0 - _1670) / _1679);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1670 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2151 = frontier_phi_35_30_ladder;
        }
        float _2153 = isnan(_1908) ? _1707 : (isnan(_1707) ? _1908 : min(_1707, _1908));
        float _2154 = isnan(_2151) ? _2153 : (isnan(_2153) ? _2151 : min(_2153, _2151));
        float _2158 = (_2154 * _1673) + _1662;
        float _2159 = (_2154 * _1676) + _1666;
        float _2160 = (_2154 * _1679) + _1670;
        float _2161 = _2154 * 9.9999997473787516355514526367188e-05;
        float _2163 = (-1.0) - _2161;
        float _2165 = _2161 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2160 > _2165) || ((_2160 < _2163) || ((_2159 > _2165) || ((_2159 < _2163) || ((_2158 < _2163) || (_2158 > _2165))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2284 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2160, cbModelParam._m0[9u].z, fma(_2159, cbModelParam._m0[9u].y, _2158 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2160, cbModelParam._m0[10u].z, fma(_2159, cbModelParam._m0[10u].y, _2158 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2160, cbModelParam._m0[11u].z, fma(_2159, cbModelParam._m0[11u].y, _2158 * cbModelParam._m0[11u].x))), _1614);
            frontier_phi_13_35_ladder = _2284.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2284.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2284.x * cbModelParam._m0[1u].y;
        }
        _1695 = frontier_phi_13_35_ladder_2;
        _1697 = frontier_phi_13_35_ladder_1;
        _1699 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1683 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_806, _807, _808), _1614);
        _1695 = _1683.x * cbModelParam._m0[1u].y;
        _1697 = _1683.y * cbModelParam._m0[1u].y;
        _1699 = _1683.z * cbModelParam._m0[1u].y;
    }
    float _1703 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _650);
    float _1704 = isnan(_1703) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1703 : min(cbModelParam._m0[25u].w, _1703));
    float _1794;
    float _1796;
    float _1798;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1758 = fma(_867, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _859)) + cbModelParam._m0[21u].w;
        float _1762 = fma(_867, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _859)) + cbModelParam._m0[22u].w;
        float _1766 = fma(_867, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _859)) + cbModelParam._m0[23u].w;
        float _1769 = fma(_808, cbModelParam._m0[21u].z, fma(_807, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _806));
        float _1772 = fma(_808, cbModelParam._m0[22u].z, fma(_807, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _806));
        float _1775 = fma(_808, cbModelParam._m0[23u].z, fma(_807, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _806));
        float _1913;
        if (_1769 > 0.0)
        {
            _1913 = abs((1.0 - _1758) / _1769);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1758 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1913 = frontier_phi_25_21_ladder;
        }
        float _2178;
        if (_1772 > 0.0)
        {
            _2178 = abs((1.0 - _1762) / _1772);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1762 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2178 = frontier_phi_37_32_ladder;
        }
        float _2383;
        if (_1775 > 0.0)
        {
            _2383 = abs((1.0 - _1766) / _1775);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1766 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2383 = frontier_phi_46_43_ladder;
        }
        float _2385 = isnan(_2178) ? _1913 : (isnan(_1913) ? _2178 : min(_1913, _2178));
        float _2386 = isnan(_2383) ? _2385 : (isnan(_2385) ? _2383 : min(_2385, _2383));
        float _2390 = (_2386 * _1769) + _1758;
        float _2391 = (_2386 * _1772) + _1762;
        float _2392 = (_2386 * _1775) + _1766;
        float _2393 = _2386 * 9.9999997473787516355514526367188e-05;
        float _2394 = (-1.0) - _2393;
        float _2396 = _2393 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2392 > _2396) || ((_2392 < _2394) || ((_2391 > _2396) || ((_2391 < _2394) || ((_2390 < _2394) || (_2390 > _2396))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2591 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2392, cbModelParam._m0[17u].z, fma(_2391, cbModelParam._m0[17u].y, _2390 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2392, cbModelParam._m0[18u].z, fma(_2391, cbModelParam._m0[18u].y, _2390 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2392, cbModelParam._m0[19u].z, fma(_2391, cbModelParam._m0[19u].y, _2390 * cbModelParam._m0[19u].x))), _1704);
            frontier_phi_22_46_ladder = _2591.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2591.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2591.x * cbModelParam._m0[1u].z;
        }
        _1794 = frontier_phi_22_46_ladder_2;
        _1796 = frontier_phi_22_46_ladder_1;
        _1798 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1778 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_806, _807, _808), _1704);
        _1794 = _1778.x * cbModelParam._m0[1u].z;
        _1796 = _1778.y * cbModelParam._m0[1u].z;
        _1798 = _1778.z * cbModelParam._m0[1u].z;
    }
    float _1810 = ((((1.0 - _827) * ((_814 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_827 * _814)) * _798;
    float _1811 = _1810 * ((cbModelParam._m0[1u].w * (_1794 - _1695)) + _1695);
    float _1812 = _1810 * ((cbModelParam._m0[1u].w * (_1796 - _1697)) + _1697);
    float _1813 = _1810 * ((cbModelParam._m0[1u].w * (_1798 - _1699)) + _1699);
    float _1816 = fma(_1813, cbSceneParam._m0[89u].z, fma(_1812, cbSceneParam._m0[89u].y, _1811 * cbSceneParam._m0[89u].x));
    float _1819 = fma(_1813, cbSceneParam._m0[90u].z, fma(_1812, cbSceneParam._m0[90u].y, _1811 * cbSceneParam._m0[90u].x));
    float _1822 = fma(_1813, cbSceneParam._m0[91u].z, fma(_1812, cbSceneParam._m0[91u].y, _1811 * cbSceneParam._m0[91u].x));
    uvec4 _1832 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1834 = _1832.x * 14u;
    uint _1835 = _1834 + 13u;
    float _1842 = _798 + (-1.0);
    float _1847 = (cbLight._m0[_1835].x * _1842) + 1.0;
    float _1848 = (cbLight._m0[_1835].y * _1842) + 1.0;
    float _1849 = (cbLight._m0[_1835].z * _1842) + 1.0;
    float _1850 = (cbLight._m0[_1835].w * _1842) + 1.0;
    uint _1851 = _1834 + 5u;
    float _1857 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
    uint _1861 = _1834 + 4u;
    float _1867 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
    uint _1871 = _1834 | 1u;
    float _1882 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_647, _648, _649));
    float _1885 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_647, _648, _649));
    float _3997 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _4008 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1890 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * 0.3183098733425140380859375;
    float _1892 = (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * 0.3183098733425140380859375;
    float _1899 = ((cbLight._m0[_1851].x * _1857) * _1892) + ((cbLight._m0[_1861].x * _1867) * _1890);
    float _1900 = ((_1857 * cbLight._m0[_1851].y) * _1892) + ((_1867 * cbLight._m0[_1861].y) * _1890);
    float _1901 = ((_1857 * cbLight._m0[_1851].z) * _1892) + ((_1867 * cbLight._m0[_1861].z) * _1890);
    uvec4 _1905 = floatBitsToUint(cbLight._m0[_1834 + 12u]);
    bool _1907 = _1905.x == 0u;
    float _1918;
    float _1920;
    float _1922;
    if (_1907)
    {
        _1918 = _1899;
        _1920 = _1900;
        _1922 = _1901;
    }
    else
    {
        uint _1926 = _1834 + 6u;
        float _1942 = (dot(vec3(cbLight._m0[_1834 + 2u].xyz), vec3(_647, _648, _649)) * 0.5) + 0.5;
        float _1943 = _1942 * _1942;
        float _4019 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1944 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1945 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _1918 = (((cbLight._m0[_1926].x * 0.3183098733425140380859375) * _1944) * _1945) + _1899;
        _1920 = (((cbLight._m0[_1926].y * 0.3183098733425140380859375) * _1944) * _1945) + _1900;
        _1922 = (((cbLight._m0[_1926].z * 0.3183098733425140380859375) * _1944) * _1945) + _1901;
    }
    bool _1925 = _1905.y == 0u;
    float _1963;
    float _1965;
    float _1967;
    if (_1925)
    {
        _1963 = _1918;
        _1965 = _1920;
        _1967 = _1922;
    }
    else
    {
        uint _2122 = _1834 + 7u;
        float _2138 = (dot(vec3(cbLight._m0[_1834 + 3u].xyz), vec3(_647, _648, _649)) * 0.5) + 0.5;
        float _2139 = _2138 * _2138;
        float _4035 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2140 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _2141 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _1963 = (((cbLight._m0[_2122].x * 0.3183098733425140380859375) * _2140) * _2141) + _1918;
        _1965 = (((cbLight._m0[_2122].y * 0.3183098733425140380859375) * _2140) * _2141) + _1920;
        _1967 = (((cbLight._m0[_2122].z * 0.3183098733425140380859375) * _2140) * _2141) + _1922;
    }
    uint _1970 = _1834 + 8u;
    float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1834].w)) * _650) * 0.949999988079071044921875);
    float _1984 = _1983 * _1983;
    float _1985 = cbLight._m0[_1834].x + _727;
    float _1986 = cbLight._m0[_1834].y + _728;
    float _1987 = cbLight._m0[_1834].z + _729;
    float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
    float _1992 = _1991 * _1985;
    float _1993 = _1991 * _1986;
    float _1994 = _1991 * _1987;
    float _1995 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_1834].xyz));
    float _4051 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1998 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _4062 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _1999 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _2000 = dot(vec3(_647, _648, _649), vec3(_1992, _1993, _1994));
    float _4073 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _2004 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_1992, _1993, _1994));
    float _4084 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2008 = _1984 * _1984;
    float _2012 = ((_2003 * _2003) * (_2008 + (-1.0))) + 1.0;
    float _2023 = (exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2024 = 1.0 - _1984;
    float _2035 = (0.5 / (((_1999 * ((_1998 * _2024) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2024) + _1984) * _1998))) * _1998;
    float _4095 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2037 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2008 / ((_2012 * _2012) * 3.141590118408203125));
    uint _2048 = _1834 + 9u;
    float _2059 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1871].w)) * _650) * 0.949999988079071044921875);
    float _2060 = _2059 * _2059;
    float _2061 = cbLight._m0[_1871].x + _727;
    float _2062 = cbLight._m0[_1871].y + _728;
    float _2063 = cbLight._m0[_1871].z + _729;
    float _2067 = inversesqrt(dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063)));
    float _2068 = _2067 * _2061;
    float _2069 = _2067 * _2062;
    float _2070 = _2067 * _2063;
    float _2071 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_1871].xyz));
    float _4106 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _2075 = dot(vec3(_647, _648, _649), vec3(_2068, _2069, _2070));
    float _4117 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2078 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _2079 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_2068, _2069, _2070));
    float _4128 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2083 = _2060 * _2060;
    float _2087 = ((_2078 * _2078) * (_2083 + (-1.0))) + 1.0;
    float _2096 = (exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2097 = 1.0 - _2060;
    float _2107 = (0.5 / (((_1999 * ((_2074 * _2097) + _2060)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2097) + _2060) * _2074))) * _2074;
    float _4139 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2109 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2083 / ((_2087 * _2087) * 3.141590118408203125));
    float _2119 = (((_2096 * cbLight._m0[_2048].x) * _2109) * _1857) + (((_2023 * cbLight._m0[_1970].x) * _2037) * _1867);
    float _2120 = (((_2096 * cbLight._m0[_2048].y) * _2109) * _1857) + (((_2023 * cbLight._m0[_1970].y) * _2037) * _1867);
    float _2121 = (((_2096 * cbLight._m0[_2048].z) * _2109) * _1857) + (((_2023 * cbLight._m0[_1970].z) * _2037) * _1867);
    float _2183;
    float _2185;
    float _2187;
    if (_1907)
    {
        _2183 = _2119;
        _2185 = _2120;
        _2187 = _2121;
    }
    else
    {
        uint _2189 = _1834 + 2u;
        uint _2193 = _1834 + 10u;
        float _2207 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2189].w)) * _650) * 0.949999988079071044921875);
        float _2208 = _2207 * _2207;
        float _2209 = cbLight._m0[_2189].x + _727;
        float _2210 = cbLight._m0[_2189].y + _728;
        float _2211 = cbLight._m0[_2189].z + _729;
        float _2215 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
        float _2216 = _2215 * _2209;
        float _2217 = _2215 * _2210;
        float _2218 = _2215 * _2211;
        float _2219 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_2189].xyz));
        float _4150 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2222 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _2223 = dot(vec3(_647, _648, _649), vec3(_2216, _2217, _2218));
        float _4161 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2226 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _2227 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_2216, _2217, _2218));
        float _4172 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2231 = _2208 * _2208;
        float _2235 = ((_2226 * _2226) * (_2231 + (-1.0))) + 1.0;
        float _2244 = (exp2(log2(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2245 = 1.0 - _2208;
        float _2255 = (0.5 / (((_1999 * ((_2222 * _2245) + _2208)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2245) + _2208) * _2222))) * _2222;
        float _4183 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2257 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2231 / ((_2235 * _2235) * 3.141590118408203125));
        float _2258 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _2183 = (((_2244 * cbLight._m0[_2193].x) * _2257) * _2258) + _2119;
        _2185 = (((_2244 * cbLight._m0[_2193].y) * _2257) * _2258) + _2120;
        _2187 = (((_2244 * cbLight._m0[_2193].z) * _2257) * _2258) + _2121;
    }
    float _2293;
    float _2295;
    float _2297;
    if (_1925)
    {
        _2293 = _2183;
        _2295 = _2185;
        _2297 = _2187;
    }
    else
    {
        uint _2304 = _1834 + 3u;
        uint _2308 = _1834 + 11u;
        float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2304].w)) * _650) * 0.949999988079071044921875);
        float _2323 = _2322 * _2322;
        float _2324 = cbLight._m0[_2304].x + _727;
        float _2325 = cbLight._m0[_2304].y + _728;
        float _2326 = cbLight._m0[_2304].z + _729;
        float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
        float _2331 = _2330 * _2324;
        float _2332 = _2330 * _2325;
        float _2333 = _2330 * _2326;
        float _2334 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_2304].xyz));
        float _4199 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2338 = dot(vec3(_647, _648, _649), vec3(_2331, _2332, _2333));
        float _4210 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2342 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_2331, _2332, _2333));
        float _4221 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2346 = _2323 * _2323;
        float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
        float _2359 = (exp2(log2(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2360 = 1.0 - _2323;
        float _2370 = (0.5 / (((_1999 * ((_2337 * _2360) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2360) + _2323) * _2337))) * _2337;
        float _4232 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2372 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
        float _2373 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2293 = (((_2359 * cbLight._m0[_2308].x) * _2372) * _2373) + _2183;
        _2295 = (((_2359 * cbLight._m0[_2308].y) * _2372) * _2373) + _2185;
        _2297 = (((_2359 * cbLight._m0[_2308].z) * _2372) * _2373) + _2187;
    }
    float _2508;
    float _2510;
    float _2512;
    float _2514;
    float _2516;
    float _2518;
    if (_1832.y == 0u)
    {
        float _2448 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2449 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2448;
        float _2450 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2448;
        float _2451 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2448;
        uvec4 _2463 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2464 = _2463.x;
        uint _2475 = uint((float(_2463.y) * floor(float(uint(cbSceneParam._m0[85u].y * _736) / _2464))) + floor(float(uint(cbSceneParam._m0[85u].x * _735) / _2464)));
        float _2485 = (log2(_2451 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2486 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        uint _2489 = uint(isnan(14.0) ? _2486 : (isnan(_2486) ? 14.0 : min(_2486, 14.0)));
        uvec4 _2494 = texelFetch(g_lightClusterGridBuffer, int(((_2489 << 2u) + (_2475 << 6u)) >> 2u));
        uint _2495 = _2494.x;
        uint _2496 = _2463.z;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        float _2604;
        float _2606;
        if (((((1u << ((_2496 >> 4u) & 15u)) + 4294967295u) & _2495) == 0u) || ((_2496 & 240u) == 0u))
        {
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
            _2602 = 0.0;
            _2604 = 0.0;
            _2606 = 0.0;
        }
        else
        {
            float _2597;
            float _2599;
            float _2601;
            float _2603;
            float _2605;
            float _2607;
            float _2741 = 0.0;
            float _2742 = 0.0;
            float _2743 = 0.0;
            float _2744 = 0.0;
            float _2745 = 0.0;
            float _2746 = 0.0;
            uint _2747 = 0u;
            uint _2756;
            bool _2757;
            for (;;)
            {
                _2756 = texelFetch(g_lightClassification, int((((_2489 << 5u) + (_2475 << 9u)) + (_2747 << 2u)) >> 2u)).x;
                _2757 = _2756 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2757)
                {
                    frontier_phi_61_pred = _2741;
                    frontier_phi_61_pred_1 = _2746;
                    frontier_phi_61_pred_2 = _2745;
                    frontier_phi_61_pred_3 = _2744;
                    frontier_phi_61_pred_4 = _2743;
                    frontier_phi_61_pred_5 = _2742;
                }
                else
                {
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    uint _2871;
                    _2865 = _2741;
                    _2866 = _2742;
                    _2867 = _2743;
                    _2868 = _2744;
                    _2869 = _2745;
                    _2870 = _2746;
                    _2871 = _2756;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    for (;;)
                    {
                        uint _2875 = uint(findLSB(_2871)) + (_2747 << 5u);
                        uint _2872 = (_2871 + 4294967295u) & _2871;
                        uint _2877 = _2875 * 48u;
                        vec4 _2891 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2877)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 3u)).x));
                        uint _2897 = (_2875 * 48u) + 4u;
                        vec4 _2910 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2897)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 3u)).x));
                        uint _2916 = (_2875 * 48u) + 8u;
                        vec3 _2927 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2916)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 2u)).x));
                        float _2931 = _2891.x - _2449;
                        float _2932 = _2891.y - _2450;
                        float _2933 = _2891.z - _2451;
                        float _2934 = dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933));
                        float _2937 = inversesqrt(_2934);
                        float _2938 = _2937 * _2931;
                        float _2939 = _2937 * _2932;
                        float _2940 = _2937 * _2933;
                        float _2941 = dot(vec3(_754, _757, _760), vec3(_2938, _2939, _2940));
                        float _2946 = 1.0 - (_2934 * _2891.w);
                        float _4258 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2947 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                        float _2948 = sqrt(_2934) * _2910.w;
                        float _2951 = 1.39999997615814208984375 / (_2948 + 1.39999997615814208984375);
                        float _2952 = _2951 * _2951;
                        float _2955 = ((1.0 - _2952) * _2941) + _2952;
                        float _2958 = _2948 * _2948;
                        float _2962 = ((isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0))) * _2947) / ((_2958 * 0.699999988079071044921875) + 1.0);
                        float _2966 = (-0.0) - _2449;
                        float _2967 = (-0.0) - _2450;
                        float _2968 = (-0.0) - _2451;
                        float _2972 = inversesqrt(dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968)));
                        float _2973 = _2972 * _2966;
                        float _2974 = _2972 * _2967;
                        float _2975 = _2972 * _2968;
                        float _2983 = exp2(log2(1.0 / ((_2958 * 3.5) + 5.0)) * 0.25);
                        float _2984 = 1.0 - _814;
                        float _2991 = sqrt(1.0 - ((1.0 - (_2984 * _2984)) * (1.0 - (_2983 * _2983))));
                        float _2992 = _2991 * _2991;
                        float _2993 = _2992 * _2992;
                        float _2994 = _2973 + _2938;
                        float _2995 = _2974 + _2939;
                        float _2996 = _2975 + _2940;
                        float _3000 = inversesqrt(dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996)));
                        float _3004 = dot(vec3(_754, _757, _760), vec3(_2973, _2974, _2975));
                        float _4274 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3007 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                        float _3008 = dot(vec3(_754, _757, _760), vec3(_3000 * _2994, _3000 * _2995, _3000 * _2996));
                        float _4285 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3011 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                        float _3015 = ((_3011 * _3011) * (_2993 + (-1.0))) + 1.0;
                        float _3016 = _2951 * _2992;
                        float _3017 = _3016 * _3016;
                        float _3020 = ((1.0 - _3017) * _2941) + _3017;
                        float _4296 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3021 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                        float _3022 = 1.0 - _2992;
                        float _3032 = (0.5 / (((_3021 * ((_3007 * _3022) + _2992)) + 9.9999999392252902907785028219223e-09) + (((_3021 * _3022) + _2992) * _3007))) * _3021;
                        float _4307 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3043 = (((_2993 * 3.1415927410125732421875) * (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) / ((_3015 * _3015) * ((_2958 * 2.1991131305694580078125) + 3.141590118408203125))) * _2947;
                        _2800 = (_2962 * _2910.x) + _2868;
                        _2801 = (_2962 * _2910.y) + _2869;
                        _2802 = (_2962 * _2910.z) + _2870;
                        _2797 = (_3043 * _2927.x) + _2865;
                        _2798 = (_3043 * _2927.y) + _2866;
                        _2799 = (_3043 * _2927.z) + _2867;
                        if (_2872 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2865 = _2797;
                            _2866 = _2798;
                            _2867 = _2799;
                            _2868 = _2800;
                            _2869 = _2801;
                            _2870 = _2802;
                            _2871 = _2872;
                        }
                    }
                    frontier_phi_61_pred = _2797;
                    frontier_phi_61_pred_1 = _2802;
                    frontier_phi_61_pred_2 = _2801;
                    frontier_phi_61_pred_3 = _2800;
                    frontier_phi_61_pred_4 = _2799;
                    frontier_phi_61_pred_5 = _2798;
                }
                _2597 = frontier_phi_61_pred;
                _2607 = frontier_phi_61_pred_1;
                _2605 = frontier_phi_61_pred_2;
                _2603 = frontier_phi_61_pred_3;
                _2601 = frontier_phi_61_pred_4;
                _2599 = frontier_phi_61_pred_5;
                uint _2748 = _2747 + 1u;
                if (_2748 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2741 = _2597;
                    _2742 = _2599;
                    _2743 = _2601;
                    _2744 = _2603;
                    _2745 = _2605;
                    _2746 = _2607;
                    _2747 = _2748;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
            _2602 = _2603;
            _2604 = _2605;
            _2606 = _2607;
        }
        uvec4 _2610 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2611 = _2610.z;
        uint _2613 = (_2611 >> 8u) & 15u;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        if (((4294967295u << _2613) & _2495) == 0u)
        {
            _2709 = _2596;
            _2711 = _2598;
            _2713 = _2600;
            _2715 = _2602;
            _2717 = _2604;
            _2719 = _2606;
        }
        else
        {
            float _2734 = inversesqrt(dot(vec3(_2449, _2450, _2451), vec3(_2449, _2450, _2451)));
            float _2735 = _2734 * _2449;
            float _2736 = _2734 * _2450;
            float _2737 = _2734 * _2451;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2613 < ((_2611 >> 12u) & 15u))
            {
                float _2710;
                float _2712;
                float _2714;
                float _2716;
                float _2718;
                float _2720;
                float _2848 = _2596;
                float _2849 = _2598;
                float _2850 = _2600;
                float _2851 = _2602;
                float _2852 = _2604;
                float _2853 = _2606;
                uint _2854 = _2613;
                uint _2863;
                bool _2864;
                for (;;)
                {
                    _2863 = texelFetch(g_lightClassification, int((((_2489 << 5u) + (_2475 << 9u)) + (_2854 << 2u)) >> 2u)).x;
                    _2864 = _2863 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2864)
                    {
                        frontier_phi_67_pred = _2851;
                        frontier_phi_67_pred_1 = _2852;
                        frontier_phi_67_pred_2 = _2853;
                        frontier_phi_67_pred_3 = _2850;
                        frontier_phi_67_pred_4 = _2849;
                        frontier_phi_67_pred_5 = _2848;
                    }
                    else
                    {
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3061 = _2848;
                        float _3062 = _2849;
                        float _3063 = _2850;
                        float _3064 = _2851;
                        float _3065 = _2852;
                        float _3066 = _2853;
                        uint _3067 = _2863;
                        uint _3068;
                        vec4 _3093;
                        float _3094;
                        vec4 _3109;
                        vec3 _3121;
                        vec4 _3136;
                        vec4 _3151;
                        float _3197;
                        bool _3198;
                        for (;;)
                        {
                            uint _3078 = ((_2854 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3067));
                            _3068 = (_3067 + 4294967295u) & _3067;
                            uint _3080 = _3078 * 40u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            _3094 = _3093.w;
                            uint _3096 = (_3078 * 40u) + 4u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3111 = (_3078 * 40u) + 8u;
                            _3121 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x));
                            uint _3123 = (_3078 * 40u) + 16u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            uint _3138 = (_3078 * 40u) + 20u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            uint _3153 = (_3078 * 40u) + 24u;
                            vec4 _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3172 = (_3078 * 40u) + 28u;
                            vec4 _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            _3197 = fma(_2451, _3185.z, fma(_2450, _3185.y, _3185.x * _2449)) + _3185.w;
                            _3198 = !((fma(_2451, _3166.z, fma(_2450, _3166.y, _3166.x * _2449)) + _3166.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3198)
                            {
                                float _3225 = _3093.x - _2449;
                                float _3226 = _3093.y - _2450;
                                float _3227 = _3093.z - _2451;
                                float _3228 = dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227));
                                float _3231 = inversesqrt(_3228);
                                float _3232 = _3231 * _3225;
                                float _3233 = _3231 * _3226;
                                float _3234 = _3231 * _3227;
                                float _3238 = 1.0 - (_3228 / (_3094 * _3094));
                                float _4318 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3239 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                                float _3243 = sqrt(_3228) * _3109.w;
                                float _3245 = 1.39999997615814208984375 / (_3243 + 1.39999997615814208984375);
                                float _3246 = _3245 * _3245;
                                float _3249 = ((1.0 - _3246) * dot(vec3(_3232, _3233, _3234), vec3(_754, _757, _760))) + _3246;
                                float _3252 = _3243 * _3243;
                                float _3256 = (fma(_2451, _3136.z, fma(_2450, _3136.y, _3136.x * _2449)) + _3136.w) / _3197;
                                float _3257 = (fma(_2451, _3151.z, fma(_2450, _3151.y, _3151.x * _2449)) + _3151.w) / _3197;
                                float _3261 = 1.0 - dot(vec2(_3256, _3257), vec2(_3256, _3257));
                                float _4334 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3262 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                                float _3263 = _3262 * (((isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0))) * _3239) / ((_3252 * 0.699999988079071044921875) + 1.0));
                                float _3275 = exp2(log2(1.0 / ((_3252 * 3.5) + 5.0)) * 0.25);
                                float _3276 = 1.0 - _814;
                                float _3283 = sqrt(1.0 - ((1.0 - (_3276 * _3276)) * (1.0 - (_3275 * _3275))));
                                float _3284 = _3283 * _3283;
                                float _3285 = _3284 * _3284;
                                float _3286 = _3232 - _2735;
                                float _3287 = _3233 - _2736;
                                float _3288 = _3234 - _2737;
                                float _3292 = inversesqrt(dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288)));
                                float _3296 = dot(vec3(_754, _757, _760), vec3((-0.0) - _2735, (-0.0) - _2736, (-0.0) - _2737));
                                float _4345 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3299 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                                float _3300 = dot(vec3(_754, _757, _760), vec3(_3292 * _3286, _3292 * _3287, _3292 * _3288));
                                float _4356 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3303 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                                float _3307 = ((_3303 * _3303) * (_3285 + (-1.0))) + 1.0;
                                float _3308 = _3245 * _3284;
                                float _3309 = _3308 * _3308;
                                float _3315 = ((1.0 - _3309) * dot(vec3(_754, _757, _760), vec3(_3232, _3233, _3234))) + _3309;
                                float _4367 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3316 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3317 = 1.0 - _3284;
                                float _3327 = (0.5 / (((_3316 * ((_3299 * _3317) + _3284)) + 9.9999999392252902907785028219223e-09) + (((_3316 * _3317) + _3284) * _3299))) * _3316;
                                float _4378 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3337 = (_3262 * _3239) * (((_3285 * 3.1415927410125732421875) * (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) / ((_3307 * _3307) * ((_3252 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3337 * _3121.x;
                                frontier_phi_73_pred_1 = _3337 * _3121.y;
                                frontier_phi_73_pred_2 = _3263 * _3109.z;
                                frontier_phi_73_pred_3 = _3263 * _3109.y;
                                frontier_phi_73_pred_4 = _3263 * _3109.x;
                                frontier_phi_73_pred_5 = _3337 * _3121.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3341 = frontier_phi_73_pred;
                            _3342 = frontier_phi_73_pred_1;
                            _3346 = frontier_phi_73_pred_2;
                            _3345 = frontier_phi_73_pred_3;
                            _3344 = frontier_phi_73_pred_4;
                            _3343 = frontier_phi_73_pred_5;
                            _3051 = _3344 + _3064;
                            _3052 = _3345 + _3065;
                            _3053 = _3346 + _3066;
                            _3048 = _3341 + _3061;
                            _3049 = _3342 + _3062;
                            _3050 = _3343 + _3063;
                            if (_3068 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3068;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3051;
                        frontier_phi_67_pred_1 = _3052;
                        frontier_phi_67_pred_2 = _3053;
                        frontier_phi_67_pred_3 = _3050;
                        frontier_phi_67_pred_4 = _3049;
                        frontier_phi_67_pred_5 = _3048;
                    }
                    _2716 = frontier_phi_67_pred;
                    _2718 = frontier_phi_67_pred_1;
                    _2720 = frontier_phi_67_pred_2;
                    _2714 = frontier_phi_67_pred_3;
                    _2712 = frontier_phi_67_pred_4;
                    _2710 = frontier_phi_67_pred_5;
                    uint _2855 = _2854 + 1u;
                    if (_2855 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2848 = _2710;
                        _2849 = _2712;
                        _2850 = _2714;
                        _2851 = _2716;
                        _2852 = _2718;
                        _2853 = _2720;
                        _2854 = _2855;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2718;
                frontier_phi_55_56_ladder_1 = _2720;
                frontier_phi_55_56_ladder_2 = _2716;
                frontier_phi_55_56_ladder_3 = _2714;
                frontier_phi_55_56_ladder_4 = _2712;
                frontier_phi_55_56_ladder_5 = _2710;
            }
            else
            {
                frontier_phi_55_56_ladder = _2604;
                frontier_phi_55_56_ladder_1 = _2606;
                frontier_phi_55_56_ladder_2 = _2602;
                frontier_phi_55_56_ladder_3 = _2600;
                frontier_phi_55_56_ladder_4 = _2598;
                frontier_phi_55_56_ladder_5 = _2596;
            }
            _2709 = frontier_phi_55_56_ladder_5;
            _2711 = frontier_phi_55_56_ladder_4;
            _2713 = frontier_phi_55_56_ladder_3;
            _2715 = frontier_phi_55_56_ladder_2;
            _2717 = frontier_phi_55_56_ladder;
            _2719 = frontier_phi_55_56_ladder_1;
        }
        float _2724 = isnan(1.0) ? _798 : (isnan(_798) ? 1.0 : min(_798, 1.0));
        _2508 = (_2724 * _2715) + _1963;
        _2510 = (_2724 * _2717) + _1965;
        _2512 = (_2724 * _2719) + _1967;
        _2514 = ((_2709 * 0.039999999105930328369140625) * _2724) + _2293;
        _2516 = ((_2711 * 0.039999999105930328369140625) * _2724) + _2295;
        _2518 = ((_2713 * 0.039999999105930328369140625) * _2724) + _2297;
    }
    else
    {
        _2508 = _1963;
        _2510 = _1965;
        _2512 = _1967;
        _2514 = _2293;
        _2516 = _2295;
        _2518 = _2297;
    }
    float _4394 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4405 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4416 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    uint _2538 = _234 + 6u;
    float _2546 = _735 / cbSceneParam._m0[86u].x;
    float _2547 = _736 / cbSceneParam._m0[86u].y;
    vec4 _2561 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2546, _2547, (log2((isnan(cbSceneParam._m0[77u].w) ? _668 : (isnan(_668) ? cbSceneParam._m0[77u].w : min(_668, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2563 = _2561.x;
    float _2564 = _2561.y;
    float _2565 = _2561.z;
    float _2566 = _2561.w;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    if (_668 > cbSceneParam._m0[78u].w)
    {
        float _2621 = isnan(_668) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _668 : min(cbSceneParam._m0[80u].w, _668));
        float _2622 = _2621 / _668;
        float _2633 = _2622 * _720;
        float _2634 = _721 * _2622;
        float _2635 = (-0.0) - _2634;
        float _2637 = _2622 * _722;
        float _2639 = (cbSceneParam._m0[77u].w * _2635) / _2621;
        float _2640 = _2639 + cbSceneParam._m0[79u].w;
        float _2641 = cbSceneParam._m0[79u].w - _2634;
        float _2647 = sqrt(((_2633 * _2633) + (_2634 * _2634)) + (_2637 * _2637));
        float _2650 = (1.0 - (cbSceneParam._m0[77u].w / _2621)) * _2647;
        float _2655 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2657 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2810;
        if (abs((_2635 - _2639) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2810 = ((((_2640 > 0.0) ? exp2(_2655 * _2640) : (2.0 - exp2(_2657 * _2640))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2650;
        }
        else
        {
            float _2770 = 1.0 / cbSceneParam._m0[80u].x;
            float _2771 = isnan(_2641) ? _2640 : (isnan(_2640) ? _2641 : max(_2640, _2641));
            float _2772 = isnan(_2641) ? _2640 : (isnan(_2640) ? _2641 : min(_2640, _2641));
            float _2781 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : min(_2771, 0.0));
            float _2782 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : min(_2772, 0.0));
            _2810 = ((abs(_2647 / _2635) * cbSceneParam._m0[80u].y) * ((((_2781 - _2782) * 2.0) - ((exp2(_2655 * (isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0)))) - exp2(_2655 * (isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0))))) * _2770)) - ((exp2(_2657 * _2781) - exp2(_2657 * _2782)) * _2770))) + (_2650 * cbSceneParam._m0[80u].z);
        }
        vec4 _2812 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2546, _2547, 1.0), 0.0);
        float _2821 = exp2((_2810 * (-1.44269502162933349609375)) * (1.0 - _2812.w));
        float _2822 = log2(_2821);
        float _2838 = log2(_2566);
        _2659 = (exp2(_2838 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2822 * cbSceneParam._m0[78u].x)) * _2812.x) / cbSceneParam._m0[78u].x)) + _2563;
        _2661 = (exp2(_2838 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2822 * cbSceneParam._m0[78u].y)) * _2812.y) / cbSceneParam._m0[78u].y)) + _2564;
        _2663 = (exp2(_2838 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2822 * cbSceneParam._m0[78u].z)) * _2812.z) / cbSceneParam._m0[78u].z)) + _2565;
        _2665 = _2821 * _2566;
    }
    else
    {
        _2659 = _2563;
        _2661 = _2564;
        _2663 = _2565;
        _2665 = _2566;
    }
    float _2677 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2678 = _2677 == 3.0;
    float _2679 = log2(_2665);
    float _2686 = exp2(_2679 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2508 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _798))) + ((_2514 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1603)) * cbPerFrame._m0[3u].x));
    float _2687 = exp2(_2679 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_2510 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _798))) + ((_2516 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1603)) * cbPerFrame._m0[3u].x));
    float _2688 = exp2(_2679 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2512 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _798))) + ((_2518 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1603)) * cbPerFrame._m0[3u].x));
    float _2697 = (_2677 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2697 * (_2678 ? _2686 : (_2686 + (cbSceneParam._m0[72u].w * _2659)));
    SV_Target.y = _2697 * (_2678 ? _2687 : (_2687 + (cbSceneParam._m0[72u].w * _2661)));
    SV_Target.z = _2697 * (_2678 ? _2688 : (_2688 + (cbSceneParam._m0[72u].w * _2663)));
    SV_Target.w = cbInstanceData._m0[_2538].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2538].w;
}


