#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1024;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _246) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _247) + cbTextureTilingScale._m0[14u].w));
    vec4 _313 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _246) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _247) + cbTextureTilingScale._m0[20u].w));
    vec4 _339 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _343 = _339.z;
    float _347 = (_339.x * 2.0) + (-1.0);
    float _348 = (_339.y * 2.0) + (-1.0);
    float _349 = dot(vec2(_347, _348), vec2(_347, _348));
    float _3355 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _355 = sqrt(1.0 - (isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0))));
    float _360 = _347 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_313.x * 2.0) + (-1.0)));
    float _361 = _348 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_313.y * 2.0) + (-1.0)));
    float _364 = fma(_355, _214, fma(_361, _221, _360 * _207));
    float _367 = fma(_355, _215, fma(_361, _222, _360 * _208));
    float _370 = fma(_355, _216, fma(_361, _223, _360 * _209));
    float _374 = inversesqrt(dot(vec3(_364, _367, _370), vec3(_364, _367, _370)));
    vec4 _410 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _412 = _410.x;
    float _413 = 1.0 - _412;
    float _422 = (cbMtdParam._m0[19u].x + dot(vec4(_374 * _364, _374 * _367, _374 * _370, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_412 - _413) * cbMtdParam._m0[24u].z) + _413) * cbMtdParam._m0[21u].z);
    float _3366 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
    float _430 = (_423 * ((_293.x * cbMtdParam._m0[18u].x) - _272)) + _272;
    float _431 = (_423 * ((_293.y * cbMtdParam._m0[18u].y) - _273)) + _273;
    float _432 = (_423 * ((_293.z * cbMtdParam._m0[18u].z) - _274)) + _274;
    float _437 = (((_313.z - _343) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _343;
    vec4 _450 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _457 = (_450.x * 2.0) + (-1.0);
    float _458 = (_450.y * 2.0) + (-1.0);
    float _459 = dot(vec2(_457, _458), vec2(_457, _458));
    float _3377 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _467 = ((_450.z - _437) * _423) + _437;
    float _477 = ((sqrt(1.0 - (isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0)))) - _355) * _423) + _355;
    float _480 = (((_457 - _360) * _423) + _360) + (cbMtdParam._m0[21u].x * _360);
    float _481 = (((_458 - _361) * _423) + _361) + (cbMtdParam._m0[21u].x * _361);
    float _486 = cbMtdParam._m0[22u].x + _339.w;
    float _489 = fma(_477, _214, fma(_481, _221, _480 * _207));
    float _492 = fma(_477, _215, fma(_481, _222, _480 * _208));
    float _495 = fma(_477, _216, fma(_481, _223, _480 * _209));
    float _499 = inversesqrt(dot(vec3(_489, _492, _495), vec3(_489, _492, _495)));
    float _500 = _499 * _489;
    float _501 = _499 * _492;
    float _502 = _499 * _495;
    float _3388 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _503 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
    float _3399 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _3410 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3421 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _3432 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _521 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _572 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _562);
    float _573 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _562);
    float _574 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _562);
    float _578 = inversesqrt(dot(vec3(_572, _573, _574), vec3(_572, _573, _574)));
    float _579 = _572 * _578;
    float _580 = _573 * _578;
    float _581 = _574 * _578;
    float _587 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _588 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _609 = fma(_502, cbSceneParam._m0[5u].z, fma(_501, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _500));
    float _612 = fma(_502, cbSceneParam._m0[6u].z, fma(_501, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _500));
    float _615 = fma(_502, cbSceneParam._m0[7u].z, fma(_501, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _500));
    uint _629 = (_226 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _635 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0)))) * cbInstanceData._m0[_629].x;
    float _636 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0)))) * cbInstanceData._m0[_629].y;
    float _637 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0)))) * cbInstanceData._m0[_629].z;
    float _3443 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
    float _3454 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _639 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    float _3465 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    vec4 _649 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _587, cbSceneParam._m0[86u].y * _588));
    float _653 = ((isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) * TEXCOORD_5.w) * _649.x;
    float _654 = dot(vec3(_500, _501, _502), vec3(_579, _580, _581));
    float _657 = _654 * 2.0;
    float _661 = (_657 * _500) - _579;
    float _662 = (_657 * _501) - _580;
    float _663 = (_657 * _502) - _581;
    float _667 = abs(dot(vec3(_579, _580, _581), vec3(_500, _501, _502)));
    float _3476 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _669 = sqrt(_503);
    float _682 = exp2((_669 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_669 * 3.0));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _718 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _722 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1023;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _748 = fma(_722, cbModelParam._m0[26u].z, fma(_718, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _714));
        float _752 = fma(_722, cbModelParam._m0[27u].z, fma(_718, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _714));
        float _756 = fma(_722, cbModelParam._m0[28u].z, fma(_718, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _714));
        float _781 = _714 + _500;
        float _782 = _718 + _501;
        float _783 = _722 + _502;
        float _793 = fma(_783, cbModelParam._m0[26u].z, fma(_782, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _781)) - _748;
        float _794 = fma(_783, cbModelParam._m0[27u].z, fma(_782, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _781)) - _752;
        float _795 = fma(_783, cbModelParam._m0[28u].z, fma(_782, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _781)) - _756;
        float _799 = inversesqrt(dot(vec3(_793, _794, _795), vec3(_793, _794, _795)));
        float _812 = ((_799 * _793) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_748 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _813 = ((_799 * _794) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_752 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _814 = ((_799 * _795) / cbModelParam._m0[34u].z) + ((((((_756 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        float _851 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_817.x + (-0.5));
        float _853 = _851 * (_817.y + (-0.5));
        float _854 = _851 * (_817.z + (-0.5));
        float _861 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_824.x + (-0.5));
        float _863 = _861 * (_824.y + (-0.5));
        float _864 = _861 * (_824.z + (-0.5));
        float _871 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_831.x + (-0.5));
        float _873 = _871 * (_831.y + (-0.5));
        float _874 = _871 * (_831.z + (-0.5));
        float _881 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_838.x + (-0.5));
        float _883 = _881 * (_838.y + (-0.5));
        float _884 = _881 * (_838.z + (-0.5));
        float _885 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _886 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = _852 * 0.5;
        float _889 = _862 * 0.5;
        float _890 = _872 * 0.5;
        float _891 = dot(vec3(_888, _889, _890), vec3(_888, _889, _890));
        float _896 = (_891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_891);
        float _905 = (dot(vec3(_500, _501, _502), vec3(_896 * _888, _896 * _889, _896 * _890)) + 1.0) * 0.5;
        float _3502 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _915 = sqrt(((_889 * _889) + (_888 * _888)) + (_890 * _890)) / (_885 + 9.9999997473787516355514526367188e-06);
        float _3513 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _917 = _916 * 2.0;
        float _921 = (1.0 - _916) / (_916 + 1.0);
        float _3524 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _931 = ((((1.0 - _922) * (_917 + 2.0)) * exp2(log2(isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * (_917 + 1.0))) + _922) * _885;
        float _932 = _853 * 0.5;
        float _933 = _863 * 0.5;
        float _934 = _873 * 0.5;
        float _935 = dot(vec3(_932, _933, _934), vec3(_932, _933, _934));
        float _940 = (_935 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_935);
        float _948 = (dot(vec3(_500, _501, _502), vec3(_940 * _932, _940 * _933, _940 * _934)) + 1.0) * 0.5;
        float _3535 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _957 = sqrt(((_933 * _933) + (_932 * _932)) + (_934 * _934)) / (_886 + 9.9999997473787516355514526367188e-06);
        float _3546 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _959 = _958 * 2.0;
        float _963 = (1.0 - _958) / (_958 + 1.0);
        float _3557 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _973 = ((((1.0 - _964) * (_959 + 2.0)) * exp2(log2(isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * (_959 + 1.0))) + _964) * _886;
        float _974 = _854 * 0.5;
        float _975 = _864 * 0.5;
        float _976 = _874 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _990 = (dot(vec3(_500, _501, _502), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _999 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _3590 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_1001 + 1.0))) + _1006) * _887;
        _1023 = _854;
        _1025 = _853;
        _1026 = _852;
        _1027 = _864;
        _1028 = _863;
        _1029 = _862;
        _1030 = _874;
        _1031 = _873;
        _1032 = _872;
        _1033 = _887;
        _1034 = _886;
        _1035 = _885;
        _1036 = cbModelParam._m0[36u].z * (isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0)));
        _1037 = cbModelParam._m0[36u].z * (isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0)));
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
    }
    else
    {
        _1023 = _1024;
        _1025 = _1024;
        _1026 = _1024;
        _1027 = _1024;
        _1028 = _1024;
        _1029 = _1024;
        _1030 = _1024;
        _1031 = _1024;
        _1032 = _1024;
        _1033 = _1024;
        _1034 = _1024;
        _1035 = _1024;
        _1036 = 0.0;
        _1037 = 0.0;
        _1038 = 0.0;
    }
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1063 = fma(_722, cbModelParam._m0[30u].z, fma(_718, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _714));
        float _1067 = fma(_722, cbModelParam._m0[31u].z, fma(_718, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _714));
        float _1071 = fma(_722, cbModelParam._m0[32u].z, fma(_718, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _714));
        float _1094 = _714 + _500;
        float _1095 = _718 + _501;
        float _1096 = _722 + _502;
        float _1106 = fma(_1096, cbModelParam._m0[30u].z, fma(_1095, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1094)) - _1063;
        float _1107 = fma(_1096, cbModelParam._m0[31u].z, fma(_1095, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1094)) - _1067;
        float _1108 = fma(_1096, cbModelParam._m0[32u].z, fma(_1095, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1094)) - _1071;
        float _1112 = inversesqrt(dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108)));
        float _1125 = ((_1112 * _1106) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1063 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1112 * _1107) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1067 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1127 = ((_1112 * _1108) / cbModelParam._m0[35u].z) + ((((((_1071 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        float _1162 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1129.x + (-0.5));
        float _1164 = _1162 * (_1129.y + (-0.5));
        float _1165 = _1162 * (_1129.z + (-0.5));
        float _1172 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1136.x + (-0.5));
        float _1174 = _1172 * (_1136.y + (-0.5));
        float _1175 = _1172 * (_1136.z + (-0.5));
        float _1182 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1143.x + (-0.5));
        float _1184 = _1182 * (_1143.y + (-0.5));
        float _1185 = _1182 * (_1143.z + (-0.5));
        float _1192 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1150.x + (-0.5));
        float _1194 = _1192 * (_1150.y + (-0.5));
        float _1195 = _1192 * (_1150.z + (-0.5));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = _1163 * 0.5;
        float _1200 = _1173 * 0.5;
        float _1201 = _1183 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_500, _501, _502), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3631 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3642 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3653 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_1226 + 1.0))) + _1231) * _1196;
        float _1241 = _1164 * 0.5;
        float _1242 = _1174 * 0.5;
        float _1243 = _1184 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_500, _501, _502), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _3686 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_1268 + 1.0))) + _1273) * _1197;
        float _1283 = _1165 * 0.5;
        float _1284 = _1175 * 0.5;
        float _1285 = _1185 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_500, _501, _502), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _3719 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1310 + 1.0))) + _1315) * _1198;
        _1332 = _1165;
        _1333 = _1164;
        _1334 = _1163;
        _1335 = _1175;
        _1336 = _1174;
        _1337 = _1173;
        _1338 = _1185;
        _1339 = _1184;
        _1340 = _1183;
        _1341 = _1198;
        _1342 = _1197;
        _1343 = _1196;
        _1344 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1345 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1346 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
    }
    else
    {
        _1332 = _1024;
        _1333 = _1024;
        _1334 = _1024;
        _1335 = _1024;
        _1336 = _1024;
        _1337 = _1024;
        _1338 = _1024;
        _1339 = _1024;
        _1340 = _1024;
        _1341 = _1024;
        _1342 = _1024;
        _1343 = _1024;
        _1344 = 0.0;
        _1345 = 0.0;
        _1346 = 0.0;
    }
    float _1356 = (cbModelParam._m0[1u].x * (_1344 - _1036)) + _1036;
    float _1357 = (cbModelParam._m0[1u].x * (_1345 - _1037)) + _1037;
    float _1358 = (cbModelParam._m0[1u].x * (_1346 - _1038)) + _1038;
    float _1379 = fma(_1358, cbSceneParam._m0[89u].z, fma(_1357, cbSceneParam._m0[89u].y, _1356 * cbSceneParam._m0[89u].x));
    float _1382 = fma(_1358, cbSceneParam._m0[90u].z, fma(_1357, cbSceneParam._m0[90u].y, _1356 * cbSceneParam._m0[90u].x));
    float _1385 = fma(_1358, cbSceneParam._m0[91u].z, fma(_1357, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1356));
    float _1400 = _661 * 0.5;
    float _1401 = _662 * 0.5;
    float _1402 = _663 * 0.5;
    float _1403 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1334, _1337, _1340, _1343));
    float _1406 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1333, _1336, _1339, _1342));
    float _1409 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1332, _1335, _1338, _1341));
    float _1443;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1416 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1023, _1027, _1030, _1033));
        float _1420 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1025, _1028, _1031, _1034));
        float _1424 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1026, _1029, _1032, _1035));
        float _1431 = dot(vec4(cbModelParam._m0[39u]), vec4(_1400, _1401, _1402, 1.0));
        _1443 = dot(vec3(isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)), isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1431) ? 0.0 : (isnan(0.0) ? _1431 : max(0.0, _1431))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1443 = 1.0;
    }
    float _1454;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1445 = dot(vec4(cbModelParam._m0[40u]), vec4(_1400, _1401, _1402, 1.0));
        _1454 = dot(vec3(isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1445) ? 0.0 : (isnan(0.0) ? _1445 : max(0.0, _1445))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1454 = 1.0;
    }
    float _1458 = (_1454 * cbModelParam._m0[1u].x) + (_1443 * (1.0 - cbModelParam._m0[1u].x));
    float _1468 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _503);
    float _1469 = isnan(_1468) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1468 : min(cbModelParam._m0[25u].z, _1468));
    float _1549;
    float _1551;
    float _1553;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1516 = fma(_722, cbModelParam._m0[13u].z, fma(_718, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _714)) + cbModelParam._m0[13u].w;
        float _1520 = fma(_722, cbModelParam._m0[14u].z, fma(_718, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _714)) + cbModelParam._m0[14u].w;
        float _1524 = fma(_722, cbModelParam._m0[15u].z, fma(_718, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _714)) + cbModelParam._m0[15u].w;
        float _1527 = fma(_663, cbModelParam._m0[13u].z, fma(_662, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _661));
        float _1530 = fma(_663, cbModelParam._m0[14u].z, fma(_662, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _661));
        float _1533 = fma(_663, cbModelParam._m0[15u].z, fma(_662, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _661));
        float _1561;
        if (_1527 > 0.0)
        {
            _1561 = abs((1.0 - _1516) / _1527);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1516 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1561 = frontier_phi_14_12_ladder;
        }
        float _1784;
        if (_1530 > 0.0)
        {
            _1784 = abs((1.0 - _1520) / _1530);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1520 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1784 = frontier_phi_23_19_ladder;
        }
        float _2030;
        if (_1533 > 0.0)
        {
            _2030 = abs((1.0 - _1524) / _1533);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1524 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2030 = frontier_phi_35_30_ladder;
        }
        float _2032 = isnan(_1784) ? _1561 : (isnan(_1561) ? _1784 : min(_1561, _1784));
        float _2033 = isnan(_2030) ? _2032 : (isnan(_2032) ? _2030 : min(_2032, _2030));
        float _2037 = (_2033 * _1527) + _1516;
        float _2038 = (_2033 * _1530) + _1520;
        float _2039 = (_2033 * _1533) + _1524;
        float _2040 = _2033 * 9.9999997473787516355514526367188e-05;
        float _2042 = (-1.0) - _2040;
        float _2044 = _2040 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2039 > _2044) || ((_2039 < _2042) || ((_2038 > _2044) || ((_2038 < _2042) || ((_2037 < _2042) || (_2037 > _2044))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2163 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2039, cbModelParam._m0[9u].z, fma(_2038, cbModelParam._m0[9u].y, _2037 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2039, cbModelParam._m0[10u].z, fma(_2038, cbModelParam._m0[10u].y, _2037 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2039, cbModelParam._m0[11u].z, fma(_2038, cbModelParam._m0[11u].y, _2037 * cbModelParam._m0[11u].x))), _1469);
            frontier_phi_13_35_ladder = _2163.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2163.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2163.x * cbModelParam._m0[1u].y;
        }
        _1549 = frontier_phi_13_35_ladder_2;
        _1551 = frontier_phi_13_35_ladder_1;
        _1553 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1537 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_661, _662, _663), _1469);
        _1549 = _1537.x * cbModelParam._m0[1u].y;
        _1551 = _1537.y * cbModelParam._m0[1u].y;
        _1553 = _1537.z * cbModelParam._m0[1u].y;
    }
    float _1557 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _503);
    float _1558 = isnan(_1557) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1557 : min(cbModelParam._m0[25u].w, _1557));
    float _1647;
    float _1649;
    float _1651;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1611 = fma(_722, cbModelParam._m0[21u].z, fma(_718, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _714)) + cbModelParam._m0[21u].w;
        float _1615 = fma(_722, cbModelParam._m0[22u].z, fma(_718, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _714)) + cbModelParam._m0[22u].w;
        float _1619 = fma(_722, cbModelParam._m0[23u].z, fma(_718, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _714)) + cbModelParam._m0[23u].w;
        float _1622 = fma(_663, cbModelParam._m0[21u].z, fma(_662, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _661));
        float _1625 = fma(_663, cbModelParam._m0[22u].z, fma(_662, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _661));
        float _1628 = fma(_663, cbModelParam._m0[23u].z, fma(_662, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _661));
        float _1789;
        if (_1622 > 0.0)
        {
            _1789 = abs((1.0 - _1611) / _1622);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1611 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1789 = frontier_phi_25_21_ladder;
        }
        float _2057;
        if (_1625 > 0.0)
        {
            _2057 = abs((1.0 - _1615) / _1625);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1615 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2057 = frontier_phi_37_32_ladder;
        }
        float _2262;
        if (_1628 > 0.0)
        {
            _2262 = abs((1.0 - _1619) / _1628);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1619 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2262 = frontier_phi_46_43_ladder;
        }
        float _2264 = isnan(_2057) ? _1789 : (isnan(_1789) ? _2057 : min(_1789, _2057));
        float _2265 = isnan(_2262) ? _2264 : (isnan(_2264) ? _2262 : min(_2264, _2262));
        float _2269 = (_2265 * _1622) + _1611;
        float _2270 = (_2265 * _1625) + _1615;
        float _2271 = (_2265 * _1628) + _1619;
        float _2272 = _2265 * 9.9999997473787516355514526367188e-05;
        float _2273 = (-1.0) - _2272;
        float _2275 = _2272 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2271 > _2275) || ((_2271 < _2273) || ((_2270 > _2275) || ((_2270 < _2273) || ((_2269 < _2273) || (_2269 > _2275))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2470 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2271, cbModelParam._m0[17u].z, fma(_2270, cbModelParam._m0[17u].y, _2269 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2271, cbModelParam._m0[18u].z, fma(_2270, cbModelParam._m0[18u].y, _2269 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2271, cbModelParam._m0[19u].z, fma(_2270, cbModelParam._m0[19u].y, _2269 * cbModelParam._m0[19u].x))), _1558);
            frontier_phi_22_46_ladder = _2470.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2470.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2470.x * cbModelParam._m0[1u].z;
        }
        _1647 = frontier_phi_22_46_ladder_2;
        _1649 = frontier_phi_22_46_ladder_1;
        _1651 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1631 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_661, _662, _663), _1558);
        _1647 = _1631.x * cbModelParam._m0[1u].z;
        _1649 = _1631.y * cbModelParam._m0[1u].z;
        _1651 = _1631.z * cbModelParam._m0[1u].z;
    }
    float _1663 = ((((1.0 - _682) * ((_669 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_682 * _669)) * _653;
    float _1664 = _1663 * ((cbModelParam._m0[1u].w * (_1647 - _1549)) + _1549);
    float _1665 = _1663 * ((cbModelParam._m0[1u].w * (_1649 - _1551)) + _1551);
    float _1666 = _1663 * ((cbModelParam._m0[1u].w * (_1651 - _1553)) + _1553);
    float _1669 = fma(_1666, cbSceneParam._m0[89u].z, fma(_1665, cbSceneParam._m0[89u].y, _1664 * cbSceneParam._m0[89u].x));
    float _1672 = fma(_1666, cbSceneParam._m0[90u].z, fma(_1665, cbSceneParam._m0[90u].y, _1664 * cbSceneParam._m0[90u].x));
    float _1675 = fma(_1666, cbSceneParam._m0[91u].z, fma(_1665, cbSceneParam._m0[91u].y, _1664 * cbSceneParam._m0[91u].x));
    vec4 _1683 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_587, _588));
    float _1685 = _1683.w;
    float _1697 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1685);
    float _1698 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1685);
    float _1699 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1685);
    uvec4 _1703 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1705 = _1703.x * 14u;
    uint _1706 = _1705 + 13u;
    float _1713 = _653 + (-1.0);
    float _1718 = (cbLight._m0[_1706].x * _1713) + 1.0;
    float _1719 = (cbLight._m0[_1706].y * _1713) + 1.0;
    float _1720 = (cbLight._m0[_1706].z * _1713) + 1.0;
    float _1721 = (cbLight._m0[_1706].w * _1713) + 1.0;
    uint _1722 = _1705 + 5u;
    float _1728 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
    uint _1732 = _1705 + 4u;
    float _1742 = isnan(1.0) ? _1718 : (isnan(_1718) ? 1.0 : min(_1718, 1.0));
    uint _1746 = _1705 | 1u;
    float _1757 = dot(vec3(cbLight._m0[_1705].xyz), vec3(_500, _501, _502));
    float _1760 = dot(vec3(cbLight._m0[_1746].xyz), vec3(_500, _501, _502));
    float _3855 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _3866 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1765 = (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * 0.3183098733425140380859375;
    float _1767 = (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * 0.3183098733425140380859375;
    float _1774 = ((cbLight._m0[_1722].x * _1728) * _1767) + (((cbLight._m0[_1732].x * _1697) * _1742) * _1765);
    float _1775 = ((_1728 * cbLight._m0[_1722].y) * _1767) + (((cbLight._m0[_1732].y * _1698) * _1742) * _1765);
    float _1776 = ((_1728 * cbLight._m0[_1722].z) * _1767) + (((cbLight._m0[_1732].z * _1699) * _1742) * _1765);
    uvec4 _1781 = floatBitsToUint(cbLight._m0[_1705 + 12u]);
    bool _1783 = _1781.x == 0u;
    float _1794;
    float _1796;
    float _1798;
    if (_1783)
    {
        _1794 = _1774;
        _1796 = _1775;
        _1798 = _1776;
    }
    else
    {
        uint _1802 = _1705 + 6u;
        float _1818 = (dot(vec3(cbLight._m0[_1705 + 2u].xyz), vec3(_500, _501, _502)) * 0.5) + 0.5;
        float _1819 = _1818 * _1818;
        float _3877 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1820 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1821 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _1794 = (((cbLight._m0[_1802].x * 0.3183098733425140380859375) * _1820) * _1821) + _1774;
        _1796 = (((cbLight._m0[_1802].y * 0.3183098733425140380859375) * _1820) * _1821) + _1775;
        _1798 = (((cbLight._m0[_1802].z * 0.3183098733425140380859375) * _1820) * _1821) + _1776;
    }
    bool _1801 = _1781.y == 0u;
    float _1839;
    float _1841;
    float _1843;
    if (_1801)
    {
        _1839 = _1794;
        _1841 = _1796;
        _1843 = _1798;
    }
    else
    {
        uint _2001 = _1705 + 7u;
        float _2017 = (dot(vec3(cbLight._m0[_1705 + 3u].xyz), vec3(_500, _501, _502)) * 0.5) + 0.5;
        float _2018 = _2017 * _2017;
        float _3893 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2019 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _2020 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
        _1839 = (((cbLight._m0[_2001].x * 0.3183098733425140380859375) * _2019) * _2020) + _1794;
        _1841 = (((cbLight._m0[_2001].y * 0.3183098733425140380859375) * _2019) * _2020) + _1796;
        _1843 = (((cbLight._m0[_2001].z * 0.3183098733425140380859375) * _2019) * _2020) + _1798;
    }
    uint _1846 = _1705 + 8u;
    float _1859 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1705].w)) * _503) * 0.949999988079071044921875);
    float _1860 = _1859 * _1859;
    float _1861 = cbLight._m0[_1705].x + _579;
    float _1862 = cbLight._m0[_1705].y + _580;
    float _1863 = cbLight._m0[_1705].z + _581;
    float _1867 = inversesqrt(dot(vec3(_1861, _1862, _1863), vec3(_1861, _1862, _1863)));
    float _1868 = _1867 * _1861;
    float _1869 = _1867 * _1862;
    float _1870 = _1867 * _1863;
    float _1871 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_1705].xyz));
    float _3909 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1874 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _3920 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _1875 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _1876 = dot(vec3(_500, _501, _502), vec3(_1868, _1869, _1870));
    float _3931 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1879 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _1880 = dot(vec3(cbLight._m0[_1705].xyz), vec3(_1868, _1869, _1870));
    float _3942 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1884 = _1860 * _1860;
    float _1888 = ((_1879 * _1879) * (_1884 + (-1.0))) + 1.0;
    float _1899 = (exp2(log2(1.0 - (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1900 = 1.0 - _1860;
    float _1911 = (0.5 / (((_1875 * ((_1874 * _1900) + _1860)) + 9.9999999392252902907785028219223e-09) + (((_1875 * _1900) + _1860) * _1874))) * _1874;
    float _3953 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1913 = (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1884 / ((_1888 * _1888) * 3.141590118408203125));
    uint _1927 = _1705 + 9u;
    float _1938 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1746].w)) * _503) * 0.949999988079071044921875);
    float _1939 = _1938 * _1938;
    float _1940 = cbLight._m0[_1746].x + _579;
    float _1941 = cbLight._m0[_1746].y + _580;
    float _1942 = cbLight._m0[_1746].z + _581;
    float _1946 = inversesqrt(dot(vec3(_1940, _1941, _1942), vec3(_1940, _1941, _1942)));
    float _1947 = _1946 * _1940;
    float _1948 = _1946 * _1941;
    float _1949 = _1946 * _1942;
    float _1950 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_1746].xyz));
    float _3964 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _1954 = dot(vec3(_500, _501, _502), vec3(_1947, _1948, _1949));
    float _3975 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _1958 = dot(vec3(cbLight._m0[_1746].xyz), vec3(_1947, _1948, _1949));
    float _3986 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1962 = _1939 * _1939;
    float _1966 = ((_1957 * _1957) * (_1962 + (-1.0))) + 1.0;
    float _1975 = (exp2(log2(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1976 = 1.0 - _1939;
    float _1986 = (0.5 / (((_1875 * ((_1953 * _1976) + _1939)) + 9.9999999392252902907785028219223e-09) + (((_1875 * _1976) + _1939) * _1953))) * _1953;
    float _3997 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1988 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1962 / ((_1966 * _1966) * 3.141590118408203125));
    float _1998 = (((_1975 * cbLight._m0[_1927].x) * _1988) * _1728) + ((((cbLight._m0[_1846].x * _1697) * _1899) * _1913) * _1742);
    float _1999 = (((_1975 * cbLight._m0[_1927].y) * _1988) * _1728) + ((((cbLight._m0[_1846].y * _1698) * _1899) * _1913) * _1742);
    float _2000 = (((_1975 * cbLight._m0[_1927].z) * _1988) * _1728) + ((((cbLight._m0[_1846].z * _1699) * _1899) * _1913) * _1742);
    float _2062;
    float _2064;
    float _2066;
    if (_1783)
    {
        _2062 = _1998;
        _2064 = _1999;
        _2066 = _2000;
    }
    else
    {
        uint _2068 = _1705 + 2u;
        uint _2072 = _1705 + 10u;
        float _2086 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2068].w)) * _503) * 0.949999988079071044921875);
        float _2087 = _2086 * _2086;
        float _2088 = cbLight._m0[_2068].x + _579;
        float _2089 = cbLight._m0[_2068].y + _580;
        float _2090 = cbLight._m0[_2068].z + _581;
        float _2094 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
        float _2095 = _2094 * _2088;
        float _2096 = _2094 * _2089;
        float _2097 = _2094 * _2090;
        float _2098 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2068].xyz));
        float _4008 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2101 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _2102 = dot(vec3(_500, _501, _502), vec3(_2095, _2096, _2097));
        float _4019 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2105 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _2106 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_2095, _2096, _2097));
        float _4030 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2110 = _2087 * _2087;
        float _2114 = ((_2105 * _2105) * (_2110 + (-1.0))) + 1.0;
        float _2123 = (exp2(log2(1.0 - (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2124 = 1.0 - _2087;
        float _2134 = (0.5 / (((_1875 * ((_2101 * _2124) + _2087)) + 9.9999999392252902907785028219223e-09) + (((_1875 * _2124) + _2087) * _2101))) * _2101;
        float _4041 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2136 = (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_2110 / ((_2114 * _2114) * 3.141590118408203125));
        float _2137 = isnan(1.0) ? _1720 : (isnan(_1720) ? 1.0 : min(_1720, 1.0));
        _2062 = (((_2123 * cbLight._m0[_2072].x) * _2136) * _2137) + _1998;
        _2064 = (((_2123 * cbLight._m0[_2072].y) * _2136) * _2137) + _1999;
        _2066 = (((_2123 * cbLight._m0[_2072].z) * _2136) * _2137) + _2000;
    }
    float _2172;
    float _2174;
    float _2176;
    if (_1801)
    {
        _2172 = _2062;
        _2174 = _2064;
        _2176 = _2066;
    }
    else
    {
        uint _2183 = _1705 + 3u;
        uint _2187 = _1705 + 11u;
        float _2201 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2183].w)) * _503) * 0.949999988079071044921875);
        float _2202 = _2201 * _2201;
        float _2203 = cbLight._m0[_2183].x + _579;
        float _2204 = cbLight._m0[_2183].y + _580;
        float _2205 = cbLight._m0[_2183].z + _581;
        float _2209 = inversesqrt(dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205)));
        float _2210 = _2209 * _2203;
        float _2211 = _2209 * _2204;
        float _2212 = _2209 * _2205;
        float _2213 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2183].xyz));
        float _4057 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2216 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _2217 = dot(vec3(_500, _501, _502), vec3(_2210, _2211, _2212));
        float _4068 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2220 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _2221 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_2210, _2211, _2212));
        float _4079 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2225 = _2202 * _2202;
        float _2229 = ((_2220 * _2220) * (_2225 + (-1.0))) + 1.0;
        float _2238 = (exp2(log2(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2239 = 1.0 - _2202;
        float _2249 = (0.5 / (((_1875 * ((_2216 * _2239) + _2202)) + 9.9999999392252902907785028219223e-09) + (((_1875 * _2239) + _2202) * _2216))) * _2216;
        float _4090 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2251 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_2225 / ((_2229 * _2229) * 3.141590118408203125));
        float _2252 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
        _2172 = (((_2238 * cbLight._m0[_2187].x) * _2251) * _2252) + _2062;
        _2174 = (((_2238 * cbLight._m0[_2187].y) * _2251) * _2252) + _2064;
        _2176 = (((_2238 * cbLight._m0[_2187].z) * _2251) * _2252) + _2066;
    }
    float _2387;
    float _2389;
    float _2391;
    float _2393;
    float _2395;
    float _2397;
    if (_1703.y == 0u)
    {
        float _2327 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2328 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2327;
        float _2329 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2327;
        float _2330 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2327;
        uvec4 _2342 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2343 = _2342.x;
        uint _2354 = uint((float(_2342.y) * floor(float(uint(cbSceneParam._m0[85u].y * _588) / _2343))) + floor(float(uint(cbSceneParam._m0[85u].x * _587) / _2343)));
        float _2364 = (log2(_2330 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2365 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        uint _2368 = uint(isnan(14.0) ? _2365 : (isnan(_2365) ? 14.0 : min(_2365, 14.0)));
        uvec4 _2373 = texelFetch(g_lightClusterGridBuffer, int(((_2368 << 2u) + (_2354 << 6u)) >> 2u));
        uint _2374 = _2373.x;
        uint _2375 = _2342.z;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        if (((((1u << ((_2375 >> 4u) & 15u)) + 4294967295u) & _2374) == 0u) || ((_2375 & 240u) == 0u))
        {
            _2475 = 0.0;
            _2477 = 0.0;
            _2479 = 0.0;
            _2481 = 0.0;
            _2483 = 0.0;
            _2485 = 0.0;
        }
        else
        {
            float _2476;
            float _2478;
            float _2480;
            float _2482;
            float _2484;
            float _2486;
            float _2620 = 0.0;
            float _2621 = 0.0;
            float _2622 = 0.0;
            float _2623 = 0.0;
            float _2624 = 0.0;
            float _2625 = 0.0;
            uint _2626 = 0u;
            uint _2635;
            bool _2636;
            for (;;)
            {
                _2635 = texelFetch(g_lightClassification, int((((_2368 << 5u) + (_2354 << 9u)) + (_2626 << 2u)) >> 2u)).x;
                _2636 = _2635 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2636)
                {
                    frontier_phi_61_pred = _2620;
                    frontier_phi_61_pred_1 = _2625;
                    frontier_phi_61_pred_2 = _2624;
                    frontier_phi_61_pred_3 = _2623;
                    frontier_phi_61_pred_4 = _2622;
                    frontier_phi_61_pred_5 = _2621;
                }
                else
                {
                    float _2744;
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    uint _2750;
                    _2744 = _2620;
                    _2745 = _2621;
                    _2746 = _2622;
                    _2747 = _2623;
                    _2748 = _2624;
                    _2749 = _2625;
                    _2750 = _2635;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    for (;;)
                    {
                        uint _2754 = uint(findLSB(_2750)) + (_2626 << 5u);
                        uint _2751 = (_2750 + 4294967295u) & _2750;
                        uint _2756 = _2754 * 48u;
                        vec4 _2770 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2756)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 3u)).x));
                        uint _2776 = (_2754 * 48u) + 4u;
                        vec4 _2789 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2776)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2776 + 3u)).x));
                        uint _2795 = (_2754 * 48u) + 8u;
                        vec3 _2806 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2795)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 2u)).x));
                        float _2810 = _2770.x - _2328;
                        float _2811 = _2770.y - _2329;
                        float _2812 = _2770.z - _2330;
                        float _2813 = dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812));
                        float _2816 = inversesqrt(_2813);
                        float _2817 = _2816 * _2810;
                        float _2818 = _2816 * _2811;
                        float _2819 = _2816 * _2812;
                        float _2820 = dot(vec3(_609, _612, _615), vec3(_2817, _2818, _2819));
                        float _2825 = 1.0 - (_2813 * _2770.w);
                        float _4116 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                        float _2826 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                        float _2827 = sqrt(_2813) * _2789.w;
                        float _2830 = 1.39999997615814208984375 / (_2827 + 1.39999997615814208984375);
                        float _2831 = _2830 * _2830;
                        float _2834 = ((1.0 - _2831) * _2820) + _2831;
                        float _2837 = _2827 * _2827;
                        float _2841 = ((isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0))) * _2826) / ((_2837 * 0.699999988079071044921875) + 1.0);
                        float _2845 = (-0.0) - _2328;
                        float _2846 = (-0.0) - _2329;
                        float _2847 = (-0.0) - _2330;
                        float _2851 = inversesqrt(dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847)));
                        float _2852 = _2851 * _2845;
                        float _2853 = _2851 * _2846;
                        float _2854 = _2851 * _2847;
                        float _2862 = exp2(log2(1.0 / ((_2837 * 3.5) + 5.0)) * 0.25);
                        float _2863 = 1.0 - _669;
                        float _2870 = sqrt(1.0 - ((1.0 - (_2863 * _2863)) * (1.0 - (_2862 * _2862))));
                        float _2871 = _2870 * _2870;
                        float _2872 = _2871 * _2871;
                        float _2873 = _2852 + _2817;
                        float _2874 = _2853 + _2818;
                        float _2875 = _2854 + _2819;
                        float _2879 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
                        float _2883 = dot(vec3(_609, _612, _615), vec3(_2852, _2853, _2854));
                        float _4132 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2886 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                        float _2887 = dot(vec3(_609, _612, _615), vec3(_2879 * _2873, _2879 * _2874, _2879 * _2875));
                        float _4143 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                        float _2890 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                        float _2894 = ((_2890 * _2890) * (_2872 + (-1.0))) + 1.0;
                        float _2895 = _2830 * _2871;
                        float _2896 = _2895 * _2895;
                        float _2899 = ((1.0 - _2896) * _2820) + _2896;
                        float _4154 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2900 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                        float _2901 = 1.0 - _2871;
                        float _2911 = (0.5 / (((_2900 * ((_2886 * _2901) + _2871)) + 9.9999999392252902907785028219223e-09) + (((_2900 * _2901) + _2871) * _2886))) * _2900;
                        float _4165 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                        float _2922 = (((_2872 * 3.1415927410125732421875) * (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) / ((_2894 * _2894) * ((_2837 * 2.1991131305694580078125) + 3.141590118408203125))) * _2826;
                        _2679 = (_2841 * _2789.x) + _2747;
                        _2680 = (_2841 * _2789.y) + _2748;
                        _2681 = (_2841 * _2789.z) + _2749;
                        _2676 = (_2922 * _2806.x) + _2744;
                        _2677 = (_2922 * _2806.y) + _2745;
                        _2678 = (_2922 * _2806.z) + _2746;
                        if (_2751 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2744 = _2676;
                            _2745 = _2677;
                            _2746 = _2678;
                            _2747 = _2679;
                            _2748 = _2680;
                            _2749 = _2681;
                            _2750 = _2751;
                        }
                    }
                    frontier_phi_61_pred = _2676;
                    frontier_phi_61_pred_1 = _2681;
                    frontier_phi_61_pred_2 = _2680;
                    frontier_phi_61_pred_3 = _2679;
                    frontier_phi_61_pred_4 = _2678;
                    frontier_phi_61_pred_5 = _2677;
                }
                _2476 = frontier_phi_61_pred;
                _2486 = frontier_phi_61_pred_1;
                _2484 = frontier_phi_61_pred_2;
                _2482 = frontier_phi_61_pred_3;
                _2480 = frontier_phi_61_pred_4;
                _2478 = frontier_phi_61_pred_5;
                uint _2627 = _2626 + 1u;
                if (_2627 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2620 = _2476;
                    _2621 = _2478;
                    _2622 = _2480;
                    _2623 = _2482;
                    _2624 = _2484;
                    _2625 = _2486;
                    _2626 = _2627;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2475 = _2476;
            _2477 = _2478;
            _2479 = _2480;
            _2481 = _2482;
            _2483 = _2484;
            _2485 = _2486;
        }
        uvec4 _2489 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2490 = _2489.z;
        uint _2492 = (_2490 >> 8u) & 15u;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        if (((4294967295u << _2492) & _2374) == 0u)
        {
            _2588 = _2475;
            _2590 = _2477;
            _2592 = _2479;
            _2594 = _2481;
            _2596 = _2483;
            _2598 = _2485;
        }
        else
        {
            float _2613 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
            float _2614 = _2613 * _2328;
            float _2615 = _2613 * _2329;
            float _2616 = _2613 * _2330;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2492 < ((_2490 >> 12u) & 15u))
            {
                float _2589;
                float _2591;
                float _2593;
                float _2595;
                float _2597;
                float _2599;
                float _2727 = _2475;
                float _2728 = _2477;
                float _2729 = _2479;
                float _2730 = _2481;
                float _2731 = _2483;
                float _2732 = _2485;
                uint _2733 = _2492;
                uint _2742;
                bool _2743;
                for (;;)
                {
                    _2742 = texelFetch(g_lightClassification, int((((_2368 << 5u) + (_2354 << 9u)) + (_2733 << 2u)) >> 2u)).x;
                    _2743 = _2742 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2743)
                    {
                        frontier_phi_67_pred = _2730;
                        frontier_phi_67_pred_1 = _2731;
                        frontier_phi_67_pred_2 = _2732;
                        frontier_phi_67_pred_3 = _2729;
                        frontier_phi_67_pred_4 = _2728;
                        frontier_phi_67_pred_5 = _2727;
                    }
                    else
                    {
                        float _2927;
                        float _2928;
                        float _2929;
                        float _2930;
                        float _2931;
                        float _2932;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _2940 = _2727;
                        float _2941 = _2728;
                        float _2942 = _2729;
                        float _2943 = _2730;
                        float _2944 = _2731;
                        float _2945 = _2732;
                        uint _2946 = _2742;
                        uint _2947;
                        vec4 _2972;
                        float _2973;
                        vec4 _2988;
                        vec3 _3000;
                        vec4 _3016;
                        vec4 _3031;
                        float _3077;
                        bool _3078;
                        for (;;)
                        {
                            uint _2957 = ((_2733 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2946));
                            _2947 = (_2946 + 4294967295u) & _2946;
                            uint _2959 = _2957 * 40u;
                            _2972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 3u)).x));
                            _2973 = _2972.w;
                            uint _2975 = (_2957 * 40u) + 4u;
                            _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            uint _2990 = (_2957 * 40u) + 8u;
                            _3000 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x));
                            uint _3003 = (_2957 * 40u) + 16u;
                            _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            uint _3018 = (_2957 * 40u) + 20u;
                            _3031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 3u)).x));
                            uint _3033 = (_2957 * 40u) + 24u;
                            vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            uint _3052 = (_2957 * 40u) + 28u;
                            vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            _3077 = fma(_2330, _3065.z, fma(_2329, _3065.y, _3065.x * _2328)) + _3065.w;
                            _3078 = !((fma(_2330, _3046.z, fma(_2329, _3046.y, _3046.x * _2328)) + _3046.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3078)
                            {
                                float _3105 = _2972.x - _2328;
                                float _3106 = _2972.y - _2329;
                                float _3107 = _2972.z - _2330;
                                float _3108 = dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107));
                                float _3111 = inversesqrt(_3108);
                                float _3112 = _3111 * _3105;
                                float _3113 = _3111 * _3106;
                                float _3114 = _3111 * _3107;
                                float _3118 = 1.0 - (_3108 / (_2973 * _2973));
                                float _4176 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3119 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                                float _3123 = sqrt(_3108) * _2988.w;
                                float _3125 = 1.39999997615814208984375 / (_3123 + 1.39999997615814208984375);
                                float _3126 = _3125 * _3125;
                                float _3129 = ((1.0 - _3126) * dot(vec3(_3112, _3113, _3114), vec3(_609, _612, _615))) + _3126;
                                float _3132 = _3123 * _3123;
                                float _3136 = (fma(_2330, _3016.z, fma(_2329, _3016.y, _3016.x * _2328)) + _3016.w) / _3077;
                                float _3137 = (fma(_2330, _3031.z, fma(_2329, _3031.y, _3031.x * _2328)) + _3031.w) / _3077;
                                float _3141 = 1.0 - dot(vec2(_3136, _3137), vec2(_3136, _3137));
                                float _4192 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                                float _3142 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                                float _3143 = _3142 * (((isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0))) * _3119) / ((_3132 * 0.699999988079071044921875) + 1.0));
                                float _3155 = exp2(log2(1.0 / ((_3132 * 3.5) + 5.0)) * 0.25);
                                float _3156 = 1.0 - _669;
                                float _3163 = sqrt(1.0 - ((1.0 - (_3156 * _3156)) * (1.0 - (_3155 * _3155))));
                                float _3164 = _3163 * _3163;
                                float _3165 = _3164 * _3164;
                                float _3166 = _3112 - _2614;
                                float _3167 = _3113 - _2615;
                                float _3168 = _3114 - _2616;
                                float _3172 = inversesqrt(dot(vec3(_3166, _3167, _3168), vec3(_3166, _3167, _3168)));
                                float _3176 = dot(vec3(_609, _612, _615), vec3((-0.0) - _2614, (-0.0) - _2615, (-0.0) - _2616));
                                float _4203 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3179 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                                float _3180 = dot(vec3(_609, _612, _615), vec3(_3172 * _3166, _3172 * _3167, _3172 * _3168));
                                float _4214 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                                float _3183 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                                float _3187 = ((_3183 * _3183) * (_3165 + (-1.0))) + 1.0;
                                float _3188 = _3125 * _3164;
                                float _3189 = _3188 * _3188;
                                float _3195 = ((1.0 - _3189) * dot(vec3(_609, _612, _615), vec3(_3112, _3113, _3114))) + _3189;
                                float _4225 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3196 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                                float _3197 = 1.0 - _3164;
                                float _3207 = (0.5 / (((_3196 * ((_3179 * _3197) + _3164)) + 9.9999999392252902907785028219223e-09) + (((_3196 * _3197) + _3164) * _3179))) * _3196;
                                float _4236 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3217 = (_3142 * _3119) * (((_3165 * 3.1415927410125732421875) * (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) / ((_3187 * _3187) * ((_3132 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3217 * _3000.x;
                                frontier_phi_73_pred_1 = _3217 * _3000.y;
                                frontier_phi_73_pred_2 = _3143 * _2988.z;
                                frontier_phi_73_pred_3 = _3143 * _2988.y;
                                frontier_phi_73_pred_4 = _3143 * _2988.x;
                                frontier_phi_73_pred_5 = _3217 * _3000.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3221 = frontier_phi_73_pred;
                            _3222 = frontier_phi_73_pred_1;
                            _3226 = frontier_phi_73_pred_2;
                            _3225 = frontier_phi_73_pred_3;
                            _3224 = frontier_phi_73_pred_4;
                            _3223 = frontier_phi_73_pred_5;
                            _2930 = _3224 + _2943;
                            _2931 = _3225 + _2944;
                            _2932 = _3226 + _2945;
                            _2927 = _3221 + _2940;
                            _2928 = _3222 + _2941;
                            _2929 = _3223 + _2942;
                            if (_2947 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2940 = _2927;
                                _2941 = _2928;
                                _2942 = _2929;
                                _2943 = _2930;
                                _2944 = _2931;
                                _2945 = _2932;
                                _2946 = _2947;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2930;
                        frontier_phi_67_pred_1 = _2931;
                        frontier_phi_67_pred_2 = _2932;
                        frontier_phi_67_pred_3 = _2929;
                        frontier_phi_67_pred_4 = _2928;
                        frontier_phi_67_pred_5 = _2927;
                    }
                    _2595 = frontier_phi_67_pred;
                    _2597 = frontier_phi_67_pred_1;
                    _2599 = frontier_phi_67_pred_2;
                    _2593 = frontier_phi_67_pred_3;
                    _2591 = frontier_phi_67_pred_4;
                    _2589 = frontier_phi_67_pred_5;
                    uint _2734 = _2733 + 1u;
                    if (_2734 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2727 = _2589;
                        _2728 = _2591;
                        _2729 = _2593;
                        _2730 = _2595;
                        _2731 = _2597;
                        _2732 = _2599;
                        _2733 = _2734;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2597;
                frontier_phi_55_56_ladder_1 = _2599;
                frontier_phi_55_56_ladder_2 = _2595;
                frontier_phi_55_56_ladder_3 = _2593;
                frontier_phi_55_56_ladder_4 = _2591;
                frontier_phi_55_56_ladder_5 = _2589;
            }
            else
            {
                frontier_phi_55_56_ladder = _2483;
                frontier_phi_55_56_ladder_1 = _2485;
                frontier_phi_55_56_ladder_2 = _2481;
                frontier_phi_55_56_ladder_3 = _2479;
                frontier_phi_55_56_ladder_4 = _2477;
                frontier_phi_55_56_ladder_5 = _2475;
            }
            _2588 = frontier_phi_55_56_ladder_5;
            _2590 = frontier_phi_55_56_ladder_4;
            _2592 = frontier_phi_55_56_ladder_3;
            _2594 = frontier_phi_55_56_ladder_2;
            _2596 = frontier_phi_55_56_ladder;
            _2598 = frontier_phi_55_56_ladder_1;
        }
        float _2603 = isnan(1.0) ? _653 : (isnan(_653) ? 1.0 : min(_653, 1.0));
        _2387 = (_2603 * _2594) + _1839;
        _2389 = (_2603 * _2596) + _1841;
        _2391 = (_2603 * _2598) + _1843;
        _2393 = ((_2588 * 0.039999999105930328369140625) * _2603) + _2172;
        _2395 = ((_2590 * 0.039999999105930328369140625) * _2603) + _2174;
        _2397 = ((_2592 * 0.039999999105930328369140625) * _2603) + _2176;
    }
    else
    {
        _2387 = _1839;
        _2389 = _1841;
        _2391 = _1843;
        _2393 = _2172;
        _2395 = _2174;
        _2397 = _2176;
    }
    float _4252 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4263 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4274 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    uint _2417 = _226 + 6u;
    float _2425 = _587 / cbSceneParam._m0[86u].x;
    float _2426 = _588 / cbSceneParam._m0[86u].y;
    vec4 _2440 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2425, _2426, (log2((isnan(cbSceneParam._m0[77u].w) ? _521 : (isnan(_521) ? cbSceneParam._m0[77u].w : min(_521, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2442 = _2440.x;
    float _2443 = _2440.y;
    float _2444 = _2440.z;
    float _2445 = _2440.w;
    float _2538;
    float _2540;
    float _2542;
    float _2544;
    if (_521 > cbSceneParam._m0[78u].w)
    {
        float _2500 = isnan(_521) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _521 : min(cbSceneParam._m0[80u].w, _521));
        float _2501 = _2500 / _521;
        float _2512 = _2501 * _572;
        float _2513 = _573 * _2501;
        float _2514 = (-0.0) - _2513;
        float _2516 = _2501 * _574;
        float _2518 = (cbSceneParam._m0[77u].w * _2514) / _2500;
        float _2519 = _2518 + cbSceneParam._m0[79u].w;
        float _2520 = cbSceneParam._m0[79u].w - _2513;
        float _2526 = sqrt(((_2512 * _2512) + (_2513 * _2513)) + (_2516 * _2516));
        float _2529 = (1.0 - (cbSceneParam._m0[77u].w / _2500)) * _2526;
        float _2534 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2536 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2689;
        if (abs((_2514 - _2518) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2689 = ((((_2519 > 0.0) ? exp2(_2534 * _2519) : (2.0 - exp2(_2536 * _2519))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2529;
        }
        else
        {
            float _2649 = 1.0 / cbSceneParam._m0[80u].x;
            float _2650 = isnan(_2520) ? _2519 : (isnan(_2519) ? _2520 : max(_2519, _2520));
            float _2651 = isnan(_2520) ? _2519 : (isnan(_2519) ? _2520 : min(_2519, _2520));
            float _2660 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : min(_2650, 0.0));
            float _2661 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : min(_2651, 0.0));
            _2689 = ((abs(_2526 / _2514) * cbSceneParam._m0[80u].y) * ((((_2660 - _2661) * 2.0) - ((exp2(_2534 * (isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0)))) - exp2(_2534 * (isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0))))) * _2649)) - ((exp2(_2536 * _2660) - exp2(_2536 * _2661)) * _2649))) + (_2529 * cbSceneParam._m0[80u].z);
        }
        vec4 _2691 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2425, _2426, 1.0), 0.0);
        float _2700 = exp2((_2689 * (-1.44269502162933349609375)) * (1.0 - _2691.w));
        float _2701 = log2(_2700);
        float _2717 = log2(_2445);
        _2538 = (exp2(_2717 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2701 * cbSceneParam._m0[78u].x)) * _2691.x) / cbSceneParam._m0[78u].x)) + _2442;
        _2540 = (exp2(_2717 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2701 * cbSceneParam._m0[78u].y)) * _2691.y) / cbSceneParam._m0[78u].y)) + _2443;
        _2542 = (exp2(_2717 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2701 * cbSceneParam._m0[78u].z)) * _2691.z) / cbSceneParam._m0[78u].z)) + _2444;
        _2544 = _2700 * _2445;
    }
    else
    {
        _2538 = _2442;
        _2540 = _2443;
        _2542 = _2444;
        _2544 = _2445;
    }
    float _2556 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2557 = _2556 == 3.0;
    float _2558 = log2(_2544);
    float _2565 = exp2(_2558 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2387 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _653))) + ((_2393 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _1458)) * cbPerFrame._m0[3u].x));
    float _2566 = exp2(_2558 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2389 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _653))) + ((_2395 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _1458)) * cbPerFrame._m0[3u].x));
    float _2567 = exp2(_2558 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2391 + ((isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))) * _653))) + ((_2397 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _1458)) * cbPerFrame._m0[3u].x));
    float _2576 = (_2556 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2576 * (_2557 ? _2565 : (_2565 + (cbSceneParam._m0[72u].w * _2538)));
    SV_Target.y = _2576 * (_2557 ? _2566 : (_2566 + (cbSceneParam._m0[72u].w * _2540)));
    SV_Target.z = _2576 * (_2557 ? _2567 : (_2567 + (cbSceneParam._m0[72u].w * _2542)));
    SV_Target.w = cbInstanceData._m0[_2417].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2417].w;
}


