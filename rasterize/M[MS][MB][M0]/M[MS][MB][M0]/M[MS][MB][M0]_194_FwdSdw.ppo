#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1206;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _347 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _349 = _347.x;
    float _359 = dot(vec4(_349, _347.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _376 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_349 - _359) * cbMtdParam._m0[24u].x) + _359) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3792 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _377 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _384 = (_377 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _385 = (_377 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _386 = (_377 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _403 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _260) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _261) + cbTextureTilingScale._m0[3u].w));
    vec4 _423 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _425 = _423.x;
    float _435 = dot(vec4(_425, _423.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _449 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_425 - _435) * cbMtdParam._m0[24u].x) + _435) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3803 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _457 = (_450 * ((_403.x * cbMtdParam._m0[13u].x) - _384)) + _384;
    float _458 = (_450 * ((_403.y * cbMtdParam._m0[13u].y) - _385)) + _385;
    float _459 = (_450 * ((_403.z * cbMtdParam._m0[13u].z) - _386)) + _386;
    vec4 _478 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _498 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _515 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _517 = _515.x;
    float _518 = _515.y;
    float _519 = _515.z;
    float _526 = ((_498.x - _517) * _377) + _517;
    float _527 = ((_498.y - _518) * _377) + _518;
    float _528 = ((_498.z - _519) * _377) + _519;
    vec4 _540 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _260) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _261) + cbTextureTilingScale._m0[2u].w));
    float _553 = ((_540.z - _528) * _450) + _528;
    float _556 = ((((_540.x - _526) * _450) + _526) * 2.0) + (-1.0);
    float _558 = ((((_540.y - _527) * _450) + _527) * 2.0) + (-1.0);
    float _559 = dot(vec2(_556, _558), vec2(_556, _558));
    float _3814 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _564 = sqrt(1.0 - (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))));
    vec4 _577 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _595 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _597 = _595.x;
    float _598 = 1.0 - _597;
    float _611 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_597 - _598) * cbMtdParam._m0[24u].z) + _598) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3825 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _612 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _619 = (_612 * ((_478.x * cbMtdParam._m0[18u].x) - _457)) + _457;
    float _620 = (_612 * ((_478.y * cbMtdParam._m0[18u].y) - _458)) + _458;
    float _621 = (_612 * ((_478.z * cbMtdParam._m0[18u].z) - _459)) + _459;
    vec4 _634 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _641 = (_634.x * 2.0) + (-1.0);
    float _642 = (_634.y * 2.0) + (-1.0);
    float _643 = dot(vec2(_641, _642), vec2(_641, _642));
    float _3836 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _651 = (_612 * (_634.z - _553)) + _553;
    float _663 = (((_641 - _556) + (cbMtdParam._m0[21u].x * _556)) * _612) + _556;
    float _664 = (((_642 - _558) + (cbMtdParam._m0[21u].x * _558)) * _612) + _558;
    float _665 = (_612 * (sqrt(1.0 - (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) - _564)) + _564;
    float _670 = cbMtdParam._m0[22u].x + _577.w;
    float _673 = fma(_665, _227 * NORMAL.x, fma(_664, _234 * TANGENT.x, (_220 * _212) * _663));
    float _676 = fma(_665, _227 * NORMAL.y, fma(_664, _234 * TANGENT.y, (_220 * _213) * _663));
    float _679 = fma(_665, _227 * NORMAL.z, fma(_664, _234 * TANGENT.z, (_220 * _214) * _663));
    float _683 = inversesqrt(dot(vec3(_673, _676, _679), vec3(_673, _676, _679)));
    float _684 = _683 * _673;
    float _685 = _683 * _676;
    float _686 = _683 * _679;
    float _3847 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _687 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _3858 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _3869 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3880 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3891 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _705 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _757 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _747);
    float _758 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _747);
    float _759 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _747);
    float _763 = inversesqrt(dot(vec3(_757, _758, _759), vec3(_757, _758, _759)));
    float _764 = _757 * _763;
    float _765 = _758 * _763;
    float _766 = _759 * _763;
    float _772 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _773 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _791 = fma(_686, cbSceneParam._m0[5u].z, fma(_685, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _684));
    float _794 = fma(_686, cbSceneParam._m0[6u].z, fma(_685, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _684));
    float _797 = fma(_686, cbSceneParam._m0[7u].z, fma(_685, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _684));
    uint _811 = (_240 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _817 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * cbInstanceData._m0[_811].x;
    float _818 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) * cbInstanceData._m0[_811].y;
    float _819 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * cbInstanceData._m0[_811].z;
    float _3902 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _820 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _3913 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _821 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _3924 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    vec4 _831 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _772, cbSceneParam._m0[86u].y * _773));
    float _835 = ((isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * TEXCOORD_5.w) * _831.x;
    float _836 = dot(vec3(_684, _685, _686), vec3(_764, _765, _766));
    float _839 = _836 * 2.0;
    float _843 = (_839 * _684) - _764;
    float _844 = (_839 * _685) - _765;
    float _845 = (_839 * _686) - _766;
    float _849 = abs(dot(vec3(_764, _765, _766), vec3(_684, _685, _686)));
    float _3935 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _851 = sqrt(_687);
    float _864 = exp2((_851 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_851 * 3.0));
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _900 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _904 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1205;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _930 = fma(_904, cbModelParam._m0[26u].z, fma(_900, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _896));
        float _934 = fma(_904, cbModelParam._m0[27u].z, fma(_900, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _896));
        float _938 = fma(_904, cbModelParam._m0[28u].z, fma(_900, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _896));
        float _963 = _896 + _684;
        float _964 = _900 + _685;
        float _965 = _904 + _686;
        float _975 = fma(_965, cbModelParam._m0[26u].z, fma(_964, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _963)) - _930;
        float _976 = fma(_965, cbModelParam._m0[27u].z, fma(_964, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _963)) - _934;
        float _977 = fma(_965, cbModelParam._m0[28u].z, fma(_964, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _963)) - _938;
        float _981 = inversesqrt(dot(vec3(_975, _976, _977), vec3(_975, _976, _977)));
        float _994 = ((_981 * _975) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_930 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_981 * _976) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_934 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_981 * _977) / cbModelParam._m0[34u].z) + ((((((_938 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        float _1033 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_999.x + (-0.5));
        float _1035 = _1033 * (_999.y + (-0.5));
        float _1036 = _1033 * (_999.z + (-0.5));
        float _1043 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1006.x + (-0.5));
        float _1045 = _1043 * (_1006.y + (-0.5));
        float _1046 = _1043 * (_1006.z + (-0.5));
        float _1053 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1013.x + (-0.5));
        float _1055 = _1053 * (_1013.y + (-0.5));
        float _1056 = _1053 * (_1013.z + (-0.5));
        float _1063 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1020.x + (-0.5));
        float _1065 = _1063 * (_1020.y + (-0.5));
        float _1066 = _1063 * (_1020.z + (-0.5));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = _1034 * 0.5;
        float _1071 = _1044 * 0.5;
        float _1072 = _1054 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1087 = (dot(vec3(_684, _685, _686), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3961 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1097 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3972 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3983 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1099 + 1.0))) + _1104) * _1067;
        float _1114 = _1035 * 0.5;
        float _1115 = _1045 * 0.5;
        float _1116 = _1055 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_684, _685, _686), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _4016 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1141 + 1.0))) + _1146) * _1068;
        float _1156 = _1036 * 0.5;
        float _1157 = _1046 * 0.5;
        float _1158 = _1056 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_684, _685, _686), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _4049 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1183 + 1.0))) + _1188) * _1069;
        _1205 = _1036;
        _1207 = _1035;
        _1208 = _1034;
        _1209 = _1046;
        _1210 = _1045;
        _1211 = _1044;
        _1212 = _1056;
        _1213 = _1055;
        _1214 = _1054;
        _1215 = _1069;
        _1216 = _1068;
        _1217 = _1067;
        _1218 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1219 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1220 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
    }
    else
    {
        _1205 = _1206;
        _1207 = _1206;
        _1208 = _1206;
        _1209 = _1206;
        _1210 = _1206;
        _1211 = _1206;
        _1212 = _1206;
        _1213 = _1206;
        _1214 = _1206;
        _1215 = _1206;
        _1216 = _1206;
        _1217 = _1206;
        _1218 = 0.0;
        _1219 = 0.0;
        _1220 = 0.0;
    }
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1244 = fma(_904, cbModelParam._m0[30u].z, fma(_900, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _896));
        float _1248 = fma(_904, cbModelParam._m0[31u].z, fma(_900, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _896));
        float _1252 = fma(_904, cbModelParam._m0[32u].z, fma(_900, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _896));
        float _1275 = _896 + _684;
        float _1276 = _900 + _685;
        float _1277 = _904 + _686;
        float _1287 = fma(_1277, cbModelParam._m0[30u].z, fma(_1276, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1275)) - _1244;
        float _1288 = fma(_1277, cbModelParam._m0[31u].z, fma(_1276, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1275)) - _1248;
        float _1289 = fma(_1277, cbModelParam._m0[32u].z, fma(_1276, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1275)) - _1252;
        float _1293 = inversesqrt(dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289)));
        float _1306 = ((_1293 * _1287) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1244 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1307 = ((_1293 * _1288) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1248 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1308 = ((_1293 * _1289) / cbModelParam._m0[35u].z) + ((((((_1252 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        float _1343 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1310.x + (-0.5));
        float _1345 = _1343 * (_1310.y + (-0.5));
        float _1346 = _1343 * (_1310.z + (-0.5));
        float _1353 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1317.x + (-0.5));
        float _1355 = _1353 * (_1317.y + (-0.5));
        float _1356 = _1353 * (_1317.z + (-0.5));
        float _1363 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1324.x + (-0.5));
        float _1365 = _1363 * (_1324.y + (-0.5));
        float _1366 = _1363 * (_1324.z + (-0.5));
        float _1373 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1331.x + (-0.5));
        float _1375 = _1373 * (_1331.y + (-0.5));
        float _1376 = _1373 * (_1331.z + (-0.5));
        float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = _1344 * 0.5;
        float _1381 = _1354 * 0.5;
        float _1382 = _1364 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_684, _685, _686), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _4090 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1377 + 9.9999997473787516355514526367188e-06);
        float _4101 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _4112 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1407 + 1.0))) + _1412) * _1377;
        float _1422 = _1345 * 0.5;
        float _1423 = _1355 * 0.5;
        float _1424 = _1365 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1438 = (dot(vec3(_684, _685, _686), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1447 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _4145 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1449 + 1.0))) + _1454) * _1378;
        float _1464 = _1346 * 0.5;
        float _1465 = _1356 * 0.5;
        float _1466 = _1366 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_684, _685, _686), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _4178 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1491 + 1.0))) + _1496) * _1379;
        _1513 = _1346;
        _1514 = _1345;
        _1515 = _1344;
        _1516 = _1356;
        _1517 = _1355;
        _1518 = _1354;
        _1519 = _1366;
        _1520 = _1365;
        _1521 = _1364;
        _1522 = _1379;
        _1523 = _1378;
        _1524 = _1377;
        _1525 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
        _1526 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
        _1527 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
    }
    else
    {
        _1513 = _1206;
        _1514 = _1206;
        _1515 = _1206;
        _1516 = _1206;
        _1517 = _1206;
        _1518 = _1206;
        _1519 = _1206;
        _1520 = _1206;
        _1521 = _1206;
        _1522 = _1206;
        _1523 = _1206;
        _1524 = _1206;
        _1525 = 0.0;
        _1526 = 0.0;
        _1527 = 0.0;
    }
    float _1537 = (cbModelParam._m0[1u].x * (_1525 - _1218)) + _1218;
    float _1538 = (cbModelParam._m0[1u].x * (_1526 - _1219)) + _1219;
    float _1539 = (cbModelParam._m0[1u].x * (_1527 - _1220)) + _1220;
    float _1560 = fma(_1539, cbSceneParam._m0[89u].z, fma(_1538, cbSceneParam._m0[89u].y, _1537 * cbSceneParam._m0[89u].x));
    float _1563 = fma(_1539, cbSceneParam._m0[90u].z, fma(_1538, cbSceneParam._m0[90u].y, _1537 * cbSceneParam._m0[90u].x));
    float _1566 = fma(_1539, cbSceneParam._m0[91u].z, fma(_1538, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1537));
    float _1581 = _843 * 0.5;
    float _1582 = _844 * 0.5;
    float _1583 = _845 * 0.5;
    float _1584 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1515, _1518, _1521, _1524));
    float _1587 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1514, _1517, _1520, _1523));
    float _1590 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1513, _1516, _1519, _1522));
    float _1624;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1597 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1205, _1209, _1212, _1215));
        float _1601 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1207, _1210, _1213, _1216));
        float _1605 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1208, _1211, _1214, _1217));
        float _1612 = dot(vec4(cbModelParam._m0[39u]), vec4(_1581, _1582, _1583, 1.0));
        _1624 = dot(vec3(isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1612) ? 0.0 : (isnan(0.0) ? _1612 : max(0.0, _1612))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1624 = 1.0;
    }
    float _1635;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1626 = dot(vec4(cbModelParam._m0[40u]), vec4(_1581, _1582, _1583, 1.0));
        _1635 = dot(vec3(isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1626) ? 0.0 : (isnan(0.0) ? _1626 : max(0.0, _1626))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1635 = 1.0;
    }
    float _1639 = (_1635 * cbModelParam._m0[1u].x) + (_1624 * (1.0 - cbModelParam._m0[1u].x));
    float _1649 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _687);
    float _1650 = isnan(_1649) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1649 : min(cbModelParam._m0[25u].z, _1649));
    float _1730;
    float _1732;
    float _1734;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1697 = fma(_904, cbModelParam._m0[13u].z, fma(_900, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _896)) + cbModelParam._m0[13u].w;
        float _1701 = fma(_904, cbModelParam._m0[14u].z, fma(_900, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _896)) + cbModelParam._m0[14u].w;
        float _1705 = fma(_904, cbModelParam._m0[15u].z, fma(_900, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _896)) + cbModelParam._m0[15u].w;
        float _1708 = fma(_845, cbModelParam._m0[13u].z, fma(_844, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _843));
        float _1711 = fma(_845, cbModelParam._m0[14u].z, fma(_844, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _843));
        float _1714 = fma(_845, cbModelParam._m0[15u].z, fma(_844, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _843));
        float _1742;
        if (_1708 > 0.0)
        {
            _1742 = abs((1.0 - _1697) / _1708);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1697 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1742 = frontier_phi_14_12_ladder;
        }
        float _1911;
        if (_1711 > 0.0)
        {
            _1911 = abs((1.0 - _1701) / _1711);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1701 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1911 = frontier_phi_23_19_ladder;
        }
        float _2206;
        if (_1714 > 0.0)
        {
            _2206 = abs((1.0 - _1705) / _1714);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1705 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2206 = frontier_phi_35_30_ladder;
        }
        float _2208 = isnan(_1911) ? _1742 : (isnan(_1742) ? _1911 : min(_1742, _1911));
        float _2209 = isnan(_2206) ? _2208 : (isnan(_2208) ? _2206 : min(_2208, _2206));
        float _2213 = (_2209 * _1708) + _1697;
        float _2214 = (_2209 * _1711) + _1701;
        float _2215 = (_2209 * _1714) + _1705;
        float _2216 = _2209 * 9.9999997473787516355514526367188e-05;
        float _2218 = (-1.0) - _2216;
        float _2220 = _2216 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2215 > _2220) || ((_2215 < _2218) || ((_2214 > _2220) || ((_2214 < _2218) || ((_2213 < _2218) || (_2213 > _2220))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2360 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2215, cbModelParam._m0[9u].z, fma(_2214, cbModelParam._m0[9u].y, _2213 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2215, cbModelParam._m0[10u].z, fma(_2214, cbModelParam._m0[10u].y, _2213 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2215, cbModelParam._m0[11u].z, fma(_2214, cbModelParam._m0[11u].y, _2213 * cbModelParam._m0[11u].x))), _1650);
            frontier_phi_13_35_ladder = _2360.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2360.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2360.x * cbModelParam._m0[1u].y;
        }
        _1730 = frontier_phi_13_35_ladder_2;
        _1732 = frontier_phi_13_35_ladder_1;
        _1734 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1718 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_843, _844, _845), _1650);
        _1730 = _1718.x * cbModelParam._m0[1u].y;
        _1732 = _1718.y * cbModelParam._m0[1u].y;
        _1734 = _1718.z * cbModelParam._m0[1u].y;
    }
    float _1738 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _687);
    float _1739 = isnan(_1738) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1738 : min(cbModelParam._m0[25u].w, _1738));
    float _1828;
    float _1830;
    float _1832;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1792 = fma(_904, cbModelParam._m0[21u].z, fma(_900, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _896)) + cbModelParam._m0[21u].w;
        float _1796 = fma(_904, cbModelParam._m0[22u].z, fma(_900, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _896)) + cbModelParam._m0[22u].w;
        float _1800 = fma(_904, cbModelParam._m0[23u].z, fma(_900, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _896)) + cbModelParam._m0[23u].w;
        float _1803 = fma(_845, cbModelParam._m0[21u].z, fma(_844, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _843));
        float _1806 = fma(_845, cbModelParam._m0[22u].z, fma(_844, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _843));
        float _1809 = fma(_845, cbModelParam._m0[23u].z, fma(_844, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _843));
        float _1916;
        if (_1803 > 0.0)
        {
            _1916 = abs((1.0 - _1792) / _1803);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1792 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1916 = frontier_phi_25_21_ladder;
        }
        float _2233;
        if (_1806 > 0.0)
        {
            _2233 = abs((1.0 - _1796) / _1806);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1796 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2233 = frontier_phi_37_32_ladder;
        }
        float _2560;
        if (_1809 > 0.0)
        {
            _2560 = abs((1.0 - _1800) / _1809);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1800 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2560 = frontier_phi_47_44_ladder;
        }
        float _2562 = isnan(_2233) ? _1916 : (isnan(_1916) ? _2233 : min(_1916, _2233));
        float _2563 = isnan(_2560) ? _2562 : (isnan(_2562) ? _2560 : min(_2562, _2560));
        float _2567 = (_2563 * _1803) + _1792;
        float _2568 = (_2563 * _1806) + _1796;
        float _2569 = (_2563 * _1809) + _1800;
        float _2570 = _2563 * 9.9999997473787516355514526367188e-05;
        float _2571 = (-1.0) - _2570;
        float _2573 = _2570 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2569 > _2573) || ((_2569 < _2571) || ((_2568 > _2573) || ((_2568 < _2571) || ((_2567 < _2571) || (_2567 > _2573))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2687 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2569, cbModelParam._m0[17u].z, fma(_2568, cbModelParam._m0[17u].y, _2567 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2569, cbModelParam._m0[18u].z, fma(_2568, cbModelParam._m0[18u].y, _2567 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2569, cbModelParam._m0[19u].z, fma(_2568, cbModelParam._m0[19u].y, _2567 * cbModelParam._m0[19u].x))), _1739);
            frontier_phi_22_47_ladder = _2687.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2687.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2687.x * cbModelParam._m0[1u].z;
        }
        _1828 = frontier_phi_22_47_ladder_2;
        _1830 = frontier_phi_22_47_ladder_1;
        _1832 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1812 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_843, _844, _845), _1739);
        _1828 = _1812.x * cbModelParam._m0[1u].z;
        _1830 = _1812.y * cbModelParam._m0[1u].z;
        _1832 = _1812.z * cbModelParam._m0[1u].z;
    }
    float _1844 = ((((1.0 - _864) * ((_851 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_864 * _851)) * _835;
    float _1845 = _1844 * ((cbModelParam._m0[1u].w * (_1828 - _1730)) + _1730);
    float _1846 = _1844 * ((cbModelParam._m0[1u].w * (_1830 - _1732)) + _1732);
    float _1847 = _1844 * ((cbModelParam._m0[1u].w * (_1832 - _1734)) + _1734);
    float _1850 = fma(_1847, cbSceneParam._m0[89u].z, fma(_1846, cbSceneParam._m0[89u].y, _1845 * cbSceneParam._m0[89u].x));
    float _1853 = fma(_1847, cbSceneParam._m0[90u].z, fma(_1846, cbSceneParam._m0[90u].y, _1845 * cbSceneParam._m0[90u].x));
    float _1856 = fma(_1847, cbSceneParam._m0[91u].z, fma(_1846, cbSceneParam._m0[91u].y, _1845 * cbSceneParam._m0[91u].x));
    float _1890 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1894 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1898 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1902 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1903 = _1890 / _1902;
    float _1904 = _1894 / _1902;
    float _1905 = _1898 / _1902;
    float _2052;
    float _2053;
    float _2054;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1932 = ((uint(_1905 > cbSceneParam._m0[59u].y) + uint(_1905 > cbSceneParam._m0[59u].x)) + uint(_1905 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1933 = _1932 + 43u;
        uint _1941 = _1932 + 44u;
        uint _1949 = _1932 + 45u;
        uint _1957 = _1932 + 46u;
        float _1968 = fma(_1902, cbSceneParam._m0[_1933].w, fma(_1898, cbSceneParam._m0[_1933].z, fma(_1894, cbSceneParam._m0[_1933].y, _1890 * cbSceneParam._m0[_1933].x)));
        float _1972 = fma(_1902, cbSceneParam._m0[_1941].w, fma(_1898, cbSceneParam._m0[_1941].z, fma(_1894, cbSceneParam._m0[_1941].y, _1890 * cbSceneParam._m0[_1941].x)));
        float _1980 = fma(_1902, cbSceneParam._m0[_1957].w, fma(_1898, cbSceneParam._m0[_1957].z, fma(_1894, cbSceneParam._m0[_1957].y, _1890 * cbSceneParam._m0[_1957].x)));
        float _1985 = cbSceneParam._m0[33u].z * _1980;
        float _1987 = cbSceneParam._m0[33u].w * _1980;
        float _1990 = fma(_1902, cbSceneParam._m0[_1949].w, fma(_1898, cbSceneParam._m0[_1949].z, fma(_1894, cbSceneParam._m0[_1949].y, _1890 * cbSceneParam._m0[_1949].x))) / _1980;
        float _2038 = (cbSceneParam._m0[33u].x - sqrt(((_1904 * _1904) + (_1903 * _1903)) + (_1905 * _1905))) * cbSceneParam._m0[33u].y;
        float _4304 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2045 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1985 + _1968) / _1980, (_1987 + _1972) / _1980), _1990), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1987 + _1968) / _1980, (_1972 - _1985) / _1980), _1990), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1968 - _1985) / _1980, (_1972 - _1987) / _1980), _1990), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1968 - _1987) / _1980, (_1985 + _1972) / _1980), _1990), 0.0)).x), vec4(0.25)));
        _2052 = 1.0 - (_2045 * cbSceneParam._m0[34u].x);
        _2053 = 1.0 - (_2045 * cbSceneParam._m0[34u].y);
        _2054 = 1.0 - (_2045 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2052 = 1.0;
        _2053 = 1.0;
        _2054 = 1.0;
    }
    float _2118;
    float _2120;
    float _2122;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2106 = fma(_1902, cbSceneParam._m0[63u].w, fma(_1898, cbSceneParam._m0[63u].z, fma(_1894, cbSceneParam._m0[63u].y, _1890 * cbSceneParam._m0[63u].x)));
        float _2107 = fma(_1902, cbSceneParam._m0[60u].w, fma(_1898, cbSceneParam._m0[60u].z, fma(_1894, cbSceneParam._m0[60u].y, _1890 * cbSceneParam._m0[60u].x))) / _2106;
        float _2108 = fma(_1902, cbSceneParam._m0[61u].w, fma(_1898, cbSceneParam._m0[61u].z, fma(_1894, cbSceneParam._m0[61u].y, _1890 * cbSceneParam._m0[61u].x))) / _2106;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2107 >= cbSceneParam._m0[64u].x) && (_2108 >= cbSceneParam._m0[64u].y)) && (_2107 <= cbSceneParam._m0[64u].z)) && (_2108 <= cbSceneParam._m0[64u].w))
        {
            float _2246 = fma(_1902, cbSceneParam._m0[62u].w, fma(_1898, cbSceneParam._m0[62u].z, fma(_1894, cbSceneParam._m0[62u].y, _1890 * cbSceneParam._m0[62u].x))) / _2106;
            float _2250 = isnan(cbSceneParam._m0[41u].w) ? _2246 : (isnan(_2246) ? cbSceneParam._m0[41u].w : max(_2246, cbSceneParam._m0[41u].w));
            float _2293 = (cbSceneParam._m0[33u].x - sqrt(((_1904 * _1904) + (_1903 * _1903)) + (_1905 * _1905))) * cbSceneParam._m0[33u].y;
            float _4320 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
            float _2300 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2107, cbSceneParam._m0[33u].w + _2108), _2250), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2107, _2108 - cbSceneParam._m0[33u].z), _2250), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2107 - cbSceneParam._m0[33u].z, _2108 - cbSceneParam._m0[33u].w), _2250), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2107 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2108), _2250), 0.0)).x), vec4(0.25)));
            float _2304 = 1.0 - (_2300 * cbSceneParam._m0[34u].x);
            float _2305 = 1.0 - (_2300 * cbSceneParam._m0[34u].y);
            float _2306 = 1.0 - (_2300 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2306) ? _2054 : (isnan(_2054) ? _2306 : min(_2054, _2306));
            frontier_phi_34_33_ladder_1 = isnan(_2305) ? _2053 : (isnan(_2053) ? _2305 : min(_2053, _2305));
            frontier_phi_34_33_ladder_2 = isnan(_2304) ? _2052 : (isnan(_2052) ? _2304 : min(_2052, _2304));
        }
        else
        {
            frontier_phi_34_33_ladder = _2054;
            frontier_phi_34_33_ladder_1 = _2053;
            frontier_phi_34_33_ladder_2 = _2052;
        }
        _2118 = frontier_phi_34_33_ladder_2;
        _2120 = frontier_phi_34_33_ladder_1;
        _2122 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2118 = _2052;
        _2120 = _2053;
        _2122 = _2054;
    }
    uvec4 _2127 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _2129 = _2127.x * 14u;
    uint _2130 = _2129 + 13u;
    float _2137 = _835 + (-1.0);
    float _2142 = (cbLight._m0[_2130].x * _2137) + 1.0;
    float _2143 = (cbLight._m0[_2130].y * _2137) + 1.0;
    float _2144 = (cbLight._m0[_2130].z * _2137) + 1.0;
    float _2145 = (cbLight._m0[_2130].w * _2137) + 1.0;
    uint _2146 = _2129 + 5u;
    float _2152 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
    uint _2156 = _2129 + 4u;
    float _2165 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
    uint _2169 = _2129 | 1u;
    float _2180 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_684, _685, _686));
    float _2183 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_684, _685, _686));
    float _4356 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _4367 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2188 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * 0.3183098733425140380859375;
    float _2190 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * 0.3183098733425140380859375;
    float _2197 = ((cbLight._m0[_2146].x * _2152) * _2190) + (((cbLight._m0[_2156].x * _2118) * _2165) * _2188);
    float _2198 = ((_2152 * cbLight._m0[_2146].y) * _2190) + (((cbLight._m0[_2156].y * _2120) * _2165) * _2188);
    float _2199 = ((_2152 * cbLight._m0[_2146].z) * _2190) + (((cbLight._m0[_2156].z * _2122) * _2165) * _2188);
    uvec4 _2203 = floatBitsToUint(cbLight._m0[_2129 + 12u]);
    bool _2205 = _2203.x == 0u;
    float _2307;
    float _2309;
    float _2311;
    if (_2205)
    {
        _2307 = _2197;
        _2309 = _2198;
        _2311 = _2199;
    }
    else
    {
        uint _2315 = _2129 + 6u;
        float _2331 = (dot(vec3(cbLight._m0[_2129 + 2u].xyz), vec3(_684, _685, _686)) * 0.5) + 0.5;
        float _2332 = _2331 * _2331;
        float _4378 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2333 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2334 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
        _2307 = (((cbLight._m0[_2315].x * 0.3183098733425140380859375) * _2333) * _2334) + _2197;
        _2309 = (((cbLight._m0[_2315].y * 0.3183098733425140380859375) * _2333) * _2334) + _2198;
        _2311 = (((cbLight._m0[_2315].z * 0.3183098733425140380859375) * _2333) * _2334) + _2199;
    }
    bool _2314 = _2203.y == 0u;
    float _2369;
    float _2371;
    float _2373;
    if (_2314)
    {
        _2369 = _2307;
        _2371 = _2309;
        _2373 = _2311;
    }
    else
    {
        uint _2531 = _2129 + 7u;
        float _2547 = (dot(vec3(cbLight._m0[_2129 + 3u].xyz), vec3(_684, _685, _686)) * 0.5) + 0.5;
        float _2548 = _2547 * _2547;
        float _4394 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2549 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2550 = isnan(1.0) ? _2145 : (isnan(_2145) ? 1.0 : min(_2145, 1.0));
        _2369 = (((cbLight._m0[_2531].x * 0.3183098733425140380859375) * _2549) * _2550) + _2307;
        _2371 = (((cbLight._m0[_2531].y * 0.3183098733425140380859375) * _2549) * _2550) + _2309;
        _2373 = (((cbLight._m0[_2531].z * 0.3183098733425140380859375) * _2549) * _2550) + _2311;
    }
    uint _2376 = _2129 + 8u;
    float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2129].w)) * _687) * 0.949999988079071044921875);
    float _2390 = _2389 * _2389;
    float _2391 = cbLight._m0[_2129].x + _764;
    float _2392 = cbLight._m0[_2129].y + _765;
    float _2393 = cbLight._m0[_2129].z + _766;
    float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
    float _2398 = _2397 * _2391;
    float _2399 = _2397 * _2392;
    float _2400 = _2397 * _2393;
    float _2401 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2129].xyz));
    float _4410 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2404 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _4421 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _2405 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _2406 = dot(vec3(_684, _685, _686), vec3(_2398, _2399, _2400));
    float _4432 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _2410 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_2398, _2399, _2400));
    float _4443 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2414 = _2390 * _2390;
    float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
    float _2429 = (exp2(log2(1.0 - (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2430 = 1.0 - _2390;
    float _2441 = (0.5 / (((_2405 * ((_2404 * _2430) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2405 * _2430) + _2390) * _2404))) * _2404;
    float _4454 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2443 = (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
    uint _2457 = _2129 + 9u;
    float _2468 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2169].w)) * _687) * 0.949999988079071044921875);
    float _2469 = _2468 * _2468;
    float _2470 = cbLight._m0[_2169].x + _764;
    float _2471 = cbLight._m0[_2169].y + _765;
    float _2472 = cbLight._m0[_2169].z + _766;
    float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
    float _2477 = _2476 * _2470;
    float _2478 = _2476 * _2471;
    float _2479 = _2476 * _2472;
    float _2480 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2169].xyz));
    float _4465 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2483 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2484 = dot(vec3(_684, _685, _686), vec3(_2477, _2478, _2479));
    float _4476 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2487 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _2488 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_2477, _2478, _2479));
    float _4487 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2492 = _2469 * _2469;
    float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
    float _2505 = (exp2(log2(1.0 - (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2506 = 1.0 - _2469;
    float _2516 = (0.5 / (((_2405 * ((_2483 * _2506) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2405 * _2506) + _2469) * _2483))) * _2483;
    float _4498 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2518 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
    float _2528 = (((_2505 * cbLight._m0[_2457].x) * _2518) * _2152) + ((((cbLight._m0[_2376].x * _2118) * _2429) * _2443) * _2165);
    float _2529 = (((_2505 * cbLight._m0[_2457].y) * _2518) * _2152) + ((((cbLight._m0[_2376].y * _2120) * _2429) * _2443) * _2165);
    float _2530 = (((_2505 * cbLight._m0[_2457].z) * _2518) * _2152) + ((((cbLight._m0[_2376].z * _2122) * _2429) * _2443) * _2165);
    float _2586;
    float _2588;
    float _2590;
    if (_2205)
    {
        _2586 = _2528;
        _2588 = _2529;
        _2590 = _2530;
    }
    else
    {
        uint _2592 = _2129 + 2u;
        uint _2596 = _2129 + 10u;
        float _2610 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2592].w)) * _687) * 0.949999988079071044921875);
        float _2611 = _2610 * _2610;
        float _2612 = cbLight._m0[_2592].x + _764;
        float _2613 = cbLight._m0[_2592].y + _765;
        float _2614 = cbLight._m0[_2592].z + _766;
        float _2618 = inversesqrt(dot(vec3(_2612, _2613, _2614), vec3(_2612, _2613, _2614)));
        float _2619 = _2618 * _2612;
        float _2620 = _2618 * _2613;
        float _2621 = _2618 * _2614;
        float _2622 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2592].xyz));
        float _4509 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2625 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2626 = dot(vec3(_684, _685, _686), vec3(_2619, _2620, _2621));
        float _4520 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2629 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2630 = dot(vec3(cbLight._m0[_2592].xyz), vec3(_2619, _2620, _2621));
        float _4531 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2634 = _2611 * _2611;
        float _2638 = ((_2629 * _2629) * (_2634 + (-1.0))) + 1.0;
        float _2647 = (exp2(log2(1.0 - (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2648 = 1.0 - _2611;
        float _2658 = (0.5 / (((_2405 * ((_2625 * _2648) + _2611)) + 9.9999999392252902907785028219223e-09) + (((_2405 * _2648) + _2611) * _2625))) * _2625;
        float _4542 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2660 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2634 / ((_2638 * _2638) * 3.141590118408203125));
        float _2661 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
        _2586 = (((_2647 * cbLight._m0[_2596].x) * _2660) * _2661) + _2528;
        _2588 = (((_2647 * cbLight._m0[_2596].y) * _2660) * _2661) + _2529;
        _2590 = (((_2647 * cbLight._m0[_2596].z) * _2660) * _2661) + _2530;
    }
    float _2692;
    float _2694;
    float _2696;
    if (_2314)
    {
        _2692 = _2586;
        _2694 = _2588;
        _2696 = _2590;
    }
    else
    {
        uint _2703 = _2129 + 3u;
        uint _2707 = _2129 + 11u;
        float _2721 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2703].w)) * _687) * 0.949999988079071044921875);
        float _2722 = _2721 * _2721;
        float _2723 = cbLight._m0[_2703].x + _764;
        float _2724 = cbLight._m0[_2703].y + _765;
        float _2725 = cbLight._m0[_2703].z + _766;
        float _2729 = inversesqrt(dot(vec3(_2723, _2724, _2725), vec3(_2723, _2724, _2725)));
        float _2730 = _2729 * _2723;
        float _2731 = _2729 * _2724;
        float _2732 = _2729 * _2725;
        float _2733 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2703].xyz));
        float _4558 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2736 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2737 = dot(vec3(_684, _685, _686), vec3(_2730, _2731, _2732));
        float _4569 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2740 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2741 = dot(vec3(cbLight._m0[_2703].xyz), vec3(_2730, _2731, _2732));
        float _4580 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2745 = _2722 * _2722;
        float _2749 = ((_2740 * _2740) * (_2745 + (-1.0))) + 1.0;
        float _2758 = (exp2(log2(1.0 - (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2759 = 1.0 - _2722;
        float _2769 = (0.5 / (((_2405 * ((_2736 * _2759) + _2722)) + 9.9999999392252902907785028219223e-09) + (((_2405 * _2759) + _2722) * _2736))) * _2736;
        float _4591 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2771 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2745 / ((_2749 * _2749) * 3.141590118408203125));
        float _2772 = isnan(1.0) ? _2145 : (isnan(_2145) ? 1.0 : min(_2145, 1.0));
        _2692 = (((_2758 * cbLight._m0[_2707].x) * _2771) * _2772) + _2586;
        _2694 = (((_2758 * cbLight._m0[_2707].y) * _2771) * _2772) + _2588;
        _2696 = (((_2758 * cbLight._m0[_2707].z) * _2771) * _2772) + _2590;
    }
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    if (_2127.y == 0u)
    {
        uvec4 _2793 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2794 = _2793.x;
        uint _2805 = uint((float(_2793.y) * floor(float(uint(cbSceneParam._m0[85u].y * _773) / _2794))) + floor(float(uint(cbSceneParam._m0[85u].x * _772) / _2794)));
        float _2815 = (log2(_1905 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2816 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        uint _2819 = uint(isnan(14.0) ? _2816 : (isnan(_2816) ? 14.0 : min(_2816, 14.0)));
        uvec4 _2824 = texelFetch(g_lightClusterGridBuffer, int(((_2819 << 2u) + (_2805 << 6u)) >> 2u));
        uint _2825 = _2824.x;
        uint _2826 = _2793.z;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        if (((((1u << ((_2826 >> 4u) & 15u)) + 4294967295u) & _2825) == 0u) || ((_2826 & 240u) == 0u))
        {
            _2905 = 0.0;
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
            _2913 = 0.0;
            _2915 = 0.0;
        }
        else
        {
            float _2906;
            float _2908;
            float _2910;
            float _2912;
            float _2914;
            float _2916;
            float _3050 = 0.0;
            float _3051 = 0.0;
            float _3052 = 0.0;
            float _3053 = 0.0;
            float _3054 = 0.0;
            float _3055 = 0.0;
            uint _3056 = 0u;
            uint _3065;
            bool _3066;
            for (;;)
            {
                _3065 = texelFetch(g_lightClassification, int((((_2819 << 5u) + (_2805 << 9u)) + (_3056 << 2u)) >> 2u)).x;
                _3066 = _3065 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3066)
                {
                    frontier_phi_66_pred = _3055;
                    frontier_phi_66_pred_1 = _3054;
                    frontier_phi_66_pred_2 = _3053;
                    frontier_phi_66_pred_3 = _3052;
                    frontier_phi_66_pred_4 = _3051;
                    frontier_phi_66_pred_5 = _3050;
                }
                else
                {
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    uint _3180;
                    _3174 = _3050;
                    _3175 = _3051;
                    _3176 = _3052;
                    _3177 = _3053;
                    _3178 = _3054;
                    _3179 = _3055;
                    _3180 = _3065;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    for (;;)
                    {
                        uint _3184 = uint(findLSB(_3180)) + (_3056 << 5u);
                        uint _3181 = (_3180 + 4294967295u) & _3180;
                        uint _3186 = _3184 * 48u;
                        vec4 _3200 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3186)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 3u)).x));
                        uint _3206 = (_3184 * 48u) + 4u;
                        vec4 _3219 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3206)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3206 + 3u)).x));
                        uint _3225 = (_3184 * 48u) + 8u;
                        vec3 _3236 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3225)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3225 + 2u)).x));
                        float _3240 = _3200.x - _1903;
                        float _3241 = _3200.y - _1904;
                        float _3242 = _3200.z - _1905;
                        float _3243 = dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242));
                        float _3246 = inversesqrt(_3243);
                        float _3247 = _3246 * _3240;
                        float _3248 = _3246 * _3241;
                        float _3249 = _3246 * _3242;
                        float _3250 = dot(vec3(_791, _794, _797), vec3(_3247, _3248, _3249));
                        float _3255 = 1.0 - (_3243 * _3200.w);
                        float _4617 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                        float _3256 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3257 = sqrt(_3243) * _3219.w;
                        float _3260 = 1.39999997615814208984375 / (_3257 + 1.39999997615814208984375);
                        float _3261 = _3260 * _3260;
                        float _3264 = ((1.0 - _3261) * _3250) + _3261;
                        float _3267 = _3257 * _3257;
                        float _3271 = ((isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0))) * _3256) / ((_3267 * 0.699999988079071044921875) + 1.0);
                        float _3275 = (-0.0) - _1903;
                        float _3276 = (-0.0) - _1904;
                        float _3277 = (-0.0) - _1905;
                        float _3281 = inversesqrt(dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277)));
                        float _3282 = _3281 * _3275;
                        float _3283 = _3281 * _3276;
                        float _3284 = _3281 * _3277;
                        float _3291 = exp2(log2(1.0 / ((_3267 * 3.5) + 5.0)) * 0.25);
                        float _3292 = 1.0 - _851;
                        float _3299 = sqrt(1.0 - ((1.0 - (_3292 * _3292)) * (1.0 - (_3291 * _3291))));
                        float _3300 = _3299 * _3299;
                        float _3301 = _3300 * _3300;
                        float _3302 = _3282 + _3247;
                        float _3303 = _3283 + _3248;
                        float _3304 = _3284 + _3249;
                        float _3308 = inversesqrt(dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304)));
                        float _3312 = dot(vec3(_791, _794, _797), vec3(_3282, _3283, _3284));
                        float _4633 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3315 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3316 = dot(vec3(_791, _794, _797), vec3(_3308 * _3302, _3308 * _3303, _3308 * _3304));
                        float _4644 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3319 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3323 = ((_3319 * _3319) * (_3301 + (-1.0))) + 1.0;
                        float _3324 = _3260 * _3300;
                        float _3325 = _3324 * _3324;
                        float _3328 = ((1.0 - _3325) * _3250) + _3325;
                        float _4655 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3329 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3330 = 1.0 - _3300;
                        float _3340 = (0.5 / (((_3329 * ((_3315 * _3330) + _3300)) + 9.9999999392252902907785028219223e-09) + (((_3329 * _3330) + _3300) * _3315))) * _3329;
                        float _4666 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3351 = (((_3301 * 3.1415927410125732421875) * (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) / ((_3323 * _3323) * ((_3267 * 2.1991131305694580078125) + 3.141590118408203125))) * _3256;
                        _3109 = (_3271 * _3219.x) + _3177;
                        _3110 = (_3271 * _3219.y) + _3178;
                        _3111 = (_3271 * _3219.z) + _3179;
                        _3106 = (_3351 * _3236.x) + _3174;
                        _3107 = (_3351 * _3236.y) + _3175;
                        _3108 = (_3351 * _3236.z) + _3176;
                        if (_3181 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3174 = _3106;
                            _3175 = _3107;
                            _3176 = _3108;
                            _3177 = _3109;
                            _3178 = _3110;
                            _3179 = _3111;
                            _3180 = _3181;
                        }
                    }
                    frontier_phi_66_pred = _3111;
                    frontier_phi_66_pred_1 = _3110;
                    frontier_phi_66_pred_2 = _3109;
                    frontier_phi_66_pred_3 = _3108;
                    frontier_phi_66_pred_4 = _3107;
                    frontier_phi_66_pred_5 = _3106;
                }
                _2916 = frontier_phi_66_pred;
                _2914 = frontier_phi_66_pred_1;
                _2912 = frontier_phi_66_pred_2;
                _2910 = frontier_phi_66_pred_3;
                _2908 = frontier_phi_66_pred_4;
                _2906 = frontier_phi_66_pred_5;
                uint _3057 = _3056 + 1u;
                if (_3057 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3050 = _2906;
                    _3051 = _2908;
                    _3052 = _2910;
                    _3053 = _2912;
                    _3054 = _2914;
                    _3055 = _2916;
                    _3056 = _3057;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2905 = _2906;
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
            _2913 = _2914;
            _2915 = _2916;
        }
        uvec4 _2919 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2920 = _2919.z;
        uint _2922 = (_2920 >> 8u) & 15u;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        if (((4294967295u << _2922) & _2825) == 0u)
        {
            _3018 = _2905;
            _3020 = _2907;
            _3022 = _2909;
            _3024 = _2911;
            _3026 = _2913;
            _3028 = _2915;
        }
        else
        {
            float _3043 = inversesqrt(dot(vec3(_1903, _1904, _1905), vec3(_1903, _1904, _1905)));
            float _3044 = _3043 * _1903;
            float _3045 = _3043 * _1904;
            float _3046 = _3043 * _1905;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2922 < ((_2920 >> 12u) & 15u))
            {
                float _3019;
                float _3021;
                float _3023;
                float _3025;
                float _3027;
                float _3029;
                float _3157 = _2905;
                float _3158 = _2907;
                float _3159 = _2909;
                float _3160 = _2911;
                float _3161 = _2913;
                float _3162 = _2915;
                uint _3163 = _2922;
                uint _3172;
                bool _3173;
                for (;;)
                {
                    _3172 = texelFetch(g_lightClassification, int((((_2819 << 5u) + (_2805 << 9u)) + (_3163 << 2u)) >> 2u)).x;
                    _3173 = _3172 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3173)
                    {
                        frontier_phi_72_pred = _3162;
                        frontier_phi_72_pred_1 = _3161;
                        frontier_phi_72_pred_2 = _3160;
                        frontier_phi_72_pred_3 = _3159;
                        frontier_phi_72_pred_4 = _3158;
                        frontier_phi_72_pred_5 = _3157;
                    }
                    else
                    {
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3369 = _3157;
                        float _3370 = _3158;
                        float _3371 = _3159;
                        float _3372 = _3160;
                        float _3373 = _3161;
                        float _3374 = _3162;
                        uint _3375 = _3172;
                        uint _3376;
                        vec4 _3401;
                        float _3402;
                        vec4 _3417;
                        vec3 _3429;
                        vec4 _3444;
                        vec4 _3459;
                        float _3505;
                        bool _3506;
                        for (;;)
                        {
                            uint _3386 = ((_3163 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3375));
                            _3376 = (_3375 + 4294967295u) & _3375;
                            uint _3388 = _3386 * 40u;
                            _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            _3402 = _3401.w;
                            uint _3404 = (_3386 * 40u) + 4u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            uint _3419 = (_3386 * 40u) + 8u;
                            _3429 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x));
                            uint _3431 = (_3386 * 40u) + 16u;
                            _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            uint _3446 = (_3386 * 40u) + 20u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3461 = (_3386 * 40u) + 24u;
                            vec4 _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            uint _3480 = (_3386 * 40u) + 28u;
                            vec4 _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            _3505 = fma(_1905, _3493.z, fma(_1904, _3493.y, _3493.x * _1903)) + _3493.w;
                            _3506 = !((fma(_1905, _3474.z, fma(_1904, _3474.y, _3474.x * _1903)) + _3474.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3506)
                            {
                                float _3533 = _3401.x - _1903;
                                float _3534 = _3401.y - _1904;
                                float _3535 = _3401.z - _1905;
                                float _3536 = dot(vec3(_3533, _3534, _3535), vec3(_3533, _3534, _3535));
                                float _3539 = inversesqrt(_3536);
                                float _3540 = _3539 * _3533;
                                float _3541 = _3539 * _3534;
                                float _3542 = _3539 * _3535;
                                float _3546 = 1.0 - (_3536 / (_3402 * _3402));
                                float _4677 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3547 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3551 = sqrt(_3536) * _3417.w;
                                float _3553 = 1.39999997615814208984375 / (_3551 + 1.39999997615814208984375);
                                float _3554 = _3553 * _3553;
                                float _3557 = ((1.0 - _3554) * dot(vec3(_3540, _3541, _3542), vec3(_791, _794, _797))) + _3554;
                                float _3560 = _3551 * _3551;
                                float _3564 = (fma(_1905, _3444.z, fma(_1904, _3444.y, _3444.x * _1903)) + _3444.w) / _3505;
                                float _3565 = (fma(_1905, _3459.z, fma(_1904, _3459.y, _3459.x * _1903)) + _3459.w) / _3505;
                                float _3569 = 1.0 - dot(vec2(_3564, _3565), vec2(_3564, _3565));
                                float _4693 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3570 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3571 = _3570 * (((isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0))) * _3547) / ((_3560 * 0.699999988079071044921875) + 1.0));
                                float _3583 = exp2(log2(1.0 / ((_3560 * 3.5) + 5.0)) * 0.25);
                                float _3584 = 1.0 - _851;
                                float _3591 = sqrt(1.0 - ((1.0 - (_3584 * _3584)) * (1.0 - (_3583 * _3583))));
                                float _3592 = _3591 * _3591;
                                float _3593 = _3592 * _3592;
                                float _3594 = _3540 - _3044;
                                float _3595 = _3541 - _3045;
                                float _3596 = _3542 - _3046;
                                float _3600 = inversesqrt(dot(vec3(_3594, _3595, _3596), vec3(_3594, _3595, _3596)));
                                float _3604 = dot(vec3(_791, _794, _797), vec3((-0.0) - _3044, (-0.0) - _3045, (-0.0) - _3046));
                                float _4704 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3607 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3608 = dot(vec3(_791, _794, _797), vec3(_3600 * _3594, _3600 * _3595, _3600 * _3596));
                                float _4715 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3611 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3615 = ((_3611 * _3611) * (_3593 + (-1.0))) + 1.0;
                                float _3616 = _3553 * _3592;
                                float _3617 = _3616 * _3616;
                                float _3623 = ((1.0 - _3617) * dot(vec3(_791, _794, _797), vec3(_3540, _3541, _3542))) + _3617;
                                float _4726 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3624 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3625 = 1.0 - _3592;
                                float _3635 = (0.5 / (((_3624 * ((_3607 * _3625) + _3592)) + 9.9999999392252902907785028219223e-09) + (((_3624 * _3625) + _3592) * _3607))) * _3624;
                                float _4737 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3645 = (_3570 * _3547) * (((_3593 * 3.1415927410125732421875) * (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) / ((_3615 * _3615) * ((_3560 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3571 * _3417.y;
                                frontier_phi_78_pred_1 = _3571 * _3417.x;
                                frontier_phi_78_pred_2 = _3645 * _3429.z;
                                frontier_phi_78_pred_3 = _3645 * _3429.y;
                                frontier_phi_78_pred_4 = _3645 * _3429.x;
                                frontier_phi_78_pred_5 = _3571 * _3417.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3653 = frontier_phi_78_pred;
                            _3652 = frontier_phi_78_pred_1;
                            _3651 = frontier_phi_78_pred_2;
                            _3650 = frontier_phi_78_pred_3;
                            _3649 = frontier_phi_78_pred_4;
                            _3654 = frontier_phi_78_pred_5;
                            _3359 = _3652 + _3372;
                            _3360 = _3653 + _3373;
                            _3361 = _3654 + _3374;
                            _3356 = _3649 + _3369;
                            _3357 = _3650 + _3370;
                            _3358 = _3651 + _3371;
                            if (_3376 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3376;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3361;
                        frontier_phi_72_pred_1 = _3360;
                        frontier_phi_72_pred_2 = _3359;
                        frontier_phi_72_pred_3 = _3358;
                        frontier_phi_72_pred_4 = _3357;
                        frontier_phi_72_pred_5 = _3356;
                    }
                    _3029 = frontier_phi_72_pred;
                    _3027 = frontier_phi_72_pred_1;
                    _3025 = frontier_phi_72_pred_2;
                    _3023 = frontier_phi_72_pred_3;
                    _3021 = frontier_phi_72_pred_4;
                    _3019 = frontier_phi_72_pred_5;
                    uint _3164 = _3163 + 1u;
                    if (_3164 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3157 = _3019;
                        _3158 = _3021;
                        _3159 = _3023;
                        _3160 = _3025;
                        _3161 = _3027;
                        _3162 = _3029;
                        _3163 = _3164;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3029;
                frontier_phi_60_61_ladder_1 = _3027;
                frontier_phi_60_61_ladder_2 = _3023;
                frontier_phi_60_61_ladder_3 = _3021;
                frontier_phi_60_61_ladder_4 = _3019;
                frontier_phi_60_61_ladder_5 = _3025;
            }
            else
            {
                frontier_phi_60_61_ladder = _2915;
                frontier_phi_60_61_ladder_1 = _2913;
                frontier_phi_60_61_ladder_2 = _2909;
                frontier_phi_60_61_ladder_3 = _2907;
                frontier_phi_60_61_ladder_4 = _2905;
                frontier_phi_60_61_ladder_5 = _2911;
            }
            _3018 = frontier_phi_60_61_ladder_4;
            _3020 = frontier_phi_60_61_ladder_3;
            _3022 = frontier_phi_60_61_ladder_2;
            _3024 = frontier_phi_60_61_ladder_5;
            _3026 = frontier_phi_60_61_ladder_1;
            _3028 = frontier_phi_60_61_ladder;
        }
        float _3033 = isnan(1.0) ? _835 : (isnan(_835) ? 1.0 : min(_835, 1.0));
        _2838 = (_3033 * _3024) + _2369;
        _2840 = (_3033 * _3026) + _2371;
        _2842 = (_3033 * _3028) + _2373;
        _2844 = ((_3018 * 0.039999999105930328369140625) * _3033) + _2692;
        _2846 = ((_3020 * 0.039999999105930328369140625) * _3033) + _2694;
        _2848 = ((_3022 * 0.039999999105930328369140625) * _3033) + _2696;
    }
    else
    {
        _2838 = _2369;
        _2840 = _2371;
        _2842 = _2373;
        _2844 = _2692;
        _2846 = _2694;
        _2848 = _2696;
    }
    float _4753 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _4764 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _4775 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    uint _2868 = _240 + 6u;
    float _2876 = _772 / cbSceneParam._m0[86u].x;
    float _2877 = _773 / cbSceneParam._m0[86u].y;
    vec4 _2891 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2876, _2877, (log2((isnan(cbSceneParam._m0[77u].w) ? _705 : (isnan(_705) ? cbSceneParam._m0[77u].w : min(_705, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2893 = _2891.x;
    float _2894 = _2891.y;
    float _2895 = _2891.z;
    float _2896 = _2891.w;
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    if (_705 > cbSceneParam._m0[78u].w)
    {
        float _2930 = isnan(_705) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _705 : min(cbSceneParam._m0[80u].w, _705));
        float _2931 = _2930 / _705;
        float _2942 = _2931 * _757;
        float _2943 = _758 * _2931;
        float _2944 = (-0.0) - _2943;
        float _2946 = _2931 * _759;
        float _2948 = (cbSceneParam._m0[77u].w * _2944) / _2930;
        float _2949 = _2948 + cbSceneParam._m0[79u].w;
        float _2950 = cbSceneParam._m0[79u].w - _2943;
        float _2956 = sqrt(((_2942 * _2942) + (_2943 * _2943)) + (_2946 * _2946));
        float _2959 = (1.0 - (cbSceneParam._m0[77u].w / _2930)) * _2956;
        float _2964 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2966 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3119;
        if (abs((_2944 - _2948) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3119 = ((((_2949 > 0.0) ? exp2(_2964 * _2949) : (2.0 - exp2(_2966 * _2949))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2959;
        }
        else
        {
            float _3079 = 1.0 / cbSceneParam._m0[80u].x;
            float _3080 = isnan(_2950) ? _2949 : (isnan(_2949) ? _2950 : max(_2949, _2950));
            float _3081 = isnan(_2950) ? _2949 : (isnan(_2949) ? _2950 : min(_2949, _2950));
            float _3090 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : min(_3080, 0.0));
            float _3091 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : min(_3081, 0.0));
            _3119 = ((abs(_2956 / _2944) * cbSceneParam._m0[80u].y) * ((((_3090 - _3091) * 2.0) - ((exp2(_2964 * (isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0)))) - exp2(_2964 * (isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0))))) * _3079)) - ((exp2(_2966 * _3090) - exp2(_2966 * _3091)) * _3079))) + (_2959 * cbSceneParam._m0[80u].z);
        }
        vec4 _3121 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2876, _2877, 1.0), 0.0);
        float _3130 = exp2((_3119 * (-1.44269502162933349609375)) * (1.0 - _3121.w));
        float _3131 = log2(_3130);
        float _3147 = log2(_2896);
        _2968 = (exp2(_3147 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3131 * cbSceneParam._m0[78u].x)) * _3121.x) / cbSceneParam._m0[78u].x)) + _2893;
        _2970 = (exp2(_3147 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3131 * cbSceneParam._m0[78u].y)) * _3121.y) / cbSceneParam._m0[78u].y)) + _2894;
        _2972 = (exp2(_3147 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3131 * cbSceneParam._m0[78u].z)) * _3121.z) / cbSceneParam._m0[78u].z)) + _2895;
        _2974 = _3130 * _2896;
    }
    else
    {
        _2968 = _2893;
        _2970 = _2894;
        _2972 = _2895;
        _2974 = _2896;
    }
    float _2986 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2987 = _2986 == 3.0;
    float _2988 = log2(_2974);
    float _2995 = exp2(_2988 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2838 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _835))) + ((_2844 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1639)) * cbPerFrame._m0[3u].x));
    float _2996 = exp2(_2988 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2840 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _835))) + ((_2846 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1639)) * cbPerFrame._m0[3u].x));
    float _2997 = exp2(_2988 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2842 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _835))) + ((_2848 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1639)) * cbPerFrame._m0[3u].x));
    float _3006 = (_2986 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3006 * (_2987 ? _2995 : (_2995 + (cbSceneParam._m0[72u].w * _2968)));
    SV_Target.y = _3006 * (_2987 ? _2996 : (_2996 + (cbSceneParam._m0[72u].w * _2970)));
    SV_Target.z = _3006 * (_2987 ? _2997 : (_2997 + (cbSceneParam._m0[72u].w * _2972)));
    SV_Target.w = cbInstanceData._m0[_2868].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2868].w;
}


