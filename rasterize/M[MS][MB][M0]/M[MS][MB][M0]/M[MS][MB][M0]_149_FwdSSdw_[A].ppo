#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1346;
float _3727;
float _3728;
float _3729;
float _3730;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _372 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _372) * cbMtdParam._m0[24u].x) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3739 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _397 = (_390 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _398 = (_390 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _399 = (_390 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _418 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _438 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _465 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _484 = _482.x;
    float _485 = _482.y;
    float _486 = _482.z;
    float _495 = ((_465.z - _486) * _390) + _486;
    float _498 = ((((_465.x - _484) * _390) + _484) * 2.0) + (-1.0);
    float _499 = ((((_465.y - _485) * _390) + _485) * 2.0) + (-1.0);
    float _500 = dot(vec2(_498, _499), vec2(_498, _499));
    float _3750 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _505 = sqrt(1.0 - (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))));
    vec4 _525 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _537 = (_498 + ((((_438.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_525.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _538 = (_499 + ((((_438.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_525.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _541 = fma(_505, _243, fma(_538, _250, _537 * _236));
    float _544 = fma(_505, _244, fma(_538, _251, _537 * _237));
    float _547 = fma(_505, _245, fma(_538, _252, _537 * _238));
    float _551 = inversesqrt(dot(vec3(_541, _544, _547), vec3(_541, _544, _547)));
    vec4 _580 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _582 = _580.x;
    float _583 = 1.0 - _582;
    float _589 = (cbMtdParam._m0[19u].x + dot(vec4(_551 * _541, _551 * _544, _551 * _547, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_582 - _583) * cbMtdParam._m0[24u].z) + _583) * cbMtdParam._m0[21u].z);
    float _3761 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _592 = (-0.0) - cbMtdParam._m0[24u].y;
    float _594 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _595 = isnan(1.0) ? _594 : (isnan(_594) ? 1.0 : min(_594, 1.0));
    float _602 = _590 - ((_590 * TEXCOORD_8.x) * _595);
    float _603 = _590 - ((_590 * TEXCOORD_8.y) * _595);
    float _604 = _590 - ((_590 * TEXCOORD_8.z) * _595);
    float _611 = (_602 * ((_418.x * cbMtdParam._m0[18u].x) - _397)) + _397;
    float _612 = (_603 * ((_418.y * cbMtdParam._m0[18u].y) - _398)) + _398;
    float _613 = (_604 * ((_418.z * cbMtdParam._m0[18u].z) - _399)) + _399;
    vec4 _625 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _627 = _625.x;
    float _628 = 1.0 - _627;
    float _656 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_627 - _628) * cbMtdParam._m0[24u].w) + _628) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3782 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _657 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _665 = ((((cbMtdParam._m0[10u].x - _611) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _657) + _611;
    float _666 = ((((cbMtdParam._m0[10u].y - _612) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _657) + _612;
    float _667 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _613)) * _657) + _613;
    float _672 = (((_438.z - _495) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _495;
    float _676 = ((_525.z - _672) * cbMtdParam._m0[19u].w) + _672;
    vec4 _690 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _697 = (_690.x * 2.0) + (-1.0);
    float _698 = (_690.y * 2.0) + (-1.0);
    float _699 = dot(vec2(_697, _698), vec2(_697, _698));
    float _3793 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _707 = ((_690.z - _676) * _602) + _676;
    float _710 = ((cbMtdParam._m0[23u].y - _707) * _657) + _707;
    vec4 _729 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _735 = (_729.x * 2.0) + (-1.0);
    float _736 = (_729.y * 2.0) + (-1.0);
    float _737 = dot(vec2(_735, _736), vec2(_735, _736));
    float _3804 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _752 = ((sqrt(1.0 - (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) - _505) * _604) + _505;
    float _755 = (((_697 - _537) * _602) + _537) + (cbMtdParam._m0[21u].x * _537);
    float _756 = (((_698 - _538) * _603) + _538) + (cbMtdParam._m0[21u].x * _538);
    float _767 = (((_735 - _755) + (_755 * cbMtdParam._m0[22u].z)) * _657) + _755;
    float _768 = (((_736 - _756) + (_756 * cbMtdParam._m0[22u].z)) * _657) + _756;
    float _769 = (_657 * (sqrt(1.0 - (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) - _752)) + _752;
    float _771 = cbMtdParam._m0[22u].x + _525.w;
    float _774 = fma(_769, _243, fma(_768, _250, _767 * _236));
    float _777 = fma(_769, _244, fma(_768, _251, _767 * _237));
    float _780 = fma(_769, _245, fma(_768, _252, _767 * _238));
    float _784 = inversesqrt(dot(vec3(_774, _777, _780), vec3(_774, _777, _780)));
    float _785 = _784 * _774;
    float _786 = _784 * _777;
    float _787 = _784 * _780;
    float _3815 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _788 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _3826 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _3837 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _3848 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _3859 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _806 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _847 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _857 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _847);
    float _858 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _847);
    float _859 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _847);
    float _863 = inversesqrt(dot(vec3(_857, _858, _859), vec3(_857, _858, _859)));
    float _864 = _857 * _863;
    float _865 = _858 * _863;
    float _866 = _859 * _863;
    vec4 _871 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _873 = _871.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1027 = sqrt(((_857 * _857) + (_858 * _858)) + (_859 * _859));
        float _1033 = (cbMatDynParam._m0[5u].x * _1027) + cbMatDynParam._m0[5u].y;
        float _3870 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1038 = (cbMatDynParam._m0[5u].z * _1027) + cbMatDynParam._m0[5u].w;
        float _3881 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) - _1034)) + _1034) < ((_873 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _884 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _885 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _903 = fma(_787, cbSceneParam._m0[5u].z, fma(_786, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _785));
    float _906 = fma(_787, cbSceneParam._m0[6u].z, fma(_786, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _785));
    float _909 = fma(_787, cbSceneParam._m0[7u].z, fma(_786, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _785));
    uint _922 = _255 + 9u;
    uint _923 = _922 + uint(cbMatDynParam._m0[0u].w);
    float _929 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * cbInstanceData._m0[_923].x;
    float _930 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * cbInstanceData._m0[_923].y;
    float _931 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * cbInstanceData._m0[_923].z;
    float _3892 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _932 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _933 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _3914 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _934 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    vec4 _943 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _884, cbSceneParam._m0[86u].y * _885));
    float _947 = ((isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * TEXCOORD_5.w) * _943.x;
    float _948 = dot(vec3(_785, _786, _787), vec3(_864, _865, _866));
    float _951 = _948 * 2.0;
    float _955 = (_951 * _785) - _864;
    float _956 = (_951 * _786) - _865;
    float _957 = (_951 * _787) - _866;
    float _961 = abs(dot(vec3(_864, _865, _866), vec3(_785, _786, _787)));
    float _3925 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _963 = sqrt(_788);
    float _976 = exp2((_963 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_963 * 3.0));
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1345;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1070 = fma(_1016, cbModelParam._m0[26u].z, fma(_1012, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1008));
        float _1074 = fma(_1016, cbModelParam._m0[27u].z, fma(_1012, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1008));
        float _1078 = fma(_1016, cbModelParam._m0[28u].z, fma(_1012, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1008));
        float _1103 = _1008 + _785;
        float _1104 = _1012 + _786;
        float _1105 = _1016 + _787;
        float _1115 = fma(_1105, cbModelParam._m0[26u].z, fma(_1104, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1103)) - _1070;
        float _1116 = fma(_1105, cbModelParam._m0[27u].z, fma(_1104, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1103)) - _1074;
        float _1117 = fma(_1105, cbModelParam._m0[28u].z, fma(_1104, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1103)) - _1078;
        float _1121 = inversesqrt(dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117)));
        float _1134 = ((_1121 * _1115) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1070 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1135 = ((_1121 * _1116) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1074 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1121 * _1117) / cbModelParam._m0[34u].z) + ((((((_1078 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        float _1173 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1139.x + (-0.5));
        float _1175 = _1173 * (_1139.y + (-0.5));
        float _1176 = _1173 * (_1139.z + (-0.5));
        float _1183 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1146.x + (-0.5));
        float _1185 = _1183 * (_1146.y + (-0.5));
        float _1186 = _1183 * (_1146.z + (-0.5));
        float _1193 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1153.x + (-0.5));
        float _1195 = _1193 * (_1153.y + (-0.5));
        float _1196 = _1193 * (_1153.z + (-0.5));
        float _1203 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1160.x + (-0.5));
        float _1205 = _1203 * (_1160.y + (-0.5));
        float _1206 = _1203 * (_1160.z + (-0.5));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = _1174 * 0.5;
        float _1211 = _1184 * 0.5;
        float _1212 = _1194 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1227 = (dot(vec3(_785, _786, _787), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1237 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3973 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1239 + 1.0))) + _1244) * _1207;
        float _1254 = _1175 * 0.5;
        float _1255 = _1185 * 0.5;
        float _1256 = _1195 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_785, _786, _787), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _4006 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1281 + 1.0))) + _1286) * _1208;
        float _1296 = _1176 * 0.5;
        float _1297 = _1186 * 0.5;
        float _1298 = _1196 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_785, _786, _787), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _4039 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1323 + 1.0))) + _1328) * _1209;
        _1345 = _1176;
        _1347 = _1175;
        _1348 = _1174;
        _1349 = _1186;
        _1350 = _1185;
        _1351 = _1184;
        _1352 = _1196;
        _1353 = _1195;
        _1354 = _1194;
        _1355 = _1209;
        _1356 = _1208;
        _1357 = _1207;
        _1358 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1359 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1360 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
    }
    else
    {
        _1345 = _1346;
        _1347 = _1346;
        _1348 = _1346;
        _1349 = _1346;
        _1350 = _1346;
        _1351 = _1346;
        _1352 = _1346;
        _1353 = _1346;
        _1354 = _1346;
        _1355 = _1346;
        _1356 = _1346;
        _1357 = _1346;
        _1358 = 0.0;
        _1359 = 0.0;
        _1360 = 0.0;
    }
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1388 = fma(_1016, cbModelParam._m0[30u].z, fma(_1012, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1008));
        float _1392 = fma(_1016, cbModelParam._m0[31u].z, fma(_1012, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1008));
        float _1396 = fma(_1016, cbModelParam._m0[32u].z, fma(_1012, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1008));
        float _1419 = _1008 + _785;
        float _1420 = _1012 + _786;
        float _1421 = _1016 + _787;
        float _1431 = fma(_1421, cbModelParam._m0[30u].z, fma(_1420, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1419)) - _1388;
        float _1432 = fma(_1421, cbModelParam._m0[31u].z, fma(_1420, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1419)) - _1392;
        float _1433 = fma(_1421, cbModelParam._m0[32u].z, fma(_1420, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1419)) - _1396;
        float _1437 = inversesqrt(dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433)));
        float _1450 = ((_1437 * _1431) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1388 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1451 = ((_1437 * _1432) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1392 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1452 = ((_1437 * _1433) / cbModelParam._m0[35u].z) + ((((((_1396 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        float _1487 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1454.x + (-0.5));
        float _1489 = _1487 * (_1454.y + (-0.5));
        float _1490 = _1487 * (_1454.z + (-0.5));
        float _1497 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1461.x + (-0.5));
        float _1499 = _1497 * (_1461.y + (-0.5));
        float _1500 = _1497 * (_1461.z + (-0.5));
        float _1507 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1468.x + (-0.5));
        float _1509 = _1507 * (_1468.y + (-0.5));
        float _1510 = _1507 * (_1468.z + (-0.5));
        float _1517 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1475.x + (-0.5));
        float _1519 = _1517 * (_1475.y + (-0.5));
        float _1520 = _1517 * (_1475.z + (-0.5));
        float _1521 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = _1488 * 0.5;
        float _1525 = _1498 * 0.5;
        float _1526 = _1508 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1540 = (dot(vec3(_785, _786, _787), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1549 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1521 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1551 = _1550 * 2.0;
        float _1555 = (1.0 - _1550) / (_1550 + 1.0);
        float _4102 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1565 = ((((1.0 - _1556) * (_1551 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1551 + 1.0))) + _1556) * _1521;
        float _1566 = _1489 * 0.5;
        float _1567 = _1499 * 0.5;
        float _1568 = _1509 * 0.5;
        float _1569 = dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568));
        float _1574 = (_1569 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1569);
        float _1582 = (dot(vec3(_785, _786, _787), vec3(_1574 * _1566, _1574 * _1567, _1574 * _1568)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1591 = sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1593 = _1592 * 2.0;
        float _1597 = (1.0 - _1592) / (_1592 + 1.0);
        float _4135 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1607 = ((((1.0 - _1598) * (_1593 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1593 + 1.0))) + _1598) * _1522;
        float _1608 = _1490 * 0.5;
        float _1609 = _1500 * 0.5;
        float _1610 = _1510 * 0.5;
        float _1611 = dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610));
        float _1616 = (_1611 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1611);
        float _1624 = (dot(vec3(_785, _786, _787), vec3(_1616 * _1608, _1616 * _1609, _1616 * _1610)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1633 = sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1635 = _1634 * 2.0;
        float _1639 = (1.0 - _1634) / (_1634 + 1.0);
        float _4168 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1649 = ((((1.0 - _1640) * (_1635 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1635 + 1.0))) + _1640) * _1523;
        _1657 = _1490;
        _1658 = _1489;
        _1659 = _1488;
        _1660 = _1500;
        _1661 = _1499;
        _1662 = _1498;
        _1663 = _1510;
        _1664 = _1509;
        _1665 = _1508;
        _1666 = _1523;
        _1667 = _1522;
        _1668 = _1521;
        _1669 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)));
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)));
        _1671 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)));
    }
    else
    {
        _1657 = _1346;
        _1658 = _1346;
        _1659 = _1346;
        _1660 = _1346;
        _1661 = _1346;
        _1662 = _1346;
        _1663 = _1346;
        _1664 = _1346;
        _1665 = _1346;
        _1666 = _1346;
        _1667 = _1346;
        _1668 = _1346;
        _1669 = 0.0;
        _1670 = 0.0;
        _1671 = 0.0;
    }
    float _1681 = (cbModelParam._m0[1u].x * (_1669 - _1358)) + _1358;
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1359)) + _1359;
    float _1683 = (cbModelParam._m0[1u].x * (_1671 - _1360)) + _1360;
    float _1704 = fma(_1683, cbSceneParam._m0[89u].z, fma(_1682, cbSceneParam._m0[89u].y, _1681 * cbSceneParam._m0[89u].x));
    float _1707 = fma(_1683, cbSceneParam._m0[90u].z, fma(_1682, cbSceneParam._m0[90u].y, _1681 * cbSceneParam._m0[90u].x));
    float _1710 = fma(_1683, cbSceneParam._m0[91u].z, fma(_1682, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1681));
    float _1725 = _955 * 0.5;
    float _1726 = _956 * 0.5;
    float _1727 = _957 * 0.5;
    float _1728 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1659, _1662, _1665, _1668));
    float _1731 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1734 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1657, _1660, _1663, _1666));
    float _1768;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1741 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1345, _1349, _1352, _1355));
        float _1745 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1347, _1350, _1353, _1356));
        float _1749 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1348, _1351, _1354, _1357));
        float _1756 = dot(vec4(cbModelParam._m0[39u]), vec4(_1725, _1726, _1727, 1.0));
        _1768 = dot(vec3(isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1756) ? 0.0 : (isnan(0.0) ? _1756 : max(0.0, _1756))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1768 = 1.0;
    }
    float _1779;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1770 = dot(vec4(cbModelParam._m0[40u]), vec4(_1725, _1726, _1727, 1.0));
        _1779 = dot(vec3(isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1770) ? 0.0 : (isnan(0.0) ? _1770 : max(0.0, _1770))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1779 = 1.0;
    }
    float _1783 = (_1779 * cbModelParam._m0[1u].x) + (_1768 * (1.0 - cbModelParam._m0[1u].x));
    float _1793 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _788);
    float _1794 = isnan(_1793) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1793 : min(cbModelParam._m0[25u].z, _1793));
    float _1874;
    float _1876;
    float _1878;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1841 = fma(_1016, cbModelParam._m0[13u].z, fma(_1012, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1008)) + cbModelParam._m0[13u].w;
        float _1845 = fma(_1016, cbModelParam._m0[14u].z, fma(_1012, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1008)) + cbModelParam._m0[14u].w;
        float _1849 = fma(_1016, cbModelParam._m0[15u].z, fma(_1012, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1008)) + cbModelParam._m0[15u].w;
        float _1852 = fma(_957, cbModelParam._m0[13u].z, fma(_956, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _955));
        float _1855 = fma(_957, cbModelParam._m0[14u].z, fma(_956, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _955));
        float _1858 = fma(_957, cbModelParam._m0[15u].z, fma(_956, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _955));
        float _1886;
        if (_1852 > 0.0)
        {
            _1886 = abs((1.0 - _1841) / _1852);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1841 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1886 = frontier_phi_17_15_ladder;
        }
        float _2107;
        if (_1855 > 0.0)
        {
            _2107 = abs((1.0 - _1845) / _1855);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1845 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2107 = frontier_phi_26_22_ladder;
        }
        float _2353;
        if (_1858 > 0.0)
        {
            _2353 = abs((1.0 - _1849) / _1858);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1849 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2353 = frontier_phi_38_33_ladder;
        }
        float _2355 = isnan(_2107) ? _1886 : (isnan(_1886) ? _2107 : min(_1886, _2107));
        float _2356 = isnan(_2353) ? _2355 : (isnan(_2355) ? _2353 : min(_2355, _2353));
        float _2360 = (_2356 * _1852) + _1841;
        float _2361 = (_2356 * _1855) + _1845;
        float _2362 = (_2356 * _1858) + _1849;
        float _2363 = _2356 * 9.9999997473787516355514526367188e-05;
        float _2365 = (-1.0) - _2363;
        float _2367 = _2363 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2362 > _2367) || ((_2362 < _2365) || ((_2361 > _2367) || ((_2361 < _2365) || ((_2360 < _2365) || (_2360 > _2367))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2486 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2362, cbModelParam._m0[9u].z, fma(_2361, cbModelParam._m0[9u].y, _2360 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2362, cbModelParam._m0[10u].z, fma(_2361, cbModelParam._m0[10u].y, _2360 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2362, cbModelParam._m0[11u].z, fma(_2361, cbModelParam._m0[11u].y, _2360 * cbModelParam._m0[11u].x))), _1794);
            frontier_phi_16_38_ladder = _2486.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2486.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2486.x * cbModelParam._m0[1u].y;
        }
        _1874 = frontier_phi_16_38_ladder_2;
        _1876 = frontier_phi_16_38_ladder_1;
        _1878 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1862 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_955, _956, _957), _1794);
        _1874 = _1862.x * cbModelParam._m0[1u].y;
        _1876 = _1862.y * cbModelParam._m0[1u].y;
        _1878 = _1862.z * cbModelParam._m0[1u].y;
    }
    float _1882 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _788);
    float _1883 = isnan(_1882) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1882 : min(cbModelParam._m0[25u].w, _1882));
    float _1972;
    float _1974;
    float _1976;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1936 = fma(_1016, cbModelParam._m0[21u].z, fma(_1012, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1008)) + cbModelParam._m0[21u].w;
        float _1940 = fma(_1016, cbModelParam._m0[22u].z, fma(_1012, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1008)) + cbModelParam._m0[22u].w;
        float _1944 = fma(_1016, cbModelParam._m0[23u].z, fma(_1012, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1008)) + cbModelParam._m0[23u].w;
        float _1947 = fma(_957, cbModelParam._m0[21u].z, fma(_956, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _955));
        float _1950 = fma(_957, cbModelParam._m0[22u].z, fma(_956, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _955));
        float _1953 = fma(_957, cbModelParam._m0[23u].z, fma(_956, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _955));
        float _2112;
        if (_1947 > 0.0)
        {
            _2112 = abs((1.0 - _1936) / _1947);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1936 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2112 = frontier_phi_28_24_ladder;
        }
        float _2380;
        if (_1950 > 0.0)
        {
            _2380 = abs((1.0 - _1940) / _1950);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1940 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2380 = frontier_phi_40_35_ladder;
        }
        float _2585;
        if (_1953 > 0.0)
        {
            _2585 = abs((1.0 - _1944) / _1953);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1944 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2585 = frontier_phi_49_46_ladder;
        }
        float _2587 = isnan(_2380) ? _2112 : (isnan(_2112) ? _2380 : min(_2112, _2380));
        float _2588 = isnan(_2585) ? _2587 : (isnan(_2587) ? _2585 : min(_2587, _2585));
        float _2592 = (_2588 * _1947) + _1936;
        float _2593 = (_2588 * _1950) + _1940;
        float _2594 = (_2588 * _1953) + _1944;
        float _2595 = _2588 * 9.9999997473787516355514526367188e-05;
        float _2596 = (-1.0) - _2595;
        float _2598 = _2595 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2594 > _2598) || ((_2594 < _2596) || ((_2593 > _2598) || ((_2593 < _2596) || ((_2592 < _2596) || (_2592 > _2598))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2793 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2594, cbModelParam._m0[17u].z, fma(_2593, cbModelParam._m0[17u].y, _2592 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2594, cbModelParam._m0[18u].z, fma(_2593, cbModelParam._m0[18u].y, _2592 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2594, cbModelParam._m0[19u].z, fma(_2593, cbModelParam._m0[19u].y, _2592 * cbModelParam._m0[19u].x))), _1883);
            frontier_phi_25_49_ladder = _2793.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2793.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2793.x * cbModelParam._m0[1u].z;
        }
        _1972 = frontier_phi_25_49_ladder_2;
        _1974 = frontier_phi_25_49_ladder_1;
        _1976 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1956 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_955, _956, _957), _1883);
        _1972 = _1956.x * cbModelParam._m0[1u].z;
        _1974 = _1956.y * cbModelParam._m0[1u].z;
        _1976 = _1956.z * cbModelParam._m0[1u].z;
    }
    float _1988 = ((((1.0 - _976) * ((_963 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_976 * _963)) * _947;
    float _1989 = _1988 * ((cbModelParam._m0[1u].w * (_1972 - _1874)) + _1874);
    float _1990 = _1988 * ((cbModelParam._m0[1u].w * (_1974 - _1876)) + _1876);
    float _1991 = _1988 * ((cbModelParam._m0[1u].w * (_1976 - _1878)) + _1878);
    float _1994 = fma(_1991, cbSceneParam._m0[89u].z, fma(_1990, cbSceneParam._m0[89u].y, _1989 * cbSceneParam._m0[89u].x));
    float _1997 = fma(_1991, cbSceneParam._m0[90u].z, fma(_1990, cbSceneParam._m0[90u].y, _1989 * cbSceneParam._m0[90u].x));
    float _2000 = fma(_1991, cbSceneParam._m0[91u].z, fma(_1990, cbSceneParam._m0[91u].y, _1989 * cbSceneParam._m0[91u].x));
    vec4 _2008 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_884, _885));
    float _2010 = _2008.w;
    float _2022 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2010);
    float _2023 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2010);
    float _2024 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2010);
    uvec4 _2028 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2030 = _2028.x * 14u;
    uint _2031 = _2030 + 13u;
    float _2038 = _947 + (-1.0);
    float _2043 = (cbLight._m0[_2031].x * _2038) + 1.0;
    float _2044 = (cbLight._m0[_2031].y * _2038) + 1.0;
    float _2045 = (cbLight._m0[_2031].z * _2038) + 1.0;
    float _2046 = (cbLight._m0[_2031].w * _2038) + 1.0;
    uint _2047 = _2030 + 5u;
    float _2053 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
    uint _2057 = _2030 + 4u;
    float _2066 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
    uint _2070 = _2030 | 1u;
    float _2081 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_785, _786, _787));
    float _2084 = dot(vec3(cbLight._m0[_2070].xyz), vec3(_785, _786, _787));
    float _4304 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _4315 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2089 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * 0.3183098733425140380859375;
    float _2091 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * 0.3183098733425140380859375;
    float _2098 = ((cbLight._m0[_2047].x * _2053) * _2091) + (((cbLight._m0[_2057].x * _2022) * _2066) * _2089);
    float _2099 = ((_2053 * cbLight._m0[_2047].y) * _2091) + (((cbLight._m0[_2057].y * _2023) * _2066) * _2089);
    float _2100 = ((_2053 * cbLight._m0[_2047].z) * _2091) + (((cbLight._m0[_2057].z * _2024) * _2066) * _2089);
    uvec4 _2104 = floatBitsToUint(cbLight._m0[_2030 + 12u]);
    bool _2106 = _2104.x == 0u;
    float _2117;
    float _2119;
    float _2121;
    if (_2106)
    {
        _2117 = _2098;
        _2119 = _2099;
        _2121 = _2100;
    }
    else
    {
        uint _2125 = _2030 + 6u;
        float _2141 = (dot(vec3(cbLight._m0[_2030 + 2u].xyz), vec3(_785, _786, _787)) * 0.5) + 0.5;
        float _2142 = _2141 * _2141;
        float _4326 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2143 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2144 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
        _2117 = (((cbLight._m0[_2125].x * 0.3183098733425140380859375) * _2143) * _2144) + _2098;
        _2119 = (((cbLight._m0[_2125].y * 0.3183098733425140380859375) * _2143) * _2144) + _2099;
        _2121 = (((cbLight._m0[_2125].z * 0.3183098733425140380859375) * _2143) * _2144) + _2100;
    }
    bool _2124 = _2104.y == 0u;
    float _2162;
    float _2164;
    float _2166;
    if (_2124)
    {
        _2162 = _2117;
        _2164 = _2119;
        _2166 = _2121;
    }
    else
    {
        uint _2324 = _2030 + 7u;
        float _2340 = (dot(vec3(cbLight._m0[_2030 + 3u].xyz), vec3(_785, _786, _787)) * 0.5) + 0.5;
        float _2341 = _2340 * _2340;
        float _4342 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2342 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _2343 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2162 = (((cbLight._m0[_2324].x * 0.3183098733425140380859375) * _2342) * _2343) + _2117;
        _2164 = (((cbLight._m0[_2324].y * 0.3183098733425140380859375) * _2342) * _2343) + _2119;
        _2166 = (((cbLight._m0[_2324].z * 0.3183098733425140380859375) * _2342) * _2343) + _2121;
    }
    uint _2169 = _2030 + 8u;
    float _2182 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2030].w)) * _788) * 0.949999988079071044921875);
    float _2183 = _2182 * _2182;
    float _2184 = cbLight._m0[_2030].x + _864;
    float _2185 = cbLight._m0[_2030].y + _865;
    float _2186 = cbLight._m0[_2030].z + _866;
    float _2190 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
    float _2191 = _2190 * _2184;
    float _2192 = _2190 * _2185;
    float _2193 = _2190 * _2186;
    float _2194 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2030].xyz));
    float _4358 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2197 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _4369 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _2198 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _2199 = dot(vec3(_785, _786, _787), vec3(_2191, _2192, _2193));
    float _4380 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2202 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _2203 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_2191, _2192, _2193));
    float _4391 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2207 = _2183 * _2183;
    float _2211 = ((_2202 * _2202) * (_2207 + (-1.0))) + 1.0;
    float _2222 = (exp2(log2(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2223 = 1.0 - _2183;
    float _2234 = (0.5 / (((_2198 * ((_2197 * _2223) + _2183)) + 9.9999999392252902907785028219223e-09) + (((_2198 * _2223) + _2183) * _2197))) * _2197;
    float _4402 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2236 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2207 / ((_2211 * _2211) * 3.141590118408203125));
    uint _2250 = _2030 + 9u;
    float _2261 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2070].w)) * _788) * 0.949999988079071044921875);
    float _2262 = _2261 * _2261;
    float _2263 = cbLight._m0[_2070].x + _864;
    float _2264 = cbLight._m0[_2070].y + _865;
    float _2265 = cbLight._m0[_2070].z + _866;
    float _2269 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
    float _2270 = _2269 * _2263;
    float _2271 = _2269 * _2264;
    float _2272 = _2269 * _2265;
    float _2273 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2070].xyz));
    float _4413 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _2277 = dot(vec3(_785, _786, _787), vec3(_2270, _2271, _2272));
    float _4424 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _2281 = dot(vec3(cbLight._m0[_2070].xyz), vec3(_2270, _2271, _2272));
    float _4435 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2285 = _2262 * _2262;
    float _2289 = ((_2280 * _2280) * (_2285 + (-1.0))) + 1.0;
    float _2298 = (exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2299 = 1.0 - _2262;
    float _2309 = (0.5 / (((_2198 * ((_2276 * _2299) + _2262)) + 9.9999999392252902907785028219223e-09) + (((_2198 * _2299) + _2262) * _2276))) * _2276;
    float _4446 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2311 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2285 / ((_2289 * _2289) * 3.141590118408203125));
    float _2321 = (((_2298 * cbLight._m0[_2250].x) * _2311) * _2053) + ((((cbLight._m0[_2169].x * _2022) * _2222) * _2236) * _2066);
    float _2322 = (((_2298 * cbLight._m0[_2250].y) * _2311) * _2053) + ((((cbLight._m0[_2169].y * _2023) * _2222) * _2236) * _2066);
    float _2323 = (((_2298 * cbLight._m0[_2250].z) * _2311) * _2053) + ((((cbLight._m0[_2169].z * _2024) * _2222) * _2236) * _2066);
    float _2385;
    float _2387;
    float _2389;
    if (_2106)
    {
        _2385 = _2321;
        _2387 = _2322;
        _2389 = _2323;
    }
    else
    {
        uint _2391 = _2030 + 2u;
        uint _2395 = _2030 + 10u;
        float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2391].w)) * _788) * 0.949999988079071044921875);
        float _2410 = _2409 * _2409;
        float _2411 = cbLight._m0[_2391].x + _864;
        float _2412 = cbLight._m0[_2391].y + _865;
        float _2413 = cbLight._m0[_2391].z + _866;
        float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
        float _2418 = _2417 * _2411;
        float _2419 = _2417 * _2412;
        float _2420 = _2417 * _2413;
        float _2421 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2391].xyz));
        float _4457 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2424 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2425 = dot(vec3(_785, _786, _787), vec3(_2418, _2419, _2420));
        float _4468 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2428 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2429 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_2418, _2419, _2420));
        float _4479 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2433 = _2410 * _2410;
        float _2437 = ((_2428 * _2428) * (_2433 + (-1.0))) + 1.0;
        float _2446 = (exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2447 = 1.0 - _2410;
        float _2457 = (0.5 / (((_2198 * ((_2424 * _2447) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2198 * _2447) + _2410) * _2424))) * _2424;
        float _4490 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2459 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2433 / ((_2437 * _2437) * 3.141590118408203125));
        float _2460 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
        _2385 = (((_2446 * cbLight._m0[_2395].x) * _2459) * _2460) + _2321;
        _2387 = (((_2446 * cbLight._m0[_2395].y) * _2459) * _2460) + _2322;
        _2389 = (((_2446 * cbLight._m0[_2395].z) * _2459) * _2460) + _2323;
    }
    float _2495;
    float _2497;
    float _2499;
    if (_2124)
    {
        _2495 = _2385;
        _2497 = _2387;
        _2499 = _2389;
    }
    else
    {
        uint _2506 = _2030 + 3u;
        uint _2510 = _2030 + 11u;
        float _2524 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2506].w)) * _788) * 0.949999988079071044921875);
        float _2525 = _2524 * _2524;
        float _2526 = cbLight._m0[_2506].x + _864;
        float _2527 = cbLight._m0[_2506].y + _865;
        float _2528 = cbLight._m0[_2506].z + _866;
        float _2532 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
        float _2533 = _2532 * _2526;
        float _2534 = _2532 * _2527;
        float _2535 = _2532 * _2528;
        float _2536 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2506].xyz));
        float _4506 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2539 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2540 = dot(vec3(_785, _786, _787), vec3(_2533, _2534, _2535));
        float _4517 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2544 = dot(vec3(cbLight._m0[_2506].xyz), vec3(_2533, _2534, _2535));
        float _4528 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2548 = _2525 * _2525;
        float _2552 = ((_2543 * _2543) * (_2548 + (-1.0))) + 1.0;
        float _2561 = (exp2(log2(1.0 - (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2562 = 1.0 - _2525;
        float _2572 = (0.5 / (((_2198 * ((_2539 * _2562) + _2525)) + 9.9999999392252902907785028219223e-09) + (((_2198 * _2562) + _2525) * _2539))) * _2539;
        float _4539 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2574 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2548 / ((_2552 * _2552) * 3.141590118408203125));
        float _2575 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2495 = (((_2561 * cbLight._m0[_2510].x) * _2574) * _2575) + _2385;
        _2497 = (((_2561 * cbLight._m0[_2510].y) * _2574) * _2575) + _2387;
        _2499 = (((_2561 * cbLight._m0[_2510].z) * _2574) * _2575) + _2389;
    }
    float _2710;
    float _2712;
    float _2714;
    float _2716;
    float _2718;
    float _2720;
    if (_2028.y == 0u)
    {
        float _2650 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2651 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2650;
        float _2652 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2650;
        float _2653 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2650;
        uvec4 _2665 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2666 = _2665.x;
        uint _2677 = uint((float(_2665.y) * floor(float(uint(cbSceneParam._m0[85u].y * _885) / _2666))) + floor(float(uint(cbSceneParam._m0[85u].x * _884) / _2666)));
        float _2687 = (log2(_2653 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2688 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        uint _2691 = uint(isnan(14.0) ? _2688 : (isnan(_2688) ? 14.0 : min(_2688, 14.0)));
        uvec4 _2696 = texelFetch(g_lightClusterGridBuffer, int(((_2691 << 2u) + (_2677 << 6u)) >> 2u));
        uint _2697 = _2696.x;
        uint _2698 = _2665.z;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        if (((((1u << ((_2698 >> 4u) & 15u)) + 4294967295u) & _2697) == 0u) || ((_2698 & 240u) == 0u))
        {
            _2798 = 0.0;
            _2800 = 0.0;
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
            _2808 = 0.0;
        }
        else
        {
            float _2799;
            float _2801;
            float _2803;
            float _2805;
            float _2807;
            float _2809;
            float _2950 = 0.0;
            float _2951 = 0.0;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            uint _2956 = 0u;
            uint _2965;
            bool _2966;
            for (;;)
            {
                _2965 = texelFetch(g_lightClassification, int((((_2691 << 5u) + (_2677 << 9u)) + (_2956 << 2u)) >> 2u)).x;
                _2966 = _2965 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2966)
                {
                    frontier_phi_66_pred = _2950;
                    frontier_phi_66_pred_1 = _2955;
                    frontier_phi_66_pred_2 = _2954;
                    frontier_phi_66_pred_3 = _2953;
                    frontier_phi_66_pred_4 = _2952;
                    frontier_phi_66_pred_5 = _2951;
                }
                else
                {
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    uint _3101;
                    _3095 = _2950;
                    _3096 = _2951;
                    _3097 = _2952;
                    _3098 = _2953;
                    _3099 = _2954;
                    _3100 = _2955;
                    _3101 = _2965;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    for (;;)
                    {
                        uint _3105 = uint(findLSB(_3101)) + (_2956 << 5u);
                        uint _3102 = (_3101 + 4294967295u) & _3101;
                        uint _3107 = _3105 * 48u;
                        vec4 _3121 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3107)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 3u)).x));
                        uint _3127 = (_3105 * 48u) + 4u;
                        vec4 _3140 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3127)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3127 + 3u)).x));
                        uint _3146 = (_3105 * 48u) + 8u;
                        vec3 _3157 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3146)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 2u)).x));
                        float _3161 = _3121.x - _2651;
                        float _3162 = _3121.y - _2652;
                        float _3163 = _3121.z - _2653;
                        float _3164 = dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163));
                        float _3167 = inversesqrt(_3164);
                        float _3168 = _3167 * _3161;
                        float _3169 = _3167 * _3162;
                        float _3170 = _3167 * _3163;
                        float _3171 = dot(vec3(_903, _906, _909), vec3(_3168, _3169, _3170));
                        float _3176 = 1.0 - (_3164 * _3121.w);
                        float _4565 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3177 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                        float _3178 = sqrt(_3164) * _3140.w;
                        float _3181 = 1.39999997615814208984375 / (_3178 + 1.39999997615814208984375);
                        float _3182 = _3181 * _3181;
                        float _3185 = ((1.0 - _3182) * _3171) + _3182;
                        float _3188 = _3178 * _3178;
                        float _3192 = ((isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0))) * _3177) / ((_3188 * 0.699999988079071044921875) + 1.0);
                        float _3196 = (-0.0) - _2651;
                        float _3197 = (-0.0) - _2652;
                        float _3198 = (-0.0) - _2653;
                        float _3202 = inversesqrt(dot(vec3(_3196, _3197, _3198), vec3(_3196, _3197, _3198)));
                        float _3203 = _3202 * _3196;
                        float _3204 = _3202 * _3197;
                        float _3205 = _3202 * _3198;
                        float _3213 = exp2(log2(1.0 / ((_3188 * 3.5) + 5.0)) * 0.25);
                        float _3214 = 1.0 - _963;
                        float _3221 = sqrt(1.0 - ((1.0 - (_3214 * _3214)) * (1.0 - (_3213 * _3213))));
                        float _3222 = _3221 * _3221;
                        float _3223 = _3222 * _3222;
                        float _3224 = _3203 + _3168;
                        float _3225 = _3204 + _3169;
                        float _3226 = _3205 + _3170;
                        float _3230 = inversesqrt(dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226)));
                        float _3234 = dot(vec3(_903, _906, _909), vec3(_3203, _3204, _3205));
                        float _4581 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3237 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                        float _3238 = dot(vec3(_903, _906, _909), vec3(_3230 * _3224, _3230 * _3225, _3230 * _3226));
                        float _4592 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3241 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                        float _3245 = ((_3241 * _3241) * (_3223 + (-1.0))) + 1.0;
                        float _3246 = _3181 * _3222;
                        float _3247 = _3246 * _3246;
                        float _3250 = ((1.0 - _3247) * _3171) + _3247;
                        float _4603 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3251 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                        float _3252 = 1.0 - _3222;
                        float _3262 = (0.5 / (((_3251 * ((_3237 * _3252) + _3222)) + 9.9999999392252902907785028219223e-09) + (((_3251 * _3252) + _3222) * _3237))) * _3251;
                        float _4614 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                        float _3273 = (((_3223 * 3.1415927410125732421875) * (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) / ((_3245 * _3245) * ((_3188 * 2.1991131305694580078125) + 3.141590118408203125))) * _3177;
                        _3025 = (_3192 * _3140.x) + _3098;
                        _3026 = (_3192 * _3140.y) + _3099;
                        _3027 = (_3192 * _3140.z) + _3100;
                        _3022 = (_3273 * _3157.x) + _3095;
                        _3023 = (_3273 * _3157.y) + _3096;
                        _3024 = (_3273 * _3157.z) + _3097;
                        if (_3102 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3095 = _3022;
                            _3096 = _3023;
                            _3097 = _3024;
                            _3098 = _3025;
                            _3099 = _3026;
                            _3100 = _3027;
                            _3101 = _3102;
                        }
                    }
                    frontier_phi_66_pred = _3022;
                    frontier_phi_66_pred_1 = _3027;
                    frontier_phi_66_pred_2 = _3026;
                    frontier_phi_66_pred_3 = _3025;
                    frontier_phi_66_pred_4 = _3024;
                    frontier_phi_66_pred_5 = _3023;
                }
                _2799 = frontier_phi_66_pred;
                _2809 = frontier_phi_66_pred_1;
                _2807 = frontier_phi_66_pred_2;
                _2805 = frontier_phi_66_pred_3;
                _2803 = frontier_phi_66_pred_4;
                _2801 = frontier_phi_66_pred_5;
                uint _2957 = _2956 + 1u;
                if (_2957 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2950 = _2799;
                    _2951 = _2801;
                    _2952 = _2803;
                    _2953 = _2805;
                    _2954 = _2807;
                    _2955 = _2809;
                    _2956 = _2957;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2798 = _2799;
            _2800 = _2801;
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
            _2808 = _2809;
        }
        uvec4 _2812 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2813 = _2812.z;
        uint _2815 = (_2813 >> 8u) & 15u;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        if (((4294967295u << _2815) & _2697) == 0u)
        {
            _2918 = _2798;
            _2920 = _2800;
            _2922 = _2802;
            _2924 = _2804;
            _2926 = _2806;
            _2928 = _2808;
        }
        else
        {
            float _2943 = inversesqrt(dot(vec3(_2651, _2652, _2653), vec3(_2651, _2652, _2653)));
            float _2944 = _2943 * _2651;
            float _2945 = _2943 * _2652;
            float _2946 = _2943 * _2653;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2815 < ((_2813 >> 12u) & 15u))
            {
                float _2919;
                float _2921;
                float _2923;
                float _2925;
                float _2927;
                float _2929;
                float _3078 = _2798;
                float _3079 = _2800;
                float _3080 = _2802;
                float _3081 = _2804;
                float _3082 = _2806;
                float _3083 = _2808;
                uint _3084 = _2815;
                uint _3093;
                bool _3094;
                for (;;)
                {
                    _3093 = texelFetch(g_lightClassification, int((((_2691 << 5u) + (_2677 << 9u)) + (_3084 << 2u)) >> 2u)).x;
                    _3094 = _3093 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3094)
                    {
                        frontier_phi_77_pred = _3083;
                        frontier_phi_77_pred_1 = _3082;
                        frontier_phi_77_pred_2 = _3081;
                        frontier_phi_77_pred_3 = _3080;
                        frontier_phi_77_pred_4 = _3079;
                        frontier_phi_77_pred_5 = _3078;
                    }
                    else
                    {
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3300 = _3078;
                        float _3301 = _3079;
                        float _3302 = _3080;
                        float _3303 = _3081;
                        float _3304 = _3082;
                        float _3305 = _3083;
                        uint _3306 = _3093;
                        uint _3307;
                        vec4 _3332;
                        float _3333;
                        vec4 _3348;
                        vec3 _3360;
                        vec4 _3375;
                        vec4 _3390;
                        float _3436;
                        bool _3437;
                        for (;;)
                        {
                            uint _3317 = ((_3084 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3306));
                            _3307 = (_3306 + 4294967295u) & _3306;
                            uint _3319 = _3317 * 40u;
                            _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            _3333 = _3332.w;
                            uint _3335 = (_3317 * 40u) + 4u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3350 = (_3317 * 40u) + 8u;
                            _3360 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x));
                            uint _3362 = (_3317 * 40u) + 16u;
                            _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3377 = (_3317 * 40u) + 20u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3392 = (_3317 * 40u) + 24u;
                            vec4 _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            uint _3411 = (_3317 * 40u) + 28u;
                            vec4 _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            _3436 = fma(_2653, _3424.z, fma(_2652, _3424.y, _3424.x * _2651)) + _3424.w;
                            _3437 = !((fma(_2653, _3405.z, fma(_2652, _3405.y, _3405.x * _2651)) + _3405.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3437)
                            {
                                float _3464 = _3332.x - _2651;
                                float _3465 = _3332.y - _2652;
                                float _3466 = _3332.z - _2653;
                                float _3467 = dot(vec3(_3464, _3465, _3466), vec3(_3464, _3465, _3466));
                                float _3470 = inversesqrt(_3467);
                                float _3471 = _3470 * _3464;
                                float _3472 = _3470 * _3465;
                                float _3473 = _3470 * _3466;
                                float _3477 = 1.0 - (_3467 / (_3333 * _3333));
                                float _4625 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3478 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3482 = sqrt(_3467) * _3348.w;
                                float _3484 = 1.39999997615814208984375 / (_3482 + 1.39999997615814208984375);
                                float _3485 = _3484 * _3484;
                                float _3488 = ((1.0 - _3485) * dot(vec3(_3471, _3472, _3473), vec3(_903, _906, _909))) + _3485;
                                float _3491 = _3482 * _3482;
                                float _3495 = (fma(_2653, _3375.z, fma(_2652, _3375.y, _3375.x * _2651)) + _3375.w) / _3436;
                                float _3496 = (fma(_2653, _3390.z, fma(_2652, _3390.y, _3390.x * _2651)) + _3390.w) / _3436;
                                float _3500 = 1.0 - dot(vec2(_3495, _3496), vec2(_3495, _3496));
                                float _4641 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3501 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3502 = _3501 * (((isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0))) * _3478) / ((_3491 * 0.699999988079071044921875) + 1.0));
                                float _3514 = exp2(log2(1.0 / ((_3491 * 3.5) + 5.0)) * 0.25);
                                float _3515 = 1.0 - _963;
                                float _3522 = sqrt(1.0 - ((1.0 - (_3515 * _3515)) * (1.0 - (_3514 * _3514))));
                                float _3523 = _3522 * _3522;
                                float _3524 = _3523 * _3523;
                                float _3525 = _3471 - _2944;
                                float _3526 = _3472 - _2945;
                                float _3527 = _3473 - _2946;
                                float _3531 = inversesqrt(dot(vec3(_3525, _3526, _3527), vec3(_3525, _3526, _3527)));
                                float _3535 = dot(vec3(_903, _906, _909), vec3((-0.0) - _2944, (-0.0) - _2945, (-0.0) - _2946));
                                float _4652 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3538 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3539 = dot(vec3(_903, _906, _909), vec3(_3531 * _3525, _3531 * _3526, _3531 * _3527));
                                float _4663 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3542 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3546 = ((_3542 * _3542) * (_3524 + (-1.0))) + 1.0;
                                float _3547 = _3484 * _3523;
                                float _3548 = _3547 * _3547;
                                float _3554 = ((1.0 - _3548) * dot(vec3(_903, _906, _909), vec3(_3471, _3472, _3473))) + _3548;
                                float _4674 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3555 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                                float _3556 = 1.0 - _3523;
                                float _3566 = (0.5 / (((_3555 * ((_3538 * _3556) + _3523)) + 9.9999999392252902907785028219223e-09) + (((_3555 * _3556) + _3523) * _3538))) * _3555;
                                float _4685 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3576 = (_3501 * _3478) * (((_3524 * 3.1415927410125732421875) * (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) / ((_3546 * _3546) * ((_3491 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3502 * _3348.y;
                                frontier_phi_83_pred_1 = _3502 * _3348.x;
                                frontier_phi_83_pred_2 = _3576 * _3360.z;
                                frontier_phi_83_pred_3 = _3576 * _3360.y;
                                frontier_phi_83_pred_4 = _3576 * _3360.x;
                                frontier_phi_83_pred_5 = _3502 * _3348.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3584 = frontier_phi_83_pred;
                            _3583 = frontier_phi_83_pred_1;
                            _3582 = frontier_phi_83_pred_2;
                            _3581 = frontier_phi_83_pred_3;
                            _3580 = frontier_phi_83_pred_4;
                            _3585 = frontier_phi_83_pred_5;
                            _3290 = _3583 + _3303;
                            _3291 = _3584 + _3304;
                            _3292 = _3585 + _3305;
                            _3287 = _3580 + _3300;
                            _3288 = _3581 + _3301;
                            _3289 = _3582 + _3302;
                            if (_3307 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3307;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3292;
                        frontier_phi_77_pred_1 = _3291;
                        frontier_phi_77_pred_2 = _3290;
                        frontier_phi_77_pred_3 = _3289;
                        frontier_phi_77_pred_4 = _3288;
                        frontier_phi_77_pred_5 = _3287;
                    }
                    _2929 = frontier_phi_77_pred;
                    _2927 = frontier_phi_77_pred_1;
                    _2925 = frontier_phi_77_pred_2;
                    _2923 = frontier_phi_77_pred_3;
                    _2921 = frontier_phi_77_pred_4;
                    _2919 = frontier_phi_77_pred_5;
                    uint _3085 = _3084 + 1u;
                    if (_3085 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3078 = _2919;
                        _3079 = _2921;
                        _3080 = _2923;
                        _3081 = _2925;
                        _3082 = _2927;
                        _3083 = _2929;
                        _3084 = _3085;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2923;
                frontier_phi_58_59_ladder_1 = _2929;
                frontier_phi_58_59_ladder_2 = _2927;
                frontier_phi_58_59_ladder_3 = _2925;
                frontier_phi_58_59_ladder_4 = _2921;
                frontier_phi_58_59_ladder_5 = _2919;
            }
            else
            {
                frontier_phi_58_59_ladder = _2802;
                frontier_phi_58_59_ladder_1 = _2808;
                frontier_phi_58_59_ladder_2 = _2806;
                frontier_phi_58_59_ladder_3 = _2804;
                frontier_phi_58_59_ladder_4 = _2800;
                frontier_phi_58_59_ladder_5 = _2798;
            }
            _2918 = frontier_phi_58_59_ladder_5;
            _2920 = frontier_phi_58_59_ladder_4;
            _2922 = frontier_phi_58_59_ladder;
            _2924 = frontier_phi_58_59_ladder_3;
            _2926 = frontier_phi_58_59_ladder_2;
            _2928 = frontier_phi_58_59_ladder_1;
        }
        float _2933 = isnan(1.0) ? _947 : (isnan(_947) ? 1.0 : min(_947, 1.0));
        _2710 = (_2933 * _2924) + _2162;
        _2712 = (_2933 * _2926) + _2164;
        _2714 = (_2933 * _2928) + _2166;
        _2716 = ((_2918 * 0.039999999105930328369140625) * _2933) + _2495;
        _2718 = ((_2920 * 0.039999999105930328369140625) * _2933) + _2497;
        _2720 = ((_2922 * 0.039999999105930328369140625) * _2933) + _2499;
    }
    else
    {
        _2710 = _2162;
        _2712 = _2164;
        _2714 = _2166;
        _2716 = _2495;
        _2718 = _2497;
        _2720 = _2499;
    }
    float _4701 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _4712 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _4723 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _2737 = ((isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2710 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _947))) + ((_2716 + ((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1783)) * cbPerFrame._m0[3u].x);
    float _2738 = ((isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2712 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _947))) + ((_2718 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1783)) * cbPerFrame._m0[3u].x);
    float _2739 = ((isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2714 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _947))) + ((_2720 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1783)) * cbPerFrame._m0[3u].x);
    uint _2740 = _255 + 6u;
    float _2748 = _884 / cbSceneParam._m0[86u].x;
    float _2749 = _885 / cbSceneParam._m0[86u].y;
    vec4 _2763 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2748, _2749, (log2((isnan(cbSceneParam._m0[77u].w) ? _806 : (isnan(_806) ? cbSceneParam._m0[77u].w : min(_806, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2765 = _2763.x;
    float _2766 = _2763.y;
    float _2767 = _2763.z;
    float _2768 = _2763.w;
    float _2860;
    float _2862;
    float _2864;
    float _2866;
    if (_806 > cbSceneParam._m0[78u].w)
    {
        float _2823 = isnan(_806) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _806 : min(cbSceneParam._m0[80u].w, _806));
        float _2824 = _2823 / _806;
        float _2835 = _2824 * _857;
        float _2836 = _858 * _2824;
        float _2837 = (-0.0) - _2836;
        float _2838 = _2824 * _859;
        float _2840 = (cbSceneParam._m0[77u].w * _2837) / _2823;
        float _2841 = _2840 + cbSceneParam._m0[79u].w;
        float _2842 = cbSceneParam._m0[79u].w - _2836;
        float _2848 = sqrt(((_2835 * _2835) + (_2836 * _2836)) + (_2838 * _2838));
        float _2851 = (1.0 - (cbSceneParam._m0[77u].w / _2823)) * _2848;
        float _2856 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2858 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3035;
        if (abs((_2837 - _2840) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3035 = ((((_2841 > 0.0) ? exp2(_2856 * _2841) : (2.0 - exp2(_2858 * _2841))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2851;
        }
        else
        {
            float _2979 = 1.0 / cbSceneParam._m0[80u].x;
            float _2980 = isnan(_2842) ? _2841 : (isnan(_2841) ? _2842 : max(_2841, _2842));
            float _2981 = isnan(_2842) ? _2841 : (isnan(_2841) ? _2842 : min(_2841, _2842));
            float _2990 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : min(_2980, 0.0));
            float _2991 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : min(_2981, 0.0));
            _3035 = ((abs(_2848 / _2837) * cbSceneParam._m0[80u].y) * ((((_2990 - _2991) * 2.0) - ((exp2(_2856 * (isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0)))) - exp2(_2856 * (isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0))))) * _2979)) - ((exp2(_2858 * _2990) - exp2(_2858 * _2991)) * _2979))) + (_2851 * cbSceneParam._m0[80u].z);
        }
        vec4 _3037 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2748, _2749, 1.0), 0.0);
        float _3046 = exp2((_3035 * (-1.44269502162933349609375)) * (1.0 - _3037.w));
        float _3047 = log2(_3046);
        float _3063 = log2(_2768);
        _2860 = (exp2(_3063 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3047 * cbSceneParam._m0[78u].x)) * _3037.x) / cbSceneParam._m0[78u].x)) + _2765;
        _2862 = (exp2(_3063 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3047 * cbSceneParam._m0[78u].y)) * _3037.y) / cbSceneParam._m0[78u].y)) + _2766;
        _2864 = (exp2(_3063 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3047 * cbSceneParam._m0[78u].z)) * _3037.z) / cbSceneParam._m0[78u].z)) + _2767;
        _2866 = _3046 * _2768;
    }
    else
    {
        _2860 = _2765;
        _2862 = _2766;
        _2864 = _2767;
        _2866 = _2768;
    }
    bool _3073;
    vec4 _2876;
    vec4 _2898;
    float _2900;
    float _2904;
    float _2905;
    float _2906;
    float _2907;
    bool _2917;
    for (;;)
    {
        _2876 = cbMatDynParam._m0[0u];
        float _2878 = roundEven(_2876.y);
        bool _2879 = _2878 == 3.0;
        float _2880 = log2(_2866);
        float _2887 = exp2(_2880 * cbSceneParam._m0[78u].x) * _2737;
        float _2888 = exp2(_2880 * cbSceneParam._m0[78u].y) * _2738;
        float _2889 = exp2(_2880 * cbSceneParam._m0[78u].z) * _2739;
        float _2896 = _873 + (-0.5);
        _2898 = cbMtdParam._m0[1u];
        _2900 = _2898.y * _2896;
        float _2903 = (_2878 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2904 = _2903 * (_2879 ? _2887 : (_2887 + (cbSceneParam._m0[72u].w * _2860)));
        _2905 = _2903 * (_2879 ? _2888 : (_2888 + (cbSceneParam._m0[72u].w * _2862)));
        _2906 = _2903 * (_2879 ? _2889 : (_2889 + (cbSceneParam._m0[72u].w * _2864)));
        _2907 = _2896 * 0.999000012874603271484375;
        _2917 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2917)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _2907) < 0.5)
            {
                _3073 = true;
                break;
            }
        }
        uint _3014 = _922 + uint(_2876.w);
        if ((cbInstanceData._m0[_3014].w < 1.0) && ((cbInstanceData._m0[_3014].w + _2907) < 0.5))
        {
            _3073 = true;
            break;
        }
        if ((_2900 + 1.0) < _2898.x)
        {
            _3073 = true;
            break;
        }
        _3073 = false;
        break;
    }
    float _3278;
    if (_3073)
    {
        discard_state = true;
        _3278 = 0.0;
    }
    else
    {
        _3278 = cbInstanceData._m0[_2740].w;
    }
    SV_Target.x = _2904;
    SV_Target.y = _2905;
    SV_Target.z = _2906;
    SV_Target.w = _3278;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2740].w;
    discard_exit();
}


