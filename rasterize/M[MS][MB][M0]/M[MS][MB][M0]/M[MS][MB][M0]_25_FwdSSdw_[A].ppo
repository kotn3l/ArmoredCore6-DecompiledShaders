#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1133;
float _3520;
float _3521;
float _3522;
float _3523;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    uint _237 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _237 + 1u;
    uint _246 = _237 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_237].x * cbInstanceData._m0[_237].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _276 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _282 = _276.x * cbMtdParam._m0[9u].x;
    float _283 = _276.y * cbMtdParam._m0[9u].y;
    float _284 = _276.z * cbMtdParam._m0[9u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _306 = _302.z;
    float _311 = (_302.x * 2.0) + (-1.0);
    float _313 = (_302.y * 2.0) + (-1.0);
    float _314 = dot(vec2(_311, _313), vec2(_311, _313));
    float _3532 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _320 = sqrt(1.0 - (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))));
    float _323 = fma(_320, _225, fma(_313, _232, _311 * _218));
    float _326 = fma(_320, _226, fma(_313, _233, _311 * _219));
    float _329 = fma(_320, _227, fma(_313, _234, _311 * _220));
    float _333 = inversesqrt(dot(vec3(_323, _326, _329), vec3(_323, _326, _329)));
    vec4 _369 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _371 = _369.x;
    float _372 = 1.0 - _371;
    float _381 = (cbMtdParam._m0[19u].x + dot(vec4(_333 * _323, _333 * _326, _333 * _329, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_371 - _372) * cbMtdParam._m0[24u].z) + _372) * cbMtdParam._m0[21u].z);
    float _3543 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _384 = (-0.0) - cbMtdParam._m0[24u].y;
    float _386 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _387 = isnan(1.0) ? _386 : (isnan(_386) ? 1.0 : min(_386, 1.0));
    float _394 = _382 - ((_382 * TEXCOORD_8.x) * _387);
    float _395 = _382 - ((_382 * TEXCOORD_8.y) * _387);
    float _396 = _382 - ((_382 * TEXCOORD_8.z) * _387);
    float _403 = (_394 * (cbMtdParam._m0[17u].x - _282)) + _282;
    float _404 = (_395 * (cbMtdParam._m0[17u].y - _283)) + _283;
    float _405 = (_396 * (cbMtdParam._m0[17u].z - _284)) + _284;
    vec4 _417 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _256) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _257) + cbTextureTilingScale._m0[19u].w));
    float _419 = _417.x;
    float _420 = 1.0 - _419;
    float _450 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_419 - _420) * cbMtdParam._m0[24u].w) + _420) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3564 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    float _459 = ((((cbMtdParam._m0[10u].x - _403) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _451) + _403;
    float _460 = ((((cbMtdParam._m0[10u].y - _404) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _451) + _404;
    float _461 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _405)) * _451) + _405;
    vec4 _475 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _482 = (_475.x * 2.0) + (-1.0);
    float _483 = (_475.y * 2.0) + (-1.0);
    float _484 = dot(vec2(_482, _483), vec2(_482, _483));
    float _3575 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _492 = ((_475.z - _306) * _394) + _306;
    float _495 = ((cbMtdParam._m0[23u].y - _492) * _451) + _492;
    vec4 _514 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _256) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _257) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _520 = (_514.x * 2.0) + (-1.0);
    float _521 = (_514.y * 2.0) + (-1.0);
    float _522 = dot(vec2(_520, _521), vec2(_520, _521));
    float _3586 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _537 = ((sqrt(1.0 - (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) - _320) * _396) + _320;
    float _540 = (((_482 - _311) * _394) + _311) + (cbMtdParam._m0[21u].x * _311);
    float _541 = (((_483 - _313) * _395) + _313) + (cbMtdParam._m0[21u].x * _313);
    float _552 = (((_520 - _540) + (_540 * cbMtdParam._m0[22u].z)) * _451) + _540;
    float _553 = (((_521 - _541) + (_541 * cbMtdParam._m0[22u].z)) * _451) + _541;
    float _554 = (_451 * (sqrt(1.0 - (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) - _537)) + _537;
    float _556 = cbMtdParam._m0[22u].x + _302.w;
    float _559 = fma(_554, _225, fma(_553, _232, _552 * _218));
    float _562 = fma(_554, _226, fma(_553, _233, _552 * _219));
    float _565 = fma(_554, _227, fma(_553, _234, _552 * _220));
    float _569 = inversesqrt(dot(vec3(_559, _562, _565), vec3(_559, _562, _565)));
    float _570 = _569 * _559;
    float _571 = _569 * _562;
    float _572 = _569 * _565;
    float _3597 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _573 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _3608 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _3619 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3630 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _3641 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _591 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _641 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _631);
    float _642 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _631);
    float _643 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _631);
    float _647 = inversesqrt(dot(vec3(_641, _642, _643), vec3(_641, _642, _643)));
    float _648 = _641 * _647;
    float _649 = _642 * _647;
    float _650 = _643 * _647;
    vec4 _655 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _657 = _655.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _814 = sqrt(((_641 * _641) + (_642 * _642)) + (_643 * _643));
        float _820 = (cbMatDynParam._m0[5u].x * _814) + cbMatDynParam._m0[5u].y;
        float _3652 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _825 = (cbMatDynParam._m0[5u].z * _814) + cbMatDynParam._m0[5u].w;
        float _3663 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) - _821)) + _821) < ((_657 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _669 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _670 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _690 = fma(_572, cbSceneParam._m0[5u].z, fma(_571, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _570));
    float _693 = fma(_572, cbSceneParam._m0[6u].z, fma(_571, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _570));
    float _696 = fma(_572, cbSceneParam._m0[7u].z, fma(_571, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _570));
    uint _709 = _237 + 9u;
    uint _710 = _709 + uint(cbMatDynParam._m0[0u].w);
    float _716 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) * cbInstanceData._m0[_710].x;
    float _717 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) * cbInstanceData._m0[_710].y;
    float _718 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) * cbInstanceData._m0[_710].z;
    float _3674 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _719 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _3685 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _720 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _3696 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _721 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    vec4 _730 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _669, cbSceneParam._m0[86u].y * _670));
    float _734 = ((isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * TEXCOORD_5.w) * _730.x;
    float _735 = dot(vec3(_570, _571, _572), vec3(_648, _649, _650));
    float _738 = _735 * 2.0;
    float _742 = (_738 * _570) - _648;
    float _743 = (_738 * _571) - _649;
    float _744 = (_738 * _572) - _650;
    float _748 = abs(dot(vec3(_648, _649, _650), vec3(_570, _571, _572)));
    float _3707 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _750 = sqrt(_573);
    float _763 = exp2((_750 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_750 * 3.0));
    float _795 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1132;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _857 = fma(_803, cbModelParam._m0[26u].z, fma(_799, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _795));
        float _861 = fma(_803, cbModelParam._m0[27u].z, fma(_799, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _795));
        float _865 = fma(_803, cbModelParam._m0[28u].z, fma(_799, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _795));
        float _890 = _795 + _570;
        float _891 = _799 + _571;
        float _892 = _803 + _572;
        float _902 = fma(_892, cbModelParam._m0[26u].z, fma(_891, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _890)) - _857;
        float _903 = fma(_892, cbModelParam._m0[27u].z, fma(_891, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _890)) - _861;
        float _904 = fma(_892, cbModelParam._m0[28u].z, fma(_891, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _890)) - _865;
        float _908 = inversesqrt(dot(vec3(_902, _903, _904), vec3(_902, _903, _904)));
        float _921 = ((_908 * _902) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_857 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _922 = ((_908 * _903) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_861 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _923 = ((_908 * _904) / cbModelParam._m0[34u].z) + ((((((_865 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_921, _922, _923), 0.0);
        float _960 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_926.x + (-0.5));
        float _962 = _960 * (_926.y + (-0.5));
        float _963 = _960 * (_926.z + (-0.5));
        float _970 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_933.x + (-0.5));
        float _972 = _970 * (_933.y + (-0.5));
        float _973 = _970 * (_933.z + (-0.5));
        float _980 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_940.x + (-0.5));
        float _982 = _980 * (_940.y + (-0.5));
        float _983 = _980 * (_940.z + (-0.5));
        float _990 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_947.x + (-0.5));
        float _992 = _990 * (_947.y + (-0.5));
        float _993 = _990 * (_947.z + (-0.5));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = _961 * 0.5;
        float _998 = _971 * 0.5;
        float _999 = _981 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1014 = (dot(vec3(_570, _571, _572), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1024 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3755 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1026 + 1.0))) + _1031) * _994;
        float _1041 = _962 * 0.5;
        float _1042 = _972 * 0.5;
        float _1043 = _982 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_570, _571, _572), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3788 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1068 + 1.0))) + _1073) * _995;
        float _1083 = _963 * 0.5;
        float _1084 = _973 * 0.5;
        float _1085 = _983 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_570, _571, _572), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3821 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1110 + 1.0))) + _1115) * _996;
        _1132 = _963;
        _1134 = _962;
        _1135 = _961;
        _1136 = _973;
        _1137 = _972;
        _1138 = _971;
        _1139 = _983;
        _1140 = _982;
        _1141 = _981;
        _1142 = _996;
        _1143 = _995;
        _1144 = _994;
        _1145 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
        _1146 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1147 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
    }
    else
    {
        _1132 = _1133;
        _1134 = _1133;
        _1135 = _1133;
        _1136 = _1133;
        _1137 = _1133;
        _1138 = _1133;
        _1139 = _1133;
        _1140 = _1133;
        _1141 = _1133;
        _1142 = _1133;
        _1143 = _1133;
        _1144 = _1133;
        _1145 = 0.0;
        _1146 = 0.0;
        _1147 = 0.0;
    }
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1175 = fma(_803, cbModelParam._m0[30u].z, fma(_799, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _795));
        float _1179 = fma(_803, cbModelParam._m0[31u].z, fma(_799, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _795));
        float _1183 = fma(_803, cbModelParam._m0[32u].z, fma(_799, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _795));
        float _1206 = _795 + _570;
        float _1207 = _799 + _571;
        float _1208 = _803 + _572;
        float _1218 = fma(_1208, cbModelParam._m0[30u].z, fma(_1207, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1206)) - _1175;
        float _1219 = fma(_1208, cbModelParam._m0[31u].z, fma(_1207, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1206)) - _1179;
        float _1220 = fma(_1208, cbModelParam._m0[32u].z, fma(_1207, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1206)) - _1183;
        float _1224 = inversesqrt(dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220)));
        float _1237 = ((_1224 * _1218) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1175 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1238 = ((_1224 * _1219) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1179 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1224 * _1220) / cbModelParam._m0[35u].z) + ((((((_1183 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        float _1274 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1241.x + (-0.5));
        float _1276 = _1274 * (_1241.y + (-0.5));
        float _1277 = _1274 * (_1241.z + (-0.5));
        float _1284 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1248.x + (-0.5));
        float _1286 = _1284 * (_1248.y + (-0.5));
        float _1287 = _1284 * (_1248.z + (-0.5));
        float _1294 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1255.x + (-0.5));
        float _1296 = _1294 * (_1255.y + (-0.5));
        float _1297 = _1294 * (_1255.z + (-0.5));
        float _1304 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1262.x + (-0.5));
        float _1306 = _1304 * (_1262.y + (-0.5));
        float _1307 = _1304 * (_1262.z + (-0.5));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = _1275 * 0.5;
        float _1312 = _1285 * 0.5;
        float _1313 = _1295 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_570, _571, _572), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _3884 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1338 + 1.0))) + _1343) * _1308;
        float _1353 = _1276 * 0.5;
        float _1354 = _1286 * 0.5;
        float _1355 = _1296 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_570, _571, _572), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _3917 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1380 + 1.0))) + _1385) * _1309;
        float _1395 = _1277 * 0.5;
        float _1396 = _1287 * 0.5;
        float _1397 = _1297 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_570, _571, _572), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _3950 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1422 + 1.0))) + _1427) * _1310;
        _1444 = _1277;
        _1445 = _1276;
        _1446 = _1275;
        _1447 = _1287;
        _1448 = _1286;
        _1449 = _1285;
        _1450 = _1297;
        _1451 = _1296;
        _1452 = _1295;
        _1453 = _1310;
        _1454 = _1309;
        _1455 = _1308;
        _1456 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1457 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
        _1458 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
    }
    else
    {
        _1444 = _1133;
        _1445 = _1133;
        _1446 = _1133;
        _1447 = _1133;
        _1448 = _1133;
        _1449 = _1133;
        _1450 = _1133;
        _1451 = _1133;
        _1452 = _1133;
        _1453 = _1133;
        _1454 = _1133;
        _1455 = _1133;
        _1456 = 0.0;
        _1457 = 0.0;
        _1458 = 0.0;
    }
    float _1468 = (cbModelParam._m0[1u].x * (_1456 - _1145)) + _1145;
    float _1469 = (cbModelParam._m0[1u].x * (_1457 - _1146)) + _1146;
    float _1470 = (cbModelParam._m0[1u].x * (_1458 - _1147)) + _1147;
    float _1491 = fma(_1470, cbSceneParam._m0[89u].z, fma(_1469, cbSceneParam._m0[89u].y, _1468 * cbSceneParam._m0[89u].x));
    float _1494 = fma(_1470, cbSceneParam._m0[90u].z, fma(_1469, cbSceneParam._m0[90u].y, _1468 * cbSceneParam._m0[90u].x));
    float _1497 = fma(_1470, cbSceneParam._m0[91u].z, fma(_1469, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1468));
    float _1512 = _742 * 0.5;
    float _1513 = _743 * 0.5;
    float _1514 = _744 * 0.5;
    float _1515 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1446, _1449, _1452, _1455));
    float _1518 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1445, _1448, _1451, _1454));
    float _1521 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1444, _1447, _1450, _1453));
    float _1555;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1528 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1132, _1136, _1139, _1142));
        float _1532 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1134, _1137, _1140, _1143));
        float _1536 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1135, _1138, _1141, _1144));
        float _1543 = dot(vec4(cbModelParam._m0[39u]), vec4(_1512, _1513, _1514, 1.0));
        _1555 = dot(vec3(isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1543) ? 0.0 : (isnan(0.0) ? _1543 : max(0.0, _1543))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1555 = 1.0;
    }
    float _1566;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1557 = dot(vec4(cbModelParam._m0[40u]), vec4(_1512, _1513, _1514, 1.0));
        _1566 = dot(vec3(isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1557) ? 0.0 : (isnan(0.0) ? _1557 : max(0.0, _1557))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1566 = 1.0;
    }
    float _1570 = (_1566 * cbModelParam._m0[1u].x) + (_1555 * (1.0 - cbModelParam._m0[1u].x));
    float _1580 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _573);
    float _1581 = isnan(_1580) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1580 : min(cbModelParam._m0[25u].z, _1580));
    float _1662;
    float _1664;
    float _1666;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1629 = fma(_803, cbModelParam._m0[13u].z, fma(_799, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _795)) + cbModelParam._m0[13u].w;
        float _1633 = fma(_803, cbModelParam._m0[14u].z, fma(_799, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _795)) + cbModelParam._m0[14u].w;
        float _1637 = fma(_803, cbModelParam._m0[15u].z, fma(_799, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _795)) + cbModelParam._m0[15u].w;
        float _1640 = fma(_744, cbModelParam._m0[13u].z, fma(_743, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _742));
        float _1643 = fma(_744, cbModelParam._m0[14u].z, fma(_743, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _742));
        float _1646 = fma(_744, cbModelParam._m0[15u].z, fma(_743, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _742));
        float _1674;
        if (_1640 > 0.0)
        {
            _1674 = abs((1.0 - _1629) / _1640);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1629 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1674 = frontier_phi_17_15_ladder;
        }
        float _1898;
        if (_1643 > 0.0)
        {
            _1898 = abs((1.0 - _1633) / _1643);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1633 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1898 = frontier_phi_26_22_ladder;
        }
        float _2144;
        if (_1646 > 0.0)
        {
            _2144 = abs((1.0 - _1637) / _1646);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1637 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2144 = frontier_phi_38_33_ladder;
        }
        float _2146 = isnan(_1898) ? _1674 : (isnan(_1674) ? _1898 : min(_1674, _1898));
        float _2147 = isnan(_2144) ? _2146 : (isnan(_2146) ? _2144 : min(_2146, _2144));
        float _2151 = (_2147 * _1640) + _1629;
        float _2152 = (_2147 * _1643) + _1633;
        float _2153 = (_2147 * _1646) + _1637;
        float _2154 = _2147 * 9.9999997473787516355514526367188e-05;
        float _2156 = (-1.0) - _2154;
        float _2158 = _2154 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2153 > _2158) || ((_2153 < _2156) || ((_2152 > _2158) || ((_2152 < _2156) || ((_2151 < _2156) || (_2151 > _2158))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2277 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2153, cbModelParam._m0[9u].z, fma(_2152, cbModelParam._m0[9u].y, _2151 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2153, cbModelParam._m0[10u].z, fma(_2152, cbModelParam._m0[10u].y, _2151 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2153, cbModelParam._m0[11u].z, fma(_2152, cbModelParam._m0[11u].y, _2151 * cbModelParam._m0[11u].x))), _1581);
            frontier_phi_16_38_ladder = _2277.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2277.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2277.x * cbModelParam._m0[1u].y;
        }
        _1662 = frontier_phi_16_38_ladder_2;
        _1664 = frontier_phi_16_38_ladder_1;
        _1666 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1650 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_742, _743, _744), _1581);
        _1662 = _1650.x * cbModelParam._m0[1u].y;
        _1664 = _1650.y * cbModelParam._m0[1u].y;
        _1666 = _1650.z * cbModelParam._m0[1u].y;
    }
    float _1670 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _573);
    float _1671 = isnan(_1670) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1670 : min(cbModelParam._m0[25u].w, _1670));
    float _1761;
    float _1763;
    float _1765;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1725 = fma(_803, cbModelParam._m0[21u].z, fma(_799, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _795)) + cbModelParam._m0[21u].w;
        float _1729 = fma(_803, cbModelParam._m0[22u].z, fma(_799, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _795)) + cbModelParam._m0[22u].w;
        float _1733 = fma(_803, cbModelParam._m0[23u].z, fma(_799, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _795)) + cbModelParam._m0[23u].w;
        float _1736 = fma(_744, cbModelParam._m0[21u].z, fma(_743, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _742));
        float _1739 = fma(_744, cbModelParam._m0[22u].z, fma(_743, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _742));
        float _1742 = fma(_744, cbModelParam._m0[23u].z, fma(_743, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _742));
        float _1903;
        if (_1736 > 0.0)
        {
            _1903 = abs((1.0 - _1725) / _1736);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1725 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1903 = frontier_phi_28_24_ladder;
        }
        float _2171;
        if (_1739 > 0.0)
        {
            _2171 = abs((1.0 - _1729) / _1739);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1729 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2171 = frontier_phi_40_35_ladder;
        }
        float _2376;
        if (_1742 > 0.0)
        {
            _2376 = abs((1.0 - _1733) / _1742);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1733 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2376 = frontier_phi_49_46_ladder;
        }
        float _2378 = isnan(_2171) ? _1903 : (isnan(_1903) ? _2171 : min(_1903, _2171));
        float _2379 = isnan(_2376) ? _2378 : (isnan(_2378) ? _2376 : min(_2378, _2376));
        float _2383 = (_2379 * _1736) + _1725;
        float _2384 = (_2379 * _1739) + _1729;
        float _2385 = (_2379 * _1742) + _1733;
        float _2386 = _2379 * 9.9999997473787516355514526367188e-05;
        float _2387 = (-1.0) - _2386;
        float _2389 = _2386 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2385 > _2389) || ((_2385 < _2387) || ((_2384 > _2389) || ((_2384 < _2387) || ((_2383 < _2387) || (_2383 > _2389))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2584 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2385, cbModelParam._m0[17u].z, fma(_2384, cbModelParam._m0[17u].y, _2383 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2385, cbModelParam._m0[18u].z, fma(_2384, cbModelParam._m0[18u].y, _2383 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2385, cbModelParam._m0[19u].z, fma(_2384, cbModelParam._m0[19u].y, _2383 * cbModelParam._m0[19u].x))), _1671);
            frontier_phi_25_49_ladder = _2584.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2584.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2584.x * cbModelParam._m0[1u].z;
        }
        _1761 = frontier_phi_25_49_ladder_2;
        _1763 = frontier_phi_25_49_ladder_1;
        _1765 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1745 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_742, _743, _744), _1671);
        _1761 = _1745.x * cbModelParam._m0[1u].z;
        _1763 = _1745.y * cbModelParam._m0[1u].z;
        _1765 = _1745.z * cbModelParam._m0[1u].z;
    }
    float _1777 = ((((1.0 - _763) * ((_750 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_763 * _750)) * _734;
    float _1778 = _1777 * ((cbModelParam._m0[1u].w * (_1761 - _1662)) + _1662);
    float _1779 = _1777 * ((cbModelParam._m0[1u].w * (_1763 - _1664)) + _1664);
    float _1780 = _1777 * ((cbModelParam._m0[1u].w * (_1765 - _1666)) + _1666);
    float _1783 = fma(_1780, cbSceneParam._m0[89u].z, fma(_1779, cbSceneParam._m0[89u].y, _1778 * cbSceneParam._m0[89u].x));
    float _1786 = fma(_1780, cbSceneParam._m0[90u].z, fma(_1779, cbSceneParam._m0[90u].y, _1778 * cbSceneParam._m0[90u].x));
    float _1789 = fma(_1780, cbSceneParam._m0[91u].z, fma(_1779, cbSceneParam._m0[91u].y, _1778 * cbSceneParam._m0[91u].x));
    vec4 _1797 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_669, _670));
    float _1799 = _1797.w;
    float _1811 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1799);
    float _1812 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1799);
    float _1813 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1799);
    uvec4 _1817 = floatBitsToUint(cbInstanceData._m0[_237 + 5u]);
    uint _1819 = _1817.x * 14u;
    uint _1820 = _1819 + 13u;
    float _1827 = _734 + (-1.0);
    float _1832 = (cbLight._m0[_1820].x * _1827) + 1.0;
    float _1833 = (cbLight._m0[_1820].y * _1827) + 1.0;
    float _1834 = (cbLight._m0[_1820].z * _1827) + 1.0;
    float _1835 = (cbLight._m0[_1820].w * _1827) + 1.0;
    uint _1836 = _1819 + 5u;
    float _1842 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
    uint _1846 = _1819 + 4u;
    float _1856 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
    uint _1860 = _1819 | 1u;
    float _1871 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_570, _571, _572));
    float _1874 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_570, _571, _572));
    float _4086 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _4097 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1879 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * 0.3183098733425140380859375;
    float _1881 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * 0.3183098733425140380859375;
    float _1888 = ((cbLight._m0[_1836].x * _1842) * _1881) + (((cbLight._m0[_1846].x * _1811) * _1856) * _1879);
    float _1889 = ((_1842 * cbLight._m0[_1836].y) * _1881) + (((cbLight._m0[_1846].y * _1812) * _1856) * _1879);
    float _1890 = ((_1842 * cbLight._m0[_1836].z) * _1881) + (((cbLight._m0[_1846].z * _1813) * _1856) * _1879);
    uvec4 _1895 = floatBitsToUint(cbLight._m0[_1819 + 12u]);
    bool _1897 = _1895.x == 0u;
    float _1908;
    float _1910;
    float _1912;
    if (_1897)
    {
        _1908 = _1888;
        _1910 = _1889;
        _1912 = _1890;
    }
    else
    {
        uint _1916 = _1819 + 6u;
        float _1932 = (dot(vec3(cbLight._m0[_1819 + 2u].xyz), vec3(_570, _571, _572)) * 0.5) + 0.5;
        float _1933 = _1932 * _1932;
        float _4108 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1934 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1935 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
        _1908 = (((cbLight._m0[_1916].x * 0.3183098733425140380859375) * _1934) * _1935) + _1888;
        _1910 = (((cbLight._m0[_1916].y * 0.3183098733425140380859375) * _1934) * _1935) + _1889;
        _1912 = (((cbLight._m0[_1916].z * 0.3183098733425140380859375) * _1934) * _1935) + _1890;
    }
    bool _1915 = _1895.y == 0u;
    float _1953;
    float _1955;
    float _1957;
    if (_1915)
    {
        _1953 = _1908;
        _1955 = _1910;
        _1957 = _1912;
    }
    else
    {
        uint _2115 = _1819 + 7u;
        float _2131 = (dot(vec3(cbLight._m0[_1819 + 3u].xyz), vec3(_570, _571, _572)) * 0.5) + 0.5;
        float _2132 = _2131 * _2131;
        float _4124 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2133 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _2134 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
        _1953 = (((cbLight._m0[_2115].x * 0.3183098733425140380859375) * _2133) * _2134) + _1908;
        _1955 = (((cbLight._m0[_2115].y * 0.3183098733425140380859375) * _2133) * _2134) + _1910;
        _1957 = (((cbLight._m0[_2115].z * 0.3183098733425140380859375) * _2133) * _2134) + _1912;
    }
    uint _1960 = _1819 + 8u;
    float _1973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1819].w)) * _573) * 0.949999988079071044921875);
    float _1974 = _1973 * _1973;
    float _1975 = cbLight._m0[_1819].x + _648;
    float _1976 = cbLight._m0[_1819].y + _649;
    float _1977 = cbLight._m0[_1819].z + _650;
    float _1981 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
    float _1982 = _1981 * _1975;
    float _1983 = _1981 * _1976;
    float _1984 = _1981 * _1977;
    float _1985 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_1819].xyz));
    float _4140 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _4151 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _1989 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _1990 = dot(vec3(_570, _571, _572), vec3(_1982, _1983, _1984));
    float _4162 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1993 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _1994 = dot(vec3(cbLight._m0[_1819].xyz), vec3(_1982, _1983, _1984));
    float _4173 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1998 = _1974 * _1974;
    float _2002 = ((_1993 * _1993) * (_1998 + (-1.0))) + 1.0;
    float _2013 = (exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2014 = 1.0 - _1974;
    float _2025 = (0.5 / (((_1989 * ((_1988 * _2014) + _1974)) + 9.9999999392252902907785028219223e-09) + (((_1989 * _2014) + _1974) * _1988))) * _1988;
    float _4184 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2027 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1998 / ((_2002 * _2002) * 3.141590118408203125));
    uint _2041 = _1819 + 9u;
    float _2052 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1860].w)) * _573) * 0.949999988079071044921875);
    float _2053 = _2052 * _2052;
    float _2054 = cbLight._m0[_1860].x + _648;
    float _2055 = cbLight._m0[_1860].y + _649;
    float _2056 = cbLight._m0[_1860].z + _650;
    float _2060 = inversesqrt(dot(vec3(_2054, _2055, _2056), vec3(_2054, _2055, _2056)));
    float _2061 = _2060 * _2054;
    float _2062 = _2060 * _2055;
    float _2063 = _2060 * _2056;
    float _2064 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_1860].xyz));
    float _4195 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _2068 = dot(vec3(_570, _571, _572), vec3(_2061, _2062, _2063));
    float _4206 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2071 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _2072 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_2061, _2062, _2063));
    float _4217 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2076 = _2053 * _2053;
    float _2080 = ((_2071 * _2071) * (_2076 + (-1.0))) + 1.0;
    float _2089 = (exp2(log2(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2090 = 1.0 - _2053;
    float _2100 = (0.5 / (((_1989 * ((_2067 * _2090) + _2053)) + 9.9999999392252902907785028219223e-09) + (((_1989 * _2090) + _2053) * _2067))) * _2067;
    float _4228 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2102 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2076 / ((_2080 * _2080) * 3.141590118408203125));
    float _2112 = (((_2089 * cbLight._m0[_2041].x) * _2102) * _1842) + ((((cbLight._m0[_1960].x * _1811) * _2013) * _2027) * _1856);
    float _2113 = (((_2089 * cbLight._m0[_2041].y) * _2102) * _1842) + ((((cbLight._m0[_1960].y * _1812) * _2013) * _2027) * _1856);
    float _2114 = (((_2089 * cbLight._m0[_2041].z) * _2102) * _1842) + ((((cbLight._m0[_1960].z * _1813) * _2013) * _2027) * _1856);
    float _2176;
    float _2178;
    float _2180;
    if (_1897)
    {
        _2176 = _2112;
        _2178 = _2113;
        _2180 = _2114;
    }
    else
    {
        uint _2182 = _1819 + 2u;
        uint _2186 = _1819 + 10u;
        float _2200 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2182].w)) * _573) * 0.949999988079071044921875);
        float _2201 = _2200 * _2200;
        float _2202 = cbLight._m0[_2182].x + _648;
        float _2203 = cbLight._m0[_2182].y + _649;
        float _2204 = cbLight._m0[_2182].z + _650;
        float _2208 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
        float _2209 = _2208 * _2202;
        float _2210 = _2208 * _2203;
        float _2211 = _2208 * _2204;
        float _2212 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_2182].xyz));
        float _4239 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2215 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2216 = dot(vec3(_570, _571, _572), vec3(_2209, _2210, _2211));
        float _4250 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2219 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2220 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_2209, _2210, _2211));
        float _4261 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2224 = _2201 * _2201;
        float _2228 = ((_2219 * _2219) * (_2224 + (-1.0))) + 1.0;
        float _2237 = (exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2238 = 1.0 - _2201;
        float _2248 = (0.5 / (((_1989 * ((_2215 * _2238) + _2201)) + 9.9999999392252902907785028219223e-09) + (((_1989 * _2238) + _2201) * _2215))) * _2215;
        float _4272 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2250 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2224 / ((_2228 * _2228) * 3.141590118408203125));
        float _2251 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
        _2176 = (((_2237 * cbLight._m0[_2186].x) * _2250) * _2251) + _2112;
        _2178 = (((_2237 * cbLight._m0[_2186].y) * _2250) * _2251) + _2113;
        _2180 = (((_2237 * cbLight._m0[_2186].z) * _2250) * _2251) + _2114;
    }
    float _2286;
    float _2288;
    float _2290;
    if (_1915)
    {
        _2286 = _2176;
        _2288 = _2178;
        _2290 = _2180;
    }
    else
    {
        uint _2297 = _1819 + 3u;
        uint _2301 = _1819 + 11u;
        float _2315 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2297].w)) * _573) * 0.949999988079071044921875);
        float _2316 = _2315 * _2315;
        float _2317 = cbLight._m0[_2297].x + _648;
        float _2318 = cbLight._m0[_2297].y + _649;
        float _2319 = cbLight._m0[_2297].z + _650;
        float _2323 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
        float _2324 = _2323 * _2317;
        float _2325 = _2323 * _2318;
        float _2326 = _2323 * _2319;
        float _2327 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_2297].xyz));
        float _4288 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2330 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2331 = dot(vec3(_570, _571, _572), vec3(_2324, _2325, _2326));
        float _4299 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2334 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _2335 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2324, _2325, _2326));
        float _4310 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2339 = _2316 * _2316;
        float _2343 = ((_2334 * _2334) * (_2339 + (-1.0))) + 1.0;
        float _2352 = (exp2(log2(1.0 - (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2353 = 1.0 - _2316;
        float _2363 = (0.5 / (((_1989 * ((_2330 * _2353) + _2316)) + 9.9999999392252902907785028219223e-09) + (((_1989 * _2353) + _2316) * _2330))) * _2330;
        float _4321 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2365 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2339 / ((_2343 * _2343) * 3.141590118408203125));
        float _2366 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
        _2286 = (((_2352 * cbLight._m0[_2301].x) * _2365) * _2366) + _2176;
        _2288 = (((_2352 * cbLight._m0[_2301].y) * _2365) * _2366) + _2178;
        _2290 = (((_2352 * cbLight._m0[_2301].z) * _2365) * _2366) + _2180;
    }
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    float _2509;
    float _2511;
    if (_1817.y == 0u)
    {
        float _2441 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2442 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2441;
        float _2443 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2441;
        float _2444 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2441;
        uvec4 _2456 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2457 = _2456.x;
        uint _2468 = uint((float(_2456.y) * floor(float(uint(cbSceneParam._m0[85u].y * _670) / _2457))) + floor(float(uint(cbSceneParam._m0[85u].x * _669) / _2457)));
        float _2478 = (log2(_2444 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2479 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        uint _2482 = uint(isnan(14.0) ? _2479 : (isnan(_2479) ? 14.0 : min(_2479, 14.0)));
        uvec4 _2487 = texelFetch(g_lightClusterGridBuffer, int(((_2482 << 2u) + (_2468 << 6u)) >> 2u));
        uint _2488 = _2487.x;
        uint _2489 = _2456.z;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        float _2597;
        float _2599;
        if (((((1u << ((_2489 >> 4u) & 15u)) + 4294967295u) & _2488) == 0u) || ((_2489 & 240u) == 0u))
        {
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
            _2597 = 0.0;
            _2599 = 0.0;
        }
        else
        {
            float _2590;
            float _2592;
            float _2594;
            float _2596;
            float _2598;
            float _2600;
            float _2741 = 0.0;
            float _2742 = 0.0;
            float _2743 = 0.0;
            float _2744 = 0.0;
            float _2745 = 0.0;
            float _2746 = 0.0;
            uint _2747 = 0u;
            uint _2756;
            bool _2757;
            for (;;)
            {
                _2756 = texelFetch(g_lightClassification, int((((_2482 << 5u) + (_2468 << 9u)) + (_2747 << 2u)) >> 2u)).x;
                _2757 = _2756 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2757)
                {
                    frontier_phi_66_pred = _2741;
                    frontier_phi_66_pred_1 = _2746;
                    frontier_phi_66_pred_2 = _2745;
                    frontier_phi_66_pred_3 = _2744;
                    frontier_phi_66_pred_4 = _2743;
                    frontier_phi_66_pred_5 = _2742;
                }
                else
                {
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    uint _2892;
                    _2886 = _2741;
                    _2887 = _2742;
                    _2888 = _2743;
                    _2889 = _2744;
                    _2890 = _2745;
                    _2891 = _2746;
                    _2892 = _2756;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    for (;;)
                    {
                        uint _2896 = uint(findLSB(_2892)) + (_2747 << 5u);
                        uint _2893 = (_2892 + 4294967295u) & _2892;
                        uint _2898 = _2896 * 48u;
                        vec4 _2912 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2898)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 3u)).x));
                        uint _2918 = (_2896 * 48u) + 4u;
                        vec4 _2931 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2918)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 3u)).x));
                        uint _2937 = (_2896 * 48u) + 8u;
                        vec3 _2948 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2937)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 2u)).x));
                        float _2952 = _2912.x - _2442;
                        float _2953 = _2912.y - _2443;
                        float _2954 = _2912.z - _2444;
                        float _2955 = dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954));
                        float _2958 = inversesqrt(_2955);
                        float _2959 = _2958 * _2952;
                        float _2960 = _2958 * _2953;
                        float _2961 = _2958 * _2954;
                        float _2962 = dot(vec3(_690, _693, _696), vec3(_2959, _2960, _2961));
                        float _2967 = 1.0 - (_2955 * _2912.w);
                        float _4347 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                        float _2968 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                        float _2969 = sqrt(_2955) * _2931.w;
                        float _2972 = 1.39999997615814208984375 / (_2969 + 1.39999997615814208984375);
                        float _2973 = _2972 * _2972;
                        float _2976 = ((1.0 - _2973) * _2962) + _2973;
                        float _2979 = _2969 * _2969;
                        float _2983 = ((isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0))) * _2968) / ((_2979 * 0.699999988079071044921875) + 1.0);
                        float _2987 = (-0.0) - _2442;
                        float _2988 = (-0.0) - _2443;
                        float _2989 = (-0.0) - _2444;
                        float _2993 = inversesqrt(dot(vec3(_2987, _2988, _2989), vec3(_2987, _2988, _2989)));
                        float _2994 = _2993 * _2987;
                        float _2995 = _2993 * _2988;
                        float _2996 = _2993 * _2989;
                        float _3004 = exp2(log2(1.0 / ((_2979 * 3.5) + 5.0)) * 0.25);
                        float _3005 = 1.0 - _750;
                        float _3012 = sqrt(1.0 - ((1.0 - (_3005 * _3005)) * (1.0 - (_3004 * _3004))));
                        float _3013 = _3012 * _3012;
                        float _3014 = _3013 * _3013;
                        float _3015 = _2994 + _2959;
                        float _3016 = _2995 + _2960;
                        float _3017 = _2996 + _2961;
                        float _3021 = inversesqrt(dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017)));
                        float _3025 = dot(vec3(_690, _693, _696), vec3(_2994, _2995, _2996));
                        float _4363 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3028 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                        float _3029 = dot(vec3(_690, _693, _696), vec3(_3021 * _3015, _3021 * _3016, _3021 * _3017));
                        float _4374 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3032 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                        float _3036 = ((_3032 * _3032) * (_3014 + (-1.0))) + 1.0;
                        float _3037 = _2972 * _3013;
                        float _3038 = _3037 * _3037;
                        float _3041 = ((1.0 - _3038) * _2962) + _3038;
                        float _4385 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                        float _3042 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _3043 = 1.0 - _3013;
                        float _3053 = (0.5 / (((_3042 * ((_3028 * _3043) + _3013)) + 9.9999999392252902907785028219223e-09) + (((_3042 * _3043) + _3013) * _3028))) * _3042;
                        float _4396 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3064 = (((_3014 * 3.1415927410125732421875) * (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) / ((_3036 * _3036) * ((_2979 * 2.1991131305694580078125) + 3.141590118408203125))) * _2968;
                        _2816 = (_2983 * _2931.x) + _2889;
                        _2817 = (_2983 * _2931.y) + _2890;
                        _2818 = (_2983 * _2931.z) + _2891;
                        _2813 = (_3064 * _2948.x) + _2886;
                        _2814 = (_3064 * _2948.y) + _2887;
                        _2815 = (_3064 * _2948.z) + _2888;
                        if (_2893 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2886 = _2813;
                            _2887 = _2814;
                            _2888 = _2815;
                            _2889 = _2816;
                            _2890 = _2817;
                            _2891 = _2818;
                            _2892 = _2893;
                        }
                    }
                    frontier_phi_66_pred = _2813;
                    frontier_phi_66_pred_1 = _2818;
                    frontier_phi_66_pred_2 = _2817;
                    frontier_phi_66_pred_3 = _2816;
                    frontier_phi_66_pred_4 = _2815;
                    frontier_phi_66_pred_5 = _2814;
                }
                _2590 = frontier_phi_66_pred;
                _2600 = frontier_phi_66_pred_1;
                _2598 = frontier_phi_66_pred_2;
                _2596 = frontier_phi_66_pred_3;
                _2594 = frontier_phi_66_pred_4;
                _2592 = frontier_phi_66_pred_5;
                uint _2748 = _2747 + 1u;
                if (_2748 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2741 = _2590;
                    _2742 = _2592;
                    _2743 = _2594;
                    _2744 = _2596;
                    _2745 = _2598;
                    _2746 = _2600;
                    _2747 = _2748;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
            _2597 = _2598;
            _2599 = _2600;
        }
        uvec4 _2603 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2604 = _2603.z;
        uint _2606 = (_2604 >> 8u) & 15u;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        if (((4294967295u << _2606) & _2488) == 0u)
        {
            _2709 = _2589;
            _2711 = _2591;
            _2713 = _2593;
            _2715 = _2595;
            _2717 = _2597;
            _2719 = _2599;
        }
        else
        {
            float _2734 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
            float _2735 = _2734 * _2442;
            float _2736 = _2734 * _2443;
            float _2737 = _2734 * _2444;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2606 < ((_2604 >> 12u) & 15u))
            {
                float _2710;
                float _2712;
                float _2714;
                float _2716;
                float _2718;
                float _2720;
                float _2869 = _2589;
                float _2870 = _2591;
                float _2871 = _2593;
                float _2872 = _2595;
                float _2873 = _2597;
                float _2874 = _2599;
                uint _2875 = _2606;
                uint _2884;
                bool _2885;
                for (;;)
                {
                    _2884 = texelFetch(g_lightClassification, int((((_2482 << 5u) + (_2468 << 9u)) + (_2875 << 2u)) >> 2u)).x;
                    _2885 = _2884 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2885)
                    {
                        frontier_phi_77_pred = _2874;
                        frontier_phi_77_pred_1 = _2873;
                        frontier_phi_77_pred_2 = _2872;
                        frontier_phi_77_pred_3 = _2871;
                        frontier_phi_77_pred_4 = _2870;
                        frontier_phi_77_pred_5 = _2869;
                    }
                    else
                    {
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3091 = _2869;
                        float _3092 = _2870;
                        float _3093 = _2871;
                        float _3094 = _2872;
                        float _3095 = _2873;
                        float _3096 = _2874;
                        uint _3097 = _2884;
                        uint _3098;
                        vec4 _3123;
                        float _3124;
                        vec4 _3139;
                        vec3 _3151;
                        vec4 _3167;
                        vec4 _3183;
                        float _3229;
                        bool _3230;
                        for (;;)
                        {
                            uint _3108 = ((_2875 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3097));
                            _3098 = (_3097 + 4294967295u) & _3097;
                            uint _3110 = _3108 * 40u;
                            _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            _3124 = _3123.w;
                            uint _3126 = (_3108 * 40u) + 4u;
                            _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            uint _3141 = (_3108 * 40u) + 8u;
                            _3151 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x));
                            uint _3154 = (_3108 * 40u) + 16u;
                            _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            uint _3170 = (_3108 * 40u) + 20u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            uint _3185 = (_3108 * 40u) + 24u;
                            vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            uint _3204 = (_3108 * 40u) + 28u;
                            vec4 _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            _3229 = fma(_2444, _3217.z, fma(_2443, _3217.y, _3217.x * _2442)) + _3217.w;
                            _3230 = !((fma(_2444, _3198.z, fma(_2443, _3198.y, _3198.x * _2442)) + _3198.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3230)
                            {
                                float _3257 = _3123.x - _2442;
                                float _3258 = _3123.y - _2443;
                                float _3259 = _3123.z - _2444;
                                float _3260 = dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259));
                                float _3263 = inversesqrt(_3260);
                                float _3264 = _3263 * _3257;
                                float _3265 = _3263 * _3258;
                                float _3266 = _3263 * _3259;
                                float _3270 = 1.0 - (_3260 / (_3124 * _3124));
                                float _4407 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3271 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3275 = sqrt(_3260) * _3139.w;
                                float _3277 = 1.39999997615814208984375 / (_3275 + 1.39999997615814208984375);
                                float _3278 = _3277 * _3277;
                                float _3281 = ((1.0 - _3278) * dot(vec3(_3264, _3265, _3266), vec3(_690, _693, _696))) + _3278;
                                float _3284 = _3275 * _3275;
                                float _3288 = (fma(_2444, _3167.z, fma(_2443, _3167.y, _3167.x * _2442)) + _3167.w) / _3229;
                                float _3289 = (fma(_2444, _3183.z, fma(_2443, _3183.y, _3183.x * _2442)) + _3183.w) / _3229;
                                float _3293 = 1.0 - dot(vec2(_3288, _3289), vec2(_3288, _3289));
                                float _4423 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3294 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3295 = _3294 * (((isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0))) * _3271) / ((_3284 * 0.699999988079071044921875) + 1.0));
                                float _3307 = exp2(log2(1.0 / ((_3284 * 3.5) + 5.0)) * 0.25);
                                float _3308 = 1.0 - _750;
                                float _3315 = sqrt(1.0 - ((1.0 - (_3308 * _3308)) * (1.0 - (_3307 * _3307))));
                                float _3316 = _3315 * _3315;
                                float _3317 = _3316 * _3316;
                                float _3318 = _3264 - _2735;
                                float _3319 = _3265 - _2736;
                                float _3320 = _3266 - _2737;
                                float _3324 = inversesqrt(dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320)));
                                float _3328 = dot(vec3(_690, _693, _696), vec3((-0.0) - _2735, (-0.0) - _2736, (-0.0) - _2737));
                                float _4434 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3331 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                                float _3332 = dot(vec3(_690, _693, _696), vec3(_3324 * _3318, _3324 * _3319, _3324 * _3320));
                                float _4445 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3335 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3339 = ((_3335 * _3335) * (_3317 + (-1.0))) + 1.0;
                                float _3340 = _3277 * _3316;
                                float _3341 = _3340 * _3340;
                                float _3347 = ((1.0 - _3341) * dot(vec3(_690, _693, _696), vec3(_3264, _3265, _3266))) + _3341;
                                float _4456 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3348 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                                float _3349 = 1.0 - _3316;
                                float _3359 = (0.5 / (((_3348 * ((_3331 * _3349) + _3316)) + 9.9999999392252902907785028219223e-09) + (((_3348 * _3349) + _3316) * _3331))) * _3348;
                                float _4467 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3369 = (_3294 * _3271) * (((_3317 * 3.1415927410125732421875) * (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) / ((_3339 * _3339) * ((_3284 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3295 * _3139.y;
                                frontier_phi_83_pred_1 = _3295 * _3139.x;
                                frontier_phi_83_pred_2 = _3369 * _3151.z;
                                frontier_phi_83_pred_3 = _3369 * _3151.y;
                                frontier_phi_83_pred_4 = _3369 * _3151.x;
                                frontier_phi_83_pred_5 = _3295 * _3139.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3377 = frontier_phi_83_pred;
                            _3376 = frontier_phi_83_pred_1;
                            _3375 = frontier_phi_83_pred_2;
                            _3374 = frontier_phi_83_pred_3;
                            _3373 = frontier_phi_83_pred_4;
                            _3378 = frontier_phi_83_pred_5;
                            _3081 = _3376 + _3094;
                            _3082 = _3377 + _3095;
                            _3083 = _3378 + _3096;
                            _3078 = _3373 + _3091;
                            _3079 = _3374 + _3092;
                            _3080 = _3375 + _3093;
                            if (_3098 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3098;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3083;
                        frontier_phi_77_pred_1 = _3082;
                        frontier_phi_77_pred_2 = _3081;
                        frontier_phi_77_pred_3 = _3080;
                        frontier_phi_77_pred_4 = _3079;
                        frontier_phi_77_pred_5 = _3078;
                    }
                    _2720 = frontier_phi_77_pred;
                    _2718 = frontier_phi_77_pred_1;
                    _2716 = frontier_phi_77_pred_2;
                    _2714 = frontier_phi_77_pred_3;
                    _2712 = frontier_phi_77_pred_4;
                    _2710 = frontier_phi_77_pred_5;
                    uint _2876 = _2875 + 1u;
                    if (_2876 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2869 = _2710;
                        _2870 = _2712;
                        _2871 = _2714;
                        _2872 = _2716;
                        _2873 = _2718;
                        _2874 = _2720;
                        _2875 = _2876;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2714;
                frontier_phi_58_59_ladder_1 = _2720;
                frontier_phi_58_59_ladder_2 = _2718;
                frontier_phi_58_59_ladder_3 = _2716;
                frontier_phi_58_59_ladder_4 = _2712;
                frontier_phi_58_59_ladder_5 = _2710;
            }
            else
            {
                frontier_phi_58_59_ladder = _2593;
                frontier_phi_58_59_ladder_1 = _2599;
                frontier_phi_58_59_ladder_2 = _2597;
                frontier_phi_58_59_ladder_3 = _2595;
                frontier_phi_58_59_ladder_4 = _2591;
                frontier_phi_58_59_ladder_5 = _2589;
            }
            _2709 = frontier_phi_58_59_ladder_5;
            _2711 = frontier_phi_58_59_ladder_4;
            _2713 = frontier_phi_58_59_ladder;
            _2715 = frontier_phi_58_59_ladder_3;
            _2717 = frontier_phi_58_59_ladder_2;
            _2719 = frontier_phi_58_59_ladder_1;
        }
        float _2724 = isnan(1.0) ? _734 : (isnan(_734) ? 1.0 : min(_734, 1.0));
        _2501 = (_2724 * _2715) + _1953;
        _2503 = (_2724 * _2717) + _1955;
        _2505 = (_2724 * _2719) + _1957;
        _2507 = ((_2709 * 0.039999999105930328369140625) * _2724) + _2286;
        _2509 = ((_2711 * 0.039999999105930328369140625) * _2724) + _2288;
        _2511 = ((_2713 * 0.039999999105930328369140625) * _2724) + _2290;
    }
    else
    {
        _2501 = _1953;
        _2503 = _1955;
        _2505 = _1957;
        _2507 = _2286;
        _2509 = _2288;
        _2511 = _2290;
    }
    float _4483 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _4494 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _4505 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _2528 = ((isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2501 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _734))) + ((_2507 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1570)) * cbPerFrame._m0[3u].x);
    float _2529 = ((isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2503 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _734))) + ((_2509 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1570)) * cbPerFrame._m0[3u].x);
    float _2530 = ((isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2505 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _734))) + ((_2511 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1570)) * cbPerFrame._m0[3u].x);
    uint _2531 = _237 + 6u;
    float _2539 = _669 / cbSceneParam._m0[86u].x;
    float _2540 = _670 / cbSceneParam._m0[86u].y;
    vec4 _2554 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2539, _2540, (log2((isnan(cbSceneParam._m0[77u].w) ? _591 : (isnan(_591) ? cbSceneParam._m0[77u].w : min(_591, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2556 = _2554.x;
    float _2557 = _2554.y;
    float _2558 = _2554.z;
    float _2559 = _2554.w;
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    if (_591 > cbSceneParam._m0[78u].w)
    {
        float _2614 = isnan(_591) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _591 : min(cbSceneParam._m0[80u].w, _591));
        float _2615 = _2614 / _591;
        float _2626 = _2615 * _641;
        float _2627 = _642 * _2615;
        float _2628 = (-0.0) - _2627;
        float _2629 = _2615 * _643;
        float _2631 = (cbSceneParam._m0[77u].w * _2628) / _2614;
        float _2632 = _2631 + cbSceneParam._m0[79u].w;
        float _2633 = cbSceneParam._m0[79u].w - _2627;
        float _2639 = sqrt(((_2626 * _2626) + (_2627 * _2627)) + (_2629 * _2629));
        float _2642 = (1.0 - (cbSceneParam._m0[77u].w / _2614)) * _2639;
        float _2647 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2649 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2826;
        if (abs((_2628 - _2631) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2826 = ((((_2632 > 0.0) ? exp2(_2647 * _2632) : (2.0 - exp2(_2649 * _2632))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2642;
        }
        else
        {
            float _2770 = 1.0 / cbSceneParam._m0[80u].x;
            float _2771 = isnan(_2633) ? _2632 : (isnan(_2632) ? _2633 : max(_2632, _2633));
            float _2772 = isnan(_2633) ? _2632 : (isnan(_2632) ? _2633 : min(_2632, _2633));
            float _2781 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : min(_2771, 0.0));
            float _2782 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : min(_2772, 0.0));
            _2826 = ((abs(_2639 / _2628) * cbSceneParam._m0[80u].y) * ((((_2781 - _2782) * 2.0) - ((exp2(_2647 * (isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0)))) - exp2(_2647 * (isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0))))) * _2770)) - ((exp2(_2649 * _2781) - exp2(_2649 * _2782)) * _2770))) + (_2642 * cbSceneParam._m0[80u].z);
        }
        vec4 _2828 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2539, _2540, 1.0), 0.0);
        float _2837 = exp2((_2826 * (-1.44269502162933349609375)) * (1.0 - _2828.w));
        float _2838 = log2(_2837);
        float _2854 = log2(_2559);
        _2651 = (exp2(_2854 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2838 * cbSceneParam._m0[78u].x)) * _2828.x) / cbSceneParam._m0[78u].x)) + _2556;
        _2653 = (exp2(_2854 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2838 * cbSceneParam._m0[78u].y)) * _2828.y) / cbSceneParam._m0[78u].y)) + _2557;
        _2655 = (exp2(_2854 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2838 * cbSceneParam._m0[78u].z)) * _2828.z) / cbSceneParam._m0[78u].z)) + _2558;
        _2657 = _2837 * _2559;
    }
    else
    {
        _2651 = _2556;
        _2653 = _2557;
        _2655 = _2558;
        _2657 = _2559;
    }
    bool _2864;
    vec4 _2667;
    vec4 _2689;
    float _2691;
    float _2695;
    float _2696;
    float _2697;
    float _2698;
    bool _2708;
    for (;;)
    {
        _2667 = cbMatDynParam._m0[0u];
        float _2669 = roundEven(_2667.y);
        bool _2670 = _2669 == 3.0;
        float _2671 = log2(_2657);
        float _2678 = exp2(_2671 * cbSceneParam._m0[78u].x) * _2528;
        float _2679 = exp2(_2671 * cbSceneParam._m0[78u].y) * _2529;
        float _2680 = exp2(_2671 * cbSceneParam._m0[78u].z) * _2530;
        float _2687 = _657 + (-0.5);
        _2689 = cbMtdParam._m0[1u];
        _2691 = _2689.y * _2687;
        float _2694 = (_2669 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2695 = _2694 * (_2670 ? _2678 : (_2678 + (cbSceneParam._m0[72u].w * _2651)));
        _2696 = _2694 * (_2670 ? _2679 : (_2679 + (cbSceneParam._m0[72u].w * _2653)));
        _2697 = _2694 * (_2670 ? _2680 : (_2680 + (cbSceneParam._m0[72u].w * _2655)));
        _2698 = _2687 * 0.999000012874603271484375;
        _2708 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2708)
        {
            if ((cbInstanceData._m0[_237 + 7u].x + _2698) < 0.5)
            {
                _2864 = true;
                break;
            }
        }
        uint _2805 = _709 + uint(_2667.w);
        if ((cbInstanceData._m0[_2805].w < 1.0) && ((cbInstanceData._m0[_2805].w + _2698) < 0.5))
        {
            _2864 = true;
            break;
        }
        if ((_2691 + 1.0) < _2689.x)
        {
            _2864 = true;
            break;
        }
        _2864 = false;
        break;
    }
    float _3069;
    if (_2864)
    {
        discard_state = true;
        _3069 = 0.0;
    }
    else
    {
        _3069 = cbInstanceData._m0[_2531].w;
    }
    SV_Target.x = _2695;
    SV_Target.y = _2696;
    SV_Target.z = _2697;
    SV_Target.w = _3069;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2531].w;
    discard_exit();
}


