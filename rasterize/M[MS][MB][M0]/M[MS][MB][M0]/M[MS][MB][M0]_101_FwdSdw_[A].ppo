#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1254;
float _3897;
float _3898;
float _3899;
float _3900;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _226 = _225 * _217;
    float _227 = _225 * _218;
    float _228 = _225 * _219;
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = _239 * TANGENT.x;
    float _241 = _239 * TANGENT.y;
    float _242 = _239 * TANGENT.z;
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3909 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3920 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3931 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    uint _266 = uint(roundEven(NORMAL.w)) * 13u;
    uint _271 = _266 + 1u;
    uint _275 = _266 + 2u;
    float _284 = sqrt(((cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x)) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x));
    float _285 = _284 * TEXCOORD.z;
    float _286 = _284 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _285) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _286) + cbTextureTilingScale._m0[13u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _328 = _323.x * cbMtdParam._m0[11u].x;
    float _329 = _323.y * cbMtdParam._m0[11u].y;
    float _330 = _323.z * cbMtdParam._m0[11u].z;
    vec4 _349 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _285) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _286) + cbTextureTilingScale._m0[5u].w));
    vec4 _385 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _397 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_387 - _397) * cbMtdParam._m0[24u].x) + _397) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3942 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _422 = (_415 * ((_349.x * cbMtdParam._m0[12u].x) - _328)) + _328;
    float _423 = (_415 * ((_349.y * cbMtdParam._m0[12u].y) - _329)) + _329;
    float _424 = (_415 * ((_349.z * cbMtdParam._m0[12u].z) - _330)) + _330;
    float _428 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _299.x) * _422;
    float _431 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _299.y) * _423;
    float _434 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _299.z) * _424;
    float _441 = ((_422 - _428) * (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) + _428;
    float _442 = ((_423 - _431) * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) + _431;
    float _443 = ((_424 - _434) * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) + _434;
    vec4 _461 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _285) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _286) + cbTextureTilingScale._m0[20u].w));
    vec4 _488 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _285) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _286) + cbTextureTilingScale._m0[4u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _507 = _505.x;
    float _508 = _505.y;
    float _509 = _505.z;
    float _518 = ((_488.z - _509) * _415) + _509;
    float _521 = ((((_488.x - _507) * _415) + _507) * 2.0) + (-1.0);
    float _522 = ((((_488.y - _508) * _415) + _508) * 2.0) + (-1.0);
    float _523 = dot(vec2(_521, _522), vec2(_521, _522));
    float _3953 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _528 = sqrt(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))));
    vec4 _548 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _560 = (_521 + ((((_461.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_548.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _561 = (_522 + ((((_461.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_548.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _564 = fma(_528, _233, fma(_561, _240, _560 * _226));
    float _567 = fma(_528, _234, fma(_561, _241, _560 * _227));
    float _570 = fma(_528, _235, fma(_561, _242, _560 * _228));
    float _574 = inversesqrt(dot(vec3(_564, _567, _570), vec3(_564, _567, _570)));
    vec4 _603 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _285) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _286) + cbTextureTilingScale._m0[11u].w));
    float _605 = _603.x;
    float _606 = 1.0 - _605;
    float _612 = (cbMtdParam._m0[19u].x + dot(vec4(_574 * _564, _574 * _567, _574 * _570, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_605 - _606) * cbMtdParam._m0[24u].z) + _606) * cbMtdParam._m0[21u].z);
    float _3964 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _613 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _620 = (_613 * (cbMtdParam._m0[17u].x - _441)) + _441;
    float _621 = (_613 * (cbMtdParam._m0[17u].y - _442)) + _442;
    float _622 = (_613 * (cbMtdParam._m0[17u].z - _443)) + _443;
    float _627 = (((_461.z - _518) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _518;
    float _631 = ((_548.z - _627) * cbMtdParam._m0[19u].w) + _627;
    vec4 _644 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _285) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _286) + cbTextureTilingScale._m0[15u].w));
    float _651 = (_644.x * 2.0) + (-1.0);
    float _652 = (_644.y * 2.0) + (-1.0);
    float _653 = dot(vec2(_651, _652), vec2(_651, _652));
    float _3975 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _661 = ((_644.z - _631) * _613) + _631;
    float _671 = ((sqrt(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) - _528) * _613) + _528;
    float _674 = (((_651 - _560) * _613) + _560) + (cbMtdParam._m0[21u].x * _560);
    float _675 = (((_652 - _561) * _613) + _561) + (cbMtdParam._m0[21u].x * _561);
    float _677 = cbMtdParam._m0[22u].x + _548.w;
    float _680 = fma(_671, _233, fma(_675, _240, _674 * _226));
    float _683 = fma(_671, _234, fma(_675, _241, _674 * _227));
    float _686 = fma(_671, _235, fma(_675, _242, _674 * _228));
    float _690 = inversesqrt(dot(vec3(_680, _683, _686), vec3(_680, _683, _686)));
    float _691 = _690 * _680;
    float _692 = _690 * _683;
    float _693 = _690 * _686;
    float _3986 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _694 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _4008 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _4019 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _4030 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _712 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _764 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _754);
    float _765 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _754);
    float _766 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _754);
    float _770 = inversesqrt(dot(vec3(_764, _765, _766), vec3(_764, _765, _766)));
    float _771 = _764 * _770;
    float _772 = _765 * _770;
    float _773 = _766 * _770;
    vec4 _778 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _780 = _778.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _934 = sqrt(((_764 * _764) + (_765 * _765)) + (_766 * _766));
        float _940 = (cbMatDynParam._m0[5u].x * _934) + cbMatDynParam._m0[5u].y;
        float _4041 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _945 = (cbMatDynParam._m0[5u].z * _934) + cbMatDynParam._m0[5u].w;
        float _4052 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) - _941)) + _941) < ((_780 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _791 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _792 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _810 = fma(_693, cbSceneParam._m0[5u].z, fma(_692, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _691));
    float _813 = fma(_693, cbSceneParam._m0[6u].z, fma(_692, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _691));
    float _816 = fma(_693, cbSceneParam._m0[7u].z, fma(_692, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _691));
    uint _829 = _266 + 9u;
    uint _830 = _829 + uint(cbMatDynParam._m0[0u].w);
    float _836 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_830].x;
    float _837 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * cbInstanceData._m0[_830].y;
    float _838 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * cbInstanceData._m0[_830].z;
    float _4063 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _839 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _4074 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _4085 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    vec4 _850 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _791, cbSceneParam._m0[86u].y * _792));
    float _854 = ((isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * TEXCOORD_5.w) * _850.x;
    float _855 = dot(vec3(_691, _692, _693), vec3(_771, _772, _773));
    float _858 = _855 * 2.0;
    float _862 = (_858 * _691) - _771;
    float _863 = (_858 * _692) - _772;
    float _864 = (_858 * _693) - _773;
    float _868 = abs(dot(vec3(_771, _772, _773), vec3(_691, _692, _693)));
    float _4096 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _870 = sqrt(_694);
    float _883 = exp2((_870 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_870 * 3.0));
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _919 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1253;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _978 = fma(_923, cbModelParam._m0[26u].z, fma(_919, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _915));
        float _982 = fma(_923, cbModelParam._m0[27u].z, fma(_919, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _915));
        float _986 = fma(_923, cbModelParam._m0[28u].z, fma(_919, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _915));
        float _1011 = _915 + _691;
        float _1012 = _919 + _692;
        float _1013 = _923 + _693;
        float _1023 = fma(_1013, cbModelParam._m0[26u].z, fma(_1012, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1011)) - _978;
        float _1024 = fma(_1013, cbModelParam._m0[27u].z, fma(_1012, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1011)) - _982;
        float _1025 = fma(_1013, cbModelParam._m0[28u].z, fma(_1012, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1011)) - _986;
        float _1029 = inversesqrt(dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025)));
        float _1042 = ((_1029 * _1023) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_978 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1043 = ((_1029 * _1024) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_982 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1044 = ((_1029 * _1025) / cbModelParam._m0[34u].z) + ((((((_986 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        float _1081 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1047.x + (-0.5));
        float _1083 = _1081 * (_1047.y + (-0.5));
        float _1084 = _1081 * (_1047.z + (-0.5));
        float _1091 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1054.x + (-0.5));
        float _1093 = _1091 * (_1054.y + (-0.5));
        float _1094 = _1091 * (_1054.z + (-0.5));
        float _1101 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1061.x + (-0.5));
        float _1103 = _1101 * (_1061.y + (-0.5));
        float _1104 = _1101 * (_1061.z + (-0.5));
        float _1111 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1068.x + (-0.5));
        float _1113 = _1111 * (_1068.y + (-0.5));
        float _1114 = _1111 * (_1068.z + (-0.5));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = _1082 * 0.5;
        float _1119 = _1092 * 0.5;
        float _1120 = _1102 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1135 = (dot(vec3(_691, _692, _693), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1145 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _4144 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1147 + 1.0))) + _1152) * _1115;
        float _1162 = _1083 * 0.5;
        float _1163 = _1093 * 0.5;
        float _1164 = _1103 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_691, _692, _693), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _4177 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1189 + 1.0))) + _1194) * _1116;
        float _1204 = _1084 * 0.5;
        float _1205 = _1094 * 0.5;
        float _1206 = _1104 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_691, _692, _693), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _4210 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1231 + 1.0))) + _1236) * _1117;
        _1253 = _1084;
        _1255 = _1083;
        _1256 = _1082;
        _1257 = _1094;
        _1258 = _1093;
        _1259 = _1092;
        _1260 = _1104;
        _1261 = _1103;
        _1262 = _1102;
        _1263 = _1117;
        _1264 = _1116;
        _1265 = _1115;
        _1266 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
        _1267 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
        _1268 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
    }
    else
    {
        _1253 = _1254;
        _1255 = _1254;
        _1256 = _1254;
        _1257 = _1254;
        _1258 = _1254;
        _1259 = _1254;
        _1260 = _1254;
        _1261 = _1254;
        _1262 = _1254;
        _1263 = _1254;
        _1264 = _1254;
        _1265 = _1254;
        _1266 = 0.0;
        _1267 = 0.0;
        _1268 = 0.0;
    }
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1296 = fma(_923, cbModelParam._m0[30u].z, fma(_919, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _915));
        float _1300 = fma(_923, cbModelParam._m0[31u].z, fma(_919, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _915));
        float _1304 = fma(_923, cbModelParam._m0[32u].z, fma(_919, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _915));
        float _1327 = _915 + _691;
        float _1328 = _919 + _692;
        float _1329 = _923 + _693;
        float _1339 = fma(_1329, cbModelParam._m0[30u].z, fma(_1328, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1327)) - _1296;
        float _1340 = fma(_1329, cbModelParam._m0[31u].z, fma(_1328, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1327)) - _1300;
        float _1341 = fma(_1329, cbModelParam._m0[32u].z, fma(_1328, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1327)) - _1304;
        float _1345 = inversesqrt(dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341)));
        float _1358 = ((_1345 * _1339) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1296 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1359 = ((_1345 * _1340) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1300 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1360 = ((_1345 * _1341) / cbModelParam._m0[35u].z) + ((((((_1304 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        float _1395 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1362.x + (-0.5));
        float _1397 = _1395 * (_1362.y + (-0.5));
        float _1398 = _1395 * (_1362.z + (-0.5));
        float _1405 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1369.x + (-0.5));
        float _1407 = _1405 * (_1369.y + (-0.5));
        float _1408 = _1405 * (_1369.z + (-0.5));
        float _1415 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1376.x + (-0.5));
        float _1417 = _1415 * (_1376.y + (-0.5));
        float _1418 = _1415 * (_1376.z + (-0.5));
        float _1425 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1383.x + (-0.5));
        float _1427 = _1425 * (_1383.y + (-0.5));
        float _1428 = _1425 * (_1383.z + (-0.5));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = _1396 * 0.5;
        float _1433 = _1406 * 0.5;
        float _1434 = _1416 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_691, _692, _693), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _4251 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _4262 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _4273 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_1459 + 1.0))) + _1464) * _1429;
        float _1474 = _1397 * 0.5;
        float _1475 = _1407 * 0.5;
        float _1476 = _1417 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_691, _692, _693), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4306 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1501 + 1.0))) + _1506) * _1430;
        float _1516 = _1398 * 0.5;
        float _1517 = _1408 * 0.5;
        float _1518 = _1418 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_691, _692, _693), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4339 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1543 + 1.0))) + _1548) * _1431;
        _1565 = _1398;
        _1566 = _1397;
        _1567 = _1396;
        _1568 = _1408;
        _1569 = _1407;
        _1570 = _1406;
        _1571 = _1418;
        _1572 = _1417;
        _1573 = _1416;
        _1574 = _1431;
        _1575 = _1430;
        _1576 = _1429;
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
    }
    else
    {
        _1565 = _1254;
        _1566 = _1254;
        _1567 = _1254;
        _1568 = _1254;
        _1569 = _1254;
        _1570 = _1254;
        _1571 = _1254;
        _1572 = _1254;
        _1573 = _1254;
        _1574 = _1254;
        _1575 = _1254;
        _1576 = _1254;
        _1577 = 0.0;
        _1578 = 0.0;
        _1579 = 0.0;
    }
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1266)) + _1266;
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1267)) + _1267;
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1268)) + _1268;
    float _1612 = fma(_1591, cbSceneParam._m0[89u].z, fma(_1590, cbSceneParam._m0[89u].y, _1589 * cbSceneParam._m0[89u].x));
    float _1615 = fma(_1591, cbSceneParam._m0[90u].z, fma(_1590, cbSceneParam._m0[90u].y, _1589 * cbSceneParam._m0[90u].x));
    float _1618 = fma(_1591, cbSceneParam._m0[91u].z, fma(_1590, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1589));
    float _1633 = _862 * 0.5;
    float _1634 = _863 * 0.5;
    float _1635 = _864 * 0.5;
    float _1636 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1639 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1642 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1676;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1649 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1253, _1257, _1260, _1263));
        float _1653 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1255, _1258, _1261, _1264));
        float _1657 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1256, _1259, _1262, _1265));
        float _1664 = dot(vec4(cbModelParam._m0[39u]), vec4(_1633, _1634, _1635, 1.0));
        _1676 = dot(vec3(isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1664) ? 0.0 : (isnan(0.0) ? _1664 : max(0.0, _1664))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1676 = 1.0;
    }
    float _1687;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1678 = dot(vec4(cbModelParam._m0[40u]), vec4(_1633, _1634, _1635, 1.0));
        _1687 = dot(vec3(isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1678) ? 0.0 : (isnan(0.0) ? _1678 : max(0.0, _1678))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1687 = 1.0;
    }
    float _1691 = (_1687 * cbModelParam._m0[1u].x) + (_1676 * (1.0 - cbModelParam._m0[1u].x));
    float _1701 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _694);
    float _1702 = isnan(_1701) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1701 : min(cbModelParam._m0[25u].z, _1701));
    float _1783;
    float _1785;
    float _1787;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1750 = fma(_923, cbModelParam._m0[13u].z, fma(_919, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _915)) + cbModelParam._m0[13u].w;
        float _1754 = fma(_923, cbModelParam._m0[14u].z, fma(_919, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _915)) + cbModelParam._m0[14u].w;
        float _1758 = fma(_923, cbModelParam._m0[15u].z, fma(_919, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _915)) + cbModelParam._m0[15u].w;
        float _1761 = fma(_864, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _862));
        float _1764 = fma(_864, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _862));
        float _1767 = fma(_864, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _862));
        float _1795;
        if (_1761 > 0.0)
        {
            _1795 = abs((1.0 - _1750) / _1761);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1750 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1795 = frontier_phi_17_15_ladder;
        }
        float _1965;
        if (_1764 > 0.0)
        {
            _1965 = abs((1.0 - _1754) / _1764);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1754 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1965 = frontier_phi_26_22_ladder;
        }
        float _2260;
        if (_1767 > 0.0)
        {
            _2260 = abs((1.0 - _1758) / _1767);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1758 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2260 = frontier_phi_38_33_ladder;
        }
        float _2262 = isnan(_1965) ? _1795 : (isnan(_1795) ? _1965 : min(_1795, _1965));
        float _2263 = isnan(_2260) ? _2262 : (isnan(_2262) ? _2260 : min(_2262, _2260));
        float _2267 = (_2263 * _1761) + _1750;
        float _2268 = (_2263 * _1764) + _1754;
        float _2269 = (_2263 * _1767) + _1758;
        float _2270 = _2263 * 9.9999997473787516355514526367188e-05;
        float _2272 = (-1.0) - _2270;
        float _2274 = _2270 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2269 > _2274) || ((_2269 < _2272) || ((_2268 > _2274) || ((_2268 < _2272) || ((_2267 < _2272) || (_2267 > _2274))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2414 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2269, cbModelParam._m0[9u].z, fma(_2268, cbModelParam._m0[9u].y, _2267 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2269, cbModelParam._m0[10u].z, fma(_2268, cbModelParam._m0[10u].y, _2267 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2269, cbModelParam._m0[11u].z, fma(_2268, cbModelParam._m0[11u].y, _2267 * cbModelParam._m0[11u].x))), _1702);
            frontier_phi_16_38_ladder = _2414.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2414.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2414.x * cbModelParam._m0[1u].y;
        }
        _1783 = frontier_phi_16_38_ladder_2;
        _1785 = frontier_phi_16_38_ladder_1;
        _1787 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1771 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_862, _863, _864), _1702);
        _1783 = _1771.x * cbModelParam._m0[1u].y;
        _1785 = _1771.y * cbModelParam._m0[1u].y;
        _1787 = _1771.z * cbModelParam._m0[1u].y;
    }
    float _1791 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _694);
    float _1792 = isnan(_1791) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1791 : min(cbModelParam._m0[25u].w, _1791));
    float _1882;
    float _1884;
    float _1886;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1846 = fma(_923, cbModelParam._m0[21u].z, fma(_919, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _915)) + cbModelParam._m0[21u].w;
        float _1850 = fma(_923, cbModelParam._m0[22u].z, fma(_919, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _915)) + cbModelParam._m0[22u].w;
        float _1854 = fma(_923, cbModelParam._m0[23u].z, fma(_919, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _915)) + cbModelParam._m0[23u].w;
        float _1857 = fma(_864, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _862));
        float _1860 = fma(_864, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _862));
        float _1863 = fma(_864, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _862));
        float _1970;
        if (_1857 > 0.0)
        {
            _1970 = abs((1.0 - _1846) / _1857);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1846 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1970 = frontier_phi_28_24_ladder;
        }
        float _2287;
        if (_1860 > 0.0)
        {
            _2287 = abs((1.0 - _1850) / _1860);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1850 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2287 = frontier_phi_40_35_ladder;
        }
        float _2614;
        if (_1863 > 0.0)
        {
            _2614 = abs((1.0 - _1854) / _1863);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1854 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2614 = frontier_phi_50_47_ladder;
        }
        float _2616 = isnan(_2287) ? _1970 : (isnan(_1970) ? _2287 : min(_1970, _2287));
        float _2617 = isnan(_2614) ? _2616 : (isnan(_2616) ? _2614 : min(_2616, _2614));
        float _2621 = (_2617 * _1857) + _1846;
        float _2622 = (_2617 * _1860) + _1850;
        float _2623 = (_2617 * _1863) + _1854;
        float _2624 = _2617 * 9.9999997473787516355514526367188e-05;
        float _2625 = (-1.0) - _2624;
        float _2627 = _2624 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2623 > _2627) || ((_2623 < _2625) || ((_2622 > _2627) || ((_2622 < _2625) || ((_2621 < _2625) || (_2621 > _2627))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2741 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2623, cbModelParam._m0[17u].z, fma(_2622, cbModelParam._m0[17u].y, _2621 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2623, cbModelParam._m0[18u].z, fma(_2622, cbModelParam._m0[18u].y, _2621 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2623, cbModelParam._m0[19u].z, fma(_2622, cbModelParam._m0[19u].y, _2621 * cbModelParam._m0[19u].x))), _1792);
            frontier_phi_25_50_ladder = _2741.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2741.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2741.x * cbModelParam._m0[1u].z;
        }
        _1882 = frontier_phi_25_50_ladder_2;
        _1884 = frontier_phi_25_50_ladder_1;
        _1886 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1866 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_862, _863, _864), _1792);
        _1882 = _1866.x * cbModelParam._m0[1u].z;
        _1884 = _1866.y * cbModelParam._m0[1u].z;
        _1886 = _1866.z * cbModelParam._m0[1u].z;
    }
    float _1898 = ((((1.0 - _883) * ((_870 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_883 * _870)) * _854;
    float _1899 = _1898 * ((cbModelParam._m0[1u].w * (_1882 - _1783)) + _1783);
    float _1900 = _1898 * ((cbModelParam._m0[1u].w * (_1884 - _1785)) + _1785);
    float _1901 = _1898 * ((cbModelParam._m0[1u].w * (_1886 - _1787)) + _1787);
    float _1904 = fma(_1901, cbSceneParam._m0[89u].z, fma(_1900, cbSceneParam._m0[89u].y, _1899 * cbSceneParam._m0[89u].x));
    float _1907 = fma(_1901, cbSceneParam._m0[90u].z, fma(_1900, cbSceneParam._m0[90u].y, _1899 * cbSceneParam._m0[90u].x));
    float _1910 = fma(_1901, cbSceneParam._m0[91u].z, fma(_1900, cbSceneParam._m0[91u].y, _1899 * cbSceneParam._m0[91u].x));
    float _1944 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1948 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1952 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1956 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1957 = _1944 / _1956;
    float _1958 = _1948 / _1956;
    float _1959 = _1952 / _1956;
    float _2106;
    float _2107;
    float _2108;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1986 = ((uint(_1959 > cbSceneParam._m0[59u].y) + uint(_1959 > cbSceneParam._m0[59u].x)) + uint(_1959 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1987 = _1986 + 43u;
        uint _1995 = _1986 + 44u;
        uint _2003 = _1986 + 45u;
        uint _2011 = _1986 + 46u;
        float _2022 = fma(_1956, cbSceneParam._m0[_1987].w, fma(_1952, cbSceneParam._m0[_1987].z, fma(_1948, cbSceneParam._m0[_1987].y, _1944 * cbSceneParam._m0[_1987].x)));
        float _2026 = fma(_1956, cbSceneParam._m0[_1995].w, fma(_1952, cbSceneParam._m0[_1995].z, fma(_1948, cbSceneParam._m0[_1995].y, _1944 * cbSceneParam._m0[_1995].x)));
        float _2034 = fma(_1956, cbSceneParam._m0[_2011].w, fma(_1952, cbSceneParam._m0[_2011].z, fma(_1948, cbSceneParam._m0[_2011].y, _1944 * cbSceneParam._m0[_2011].x)));
        float _2039 = cbSceneParam._m0[33u].z * _2034;
        float _2041 = cbSceneParam._m0[33u].w * _2034;
        float _2044 = fma(_1956, cbSceneParam._m0[_2003].w, fma(_1952, cbSceneParam._m0[_2003].z, fma(_1948, cbSceneParam._m0[_2003].y, _1944 * cbSceneParam._m0[_2003].x))) / _2034;
        float _2092 = (cbSceneParam._m0[33u].x - sqrt(((_1958 * _1958) + (_1957 * _1957)) + (_1959 * _1959))) * cbSceneParam._m0[33u].y;
        float _4465 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2099 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2039 + _2022) / _2034, (_2041 + _2026) / _2034), _2044), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2041 + _2022) / _2034, (_2026 - _2039) / _2034), _2044), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2022 - _2039) / _2034, (_2026 - _2041) / _2034), _2044), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2022 - _2041) / _2034, (_2039 + _2026) / _2034), _2044), 0.0)).x), vec4(0.25)));
        _2106 = 1.0 - (_2099 * cbSceneParam._m0[34u].x);
        _2107 = 1.0 - (_2099 * cbSceneParam._m0[34u].y);
        _2108 = 1.0 - (_2099 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2106 = 1.0;
        _2107 = 1.0;
        _2108 = 1.0;
    }
    float _2172;
    float _2174;
    float _2176;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2160 = fma(_1956, cbSceneParam._m0[63u].w, fma(_1952, cbSceneParam._m0[63u].z, fma(_1948, cbSceneParam._m0[63u].y, _1944 * cbSceneParam._m0[63u].x)));
        float _2161 = fma(_1956, cbSceneParam._m0[60u].w, fma(_1952, cbSceneParam._m0[60u].z, fma(_1948, cbSceneParam._m0[60u].y, _1944 * cbSceneParam._m0[60u].x))) / _2160;
        float _2162 = fma(_1956, cbSceneParam._m0[61u].w, fma(_1952, cbSceneParam._m0[61u].z, fma(_1948, cbSceneParam._m0[61u].y, _1944 * cbSceneParam._m0[61u].x))) / _2160;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2161 >= cbSceneParam._m0[64u].x) && (_2162 >= cbSceneParam._m0[64u].y)) && (_2161 <= cbSceneParam._m0[64u].z)) && (_2162 <= cbSceneParam._m0[64u].w))
        {
            float _2300 = fma(_1956, cbSceneParam._m0[62u].w, fma(_1952, cbSceneParam._m0[62u].z, fma(_1948, cbSceneParam._m0[62u].y, _1944 * cbSceneParam._m0[62u].x))) / _2160;
            float _2304 = isnan(cbSceneParam._m0[41u].w) ? _2300 : (isnan(_2300) ? cbSceneParam._m0[41u].w : max(_2300, cbSceneParam._m0[41u].w));
            float _2347 = (cbSceneParam._m0[33u].x - sqrt(((_1958 * _1958) + (_1957 * _1957)) + (_1959 * _1959))) * cbSceneParam._m0[33u].y;
            float _4481 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
            float _2354 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2161, cbSceneParam._m0[33u].w + _2162), _2304), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2161, _2162 - cbSceneParam._m0[33u].z), _2304), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2161 - cbSceneParam._m0[33u].z, _2162 - cbSceneParam._m0[33u].w), _2304), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2161 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2162), _2304), 0.0)).x), vec4(0.25)));
            float _2358 = 1.0 - (_2354 * cbSceneParam._m0[34u].x);
            float _2359 = 1.0 - (_2354 * cbSceneParam._m0[34u].y);
            float _2360 = 1.0 - (_2354 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2360) ? _2108 : (isnan(_2108) ? _2360 : min(_2108, _2360));
            frontier_phi_37_36_ladder_1 = isnan(_2359) ? _2107 : (isnan(_2107) ? _2359 : min(_2107, _2359));
            frontier_phi_37_36_ladder_2 = isnan(_2358) ? _2106 : (isnan(_2106) ? _2358 : min(_2106, _2358));
        }
        else
        {
            frontier_phi_37_36_ladder = _2108;
            frontier_phi_37_36_ladder_1 = _2107;
            frontier_phi_37_36_ladder_2 = _2106;
        }
        _2172 = frontier_phi_37_36_ladder_2;
        _2174 = frontier_phi_37_36_ladder_1;
        _2176 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2172 = _2106;
        _2174 = _2107;
        _2176 = _2108;
    }
    uvec4 _2181 = floatBitsToUint(cbInstanceData._m0[_266 + 5u]);
    uint _2183 = _2181.x * 14u;
    uint _2184 = _2183 + 13u;
    float _2191 = _854 + (-1.0);
    float _2196 = (cbLight._m0[_2184].x * _2191) + 1.0;
    float _2197 = (cbLight._m0[_2184].y * _2191) + 1.0;
    float _2198 = (cbLight._m0[_2184].z * _2191) + 1.0;
    float _2199 = (cbLight._m0[_2184].w * _2191) + 1.0;
    uint _2200 = _2183 + 5u;
    float _2206 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
    uint _2210 = _2183 + 4u;
    float _2219 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
    uint _2223 = _2183 | 1u;
    float _2234 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_691, _692, _693));
    float _2237 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_691, _692, _693));
    float _4517 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _4528 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2242 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * 0.3183098733425140380859375;
    float _2244 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * 0.3183098733425140380859375;
    float _2251 = ((cbLight._m0[_2200].x * _2206) * _2244) + (((cbLight._m0[_2210].x * _2172) * _2219) * _2242);
    float _2252 = ((_2206 * cbLight._m0[_2200].y) * _2244) + (((cbLight._m0[_2210].y * _2174) * _2219) * _2242);
    float _2253 = ((_2206 * cbLight._m0[_2200].z) * _2244) + (((cbLight._m0[_2210].z * _2176) * _2219) * _2242);
    uvec4 _2257 = floatBitsToUint(cbLight._m0[_2183 + 12u]);
    bool _2259 = _2257.x == 0u;
    float _2361;
    float _2363;
    float _2365;
    if (_2259)
    {
        _2361 = _2251;
        _2363 = _2252;
        _2365 = _2253;
    }
    else
    {
        uint _2369 = _2183 + 6u;
        float _2385 = (dot(vec3(cbLight._m0[_2183 + 2u].xyz), vec3(_691, _692, _693)) * 0.5) + 0.5;
        float _2386 = _2385 * _2385;
        float _4539 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2387 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2388 = isnan(1.0) ? _2198 : (isnan(_2198) ? 1.0 : min(_2198, 1.0));
        _2361 = (((cbLight._m0[_2369].x * 0.3183098733425140380859375) * _2387) * _2388) + _2251;
        _2363 = (((cbLight._m0[_2369].y * 0.3183098733425140380859375) * _2387) * _2388) + _2252;
        _2365 = (((cbLight._m0[_2369].z * 0.3183098733425140380859375) * _2387) * _2388) + _2253;
    }
    bool _2368 = _2257.y == 0u;
    float _2423;
    float _2425;
    float _2427;
    if (_2368)
    {
        _2423 = _2361;
        _2425 = _2363;
        _2427 = _2365;
    }
    else
    {
        uint _2585 = _2183 + 7u;
        float _2601 = (dot(vec3(cbLight._m0[_2183 + 3u].xyz), vec3(_691, _692, _693)) * 0.5) + 0.5;
        float _2602 = _2601 * _2601;
        float _4555 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2603 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2604 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
        _2423 = (((cbLight._m0[_2585].x * 0.3183098733425140380859375) * _2603) * _2604) + _2361;
        _2425 = (((cbLight._m0[_2585].y * 0.3183098733425140380859375) * _2603) * _2604) + _2363;
        _2427 = (((cbLight._m0[_2585].z * 0.3183098733425140380859375) * _2603) * _2604) + _2365;
    }
    uint _2430 = _2183 + 8u;
    float _2443 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2183].w)) * _694) * 0.949999988079071044921875);
    float _2444 = _2443 * _2443;
    float _2445 = cbLight._m0[_2183].x + _771;
    float _2446 = cbLight._m0[_2183].y + _772;
    float _2447 = cbLight._m0[_2183].z + _773;
    float _2451 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
    float _2452 = _2451 * _2445;
    float _2453 = _2451 * _2446;
    float _2454 = _2451 * _2447;
    float _2455 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_2183].xyz));
    float _4571 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2458 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _4582 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _2459 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _2460 = dot(vec3(_691, _692, _693), vec3(_2452, _2453, _2454));
    float _4593 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _2464 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_2452, _2453, _2454));
    float _4604 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2468 = _2444 * _2444;
    float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
    float _2483 = (exp2(log2(1.0 - (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2484 = 1.0 - _2444;
    float _2495 = (0.5 / (((_2459 * ((_2458 * _2484) + _2444)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2484) + _2444) * _2458))) * _2458;
    float _4615 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2497 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
    uint _2511 = _2183 + 9u;
    float _2522 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2223].w)) * _694) * 0.949999988079071044921875);
    float _2523 = _2522 * _2522;
    float _2524 = cbLight._m0[_2223].x + _771;
    float _2525 = cbLight._m0[_2223].y + _772;
    float _2526 = cbLight._m0[_2223].z + _773;
    float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
    float _2531 = _2530 * _2524;
    float _2532 = _2530 * _2525;
    float _2533 = _2530 * _2526;
    float _2534 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_2223].xyz));
    float _4626 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2537 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
    float _2538 = dot(vec3(_691, _692, _693), vec3(_2531, _2532, _2533));
    float _4637 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2541 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
    float _2542 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_2531, _2532, _2533));
    float _4648 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2546 = _2523 * _2523;
    float _2550 = ((_2541 * _2541) * (_2546 + (-1.0))) + 1.0;
    float _2559 = (exp2(log2(1.0 - (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2560 = 1.0 - _2523;
    float _2570 = (0.5 / (((_2459 * ((_2537 * _2560) + _2523)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2560) + _2523) * _2537))) * _2537;
    float _4659 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2572 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2546 / ((_2550 * _2550) * 3.141590118408203125));
    float _2582 = (((_2559 * cbLight._m0[_2511].x) * _2572) * _2206) + ((((cbLight._m0[_2430].x * _2172) * _2483) * _2497) * _2219);
    float _2583 = (((_2559 * cbLight._m0[_2511].y) * _2572) * _2206) + ((((cbLight._m0[_2430].y * _2174) * _2483) * _2497) * _2219);
    float _2584 = (((_2559 * cbLight._m0[_2511].z) * _2572) * _2206) + ((((cbLight._m0[_2430].z * _2176) * _2483) * _2497) * _2219);
    float _2640;
    float _2642;
    float _2644;
    if (_2259)
    {
        _2640 = _2582;
        _2642 = _2583;
        _2644 = _2584;
    }
    else
    {
        uint _2646 = _2183 + 2u;
        uint _2650 = _2183 + 10u;
        float _2664 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2646].w)) * _694) * 0.949999988079071044921875);
        float _2665 = _2664 * _2664;
        float _2666 = cbLight._m0[_2646].x + _771;
        float _2667 = cbLight._m0[_2646].y + _772;
        float _2668 = cbLight._m0[_2646].z + _773;
        float _2672 = inversesqrt(dot(vec3(_2666, _2667, _2668), vec3(_2666, _2667, _2668)));
        float _2673 = _2672 * _2666;
        float _2674 = _2672 * _2667;
        float _2675 = _2672 * _2668;
        float _2676 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_2646].xyz));
        float _4670 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2679 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2680 = dot(vec3(_691, _692, _693), vec3(_2673, _2674, _2675));
        float _4681 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2683 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2684 = dot(vec3(cbLight._m0[_2646].xyz), vec3(_2673, _2674, _2675));
        float _4692 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2688 = _2665 * _2665;
        float _2692 = ((_2683 * _2683) * (_2688 + (-1.0))) + 1.0;
        float _2701 = (exp2(log2(1.0 - (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2702 = 1.0 - _2665;
        float _2712 = (0.5 / (((_2459 * ((_2679 * _2702) + _2665)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2702) + _2665) * _2679))) * _2679;
        float _4703 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2714 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2688 / ((_2692 * _2692) * 3.141590118408203125));
        float _2715 = isnan(1.0) ? _2198 : (isnan(_2198) ? 1.0 : min(_2198, 1.0));
        _2640 = (((_2701 * cbLight._m0[_2650].x) * _2714) * _2715) + _2582;
        _2642 = (((_2701 * cbLight._m0[_2650].y) * _2714) * _2715) + _2583;
        _2644 = (((_2701 * cbLight._m0[_2650].z) * _2714) * _2715) + _2584;
    }
    float _2746;
    float _2748;
    float _2750;
    if (_2368)
    {
        _2746 = _2640;
        _2748 = _2642;
        _2750 = _2644;
    }
    else
    {
        uint _2757 = _2183 + 3u;
        uint _2761 = _2183 + 11u;
        float _2775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2757].w)) * _694) * 0.949999988079071044921875);
        float _2776 = _2775 * _2775;
        float _2777 = cbLight._m0[_2757].x + _771;
        float _2778 = cbLight._m0[_2757].y + _772;
        float _2779 = cbLight._m0[_2757].z + _773;
        float _2783 = inversesqrt(dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779)));
        float _2784 = _2783 * _2777;
        float _2785 = _2783 * _2778;
        float _2786 = _2783 * _2779;
        float _2787 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_2757].xyz));
        float _4719 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2790 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
        float _2791 = dot(vec3(_691, _692, _693), vec3(_2784, _2785, _2786));
        float _4730 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2794 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
        float _2795 = dot(vec3(cbLight._m0[_2757].xyz), vec3(_2784, _2785, _2786));
        float _4741 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2799 = _2776 * _2776;
        float _2803 = ((_2794 * _2794) * (_2799 + (-1.0))) + 1.0;
        float _2812 = (exp2(log2(1.0 - (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2813 = 1.0 - _2776;
        float _2823 = (0.5 / (((_2459 * ((_2790 * _2813) + _2776)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2813) + _2776) * _2790))) * _2790;
        float _4752 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2825 = (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0))) * (_2799 / ((_2803 * _2803) * 3.141590118408203125));
        float _2826 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
        _2746 = (((_2812 * cbLight._m0[_2761].x) * _2825) * _2826) + _2640;
        _2748 = (((_2812 * cbLight._m0[_2761].y) * _2825) * _2826) + _2642;
        _2750 = (((_2812 * cbLight._m0[_2761].z) * _2825) * _2826) + _2644;
    }
    float _2892;
    float _2894;
    float _2896;
    float _2898;
    float _2900;
    float _2902;
    if (_2181.y == 0u)
    {
        uvec4 _2847 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2848 = _2847.x;
        uint _2859 = uint((float(_2847.y) * floor(float(uint(cbSceneParam._m0[85u].y * _792) / _2848))) + floor(float(uint(cbSceneParam._m0[85u].x * _791) / _2848)));
        float _2869 = (log2(_1959 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2870 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        uint _2873 = uint(isnan(14.0) ? _2870 : (isnan(_2870) ? 14.0 : min(_2870, 14.0)));
        uvec4 _2878 = texelFetch(g_lightClusterGridBuffer, int(((_2873 << 2u) + (_2859 << 6u)) >> 2u));
        uint _2879 = _2878.x;
        uint _2880 = _2847.z;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        if (((((1u << ((_2880 >> 4u) & 15u)) + 4294967295u) & _2879) == 0u) || ((_2880 & 240u) == 0u))
        {
            _2959 = 0.0;
            _2961 = 0.0;
            _2963 = 0.0;
            _2965 = 0.0;
            _2967 = 0.0;
            _2969 = 0.0;
        }
        else
        {
            float _2960;
            float _2962;
            float _2964;
            float _2966;
            float _2968;
            float _2970;
            float _3112 = 0.0;
            float _3113 = 0.0;
            float _3114 = 0.0;
            float _3115 = 0.0;
            float _3116 = 0.0;
            float _3117 = 0.0;
            uint _3118 = 0u;
            uint _3127;
            bool _3128;
            for (;;)
            {
                _3127 = texelFetch(g_lightClassification, int((((_2873 << 5u) + (_2859 << 9u)) + (_3118 << 2u)) >> 2u)).x;
                _3128 = _3127 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3128)
                {
                    frontier_phi_71_pred = _3117;
                    frontier_phi_71_pred_1 = _3116;
                    frontier_phi_71_pred_2 = _3115;
                    frontier_phi_71_pred_3 = _3114;
                    frontier_phi_71_pred_4 = _3113;
                    frontier_phi_71_pred_5 = _3112;
                }
                else
                {
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    uint _3263;
                    _3257 = _3112;
                    _3258 = _3113;
                    _3259 = _3114;
                    _3260 = _3115;
                    _3261 = _3116;
                    _3262 = _3117;
                    _3263 = _3127;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    for (;;)
                    {
                        uint _3267 = uint(findLSB(_3263)) + (_3118 << 5u);
                        uint _3264 = (_3263 + 4294967295u) & _3263;
                        uint _3269 = _3267 * 48u;
                        vec4 _3283 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3269)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 3u)).x));
                        uint _3289 = (_3267 * 48u) + 4u;
                        vec4 _3302 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3289)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3289 + 3u)).x));
                        uint _3308 = (_3267 * 48u) + 8u;
                        vec3 _3319 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3308)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3308 + 2u)).x));
                        float _3323 = _3283.x - _1957;
                        float _3324 = _3283.y - _1958;
                        float _3325 = _3283.z - _1959;
                        float _3326 = dot(vec3(_3323, _3324, _3325), vec3(_3323, _3324, _3325));
                        float _3329 = inversesqrt(_3326);
                        float _3330 = _3329 * _3323;
                        float _3331 = _3329 * _3324;
                        float _3332 = _3329 * _3325;
                        float _3333 = dot(vec3(_810, _813, _816), vec3(_3330, _3331, _3332));
                        float _3338 = 1.0 - (_3326 * _3283.w);
                        float _4778 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3339 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                        float _3340 = sqrt(_3326) * _3302.w;
                        float _3343 = 1.39999997615814208984375 / (_3340 + 1.39999997615814208984375);
                        float _3344 = _3343 * _3343;
                        float _3347 = ((1.0 - _3344) * _3333) + _3344;
                        float _3350 = _3340 * _3340;
                        float _3354 = ((isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0))) * _3339) / ((_3350 * 0.699999988079071044921875) + 1.0);
                        float _3358 = (-0.0) - _1957;
                        float _3359 = (-0.0) - _1958;
                        float _3360 = (-0.0) - _1959;
                        float _3364 = inversesqrt(dot(vec3(_3358, _3359, _3360), vec3(_3358, _3359, _3360)));
                        float _3365 = _3364 * _3358;
                        float _3366 = _3364 * _3359;
                        float _3367 = _3364 * _3360;
                        float _3374 = exp2(log2(1.0 / ((_3350 * 3.5) + 5.0)) * 0.25);
                        float _3375 = 1.0 - _870;
                        float _3382 = sqrt(1.0 - ((1.0 - (_3375 * _3375)) * (1.0 - (_3374 * _3374))));
                        float _3383 = _3382 * _3382;
                        float _3384 = _3383 * _3383;
                        float _3385 = _3365 + _3330;
                        float _3386 = _3366 + _3331;
                        float _3387 = _3367 + _3332;
                        float _3391 = inversesqrt(dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387)));
                        float _3395 = dot(vec3(_810, _813, _816), vec3(_3365, _3366, _3367));
                        float _4794 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3398 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3399 = dot(vec3(_810, _813, _816), vec3(_3391 * _3385, _3391 * _3386, _3391 * _3387));
                        float _4805 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3402 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                        float _3406 = ((_3402 * _3402) * (_3384 + (-1.0))) + 1.0;
                        float _3407 = _3343 * _3383;
                        float _3408 = _3407 * _3407;
                        float _3411 = ((1.0 - _3408) * _3333) + _3408;
                        float _4816 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3412 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                        float _3413 = 1.0 - _3383;
                        float _3423 = (0.5 / (((_3412 * ((_3398 * _3413) + _3383)) + 9.9999999392252902907785028219223e-09) + (((_3412 * _3413) + _3383) * _3398))) * _3412;
                        float _4827 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                        float _3434 = (((_3384 * 3.1415927410125732421875) * (isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0)))) / ((_3406 * _3406) * ((_3350 * 2.1991131305694580078125) + 3.141590118408203125))) * _3339;
                        _3187 = (_3354 * _3302.x) + _3260;
                        _3188 = (_3354 * _3302.y) + _3261;
                        _3189 = (_3354 * _3302.z) + _3262;
                        _3184 = (_3434 * _3319.x) + _3257;
                        _3185 = (_3434 * _3319.y) + _3258;
                        _3186 = (_3434 * _3319.z) + _3259;
                        if (_3264 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3257 = _3184;
                            _3258 = _3185;
                            _3259 = _3186;
                            _3260 = _3187;
                            _3261 = _3188;
                            _3262 = _3189;
                            _3263 = _3264;
                        }
                    }
                    frontier_phi_71_pred = _3189;
                    frontier_phi_71_pred_1 = _3188;
                    frontier_phi_71_pred_2 = _3187;
                    frontier_phi_71_pred_3 = _3186;
                    frontier_phi_71_pred_4 = _3185;
                    frontier_phi_71_pred_5 = _3184;
                }
                _2970 = frontier_phi_71_pred;
                _2968 = frontier_phi_71_pred_1;
                _2966 = frontier_phi_71_pred_2;
                _2964 = frontier_phi_71_pred_3;
                _2962 = frontier_phi_71_pred_4;
                _2960 = frontier_phi_71_pred_5;
                uint _3119 = _3118 + 1u;
                if (_3119 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3112 = _2960;
                    _3113 = _2962;
                    _3114 = _2964;
                    _3115 = _2966;
                    _3116 = _2968;
                    _3117 = _2970;
                    _3118 = _3119;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2959 = _2960;
            _2961 = _2962;
            _2963 = _2964;
            _2965 = _2966;
            _2967 = _2968;
            _2969 = _2970;
        }
        uvec4 _2973 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2974 = _2973.z;
        uint _2976 = (_2974 >> 8u) & 15u;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        float _3090;
        if (((4294967295u << _2976) & _2879) == 0u)
        {
            _3080 = _2959;
            _3082 = _2961;
            _3084 = _2963;
            _3086 = _2965;
            _3088 = _2967;
            _3090 = _2969;
        }
        else
        {
            float _3105 = inversesqrt(dot(vec3(_1957, _1958, _1959), vec3(_1957, _1958, _1959)));
            float _3106 = _3105 * _1957;
            float _3107 = _3105 * _1958;
            float _3108 = _3105 * _1959;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2976 < ((_2974 >> 12u) & 15u))
            {
                float _3081;
                float _3083;
                float _3085;
                float _3087;
                float _3089;
                float _3091;
                float _3240 = _2959;
                float _3241 = _2961;
                float _3242 = _2963;
                float _3243 = _2965;
                float _3244 = _2967;
                float _3245 = _2969;
                uint _3246 = _2976;
                uint _3255;
                bool _3256;
                for (;;)
                {
                    _3255 = texelFetch(g_lightClassification, int((((_2873 << 5u) + (_2859 << 9u)) + (_3246 << 2u)) >> 2u)).x;
                    _3256 = _3255 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3256)
                    {
                        frontier_phi_82_pred = _3245;
                        frontier_phi_82_pred_1 = _3244;
                        frontier_phi_82_pred_2 = _3243;
                        frontier_phi_82_pred_3 = _3242;
                        frontier_phi_82_pred_4 = _3241;
                        frontier_phi_82_pred_5 = _3240;
                    }
                    else
                    {
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3461 = _3240;
                        float _3462 = _3241;
                        float _3463 = _3242;
                        float _3464 = _3243;
                        float _3465 = _3244;
                        float _3466 = _3245;
                        uint _3467 = _3255;
                        uint _3468;
                        vec4 _3493;
                        float _3494;
                        vec4 _3509;
                        vec3 _3521;
                        vec4 _3536;
                        vec4 _3551;
                        float _3597;
                        bool _3598;
                        for (;;)
                        {
                            uint _3478 = ((_3246 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3467));
                            _3468 = (_3467 + 4294967295u) & _3467;
                            uint _3480 = _3478 * 40u;
                            _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            _3494 = _3493.w;
                            uint _3496 = (_3478 * 40u) + 4u;
                            _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            uint _3511 = (_3478 * 40u) + 8u;
                            _3521 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x));
                            uint _3523 = (_3478 * 40u) + 16u;
                            _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            uint _3538 = (_3478 * 40u) + 20u;
                            _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3553 = (_3478 * 40u) + 24u;
                            vec4 _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            uint _3572 = (_3478 * 40u) + 28u;
                            vec4 _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            _3597 = fma(_1959, _3585.z, fma(_1958, _3585.y, _3585.x * _1957)) + _3585.w;
                            _3598 = !((fma(_1959, _3566.z, fma(_1958, _3566.y, _3566.x * _1957)) + _3566.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3598)
                            {
                                float _3625 = _3493.x - _1957;
                                float _3626 = _3493.y - _1958;
                                float _3627 = _3493.z - _1959;
                                float _3628 = dot(vec3(_3625, _3626, _3627), vec3(_3625, _3626, _3627));
                                float _3631 = inversesqrt(_3628);
                                float _3632 = _3631 * _3625;
                                float _3633 = _3631 * _3626;
                                float _3634 = _3631 * _3627;
                                float _3638 = 1.0 - (_3628 / (_3494 * _3494));
                                float _4838 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3639 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3643 = sqrt(_3628) * _3509.w;
                                float _3645 = 1.39999997615814208984375 / (_3643 + 1.39999997615814208984375);
                                float _3646 = _3645 * _3645;
                                float _3649 = ((1.0 - _3646) * dot(vec3(_3632, _3633, _3634), vec3(_810, _813, _816))) + _3646;
                                float _3652 = _3643 * _3643;
                                float _3656 = (fma(_1959, _3536.z, fma(_1958, _3536.y, _3536.x * _1957)) + _3536.w) / _3597;
                                float _3657 = (fma(_1959, _3551.z, fma(_1958, _3551.y, _3551.x * _1957)) + _3551.w) / _3597;
                                float _3661 = 1.0 - dot(vec2(_3656, _3657), vec2(_3656, _3657));
                                float _4854 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3662 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3663 = _3662 * (((isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0))) * _3639) / ((_3652 * 0.699999988079071044921875) + 1.0));
                                float _3675 = exp2(log2(1.0 / ((_3652 * 3.5) + 5.0)) * 0.25);
                                float _3676 = 1.0 - _870;
                                float _3683 = sqrt(1.0 - ((1.0 - (_3676 * _3676)) * (1.0 - (_3675 * _3675))));
                                float _3684 = _3683 * _3683;
                                float _3685 = _3684 * _3684;
                                float _3686 = _3632 - _3106;
                                float _3687 = _3633 - _3107;
                                float _3688 = _3634 - _3108;
                                float _3692 = inversesqrt(dot(vec3(_3686, _3687, _3688), vec3(_3686, _3687, _3688)));
                                float _3696 = dot(vec3(_810, _813, _816), vec3((-0.0) - _3106, (-0.0) - _3107, (-0.0) - _3108));
                                float _4865 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3699 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3700 = dot(vec3(_810, _813, _816), vec3(_3692 * _3686, _3692 * _3687, _3692 * _3688));
                                float _4876 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3703 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3707 = ((_3703 * _3703) * (_3685 + (-1.0))) + 1.0;
                                float _3708 = _3645 * _3684;
                                float _3709 = _3708 * _3708;
                                float _3715 = ((1.0 - _3709) * dot(vec3(_810, _813, _816), vec3(_3632, _3633, _3634))) + _3709;
                                float _4887 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3716 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                                float _3717 = 1.0 - _3684;
                                float _3727 = (0.5 / (((_3716 * ((_3699 * _3717) + _3684)) + 9.9999999392252902907785028219223e-09) + (((_3716 * _3717) + _3684) * _3699))) * _3716;
                                float _4898 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                                float _3737 = (_3662 * _3639) * (((_3685 * 3.1415927410125732421875) * (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0)))) / ((_3707 * _3707) * ((_3652 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3663 * _3509.z;
                                frontier_phi_88_pred_1 = _3663 * _3509.y;
                                frontier_phi_88_pred_2 = _3663 * _3509.x;
                                frontier_phi_88_pred_3 = _3737 * _3521.z;
                                frontier_phi_88_pred_4 = _3737 * _3521.y;
                                frontier_phi_88_pred_5 = _3737 * _3521.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3746 = frontier_phi_88_pred;
                            _3745 = frontier_phi_88_pred_1;
                            _3744 = frontier_phi_88_pred_2;
                            _3743 = frontier_phi_88_pred_3;
                            _3742 = frontier_phi_88_pred_4;
                            _3741 = frontier_phi_88_pred_5;
                            _3451 = _3744 + _3464;
                            _3452 = _3745 + _3465;
                            _3453 = _3746 + _3466;
                            _3448 = _3741 + _3461;
                            _3449 = _3742 + _3462;
                            _3450 = _3743 + _3463;
                            if (_3468 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3468;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3453;
                        frontier_phi_82_pred_1 = _3452;
                        frontier_phi_82_pred_2 = _3451;
                        frontier_phi_82_pred_3 = _3450;
                        frontier_phi_82_pred_4 = _3449;
                        frontier_phi_82_pred_5 = _3448;
                    }
                    _3091 = frontier_phi_82_pred;
                    _3089 = frontier_phi_82_pred_1;
                    _3087 = frontier_phi_82_pred_2;
                    _3085 = frontier_phi_82_pred_3;
                    _3083 = frontier_phi_82_pred_4;
                    _3081 = frontier_phi_82_pred_5;
                    uint _3247 = _3246 + 1u;
                    if (_3247 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3240 = _3081;
                        _3241 = _3083;
                        _3242 = _3085;
                        _3243 = _3087;
                        _3244 = _3089;
                        _3245 = _3091;
                        _3246 = _3247;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3087;
                frontier_phi_63_64_ladder_1 = _3091;
                frontier_phi_63_64_ladder_2 = _3089;
                frontier_phi_63_64_ladder_3 = _3085;
                frontier_phi_63_64_ladder_4 = _3083;
                frontier_phi_63_64_ladder_5 = _3081;
            }
            else
            {
                frontier_phi_63_64_ladder = _2965;
                frontier_phi_63_64_ladder_1 = _2969;
                frontier_phi_63_64_ladder_2 = _2967;
                frontier_phi_63_64_ladder_3 = _2963;
                frontier_phi_63_64_ladder_4 = _2961;
                frontier_phi_63_64_ladder_5 = _2959;
            }
            _3080 = frontier_phi_63_64_ladder_5;
            _3082 = frontier_phi_63_64_ladder_4;
            _3084 = frontier_phi_63_64_ladder_3;
            _3086 = frontier_phi_63_64_ladder;
            _3088 = frontier_phi_63_64_ladder_2;
            _3090 = frontier_phi_63_64_ladder_1;
        }
        float _3095 = isnan(1.0) ? _854 : (isnan(_854) ? 1.0 : min(_854, 1.0));
        _2892 = (_3095 * _3086) + _2423;
        _2894 = (_3095 * _3088) + _2425;
        _2896 = (_3095 * _3090) + _2427;
        _2898 = ((_3080 * 0.039999999105930328369140625) * _3095) + _2746;
        _2900 = ((_3082 * 0.039999999105930328369140625) * _3095) + _2748;
        _2902 = ((_3084 * 0.039999999105930328369140625) * _3095) + _2750;
    }
    else
    {
        _2892 = _2423;
        _2894 = _2425;
        _2896 = _2427;
        _2898 = _2746;
        _2900 = _2748;
        _2902 = _2750;
    }
    float _4914 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4925 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4936 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _2919 = ((isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (_2892 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _854))) + ((_2898 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1691)) * cbPerFrame._m0[3u].x);
    float _2920 = ((isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0))) * (_2894 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _854))) + ((_2900 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1691)) * cbPerFrame._m0[3u].x);
    float _2921 = ((isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_2896 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _854))) + ((_2902 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1691)) * cbPerFrame._m0[3u].x);
    uint _2922 = _266 + 6u;
    float _2930 = _791 / cbSceneParam._m0[86u].x;
    float _2931 = _792 / cbSceneParam._m0[86u].y;
    vec4 _2945 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2930, _2931, (log2((isnan(cbSceneParam._m0[77u].w) ? _712 : (isnan(_712) ? cbSceneParam._m0[77u].w : min(_712, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2947 = _2945.x;
    float _2948 = _2945.y;
    float _2949 = _2945.z;
    float _2950 = _2945.w;
    float _3022;
    float _3024;
    float _3026;
    float _3028;
    if (_712 > cbSceneParam._m0[78u].w)
    {
        float _2984 = isnan(_712) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _712 : min(cbSceneParam._m0[80u].w, _712));
        float _2985 = _2984 / _712;
        float _2996 = _2985 * _764;
        float _2997 = _765 * _2985;
        float _2998 = (-0.0) - _2997;
        float _3000 = _2985 * _766;
        float _3002 = (cbSceneParam._m0[77u].w * _2998) / _2984;
        float _3003 = _3002 + cbSceneParam._m0[79u].w;
        float _3004 = cbSceneParam._m0[79u].w - _2997;
        float _3010 = sqrt(((_2996 * _2996) + (_2997 * _2997)) + (_3000 * _3000));
        float _3013 = (1.0 - (cbSceneParam._m0[77u].w / _2984)) * _3010;
        float _3018 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3020 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3197;
        if (abs((_2998 - _3002) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3197 = ((((_3003 > 0.0) ? exp2(_3018 * _3003) : (2.0 - exp2(_3020 * _3003))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3013;
        }
        else
        {
            float _3141 = 1.0 / cbSceneParam._m0[80u].x;
            float _3142 = isnan(_3004) ? _3003 : (isnan(_3003) ? _3004 : max(_3003, _3004));
            float _3143 = isnan(_3004) ? _3003 : (isnan(_3003) ? _3004 : min(_3003, _3004));
            float _3152 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : min(_3142, 0.0));
            float _3153 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : min(_3143, 0.0));
            _3197 = ((abs(_3010 / _2998) * cbSceneParam._m0[80u].y) * ((((_3152 - _3153) * 2.0) - ((exp2(_3018 * (isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0)))) - exp2(_3018 * (isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0))))) * _3141)) - ((exp2(_3020 * _3152) - exp2(_3020 * _3153)) * _3141))) + (_3013 * cbSceneParam._m0[80u].z);
        }
        vec4 _3199 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2930, _2931, 1.0), 0.0);
        float _3208 = exp2((_3197 * (-1.44269502162933349609375)) * (1.0 - _3199.w));
        float _3209 = log2(_3208);
        float _3225 = log2(_2950);
        _3022 = (exp2(_3225 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3209 * cbSceneParam._m0[78u].x)) * _3199.x) / cbSceneParam._m0[78u].x)) + _2947;
        _3024 = (exp2(_3225 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3209 * cbSceneParam._m0[78u].y)) * _3199.y) / cbSceneParam._m0[78u].y)) + _2948;
        _3026 = (exp2(_3225 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3209 * cbSceneParam._m0[78u].z)) * _3199.z) / cbSceneParam._m0[78u].z)) + _2949;
        _3028 = _3208 * _2950;
    }
    else
    {
        _3022 = _2947;
        _3024 = _2948;
        _3026 = _2949;
        _3028 = _2950;
    }
    bool _3235;
    vec4 _3038;
    vec4 _3060;
    float _3062;
    float _3066;
    float _3067;
    float _3068;
    float _3069;
    bool _3079;
    for (;;)
    {
        _3038 = cbMatDynParam._m0[0u];
        float _3040 = roundEven(_3038.y);
        bool _3041 = _3040 == 3.0;
        float _3042 = log2(_3028);
        float _3049 = exp2(_3042 * cbSceneParam._m0[78u].x) * _2919;
        float _3050 = exp2(_3042 * cbSceneParam._m0[78u].y) * _2920;
        float _3051 = exp2(_3042 * cbSceneParam._m0[78u].z) * _2921;
        float _3058 = _780 + (-0.5);
        _3060 = cbMtdParam._m0[1u];
        _3062 = _3060.y * _3058;
        float _3065 = (_3040 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3066 = _3065 * (_3041 ? _3049 : (_3049 + (cbSceneParam._m0[72u].w * _3022)));
        _3067 = _3065 * (_3041 ? _3050 : (_3050 + (cbSceneParam._m0[72u].w * _3024)));
        _3068 = _3065 * (_3041 ? _3051 : (_3051 + (cbSceneParam._m0[72u].w * _3026)));
        _3069 = _3058 * 0.999000012874603271484375;
        _3079 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3079)
        {
            if ((cbInstanceData._m0[_266 + 7u].x + _3069) < 0.5)
            {
                _3235 = true;
                break;
            }
        }
        uint _3176 = _829 + uint(_3038.w);
        if ((cbInstanceData._m0[_3176].w < 1.0) && ((cbInstanceData._m0[_3176].w + _3069) < 0.5))
        {
            _3235 = true;
            break;
        }
        if ((_3062 + 1.0) < _3060.x)
        {
            _3235 = true;
            break;
        }
        _3235 = false;
        break;
    }
    float _3439;
    if (_3235)
    {
        discard_state = true;
        _3439 = 0.0;
    }
    else
    {
        _3439 = cbInstanceData._m0[_2922].w;
    }
    SV_Target.x = _3066;
    SV_Target.y = _3067;
    SV_Target.z = _3068;
    SV_Target.w = _3439;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2922].w;
    discard_exit();
}


