#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _998;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _233 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _233 + 1u;
    uint _242 = _233 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_233].x * cbInstanceData._m0[_233].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _272 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _278 = _272.x * cbMtdParam._m0[9u].x;
    float _279 = _272.y * cbMtdParam._m0[9u].y;
    float _280 = _272.z * cbMtdParam._m0[9u].z;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((_252 * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, (_253 * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _319 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _323 = _319.z;
    float _327 = (_319.x * 2.0) + (-1.0);
    float _328 = (_319.y * 2.0) + (-1.0);
    float _329 = dot(vec2(_327, _328), vec2(_327, _328));
    float _3309 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _335 = sqrt(1.0 - (isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0))));
    float _340 = _327 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_293.x * 2.0) + (-1.0)));
    float _341 = _328 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_293.y * 2.0) + (-1.0)));
    vec4 _354 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _252) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _253) + cbTextureTilingScale._m0[19u].w));
    float _356 = _354.x;
    float _357 = 1.0 - _356;
    float _390 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_356 - _357) * cbMtdParam._m0[24u].w) + _357) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3320 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
    float _399 = ((((cbMtdParam._m0[10u].x - _278) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _391) + _278;
    float _400 = ((((cbMtdParam._m0[10u].y - _279) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _391) + _279;
    float _401 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _280)) * _391) + _280;
    float _406 = (((_293.z - _323) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _323;
    float _410 = ((cbMtdParam._m0[23u].y - _406) * _391) + _406;
    vec4 _432 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _252) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _253) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _438 = (_432.x * 2.0) + (-1.0);
    float _439 = (_432.y * 2.0) + (-1.0);
    float _440 = dot(vec2(_438, _439), vec2(_438, _439));
    float _3331 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _456 = (_391 * (((cbMtdParam._m0[22u].z * _340) - _340) + _438)) + _340;
    float _457 = (_391 * (((cbMtdParam._m0[22u].z * _341) - _341) + _439)) + _341;
    float _458 = (_391 * (sqrt(1.0 - (isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0)))) - _335)) + _335;
    float _460 = cbMtdParam._m0[22u].x + _319.w;
    float _463 = fma(_458, _220 * NORMAL.x, fma(_457, _227 * TANGENT.x, (_213 * _205) * _456));
    float _466 = fma(_458, _220 * NORMAL.y, fma(_457, _227 * TANGENT.y, (_213 * _206) * _456));
    float _469 = fma(_458, _220 * NORMAL.z, fma(_457, _227 * TANGENT.z, (_213 * _207) * _456));
    float _473 = inversesqrt(dot(vec3(_463, _466, _469), vec3(_463, _466, _469)));
    float _474 = _473 * _463;
    float _475 = _473 * _466;
    float _476 = _473 * _469;
    float _3342 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _477 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    float _3353 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _3364 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _3375 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _3386 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _495 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _546 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _536);
    float _547 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _536);
    float _548 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _536);
    float _552 = inversesqrt(dot(vec3(_546, _547, _548), vec3(_546, _547, _548)));
    float _553 = _546 * _552;
    float _554 = _547 * _552;
    float _555 = _548 * _552;
    float _561 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _562 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _583 = fma(_476, cbSceneParam._m0[5u].z, fma(_475, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _474));
    float _586 = fma(_476, cbSceneParam._m0[6u].z, fma(_475, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _474));
    float _589 = fma(_476, cbSceneParam._m0[7u].z, fma(_475, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _474));
    uint _603 = (_233 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _609 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) * cbInstanceData._m0[_603].x;
    float _610 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0)))) * cbInstanceData._m0[_603].y;
    float _611 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0)))) * cbInstanceData._m0[_603].z;
    float _3397 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _3408 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _3419 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    vec4 _623 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _561, cbSceneParam._m0[86u].y * _562));
    float _627 = ((isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0))) * TEXCOORD_5.w) * _623.x;
    float _628 = dot(vec3(_474, _475, _476), vec3(_553, _554, _555));
    float _631 = _628 * 2.0;
    float _635 = (_631 * _474) - _553;
    float _636 = (_631 * _475) - _554;
    float _637 = (_631 * _476) - _555;
    float _641 = abs(dot(vec3(_553, _554, _555), vec3(_474, _475, _476)));
    float _3430 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _643 = sqrt(_477);
    float _656 = exp2((_643 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_643 * 3.0));
    float _688 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _997;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _722 = fma(_696, cbModelParam._m0[26u].z, fma(_692, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _688));
        float _726 = fma(_696, cbModelParam._m0[27u].z, fma(_692, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _688));
        float _730 = fma(_696, cbModelParam._m0[28u].z, fma(_692, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _688));
        float _755 = _688 + _474;
        float _756 = _692 + _475;
        float _757 = _696 + _476;
        float _767 = fma(_757, cbModelParam._m0[26u].z, fma(_756, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _755)) - _722;
        float _768 = fma(_757, cbModelParam._m0[27u].z, fma(_756, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _755)) - _726;
        float _769 = fma(_757, cbModelParam._m0[28u].z, fma(_756, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _755)) - _730;
        float _773 = inversesqrt(dot(vec3(_767, _768, _769), vec3(_767, _768, _769)));
        float _786 = ((_773 * _767) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_722 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _787 = ((_773 * _768) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_726 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _788 = ((_773 * _769) / cbModelParam._m0[34u].z) + ((((((_730 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_786, _787, _788), 0.0);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_786, _787, _788), 0.0);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_786, _787, _788), 0.0);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_786, _787, _788), 0.0);
        float _825 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _826 = _825 * (_791.x + (-0.5));
        float _827 = _825 * (_791.y + (-0.5));
        float _828 = _825 * (_791.z + (-0.5));
        float _835 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _836 = _835 * (_798.x + (-0.5));
        float _837 = _835 * (_798.y + (-0.5));
        float _838 = _835 * (_798.z + (-0.5));
        float _845 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_805.x + (-0.5));
        float _847 = _845 * (_805.y + (-0.5));
        float _848 = _845 * (_805.z + (-0.5));
        float _855 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_812.x + (-0.5));
        float _857 = _855 * (_812.y + (-0.5));
        float _858 = _855 * (_812.z + (-0.5));
        float _859 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _860 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _861 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _862 = _826 * 0.5;
        float _863 = _836 * 0.5;
        float _864 = _846 * 0.5;
        float _865 = dot(vec3(_862, _863, _864), vec3(_862, _863, _864));
        float _870 = (_865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_865);
        float _879 = (dot(vec3(_474, _475, _476), vec3(_870 * _862, _870 * _863, _870 * _864)) + 1.0) * 0.5;
        float _3456 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _889 = sqrt(((_863 * _863) + (_862 * _862)) + (_864 * _864)) / (_859 + 9.9999997473787516355514526367188e-06);
        float _3467 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _891 = _890 * 2.0;
        float _895 = (1.0 - _890) / (_890 + 1.0);
        float _3478 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _905 = ((((1.0 - _896) * (_891 + 2.0)) * exp2(log2(isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * (_891 + 1.0))) + _896) * _859;
        float _906 = _827 * 0.5;
        float _907 = _837 * 0.5;
        float _908 = _847 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _922 = (dot(vec3(_474, _475, _476), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3489 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _931 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_860 + 9.9999997473787516355514526367188e-06);
        float _3500 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3511 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_933 + 1.0))) + _938) * _860;
        float _948 = _828 * 0.5;
        float _949 = _838 * 0.5;
        float _950 = _848 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _964 = (dot(vec3(_474, _475, _476), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _973 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_861 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3544 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_975 + 1.0))) + _980) * _861;
        _997 = _828;
        _999 = _827;
        _1000 = _826;
        _1001 = _838;
        _1002 = _837;
        _1003 = _836;
        _1004 = _848;
        _1005 = _847;
        _1006 = _846;
        _1007 = _861;
        _1008 = _860;
        _1009 = _859;
        _1010 = cbModelParam._m0[36u].z * (isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0)));
        _1011 = cbModelParam._m0[36u].z * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
        _1012 = cbModelParam._m0[36u].z * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
    }
    else
    {
        _997 = _998;
        _999 = _998;
        _1000 = _998;
        _1001 = _998;
        _1002 = _998;
        _1003 = _998;
        _1004 = _998;
        _1005 = _998;
        _1006 = _998;
        _1007 = _998;
        _1008 = _998;
        _1009 = _998;
        _1010 = 0.0;
        _1011 = 0.0;
        _1012 = 0.0;
    }
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1037 = fma(_696, cbModelParam._m0[30u].z, fma(_692, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _688));
        float _1041 = fma(_696, cbModelParam._m0[31u].z, fma(_692, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _688));
        float _1045 = fma(_696, cbModelParam._m0[32u].z, fma(_692, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _688));
        float _1068 = _688 + _474;
        float _1069 = _692 + _475;
        float _1070 = _696 + _476;
        float _1080 = fma(_1070, cbModelParam._m0[30u].z, fma(_1069, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1068)) - _1037;
        float _1081 = fma(_1070, cbModelParam._m0[31u].z, fma(_1069, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1068)) - _1041;
        float _1082 = fma(_1070, cbModelParam._m0[32u].z, fma(_1069, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1068)) - _1045;
        float _1086 = inversesqrt(dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082)));
        float _1099 = ((_1086 * _1080) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1037 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1100 = ((_1086 * _1081) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1041 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1086 * _1082) / cbModelParam._m0[35u].z) + ((((((_1045 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        float _1136 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1103.x + (-0.5));
        float _1138 = _1136 * (_1103.y + (-0.5));
        float _1139 = _1136 * (_1103.z + (-0.5));
        float _1146 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1110.x + (-0.5));
        float _1148 = _1146 * (_1110.y + (-0.5));
        float _1149 = _1146 * (_1110.z + (-0.5));
        float _1156 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1117.x + (-0.5));
        float _1158 = _1156 * (_1117.y + (-0.5));
        float _1159 = _1156 * (_1117.z + (-0.5));
        float _1166 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1124.x + (-0.5));
        float _1168 = _1166 * (_1124.y + (-0.5));
        float _1169 = _1166 * (_1124.z + (-0.5));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = _1137 * 0.5;
        float _1174 = _1147 * 0.5;
        float _1175 = _1157 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_474, _475, _476), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3585 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3596 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3607 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (_1200 + 1.0))) + _1205) * _1170;
        float _1215 = _1138 * 0.5;
        float _1216 = _1148 * 0.5;
        float _1217 = _1158 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_474, _475, _476), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3618 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3629 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _3640 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_1242 + 1.0))) + _1247) * _1171;
        float _1257 = _1139 * 0.5;
        float _1258 = _1149 * 0.5;
        float _1259 = _1159 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_474, _475, _476), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3673 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_1284 + 1.0))) + _1289) * _1172;
        _1306 = _1139;
        _1307 = _1138;
        _1308 = _1137;
        _1309 = _1149;
        _1310 = _1148;
        _1311 = _1147;
        _1312 = _1159;
        _1313 = _1158;
        _1314 = _1157;
        _1315 = _1172;
        _1316 = _1171;
        _1317 = _1170;
        _1318 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
    }
    else
    {
        _1306 = _998;
        _1307 = _998;
        _1308 = _998;
        _1309 = _998;
        _1310 = _998;
        _1311 = _998;
        _1312 = _998;
        _1313 = _998;
        _1314 = _998;
        _1315 = _998;
        _1316 = _998;
        _1317 = _998;
        _1318 = 0.0;
        _1319 = 0.0;
        _1320 = 0.0;
    }
    float _1330 = (cbModelParam._m0[1u].x * (_1318 - _1010)) + _1010;
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1011)) + _1011;
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1012)) + _1012;
    float _1353 = fma(_1332, cbSceneParam._m0[89u].z, fma(_1331, cbSceneParam._m0[89u].y, _1330 * cbSceneParam._m0[89u].x));
    float _1356 = fma(_1332, cbSceneParam._m0[90u].z, fma(_1331, cbSceneParam._m0[90u].y, _1330 * cbSceneParam._m0[90u].x));
    float _1359 = fma(_1332, cbSceneParam._m0[91u].z, fma(_1331, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1330));
    float _1374 = _635 * 0.5;
    float _1375 = _636 * 0.5;
    float _1376 = _637 * 0.5;
    float _1377 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1380 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1383 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_1306, _1309, _1312, _1315));
    float _1417;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1390 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_997, _1001, _1004, _1007));
        float _1394 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_999, _1002, _1005, _1008));
        float _1398 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_1000, _1003, _1006, _1009));
        float _1405 = dot(vec4(cbModelParam._m0[39u]), vec4(_1374, _1375, _1376, 1.0));
        _1417 = dot(vec3(isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)), isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)), isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1405) ? 0.0 : (isnan(0.0) ? _1405 : max(0.0, _1405))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1417 = 1.0;
    }
    float _1428;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1419 = dot(vec4(cbModelParam._m0[40u]), vec4(_1374, _1375, _1376, 1.0));
        _1428 = dot(vec3(isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1419) ? 0.0 : (isnan(0.0) ? _1419 : max(0.0, _1419))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1428 = 1.0;
    }
    float _1432 = (_1428 * cbModelParam._m0[1u].x) + (_1417 * (1.0 - cbModelParam._m0[1u].x));
    float _1442 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _477);
    float _1443 = isnan(_1442) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1442 : min(cbModelParam._m0[25u].z, _1442));
    float _1525;
    float _1527;
    float _1529;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1492 = fma(_696, cbModelParam._m0[13u].z, fma(_692, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _688)) + cbModelParam._m0[13u].w;
        float _1496 = fma(_696, cbModelParam._m0[14u].z, fma(_692, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _688)) + cbModelParam._m0[14u].w;
        float _1500 = fma(_696, cbModelParam._m0[15u].z, fma(_692, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _688)) + cbModelParam._m0[15u].w;
        float _1503 = fma(_637, cbModelParam._m0[13u].z, fma(_636, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _635));
        float _1506 = fma(_637, cbModelParam._m0[14u].z, fma(_636, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _635));
        float _1509 = fma(_637, cbModelParam._m0[15u].z, fma(_636, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _635));
        float _1537;
        if (_1503 > 0.0)
        {
            _1537 = abs((1.0 - _1492) / _1503);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1492 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1537 = frontier_phi_14_12_ladder;
        }
        float _1741;
        if (_1506 > 0.0)
        {
            _1741 = abs((1.0 - _1496) / _1506);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1496 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1741 = frontier_phi_23_19_ladder;
        }
        float _1984;
        if (_1509 > 0.0)
        {
            _1984 = abs((1.0 - _1500) / _1509);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1500 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1984 = frontier_phi_35_30_ladder;
        }
        float _1986 = isnan(_1741) ? _1537 : (isnan(_1537) ? _1741 : min(_1537, _1741));
        float _1987 = isnan(_1984) ? _1986 : (isnan(_1986) ? _1984 : min(_1986, _1984));
        float _1991 = (_1987 * _1503) + _1492;
        float _1992 = (_1987 * _1506) + _1496;
        float _1993 = (_1987 * _1509) + _1500;
        float _1994 = _1987 * 9.9999997473787516355514526367188e-05;
        float _1996 = (-1.0) - _1994;
        float _1998 = _1994 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1993 > _1998) || ((_1993 < _1996) || ((_1992 > _1998) || ((_1992 < _1996) || ((_1991 < _1996) || (_1991 > _1998))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2117 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1993, cbModelParam._m0[9u].z, fma(_1992, cbModelParam._m0[9u].y, _1991 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1993, cbModelParam._m0[10u].z, fma(_1992, cbModelParam._m0[10u].y, _1991 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1993, cbModelParam._m0[11u].z, fma(_1992, cbModelParam._m0[11u].y, _1991 * cbModelParam._m0[11u].x))), _1443);
            frontier_phi_13_35_ladder = _2117.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2117.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2117.x * cbModelParam._m0[1u].y;
        }
        _1525 = frontier_phi_13_35_ladder_2;
        _1527 = frontier_phi_13_35_ladder_1;
        _1529 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1513 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_635, _636, _637), _1443);
        _1525 = _1513.x * cbModelParam._m0[1u].y;
        _1527 = _1513.y * cbModelParam._m0[1u].y;
        _1529 = _1513.z * cbModelParam._m0[1u].y;
    }
    float _1533 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _477);
    float _1534 = isnan(_1533) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1533 : min(cbModelParam._m0[25u].w, _1533));
    float _1625;
    float _1627;
    float _1629;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1589 = fma(_696, cbModelParam._m0[21u].z, fma(_692, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _688)) + cbModelParam._m0[21u].w;
        float _1593 = fma(_696, cbModelParam._m0[22u].z, fma(_692, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _688)) + cbModelParam._m0[22u].w;
        float _1597 = fma(_696, cbModelParam._m0[23u].z, fma(_692, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _688)) + cbModelParam._m0[23u].w;
        float _1600 = fma(_637, cbModelParam._m0[21u].z, fma(_636, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _635));
        float _1603 = fma(_637, cbModelParam._m0[22u].z, fma(_636, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _635));
        float _1606 = fma(_637, cbModelParam._m0[23u].z, fma(_636, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _635));
        float _1746;
        if (_1600 > 0.0)
        {
            _1746 = abs((1.0 - _1589) / _1600);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1589 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1746 = frontier_phi_25_21_ladder;
        }
        float _2011;
        if (_1603 > 0.0)
        {
            _2011 = abs((1.0 - _1593) / _1603);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1593 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2011 = frontier_phi_37_32_ladder;
        }
        float _2216;
        if (_1606 > 0.0)
        {
            _2216 = abs((1.0 - _1597) / _1606);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1597 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2216 = frontier_phi_46_43_ladder;
        }
        float _2218 = isnan(_2011) ? _1746 : (isnan(_1746) ? _2011 : min(_1746, _2011));
        float _2219 = isnan(_2216) ? _2218 : (isnan(_2218) ? _2216 : min(_2218, _2216));
        float _2223 = (_2219 * _1600) + _1589;
        float _2224 = (_2219 * _1603) + _1593;
        float _2225 = (_2219 * _1606) + _1597;
        float _2226 = _2219 * 9.9999997473787516355514526367188e-05;
        float _2227 = (-1.0) - _2226;
        float _2229 = _2226 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2225 > _2229) || ((_2225 < _2227) || ((_2224 > _2229) || ((_2224 < _2227) || ((_2223 < _2227) || (_2223 > _2229))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2424 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2225, cbModelParam._m0[17u].z, fma(_2224, cbModelParam._m0[17u].y, _2223 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2225, cbModelParam._m0[18u].z, fma(_2224, cbModelParam._m0[18u].y, _2223 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2225, cbModelParam._m0[19u].z, fma(_2224, cbModelParam._m0[19u].y, _2223 * cbModelParam._m0[19u].x))), _1534);
            frontier_phi_22_46_ladder = _2424.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2424.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2424.x * cbModelParam._m0[1u].z;
        }
        _1625 = frontier_phi_22_46_ladder_2;
        _1627 = frontier_phi_22_46_ladder_1;
        _1629 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1609 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_635, _636, _637), _1534);
        _1625 = _1609.x * cbModelParam._m0[1u].z;
        _1627 = _1609.y * cbModelParam._m0[1u].z;
        _1629 = _1609.z * cbModelParam._m0[1u].z;
    }
    float _1641 = ((((1.0 - _656) * ((_643 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_656 * _643)) * _627;
    float _1642 = _1641 * ((cbModelParam._m0[1u].w * (_1625 - _1525)) + _1525);
    float _1643 = _1641 * ((cbModelParam._m0[1u].w * (_1627 - _1527)) + _1527);
    float _1644 = _1641 * ((cbModelParam._m0[1u].w * (_1629 - _1529)) + _1529);
    float _1647 = fma(_1644, cbSceneParam._m0[89u].z, fma(_1643, cbSceneParam._m0[89u].y, _1642 * cbSceneParam._m0[89u].x));
    float _1650 = fma(_1644, cbSceneParam._m0[90u].z, fma(_1643, cbSceneParam._m0[90u].y, _1642 * cbSceneParam._m0[90u].x));
    float _1653 = fma(_1644, cbSceneParam._m0[91u].z, fma(_1643, cbSceneParam._m0[91u].y, _1642 * cbSceneParam._m0[91u].x));
    uvec4 _1663 = floatBitsToUint(cbInstanceData._m0[_233 + 5u]);
    uint _1665 = _1663.x * 14u;
    uint _1666 = _1665 + 13u;
    float _1673 = _627 + (-1.0);
    float _1678 = (cbLight._m0[_1666].x * _1673) + 1.0;
    float _1679 = (cbLight._m0[_1666].y * _1673) + 1.0;
    float _1680 = (cbLight._m0[_1666].z * _1673) + 1.0;
    float _1681 = (cbLight._m0[_1666].w * _1673) + 1.0;
    uint _1682 = _1665 + 5u;
    float _1688 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
    uint _1692 = _1665 + 4u;
    float _1699 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
    uint _1703 = _1665 | 1u;
    float _1714 = dot(vec3(cbLight._m0[_1665].xyz), vec3(_474, _475, _476));
    float _1717 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_474, _475, _476));
    float _3809 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _3820 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1722 = (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * 0.3183098733425140380859375;
    float _1724 = (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * 0.3183098733425140380859375;
    float _1731 = ((cbLight._m0[_1682].x * _1688) * _1724) + ((cbLight._m0[_1692].x * _1699) * _1722);
    float _1732 = ((_1688 * cbLight._m0[_1682].y) * _1724) + ((_1699 * cbLight._m0[_1692].y) * _1722);
    float _1733 = ((_1688 * cbLight._m0[_1682].z) * _1724) + ((_1699 * cbLight._m0[_1692].z) * _1722);
    uvec4 _1738 = floatBitsToUint(cbLight._m0[_1665 + 12u]);
    bool _1740 = _1738.x == 0u;
    float _1751;
    float _1753;
    float _1755;
    if (_1740)
    {
        _1751 = _1731;
        _1753 = _1732;
        _1755 = _1733;
    }
    else
    {
        uint _1759 = _1665 + 6u;
        float _1775 = (dot(vec3(cbLight._m0[_1665 + 2u].xyz), vec3(_474, _475, _476)) * 0.5) + 0.5;
        float _1776 = _1775 * _1775;
        float _3831 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1778 = isnan(1.0) ? _1680 : (isnan(_1680) ? 1.0 : min(_1680, 1.0));
        _1751 = (((cbLight._m0[_1759].x * 0.3183098733425140380859375) * _1777) * _1778) + _1731;
        _1753 = (((cbLight._m0[_1759].y * 0.3183098733425140380859375) * _1777) * _1778) + _1732;
        _1755 = (((cbLight._m0[_1759].z * 0.3183098733425140380859375) * _1777) * _1778) + _1733;
    }
    bool _1758 = _1738.y == 0u;
    float _1796;
    float _1798;
    float _1800;
    if (_1758)
    {
        _1796 = _1751;
        _1798 = _1753;
        _1800 = _1755;
    }
    else
    {
        uint _1955 = _1665 + 7u;
        float _1971 = (dot(vec3(cbLight._m0[_1665 + 3u].xyz), vec3(_474, _475, _476)) * 0.5) + 0.5;
        float _1972 = _1971 * _1971;
        float _3847 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1973 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1974 = isnan(1.0) ? _1681 : (isnan(_1681) ? 1.0 : min(_1681, 1.0));
        _1796 = (((cbLight._m0[_1955].x * 0.3183098733425140380859375) * _1973) * _1974) + _1751;
        _1798 = (((cbLight._m0[_1955].y * 0.3183098733425140380859375) * _1973) * _1974) + _1753;
        _1800 = (((cbLight._m0[_1955].z * 0.3183098733425140380859375) * _1973) * _1974) + _1755;
    }
    uint _1803 = _1665 + 8u;
    float _1816 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1665].w)) * _477) * 0.949999988079071044921875);
    float _1817 = _1816 * _1816;
    float _1818 = cbLight._m0[_1665].x + _553;
    float _1819 = cbLight._m0[_1665].y + _554;
    float _1820 = cbLight._m0[_1665].z + _555;
    float _1824 = inversesqrt(dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820)));
    float _1825 = _1824 * _1818;
    float _1826 = _1824 * _1819;
    float _1827 = _1824 * _1820;
    float _1828 = dot(vec3(_474, _475, _476), vec3(cbLight._m0[_1665].xyz));
    float _3863 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _1832 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _1833 = dot(vec3(_474, _475, _476), vec3(_1825, _1826, _1827));
    float _3885 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1836 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _1837 = dot(vec3(cbLight._m0[_1665].xyz), vec3(_1825, _1826, _1827));
    float _3896 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1841 = _1817 * _1817;
    float _1845 = ((_1836 * _1836) * (_1841 + (-1.0))) + 1.0;
    float _1856 = (exp2(log2(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1857 = 1.0 - _1817;
    float _1868 = (0.5 / (((_1832 * ((_1831 * _1857) + _1817)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _1857) + _1817) * _1831))) * _1831;
    float _3907 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1870 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1841 / ((_1845 * _1845) * 3.141590118408203125));
    uint _1881 = _1665 + 9u;
    float _1892 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1703].w)) * _477) * 0.949999988079071044921875);
    float _1893 = _1892 * _1892;
    float _1894 = cbLight._m0[_1703].x + _553;
    float _1895 = cbLight._m0[_1703].y + _554;
    float _1896 = cbLight._m0[_1703].z + _555;
    float _1900 = inversesqrt(dot(vec3(_1894, _1895, _1896), vec3(_1894, _1895, _1896)));
    float _1901 = _1900 * _1894;
    float _1902 = _1900 * _1895;
    float _1903 = _1900 * _1896;
    float _1904 = dot(vec3(_474, _475, _476), vec3(cbLight._m0[_1703].xyz));
    float _3918 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1907 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _1908 = dot(vec3(_474, _475, _476), vec3(_1901, _1902, _1903));
    float _3929 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1911 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _1912 = dot(vec3(cbLight._m0[_1703].xyz), vec3(_1901, _1902, _1903));
    float _3940 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1916 = _1893 * _1893;
    float _1920 = ((_1911 * _1911) * (_1916 + (-1.0))) + 1.0;
    float _1929 = (exp2(log2(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1930 = 1.0 - _1893;
    float _1940 = (0.5 / (((_1832 * ((_1907 * _1930) + _1893)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _1930) + _1893) * _1907))) * _1907;
    float _3951 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1942 = (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1916 / ((_1920 * _1920) * 3.141590118408203125));
    float _1952 = (((_1929 * cbLight._m0[_1881].x) * _1942) * _1688) + (((_1856 * cbLight._m0[_1803].x) * _1870) * _1699);
    float _1953 = (((_1929 * cbLight._m0[_1881].y) * _1942) * _1688) + (((_1856 * cbLight._m0[_1803].y) * _1870) * _1699);
    float _1954 = (((_1929 * cbLight._m0[_1881].z) * _1942) * _1688) + (((_1856 * cbLight._m0[_1803].z) * _1870) * _1699);
    float _2016;
    float _2018;
    float _2020;
    if (_1740)
    {
        _2016 = _1952;
        _2018 = _1953;
        _2020 = _1954;
    }
    else
    {
        uint _2022 = _1665 + 2u;
        uint _2026 = _1665 + 10u;
        float _2040 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2022].w)) * _477) * 0.949999988079071044921875);
        float _2041 = _2040 * _2040;
        float _2042 = cbLight._m0[_2022].x + _553;
        float _2043 = cbLight._m0[_2022].y + _554;
        float _2044 = cbLight._m0[_2022].z + _555;
        float _2048 = inversesqrt(dot(vec3(_2042, _2043, _2044), vec3(_2042, _2043, _2044)));
        float _2049 = _2048 * _2042;
        float _2050 = _2048 * _2043;
        float _2051 = _2048 * _2044;
        float _2052 = dot(vec3(_474, _475, _476), vec3(cbLight._m0[_2022].xyz));
        float _3962 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2055 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _2056 = dot(vec3(_474, _475, _476), vec3(_2049, _2050, _2051));
        float _3973 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2059 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _2060 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_2049, _2050, _2051));
        float _3984 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2064 = _2041 * _2041;
        float _2068 = ((_2059 * _2059) * (_2064 + (-1.0))) + 1.0;
        float _2077 = (exp2(log2(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2078 = 1.0 - _2041;
        float _2088 = (0.5 / (((_1832 * ((_2055 * _2078) + _2041)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _2078) + _2041) * _2055))) * _2055;
        float _3995 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2090 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_2064 / ((_2068 * _2068) * 3.141590118408203125));
        float _2091 = isnan(1.0) ? _1680 : (isnan(_1680) ? 1.0 : min(_1680, 1.0));
        _2016 = (((_2077 * cbLight._m0[_2026].x) * _2090) * _2091) + _1952;
        _2018 = (((_2077 * cbLight._m0[_2026].y) * _2090) * _2091) + _1953;
        _2020 = (((_2077 * cbLight._m0[_2026].z) * _2090) * _2091) + _1954;
    }
    float _2126;
    float _2128;
    float _2130;
    if (_1758)
    {
        _2126 = _2016;
        _2128 = _2018;
        _2130 = _2020;
    }
    else
    {
        uint _2137 = _1665 + 3u;
        uint _2141 = _1665 + 11u;
        float _2155 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2137].w)) * _477) * 0.949999988079071044921875);
        float _2156 = _2155 * _2155;
        float _2157 = cbLight._m0[_2137].x + _553;
        float _2158 = cbLight._m0[_2137].y + _554;
        float _2159 = cbLight._m0[_2137].z + _555;
        float _2163 = inversesqrt(dot(vec3(_2157, _2158, _2159), vec3(_2157, _2158, _2159)));
        float _2164 = _2163 * _2157;
        float _2165 = _2163 * _2158;
        float _2166 = _2163 * _2159;
        float _2167 = dot(vec3(_474, _475, _476), vec3(cbLight._m0[_2137].xyz));
        float _4011 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2170 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _2171 = dot(vec3(_474, _475, _476), vec3(_2164, _2165, _2166));
        float _4022 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2174 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _2175 = dot(vec3(cbLight._m0[_2137].xyz), vec3(_2164, _2165, _2166));
        float _4033 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2179 = _2156 * _2156;
        float _2183 = ((_2174 * _2174) * (_2179 + (-1.0))) + 1.0;
        float _2192 = (exp2(log2(1.0 - (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2193 = 1.0 - _2156;
        float _2203 = (0.5 / (((_1832 * ((_2170 * _2193) + _2156)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _2193) + _2156) * _2170))) * _2170;
        float _4044 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2205 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_2179 / ((_2183 * _2183) * 3.141590118408203125));
        float _2206 = isnan(1.0) ? _1681 : (isnan(_1681) ? 1.0 : min(_1681, 1.0));
        _2126 = (((_2192 * cbLight._m0[_2141].x) * _2205) * _2206) + _2016;
        _2128 = (((_2192 * cbLight._m0[_2141].y) * _2205) * _2206) + _2018;
        _2130 = (((_2192 * cbLight._m0[_2141].z) * _2205) * _2206) + _2020;
    }
    float _2341;
    float _2343;
    float _2345;
    float _2347;
    float _2349;
    float _2351;
    if (_1663.y == 0u)
    {
        float _2281 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2282 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2281;
        float _2283 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2281;
        float _2284 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2281;
        uvec4 _2296 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2297 = _2296.x;
        uint _2308 = uint((float(_2296.y) * floor(float(uint(cbSceneParam._m0[85u].y * _562) / _2297))) + floor(float(uint(cbSceneParam._m0[85u].x * _561) / _2297)));
        float _2318 = (log2(_2284 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2319 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        uint _2322 = uint(isnan(14.0) ? _2319 : (isnan(_2319) ? 14.0 : min(_2319, 14.0)));
        uvec4 _2327 = texelFetch(g_lightClusterGridBuffer, int(((_2322 << 2u) + (_2308 << 6u)) >> 2u));
        uint _2328 = _2327.x;
        uint _2329 = _2296.z;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        if (((((1u << ((_2329 >> 4u) & 15u)) + 4294967295u) & _2328) == 0u) || ((_2329 & 240u) == 0u))
        {
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
            _2439 = 0.0;
        }
        else
        {
            float _2430;
            float _2432;
            float _2434;
            float _2436;
            float _2438;
            float _2440;
            float _2574 = 0.0;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            uint _2580 = 0u;
            uint _2589;
            bool _2590;
            for (;;)
            {
                _2589 = texelFetch(g_lightClassification, int((((_2322 << 5u) + (_2308 << 9u)) + (_2580 << 2u)) >> 2u)).x;
                _2590 = _2589 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2590)
                {
                    frontier_phi_61_pred = _2574;
                    frontier_phi_61_pred_1 = _2579;
                    frontier_phi_61_pred_2 = _2578;
                    frontier_phi_61_pred_3 = _2577;
                    frontier_phi_61_pred_4 = _2576;
                    frontier_phi_61_pred_5 = _2575;
                }
                else
                {
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    float _2702;
                    float _2703;
                    uint _2704;
                    _2698 = _2574;
                    _2699 = _2575;
                    _2700 = _2576;
                    _2701 = _2577;
                    _2702 = _2578;
                    _2703 = _2579;
                    _2704 = _2589;
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    float _2635;
                    for (;;)
                    {
                        uint _2708 = uint(findLSB(_2704)) + (_2580 << 5u);
                        uint _2705 = (_2704 + 4294967295u) & _2704;
                        uint _2710 = _2708 * 48u;
                        vec4 _2724 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2710)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2710 + 3u)).x));
                        uint _2730 = (_2708 * 48u) + 4u;
                        vec4 _2743 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2730)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 3u)).x));
                        uint _2749 = (_2708 * 48u) + 8u;
                        vec3 _2760 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2749)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 2u)).x));
                        float _2764 = _2724.x - _2282;
                        float _2765 = _2724.y - _2283;
                        float _2766 = _2724.z - _2284;
                        float _2767 = dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766));
                        float _2770 = inversesqrt(_2767);
                        float _2771 = _2770 * _2764;
                        float _2772 = _2770 * _2765;
                        float _2773 = _2770 * _2766;
                        float _2774 = dot(vec3(_583, _586, _589), vec3(_2771, _2772, _2773));
                        float _2779 = 1.0 - (_2767 * _2724.w);
                        float _4070 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
                        float _2780 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                        float _2781 = sqrt(_2767) * _2743.w;
                        float _2784 = 1.39999997615814208984375 / (_2781 + 1.39999997615814208984375);
                        float _2785 = _2784 * _2784;
                        float _2788 = ((1.0 - _2785) * _2774) + _2785;
                        float _2791 = _2781 * _2781;
                        float _2795 = ((isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0))) * _2780) / ((_2791 * 0.699999988079071044921875) + 1.0);
                        float _2799 = (-0.0) - _2282;
                        float _2800 = (-0.0) - _2283;
                        float _2801 = (-0.0) - _2284;
                        float _2805 = inversesqrt(dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801)));
                        float _2806 = _2805 * _2799;
                        float _2807 = _2805 * _2800;
                        float _2808 = _2805 * _2801;
                        float _2816 = exp2(log2(1.0 / ((_2791 * 3.5) + 5.0)) * 0.25);
                        float _2817 = 1.0 - _643;
                        float _2824 = sqrt(1.0 - ((1.0 - (_2817 * _2817)) * (1.0 - (_2816 * _2816))));
                        float _2825 = _2824 * _2824;
                        float _2826 = _2825 * _2825;
                        float _2827 = _2806 + _2771;
                        float _2828 = _2807 + _2772;
                        float _2829 = _2808 + _2773;
                        float _2833 = inversesqrt(dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829)));
                        float _2837 = dot(vec3(_583, _586, _589), vec3(_2806, _2807, _2808));
                        float _4086 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                        float _2840 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                        float _2841 = dot(vec3(_583, _586, _589), vec3(_2833 * _2827, _2833 * _2828, _2833 * _2829));
                        float _4097 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2844 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                        float _2848 = ((_2844 * _2844) * (_2826 + (-1.0))) + 1.0;
                        float _2849 = _2784 * _2825;
                        float _2850 = _2849 * _2849;
                        float _2853 = ((1.0 - _2850) * _2774) + _2850;
                        float _4108 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                        float _2854 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                        float _2855 = 1.0 - _2825;
                        float _2865 = (0.5 / (((_2854 * ((_2840 * _2855) + _2825)) + 9.9999999392252902907785028219223e-09) + (((_2854 * _2855) + _2825) * _2840))) * _2854;
                        float _4119 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                        float _2876 = (((_2826 * 3.1415927410125732421875) * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) / ((_2848 * _2848) * ((_2791 * 2.1991131305694580078125) + 3.141590118408203125))) * _2780;
                        _2633 = (_2795 * _2743.x) + _2701;
                        _2634 = (_2795 * _2743.y) + _2702;
                        _2635 = (_2795 * _2743.z) + _2703;
                        _2630 = (_2876 * _2760.x) + _2698;
                        _2631 = (_2876 * _2760.y) + _2699;
                        _2632 = (_2876 * _2760.z) + _2700;
                        if (_2705 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2698 = _2630;
                            _2699 = _2631;
                            _2700 = _2632;
                            _2701 = _2633;
                            _2702 = _2634;
                            _2703 = _2635;
                            _2704 = _2705;
                        }
                    }
                    frontier_phi_61_pred = _2630;
                    frontier_phi_61_pred_1 = _2635;
                    frontier_phi_61_pred_2 = _2634;
                    frontier_phi_61_pred_3 = _2633;
                    frontier_phi_61_pred_4 = _2632;
                    frontier_phi_61_pred_5 = _2631;
                }
                _2430 = frontier_phi_61_pred;
                _2440 = frontier_phi_61_pred_1;
                _2438 = frontier_phi_61_pred_2;
                _2436 = frontier_phi_61_pred_3;
                _2434 = frontier_phi_61_pred_4;
                _2432 = frontier_phi_61_pred_5;
                uint _2581 = _2580 + 1u;
                if (_2581 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2574 = _2430;
                    _2575 = _2432;
                    _2576 = _2434;
                    _2577 = _2436;
                    _2578 = _2438;
                    _2579 = _2440;
                    _2580 = _2581;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
            _2439 = _2440;
        }
        uvec4 _2443 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2444 = _2443.z;
        uint _2446 = (_2444 >> 8u) & 15u;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        if (((4294967295u << _2446) & _2328) == 0u)
        {
            _2542 = _2429;
            _2544 = _2431;
            _2546 = _2433;
            _2548 = _2435;
            _2550 = _2437;
            _2552 = _2439;
        }
        else
        {
            float _2567 = inversesqrt(dot(vec3(_2282, _2283, _2284), vec3(_2282, _2283, _2284)));
            float _2568 = _2567 * _2282;
            float _2569 = _2567 * _2283;
            float _2570 = _2567 * _2284;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2446 < ((_2444 >> 12u) & 15u))
            {
                float _2543;
                float _2545;
                float _2547;
                float _2549;
                float _2551;
                float _2553;
                float _2681 = _2429;
                float _2682 = _2431;
                float _2683 = _2433;
                float _2684 = _2435;
                float _2685 = _2437;
                float _2686 = _2439;
                uint _2687 = _2446;
                uint _2696;
                bool _2697;
                for (;;)
                {
                    _2696 = texelFetch(g_lightClassification, int((((_2322 << 5u) + (_2308 << 9u)) + (_2687 << 2u)) >> 2u)).x;
                    _2697 = _2696 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2697)
                    {
                        frontier_phi_67_pred = _2684;
                        frontier_phi_67_pred_1 = _2685;
                        frontier_phi_67_pred_2 = _2686;
                        frontier_phi_67_pred_3 = _2683;
                        frontier_phi_67_pred_4 = _2682;
                        frontier_phi_67_pred_5 = _2681;
                    }
                    else
                    {
                        float _2881;
                        float _2882;
                        float _2883;
                        float _2884;
                        float _2885;
                        float _2886;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _2894 = _2681;
                        float _2895 = _2682;
                        float _2896 = _2683;
                        float _2897 = _2684;
                        float _2898 = _2685;
                        float _2899 = _2686;
                        uint _2900 = _2696;
                        uint _2901;
                        vec4 _2926;
                        float _2927;
                        vec4 _2942;
                        vec3 _2954;
                        vec4 _2970;
                        vec4 _2985;
                        float _3031;
                        bool _3032;
                        for (;;)
                        {
                            uint _2911 = ((_2687 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2900));
                            _2901 = (_2900 + 4294967295u) & _2900;
                            uint _2913 = _2911 * 40u;
                            _2926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 3u)).x));
                            _2927 = _2926.w;
                            uint _2929 = (_2911 * 40u) + 4u;
                            _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            uint _2944 = (_2911 * 40u) + 8u;
                            _2954 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 2u)).x));
                            uint _2957 = (_2911 * 40u) + 16u;
                            _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            uint _2972 = (_2911 * 40u) + 20u;
                            _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            uint _2987 = (_2911 * 40u) + 24u;
                            vec4 _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3006 = (_2911 * 40u) + 28u;
                            vec4 _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            _3031 = fma(_2284, _3019.z, fma(_2283, _3019.y, _3019.x * _2282)) + _3019.w;
                            _3032 = !((fma(_2284, _3000.z, fma(_2283, _3000.y, _3000.x * _2282)) + _3000.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3032)
                            {
                                float _3059 = _2926.x - _2282;
                                float _3060 = _2926.y - _2283;
                                float _3061 = _2926.z - _2284;
                                float _3062 = dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061));
                                float _3065 = inversesqrt(_3062);
                                float _3066 = _3065 * _3059;
                                float _3067 = _3065 * _3060;
                                float _3068 = _3065 * _3061;
                                float _3072 = 1.0 - (_3062 / (_2927 * _2927));
                                float _4130 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3073 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                                float _3077 = sqrt(_3062) * _2942.w;
                                float _3079 = 1.39999997615814208984375 / (_3077 + 1.39999997615814208984375);
                                float _3080 = _3079 * _3079;
                                float _3083 = ((1.0 - _3080) * dot(vec3(_3066, _3067, _3068), vec3(_583, _586, _589))) + _3080;
                                float _3086 = _3077 * _3077;
                                float _3090 = (fma(_2284, _2970.z, fma(_2283, _2970.y, _2970.x * _2282)) + _2970.w) / _3031;
                                float _3091 = (fma(_2284, _2985.z, fma(_2283, _2985.y, _2985.x * _2282)) + _2985.w) / _3031;
                                float _3095 = 1.0 - dot(vec2(_3090, _3091), vec2(_3090, _3091));
                                float _4146 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3096 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                                float _3097 = _3096 * (((isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0))) * _3073) / ((_3086 * 0.699999988079071044921875) + 1.0));
                                float _3109 = exp2(log2(1.0 / ((_3086 * 3.5) + 5.0)) * 0.25);
                                float _3110 = 1.0 - _643;
                                float _3117 = sqrt(1.0 - ((1.0 - (_3110 * _3110)) * (1.0 - (_3109 * _3109))));
                                float _3118 = _3117 * _3117;
                                float _3119 = _3118 * _3118;
                                float _3120 = _3066 - _2568;
                                float _3121 = _3067 - _2569;
                                float _3122 = _3068 - _2570;
                                float _3126 = inversesqrt(dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122)));
                                float _3130 = dot(vec3(_583, _586, _589), vec3((-0.0) - _2568, (-0.0) - _2569, (-0.0) - _2570));
                                float _4157 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3133 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3134 = dot(vec3(_583, _586, _589), vec3(_3126 * _3120, _3126 * _3121, _3126 * _3122));
                                float _4168 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3137 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3141 = ((_3137 * _3137) * (_3119 + (-1.0))) + 1.0;
                                float _3142 = _3079 * _3118;
                                float _3143 = _3142 * _3142;
                                float _3149 = ((1.0 - _3143) * dot(vec3(_583, _586, _589), vec3(_3066, _3067, _3068))) + _3143;
                                float _4179 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3150 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                                float _3151 = 1.0 - _3118;
                                float _3161 = (0.5 / (((_3150 * ((_3133 * _3151) + _3118)) + 9.9999999392252902907785028219223e-09) + (((_3150 * _3151) + _3118) * _3133))) * _3150;
                                float _4190 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3171 = (_3096 * _3073) * (((_3119 * 3.1415927410125732421875) * (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) / ((_3141 * _3141) * ((_3086 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3171 * _2954.x;
                                frontier_phi_73_pred_1 = _3171 * _2954.y;
                                frontier_phi_73_pred_2 = _3097 * _2942.z;
                                frontier_phi_73_pred_3 = _3097 * _2942.y;
                                frontier_phi_73_pred_4 = _3097 * _2942.x;
                                frontier_phi_73_pred_5 = _3171 * _2954.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3175 = frontier_phi_73_pred;
                            _3176 = frontier_phi_73_pred_1;
                            _3180 = frontier_phi_73_pred_2;
                            _3179 = frontier_phi_73_pred_3;
                            _3178 = frontier_phi_73_pred_4;
                            _3177 = frontier_phi_73_pred_5;
                            _2884 = _3178 + _2897;
                            _2885 = _3179 + _2898;
                            _2886 = _3180 + _2899;
                            _2881 = _3175 + _2894;
                            _2882 = _3176 + _2895;
                            _2883 = _3177 + _2896;
                            if (_2901 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2886;
                                _2900 = _2901;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2884;
                        frontier_phi_67_pred_1 = _2885;
                        frontier_phi_67_pred_2 = _2886;
                        frontier_phi_67_pred_3 = _2883;
                        frontier_phi_67_pred_4 = _2882;
                        frontier_phi_67_pred_5 = _2881;
                    }
                    _2549 = frontier_phi_67_pred;
                    _2551 = frontier_phi_67_pred_1;
                    _2553 = frontier_phi_67_pred_2;
                    _2547 = frontier_phi_67_pred_3;
                    _2545 = frontier_phi_67_pred_4;
                    _2543 = frontier_phi_67_pred_5;
                    uint _2688 = _2687 + 1u;
                    if (_2688 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2681 = _2543;
                        _2682 = _2545;
                        _2683 = _2547;
                        _2684 = _2549;
                        _2685 = _2551;
                        _2686 = _2553;
                        _2687 = _2688;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2551;
                frontier_phi_55_56_ladder_1 = _2553;
                frontier_phi_55_56_ladder_2 = _2549;
                frontier_phi_55_56_ladder_3 = _2547;
                frontier_phi_55_56_ladder_4 = _2545;
                frontier_phi_55_56_ladder_5 = _2543;
            }
            else
            {
                frontier_phi_55_56_ladder = _2437;
                frontier_phi_55_56_ladder_1 = _2439;
                frontier_phi_55_56_ladder_2 = _2435;
                frontier_phi_55_56_ladder_3 = _2433;
                frontier_phi_55_56_ladder_4 = _2431;
                frontier_phi_55_56_ladder_5 = _2429;
            }
            _2542 = frontier_phi_55_56_ladder_5;
            _2544 = frontier_phi_55_56_ladder_4;
            _2546 = frontier_phi_55_56_ladder_3;
            _2548 = frontier_phi_55_56_ladder_2;
            _2550 = frontier_phi_55_56_ladder;
            _2552 = frontier_phi_55_56_ladder_1;
        }
        float _2557 = isnan(1.0) ? _627 : (isnan(_627) ? 1.0 : min(_627, 1.0));
        _2341 = (_2557 * _2548) + _1796;
        _2343 = (_2557 * _2550) + _1798;
        _2345 = (_2557 * _2552) + _1800;
        _2347 = ((_2542 * 0.039999999105930328369140625) * _2557) + _2126;
        _2349 = ((_2544 * 0.039999999105930328369140625) * _2557) + _2128;
        _2351 = ((_2546 * 0.039999999105930328369140625) * _2557) + _2130;
    }
    else
    {
        _2341 = _1796;
        _2343 = _1798;
        _2345 = _1800;
        _2347 = _2126;
        _2349 = _2128;
        _2351 = _2130;
    }
    float _4206 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4217 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _4228 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    uint _2371 = _233 + 6u;
    float _2379 = _561 / cbSceneParam._m0[86u].x;
    float _2380 = _562 / cbSceneParam._m0[86u].y;
    vec4 _2394 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2379, _2380, (log2((isnan(cbSceneParam._m0[77u].w) ? _495 : (isnan(_495) ? cbSceneParam._m0[77u].w : min(_495, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2396 = _2394.x;
    float _2397 = _2394.y;
    float _2398 = _2394.z;
    float _2399 = _2394.w;
    float _2492;
    float _2494;
    float _2496;
    float _2498;
    if (_495 > cbSceneParam._m0[78u].w)
    {
        float _2454 = isnan(_495) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _495 : min(cbSceneParam._m0[80u].w, _495));
        float _2455 = _2454 / _495;
        float _2466 = _2455 * _546;
        float _2467 = _547 * _2455;
        float _2468 = (-0.0) - _2467;
        float _2470 = _2455 * _548;
        float _2472 = (cbSceneParam._m0[77u].w * _2468) / _2454;
        float _2473 = _2472 + cbSceneParam._m0[79u].w;
        float _2474 = cbSceneParam._m0[79u].w - _2467;
        float _2480 = sqrt(((_2466 * _2466) + (_2467 * _2467)) + (_2470 * _2470));
        float _2483 = (1.0 - (cbSceneParam._m0[77u].w / _2454)) * _2480;
        float _2488 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2490 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2643;
        if (abs((_2468 - _2472) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2643 = ((((_2473 > 0.0) ? exp2(_2488 * _2473) : (2.0 - exp2(_2490 * _2473))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2483;
        }
        else
        {
            float _2603 = 1.0 / cbSceneParam._m0[80u].x;
            float _2604 = isnan(_2474) ? _2473 : (isnan(_2473) ? _2474 : max(_2473, _2474));
            float _2605 = isnan(_2474) ? _2473 : (isnan(_2473) ? _2474 : min(_2473, _2474));
            float _2614 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : min(_2604, 0.0));
            float _2615 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : min(_2605, 0.0));
            _2643 = ((abs(_2480 / _2468) * cbSceneParam._m0[80u].y) * ((((_2614 - _2615) * 2.0) - ((exp2(_2488 * (isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0)))) - exp2(_2488 * (isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0))))) * _2603)) - ((exp2(_2490 * _2614) - exp2(_2490 * _2615)) * _2603))) + (_2483 * cbSceneParam._m0[80u].z);
        }
        vec4 _2645 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2379, _2380, 1.0), 0.0);
        float _2654 = exp2((_2643 * (-1.44269502162933349609375)) * (1.0 - _2645.w));
        float _2655 = log2(_2654);
        float _2671 = log2(_2399);
        _2492 = (exp2(_2671 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2655 * cbSceneParam._m0[78u].x)) * _2645.x) / cbSceneParam._m0[78u].x)) + _2396;
        _2494 = (exp2(_2671 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2655 * cbSceneParam._m0[78u].y)) * _2645.y) / cbSceneParam._m0[78u].y)) + _2397;
        _2496 = (exp2(_2671 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2655 * cbSceneParam._m0[78u].z)) * _2645.z) / cbSceneParam._m0[78u].z)) + _2398;
        _2498 = _2654 * _2399;
    }
    else
    {
        _2492 = _2396;
        _2494 = _2397;
        _2496 = _2398;
        _2498 = _2399;
    }
    float _2510 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2511 = _2510 == 3.0;
    float _2512 = log2(_2498);
    float _2519 = exp2(_2512 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2341 + ((isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))) * _627))) + ((_2347 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _1432)) * cbPerFrame._m0[3u].x));
    float _2520 = exp2(_2512 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2343 + ((isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))) * _627))) + ((_2349 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _1432)) * cbPerFrame._m0[3u].x));
    float _2521 = exp2(_2512 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2345 + ((isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))) * _627))) + ((_2351 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _1432)) * cbPerFrame._m0[3u].x));
    float _2530 = (_2510 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2530 * (_2511 ? _2519 : (_2519 + (cbSceneParam._m0[72u].w * _2492)));
    SV_Target.y = _2530 * (_2511 ? _2520 : (_2520 + (cbSceneParam._m0[72u].w * _2494)));
    SV_Target.z = _2530 * (_2511 ? _2521 : (_2521 + (cbSceneParam._m0[72u].w * _2496)));
    SV_Target.w = cbInstanceData._m0[_2371].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2371].w;
}


