#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1168;
float _3553;
float _3554;
float _3555;
float _3556;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _286 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _292 = _286.x * cbMtdParam._m0[9u].x;
    float _293 = _286.y * cbMtdParam._m0[9u].y;
    float _294 = _286.z * cbMtdParam._m0[9u].z;
    vec4 _313 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _333 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _359 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _363 = _359.z;
    float _367 = (_359.x * 2.0) + (-1.0);
    float _368 = (_359.y * 2.0) + (-1.0);
    float _369 = dot(vec2(_367, _368), vec2(_367, _368));
    float _3565 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _375 = sqrt(1.0 - (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))));
    float _380 = _367 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_333.x * 2.0) + (-1.0)));
    float _381 = _368 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_333.y * 2.0) + (-1.0)));
    vec4 _398 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _400 = _398.x;
    float _401 = 1.0 - _400;
    float _410 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _413 = ((isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : min(_410, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _422 = (_413 - ((((((_400 - _401) * cbMtdParam._m0[24u].z) + _401) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _413))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3586 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _430 = (_423 * ((_313.x * cbMtdParam._m0[18u].x) - _292)) + _292;
    float _431 = (_423 * ((_313.y * cbMtdParam._m0[18u].y) - _293)) + _293;
    float _432 = (_423 * ((_313.z * cbMtdParam._m0[18u].z) - _294)) + _294;
    vec4 _445 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _447 = _445.x;
    float _448 = 1.0 - _447;
    float _477 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_447 - _448) * cbMtdParam._m0[24u].w) + _448) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3597 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _478 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _486 = ((((cbMtdParam._m0[10u].x - _430) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _478) + _430;
    float _487 = ((((cbMtdParam._m0[10u].y - _431) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _478) + _431;
    float _488 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _432)) * _478) + _432;
    float _493 = (((_333.z - _363) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _363;
    vec4 _507 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _514 = (_507.x * 2.0) + (-1.0);
    float _515 = (_507.y * 2.0) + (-1.0);
    float _516 = dot(vec2(_514, _515), vec2(_514, _515));
    float _3608 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _524 = (_423 * (_507.z - _493)) + _493;
    float _527 = ((cbMtdParam._m0[23u].y - _524) * _478) + _524;
    vec4 _549 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _555 = (_549.x * 2.0) + (-1.0);
    float _556 = (_549.y * 2.0) + (-1.0);
    float _557 = dot(vec2(_555, _556), vec2(_555, _556));
    float _3619 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _574 = (((_514 - _380) + (cbMtdParam._m0[21u].x * _380)) * _423) + _380;
    float _575 = (((_515 - _381) + (cbMtdParam._m0[21u].x * _381)) * _423) + _381;
    float _576 = (_423 * (sqrt(1.0 - (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) - _375)) + _375;
    float _587 = (((_555 - _574) + (_574 * cbMtdParam._m0[22u].z)) * _478) + _574;
    float _588 = (((_556 - _575) + (_575 * cbMtdParam._m0[22u].z)) * _478) + _575;
    float _589 = ((sqrt(1.0 - (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) - _576) * _478) + _576;
    float _591 = cbMtdParam._m0[22u].x + _359.w;
    float _594 = fma(_589, _234 * NORMAL.x, fma(_588, _241 * TANGENT.x, (_227 * _219) * _587));
    float _597 = fma(_589, _234 * NORMAL.y, fma(_588, _241 * TANGENT.y, (_227 * _220) * _587));
    float _600 = fma(_589, _234 * NORMAL.z, fma(_588, _241 * TANGENT.z, (_227 * _221) * _587));
    float _604 = inversesqrt(dot(vec3(_594, _597, _600), vec3(_594, _597, _600)));
    float _605 = _604 * _594;
    float _606 = _604 * _597;
    float _607 = _604 * _600;
    float _3630 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _608 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _3641 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _3652 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _3663 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3674 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _626 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _676 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _666);
    float _677 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _666);
    float _678 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _666);
    float _682 = inversesqrt(dot(vec3(_676, _677, _678), vec3(_676, _677, _678)));
    float _683 = _676 * _682;
    float _684 = _677 * _682;
    float _685 = _678 * _682;
    vec4 _690 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _692 = _690.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _849 = sqrt(((_676 * _676) + (_677 * _677)) + (_678 * _678));
        float _855 = (cbMatDynParam._m0[5u].x * _849) + cbMatDynParam._m0[5u].y;
        float _3685 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _860 = (cbMatDynParam._m0[5u].z * _849) + cbMatDynParam._m0[5u].w;
        float _3696 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) - _856)) + _856) < ((_692 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _704 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _705 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _725 = fma(_607, cbSceneParam._m0[5u].z, fma(_606, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _605));
    float _728 = fma(_607, cbSceneParam._m0[6u].z, fma(_606, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _605));
    float _731 = fma(_607, cbSceneParam._m0[7u].z, fma(_606, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _605));
    uint _744 = _247 + 9u;
    uint _745 = _744 + uint(cbMatDynParam._m0[0u].w);
    float _751 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) * cbInstanceData._m0[_745].x;
    float _752 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0)))) * cbInstanceData._m0[_745].y;
    float _753 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0)))) * cbInstanceData._m0[_745].z;
    float _3707 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _3718 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _755 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _3729 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _756 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    vec4 _765 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _704, cbSceneParam._m0[86u].y * _705));
    float _769 = ((isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * TEXCOORD_5.w) * _765.x;
    float _770 = dot(vec3(_605, _606, _607), vec3(_683, _684, _685));
    float _773 = _770 * 2.0;
    float _777 = (_773 * _605) - _683;
    float _778 = (_773 * _606) - _684;
    float _779 = (_773 * _607) - _685;
    float _783 = abs(dot(vec3(_683, _684, _685), vec3(_605, _606, _607)));
    float _3740 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _785 = sqrt(_608);
    float _798 = exp2((_785 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_785 * 3.0));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _834 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _838 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1167;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _892 = fma(_838, cbModelParam._m0[26u].z, fma(_834, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _830));
        float _896 = fma(_838, cbModelParam._m0[27u].z, fma(_834, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _830));
        float _900 = fma(_838, cbModelParam._m0[28u].z, fma(_834, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _830));
        float _925 = _830 + _605;
        float _926 = _834 + _606;
        float _927 = _838 + _607;
        float _937 = fma(_927, cbModelParam._m0[26u].z, fma(_926, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _925)) - _892;
        float _938 = fma(_927, cbModelParam._m0[27u].z, fma(_926, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _925)) - _896;
        float _939 = fma(_927, cbModelParam._m0[28u].z, fma(_926, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _925)) - _900;
        float _943 = inversesqrt(dot(vec3(_937, _938, _939), vec3(_937, _938, _939)));
        float _956 = ((_943 * _937) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_892 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_943 * _938) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_896 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_943 * _939) / cbModelParam._m0[34u].z) + ((((((_900 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        float _995 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_961.x + (-0.5));
        float _997 = _995 * (_961.y + (-0.5));
        float _998 = _995 * (_961.z + (-0.5));
        float _1005 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_968.x + (-0.5));
        float _1007 = _1005 * (_968.y + (-0.5));
        float _1008 = _1005 * (_968.z + (-0.5));
        float _1015 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_975.x + (-0.5));
        float _1017 = _1015 * (_975.y + (-0.5));
        float _1018 = _1015 * (_975.z + (-0.5));
        float _1025 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_982.x + (-0.5));
        float _1027 = _1025 * (_982.y + (-0.5));
        float _1028 = _1025 * (_982.z + (-0.5));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = _996 * 0.5;
        float _1033 = _1006 * 0.5;
        float _1034 = _1016 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1049 = (dot(vec3(_605, _606, _607), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1059 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3788 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1061 + 1.0))) + _1066) * _1029;
        float _1076 = _997 * 0.5;
        float _1077 = _1007 * 0.5;
        float _1078 = _1017 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_605, _606, _607), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3821 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1103 + 1.0))) + _1108) * _1030;
        float _1118 = _998 * 0.5;
        float _1119 = _1008 * 0.5;
        float _1120 = _1018 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_605, _606, _607), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3854 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1145 + 1.0))) + _1150) * _1031;
        _1167 = _998;
        _1169 = _997;
        _1170 = _996;
        _1171 = _1008;
        _1172 = _1007;
        _1173 = _1006;
        _1174 = _1018;
        _1175 = _1017;
        _1176 = _1016;
        _1177 = _1031;
        _1178 = _1030;
        _1179 = _1029;
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1182 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
    }
    else
    {
        _1167 = _1168;
        _1169 = _1168;
        _1170 = _1168;
        _1171 = _1168;
        _1172 = _1168;
        _1173 = _1168;
        _1174 = _1168;
        _1175 = _1168;
        _1176 = _1168;
        _1177 = _1168;
        _1178 = _1168;
        _1179 = _1168;
        _1180 = 0.0;
        _1181 = 0.0;
        _1182 = 0.0;
    }
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1210 = fma(_838, cbModelParam._m0[30u].z, fma(_834, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _830));
        float _1214 = fma(_838, cbModelParam._m0[31u].z, fma(_834, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _830));
        float _1218 = fma(_838, cbModelParam._m0[32u].z, fma(_834, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _830));
        float _1241 = _830 + _605;
        float _1242 = _834 + _606;
        float _1243 = _838 + _607;
        float _1253 = fma(_1243, cbModelParam._m0[30u].z, fma(_1242, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1241)) - _1210;
        float _1254 = fma(_1243, cbModelParam._m0[31u].z, fma(_1242, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1241)) - _1214;
        float _1255 = fma(_1243, cbModelParam._m0[32u].z, fma(_1242, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1241)) - _1218;
        float _1259 = inversesqrt(dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255)));
        float _1272 = ((_1259 * _1253) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1210 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1259 * _1254) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1214 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1259 * _1255) / cbModelParam._m0[35u].z) + ((((((_1218 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        float _1309 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1276.x + (-0.5));
        float _1311 = _1309 * (_1276.y + (-0.5));
        float _1312 = _1309 * (_1276.z + (-0.5));
        float _1319 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1283.x + (-0.5));
        float _1321 = _1319 * (_1283.y + (-0.5));
        float _1322 = _1319 * (_1283.z + (-0.5));
        float _1329 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1290.x + (-0.5));
        float _1331 = _1329 * (_1290.y + (-0.5));
        float _1332 = _1329 * (_1290.z + (-0.5));
        float _1339 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1297.x + (-0.5));
        float _1341 = _1339 * (_1297.y + (-0.5));
        float _1342 = _1339 * (_1297.z + (-0.5));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = _1310 * 0.5;
        float _1347 = _1320 * 0.5;
        float _1348 = _1330 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_605, _606, _607), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _3917 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1373 + 1.0))) + _1378) * _1343;
        float _1388 = _1311 * 0.5;
        float _1389 = _1321 * 0.5;
        float _1390 = _1331 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_605, _606, _607), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _3950 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1415 + 1.0))) + _1420) * _1344;
        float _1430 = _1312 * 0.5;
        float _1431 = _1322 * 0.5;
        float _1432 = _1332 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_605, _606, _607), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _3961 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _3972 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _3983 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1457 + 1.0))) + _1462) * _1345;
        _1479 = _1312;
        _1480 = _1311;
        _1481 = _1310;
        _1482 = _1322;
        _1483 = _1321;
        _1484 = _1320;
        _1485 = _1332;
        _1486 = _1331;
        _1487 = _1330;
        _1488 = _1345;
        _1489 = _1344;
        _1490 = _1343;
        _1491 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1492 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
    }
    else
    {
        _1479 = _1168;
        _1480 = _1168;
        _1481 = _1168;
        _1482 = _1168;
        _1483 = _1168;
        _1484 = _1168;
        _1485 = _1168;
        _1486 = _1168;
        _1487 = _1168;
        _1488 = _1168;
        _1489 = _1168;
        _1490 = _1168;
        _1491 = 0.0;
        _1492 = 0.0;
        _1493 = 0.0;
    }
    float _1503 = (cbModelParam._m0[1u].x * (_1491 - _1180)) + _1180;
    float _1504 = (cbModelParam._m0[1u].x * (_1492 - _1181)) + _1181;
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1182)) + _1182;
    float _1526 = fma(_1505, cbSceneParam._m0[89u].z, fma(_1504, cbSceneParam._m0[89u].y, _1503 * cbSceneParam._m0[89u].x));
    float _1529 = fma(_1505, cbSceneParam._m0[90u].z, fma(_1504, cbSceneParam._m0[90u].y, _1503 * cbSceneParam._m0[90u].x));
    float _1532 = fma(_1505, cbSceneParam._m0[91u].z, fma(_1504, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1503));
    float _1547 = _777 * 0.5;
    float _1548 = _778 * 0.5;
    float _1549 = _779 * 0.5;
    float _1550 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1553 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1480, _1483, _1486, _1489));
    float _1556 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1479, _1482, _1485, _1488));
    float _1590;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1563 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1167, _1171, _1174, _1177));
        float _1567 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1169, _1172, _1175, _1178));
        float _1571 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1170, _1173, _1176, _1179));
        float _1578 = dot(vec4(cbModelParam._m0[39u]), vec4(_1547, _1548, _1549, 1.0));
        _1590 = dot(vec3(isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1578) ? 0.0 : (isnan(0.0) ? _1578 : max(0.0, _1578))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1590 = 1.0;
    }
    float _1601;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1592 = dot(vec4(cbModelParam._m0[40u]), vec4(_1547, _1548, _1549, 1.0));
        _1601 = dot(vec3(isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1592) ? 0.0 : (isnan(0.0) ? _1592 : max(0.0, _1592))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1601 = 1.0;
    }
    float _1605 = (_1601 * cbModelParam._m0[1u].x) + (_1590 * (1.0 - cbModelParam._m0[1u].x));
    float _1615 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _608);
    float _1616 = isnan(_1615) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1615 : min(cbModelParam._m0[25u].z, _1615));
    float _1696;
    float _1698;
    float _1700;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1663 = fma(_838, cbModelParam._m0[13u].z, fma(_834, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _830)) + cbModelParam._m0[13u].w;
        float _1667 = fma(_838, cbModelParam._m0[14u].z, fma(_834, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _830)) + cbModelParam._m0[14u].w;
        float _1671 = fma(_838, cbModelParam._m0[15u].z, fma(_834, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _830)) + cbModelParam._m0[15u].w;
        float _1674 = fma(_779, cbModelParam._m0[13u].z, fma(_778, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _777));
        float _1677 = fma(_779, cbModelParam._m0[14u].z, fma(_778, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _777));
        float _1680 = fma(_779, cbModelParam._m0[15u].z, fma(_778, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _777));
        float _1708;
        if (_1674 > 0.0)
        {
            _1708 = abs((1.0 - _1663) / _1674);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1663 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1708 = frontier_phi_17_15_ladder;
        }
        float _1931;
        if (_1677 > 0.0)
        {
            _1931 = abs((1.0 - _1667) / _1677);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1667 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1931 = frontier_phi_26_22_ladder;
        }
        float _2177;
        if (_1680 > 0.0)
        {
            _2177 = abs((1.0 - _1671) / _1680);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1671 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2177 = frontier_phi_38_33_ladder;
        }
        float _2179 = isnan(_1931) ? _1708 : (isnan(_1708) ? _1931 : min(_1708, _1931));
        float _2180 = isnan(_2177) ? _2179 : (isnan(_2179) ? _2177 : min(_2179, _2177));
        float _2184 = (_2180 * _1674) + _1663;
        float _2185 = (_2180 * _1677) + _1667;
        float _2186 = (_2180 * _1680) + _1671;
        float _2187 = _2180 * 9.9999997473787516355514526367188e-05;
        float _2189 = (-1.0) - _2187;
        float _2191 = _2187 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2186 > _2191) || ((_2186 < _2189) || ((_2185 > _2191) || ((_2185 < _2189) || ((_2184 < _2189) || (_2184 > _2191))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2310 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2186, cbModelParam._m0[9u].z, fma(_2185, cbModelParam._m0[9u].y, _2184 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2186, cbModelParam._m0[10u].z, fma(_2185, cbModelParam._m0[10u].y, _2184 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2186, cbModelParam._m0[11u].z, fma(_2185, cbModelParam._m0[11u].y, _2184 * cbModelParam._m0[11u].x))), _1616);
            frontier_phi_16_38_ladder = _2310.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2310.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2310.x * cbModelParam._m0[1u].y;
        }
        _1696 = frontier_phi_16_38_ladder_2;
        _1698 = frontier_phi_16_38_ladder_1;
        _1700 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1684 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_777, _778, _779), _1616);
        _1696 = _1684.x * cbModelParam._m0[1u].y;
        _1698 = _1684.y * cbModelParam._m0[1u].y;
        _1700 = _1684.z * cbModelParam._m0[1u].y;
    }
    float _1704 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _608);
    float _1705 = isnan(_1704) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1704 : min(cbModelParam._m0[25u].w, _1704));
    float _1794;
    float _1796;
    float _1798;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1758 = fma(_838, cbModelParam._m0[21u].z, fma(_834, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _830)) + cbModelParam._m0[21u].w;
        float _1762 = fma(_838, cbModelParam._m0[22u].z, fma(_834, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _830)) + cbModelParam._m0[22u].w;
        float _1766 = fma(_838, cbModelParam._m0[23u].z, fma(_834, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _830)) + cbModelParam._m0[23u].w;
        float _1769 = fma(_779, cbModelParam._m0[21u].z, fma(_778, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _777));
        float _1772 = fma(_779, cbModelParam._m0[22u].z, fma(_778, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _777));
        float _1775 = fma(_779, cbModelParam._m0[23u].z, fma(_778, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _777));
        float _1936;
        if (_1769 > 0.0)
        {
            _1936 = abs((1.0 - _1758) / _1769);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1758 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1936 = frontier_phi_28_24_ladder;
        }
        float _2204;
        if (_1772 > 0.0)
        {
            _2204 = abs((1.0 - _1762) / _1772);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1762 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2204 = frontier_phi_40_35_ladder;
        }
        float _2409;
        if (_1775 > 0.0)
        {
            _2409 = abs((1.0 - _1766) / _1775);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1766 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2409 = frontier_phi_49_46_ladder;
        }
        float _2411 = isnan(_2204) ? _1936 : (isnan(_1936) ? _2204 : min(_1936, _2204));
        float _2412 = isnan(_2409) ? _2411 : (isnan(_2411) ? _2409 : min(_2411, _2409));
        float _2416 = (_2412 * _1769) + _1758;
        float _2417 = (_2412 * _1772) + _1762;
        float _2418 = (_2412 * _1775) + _1766;
        float _2419 = _2412 * 9.9999997473787516355514526367188e-05;
        float _2420 = (-1.0) - _2419;
        float _2422 = _2419 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2418 > _2422) || ((_2418 < _2420) || ((_2417 > _2422) || ((_2417 < _2420) || ((_2416 < _2420) || (_2416 > _2422))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2617 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2418, cbModelParam._m0[17u].z, fma(_2417, cbModelParam._m0[17u].y, _2416 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2418, cbModelParam._m0[18u].z, fma(_2417, cbModelParam._m0[18u].y, _2416 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2418, cbModelParam._m0[19u].z, fma(_2417, cbModelParam._m0[19u].y, _2416 * cbModelParam._m0[19u].x))), _1705);
            frontier_phi_25_49_ladder = _2617.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2617.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2617.x * cbModelParam._m0[1u].z;
        }
        _1794 = frontier_phi_25_49_ladder_2;
        _1796 = frontier_phi_25_49_ladder_1;
        _1798 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1778 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_777, _778, _779), _1705);
        _1794 = _1778.x * cbModelParam._m0[1u].z;
        _1796 = _1778.y * cbModelParam._m0[1u].z;
        _1798 = _1778.z * cbModelParam._m0[1u].z;
    }
    float _1810 = ((((1.0 - _798) * ((_785 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_798 * _785)) * _769;
    float _1811 = _1810 * ((cbModelParam._m0[1u].w * (_1794 - _1696)) + _1696);
    float _1812 = _1810 * ((cbModelParam._m0[1u].w * (_1796 - _1698)) + _1698);
    float _1813 = _1810 * ((cbModelParam._m0[1u].w * (_1798 - _1700)) + _1700);
    float _1816 = fma(_1813, cbSceneParam._m0[89u].z, fma(_1812, cbSceneParam._m0[89u].y, _1811 * cbSceneParam._m0[89u].x));
    float _1819 = fma(_1813, cbSceneParam._m0[90u].z, fma(_1812, cbSceneParam._m0[90u].y, _1811 * cbSceneParam._m0[90u].x));
    float _1822 = fma(_1813, cbSceneParam._m0[91u].z, fma(_1812, cbSceneParam._m0[91u].y, _1811 * cbSceneParam._m0[91u].x));
    vec4 _1830 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_704, _705));
    float _1832 = _1830.w;
    float _1844 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1832);
    float _1845 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1832);
    float _1846 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1832);
    uvec4 _1850 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _1852 = _1850.x * 14u;
    uint _1853 = _1852 + 13u;
    float _1860 = _769 + (-1.0);
    float _1865 = (cbLight._m0[_1853].x * _1860) + 1.0;
    float _1866 = (cbLight._m0[_1853].y * _1860) + 1.0;
    float _1867 = (cbLight._m0[_1853].z * _1860) + 1.0;
    float _1868 = (cbLight._m0[_1853].w * _1860) + 1.0;
    uint _1869 = _1852 + 5u;
    float _1875 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
    uint _1879 = _1852 + 4u;
    float _1889 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
    uint _1893 = _1852 | 1u;
    float _1904 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_605, _606, _607));
    float _1907 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_605, _606, _607));
    float _4119 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _4130 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1912 = (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * 0.3183098733425140380859375;
    float _1914 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * 0.3183098733425140380859375;
    float _1921 = ((cbLight._m0[_1869].x * _1875) * _1914) + (((cbLight._m0[_1879].x * _1844) * _1889) * _1912);
    float _1922 = ((_1875 * cbLight._m0[_1869].y) * _1914) + (((cbLight._m0[_1879].y * _1845) * _1889) * _1912);
    float _1923 = ((_1875 * cbLight._m0[_1869].z) * _1914) + (((cbLight._m0[_1879].z * _1846) * _1889) * _1912);
    uvec4 _1928 = floatBitsToUint(cbLight._m0[_1852 + 12u]);
    bool _1930 = _1928.x == 0u;
    float _1941;
    float _1943;
    float _1945;
    if (_1930)
    {
        _1941 = _1921;
        _1943 = _1922;
        _1945 = _1923;
    }
    else
    {
        uint _1949 = _1852 + 6u;
        float _1965 = (dot(vec3(cbLight._m0[_1852 + 2u].xyz), vec3(_605, _606, _607)) * 0.5) + 0.5;
        float _1966 = _1965 * _1965;
        float _4141 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1967 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1968 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
        _1941 = (((cbLight._m0[_1949].x * 0.3183098733425140380859375) * _1967) * _1968) + _1921;
        _1943 = (((cbLight._m0[_1949].y * 0.3183098733425140380859375) * _1967) * _1968) + _1922;
        _1945 = (((cbLight._m0[_1949].z * 0.3183098733425140380859375) * _1967) * _1968) + _1923;
    }
    bool _1948 = _1928.y == 0u;
    float _1986;
    float _1988;
    float _1990;
    if (_1948)
    {
        _1986 = _1941;
        _1988 = _1943;
        _1990 = _1945;
    }
    else
    {
        uint _2148 = _1852 + 7u;
        float _2164 = (dot(vec3(cbLight._m0[_1852 + 3u].xyz), vec3(_605, _606, _607)) * 0.5) + 0.5;
        float _2165 = _2164 * _2164;
        float _4157 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2166 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _2167 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
        _1986 = (((cbLight._m0[_2148].x * 0.3183098733425140380859375) * _2166) * _2167) + _1941;
        _1988 = (((cbLight._m0[_2148].y * 0.3183098733425140380859375) * _2166) * _2167) + _1943;
        _1990 = (((cbLight._m0[_2148].z * 0.3183098733425140380859375) * _2166) * _2167) + _1945;
    }
    uint _1993 = _1852 + 8u;
    float _2006 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1852].w)) * _608) * 0.949999988079071044921875);
    float _2007 = _2006 * _2006;
    float _2008 = cbLight._m0[_1852].x + _683;
    float _2009 = cbLight._m0[_1852].y + _684;
    float _2010 = cbLight._m0[_1852].z + _685;
    float _2014 = inversesqrt(dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010)));
    float _2015 = _2014 * _2008;
    float _2016 = _2014 * _2009;
    float _2017 = _2014 * _2010;
    float _2018 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_1852].xyz));
    float _4173 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2021 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _4184 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _2022 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _2023 = dot(vec3(_605, _606, _607), vec3(_2015, _2016, _2017));
    float _4195 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _2027 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_2015, _2016, _2017));
    float _4206 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2031 = _2007 * _2007;
    float _2035 = ((_2026 * _2026) * (_2031 + (-1.0))) + 1.0;
    float _2046 = (exp2(log2(1.0 - (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2047 = 1.0 - _2007;
    float _2058 = (0.5 / (((_2022 * ((_2021 * _2047) + _2007)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2047) + _2007) * _2021))) * _2021;
    float _4217 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2060 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2031 / ((_2035 * _2035) * 3.141590118408203125));
    uint _2074 = _1852 + 9u;
    float _2085 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1893].w)) * _608) * 0.949999988079071044921875);
    float _2086 = _2085 * _2085;
    float _2087 = cbLight._m0[_1893].x + _683;
    float _2088 = cbLight._m0[_1893].y + _684;
    float _2089 = cbLight._m0[_1893].z + _685;
    float _2093 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
    float _2094 = _2093 * _2087;
    float _2095 = _2093 * _2088;
    float _2096 = _2093 * _2089;
    float _2097 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_1893].xyz));
    float _4228 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _2101 = dot(vec3(_605, _606, _607), vec3(_2094, _2095, _2096));
    float _4239 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2104 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _2105 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_2094, _2095, _2096));
    float _4250 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2109 = _2086 * _2086;
    float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
    float _2122 = (exp2(log2(1.0 - (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2123 = 1.0 - _2086;
    float _2133 = (0.5 / (((_2022 * ((_2100 * _2123) + _2086)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2123) + _2086) * _2100))) * _2100;
    float _4261 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2135 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
    float _2145 = (((_2122 * cbLight._m0[_2074].x) * _2135) * _1875) + ((((cbLight._m0[_1993].x * _1844) * _2046) * _2060) * _1889);
    float _2146 = (((_2122 * cbLight._m0[_2074].y) * _2135) * _1875) + ((((cbLight._m0[_1993].y * _1845) * _2046) * _2060) * _1889);
    float _2147 = (((_2122 * cbLight._m0[_2074].z) * _2135) * _1875) + ((((cbLight._m0[_1993].z * _1846) * _2046) * _2060) * _1889);
    float _2209;
    float _2211;
    float _2213;
    if (_1930)
    {
        _2209 = _2145;
        _2211 = _2146;
        _2213 = _2147;
    }
    else
    {
        uint _2215 = _1852 + 2u;
        uint _2219 = _1852 + 10u;
        float _2233 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2215].w)) * _608) * 0.949999988079071044921875);
        float _2234 = _2233 * _2233;
        float _2235 = cbLight._m0[_2215].x + _683;
        float _2236 = cbLight._m0[_2215].y + _684;
        float _2237 = cbLight._m0[_2215].z + _685;
        float _2241 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
        float _2242 = _2241 * _2235;
        float _2243 = _2241 * _2236;
        float _2244 = _2241 * _2237;
        float _2245 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_2215].xyz));
        float _4272 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2248 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2249 = dot(vec3(_605, _606, _607), vec3(_2242, _2243, _2244));
        float _4283 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2252 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2253 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_2242, _2243, _2244));
        float _4294 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2257 = _2234 * _2234;
        float _2261 = ((_2252 * _2252) * (_2257 + (-1.0))) + 1.0;
        float _2270 = (exp2(log2(1.0 - (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2271 = 1.0 - _2234;
        float _2281 = (0.5 / (((_2022 * ((_2248 * _2271) + _2234)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2271) + _2234) * _2248))) * _2248;
        float _4305 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2283 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2257 / ((_2261 * _2261) * 3.141590118408203125));
        float _2284 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
        _2209 = (((_2270 * cbLight._m0[_2219].x) * _2283) * _2284) + _2145;
        _2211 = (((_2270 * cbLight._m0[_2219].y) * _2283) * _2284) + _2146;
        _2213 = (((_2270 * cbLight._m0[_2219].z) * _2283) * _2284) + _2147;
    }
    float _2319;
    float _2321;
    float _2323;
    if (_1948)
    {
        _2319 = _2209;
        _2321 = _2211;
        _2323 = _2213;
    }
    else
    {
        uint _2330 = _1852 + 3u;
        uint _2334 = _1852 + 11u;
        float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2330].w)) * _608) * 0.949999988079071044921875);
        float _2349 = _2348 * _2348;
        float _2350 = cbLight._m0[_2330].x + _683;
        float _2351 = cbLight._m0[_2330].y + _684;
        float _2352 = cbLight._m0[_2330].z + _685;
        float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
        float _2357 = _2356 * _2350;
        float _2358 = _2356 * _2351;
        float _2359 = _2356 * _2352;
        float _2360 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_2330].xyz));
        float _4321 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2364 = dot(vec3(_605, _606, _607), vec3(_2357, _2358, _2359));
        float _4332 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2367 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _2368 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_2357, _2358, _2359));
        float _4343 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2372 = _2349 * _2349;
        float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
        float _2385 = (exp2(log2(1.0 - (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2386 = 1.0 - _2349;
        float _2396 = (0.5 / (((_2022 * ((_2363 * _2386) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2386) + _2349) * _2363))) * _2363;
        float _4354 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2398 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
        float _2399 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
        _2319 = (((_2385 * cbLight._m0[_2334].x) * _2398) * _2399) + _2209;
        _2321 = (((_2385 * cbLight._m0[_2334].y) * _2398) * _2399) + _2211;
        _2323 = (((_2385 * cbLight._m0[_2334].z) * _2398) * _2399) + _2213;
    }
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    float _2542;
    float _2544;
    if (_1850.y == 0u)
    {
        float _2474 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2475 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2474;
        float _2476 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2474;
        float _2477 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2474;
        uvec4 _2489 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2490 = _2489.x;
        uint _2501 = uint((float(_2489.y) * floor(float(uint(cbSceneParam._m0[85u].y * _705) / _2490))) + floor(float(uint(cbSceneParam._m0[85u].x * _704) / _2490)));
        float _2511 = (log2(_2477 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2512 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        uint _2515 = uint(isnan(14.0) ? _2512 : (isnan(_2512) ? 14.0 : min(_2512, 14.0)));
        uvec4 _2520 = texelFetch(g_lightClusterGridBuffer, int(((_2515 << 2u) + (_2501 << 6u)) >> 2u));
        uint _2521 = _2520.x;
        uint _2522 = _2489.z;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        if (((((1u << ((_2522 >> 4u) & 15u)) + 4294967295u) & _2521) == 0u) || ((_2522 & 240u) == 0u))
        {
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
            _2628 = 0.0;
            _2630 = 0.0;
            _2632 = 0.0;
        }
        else
        {
            float _2623;
            float _2625;
            float _2627;
            float _2629;
            float _2631;
            float _2633;
            float _2775 = 0.0;
            float _2776 = 0.0;
            float _2777 = 0.0;
            float _2778 = 0.0;
            float _2779 = 0.0;
            float _2780 = 0.0;
            uint _2781 = 0u;
            uint _2790;
            bool _2791;
            for (;;)
            {
                _2790 = texelFetch(g_lightClassification, int((((_2515 << 5u) + (_2501 << 9u)) + (_2781 << 2u)) >> 2u)).x;
                _2791 = _2790 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2791)
                {
                    frontier_phi_66_pred = _2775;
                    frontier_phi_66_pred_1 = _2780;
                    frontier_phi_66_pred_2 = _2779;
                    frontier_phi_66_pred_3 = _2778;
                    frontier_phi_66_pred_4 = _2777;
                    frontier_phi_66_pred_5 = _2776;
                }
                else
                {
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    uint _2926;
                    _2920 = _2775;
                    _2921 = _2776;
                    _2922 = _2777;
                    _2923 = _2778;
                    _2924 = _2779;
                    _2925 = _2780;
                    _2926 = _2790;
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    for (;;)
                    {
                        uint _2930 = uint(findLSB(_2926)) + (_2781 << 5u);
                        uint _2927 = (_2926 + 4294967295u) & _2926;
                        uint _2932 = _2930 * 48u;
                        vec4 _2946 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2932)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 3u)).x));
                        uint _2952 = (_2930 * 48u) + 4u;
                        vec4 _2965 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2952)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 3u)).x));
                        uint _2971 = (_2930 * 48u) + 8u;
                        vec3 _2982 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2971)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 2u)).x));
                        float _2986 = _2946.x - _2475;
                        float _2987 = _2946.y - _2476;
                        float _2988 = _2946.z - _2477;
                        float _2989 = dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988));
                        float _2992 = inversesqrt(_2989);
                        float _2993 = _2992 * _2986;
                        float _2994 = _2992 * _2987;
                        float _2995 = _2992 * _2988;
                        float _2996 = dot(vec3(_725, _728, _731), vec3(_2993, _2994, _2995));
                        float _3001 = 1.0 - (_2989 * _2946.w);
                        float _4380 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3002 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                        float _3003 = sqrt(_2989) * _2965.w;
                        float _3006 = 1.39999997615814208984375 / (_3003 + 1.39999997615814208984375);
                        float _3007 = _3006 * _3006;
                        float _3010 = ((1.0 - _3007) * _2996) + _3007;
                        float _3013 = _3003 * _3003;
                        float _3017 = ((isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0))) * _3002) / ((_3013 * 0.699999988079071044921875) + 1.0);
                        float _3021 = (-0.0) - _2475;
                        float _3022 = (-0.0) - _2476;
                        float _3023 = (-0.0) - _2477;
                        float _3027 = inversesqrt(dot(vec3(_3021, _3022, _3023), vec3(_3021, _3022, _3023)));
                        float _3028 = _3027 * _3021;
                        float _3029 = _3027 * _3022;
                        float _3030 = _3027 * _3023;
                        float _3038 = exp2(log2(1.0 / ((_3013 * 3.5) + 5.0)) * 0.25);
                        float _3039 = 1.0 - _785;
                        float _3046 = sqrt(1.0 - ((1.0 - (_3039 * _3039)) * (1.0 - (_3038 * _3038))));
                        float _3047 = _3046 * _3046;
                        float _3048 = _3047 * _3047;
                        float _3049 = _3028 + _2993;
                        float _3050 = _3029 + _2994;
                        float _3051 = _3030 + _2995;
                        float _3055 = inversesqrt(dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051)));
                        float _3059 = dot(vec3(_725, _728, _731), vec3(_3028, _3029, _3030));
                        float _4396 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3062 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                        float _3063 = dot(vec3(_725, _728, _731), vec3(_3055 * _3049, _3055 * _3050, _3055 * _3051));
                        float _4407 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3066 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                        float _3070 = ((_3066 * _3066) * (_3048 + (-1.0))) + 1.0;
                        float _3071 = _3006 * _3047;
                        float _3072 = _3071 * _3071;
                        float _3075 = ((1.0 - _3072) * _2996) + _3072;
                        float _4418 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3076 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                        float _3077 = 1.0 - _3047;
                        float _3087 = (0.5 / (((_3076 * ((_3062 * _3077) + _3047)) + 9.9999999392252902907785028219223e-09) + (((_3076 * _3077) + _3047) * _3062))) * _3076;
                        float _4429 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3098 = (((_3048 * 3.1415927410125732421875) * (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) / ((_3070 * _3070) * ((_3013 * 2.1991131305694580078125) + 3.141590118408203125))) * _3002;
                        _2850 = (_3017 * _2965.x) + _2923;
                        _2851 = (_3017 * _2965.y) + _2924;
                        _2852 = (_3017 * _2965.z) + _2925;
                        _2847 = (_3098 * _2982.x) + _2920;
                        _2848 = (_3098 * _2982.y) + _2921;
                        _2849 = (_3098 * _2982.z) + _2922;
                        if (_2927 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2920 = _2847;
                            _2921 = _2848;
                            _2922 = _2849;
                            _2923 = _2850;
                            _2924 = _2851;
                            _2925 = _2852;
                            _2926 = _2927;
                        }
                    }
                    frontier_phi_66_pred = _2847;
                    frontier_phi_66_pred_1 = _2852;
                    frontier_phi_66_pred_2 = _2851;
                    frontier_phi_66_pred_3 = _2850;
                    frontier_phi_66_pred_4 = _2849;
                    frontier_phi_66_pred_5 = _2848;
                }
                _2623 = frontier_phi_66_pred;
                _2633 = frontier_phi_66_pred_1;
                _2631 = frontier_phi_66_pred_2;
                _2629 = frontier_phi_66_pred_3;
                _2627 = frontier_phi_66_pred_4;
                _2625 = frontier_phi_66_pred_5;
                uint _2782 = _2781 + 1u;
                if (_2782 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2775 = _2623;
                    _2776 = _2625;
                    _2777 = _2627;
                    _2778 = _2629;
                    _2779 = _2631;
                    _2780 = _2633;
                    _2781 = _2782;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
            _2628 = _2629;
            _2630 = _2631;
            _2632 = _2633;
        }
        uvec4 _2636 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2637 = _2636.z;
        uint _2639 = (_2637 >> 8u) & 15u;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        if (((4294967295u << _2639) & _2521) == 0u)
        {
            _2743 = _2622;
            _2745 = _2624;
            _2747 = _2626;
            _2749 = _2628;
            _2751 = _2630;
            _2753 = _2632;
        }
        else
        {
            float _2768 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
            float _2769 = _2768 * _2475;
            float _2770 = _2768 * _2476;
            float _2771 = _2768 * _2477;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2639 < ((_2637 >> 12u) & 15u))
            {
                float _2744;
                float _2746;
                float _2748;
                float _2750;
                float _2752;
                float _2754;
                float _2903 = _2622;
                float _2904 = _2624;
                float _2905 = _2626;
                float _2906 = _2628;
                float _2907 = _2630;
                float _2908 = _2632;
                uint _2909 = _2639;
                uint _2918;
                bool _2919;
                for (;;)
                {
                    _2918 = texelFetch(g_lightClassification, int((((_2515 << 5u) + (_2501 << 9u)) + (_2909 << 2u)) >> 2u)).x;
                    _2919 = _2918 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2919)
                    {
                        frontier_phi_77_pred = _2908;
                        frontier_phi_77_pred_1 = _2907;
                        frontier_phi_77_pred_2 = _2906;
                        frontier_phi_77_pred_3 = _2905;
                        frontier_phi_77_pred_4 = _2904;
                        frontier_phi_77_pred_5 = _2903;
                    }
                    else
                    {
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3125 = _2903;
                        float _3126 = _2904;
                        float _3127 = _2905;
                        float _3128 = _2906;
                        float _3129 = _2907;
                        float _3130 = _2908;
                        uint _3131 = _2918;
                        uint _3132;
                        vec4 _3157;
                        float _3158;
                        vec4 _3173;
                        vec3 _3185;
                        vec4 _3201;
                        vec4 _3216;
                        float _3262;
                        bool _3263;
                        for (;;)
                        {
                            uint _3142 = ((_2909 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3131));
                            _3132 = (_3131 + 4294967295u) & _3131;
                            uint _3144 = _3142 * 40u;
                            _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            _3158 = _3157.w;
                            uint _3160 = (_3142 * 40u) + 4u;
                            _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            uint _3175 = (_3142 * 40u) + 8u;
                            _3185 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x));
                            uint _3188 = (_3142 * 40u) + 16u;
                            _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            uint _3203 = (_3142 * 40u) + 20u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            uint _3218 = (_3142 * 40u) + 24u;
                            vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            uint _3237 = (_3142 * 40u) + 28u;
                            vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            _3262 = fma(_2477, _3250.z, fma(_2476, _3250.y, _3250.x * _2475)) + _3250.w;
                            _3263 = !((fma(_2477, _3231.z, fma(_2476, _3231.y, _3231.x * _2475)) + _3231.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3263)
                            {
                                float _3290 = _3157.x - _2475;
                                float _3291 = _3157.y - _2476;
                                float _3292 = _3157.z - _2477;
                                float _3293 = dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292));
                                float _3296 = inversesqrt(_3293);
                                float _3297 = _3296 * _3290;
                                float _3298 = _3296 * _3291;
                                float _3299 = _3296 * _3292;
                                float _3303 = 1.0 - (_3293 / (_3158 * _3158));
                                float _4440 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                                float _3308 = sqrt(_3293) * _3173.w;
                                float _3310 = 1.39999997615814208984375 / (_3308 + 1.39999997615814208984375);
                                float _3311 = _3310 * _3310;
                                float _3314 = ((1.0 - _3311) * dot(vec3(_3297, _3298, _3299), vec3(_725, _728, _731))) + _3311;
                                float _3317 = _3308 * _3308;
                                float _3321 = (fma(_2477, _3201.z, fma(_2476, _3201.y, _3201.x * _2475)) + _3201.w) / _3262;
                                float _3322 = (fma(_2477, _3216.z, fma(_2476, _3216.y, _3216.x * _2475)) + _3216.w) / _3262;
                                float _3326 = 1.0 - dot(vec2(_3321, _3322), vec2(_3321, _3322));
                                float _4456 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3327 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                                float _3328 = _3327 * (((isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0))) * _3304) / ((_3317 * 0.699999988079071044921875) + 1.0));
                                float _3340 = exp2(log2(1.0 / ((_3317 * 3.5) + 5.0)) * 0.25);
                                float _3341 = 1.0 - _785;
                                float _3348 = sqrt(1.0 - ((1.0 - (_3341 * _3341)) * (1.0 - (_3340 * _3340))));
                                float _3349 = _3348 * _3348;
                                float _3350 = _3349 * _3349;
                                float _3351 = _3297 - _2769;
                                float _3352 = _3298 - _2770;
                                float _3353 = _3299 - _2771;
                                float _3357 = inversesqrt(dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353)));
                                float _3361 = dot(vec3(_725, _728, _731), vec3((-0.0) - _2769, (-0.0) - _2770, (-0.0) - _2771));
                                float _4467 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3364 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                                float _3365 = dot(vec3(_725, _728, _731), vec3(_3357 * _3351, _3357 * _3352, _3357 * _3353));
                                float _4478 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3368 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3372 = ((_3368 * _3368) * (_3350 + (-1.0))) + 1.0;
                                float _3373 = _3310 * _3349;
                                float _3374 = _3373 * _3373;
                                float _3380 = ((1.0 - _3374) * dot(vec3(_725, _728, _731), vec3(_3297, _3298, _3299))) + _3374;
                                float _4489 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3381 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                                float _3382 = 1.0 - _3349;
                                float _3392 = (0.5 / (((_3381 * ((_3364 * _3382) + _3349)) + 9.9999999392252902907785028219223e-09) + (((_3381 * _3382) + _3349) * _3364))) * _3381;
                                float _4500 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3402 = (_3327 * _3304) * (((_3350 * 3.1415927410125732421875) * (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) / ((_3372 * _3372) * ((_3317 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3328 * _3173.y;
                                frontier_phi_83_pred_1 = _3328 * _3173.x;
                                frontier_phi_83_pred_2 = _3402 * _3185.z;
                                frontier_phi_83_pred_3 = _3402 * _3185.y;
                                frontier_phi_83_pred_4 = _3402 * _3185.x;
                                frontier_phi_83_pred_5 = _3328 * _3173.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3410 = frontier_phi_83_pred;
                            _3409 = frontier_phi_83_pred_1;
                            _3408 = frontier_phi_83_pred_2;
                            _3407 = frontier_phi_83_pred_3;
                            _3406 = frontier_phi_83_pred_4;
                            _3411 = frontier_phi_83_pred_5;
                            _3115 = _3409 + _3128;
                            _3116 = _3410 + _3129;
                            _3117 = _3411 + _3130;
                            _3112 = _3406 + _3125;
                            _3113 = _3407 + _3126;
                            _3114 = _3408 + _3127;
                            if (_3132 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3132;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3117;
                        frontier_phi_77_pred_1 = _3116;
                        frontier_phi_77_pred_2 = _3115;
                        frontier_phi_77_pred_3 = _3114;
                        frontier_phi_77_pred_4 = _3113;
                        frontier_phi_77_pred_5 = _3112;
                    }
                    _2754 = frontier_phi_77_pred;
                    _2752 = frontier_phi_77_pred_1;
                    _2750 = frontier_phi_77_pred_2;
                    _2748 = frontier_phi_77_pred_3;
                    _2746 = frontier_phi_77_pred_4;
                    _2744 = frontier_phi_77_pred_5;
                    uint _2910 = _2909 + 1u;
                    if (_2910 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2903 = _2744;
                        _2904 = _2746;
                        _2905 = _2748;
                        _2906 = _2750;
                        _2907 = _2752;
                        _2908 = _2754;
                        _2909 = _2910;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2748;
                frontier_phi_58_59_ladder_1 = _2754;
                frontier_phi_58_59_ladder_2 = _2752;
                frontier_phi_58_59_ladder_3 = _2750;
                frontier_phi_58_59_ladder_4 = _2746;
                frontier_phi_58_59_ladder_5 = _2744;
            }
            else
            {
                frontier_phi_58_59_ladder = _2626;
                frontier_phi_58_59_ladder_1 = _2632;
                frontier_phi_58_59_ladder_2 = _2630;
                frontier_phi_58_59_ladder_3 = _2628;
                frontier_phi_58_59_ladder_4 = _2624;
                frontier_phi_58_59_ladder_5 = _2622;
            }
            _2743 = frontier_phi_58_59_ladder_5;
            _2745 = frontier_phi_58_59_ladder_4;
            _2747 = frontier_phi_58_59_ladder;
            _2749 = frontier_phi_58_59_ladder_3;
            _2751 = frontier_phi_58_59_ladder_2;
            _2753 = frontier_phi_58_59_ladder_1;
        }
        float _2758 = isnan(1.0) ? _769 : (isnan(_769) ? 1.0 : min(_769, 1.0));
        _2534 = (_2758 * _2749) + _1986;
        _2536 = (_2758 * _2751) + _1988;
        _2538 = (_2758 * _2753) + _1990;
        _2540 = ((_2743 * 0.039999999105930328369140625) * _2758) + _2319;
        _2542 = ((_2745 * 0.039999999105930328369140625) * _2758) + _2321;
        _2544 = ((_2747 * 0.039999999105930328369140625) * _2758) + _2323;
    }
    else
    {
        _2534 = _1986;
        _2536 = _1988;
        _2538 = _1990;
        _2540 = _2319;
        _2542 = _2321;
        _2544 = _2323;
    }
    float _4516 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4527 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4538 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _2561 = ((isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2534 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _769))) + ((_2540 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1605)) * cbPerFrame._m0[3u].x);
    float _2562 = ((isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2536 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _769))) + ((_2542 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1605)) * cbPerFrame._m0[3u].x);
    float _2563 = ((isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2538 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _769))) + ((_2544 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1605)) * cbPerFrame._m0[3u].x);
    uint _2564 = _247 + 6u;
    float _2572 = _704 / cbSceneParam._m0[86u].x;
    float _2573 = _705 / cbSceneParam._m0[86u].y;
    vec4 _2587 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2572, _2573, (log2((isnan(cbSceneParam._m0[77u].w) ? _626 : (isnan(_626) ? cbSceneParam._m0[77u].w : min(_626, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2589 = _2587.x;
    float _2590 = _2587.y;
    float _2591 = _2587.z;
    float _2592 = _2587.w;
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    if (_626 > cbSceneParam._m0[78u].w)
    {
        float _2647 = isnan(_626) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _626 : min(cbSceneParam._m0[80u].w, _626));
        float _2648 = _2647 / _626;
        float _2659 = _2648 * _676;
        float _2660 = _677 * _2648;
        float _2661 = (-0.0) - _2660;
        float _2663 = _2648 * _678;
        float _2665 = (cbSceneParam._m0[77u].w * _2661) / _2647;
        float _2666 = _2665 + cbSceneParam._m0[79u].w;
        float _2667 = cbSceneParam._m0[79u].w - _2660;
        float _2673 = sqrt(((_2659 * _2659) + (_2660 * _2660)) + (_2663 * _2663));
        float _2676 = (1.0 - (cbSceneParam._m0[77u].w / _2647)) * _2673;
        float _2681 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2683 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2860;
        if (abs((_2661 - _2665) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2860 = ((((_2666 > 0.0) ? exp2(_2681 * _2666) : (2.0 - exp2(_2683 * _2666))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2676;
        }
        else
        {
            float _2804 = 1.0 / cbSceneParam._m0[80u].x;
            float _2805 = isnan(_2667) ? _2666 : (isnan(_2666) ? _2667 : max(_2666, _2667));
            float _2806 = isnan(_2667) ? _2666 : (isnan(_2666) ? _2667 : min(_2666, _2667));
            float _2815 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : min(_2805, 0.0));
            float _2816 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : min(_2806, 0.0));
            _2860 = ((abs(_2673 / _2661) * cbSceneParam._m0[80u].y) * ((((_2815 - _2816) * 2.0) - ((exp2(_2681 * (isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0)))) - exp2(_2681 * (isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0))))) * _2804)) - ((exp2(_2683 * _2815) - exp2(_2683 * _2816)) * _2804))) + (_2676 * cbSceneParam._m0[80u].z);
        }
        vec4 _2862 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2572, _2573, 1.0), 0.0);
        float _2871 = exp2((_2860 * (-1.44269502162933349609375)) * (1.0 - _2862.w));
        float _2872 = log2(_2871);
        float _2888 = log2(_2592);
        _2685 = (exp2(_2888 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2872 * cbSceneParam._m0[78u].x)) * _2862.x) / cbSceneParam._m0[78u].x)) + _2589;
        _2687 = (exp2(_2888 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2872 * cbSceneParam._m0[78u].y)) * _2862.y) / cbSceneParam._m0[78u].y)) + _2590;
        _2689 = (exp2(_2888 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2872 * cbSceneParam._m0[78u].z)) * _2862.z) / cbSceneParam._m0[78u].z)) + _2591;
        _2691 = _2871 * _2592;
    }
    else
    {
        _2685 = _2589;
        _2687 = _2590;
        _2689 = _2591;
        _2691 = _2592;
    }
    bool _2898;
    vec4 _2701;
    vec4 _2723;
    float _2725;
    float _2729;
    float _2730;
    float _2731;
    float _2732;
    bool _2742;
    for (;;)
    {
        _2701 = cbMatDynParam._m0[0u];
        float _2703 = roundEven(_2701.y);
        bool _2704 = _2703 == 3.0;
        float _2705 = log2(_2691);
        float _2712 = exp2(_2705 * cbSceneParam._m0[78u].x) * _2561;
        float _2713 = exp2(_2705 * cbSceneParam._m0[78u].y) * _2562;
        float _2714 = exp2(_2705 * cbSceneParam._m0[78u].z) * _2563;
        float _2721 = _692 + (-0.5);
        _2723 = cbMtdParam._m0[1u];
        _2725 = _2723.y * _2721;
        float _2728 = (_2703 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2729 = _2728 * (_2704 ? _2712 : (_2712 + (cbSceneParam._m0[72u].w * _2685)));
        _2730 = _2728 * (_2704 ? _2713 : (_2713 + (cbSceneParam._m0[72u].w * _2687)));
        _2731 = _2728 * (_2704 ? _2714 : (_2714 + (cbSceneParam._m0[72u].w * _2689)));
        _2732 = _2721 * 0.999000012874603271484375;
        _2742 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2742)
        {
            if ((cbInstanceData._m0[_247 + 7u].x + _2732) < 0.5)
            {
                _2898 = true;
                break;
            }
        }
        uint _2839 = _744 + uint(_2701.w);
        if ((cbInstanceData._m0[_2839].w < 1.0) && ((cbInstanceData._m0[_2839].w + _2732) < 0.5))
        {
            _2898 = true;
            break;
        }
        if ((_2725 + 1.0) < _2723.x)
        {
            _2898 = true;
            break;
        }
        _2898 = false;
        break;
    }
    float _3103;
    if (_2898)
    {
        discard_state = true;
        _3103 = 0.0;
    }
    else
    {
        _3103 = cbInstanceData._m0[_2564].w;
    }
    SV_Target.x = _2729;
    SV_Target.y = _2730;
    SV_Target.z = _2731;
    SV_Target.w = _3103;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2564].w;
    discard_exit();
}


