#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1083;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _237 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _237 + 1u;
    uint _246 = _237 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_237].x * cbInstanceData._m0[_237].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _276 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _282 = _276.x * cbMtdParam._m0[9u].x;
    float _283 = _276.y * cbMtdParam._m0[9u].y;
    float _284 = _276.z * cbMtdParam._m0[9u].z;
    vec4 _303 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _256) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _257) + cbTextureTilingScale._m0[14u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _327 = _323.z;
    float _332 = (_323.x * 2.0) + (-1.0);
    float _334 = (_323.y * 2.0) + (-1.0);
    float _335 = dot(vec2(_332, _334), vec2(_332, _334));
    float _3415 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _341 = sqrt(1.0 - (isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))));
    vec4 _358 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _360 = _358.x;
    float _361 = 1.0 - _360;
    float _370 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _373 = ((isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : min(_370, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _382 = (_373 - ((((((_360 - _361) * cbMtdParam._m0[24u].z) + _361) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _373))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3436 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
    float _390 = (_383 * ((_303.x * cbMtdParam._m0[18u].x) - _282)) + _282;
    float _391 = (_383 * ((_303.y * cbMtdParam._m0[18u].y) - _283)) + _283;
    float _392 = (_383 * ((_303.z * cbMtdParam._m0[18u].z) - _284)) + _284;
    vec4 _405 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _256) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _257) + cbTextureTilingScale._m0[19u].w));
    float _407 = _405.x;
    float _408 = 1.0 - _407;
    float _437 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_407 - _408) * cbMtdParam._m0[24u].w) + _408) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3447 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _438 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _446 = ((((cbMtdParam._m0[10u].x - _390) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _438) + _390;
    float _447 = ((((cbMtdParam._m0[10u].y - _391) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _438) + _391;
    float _448 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _392)) * _438) + _392;
    vec4 _462 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _469 = (_462.x * 2.0) + (-1.0);
    float _470 = (_462.y * 2.0) + (-1.0);
    float _471 = dot(vec2(_469, _470), vec2(_469, _470));
    float _3458 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _479 = (_383 * (_462.z - _327)) + _327;
    float _482 = ((cbMtdParam._m0[23u].y - _479) * _438) + _479;
    vec4 _504 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _256) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _257) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _510 = (_504.x * 2.0) + (-1.0);
    float _511 = (_504.y * 2.0) + (-1.0);
    float _512 = dot(vec2(_510, _511), vec2(_510, _511));
    float _3469 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _529 = (((_469 - _332) + (cbMtdParam._m0[21u].x * _332)) * _383) + _332;
    float _530 = (((_470 - _334) + (cbMtdParam._m0[21u].x * _334)) * _383) + _334;
    float _531 = (_383 * (sqrt(1.0 - (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0)))) - _341)) + _341;
    float _542 = (((_510 - _529) + (_529 * cbMtdParam._m0[22u].z)) * _438) + _529;
    float _543 = (((_511 - _530) + (_530 * cbMtdParam._m0[22u].z)) * _438) + _530;
    float _544 = ((sqrt(1.0 - (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0)))) - _531) * _438) + _531;
    float _546 = cbMtdParam._m0[22u].x + _323.w;
    float _549 = fma(_544, _224 * NORMAL.x, fma(_543, _231 * TANGENT.x, (_217 * _209) * _542));
    float _552 = fma(_544, _224 * NORMAL.y, fma(_543, _231 * TANGENT.y, (_217 * _210) * _542));
    float _555 = fma(_544, _224 * NORMAL.z, fma(_543, _231 * TANGENT.z, (_217 * _211) * _542));
    float _559 = inversesqrt(dot(vec3(_549, _552, _555), vec3(_549, _552, _555)));
    float _560 = _559 * _549;
    float _561 = _559 * _552;
    float _562 = _559 * _555;
    float _3480 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _563 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _3491 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3502 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3513 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3524 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _581 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _621 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _631 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _621);
    float _632 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _621);
    float _633 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _621);
    float _637 = inversesqrt(dot(vec3(_631, _632, _633), vec3(_631, _632, _633)));
    float _638 = _631 * _637;
    float _639 = _632 * _637;
    float _640 = _633 * _637;
    float _646 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _647 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _668 = fma(_562, cbSceneParam._m0[5u].z, fma(_561, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _560));
    float _671 = fma(_562, cbSceneParam._m0[6u].z, fma(_561, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _560));
    float _674 = fma(_562, cbSceneParam._m0[7u].z, fma(_561, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _560));
    uint _688 = (_237 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _694 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0)))) * cbInstanceData._m0[_688].x;
    float _695 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) * cbInstanceData._m0[_688].y;
    float _696 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0)))) * cbInstanceData._m0[_688].z;
    float _3535 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _697 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _3546 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _698 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _3557 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _699 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    vec4 _708 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _646, cbSceneParam._m0[86u].y * _647));
    float _712 = ((isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) * TEXCOORD_5.w) * _708.x;
    float _713 = dot(vec3(_560, _561, _562), vec3(_638, _639, _640));
    float _716 = _713 * 2.0;
    float _720 = (_716 * _560) - _638;
    float _721 = (_716 * _561) - _639;
    float _722 = (_716 * _562) - _640;
    float _726 = abs(dot(vec3(_638, _639, _640), vec3(_560, _561, _562)));
    float _3568 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _728 = sqrt(_563);
    float _741 = exp2((_728 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_728 * 3.0));
    float _773 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _777 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1082;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _807 = fma(_781, cbModelParam._m0[26u].z, fma(_777, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _773));
        float _811 = fma(_781, cbModelParam._m0[27u].z, fma(_777, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _773));
        float _815 = fma(_781, cbModelParam._m0[28u].z, fma(_777, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _773));
        float _840 = _773 + _560;
        float _841 = _777 + _561;
        float _842 = _781 + _562;
        float _852 = fma(_842, cbModelParam._m0[26u].z, fma(_841, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _840)) - _807;
        float _853 = fma(_842, cbModelParam._m0[27u].z, fma(_841, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _840)) - _811;
        float _854 = fma(_842, cbModelParam._m0[28u].z, fma(_841, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _840)) - _815;
        float _858 = inversesqrt(dot(vec3(_852, _853, _854), vec3(_852, _853, _854)));
        float _871 = ((_858 * _852) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_807 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _872 = ((_858 * _853) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_811 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _873 = ((_858 * _854) / cbModelParam._m0[34u].z) + ((((((_815 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_871, _872, _873), 0.0);
        float _910 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_876.x + (-0.5));
        float _912 = _910 * (_876.y + (-0.5));
        float _913 = _910 * (_876.z + (-0.5));
        float _920 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_883.x + (-0.5));
        float _922 = _920 * (_883.y + (-0.5));
        float _923 = _920 * (_883.z + (-0.5));
        float _930 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_890.x + (-0.5));
        float _932 = _930 * (_890.y + (-0.5));
        float _933 = _930 * (_890.z + (-0.5));
        float _940 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_897.x + (-0.5));
        float _942 = _940 * (_897.y + (-0.5));
        float _943 = _940 * (_897.z + (-0.5));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = _911 * 0.5;
        float _948 = _921 * 0.5;
        float _949 = _931 * 0.5;
        float _950 = dot(vec3(_947, _948, _949), vec3(_947, _948, _949));
        float _955 = (_950 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_950);
        float _964 = (dot(vec3(_560, _561, _562), vec3(_955 * _947, _955 * _948, _955 * _949)) + 1.0) * 0.5;
        float _3594 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _974 = sqrt(((_948 * _948) + (_947 * _947)) + (_949 * _949)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3605 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _976 = _975 * 2.0;
        float _980 = (1.0 - _975) / (_975 + 1.0);
        float _3616 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _990 = ((((1.0 - _981) * (_976 + 2.0)) * exp2(log2(isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) * (_976 + 1.0))) + _981) * _944;
        float _991 = _912 * 0.5;
        float _992 = _922 * 0.5;
        float _993 = _932 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1007 = (dot(vec3(_560, _561, _562), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3627 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1016 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3638 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1018 = _1017 * 2.0;
        float _1022 = (1.0 - _1017) / (_1017 + 1.0);
        float _3649 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1032 = ((((1.0 - _1023) * (_1018 + 2.0)) * exp2(log2(isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_1018 + 1.0))) + _1023) * _945;
        float _1033 = _913 * 0.5;
        float _1034 = _923 * 0.5;
        float _1035 = _933 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1049 = (dot(vec3(_560, _561, _562), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3660 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1058 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3671 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3682 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1060 + 1.0))) + _1065) * _946;
        _1082 = _913;
        _1084 = _912;
        _1085 = _911;
        _1086 = _923;
        _1087 = _922;
        _1088 = _921;
        _1089 = _933;
        _1090 = _932;
        _1091 = _931;
        _1092 = _946;
        _1093 = _945;
        _1094 = _944;
        _1095 = cbModelParam._m0[36u].z * (isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)));
        _1096 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)));
        _1097 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
    }
    else
    {
        _1082 = _1083;
        _1084 = _1083;
        _1085 = _1083;
        _1086 = _1083;
        _1087 = _1083;
        _1088 = _1083;
        _1089 = _1083;
        _1090 = _1083;
        _1091 = _1083;
        _1092 = _1083;
        _1093 = _1083;
        _1094 = _1083;
        _1095 = 0.0;
        _1096 = 0.0;
        _1097 = 0.0;
    }
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1122 = fma(_781, cbModelParam._m0[30u].z, fma(_777, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _773));
        float _1126 = fma(_781, cbModelParam._m0[31u].z, fma(_777, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _773));
        float _1130 = fma(_781, cbModelParam._m0[32u].z, fma(_777, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _773));
        float _1153 = _773 + _560;
        float _1154 = _777 + _561;
        float _1155 = _781 + _562;
        float _1165 = fma(_1155, cbModelParam._m0[30u].z, fma(_1154, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1153)) - _1122;
        float _1166 = fma(_1155, cbModelParam._m0[31u].z, fma(_1154, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1153)) - _1126;
        float _1167 = fma(_1155, cbModelParam._m0[32u].z, fma(_1154, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1153)) - _1130;
        float _1171 = inversesqrt(dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167)));
        float _1184 = ((_1171 * _1165) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1122 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1171 * _1166) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1126 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1171 * _1167) / cbModelParam._m0[35u].z) + ((((((_1130 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        float _1221 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1188.x + (-0.5));
        float _1223 = _1221 * (_1188.y + (-0.5));
        float _1224 = _1221 * (_1188.z + (-0.5));
        float _1231 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1195.x + (-0.5));
        float _1233 = _1231 * (_1195.y + (-0.5));
        float _1234 = _1231 * (_1195.z + (-0.5));
        float _1241 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1202.x + (-0.5));
        float _1243 = _1241 * (_1202.y + (-0.5));
        float _1244 = _1241 * (_1202.z + (-0.5));
        float _1251 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1209.x + (-0.5));
        float _1253 = _1251 * (_1209.y + (-0.5));
        float _1254 = _1251 * (_1209.z + (-0.5));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = _1222 * 0.5;
        float _1259 = _1232 * 0.5;
        float _1260 = _1242 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_560, _561, _562), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3745 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1285 + 1.0))) + _1290) * _1255;
        float _1300 = _1223 * 0.5;
        float _1301 = _1233 * 0.5;
        float _1302 = _1243 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_560, _561, _562), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _3778 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1327 + 1.0))) + _1332) * _1256;
        float _1342 = _1224 * 0.5;
        float _1343 = _1234 * 0.5;
        float _1344 = _1244 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_560, _561, _562), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _3811 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1369 + 1.0))) + _1374) * _1257;
        _1391 = _1224;
        _1392 = _1223;
        _1393 = _1222;
        _1394 = _1234;
        _1395 = _1233;
        _1396 = _1232;
        _1397 = _1244;
        _1398 = _1243;
        _1399 = _1242;
        _1400 = _1257;
        _1401 = _1256;
        _1402 = _1255;
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
    }
    else
    {
        _1391 = _1083;
        _1392 = _1083;
        _1393 = _1083;
        _1394 = _1083;
        _1395 = _1083;
        _1396 = _1083;
        _1397 = _1083;
        _1398 = _1083;
        _1399 = _1083;
        _1400 = _1083;
        _1401 = _1083;
        _1402 = _1083;
        _1403 = 0.0;
        _1404 = 0.0;
        _1405 = 0.0;
    }
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1095)) + _1095;
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1096)) + _1096;
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1097)) + _1097;
    float _1438 = fma(_1417, cbSceneParam._m0[89u].z, fma(_1416, cbSceneParam._m0[89u].y, _1415 * cbSceneParam._m0[89u].x));
    float _1441 = fma(_1417, cbSceneParam._m0[90u].z, fma(_1416, cbSceneParam._m0[90u].y, _1415 * cbSceneParam._m0[90u].x));
    float _1444 = fma(_1417, cbSceneParam._m0[91u].z, fma(_1416, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1415));
    float _1459 = _720 * 0.5;
    float _1460 = _721 * 0.5;
    float _1461 = _722 * 0.5;
    float _1462 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1465 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1468 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1502;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1475 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1082, _1086, _1089, _1092));
        float _1479 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1084, _1087, _1090, _1093));
        float _1483 = dot(vec4(_1459, _1460, _1461, 1.0), vec4(_1085, _1088, _1091, _1094));
        float _1490 = dot(vec4(cbModelParam._m0[39u]), vec4(_1459, _1460, _1461, 1.0));
        _1502 = dot(vec3(isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1490) ? 0.0 : (isnan(0.0) ? _1490 : max(0.0, _1490))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1502 = 1.0;
    }
    float _1513;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1504 = dot(vec4(cbModelParam._m0[40u]), vec4(_1459, _1460, _1461, 1.0));
        _1513 = dot(vec3(isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1504) ? 0.0 : (isnan(0.0) ? _1504 : max(0.0, _1504))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1513 = 1.0;
    }
    float _1517 = (_1513 * cbModelParam._m0[1u].x) + (_1502 * (1.0 - cbModelParam._m0[1u].x));
    float _1527 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _563);
    float _1528 = isnan(_1527) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1527 : min(cbModelParam._m0[25u].z, _1527));
    float _1608;
    float _1610;
    float _1612;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1575 = fma(_781, cbModelParam._m0[13u].z, fma(_777, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _773)) + cbModelParam._m0[13u].w;
        float _1579 = fma(_781, cbModelParam._m0[14u].z, fma(_777, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _773)) + cbModelParam._m0[14u].w;
        float _1583 = fma(_781, cbModelParam._m0[15u].z, fma(_777, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _773)) + cbModelParam._m0[15u].w;
        float _1586 = fma(_722, cbModelParam._m0[13u].z, fma(_721, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _720));
        float _1589 = fma(_722, cbModelParam._m0[14u].z, fma(_721, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _720));
        float _1592 = fma(_722, cbModelParam._m0[15u].z, fma(_721, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _720));
        float _1620;
        if (_1586 > 0.0)
        {
            _1620 = abs((1.0 - _1575) / _1586);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1575 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1620 = frontier_phi_14_12_ladder;
        }
        float _1843;
        if (_1589 > 0.0)
        {
            _1843 = abs((1.0 - _1579) / _1589);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1579 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1843 = frontier_phi_23_19_ladder;
        }
        float _2089;
        if (_1592 > 0.0)
        {
            _2089 = abs((1.0 - _1583) / _1592);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1583 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2089 = frontier_phi_35_30_ladder;
        }
        float _2091 = isnan(_1843) ? _1620 : (isnan(_1620) ? _1843 : min(_1620, _1843));
        float _2092 = isnan(_2089) ? _2091 : (isnan(_2091) ? _2089 : min(_2091, _2089));
        float _2096 = (_2092 * _1586) + _1575;
        float _2097 = (_2092 * _1589) + _1579;
        float _2098 = (_2092 * _1592) + _1583;
        float _2099 = _2092 * 9.9999997473787516355514526367188e-05;
        float _2101 = (-1.0) - _2099;
        float _2103 = _2099 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2098 > _2103) || ((_2098 < _2101) || ((_2097 > _2103) || ((_2097 < _2101) || ((_2096 < _2101) || (_2096 > _2103))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2222 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2098, cbModelParam._m0[9u].z, fma(_2097, cbModelParam._m0[9u].y, _2096 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2098, cbModelParam._m0[10u].z, fma(_2097, cbModelParam._m0[10u].y, _2096 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2098, cbModelParam._m0[11u].z, fma(_2097, cbModelParam._m0[11u].y, _2096 * cbModelParam._m0[11u].x))), _1528);
            frontier_phi_13_35_ladder = _2222.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2222.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2222.x * cbModelParam._m0[1u].y;
        }
        _1608 = frontier_phi_13_35_ladder_2;
        _1610 = frontier_phi_13_35_ladder_1;
        _1612 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1596 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_720, _721, _722), _1528);
        _1608 = _1596.x * cbModelParam._m0[1u].y;
        _1610 = _1596.y * cbModelParam._m0[1u].y;
        _1612 = _1596.z * cbModelParam._m0[1u].y;
    }
    float _1616 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _563);
    float _1617 = isnan(_1616) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1616 : min(cbModelParam._m0[25u].w, _1616));
    float _1706;
    float _1708;
    float _1710;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1670 = fma(_781, cbModelParam._m0[21u].z, fma(_777, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _773)) + cbModelParam._m0[21u].w;
        float _1674 = fma(_781, cbModelParam._m0[22u].z, fma(_777, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _773)) + cbModelParam._m0[22u].w;
        float _1678 = fma(_781, cbModelParam._m0[23u].z, fma(_777, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _773)) + cbModelParam._m0[23u].w;
        float _1681 = fma(_722, cbModelParam._m0[21u].z, fma(_721, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _720));
        float _1684 = fma(_722, cbModelParam._m0[22u].z, fma(_721, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _720));
        float _1687 = fma(_722, cbModelParam._m0[23u].z, fma(_721, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _720));
        float _1848;
        if (_1681 > 0.0)
        {
            _1848 = abs((1.0 - _1670) / _1681);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1670 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1848 = frontier_phi_25_21_ladder;
        }
        float _2116;
        if (_1684 > 0.0)
        {
            _2116 = abs((1.0 - _1674) / _1684);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1674 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2116 = frontier_phi_37_32_ladder;
        }
        float _2321;
        if (_1687 > 0.0)
        {
            _2321 = abs((1.0 - _1678) / _1687);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1678 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2321 = frontier_phi_46_43_ladder;
        }
        float _2323 = isnan(_2116) ? _1848 : (isnan(_1848) ? _2116 : min(_1848, _2116));
        float _2324 = isnan(_2321) ? _2323 : (isnan(_2323) ? _2321 : min(_2323, _2321));
        float _2328 = (_2324 * _1681) + _1670;
        float _2329 = (_2324 * _1684) + _1674;
        float _2330 = (_2324 * _1687) + _1678;
        float _2331 = _2324 * 9.9999997473787516355514526367188e-05;
        float _2332 = (-1.0) - _2331;
        float _2334 = _2331 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2330 > _2334) || ((_2330 < _2332) || ((_2329 > _2334) || ((_2329 < _2332) || ((_2328 < _2332) || (_2328 > _2334))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2529 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2330, cbModelParam._m0[17u].z, fma(_2329, cbModelParam._m0[17u].y, _2328 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2330, cbModelParam._m0[18u].z, fma(_2329, cbModelParam._m0[18u].y, _2328 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2330, cbModelParam._m0[19u].z, fma(_2329, cbModelParam._m0[19u].y, _2328 * cbModelParam._m0[19u].x))), _1617);
            frontier_phi_22_46_ladder = _2529.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2529.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2529.x * cbModelParam._m0[1u].z;
        }
        _1706 = frontier_phi_22_46_ladder_2;
        _1708 = frontier_phi_22_46_ladder_1;
        _1710 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1690 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_720, _721, _722), _1617);
        _1706 = _1690.x * cbModelParam._m0[1u].z;
        _1708 = _1690.y * cbModelParam._m0[1u].z;
        _1710 = _1690.z * cbModelParam._m0[1u].z;
    }
    float _1722 = ((((1.0 - _741) * ((_728 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_741 * _728)) * _712;
    float _1723 = _1722 * ((cbModelParam._m0[1u].w * (_1706 - _1608)) + _1608);
    float _1724 = _1722 * ((cbModelParam._m0[1u].w * (_1708 - _1610)) + _1610);
    float _1725 = _1722 * ((cbModelParam._m0[1u].w * (_1710 - _1612)) + _1612);
    float _1728 = fma(_1725, cbSceneParam._m0[89u].z, fma(_1724, cbSceneParam._m0[89u].y, _1723 * cbSceneParam._m0[89u].x));
    float _1731 = fma(_1725, cbSceneParam._m0[90u].z, fma(_1724, cbSceneParam._m0[90u].y, _1723 * cbSceneParam._m0[90u].x));
    float _1734 = fma(_1725, cbSceneParam._m0[91u].z, fma(_1724, cbSceneParam._m0[91u].y, _1723 * cbSceneParam._m0[91u].x));
    vec4 _1742 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_646, _647));
    float _1744 = _1742.w;
    float _1756 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1744);
    float _1757 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1744);
    float _1758 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1744);
    uvec4 _1762 = floatBitsToUint(cbInstanceData._m0[_237 + 5u]);
    uint _1764 = _1762.x * 14u;
    uint _1765 = _1764 + 13u;
    float _1772 = _712 + (-1.0);
    float _1777 = (cbLight._m0[_1765].x * _1772) + 1.0;
    float _1778 = (cbLight._m0[_1765].y * _1772) + 1.0;
    float _1779 = (cbLight._m0[_1765].z * _1772) + 1.0;
    float _1780 = (cbLight._m0[_1765].w * _1772) + 1.0;
    uint _1781 = _1764 + 5u;
    float _1787 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
    uint _1791 = _1764 + 4u;
    float _1801 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
    uint _1805 = _1764 | 1u;
    float _1816 = dot(vec3(cbLight._m0[_1764].xyz), vec3(_560, _561, _562));
    float _1819 = dot(vec3(cbLight._m0[_1805].xyz), vec3(_560, _561, _562));
    float _3947 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _3958 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1824 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * 0.3183098733425140380859375;
    float _1826 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * 0.3183098733425140380859375;
    float _1833 = ((cbLight._m0[_1781].x * _1787) * _1826) + (((cbLight._m0[_1791].x * _1756) * _1801) * _1824);
    float _1834 = ((_1787 * cbLight._m0[_1781].y) * _1826) + (((cbLight._m0[_1791].y * _1757) * _1801) * _1824);
    float _1835 = ((_1787 * cbLight._m0[_1781].z) * _1826) + (((cbLight._m0[_1791].z * _1758) * _1801) * _1824);
    uvec4 _1840 = floatBitsToUint(cbLight._m0[_1764 + 12u]);
    bool _1842 = _1840.x == 0u;
    float _1853;
    float _1855;
    float _1857;
    if (_1842)
    {
        _1853 = _1833;
        _1855 = _1834;
        _1857 = _1835;
    }
    else
    {
        uint _1861 = _1764 + 6u;
        float _1877 = (dot(vec3(cbLight._m0[_1764 + 2u].xyz), vec3(_560, _561, _562)) * 0.5) + 0.5;
        float _1878 = _1877 * _1877;
        float _3969 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1879 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1880 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
        _1853 = (((cbLight._m0[_1861].x * 0.3183098733425140380859375) * _1879) * _1880) + _1833;
        _1855 = (((cbLight._m0[_1861].y * 0.3183098733425140380859375) * _1879) * _1880) + _1834;
        _1857 = (((cbLight._m0[_1861].z * 0.3183098733425140380859375) * _1879) * _1880) + _1835;
    }
    bool _1860 = _1840.y == 0u;
    float _1898;
    float _1900;
    float _1902;
    if (_1860)
    {
        _1898 = _1853;
        _1900 = _1855;
        _1902 = _1857;
    }
    else
    {
        uint _2060 = _1764 + 7u;
        float _2076 = (dot(vec3(cbLight._m0[_1764 + 3u].xyz), vec3(_560, _561, _562)) * 0.5) + 0.5;
        float _2077 = _2076 * _2076;
        float _3985 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2078 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _2079 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _1898 = (((cbLight._m0[_2060].x * 0.3183098733425140380859375) * _2078) * _2079) + _1853;
        _1900 = (((cbLight._m0[_2060].y * 0.3183098733425140380859375) * _2078) * _2079) + _1855;
        _1902 = (((cbLight._m0[_2060].z * 0.3183098733425140380859375) * _2078) * _2079) + _1857;
    }
    uint _1905 = _1764 + 8u;
    float _1918 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1764].w)) * _563) * 0.949999988079071044921875);
    float _1919 = _1918 * _1918;
    float _1920 = cbLight._m0[_1764].x + _638;
    float _1921 = cbLight._m0[_1764].y + _639;
    float _1922 = cbLight._m0[_1764].z + _640;
    float _1926 = inversesqrt(dot(vec3(_1920, _1921, _1922), vec3(_1920, _1921, _1922)));
    float _1927 = _1926 * _1920;
    float _1928 = _1926 * _1921;
    float _1929 = _1926 * _1922;
    float _1930 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_1764].xyz));
    float _4001 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1933 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _4012 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _1934 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _1935 = dot(vec3(_560, _561, _562), vec3(_1927, _1928, _1929));
    float _4023 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1938 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _1939 = dot(vec3(cbLight._m0[_1764].xyz), vec3(_1927, _1928, _1929));
    float _4034 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1943 = _1919 * _1919;
    float _1947 = ((_1938 * _1938) * (_1943 + (-1.0))) + 1.0;
    float _1958 = (exp2(log2(1.0 - (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1959 = 1.0 - _1919;
    float _1970 = (0.5 / (((_1934 * ((_1933 * _1959) + _1919)) + 9.9999999392252902907785028219223e-09) + (((_1934 * _1959) + _1919) * _1933))) * _1933;
    float _4045 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1972 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1943 / ((_1947 * _1947) * 3.141590118408203125));
    uint _1986 = _1764 + 9u;
    float _1997 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1805].w)) * _563) * 0.949999988079071044921875);
    float _1998 = _1997 * _1997;
    float _1999 = cbLight._m0[_1805].x + _638;
    float _2000 = cbLight._m0[_1805].y + _639;
    float _2001 = cbLight._m0[_1805].z + _640;
    float _2005 = inversesqrt(dot(vec3(_1999, _2000, _2001), vec3(_1999, _2000, _2001)));
    float _2006 = _2005 * _1999;
    float _2007 = _2005 * _2000;
    float _2008 = _2005 * _2001;
    float _2009 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_1805].xyz));
    float _4056 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2012 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _2013 = dot(vec3(_560, _561, _562), vec3(_2006, _2007, _2008));
    float _4067 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2016 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _2017 = dot(vec3(cbLight._m0[_1805].xyz), vec3(_2006, _2007, _2008));
    float _4078 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2021 = _1998 * _1998;
    float _2025 = ((_2016 * _2016) * (_2021 + (-1.0))) + 1.0;
    float _2034 = (exp2(log2(1.0 - (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2035 = 1.0 - _1998;
    float _2045 = (0.5 / (((_1934 * ((_2012 * _2035) + _1998)) + 9.9999999392252902907785028219223e-09) + (((_1934 * _2035) + _1998) * _2012))) * _2012;
    float _4089 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2047 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_2021 / ((_2025 * _2025) * 3.141590118408203125));
    float _2057 = (((_2034 * cbLight._m0[_1986].x) * _2047) * _1787) + ((((cbLight._m0[_1905].x * _1756) * _1958) * _1972) * _1801);
    float _2058 = (((_2034 * cbLight._m0[_1986].y) * _2047) * _1787) + ((((cbLight._m0[_1905].y * _1757) * _1958) * _1972) * _1801);
    float _2059 = (((_2034 * cbLight._m0[_1986].z) * _2047) * _1787) + ((((cbLight._m0[_1905].z * _1758) * _1958) * _1972) * _1801);
    float _2121;
    float _2123;
    float _2125;
    if (_1842)
    {
        _2121 = _2057;
        _2123 = _2058;
        _2125 = _2059;
    }
    else
    {
        uint _2127 = _1764 + 2u;
        uint _2131 = _1764 + 10u;
        float _2145 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _563) * 0.949999988079071044921875);
        float _2146 = _2145 * _2145;
        float _2147 = cbLight._m0[_2127].x + _638;
        float _2148 = cbLight._m0[_2127].y + _639;
        float _2149 = cbLight._m0[_2127].z + _640;
        float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
        float _2154 = _2153 * _2147;
        float _2155 = _2153 * _2148;
        float _2156 = _2153 * _2149;
        float _2157 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_2127].xyz));
        float _4100 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2160 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2161 = dot(vec3(_560, _561, _562), vec3(_2154, _2155, _2156));
        float _4111 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2164 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _2165 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2154, _2155, _2156));
        float _4122 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2169 = _2146 * _2146;
        float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
        float _2182 = (exp2(log2(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2183 = 1.0 - _2146;
        float _2193 = (0.5 / (((_1934 * ((_2160 * _2183) + _2146)) + 9.9999999392252902907785028219223e-09) + (((_1934 * _2183) + _2146) * _2160))) * _2160;
        float _4133 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2195 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
        float _2196 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
        _2121 = (((_2182 * cbLight._m0[_2131].x) * _2195) * _2196) + _2057;
        _2123 = (((_2182 * cbLight._m0[_2131].y) * _2195) * _2196) + _2058;
        _2125 = (((_2182 * cbLight._m0[_2131].z) * _2195) * _2196) + _2059;
    }
    float _2231;
    float _2233;
    float _2235;
    if (_1860)
    {
        _2231 = _2121;
        _2233 = _2123;
        _2235 = _2125;
    }
    else
    {
        uint _2242 = _1764 + 3u;
        uint _2246 = _1764 + 11u;
        float _2260 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2242].w)) * _563) * 0.949999988079071044921875);
        float _2261 = _2260 * _2260;
        float _2262 = cbLight._m0[_2242].x + _638;
        float _2263 = cbLight._m0[_2242].y + _639;
        float _2264 = cbLight._m0[_2242].z + _640;
        float _2268 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
        float _2269 = _2268 * _2262;
        float _2270 = _2268 * _2263;
        float _2271 = _2268 * _2264;
        float _2272 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_2242].xyz));
        float _4149 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2275 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2276 = dot(vec3(_560, _561, _562), vec3(_2269, _2270, _2271));
        float _4160 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _2280 = dot(vec3(cbLight._m0[_2242].xyz), vec3(_2269, _2270, _2271));
        float _4171 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2284 = _2261 * _2261;
        float _2288 = ((_2279 * _2279) * (_2284 + (-1.0))) + 1.0;
        float _2297 = (exp2(log2(1.0 - (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2298 = 1.0 - _2261;
        float _2308 = (0.5 / (((_1934 * ((_2275 * _2298) + _2261)) + 9.9999999392252902907785028219223e-09) + (((_1934 * _2298) + _2261) * _2275))) * _2275;
        float _4182 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2310 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_2284 / ((_2288 * _2288) * 3.141590118408203125));
        float _2311 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _2231 = (((_2297 * cbLight._m0[_2246].x) * _2310) * _2311) + _2121;
        _2233 = (((_2297 * cbLight._m0[_2246].y) * _2310) * _2311) + _2123;
        _2235 = (((_2297 * cbLight._m0[_2246].z) * _2310) * _2311) + _2125;
    }
    float _2446;
    float _2448;
    float _2450;
    float _2452;
    float _2454;
    float _2456;
    if (_1762.y == 0u)
    {
        float _2386 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2387 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2386;
        float _2388 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2386;
        float _2389 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2386;
        uvec4 _2401 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2402 = _2401.x;
        uint _2413 = uint((float(_2401.y) * floor(float(uint(cbSceneParam._m0[85u].y * _647) / _2402))) + floor(float(uint(cbSceneParam._m0[85u].x * _646) / _2402)));
        float _2423 = (log2(_2389 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2424 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        uint _2427 = uint(isnan(14.0) ? _2424 : (isnan(_2424) ? 14.0 : min(_2424, 14.0)));
        uvec4 _2432 = texelFetch(g_lightClusterGridBuffer, int(((_2427 << 2u) + (_2413 << 6u)) >> 2u));
        uint _2433 = _2432.x;
        uint _2434 = _2401.z;
        float _2534;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        if (((((1u << ((_2434 >> 4u) & 15u)) + 4294967295u) & _2433) == 0u) || ((_2434 & 240u) == 0u))
        {
            _2534 = 0.0;
            _2536 = 0.0;
            _2538 = 0.0;
            _2540 = 0.0;
            _2542 = 0.0;
            _2544 = 0.0;
        }
        else
        {
            float _2535;
            float _2537;
            float _2539;
            float _2541;
            float _2543;
            float _2545;
            float _2679 = 0.0;
            float _2680 = 0.0;
            float _2681 = 0.0;
            float _2682 = 0.0;
            float _2683 = 0.0;
            float _2684 = 0.0;
            uint _2685 = 0u;
            uint _2694;
            bool _2695;
            for (;;)
            {
                _2694 = texelFetch(g_lightClassification, int((((_2427 << 5u) + (_2413 << 9u)) + (_2685 << 2u)) >> 2u)).x;
                _2695 = _2694 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2695)
                {
                    frontier_phi_61_pred = _2679;
                    frontier_phi_61_pred_1 = _2684;
                    frontier_phi_61_pred_2 = _2683;
                    frontier_phi_61_pred_3 = _2682;
                    frontier_phi_61_pred_4 = _2681;
                    frontier_phi_61_pred_5 = _2680;
                }
                else
                {
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    uint _2809;
                    _2803 = _2679;
                    _2804 = _2680;
                    _2805 = _2681;
                    _2806 = _2682;
                    _2807 = _2683;
                    _2808 = _2684;
                    _2809 = _2694;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    for (;;)
                    {
                        uint _2813 = uint(findLSB(_2809)) + (_2685 << 5u);
                        uint _2810 = (_2809 + 4294967295u) & _2809;
                        uint _2815 = _2813 * 48u;
                        vec4 _2829 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2815)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2815 + 3u)).x));
                        uint _2835 = (_2813 * 48u) + 4u;
                        vec4 _2848 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2835)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 3u)).x));
                        uint _2854 = (_2813 * 48u) + 8u;
                        vec3 _2865 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2854)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 2u)).x));
                        float _2869 = _2829.x - _2387;
                        float _2870 = _2829.y - _2388;
                        float _2871 = _2829.z - _2389;
                        float _2872 = dot(vec3(_2869, _2870, _2871), vec3(_2869, _2870, _2871));
                        float _2875 = inversesqrt(_2872);
                        float _2876 = _2875 * _2869;
                        float _2877 = _2875 * _2870;
                        float _2878 = _2875 * _2871;
                        float _2879 = dot(vec3(_668, _671, _674), vec3(_2876, _2877, _2878));
                        float _2884 = 1.0 - (_2872 * _2829.w);
                        float _4208 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                        float _2885 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                        float _2886 = sqrt(_2872) * _2848.w;
                        float _2889 = 1.39999997615814208984375 / (_2886 + 1.39999997615814208984375);
                        float _2890 = _2889 * _2889;
                        float _2893 = ((1.0 - _2890) * _2879) + _2890;
                        float _2896 = _2886 * _2886;
                        float _2900 = ((isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0))) * _2885) / ((_2896 * 0.699999988079071044921875) + 1.0);
                        float _2904 = (-0.0) - _2387;
                        float _2905 = (-0.0) - _2388;
                        float _2906 = (-0.0) - _2389;
                        float _2910 = inversesqrt(dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906)));
                        float _2911 = _2910 * _2904;
                        float _2912 = _2910 * _2905;
                        float _2913 = _2910 * _2906;
                        float _2921 = exp2(log2(1.0 / ((_2896 * 3.5) + 5.0)) * 0.25);
                        float _2922 = 1.0 - _728;
                        float _2929 = sqrt(1.0 - ((1.0 - (_2922 * _2922)) * (1.0 - (_2921 * _2921))));
                        float _2930 = _2929 * _2929;
                        float _2931 = _2930 * _2930;
                        float _2932 = _2911 + _2876;
                        float _2933 = _2912 + _2877;
                        float _2934 = _2913 + _2878;
                        float _2938 = inversesqrt(dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934)));
                        float _2942 = dot(vec3(_668, _671, _674), vec3(_2911, _2912, _2913));
                        float _4224 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2945 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                        float _2946 = dot(vec3(_668, _671, _674), vec3(_2938 * _2932, _2938 * _2933, _2938 * _2934));
                        float _4235 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2949 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                        float _2953 = ((_2949 * _2949) * (_2931 + (-1.0))) + 1.0;
                        float _2954 = _2889 * _2930;
                        float _2955 = _2954 * _2954;
                        float _2958 = ((1.0 - _2955) * _2879) + _2955;
                        float _4246 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                        float _2959 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                        float _2960 = 1.0 - _2930;
                        float _2970 = (0.5 / (((_2959 * ((_2945 * _2960) + _2930)) + 9.9999999392252902907785028219223e-09) + (((_2959 * _2960) + _2930) * _2945))) * _2959;
                        float _4257 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2981 = (((_2931 * 3.1415927410125732421875) * (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) / ((_2953 * _2953) * ((_2896 * 2.1991131305694580078125) + 3.141590118408203125))) * _2885;
                        _2738 = (_2900 * _2848.x) + _2806;
                        _2739 = (_2900 * _2848.y) + _2807;
                        _2740 = (_2900 * _2848.z) + _2808;
                        _2735 = (_2981 * _2865.x) + _2803;
                        _2736 = (_2981 * _2865.y) + _2804;
                        _2737 = (_2981 * _2865.z) + _2805;
                        if (_2810 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2803 = _2735;
                            _2804 = _2736;
                            _2805 = _2737;
                            _2806 = _2738;
                            _2807 = _2739;
                            _2808 = _2740;
                            _2809 = _2810;
                        }
                    }
                    frontier_phi_61_pred = _2735;
                    frontier_phi_61_pred_1 = _2740;
                    frontier_phi_61_pred_2 = _2739;
                    frontier_phi_61_pred_3 = _2738;
                    frontier_phi_61_pred_4 = _2737;
                    frontier_phi_61_pred_5 = _2736;
                }
                _2535 = frontier_phi_61_pred;
                _2545 = frontier_phi_61_pred_1;
                _2543 = frontier_phi_61_pred_2;
                _2541 = frontier_phi_61_pred_3;
                _2539 = frontier_phi_61_pred_4;
                _2537 = frontier_phi_61_pred_5;
                uint _2686 = _2685 + 1u;
                if (_2686 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2679 = _2535;
                    _2680 = _2537;
                    _2681 = _2539;
                    _2682 = _2541;
                    _2683 = _2543;
                    _2684 = _2545;
                    _2685 = _2686;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2534 = _2535;
            _2536 = _2537;
            _2538 = _2539;
            _2540 = _2541;
            _2542 = _2543;
            _2544 = _2545;
        }
        uvec4 _2548 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2549 = _2548.z;
        uint _2551 = (_2549 >> 8u) & 15u;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        if (((4294967295u << _2551) & _2433) == 0u)
        {
            _2647 = _2534;
            _2649 = _2536;
            _2651 = _2538;
            _2653 = _2540;
            _2655 = _2542;
            _2657 = _2544;
        }
        else
        {
            float _2672 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
            float _2673 = _2672 * _2387;
            float _2674 = _2672 * _2388;
            float _2675 = _2672 * _2389;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2551 < ((_2549 >> 12u) & 15u))
            {
                float _2648;
                float _2650;
                float _2652;
                float _2654;
                float _2656;
                float _2658;
                float _2786 = _2534;
                float _2787 = _2536;
                float _2788 = _2538;
                float _2789 = _2540;
                float _2790 = _2542;
                float _2791 = _2544;
                uint _2792 = _2551;
                uint _2801;
                bool _2802;
                for (;;)
                {
                    _2801 = texelFetch(g_lightClassification, int((((_2427 << 5u) + (_2413 << 9u)) + (_2792 << 2u)) >> 2u)).x;
                    _2802 = _2801 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2802)
                    {
                        frontier_phi_67_pred = _2789;
                        frontier_phi_67_pred_1 = _2790;
                        frontier_phi_67_pred_2 = _2791;
                        frontier_phi_67_pred_3 = _2788;
                        frontier_phi_67_pred_4 = _2787;
                        frontier_phi_67_pred_5 = _2786;
                    }
                    else
                    {
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _2999 = _2786;
                        float _3000 = _2787;
                        float _3001 = _2788;
                        float _3002 = _2789;
                        float _3003 = _2790;
                        float _3004 = _2791;
                        uint _3005 = _2801;
                        uint _3006;
                        vec4 _3031;
                        float _3032;
                        vec4 _3047;
                        vec3 _3059;
                        vec4 _3075;
                        vec4 _3091;
                        float _3137;
                        bool _3138;
                        for (;;)
                        {
                            uint _3016 = ((_2792 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3005));
                            _3006 = (_3005 + 4294967295u) & _3005;
                            uint _3018 = _3016 * 40u;
                            _3031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 3u)).x));
                            _3032 = _3031.w;
                            uint _3034 = (_3016 * 40u) + 4u;
                            _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            uint _3049 = (_3016 * 40u) + 8u;
                            _3059 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x));
                            uint _3062 = (_3016 * 40u) + 16u;
                            _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            uint _3078 = (_3016 * 40u) + 20u;
                            _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            uint _3093 = (_3016 * 40u) + 24u;
                            vec4 _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            uint _3112 = (_3016 * 40u) + 28u;
                            vec4 _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            _3137 = fma(_2389, _3125.z, fma(_2388, _3125.y, _3125.x * _2387)) + _3125.w;
                            _3138 = !((fma(_2389, _3106.z, fma(_2388, _3106.y, _3106.x * _2387)) + _3106.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3138)
                            {
                                float _3165 = _3031.x - _2387;
                                float _3166 = _3031.y - _2388;
                                float _3167 = _3031.z - _2389;
                                float _3168 = dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167));
                                float _3171 = inversesqrt(_3168);
                                float _3172 = _3171 * _3165;
                                float _3173 = _3171 * _3166;
                                float _3174 = _3171 * _3167;
                                float _3178 = 1.0 - (_3168 / (_3032 * _3032));
                                float _4268 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3179 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3183 = sqrt(_3168) * _3047.w;
                                float _3185 = 1.39999997615814208984375 / (_3183 + 1.39999997615814208984375);
                                float _3186 = _3185 * _3185;
                                float _3189 = ((1.0 - _3186) * dot(vec3(_3172, _3173, _3174), vec3(_668, _671, _674))) + _3186;
                                float _3192 = _3183 * _3183;
                                float _3196 = (fma(_2389, _3075.z, fma(_2388, _3075.y, _3075.x * _2387)) + _3075.w) / _3137;
                                float _3197 = (fma(_2389, _3091.z, fma(_2388, _3091.y, _3091.x * _2387)) + _3091.w) / _3137;
                                float _3201 = 1.0 - dot(vec2(_3196, _3197), vec2(_3196, _3197));
                                float _4284 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3202 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                                float _3203 = _3202 * (((isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0))) * _3179) / ((_3192 * 0.699999988079071044921875) + 1.0));
                                float _3215 = exp2(log2(1.0 / ((_3192 * 3.5) + 5.0)) * 0.25);
                                float _3216 = 1.0 - _728;
                                float _3223 = sqrt(1.0 - ((1.0 - (_3216 * _3216)) * (1.0 - (_3215 * _3215))));
                                float _3224 = _3223 * _3223;
                                float _3225 = _3224 * _3224;
                                float _3226 = _3172 - _2673;
                                float _3227 = _3173 - _2674;
                                float _3228 = _3174 - _2675;
                                float _3232 = inversesqrt(dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228)));
                                float _3236 = dot(vec3(_668, _671, _674), vec3((-0.0) - _2673, (-0.0) - _2674, (-0.0) - _2675));
                                float _4295 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3239 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                                float _3240 = dot(vec3(_668, _671, _674), vec3(_3232 * _3226, _3232 * _3227, _3232 * _3228));
                                float _4306 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3243 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                                float _3247 = ((_3243 * _3243) * (_3225 + (-1.0))) + 1.0;
                                float _3248 = _3185 * _3224;
                                float _3249 = _3248 * _3248;
                                float _3255 = ((1.0 - _3249) * dot(vec3(_668, _671, _674), vec3(_3172, _3173, _3174))) + _3249;
                                float _4317 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3256 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                                float _3257 = 1.0 - _3224;
                                float _3267 = (0.5 / (((_3256 * ((_3239 * _3257) + _3224)) + 9.9999999392252902907785028219223e-09) + (((_3256 * _3257) + _3224) * _3239))) * _3256;
                                float _4328 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3277 = (_3202 * _3179) * (((_3225 * 3.1415927410125732421875) * (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) / ((_3247 * _3247) * ((_3192 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3277 * _3059.x;
                                frontier_phi_73_pred_1 = _3277 * _3059.y;
                                frontier_phi_73_pred_2 = _3203 * _3047.z;
                                frontier_phi_73_pred_3 = _3203 * _3047.y;
                                frontier_phi_73_pred_4 = _3203 * _3047.x;
                                frontier_phi_73_pred_5 = _3277 * _3059.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3281 = frontier_phi_73_pred;
                            _3282 = frontier_phi_73_pred_1;
                            _3286 = frontier_phi_73_pred_2;
                            _3285 = frontier_phi_73_pred_3;
                            _3284 = frontier_phi_73_pred_4;
                            _3283 = frontier_phi_73_pred_5;
                            _2989 = _3284 + _3002;
                            _2990 = _3285 + _3003;
                            _2991 = _3286 + _3004;
                            _2986 = _3281 + _2999;
                            _2987 = _3282 + _3000;
                            _2988 = _3283 + _3001;
                            if (_3006 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _3006;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2989;
                        frontier_phi_67_pred_1 = _2990;
                        frontier_phi_67_pred_2 = _2991;
                        frontier_phi_67_pred_3 = _2988;
                        frontier_phi_67_pred_4 = _2987;
                        frontier_phi_67_pred_5 = _2986;
                    }
                    _2654 = frontier_phi_67_pred;
                    _2656 = frontier_phi_67_pred_1;
                    _2658 = frontier_phi_67_pred_2;
                    _2652 = frontier_phi_67_pred_3;
                    _2650 = frontier_phi_67_pred_4;
                    _2648 = frontier_phi_67_pred_5;
                    uint _2793 = _2792 + 1u;
                    if (_2793 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2786 = _2648;
                        _2787 = _2650;
                        _2788 = _2652;
                        _2789 = _2654;
                        _2790 = _2656;
                        _2791 = _2658;
                        _2792 = _2793;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2656;
                frontier_phi_55_56_ladder_1 = _2658;
                frontier_phi_55_56_ladder_2 = _2654;
                frontier_phi_55_56_ladder_3 = _2652;
                frontier_phi_55_56_ladder_4 = _2650;
                frontier_phi_55_56_ladder_5 = _2648;
            }
            else
            {
                frontier_phi_55_56_ladder = _2542;
                frontier_phi_55_56_ladder_1 = _2544;
                frontier_phi_55_56_ladder_2 = _2540;
                frontier_phi_55_56_ladder_3 = _2538;
                frontier_phi_55_56_ladder_4 = _2536;
                frontier_phi_55_56_ladder_5 = _2534;
            }
            _2647 = frontier_phi_55_56_ladder_5;
            _2649 = frontier_phi_55_56_ladder_4;
            _2651 = frontier_phi_55_56_ladder_3;
            _2653 = frontier_phi_55_56_ladder_2;
            _2655 = frontier_phi_55_56_ladder;
            _2657 = frontier_phi_55_56_ladder_1;
        }
        float _2662 = isnan(1.0) ? _712 : (isnan(_712) ? 1.0 : min(_712, 1.0));
        _2446 = (_2662 * _2653) + _1898;
        _2448 = (_2662 * _2655) + _1900;
        _2450 = (_2662 * _2657) + _1902;
        _2452 = ((_2647 * 0.039999999105930328369140625) * _2662) + _2231;
        _2454 = ((_2649 * 0.039999999105930328369140625) * _2662) + _2233;
        _2456 = ((_2651 * 0.039999999105930328369140625) * _2662) + _2235;
    }
    else
    {
        _2446 = _1898;
        _2448 = _1900;
        _2450 = _1902;
        _2452 = _2231;
        _2454 = _2233;
        _2456 = _2235;
    }
    float _4344 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _4355 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _4366 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    uint _2476 = _237 + 6u;
    float _2484 = _646 / cbSceneParam._m0[86u].x;
    float _2485 = _647 / cbSceneParam._m0[86u].y;
    vec4 _2499 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2484, _2485, (log2((isnan(cbSceneParam._m0[77u].w) ? _581 : (isnan(_581) ? cbSceneParam._m0[77u].w : min(_581, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2501 = _2499.x;
    float _2502 = _2499.y;
    float _2503 = _2499.z;
    float _2504 = _2499.w;
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    if (_581 > cbSceneParam._m0[78u].w)
    {
        float _2559 = isnan(_581) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _581 : min(cbSceneParam._m0[80u].w, _581));
        float _2560 = _2559 / _581;
        float _2571 = _2560 * _631;
        float _2572 = _632 * _2560;
        float _2573 = (-0.0) - _2572;
        float _2575 = _2560 * _633;
        float _2577 = (cbSceneParam._m0[77u].w * _2573) / _2559;
        float _2578 = _2577 + cbSceneParam._m0[79u].w;
        float _2579 = cbSceneParam._m0[79u].w - _2572;
        float _2585 = sqrt(((_2571 * _2571) + (_2572 * _2572)) + (_2575 * _2575));
        float _2588 = (1.0 - (cbSceneParam._m0[77u].w / _2559)) * _2585;
        float _2593 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2595 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2748;
        if (abs((_2573 - _2577) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2748 = ((((_2578 > 0.0) ? exp2(_2593 * _2578) : (2.0 - exp2(_2595 * _2578))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2588;
        }
        else
        {
            float _2708 = 1.0 / cbSceneParam._m0[80u].x;
            float _2709 = isnan(_2579) ? _2578 : (isnan(_2578) ? _2579 : max(_2578, _2579));
            float _2710 = isnan(_2579) ? _2578 : (isnan(_2578) ? _2579 : min(_2578, _2579));
            float _2719 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : min(_2709, 0.0));
            float _2720 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : min(_2710, 0.0));
            _2748 = ((abs(_2585 / _2573) * cbSceneParam._m0[80u].y) * ((((_2719 - _2720) * 2.0) - ((exp2(_2593 * (isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0)))) - exp2(_2593 * (isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0))))) * _2708)) - ((exp2(_2595 * _2719) - exp2(_2595 * _2720)) * _2708))) + (_2588 * cbSceneParam._m0[80u].z);
        }
        vec4 _2750 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2484, _2485, 1.0), 0.0);
        float _2759 = exp2((_2748 * (-1.44269502162933349609375)) * (1.0 - _2750.w));
        float _2760 = log2(_2759);
        float _2776 = log2(_2504);
        _2597 = (exp2(_2776 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2760 * cbSceneParam._m0[78u].x)) * _2750.x) / cbSceneParam._m0[78u].x)) + _2501;
        _2599 = (exp2(_2776 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2760 * cbSceneParam._m0[78u].y)) * _2750.y) / cbSceneParam._m0[78u].y)) + _2502;
        _2601 = (exp2(_2776 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2760 * cbSceneParam._m0[78u].z)) * _2750.z) / cbSceneParam._m0[78u].z)) + _2503;
        _2603 = _2759 * _2504;
    }
    else
    {
        _2597 = _2501;
        _2599 = _2502;
        _2601 = _2503;
        _2603 = _2504;
    }
    float _2615 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2616 = _2615 == 3.0;
    float _2617 = log2(_2603);
    float _2624 = exp2(_2617 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2446 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _712))) + ((_2452 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1517)) * cbPerFrame._m0[3u].x));
    float _2625 = exp2(_2617 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2448 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _712))) + ((_2454 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1517)) * cbPerFrame._m0[3u].x));
    float _2626 = exp2(_2617 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2450 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _712))) + ((_2456 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1517)) * cbPerFrame._m0[3u].x));
    float _2635 = (_2615 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2635 * (_2616 ? _2624 : (_2624 + (cbSceneParam._m0[72u].w * _2597)));
    SV_Target.y = _2635 * (_2616 ? _2625 : (_2625 + (cbSceneParam._m0[72u].w * _2599)));
    SV_Target.z = _2635 * (_2616 ? _2626 : (_2626 + (cbSceneParam._m0[72u].w * _2601)));
    SV_Target.w = cbInstanceData._m0[_2476].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2476].w;
}


