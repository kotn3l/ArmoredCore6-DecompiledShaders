#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1427;
float _4067;
float _4068;
float _4069;
float _4070;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4079 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4090 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4101 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _414 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _414) * cbMtdParam._m0[24u].x) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4112 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _439 = (_432 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _440 = (_432 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _441 = (_432 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _445 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _439;
    float _448 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _440;
    float _451 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _441;
    float _458 = ((_439 - _445) * (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) + _445;
    float _459 = ((_440 - _448) * (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) + _448;
    float _460 = ((_441 - _451) * (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) + _451;
    vec4 _479 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _302) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _303) + cbTextureTilingScale._m0[14u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _526 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _543 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _545 = _543.x;
    float _546 = _543.y;
    float _547 = _543.z;
    float _556 = ((_526.z - _547) * _432) + _547;
    float _559 = ((((_526.x - _545) * _432) + _545) * 2.0) + (-1.0);
    float _560 = ((((_526.y - _546) * _432) + _546) * 2.0) + (-1.0);
    float _561 = dot(vec2(_559, _560), vec2(_559, _560));
    float _4123 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _566 = sqrt(1.0 - (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))));
    vec4 _586 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _598 = (_559 + ((((_499.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_586.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _599 = (_560 + ((((_499.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_586.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _602 = fma(_566, _252, fma(_599, _259, _598 * _245));
    float _605 = fma(_566, _253, fma(_599, _260, _598 * _246));
    float _608 = fma(_566, _254, fma(_599, _261, _598 * _247));
    float _612 = inversesqrt(dot(vec3(_602, _605, _608), vec3(_602, _605, _608)));
    vec4 _641 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _643 = _641.x;
    float _644 = 1.0 - _643;
    float _648 = ((_643 - _644) * cbMtdParam._m0[24u].z) + _644;
    float _650 = (cbMtdParam._m0[19u].x + dot(vec4(_612 * _602, _612 * _605, _612 * _608, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_648 * cbMtdParam._m0[21u].z);
    float _4134 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _651 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _653 = (-0.0) - cbMtdParam._m0[24u].y;
    float _655 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _656 = isnan(1.0) ? _655 : (isnan(_655) ? 1.0 : min(_655, 1.0));
    float _663 = _651 - ((_651 * TEXCOORD_8.x) * _656);
    float _664 = _651 - ((_651 * TEXCOORD_8.y) * _656);
    float _665 = _651 - ((_651 * TEXCOORD_8.z) * _656);
    float _672 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _676 = ((isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : min(_672, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _684 = (_676 - (((_648 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _676))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4165 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _685 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _689 = ((_663 * ((_479.x * cbMtdParam._m0[18u].x) - _458)) * _685) + _458;
    float _690 = ((_664 * ((_479.y * cbMtdParam._m0[18u].y) - _459)) * _685) + _459;
    float _691 = ((_665 * ((_479.z * cbMtdParam._m0[18u].z) - _460)) * _685) + _460;
    vec4 _703 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _705 = _703.x;
    float _706 = 1.0 - _705;
    float _731 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_705 - _706) * cbMtdParam._m0[24u].w) + _706) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4176 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _732 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _740 = ((((cbMtdParam._m0[10u].x - _689) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _732) + _689;
    float _741 = ((((cbMtdParam._m0[10u].y - _690) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _732) + _690;
    float _742 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _691)) * _732) + _691;
    float _747 = (((_499.z - _556) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _556;
    float _751 = ((_586.z - _747) * cbMtdParam._m0[19u].w) + _747;
    vec4 _765 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _772 = (_765.x * 2.0) + (-1.0);
    float _773 = (_765.y * 2.0) + (-1.0);
    float _774 = dot(vec2(_772, _773), vec2(_772, _773));
    float _4187 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _783 = (((_765.z - _751) * _663) * _685) + _751;
    float _786 = ((cbMtdParam._m0[23u].y - _783) * _732) + _783;
    vec4 _805 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _811 = (_805.x * 2.0) + (-1.0);
    float _812 = (_805.y * 2.0) + (-1.0);
    float _813 = dot(vec2(_811, _812), vec2(_811, _812));
    float _4198 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _833 = (((cbMtdParam._m0[21u].x * _598) + ((_772 - _598) * _663)) * _685) + _598;
    float _834 = (((cbMtdParam._m0[21u].x * _599) + ((_773 - _599) * _664)) * _685) + _599;
    float _835 = (((sqrt(1.0 - (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0)))) - _566) * _665) * _685) + _566;
    float _846 = (((_811 - _833) + (_833 * cbMtdParam._m0[22u].z)) * _732) + _833;
    float _847 = (((_812 - _834) + (_834 * cbMtdParam._m0[22u].z)) * _732) + _834;
    float _848 = ((sqrt(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) - _835) * _732) + _835;
    float _852 = cbMtdParam._m0[22u].x + _586.w;
    float _855 = fma(_848, _252, fma(_847, _259, _846 * _245));
    float _858 = fma(_848, _253, fma(_847, _260, _846 * _246));
    float _861 = fma(_848, _254, fma(_847, _261, _846 * _247));
    float _865 = inversesqrt(dot(vec3(_855, _858, _861), vec3(_855, _858, _861)));
    float _866 = _865 * _855;
    float _867 = _865 * _858;
    float _868 = _865 * _861;
    float _4209 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _869 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _4220 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4231 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4242 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4253 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _887 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _938 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _928);
    float _939 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _928);
    float _940 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _928);
    float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
    float _945 = _938 * _944;
    float _946 = _939 * _944;
    float _947 = _940 * _944;
    vec4 _952 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _954 = _952.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1108 = sqrt(((_938 * _938) + (_939 * _939)) + (_940 * _940));
        float _1114 = (cbMatDynParam._m0[5u].x * _1108) + cbMatDynParam._m0[5u].y;
        float _4264 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1119 = (cbMatDynParam._m0[5u].z * _1108) + cbMatDynParam._m0[5u].w;
        float _4275 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) - _1115)) + _1115) < ((_954 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _965 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _966 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _984 = fma(_868, cbSceneParam._m0[5u].z, fma(_867, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _866));
    float _987 = fma(_868, cbSceneParam._m0[6u].z, fma(_867, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _866));
    float _990 = fma(_868, cbSceneParam._m0[7u].z, fma(_867, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _866));
    uint _1003 = _283 + 9u;
    uint _1004 = _1003 + uint(cbMatDynParam._m0[0u].w);
    float _1010 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) * cbInstanceData._m0[_1004].x;
    float _1011 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * cbInstanceData._m0[_1004].y;
    float _1012 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * cbInstanceData._m0[_1004].z;
    float _4286 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1013 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _4297 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1014 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _4308 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1015 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    vec4 _1024 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _965, cbSceneParam._m0[86u].y * _966));
    float _1028 = ((isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * TEXCOORD_5.w) * _1024.x;
    float _1029 = dot(vec3(_866, _867, _868), vec3(_945, _946, _947));
    float _1032 = _1029 * 2.0;
    float _1036 = (_1032 * _866) - _945;
    float _1037 = (_1032 * _867) - _946;
    float _1038 = (_1032 * _868) - _947;
    float _1042 = abs(dot(vec3(_945, _946, _947), vec3(_866, _867, _868)));
    float _4319 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1044 = sqrt(_869);
    float _1057 = exp2((_1044 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1044 * 3.0));
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1426;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1151 = fma(_1097, cbModelParam._m0[26u].z, fma(_1093, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1089));
        float _1155 = fma(_1097, cbModelParam._m0[27u].z, fma(_1093, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1089));
        float _1159 = fma(_1097, cbModelParam._m0[28u].z, fma(_1093, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1089));
        float _1184 = _1089 + _866;
        float _1185 = _1093 + _867;
        float _1186 = _1097 + _868;
        float _1196 = fma(_1186, cbModelParam._m0[26u].z, fma(_1185, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1184)) - _1151;
        float _1197 = fma(_1186, cbModelParam._m0[27u].z, fma(_1185, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1184)) - _1155;
        float _1198 = fma(_1186, cbModelParam._m0[28u].z, fma(_1185, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1184)) - _1159;
        float _1202 = inversesqrt(dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198)));
        float _1215 = ((_1202 * _1196) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1151 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1202 * _1197) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1155 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1202 * _1198) / cbModelParam._m0[34u].z) + ((((((_1159 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        float _1254 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1220.x + (-0.5));
        float _1256 = _1254 * (_1220.y + (-0.5));
        float _1257 = _1254 * (_1220.z + (-0.5));
        float _1264 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1227.x + (-0.5));
        float _1266 = _1264 * (_1227.y + (-0.5));
        float _1267 = _1264 * (_1227.z + (-0.5));
        float _1274 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1234.x + (-0.5));
        float _1276 = _1274 * (_1234.y + (-0.5));
        float _1277 = _1274 * (_1234.z + (-0.5));
        float _1284 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1241.x + (-0.5));
        float _1286 = _1284 * (_1241.y + (-0.5));
        float _1287 = _1284 * (_1241.z + (-0.5));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = _1255 * 0.5;
        float _1292 = _1265 * 0.5;
        float _1293 = _1275 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1308 = (dot(vec3(_866, _867, _868), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _4345 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1318 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _4356 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _4367 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_1320 + 1.0))) + _1325) * _1288;
        float _1335 = _1256 * 0.5;
        float _1336 = _1266 * 0.5;
        float _1337 = _1276 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_866, _867, _868), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4378 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _4389 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _4400 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_1362 + 1.0))) + _1367) * _1289;
        float _1377 = _1257 * 0.5;
        float _1378 = _1267 * 0.5;
        float _1379 = _1277 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_866, _867, _868), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _4411 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _4422 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _4433 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_1404 + 1.0))) + _1409) * _1290;
        _1426 = _1257;
        _1428 = _1256;
        _1429 = _1255;
        _1430 = _1267;
        _1431 = _1266;
        _1432 = _1265;
        _1433 = _1277;
        _1434 = _1276;
        _1435 = _1275;
        _1436 = _1290;
        _1437 = _1289;
        _1438 = _1288;
        _1439 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1440 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1441 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
    }
    else
    {
        _1426 = _1427;
        _1428 = _1427;
        _1429 = _1427;
        _1430 = _1427;
        _1431 = _1427;
        _1432 = _1427;
        _1433 = _1427;
        _1434 = _1427;
        _1435 = _1427;
        _1436 = _1427;
        _1437 = _1427;
        _1438 = _1427;
        _1439 = 0.0;
        _1440 = 0.0;
        _1441 = 0.0;
    }
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1469 = fma(_1097, cbModelParam._m0[30u].z, fma(_1093, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1089));
        float _1473 = fma(_1097, cbModelParam._m0[31u].z, fma(_1093, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1089));
        float _1477 = fma(_1097, cbModelParam._m0[32u].z, fma(_1093, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1089));
        float _1500 = _1089 + _866;
        float _1501 = _1093 + _867;
        float _1502 = _1097 + _868;
        float _1512 = fma(_1502, cbModelParam._m0[30u].z, fma(_1501, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1500)) - _1469;
        float _1513 = fma(_1502, cbModelParam._m0[31u].z, fma(_1501, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1500)) - _1473;
        float _1514 = fma(_1502, cbModelParam._m0[32u].z, fma(_1501, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1500)) - _1477;
        float _1518 = inversesqrt(dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514)));
        float _1531 = ((_1518 * _1512) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1469 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1532 = ((_1518 * _1513) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1473 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1533 = ((_1518 * _1514) / cbModelParam._m0[35u].z) + ((((((_1477 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        float _1568 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1535.x + (-0.5));
        float _1570 = _1568 * (_1535.y + (-0.5));
        float _1571 = _1568 * (_1535.z + (-0.5));
        float _1578 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1542.x + (-0.5));
        float _1580 = _1578 * (_1542.y + (-0.5));
        float _1581 = _1578 * (_1542.z + (-0.5));
        float _1588 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1589 = _1588 * (_1549.x + (-0.5));
        float _1590 = _1588 * (_1549.y + (-0.5));
        float _1591 = _1588 * (_1549.z + (-0.5));
        float _1598 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1599 = _1598 * (_1556.x + (-0.5));
        float _1600 = _1598 * (_1556.y + (-0.5));
        float _1601 = _1598 * (_1556.z + (-0.5));
        float _1602 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1603 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = _1569 * 0.5;
        float _1606 = _1579 * 0.5;
        float _1607 = _1589 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_866, _867, _868), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4474 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1602 + 9.9999997473787516355514526367188e-06);
        float _4485 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4496 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_1632 + 1.0))) + _1637) * _1602;
        float _1647 = _1570 * 0.5;
        float _1648 = _1580 * 0.5;
        float _1649 = _1590 * 0.5;
        float _1650 = dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649));
        float _1655 = (_1650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1650);
        float _1663 = (dot(vec3(_866, _867, _868), vec3(_1655 * _1647, _1655 * _1648, _1655 * _1649)) + 1.0) * 0.5;
        float _4507 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1672 = sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649)) / (_1603 + 9.9999997473787516355514526367188e-06);
        float _4518 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _1674 = _1673 * 2.0;
        float _1678 = (1.0 - _1673) / (_1673 + 1.0);
        float _4529 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _1688 = ((((1.0 - _1679) * (_1674 + 2.0)) * exp2(log2(isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_1674 + 1.0))) + _1679) * _1603;
        float _1689 = _1571 * 0.5;
        float _1690 = _1581 * 0.5;
        float _1691 = _1591 * 0.5;
        float _1692 = dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691));
        float _1697 = (_1692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1692);
        float _1705 = (dot(vec3(_866, _867, _868), vec3(_1697 * _1689, _1697 * _1690, _1697 * _1691)) + 1.0) * 0.5;
        float _4540 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1714 = sqrt(((_1690 * _1690) + (_1689 * _1689)) + (_1691 * _1691)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4551 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _1716 = _1715 * 2.0;
        float _1720 = (1.0 - _1715) / (_1715 + 1.0);
        float _4562 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _1730 = ((((1.0 - _1721) * (_1716 + 2.0)) * exp2(log2(isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_1716 + 1.0))) + _1721) * _1604;
        _1738 = _1571;
        _1739 = _1570;
        _1740 = _1569;
        _1741 = _1581;
        _1742 = _1580;
        _1743 = _1579;
        _1744 = _1591;
        _1745 = _1590;
        _1746 = _1589;
        _1747 = _1604;
        _1748 = _1603;
        _1749 = _1602;
        _1750 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
        _1751 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)));
        _1752 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)));
    }
    else
    {
        _1738 = _1427;
        _1739 = _1427;
        _1740 = _1427;
        _1741 = _1427;
        _1742 = _1427;
        _1743 = _1427;
        _1744 = _1427;
        _1745 = _1427;
        _1746 = _1427;
        _1747 = _1427;
        _1748 = _1427;
        _1749 = _1427;
        _1750 = 0.0;
        _1751 = 0.0;
        _1752 = 0.0;
    }
    float _1762 = (cbModelParam._m0[1u].x * (_1750 - _1439)) + _1439;
    float _1763 = (cbModelParam._m0[1u].x * (_1751 - _1440)) + _1440;
    float _1764 = (cbModelParam._m0[1u].x * (_1752 - _1441)) + _1441;
    float _1785 = fma(_1764, cbSceneParam._m0[89u].z, fma(_1763, cbSceneParam._m0[89u].y, _1762 * cbSceneParam._m0[89u].x));
    float _1788 = fma(_1764, cbSceneParam._m0[90u].z, fma(_1763, cbSceneParam._m0[90u].y, _1762 * cbSceneParam._m0[90u].x));
    float _1791 = fma(_1764, cbSceneParam._m0[91u].z, fma(_1763, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1762));
    float _1806 = _1036 * 0.5;
    float _1807 = _1037 * 0.5;
    float _1808 = _1038 * 0.5;
    float _1809 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1740, _1743, _1746, _1749));
    float _1812 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1739, _1742, _1745, _1748));
    float _1815 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1738, _1741, _1744, _1747));
    float _1849;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1822 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1426, _1430, _1433, _1436));
        float _1826 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1428, _1431, _1434, _1437));
        float _1830 = dot(vec4(_1806, _1807, _1808, 1.0), vec4(_1429, _1432, _1435, _1438));
        float _1837 = dot(vec4(cbModelParam._m0[39u]), vec4(_1806, _1807, _1808, 1.0));
        _1849 = dot(vec3(isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)), isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1837) ? 0.0 : (isnan(0.0) ? _1837 : max(0.0, _1837))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1849 = 1.0;
    }
    float _1860;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1851 = dot(vec4(cbModelParam._m0[40u]), vec4(_1806, _1807, _1808, 1.0));
        _1860 = dot(vec3(isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1851) ? 0.0 : (isnan(0.0) ? _1851 : max(0.0, _1851))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1860 = 1.0;
    }
    float _1864 = (_1860 * cbModelParam._m0[1u].x) + (_1849 * (1.0 - cbModelParam._m0[1u].x));
    float _1874 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _869);
    float _1875 = isnan(_1874) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1874 : min(cbModelParam._m0[25u].z, _1874));
    float _1955;
    float _1957;
    float _1959;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1922 = fma(_1097, cbModelParam._m0[13u].z, fma(_1093, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1089)) + cbModelParam._m0[13u].w;
        float _1926 = fma(_1097, cbModelParam._m0[14u].z, fma(_1093, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1089)) + cbModelParam._m0[14u].w;
        float _1930 = fma(_1097, cbModelParam._m0[15u].z, fma(_1093, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1089)) + cbModelParam._m0[15u].w;
        float _1933 = fma(_1038, cbModelParam._m0[13u].z, fma(_1037, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1036));
        float _1936 = fma(_1038, cbModelParam._m0[14u].z, fma(_1037, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1036));
        float _1939 = fma(_1038, cbModelParam._m0[15u].z, fma(_1037, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1036));
        float _1967;
        if (_1933 > 0.0)
        {
            _1967 = abs((1.0 - _1922) / _1933);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1922 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1967 = frontier_phi_17_15_ladder;
        }
        float _2136;
        if (_1936 > 0.0)
        {
            _2136 = abs((1.0 - _1926) / _1936);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1926 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2136 = frontier_phi_26_22_ladder;
        }
        float _2431;
        if (_1939 > 0.0)
        {
            _2431 = abs((1.0 - _1930) / _1939);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1930 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2431 = frontier_phi_38_33_ladder;
        }
        float _2433 = isnan(_2136) ? _1967 : (isnan(_1967) ? _2136 : min(_1967, _2136));
        float _2434 = isnan(_2431) ? _2433 : (isnan(_2433) ? _2431 : min(_2433, _2431));
        float _2438 = (_2434 * _1933) + _1922;
        float _2439 = (_2434 * _1936) + _1926;
        float _2440 = (_2434 * _1939) + _1930;
        float _2441 = _2434 * 9.9999997473787516355514526367188e-05;
        float _2443 = (-1.0) - _2441;
        float _2445 = _2441 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2440 > _2445) || ((_2440 < _2443) || ((_2439 > _2445) || ((_2439 < _2443) || ((_2438 < _2443) || (_2438 > _2445))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2585 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2440, cbModelParam._m0[9u].z, fma(_2439, cbModelParam._m0[9u].y, _2438 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2440, cbModelParam._m0[10u].z, fma(_2439, cbModelParam._m0[10u].y, _2438 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2440, cbModelParam._m0[11u].z, fma(_2439, cbModelParam._m0[11u].y, _2438 * cbModelParam._m0[11u].x))), _1875);
            frontier_phi_16_38_ladder = _2585.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2585.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2585.x * cbModelParam._m0[1u].y;
        }
        _1955 = frontier_phi_16_38_ladder_2;
        _1957 = frontier_phi_16_38_ladder_1;
        _1959 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1943 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1036, _1037, _1038), _1875);
        _1955 = _1943.x * cbModelParam._m0[1u].y;
        _1957 = _1943.y * cbModelParam._m0[1u].y;
        _1959 = _1943.z * cbModelParam._m0[1u].y;
    }
    float _1963 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _869);
    float _1964 = isnan(_1963) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1963 : min(cbModelParam._m0[25u].w, _1963));
    float _2053;
    float _2055;
    float _2057;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2017 = fma(_1097, cbModelParam._m0[21u].z, fma(_1093, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1089)) + cbModelParam._m0[21u].w;
        float _2021 = fma(_1097, cbModelParam._m0[22u].z, fma(_1093, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1089)) + cbModelParam._m0[22u].w;
        float _2025 = fma(_1097, cbModelParam._m0[23u].z, fma(_1093, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1089)) + cbModelParam._m0[23u].w;
        float _2028 = fma(_1038, cbModelParam._m0[21u].z, fma(_1037, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1036));
        float _2031 = fma(_1038, cbModelParam._m0[22u].z, fma(_1037, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1036));
        float _2034 = fma(_1038, cbModelParam._m0[23u].z, fma(_1037, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1036));
        float _2141;
        if (_2028 > 0.0)
        {
            _2141 = abs((1.0 - _2017) / _2028);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2017 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2141 = frontier_phi_28_24_ladder;
        }
        float _2458;
        if (_2031 > 0.0)
        {
            _2458 = abs((1.0 - _2021) / _2031);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2021 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2458 = frontier_phi_40_35_ladder;
        }
        float _2785;
        if (_2034 > 0.0)
        {
            _2785 = abs((1.0 - _2025) / _2034);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2025 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2785 = frontier_phi_50_47_ladder;
        }
        float _2787 = isnan(_2458) ? _2141 : (isnan(_2141) ? _2458 : min(_2141, _2458));
        float _2788 = isnan(_2785) ? _2787 : (isnan(_2787) ? _2785 : min(_2787, _2785));
        float _2792 = (_2788 * _2028) + _2017;
        float _2793 = (_2788 * _2031) + _2021;
        float _2794 = (_2788 * _2034) + _2025;
        float _2795 = _2788 * 9.9999997473787516355514526367188e-05;
        float _2796 = (-1.0) - _2795;
        float _2798 = _2795 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2794 > _2798) || ((_2794 < _2796) || ((_2793 > _2798) || ((_2793 < _2796) || ((_2792 < _2796) || (_2792 > _2798))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2912 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2794, cbModelParam._m0[17u].z, fma(_2793, cbModelParam._m0[17u].y, _2792 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2794, cbModelParam._m0[18u].z, fma(_2793, cbModelParam._m0[18u].y, _2792 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2794, cbModelParam._m0[19u].z, fma(_2793, cbModelParam._m0[19u].y, _2792 * cbModelParam._m0[19u].x))), _1964);
            frontier_phi_25_50_ladder = _2912.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2912.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2912.x * cbModelParam._m0[1u].z;
        }
        _2053 = frontier_phi_25_50_ladder_2;
        _2055 = frontier_phi_25_50_ladder_1;
        _2057 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2037 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1036, _1037, _1038), _1964);
        _2053 = _2037.x * cbModelParam._m0[1u].z;
        _2055 = _2037.y * cbModelParam._m0[1u].z;
        _2057 = _2037.z * cbModelParam._m0[1u].z;
    }
    float _2069 = ((((1.0 - _1057) * ((_1044 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1057 * _1044)) * _1028;
    float _2070 = _2069 * ((cbModelParam._m0[1u].w * (_2053 - _1955)) + _1955);
    float _2071 = _2069 * ((cbModelParam._m0[1u].w * (_2055 - _1957)) + _1957);
    float _2072 = _2069 * ((cbModelParam._m0[1u].w * (_2057 - _1959)) + _1959);
    float _2075 = fma(_2072, cbSceneParam._m0[89u].z, fma(_2071, cbSceneParam._m0[89u].y, _2070 * cbSceneParam._m0[89u].x));
    float _2078 = fma(_2072, cbSceneParam._m0[90u].z, fma(_2071, cbSceneParam._m0[90u].y, _2070 * cbSceneParam._m0[90u].x));
    float _2081 = fma(_2072, cbSceneParam._m0[91u].z, fma(_2071, cbSceneParam._m0[91u].y, _2070 * cbSceneParam._m0[91u].x));
    float _2115 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2119 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2123 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2127 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2128 = _2115 / _2127;
    float _2129 = _2119 / _2127;
    float _2130 = _2123 / _2127;
    float _2277;
    float _2278;
    float _2279;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2157 = ((uint(_2130 > cbSceneParam._m0[59u].y) + uint(_2130 > cbSceneParam._m0[59u].x)) + uint(_2130 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2158 = _2157 + 43u;
        uint _2166 = _2157 + 44u;
        uint _2174 = _2157 + 45u;
        uint _2182 = _2157 + 46u;
        float _2193 = fma(_2127, cbSceneParam._m0[_2158].w, fma(_2123, cbSceneParam._m0[_2158].z, fma(_2119, cbSceneParam._m0[_2158].y, _2115 * cbSceneParam._m0[_2158].x)));
        float _2197 = fma(_2127, cbSceneParam._m0[_2166].w, fma(_2123, cbSceneParam._m0[_2166].z, fma(_2119, cbSceneParam._m0[_2166].y, _2115 * cbSceneParam._m0[_2166].x)));
        float _2205 = fma(_2127, cbSceneParam._m0[_2182].w, fma(_2123, cbSceneParam._m0[_2182].z, fma(_2119, cbSceneParam._m0[_2182].y, _2115 * cbSceneParam._m0[_2182].x)));
        float _2210 = cbSceneParam._m0[33u].z * _2205;
        float _2212 = cbSceneParam._m0[33u].w * _2205;
        float _2215 = fma(_2127, cbSceneParam._m0[_2174].w, fma(_2123, cbSceneParam._m0[_2174].z, fma(_2119, cbSceneParam._m0[_2174].y, _2115 * cbSceneParam._m0[_2174].x))) / _2205;
        float _2263 = (cbSceneParam._m0[33u].x - sqrt(((_2129 * _2129) + (_2128 * _2128)) + (_2130 * _2130))) * cbSceneParam._m0[33u].y;
        float _4688 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2270 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2210 + _2193) / _2205, (_2212 + _2197) / _2205), _2215), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2212 + _2193) / _2205, (_2197 - _2210) / _2205), _2215), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2193 - _2210) / _2205, (_2197 - _2212) / _2205), _2215), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2193 - _2212) / _2205, (_2210 + _2197) / _2205), _2215), 0.0)).x), vec4(0.25)));
        _2277 = 1.0 - (_2270 * cbSceneParam._m0[34u].x);
        _2278 = 1.0 - (_2270 * cbSceneParam._m0[34u].y);
        _2279 = 1.0 - (_2270 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2277 = 1.0;
        _2278 = 1.0;
        _2279 = 1.0;
    }
    float _2343;
    float _2345;
    float _2347;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2331 = fma(_2127, cbSceneParam._m0[63u].w, fma(_2123, cbSceneParam._m0[63u].z, fma(_2119, cbSceneParam._m0[63u].y, _2115 * cbSceneParam._m0[63u].x)));
        float _2332 = fma(_2127, cbSceneParam._m0[60u].w, fma(_2123, cbSceneParam._m0[60u].z, fma(_2119, cbSceneParam._m0[60u].y, _2115 * cbSceneParam._m0[60u].x))) / _2331;
        float _2333 = fma(_2127, cbSceneParam._m0[61u].w, fma(_2123, cbSceneParam._m0[61u].z, fma(_2119, cbSceneParam._m0[61u].y, _2115 * cbSceneParam._m0[61u].x))) / _2331;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2332 >= cbSceneParam._m0[64u].x) && (_2333 >= cbSceneParam._m0[64u].y)) && (_2332 <= cbSceneParam._m0[64u].z)) && (_2333 <= cbSceneParam._m0[64u].w))
        {
            float _2471 = fma(_2127, cbSceneParam._m0[62u].w, fma(_2123, cbSceneParam._m0[62u].z, fma(_2119, cbSceneParam._m0[62u].y, _2115 * cbSceneParam._m0[62u].x))) / _2331;
            float _2475 = isnan(cbSceneParam._m0[41u].w) ? _2471 : (isnan(_2471) ? cbSceneParam._m0[41u].w : max(_2471, cbSceneParam._m0[41u].w));
            float _2518 = (cbSceneParam._m0[33u].x - sqrt(((_2129 * _2129) + (_2128 * _2128)) + (_2130 * _2130))) * cbSceneParam._m0[33u].y;
            float _4704 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
            float _2525 = (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2332, cbSceneParam._m0[33u].w + _2333), _2475), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2332, _2333 - cbSceneParam._m0[33u].z), _2475), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2332 - cbSceneParam._m0[33u].z, _2333 - cbSceneParam._m0[33u].w), _2475), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2332 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2333), _2475), 0.0)).x), vec4(0.25)));
            float _2529 = 1.0 - (_2525 * cbSceneParam._m0[34u].x);
            float _2530 = 1.0 - (_2525 * cbSceneParam._m0[34u].y);
            float _2531 = 1.0 - (_2525 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2531) ? _2279 : (isnan(_2279) ? _2531 : min(_2279, _2531));
            frontier_phi_37_36_ladder_1 = isnan(_2530) ? _2278 : (isnan(_2278) ? _2530 : min(_2278, _2530));
            frontier_phi_37_36_ladder_2 = isnan(_2529) ? _2277 : (isnan(_2277) ? _2529 : min(_2277, _2529));
        }
        else
        {
            frontier_phi_37_36_ladder = _2279;
            frontier_phi_37_36_ladder_1 = _2278;
            frontier_phi_37_36_ladder_2 = _2277;
        }
        _2343 = frontier_phi_37_36_ladder_2;
        _2345 = frontier_phi_37_36_ladder_1;
        _2347 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2343 = _2277;
        _2345 = _2278;
        _2347 = _2279;
    }
    uvec4 _2352 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2354 = _2352.x * 14u;
    uint _2355 = _2354 + 13u;
    float _2362 = _1028 + (-1.0);
    float _2367 = (cbLight._m0[_2355].x * _2362) + 1.0;
    float _2368 = (cbLight._m0[_2355].y * _2362) + 1.0;
    float _2369 = (cbLight._m0[_2355].z * _2362) + 1.0;
    float _2370 = (cbLight._m0[_2355].w * _2362) + 1.0;
    uint _2371 = _2354 + 5u;
    float _2377 = isnan(1.0) ? _2368 : (isnan(_2368) ? 1.0 : min(_2368, 1.0));
    uint _2381 = _2354 + 4u;
    float _2390 = isnan(1.0) ? _2367 : (isnan(_2367) ? 1.0 : min(_2367, 1.0));
    uint _2394 = _2354 | 1u;
    float _2405 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_866, _867, _868));
    float _2408 = dot(vec3(cbLight._m0[_2394].xyz), vec3(_866, _867, _868));
    float _4740 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _4751 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2413 = (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * 0.3183098733425140380859375;
    float _2415 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * 0.3183098733425140380859375;
    float _2422 = ((cbLight._m0[_2371].x * _2377) * _2415) + (((cbLight._m0[_2381].x * _2343) * _2390) * _2413);
    float _2423 = ((_2377 * cbLight._m0[_2371].y) * _2415) + (((cbLight._m0[_2381].y * _2345) * _2390) * _2413);
    float _2424 = ((_2377 * cbLight._m0[_2371].z) * _2415) + (((cbLight._m0[_2381].z * _2347) * _2390) * _2413);
    uvec4 _2428 = floatBitsToUint(cbLight._m0[_2354 + 12u]);
    bool _2430 = _2428.x == 0u;
    float _2532;
    float _2534;
    float _2536;
    if (_2430)
    {
        _2532 = _2422;
        _2534 = _2423;
        _2536 = _2424;
    }
    else
    {
        uint _2540 = _2354 + 6u;
        float _2556 = (dot(vec3(cbLight._m0[_2354 + 2u].xyz), vec3(_866, _867, _868)) * 0.5) + 0.5;
        float _2557 = _2556 * _2556;
        float _4762 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2558 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _2559 = isnan(1.0) ? _2369 : (isnan(_2369) ? 1.0 : min(_2369, 1.0));
        _2532 = (((cbLight._m0[_2540].x * 0.3183098733425140380859375) * _2558) * _2559) + _2422;
        _2534 = (((cbLight._m0[_2540].y * 0.3183098733425140380859375) * _2558) * _2559) + _2423;
        _2536 = (((cbLight._m0[_2540].z * 0.3183098733425140380859375) * _2558) * _2559) + _2424;
    }
    bool _2539 = _2428.y == 0u;
    float _2594;
    float _2596;
    float _2598;
    if (_2539)
    {
        _2594 = _2532;
        _2596 = _2534;
        _2598 = _2536;
    }
    else
    {
        uint _2756 = _2354 + 7u;
        float _2772 = (dot(vec3(cbLight._m0[_2354 + 3u].xyz), vec3(_866, _867, _868)) * 0.5) + 0.5;
        float _2773 = _2772 * _2772;
        float _4778 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2774 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
        float _2775 = isnan(1.0) ? _2370 : (isnan(_2370) ? 1.0 : min(_2370, 1.0));
        _2594 = (((cbLight._m0[_2756].x * 0.3183098733425140380859375) * _2774) * _2775) + _2532;
        _2596 = (((cbLight._m0[_2756].y * 0.3183098733425140380859375) * _2774) * _2775) + _2534;
        _2598 = (((cbLight._m0[_2756].z * 0.3183098733425140380859375) * _2774) * _2775) + _2536;
    }
    uint _2601 = _2354 + 8u;
    float _2614 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2354].w)) * _869) * 0.949999988079071044921875);
    float _2615 = _2614 * _2614;
    float _2616 = cbLight._m0[_2354].x + _945;
    float _2617 = cbLight._m0[_2354].y + _946;
    float _2618 = cbLight._m0[_2354].z + _947;
    float _2622 = inversesqrt(dot(vec3(_2616, _2617, _2618), vec3(_2616, _2617, _2618)));
    float _2623 = _2622 * _2616;
    float _2624 = _2622 * _2617;
    float _2625 = _2622 * _2618;
    float _2626 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2354].xyz));
    float _4794 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2629 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
    float _4805 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _2630 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
    float _2631 = dot(vec3(_866, _867, _868), vec3(_2623, _2624, _2625));
    float _4816 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2634 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
    float _2635 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_2623, _2624, _2625));
    float _4827 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
    float _2639 = _2615 * _2615;
    float _2643 = ((_2634 * _2634) * (_2639 + (-1.0))) + 1.0;
    float _2654 = (exp2(log2(1.0 - (isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2655 = 1.0 - _2615;
    float _2666 = (0.5 / (((_2630 * ((_2629 * _2655) + _2615)) + 9.9999999392252902907785028219223e-09) + (((_2630 * _2655) + _2615) * _2629))) * _2629;
    float _4838 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2668 = (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0))) * (_2639 / ((_2643 * _2643) * 3.141590118408203125));
    uint _2682 = _2354 + 9u;
    float _2693 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2394].w)) * _869) * 0.949999988079071044921875);
    float _2694 = _2693 * _2693;
    float _2695 = cbLight._m0[_2394].x + _945;
    float _2696 = cbLight._m0[_2394].y + _946;
    float _2697 = cbLight._m0[_2394].z + _947;
    float _2701 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
    float _2702 = _2701 * _2695;
    float _2703 = _2701 * _2696;
    float _2704 = _2701 * _2697;
    float _2705 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2394].xyz));
    float _4849 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
    float _2708 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
    float _2709 = dot(vec3(_866, _867, _868), vec3(_2702, _2703, _2704));
    float _4860 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
    float _2712 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
    float _2713 = dot(vec3(cbLight._m0[_2394].xyz), vec3(_2702, _2703, _2704));
    float _4871 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2717 = _2694 * _2694;
    float _2721 = ((_2712 * _2712) * (_2717 + (-1.0))) + 1.0;
    float _2730 = (exp2(log2(1.0 - (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2731 = 1.0 - _2694;
    float _2741 = (0.5 / (((_2630 * ((_2708 * _2731) + _2694)) + 9.9999999392252902907785028219223e-09) + (((_2630 * _2731) + _2694) * _2708))) * _2708;
    float _4882 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
    float _2743 = (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (_2717 / ((_2721 * _2721) * 3.141590118408203125));
    float _2753 = (((_2730 * cbLight._m0[_2682].x) * _2743) * _2377) + ((((cbLight._m0[_2601].x * _2343) * _2654) * _2668) * _2390);
    float _2754 = (((_2730 * cbLight._m0[_2682].y) * _2743) * _2377) + ((((cbLight._m0[_2601].y * _2345) * _2654) * _2668) * _2390);
    float _2755 = (((_2730 * cbLight._m0[_2682].z) * _2743) * _2377) + ((((cbLight._m0[_2601].z * _2347) * _2654) * _2668) * _2390);
    float _2811;
    float _2813;
    float _2815;
    if (_2430)
    {
        _2811 = _2753;
        _2813 = _2754;
        _2815 = _2755;
    }
    else
    {
        uint _2817 = _2354 + 2u;
        uint _2821 = _2354 + 10u;
        float _2835 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2817].w)) * _869) * 0.949999988079071044921875);
        float _2836 = _2835 * _2835;
        float _2837 = cbLight._m0[_2817].x + _945;
        float _2838 = cbLight._m0[_2817].y + _946;
        float _2839 = cbLight._m0[_2817].z + _947;
        float _2843 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
        float _2844 = _2843 * _2837;
        float _2845 = _2843 * _2838;
        float _2846 = _2843 * _2839;
        float _2847 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2817].xyz));
        float _4893 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2850 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
        float _2851 = dot(vec3(_866, _867, _868), vec3(_2844, _2845, _2846));
        float _4904 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2854 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
        float _2855 = dot(vec3(cbLight._m0[_2817].xyz), vec3(_2844, _2845, _2846));
        float _4915 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2859 = _2836 * _2836;
        float _2863 = ((_2854 * _2854) * (_2859 + (-1.0))) + 1.0;
        float _2872 = (exp2(log2(1.0 - (isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2873 = 1.0 - _2836;
        float _2883 = (0.5 / (((_2630 * ((_2850 * _2873) + _2836)) + 9.9999999392252902907785028219223e-09) + (((_2630 * _2873) + _2836) * _2850))) * _2850;
        float _4926 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
        float _2885 = (isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0))) * (_2859 / ((_2863 * _2863) * 3.141590118408203125));
        float _2886 = isnan(1.0) ? _2369 : (isnan(_2369) ? 1.0 : min(_2369, 1.0));
        _2811 = (((_2872 * cbLight._m0[_2821].x) * _2885) * _2886) + _2753;
        _2813 = (((_2872 * cbLight._m0[_2821].y) * _2885) * _2886) + _2754;
        _2815 = (((_2872 * cbLight._m0[_2821].z) * _2885) * _2886) + _2755;
    }
    float _2917;
    float _2919;
    float _2921;
    if (_2539)
    {
        _2917 = _2811;
        _2919 = _2813;
        _2921 = _2815;
    }
    else
    {
        uint _2928 = _2354 + 3u;
        uint _2932 = _2354 + 11u;
        float _2946 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2928].w)) * _869) * 0.949999988079071044921875);
        float _2947 = _2946 * _2946;
        float _2948 = cbLight._m0[_2928].x + _945;
        float _2949 = cbLight._m0[_2928].y + _946;
        float _2950 = cbLight._m0[_2928].z + _947;
        float _2954 = inversesqrt(dot(vec3(_2948, _2949, _2950), vec3(_2948, _2949, _2950)));
        float _2955 = _2954 * _2948;
        float _2956 = _2954 * _2949;
        float _2957 = _2954 * _2950;
        float _2958 = dot(vec3(_866, _867, _868), vec3(cbLight._m0[_2928].xyz));
        float _4942 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2961 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
        float _2962 = dot(vec3(_866, _867, _868), vec3(_2955, _2956, _2957));
        float _4953 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
        float _2965 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
        float _2966 = dot(vec3(cbLight._m0[_2928].xyz), vec3(_2955, _2956, _2957));
        float _4964 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        float _2970 = _2947 * _2947;
        float _2974 = ((_2965 * _2965) * (_2970 + (-1.0))) + 1.0;
        float _2983 = (exp2(log2(1.0 - (isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2984 = 1.0 - _2947;
        float _2994 = (0.5 / (((_2630 * ((_2961 * _2984) + _2947)) + 9.9999999392252902907785028219223e-09) + (((_2630 * _2984) + _2947) * _2961))) * _2961;
        float _4975 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
        float _2996 = (isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0))) * (_2970 / ((_2974 * _2974) * 3.141590118408203125));
        float _2997 = isnan(1.0) ? _2370 : (isnan(_2370) ? 1.0 : min(_2370, 1.0));
        _2917 = (((_2983 * cbLight._m0[_2932].x) * _2996) * _2997) + _2811;
        _2919 = (((_2983 * cbLight._m0[_2932].y) * _2996) * _2997) + _2813;
        _2921 = (((_2983 * cbLight._m0[_2932].z) * _2996) * _2997) + _2815;
    }
    float _3063;
    float _3065;
    float _3067;
    float _3069;
    float _3071;
    float _3073;
    if (_2352.y == 0u)
    {
        uvec4 _3018 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3019 = _3018.x;
        uint _3030 = uint((float(_3018.y) * floor(float(uint(cbSceneParam._m0[85u].y * _966) / _3019))) + floor(float(uint(cbSceneParam._m0[85u].x * _965) / _3019)));
        float _3040 = (log2(_2130 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3041 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
        uint _3044 = uint(isnan(14.0) ? _3041 : (isnan(_3041) ? 14.0 : min(_3041, 14.0)));
        uvec4 _3049 = texelFetch(g_lightClusterGridBuffer, int(((_3044 << 2u) + (_3030 << 6u)) >> 2u));
        uint _3050 = _3049.x;
        uint _3051 = _3018.z;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        if (((((1u << ((_3051 >> 4u) & 15u)) + 4294967295u) & _3050) == 0u) || ((_3051 & 240u) == 0u))
        {
            _3130 = 0.0;
            _3132 = 0.0;
            _3134 = 0.0;
            _3136 = 0.0;
            _3138 = 0.0;
            _3140 = 0.0;
        }
        else
        {
            float _3131;
            float _3133;
            float _3135;
            float _3137;
            float _3139;
            float _3141;
            float _3282 = 0.0;
            float _3283 = 0.0;
            float _3284 = 0.0;
            float _3285 = 0.0;
            float _3286 = 0.0;
            float _3287 = 0.0;
            uint _3288 = 0u;
            uint _3297;
            bool _3298;
            for (;;)
            {
                _3297 = texelFetch(g_lightClassification, int((((_3044 << 5u) + (_3030 << 9u)) + (_3288 << 2u)) >> 2u)).x;
                _3298 = _3297 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3298)
                {
                    frontier_phi_71_pred = _3287;
                    frontier_phi_71_pred_1 = _3286;
                    frontier_phi_71_pred_2 = _3285;
                    frontier_phi_71_pred_3 = _3284;
                    frontier_phi_71_pred_4 = _3283;
                    frontier_phi_71_pred_5 = _3282;
                }
                else
                {
                    float _3427;
                    float _3428;
                    float _3429;
                    float _3430;
                    float _3431;
                    float _3432;
                    uint _3433;
                    _3427 = _3282;
                    _3428 = _3283;
                    _3429 = _3284;
                    _3430 = _3285;
                    _3431 = _3286;
                    _3432 = _3287;
                    _3433 = _3297;
                    float _3354;
                    float _3355;
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    for (;;)
                    {
                        uint _3437 = uint(findLSB(_3433)) + (_3288 << 5u);
                        uint _3434 = (_3433 + 4294967295u) & _3433;
                        uint _3439 = _3437 * 48u;
                        vec4 _3453 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3439)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 3u)).x));
                        uint _3459 = (_3437 * 48u) + 4u;
                        vec4 _3472 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3459)).x, texelFetch(g_PointLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3459 + 3u)).x));
                        uint _3478 = (_3437 * 48u) + 8u;
                        vec3 _3489 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3478)).x, texelFetch(g_PointLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3478 + 2u)).x));
                        float _3493 = _3453.x - _2128;
                        float _3494 = _3453.y - _2129;
                        float _3495 = _3453.z - _2130;
                        float _3496 = dot(vec3(_3493, _3494, _3495), vec3(_3493, _3494, _3495));
                        float _3499 = inversesqrt(_3496);
                        float _3500 = _3499 * _3493;
                        float _3501 = _3499 * _3494;
                        float _3502 = _3499 * _3495;
                        float _3503 = dot(vec3(_984, _987, _990), vec3(_3500, _3501, _3502));
                        float _3508 = 1.0 - (_3496 * _3453.w);
                        float _5001 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                        float _3509 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                        float _3510 = sqrt(_3496) * _3472.w;
                        float _3513 = 1.39999997615814208984375 / (_3510 + 1.39999997615814208984375);
                        float _3514 = _3513 * _3513;
                        float _3517 = ((1.0 - _3514) * _3503) + _3514;
                        float _3520 = _3510 * _3510;
                        float _3524 = ((isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0))) * _3509) / ((_3520 * 0.699999988079071044921875) + 1.0);
                        float _3528 = (-0.0) - _2128;
                        float _3529 = (-0.0) - _2129;
                        float _3530 = (-0.0) - _2130;
                        float _3534 = inversesqrt(dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530)));
                        float _3535 = _3534 * _3528;
                        float _3536 = _3534 * _3529;
                        float _3537 = _3534 * _3530;
                        float _3544 = exp2(log2(1.0 / ((_3520 * 3.5) + 5.0)) * 0.25);
                        float _3545 = 1.0 - _1044;
                        float _3552 = sqrt(1.0 - ((1.0 - (_3545 * _3545)) * (1.0 - (_3544 * _3544))));
                        float _3553 = _3552 * _3552;
                        float _3554 = _3553 * _3553;
                        float _3555 = _3535 + _3500;
                        float _3556 = _3536 + _3501;
                        float _3557 = _3537 + _3502;
                        float _3561 = inversesqrt(dot(vec3(_3555, _3556, _3557), vec3(_3555, _3556, _3557)));
                        float _3565 = dot(vec3(_984, _987, _990), vec3(_3535, _3536, _3537));
                        float _5017 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                        float _3568 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
                        float _3569 = dot(vec3(_984, _987, _990), vec3(_3561 * _3555, _3561 * _3556, _3561 * _3557));
                        float _5028 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                        float _3572 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
                        float _3576 = ((_3572 * _3572) * (_3554 + (-1.0))) + 1.0;
                        float _3577 = _3513 * _3553;
                        float _3578 = _3577 * _3577;
                        float _3581 = ((1.0 - _3578) * _3503) + _3578;
                        float _5039 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                        float _3582 = isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0));
                        float _3583 = 1.0 - _3553;
                        float _3593 = (0.5 / (((_3582 * ((_3568 * _3583) + _3553)) + 9.9999999392252902907785028219223e-09) + (((_3582 * _3583) + _3553) * _3568))) * _3582;
                        float _5050 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                        float _3604 = (((_3554 * 3.1415927410125732421875) * (isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0)))) / ((_3576 * _3576) * ((_3520 * 2.1991131305694580078125) + 3.141590118408203125))) * _3509;
                        _3357 = (_3524 * _3472.x) + _3430;
                        _3358 = (_3524 * _3472.y) + _3431;
                        _3359 = (_3524 * _3472.z) + _3432;
                        _3354 = (_3604 * _3489.x) + _3427;
                        _3355 = (_3604 * _3489.y) + _3428;
                        _3356 = (_3604 * _3489.z) + _3429;
                        if (_3434 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3427 = _3354;
                            _3428 = _3355;
                            _3429 = _3356;
                            _3430 = _3357;
                            _3431 = _3358;
                            _3432 = _3359;
                            _3433 = _3434;
                        }
                    }
                    frontier_phi_71_pred = _3359;
                    frontier_phi_71_pred_1 = _3358;
                    frontier_phi_71_pred_2 = _3357;
                    frontier_phi_71_pred_3 = _3356;
                    frontier_phi_71_pred_4 = _3355;
                    frontier_phi_71_pred_5 = _3354;
                }
                _3141 = frontier_phi_71_pred;
                _3139 = frontier_phi_71_pred_1;
                _3137 = frontier_phi_71_pred_2;
                _3135 = frontier_phi_71_pred_3;
                _3133 = frontier_phi_71_pred_4;
                _3131 = frontier_phi_71_pred_5;
                uint _3289 = _3288 + 1u;
                if (_3289 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3282 = _3131;
                    _3283 = _3133;
                    _3284 = _3135;
                    _3285 = _3137;
                    _3286 = _3139;
                    _3287 = _3141;
                    _3288 = _3289;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3130 = _3131;
            _3132 = _3133;
            _3134 = _3135;
            _3136 = _3137;
            _3138 = _3139;
            _3140 = _3141;
        }
        uvec4 _3144 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3145 = _3144.z;
        uint _3147 = (_3145 >> 8u) & 15u;
        float _3250;
        float _3252;
        float _3254;
        float _3256;
        float _3258;
        float _3260;
        if (((4294967295u << _3147) & _3050) == 0u)
        {
            _3250 = _3130;
            _3252 = _3132;
            _3254 = _3134;
            _3256 = _3136;
            _3258 = _3138;
            _3260 = _3140;
        }
        else
        {
            float _3275 = inversesqrt(dot(vec3(_2128, _2129, _2130), vec3(_2128, _2129, _2130)));
            float _3276 = _3275 * _2128;
            float _3277 = _3275 * _2129;
            float _3278 = _3275 * _2130;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3147 < ((_3145 >> 12u) & 15u))
            {
                float _3251;
                float _3253;
                float _3255;
                float _3257;
                float _3259;
                float _3261;
                float _3410 = _3130;
                float _3411 = _3132;
                float _3412 = _3134;
                float _3413 = _3136;
                float _3414 = _3138;
                float _3415 = _3140;
                uint _3416 = _3147;
                uint _3425;
                bool _3426;
                for (;;)
                {
                    _3425 = texelFetch(g_lightClassification, int((((_3044 << 5u) + (_3030 << 9u)) + (_3416 << 2u)) >> 2u)).x;
                    _3426 = _3425 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3426)
                    {
                        frontier_phi_82_pred = _3415;
                        frontier_phi_82_pred_1 = _3414;
                        frontier_phi_82_pred_2 = _3413;
                        frontier_phi_82_pred_3 = _3412;
                        frontier_phi_82_pred_4 = _3411;
                        frontier_phi_82_pred_5 = _3410;
                    }
                    else
                    {
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3911;
                        float _3912;
                        float _3913;
                        float _3914;
                        float _3915;
                        float _3916;
                        float _3631 = _3410;
                        float _3632 = _3411;
                        float _3633 = _3412;
                        float _3634 = _3413;
                        float _3635 = _3414;
                        float _3636 = _3415;
                        uint _3637 = _3425;
                        uint _3638;
                        vec4 _3663;
                        float _3664;
                        vec4 _3679;
                        vec3 _3691;
                        vec4 _3706;
                        vec4 _3721;
                        float _3767;
                        bool _3768;
                        for (;;)
                        {
                            uint _3648 = ((_3416 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3637));
                            _3638 = (_3637 + 4294967295u) & _3637;
                            uint _3650 = _3648 * 40u;
                            _3663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 3u)).x));
                            _3664 = _3663.w;
                            uint _3666 = (_3648 * 40u) + 4u;
                            _3679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 3u)).x));
                            uint _3681 = (_3648 * 40u) + 8u;
                            _3691 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x));
                            uint _3693 = (_3648 * 40u) + 16u;
                            _3706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 3u)).x));
                            uint _3708 = (_3648 * 40u) + 20u;
                            _3721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 3u)).x));
                            uint _3723 = (_3648 * 40u) + 24u;
                            vec4 _3736 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 3u)).x));
                            uint _3742 = (_3648 * 40u) + 28u;
                            vec4 _3755 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3742)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 3u)).x));
                            _3767 = fma(_2130, _3755.z, fma(_2129, _3755.y, _3755.x * _2128)) + _3755.w;
                            _3768 = !((fma(_2130, _3736.z, fma(_2129, _3736.y, _3736.x * _2128)) + _3736.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3768)
                            {
                                float _3795 = _3663.x - _2128;
                                float _3796 = _3663.y - _2129;
                                float _3797 = _3663.z - _2130;
                                float _3798 = dot(vec3(_3795, _3796, _3797), vec3(_3795, _3796, _3797));
                                float _3801 = inversesqrt(_3798);
                                float _3802 = _3801 * _3795;
                                float _3803 = _3801 * _3796;
                                float _3804 = _3801 * _3797;
                                float _3808 = 1.0 - (_3798 / (_3664 * _3664));
                                float _5061 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3809 = isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0));
                                float _3813 = sqrt(_3798) * _3679.w;
                                float _3815 = 1.39999997615814208984375 / (_3813 + 1.39999997615814208984375);
                                float _3816 = _3815 * _3815;
                                float _3819 = ((1.0 - _3816) * dot(vec3(_3802, _3803, _3804), vec3(_984, _987, _990))) + _3816;
                                float _3822 = _3813 * _3813;
                                float _3826 = (fma(_2130, _3706.z, fma(_2129, _3706.y, _3706.x * _2128)) + _3706.w) / _3767;
                                float _3827 = (fma(_2130, _3721.z, fma(_2129, _3721.y, _3721.x * _2128)) + _3721.w) / _3767;
                                float _3831 = 1.0 - dot(vec2(_3826, _3827), vec2(_3826, _3827));
                                float _5077 = isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0));
                                float _3832 = isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0));
                                float _3833 = _3832 * (((isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0))) * _3809) / ((_3822 * 0.699999988079071044921875) + 1.0));
                                float _3845 = exp2(log2(1.0 / ((_3822 * 3.5) + 5.0)) * 0.25);
                                float _3846 = 1.0 - _1044;
                                float _3853 = sqrt(1.0 - ((1.0 - (_3846 * _3846)) * (1.0 - (_3845 * _3845))));
                                float _3854 = _3853 * _3853;
                                float _3855 = _3854 * _3854;
                                float _3856 = _3802 - _3276;
                                float _3857 = _3803 - _3277;
                                float _3858 = _3804 - _3278;
                                float _3862 = inversesqrt(dot(vec3(_3856, _3857, _3858), vec3(_3856, _3857, _3858)));
                                float _3866 = dot(vec3(_984, _987, _990), vec3((-0.0) - _3276, (-0.0) - _3277, (-0.0) - _3278));
                                float _5088 = isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0));
                                float _3869 = isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0));
                                float _3870 = dot(vec3(_984, _987, _990), vec3(_3862 * _3856, _3862 * _3857, _3862 * _3858));
                                float _5099 = isnan(0.0) ? _3870 : (isnan(_3870) ? 0.0 : max(_3870, 0.0));
                                float _3873 = isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0));
                                float _3877 = ((_3873 * _3873) * (_3855 + (-1.0))) + 1.0;
                                float _3878 = _3815 * _3854;
                                float _3879 = _3878 * _3878;
                                float _3885 = ((1.0 - _3879) * dot(vec3(_984, _987, _990), vec3(_3802, _3803, _3804))) + _3879;
                                float _5110 = isnan(0.0) ? _3885 : (isnan(_3885) ? 0.0 : max(_3885, 0.0));
                                float _3886 = isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0));
                                float _3887 = 1.0 - _3854;
                                float _3897 = (0.5 / (((_3886 * ((_3869 * _3887) + _3854)) + 9.9999999392252902907785028219223e-09) + (((_3886 * _3887) + _3854) * _3869))) * _3886;
                                float _5121 = isnan(0.0) ? _3897 : (isnan(_3897) ? 0.0 : max(_3897, 0.0));
                                float _3907 = (_3832 * _3809) * (((_3855 * 3.1415927410125732421875) * (isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0)))) / ((_3877 * _3877) * ((_3822 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3833 * _3679.z;
                                frontier_phi_88_pred_1 = _3833 * _3679.y;
                                frontier_phi_88_pred_2 = _3833 * _3679.x;
                                frontier_phi_88_pred_3 = _3907 * _3691.z;
                                frontier_phi_88_pred_4 = _3907 * _3691.y;
                                frontier_phi_88_pred_5 = _3907 * _3691.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3916 = frontier_phi_88_pred;
                            _3915 = frontier_phi_88_pred_1;
                            _3914 = frontier_phi_88_pred_2;
                            _3913 = frontier_phi_88_pred_3;
                            _3912 = frontier_phi_88_pred_4;
                            _3911 = frontier_phi_88_pred_5;
                            _3621 = _3914 + _3634;
                            _3622 = _3915 + _3635;
                            _3623 = _3916 + _3636;
                            _3618 = _3911 + _3631;
                            _3619 = _3912 + _3632;
                            _3620 = _3913 + _3633;
                            if (_3638 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3631 = _3618;
                                _3632 = _3619;
                                _3633 = _3620;
                                _3634 = _3621;
                                _3635 = _3622;
                                _3636 = _3623;
                                _3637 = _3638;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3623;
                        frontier_phi_82_pred_1 = _3622;
                        frontier_phi_82_pred_2 = _3621;
                        frontier_phi_82_pred_3 = _3620;
                        frontier_phi_82_pred_4 = _3619;
                        frontier_phi_82_pred_5 = _3618;
                    }
                    _3261 = frontier_phi_82_pred;
                    _3259 = frontier_phi_82_pred_1;
                    _3257 = frontier_phi_82_pred_2;
                    _3255 = frontier_phi_82_pred_3;
                    _3253 = frontier_phi_82_pred_4;
                    _3251 = frontier_phi_82_pred_5;
                    uint _3417 = _3416 + 1u;
                    if (_3417 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3410 = _3251;
                        _3411 = _3253;
                        _3412 = _3255;
                        _3413 = _3257;
                        _3414 = _3259;
                        _3415 = _3261;
                        _3416 = _3417;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3257;
                frontier_phi_63_64_ladder_1 = _3261;
                frontier_phi_63_64_ladder_2 = _3259;
                frontier_phi_63_64_ladder_3 = _3255;
                frontier_phi_63_64_ladder_4 = _3253;
                frontier_phi_63_64_ladder_5 = _3251;
            }
            else
            {
                frontier_phi_63_64_ladder = _3136;
                frontier_phi_63_64_ladder_1 = _3140;
                frontier_phi_63_64_ladder_2 = _3138;
                frontier_phi_63_64_ladder_3 = _3134;
                frontier_phi_63_64_ladder_4 = _3132;
                frontier_phi_63_64_ladder_5 = _3130;
            }
            _3250 = frontier_phi_63_64_ladder_5;
            _3252 = frontier_phi_63_64_ladder_4;
            _3254 = frontier_phi_63_64_ladder_3;
            _3256 = frontier_phi_63_64_ladder;
            _3258 = frontier_phi_63_64_ladder_2;
            _3260 = frontier_phi_63_64_ladder_1;
        }
        float _3265 = isnan(1.0) ? _1028 : (isnan(_1028) ? 1.0 : min(_1028, 1.0));
        _3063 = (_3265 * _3256) + _2594;
        _3065 = (_3265 * _3258) + _2596;
        _3067 = (_3265 * _3260) + _2598;
        _3069 = ((_3250 * 0.039999999105930328369140625) * _3265) + _2917;
        _3071 = ((_3252 * 0.039999999105930328369140625) * _3265) + _2919;
        _3073 = ((_3254 * 0.039999999105930328369140625) * _3265) + _2921;
    }
    else
    {
        _3063 = _2594;
        _3065 = _2596;
        _3067 = _2598;
        _3069 = _2917;
        _3071 = _2919;
        _3073 = _2921;
    }
    float _5137 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _5148 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _5159 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _3090 = ((isnan(1.0) ? _5137 : (isnan(_5137) ? 1.0 : min(_5137, 1.0))) * (_3063 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1028))) + ((_3069 + ((isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0))) * _1864)) * cbPerFrame._m0[3u].x);
    float _3091 = ((isnan(1.0) ? _5148 : (isnan(_5148) ? 1.0 : min(_5148, 1.0))) * (_3065 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1028))) + ((_3071 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1864)) * cbPerFrame._m0[3u].x);
    float _3092 = ((isnan(1.0) ? _5159 : (isnan(_5159) ? 1.0 : min(_5159, 1.0))) * (_3067 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1028))) + ((_3073 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1864)) * cbPerFrame._m0[3u].x);
    uint _3093 = _283 + 6u;
    float _3101 = _965 / cbSceneParam._m0[86u].x;
    float _3102 = _966 / cbSceneParam._m0[86u].y;
    vec4 _3116 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3101, _3102, (log2((isnan(cbSceneParam._m0[77u].w) ? _887 : (isnan(_887) ? cbSceneParam._m0[77u].w : min(_887, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3118 = _3116.x;
    float _3119 = _3116.y;
    float _3120 = _3116.z;
    float _3121 = _3116.w;
    float _3192;
    float _3194;
    float _3196;
    float _3198;
    if (_887 > cbSceneParam._m0[78u].w)
    {
        float _3155 = isnan(_887) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _887 : min(cbSceneParam._m0[80u].w, _887));
        float _3156 = _3155 / _887;
        float _3167 = _3156 * _938;
        float _3168 = _939 * _3156;
        float _3169 = (-0.0) - _3168;
        float _3170 = _3156 * _940;
        float _3172 = (cbSceneParam._m0[77u].w * _3169) / _3155;
        float _3173 = _3172 + cbSceneParam._m0[79u].w;
        float _3174 = cbSceneParam._m0[79u].w - _3168;
        float _3180 = sqrt(((_3167 * _3167) + (_3168 * _3168)) + (_3170 * _3170));
        float _3183 = (1.0 - (cbSceneParam._m0[77u].w / _3155)) * _3180;
        float _3188 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3190 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3367;
        if (abs((_3169 - _3172) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3367 = ((((_3173 > 0.0) ? exp2(_3188 * _3173) : (2.0 - exp2(_3190 * _3173))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3183;
        }
        else
        {
            float _3311 = 1.0 / cbSceneParam._m0[80u].x;
            float _3312 = isnan(_3174) ? _3173 : (isnan(_3173) ? _3174 : max(_3173, _3174));
            float _3313 = isnan(_3174) ? _3173 : (isnan(_3173) ? _3174 : min(_3173, _3174));
            float _3322 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : min(_3312, 0.0));
            float _3323 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : min(_3313, 0.0));
            _3367 = ((abs(_3180 / _3169) * cbSceneParam._m0[80u].y) * ((((_3322 - _3323) * 2.0) - ((exp2(_3188 * (isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0)))) - exp2(_3188 * (isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0))))) * _3311)) - ((exp2(_3190 * _3322) - exp2(_3190 * _3323)) * _3311))) + (_3183 * cbSceneParam._m0[80u].z);
        }
        vec4 _3369 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3101, _3102, 1.0), 0.0);
        float _3378 = exp2((_3367 * (-1.44269502162933349609375)) * (1.0 - _3369.w));
        float _3379 = log2(_3378);
        float _3395 = log2(_3121);
        _3192 = (exp2(_3395 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3379 * cbSceneParam._m0[78u].x)) * _3369.x) / cbSceneParam._m0[78u].x)) + _3118;
        _3194 = (exp2(_3395 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3379 * cbSceneParam._m0[78u].y)) * _3369.y) / cbSceneParam._m0[78u].y)) + _3119;
        _3196 = (exp2(_3395 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3379 * cbSceneParam._m0[78u].z)) * _3369.z) / cbSceneParam._m0[78u].z)) + _3120;
        _3198 = _3378 * _3121;
    }
    else
    {
        _3192 = _3118;
        _3194 = _3119;
        _3196 = _3120;
        _3198 = _3121;
    }
    bool _3405;
    vec4 _3208;
    vec4 _3230;
    float _3232;
    float _3236;
    float _3237;
    float _3238;
    float _3239;
    bool _3249;
    for (;;)
    {
        _3208 = cbMatDynParam._m0[0u];
        float _3210 = roundEven(_3208.y);
        bool _3211 = _3210 == 3.0;
        float _3212 = log2(_3198);
        float _3219 = exp2(_3212 * cbSceneParam._m0[78u].x) * _3090;
        float _3220 = exp2(_3212 * cbSceneParam._m0[78u].y) * _3091;
        float _3221 = exp2(_3212 * cbSceneParam._m0[78u].z) * _3092;
        float _3228 = _954 + (-0.5);
        _3230 = cbMtdParam._m0[1u];
        _3232 = _3230.y * _3228;
        float _3235 = (_3210 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3236 = _3235 * (_3211 ? _3219 : (_3219 + (cbSceneParam._m0[72u].w * _3192)));
        _3237 = _3235 * (_3211 ? _3220 : (_3220 + (cbSceneParam._m0[72u].w * _3194)));
        _3238 = _3235 * (_3211 ? _3221 : (_3221 + (cbSceneParam._m0[72u].w * _3196)));
        _3239 = _3228 * 0.999000012874603271484375;
        _3249 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3249)
        {
            if ((cbInstanceData._m0[_283 + 7u].x + _3239) < 0.5)
            {
                _3405 = true;
                break;
            }
        }
        uint _3346 = _1003 + uint(_3208.w);
        if ((cbInstanceData._m0[_3346].w < 1.0) && ((cbInstanceData._m0[_3346].w + _3239) < 0.5))
        {
            _3405 = true;
            break;
        }
        if ((_3232 + 1.0) < _3230.x)
        {
            _3405 = true;
            break;
        }
        _3405 = false;
        break;
    }
    float _3609;
    if (_3405)
    {
        discard_state = true;
        _3609 = 0.0;
    }
    else
    {
        _3609 = cbInstanceData._m0[_3093].w;
    }
    SV_Target.x = _3236;
    SV_Target.y = _3237;
    SV_Target.z = _3238;
    SV_Target.w = _3609;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3093].w;
    discard_exit();
}


