#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1163;
float _3805;
float _3806;
float _3807;
float _3808;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _356 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _356) * cbMtdParam._m0[24u].x) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3817 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _381 = (_374 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _382 = (_374 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _383 = (_374 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _402 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _422 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _441 = _439.x;
    float _442 = _439.y;
    float _443 = _439.z;
    float _452 = ((_422.z - _443) * _374) + _443;
    float _455 = ((((_422.x - _441) * _374) + _441) * 2.0) + (-1.0);
    float _457 = ((((_422.y - _442) * _374) + _442) * 2.0) + (-1.0);
    float _458 = dot(vec2(_455, _457), vec2(_455, _457));
    float _3828 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _463 = sqrt(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))));
    vec4 _479 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _504 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _506 = _504.x;
    float _507 = 1.0 - _506;
    float _520 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_506 - _507) * cbMtdParam._m0[24u].z) + _507) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3839 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _528 = (_521 * ((_402.x * cbMtdParam._m0[18u].x) - _381)) + _381;
    float _529 = (_521 * ((_402.y * cbMtdParam._m0[18u].y) - _382)) + _382;
    float _530 = (_521 * ((_402.z * cbMtdParam._m0[18u].z) - _383)) + _383;
    float _534 = (cbMtdParam._m0[19u].w * (_479.z - _452)) + _452;
    vec4 _547 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _554 = (_547.x * 2.0) + (-1.0);
    float _555 = (_547.y * 2.0) + (-1.0);
    float _556 = dot(vec2(_554, _555), vec2(_554, _555));
    float _3850 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _564 = (_521 * (_547.z - _534)) + _534;
    float _567 = (((_479.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _455;
    float _568 = (((_479.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _457;
    float _580 = (((_554 - _567) + (cbMtdParam._m0[21u].x * _567)) * _521) + _567;
    float _581 = (((_555 - _568) + (cbMtdParam._m0[21u].x * _568)) * _521) + _568;
    float _582 = (_521 * (sqrt(1.0 - (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) - _463)) + _463;
    float _587 = cbMtdParam._m0[22u].x + _479.w;
    float _590 = fma(_582, _225 * NORMAL.x, fma(_581, _232 * TANGENT.x, (_218 * _210) * _580));
    float _593 = fma(_582, _225 * NORMAL.y, fma(_581, _232 * TANGENT.y, (_218 * _211) * _580));
    float _596 = fma(_582, _225 * NORMAL.z, fma(_581, _232 * TANGENT.z, (_218 * _212) * _580));
    float _600 = inversesqrt(dot(vec3(_590, _593, _596), vec3(_590, _593, _596)));
    float _601 = _600 * _590;
    float _602 = _600 * _593;
    float _603 = _600 * _596;
    float _3861 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _604 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _3872 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _3883 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _3894 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _3905 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _622 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _674 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _664);
    float _675 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _664);
    float _676 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _664);
    float _680 = inversesqrt(dot(vec3(_674, _675, _676), vec3(_674, _675, _676)));
    float _681 = _674 * _680;
    float _682 = _675 * _680;
    float _683 = _676 * _680;
    vec4 _688 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _690 = _688.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _844 = sqrt(((_674 * _674) + (_675 * _675)) + (_676 * _676));
        float _850 = (cbMatDynParam._m0[5u].x * _844) + cbMatDynParam._m0[5u].y;
        float _3916 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _855 = (cbMatDynParam._m0[5u].z * _844) + cbMatDynParam._m0[5u].w;
        float _3927 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) - _851)) + _851) < ((_690 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _701 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _702 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _720 = fma(_603, cbSceneParam._m0[5u].z, fma(_602, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _601));
    float _723 = fma(_603, cbSceneParam._m0[6u].z, fma(_602, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _601));
    float _726 = fma(_603, cbSceneParam._m0[7u].z, fma(_602, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _601));
    uint _739 = _238 + 9u;
    uint _740 = _739 + uint(cbMatDynParam._m0[0u].w);
    float _746 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * cbInstanceData._m0[_740].x;
    float _747 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * cbInstanceData._m0[_740].y;
    float _748 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * cbInstanceData._m0[_740].z;
    float _3938 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _3960 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    vec4 _760 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _701, cbSceneParam._m0[86u].y * _702));
    float _764 = ((isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * TEXCOORD_5.w) * _760.x;
    float _765 = dot(vec3(_601, _602, _603), vec3(_681, _682, _683));
    float _768 = _765 * 2.0;
    float _772 = (_768 * _601) - _681;
    float _773 = (_768 * _602) - _682;
    float _774 = (_768 * _603) - _683;
    float _778 = abs(dot(vec3(_681, _682, _683), vec3(_601, _602, _603)));
    float _3971 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _780 = sqrt(_604);
    float _793 = exp2((_780 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_780 * 3.0));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1162;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _887 = fma(_833, cbModelParam._m0[26u].z, fma(_829, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _825));
        float _891 = fma(_833, cbModelParam._m0[27u].z, fma(_829, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _825));
        float _895 = fma(_833, cbModelParam._m0[28u].z, fma(_829, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _825));
        float _920 = _825 + _601;
        float _921 = _829 + _602;
        float _922 = _833 + _603;
        float _932 = fma(_922, cbModelParam._m0[26u].z, fma(_921, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _920)) - _887;
        float _933 = fma(_922, cbModelParam._m0[27u].z, fma(_921, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _920)) - _891;
        float _934 = fma(_922, cbModelParam._m0[28u].z, fma(_921, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _920)) - _895;
        float _938 = inversesqrt(dot(vec3(_932, _933, _934), vec3(_932, _933, _934)));
        float _951 = ((_938 * _932) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_887 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_938 * _933) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_891 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_938 * _934) / cbModelParam._m0[34u].z) + ((((((_895 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_951, _952, _953), 0.0);
        float _990 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_956.x + (-0.5));
        float _992 = _990 * (_956.y + (-0.5));
        float _993 = _990 * (_956.z + (-0.5));
        float _1000 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_963.x + (-0.5));
        float _1002 = _1000 * (_963.y + (-0.5));
        float _1003 = _1000 * (_963.z + (-0.5));
        float _1010 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_970.x + (-0.5));
        float _1012 = _1010 * (_970.y + (-0.5));
        float _1013 = _1010 * (_970.z + (-0.5));
        float _1020 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_977.x + (-0.5));
        float _1022 = _1020 * (_977.y + (-0.5));
        float _1023 = _1020 * (_977.z + (-0.5));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = _991 * 0.5;
        float _1028 = _1001 * 0.5;
        float _1029 = _1011 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1044 = (dot(vec3(_601, _602, _603), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1054 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _4019 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1056 + 1.0))) + _1061) * _1024;
        float _1071 = _992 * 0.5;
        float _1072 = _1002 * 0.5;
        float _1073 = _1012 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(_601, _602, _603), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _4052 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1098 + 1.0))) + _1103) * _1025;
        float _1113 = _993 * 0.5;
        float _1114 = _1003 * 0.5;
        float _1115 = _1013 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_601, _602, _603), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _4085 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1140 + 1.0))) + _1145) * _1026;
        _1162 = _993;
        _1164 = _992;
        _1165 = _991;
        _1166 = _1003;
        _1167 = _1002;
        _1168 = _1001;
        _1169 = _1013;
        _1170 = _1012;
        _1171 = _1011;
        _1172 = _1026;
        _1173 = _1025;
        _1174 = _1024;
        _1175 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
        _1176 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
        _1177 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
    }
    else
    {
        _1162 = _1163;
        _1164 = _1163;
        _1165 = _1163;
        _1166 = _1163;
        _1167 = _1163;
        _1168 = _1163;
        _1169 = _1163;
        _1170 = _1163;
        _1171 = _1163;
        _1172 = _1163;
        _1173 = _1163;
        _1174 = _1163;
        _1175 = 0.0;
        _1176 = 0.0;
        _1177 = 0.0;
    }
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1205 = fma(_833, cbModelParam._m0[30u].z, fma(_829, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _825));
        float _1209 = fma(_833, cbModelParam._m0[31u].z, fma(_829, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _825));
        float _1213 = fma(_833, cbModelParam._m0[32u].z, fma(_829, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _825));
        float _1236 = _825 + _601;
        float _1237 = _829 + _602;
        float _1238 = _833 + _603;
        float _1248 = fma(_1238, cbModelParam._m0[30u].z, fma(_1237, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1236)) - _1205;
        float _1249 = fma(_1238, cbModelParam._m0[31u].z, fma(_1237, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1236)) - _1209;
        float _1250 = fma(_1238, cbModelParam._m0[32u].z, fma(_1237, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1236)) - _1213;
        float _1254 = inversesqrt(dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250)));
        float _1267 = ((_1254 * _1248) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1205 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1268 = ((_1254 * _1249) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1209 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1254 * _1250) / cbModelParam._m0[35u].z) + ((((((_1213 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        float _1304 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1271.x + (-0.5));
        float _1306 = _1304 * (_1271.y + (-0.5));
        float _1307 = _1304 * (_1271.z + (-0.5));
        float _1314 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1278.x + (-0.5));
        float _1316 = _1314 * (_1278.y + (-0.5));
        float _1317 = _1314 * (_1278.z + (-0.5));
        float _1324 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1285.x + (-0.5));
        float _1326 = _1324 * (_1285.y + (-0.5));
        float _1327 = _1324 * (_1285.z + (-0.5));
        float _1334 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1292.x + (-0.5));
        float _1336 = _1334 * (_1292.y + (-0.5));
        float _1337 = _1334 * (_1292.z + (-0.5));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = _1305 * 0.5;
        float _1342 = _1315 * 0.5;
        float _1343 = _1325 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_601, _602, _603), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4148 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1368 + 1.0))) + _1373) * _1338;
        float _1383 = _1306 * 0.5;
        float _1384 = _1316 * 0.5;
        float _1385 = _1326 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_601, _602, _603), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _4181 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1410 + 1.0))) + _1415) * _1339;
        float _1425 = _1307 * 0.5;
        float _1426 = _1317 * 0.5;
        float _1427 = _1327 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_601, _602, _603), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _4214 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1452 + 1.0))) + _1457) * _1340;
        _1474 = _1307;
        _1475 = _1306;
        _1476 = _1305;
        _1477 = _1317;
        _1478 = _1316;
        _1479 = _1315;
        _1480 = _1327;
        _1481 = _1326;
        _1482 = _1325;
        _1483 = _1340;
        _1484 = _1339;
        _1485 = _1338;
        _1486 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
        _1487 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
        _1488 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
    }
    else
    {
        _1474 = _1163;
        _1475 = _1163;
        _1476 = _1163;
        _1477 = _1163;
        _1478 = _1163;
        _1479 = _1163;
        _1480 = _1163;
        _1481 = _1163;
        _1482 = _1163;
        _1483 = _1163;
        _1484 = _1163;
        _1485 = _1163;
        _1486 = 0.0;
        _1487 = 0.0;
        _1488 = 0.0;
    }
    float _1498 = (cbModelParam._m0[1u].x * (_1486 - _1175)) + _1175;
    float _1499 = (cbModelParam._m0[1u].x * (_1487 - _1176)) + _1176;
    float _1500 = (cbModelParam._m0[1u].x * (_1488 - _1177)) + _1177;
    float _1521 = fma(_1500, cbSceneParam._m0[89u].z, fma(_1499, cbSceneParam._m0[89u].y, _1498 * cbSceneParam._m0[89u].x));
    float _1524 = fma(_1500, cbSceneParam._m0[90u].z, fma(_1499, cbSceneParam._m0[90u].y, _1498 * cbSceneParam._m0[90u].x));
    float _1527 = fma(_1500, cbSceneParam._m0[91u].z, fma(_1499, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1498));
    float _1542 = _772 * 0.5;
    float _1543 = _773 * 0.5;
    float _1544 = _774 * 0.5;
    float _1545 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1476, _1479, _1482, _1485));
    float _1548 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1475, _1478, _1481, _1484));
    float _1551 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1474, _1477, _1480, _1483));
    float _1585;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1558 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1162, _1166, _1169, _1172));
        float _1562 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1164, _1167, _1170, _1173));
        float _1566 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1165, _1168, _1171, _1174));
        float _1573 = dot(vec4(cbModelParam._m0[39u]), vec4(_1542, _1543, _1544, 1.0));
        _1585 = dot(vec3(isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1573) ? 0.0 : (isnan(0.0) ? _1573 : max(0.0, _1573))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1585 = 1.0;
    }
    float _1596;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1587 = dot(vec4(cbModelParam._m0[40u]), vec4(_1542, _1543, _1544, 1.0));
        _1596 = dot(vec3(isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1587) ? 0.0 : (isnan(0.0) ? _1587 : max(0.0, _1587))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1596 = 1.0;
    }
    float _1600 = (_1596 * cbModelParam._m0[1u].x) + (_1585 * (1.0 - cbModelParam._m0[1u].x));
    float _1610 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _604);
    float _1611 = isnan(_1610) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1610 : min(cbModelParam._m0[25u].z, _1610));
    float _1691;
    float _1693;
    float _1695;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1658 = fma(_833, cbModelParam._m0[13u].z, fma(_829, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _825)) + cbModelParam._m0[13u].w;
        float _1662 = fma(_833, cbModelParam._m0[14u].z, fma(_829, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _825)) + cbModelParam._m0[14u].w;
        float _1666 = fma(_833, cbModelParam._m0[15u].z, fma(_829, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _825)) + cbModelParam._m0[15u].w;
        float _1669 = fma(_774, cbModelParam._m0[13u].z, fma(_773, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _772));
        float _1672 = fma(_774, cbModelParam._m0[14u].z, fma(_773, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _772));
        float _1675 = fma(_774, cbModelParam._m0[15u].z, fma(_773, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _772));
        float _1703;
        if (_1669 > 0.0)
        {
            _1703 = abs((1.0 - _1658) / _1669);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1658 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1703 = frontier_phi_17_15_ladder;
        }
        float _1872;
        if (_1672 > 0.0)
        {
            _1872 = abs((1.0 - _1662) / _1672);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1662 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1872 = frontier_phi_26_22_ladder;
        }
        float _2167;
        if (_1675 > 0.0)
        {
            _2167 = abs((1.0 - _1666) / _1675);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1666 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2167 = frontier_phi_38_33_ladder;
        }
        float _2169 = isnan(_1872) ? _1703 : (isnan(_1703) ? _1872 : min(_1703, _1872));
        float _2170 = isnan(_2167) ? _2169 : (isnan(_2169) ? _2167 : min(_2169, _2167));
        float _2174 = (_2170 * _1669) + _1658;
        float _2175 = (_2170 * _1672) + _1662;
        float _2176 = (_2170 * _1675) + _1666;
        float _2177 = _2170 * 9.9999997473787516355514526367188e-05;
        float _2179 = (-1.0) - _2177;
        float _2181 = _2177 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2176 > _2181) || ((_2176 < _2179) || ((_2175 > _2181) || ((_2175 < _2179) || ((_2174 < _2179) || (_2174 > _2181))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2321 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2176, cbModelParam._m0[9u].z, fma(_2175, cbModelParam._m0[9u].y, _2174 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2176, cbModelParam._m0[10u].z, fma(_2175, cbModelParam._m0[10u].y, _2174 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2176, cbModelParam._m0[11u].z, fma(_2175, cbModelParam._m0[11u].y, _2174 * cbModelParam._m0[11u].x))), _1611);
            frontier_phi_16_38_ladder = _2321.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2321.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2321.x * cbModelParam._m0[1u].y;
        }
        _1691 = frontier_phi_16_38_ladder_2;
        _1693 = frontier_phi_16_38_ladder_1;
        _1695 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1679 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_772, _773, _774), _1611);
        _1691 = _1679.x * cbModelParam._m0[1u].y;
        _1693 = _1679.y * cbModelParam._m0[1u].y;
        _1695 = _1679.z * cbModelParam._m0[1u].y;
    }
    float _1699 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _604);
    float _1700 = isnan(_1699) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1699 : min(cbModelParam._m0[25u].w, _1699));
    float _1789;
    float _1791;
    float _1793;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1753 = fma(_833, cbModelParam._m0[21u].z, fma(_829, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _825)) + cbModelParam._m0[21u].w;
        float _1757 = fma(_833, cbModelParam._m0[22u].z, fma(_829, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _825)) + cbModelParam._m0[22u].w;
        float _1761 = fma(_833, cbModelParam._m0[23u].z, fma(_829, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _825)) + cbModelParam._m0[23u].w;
        float _1764 = fma(_774, cbModelParam._m0[21u].z, fma(_773, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _772));
        float _1767 = fma(_774, cbModelParam._m0[22u].z, fma(_773, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _772));
        float _1770 = fma(_774, cbModelParam._m0[23u].z, fma(_773, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _772));
        float _1877;
        if (_1764 > 0.0)
        {
            _1877 = abs((1.0 - _1753) / _1764);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1753 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1877 = frontier_phi_28_24_ladder;
        }
        float _2194;
        if (_1767 > 0.0)
        {
            _2194 = abs((1.0 - _1757) / _1767);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1757 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2194 = frontier_phi_40_35_ladder;
        }
        float _2521;
        if (_1770 > 0.0)
        {
            _2521 = abs((1.0 - _1761) / _1770);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1761 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2521 = frontier_phi_50_47_ladder;
        }
        float _2523 = isnan(_2194) ? _1877 : (isnan(_1877) ? _2194 : min(_1877, _2194));
        float _2524 = isnan(_2521) ? _2523 : (isnan(_2523) ? _2521 : min(_2523, _2521));
        float _2528 = (_2524 * _1764) + _1753;
        float _2529 = (_2524 * _1767) + _1757;
        float _2530 = (_2524 * _1770) + _1761;
        float _2531 = _2524 * 9.9999997473787516355514526367188e-05;
        float _2532 = (-1.0) - _2531;
        float _2534 = _2531 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2530 > _2534) || ((_2530 < _2532) || ((_2529 > _2534) || ((_2529 < _2532) || ((_2528 < _2532) || (_2528 > _2534))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2648 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2530, cbModelParam._m0[17u].z, fma(_2529, cbModelParam._m0[17u].y, _2528 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2530, cbModelParam._m0[18u].z, fma(_2529, cbModelParam._m0[18u].y, _2528 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2530, cbModelParam._m0[19u].z, fma(_2529, cbModelParam._m0[19u].y, _2528 * cbModelParam._m0[19u].x))), _1700);
            frontier_phi_25_50_ladder = _2648.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2648.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2648.x * cbModelParam._m0[1u].z;
        }
        _1789 = frontier_phi_25_50_ladder_2;
        _1791 = frontier_phi_25_50_ladder_1;
        _1793 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1773 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_772, _773, _774), _1700);
        _1789 = _1773.x * cbModelParam._m0[1u].z;
        _1791 = _1773.y * cbModelParam._m0[1u].z;
        _1793 = _1773.z * cbModelParam._m0[1u].z;
    }
    float _1805 = ((((1.0 - _793) * ((_780 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_793 * _780)) * _764;
    float _1806 = _1805 * ((cbModelParam._m0[1u].w * (_1789 - _1691)) + _1691);
    float _1807 = _1805 * ((cbModelParam._m0[1u].w * (_1791 - _1693)) + _1693);
    float _1808 = _1805 * ((cbModelParam._m0[1u].w * (_1793 - _1695)) + _1695);
    float _1811 = fma(_1808, cbSceneParam._m0[89u].z, fma(_1807, cbSceneParam._m0[89u].y, _1806 * cbSceneParam._m0[89u].x));
    float _1814 = fma(_1808, cbSceneParam._m0[90u].z, fma(_1807, cbSceneParam._m0[90u].y, _1806 * cbSceneParam._m0[90u].x));
    float _1817 = fma(_1808, cbSceneParam._m0[91u].z, fma(_1807, cbSceneParam._m0[91u].y, _1806 * cbSceneParam._m0[91u].x));
    float _1851 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1855 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1859 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1863 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1864 = _1851 / _1863;
    float _1865 = _1855 / _1863;
    float _1866 = _1859 / _1863;
    float _2013;
    float _2014;
    float _2015;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1893 = ((uint(_1866 > cbSceneParam._m0[59u].y) + uint(_1866 > cbSceneParam._m0[59u].x)) + uint(_1866 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1894 = _1893 + 43u;
        uint _1902 = _1893 + 44u;
        uint _1910 = _1893 + 45u;
        uint _1918 = _1893 + 46u;
        float _1929 = fma(_1863, cbSceneParam._m0[_1894].w, fma(_1859, cbSceneParam._m0[_1894].z, fma(_1855, cbSceneParam._m0[_1894].y, _1851 * cbSceneParam._m0[_1894].x)));
        float _1933 = fma(_1863, cbSceneParam._m0[_1902].w, fma(_1859, cbSceneParam._m0[_1902].z, fma(_1855, cbSceneParam._m0[_1902].y, _1851 * cbSceneParam._m0[_1902].x)));
        float _1941 = fma(_1863, cbSceneParam._m0[_1918].w, fma(_1859, cbSceneParam._m0[_1918].z, fma(_1855, cbSceneParam._m0[_1918].y, _1851 * cbSceneParam._m0[_1918].x)));
        float _1946 = cbSceneParam._m0[33u].z * _1941;
        float _1948 = cbSceneParam._m0[33u].w * _1941;
        float _1951 = fma(_1863, cbSceneParam._m0[_1910].w, fma(_1859, cbSceneParam._m0[_1910].z, fma(_1855, cbSceneParam._m0[_1910].y, _1851 * cbSceneParam._m0[_1910].x))) / _1941;
        float _1999 = (cbSceneParam._m0[33u].x - sqrt(((_1865 * _1865) + (_1864 * _1864)) + (_1866 * _1866))) * cbSceneParam._m0[33u].y;
        float _4340 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2006 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1946 + _1929) / _1941, (_1948 + _1933) / _1941), _1951), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1948 + _1929) / _1941, (_1933 - _1946) / _1941), _1951), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1929 - _1946) / _1941, (_1933 - _1948) / _1941), _1951), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1929 - _1948) / _1941, (_1946 + _1933) / _1941), _1951), 0.0)).x), vec4(0.25)));
        _2013 = 1.0 - (_2006 * cbSceneParam._m0[34u].x);
        _2014 = 1.0 - (_2006 * cbSceneParam._m0[34u].y);
        _2015 = 1.0 - (_2006 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2013 = 1.0;
        _2014 = 1.0;
        _2015 = 1.0;
    }
    float _2079;
    float _2081;
    float _2083;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2067 = fma(_1863, cbSceneParam._m0[63u].w, fma(_1859, cbSceneParam._m0[63u].z, fma(_1855, cbSceneParam._m0[63u].y, _1851 * cbSceneParam._m0[63u].x)));
        float _2068 = fma(_1863, cbSceneParam._m0[60u].w, fma(_1859, cbSceneParam._m0[60u].z, fma(_1855, cbSceneParam._m0[60u].y, _1851 * cbSceneParam._m0[60u].x))) / _2067;
        float _2069 = fma(_1863, cbSceneParam._m0[61u].w, fma(_1859, cbSceneParam._m0[61u].z, fma(_1855, cbSceneParam._m0[61u].y, _1851 * cbSceneParam._m0[61u].x))) / _2067;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2068 >= cbSceneParam._m0[64u].x) && (_2069 >= cbSceneParam._m0[64u].y)) && (_2068 <= cbSceneParam._m0[64u].z)) && (_2069 <= cbSceneParam._m0[64u].w))
        {
            float _2207 = fma(_1863, cbSceneParam._m0[62u].w, fma(_1859, cbSceneParam._m0[62u].z, fma(_1855, cbSceneParam._m0[62u].y, _1851 * cbSceneParam._m0[62u].x))) / _2067;
            float _2211 = isnan(cbSceneParam._m0[41u].w) ? _2207 : (isnan(_2207) ? cbSceneParam._m0[41u].w : max(_2207, cbSceneParam._m0[41u].w));
            float _2254 = (cbSceneParam._m0[33u].x - sqrt(((_1865 * _1865) + (_1864 * _1864)) + (_1866 * _1866))) * cbSceneParam._m0[33u].y;
            float _4356 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
            float _2261 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2068, cbSceneParam._m0[33u].w + _2069), _2211), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2068, _2069 - cbSceneParam._m0[33u].z), _2211), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2068 - cbSceneParam._m0[33u].z, _2069 - cbSceneParam._m0[33u].w), _2211), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2068 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2069), _2211), 0.0)).x), vec4(0.25)));
            float _2265 = 1.0 - (_2261 * cbSceneParam._m0[34u].x);
            float _2266 = 1.0 - (_2261 * cbSceneParam._m0[34u].y);
            float _2267 = 1.0 - (_2261 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2267) ? _2015 : (isnan(_2015) ? _2267 : min(_2015, _2267));
            frontier_phi_37_36_ladder_1 = isnan(_2266) ? _2014 : (isnan(_2014) ? _2266 : min(_2014, _2266));
            frontier_phi_37_36_ladder_2 = isnan(_2265) ? _2013 : (isnan(_2013) ? _2265 : min(_2013, _2265));
        }
        else
        {
            frontier_phi_37_36_ladder = _2015;
            frontier_phi_37_36_ladder_1 = _2014;
            frontier_phi_37_36_ladder_2 = _2013;
        }
        _2079 = frontier_phi_37_36_ladder_2;
        _2081 = frontier_phi_37_36_ladder_1;
        _2083 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2079 = _2013;
        _2081 = _2014;
        _2083 = _2015;
    }
    uvec4 _2088 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _2090 = _2088.x * 14u;
    uint _2091 = _2090 + 13u;
    float _2098 = _764 + (-1.0);
    float _2103 = (cbLight._m0[_2091].x * _2098) + 1.0;
    float _2104 = (cbLight._m0[_2091].y * _2098) + 1.0;
    float _2105 = (cbLight._m0[_2091].z * _2098) + 1.0;
    float _2106 = (cbLight._m0[_2091].w * _2098) + 1.0;
    uint _2107 = _2090 + 5u;
    float _2113 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
    uint _2117 = _2090 + 4u;
    float _2126 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
    uint _2130 = _2090 | 1u;
    float _2141 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_601, _602, _603));
    float _2144 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_601, _602, _603));
    float _4392 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _4403 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2149 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * 0.3183098733425140380859375;
    float _2151 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * 0.3183098733425140380859375;
    float _2158 = ((cbLight._m0[_2107].x * _2113) * _2151) + (((cbLight._m0[_2117].x * _2079) * _2126) * _2149);
    float _2159 = ((_2113 * cbLight._m0[_2107].y) * _2151) + (((cbLight._m0[_2117].y * _2081) * _2126) * _2149);
    float _2160 = ((_2113 * cbLight._m0[_2107].z) * _2151) + (((cbLight._m0[_2117].z * _2083) * _2126) * _2149);
    uvec4 _2164 = floatBitsToUint(cbLight._m0[_2090 + 12u]);
    bool _2166 = _2164.x == 0u;
    float _2268;
    float _2270;
    float _2272;
    if (_2166)
    {
        _2268 = _2158;
        _2270 = _2159;
        _2272 = _2160;
    }
    else
    {
        uint _2276 = _2090 + 6u;
        float _2292 = (dot(vec3(cbLight._m0[_2090 + 2u].xyz), vec3(_601, _602, _603)) * 0.5) + 0.5;
        float _2293 = _2292 * _2292;
        float _4414 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2294 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2295 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2268 = (((cbLight._m0[_2276].x * 0.3183098733425140380859375) * _2294) * _2295) + _2158;
        _2270 = (((cbLight._m0[_2276].y * 0.3183098733425140380859375) * _2294) * _2295) + _2159;
        _2272 = (((cbLight._m0[_2276].z * 0.3183098733425140380859375) * _2294) * _2295) + _2160;
    }
    bool _2275 = _2164.y == 0u;
    float _2330;
    float _2332;
    float _2334;
    if (_2275)
    {
        _2330 = _2268;
        _2332 = _2270;
        _2334 = _2272;
    }
    else
    {
        uint _2492 = _2090 + 7u;
        float _2508 = (dot(vec3(cbLight._m0[_2090 + 3u].xyz), vec3(_601, _602, _603)) * 0.5) + 0.5;
        float _2509 = _2508 * _2508;
        float _4430 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2510 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2511 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
        _2330 = (((cbLight._m0[_2492].x * 0.3183098733425140380859375) * _2510) * _2511) + _2268;
        _2332 = (((cbLight._m0[_2492].y * 0.3183098733425140380859375) * _2510) * _2511) + _2270;
        _2334 = (((cbLight._m0[_2492].z * 0.3183098733425140380859375) * _2510) * _2511) + _2272;
    }
    uint _2337 = _2090 + 8u;
    float _2350 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2090].w)) * _604) * 0.949999988079071044921875);
    float _2351 = _2350 * _2350;
    float _2352 = cbLight._m0[_2090].x + _681;
    float _2353 = cbLight._m0[_2090].y + _682;
    float _2354 = cbLight._m0[_2090].z + _683;
    float _2358 = inversesqrt(dot(vec3(_2352, _2353, _2354), vec3(_2352, _2353, _2354)));
    float _2359 = _2358 * _2352;
    float _2360 = _2358 * _2353;
    float _2361 = _2358 * _2354;
    float _2362 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_2090].xyz));
    float _4446 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2365 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _4457 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _2366 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _2367 = dot(vec3(_601, _602, _603), vec3(_2359, _2360, _2361));
    float _4468 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2370 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _2371 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_2359, _2360, _2361));
    float _4479 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2375 = _2351 * _2351;
    float _2379 = ((_2370 * _2370) * (_2375 + (-1.0))) + 1.0;
    float _2390 = (exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2391 = 1.0 - _2351;
    float _2402 = (0.5 / (((_2366 * ((_2365 * _2391) + _2351)) + 9.9999999392252902907785028219223e-09) + (((_2366 * _2391) + _2351) * _2365))) * _2365;
    float _4490 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2404 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2375 / ((_2379 * _2379) * 3.141590118408203125));
    uint _2418 = _2090 + 9u;
    float _2429 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2130].w)) * _604) * 0.949999988079071044921875);
    float _2430 = _2429 * _2429;
    float _2431 = cbLight._m0[_2130].x + _681;
    float _2432 = cbLight._m0[_2130].y + _682;
    float _2433 = cbLight._m0[_2130].z + _683;
    float _2437 = inversesqrt(dot(vec3(_2431, _2432, _2433), vec3(_2431, _2432, _2433)));
    float _2438 = _2437 * _2431;
    float _2439 = _2437 * _2432;
    float _2440 = _2437 * _2433;
    float _2441 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_2130].xyz));
    float _4501 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2444 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
    float _2445 = dot(vec3(_601, _602, _603), vec3(_2438, _2439, _2440));
    float _4512 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2448 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
    float _2449 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_2438, _2439, _2440));
    float _4523 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2453 = _2430 * _2430;
    float _2457 = ((_2448 * _2448) * (_2453 + (-1.0))) + 1.0;
    float _2466 = (exp2(log2(1.0 - (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2467 = 1.0 - _2430;
    float _2477 = (0.5 / (((_2366 * ((_2444 * _2467) + _2430)) + 9.9999999392252902907785028219223e-09) + (((_2366 * _2467) + _2430) * _2444))) * _2444;
    float _4534 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2479 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2453 / ((_2457 * _2457) * 3.141590118408203125));
    float _2489 = (((_2466 * cbLight._m0[_2418].x) * _2479) * _2113) + ((((cbLight._m0[_2337].x * _2079) * _2390) * _2404) * _2126);
    float _2490 = (((_2466 * cbLight._m0[_2418].y) * _2479) * _2113) + ((((cbLight._m0[_2337].y * _2081) * _2390) * _2404) * _2126);
    float _2491 = (((_2466 * cbLight._m0[_2418].z) * _2479) * _2113) + ((((cbLight._m0[_2337].z * _2083) * _2390) * _2404) * _2126);
    float _2547;
    float _2549;
    float _2551;
    if (_2166)
    {
        _2547 = _2489;
        _2549 = _2490;
        _2551 = _2491;
    }
    else
    {
        uint _2553 = _2090 + 2u;
        uint _2557 = _2090 + 10u;
        float _2571 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2553].w)) * _604) * 0.949999988079071044921875);
        float _2572 = _2571 * _2571;
        float _2573 = cbLight._m0[_2553].x + _681;
        float _2574 = cbLight._m0[_2553].y + _682;
        float _2575 = cbLight._m0[_2553].z + _683;
        float _2579 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
        float _2580 = _2579 * _2573;
        float _2581 = _2579 * _2574;
        float _2582 = _2579 * _2575;
        float _2583 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_2553].xyz));
        float _4545 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2586 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2587 = dot(vec3(_601, _602, _603), vec3(_2580, _2581, _2582));
        float _4556 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2590 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _2591 = dot(vec3(cbLight._m0[_2553].xyz), vec3(_2580, _2581, _2582));
        float _4567 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2595 = _2572 * _2572;
        float _2599 = ((_2590 * _2590) * (_2595 + (-1.0))) + 1.0;
        float _2608 = (exp2(log2(1.0 - (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2609 = 1.0 - _2572;
        float _2619 = (0.5 / (((_2366 * ((_2586 * _2609) + _2572)) + 9.9999999392252902907785028219223e-09) + (((_2366 * _2609) + _2572) * _2586))) * _2586;
        float _4578 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2621 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2595 / ((_2599 * _2599) * 3.141590118408203125));
        float _2622 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2547 = (((_2608 * cbLight._m0[_2557].x) * _2621) * _2622) + _2489;
        _2549 = (((_2608 * cbLight._m0[_2557].y) * _2621) * _2622) + _2490;
        _2551 = (((_2608 * cbLight._m0[_2557].z) * _2621) * _2622) + _2491;
    }
    float _2653;
    float _2655;
    float _2657;
    if (_2275)
    {
        _2653 = _2547;
        _2655 = _2549;
        _2657 = _2551;
    }
    else
    {
        uint _2664 = _2090 + 3u;
        uint _2668 = _2090 + 11u;
        float _2682 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2664].w)) * _604) * 0.949999988079071044921875);
        float _2683 = _2682 * _2682;
        float _2684 = cbLight._m0[_2664].x + _681;
        float _2685 = cbLight._m0[_2664].y + _682;
        float _2686 = cbLight._m0[_2664].z + _683;
        float _2690 = inversesqrt(dot(vec3(_2684, _2685, _2686), vec3(_2684, _2685, _2686)));
        float _2691 = _2690 * _2684;
        float _2692 = _2690 * _2685;
        float _2693 = _2690 * _2686;
        float _2694 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_2664].xyz));
        float _4594 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2697 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2698 = dot(vec3(_601, _602, _603), vec3(_2691, _2692, _2693));
        float _4605 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2701 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _2702 = dot(vec3(cbLight._m0[_2664].xyz), vec3(_2691, _2692, _2693));
        float _4616 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2706 = _2683 * _2683;
        float _2710 = ((_2701 * _2701) * (_2706 + (-1.0))) + 1.0;
        float _2719 = (exp2(log2(1.0 - (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2720 = 1.0 - _2683;
        float _2730 = (0.5 / (((_2366 * ((_2697 * _2720) + _2683)) + 9.9999999392252902907785028219223e-09) + (((_2366 * _2720) + _2683) * _2697))) * _2697;
        float _4627 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2732 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2706 / ((_2710 * _2710) * 3.141590118408203125));
        float _2733 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
        _2653 = (((_2719 * cbLight._m0[_2668].x) * _2732) * _2733) + _2547;
        _2655 = (((_2719 * cbLight._m0[_2668].y) * _2732) * _2733) + _2549;
        _2657 = (((_2719 * cbLight._m0[_2668].z) * _2732) * _2733) + _2551;
    }
    float _2799;
    float _2801;
    float _2803;
    float _2805;
    float _2807;
    float _2809;
    if (_2088.y == 0u)
    {
        uvec4 _2754 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2755 = _2754.x;
        uint _2766 = uint((float(_2754.y) * floor(float(uint(cbSceneParam._m0[85u].y * _702) / _2755))) + floor(float(uint(cbSceneParam._m0[85u].x * _701) / _2755)));
        float _2776 = (log2(_1866 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2777 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        uint _2780 = uint(isnan(14.0) ? _2777 : (isnan(_2777) ? 14.0 : min(_2777, 14.0)));
        uvec4 _2785 = texelFetch(g_lightClusterGridBuffer, int(((_2780 << 2u) + (_2766 << 6u)) >> 2u));
        uint _2786 = _2785.x;
        uint _2787 = _2754.z;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        if (((((1u << ((_2787 >> 4u) & 15u)) + 4294967295u) & _2786) == 0u) || ((_2787 & 240u) == 0u))
        {
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
            _2872 = 0.0;
            _2874 = 0.0;
            _2876 = 0.0;
        }
        else
        {
            float _2867;
            float _2869;
            float _2871;
            float _2873;
            float _2875;
            float _2877;
            float _3019 = 0.0;
            float _3020 = 0.0;
            float _3021 = 0.0;
            float _3022 = 0.0;
            float _3023 = 0.0;
            float _3024 = 0.0;
            uint _3025 = 0u;
            uint _3034;
            bool _3035;
            for (;;)
            {
                _3034 = texelFetch(g_lightClassification, int((((_2780 << 5u) + (_2766 << 9u)) + (_3025 << 2u)) >> 2u)).x;
                _3035 = _3034 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3035)
                {
                    frontier_phi_71_pred = _3024;
                    frontier_phi_71_pred_1 = _3023;
                    frontier_phi_71_pred_2 = _3022;
                    frontier_phi_71_pred_3 = _3021;
                    frontier_phi_71_pred_4 = _3020;
                    frontier_phi_71_pred_5 = _3019;
                }
                else
                {
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    uint _3170;
                    _3164 = _3019;
                    _3165 = _3020;
                    _3166 = _3021;
                    _3167 = _3022;
                    _3168 = _3023;
                    _3169 = _3024;
                    _3170 = _3034;
                    float _3091;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    for (;;)
                    {
                        uint _3174 = uint(findLSB(_3170)) + (_3025 << 5u);
                        uint _3171 = (_3170 + 4294967295u) & _3170;
                        uint _3176 = _3174 * 48u;
                        vec4 _3190 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3176)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 3u)).x));
                        uint _3196 = (_3174 * 48u) + 4u;
                        vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3196)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 3u)).x));
                        uint _3215 = (_3174 * 48u) + 8u;
                        vec3 _3226 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3215)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 2u)).x));
                        float _3230 = _3190.x - _1864;
                        float _3231 = _3190.y - _1865;
                        float _3232 = _3190.z - _1866;
                        float _3233 = dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232));
                        float _3236 = inversesqrt(_3233);
                        float _3237 = _3236 * _3230;
                        float _3238 = _3236 * _3231;
                        float _3239 = _3236 * _3232;
                        float _3240 = dot(vec3(_720, _723, _726), vec3(_3237, _3238, _3239));
                        float _3245 = 1.0 - (_3233 * _3190.w);
                        float _4653 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                        float _3246 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                        float _3247 = sqrt(_3233) * _3209.w;
                        float _3250 = 1.39999997615814208984375 / (_3247 + 1.39999997615814208984375);
                        float _3251 = _3250 * _3250;
                        float _3254 = ((1.0 - _3251) * _3240) + _3251;
                        float _3257 = _3247 * _3247;
                        float _3261 = ((isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0))) * _3246) / ((_3257 * 0.699999988079071044921875) + 1.0);
                        float _3265 = (-0.0) - _1864;
                        float _3266 = (-0.0) - _1865;
                        float _3267 = (-0.0) - _1866;
                        float _3271 = inversesqrt(dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267)));
                        float _3272 = _3271 * _3265;
                        float _3273 = _3271 * _3266;
                        float _3274 = _3271 * _3267;
                        float _3281 = exp2(log2(1.0 / ((_3257 * 3.5) + 5.0)) * 0.25);
                        float _3282 = 1.0 - _780;
                        float _3289 = sqrt(1.0 - ((1.0 - (_3282 * _3282)) * (1.0 - (_3281 * _3281))));
                        float _3290 = _3289 * _3289;
                        float _3291 = _3290 * _3290;
                        float _3292 = _3272 + _3237;
                        float _3293 = _3273 + _3238;
                        float _3294 = _3274 + _3239;
                        float _3298 = inversesqrt(dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294)));
                        float _3302 = dot(vec3(_720, _723, _726), vec3(_3272, _3273, _3274));
                        float _4669 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3305 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3306 = dot(vec3(_720, _723, _726), vec3(_3298 * _3292, _3298 * _3293, _3298 * _3294));
                        float _4680 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3309 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                        float _3313 = ((_3309 * _3309) * (_3291 + (-1.0))) + 1.0;
                        float _3314 = _3250 * _3290;
                        float _3315 = _3314 * _3314;
                        float _3318 = ((1.0 - _3315) * _3240) + _3315;
                        float _4691 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3319 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                        float _3320 = 1.0 - _3290;
                        float _3330 = (0.5 / (((_3319 * ((_3305 * _3320) + _3290)) + 9.9999999392252902907785028219223e-09) + (((_3319 * _3320) + _3290) * _3305))) * _3319;
                        float _4702 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3341 = (((_3291 * 3.1415927410125732421875) * (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) / ((_3313 * _3313) * ((_3257 * 2.1991131305694580078125) + 3.141590118408203125))) * _3246;
                        _3094 = (_3261 * _3209.x) + _3167;
                        _3095 = (_3261 * _3209.y) + _3168;
                        _3096 = (_3261 * _3209.z) + _3169;
                        _3091 = (_3341 * _3226.x) + _3164;
                        _3092 = (_3341 * _3226.y) + _3165;
                        _3093 = (_3341 * _3226.z) + _3166;
                        if (_3171 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3164 = _3091;
                            _3165 = _3092;
                            _3166 = _3093;
                            _3167 = _3094;
                            _3168 = _3095;
                            _3169 = _3096;
                            _3170 = _3171;
                        }
                    }
                    frontier_phi_71_pred = _3096;
                    frontier_phi_71_pred_1 = _3095;
                    frontier_phi_71_pred_2 = _3094;
                    frontier_phi_71_pred_3 = _3093;
                    frontier_phi_71_pred_4 = _3092;
                    frontier_phi_71_pred_5 = _3091;
                }
                _2877 = frontier_phi_71_pred;
                _2875 = frontier_phi_71_pred_1;
                _2873 = frontier_phi_71_pred_2;
                _2871 = frontier_phi_71_pred_3;
                _2869 = frontier_phi_71_pred_4;
                _2867 = frontier_phi_71_pred_5;
                uint _3026 = _3025 + 1u;
                if (_3026 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3019 = _2867;
                    _3020 = _2869;
                    _3021 = _2871;
                    _3022 = _2873;
                    _3023 = _2875;
                    _3024 = _2877;
                    _3025 = _3026;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
            _2872 = _2873;
            _2874 = _2875;
            _2876 = _2877;
        }
        uvec4 _2880 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2881 = _2880.z;
        uint _2883 = (_2881 >> 8u) & 15u;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        if (((4294967295u << _2883) & _2786) == 0u)
        {
            _2987 = _2866;
            _2989 = _2868;
            _2991 = _2870;
            _2993 = _2872;
            _2995 = _2874;
            _2997 = _2876;
        }
        else
        {
            float _3012 = inversesqrt(dot(vec3(_1864, _1865, _1866), vec3(_1864, _1865, _1866)));
            float _3013 = _3012 * _1864;
            float _3014 = _3012 * _1865;
            float _3015 = _3012 * _1866;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2883 < ((_2881 >> 12u) & 15u))
            {
                float _2988;
                float _2990;
                float _2992;
                float _2994;
                float _2996;
                float _2998;
                float _3147 = _2866;
                float _3148 = _2868;
                float _3149 = _2870;
                float _3150 = _2872;
                float _3151 = _2874;
                float _3152 = _2876;
                uint _3153 = _2883;
                uint _3162;
                bool _3163;
                for (;;)
                {
                    _3162 = texelFetch(g_lightClassification, int((((_2780 << 5u) + (_2766 << 9u)) + (_3153 << 2u)) >> 2u)).x;
                    _3163 = _3162 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3163)
                    {
                        frontier_phi_82_pred = _3152;
                        frontier_phi_82_pred_1 = _3151;
                        frontier_phi_82_pred_2 = _3150;
                        frontier_phi_82_pred_3 = _3149;
                        frontier_phi_82_pred_4 = _3148;
                        frontier_phi_82_pred_5 = _3147;
                    }
                    else
                    {
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3368 = _3147;
                        float _3369 = _3148;
                        float _3370 = _3149;
                        float _3371 = _3150;
                        float _3372 = _3151;
                        float _3373 = _3152;
                        uint _3374 = _3162;
                        uint _3375;
                        vec4 _3400;
                        float _3401;
                        vec4 _3416;
                        vec3 _3428;
                        vec4 _3443;
                        vec4 _3459;
                        float _3505;
                        bool _3506;
                        for (;;)
                        {
                            uint _3385 = ((_3153 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3374));
                            _3375 = (_3374 + 4294967295u) & _3374;
                            uint _3387 = _3385 * 40u;
                            _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            _3401 = _3400.w;
                            uint _3403 = (_3385 * 40u) + 4u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3418 = (_3385 * 40u) + 8u;
                            _3428 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x));
                            uint _3430 = (_3385 * 40u) + 16u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3446 = (_3385 * 40u) + 20u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3461 = (_3385 * 40u) + 24u;
                            vec4 _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            uint _3480 = (_3385 * 40u) + 28u;
                            vec4 _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            _3505 = fma(_1866, _3493.z, fma(_1865, _3493.y, _3493.x * _1864)) + _3493.w;
                            _3506 = !((fma(_1866, _3474.z, fma(_1865, _3474.y, _3474.x * _1864)) + _3474.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3506)
                            {
                                float _3533 = _3400.x - _1864;
                                float _3534 = _3400.y - _1865;
                                float _3535 = _3400.z - _1866;
                                float _3536 = dot(vec3(_3533, _3534, _3535), vec3(_3533, _3534, _3535));
                                float _3539 = inversesqrt(_3536);
                                float _3540 = _3539 * _3533;
                                float _3541 = _3539 * _3534;
                                float _3542 = _3539 * _3535;
                                float _3546 = 1.0 - (_3536 / (_3401 * _3401));
                                float _4713 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3547 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                                float _3551 = sqrt(_3536) * _3416.w;
                                float _3553 = 1.39999997615814208984375 / (_3551 + 1.39999997615814208984375);
                                float _3554 = _3553 * _3553;
                                float _3557 = ((1.0 - _3554) * dot(vec3(_3540, _3541, _3542), vec3(_720, _723, _726))) + _3554;
                                float _3560 = _3551 * _3551;
                                float _3564 = (fma(_1866, _3443.z, fma(_1865, _3443.y, _3443.x * _1864)) + _3443.w) / _3505;
                                float _3565 = (fma(_1866, _3459.z, fma(_1865, _3459.y, _3459.x * _1864)) + _3459.w) / _3505;
                                float _3569 = 1.0 - dot(vec2(_3564, _3565), vec2(_3564, _3565));
                                float _4729 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3570 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3571 = _3570 * (((isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0))) * _3547) / ((_3560 * 0.699999988079071044921875) + 1.0));
                                float _3583 = exp2(log2(1.0 / ((_3560 * 3.5) + 5.0)) * 0.25);
                                float _3584 = 1.0 - _780;
                                float _3591 = sqrt(1.0 - ((1.0 - (_3584 * _3584)) * (1.0 - (_3583 * _3583))));
                                float _3592 = _3591 * _3591;
                                float _3593 = _3592 * _3592;
                                float _3594 = _3540 - _3013;
                                float _3595 = _3541 - _3014;
                                float _3596 = _3542 - _3015;
                                float _3600 = inversesqrt(dot(vec3(_3594, _3595, _3596), vec3(_3594, _3595, _3596)));
                                float _3604 = dot(vec3(_720, _723, _726), vec3((-0.0) - _3013, (-0.0) - _3014, (-0.0) - _3015));
                                float _4740 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3607 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                                float _3608 = dot(vec3(_720, _723, _726), vec3(_3600 * _3594, _3600 * _3595, _3600 * _3596));
                                float _4751 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3611 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                                float _3615 = ((_3611 * _3611) * (_3593 + (-1.0))) + 1.0;
                                float _3616 = _3553 * _3592;
                                float _3617 = _3616 * _3616;
                                float _3623 = ((1.0 - _3617) * dot(vec3(_720, _723, _726), vec3(_3540, _3541, _3542))) + _3617;
                                float _4762 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3624 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                                float _3625 = 1.0 - _3592;
                                float _3635 = (0.5 / (((_3624 * ((_3607 * _3625) + _3592)) + 9.9999999392252902907785028219223e-09) + (((_3624 * _3625) + _3592) * _3607))) * _3624;
                                float _4773 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3645 = (_3570 * _3547) * (((_3593 * 3.1415927410125732421875) * (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) / ((_3615 * _3615) * ((_3560 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3571 * _3416.z;
                                frontier_phi_88_pred_1 = _3571 * _3416.y;
                                frontier_phi_88_pred_2 = _3571 * _3416.x;
                                frontier_phi_88_pred_3 = _3645 * _3428.z;
                                frontier_phi_88_pred_4 = _3645 * _3428.y;
                                frontier_phi_88_pred_5 = _3645 * _3428.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3654 = frontier_phi_88_pred;
                            _3653 = frontier_phi_88_pred_1;
                            _3652 = frontier_phi_88_pred_2;
                            _3651 = frontier_phi_88_pred_3;
                            _3650 = frontier_phi_88_pred_4;
                            _3649 = frontier_phi_88_pred_5;
                            _3358 = _3652 + _3371;
                            _3359 = _3653 + _3372;
                            _3360 = _3654 + _3373;
                            _3355 = _3649 + _3368;
                            _3356 = _3650 + _3369;
                            _3357 = _3651 + _3370;
                            if (_3375 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3375;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3360;
                        frontier_phi_82_pred_1 = _3359;
                        frontier_phi_82_pred_2 = _3358;
                        frontier_phi_82_pred_3 = _3357;
                        frontier_phi_82_pred_4 = _3356;
                        frontier_phi_82_pred_5 = _3355;
                    }
                    _2998 = frontier_phi_82_pred;
                    _2996 = frontier_phi_82_pred_1;
                    _2994 = frontier_phi_82_pred_2;
                    _2992 = frontier_phi_82_pred_3;
                    _2990 = frontier_phi_82_pred_4;
                    _2988 = frontier_phi_82_pred_5;
                    uint _3154 = _3153 + 1u;
                    if (_3154 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3147 = _2988;
                        _3148 = _2990;
                        _3149 = _2992;
                        _3150 = _2994;
                        _3151 = _2996;
                        _3152 = _2998;
                        _3153 = _3154;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2994;
                frontier_phi_63_64_ladder_1 = _2998;
                frontier_phi_63_64_ladder_2 = _2996;
                frontier_phi_63_64_ladder_3 = _2992;
                frontier_phi_63_64_ladder_4 = _2990;
                frontier_phi_63_64_ladder_5 = _2988;
            }
            else
            {
                frontier_phi_63_64_ladder = _2872;
                frontier_phi_63_64_ladder_1 = _2876;
                frontier_phi_63_64_ladder_2 = _2874;
                frontier_phi_63_64_ladder_3 = _2870;
                frontier_phi_63_64_ladder_4 = _2868;
                frontier_phi_63_64_ladder_5 = _2866;
            }
            _2987 = frontier_phi_63_64_ladder_5;
            _2989 = frontier_phi_63_64_ladder_4;
            _2991 = frontier_phi_63_64_ladder_3;
            _2993 = frontier_phi_63_64_ladder;
            _2995 = frontier_phi_63_64_ladder_2;
            _2997 = frontier_phi_63_64_ladder_1;
        }
        float _3002 = isnan(1.0) ? _764 : (isnan(_764) ? 1.0 : min(_764, 1.0));
        _2799 = (_3002 * _2993) + _2330;
        _2801 = (_3002 * _2995) + _2332;
        _2803 = (_3002 * _2997) + _2334;
        _2805 = ((_2987 * 0.039999999105930328369140625) * _3002) + _2653;
        _2807 = ((_2989 * 0.039999999105930328369140625) * _3002) + _2655;
        _2809 = ((_2991 * 0.039999999105930328369140625) * _3002) + _2657;
    }
    else
    {
        _2799 = _2330;
        _2801 = _2332;
        _2803 = _2334;
        _2805 = _2653;
        _2807 = _2655;
        _2809 = _2657;
    }
    float _4789 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _4800 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _4811 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _2826 = ((isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2799 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _764))) + ((_2805 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1600)) * cbPerFrame._m0[3u].x);
    float _2827 = ((isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2801 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _764))) + ((_2807 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1600)) * cbPerFrame._m0[3u].x);
    float _2828 = ((isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * (_2803 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _764))) + ((_2809 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1600)) * cbPerFrame._m0[3u].x);
    uint _2829 = _238 + 6u;
    float _2837 = _701 / cbSceneParam._m0[86u].x;
    float _2838 = _702 / cbSceneParam._m0[86u].y;
    vec4 _2852 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2837, _2838, (log2((isnan(cbSceneParam._m0[77u].w) ? _622 : (isnan(_622) ? cbSceneParam._m0[77u].w : min(_622, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2854 = _2852.x;
    float _2855 = _2852.y;
    float _2856 = _2852.z;
    float _2857 = _2852.w;
    float _2929;
    float _2931;
    float _2933;
    float _2935;
    if (_622 > cbSceneParam._m0[78u].w)
    {
        float _2891 = isnan(_622) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _622 : min(cbSceneParam._m0[80u].w, _622));
        float _2892 = _2891 / _622;
        float _2903 = _2892 * _674;
        float _2904 = _675 * _2892;
        float _2905 = (-0.0) - _2904;
        float _2907 = _2892 * _676;
        float _2909 = (cbSceneParam._m0[77u].w * _2905) / _2891;
        float _2910 = _2909 + cbSceneParam._m0[79u].w;
        float _2911 = cbSceneParam._m0[79u].w - _2904;
        float _2917 = sqrt(((_2903 * _2903) + (_2904 * _2904)) + (_2907 * _2907));
        float _2920 = (1.0 - (cbSceneParam._m0[77u].w / _2891)) * _2917;
        float _2925 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2927 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3104;
        if (abs((_2905 - _2909) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3104 = ((((_2910 > 0.0) ? exp2(_2925 * _2910) : (2.0 - exp2(_2927 * _2910))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2920;
        }
        else
        {
            float _3048 = 1.0 / cbSceneParam._m0[80u].x;
            float _3049 = isnan(_2911) ? _2910 : (isnan(_2910) ? _2911 : max(_2910, _2911));
            float _3050 = isnan(_2911) ? _2910 : (isnan(_2910) ? _2911 : min(_2910, _2911));
            float _3059 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : min(_3049, 0.0));
            float _3060 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : min(_3050, 0.0));
            _3104 = ((abs(_2917 / _2905) * cbSceneParam._m0[80u].y) * ((((_3059 - _3060) * 2.0) - ((exp2(_2925 * (isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0)))) - exp2(_2925 * (isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0))))) * _3048)) - ((exp2(_2927 * _3059) - exp2(_2927 * _3060)) * _3048))) + (_2920 * cbSceneParam._m0[80u].z);
        }
        vec4 _3106 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2837, _2838, 1.0), 0.0);
        float _3115 = exp2((_3104 * (-1.44269502162933349609375)) * (1.0 - _3106.w));
        float _3116 = log2(_3115);
        float _3132 = log2(_2857);
        _2929 = (exp2(_3132 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3116 * cbSceneParam._m0[78u].x)) * _3106.x) / cbSceneParam._m0[78u].x)) + _2854;
        _2931 = (exp2(_3132 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3116 * cbSceneParam._m0[78u].y)) * _3106.y) / cbSceneParam._m0[78u].y)) + _2855;
        _2933 = (exp2(_3132 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3116 * cbSceneParam._m0[78u].z)) * _3106.z) / cbSceneParam._m0[78u].z)) + _2856;
        _2935 = _3115 * _2857;
    }
    else
    {
        _2929 = _2854;
        _2931 = _2855;
        _2933 = _2856;
        _2935 = _2857;
    }
    bool _3142;
    vec4 _2945;
    vec4 _2967;
    float _2969;
    float _2973;
    float _2974;
    float _2975;
    float _2976;
    bool _2986;
    for (;;)
    {
        _2945 = cbMatDynParam._m0[0u];
        float _2947 = roundEven(_2945.y);
        bool _2948 = _2947 == 3.0;
        float _2949 = log2(_2935);
        float _2956 = exp2(_2949 * cbSceneParam._m0[78u].x) * _2826;
        float _2957 = exp2(_2949 * cbSceneParam._m0[78u].y) * _2827;
        float _2958 = exp2(_2949 * cbSceneParam._m0[78u].z) * _2828;
        float _2965 = _690 + (-0.5);
        _2967 = cbMtdParam._m0[1u];
        _2969 = _2967.y * _2965;
        float _2972 = (_2947 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2973 = _2972 * (_2948 ? _2956 : (_2956 + (cbSceneParam._m0[72u].w * _2929)));
        _2974 = _2972 * (_2948 ? _2957 : (_2957 + (cbSceneParam._m0[72u].w * _2931)));
        _2975 = _2972 * (_2948 ? _2958 : (_2958 + (cbSceneParam._m0[72u].w * _2933)));
        _2976 = _2965 * 0.999000012874603271484375;
        _2986 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2986)
        {
            if ((cbInstanceData._m0[_238 + 7u].x + _2976) < 0.5)
            {
                _3142 = true;
                break;
            }
        }
        uint _3083 = _739 + uint(_2945.w);
        if ((cbInstanceData._m0[_3083].w < 1.0) && ((cbInstanceData._m0[_3083].w + _2976) < 0.5))
        {
            _3142 = true;
            break;
        }
        if ((_2969 + 1.0) < _2967.x)
        {
            _3142 = true;
            break;
        }
        _3142 = false;
        break;
    }
    float _3346;
    if (_3142)
    {
        discard_state = true;
        _3346 = 0.0;
    }
    else
    {
        _3346 = cbInstanceData._m0[_2829].w;
    }
    SV_Target.x = _2973;
    SV_Target.y = _2974;
    SV_Target.z = _2975;
    SV_Target.w = _3346;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2829].w;
    discard_exit();
}


