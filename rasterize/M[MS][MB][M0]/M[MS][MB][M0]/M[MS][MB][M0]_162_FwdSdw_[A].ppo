#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1409;
float _4049;
float _4050;
float _4051;
float _4052;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4061 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4072 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4083 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _414 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _414) * cbMtdParam._m0[24u].x) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4094 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _439 = (_432 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _440 = (_432 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _441 = (_432 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _445 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _439;
    float _448 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _440;
    float _451 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _441;
    float _458 = ((_439 - _445) * (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) + _445;
    float _459 = ((_440 - _448) * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) + _448;
    float _460 = ((_441 - _451) * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) + _451;
    vec4 _479 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _302) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _303) + cbTextureTilingScale._m0[14u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _526 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _543 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _545 = _543.x;
    float _546 = _543.y;
    float _547 = _543.z;
    float _556 = ((_526.z - _547) * _432) + _547;
    float _559 = ((((_526.x - _545) * _432) + _545) * 2.0) + (-1.0);
    float _560 = ((((_526.y - _546) * _432) + _546) * 2.0) + (-1.0);
    float _561 = dot(vec2(_559, _560), vec2(_559, _560));
    float _4105 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _566 = sqrt(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))));
    float _569 = _559 + ((((_499.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _570 = _560 + ((((_499.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _573 = fma(_566, _252, fma(_570, _259, _569 * _245));
    float _576 = fma(_566, _253, fma(_570, _260, _569 * _246));
    float _579 = fma(_566, _254, fma(_570, _261, _569 * _247));
    float _583 = inversesqrt(dot(vec3(_573, _576, _579), vec3(_573, _576, _579)));
    vec4 _599 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _627 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _629 = _627.x;
    float _630 = 1.0 - _629;
    float _634 = ((_629 - _630) * cbMtdParam._m0[24u].z) + _630;
    float _636 = (cbMtdParam._m0[19u].x + dot(vec4(_583 * _573, _583 * _576, _583 * _579, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_634 * cbMtdParam._m0[21u].z);
    float _4116 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _637 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _639 = (-0.0) - cbMtdParam._m0[24u].y;
    float _641 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _642 = isnan(1.0) ? _641 : (isnan(_641) ? 1.0 : min(_641, 1.0));
    float _649 = _637 - ((_637 * TEXCOORD_8.x) * _642);
    float _650 = _637 - ((_637 * TEXCOORD_8.y) * _642);
    float _651 = _637 - ((_637 * TEXCOORD_8.z) * _642);
    float _658 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _662 = ((isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : min(_658, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _670 = (_662 - (((_634 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _662))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4147 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _671 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _675 = ((_649 * ((_479.x * cbMtdParam._m0[18u].x) - _458)) * _671) + _458;
    float _676 = ((_650 * ((_479.y * cbMtdParam._m0[18u].y) - _459)) * _671) + _459;
    float _677 = ((_651 * ((_479.z * cbMtdParam._m0[18u].z) - _460)) * _671) + _460;
    vec4 _689 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _691 = _689.x;
    float _692 = 1.0 - _691;
    float _717 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_691 - _692) * cbMtdParam._m0[24u].w) + _692) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4158 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _718 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _726 = ((((cbMtdParam._m0[10u].x - _675) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _718) + _675;
    float _727 = ((((cbMtdParam._m0[10u].y - _676) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _718) + _676;
    float _728 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _677)) * _718) + _677;
    float _733 = (((_499.z - _556) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _556;
    vec4 _747 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _754 = (_747.x * 2.0) + (-1.0);
    float _755 = (_747.y * 2.0) + (-1.0);
    float _756 = dot(vec2(_754, _755), vec2(_754, _755));
    float _4169 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _765 = (((_747.z - _733) * _649) * _671) + _733;
    float _768 = ((cbMtdParam._m0[23u].y - _765) * _718) + _765;
    vec4 _787 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _793 = (_787.x * 2.0) + (-1.0);
    float _794 = (_787.y * 2.0) + (-1.0);
    float _795 = dot(vec2(_793, _794), vec2(_793, _794));
    float _4180 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _815 = (((cbMtdParam._m0[21u].x * _569) + ((_754 - _569) * _649)) * _671) + _569;
    float _816 = (((cbMtdParam._m0[21u].x * _570) + ((_755 - _570) * _650)) * _671) + _570;
    float _817 = (((sqrt(1.0 - (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) - _566) * _651) * _671) + _566;
    float _828 = (((_793 - _815) + (_815 * cbMtdParam._m0[22u].z)) * _718) + _815;
    float _829 = (((_794 - _816) + (_816 * cbMtdParam._m0[22u].z)) * _718) + _816;
    float _830 = ((sqrt(1.0 - (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) - _817) * _718) + _817;
    float _834 = cbMtdParam._m0[22u].x + _599.w;
    float _837 = fma(_830, _252, fma(_829, _259, _828 * _245));
    float _840 = fma(_830, _253, fma(_829, _260, _828 * _246));
    float _843 = fma(_830, _254, fma(_829, _261, _828 * _247));
    float _847 = inversesqrt(dot(vec3(_837, _840, _843), vec3(_837, _840, _843)));
    float _848 = _847 * _837;
    float _849 = _847 * _840;
    float _850 = _847 * _843;
    float _4191 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _851 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _4202 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4213 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _4224 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _4235 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _869 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _910 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _920 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _910);
    float _921 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _910);
    float _922 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _910);
    float _926 = inversesqrt(dot(vec3(_920, _921, _922), vec3(_920, _921, _922)));
    float _927 = _920 * _926;
    float _928 = _921 * _926;
    float _929 = _922 * _926;
    vec4 _934 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _936 = _934.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1090 = sqrt(((_920 * _920) + (_921 * _921)) + (_922 * _922));
        float _1096 = (cbMatDynParam._m0[5u].x * _1090) + cbMatDynParam._m0[5u].y;
        float _4246 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1101 = (cbMatDynParam._m0[5u].z * _1090) + cbMatDynParam._m0[5u].w;
        float _4257 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) - _1097)) + _1097) < ((_936 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _947 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _948 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _966 = fma(_850, cbSceneParam._m0[5u].z, fma(_849, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _848));
    float _969 = fma(_850, cbSceneParam._m0[6u].z, fma(_849, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _848));
    float _972 = fma(_850, cbSceneParam._m0[7u].z, fma(_849, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _848));
    uint _985 = _283 + 9u;
    uint _986 = _985 + uint(cbMatDynParam._m0[0u].w);
    float _992 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0)))) * cbInstanceData._m0[_986].x;
    float _993 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * cbInstanceData._m0[_986].y;
    float _994 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * cbInstanceData._m0[_986].z;
    float _4268 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _995 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _4279 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _996 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _4290 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _997 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    vec4 _1006 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _947, cbSceneParam._m0[86u].y * _948));
    float _1010 = ((isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * TEXCOORD_5.w) * _1006.x;
    float _1011 = dot(vec3(_848, _849, _850), vec3(_927, _928, _929));
    float _1014 = _1011 * 2.0;
    float _1018 = (_1014 * _848) - _927;
    float _1019 = (_1014 * _849) - _928;
    float _1020 = (_1014 * _850) - _929;
    float _1024 = abs(dot(vec3(_927, _928, _929), vec3(_848, _849, _850)));
    float _4301 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1026 = sqrt(_851);
    float _1039 = exp2((_1026 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1026 * 3.0));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1408;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1133 = fma(_1079, cbModelParam._m0[26u].z, fma(_1075, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1071));
        float _1137 = fma(_1079, cbModelParam._m0[27u].z, fma(_1075, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1071));
        float _1141 = fma(_1079, cbModelParam._m0[28u].z, fma(_1075, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1071));
        float _1166 = _1071 + _848;
        float _1167 = _1075 + _849;
        float _1168 = _1079 + _850;
        float _1178 = fma(_1168, cbModelParam._m0[26u].z, fma(_1167, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1166)) - _1133;
        float _1179 = fma(_1168, cbModelParam._m0[27u].z, fma(_1167, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1166)) - _1137;
        float _1180 = fma(_1168, cbModelParam._m0[28u].z, fma(_1167, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1166)) - _1141;
        float _1184 = inversesqrt(dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180)));
        float _1197 = ((_1184 * _1178) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1133 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1184 * _1179) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1137 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1184 * _1180) / cbModelParam._m0[34u].z) + ((((((_1141 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        float _1236 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1202.x + (-0.5));
        float _1238 = _1236 * (_1202.y + (-0.5));
        float _1239 = _1236 * (_1202.z + (-0.5));
        float _1246 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1209.x + (-0.5));
        float _1248 = _1246 * (_1209.y + (-0.5));
        float _1249 = _1246 * (_1209.z + (-0.5));
        float _1256 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1216.x + (-0.5));
        float _1258 = _1256 * (_1216.y + (-0.5));
        float _1259 = _1256 * (_1216.z + (-0.5));
        float _1266 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1223.x + (-0.5));
        float _1268 = _1266 * (_1223.y + (-0.5));
        float _1269 = _1266 * (_1223.z + (-0.5));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = _1237 * 0.5;
        float _1274 = _1247 * 0.5;
        float _1275 = _1257 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1290 = (dot(vec3(_848, _849, _850), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _4327 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1300 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _4338 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _4349 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_1302 + 1.0))) + _1307) * _1270;
        float _1317 = _1238 * 0.5;
        float _1318 = _1248 * 0.5;
        float _1319 = _1258 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_848, _849, _850), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _4360 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _4371 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _4382 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_1344 + 1.0))) + _1349) * _1271;
        float _1359 = _1239 * 0.5;
        float _1360 = _1249 * 0.5;
        float _1361 = _1259 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_848, _849, _850), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _4393 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _4404 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4415 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_1386 + 1.0))) + _1391) * _1272;
        _1408 = _1239;
        _1410 = _1238;
        _1411 = _1237;
        _1412 = _1249;
        _1413 = _1248;
        _1414 = _1247;
        _1415 = _1259;
        _1416 = _1258;
        _1417 = _1257;
        _1418 = _1272;
        _1419 = _1271;
        _1420 = _1270;
        _1421 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
        _1422 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
        _1423 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
    }
    else
    {
        _1408 = _1409;
        _1410 = _1409;
        _1411 = _1409;
        _1412 = _1409;
        _1413 = _1409;
        _1414 = _1409;
        _1415 = _1409;
        _1416 = _1409;
        _1417 = _1409;
        _1418 = _1409;
        _1419 = _1409;
        _1420 = _1409;
        _1421 = 0.0;
        _1422 = 0.0;
        _1423 = 0.0;
    }
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1451 = fma(_1079, cbModelParam._m0[30u].z, fma(_1075, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1071));
        float _1455 = fma(_1079, cbModelParam._m0[31u].z, fma(_1075, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1071));
        float _1459 = fma(_1079, cbModelParam._m0[32u].z, fma(_1075, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1071));
        float _1482 = _1071 + _848;
        float _1483 = _1075 + _849;
        float _1484 = _1079 + _850;
        float _1494 = fma(_1484, cbModelParam._m0[30u].z, fma(_1483, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1482)) - _1451;
        float _1495 = fma(_1484, cbModelParam._m0[31u].z, fma(_1483, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1482)) - _1455;
        float _1496 = fma(_1484, cbModelParam._m0[32u].z, fma(_1483, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1482)) - _1459;
        float _1500 = inversesqrt(dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496)));
        float _1513 = ((_1500 * _1494) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1451 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1514 = ((_1500 * _1495) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1455 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1515 = ((_1500 * _1496) / cbModelParam._m0[35u].z) + ((((((_1459 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1513, _1514, _1515), 0.0);
        float _1550 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1517.x + (-0.5));
        float _1552 = _1550 * (_1517.y + (-0.5));
        float _1553 = _1550 * (_1517.z + (-0.5));
        float _1560 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1524.x + (-0.5));
        float _1562 = _1560 * (_1524.y + (-0.5));
        float _1563 = _1560 * (_1524.z + (-0.5));
        float _1570 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1531.x + (-0.5));
        float _1572 = _1570 * (_1531.y + (-0.5));
        float _1573 = _1570 * (_1531.z + (-0.5));
        float _1580 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1538.x + (-0.5));
        float _1582 = _1580 * (_1538.y + (-0.5));
        float _1583 = _1580 * (_1538.z + (-0.5));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1587 = _1551 * 0.5;
        float _1588 = _1561 * 0.5;
        float _1589 = _1571 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_848, _849, _850), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4456 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4467 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4478 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_1614 + 1.0))) + _1619) * _1584;
        float _1629 = _1552 * 0.5;
        float _1630 = _1562 * 0.5;
        float _1631 = _1572 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_848, _849, _850), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4489 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1585 + 9.9999997473787516355514526367188e-06);
        float _4500 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4511 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_1656 + 1.0))) + _1661) * _1585;
        float _1671 = _1553 * 0.5;
        float _1672 = _1563 * 0.5;
        float _1673 = _1573 * 0.5;
        float _1674 = dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673));
        float _1679 = (_1674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1674);
        float _1687 = (dot(vec3(_848, _849, _850), vec3(_1679 * _1671, _1679 * _1672, _1679 * _1673)) + 1.0) * 0.5;
        float _4522 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1696 = sqrt(((_1672 * _1672) + (_1671 * _1671)) + (_1673 * _1673)) / (_1586 + 9.9999997473787516355514526367188e-06);
        float _4533 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _1698 = _1697 * 2.0;
        float _1702 = (1.0 - _1697) / (_1697 + 1.0);
        float _4544 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _1712 = ((((1.0 - _1703) * (_1698 + 2.0)) * exp2(log2(isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_1698 + 1.0))) + _1703) * _1586;
        _1720 = _1553;
        _1721 = _1552;
        _1722 = _1551;
        _1723 = _1563;
        _1724 = _1562;
        _1725 = _1561;
        _1726 = _1573;
        _1727 = _1572;
        _1728 = _1571;
        _1729 = _1586;
        _1730 = _1585;
        _1731 = _1584;
        _1732 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
        _1733 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
        _1734 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)));
    }
    else
    {
        _1720 = _1409;
        _1721 = _1409;
        _1722 = _1409;
        _1723 = _1409;
        _1724 = _1409;
        _1725 = _1409;
        _1726 = _1409;
        _1727 = _1409;
        _1728 = _1409;
        _1729 = _1409;
        _1730 = _1409;
        _1731 = _1409;
        _1732 = 0.0;
        _1733 = 0.0;
        _1734 = 0.0;
    }
    float _1744 = (cbModelParam._m0[1u].x * (_1732 - _1421)) + _1421;
    float _1745 = (cbModelParam._m0[1u].x * (_1733 - _1422)) + _1422;
    float _1746 = (cbModelParam._m0[1u].x * (_1734 - _1423)) + _1423;
    float _1767 = fma(_1746, cbSceneParam._m0[89u].z, fma(_1745, cbSceneParam._m0[89u].y, _1744 * cbSceneParam._m0[89u].x));
    float _1770 = fma(_1746, cbSceneParam._m0[90u].z, fma(_1745, cbSceneParam._m0[90u].y, _1744 * cbSceneParam._m0[90u].x));
    float _1773 = fma(_1746, cbSceneParam._m0[91u].z, fma(_1745, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1744));
    float _1788 = _1018 * 0.5;
    float _1789 = _1019 * 0.5;
    float _1790 = _1020 * 0.5;
    float _1791 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1722, _1725, _1728, _1731));
    float _1794 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1721, _1724, _1727, _1730));
    float _1797 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1720, _1723, _1726, _1729));
    float _1831;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1804 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1408, _1412, _1415, _1418));
        float _1808 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1410, _1413, _1416, _1419));
        float _1812 = dot(vec4(_1788, _1789, _1790, 1.0), vec4(_1411, _1414, _1417, _1420));
        float _1819 = dot(vec4(cbModelParam._m0[39u]), vec4(_1788, _1789, _1790, 1.0));
        _1831 = dot(vec3(isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1819) ? 0.0 : (isnan(0.0) ? _1819 : max(0.0, _1819))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1831 = 1.0;
    }
    float _1842;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1833 = dot(vec4(cbModelParam._m0[40u]), vec4(_1788, _1789, _1790, 1.0));
        _1842 = dot(vec3(isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1833) ? 0.0 : (isnan(0.0) ? _1833 : max(0.0, _1833))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1842 = 1.0;
    }
    float _1846 = (_1842 * cbModelParam._m0[1u].x) + (_1831 * (1.0 - cbModelParam._m0[1u].x));
    float _1856 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _851);
    float _1857 = isnan(_1856) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1856 : min(cbModelParam._m0[25u].z, _1856));
    float _1937;
    float _1939;
    float _1941;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1904 = fma(_1079, cbModelParam._m0[13u].z, fma(_1075, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1071)) + cbModelParam._m0[13u].w;
        float _1908 = fma(_1079, cbModelParam._m0[14u].z, fma(_1075, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1071)) + cbModelParam._m0[14u].w;
        float _1912 = fma(_1079, cbModelParam._m0[15u].z, fma(_1075, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1071)) + cbModelParam._m0[15u].w;
        float _1915 = fma(_1020, cbModelParam._m0[13u].z, fma(_1019, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1018));
        float _1918 = fma(_1020, cbModelParam._m0[14u].z, fma(_1019, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1018));
        float _1921 = fma(_1020, cbModelParam._m0[15u].z, fma(_1019, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1018));
        float _1949;
        if (_1915 > 0.0)
        {
            _1949 = abs((1.0 - _1904) / _1915);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1904 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1949 = frontier_phi_17_15_ladder;
        }
        float _2118;
        if (_1918 > 0.0)
        {
            _2118 = abs((1.0 - _1908) / _1918);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1908 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2118 = frontier_phi_26_22_ladder;
        }
        float _2413;
        if (_1921 > 0.0)
        {
            _2413 = abs((1.0 - _1912) / _1921);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1912 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2413 = frontier_phi_38_33_ladder;
        }
        float _2415 = isnan(_2118) ? _1949 : (isnan(_1949) ? _2118 : min(_1949, _2118));
        float _2416 = isnan(_2413) ? _2415 : (isnan(_2415) ? _2413 : min(_2415, _2413));
        float _2420 = (_2416 * _1915) + _1904;
        float _2421 = (_2416 * _1918) + _1908;
        float _2422 = (_2416 * _1921) + _1912;
        float _2423 = _2416 * 9.9999997473787516355514526367188e-05;
        float _2425 = (-1.0) - _2423;
        float _2427 = _2423 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2422 > _2427) || ((_2422 < _2425) || ((_2421 > _2427) || ((_2421 < _2425) || ((_2420 < _2425) || (_2420 > _2427))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2567 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2422, cbModelParam._m0[9u].z, fma(_2421, cbModelParam._m0[9u].y, _2420 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2422, cbModelParam._m0[10u].z, fma(_2421, cbModelParam._m0[10u].y, _2420 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2422, cbModelParam._m0[11u].z, fma(_2421, cbModelParam._m0[11u].y, _2420 * cbModelParam._m0[11u].x))), _1857);
            frontier_phi_16_38_ladder = _2567.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2567.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2567.x * cbModelParam._m0[1u].y;
        }
        _1937 = frontier_phi_16_38_ladder_2;
        _1939 = frontier_phi_16_38_ladder_1;
        _1941 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1925 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1018, _1019, _1020), _1857);
        _1937 = _1925.x * cbModelParam._m0[1u].y;
        _1939 = _1925.y * cbModelParam._m0[1u].y;
        _1941 = _1925.z * cbModelParam._m0[1u].y;
    }
    float _1945 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _851);
    float _1946 = isnan(_1945) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1945 : min(cbModelParam._m0[25u].w, _1945));
    float _2035;
    float _2037;
    float _2039;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1999 = fma(_1079, cbModelParam._m0[21u].z, fma(_1075, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1071)) + cbModelParam._m0[21u].w;
        float _2003 = fma(_1079, cbModelParam._m0[22u].z, fma(_1075, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1071)) + cbModelParam._m0[22u].w;
        float _2007 = fma(_1079, cbModelParam._m0[23u].z, fma(_1075, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1071)) + cbModelParam._m0[23u].w;
        float _2010 = fma(_1020, cbModelParam._m0[21u].z, fma(_1019, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1018));
        float _2013 = fma(_1020, cbModelParam._m0[22u].z, fma(_1019, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1018));
        float _2016 = fma(_1020, cbModelParam._m0[23u].z, fma(_1019, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1018));
        float _2123;
        if (_2010 > 0.0)
        {
            _2123 = abs((1.0 - _1999) / _2010);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1999 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2123 = frontier_phi_28_24_ladder;
        }
        float _2440;
        if (_2013 > 0.0)
        {
            _2440 = abs((1.0 - _2003) / _2013);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2003 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2440 = frontier_phi_40_35_ladder;
        }
        float _2767;
        if (_2016 > 0.0)
        {
            _2767 = abs((1.0 - _2007) / _2016);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2007 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2767 = frontier_phi_50_47_ladder;
        }
        float _2769 = isnan(_2440) ? _2123 : (isnan(_2123) ? _2440 : min(_2123, _2440));
        float _2770 = isnan(_2767) ? _2769 : (isnan(_2769) ? _2767 : min(_2769, _2767));
        float _2774 = (_2770 * _2010) + _1999;
        float _2775 = (_2770 * _2013) + _2003;
        float _2776 = (_2770 * _2016) + _2007;
        float _2777 = _2770 * 9.9999997473787516355514526367188e-05;
        float _2778 = (-1.0) - _2777;
        float _2780 = _2777 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2776 > _2780) || ((_2776 < _2778) || ((_2775 > _2780) || ((_2775 < _2778) || ((_2774 < _2778) || (_2774 > _2780))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2894 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2776, cbModelParam._m0[17u].z, fma(_2775, cbModelParam._m0[17u].y, _2774 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2776, cbModelParam._m0[18u].z, fma(_2775, cbModelParam._m0[18u].y, _2774 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2776, cbModelParam._m0[19u].z, fma(_2775, cbModelParam._m0[19u].y, _2774 * cbModelParam._m0[19u].x))), _1946);
            frontier_phi_25_50_ladder = _2894.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2894.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2894.x * cbModelParam._m0[1u].z;
        }
        _2035 = frontier_phi_25_50_ladder_2;
        _2037 = frontier_phi_25_50_ladder_1;
        _2039 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2019 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1018, _1019, _1020), _1946);
        _2035 = _2019.x * cbModelParam._m0[1u].z;
        _2037 = _2019.y * cbModelParam._m0[1u].z;
        _2039 = _2019.z * cbModelParam._m0[1u].z;
    }
    float _2051 = ((((1.0 - _1039) * ((_1026 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1039 * _1026)) * _1010;
    float _2052 = _2051 * ((cbModelParam._m0[1u].w * (_2035 - _1937)) + _1937);
    float _2053 = _2051 * ((cbModelParam._m0[1u].w * (_2037 - _1939)) + _1939);
    float _2054 = _2051 * ((cbModelParam._m0[1u].w * (_2039 - _1941)) + _1941);
    float _2057 = fma(_2054, cbSceneParam._m0[89u].z, fma(_2053, cbSceneParam._m0[89u].y, _2052 * cbSceneParam._m0[89u].x));
    float _2060 = fma(_2054, cbSceneParam._m0[90u].z, fma(_2053, cbSceneParam._m0[90u].y, _2052 * cbSceneParam._m0[90u].x));
    float _2063 = fma(_2054, cbSceneParam._m0[91u].z, fma(_2053, cbSceneParam._m0[91u].y, _2052 * cbSceneParam._m0[91u].x));
    float _2097 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2101 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2105 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2109 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2110 = _2097 / _2109;
    float _2111 = _2101 / _2109;
    float _2112 = _2105 / _2109;
    float _2259;
    float _2260;
    float _2261;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2139 = ((uint(_2112 > cbSceneParam._m0[59u].y) + uint(_2112 > cbSceneParam._m0[59u].x)) + uint(_2112 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2140 = _2139 + 43u;
        uint _2148 = _2139 + 44u;
        uint _2156 = _2139 + 45u;
        uint _2164 = _2139 + 46u;
        float _2175 = fma(_2109, cbSceneParam._m0[_2140].w, fma(_2105, cbSceneParam._m0[_2140].z, fma(_2101, cbSceneParam._m0[_2140].y, _2097 * cbSceneParam._m0[_2140].x)));
        float _2179 = fma(_2109, cbSceneParam._m0[_2148].w, fma(_2105, cbSceneParam._m0[_2148].z, fma(_2101, cbSceneParam._m0[_2148].y, _2097 * cbSceneParam._m0[_2148].x)));
        float _2187 = fma(_2109, cbSceneParam._m0[_2164].w, fma(_2105, cbSceneParam._m0[_2164].z, fma(_2101, cbSceneParam._m0[_2164].y, _2097 * cbSceneParam._m0[_2164].x)));
        float _2192 = cbSceneParam._m0[33u].z * _2187;
        float _2194 = cbSceneParam._m0[33u].w * _2187;
        float _2197 = fma(_2109, cbSceneParam._m0[_2156].w, fma(_2105, cbSceneParam._m0[_2156].z, fma(_2101, cbSceneParam._m0[_2156].y, _2097 * cbSceneParam._m0[_2156].x))) / _2187;
        float _2245 = (cbSceneParam._m0[33u].x - sqrt(((_2111 * _2111) + (_2110 * _2110)) + (_2112 * _2112))) * cbSceneParam._m0[33u].y;
        float _4670 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2252 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2192 + _2175) / _2187, (_2194 + _2179) / _2187), _2197), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2194 + _2175) / _2187, (_2179 - _2192) / _2187), _2197), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2175 - _2192) / _2187, (_2179 - _2194) / _2187), _2197), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2175 - _2194) / _2187, (_2192 + _2179) / _2187), _2197), 0.0)).x), vec4(0.25)));
        _2259 = 1.0 - (_2252 * cbSceneParam._m0[34u].x);
        _2260 = 1.0 - (_2252 * cbSceneParam._m0[34u].y);
        _2261 = 1.0 - (_2252 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2259 = 1.0;
        _2260 = 1.0;
        _2261 = 1.0;
    }
    float _2325;
    float _2327;
    float _2329;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2313 = fma(_2109, cbSceneParam._m0[63u].w, fma(_2105, cbSceneParam._m0[63u].z, fma(_2101, cbSceneParam._m0[63u].y, _2097 * cbSceneParam._m0[63u].x)));
        float _2314 = fma(_2109, cbSceneParam._m0[60u].w, fma(_2105, cbSceneParam._m0[60u].z, fma(_2101, cbSceneParam._m0[60u].y, _2097 * cbSceneParam._m0[60u].x))) / _2313;
        float _2315 = fma(_2109, cbSceneParam._m0[61u].w, fma(_2105, cbSceneParam._m0[61u].z, fma(_2101, cbSceneParam._m0[61u].y, _2097 * cbSceneParam._m0[61u].x))) / _2313;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2314 >= cbSceneParam._m0[64u].x) && (_2315 >= cbSceneParam._m0[64u].y)) && (_2314 <= cbSceneParam._m0[64u].z)) && (_2315 <= cbSceneParam._m0[64u].w))
        {
            float _2453 = fma(_2109, cbSceneParam._m0[62u].w, fma(_2105, cbSceneParam._m0[62u].z, fma(_2101, cbSceneParam._m0[62u].y, _2097 * cbSceneParam._m0[62u].x))) / _2313;
            float _2457 = isnan(cbSceneParam._m0[41u].w) ? _2453 : (isnan(_2453) ? cbSceneParam._m0[41u].w : max(_2453, cbSceneParam._m0[41u].w));
            float _2500 = (cbSceneParam._m0[33u].x - sqrt(((_2111 * _2111) + (_2110 * _2110)) + (_2112 * _2112))) * cbSceneParam._m0[33u].y;
            float _4686 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
            float _2507 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2314, cbSceneParam._m0[33u].w + _2315), _2457), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2314, _2315 - cbSceneParam._m0[33u].z), _2457), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2314 - cbSceneParam._m0[33u].z, _2315 - cbSceneParam._m0[33u].w), _2457), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2314 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2315), _2457), 0.0)).x), vec4(0.25)));
            float _2511 = 1.0 - (_2507 * cbSceneParam._m0[34u].x);
            float _2512 = 1.0 - (_2507 * cbSceneParam._m0[34u].y);
            float _2513 = 1.0 - (_2507 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2513) ? _2261 : (isnan(_2261) ? _2513 : min(_2261, _2513));
            frontier_phi_37_36_ladder_1 = isnan(_2512) ? _2260 : (isnan(_2260) ? _2512 : min(_2260, _2512));
            frontier_phi_37_36_ladder_2 = isnan(_2511) ? _2259 : (isnan(_2259) ? _2511 : min(_2259, _2511));
        }
        else
        {
            frontier_phi_37_36_ladder = _2261;
            frontier_phi_37_36_ladder_1 = _2260;
            frontier_phi_37_36_ladder_2 = _2259;
        }
        _2325 = frontier_phi_37_36_ladder_2;
        _2327 = frontier_phi_37_36_ladder_1;
        _2329 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2325 = _2259;
        _2327 = _2260;
        _2329 = _2261;
    }
    uvec4 _2334 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2336 = _2334.x * 14u;
    uint _2337 = _2336 + 13u;
    float _2344 = _1010 + (-1.0);
    float _2349 = (cbLight._m0[_2337].x * _2344) + 1.0;
    float _2350 = (cbLight._m0[_2337].y * _2344) + 1.0;
    float _2351 = (cbLight._m0[_2337].z * _2344) + 1.0;
    float _2352 = (cbLight._m0[_2337].w * _2344) + 1.0;
    uint _2353 = _2336 + 5u;
    float _2359 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
    uint _2363 = _2336 + 4u;
    float _2372 = isnan(1.0) ? _2349 : (isnan(_2349) ? 1.0 : min(_2349, 1.0));
    uint _2376 = _2336 | 1u;
    float _2387 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_848, _849, _850));
    float _2390 = dot(vec3(cbLight._m0[_2376].xyz), vec3(_848, _849, _850));
    float _4722 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _4733 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2395 = (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * 0.3183098733425140380859375;
    float _2397 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * 0.3183098733425140380859375;
    float _2404 = ((cbLight._m0[_2353].x * _2359) * _2397) + (((cbLight._m0[_2363].x * _2325) * _2372) * _2395);
    float _2405 = ((_2359 * cbLight._m0[_2353].y) * _2397) + (((cbLight._m0[_2363].y * _2327) * _2372) * _2395);
    float _2406 = ((_2359 * cbLight._m0[_2353].z) * _2397) + (((cbLight._m0[_2363].z * _2329) * _2372) * _2395);
    uvec4 _2410 = floatBitsToUint(cbLight._m0[_2336 + 12u]);
    bool _2412 = _2410.x == 0u;
    float _2514;
    float _2516;
    float _2518;
    if (_2412)
    {
        _2514 = _2404;
        _2516 = _2405;
        _2518 = _2406;
    }
    else
    {
        uint _2522 = _2336 + 6u;
        float _2538 = (dot(vec3(cbLight._m0[_2336 + 2u].xyz), vec3(_848, _849, _850)) * 0.5) + 0.5;
        float _2539 = _2538 * _2538;
        float _4744 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2540 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _2541 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
        _2514 = (((cbLight._m0[_2522].x * 0.3183098733425140380859375) * _2540) * _2541) + _2404;
        _2516 = (((cbLight._m0[_2522].y * 0.3183098733425140380859375) * _2540) * _2541) + _2405;
        _2518 = (((cbLight._m0[_2522].z * 0.3183098733425140380859375) * _2540) * _2541) + _2406;
    }
    bool _2521 = _2410.y == 0u;
    float _2576;
    float _2578;
    float _2580;
    if (_2521)
    {
        _2576 = _2514;
        _2578 = _2516;
        _2580 = _2518;
    }
    else
    {
        uint _2738 = _2336 + 7u;
        float _2754 = (dot(vec3(cbLight._m0[_2336 + 3u].xyz), vec3(_848, _849, _850)) * 0.5) + 0.5;
        float _2755 = _2754 * _2754;
        float _4760 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2756 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _2757 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2576 = (((cbLight._m0[_2738].x * 0.3183098733425140380859375) * _2756) * _2757) + _2514;
        _2578 = (((cbLight._m0[_2738].y * 0.3183098733425140380859375) * _2756) * _2757) + _2516;
        _2580 = (((cbLight._m0[_2738].z * 0.3183098733425140380859375) * _2756) * _2757) + _2518;
    }
    uint _2583 = _2336 + 8u;
    float _2596 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2336].w)) * _851) * 0.949999988079071044921875);
    float _2597 = _2596 * _2596;
    float _2598 = cbLight._m0[_2336].x + _927;
    float _2599 = cbLight._m0[_2336].y + _928;
    float _2600 = cbLight._m0[_2336].z + _929;
    float _2604 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
    float _2605 = _2604 * _2598;
    float _2606 = _2604 * _2599;
    float _2607 = _2604 * _2600;
    float _2608 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2336].xyz));
    float _4776 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    float _2611 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
    float _4787 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _2612 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
    float _2613 = dot(vec3(_848, _849, _850), vec3(_2605, _2606, _2607));
    float _4798 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2616 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
    float _2617 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_2605, _2606, _2607));
    float _4809 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2621 = _2597 * _2597;
    float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
    float _2636 = (exp2(log2(1.0 - (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2637 = 1.0 - _2597;
    float _2648 = (0.5 / (((_2612 * ((_2611 * _2637) + _2597)) + 9.9999999392252902907785028219223e-09) + (((_2612 * _2637) + _2597) * _2611))) * _2611;
    float _4820 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2650 = (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
    uint _2664 = _2336 + 9u;
    float _2675 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2376].w)) * _851) * 0.949999988079071044921875);
    float _2676 = _2675 * _2675;
    float _2677 = cbLight._m0[_2376].x + _927;
    float _2678 = cbLight._m0[_2376].y + _928;
    float _2679 = cbLight._m0[_2376].z + _929;
    float _2683 = inversesqrt(dot(vec3(_2677, _2678, _2679), vec3(_2677, _2678, _2679)));
    float _2684 = _2683 * _2677;
    float _2685 = _2683 * _2678;
    float _2686 = _2683 * _2679;
    float _2687 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2376].xyz));
    float _4831 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
    float _2690 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
    float _2691 = dot(vec3(_848, _849, _850), vec3(_2684, _2685, _2686));
    float _4842 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
    float _2694 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
    float _2695 = dot(vec3(cbLight._m0[_2376].xyz), vec3(_2684, _2685, _2686));
    float _4853 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
    float _2699 = _2676 * _2676;
    float _2703 = ((_2694 * _2694) * (_2699 + (-1.0))) + 1.0;
    float _2712 = (exp2(log2(1.0 - (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2713 = 1.0 - _2676;
    float _2723 = (0.5 / (((_2612 * ((_2690 * _2713) + _2676)) + 9.9999999392252902907785028219223e-09) + (((_2612 * _2713) + _2676) * _2690))) * _2690;
    float _4864 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
    float _2725 = (isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0))) * (_2699 / ((_2703 * _2703) * 3.141590118408203125));
    float _2735 = (((_2712 * cbLight._m0[_2664].x) * _2725) * _2359) + ((((cbLight._m0[_2583].x * _2325) * _2636) * _2650) * _2372);
    float _2736 = (((_2712 * cbLight._m0[_2664].y) * _2725) * _2359) + ((((cbLight._m0[_2583].y * _2327) * _2636) * _2650) * _2372);
    float _2737 = (((_2712 * cbLight._m0[_2664].z) * _2725) * _2359) + ((((cbLight._m0[_2583].z * _2329) * _2636) * _2650) * _2372);
    float _2793;
    float _2795;
    float _2797;
    if (_2412)
    {
        _2793 = _2735;
        _2795 = _2736;
        _2797 = _2737;
    }
    else
    {
        uint _2799 = _2336 + 2u;
        uint _2803 = _2336 + 10u;
        float _2817 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2799].w)) * _851) * 0.949999988079071044921875);
        float _2818 = _2817 * _2817;
        float _2819 = cbLight._m0[_2799].x + _927;
        float _2820 = cbLight._m0[_2799].y + _928;
        float _2821 = cbLight._m0[_2799].z + _929;
        float _2825 = inversesqrt(dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821)));
        float _2826 = _2825 * _2819;
        float _2827 = _2825 * _2820;
        float _2828 = _2825 * _2821;
        float _2829 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2799].xyz));
        float _4875 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2832 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
        float _2833 = dot(vec3(_848, _849, _850), vec3(_2826, _2827, _2828));
        float _4886 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2836 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
        float _2837 = dot(vec3(cbLight._m0[_2799].xyz), vec3(_2826, _2827, _2828));
        float _4897 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2841 = _2818 * _2818;
        float _2845 = ((_2836 * _2836) * (_2841 + (-1.0))) + 1.0;
        float _2854 = (exp2(log2(1.0 - (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2855 = 1.0 - _2818;
        float _2865 = (0.5 / (((_2612 * ((_2832 * _2855) + _2818)) + 9.9999999392252902907785028219223e-09) + (((_2612 * _2855) + _2818) * _2832))) * _2832;
        float _4908 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2867 = (isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * (_2841 / ((_2845 * _2845) * 3.141590118408203125));
        float _2868 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
        _2793 = (((_2854 * cbLight._m0[_2803].x) * _2867) * _2868) + _2735;
        _2795 = (((_2854 * cbLight._m0[_2803].y) * _2867) * _2868) + _2736;
        _2797 = (((_2854 * cbLight._m0[_2803].z) * _2867) * _2868) + _2737;
    }
    float _2899;
    float _2901;
    float _2903;
    if (_2521)
    {
        _2899 = _2793;
        _2901 = _2795;
        _2903 = _2797;
    }
    else
    {
        uint _2910 = _2336 + 3u;
        uint _2914 = _2336 + 11u;
        float _2928 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2910].w)) * _851) * 0.949999988079071044921875);
        float _2929 = _2928 * _2928;
        float _2930 = cbLight._m0[_2910].x + _927;
        float _2931 = cbLight._m0[_2910].y + _928;
        float _2932 = cbLight._m0[_2910].z + _929;
        float _2936 = inversesqrt(dot(vec3(_2930, _2931, _2932), vec3(_2930, _2931, _2932)));
        float _2937 = _2936 * _2930;
        float _2938 = _2936 * _2931;
        float _2939 = _2936 * _2932;
        float _2940 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2910].xyz));
        float _4924 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        float _2943 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
        float _2944 = dot(vec3(_848, _849, _850), vec3(_2937, _2938, _2939));
        float _4935 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
        float _2947 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
        float _2948 = dot(vec3(cbLight._m0[_2910].xyz), vec3(_2937, _2938, _2939));
        float _4946 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        float _2952 = _2929 * _2929;
        float _2956 = ((_2947 * _2947) * (_2952 + (-1.0))) + 1.0;
        float _2965 = (exp2(log2(1.0 - (isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2966 = 1.0 - _2929;
        float _2976 = (0.5 / (((_2612 * ((_2943 * _2966) + _2929)) + 9.9999999392252902907785028219223e-09) + (((_2612 * _2966) + _2929) * _2943))) * _2943;
        float _4957 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
        float _2978 = (isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0))) * (_2952 / ((_2956 * _2956) * 3.141590118408203125));
        float _2979 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2899 = (((_2965 * cbLight._m0[_2914].x) * _2978) * _2979) + _2793;
        _2901 = (((_2965 * cbLight._m0[_2914].y) * _2978) * _2979) + _2795;
        _2903 = (((_2965 * cbLight._m0[_2914].z) * _2978) * _2979) + _2797;
    }
    float _3045;
    float _3047;
    float _3049;
    float _3051;
    float _3053;
    float _3055;
    if (_2334.y == 0u)
    {
        uvec4 _3000 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3001 = _3000.x;
        uint _3012 = uint((float(_3000.y) * floor(float(uint(cbSceneParam._m0[85u].y * _948) / _3001))) + floor(float(uint(cbSceneParam._m0[85u].x * _947) / _3001)));
        float _3022 = (log2(_2112 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3023 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
        uint _3026 = uint(isnan(14.0) ? _3023 : (isnan(_3023) ? 14.0 : min(_3023, 14.0)));
        uvec4 _3031 = texelFetch(g_lightClusterGridBuffer, int(((_3026 << 2u) + (_3012 << 6u)) >> 2u));
        uint _3032 = _3031.x;
        uint _3033 = _3000.z;
        float _3112;
        float _3114;
        float _3116;
        float _3118;
        float _3120;
        float _3122;
        if (((((1u << ((_3033 >> 4u) & 15u)) + 4294967295u) & _3032) == 0u) || ((_3033 & 240u) == 0u))
        {
            _3112 = 0.0;
            _3114 = 0.0;
            _3116 = 0.0;
            _3118 = 0.0;
            _3120 = 0.0;
            _3122 = 0.0;
        }
        else
        {
            float _3113;
            float _3115;
            float _3117;
            float _3119;
            float _3121;
            float _3123;
            float _3264 = 0.0;
            float _3265 = 0.0;
            float _3266 = 0.0;
            float _3267 = 0.0;
            float _3268 = 0.0;
            float _3269 = 0.0;
            uint _3270 = 0u;
            uint _3279;
            bool _3280;
            for (;;)
            {
                _3279 = texelFetch(g_lightClassification, int((((_3026 << 5u) + (_3012 << 9u)) + (_3270 << 2u)) >> 2u)).x;
                _3280 = _3279 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3280)
                {
                    frontier_phi_71_pred = _3269;
                    frontier_phi_71_pred_1 = _3268;
                    frontier_phi_71_pred_2 = _3267;
                    frontier_phi_71_pred_3 = _3266;
                    frontier_phi_71_pred_4 = _3265;
                    frontier_phi_71_pred_5 = _3264;
                }
                else
                {
                    float _3409;
                    float _3410;
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    uint _3415;
                    _3409 = _3264;
                    _3410 = _3265;
                    _3411 = _3266;
                    _3412 = _3267;
                    _3413 = _3268;
                    _3414 = _3269;
                    _3415 = _3279;
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    for (;;)
                    {
                        uint _3419 = uint(findLSB(_3415)) + (_3270 << 5u);
                        uint _3416 = (_3415 + 4294967295u) & _3415;
                        uint _3421 = _3419 * 48u;
                        vec4 _3435 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3421)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 3u)).x));
                        uint _3441 = (_3419 * 48u) + 4u;
                        vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3441)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 3u)).x));
                        uint _3460 = (_3419 * 48u) + 8u;
                        vec3 _3471 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3460)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 2u)).x));
                        float _3475 = _3435.x - _2110;
                        float _3476 = _3435.y - _2111;
                        float _3477 = _3435.z - _2112;
                        float _3478 = dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477));
                        float _3481 = inversesqrt(_3478);
                        float _3482 = _3481 * _3475;
                        float _3483 = _3481 * _3476;
                        float _3484 = _3481 * _3477;
                        float _3485 = dot(vec3(_966, _969, _972), vec3(_3482, _3483, _3484));
                        float _3490 = 1.0 - (_3478 * _3435.w);
                        float _4983 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                        float _3491 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                        float _3492 = sqrt(_3478) * _3454.w;
                        float _3495 = 1.39999997615814208984375 / (_3492 + 1.39999997615814208984375);
                        float _3496 = _3495 * _3495;
                        float _3499 = ((1.0 - _3496) * _3485) + _3496;
                        float _3502 = _3492 * _3492;
                        float _3506 = ((isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0))) * _3491) / ((_3502 * 0.699999988079071044921875) + 1.0);
                        float _3510 = (-0.0) - _2110;
                        float _3511 = (-0.0) - _2111;
                        float _3512 = (-0.0) - _2112;
                        float _3516 = inversesqrt(dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512)));
                        float _3517 = _3516 * _3510;
                        float _3518 = _3516 * _3511;
                        float _3519 = _3516 * _3512;
                        float _3526 = exp2(log2(1.0 / ((_3502 * 3.5) + 5.0)) * 0.25);
                        float _3527 = 1.0 - _1026;
                        float _3534 = sqrt(1.0 - ((1.0 - (_3527 * _3527)) * (1.0 - (_3526 * _3526))));
                        float _3535 = _3534 * _3534;
                        float _3536 = _3535 * _3535;
                        float _3537 = _3517 + _3482;
                        float _3538 = _3518 + _3483;
                        float _3539 = _3519 + _3484;
                        float _3543 = inversesqrt(dot(vec3(_3537, _3538, _3539), vec3(_3537, _3538, _3539)));
                        float _3547 = dot(vec3(_966, _969, _972), vec3(_3517, _3518, _3519));
                        float _4999 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                        float _3550 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
                        float _3551 = dot(vec3(_966, _969, _972), vec3(_3543 * _3537, _3543 * _3538, _3543 * _3539));
                        float _5010 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                        float _3554 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
                        float _3558 = ((_3554 * _3554) * (_3536 + (-1.0))) + 1.0;
                        float _3559 = _3495 * _3535;
                        float _3560 = _3559 * _3559;
                        float _3563 = ((1.0 - _3560) * _3485) + _3560;
                        float _5021 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                        float _3564 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
                        float _3565 = 1.0 - _3535;
                        float _3575 = (0.5 / (((_3564 * ((_3550 * _3565) + _3535)) + 9.9999999392252902907785028219223e-09) + (((_3564 * _3565) + _3535) * _3550))) * _3564;
                        float _5032 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                        float _3586 = (((_3536 * 3.1415927410125732421875) * (isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0)))) / ((_3558 * _3558) * ((_3502 * 2.1991131305694580078125) + 3.141590118408203125))) * _3491;
                        _3339 = (_3506 * _3454.x) + _3412;
                        _3340 = (_3506 * _3454.y) + _3413;
                        _3341 = (_3506 * _3454.z) + _3414;
                        _3336 = (_3586 * _3471.x) + _3409;
                        _3337 = (_3586 * _3471.y) + _3410;
                        _3338 = (_3586 * _3471.z) + _3411;
                        if (_3416 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3409 = _3336;
                            _3410 = _3337;
                            _3411 = _3338;
                            _3412 = _3339;
                            _3413 = _3340;
                            _3414 = _3341;
                            _3415 = _3416;
                        }
                    }
                    frontier_phi_71_pred = _3341;
                    frontier_phi_71_pred_1 = _3340;
                    frontier_phi_71_pred_2 = _3339;
                    frontier_phi_71_pred_3 = _3338;
                    frontier_phi_71_pred_4 = _3337;
                    frontier_phi_71_pred_5 = _3336;
                }
                _3123 = frontier_phi_71_pred;
                _3121 = frontier_phi_71_pred_1;
                _3119 = frontier_phi_71_pred_2;
                _3117 = frontier_phi_71_pred_3;
                _3115 = frontier_phi_71_pred_4;
                _3113 = frontier_phi_71_pred_5;
                uint _3271 = _3270 + 1u;
                if (_3271 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3264 = _3113;
                    _3265 = _3115;
                    _3266 = _3117;
                    _3267 = _3119;
                    _3268 = _3121;
                    _3269 = _3123;
                    _3270 = _3271;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3112 = _3113;
            _3114 = _3115;
            _3116 = _3117;
            _3118 = _3119;
            _3120 = _3121;
            _3122 = _3123;
        }
        uvec4 _3126 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3127 = _3126.z;
        uint _3129 = (_3127 >> 8u) & 15u;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        float _3240;
        float _3242;
        if (((4294967295u << _3129) & _3032) == 0u)
        {
            _3232 = _3112;
            _3234 = _3114;
            _3236 = _3116;
            _3238 = _3118;
            _3240 = _3120;
            _3242 = _3122;
        }
        else
        {
            float _3257 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
            float _3258 = _3257 * _2110;
            float _3259 = _3257 * _2111;
            float _3260 = _3257 * _2112;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3129 < ((_3127 >> 12u) & 15u))
            {
                float _3233;
                float _3235;
                float _3237;
                float _3239;
                float _3241;
                float _3243;
                float _3392 = _3112;
                float _3393 = _3114;
                float _3394 = _3116;
                float _3395 = _3118;
                float _3396 = _3120;
                float _3397 = _3122;
                uint _3398 = _3129;
                uint _3407;
                bool _3408;
                for (;;)
                {
                    _3407 = texelFetch(g_lightClassification, int((((_3026 << 5u) + (_3012 << 9u)) + (_3398 << 2u)) >> 2u)).x;
                    _3408 = _3407 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3408)
                    {
                        frontier_phi_82_pred = _3397;
                        frontier_phi_82_pred_1 = _3396;
                        frontier_phi_82_pred_2 = _3395;
                        frontier_phi_82_pred_3 = _3394;
                        frontier_phi_82_pred_4 = _3393;
                        frontier_phi_82_pred_5 = _3392;
                    }
                    else
                    {
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3893;
                        float _3894;
                        float _3895;
                        float _3896;
                        float _3897;
                        float _3898;
                        float _3613 = _3392;
                        float _3614 = _3393;
                        float _3615 = _3394;
                        float _3616 = _3395;
                        float _3617 = _3396;
                        float _3618 = _3397;
                        uint _3619 = _3407;
                        uint _3620;
                        vec4 _3645;
                        float _3646;
                        vec4 _3661;
                        vec3 _3673;
                        vec4 _3688;
                        vec4 _3703;
                        float _3749;
                        bool _3750;
                        for (;;)
                        {
                            uint _3630 = ((_3398 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3619));
                            _3620 = (_3619 + 4294967295u) & _3619;
                            uint _3632 = _3630 * 40u;
                            _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            _3646 = _3645.w;
                            uint _3648 = (_3630 * 40u) + 4u;
                            _3661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 3u)).x));
                            uint _3663 = (_3630 * 40u) + 8u;
                            _3673 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x));
                            uint _3675 = (_3630 * 40u) + 16u;
                            _3688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 3u)).x));
                            uint _3690 = (_3630 * 40u) + 20u;
                            _3703 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 3u)).x));
                            uint _3705 = (_3630 * 40u) + 24u;
                            vec4 _3718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3705 + 3u)).x));
                            uint _3724 = (_3630 * 40u) + 28u;
                            vec4 _3737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 3u)).x));
                            _3749 = fma(_2112, _3737.z, fma(_2111, _3737.y, _3737.x * _2110)) + _3737.w;
                            _3750 = !((fma(_2112, _3718.z, fma(_2111, _3718.y, _3718.x * _2110)) + _3718.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3750)
                            {
                                float _3777 = _3645.x - _2110;
                                float _3778 = _3645.y - _2111;
                                float _3779 = _3645.z - _2112;
                                float _3780 = dot(vec3(_3777, _3778, _3779), vec3(_3777, _3778, _3779));
                                float _3783 = inversesqrt(_3780);
                                float _3784 = _3783 * _3777;
                                float _3785 = _3783 * _3778;
                                float _3786 = _3783 * _3779;
                                float _3790 = 1.0 - (_3780 / (_3646 * _3646));
                                float _5043 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3791 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
                                float _3795 = sqrt(_3780) * _3661.w;
                                float _3797 = 1.39999997615814208984375 / (_3795 + 1.39999997615814208984375);
                                float _3798 = _3797 * _3797;
                                float _3801 = ((1.0 - _3798) * dot(vec3(_3784, _3785, _3786), vec3(_966, _969, _972))) + _3798;
                                float _3804 = _3795 * _3795;
                                float _3808 = (fma(_2112, _3688.z, fma(_2111, _3688.y, _3688.x * _2110)) + _3688.w) / _3749;
                                float _3809 = (fma(_2112, _3703.z, fma(_2111, _3703.y, _3703.x * _2110)) + _3703.w) / _3749;
                                float _3813 = 1.0 - dot(vec2(_3808, _3809), vec2(_3808, _3809));
                                float _5059 = isnan(0.0) ? _3813 : (isnan(_3813) ? 0.0 : max(_3813, 0.0));
                                float _3814 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
                                float _3815 = _3814 * (((isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0))) * _3791) / ((_3804 * 0.699999988079071044921875) + 1.0));
                                float _3827 = exp2(log2(1.0 / ((_3804 * 3.5) + 5.0)) * 0.25);
                                float _3828 = 1.0 - _1026;
                                float _3835 = sqrt(1.0 - ((1.0 - (_3828 * _3828)) * (1.0 - (_3827 * _3827))));
                                float _3836 = _3835 * _3835;
                                float _3837 = _3836 * _3836;
                                float _3838 = _3784 - _3258;
                                float _3839 = _3785 - _3259;
                                float _3840 = _3786 - _3260;
                                float _3844 = inversesqrt(dot(vec3(_3838, _3839, _3840), vec3(_3838, _3839, _3840)));
                                float _3848 = dot(vec3(_966, _969, _972), vec3((-0.0) - _3258, (-0.0) - _3259, (-0.0) - _3260));
                                float _5070 = isnan(0.0) ? _3848 : (isnan(_3848) ? 0.0 : max(_3848, 0.0));
                                float _3851 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
                                float _3852 = dot(vec3(_966, _969, _972), vec3(_3844 * _3838, _3844 * _3839, _3844 * _3840));
                                float _5081 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                                float _3855 = isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0));
                                float _3859 = ((_3855 * _3855) * (_3837 + (-1.0))) + 1.0;
                                float _3860 = _3797 * _3836;
                                float _3861 = _3860 * _3860;
                                float _3867 = ((1.0 - _3861) * dot(vec3(_966, _969, _972), vec3(_3784, _3785, _3786))) + _3861;
                                float _5092 = isnan(0.0) ? _3867 : (isnan(_3867) ? 0.0 : max(_3867, 0.0));
                                float _3868 = isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0));
                                float _3869 = 1.0 - _3836;
                                float _3879 = (0.5 / (((_3868 * ((_3851 * _3869) + _3836)) + 9.9999999392252902907785028219223e-09) + (((_3868 * _3869) + _3836) * _3851))) * _3868;
                                float _5103 = isnan(0.0) ? _3879 : (isnan(_3879) ? 0.0 : max(_3879, 0.0));
                                float _3889 = (_3814 * _3791) * (((_3837 * 3.1415927410125732421875) * (isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0)))) / ((_3859 * _3859) * ((_3804 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3815 * _3661.z;
                                frontier_phi_88_pred_1 = _3815 * _3661.y;
                                frontier_phi_88_pred_2 = _3815 * _3661.x;
                                frontier_phi_88_pred_3 = _3889 * _3673.z;
                                frontier_phi_88_pred_4 = _3889 * _3673.y;
                                frontier_phi_88_pred_5 = _3889 * _3673.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3898 = frontier_phi_88_pred;
                            _3897 = frontier_phi_88_pred_1;
                            _3896 = frontier_phi_88_pred_2;
                            _3895 = frontier_phi_88_pred_3;
                            _3894 = frontier_phi_88_pred_4;
                            _3893 = frontier_phi_88_pred_5;
                            _3603 = _3896 + _3616;
                            _3604 = _3897 + _3617;
                            _3605 = _3898 + _3618;
                            _3600 = _3893 + _3613;
                            _3601 = _3894 + _3614;
                            _3602 = _3895 + _3615;
                            if (_3620 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3613 = _3600;
                                _3614 = _3601;
                                _3615 = _3602;
                                _3616 = _3603;
                                _3617 = _3604;
                                _3618 = _3605;
                                _3619 = _3620;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3605;
                        frontier_phi_82_pred_1 = _3604;
                        frontier_phi_82_pred_2 = _3603;
                        frontier_phi_82_pred_3 = _3602;
                        frontier_phi_82_pred_4 = _3601;
                        frontier_phi_82_pred_5 = _3600;
                    }
                    _3243 = frontier_phi_82_pred;
                    _3241 = frontier_phi_82_pred_1;
                    _3239 = frontier_phi_82_pred_2;
                    _3237 = frontier_phi_82_pred_3;
                    _3235 = frontier_phi_82_pred_4;
                    _3233 = frontier_phi_82_pred_5;
                    uint _3399 = _3398 + 1u;
                    if (_3399 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3392 = _3233;
                        _3393 = _3235;
                        _3394 = _3237;
                        _3395 = _3239;
                        _3396 = _3241;
                        _3397 = _3243;
                        _3398 = _3399;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3239;
                frontier_phi_63_64_ladder_1 = _3243;
                frontier_phi_63_64_ladder_2 = _3241;
                frontier_phi_63_64_ladder_3 = _3237;
                frontier_phi_63_64_ladder_4 = _3235;
                frontier_phi_63_64_ladder_5 = _3233;
            }
            else
            {
                frontier_phi_63_64_ladder = _3118;
                frontier_phi_63_64_ladder_1 = _3122;
                frontier_phi_63_64_ladder_2 = _3120;
                frontier_phi_63_64_ladder_3 = _3116;
                frontier_phi_63_64_ladder_4 = _3114;
                frontier_phi_63_64_ladder_5 = _3112;
            }
            _3232 = frontier_phi_63_64_ladder_5;
            _3234 = frontier_phi_63_64_ladder_4;
            _3236 = frontier_phi_63_64_ladder_3;
            _3238 = frontier_phi_63_64_ladder;
            _3240 = frontier_phi_63_64_ladder_2;
            _3242 = frontier_phi_63_64_ladder_1;
        }
        float _3247 = isnan(1.0) ? _1010 : (isnan(_1010) ? 1.0 : min(_1010, 1.0));
        _3045 = (_3247 * _3238) + _2576;
        _3047 = (_3247 * _3240) + _2578;
        _3049 = (_3247 * _3242) + _2580;
        _3051 = ((_3232 * 0.039999999105930328369140625) * _3247) + _2899;
        _3053 = ((_3234 * 0.039999999105930328369140625) * _3247) + _2901;
        _3055 = ((_3236 * 0.039999999105930328369140625) * _3247) + _2903;
    }
    else
    {
        _3045 = _2576;
        _3047 = _2578;
        _3049 = _2580;
        _3051 = _2899;
        _3053 = _2901;
        _3055 = _2903;
    }
    float _5119 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _5130 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _5141 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _3072 = ((isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0))) * (_3045 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1010))) + ((_3051 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1846)) * cbPerFrame._m0[3u].x);
    float _3073 = ((isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0))) * (_3047 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1010))) + ((_3053 + ((isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0))) * _1846)) * cbPerFrame._m0[3u].x);
    float _3074 = ((isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0))) * (_3049 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1010))) + ((_3055 + ((isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0))) * _1846)) * cbPerFrame._m0[3u].x);
    uint _3075 = _283 + 6u;
    float _3083 = _947 / cbSceneParam._m0[86u].x;
    float _3084 = _948 / cbSceneParam._m0[86u].y;
    vec4 _3098 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3083, _3084, (log2((isnan(cbSceneParam._m0[77u].w) ? _869 : (isnan(_869) ? cbSceneParam._m0[77u].w : min(_869, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3100 = _3098.x;
    float _3101 = _3098.y;
    float _3102 = _3098.z;
    float _3103 = _3098.w;
    float _3174;
    float _3176;
    float _3178;
    float _3180;
    if (_869 > cbSceneParam._m0[78u].w)
    {
        float _3137 = isnan(_869) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _869 : min(cbSceneParam._m0[80u].w, _869));
        float _3138 = _3137 / _869;
        float _3149 = _3138 * _920;
        float _3150 = _921 * _3138;
        float _3151 = (-0.0) - _3150;
        float _3152 = _3138 * _922;
        float _3154 = (cbSceneParam._m0[77u].w * _3151) / _3137;
        float _3155 = _3154 + cbSceneParam._m0[79u].w;
        float _3156 = cbSceneParam._m0[79u].w - _3150;
        float _3162 = sqrt(((_3149 * _3149) + (_3150 * _3150)) + (_3152 * _3152));
        float _3165 = (1.0 - (cbSceneParam._m0[77u].w / _3137)) * _3162;
        float _3170 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3172 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3349;
        if (abs((_3151 - _3154) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3349 = ((((_3155 > 0.0) ? exp2(_3170 * _3155) : (2.0 - exp2(_3172 * _3155))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3165;
        }
        else
        {
            float _3293 = 1.0 / cbSceneParam._m0[80u].x;
            float _3294 = isnan(_3156) ? _3155 : (isnan(_3155) ? _3156 : max(_3155, _3156));
            float _3295 = isnan(_3156) ? _3155 : (isnan(_3155) ? _3156 : min(_3155, _3156));
            float _3304 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : min(_3294, 0.0));
            float _3305 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : min(_3295, 0.0));
            _3349 = ((abs(_3162 / _3151) * cbSceneParam._m0[80u].y) * ((((_3304 - _3305) * 2.0) - ((exp2(_3170 * (isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0)))) - exp2(_3170 * (isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0))))) * _3293)) - ((exp2(_3172 * _3304) - exp2(_3172 * _3305)) * _3293))) + (_3165 * cbSceneParam._m0[80u].z);
        }
        vec4 _3351 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3083, _3084, 1.0), 0.0);
        float _3360 = exp2((_3349 * (-1.44269502162933349609375)) * (1.0 - _3351.w));
        float _3361 = log2(_3360);
        float _3377 = log2(_3103);
        _3174 = (exp2(_3377 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3361 * cbSceneParam._m0[78u].x)) * _3351.x) / cbSceneParam._m0[78u].x)) + _3100;
        _3176 = (exp2(_3377 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3361 * cbSceneParam._m0[78u].y)) * _3351.y) / cbSceneParam._m0[78u].y)) + _3101;
        _3178 = (exp2(_3377 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3361 * cbSceneParam._m0[78u].z)) * _3351.z) / cbSceneParam._m0[78u].z)) + _3102;
        _3180 = _3360 * _3103;
    }
    else
    {
        _3174 = _3100;
        _3176 = _3101;
        _3178 = _3102;
        _3180 = _3103;
    }
    bool _3387;
    vec4 _3190;
    vec4 _3212;
    float _3214;
    float _3218;
    float _3219;
    float _3220;
    float _3221;
    bool _3231;
    for (;;)
    {
        _3190 = cbMatDynParam._m0[0u];
        float _3192 = roundEven(_3190.y);
        bool _3193 = _3192 == 3.0;
        float _3194 = log2(_3180);
        float _3201 = exp2(_3194 * cbSceneParam._m0[78u].x) * _3072;
        float _3202 = exp2(_3194 * cbSceneParam._m0[78u].y) * _3073;
        float _3203 = exp2(_3194 * cbSceneParam._m0[78u].z) * _3074;
        float _3210 = _936 + (-0.5);
        _3212 = cbMtdParam._m0[1u];
        _3214 = _3212.y * _3210;
        float _3217 = (_3192 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3218 = _3217 * (_3193 ? _3201 : (_3201 + (cbSceneParam._m0[72u].w * _3174)));
        _3219 = _3217 * (_3193 ? _3202 : (_3202 + (cbSceneParam._m0[72u].w * _3176)));
        _3220 = _3217 * (_3193 ? _3203 : (_3203 + (cbSceneParam._m0[72u].w * _3178)));
        _3221 = _3210 * 0.999000012874603271484375;
        _3231 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3231)
        {
            if ((cbInstanceData._m0[_283 + 7u].x + _3221) < 0.5)
            {
                _3387 = true;
                break;
            }
        }
        uint _3328 = _985 + uint(_3190.w);
        if ((cbInstanceData._m0[_3328].w < 1.0) && ((cbInstanceData._m0[_3328].w + _3221) < 0.5))
        {
            _3387 = true;
            break;
        }
        if ((_3214 + 1.0) < _3212.x)
        {
            _3387 = true;
            break;
        }
        _3387 = false;
        break;
    }
    float _3591;
    if (_3387)
    {
        discard_state = true;
        _3591 = 0.0;
    }
    else
    {
        _3591 = cbInstanceData._m0[_3075].w;
    }
    SV_Target.x = _3218;
    SV_Target.y = _3219;
    SV_Target.z = _3220;
    SV_Target.w = _3591;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3075].w;
    discard_exit();
}


