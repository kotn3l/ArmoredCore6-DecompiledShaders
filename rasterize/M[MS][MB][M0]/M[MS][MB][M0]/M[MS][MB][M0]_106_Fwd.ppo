#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1314;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _233 = _232 * _224;
    float _234 = _232 * _225;
    float _235 = _232 * _226;
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = _246 * TANGENT.x;
    float _248 = _246 * TANGENT.y;
    float _249 = _246 * TANGENT.z;
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3619 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3630 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3641 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _290) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _291) + cbTextureTilingScale._m0[13u].w));
    vec4 _328 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _333 = _328.x * cbMtdParam._m0[11u].x;
    float _334 = _328.y * cbMtdParam._m0[11u].y;
    float _335 = _328.z * cbMtdParam._m0[11u].z;
    vec4 _354 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _290) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _291) + cbTextureTilingScale._m0[5u].w));
    vec4 _390 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _392 = _390.x;
    float _402 = dot(vec4(_392, _390.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _419 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_392 - _402) * cbMtdParam._m0[24u].x) + _402) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3652 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _427 = (_420 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _428 = (_420 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _429 = (_420 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    float _433 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _304.x) * _427;
    float _436 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _304.y) * _428;
    float _439 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _304.z) * _429;
    float _446 = ((_427 - _433) * (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) + _433;
    float _447 = ((_428 - _436) * (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) + _436;
    float _448 = ((_429 - _439) * (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) + _439;
    vec4 _466 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _290) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _291) + cbTextureTilingScale._m0[20u].w));
    vec4 _493 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    vec4 _510 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _512 = _510.x;
    float _513 = _510.y;
    float _514 = _510.z;
    float _523 = ((_493.z - _514) * _420) + _514;
    float _526 = ((((_493.x - _512) * _420) + _512) * 2.0) + (-1.0);
    float _527 = ((((_493.y - _513) * _420) + _513) * 2.0) + (-1.0);
    float _528 = dot(vec2(_526, _527), vec2(_526, _527));
    float _3663 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _533 = sqrt(1.0 - (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))));
    float _536 = _526 + ((((_466.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _537 = _527 + ((((_466.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _540 = fma(_533, _240, fma(_537, _247, _536 * _233));
    float _543 = fma(_533, _241, fma(_537, _248, _536 * _234));
    float _546 = fma(_533, _242, fma(_537, _249, _536 * _235));
    float _550 = inversesqrt(dot(vec3(_540, _543, _546), vec3(_540, _543, _546)));
    vec4 _566 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _594 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _290) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _291) + cbTextureTilingScale._m0[11u].w));
    float _596 = _594.x;
    float _597 = 1.0 - _596;
    float _603 = (cbMtdParam._m0[19u].x + dot(vec4(_550 * _540, _550 * _543, _550 * _546, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_596 - _597) * cbMtdParam._m0[24u].z) + _597) * cbMtdParam._m0[21u].z);
    float _3674 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _604 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _606 = (-0.0) - cbMtdParam._m0[24u].y;
    float _608 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _609 = isnan(1.0) ? _608 : (isnan(_608) ? 1.0 : min(_608, 1.0));
    float _616 = _604 - ((_604 * TEXCOORD_8.x) * _609);
    float _617 = _604 - ((_604 * TEXCOORD_8.y) * _609);
    float _618 = _604 - ((_604 * TEXCOORD_8.z) * _609);
    float _625 = (_616 * (cbMtdParam._m0[17u].x - _446)) + _446;
    float _626 = (_617 * (cbMtdParam._m0[17u].y - _447)) + _447;
    float _627 = (_618 * (cbMtdParam._m0[17u].z - _448)) + _448;
    vec4 _639 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _641 = _639.x;
    float _642 = 1.0 - _641;
    float _668 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_641 - _642) * cbMtdParam._m0[24u].w) + _642) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3695 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _669 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _677 = ((((cbMtdParam._m0[10u].x - _625) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _669) + _625;
    float _678 = ((((cbMtdParam._m0[10u].y - _626) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _669) + _626;
    float _679 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _627)) * _669) + _627;
    float _684 = (((_466.z - _523) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _523;
    vec4 _698 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _290) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _291) + cbTextureTilingScale._m0[15u].w));
    float _705 = (_698.x * 2.0) + (-1.0);
    float _706 = (_698.y * 2.0) + (-1.0);
    float _707 = dot(vec2(_705, _706), vec2(_705, _706));
    float _3706 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _715 = ((_698.z - _684) * _616) + _684;
    float _718 = ((cbMtdParam._m0[23u].y - _715) * _669) + _715;
    vec4 _737 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _743 = (_737.x * 2.0) + (-1.0);
    float _744 = (_737.y * 2.0) + (-1.0);
    float _745 = dot(vec2(_743, _744), vec2(_743, _744));
    float _3717 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _760 = ((sqrt(1.0 - (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0)))) - _533) * _618) + _533;
    float _763 = (((_705 - _536) * _616) + _536) + (cbMtdParam._m0[21u].x * _536);
    float _764 = (((_706 - _537) * _617) + _537) + (cbMtdParam._m0[21u].x * _537);
    float _775 = (((_743 - _763) + (_763 * cbMtdParam._m0[22u].z)) * _669) + _763;
    float _776 = (((_744 - _764) + (_764 * cbMtdParam._m0[22u].z)) * _669) + _764;
    float _777 = (_669 * (sqrt(1.0 - (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0)))) - _760)) + _760;
    float _779 = cbMtdParam._m0[22u].x + _566.w;
    float _782 = fma(_777, _240, fma(_776, _247, _775 * _233));
    float _785 = fma(_777, _241, fma(_776, _248, _775 * _234));
    float _788 = fma(_777, _242, fma(_776, _249, _775 * _235));
    float _792 = inversesqrt(dot(vec3(_782, _785, _788), vec3(_782, _785, _788)));
    float _793 = _792 * _782;
    float _794 = _792 * _785;
    float _795 = _792 * _788;
    float _3728 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _796 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _3750 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _3761 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _3772 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _814 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _865 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _855);
    float _866 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _855);
    float _867 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _855);
    float _871 = inversesqrt(dot(vec3(_865, _866, _867), vec3(_865, _866, _867)));
    float _872 = _865 * _871;
    float _873 = _866 * _871;
    float _874 = _867 * _871;
    float _880 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _881 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _899 = fma(_795, cbSceneParam._m0[5u].z, fma(_794, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _793));
    float _902 = fma(_795, cbSceneParam._m0[6u].z, fma(_794, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _793));
    float _905 = fma(_795, cbSceneParam._m0[7u].z, fma(_794, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _793));
    uint _919 = (_271 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _925 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * cbInstanceData._m0[_919].x;
    float _926 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * cbInstanceData._m0[_919].y;
    float _927 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) * cbInstanceData._m0[_919].z;
    float _3783 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    vec4 _939 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _880, cbSceneParam._m0[86u].y * _881));
    float _943 = ((isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * TEXCOORD_5.w) * _939.x;
    float _944 = dot(vec3(_793, _794, _795), vec3(_872, _873, _874));
    float _947 = _944 * 2.0;
    float _951 = (_947 * _793) - _872;
    float _952 = (_947 * _794) - _873;
    float _953 = (_947 * _795) - _874;
    float _957 = abs(dot(vec3(_872, _873, _874), vec3(_793, _794, _795)));
    float _3816 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _959 = sqrt(_796);
    float _972 = exp2((_959 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_959 * 3.0));
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1313;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1038 = fma(_1012, cbModelParam._m0[26u].z, fma(_1008, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1004));
        float _1042 = fma(_1012, cbModelParam._m0[27u].z, fma(_1008, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1004));
        float _1046 = fma(_1012, cbModelParam._m0[28u].z, fma(_1008, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1004));
        float _1071 = _1004 + _793;
        float _1072 = _1008 + _794;
        float _1073 = _1012 + _795;
        float _1083 = fma(_1073, cbModelParam._m0[26u].z, fma(_1072, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1071)) - _1038;
        float _1084 = fma(_1073, cbModelParam._m0[27u].z, fma(_1072, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1071)) - _1042;
        float _1085 = fma(_1073, cbModelParam._m0[28u].z, fma(_1072, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1071)) - _1046;
        float _1089 = inversesqrt(dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085)));
        float _1102 = ((_1089 * _1083) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1038 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1089 * _1084) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1042 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1089 * _1085) / cbModelParam._m0[34u].z) + ((((((_1046 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        float _1141 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1107.x + (-0.5));
        float _1143 = _1141 * (_1107.y + (-0.5));
        float _1144 = _1141 * (_1107.z + (-0.5));
        float _1151 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1114.x + (-0.5));
        float _1153 = _1151 * (_1114.y + (-0.5));
        float _1154 = _1151 * (_1114.z + (-0.5));
        float _1161 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1121.x + (-0.5));
        float _1163 = _1161 * (_1121.y + (-0.5));
        float _1164 = _1161 * (_1121.z + (-0.5));
        float _1171 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1128.x + (-0.5));
        float _1173 = _1171 * (_1128.y + (-0.5));
        float _1174 = _1171 * (_1128.z + (-0.5));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = _1142 * 0.5;
        float _1179 = _1152 * 0.5;
        float _1180 = _1162 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1195 = (dot(vec3(_793, _794, _795), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1205 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3864 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1207 + 1.0))) + _1212) * _1175;
        float _1222 = _1143 * 0.5;
        float _1223 = _1153 * 0.5;
        float _1224 = _1163 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_793, _794, _795), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3897 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1249 + 1.0))) + _1254) * _1176;
        float _1264 = _1144 * 0.5;
        float _1265 = _1154 * 0.5;
        float _1266 = _1164 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_793, _794, _795), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _3930 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1291 + 1.0))) + _1296) * _1177;
        _1313 = _1144;
        _1315 = _1143;
        _1316 = _1142;
        _1317 = _1154;
        _1318 = _1153;
        _1319 = _1152;
        _1320 = _1164;
        _1321 = _1163;
        _1322 = _1162;
        _1323 = _1177;
        _1324 = _1176;
        _1325 = _1175;
        _1326 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
        _1327 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
    }
    else
    {
        _1313 = _1314;
        _1315 = _1314;
        _1316 = _1314;
        _1317 = _1314;
        _1318 = _1314;
        _1319 = _1314;
        _1320 = _1314;
        _1321 = _1314;
        _1322 = _1314;
        _1323 = _1314;
        _1324 = _1314;
        _1325 = _1314;
        _1326 = 0.0;
        _1327 = 0.0;
        _1328 = 0.0;
    }
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1353 = fma(_1012, cbModelParam._m0[30u].z, fma(_1008, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1004));
        float _1357 = fma(_1012, cbModelParam._m0[31u].z, fma(_1008, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1004));
        float _1361 = fma(_1012, cbModelParam._m0[32u].z, fma(_1008, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1004));
        float _1384 = _1004 + _793;
        float _1385 = _1008 + _794;
        float _1386 = _1012 + _795;
        float _1396 = fma(_1386, cbModelParam._m0[30u].z, fma(_1385, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1384)) - _1353;
        float _1397 = fma(_1386, cbModelParam._m0[31u].z, fma(_1385, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1384)) - _1357;
        float _1398 = fma(_1386, cbModelParam._m0[32u].z, fma(_1385, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1384)) - _1361;
        float _1402 = inversesqrt(dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398)));
        float _1415 = ((_1402 * _1396) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1353 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1416 = ((_1402 * _1397) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1357 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1417 = ((_1402 * _1398) / cbModelParam._m0[35u].z) + ((((((_1361 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1415, _1416, _1417), 0.0);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1415, _1416, _1417), 0.0);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1415, _1416, _1417), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1415, _1416, _1417), 0.0);
        float _1452 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1419.x + (-0.5));
        float _1454 = _1452 * (_1419.y + (-0.5));
        float _1455 = _1452 * (_1419.z + (-0.5));
        float _1462 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1426.x + (-0.5));
        float _1464 = _1462 * (_1426.y + (-0.5));
        float _1465 = _1462 * (_1426.z + (-0.5));
        float _1472 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1433.x + (-0.5));
        float _1474 = _1472 * (_1433.y + (-0.5));
        float _1475 = _1472 * (_1433.z + (-0.5));
        float _1482 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1440.x + (-0.5));
        float _1484 = _1482 * (_1440.y + (-0.5));
        float _1485 = _1482 * (_1440.z + (-0.5));
        float _1486 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1489 = _1453 * 0.5;
        float _1490 = _1463 * 0.5;
        float _1491 = _1473 * 0.5;
        float _1492 = dot(vec3(_1489, _1490, _1491), vec3(_1489, _1490, _1491));
        float _1497 = (_1492 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1492);
        float _1505 = (dot(vec3(_793, _794, _795), vec3(_1497 * _1489, _1497 * _1490, _1497 * _1491)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1514 = sqrt(((_1490 * _1490) + (_1489 * _1489)) + (_1491 * _1491)) / (_1486 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1516 = _1515 * 2.0;
        float _1520 = (1.0 - _1515) / (_1515 + 1.0);
        float _3993 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1530 = ((((1.0 - _1521) * (_1516 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1516 + 1.0))) + _1521) * _1486;
        float _1531 = _1454 * 0.5;
        float _1532 = _1464 * 0.5;
        float _1533 = _1474 * 0.5;
        float _1534 = dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533));
        float _1539 = (_1534 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1534);
        float _1547 = (dot(vec3(_793, _794, _795), vec3(_1539 * _1531, _1539 * _1532, _1539 * _1533)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1556 = sqrt(((_1532 * _1532) + (_1531 * _1531)) + (_1533 * _1533)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1558 = _1557 * 2.0;
        float _1562 = (1.0 - _1557) / (_1557 + 1.0);
        float _4026 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1572 = ((((1.0 - _1563) * (_1558 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1558 + 1.0))) + _1563) * _1487;
        float _1573 = _1455 * 0.5;
        float _1574 = _1465 * 0.5;
        float _1575 = _1475 * 0.5;
        float _1576 = dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575));
        float _1581 = (_1576 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1576);
        float _1589 = (dot(vec3(_793, _794, _795), vec3(_1581 * _1573, _1581 * _1574, _1581 * _1575)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1598 = sqrt(((_1574 * _1574) + (_1573 * _1573)) + (_1575 * _1575)) / (_1488 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1600 = _1599 * 2.0;
        float _1604 = (1.0 - _1599) / (_1599 + 1.0);
        float _4059 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1614 = ((((1.0 - _1605) * (_1600 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1600 + 1.0))) + _1605) * _1488;
        _1622 = _1455;
        _1623 = _1454;
        _1624 = _1453;
        _1625 = _1465;
        _1626 = _1464;
        _1627 = _1463;
        _1628 = _1475;
        _1629 = _1474;
        _1630 = _1473;
        _1631 = _1488;
        _1632 = _1487;
        _1633 = _1486;
        _1634 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)));
        _1635 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)));
        _1636 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)));
    }
    else
    {
        _1622 = _1314;
        _1623 = _1314;
        _1624 = _1314;
        _1625 = _1314;
        _1626 = _1314;
        _1627 = _1314;
        _1628 = _1314;
        _1629 = _1314;
        _1630 = _1314;
        _1631 = _1314;
        _1632 = _1314;
        _1633 = _1314;
        _1634 = 0.0;
        _1635 = 0.0;
        _1636 = 0.0;
    }
    float _1646 = (cbModelParam._m0[1u].x * (_1634 - _1326)) + _1326;
    float _1647 = (cbModelParam._m0[1u].x * (_1635 - _1327)) + _1327;
    float _1648 = (cbModelParam._m0[1u].x * (_1636 - _1328)) + _1328;
    float _1669 = fma(_1648, cbSceneParam._m0[89u].z, fma(_1647, cbSceneParam._m0[89u].y, _1646 * cbSceneParam._m0[89u].x));
    float _1672 = fma(_1648, cbSceneParam._m0[90u].z, fma(_1647, cbSceneParam._m0[90u].y, _1646 * cbSceneParam._m0[90u].x));
    float _1675 = fma(_1648, cbSceneParam._m0[91u].z, fma(_1647, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1646));
    float _1690 = _951 * 0.5;
    float _1691 = _952 * 0.5;
    float _1692 = _953 * 0.5;
    float _1693 = dot(vec4(_1690, _1691, _1692, 1.0), vec4(_1624, _1627, _1630, _1633));
    float _1696 = dot(vec4(_1690, _1691, _1692, 1.0), vec4(_1623, _1626, _1629, _1632));
    float _1699 = dot(vec4(_1690, _1691, _1692, 1.0), vec4(_1622, _1625, _1628, _1631));
    float _1733;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1706 = dot(vec4(_1690, _1691, _1692, 1.0), vec4(_1313, _1317, _1320, _1323));
        float _1710 = dot(vec4(_1690, _1691, _1692, 1.0), vec4(_1315, _1318, _1321, _1324));
        float _1714 = dot(vec4(_1690, _1691, _1692, 1.0), vec4(_1316, _1319, _1322, _1325));
        float _1721 = dot(vec4(cbModelParam._m0[39u]), vec4(_1690, _1691, _1692, 1.0));
        _1733 = dot(vec3(isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1721) ? 0.0 : (isnan(0.0) ? _1721 : max(0.0, _1721))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1733 = 1.0;
    }
    float _1744;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1735 = dot(vec4(cbModelParam._m0[40u]), vec4(_1690, _1691, _1692, 1.0));
        _1744 = dot(vec3(isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1735) ? 0.0 : (isnan(0.0) ? _1735 : max(0.0, _1735))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1744 = 1.0;
    }
    float _1748 = (_1744 * cbModelParam._m0[1u].x) + (_1733 * (1.0 - cbModelParam._m0[1u].x));
    float _1758 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _796);
    float _1759 = isnan(_1758) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1758 : min(cbModelParam._m0[25u].z, _1758));
    float _1840;
    float _1842;
    float _1844;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1807 = fma(_1012, cbModelParam._m0[13u].z, fma(_1008, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1004)) + cbModelParam._m0[13u].w;
        float _1811 = fma(_1012, cbModelParam._m0[14u].z, fma(_1008, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1004)) + cbModelParam._m0[14u].w;
        float _1815 = fma(_1012, cbModelParam._m0[15u].z, fma(_1008, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1004)) + cbModelParam._m0[15u].w;
        float _1818 = fma(_953, cbModelParam._m0[13u].z, fma(_952, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _951));
        float _1821 = fma(_953, cbModelParam._m0[14u].z, fma(_952, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _951));
        float _1824 = fma(_953, cbModelParam._m0[15u].z, fma(_952, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _951));
        float _1852;
        if (_1818 > 0.0)
        {
            _1852 = abs((1.0 - _1807) / _1818);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1807 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1852 = frontier_phi_14_12_ladder;
        }
        float _2053;
        if (_1821 > 0.0)
        {
            _2053 = abs((1.0 - _1811) / _1821);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1811 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2053 = frontier_phi_23_19_ladder;
        }
        float _2296;
        if (_1824 > 0.0)
        {
            _2296 = abs((1.0 - _1815) / _1824);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1815 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2296 = frontier_phi_35_30_ladder;
        }
        float _2298 = isnan(_2053) ? _1852 : (isnan(_1852) ? _2053 : min(_1852, _2053));
        float _2299 = isnan(_2296) ? _2298 : (isnan(_2298) ? _2296 : min(_2298, _2296));
        float _2303 = (_2299 * _1818) + _1807;
        float _2304 = (_2299 * _1821) + _1811;
        float _2305 = (_2299 * _1824) + _1815;
        float _2306 = _2299 * 9.9999997473787516355514526367188e-05;
        float _2308 = (-1.0) - _2306;
        float _2310 = _2306 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2305 > _2310) || ((_2305 < _2308) || ((_2304 > _2310) || ((_2304 < _2308) || ((_2303 < _2308) || (_2303 > _2310))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2429 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2305, cbModelParam._m0[9u].z, fma(_2304, cbModelParam._m0[9u].y, _2303 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2305, cbModelParam._m0[10u].z, fma(_2304, cbModelParam._m0[10u].y, _2303 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2305, cbModelParam._m0[11u].z, fma(_2304, cbModelParam._m0[11u].y, _2303 * cbModelParam._m0[11u].x))), _1759);
            frontier_phi_13_35_ladder = _2429.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2429.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2429.x * cbModelParam._m0[1u].y;
        }
        _1840 = frontier_phi_13_35_ladder_2;
        _1842 = frontier_phi_13_35_ladder_1;
        _1844 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1828 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_951, _952, _953), _1759);
        _1840 = _1828.x * cbModelParam._m0[1u].y;
        _1842 = _1828.y * cbModelParam._m0[1u].y;
        _1844 = _1828.z * cbModelParam._m0[1u].y;
    }
    float _1848 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _796);
    float _1849 = isnan(_1848) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1848 : min(cbModelParam._m0[25u].w, _1848));
    float _1939;
    float _1941;
    float _1943;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1903 = fma(_1012, cbModelParam._m0[21u].z, fma(_1008, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1004)) + cbModelParam._m0[21u].w;
        float _1907 = fma(_1012, cbModelParam._m0[22u].z, fma(_1008, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1004)) + cbModelParam._m0[22u].w;
        float _1911 = fma(_1012, cbModelParam._m0[23u].z, fma(_1008, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1004)) + cbModelParam._m0[23u].w;
        float _1914 = fma(_953, cbModelParam._m0[21u].z, fma(_952, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _951));
        float _1917 = fma(_953, cbModelParam._m0[22u].z, fma(_952, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _951));
        float _1920 = fma(_953, cbModelParam._m0[23u].z, fma(_952, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _951));
        float _2058;
        if (_1914 > 0.0)
        {
            _2058 = abs((1.0 - _1903) / _1914);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1903 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2058 = frontier_phi_25_21_ladder;
        }
        float _2323;
        if (_1917 > 0.0)
        {
            _2323 = abs((1.0 - _1907) / _1917);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1907 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2323 = frontier_phi_37_32_ladder;
        }
        float _2528;
        if (_1920 > 0.0)
        {
            _2528 = abs((1.0 - _1911) / _1920);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1911 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2528 = frontier_phi_46_43_ladder;
        }
        float _2530 = isnan(_2323) ? _2058 : (isnan(_2058) ? _2323 : min(_2058, _2323));
        float _2531 = isnan(_2528) ? _2530 : (isnan(_2530) ? _2528 : min(_2530, _2528));
        float _2535 = (_2531 * _1914) + _1903;
        float _2536 = (_2531 * _1917) + _1907;
        float _2537 = (_2531 * _1920) + _1911;
        float _2538 = _2531 * 9.9999997473787516355514526367188e-05;
        float _2539 = (-1.0) - _2538;
        float _2541 = _2538 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2537 > _2541) || ((_2537 < _2539) || ((_2536 > _2541) || ((_2536 < _2539) || ((_2535 < _2539) || (_2535 > _2541))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2736 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2537, cbModelParam._m0[17u].z, fma(_2536, cbModelParam._m0[17u].y, _2535 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2537, cbModelParam._m0[18u].z, fma(_2536, cbModelParam._m0[18u].y, _2535 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2537, cbModelParam._m0[19u].z, fma(_2536, cbModelParam._m0[19u].y, _2535 * cbModelParam._m0[19u].x))), _1849);
            frontier_phi_22_46_ladder = _2736.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2736.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2736.x * cbModelParam._m0[1u].z;
        }
        _1939 = frontier_phi_22_46_ladder_2;
        _1941 = frontier_phi_22_46_ladder_1;
        _1943 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1923 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_951, _952, _953), _1849);
        _1939 = _1923.x * cbModelParam._m0[1u].z;
        _1941 = _1923.y * cbModelParam._m0[1u].z;
        _1943 = _1923.z * cbModelParam._m0[1u].z;
    }
    float _1955 = ((((1.0 - _972) * ((_959 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_972 * _959)) * _943;
    float _1956 = _1955 * ((cbModelParam._m0[1u].w * (_1939 - _1840)) + _1840);
    float _1957 = _1955 * ((cbModelParam._m0[1u].w * (_1941 - _1842)) + _1842);
    float _1958 = _1955 * ((cbModelParam._m0[1u].w * (_1943 - _1844)) + _1844);
    float _1961 = fma(_1958, cbSceneParam._m0[89u].z, fma(_1957, cbSceneParam._m0[89u].y, _1956 * cbSceneParam._m0[89u].x));
    float _1964 = fma(_1958, cbSceneParam._m0[90u].z, fma(_1957, cbSceneParam._m0[90u].y, _1956 * cbSceneParam._m0[90u].x));
    float _1967 = fma(_1958, cbSceneParam._m0[91u].z, fma(_1957, cbSceneParam._m0[91u].y, _1956 * cbSceneParam._m0[91u].x));
    uvec4 _1977 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _1979 = _1977.x * 14u;
    uint _1980 = _1979 + 13u;
    float _1987 = _943 + (-1.0);
    float _1992 = (cbLight._m0[_1980].x * _1987) + 1.0;
    float _1993 = (cbLight._m0[_1980].y * _1987) + 1.0;
    float _1994 = (cbLight._m0[_1980].z * _1987) + 1.0;
    float _1995 = (cbLight._m0[_1980].w * _1987) + 1.0;
    uint _1996 = _1979 + 5u;
    float _2002 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
    uint _2006 = _1979 + 4u;
    float _2012 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
    uint _2016 = _1979 | 1u;
    float _2027 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_793, _794, _795));
    float _2030 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_793, _794, _795));
    float _4195 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _4206 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2035 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * 0.3183098733425140380859375;
    float _2037 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * 0.3183098733425140380859375;
    float _2044 = ((cbLight._m0[_1996].x * _2002) * _2037) + ((cbLight._m0[_2006].x * _2012) * _2035);
    float _2045 = ((_2002 * cbLight._m0[_1996].y) * _2037) + ((_2012 * cbLight._m0[_2006].y) * _2035);
    float _2046 = ((_2002 * cbLight._m0[_1996].z) * _2037) + ((_2012 * cbLight._m0[_2006].z) * _2035);
    uvec4 _2050 = floatBitsToUint(cbLight._m0[_1979 + 12u]);
    bool _2052 = _2050.x == 0u;
    float _2063;
    float _2065;
    float _2067;
    if (_2052)
    {
        _2063 = _2044;
        _2065 = _2045;
        _2067 = _2046;
    }
    else
    {
        uint _2071 = _1979 + 6u;
        float _2087 = (dot(vec3(cbLight._m0[_1979 + 2u].xyz), vec3(_793, _794, _795)) * 0.5) + 0.5;
        float _2088 = _2087 * _2087;
        float _4217 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2089 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2090 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2063 = (((cbLight._m0[_2071].x * 0.3183098733425140380859375) * _2089) * _2090) + _2044;
        _2065 = (((cbLight._m0[_2071].y * 0.3183098733425140380859375) * _2089) * _2090) + _2045;
        _2067 = (((cbLight._m0[_2071].z * 0.3183098733425140380859375) * _2089) * _2090) + _2046;
    }
    bool _2070 = _2050.y == 0u;
    float _2108;
    float _2110;
    float _2112;
    if (_2070)
    {
        _2108 = _2063;
        _2110 = _2065;
        _2112 = _2067;
    }
    else
    {
        uint _2267 = _1979 + 7u;
        float _2283 = (dot(vec3(cbLight._m0[_1979 + 3u].xyz), vec3(_793, _794, _795)) * 0.5) + 0.5;
        float _2284 = _2283 * _2283;
        float _4233 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2285 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2286 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
        _2108 = (((cbLight._m0[_2267].x * 0.3183098733425140380859375) * _2285) * _2286) + _2063;
        _2110 = (((cbLight._m0[_2267].y * 0.3183098733425140380859375) * _2285) * _2286) + _2065;
        _2112 = (((cbLight._m0[_2267].z * 0.3183098733425140380859375) * _2285) * _2286) + _2067;
    }
    uint _2115 = _1979 + 8u;
    float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1979].w)) * _796) * 0.949999988079071044921875);
    float _2129 = _2128 * _2128;
    float _2130 = cbLight._m0[_1979].x + _872;
    float _2131 = cbLight._m0[_1979].y + _873;
    float _2132 = cbLight._m0[_1979].z + _874;
    float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
    float _2137 = _2136 * _2130;
    float _2138 = _2136 * _2131;
    float _2139 = _2136 * _2132;
    float _2140 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_1979].xyz));
    float _4249 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _4260 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _2144 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _2145 = dot(vec3(_793, _794, _795), vec3(_2137, _2138, _2139));
    float _4271 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _2149 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_2137, _2138, _2139));
    float _4282 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2153 = _2129 * _2129;
    float _2157 = ((_2148 * _2148) * (_2153 + (-1.0))) + 1.0;
    float _2168 = (exp2(log2(1.0 - (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2169 = 1.0 - _2129;
    float _2180 = (0.5 / (((_2144 * ((_2143 * _2169) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2169) + _2129) * _2143))) * _2143;
    float _4293 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2182 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2153 / ((_2157 * _2157) * 3.141590118408203125));
    uint _2193 = _1979 + 9u;
    float _2204 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2016].w)) * _796) * 0.949999988079071044921875);
    float _2205 = _2204 * _2204;
    float _2206 = cbLight._m0[_2016].x + _872;
    float _2207 = cbLight._m0[_2016].y + _873;
    float _2208 = cbLight._m0[_2016].z + _874;
    float _2212 = inversesqrt(dot(vec3(_2206, _2207, _2208), vec3(_2206, _2207, _2208)));
    float _2213 = _2212 * _2206;
    float _2214 = _2212 * _2207;
    float _2215 = _2212 * _2208;
    float _2216 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2016].xyz));
    float _4304 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2219 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _2220 = dot(vec3(_793, _794, _795), vec3(_2213, _2214, _2215));
    float _4315 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2223 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2224 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_2213, _2214, _2215));
    float _4326 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2228 = _2205 * _2205;
    float _2232 = ((_2223 * _2223) * (_2228 + (-1.0))) + 1.0;
    float _2241 = (exp2(log2(1.0 - (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2242 = 1.0 - _2205;
    float _2252 = (0.5 / (((_2144 * ((_2219 * _2242) + _2205)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2242) + _2205) * _2219))) * _2219;
    float _4337 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2254 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2228 / ((_2232 * _2232) * 3.141590118408203125));
    float _2264 = (((_2241 * cbLight._m0[_2193].x) * _2254) * _2002) + (((_2168 * cbLight._m0[_2115].x) * _2182) * _2012);
    float _2265 = (((_2241 * cbLight._m0[_2193].y) * _2254) * _2002) + (((_2168 * cbLight._m0[_2115].y) * _2182) * _2012);
    float _2266 = (((_2241 * cbLight._m0[_2193].z) * _2254) * _2002) + (((_2168 * cbLight._m0[_2115].z) * _2182) * _2012);
    float _2328;
    float _2330;
    float _2332;
    if (_2052)
    {
        _2328 = _2264;
        _2330 = _2265;
        _2332 = _2266;
    }
    else
    {
        uint _2334 = _1979 + 2u;
        uint _2338 = _1979 + 10u;
        float _2352 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2334].w)) * _796) * 0.949999988079071044921875);
        float _2353 = _2352 * _2352;
        float _2354 = cbLight._m0[_2334].x + _872;
        float _2355 = cbLight._m0[_2334].y + _873;
        float _2356 = cbLight._m0[_2334].z + _874;
        float _2360 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
        float _2361 = _2360 * _2354;
        float _2362 = _2360 * _2355;
        float _2363 = _2360 * _2356;
        float _2364 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2334].xyz));
        float _4348 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2367 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _2368 = dot(vec3(_793, _794, _795), vec3(_2361, _2362, _2363));
        float _4359 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2371 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2372 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_2361, _2362, _2363));
        float _4370 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2376 = _2353 * _2353;
        float _2380 = ((_2371 * _2371) * (_2376 + (-1.0))) + 1.0;
        float _2389 = (exp2(log2(1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2390 = 1.0 - _2353;
        float _2400 = (0.5 / (((_2144 * ((_2367 * _2390) + _2353)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2390) + _2353) * _2367))) * _2367;
        float _4381 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2402 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2376 / ((_2380 * _2380) * 3.141590118408203125));
        float _2403 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2328 = (((_2389 * cbLight._m0[_2338].x) * _2402) * _2403) + _2264;
        _2330 = (((_2389 * cbLight._m0[_2338].y) * _2402) * _2403) + _2265;
        _2332 = (((_2389 * cbLight._m0[_2338].z) * _2402) * _2403) + _2266;
    }
    float _2438;
    float _2440;
    float _2442;
    if (_2070)
    {
        _2438 = _2328;
        _2440 = _2330;
        _2442 = _2332;
    }
    else
    {
        uint _2449 = _1979 + 3u;
        uint _2453 = _1979 + 11u;
        float _2467 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2449].w)) * _796) * 0.949999988079071044921875);
        float _2468 = _2467 * _2467;
        float _2469 = cbLight._m0[_2449].x + _872;
        float _2470 = cbLight._m0[_2449].y + _873;
        float _2471 = cbLight._m0[_2449].z + _874;
        float _2475 = inversesqrt(dot(vec3(_2469, _2470, _2471), vec3(_2469, _2470, _2471)));
        float _2476 = _2475 * _2469;
        float _2477 = _2475 * _2470;
        float _2478 = _2475 * _2471;
        float _2479 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2449].xyz));
        float _4397 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2482 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2483 = dot(vec3(_793, _794, _795), vec3(_2476, _2477, _2478));
        float _4408 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2486 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2487 = dot(vec3(cbLight._m0[_2449].xyz), vec3(_2476, _2477, _2478));
        float _4419 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2491 = _2468 * _2468;
        float _2495 = ((_2486 * _2486) * (_2491 + (-1.0))) + 1.0;
        float _2504 = (exp2(log2(1.0 - (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2505 = 1.0 - _2468;
        float _2515 = (0.5 / (((_2144 * ((_2482 * _2505) + _2468)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2505) + _2468) * _2482))) * _2482;
        float _4430 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2517 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2491 / ((_2495 * _2495) * 3.141590118408203125));
        float _2518 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
        _2438 = (((_2504 * cbLight._m0[_2453].x) * _2517) * _2518) + _2328;
        _2440 = (((_2504 * cbLight._m0[_2453].y) * _2517) * _2518) + _2330;
        _2442 = (((_2504 * cbLight._m0[_2453].z) * _2517) * _2518) + _2332;
    }
    float _2653;
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    if (_1977.y == 0u)
    {
        float _2593 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2594 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2593;
        float _2595 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2593;
        float _2596 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2593;
        uvec4 _2608 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2609 = _2608.x;
        uint _2620 = uint((float(_2608.y) * floor(float(uint(cbSceneParam._m0[85u].y * _881) / _2609))) + floor(float(uint(cbSceneParam._m0[85u].x * _880) / _2609)));
        float _2630 = (log2(_2596 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2631 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        uint _2634 = uint(isnan(14.0) ? _2631 : (isnan(_2631) ? 14.0 : min(_2631, 14.0)));
        uvec4 _2639 = texelFetch(g_lightClusterGridBuffer, int(((_2634 << 2u) + (_2620 << 6u)) >> 2u));
        uint _2640 = _2639.x;
        uint _2641 = _2608.z;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        if (((((1u << ((_2641 >> 4u) & 15u)) + 4294967295u) & _2640) == 0u) || ((_2641 & 240u) == 0u))
        {
            _2741 = 0.0;
            _2743 = 0.0;
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
            _2751 = 0.0;
        }
        else
        {
            float _2742;
            float _2744;
            float _2746;
            float _2748;
            float _2750;
            float _2752;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            uint _2891 = 0u;
            uint _2900;
            bool _2901;
            for (;;)
            {
                _2900 = texelFetch(g_lightClassification, int((((_2634 << 5u) + (_2620 << 9u)) + (_2891 << 2u)) >> 2u)).x;
                _2901 = _2900 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2901)
                {
                    frontier_phi_61_pred = _2885;
                    frontier_phi_61_pred_1 = _2890;
                    frontier_phi_61_pred_2 = _2889;
                    frontier_phi_61_pred_3 = _2888;
                    frontier_phi_61_pred_4 = _2887;
                    frontier_phi_61_pred_5 = _2886;
                }
                else
                {
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    uint _3015;
                    _3009 = _2885;
                    _3010 = _2886;
                    _3011 = _2887;
                    _3012 = _2888;
                    _3013 = _2889;
                    _3014 = _2890;
                    _3015 = _2900;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    for (;;)
                    {
                        uint _3019 = uint(findLSB(_3015)) + (_2891 << 5u);
                        uint _3016 = (_3015 + 4294967295u) & _3015;
                        uint _3021 = _3019 * 48u;
                        vec4 _3035 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3021)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 3u)).x));
                        uint _3041 = (_3019 * 48u) + 4u;
                        vec4 _3054 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3041)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 3u)).x));
                        uint _3060 = (_3019 * 48u) + 8u;
                        vec3 _3071 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3060)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 2u)).x));
                        float _3075 = _3035.x - _2594;
                        float _3076 = _3035.y - _2595;
                        float _3077 = _3035.z - _2596;
                        float _3078 = dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077));
                        float _3081 = inversesqrt(_3078);
                        float _3082 = _3081 * _3075;
                        float _3083 = _3081 * _3076;
                        float _3084 = _3081 * _3077;
                        float _3085 = dot(vec3(_899, _902, _905), vec3(_3082, _3083, _3084));
                        float _3090 = 1.0 - (_3078 * _3035.w);
                        float _4456 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3091 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                        float _3092 = sqrt(_3078) * _3054.w;
                        float _3095 = 1.39999997615814208984375 / (_3092 + 1.39999997615814208984375);
                        float _3096 = _3095 * _3095;
                        float _3099 = ((1.0 - _3096) * _3085) + _3096;
                        float _3102 = _3092 * _3092;
                        float _3106 = ((isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0))) * _3091) / ((_3102 * 0.699999988079071044921875) + 1.0);
                        float _3110 = (-0.0) - _2594;
                        float _3111 = (-0.0) - _2595;
                        float _3112 = (-0.0) - _2596;
                        float _3116 = inversesqrt(dot(vec3(_3110, _3111, _3112), vec3(_3110, _3111, _3112)));
                        float _3117 = _3116 * _3110;
                        float _3118 = _3116 * _3111;
                        float _3119 = _3116 * _3112;
                        float _3127 = exp2(log2(1.0 / ((_3102 * 3.5) + 5.0)) * 0.25);
                        float _3128 = 1.0 - _959;
                        float _3135 = sqrt(1.0 - ((1.0 - (_3128 * _3128)) * (1.0 - (_3127 * _3127))));
                        float _3136 = _3135 * _3135;
                        float _3137 = _3136 * _3136;
                        float _3138 = _3117 + _3082;
                        float _3139 = _3118 + _3083;
                        float _3140 = _3119 + _3084;
                        float _3144 = inversesqrt(dot(vec3(_3138, _3139, _3140), vec3(_3138, _3139, _3140)));
                        float _3148 = dot(vec3(_899, _902, _905), vec3(_3117, _3118, _3119));
                        float _4472 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3151 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                        float _3152 = dot(vec3(_899, _902, _905), vec3(_3144 * _3138, _3144 * _3139, _3144 * _3140));
                        float _4483 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3155 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                        float _3159 = ((_3155 * _3155) * (_3137 + (-1.0))) + 1.0;
                        float _3160 = _3095 * _3136;
                        float _3161 = _3160 * _3160;
                        float _3164 = ((1.0 - _3161) * _3085) + _3161;
                        float _4494 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3165 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3166 = 1.0 - _3136;
                        float _3176 = (0.5 / (((_3165 * ((_3151 * _3166) + _3136)) + 9.9999999392252902907785028219223e-09) + (((_3165 * _3166) + _3136) * _3151))) * _3165;
                        float _4505 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3187 = (((_3137 * 3.1415927410125732421875) * (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) / ((_3159 * _3159) * ((_3102 * 2.1991131305694580078125) + 3.141590118408203125))) * _3091;
                        _2944 = (_3106 * _3054.x) + _3012;
                        _2945 = (_3106 * _3054.y) + _3013;
                        _2946 = (_3106 * _3054.z) + _3014;
                        _2941 = (_3187 * _3071.x) + _3009;
                        _2942 = (_3187 * _3071.y) + _3010;
                        _2943 = (_3187 * _3071.z) + _3011;
                        if (_3016 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3009 = _2941;
                            _3010 = _2942;
                            _3011 = _2943;
                            _3012 = _2944;
                            _3013 = _2945;
                            _3014 = _2946;
                            _3015 = _3016;
                        }
                    }
                    frontier_phi_61_pred = _2941;
                    frontier_phi_61_pred_1 = _2946;
                    frontier_phi_61_pred_2 = _2945;
                    frontier_phi_61_pred_3 = _2944;
                    frontier_phi_61_pred_4 = _2943;
                    frontier_phi_61_pred_5 = _2942;
                }
                _2742 = frontier_phi_61_pred;
                _2752 = frontier_phi_61_pred_1;
                _2750 = frontier_phi_61_pred_2;
                _2748 = frontier_phi_61_pred_3;
                _2746 = frontier_phi_61_pred_4;
                _2744 = frontier_phi_61_pred_5;
                uint _2892 = _2891 + 1u;
                if (_2892 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2885 = _2742;
                    _2886 = _2744;
                    _2887 = _2746;
                    _2888 = _2748;
                    _2889 = _2750;
                    _2890 = _2752;
                    _2891 = _2892;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2741 = _2742;
            _2743 = _2744;
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
            _2751 = _2752;
        }
        uvec4 _2755 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2756 = _2755.z;
        uint _2758 = (_2756 >> 8u) & 15u;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        if (((4294967295u << _2758) & _2640) == 0u)
        {
            _2853 = _2741;
            _2855 = _2743;
            _2857 = _2745;
            _2859 = _2747;
            _2861 = _2749;
            _2863 = _2751;
        }
        else
        {
            float _2878 = inversesqrt(dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596)));
            float _2879 = _2878 * _2594;
            float _2880 = _2878 * _2595;
            float _2881 = _2878 * _2596;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2758 < ((_2756 >> 12u) & 15u))
            {
                float _2854;
                float _2856;
                float _2858;
                float _2860;
                float _2862;
                float _2864;
                float _2992 = _2741;
                float _2993 = _2743;
                float _2994 = _2745;
                float _2995 = _2747;
                float _2996 = _2749;
                float _2997 = _2751;
                uint _2998 = _2758;
                uint _3007;
                bool _3008;
                for (;;)
                {
                    _3007 = texelFetch(g_lightClassification, int((((_2634 << 5u) + (_2620 << 9u)) + (_2998 << 2u)) >> 2u)).x;
                    _3008 = _3007 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3008)
                    {
                        frontier_phi_67_pred = _2995;
                        frontier_phi_67_pred_1 = _2996;
                        frontier_phi_67_pred_2 = _2997;
                        frontier_phi_67_pred_3 = _2994;
                        frontier_phi_67_pred_4 = _2993;
                        frontier_phi_67_pred_5 = _2992;
                    }
                    else
                    {
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3205 = _2992;
                        float _3206 = _2993;
                        float _3207 = _2994;
                        float _3208 = _2995;
                        float _3209 = _2996;
                        float _3210 = _2997;
                        uint _3211 = _3007;
                        uint _3212;
                        vec4 _3237;
                        float _3238;
                        vec4 _3253;
                        vec3 _3265;
                        vec4 _3280;
                        vec4 _3295;
                        float _3341;
                        bool _3342;
                        for (;;)
                        {
                            uint _3222 = ((_2998 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3211));
                            _3212 = (_3211 + 4294967295u) & _3211;
                            uint _3224 = _3222 * 40u;
                            _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            _3238 = _3237.w;
                            uint _3240 = (_3222 * 40u) + 4u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            uint _3255 = (_3222 * 40u) + 8u;
                            _3265 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x));
                            uint _3267 = (_3222 * 40u) + 16u;
                            _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            uint _3282 = (_3222 * 40u) + 20u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3297 = (_3222 * 40u) + 24u;
                            vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3316 = (_3222 * 40u) + 28u;
                            vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            _3341 = fma(_2596, _3329.z, fma(_2595, _3329.y, _3329.x * _2594)) + _3329.w;
                            _3342 = !((fma(_2596, _3310.z, fma(_2595, _3310.y, _3310.x * _2594)) + _3310.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3342)
                            {
                                float _3369 = _3237.x - _2594;
                                float _3370 = _3237.y - _2595;
                                float _3371 = _3237.z - _2596;
                                float _3372 = dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371));
                                float _3375 = inversesqrt(_3372);
                                float _3376 = _3375 * _3369;
                                float _3377 = _3375 * _3370;
                                float _3378 = _3375 * _3371;
                                float _3382 = 1.0 - (_3372 / (_3238 * _3238));
                                float _4516 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3383 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                                float _3387 = sqrt(_3372) * _3253.w;
                                float _3389 = 1.39999997615814208984375 / (_3387 + 1.39999997615814208984375);
                                float _3390 = _3389 * _3389;
                                float _3393 = ((1.0 - _3390) * dot(vec3(_3376, _3377, _3378), vec3(_899, _902, _905))) + _3390;
                                float _3396 = _3387 * _3387;
                                float _3400 = (fma(_2596, _3280.z, fma(_2595, _3280.y, _3280.x * _2594)) + _3280.w) / _3341;
                                float _3401 = (fma(_2596, _3295.z, fma(_2595, _3295.y, _3295.x * _2594)) + _3295.w) / _3341;
                                float _3405 = 1.0 - dot(vec2(_3400, _3401), vec2(_3400, _3401));
                                float _4532 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3406 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                                float _3407 = _3406 * (((isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0))) * _3383) / ((_3396 * 0.699999988079071044921875) + 1.0));
                                float _3419 = exp2(log2(1.0 / ((_3396 * 3.5) + 5.0)) * 0.25);
                                float _3420 = 1.0 - _959;
                                float _3427 = sqrt(1.0 - ((1.0 - (_3420 * _3420)) * (1.0 - (_3419 * _3419))));
                                float _3428 = _3427 * _3427;
                                float _3429 = _3428 * _3428;
                                float _3430 = _3376 - _2879;
                                float _3431 = _3377 - _2880;
                                float _3432 = _3378 - _2881;
                                float _3436 = inversesqrt(dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432)));
                                float _3440 = dot(vec3(_899, _902, _905), vec3((-0.0) - _2879, (-0.0) - _2880, (-0.0) - _2881));
                                float _4543 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3443 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                                float _3444 = dot(vec3(_899, _902, _905), vec3(_3436 * _3430, _3436 * _3431, _3436 * _3432));
                                float _4554 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3447 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3451 = ((_3447 * _3447) * (_3429 + (-1.0))) + 1.0;
                                float _3452 = _3389 * _3428;
                                float _3453 = _3452 * _3452;
                                float _3459 = ((1.0 - _3453) * dot(vec3(_899, _902, _905), vec3(_3376, _3377, _3378))) + _3453;
                                float _4565 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3461 = 1.0 - _3428;
                                float _3471 = (0.5 / (((_3460 * ((_3443 * _3461) + _3428)) + 9.9999999392252902907785028219223e-09) + (((_3460 * _3461) + _3428) * _3443))) * _3460;
                                float _4576 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3481 = (_3406 * _3383) * (((_3429 * 3.1415927410125732421875) * (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) / ((_3451 * _3451) * ((_3396 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3481 * _3265.x;
                                frontier_phi_73_pred_1 = _3481 * _3265.y;
                                frontier_phi_73_pred_2 = _3407 * _3253.z;
                                frontier_phi_73_pred_3 = _3407 * _3253.y;
                                frontier_phi_73_pred_4 = _3407 * _3253.x;
                                frontier_phi_73_pred_5 = _3481 * _3265.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3485 = frontier_phi_73_pred;
                            _3486 = frontier_phi_73_pred_1;
                            _3490 = frontier_phi_73_pred_2;
                            _3489 = frontier_phi_73_pred_3;
                            _3488 = frontier_phi_73_pred_4;
                            _3487 = frontier_phi_73_pred_5;
                            _3195 = _3488 + _3208;
                            _3196 = _3489 + _3209;
                            _3197 = _3490 + _3210;
                            _3192 = _3485 + _3205;
                            _3193 = _3486 + _3206;
                            _3194 = _3487 + _3207;
                            if (_3212 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3212;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3195;
                        frontier_phi_67_pred_1 = _3196;
                        frontier_phi_67_pred_2 = _3197;
                        frontier_phi_67_pred_3 = _3194;
                        frontier_phi_67_pred_4 = _3193;
                        frontier_phi_67_pred_5 = _3192;
                    }
                    _2860 = frontier_phi_67_pred;
                    _2862 = frontier_phi_67_pred_1;
                    _2864 = frontier_phi_67_pred_2;
                    _2858 = frontier_phi_67_pred_3;
                    _2856 = frontier_phi_67_pred_4;
                    _2854 = frontier_phi_67_pred_5;
                    uint _2999 = _2998 + 1u;
                    if (_2999 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2992 = _2854;
                        _2993 = _2856;
                        _2994 = _2858;
                        _2995 = _2860;
                        _2996 = _2862;
                        _2997 = _2864;
                        _2998 = _2999;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2862;
                frontier_phi_55_56_ladder_1 = _2864;
                frontier_phi_55_56_ladder_2 = _2860;
                frontier_phi_55_56_ladder_3 = _2858;
                frontier_phi_55_56_ladder_4 = _2856;
                frontier_phi_55_56_ladder_5 = _2854;
            }
            else
            {
                frontier_phi_55_56_ladder = _2749;
                frontier_phi_55_56_ladder_1 = _2751;
                frontier_phi_55_56_ladder_2 = _2747;
                frontier_phi_55_56_ladder_3 = _2745;
                frontier_phi_55_56_ladder_4 = _2743;
                frontier_phi_55_56_ladder_5 = _2741;
            }
            _2853 = frontier_phi_55_56_ladder_5;
            _2855 = frontier_phi_55_56_ladder_4;
            _2857 = frontier_phi_55_56_ladder_3;
            _2859 = frontier_phi_55_56_ladder_2;
            _2861 = frontier_phi_55_56_ladder;
            _2863 = frontier_phi_55_56_ladder_1;
        }
        float _2868 = isnan(1.0) ? _943 : (isnan(_943) ? 1.0 : min(_943, 1.0));
        _2653 = (_2868 * _2859) + _2108;
        _2655 = (_2868 * _2861) + _2110;
        _2657 = (_2868 * _2863) + _2112;
        _2659 = ((_2853 * 0.039999999105930328369140625) * _2868) + _2438;
        _2661 = ((_2855 * 0.039999999105930328369140625) * _2868) + _2440;
        _2663 = ((_2857 * 0.039999999105930328369140625) * _2868) + _2442;
    }
    else
    {
        _2653 = _2108;
        _2655 = _2110;
        _2657 = _2112;
        _2659 = _2438;
        _2661 = _2440;
        _2663 = _2442;
    }
    float _4592 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _4603 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _4614 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    uint _2683 = _271 + 6u;
    float _2691 = _880 / cbSceneParam._m0[86u].x;
    float _2692 = _881 / cbSceneParam._m0[86u].y;
    vec4 _2706 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2691, _2692, (log2((isnan(cbSceneParam._m0[77u].w) ? _814 : (isnan(_814) ? cbSceneParam._m0[77u].w : min(_814, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2708 = _2706.x;
    float _2709 = _2706.y;
    float _2710 = _2706.z;
    float _2711 = _2706.w;
    float _2803;
    float _2805;
    float _2807;
    float _2809;
    if (_814 > cbSceneParam._m0[78u].w)
    {
        float _2766 = isnan(_814) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _814 : min(cbSceneParam._m0[80u].w, _814));
        float _2767 = _2766 / _814;
        float _2778 = _2767 * _865;
        float _2779 = _866 * _2767;
        float _2780 = (-0.0) - _2779;
        float _2781 = _2767 * _867;
        float _2783 = (cbSceneParam._m0[77u].w * _2780) / _2766;
        float _2784 = _2783 + cbSceneParam._m0[79u].w;
        float _2785 = cbSceneParam._m0[79u].w - _2779;
        float _2791 = sqrt(((_2778 * _2778) + (_2779 * _2779)) + (_2781 * _2781));
        float _2794 = (1.0 - (cbSceneParam._m0[77u].w / _2766)) * _2791;
        float _2799 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2801 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2954;
        if (abs((_2780 - _2783) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2954 = ((((_2784 > 0.0) ? exp2(_2799 * _2784) : (2.0 - exp2(_2801 * _2784))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2794;
        }
        else
        {
            float _2914 = 1.0 / cbSceneParam._m0[80u].x;
            float _2915 = isnan(_2785) ? _2784 : (isnan(_2784) ? _2785 : max(_2784, _2785));
            float _2916 = isnan(_2785) ? _2784 : (isnan(_2784) ? _2785 : min(_2784, _2785));
            float _2925 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : min(_2915, 0.0));
            float _2926 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : min(_2916, 0.0));
            _2954 = ((abs(_2791 / _2780) * cbSceneParam._m0[80u].y) * ((((_2925 - _2926) * 2.0) - ((exp2(_2799 * (isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0)))) - exp2(_2799 * (isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0))))) * _2914)) - ((exp2(_2801 * _2925) - exp2(_2801 * _2926)) * _2914))) + (_2794 * cbSceneParam._m0[80u].z);
        }
        vec4 _2956 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2691, _2692, 1.0), 0.0);
        float _2965 = exp2((_2954 * (-1.44269502162933349609375)) * (1.0 - _2956.w));
        float _2966 = log2(_2965);
        float _2982 = log2(_2711);
        _2803 = (exp2(_2982 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2966 * cbSceneParam._m0[78u].x)) * _2956.x) / cbSceneParam._m0[78u].x)) + _2708;
        _2805 = (exp2(_2982 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2966 * cbSceneParam._m0[78u].y)) * _2956.y) / cbSceneParam._m0[78u].y)) + _2709;
        _2807 = (exp2(_2982 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2966 * cbSceneParam._m0[78u].z)) * _2956.z) / cbSceneParam._m0[78u].z)) + _2710;
        _2809 = _2965 * _2711;
    }
    else
    {
        _2803 = _2708;
        _2805 = _2709;
        _2807 = _2710;
        _2809 = _2711;
    }
    float _2821 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2822 = _2821 == 3.0;
    float _2823 = log2(_2809);
    float _2830 = exp2(_2823 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2653 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _943))) + ((_2659 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1748)) * cbPerFrame._m0[3u].x));
    float _2831 = exp2(_2823 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2655 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _943))) + ((_2661 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1748)) * cbPerFrame._m0[3u].x));
    float _2832 = exp2(_2823 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2657 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _943))) + ((_2663 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1748)) * cbPerFrame._m0[3u].x));
    float _2841 = (_2821 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2841 * (_2822 ? _2830 : (_2830 + (cbSceneParam._m0[72u].w * _2803)));
    SV_Target.y = _2841 * (_2822 ? _2831 : (_2831 + (cbSceneParam._m0[72u].w * _2805)));
    SV_Target.z = _2841 * (_2822 ? _2832 : (_2832 + (cbSceneParam._m0[72u].w * _2807)));
    SV_Target.w = cbInstanceData._m0[_2683].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2683].w;
}


