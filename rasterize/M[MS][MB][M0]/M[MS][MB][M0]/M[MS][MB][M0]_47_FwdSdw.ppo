#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1082;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _214 = _213 * _205;
    float _215 = _213 * _206;
    float _216 = _213 * _207;
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228 = _227 * TANGENT.x;
    float _229 = _227 * TANGENT.y;
    float _230 = _227 * TANGENT.z;
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _244 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3671 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3682 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3693 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _259 = _254 + 1u;
    uint _263 = _254 + 2u;
    float _272 = sqrt(((cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x));
    float _273 = _272 * TEXCOORD.z;
    float _274 = _272 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _273) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _274) + cbTextureTilingScale._m0[13u].w));
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _315 = _310.x * cbMtdParam._m0[9u].x;
    float _316 = _310.y * cbMtdParam._m0[9u].y;
    float _317 = _310.z * cbMtdParam._m0[9u].z;
    float _321 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _287.x) * _315;
    float _324 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _287.y) * _316;
    float _327 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _287.z) * _317;
    float _334 = ((_315 - _321) * (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0)))) + _321;
    float _335 = ((_316 - _324) * (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) + _324;
    float _336 = ((_317 - _327) * (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) + _327;
    vec4 _355 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _273) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _274) + cbTextureTilingScale._m0[14u].w));
    vec4 _375 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _273) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _274) + cbTextureTilingScale._m0[20u].w));
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _405 = _401.z;
    float _409 = (_401.x * 2.0) + (-1.0);
    float _410 = (_401.y * 2.0) + (-1.0);
    float _411 = dot(vec2(_409, _410), vec2(_409, _410));
    float _3704 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _416 = sqrt(1.0 - (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))));
    float _421 = _409 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_375.x * 2.0) + (-1.0)));
    float _422 = _410 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_375.y * 2.0) + (-1.0)));
    float _425 = fma(_416, _221, fma(_422, _228, _421 * _214));
    float _428 = fma(_416, _222, fma(_422, _229, _421 * _215));
    float _431 = fma(_416, _223, fma(_422, _230, _421 * _216));
    float _435 = inversesqrt(dot(vec3(_425, _428, _431), vec3(_425, _428, _431)));
    vec4 _471 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _273) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _274) + cbTextureTilingScale._m0[11u].w));
    float _473 = _471.x;
    float _474 = 1.0 - _473;
    float _483 = (cbMtdParam._m0[19u].x + dot(vec4(_435 * _425, _435 * _428, _435 * _431, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_473 - _474) * cbMtdParam._m0[24u].z) + _474) * cbMtdParam._m0[21u].z);
    float _3715 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _491 = (_484 * ((_355.x * cbMtdParam._m0[18u].x) - _334)) + _334;
    float _492 = (_484 * ((_355.y * cbMtdParam._m0[18u].y) - _335)) + _335;
    float _493 = (_484 * ((_355.z * cbMtdParam._m0[18u].z) - _336)) + _336;
    float _498 = (((_375.z - _405) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _405;
    vec4 _511 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _273) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _274) + cbTextureTilingScale._m0[15u].w));
    float _518 = (_511.x * 2.0) + (-1.0);
    float _519 = (_511.y * 2.0) + (-1.0);
    float _520 = dot(vec2(_518, _519), vec2(_518, _519));
    float _3726 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _528 = ((_511.z - _498) * _484) + _498;
    float _538 = ((sqrt(1.0 - (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) - _416) * _484) + _416;
    float _541 = (((_518 - _421) * _484) + _421) + (cbMtdParam._m0[21u].x * _421);
    float _542 = (((_519 - _422) * _484) + _422) + (cbMtdParam._m0[21u].x * _422);
    float _544 = cbMtdParam._m0[22u].x + _401.w;
    float _547 = fma(_538, _221, fma(_542, _228, _541 * _214));
    float _550 = fma(_538, _222, fma(_542, _229, _541 * _215));
    float _553 = fma(_538, _223, fma(_542, _230, _541 * _216));
    float _557 = inversesqrt(dot(vec3(_547, _550, _553), vec3(_547, _550, _553)));
    float _558 = _557 * _547;
    float _559 = _557 * _550;
    float _560 = _557 * _553;
    float _3737 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _561 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _3748 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _3759 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _3770 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _3781 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _579 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _630 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _620);
    float _631 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _620);
    float _632 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _620);
    float _636 = inversesqrt(dot(vec3(_630, _631, _632), vec3(_630, _631, _632)));
    float _637 = _630 * _636;
    float _638 = _631 * _636;
    float _639 = _632 * _636;
    float _645 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _646 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _667 = fma(_560, cbSceneParam._m0[5u].z, fma(_559, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _558));
    float _670 = fma(_560, cbSceneParam._m0[6u].z, fma(_559, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _558));
    float _673 = fma(_560, cbSceneParam._m0[7u].z, fma(_559, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _558));
    uint _687 = (_254 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _693 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) * cbInstanceData._m0[_687].x;
    float _694 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0)))) * cbInstanceData._m0[_687].y;
    float _695 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) * cbInstanceData._m0[_687].z;
    float _3792 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _696 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _3803 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _697 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _698 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    vec4 _707 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _645, cbSceneParam._m0[86u].y * _646));
    float _711 = ((isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * TEXCOORD_5.w) * _707.x;
    float _712 = dot(vec3(_558, _559, _560), vec3(_637, _638, _639));
    float _715 = _712 * 2.0;
    float _719 = (_715 * _558) - _637;
    float _720 = (_715 * _559) - _638;
    float _721 = (_715 * _560) - _639;
    float _725 = abs(dot(vec3(_637, _638, _639), vec3(_558, _559, _560)));
    float _3825 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _727 = sqrt(_561);
    float _740 = exp2((_727 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_727 * 3.0));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _780 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1081;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _806 = fma(_780, cbModelParam._m0[26u].z, fma(_776, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _772));
        float _810 = fma(_780, cbModelParam._m0[27u].z, fma(_776, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _772));
        float _814 = fma(_780, cbModelParam._m0[28u].z, fma(_776, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _772));
        float _839 = _772 + _558;
        float _840 = _776 + _559;
        float _841 = _780 + _560;
        float _851 = fma(_841, cbModelParam._m0[26u].z, fma(_840, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _839)) - _806;
        float _852 = fma(_841, cbModelParam._m0[27u].z, fma(_840, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _839)) - _810;
        float _853 = fma(_841, cbModelParam._m0[28u].z, fma(_840, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _839)) - _814;
        float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
        float _870 = ((_857 * _851) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_806 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _871 = ((_857 * _852) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_810 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _872 = ((_857 * _853) / cbModelParam._m0[34u].z) + ((((((_814 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        float _909 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_875.x + (-0.5));
        float _911 = _909 * (_875.y + (-0.5));
        float _912 = _909 * (_875.z + (-0.5));
        float _919 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_882.x + (-0.5));
        float _921 = _919 * (_882.y + (-0.5));
        float _922 = _919 * (_882.z + (-0.5));
        float _929 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_889.x + (-0.5));
        float _931 = _929 * (_889.y + (-0.5));
        float _932 = _929 * (_889.z + (-0.5));
        float _939 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_896.x + (-0.5));
        float _941 = _939 * (_896.y + (-0.5));
        float _942 = _939 * (_896.z + (-0.5));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = _910 * 0.5;
        float _947 = _920 * 0.5;
        float _948 = _930 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _963 = (dot(vec3(_558, _559, _560), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _973 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3873 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_975 + 1.0))) + _980) * _943;
        float _990 = _911 * 0.5;
        float _991 = _921 * 0.5;
        float _992 = _931 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_558, _559, _560), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3906 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1017 + 1.0))) + _1022) * _944;
        float _1032 = _912 * 0.5;
        float _1033 = _922 * 0.5;
        float _1034 = _932 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_558, _559, _560), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3939 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1059 + 1.0))) + _1064) * _945;
        _1081 = _912;
        _1083 = _911;
        _1084 = _910;
        _1085 = _922;
        _1086 = _921;
        _1087 = _920;
        _1088 = _932;
        _1089 = _931;
        _1090 = _930;
        _1091 = _945;
        _1092 = _944;
        _1093 = _943;
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1095 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1096 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
    }
    else
    {
        _1081 = _1082;
        _1083 = _1082;
        _1084 = _1082;
        _1085 = _1082;
        _1086 = _1082;
        _1087 = _1082;
        _1088 = _1082;
        _1089 = _1082;
        _1090 = _1082;
        _1091 = _1082;
        _1092 = _1082;
        _1093 = _1082;
        _1094 = 0.0;
        _1095 = 0.0;
        _1096 = 0.0;
    }
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1121 = fma(_780, cbModelParam._m0[30u].z, fma(_776, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _772));
        float _1125 = fma(_780, cbModelParam._m0[31u].z, fma(_776, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _772));
        float _1129 = fma(_780, cbModelParam._m0[32u].z, fma(_776, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _772));
        float _1152 = _772 + _558;
        float _1153 = _776 + _559;
        float _1154 = _780 + _560;
        float _1164 = fma(_1154, cbModelParam._m0[30u].z, fma(_1153, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1152)) - _1121;
        float _1165 = fma(_1154, cbModelParam._m0[31u].z, fma(_1153, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1152)) - _1125;
        float _1166 = fma(_1154, cbModelParam._m0[32u].z, fma(_1153, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1152)) - _1129;
        float _1170 = inversesqrt(dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166)));
        float _1183 = ((_1170 * _1164) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1121 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1170 * _1165) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1125 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1170 * _1166) / cbModelParam._m0[35u].z) + ((((((_1129 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        float _1220 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1187.x + (-0.5));
        float _1222 = _1220 * (_1187.y + (-0.5));
        float _1223 = _1220 * (_1187.z + (-0.5));
        float _1230 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1194.x + (-0.5));
        float _1232 = _1230 * (_1194.y + (-0.5));
        float _1233 = _1230 * (_1194.z + (-0.5));
        float _1240 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1201.x + (-0.5));
        float _1242 = _1240 * (_1201.y + (-0.5));
        float _1243 = _1240 * (_1201.z + (-0.5));
        float _1250 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1208.x + (-0.5));
        float _1252 = _1250 * (_1208.y + (-0.5));
        float _1253 = _1250 * (_1208.z + (-0.5));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = _1221 * 0.5;
        float _1258 = _1231 * 0.5;
        float _1259 = _1241 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_558, _559, _560), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3980 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3991 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _4002 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1284 + 1.0))) + _1289) * _1254;
        float _1299 = _1222 * 0.5;
        float _1300 = _1232 * 0.5;
        float _1301 = _1242 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_558, _559, _560), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _4035 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1326 + 1.0))) + _1331) * _1255;
        float _1341 = _1223 * 0.5;
        float _1342 = _1233 * 0.5;
        float _1343 = _1243 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_558, _559, _560), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4068 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1368 + 1.0))) + _1373) * _1256;
        _1390 = _1223;
        _1391 = _1222;
        _1392 = _1221;
        _1393 = _1233;
        _1394 = _1232;
        _1395 = _1231;
        _1396 = _1243;
        _1397 = _1242;
        _1398 = _1241;
        _1399 = _1256;
        _1400 = _1255;
        _1401 = _1254;
        _1402 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
    }
    else
    {
        _1390 = _1082;
        _1391 = _1082;
        _1392 = _1082;
        _1393 = _1082;
        _1394 = _1082;
        _1395 = _1082;
        _1396 = _1082;
        _1397 = _1082;
        _1398 = _1082;
        _1399 = _1082;
        _1400 = _1082;
        _1401 = _1082;
        _1402 = 0.0;
        _1403 = 0.0;
        _1404 = 0.0;
    }
    float _1414 = (cbModelParam._m0[1u].x * (_1402 - _1094)) + _1094;
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1095)) + _1095;
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1096)) + _1096;
    float _1437 = fma(_1416, cbSceneParam._m0[89u].z, fma(_1415, cbSceneParam._m0[89u].y, _1414 * cbSceneParam._m0[89u].x));
    float _1440 = fma(_1416, cbSceneParam._m0[90u].z, fma(_1415, cbSceneParam._m0[90u].y, _1414 * cbSceneParam._m0[90u].x));
    float _1443 = fma(_1416, cbSceneParam._m0[91u].z, fma(_1415, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1414));
    float _1458 = _719 * 0.5;
    float _1459 = _720 * 0.5;
    float _1460 = _721 * 0.5;
    float _1461 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1464 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1467 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1390, _1393, _1396, _1399));
    float _1501;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1474 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1081, _1085, _1088, _1091));
        float _1478 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1083, _1086, _1089, _1092));
        float _1482 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1084, _1087, _1090, _1093));
        float _1489 = dot(vec4(cbModelParam._m0[39u]), vec4(_1458, _1459, _1460, 1.0));
        _1501 = dot(vec3(isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1489) ? 0.0 : (isnan(0.0) ? _1489 : max(0.0, _1489))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1501 = 1.0;
    }
    float _1512;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1503 = dot(vec4(cbModelParam._m0[40u]), vec4(_1458, _1459, _1460, 1.0));
        _1512 = dot(vec3(isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1503) ? 0.0 : (isnan(0.0) ? _1503 : max(0.0, _1503))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1512 = 1.0;
    }
    float _1516 = (_1512 * cbModelParam._m0[1u].x) + (_1501 * (1.0 - cbModelParam._m0[1u].x));
    float _1526 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _561);
    float _1527 = isnan(_1526) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1526 : min(cbModelParam._m0[25u].z, _1526));
    float _1607;
    float _1609;
    float _1611;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1574 = fma(_780, cbModelParam._m0[13u].z, fma(_776, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _772)) + cbModelParam._m0[13u].w;
        float _1578 = fma(_780, cbModelParam._m0[14u].z, fma(_776, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _772)) + cbModelParam._m0[14u].w;
        float _1582 = fma(_780, cbModelParam._m0[15u].z, fma(_776, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _772)) + cbModelParam._m0[15u].w;
        float _1585 = fma(_721, cbModelParam._m0[13u].z, fma(_720, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _719));
        float _1588 = fma(_721, cbModelParam._m0[14u].z, fma(_720, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _719));
        float _1591 = fma(_721, cbModelParam._m0[15u].z, fma(_720, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _719));
        float _1619;
        if (_1585 > 0.0)
        {
            _1619 = abs((1.0 - _1574) / _1585);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1574 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1619 = frontier_phi_14_12_ladder;
        }
        float _1789;
        if (_1588 > 0.0)
        {
            _1789 = abs((1.0 - _1578) / _1588);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1578 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1789 = frontier_phi_23_19_ladder;
        }
        float _2085;
        if (_1591 > 0.0)
        {
            _2085 = abs((1.0 - _1582) / _1591);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1582 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2085 = frontier_phi_35_30_ladder;
        }
        float _2087 = isnan(_1789) ? _1619 : (isnan(_1619) ? _1789 : min(_1619, _1789));
        float _2088 = isnan(_2085) ? _2087 : (isnan(_2087) ? _2085 : min(_2087, _2085));
        float _2092 = (_2088 * _1585) + _1574;
        float _2093 = (_2088 * _1588) + _1578;
        float _2094 = (_2088 * _1591) + _1582;
        float _2095 = _2088 * 9.9999997473787516355514526367188e-05;
        float _2097 = (-1.0) - _2095;
        float _2099 = _2095 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2094 > _2099) || ((_2094 < _2097) || ((_2093 > _2099) || ((_2093 < _2097) || ((_2092 < _2097) || (_2092 > _2099))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2239 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2094, cbModelParam._m0[9u].z, fma(_2093, cbModelParam._m0[9u].y, _2092 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2094, cbModelParam._m0[10u].z, fma(_2093, cbModelParam._m0[10u].y, _2092 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2094, cbModelParam._m0[11u].z, fma(_2093, cbModelParam._m0[11u].y, _2092 * cbModelParam._m0[11u].x))), _1527);
            frontier_phi_13_35_ladder = _2239.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2239.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2239.x * cbModelParam._m0[1u].y;
        }
        _1607 = frontier_phi_13_35_ladder_2;
        _1609 = frontier_phi_13_35_ladder_1;
        _1611 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1595 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_719, _720, _721), _1527);
        _1607 = _1595.x * cbModelParam._m0[1u].y;
        _1609 = _1595.y * cbModelParam._m0[1u].y;
        _1611 = _1595.z * cbModelParam._m0[1u].y;
    }
    float _1615 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _561);
    float _1616 = isnan(_1615) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1615 : min(cbModelParam._m0[25u].w, _1615));
    float _1705;
    float _1707;
    float _1709;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1669 = fma(_780, cbModelParam._m0[21u].z, fma(_776, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _772)) + cbModelParam._m0[21u].w;
        float _1673 = fma(_780, cbModelParam._m0[22u].z, fma(_776, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _772)) + cbModelParam._m0[22u].w;
        float _1677 = fma(_780, cbModelParam._m0[23u].z, fma(_776, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _772)) + cbModelParam._m0[23u].w;
        float _1680 = fma(_721, cbModelParam._m0[21u].z, fma(_720, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _719));
        float _1683 = fma(_721, cbModelParam._m0[22u].z, fma(_720, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _719));
        float _1686 = fma(_721, cbModelParam._m0[23u].z, fma(_720, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _719));
        float _1794;
        if (_1680 > 0.0)
        {
            _1794 = abs((1.0 - _1669) / _1680);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1669 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1794 = frontier_phi_25_21_ladder;
        }
        float _2112;
        if (_1683 > 0.0)
        {
            _2112 = abs((1.0 - _1673) / _1683);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1673 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2112 = frontier_phi_37_32_ladder;
        }
        float _2439;
        if (_1686 > 0.0)
        {
            _2439 = abs((1.0 - _1677) / _1686);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1677 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2439 = frontier_phi_47_44_ladder;
        }
        float _2441 = isnan(_2112) ? _1794 : (isnan(_1794) ? _2112 : min(_1794, _2112));
        float _2442 = isnan(_2439) ? _2441 : (isnan(_2441) ? _2439 : min(_2441, _2439));
        float _2446 = (_2442 * _1680) + _1669;
        float _2447 = (_2442 * _1683) + _1673;
        float _2448 = (_2442 * _1686) + _1677;
        float _2449 = _2442 * 9.9999997473787516355514526367188e-05;
        float _2450 = (-1.0) - _2449;
        float _2452 = _2449 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2448 > _2452) || ((_2448 < _2450) || ((_2447 > _2452) || ((_2447 < _2450) || ((_2446 < _2450) || (_2446 > _2452))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2566 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2448, cbModelParam._m0[17u].z, fma(_2447, cbModelParam._m0[17u].y, _2446 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2448, cbModelParam._m0[18u].z, fma(_2447, cbModelParam._m0[18u].y, _2446 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2448, cbModelParam._m0[19u].z, fma(_2447, cbModelParam._m0[19u].y, _2446 * cbModelParam._m0[19u].x))), _1616);
            frontier_phi_22_47_ladder = _2566.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2566.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2566.x * cbModelParam._m0[1u].z;
        }
        _1705 = frontier_phi_22_47_ladder_2;
        _1707 = frontier_phi_22_47_ladder_1;
        _1709 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1689 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_719, _720, _721), _1616);
        _1705 = _1689.x * cbModelParam._m0[1u].z;
        _1707 = _1689.y * cbModelParam._m0[1u].z;
        _1709 = _1689.z * cbModelParam._m0[1u].z;
    }
    float _1721 = ((((1.0 - _740) * ((_727 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_740 * _727)) * _711;
    float _1722 = _1721 * ((cbModelParam._m0[1u].w * (_1705 - _1607)) + _1607);
    float _1723 = _1721 * ((cbModelParam._m0[1u].w * (_1707 - _1609)) + _1609);
    float _1724 = _1721 * ((cbModelParam._m0[1u].w * (_1709 - _1611)) + _1611);
    float _1727 = fma(_1724, cbSceneParam._m0[89u].z, fma(_1723, cbSceneParam._m0[89u].y, _1722 * cbSceneParam._m0[89u].x));
    float _1730 = fma(_1724, cbSceneParam._m0[90u].z, fma(_1723, cbSceneParam._m0[90u].y, _1722 * cbSceneParam._m0[90u].x));
    float _1733 = fma(_1724, cbSceneParam._m0[91u].z, fma(_1723, cbSceneParam._m0[91u].y, _1722 * cbSceneParam._m0[91u].x));
    float _1768 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1772 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1776 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1780 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1781 = _1768 / _1780;
    float _1782 = _1772 / _1780;
    float _1783 = _1776 / _1780;
    float _1930;
    float _1931;
    float _1932;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1810 = ((uint(_1783 > cbSceneParam._m0[59u].y) + uint(_1783 > cbSceneParam._m0[59u].x)) + uint(_1783 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1811 = _1810 + 43u;
        uint _1819 = _1810 + 44u;
        uint _1827 = _1810 + 45u;
        uint _1835 = _1810 + 46u;
        float _1846 = fma(_1780, cbSceneParam._m0[_1811].w, fma(_1776, cbSceneParam._m0[_1811].z, fma(_1772, cbSceneParam._m0[_1811].y, _1768 * cbSceneParam._m0[_1811].x)));
        float _1850 = fma(_1780, cbSceneParam._m0[_1819].w, fma(_1776, cbSceneParam._m0[_1819].z, fma(_1772, cbSceneParam._m0[_1819].y, _1768 * cbSceneParam._m0[_1819].x)));
        float _1858 = fma(_1780, cbSceneParam._m0[_1835].w, fma(_1776, cbSceneParam._m0[_1835].z, fma(_1772, cbSceneParam._m0[_1835].y, _1768 * cbSceneParam._m0[_1835].x)));
        float _1863 = cbSceneParam._m0[33u].z * _1858;
        float _1865 = cbSceneParam._m0[33u].w * _1858;
        float _1868 = fma(_1780, cbSceneParam._m0[_1827].w, fma(_1776, cbSceneParam._m0[_1827].z, fma(_1772, cbSceneParam._m0[_1827].y, _1768 * cbSceneParam._m0[_1827].x))) / _1858;
        float _1916 = (cbSceneParam._m0[33u].x - sqrt(((_1782 * _1782) + (_1781 * _1781)) + (_1783 * _1783))) * cbSceneParam._m0[33u].y;
        float _4194 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1923 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1863 + _1846) / _1858, (_1865 + _1850) / _1858), _1868), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1865 + _1846) / _1858, (_1850 - _1863) / _1858), _1868), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1846 - _1863) / _1858, (_1850 - _1865) / _1858), _1868), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1846 - _1865) / _1858, (_1863 + _1850) / _1858), _1868), 0.0)).x), vec4(0.25)));
        _1930 = 1.0 - (_1923 * cbSceneParam._m0[34u].x);
        _1931 = 1.0 - (_1923 * cbSceneParam._m0[34u].y);
        _1932 = 1.0 - (_1923 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1930 = 1.0;
        _1931 = 1.0;
        _1932 = 1.0;
    }
    float _1996;
    float _1998;
    float _2000;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1984 = fma(_1780, cbSceneParam._m0[63u].w, fma(_1776, cbSceneParam._m0[63u].z, fma(_1772, cbSceneParam._m0[63u].y, _1768 * cbSceneParam._m0[63u].x)));
        float _1985 = fma(_1780, cbSceneParam._m0[60u].w, fma(_1776, cbSceneParam._m0[60u].z, fma(_1772, cbSceneParam._m0[60u].y, _1768 * cbSceneParam._m0[60u].x))) / _1984;
        float _1986 = fma(_1780, cbSceneParam._m0[61u].w, fma(_1776, cbSceneParam._m0[61u].z, fma(_1772, cbSceneParam._m0[61u].y, _1768 * cbSceneParam._m0[61u].x))) / _1984;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1985 >= cbSceneParam._m0[64u].x) && (_1986 >= cbSceneParam._m0[64u].y)) && (_1985 <= cbSceneParam._m0[64u].z)) && (_1986 <= cbSceneParam._m0[64u].w))
        {
            float _2125 = fma(_1780, cbSceneParam._m0[62u].w, fma(_1776, cbSceneParam._m0[62u].z, fma(_1772, cbSceneParam._m0[62u].y, _1768 * cbSceneParam._m0[62u].x))) / _1984;
            float _2129 = isnan(cbSceneParam._m0[41u].w) ? _2125 : (isnan(_2125) ? cbSceneParam._m0[41u].w : max(_2125, cbSceneParam._m0[41u].w));
            float _2172 = (cbSceneParam._m0[33u].x - sqrt(((_1782 * _1782) + (_1781 * _1781)) + (_1783 * _1783))) * cbSceneParam._m0[33u].y;
            float _4210 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
            float _2179 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1985, cbSceneParam._m0[33u].w + _1986), _2129), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1985, _1986 - cbSceneParam._m0[33u].z), _2129), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1985 - cbSceneParam._m0[33u].z, _1986 - cbSceneParam._m0[33u].w), _2129), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1985 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1986), _2129), 0.0)).x), vec4(0.25)));
            float _2183 = 1.0 - (_2179 * cbSceneParam._m0[34u].x);
            float _2184 = 1.0 - (_2179 * cbSceneParam._m0[34u].y);
            float _2185 = 1.0 - (_2179 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2185) ? _1932 : (isnan(_1932) ? _2185 : min(_1932, _2185));
            frontier_phi_34_33_ladder_1 = isnan(_2184) ? _1931 : (isnan(_1931) ? _2184 : min(_1931, _2184));
            frontier_phi_34_33_ladder_2 = isnan(_2183) ? _1930 : (isnan(_1930) ? _2183 : min(_1930, _2183));
        }
        else
        {
            frontier_phi_34_33_ladder = _1932;
            frontier_phi_34_33_ladder_1 = _1931;
            frontier_phi_34_33_ladder_2 = _1930;
        }
        _1996 = frontier_phi_34_33_ladder_2;
        _1998 = frontier_phi_34_33_ladder_1;
        _2000 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1996 = _1930;
        _1998 = _1931;
        _2000 = _1932;
    }
    uvec4 _2005 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _2007 = _2005.x * 14u;
    uint _2008 = _2007 + 13u;
    float _2015 = _711 + (-1.0);
    float _2020 = (cbLight._m0[_2008].x * _2015) + 1.0;
    float _2021 = (cbLight._m0[_2008].y * _2015) + 1.0;
    float _2022 = (cbLight._m0[_2008].z * _2015) + 1.0;
    float _2023 = (cbLight._m0[_2008].w * _2015) + 1.0;
    uint _2024 = _2007 + 5u;
    float _2030 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
    uint _2034 = _2007 + 4u;
    float _2044 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
    uint _2048 = _2007 | 1u;
    float _2059 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_558, _559, _560));
    float _2062 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_558, _559, _560));
    float _4246 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _4257 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2067 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * 0.3183098733425140380859375;
    float _2069 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * 0.3183098733425140380859375;
    float _2076 = ((cbLight._m0[_2024].x * _2030) * _2069) + (((cbLight._m0[_2034].x * _1996) * _2044) * _2067);
    float _2077 = ((_2030 * cbLight._m0[_2024].y) * _2069) + (((cbLight._m0[_2034].y * _1998) * _2044) * _2067);
    float _2078 = ((_2030 * cbLight._m0[_2024].z) * _2069) + (((cbLight._m0[_2034].z * _2000) * _2044) * _2067);
    uvec4 _2082 = floatBitsToUint(cbLight._m0[_2007 + 12u]);
    bool _2084 = _2082.x == 0u;
    float _2186;
    float _2188;
    float _2190;
    if (_2084)
    {
        _2186 = _2076;
        _2188 = _2077;
        _2190 = _2078;
    }
    else
    {
        uint _2194 = _2007 + 6u;
        float _2210 = (dot(vec3(cbLight._m0[_2007 + 2u].xyz), vec3(_558, _559, _560)) * 0.5) + 0.5;
        float _2211 = _2210 * _2210;
        float _4268 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2212 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2213 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
        _2186 = (((cbLight._m0[_2194].x * 0.3183098733425140380859375) * _2212) * _2213) + _2076;
        _2188 = (((cbLight._m0[_2194].y * 0.3183098733425140380859375) * _2212) * _2213) + _2077;
        _2190 = (((cbLight._m0[_2194].z * 0.3183098733425140380859375) * _2212) * _2213) + _2078;
    }
    bool _2193 = _2082.y == 0u;
    float _2248;
    float _2250;
    float _2252;
    if (_2193)
    {
        _2248 = _2186;
        _2250 = _2188;
        _2252 = _2190;
    }
    else
    {
        uint _2410 = _2007 + 7u;
        float _2426 = (dot(vec3(cbLight._m0[_2007 + 3u].xyz), vec3(_558, _559, _560)) * 0.5) + 0.5;
        float _2427 = _2426 * _2426;
        float _4284 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2428 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _2429 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
        _2248 = (((cbLight._m0[_2410].x * 0.3183098733425140380859375) * _2428) * _2429) + _2186;
        _2250 = (((cbLight._m0[_2410].y * 0.3183098733425140380859375) * _2428) * _2429) + _2188;
        _2252 = (((cbLight._m0[_2410].z * 0.3183098733425140380859375) * _2428) * _2429) + _2190;
    }
    uint _2255 = _2007 + 8u;
    float _2268 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2007].w)) * _561) * 0.949999988079071044921875);
    float _2269 = _2268 * _2268;
    float _2270 = cbLight._m0[_2007].x + _637;
    float _2271 = cbLight._m0[_2007].y + _638;
    float _2272 = cbLight._m0[_2007].z + _639;
    float _2276 = inversesqrt(dot(vec3(_2270, _2271, _2272), vec3(_2270, _2271, _2272)));
    float _2277 = _2276 * _2270;
    float _2278 = _2276 * _2271;
    float _2279 = _2276 * _2272;
    float _2280 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_2007].xyz));
    float _4300 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _4311 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _2284 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _2285 = dot(vec3(_558, _559, _560), vec3(_2277, _2278, _2279));
    float _4322 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2289 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_2277, _2278, _2279));
    float _4333 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2293 = _2269 * _2269;
    float _2297 = ((_2288 * _2288) * (_2293 + (-1.0))) + 1.0;
    float _2308 = (exp2(log2(1.0 - (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2309 = 1.0 - _2269;
    float _2320 = (0.5 / (((_2284 * ((_2283 * _2309) + _2269)) + 9.9999999392252902907785028219223e-09) + (((_2284 * _2309) + _2269) * _2283))) * _2283;
    float _4344 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2322 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2293 / ((_2297 * _2297) * 3.141590118408203125));
    uint _2336 = _2007 + 9u;
    float _2347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2048].w)) * _561) * 0.949999988079071044921875);
    float _2348 = _2347 * _2347;
    float _2349 = cbLight._m0[_2048].x + _637;
    float _2350 = cbLight._m0[_2048].y + _638;
    float _2351 = cbLight._m0[_2048].z + _639;
    float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
    float _2356 = _2355 * _2349;
    float _2357 = _2355 * _2350;
    float _2358 = _2355 * _2351;
    float _2359 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_2048].xyz));
    float _4355 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _2363 = dot(vec3(_558, _559, _560), vec3(_2356, _2357, _2358));
    float _4366 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2366 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _2367 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_2356, _2357, _2358));
    float _4377 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2371 = _2348 * _2348;
    float _2375 = ((_2366 * _2366) * (_2371 + (-1.0))) + 1.0;
    float _2384 = (exp2(log2(1.0 - (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2385 = 1.0 - _2348;
    float _2395 = (0.5 / (((_2284 * ((_2362 * _2385) + _2348)) + 9.9999999392252902907785028219223e-09) + (((_2284 * _2385) + _2348) * _2362))) * _2362;
    float _4388 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2397 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2371 / ((_2375 * _2375) * 3.141590118408203125));
    float _2407 = (((_2384 * cbLight._m0[_2336].x) * _2397) * _2030) + ((((cbLight._m0[_2255].x * _1996) * _2308) * _2322) * _2044);
    float _2408 = (((_2384 * cbLight._m0[_2336].y) * _2397) * _2030) + ((((cbLight._m0[_2255].y * _1998) * _2308) * _2322) * _2044);
    float _2409 = (((_2384 * cbLight._m0[_2336].z) * _2397) * _2030) + ((((cbLight._m0[_2255].z * _2000) * _2308) * _2322) * _2044);
    float _2465;
    float _2467;
    float _2469;
    if (_2084)
    {
        _2465 = _2407;
        _2467 = _2408;
        _2469 = _2409;
    }
    else
    {
        uint _2471 = _2007 + 2u;
        uint _2475 = _2007 + 10u;
        float _2489 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2471].w)) * _561) * 0.949999988079071044921875);
        float _2490 = _2489 * _2489;
        float _2491 = cbLight._m0[_2471].x + _637;
        float _2492 = cbLight._m0[_2471].y + _638;
        float _2493 = cbLight._m0[_2471].z + _639;
        float _2497 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
        float _2498 = _2497 * _2491;
        float _2499 = _2497 * _2492;
        float _2500 = _2497 * _2493;
        float _2501 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_2471].xyz));
        float _4399 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2504 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2505 = dot(vec3(_558, _559, _560), vec3(_2498, _2499, _2500));
        float _4410 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2508 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2509 = dot(vec3(cbLight._m0[_2471].xyz), vec3(_2498, _2499, _2500));
        float _4421 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2513 = _2490 * _2490;
        float _2517 = ((_2508 * _2508) * (_2513 + (-1.0))) + 1.0;
        float _2526 = (exp2(log2(1.0 - (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2527 = 1.0 - _2490;
        float _2537 = (0.5 / (((_2284 * ((_2504 * _2527) + _2490)) + 9.9999999392252902907785028219223e-09) + (((_2284 * _2527) + _2490) * _2504))) * _2504;
        float _4432 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2539 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2513 / ((_2517 * _2517) * 3.141590118408203125));
        float _2540 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
        _2465 = (((_2526 * cbLight._m0[_2475].x) * _2539) * _2540) + _2407;
        _2467 = (((_2526 * cbLight._m0[_2475].y) * _2539) * _2540) + _2408;
        _2469 = (((_2526 * cbLight._m0[_2475].z) * _2539) * _2540) + _2409;
    }
    float _2571;
    float _2573;
    float _2575;
    if (_2193)
    {
        _2571 = _2465;
        _2573 = _2467;
        _2575 = _2469;
    }
    else
    {
        uint _2582 = _2007 + 3u;
        uint _2586 = _2007 + 11u;
        float _2600 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2582].w)) * _561) * 0.949999988079071044921875);
        float _2601 = _2600 * _2600;
        float _2602 = cbLight._m0[_2582].x + _637;
        float _2603 = cbLight._m0[_2582].y + _638;
        float _2604 = cbLight._m0[_2582].z + _639;
        float _2608 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
        float _2609 = _2608 * _2602;
        float _2610 = _2608 * _2603;
        float _2611 = _2608 * _2604;
        float _2612 = dot(vec3(_558, _559, _560), vec3(cbLight._m0[_2582].xyz));
        float _4448 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _2616 = dot(vec3(_558, _559, _560), vec3(_2609, _2610, _2611));
        float _4459 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2619 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2620 = dot(vec3(cbLight._m0[_2582].xyz), vec3(_2609, _2610, _2611));
        float _4470 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2624 = _2601 * _2601;
        float _2628 = ((_2619 * _2619) * (_2624 + (-1.0))) + 1.0;
        float _2637 = (exp2(log2(1.0 - (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2638 = 1.0 - _2601;
        float _2648 = (0.5 / (((_2284 * ((_2615 * _2638) + _2601)) + 9.9999999392252902907785028219223e-09) + (((_2284 * _2638) + _2601) * _2615))) * _2615;
        float _4481 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2650 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2624 / ((_2628 * _2628) * 3.141590118408203125));
        float _2651 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
        _2571 = (((_2637 * cbLight._m0[_2586].x) * _2650) * _2651) + _2465;
        _2573 = (((_2637 * cbLight._m0[_2586].y) * _2650) * _2651) + _2467;
        _2575 = (((_2637 * cbLight._m0[_2586].z) * _2650) * _2651) + _2469;
    }
    float _2717;
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    if (_2005.y == 0u)
    {
        uvec4 _2672 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2673 = _2672.x;
        uint _2684 = uint((float(_2672.y) * floor(float(uint(cbSceneParam._m0[85u].y * _646) / _2673))) + floor(float(uint(cbSceneParam._m0[85u].x * _645) / _2673)));
        float _2694 = (log2(_1783 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2695 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        uint _2698 = uint(isnan(14.0) ? _2695 : (isnan(_2695) ? 14.0 : min(_2695, 14.0)));
        uvec4 _2703 = texelFetch(g_lightClusterGridBuffer, int(((_2698 << 2u) + (_2684 << 6u)) >> 2u));
        uint _2704 = _2703.x;
        uint _2705 = _2672.z;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        if (((((1u << ((_2705 >> 4u) & 15u)) + 4294967295u) & _2704) == 0u) || ((_2705 & 240u) == 0u))
        {
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
        }
        else
        {
            float _2785;
            float _2787;
            float _2789;
            float _2791;
            float _2793;
            float _2795;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            uint _2935 = 0u;
            uint _2944;
            bool _2945;
            for (;;)
            {
                _2944 = texelFetch(g_lightClassification, int((((_2698 << 5u) + (_2684 << 9u)) + (_2935 << 2u)) >> 2u)).x;
                _2945 = _2944 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2945)
                {
                    frontier_phi_66_pred = _2934;
                    frontier_phi_66_pred_1 = _2933;
                    frontier_phi_66_pred_2 = _2932;
                    frontier_phi_66_pred_3 = _2931;
                    frontier_phi_66_pred_4 = _2930;
                    frontier_phi_66_pred_5 = _2929;
                }
                else
                {
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    uint _3059;
                    _3053 = _2929;
                    _3054 = _2930;
                    _3055 = _2931;
                    _3056 = _2932;
                    _3057 = _2933;
                    _3058 = _2934;
                    _3059 = _2944;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    for (;;)
                    {
                        uint _3063 = uint(findLSB(_3059)) + (_2935 << 5u);
                        uint _3060 = (_3059 + 4294967295u) & _3059;
                        uint _3065 = _3063 * 48u;
                        vec4 _3079 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3065)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 3u)).x));
                        uint _3085 = (_3063 * 48u) + 4u;
                        vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3085)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 3u)).x));
                        uint _3104 = (_3063 * 48u) + 8u;
                        vec3 _3115 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3104)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 2u)).x));
                        float _3119 = _3079.x - _1781;
                        float _3120 = _3079.y - _1782;
                        float _3121 = _3079.z - _1783;
                        float _3122 = dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121));
                        float _3125 = inversesqrt(_3122);
                        float _3126 = _3125 * _3119;
                        float _3127 = _3125 * _3120;
                        float _3128 = _3125 * _3121;
                        float _3129 = dot(vec3(_667, _670, _673), vec3(_3126, _3127, _3128));
                        float _3134 = 1.0 - (_3122 * _3079.w);
                        float _4507 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3135 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                        float _3136 = sqrt(_3122) * _3098.w;
                        float _3139 = 1.39999997615814208984375 / (_3136 + 1.39999997615814208984375);
                        float _3140 = _3139 * _3139;
                        float _3143 = ((1.0 - _3140) * _3129) + _3140;
                        float _3146 = _3136 * _3136;
                        float _3150 = ((isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0))) * _3135) / ((_3146 * 0.699999988079071044921875) + 1.0);
                        float _3154 = (-0.0) - _1781;
                        float _3155 = (-0.0) - _1782;
                        float _3156 = (-0.0) - _1783;
                        float _3160 = inversesqrt(dot(vec3(_3154, _3155, _3156), vec3(_3154, _3155, _3156)));
                        float _3161 = _3160 * _3154;
                        float _3162 = _3160 * _3155;
                        float _3163 = _3160 * _3156;
                        float _3170 = exp2(log2(1.0 / ((_3146 * 3.5) + 5.0)) * 0.25);
                        float _3171 = 1.0 - _727;
                        float _3178 = sqrt(1.0 - ((1.0 - (_3171 * _3171)) * (1.0 - (_3170 * _3170))));
                        float _3179 = _3178 * _3178;
                        float _3180 = _3179 * _3179;
                        float _3181 = _3161 + _3126;
                        float _3182 = _3162 + _3127;
                        float _3183 = _3163 + _3128;
                        float _3187 = inversesqrt(dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183)));
                        float _3191 = dot(vec3(_667, _670, _673), vec3(_3161, _3162, _3163));
                        float _4523 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3194 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3195 = dot(vec3(_667, _670, _673), vec3(_3187 * _3181, _3187 * _3182, _3187 * _3183));
                        float _4534 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3198 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                        float _3202 = ((_3198 * _3198) * (_3180 + (-1.0))) + 1.0;
                        float _3203 = _3139 * _3179;
                        float _3204 = _3203 * _3203;
                        float _3207 = ((1.0 - _3204) * _3129) + _3204;
                        float _4545 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3208 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                        float _3209 = 1.0 - _3179;
                        float _3219 = (0.5 / (((_3208 * ((_3194 * _3209) + _3179)) + 9.9999999392252902907785028219223e-09) + (((_3208 * _3209) + _3179) * _3194))) * _3208;
                        float _4556 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3230 = (((_3180 * 3.1415927410125732421875) * (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0)))) / ((_3202 * _3202) * ((_3146 * 2.1991131305694580078125) + 3.141590118408203125))) * _3135;
                        _2988 = (_3150 * _3098.x) + _3056;
                        _2989 = (_3150 * _3098.y) + _3057;
                        _2990 = (_3150 * _3098.z) + _3058;
                        _2985 = (_3230 * _3115.x) + _3053;
                        _2986 = (_3230 * _3115.y) + _3054;
                        _2987 = (_3230 * _3115.z) + _3055;
                        if (_3060 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3053 = _2985;
                            _3054 = _2986;
                            _3055 = _2987;
                            _3056 = _2988;
                            _3057 = _2989;
                            _3058 = _2990;
                            _3059 = _3060;
                        }
                    }
                    frontier_phi_66_pred = _2990;
                    frontier_phi_66_pred_1 = _2989;
                    frontier_phi_66_pred_2 = _2988;
                    frontier_phi_66_pred_3 = _2987;
                    frontier_phi_66_pred_4 = _2986;
                    frontier_phi_66_pred_5 = _2985;
                }
                _2795 = frontier_phi_66_pred;
                _2793 = frontier_phi_66_pred_1;
                _2791 = frontier_phi_66_pred_2;
                _2789 = frontier_phi_66_pred_3;
                _2787 = frontier_phi_66_pred_4;
                _2785 = frontier_phi_66_pred_5;
                uint _2936 = _2935 + 1u;
                if (_2936 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2929 = _2785;
                    _2930 = _2787;
                    _2931 = _2789;
                    _2932 = _2791;
                    _2933 = _2793;
                    _2934 = _2795;
                    _2935 = _2936;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
        }
        uvec4 _2798 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2799 = _2798.z;
        uint _2801 = (_2799 >> 8u) & 15u;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        if (((4294967295u << _2801) & _2704) == 0u)
        {
            _2897 = _2784;
            _2899 = _2786;
            _2901 = _2788;
            _2903 = _2790;
            _2905 = _2792;
            _2907 = _2794;
        }
        else
        {
            float _2922 = inversesqrt(dot(vec3(_1781, _1782, _1783), vec3(_1781, _1782, _1783)));
            float _2923 = _2922 * _1781;
            float _2924 = _2922 * _1782;
            float _2925 = _2922 * _1783;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2801 < ((_2799 >> 12u) & 15u))
            {
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _2906;
                float _2908;
                float _3036 = _2784;
                float _3037 = _2786;
                float _3038 = _2788;
                float _3039 = _2790;
                float _3040 = _2792;
                float _3041 = _2794;
                uint _3042 = _2801;
                uint _3051;
                bool _3052;
                for (;;)
                {
                    _3051 = texelFetch(g_lightClassification, int((((_2698 << 5u) + (_2684 << 9u)) + (_3042 << 2u)) >> 2u)).x;
                    _3052 = _3051 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3052)
                    {
                        frontier_phi_72_pred = _3041;
                        frontier_phi_72_pred_1 = _3040;
                        frontier_phi_72_pred_2 = _3039;
                        frontier_phi_72_pred_3 = _3038;
                        frontier_phi_72_pred_4 = _3037;
                        frontier_phi_72_pred_5 = _3036;
                    }
                    else
                    {
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3248 = _3036;
                        float _3249 = _3037;
                        float _3250 = _3038;
                        float _3251 = _3039;
                        float _3252 = _3040;
                        float _3253 = _3041;
                        uint _3254 = _3051;
                        uint _3255;
                        vec4 _3280;
                        float _3281;
                        vec4 _3296;
                        vec3 _3308;
                        vec4 _3323;
                        vec4 _3338;
                        float _3384;
                        bool _3385;
                        for (;;)
                        {
                            uint _3265 = ((_3042 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3254));
                            _3255 = (_3254 + 4294967295u) & _3254;
                            uint _3267 = _3265 * 40u;
                            _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            _3281 = _3280.w;
                            uint _3283 = (_3265 * 40u) + 4u;
                            _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            uint _3298 = (_3265 * 40u) + 8u;
                            _3308 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x));
                            uint _3310 = (_3265 * 40u) + 16u;
                            _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            uint _3325 = (_3265 * 40u) + 20u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            uint _3340 = (_3265 * 40u) + 24u;
                            vec4 _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            uint _3359 = (_3265 * 40u) + 28u;
                            vec4 _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            _3384 = fma(_1783, _3372.z, fma(_1782, _3372.y, _3372.x * _1781)) + _3372.w;
                            _3385 = !((fma(_1783, _3353.z, fma(_1782, _3353.y, _3353.x * _1781)) + _3353.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3385)
                            {
                                float _3412 = _3280.x - _1781;
                                float _3413 = _3280.y - _1782;
                                float _3414 = _3280.z - _1783;
                                float _3415 = dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414));
                                float _3418 = inversesqrt(_3415);
                                float _3419 = _3418 * _3412;
                                float _3420 = _3418 * _3413;
                                float _3421 = _3418 * _3414;
                                float _3425 = 1.0 - (_3415 / (_3281 * _3281));
                                float _4567 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3426 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3430 = sqrt(_3415) * _3296.w;
                                float _3432 = 1.39999997615814208984375 / (_3430 + 1.39999997615814208984375);
                                float _3433 = _3432 * _3432;
                                float _3436 = ((1.0 - _3433) * dot(vec3(_3419, _3420, _3421), vec3(_667, _670, _673))) + _3433;
                                float _3439 = _3430 * _3430;
                                float _3443 = (fma(_1783, _3323.z, fma(_1782, _3323.y, _3323.x * _1781)) + _3323.w) / _3384;
                                float _3444 = (fma(_1783, _3338.z, fma(_1782, _3338.y, _3338.x * _1781)) + _3338.w) / _3384;
                                float _3448 = 1.0 - dot(vec2(_3443, _3444), vec2(_3443, _3444));
                                float _4583 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3449 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3450 = _3449 * (((isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0))) * _3426) / ((_3439 * 0.699999988079071044921875) + 1.0));
                                float _3462 = exp2(log2(1.0 / ((_3439 * 3.5) + 5.0)) * 0.25);
                                float _3463 = 1.0 - _727;
                                float _3470 = sqrt(1.0 - ((1.0 - (_3463 * _3463)) * (1.0 - (_3462 * _3462))));
                                float _3471 = _3470 * _3470;
                                float _3472 = _3471 * _3471;
                                float _3473 = _3419 - _2923;
                                float _3474 = _3420 - _2924;
                                float _3475 = _3421 - _2925;
                                float _3479 = inversesqrt(dot(vec3(_3473, _3474, _3475), vec3(_3473, _3474, _3475)));
                                float _3483 = dot(vec3(_667, _670, _673), vec3((-0.0) - _2923, (-0.0) - _2924, (-0.0) - _2925));
                                float _4594 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3486 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3487 = dot(vec3(_667, _670, _673), vec3(_3479 * _3473, _3479 * _3474, _3479 * _3475));
                                float _4605 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3490 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3494 = ((_3490 * _3490) * (_3472 + (-1.0))) + 1.0;
                                float _3495 = _3432 * _3471;
                                float _3496 = _3495 * _3495;
                                float _3502 = ((1.0 - _3496) * dot(vec3(_667, _670, _673), vec3(_3419, _3420, _3421))) + _3496;
                                float _4616 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3503 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                                float _3504 = 1.0 - _3471;
                                float _3514 = (0.5 / (((_3503 * ((_3486 * _3504) + _3471)) + 9.9999999392252902907785028219223e-09) + (((_3503 * _3504) + _3471) * _3486))) * _3503;
                                float _4627 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3524 = (_3449 * _3426) * (((_3472 * 3.1415927410125732421875) * (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0)))) / ((_3494 * _3494) * ((_3439 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3450 * _3296.y;
                                frontier_phi_78_pred_1 = _3450 * _3296.x;
                                frontier_phi_78_pred_2 = _3524 * _3308.z;
                                frontier_phi_78_pred_3 = _3524 * _3308.y;
                                frontier_phi_78_pred_4 = _3524 * _3308.x;
                                frontier_phi_78_pred_5 = _3450 * _3296.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3532 = frontier_phi_78_pred;
                            _3531 = frontier_phi_78_pred_1;
                            _3530 = frontier_phi_78_pred_2;
                            _3529 = frontier_phi_78_pred_3;
                            _3528 = frontier_phi_78_pred_4;
                            _3533 = frontier_phi_78_pred_5;
                            _3238 = _3531 + _3251;
                            _3239 = _3532 + _3252;
                            _3240 = _3533 + _3253;
                            _3235 = _3528 + _3248;
                            _3236 = _3529 + _3249;
                            _3237 = _3530 + _3250;
                            if (_3255 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3255;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3240;
                        frontier_phi_72_pred_1 = _3239;
                        frontier_phi_72_pred_2 = _3238;
                        frontier_phi_72_pred_3 = _3237;
                        frontier_phi_72_pred_4 = _3236;
                        frontier_phi_72_pred_5 = _3235;
                    }
                    _2908 = frontier_phi_72_pred;
                    _2906 = frontier_phi_72_pred_1;
                    _2904 = frontier_phi_72_pred_2;
                    _2902 = frontier_phi_72_pred_3;
                    _2900 = frontier_phi_72_pred_4;
                    _2898 = frontier_phi_72_pred_5;
                    uint _3043 = _3042 + 1u;
                    if (_3043 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3036 = _2898;
                        _3037 = _2900;
                        _3038 = _2902;
                        _3039 = _2904;
                        _3040 = _2906;
                        _3041 = _2908;
                        _3042 = _3043;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2908;
                frontier_phi_60_61_ladder_1 = _2906;
                frontier_phi_60_61_ladder_2 = _2902;
                frontier_phi_60_61_ladder_3 = _2900;
                frontier_phi_60_61_ladder_4 = _2898;
                frontier_phi_60_61_ladder_5 = _2904;
            }
            else
            {
                frontier_phi_60_61_ladder = _2794;
                frontier_phi_60_61_ladder_1 = _2792;
                frontier_phi_60_61_ladder_2 = _2788;
                frontier_phi_60_61_ladder_3 = _2786;
                frontier_phi_60_61_ladder_4 = _2784;
                frontier_phi_60_61_ladder_5 = _2790;
            }
            _2897 = frontier_phi_60_61_ladder_4;
            _2899 = frontier_phi_60_61_ladder_3;
            _2901 = frontier_phi_60_61_ladder_2;
            _2903 = frontier_phi_60_61_ladder_5;
            _2905 = frontier_phi_60_61_ladder_1;
            _2907 = frontier_phi_60_61_ladder;
        }
        float _2912 = isnan(1.0) ? _711 : (isnan(_711) ? 1.0 : min(_711, 1.0));
        _2717 = (_2912 * _2903) + _2248;
        _2719 = (_2912 * _2905) + _2250;
        _2721 = (_2912 * _2907) + _2252;
        _2723 = ((_2897 * 0.039999999105930328369140625) * _2912) + _2571;
        _2725 = ((_2899 * 0.039999999105930328369140625) * _2912) + _2573;
        _2727 = ((_2901 * 0.039999999105930328369140625) * _2912) + _2575;
    }
    else
    {
        _2717 = _2248;
        _2719 = _2250;
        _2721 = _2252;
        _2723 = _2571;
        _2725 = _2573;
        _2727 = _2575;
    }
    float _4643 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _4654 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _4665 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    uint _2747 = _254 + 6u;
    float _2755 = _645 / cbSceneParam._m0[86u].x;
    float _2756 = _646 / cbSceneParam._m0[86u].y;
    vec4 _2770 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2755, _2756, (log2((isnan(cbSceneParam._m0[77u].w) ? _579 : (isnan(_579) ? cbSceneParam._m0[77u].w : min(_579, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2772 = _2770.x;
    float _2773 = _2770.y;
    float _2774 = _2770.z;
    float _2775 = _2770.w;
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    if (_579 > cbSceneParam._m0[78u].w)
    {
        float _2809 = isnan(_579) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _579 : min(cbSceneParam._m0[80u].w, _579));
        float _2810 = _2809 / _579;
        float _2821 = _2810 * _630;
        float _2822 = _631 * _2810;
        float _2823 = (-0.0) - _2822;
        float _2825 = _2810 * _632;
        float _2827 = (cbSceneParam._m0[77u].w * _2823) / _2809;
        float _2828 = _2827 + cbSceneParam._m0[79u].w;
        float _2829 = cbSceneParam._m0[79u].w - _2822;
        float _2835 = sqrt(((_2821 * _2821) + (_2822 * _2822)) + (_2825 * _2825));
        float _2838 = (1.0 - (cbSceneParam._m0[77u].w / _2809)) * _2835;
        float _2843 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2845 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2998;
        if (abs((_2823 - _2827) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2998 = ((((_2828 > 0.0) ? exp2(_2843 * _2828) : (2.0 - exp2(_2845 * _2828))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2838;
        }
        else
        {
            float _2958 = 1.0 / cbSceneParam._m0[80u].x;
            float _2959 = isnan(_2829) ? _2828 : (isnan(_2828) ? _2829 : max(_2828, _2829));
            float _2960 = isnan(_2829) ? _2828 : (isnan(_2828) ? _2829 : min(_2828, _2829));
            float _2969 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : min(_2959, 0.0));
            float _2970 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : min(_2960, 0.0));
            _2998 = ((abs(_2835 / _2823) * cbSceneParam._m0[80u].y) * ((((_2969 - _2970) * 2.0) - ((exp2(_2843 * (isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0)))) - exp2(_2843 * (isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0))))) * _2958)) - ((exp2(_2845 * _2969) - exp2(_2845 * _2970)) * _2958))) + (_2838 * cbSceneParam._m0[80u].z);
        }
        vec4 _3000 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2755, _2756, 1.0), 0.0);
        float _3009 = exp2((_2998 * (-1.44269502162933349609375)) * (1.0 - _3000.w));
        float _3010 = log2(_3009);
        float _3026 = log2(_2775);
        _2847 = (exp2(_3026 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].x)) * _3000.x) / cbSceneParam._m0[78u].x)) + _2772;
        _2849 = (exp2(_3026 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].y)) * _3000.y) / cbSceneParam._m0[78u].y)) + _2773;
        _2851 = (exp2(_3026 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].z)) * _3000.z) / cbSceneParam._m0[78u].z)) + _2774;
        _2853 = _3009 * _2775;
    }
    else
    {
        _2847 = _2772;
        _2849 = _2773;
        _2851 = _2774;
        _2853 = _2775;
    }
    float _2865 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2866 = _2865 == 3.0;
    float _2867 = log2(_2853);
    float _2874 = exp2(_2867 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2717 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _711))) + ((_2723 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _1516)) * cbPerFrame._m0[3u].x));
    float _2875 = exp2(_2867 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2719 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _711))) + ((_2725 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _1516)) * cbPerFrame._m0[3u].x));
    float _2876 = exp2(_2867 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2721 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _711))) + ((_2727 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1516)) * cbPerFrame._m0[3u].x));
    float _2885 = (_2865 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2885 * (_2866 ? _2874 : (_2874 + (cbSceneParam._m0[72u].w * _2847)));
    SV_Target.y = _2885 * (_2866 ? _2875 : (_2875 + (cbSceneParam._m0[72u].w * _2849)));
    SV_Target.z = _2885 * (_2866 ? _2876 : (_2876 + (cbSceneParam._m0[72u].w * _2851)));
    SV_Target.w = cbInstanceData._m0[_2747].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2747].w;
}


