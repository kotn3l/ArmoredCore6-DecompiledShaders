#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1334;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _361 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _363 = _361.x;
    float _373 = dot(vec4(_363, _361.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _390 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_363 - _373) * cbMtdParam._m0[24u].x) + _373) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3639 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _398 = (_391 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _399 = (_391 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _400 = (_391 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _417 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _437 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _439 = _437.x;
    float _449 = dot(vec4(_439, _437.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _463 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_439 - _449) * cbMtdParam._m0[24u].x) + _449) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3650 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _464 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _471 = (_464 * ((_417.x * cbMtdParam._m0[13u].x) - _398)) + _398;
    float _472 = (_464 * ((_417.y * cbMtdParam._m0[13u].y) - _399)) + _399;
    float _473 = (_464 * ((_417.z * cbMtdParam._m0[13u].z) - _400)) + _400;
    vec4 _490 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _513 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _530 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _532 = _530.x;
    float _533 = _530.y;
    float _534 = _530.z;
    float _541 = ((_513.x - _532) * _391) + _532;
    float _542 = ((_513.y - _533) * _391) + _533;
    float _543 = ((_513.z - _534) * _391) + _534;
    vec4 _555 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _568 = ((_555.z - _543) * _464) + _543;
    float _571 = ((((_555.x - _541) * _464) + _541) * 2.0) + (-1.0);
    float _572 = ((((_555.y - _542) * _464) + _542) * 2.0) + (-1.0);
    float _573 = dot(vec2(_571, _572), vec2(_571, _572));
    float _3661 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _578 = sqrt(1.0 - (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))));
    vec4 _591 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _609 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _611 = _609.x;
    float _612 = 1.0 - _611;
    float _618 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _621 = ((isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : min(_618, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _630 = (_621 - ((((((_611 - _612) * cbMtdParam._m0[24u].z) + _612) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _621))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3682 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _631 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _638 = (_631 * (cbMtdParam._m0[17u].x - _471)) + _471;
    float _639 = (_631 * (cbMtdParam._m0[17u].y - _472)) + _472;
    float _640 = (_631 * (cbMtdParam._m0[17u].z - _473)) + _473;
    vec4 _652 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _654 = _652.x;
    float _655 = 1.0 - _654;
    float _682 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_654 - _655) * cbMtdParam._m0[24u].w) + _655) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3693 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _683 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _691 = ((((cbMtdParam._m0[10u].x - _638) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _683) + _638;
    float _692 = ((((cbMtdParam._m0[10u].y - _639) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _683) + _639;
    float _693 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _640)) * _683) + _640;
    float _698 = (((_490.z - _568) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _568;
    vec4 _712 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _719 = (_712.x * 2.0) + (-1.0);
    float _720 = (_712.y * 2.0) + (-1.0);
    float _721 = dot(vec2(_719, _720), vec2(_719, _720));
    float _3704 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _729 = (_631 * (_712.z - _698)) + _698;
    float _732 = ((cbMtdParam._m0[23u].y - _729) * _683) + _729;
    vec4 _751 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _757 = (_751.x * 2.0) + (-1.0);
    float _758 = (_751.y * 2.0) + (-1.0);
    float _759 = dot(vec2(_757, _758), vec2(_757, _758));
    float _3715 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _769 = _571 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_490.x * 2.0) + (-1.0)));
    float _770 = _572 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_490.y * 2.0) + (-1.0)));
    float _782 = (((_719 - _769) + (cbMtdParam._m0[21u].x * _769)) * _631) + _769;
    float _783 = (((_720 - _770) + (cbMtdParam._m0[21u].x * _770)) * _631) + _770;
    float _784 = (_631 * (sqrt(1.0 - (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0)))) - _578)) + _578;
    float _795 = (((_757 - _782) + (_782 * cbMtdParam._m0[22u].z)) * _683) + _782;
    float _796 = (((_758 - _783) + (_783 * cbMtdParam._m0[22u].z)) * _683) + _783;
    float _797 = ((sqrt(1.0 - (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0)))) - _784) * _683) + _784;
    float _799 = cbMtdParam._m0[22u].x + _591.w;
    float _802 = fma(_797, _242 * NORMAL.x, fma(_796, _249 * TANGENT.x, (_235 * _227) * _795));
    float _805 = fma(_797, _242 * NORMAL.y, fma(_796, _249 * TANGENT.y, (_235 * _228) * _795));
    float _808 = fma(_797, _242 * NORMAL.z, fma(_796, _249 * TANGENT.z, (_235 * _229) * _795));
    float _812 = inversesqrt(dot(vec3(_802, _805, _808), vec3(_802, _805, _808)));
    float _813 = _812 * _802;
    float _814 = _812 * _805;
    float _815 = _812 * _808;
    float _3726 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _816 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _3737 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _3748 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _3759 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _3770 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _834 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _875 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _885 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _875);
    float _886 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _875);
    float _887 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _875);
    float _891 = inversesqrt(dot(vec3(_885, _886, _887), vec3(_885, _886, _887)));
    float _892 = _885 * _891;
    float _893 = _886 * _891;
    float _894 = _887 * _891;
    float _900 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _901 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _919 = fma(_815, cbSceneParam._m0[5u].z, fma(_814, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _813));
    float _922 = fma(_815, cbSceneParam._m0[6u].z, fma(_814, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _813));
    float _925 = fma(_815, cbSceneParam._m0[7u].z, fma(_814, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _813));
    uint _939 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _945 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0)))) * cbInstanceData._m0[_939].x;
    float _946 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) * cbInstanceData._m0[_939].y;
    float _947 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0)))) * cbInstanceData._m0[_939].z;
    float _3781 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _948 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _3792 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _949 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _3803 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _950 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    vec4 _959 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _900, cbSceneParam._m0[86u].y * _901));
    float _963 = ((isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * TEXCOORD_5.w) * _959.x;
    float _964 = dot(vec3(_813, _814, _815), vec3(_892, _893, _894));
    float _967 = _964 * 2.0;
    float _971 = (_967 * _813) - _892;
    float _972 = (_967 * _814) - _893;
    float _973 = (_967 * _815) - _894;
    float _977 = abs(dot(vec3(_892, _893, _894), vec3(_813, _814, _815)));
    float _3814 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _979 = sqrt(_816);
    float _992 = exp2((_979 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_979 * 3.0));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1333;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1058 = fma(_1032, cbModelParam._m0[26u].z, fma(_1028, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1024));
        float _1062 = fma(_1032, cbModelParam._m0[27u].z, fma(_1028, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1024));
        float _1066 = fma(_1032, cbModelParam._m0[28u].z, fma(_1028, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1024));
        float _1091 = _1024 + _813;
        float _1092 = _1028 + _814;
        float _1093 = _1032 + _815;
        float _1103 = fma(_1093, cbModelParam._m0[26u].z, fma(_1092, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1091)) - _1058;
        float _1104 = fma(_1093, cbModelParam._m0[27u].z, fma(_1092, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1091)) - _1062;
        float _1105 = fma(_1093, cbModelParam._m0[28u].z, fma(_1092, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1091)) - _1066;
        float _1109 = inversesqrt(dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105)));
        float _1122 = ((_1109 * _1103) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1058 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1109 * _1104) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1062 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1109 * _1105) / cbModelParam._m0[34u].z) + ((((((_1066 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1122, _1123, _1124), 0.0);
        float _1161 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1127.x + (-0.5));
        float _1163 = _1161 * (_1127.y + (-0.5));
        float _1164 = _1161 * (_1127.z + (-0.5));
        float _1171 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1134.x + (-0.5));
        float _1173 = _1171 * (_1134.y + (-0.5));
        float _1174 = _1171 * (_1134.z + (-0.5));
        float _1181 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1141.x + (-0.5));
        float _1183 = _1181 * (_1141.y + (-0.5));
        float _1184 = _1181 * (_1141.z + (-0.5));
        float _1191 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1148.x + (-0.5));
        float _1193 = _1191 * (_1148.y + (-0.5));
        float _1194 = _1191 * (_1148.z + (-0.5));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = _1162 * 0.5;
        float _1199 = _1172 * 0.5;
        float _1200 = _1182 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1215 = (dot(vec3(_813, _814, _815), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3840 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1225 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3851 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3862 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1227 + 1.0))) + _1232) * _1195;
        float _1242 = _1163 * 0.5;
        float _1243 = _1173 * 0.5;
        float _1244 = _1183 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_813, _814, _815), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3873 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3884 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3895 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1269 + 1.0))) + _1274) * _1196;
        float _1284 = _1164 * 0.5;
        float _1285 = _1174 * 0.5;
        float _1286 = _1184 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_813, _814, _815), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _3906 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _3917 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _3928 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1311 + 1.0))) + _1316) * _1197;
        _1333 = _1164;
        _1335 = _1163;
        _1336 = _1162;
        _1337 = _1174;
        _1338 = _1173;
        _1339 = _1172;
        _1340 = _1184;
        _1341 = _1183;
        _1342 = _1182;
        _1343 = _1197;
        _1344 = _1196;
        _1345 = _1195;
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
    }
    else
    {
        _1333 = _1334;
        _1335 = _1334;
        _1336 = _1334;
        _1337 = _1334;
        _1338 = _1334;
        _1339 = _1334;
        _1340 = _1334;
        _1341 = _1334;
        _1342 = _1334;
        _1343 = _1334;
        _1344 = _1334;
        _1345 = _1334;
        _1346 = 0.0;
        _1347 = 0.0;
        _1348 = 0.0;
    }
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1372 = fma(_1032, cbModelParam._m0[30u].z, fma(_1028, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1024));
        float _1376 = fma(_1032, cbModelParam._m0[31u].z, fma(_1028, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1024));
        float _1380 = fma(_1032, cbModelParam._m0[32u].z, fma(_1028, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1024));
        float _1403 = _1024 + _813;
        float _1404 = _1028 + _814;
        float _1405 = _1032 + _815;
        float _1415 = fma(_1405, cbModelParam._m0[30u].z, fma(_1404, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1403)) - _1372;
        float _1416 = fma(_1405, cbModelParam._m0[31u].z, fma(_1404, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1403)) - _1376;
        float _1417 = fma(_1405, cbModelParam._m0[32u].z, fma(_1404, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1403)) - _1380;
        float _1421 = inversesqrt(dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417)));
        float _1434 = ((_1421 * _1415) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1372 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1435 = ((_1421 * _1416) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1376 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1436 = ((_1421 * _1417) / cbModelParam._m0[35u].z) + ((((((_1380 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        float _1471 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1438.x + (-0.5));
        float _1473 = _1471 * (_1438.y + (-0.5));
        float _1474 = _1471 * (_1438.z + (-0.5));
        float _1481 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1445.x + (-0.5));
        float _1483 = _1481 * (_1445.y + (-0.5));
        float _1484 = _1481 * (_1445.z + (-0.5));
        float _1491 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1452.x + (-0.5));
        float _1493 = _1491 * (_1452.y + (-0.5));
        float _1494 = _1491 * (_1452.z + (-0.5));
        float _1501 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1459.x + (-0.5));
        float _1503 = _1501 * (_1459.y + (-0.5));
        float _1504 = _1501 * (_1459.z + (-0.5));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = _1472 * 0.5;
        float _1509 = _1482 * 0.5;
        float _1510 = _1492 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1524 = (dot(vec3(_813, _814, _815), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1533 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _3991 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1535 + 1.0))) + _1540) * _1505;
        float _1550 = _1473 * 0.5;
        float _1551 = _1483 * 0.5;
        float _1552 = _1493 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_813, _814, _815), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4002 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4013 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4024 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1577 + 1.0))) + _1582) * _1506;
        float _1592 = _1474 * 0.5;
        float _1593 = _1484 * 0.5;
        float _1594 = _1494 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_813, _814, _815), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4035 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4046 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4057 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_1619 + 1.0))) + _1624) * _1507;
        _1641 = _1474;
        _1642 = _1473;
        _1643 = _1472;
        _1644 = _1484;
        _1645 = _1483;
        _1646 = _1482;
        _1647 = _1494;
        _1648 = _1493;
        _1649 = _1492;
        _1650 = _1507;
        _1651 = _1506;
        _1652 = _1505;
        _1653 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
        _1654 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
    }
    else
    {
        _1641 = _1334;
        _1642 = _1334;
        _1643 = _1334;
        _1644 = _1334;
        _1645 = _1334;
        _1646 = _1334;
        _1647 = _1334;
        _1648 = _1334;
        _1649 = _1334;
        _1650 = _1334;
        _1651 = _1334;
        _1652 = _1334;
        _1653 = 0.0;
        _1654 = 0.0;
        _1655 = 0.0;
    }
    float _1665 = (cbModelParam._m0[1u].x * (_1653 - _1346)) + _1346;
    float _1666 = (cbModelParam._m0[1u].x * (_1654 - _1347)) + _1347;
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1348)) + _1348;
    float _1688 = fma(_1667, cbSceneParam._m0[89u].z, fma(_1666, cbSceneParam._m0[89u].y, _1665 * cbSceneParam._m0[89u].x));
    float _1691 = fma(_1667, cbSceneParam._m0[90u].z, fma(_1666, cbSceneParam._m0[90u].y, _1665 * cbSceneParam._m0[90u].x));
    float _1694 = fma(_1667, cbSceneParam._m0[91u].z, fma(_1666, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1665));
    float _1709 = _971 * 0.5;
    float _1710 = _972 * 0.5;
    float _1711 = _973 * 0.5;
    float _1712 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1715 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1642, _1645, _1648, _1651));
    float _1718 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1641, _1644, _1647, _1650));
    float _1752;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1725 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1333, _1337, _1340, _1343));
        float _1729 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1335, _1338, _1341, _1344));
        float _1733 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1336, _1339, _1342, _1345));
        float _1740 = dot(vec4(cbModelParam._m0[39u]), vec4(_1709, _1710, _1711, 1.0));
        _1752 = dot(vec3(isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1740) ? 0.0 : (isnan(0.0) ? _1740 : max(0.0, _1740))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1752 = 1.0;
    }
    float _1763;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1754 = dot(vec4(cbModelParam._m0[40u]), vec4(_1709, _1710, _1711, 1.0));
        _1763 = dot(vec3(isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1754) ? 0.0 : (isnan(0.0) ? _1754 : max(0.0, _1754))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1763 = 1.0;
    }
    float _1767 = (_1763 * cbModelParam._m0[1u].x) + (_1752 * (1.0 - cbModelParam._m0[1u].x));
    float _1777 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _816);
    float _1778 = isnan(_1777) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1777 : min(cbModelParam._m0[25u].z, _1777));
    float _1859;
    float _1861;
    float _1863;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1826 = fma(_1032, cbModelParam._m0[13u].z, fma(_1028, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1024)) + cbModelParam._m0[13u].w;
        float _1830 = fma(_1032, cbModelParam._m0[14u].z, fma(_1028, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1024)) + cbModelParam._m0[14u].w;
        float _1834 = fma(_1032, cbModelParam._m0[15u].z, fma(_1028, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1024)) + cbModelParam._m0[15u].w;
        float _1837 = fma(_973, cbModelParam._m0[13u].z, fma(_972, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _971));
        float _1840 = fma(_973, cbModelParam._m0[14u].z, fma(_972, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _971));
        float _1843 = fma(_973, cbModelParam._m0[15u].z, fma(_972, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _971));
        float _1871;
        if (_1837 > 0.0)
        {
            _1871 = abs((1.0 - _1826) / _1837);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1826 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1871 = frontier_phi_14_12_ladder;
        }
        float _2072;
        if (_1840 > 0.0)
        {
            _2072 = abs((1.0 - _1830) / _1840);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1830 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2072 = frontier_phi_23_19_ladder;
        }
        float _2315;
        if (_1843 > 0.0)
        {
            _2315 = abs((1.0 - _1834) / _1843);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1834 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2315 = frontier_phi_35_30_ladder;
        }
        float _2317 = isnan(_2072) ? _1871 : (isnan(_1871) ? _2072 : min(_1871, _2072));
        float _2318 = isnan(_2315) ? _2317 : (isnan(_2317) ? _2315 : min(_2317, _2315));
        float _2322 = (_2318 * _1837) + _1826;
        float _2323 = (_2318 * _1840) + _1830;
        float _2324 = (_2318 * _1843) + _1834;
        float _2325 = _2318 * 9.9999997473787516355514526367188e-05;
        float _2327 = (-1.0) - _2325;
        float _2329 = _2325 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2324 > _2329) || ((_2324 < _2327) || ((_2323 > _2329) || ((_2323 < _2327) || ((_2322 < _2327) || (_2322 > _2329))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2448 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2324, cbModelParam._m0[9u].z, fma(_2323, cbModelParam._m0[9u].y, _2322 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2324, cbModelParam._m0[10u].z, fma(_2323, cbModelParam._m0[10u].y, _2322 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2324, cbModelParam._m0[11u].z, fma(_2323, cbModelParam._m0[11u].y, _2322 * cbModelParam._m0[11u].x))), _1778);
            frontier_phi_13_35_ladder = _2448.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2448.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2448.x * cbModelParam._m0[1u].y;
        }
        _1859 = frontier_phi_13_35_ladder_2;
        _1861 = frontier_phi_13_35_ladder_1;
        _1863 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1847 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_971, _972, _973), _1778);
        _1859 = _1847.x * cbModelParam._m0[1u].y;
        _1861 = _1847.y * cbModelParam._m0[1u].y;
        _1863 = _1847.z * cbModelParam._m0[1u].y;
    }
    float _1867 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _816);
    float _1868 = isnan(_1867) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1867 : min(cbModelParam._m0[25u].w, _1867));
    float _1958;
    float _1960;
    float _1962;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1922 = fma(_1032, cbModelParam._m0[21u].z, fma(_1028, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1024)) + cbModelParam._m0[21u].w;
        float _1926 = fma(_1032, cbModelParam._m0[22u].z, fma(_1028, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1024)) + cbModelParam._m0[22u].w;
        float _1930 = fma(_1032, cbModelParam._m0[23u].z, fma(_1028, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1024)) + cbModelParam._m0[23u].w;
        float _1933 = fma(_973, cbModelParam._m0[21u].z, fma(_972, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _971));
        float _1936 = fma(_973, cbModelParam._m0[22u].z, fma(_972, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _971));
        float _1939 = fma(_973, cbModelParam._m0[23u].z, fma(_972, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _971));
        float _2077;
        if (_1933 > 0.0)
        {
            _2077 = abs((1.0 - _1922) / _1933);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1922 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2077 = frontier_phi_25_21_ladder;
        }
        float _2342;
        if (_1936 > 0.0)
        {
            _2342 = abs((1.0 - _1926) / _1936);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1926 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2342 = frontier_phi_37_32_ladder;
        }
        float _2547;
        if (_1939 > 0.0)
        {
            _2547 = abs((1.0 - _1930) / _1939);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1930 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2547 = frontier_phi_46_43_ladder;
        }
        float _2549 = isnan(_2342) ? _2077 : (isnan(_2077) ? _2342 : min(_2077, _2342));
        float _2550 = isnan(_2547) ? _2549 : (isnan(_2549) ? _2547 : min(_2549, _2547));
        float _2554 = (_2550 * _1933) + _1922;
        float _2555 = (_2550 * _1936) + _1926;
        float _2556 = (_2550 * _1939) + _1930;
        float _2557 = _2550 * 9.9999997473787516355514526367188e-05;
        float _2558 = (-1.0) - _2557;
        float _2560 = _2557 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2556 > _2560) || ((_2556 < _2558) || ((_2555 > _2560) || ((_2555 < _2558) || ((_2554 < _2558) || (_2554 > _2560))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2755 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2556, cbModelParam._m0[17u].z, fma(_2555, cbModelParam._m0[17u].y, _2554 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2556, cbModelParam._m0[18u].z, fma(_2555, cbModelParam._m0[18u].y, _2554 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2556, cbModelParam._m0[19u].z, fma(_2555, cbModelParam._m0[19u].y, _2554 * cbModelParam._m0[19u].x))), _1868);
            frontier_phi_22_46_ladder = _2755.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2755.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2755.x * cbModelParam._m0[1u].z;
        }
        _1958 = frontier_phi_22_46_ladder_2;
        _1960 = frontier_phi_22_46_ladder_1;
        _1962 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1942 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_971, _972, _973), _1868);
        _1958 = _1942.x * cbModelParam._m0[1u].z;
        _1960 = _1942.y * cbModelParam._m0[1u].z;
        _1962 = _1942.z * cbModelParam._m0[1u].z;
    }
    float _1974 = ((((1.0 - _992) * ((_979 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_992 * _979)) * _963;
    float _1975 = _1974 * ((cbModelParam._m0[1u].w * (_1958 - _1859)) + _1859);
    float _1976 = _1974 * ((cbModelParam._m0[1u].w * (_1960 - _1861)) + _1861);
    float _1977 = _1974 * ((cbModelParam._m0[1u].w * (_1962 - _1863)) + _1863);
    float _1980 = fma(_1977, cbSceneParam._m0[89u].z, fma(_1976, cbSceneParam._m0[89u].y, _1975 * cbSceneParam._m0[89u].x));
    float _1983 = fma(_1977, cbSceneParam._m0[90u].z, fma(_1976, cbSceneParam._m0[90u].y, _1975 * cbSceneParam._m0[90u].x));
    float _1986 = fma(_1977, cbSceneParam._m0[91u].z, fma(_1976, cbSceneParam._m0[91u].y, _1975 * cbSceneParam._m0[91u].x));
    uvec4 _1996 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _1998 = _1996.x * 14u;
    uint _1999 = _1998 + 13u;
    float _2006 = _963 + (-1.0);
    float _2011 = (cbLight._m0[_1999].x * _2006) + 1.0;
    float _2012 = (cbLight._m0[_1999].y * _2006) + 1.0;
    float _2013 = (cbLight._m0[_1999].z * _2006) + 1.0;
    float _2014 = (cbLight._m0[_1999].w * _2006) + 1.0;
    uint _2015 = _1998 + 5u;
    float _2021 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
    uint _2025 = _1998 + 4u;
    float _2031 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
    uint _2035 = _1998 | 1u;
    float _2046 = dot(vec3(cbLight._m0[_1998].xyz), vec3(_813, _814, _815));
    float _2049 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_813, _814, _815));
    float _4193 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _4204 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2054 = (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * 0.3183098733425140380859375;
    float _2056 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * 0.3183098733425140380859375;
    float _2063 = ((cbLight._m0[_2015].x * _2021) * _2056) + ((cbLight._m0[_2025].x * _2031) * _2054);
    float _2064 = ((_2021 * cbLight._m0[_2015].y) * _2056) + ((_2031 * cbLight._m0[_2025].y) * _2054);
    float _2065 = ((_2021 * cbLight._m0[_2015].z) * _2056) + ((_2031 * cbLight._m0[_2025].z) * _2054);
    uvec4 _2069 = floatBitsToUint(cbLight._m0[_1998 + 12u]);
    bool _2071 = _2069.x == 0u;
    float _2082;
    float _2084;
    float _2086;
    if (_2071)
    {
        _2082 = _2063;
        _2084 = _2064;
        _2086 = _2065;
    }
    else
    {
        uint _2090 = _1998 + 6u;
        float _2106 = (dot(vec3(cbLight._m0[_1998 + 2u].xyz), vec3(_813, _814, _815)) * 0.5) + 0.5;
        float _2107 = _2106 * _2106;
        float _4215 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2108 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _2109 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
        _2082 = (((cbLight._m0[_2090].x * 0.3183098733425140380859375) * _2108) * _2109) + _2063;
        _2084 = (((cbLight._m0[_2090].y * 0.3183098733425140380859375) * _2108) * _2109) + _2064;
        _2086 = (((cbLight._m0[_2090].z * 0.3183098733425140380859375) * _2108) * _2109) + _2065;
    }
    bool _2089 = _2069.y == 0u;
    float _2127;
    float _2129;
    float _2131;
    if (_2089)
    {
        _2127 = _2082;
        _2129 = _2084;
        _2131 = _2086;
    }
    else
    {
        uint _2286 = _1998 + 7u;
        float _2302 = (dot(vec3(cbLight._m0[_1998 + 3u].xyz), vec3(_813, _814, _815)) * 0.5) + 0.5;
        float _2303 = _2302 * _2302;
        float _4231 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2304 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2305 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        _2127 = (((cbLight._m0[_2286].x * 0.3183098733425140380859375) * _2304) * _2305) + _2082;
        _2129 = (((cbLight._m0[_2286].y * 0.3183098733425140380859375) * _2304) * _2305) + _2084;
        _2131 = (((cbLight._m0[_2286].z * 0.3183098733425140380859375) * _2304) * _2305) + _2086;
    }
    uint _2134 = _1998 + 8u;
    float _2147 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1998].w)) * _816) * 0.949999988079071044921875);
    float _2148 = _2147 * _2147;
    float _2149 = cbLight._m0[_1998].x + _892;
    float _2150 = cbLight._m0[_1998].y + _893;
    float _2151 = cbLight._m0[_1998].z + _894;
    float _2155 = inversesqrt(dot(vec3(_2149, _2150, _2151), vec3(_2149, _2150, _2151)));
    float _2156 = _2155 * _2149;
    float _2157 = _2155 * _2150;
    float _2158 = _2155 * _2151;
    float _2159 = dot(vec3(_813, _814, _815), vec3(cbLight._m0[_1998].xyz));
    float _4247 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2162 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _4258 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _2163 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _2164 = dot(vec3(_813, _814, _815), vec3(_2156, _2157, _2158));
    float _4269 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2167 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _2168 = dot(vec3(cbLight._m0[_1998].xyz), vec3(_2156, _2157, _2158));
    float _4280 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2172 = _2148 * _2148;
    float _2176 = ((_2167 * _2167) * (_2172 + (-1.0))) + 1.0;
    float _2187 = (exp2(log2(1.0 - (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2188 = 1.0 - _2148;
    float _2199 = (0.5 / (((_2163 * ((_2162 * _2188) + _2148)) + 9.9999999392252902907785028219223e-09) + (((_2163 * _2188) + _2148) * _2162))) * _2162;
    float _4291 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2201 = (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_2172 / ((_2176 * _2176) * 3.141590118408203125));
    uint _2212 = _1998 + 9u;
    float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2035].w)) * _816) * 0.949999988079071044921875);
    float _2224 = _2223 * _2223;
    float _2225 = cbLight._m0[_2035].x + _892;
    float _2226 = cbLight._m0[_2035].y + _893;
    float _2227 = cbLight._m0[_2035].z + _894;
    float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
    float _2232 = _2231 * _2225;
    float _2233 = _2231 * _2226;
    float _2234 = _2231 * _2227;
    float _2235 = dot(vec3(_813, _814, _815), vec3(cbLight._m0[_2035].xyz));
    float _4302 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2238 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2239 = dot(vec3(_813, _814, _815), vec3(_2232, _2233, _2234));
    float _4313 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _2243 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_2232, _2233, _2234));
    float _4324 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2247 = _2224 * _2224;
    float _2251 = ((_2242 * _2242) * (_2247 + (-1.0))) + 1.0;
    float _2260 = (exp2(log2(1.0 - (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2261 = 1.0 - _2224;
    float _2271 = (0.5 / (((_2163 * ((_2238 * _2261) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_2163 * _2261) + _2224) * _2238))) * _2238;
    float _4335 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2273 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2247 / ((_2251 * _2251) * 3.141590118408203125));
    float _2283 = (((_2260 * cbLight._m0[_2212].x) * _2273) * _2021) + (((_2187 * cbLight._m0[_2134].x) * _2201) * _2031);
    float _2284 = (((_2260 * cbLight._m0[_2212].y) * _2273) * _2021) + (((_2187 * cbLight._m0[_2134].y) * _2201) * _2031);
    float _2285 = (((_2260 * cbLight._m0[_2212].z) * _2273) * _2021) + (((_2187 * cbLight._m0[_2134].z) * _2201) * _2031);
    float _2347;
    float _2349;
    float _2351;
    if (_2071)
    {
        _2347 = _2283;
        _2349 = _2284;
        _2351 = _2285;
    }
    else
    {
        uint _2353 = _1998 + 2u;
        uint _2357 = _1998 + 10u;
        float _2371 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2353].w)) * _816) * 0.949999988079071044921875);
        float _2372 = _2371 * _2371;
        float _2373 = cbLight._m0[_2353].x + _892;
        float _2374 = cbLight._m0[_2353].y + _893;
        float _2375 = cbLight._m0[_2353].z + _894;
        float _2379 = inversesqrt(dot(vec3(_2373, _2374, _2375), vec3(_2373, _2374, _2375)));
        float _2380 = _2379 * _2373;
        float _2381 = _2379 * _2374;
        float _2382 = _2379 * _2375;
        float _2383 = dot(vec3(_813, _814, _815), vec3(cbLight._m0[_2353].xyz));
        float _4346 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2386 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2387 = dot(vec3(_813, _814, _815), vec3(_2380, _2381, _2382));
        float _4357 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2390 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _2391 = dot(vec3(cbLight._m0[_2353].xyz), vec3(_2380, _2381, _2382));
        float _4368 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2395 = _2372 * _2372;
        float _2399 = ((_2390 * _2390) * (_2395 + (-1.0))) + 1.0;
        float _2408 = (exp2(log2(1.0 - (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2409 = 1.0 - _2372;
        float _2419 = (0.5 / (((_2163 * ((_2386 * _2409) + _2372)) + 9.9999999392252902907785028219223e-09) + (((_2163 * _2409) + _2372) * _2386))) * _2386;
        float _4379 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2421 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2395 / ((_2399 * _2399) * 3.141590118408203125));
        float _2422 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
        _2347 = (((_2408 * cbLight._m0[_2357].x) * _2421) * _2422) + _2283;
        _2349 = (((_2408 * cbLight._m0[_2357].y) * _2421) * _2422) + _2284;
        _2351 = (((_2408 * cbLight._m0[_2357].z) * _2421) * _2422) + _2285;
    }
    float _2457;
    float _2459;
    float _2461;
    if (_2089)
    {
        _2457 = _2347;
        _2459 = _2349;
        _2461 = _2351;
    }
    else
    {
        uint _2468 = _1998 + 3u;
        uint _2472 = _1998 + 11u;
        float _2486 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2468].w)) * _816) * 0.949999988079071044921875);
        float _2487 = _2486 * _2486;
        float _2488 = cbLight._m0[_2468].x + _892;
        float _2489 = cbLight._m0[_2468].y + _893;
        float _2490 = cbLight._m0[_2468].z + _894;
        float _2494 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
        float _2495 = _2494 * _2488;
        float _2496 = _2494 * _2489;
        float _2497 = _2494 * _2490;
        float _2498 = dot(vec3(_813, _814, _815), vec3(cbLight._m0[_2468].xyz));
        float _4395 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2501 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2502 = dot(vec3(_813, _814, _815), vec3(_2495, _2496, _2497));
        float _4406 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _2506 = dot(vec3(cbLight._m0[_2468].xyz), vec3(_2495, _2496, _2497));
        float _4417 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2510 = _2487 * _2487;
        float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
        float _2523 = (exp2(log2(1.0 - (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2524 = 1.0 - _2487;
        float _2534 = (0.5 / (((_2163 * ((_2501 * _2524) + _2487)) + 9.9999999392252902907785028219223e-09) + (((_2163 * _2524) + _2487) * _2501))) * _2501;
        float _4428 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2536 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
        float _2537 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        _2457 = (((_2523 * cbLight._m0[_2472].x) * _2536) * _2537) + _2347;
        _2459 = (((_2523 * cbLight._m0[_2472].y) * _2536) * _2537) + _2349;
        _2461 = (((_2523 * cbLight._m0[_2472].z) * _2536) * _2537) + _2351;
    }
    float _2672;
    float _2674;
    float _2676;
    float _2678;
    float _2680;
    float _2682;
    if (_1996.y == 0u)
    {
        float _2612 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2613 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2612;
        float _2614 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2612;
        float _2615 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2612;
        uvec4 _2627 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2628 = _2627.x;
        uint _2639 = uint((float(_2627.y) * floor(float(uint(cbSceneParam._m0[85u].y * _901) / _2628))) + floor(float(uint(cbSceneParam._m0[85u].x * _900) / _2628)));
        float _2649 = (log2(_2615 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2650 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        uint _2653 = uint(isnan(14.0) ? _2650 : (isnan(_2650) ? 14.0 : min(_2650, 14.0)));
        uvec4 _2658 = texelFetch(g_lightClusterGridBuffer, int(((_2653 << 2u) + (_2639 << 6u)) >> 2u));
        uint _2659 = _2658.x;
        uint _2660 = _2627.z;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        if (((((1u << ((_2660 >> 4u) & 15u)) + 4294967295u) & _2659) == 0u) || ((_2660 & 240u) == 0u))
        {
            _2760 = 0.0;
            _2762 = 0.0;
            _2764 = 0.0;
            _2766 = 0.0;
            _2768 = 0.0;
            _2770 = 0.0;
        }
        else
        {
            float _2761;
            float _2763;
            float _2765;
            float _2767;
            float _2769;
            float _2771;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            float _2908 = 0.0;
            float _2909 = 0.0;
            float _2910 = 0.0;
            uint _2911 = 0u;
            uint _2920;
            bool _2921;
            for (;;)
            {
                _2920 = texelFetch(g_lightClassification, int((((_2653 << 5u) + (_2639 << 9u)) + (_2911 << 2u)) >> 2u)).x;
                _2921 = _2920 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2921)
                {
                    frontier_phi_61_pred = _2905;
                    frontier_phi_61_pred_1 = _2910;
                    frontier_phi_61_pred_2 = _2909;
                    frontier_phi_61_pred_3 = _2908;
                    frontier_phi_61_pred_4 = _2907;
                    frontier_phi_61_pred_5 = _2906;
                }
                else
                {
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    uint _3035;
                    _3029 = _2905;
                    _3030 = _2906;
                    _3031 = _2907;
                    _3032 = _2908;
                    _3033 = _2909;
                    _3034 = _2910;
                    _3035 = _2920;
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    for (;;)
                    {
                        uint _3039 = uint(findLSB(_3035)) + (_2911 << 5u);
                        uint _3036 = (_3035 + 4294967295u) & _3035;
                        uint _3041 = _3039 * 48u;
                        vec4 _3055 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3041)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 3u)).x));
                        uint _3061 = (_3039 * 48u) + 4u;
                        vec4 _3074 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3061)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 3u)).x));
                        uint _3080 = (_3039 * 48u) + 8u;
                        vec3 _3091 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3080)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 2u)).x));
                        float _3095 = _3055.x - _2613;
                        float _3096 = _3055.y - _2614;
                        float _3097 = _3055.z - _2615;
                        float _3098 = dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097));
                        float _3101 = inversesqrt(_3098);
                        float _3102 = _3101 * _3095;
                        float _3103 = _3101 * _3096;
                        float _3104 = _3101 * _3097;
                        float _3105 = dot(vec3(_919, _922, _925), vec3(_3102, _3103, _3104));
                        float _3110 = 1.0 - (_3098 * _3055.w);
                        float _4454 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3111 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                        float _3112 = sqrt(_3098) * _3074.w;
                        float _3115 = 1.39999997615814208984375 / (_3112 + 1.39999997615814208984375);
                        float _3116 = _3115 * _3115;
                        float _3119 = ((1.0 - _3116) * _3105) + _3116;
                        float _3122 = _3112 * _3112;
                        float _3126 = ((isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0))) * _3111) / ((_3122 * 0.699999988079071044921875) + 1.0);
                        float _3130 = (-0.0) - _2613;
                        float _3131 = (-0.0) - _2614;
                        float _3132 = (-0.0) - _2615;
                        float _3136 = inversesqrt(dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132)));
                        float _3137 = _3136 * _3130;
                        float _3138 = _3136 * _3131;
                        float _3139 = _3136 * _3132;
                        float _3147 = exp2(log2(1.0 / ((_3122 * 3.5) + 5.0)) * 0.25);
                        float _3148 = 1.0 - _979;
                        float _3155 = sqrt(1.0 - ((1.0 - (_3148 * _3148)) * (1.0 - (_3147 * _3147))));
                        float _3156 = _3155 * _3155;
                        float _3157 = _3156 * _3156;
                        float _3158 = _3137 + _3102;
                        float _3159 = _3138 + _3103;
                        float _3160 = _3139 + _3104;
                        float _3164 = inversesqrt(dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160)));
                        float _3168 = dot(vec3(_919, _922, _925), vec3(_3137, _3138, _3139));
                        float _4470 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3171 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3172 = dot(vec3(_919, _922, _925), vec3(_3164 * _3158, _3164 * _3159, _3164 * _3160));
                        float _4481 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3175 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                        float _3179 = ((_3175 * _3175) * (_3157 + (-1.0))) + 1.0;
                        float _3180 = _3115 * _3156;
                        float _3181 = _3180 * _3180;
                        float _3184 = ((1.0 - _3181) * _3105) + _3181;
                        float _4492 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3185 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                        float _3186 = 1.0 - _3156;
                        float _3196 = (0.5 / (((_3185 * ((_3171 * _3186) + _3156)) + 9.9999999392252902907785028219223e-09) + (((_3185 * _3186) + _3156) * _3171))) * _3185;
                        float _4503 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3207 = (((_3157 * 3.1415927410125732421875) * (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) / ((_3179 * _3179) * ((_3122 * 2.1991131305694580078125) + 3.141590118408203125))) * _3111;
                        _2964 = (_3126 * _3074.x) + _3032;
                        _2965 = (_3126 * _3074.y) + _3033;
                        _2966 = (_3126 * _3074.z) + _3034;
                        _2961 = (_3207 * _3091.x) + _3029;
                        _2962 = (_3207 * _3091.y) + _3030;
                        _2963 = (_3207 * _3091.z) + _3031;
                        if (_3036 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3029 = _2961;
                            _3030 = _2962;
                            _3031 = _2963;
                            _3032 = _2964;
                            _3033 = _2965;
                            _3034 = _2966;
                            _3035 = _3036;
                        }
                    }
                    frontier_phi_61_pred = _2961;
                    frontier_phi_61_pred_1 = _2966;
                    frontier_phi_61_pred_2 = _2965;
                    frontier_phi_61_pred_3 = _2964;
                    frontier_phi_61_pred_4 = _2963;
                    frontier_phi_61_pred_5 = _2962;
                }
                _2761 = frontier_phi_61_pred;
                _2771 = frontier_phi_61_pred_1;
                _2769 = frontier_phi_61_pred_2;
                _2767 = frontier_phi_61_pred_3;
                _2765 = frontier_phi_61_pred_4;
                _2763 = frontier_phi_61_pred_5;
                uint _2912 = _2911 + 1u;
                if (_2912 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2905 = _2761;
                    _2906 = _2763;
                    _2907 = _2765;
                    _2908 = _2767;
                    _2909 = _2769;
                    _2910 = _2771;
                    _2911 = _2912;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2760 = _2761;
            _2762 = _2763;
            _2764 = _2765;
            _2766 = _2767;
            _2768 = _2769;
            _2770 = _2771;
        }
        uvec4 _2774 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2775 = _2774.z;
        uint _2777 = (_2775 >> 8u) & 15u;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        if (((4294967295u << _2777) & _2659) == 0u)
        {
            _2873 = _2760;
            _2875 = _2762;
            _2877 = _2764;
            _2879 = _2766;
            _2881 = _2768;
            _2883 = _2770;
        }
        else
        {
            float _2898 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
            float _2899 = _2898 * _2613;
            float _2900 = _2898 * _2614;
            float _2901 = _2898 * _2615;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2777 < ((_2775 >> 12u) & 15u))
            {
                float _2874;
                float _2876;
                float _2878;
                float _2880;
                float _2882;
                float _2884;
                float _3012 = _2760;
                float _3013 = _2762;
                float _3014 = _2764;
                float _3015 = _2766;
                float _3016 = _2768;
                float _3017 = _2770;
                uint _3018 = _2777;
                uint _3027;
                bool _3028;
                for (;;)
                {
                    _3027 = texelFetch(g_lightClassification, int((((_2653 << 5u) + (_2639 << 9u)) + (_3018 << 2u)) >> 2u)).x;
                    _3028 = _3027 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3028)
                    {
                        frontier_phi_67_pred = _3015;
                        frontier_phi_67_pred_1 = _3016;
                        frontier_phi_67_pred_2 = _3017;
                        frontier_phi_67_pred_3 = _3014;
                        frontier_phi_67_pred_4 = _3013;
                        frontier_phi_67_pred_5 = _3012;
                    }
                    else
                    {
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3225 = _3012;
                        float _3226 = _3013;
                        float _3227 = _3014;
                        float _3228 = _3015;
                        float _3229 = _3016;
                        float _3230 = _3017;
                        uint _3231 = _3027;
                        uint _3232;
                        vec4 _3257;
                        float _3258;
                        vec4 _3273;
                        vec3 _3285;
                        vec4 _3300;
                        vec4 _3315;
                        float _3361;
                        bool _3362;
                        for (;;)
                        {
                            uint _3242 = ((_3018 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3231));
                            _3232 = (_3231 + 4294967295u) & _3231;
                            uint _3244 = _3242 * 40u;
                            _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            _3258 = _3257.w;
                            uint _3260 = (_3242 * 40u) + 4u;
                            _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            uint _3275 = (_3242 * 40u) + 8u;
                            _3285 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x));
                            uint _3287 = (_3242 * 40u) + 16u;
                            _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            uint _3302 = (_3242 * 40u) + 20u;
                            _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            uint _3317 = (_3242 * 40u) + 24u;
                            vec4 _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            uint _3336 = (_3242 * 40u) + 28u;
                            vec4 _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            _3361 = fma(_2615, _3349.z, fma(_2614, _3349.y, _3349.x * _2613)) + _3349.w;
                            _3362 = !((fma(_2615, _3330.z, fma(_2614, _3330.y, _3330.x * _2613)) + _3330.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3362)
                            {
                                float _3389 = _3257.x - _2613;
                                float _3390 = _3257.y - _2614;
                                float _3391 = _3257.z - _2615;
                                float _3392 = dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391));
                                float _3395 = inversesqrt(_3392);
                                float _3396 = _3395 * _3389;
                                float _3397 = _3395 * _3390;
                                float _3398 = _3395 * _3391;
                                float _3402 = 1.0 - (_3392 / (_3258 * _3258));
                                float _4514 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3403 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                                float _3407 = sqrt(_3392) * _3273.w;
                                float _3409 = 1.39999997615814208984375 / (_3407 + 1.39999997615814208984375);
                                float _3410 = _3409 * _3409;
                                float _3413 = ((1.0 - _3410) * dot(vec3(_3396, _3397, _3398), vec3(_919, _922, _925))) + _3410;
                                float _3416 = _3407 * _3407;
                                float _3420 = (fma(_2615, _3300.z, fma(_2614, _3300.y, _3300.x * _2613)) + _3300.w) / _3361;
                                float _3421 = (fma(_2615, _3315.z, fma(_2614, _3315.y, _3315.x * _2613)) + _3315.w) / _3361;
                                float _3425 = 1.0 - dot(vec2(_3420, _3421), vec2(_3420, _3421));
                                float _4530 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3426 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3427 = _3426 * (((isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0))) * _3403) / ((_3416 * 0.699999988079071044921875) + 1.0));
                                float _3439 = exp2(log2(1.0 / ((_3416 * 3.5) + 5.0)) * 0.25);
                                float _3440 = 1.0 - _979;
                                float _3447 = sqrt(1.0 - ((1.0 - (_3440 * _3440)) * (1.0 - (_3439 * _3439))));
                                float _3448 = _3447 * _3447;
                                float _3449 = _3448 * _3448;
                                float _3450 = _3396 - _2899;
                                float _3451 = _3397 - _2900;
                                float _3452 = _3398 - _2901;
                                float _3456 = inversesqrt(dot(vec3(_3450, _3451, _3452), vec3(_3450, _3451, _3452)));
                                float _3460 = dot(vec3(_919, _922, _925), vec3((-0.0) - _2899, (-0.0) - _2900, (-0.0) - _2901));
                                float _4541 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3463 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3464 = dot(vec3(_919, _922, _925), vec3(_3456 * _3450, _3456 * _3451, _3456 * _3452));
                                float _4552 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3467 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                                float _3471 = ((_3467 * _3467) * (_3449 + (-1.0))) + 1.0;
                                float _3472 = _3409 * _3448;
                                float _3473 = _3472 * _3472;
                                float _3479 = ((1.0 - _3473) * dot(vec3(_919, _922, _925), vec3(_3396, _3397, _3398))) + _3473;
                                float _4563 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3480 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3481 = 1.0 - _3448;
                                float _3491 = (0.5 / (((_3480 * ((_3463 * _3481) + _3448)) + 9.9999999392252902907785028219223e-09) + (((_3480 * _3481) + _3448) * _3463))) * _3480;
                                float _4574 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3501 = (_3426 * _3403) * (((_3449 * 3.1415927410125732421875) * (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) / ((_3471 * _3471) * ((_3416 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3501 * _3285.x;
                                frontier_phi_73_pred_1 = _3501 * _3285.y;
                                frontier_phi_73_pred_2 = _3427 * _3273.z;
                                frontier_phi_73_pred_3 = _3427 * _3273.y;
                                frontier_phi_73_pred_4 = _3427 * _3273.x;
                                frontier_phi_73_pred_5 = _3501 * _3285.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3505 = frontier_phi_73_pred;
                            _3506 = frontier_phi_73_pred_1;
                            _3510 = frontier_phi_73_pred_2;
                            _3509 = frontier_phi_73_pred_3;
                            _3508 = frontier_phi_73_pred_4;
                            _3507 = frontier_phi_73_pred_5;
                            _3215 = _3508 + _3228;
                            _3216 = _3509 + _3229;
                            _3217 = _3510 + _3230;
                            _3212 = _3505 + _3225;
                            _3213 = _3506 + _3226;
                            _3214 = _3507 + _3227;
                            if (_3232 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3225 = _3212;
                                _3226 = _3213;
                                _3227 = _3214;
                                _3228 = _3215;
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3232;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3215;
                        frontier_phi_67_pred_1 = _3216;
                        frontier_phi_67_pred_2 = _3217;
                        frontier_phi_67_pred_3 = _3214;
                        frontier_phi_67_pred_4 = _3213;
                        frontier_phi_67_pred_5 = _3212;
                    }
                    _2880 = frontier_phi_67_pred;
                    _2882 = frontier_phi_67_pred_1;
                    _2884 = frontier_phi_67_pred_2;
                    _2878 = frontier_phi_67_pred_3;
                    _2876 = frontier_phi_67_pred_4;
                    _2874 = frontier_phi_67_pred_5;
                    uint _3019 = _3018 + 1u;
                    if (_3019 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3012 = _2874;
                        _3013 = _2876;
                        _3014 = _2878;
                        _3015 = _2880;
                        _3016 = _2882;
                        _3017 = _2884;
                        _3018 = _3019;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2882;
                frontier_phi_55_56_ladder_1 = _2884;
                frontier_phi_55_56_ladder_2 = _2880;
                frontier_phi_55_56_ladder_3 = _2878;
                frontier_phi_55_56_ladder_4 = _2876;
                frontier_phi_55_56_ladder_5 = _2874;
            }
            else
            {
                frontier_phi_55_56_ladder = _2768;
                frontier_phi_55_56_ladder_1 = _2770;
                frontier_phi_55_56_ladder_2 = _2766;
                frontier_phi_55_56_ladder_3 = _2764;
                frontier_phi_55_56_ladder_4 = _2762;
                frontier_phi_55_56_ladder_5 = _2760;
            }
            _2873 = frontier_phi_55_56_ladder_5;
            _2875 = frontier_phi_55_56_ladder_4;
            _2877 = frontier_phi_55_56_ladder_3;
            _2879 = frontier_phi_55_56_ladder_2;
            _2881 = frontier_phi_55_56_ladder;
            _2883 = frontier_phi_55_56_ladder_1;
        }
        float _2888 = isnan(1.0) ? _963 : (isnan(_963) ? 1.0 : min(_963, 1.0));
        _2672 = (_2888 * _2879) + _2127;
        _2674 = (_2888 * _2881) + _2129;
        _2676 = (_2888 * _2883) + _2131;
        _2678 = ((_2873 * 0.039999999105930328369140625) * _2888) + _2457;
        _2680 = ((_2875 * 0.039999999105930328369140625) * _2888) + _2459;
        _2682 = ((_2877 * 0.039999999105930328369140625) * _2888) + _2461;
    }
    else
    {
        _2672 = _2127;
        _2674 = _2129;
        _2676 = _2131;
        _2678 = _2457;
        _2680 = _2459;
        _2682 = _2461;
    }
    float _4590 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _4601 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _4612 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    uint _2702 = _255 + 6u;
    float _2710 = _900 / cbSceneParam._m0[86u].x;
    float _2711 = _901 / cbSceneParam._m0[86u].y;
    vec4 _2725 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2710, _2711, (log2((isnan(cbSceneParam._m0[77u].w) ? _834 : (isnan(_834) ? cbSceneParam._m0[77u].w : min(_834, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2727 = _2725.x;
    float _2728 = _2725.y;
    float _2729 = _2725.z;
    float _2730 = _2725.w;
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    if (_834 > cbSceneParam._m0[78u].w)
    {
        float _2785 = isnan(_834) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _834 : min(cbSceneParam._m0[80u].w, _834));
        float _2786 = _2785 / _834;
        float _2797 = _2786 * _885;
        float _2798 = _886 * _2786;
        float _2799 = (-0.0) - _2798;
        float _2801 = _2786 * _887;
        float _2803 = (cbSceneParam._m0[77u].w * _2799) / _2785;
        float _2804 = _2803 + cbSceneParam._m0[79u].w;
        float _2805 = cbSceneParam._m0[79u].w - _2798;
        float _2811 = sqrt(((_2797 * _2797) + (_2798 * _2798)) + (_2801 * _2801));
        float _2814 = (1.0 - (cbSceneParam._m0[77u].w / _2785)) * _2811;
        float _2819 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2821 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2974;
        if (abs((_2799 - _2803) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2974 = ((((_2804 > 0.0) ? exp2(_2819 * _2804) : (2.0 - exp2(_2821 * _2804))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2814;
        }
        else
        {
            float _2934 = 1.0 / cbSceneParam._m0[80u].x;
            float _2935 = isnan(_2805) ? _2804 : (isnan(_2804) ? _2805 : max(_2804, _2805));
            float _2936 = isnan(_2805) ? _2804 : (isnan(_2804) ? _2805 : min(_2804, _2805));
            float _2945 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : min(_2935, 0.0));
            float _2946 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : min(_2936, 0.0));
            _2974 = ((abs(_2811 / _2799) * cbSceneParam._m0[80u].y) * ((((_2945 - _2946) * 2.0) - ((exp2(_2819 * (isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0)))) - exp2(_2819 * (isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0))))) * _2934)) - ((exp2(_2821 * _2945) - exp2(_2821 * _2946)) * _2934))) + (_2814 * cbSceneParam._m0[80u].z);
        }
        vec4 _2976 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2710, _2711, 1.0), 0.0);
        float _2985 = exp2((_2974 * (-1.44269502162933349609375)) * (1.0 - _2976.w));
        float _2986 = log2(_2985);
        float _3002 = log2(_2730);
        _2823 = (exp2(_3002 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2986 * cbSceneParam._m0[78u].x)) * _2976.x) / cbSceneParam._m0[78u].x)) + _2727;
        _2825 = (exp2(_3002 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2986 * cbSceneParam._m0[78u].y)) * _2976.y) / cbSceneParam._m0[78u].y)) + _2728;
        _2827 = (exp2(_3002 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2986 * cbSceneParam._m0[78u].z)) * _2976.z) / cbSceneParam._m0[78u].z)) + _2729;
        _2829 = _2985 * _2730;
    }
    else
    {
        _2823 = _2727;
        _2825 = _2728;
        _2827 = _2729;
        _2829 = _2730;
    }
    float _2841 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2842 = _2841 == 3.0;
    float _2843 = log2(_2829);
    float _2850 = exp2(_2843 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2672 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _963))) + ((_2678 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1767)) * cbPerFrame._m0[3u].x));
    float _2851 = exp2(_2843 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2674 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _963))) + ((_2680 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1767)) * cbPerFrame._m0[3u].x));
    float _2852 = exp2(_2843 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2676 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _963))) + ((_2682 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1767)) * cbPerFrame._m0[3u].x));
    float _2861 = (_2841 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2861 * (_2842 ? _2850 : (_2850 + (cbSceneParam._m0[72u].w * _2823)));
    SV_Target.y = _2861 * (_2842 ? _2851 : (_2851 + (cbSceneParam._m0[72u].w * _2825)));
    SV_Target.z = _2861 * (_2842 ? _2852 : (_2852 + (cbSceneParam._m0[72u].w * _2827)));
    SV_Target.w = cbInstanceData._m0[_2702].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2702].w;
}


