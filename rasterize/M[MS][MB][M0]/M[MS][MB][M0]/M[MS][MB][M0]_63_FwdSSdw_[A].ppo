#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1042;
float _3429;
float _3430;
float _3431;
float _3432;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _269 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _275 = _269.x * cbMtdParam._m0[11u].x;
    float _276 = _269.y * cbMtdParam._m0[11u].y;
    float _277 = _269.z * cbMtdParam._m0[11u].z;
    vec4 _296 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _248) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _249) + cbTextureTilingScale._m0[5u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _336 = _334.x;
    float _346 = dot(vec4(_336, _334.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _363 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_336 - _346) * cbMtdParam._m0[24u].x) + _346) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3441 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _371 = (_364 * ((_296.x * cbMtdParam._m0[12u].x) - _275)) + _275;
    float _372 = (_364 * ((_296.y * cbMtdParam._m0[12u].y) - _276)) + _276;
    float _373 = (_364 * ((_296.z * cbMtdParam._m0[12u].z) - _277)) + _277;
    vec4 _386 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _248) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _249) + cbTextureTilingScale._m0[4u].w));
    vec4 _403 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _405 = _403.x;
    float _406 = _403.y;
    float _407 = _403.z;
    float _416 = ((_386.z - _407) * _364) + _407;
    float _419 = ((((_386.x - _405) * _364) + _405) * 2.0) + (-1.0);
    float _421 = ((((_386.y - _406) * _364) + _406) * 2.0) + (-1.0);
    float _422 = dot(vec2(_419, _421), vec2(_419, _421));
    float _3452 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _427 = sqrt(1.0 - (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))));
    vec4 _443 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _455 = (((_443.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _419;
    float _456 = (((_443.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _421;
    float _460 = (cbMtdParam._m0[19u].w * (_443.z - _416)) + _416;
    float _465 = cbMtdParam._m0[22u].x + _443.w;
    float _468 = fma(_427, _215 * NORMAL.x, fma(_456, _222 * TANGENT.x, (_208 * _200) * _455));
    float _471 = fma(_427, _215 * NORMAL.y, fma(_456, _222 * TANGENT.y, (_208 * _201) * _455));
    float _474 = fma(_427, _215 * NORMAL.z, fma(_456, _222 * TANGENT.z, (_208 * _202) * _455));
    float _478 = inversesqrt(dot(vec3(_468, _471, _474), vec3(_468, _471, _474)));
    float _479 = _478 * _468;
    float _480 = _478 * _471;
    float _481 = _478 * _474;
    float _3463 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _482 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _3474 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3485 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3496 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3507 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _500 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _552 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _542);
    float _553 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _542);
    float _554 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _542);
    float _558 = inversesqrt(dot(vec3(_552, _553, _554), vec3(_552, _553, _554)));
    float _559 = _552 * _558;
    float _560 = _553 * _558;
    float _561 = _554 * _558;
    vec4 _566 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _568 = _566.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _722 = sqrt(((_552 * _552) + (_553 * _553)) + (_554 * _554));
        float _728 = (cbMatDynParam._m0[5u].x * _722) + cbMatDynParam._m0[5u].y;
        float _3518 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _729 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _733 = (cbMatDynParam._m0[5u].z * _722) + cbMatDynParam._m0[5u].w;
        float _3529 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) - _729)) + _729) < ((_568 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _579 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _580 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _598 = fma(_481, cbSceneParam._m0[5u].z, fma(_480, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _479));
    float _601 = fma(_481, cbSceneParam._m0[6u].z, fma(_480, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _479));
    float _604 = fma(_481, cbSceneParam._m0[7u].z, fma(_480, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _479));
    uint _617 = _228 + 9u;
    uint _618 = _617 + uint(cbMatDynParam._m0[0u].w);
    float _624 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))) * cbInstanceData._m0[_618].x;
    float _625 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0)))) * cbInstanceData._m0[_618].y;
    float _626 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0)))) * cbInstanceData._m0[_618].z;
    float _3540 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _3551 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _3562 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    vec4 _638 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _579, cbSceneParam._m0[86u].y * _580));
    float _642 = ((isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * TEXCOORD_5.w) * _638.x;
    float _643 = dot(vec3(_479, _480, _481), vec3(_559, _560, _561));
    float _646 = _643 * 2.0;
    float _650 = (_646 * _479) - _559;
    float _651 = (_646 * _480) - _560;
    float _652 = (_646 * _481) - _561;
    float _656 = abs(dot(vec3(_559, _560, _561), vec3(_479, _480, _481)));
    float _3573 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _658 = sqrt(_482);
    float _671 = exp2((_658 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_658 * 3.0));
    float _703 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _707 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1041;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _766 = fma(_711, cbModelParam._m0[26u].z, fma(_707, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _703));
        float _770 = fma(_711, cbModelParam._m0[27u].z, fma(_707, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _703));
        float _774 = fma(_711, cbModelParam._m0[28u].z, fma(_707, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _703));
        float _799 = _703 + _479;
        float _800 = _707 + _480;
        float _801 = _711 + _481;
        float _811 = fma(_801, cbModelParam._m0[26u].z, fma(_800, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _799)) - _766;
        float _812 = fma(_801, cbModelParam._m0[27u].z, fma(_800, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _799)) - _770;
        float _813 = fma(_801, cbModelParam._m0[28u].z, fma(_800, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _799)) - _774;
        float _817 = inversesqrt(dot(vec3(_811, _812, _813), vec3(_811, _812, _813)));
        float _830 = ((_817 * _811) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_766 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _831 = ((_817 * _812) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_770 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_817 * _813) / cbModelParam._m0[34u].z) + ((((((_774 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        float _869 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_835.x + (-0.5));
        float _871 = _869 * (_835.y + (-0.5));
        float _872 = _869 * (_835.z + (-0.5));
        float _879 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_842.x + (-0.5));
        float _881 = _879 * (_842.y + (-0.5));
        float _882 = _879 * (_842.z + (-0.5));
        float _889 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_849.x + (-0.5));
        float _891 = _889 * (_849.y + (-0.5));
        float _892 = _889 * (_849.z + (-0.5));
        float _899 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_856.x + (-0.5));
        float _901 = _899 * (_856.y + (-0.5));
        float _902 = _899 * (_856.z + (-0.5));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = _870 * 0.5;
        float _907 = _880 * 0.5;
        float _908 = _890 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _923 = (dot(vec3(_479, _480, _481), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3599 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _933 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3610 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3621 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_935 + 1.0))) + _940) * _903;
        float _950 = _871 * 0.5;
        float _951 = _881 * 0.5;
        float _952 = _891 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _966 = (dot(vec3(_479, _480, _481), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3632 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _975 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3643 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3654 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_977 + 1.0))) + _982) * _904;
        float _992 = _872 * 0.5;
        float _993 = _882 * 0.5;
        float _994 = _892 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1008 = (dot(vec3(_479, _480, _481), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1017 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3687 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1019 + 1.0))) + _1024) * _905;
        _1041 = _872;
        _1043 = _871;
        _1044 = _870;
        _1045 = _882;
        _1046 = _881;
        _1047 = _880;
        _1048 = _892;
        _1049 = _891;
        _1050 = _890;
        _1051 = _905;
        _1052 = _904;
        _1053 = _903;
        _1054 = cbModelParam._m0[36u].z * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
    }
    else
    {
        _1041 = _1042;
        _1043 = _1042;
        _1044 = _1042;
        _1045 = _1042;
        _1046 = _1042;
        _1047 = _1042;
        _1048 = _1042;
        _1049 = _1042;
        _1050 = _1042;
        _1051 = _1042;
        _1052 = _1042;
        _1053 = _1042;
        _1054 = 0.0;
        _1055 = 0.0;
        _1056 = 0.0;
    }
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1084 = fma(_711, cbModelParam._m0[30u].z, fma(_707, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _703));
        float _1088 = fma(_711, cbModelParam._m0[31u].z, fma(_707, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _703));
        float _1092 = fma(_711, cbModelParam._m0[32u].z, fma(_707, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _703));
        float _1115 = _703 + _479;
        float _1116 = _707 + _480;
        float _1117 = _711 + _481;
        float _1127 = fma(_1117, cbModelParam._m0[30u].z, fma(_1116, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1115)) - _1084;
        float _1128 = fma(_1117, cbModelParam._m0[31u].z, fma(_1116, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1115)) - _1088;
        float _1129 = fma(_1117, cbModelParam._m0[32u].z, fma(_1116, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1115)) - _1092;
        float _1133 = inversesqrt(dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129)));
        float _1146 = ((_1133 * _1127) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1084 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1133 * _1128) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1088 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1133 * _1129) / cbModelParam._m0[35u].z) + ((((((_1092 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        float _1183 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1150.x + (-0.5));
        float _1185 = _1183 * (_1150.y + (-0.5));
        float _1186 = _1183 * (_1150.z + (-0.5));
        float _1193 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1157.x + (-0.5));
        float _1195 = _1193 * (_1157.y + (-0.5));
        float _1196 = _1193 * (_1157.z + (-0.5));
        float _1203 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1164.x + (-0.5));
        float _1205 = _1203 * (_1164.y + (-0.5));
        float _1206 = _1203 * (_1164.z + (-0.5));
        float _1213 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1171.x + (-0.5));
        float _1215 = _1213 * (_1171.y + (-0.5));
        float _1216 = _1213 * (_1171.z + (-0.5));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = _1184 * 0.5;
        float _1221 = _1194 * 0.5;
        float _1222 = _1204 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_479, _480, _481), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _3750 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1247 + 1.0))) + _1252) * _1217;
        float _1262 = _1185 * 0.5;
        float _1263 = _1195 * 0.5;
        float _1264 = _1205 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1278 = (dot(vec3(_479, _480, _481), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1287 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _3783 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1289 + 1.0))) + _1294) * _1218;
        float _1304 = _1186 * 0.5;
        float _1305 = _1196 * 0.5;
        float _1306 = _1206 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_479, _480, _481), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _3816 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1331 + 1.0))) + _1336) * _1219;
        _1353 = _1186;
        _1354 = _1185;
        _1355 = _1184;
        _1356 = _1196;
        _1357 = _1195;
        _1358 = _1194;
        _1359 = _1206;
        _1360 = _1205;
        _1361 = _1204;
        _1362 = _1219;
        _1363 = _1218;
        _1364 = _1217;
        _1365 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
    }
    else
    {
        _1353 = _1042;
        _1354 = _1042;
        _1355 = _1042;
        _1356 = _1042;
        _1357 = _1042;
        _1358 = _1042;
        _1359 = _1042;
        _1360 = _1042;
        _1361 = _1042;
        _1362 = _1042;
        _1363 = _1042;
        _1364 = _1042;
        _1365 = 0.0;
        _1366 = 0.0;
        _1367 = 0.0;
    }
    float _1377 = (cbModelParam._m0[1u].x * (_1365 - _1054)) + _1054;
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1055)) + _1055;
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1056)) + _1056;
    float _1400 = fma(_1379, cbSceneParam._m0[89u].z, fma(_1378, cbSceneParam._m0[89u].y, _1377 * cbSceneParam._m0[89u].x));
    float _1403 = fma(_1379, cbSceneParam._m0[90u].z, fma(_1378, cbSceneParam._m0[90u].y, _1377 * cbSceneParam._m0[90u].x));
    float _1406 = fma(_1379, cbSceneParam._m0[91u].z, fma(_1378, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1377));
    float _1421 = _650 * 0.5;
    float _1422 = _651 * 0.5;
    float _1423 = _652 * 0.5;
    float _1424 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1427 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1430 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1353, _1356, _1359, _1362));
    float _1464;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1437 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1041, _1045, _1048, _1051));
        float _1441 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1043, _1046, _1049, _1052));
        float _1445 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1044, _1047, _1050, _1053));
        float _1452 = dot(vec4(cbModelParam._m0[39u]), vec4(_1421, _1422, _1423, 1.0));
        _1464 = dot(vec3(isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)), isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1452) ? 0.0 : (isnan(0.0) ? _1452 : max(0.0, _1452))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1464 = 1.0;
    }
    float _1475;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1466 = dot(vec4(cbModelParam._m0[40u]), vec4(_1421, _1422, _1423, 1.0));
        _1475 = dot(vec3(isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1466) ? 0.0 : (isnan(0.0) ? _1466 : max(0.0, _1466))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1475 = 1.0;
    }
    float _1479 = (_1475 * cbModelParam._m0[1u].x) + (_1464 * (1.0 - cbModelParam._m0[1u].x));
    float _1489 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _482);
    float _1490 = isnan(_1489) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1489 : min(cbModelParam._m0[25u].z, _1489));
    float _1572;
    float _1574;
    float _1576;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1539 = fma(_711, cbModelParam._m0[13u].z, fma(_707, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _703)) + cbModelParam._m0[13u].w;
        float _1543 = fma(_711, cbModelParam._m0[14u].z, fma(_707, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _703)) + cbModelParam._m0[14u].w;
        float _1547 = fma(_711, cbModelParam._m0[15u].z, fma(_707, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _703)) + cbModelParam._m0[15u].w;
        float _1550 = fma(_652, cbModelParam._m0[13u].z, fma(_651, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _650));
        float _1553 = fma(_652, cbModelParam._m0[14u].z, fma(_651, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _650));
        float _1556 = fma(_652, cbModelParam._m0[15u].z, fma(_651, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _650));
        float _1584;
        if (_1550 > 0.0)
        {
            _1584 = abs((1.0 - _1539) / _1550);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1539 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1584 = frontier_phi_17_15_ladder;
        }
        float _1807;
        if (_1553 > 0.0)
        {
            _1807 = abs((1.0 - _1543) / _1553);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1543 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1807 = frontier_phi_26_22_ladder;
        }
        float _2053;
        if (_1556 > 0.0)
        {
            _2053 = abs((1.0 - _1547) / _1556);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1547 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2053 = frontier_phi_38_33_ladder;
        }
        float _2055 = isnan(_1807) ? _1584 : (isnan(_1584) ? _1807 : min(_1584, _1807));
        float _2056 = isnan(_2053) ? _2055 : (isnan(_2055) ? _2053 : min(_2055, _2053));
        float _2060 = (_2056 * _1550) + _1539;
        float _2061 = (_2056 * _1553) + _1543;
        float _2062 = (_2056 * _1556) + _1547;
        float _2063 = _2056 * 9.9999997473787516355514526367188e-05;
        float _2065 = (-1.0) - _2063;
        float _2067 = _2063 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2062 > _2067) || ((_2062 < _2065) || ((_2061 > _2067) || ((_2061 < _2065) || ((_2060 < _2065) || (_2060 > _2067))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2186 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2062, cbModelParam._m0[9u].z, fma(_2061, cbModelParam._m0[9u].y, _2060 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2062, cbModelParam._m0[10u].z, fma(_2061, cbModelParam._m0[10u].y, _2060 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2062, cbModelParam._m0[11u].z, fma(_2061, cbModelParam._m0[11u].y, _2060 * cbModelParam._m0[11u].x))), _1490);
            frontier_phi_16_38_ladder = _2186.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2186.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2186.x * cbModelParam._m0[1u].y;
        }
        _1572 = frontier_phi_16_38_ladder_2;
        _1574 = frontier_phi_16_38_ladder_1;
        _1576 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1560 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_650, _651, _652), _1490);
        _1572 = _1560.x * cbModelParam._m0[1u].y;
        _1574 = _1560.y * cbModelParam._m0[1u].y;
        _1576 = _1560.z * cbModelParam._m0[1u].y;
    }
    float _1580 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _482);
    float _1581 = isnan(_1580) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1580 : min(cbModelParam._m0[25u].w, _1580));
    float _1672;
    float _1674;
    float _1676;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1636 = fma(_711, cbModelParam._m0[21u].z, fma(_707, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _703)) + cbModelParam._m0[21u].w;
        float _1640 = fma(_711, cbModelParam._m0[22u].z, fma(_707, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _703)) + cbModelParam._m0[22u].w;
        float _1644 = fma(_711, cbModelParam._m0[23u].z, fma(_707, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _703)) + cbModelParam._m0[23u].w;
        float _1647 = fma(_652, cbModelParam._m0[21u].z, fma(_651, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _650));
        float _1650 = fma(_652, cbModelParam._m0[22u].z, fma(_651, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _650));
        float _1653 = fma(_652, cbModelParam._m0[23u].z, fma(_651, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _650));
        float _1812;
        if (_1647 > 0.0)
        {
            _1812 = abs((1.0 - _1636) / _1647);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1636 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1812 = frontier_phi_28_24_ladder;
        }
        float _2080;
        if (_1650 > 0.0)
        {
            _2080 = abs((1.0 - _1640) / _1650);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1640 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2080 = frontier_phi_40_35_ladder;
        }
        float _2285;
        if (_1653 > 0.0)
        {
            _2285 = abs((1.0 - _1644) / _1653);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1644 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2285 = frontier_phi_49_46_ladder;
        }
        float _2287 = isnan(_2080) ? _1812 : (isnan(_1812) ? _2080 : min(_1812, _2080));
        float _2288 = isnan(_2285) ? _2287 : (isnan(_2287) ? _2285 : min(_2287, _2285));
        float _2292 = (_2288 * _1647) + _1636;
        float _2293 = (_2288 * _1650) + _1640;
        float _2294 = (_2288 * _1653) + _1644;
        float _2295 = _2288 * 9.9999997473787516355514526367188e-05;
        float _2296 = (-1.0) - _2295;
        float _2298 = _2295 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2294 > _2298) || ((_2294 < _2296) || ((_2293 > _2298) || ((_2293 < _2296) || ((_2292 < _2296) || (_2292 > _2298))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2493 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2294, cbModelParam._m0[17u].z, fma(_2293, cbModelParam._m0[17u].y, _2292 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2294, cbModelParam._m0[18u].z, fma(_2293, cbModelParam._m0[18u].y, _2292 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2294, cbModelParam._m0[19u].z, fma(_2293, cbModelParam._m0[19u].y, _2292 * cbModelParam._m0[19u].x))), _1581);
            frontier_phi_25_49_ladder = _2493.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2493.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2493.x * cbModelParam._m0[1u].z;
        }
        _1672 = frontier_phi_25_49_ladder_2;
        _1674 = frontier_phi_25_49_ladder_1;
        _1676 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1656 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_650, _651, _652), _1581);
        _1672 = _1656.x * cbModelParam._m0[1u].z;
        _1674 = _1656.y * cbModelParam._m0[1u].z;
        _1676 = _1656.z * cbModelParam._m0[1u].z;
    }
    float _1688 = ((((1.0 - _671) * ((_658 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_671 * _658)) * _642;
    float _1689 = _1688 * ((cbModelParam._m0[1u].w * (_1672 - _1572)) + _1572);
    float _1690 = _1688 * ((cbModelParam._m0[1u].w * (_1674 - _1574)) + _1574);
    float _1691 = _1688 * ((cbModelParam._m0[1u].w * (_1676 - _1576)) + _1576);
    float _1694 = fma(_1691, cbSceneParam._m0[89u].z, fma(_1690, cbSceneParam._m0[89u].y, _1689 * cbSceneParam._m0[89u].x));
    float _1697 = fma(_1691, cbSceneParam._m0[90u].z, fma(_1690, cbSceneParam._m0[90u].y, _1689 * cbSceneParam._m0[90u].x));
    float _1700 = fma(_1691, cbSceneParam._m0[91u].z, fma(_1690, cbSceneParam._m0[91u].y, _1689 * cbSceneParam._m0[91u].x));
    vec4 _1708 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_579, _580));
    float _1710 = _1708.w;
    float _1722 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1710);
    float _1723 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1710);
    float _1724 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1710);
    uvec4 _1728 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1730 = _1728.x * 14u;
    uint _1731 = _1730 + 13u;
    float _1738 = _642 + (-1.0);
    float _1743 = (cbLight._m0[_1731].x * _1738) + 1.0;
    float _1744 = (cbLight._m0[_1731].y * _1738) + 1.0;
    float _1745 = (cbLight._m0[_1731].z * _1738) + 1.0;
    float _1746 = (cbLight._m0[_1731].w * _1738) + 1.0;
    uint _1747 = _1730 + 5u;
    float _1753 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
    uint _1757 = _1730 + 4u;
    float _1766 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
    uint _1770 = _1730 | 1u;
    float _1781 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_479, _480, _481));
    float _1784 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_479, _480, _481));
    float _3952 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _3963 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1789 = (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * 0.3183098733425140380859375;
    float _1791 = (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * 0.3183098733425140380859375;
    float _1798 = ((cbLight._m0[_1747].x * _1753) * _1791) + (((cbLight._m0[_1757].x * _1722) * _1766) * _1789);
    float _1799 = ((_1753 * cbLight._m0[_1747].y) * _1791) + (((cbLight._m0[_1757].y * _1723) * _1766) * _1789);
    float _1800 = ((_1753 * cbLight._m0[_1747].z) * _1791) + (((cbLight._m0[_1757].z * _1724) * _1766) * _1789);
    uvec4 _1804 = floatBitsToUint(cbLight._m0[_1730 + 12u]);
    bool _1806 = _1804.x == 0u;
    float _1817;
    float _1819;
    float _1821;
    if (_1806)
    {
        _1817 = _1798;
        _1819 = _1799;
        _1821 = _1800;
    }
    else
    {
        uint _1825 = _1730 + 6u;
        float _1841 = (dot(vec3(cbLight._m0[_1730 + 2u].xyz), vec3(_479, _480, _481)) * 0.5) + 0.5;
        float _1842 = _1841 * _1841;
        float _3974 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1843 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1844 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _1817 = (((cbLight._m0[_1825].x * 0.3183098733425140380859375) * _1843) * _1844) + _1798;
        _1819 = (((cbLight._m0[_1825].y * 0.3183098733425140380859375) * _1843) * _1844) + _1799;
        _1821 = (((cbLight._m0[_1825].z * 0.3183098733425140380859375) * _1843) * _1844) + _1800;
    }
    bool _1824 = _1804.y == 0u;
    float _1862;
    float _1864;
    float _1866;
    if (_1824)
    {
        _1862 = _1817;
        _1864 = _1819;
        _1866 = _1821;
    }
    else
    {
        uint _2024 = _1730 + 7u;
        float _2040 = (dot(vec3(cbLight._m0[_1730 + 3u].xyz), vec3(_479, _480, _481)) * 0.5) + 0.5;
        float _2041 = _2040 * _2040;
        float _3990 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2042 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _2043 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _1862 = (((cbLight._m0[_2024].x * 0.3183098733425140380859375) * _2042) * _2043) + _1817;
        _1864 = (((cbLight._m0[_2024].y * 0.3183098733425140380859375) * _2042) * _2043) + _1819;
        _1866 = (((cbLight._m0[_2024].z * 0.3183098733425140380859375) * _2042) * _2043) + _1821;
    }
    uint _1869 = _1730 + 8u;
    float _1882 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1730].w)) * _482) * 0.949999988079071044921875);
    float _1883 = _1882 * _1882;
    float _1884 = cbLight._m0[_1730].x + _559;
    float _1885 = cbLight._m0[_1730].y + _560;
    float _1886 = cbLight._m0[_1730].z + _561;
    float _1890 = inversesqrt(dot(vec3(_1884, _1885, _1886), vec3(_1884, _1885, _1886)));
    float _1891 = _1890 * _1884;
    float _1892 = _1890 * _1885;
    float _1893 = _1890 * _1886;
    float _1894 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_1730].xyz));
    float _4006 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1897 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _4017 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _1898 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _1899 = dot(vec3(_479, _480, _481), vec3(_1891, _1892, _1893));
    float _4028 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1902 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _1903 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_1891, _1892, _1893));
    float _4039 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1907 = _1883 * _1883;
    float _1911 = ((_1902 * _1902) * (_1907 + (-1.0))) + 1.0;
    float _1922 = (exp2(log2(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1923 = 1.0 - _1883;
    float _1934 = (0.5 / (((_1898 * ((_1897 * _1923) + _1883)) + 9.9999999392252902907785028219223e-09) + (((_1898 * _1923) + _1883) * _1897))) * _1897;
    float _4050 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1936 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1907 / ((_1911 * _1911) * 3.141590118408203125));
    uint _1950 = _1730 + 9u;
    float _1961 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1770].w)) * _482) * 0.949999988079071044921875);
    float _1962 = _1961 * _1961;
    float _1963 = cbLight._m0[_1770].x + _559;
    float _1964 = cbLight._m0[_1770].y + _560;
    float _1965 = cbLight._m0[_1770].z + _561;
    float _1969 = inversesqrt(dot(vec3(_1963, _1964, _1965), vec3(_1963, _1964, _1965)));
    float _1970 = _1969 * _1963;
    float _1971 = _1969 * _1964;
    float _1972 = _1969 * _1965;
    float _1973 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_1770].xyz));
    float _4061 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1976 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _1977 = dot(vec3(_479, _480, _481), vec3(_1970, _1971, _1972));
    float _4072 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _1981 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_1970, _1971, _1972));
    float _4083 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1985 = _1962 * _1962;
    float _1989 = ((_1980 * _1980) * (_1985 + (-1.0))) + 1.0;
    float _1998 = (exp2(log2(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1999 = 1.0 - _1962;
    float _2009 = (0.5 / (((_1898 * ((_1976 * _1999) + _1962)) + 9.9999999392252902907785028219223e-09) + (((_1898 * _1999) + _1962) * _1976))) * _1976;
    float _4094 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2011 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1985 / ((_1989 * _1989) * 3.141590118408203125));
    float _2021 = (((_1998 * cbLight._m0[_1950].x) * _2011) * _1753) + ((((cbLight._m0[_1869].x * _1722) * _1922) * _1936) * _1766);
    float _2022 = (((_1998 * cbLight._m0[_1950].y) * _2011) * _1753) + ((((cbLight._m0[_1869].y * _1723) * _1922) * _1936) * _1766);
    float _2023 = (((_1998 * cbLight._m0[_1950].z) * _2011) * _1753) + ((((cbLight._m0[_1869].z * _1724) * _1922) * _1936) * _1766);
    float _2085;
    float _2087;
    float _2089;
    if (_1806)
    {
        _2085 = _2021;
        _2087 = _2022;
        _2089 = _2023;
    }
    else
    {
        uint _2091 = _1730 + 2u;
        uint _2095 = _1730 + 10u;
        float _2109 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2091].w)) * _482) * 0.949999988079071044921875);
        float _2110 = _2109 * _2109;
        float _2111 = cbLight._m0[_2091].x + _559;
        float _2112 = cbLight._m0[_2091].y + _560;
        float _2113 = cbLight._m0[_2091].z + _561;
        float _2117 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
        float _2118 = _2117 * _2111;
        float _2119 = _2117 * _2112;
        float _2120 = _2117 * _2113;
        float _2121 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_2091].xyz));
        float _4105 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2124 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _2125 = dot(vec3(_479, _480, _481), vec3(_2118, _2119, _2120));
        float _4116 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2128 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _2129 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_2118, _2119, _2120));
        float _4127 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2133 = _2110 * _2110;
        float _2137 = ((_2128 * _2128) * (_2133 + (-1.0))) + 1.0;
        float _2146 = (exp2(log2(1.0 - (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2147 = 1.0 - _2110;
        float _2157 = (0.5 / (((_1898 * ((_2124 * _2147) + _2110)) + 9.9999999392252902907785028219223e-09) + (((_1898 * _2147) + _2110) * _2124))) * _2124;
        float _4138 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2159 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_2133 / ((_2137 * _2137) * 3.141590118408203125));
        float _2160 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _2085 = (((_2146 * cbLight._m0[_2095].x) * _2159) * _2160) + _2021;
        _2087 = (((_2146 * cbLight._m0[_2095].y) * _2159) * _2160) + _2022;
        _2089 = (((_2146 * cbLight._m0[_2095].z) * _2159) * _2160) + _2023;
    }
    float _2195;
    float _2197;
    float _2199;
    if (_1824)
    {
        _2195 = _2085;
        _2197 = _2087;
        _2199 = _2089;
    }
    else
    {
        uint _2206 = _1730 + 3u;
        uint _2210 = _1730 + 11u;
        float _2224 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2206].w)) * _482) * 0.949999988079071044921875);
        float _2225 = _2224 * _2224;
        float _2226 = cbLight._m0[_2206].x + _559;
        float _2227 = cbLight._m0[_2206].y + _560;
        float _2228 = cbLight._m0[_2206].z + _561;
        float _2232 = inversesqrt(dot(vec3(_2226, _2227, _2228), vec3(_2226, _2227, _2228)));
        float _2233 = _2232 * _2226;
        float _2234 = _2232 * _2227;
        float _2235 = _2232 * _2228;
        float _2236 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_2206].xyz));
        float _4154 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2239 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _2240 = dot(vec3(_479, _480, _481), vec3(_2233, _2234, _2235));
        float _4165 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2243 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _2244 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_2233, _2234, _2235));
        float _4176 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2248 = _2225 * _2225;
        float _2252 = ((_2243 * _2243) * (_2248 + (-1.0))) + 1.0;
        float _2261 = (exp2(log2(1.0 - (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2262 = 1.0 - _2225;
        float _2272 = (0.5 / (((_1898 * ((_2239 * _2262) + _2225)) + 9.9999999392252902907785028219223e-09) + (((_1898 * _2262) + _2225) * _2239))) * _2239;
        float _4187 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2274 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2248 / ((_2252 * _2252) * 3.141590118408203125));
        float _2275 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _2195 = (((_2261 * cbLight._m0[_2210].x) * _2274) * _2275) + _2085;
        _2197 = (((_2261 * cbLight._m0[_2210].y) * _2274) * _2275) + _2087;
        _2199 = (((_2261 * cbLight._m0[_2210].z) * _2274) * _2275) + _2089;
    }
    float _2410;
    float _2412;
    float _2414;
    float _2416;
    float _2418;
    float _2420;
    if (_1728.y == 0u)
    {
        float _2350 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2351 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2350;
        float _2352 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2350;
        float _2353 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2350;
        uvec4 _2365 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2366 = _2365.x;
        uint _2377 = uint((float(_2365.y) * floor(float(uint(cbSceneParam._m0[85u].y * _580) / _2366))) + floor(float(uint(cbSceneParam._m0[85u].x * _579) / _2366)));
        float _2387 = (log2(_2353 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2388 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        uint _2391 = uint(isnan(14.0) ? _2388 : (isnan(_2388) ? 14.0 : min(_2388, 14.0)));
        uvec4 _2396 = texelFetch(g_lightClusterGridBuffer, int(((_2391 << 2u) + (_2377 << 6u)) >> 2u));
        uint _2397 = _2396.x;
        uint _2398 = _2365.z;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        if (((((1u << ((_2398 >> 4u) & 15u)) + 4294967295u) & _2397) == 0u) || ((_2398 & 240u) == 0u))
        {
            _2498 = 0.0;
            _2500 = 0.0;
            _2502 = 0.0;
            _2504 = 0.0;
            _2506 = 0.0;
            _2508 = 0.0;
        }
        else
        {
            float _2499;
            float _2501;
            float _2503;
            float _2505;
            float _2507;
            float _2509;
            float _2651 = 0.0;
            float _2652 = 0.0;
            float _2653 = 0.0;
            float _2654 = 0.0;
            float _2655 = 0.0;
            float _2656 = 0.0;
            uint _2657 = 0u;
            uint _2666;
            bool _2667;
            for (;;)
            {
                _2666 = texelFetch(g_lightClassification, int((((_2391 << 5u) + (_2377 << 9u)) + (_2657 << 2u)) >> 2u)).x;
                _2667 = _2666 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2667)
                {
                    frontier_phi_66_pred = _2651;
                    frontier_phi_66_pred_1 = _2656;
                    frontier_phi_66_pred_2 = _2655;
                    frontier_phi_66_pred_3 = _2654;
                    frontier_phi_66_pred_4 = _2653;
                    frontier_phi_66_pred_5 = _2652;
                }
                else
                {
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    uint _2802;
                    _2796 = _2651;
                    _2797 = _2652;
                    _2798 = _2653;
                    _2799 = _2654;
                    _2800 = _2655;
                    _2801 = _2656;
                    _2802 = _2666;
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    for (;;)
                    {
                        uint _2806 = uint(findLSB(_2802)) + (_2657 << 5u);
                        uint _2803 = (_2802 + 4294967295u) & _2802;
                        uint _2808 = _2806 * 48u;
                        vec4 _2822 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2808)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 3u)).x));
                        uint _2828 = (_2806 * 48u) + 4u;
                        vec4 _2841 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2828)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 3u)).x));
                        uint _2847 = (_2806 * 48u) + 8u;
                        vec3 _2858 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2847)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 2u)).x));
                        float _2862 = _2822.x - _2351;
                        float _2863 = _2822.y - _2352;
                        float _2864 = _2822.z - _2353;
                        float _2865 = dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864));
                        float _2868 = inversesqrt(_2865);
                        float _2869 = _2868 * _2862;
                        float _2870 = _2868 * _2863;
                        float _2871 = _2868 * _2864;
                        float _2872 = dot(vec3(_598, _601, _604), vec3(_2869, _2870, _2871));
                        float _2877 = 1.0 - (_2865 * _2822.w);
                        float _4213 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2878 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                        float _2879 = sqrt(_2865) * _2841.w;
                        float _2882 = 1.39999997615814208984375 / (_2879 + 1.39999997615814208984375);
                        float _2883 = _2882 * _2882;
                        float _2886 = ((1.0 - _2883) * _2872) + _2883;
                        float _2889 = _2879 * _2879;
                        float _2893 = ((isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0))) * _2878) / ((_2889 * 0.699999988079071044921875) + 1.0);
                        float _2897 = (-0.0) - _2351;
                        float _2898 = (-0.0) - _2352;
                        float _2899 = (-0.0) - _2353;
                        float _2903 = inversesqrt(dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899)));
                        float _2904 = _2903 * _2897;
                        float _2905 = _2903 * _2898;
                        float _2906 = _2903 * _2899;
                        float _2914 = exp2(log2(1.0 / ((_2889 * 3.5) + 5.0)) * 0.25);
                        float _2915 = 1.0 - _658;
                        float _2922 = sqrt(1.0 - ((1.0 - (_2915 * _2915)) * (1.0 - (_2914 * _2914))));
                        float _2923 = _2922 * _2922;
                        float _2924 = _2923 * _2923;
                        float _2925 = _2904 + _2869;
                        float _2926 = _2905 + _2870;
                        float _2927 = _2906 + _2871;
                        float _2931 = inversesqrt(dot(vec3(_2925, _2926, _2927), vec3(_2925, _2926, _2927)));
                        float _2935 = dot(vec3(_598, _601, _604), vec3(_2904, _2905, _2906));
                        float _4229 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2938 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                        float _2939 = dot(vec3(_598, _601, _604), vec3(_2931 * _2925, _2931 * _2926, _2931 * _2927));
                        float _4240 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2942 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                        float _2946 = ((_2942 * _2942) * (_2924 + (-1.0))) + 1.0;
                        float _2947 = _2882 * _2923;
                        float _2948 = _2947 * _2947;
                        float _2951 = ((1.0 - _2948) * _2872) + _2948;
                        float _4251 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2952 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                        float _2953 = 1.0 - _2923;
                        float _2963 = (0.5 / (((_2952 * ((_2938 * _2953) + _2923)) + 9.9999999392252902907785028219223e-09) + (((_2952 * _2953) + _2923) * _2938))) * _2952;
                        float _4262 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2974 = (((_2924 * 3.1415927410125732421875) * (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) / ((_2946 * _2946) * ((_2889 * 2.1991131305694580078125) + 3.141590118408203125))) * _2878;
                        _2726 = (_2893 * _2841.x) + _2799;
                        _2727 = (_2893 * _2841.y) + _2800;
                        _2728 = (_2893 * _2841.z) + _2801;
                        _2723 = (_2974 * _2858.x) + _2796;
                        _2724 = (_2974 * _2858.y) + _2797;
                        _2725 = (_2974 * _2858.z) + _2798;
                        if (_2803 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2796 = _2723;
                            _2797 = _2724;
                            _2798 = _2725;
                            _2799 = _2726;
                            _2800 = _2727;
                            _2801 = _2728;
                            _2802 = _2803;
                        }
                    }
                    frontier_phi_66_pred = _2723;
                    frontier_phi_66_pred_1 = _2728;
                    frontier_phi_66_pred_2 = _2727;
                    frontier_phi_66_pred_3 = _2726;
                    frontier_phi_66_pred_4 = _2725;
                    frontier_phi_66_pred_5 = _2724;
                }
                _2499 = frontier_phi_66_pred;
                _2509 = frontier_phi_66_pred_1;
                _2507 = frontier_phi_66_pred_2;
                _2505 = frontier_phi_66_pred_3;
                _2503 = frontier_phi_66_pred_4;
                _2501 = frontier_phi_66_pred_5;
                uint _2658 = _2657 + 1u;
                if (_2658 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2651 = _2499;
                    _2652 = _2501;
                    _2653 = _2503;
                    _2654 = _2505;
                    _2655 = _2507;
                    _2656 = _2509;
                    _2657 = _2658;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2498 = _2499;
            _2500 = _2501;
            _2502 = _2503;
            _2504 = _2505;
            _2506 = _2507;
            _2508 = _2509;
        }
        uvec4 _2512 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2513 = _2512.z;
        uint _2515 = (_2513 >> 8u) & 15u;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        if (((4294967295u << _2515) & _2397) == 0u)
        {
            _2619 = _2498;
            _2621 = _2500;
            _2623 = _2502;
            _2625 = _2504;
            _2627 = _2506;
            _2629 = _2508;
        }
        else
        {
            float _2644 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
            float _2645 = _2644 * _2351;
            float _2646 = _2644 * _2352;
            float _2647 = _2644 * _2353;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2515 < ((_2513 >> 12u) & 15u))
            {
                float _2620;
                float _2622;
                float _2624;
                float _2626;
                float _2628;
                float _2630;
                float _2779 = _2498;
                float _2780 = _2500;
                float _2781 = _2502;
                float _2782 = _2504;
                float _2783 = _2506;
                float _2784 = _2508;
                uint _2785 = _2515;
                uint _2794;
                bool _2795;
                for (;;)
                {
                    _2794 = texelFetch(g_lightClassification, int((((_2391 << 5u) + (_2377 << 9u)) + (_2785 << 2u)) >> 2u)).x;
                    _2795 = _2794 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2795)
                    {
                        frontier_phi_77_pred = _2784;
                        frontier_phi_77_pred_1 = _2783;
                        frontier_phi_77_pred_2 = _2782;
                        frontier_phi_77_pred_3 = _2781;
                        frontier_phi_77_pred_4 = _2780;
                        frontier_phi_77_pred_5 = _2779;
                    }
                    else
                    {
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2992;
                        float _2993;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3001 = _2779;
                        float _3002 = _2780;
                        float _3003 = _2781;
                        float _3004 = _2782;
                        float _3005 = _2783;
                        float _3006 = _2784;
                        uint _3007 = _2794;
                        uint _3008;
                        vec4 _3033;
                        float _3034;
                        vec4 _3049;
                        vec3 _3061;
                        vec4 _3076;
                        vec4 _3092;
                        float _3138;
                        bool _3139;
                        for (;;)
                        {
                            uint _3018 = ((_2785 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3007));
                            _3008 = (_3007 + 4294967295u) & _3007;
                            uint _3020 = _3018 * 40u;
                            _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            _3034 = _3033.w;
                            uint _3036 = (_3018 * 40u) + 4u;
                            _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            uint _3051 = (_3018 * 40u) + 8u;
                            _3061 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3051)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 2u)).x));
                            uint _3063 = (_3018 * 40u) + 16u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            uint _3079 = (_3018 * 40u) + 20u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            uint _3094 = (_3018 * 40u) + 24u;
                            vec4 _3107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 3u)).x));
                            uint _3113 = (_3018 * 40u) + 28u;
                            vec4 _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            _3138 = fma(_2353, _3126.z, fma(_2352, _3126.y, _3126.x * _2351)) + _3126.w;
                            _3139 = !((fma(_2353, _3107.z, fma(_2352, _3107.y, _3107.x * _2351)) + _3107.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3139)
                            {
                                float _3166 = _3033.x - _2351;
                                float _3167 = _3033.y - _2352;
                                float _3168 = _3033.z - _2353;
                                float _3169 = dot(vec3(_3166, _3167, _3168), vec3(_3166, _3167, _3168));
                                float _3172 = inversesqrt(_3169);
                                float _3173 = _3172 * _3166;
                                float _3174 = _3172 * _3167;
                                float _3175 = _3172 * _3168;
                                float _3179 = 1.0 - (_3169 / (_3034 * _3034));
                                float _4273 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                                float _3180 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                                float _3184 = sqrt(_3169) * _3049.w;
                                float _3186 = 1.39999997615814208984375 / (_3184 + 1.39999997615814208984375);
                                float _3187 = _3186 * _3186;
                                float _3190 = ((1.0 - _3187) * dot(vec3(_3173, _3174, _3175), vec3(_598, _601, _604))) + _3187;
                                float _3193 = _3184 * _3184;
                                float _3197 = (fma(_2353, _3076.z, fma(_2352, _3076.y, _3076.x * _2351)) + _3076.w) / _3138;
                                float _3198 = (fma(_2353, _3092.z, fma(_2352, _3092.y, _3092.x * _2351)) + _3092.w) / _3138;
                                float _3202 = 1.0 - dot(vec2(_3197, _3198), vec2(_3197, _3198));
                                float _4289 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3203 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                                float _3204 = _3203 * (((isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0))) * _3180) / ((_3193 * 0.699999988079071044921875) + 1.0));
                                float _3216 = exp2(log2(1.0 / ((_3193 * 3.5) + 5.0)) * 0.25);
                                float _3217 = 1.0 - _658;
                                float _3224 = sqrt(1.0 - ((1.0 - (_3217 * _3217)) * (1.0 - (_3216 * _3216))));
                                float _3225 = _3224 * _3224;
                                float _3226 = _3225 * _3225;
                                float _3227 = _3173 - _2645;
                                float _3228 = _3174 - _2646;
                                float _3229 = _3175 - _2647;
                                float _3233 = inversesqrt(dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229)));
                                float _3237 = dot(vec3(_598, _601, _604), vec3((-0.0) - _2645, (-0.0) - _2646, (-0.0) - _2647));
                                float _4300 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3240 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                                float _3241 = dot(vec3(_598, _601, _604), vec3(_3233 * _3227, _3233 * _3228, _3233 * _3229));
                                float _4311 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3244 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                                float _3248 = ((_3244 * _3244) * (_3226 + (-1.0))) + 1.0;
                                float _3249 = _3186 * _3225;
                                float _3250 = _3249 * _3249;
                                float _3256 = ((1.0 - _3250) * dot(vec3(_598, _601, _604), vec3(_3173, _3174, _3175))) + _3250;
                                float _4322 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3257 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                                float _3258 = 1.0 - _3225;
                                float _3268 = (0.5 / (((_3257 * ((_3240 * _3258) + _3225)) + 9.9999999392252902907785028219223e-09) + (((_3257 * _3258) + _3225) * _3240))) * _3257;
                                float _4333 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3278 = (_3203 * _3180) * (((_3226 * 3.1415927410125732421875) * (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) / ((_3248 * _3248) * ((_3193 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3204 * _3049.y;
                                frontier_phi_83_pred_1 = _3204 * _3049.x;
                                frontier_phi_83_pred_2 = _3278 * _3061.z;
                                frontier_phi_83_pred_3 = _3278 * _3061.y;
                                frontier_phi_83_pred_4 = _3278 * _3061.x;
                                frontier_phi_83_pred_5 = _3204 * _3049.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3286 = frontier_phi_83_pred;
                            _3285 = frontier_phi_83_pred_1;
                            _3284 = frontier_phi_83_pred_2;
                            _3283 = frontier_phi_83_pred_3;
                            _3282 = frontier_phi_83_pred_4;
                            _3287 = frontier_phi_83_pred_5;
                            _2991 = _3285 + _3004;
                            _2992 = _3286 + _3005;
                            _2993 = _3287 + _3006;
                            _2988 = _3282 + _3001;
                            _2989 = _3283 + _3002;
                            _2990 = _3284 + _3003;
                            if (_3008 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _3008;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2993;
                        frontier_phi_77_pred_1 = _2992;
                        frontier_phi_77_pred_2 = _2991;
                        frontier_phi_77_pred_3 = _2990;
                        frontier_phi_77_pred_4 = _2989;
                        frontier_phi_77_pred_5 = _2988;
                    }
                    _2630 = frontier_phi_77_pred;
                    _2628 = frontier_phi_77_pred_1;
                    _2626 = frontier_phi_77_pred_2;
                    _2624 = frontier_phi_77_pred_3;
                    _2622 = frontier_phi_77_pred_4;
                    _2620 = frontier_phi_77_pred_5;
                    uint _2786 = _2785 + 1u;
                    if (_2786 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2779 = _2620;
                        _2780 = _2622;
                        _2781 = _2624;
                        _2782 = _2626;
                        _2783 = _2628;
                        _2784 = _2630;
                        _2785 = _2786;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2624;
                frontier_phi_58_59_ladder_1 = _2630;
                frontier_phi_58_59_ladder_2 = _2628;
                frontier_phi_58_59_ladder_3 = _2626;
                frontier_phi_58_59_ladder_4 = _2622;
                frontier_phi_58_59_ladder_5 = _2620;
            }
            else
            {
                frontier_phi_58_59_ladder = _2502;
                frontier_phi_58_59_ladder_1 = _2508;
                frontier_phi_58_59_ladder_2 = _2506;
                frontier_phi_58_59_ladder_3 = _2504;
                frontier_phi_58_59_ladder_4 = _2500;
                frontier_phi_58_59_ladder_5 = _2498;
            }
            _2619 = frontier_phi_58_59_ladder_5;
            _2621 = frontier_phi_58_59_ladder_4;
            _2623 = frontier_phi_58_59_ladder;
            _2625 = frontier_phi_58_59_ladder_3;
            _2627 = frontier_phi_58_59_ladder_2;
            _2629 = frontier_phi_58_59_ladder_1;
        }
        float _2634 = isnan(1.0) ? _642 : (isnan(_642) ? 1.0 : min(_642, 1.0));
        _2410 = (_2634 * _2625) + _1862;
        _2412 = (_2634 * _2627) + _1864;
        _2414 = (_2634 * _2629) + _1866;
        _2416 = ((_2619 * 0.039999999105930328369140625) * _2634) + _2195;
        _2418 = ((_2621 * 0.039999999105930328369140625) * _2634) + _2197;
        _2420 = ((_2623 * 0.039999999105930328369140625) * _2634) + _2199;
    }
    else
    {
        _2410 = _1862;
        _2412 = _1864;
        _2414 = _1866;
        _2416 = _2195;
        _2418 = _2197;
        _2420 = _2199;
    }
    float _4349 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _4360 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _4371 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _2437 = ((isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2410 + ((isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))) * _642))) + ((_2416 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1479)) * cbPerFrame._m0[3u].x);
    float _2438 = ((isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2412 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _642))) + ((_2418 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1479)) * cbPerFrame._m0[3u].x);
    float _2439 = ((isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2414 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _642))) + ((_2420 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1479)) * cbPerFrame._m0[3u].x);
    uint _2440 = _228 + 6u;
    float _2448 = _579 / cbSceneParam._m0[86u].x;
    float _2449 = _580 / cbSceneParam._m0[86u].y;
    vec4 _2463 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2448, _2449, (log2((isnan(cbSceneParam._m0[77u].w) ? _500 : (isnan(_500) ? cbSceneParam._m0[77u].w : min(_500, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2465 = _2463.x;
    float _2466 = _2463.y;
    float _2467 = _2463.z;
    float _2468 = _2463.w;
    float _2561;
    float _2563;
    float _2565;
    float _2567;
    if (_500 > cbSceneParam._m0[78u].w)
    {
        float _2523 = isnan(_500) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _500 : min(cbSceneParam._m0[80u].w, _500));
        float _2524 = _2523 / _500;
        float _2535 = _2524 * _552;
        float _2536 = _553 * _2524;
        float _2537 = (-0.0) - _2536;
        float _2539 = _2524 * _554;
        float _2541 = (cbSceneParam._m0[77u].w * _2537) / _2523;
        float _2542 = _2541 + cbSceneParam._m0[79u].w;
        float _2543 = cbSceneParam._m0[79u].w - _2536;
        float _2549 = sqrt(((_2535 * _2535) + (_2536 * _2536)) + (_2539 * _2539));
        float _2552 = (1.0 - (cbSceneParam._m0[77u].w / _2523)) * _2549;
        float _2557 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2559 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2736;
        if (abs((_2537 - _2541) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2736 = ((((_2542 > 0.0) ? exp2(_2557 * _2542) : (2.0 - exp2(_2559 * _2542))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2552;
        }
        else
        {
            float _2680 = 1.0 / cbSceneParam._m0[80u].x;
            float _2681 = isnan(_2543) ? _2542 : (isnan(_2542) ? _2543 : max(_2542, _2543));
            float _2682 = isnan(_2543) ? _2542 : (isnan(_2542) ? _2543 : min(_2542, _2543));
            float _2691 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : min(_2681, 0.0));
            float _2692 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : min(_2682, 0.0));
            _2736 = ((abs(_2549 / _2537) * cbSceneParam._m0[80u].y) * ((((_2691 - _2692) * 2.0) - ((exp2(_2557 * (isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0)))) - exp2(_2557 * (isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0))))) * _2680)) - ((exp2(_2559 * _2691) - exp2(_2559 * _2692)) * _2680))) + (_2552 * cbSceneParam._m0[80u].z);
        }
        vec4 _2738 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2448, _2449, 1.0), 0.0);
        float _2747 = exp2((_2736 * (-1.44269502162933349609375)) * (1.0 - _2738.w));
        float _2748 = log2(_2747);
        float _2764 = log2(_2468);
        _2561 = (exp2(_2764 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2748 * cbSceneParam._m0[78u].x)) * _2738.x) / cbSceneParam._m0[78u].x)) + _2465;
        _2563 = (exp2(_2764 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2748 * cbSceneParam._m0[78u].y)) * _2738.y) / cbSceneParam._m0[78u].y)) + _2466;
        _2565 = (exp2(_2764 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2748 * cbSceneParam._m0[78u].z)) * _2738.z) / cbSceneParam._m0[78u].z)) + _2467;
        _2567 = _2747 * _2468;
    }
    else
    {
        _2561 = _2465;
        _2563 = _2466;
        _2565 = _2467;
        _2567 = _2468;
    }
    bool _2774;
    vec4 _2577;
    vec4 _2599;
    float _2601;
    float _2605;
    float _2606;
    float _2607;
    float _2608;
    bool _2618;
    for (;;)
    {
        _2577 = cbMatDynParam._m0[0u];
        float _2579 = roundEven(_2577.y);
        bool _2580 = _2579 == 3.0;
        float _2581 = log2(_2567);
        float _2588 = exp2(_2581 * cbSceneParam._m0[78u].x) * _2437;
        float _2589 = exp2(_2581 * cbSceneParam._m0[78u].y) * _2438;
        float _2590 = exp2(_2581 * cbSceneParam._m0[78u].z) * _2439;
        float _2597 = _568 + (-0.5);
        _2599 = cbMtdParam._m0[1u];
        _2601 = _2599.y * _2597;
        float _2604 = (_2579 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2605 = _2604 * (_2580 ? _2588 : (_2588 + (cbSceneParam._m0[72u].w * _2561)));
        _2606 = _2604 * (_2580 ? _2589 : (_2589 + (cbSceneParam._m0[72u].w * _2563)));
        _2607 = _2604 * (_2580 ? _2590 : (_2590 + (cbSceneParam._m0[72u].w * _2565)));
        _2608 = _2597 * 0.999000012874603271484375;
        _2618 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2618)
        {
            if ((cbInstanceData._m0[_228 + 7u].x + _2608) < 0.5)
            {
                _2774 = true;
                break;
            }
        }
        uint _2715 = _617 + uint(_2577.w);
        if ((cbInstanceData._m0[_2715].w < 1.0) && ((cbInstanceData._m0[_2715].w + _2608) < 0.5))
        {
            _2774 = true;
            break;
        }
        if ((_2601 + 1.0) < _2599.x)
        {
            _2774 = true;
            break;
        }
        _2774 = false;
        break;
    }
    float _2979;
    if (_2774)
    {
        discard_state = true;
        _2979 = 0.0;
    }
    else
    {
        _2979 = cbInstanceData._m0[_2440].w;
    }
    SV_Target.x = _2605;
    SV_Target.y = _2606;
    SV_Target.z = _2607;
    SV_Target.w = _2979;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2440].w;
    discard_exit();
}


