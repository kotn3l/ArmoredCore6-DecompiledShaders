#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1207;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _366 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _383 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _366) * cbMtdParam._m0[24u].x) + _366) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3796 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _391 = (_384 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _392 = (_384 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _393 = (_384 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _406 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _268) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _269) + cbTextureTilingScale._m0[20u].w));
    vec4 _431 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _448 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _450 = _448.x;
    float _451 = _448.y;
    float _452 = _448.z;
    float _461 = ((_431.z - _452) * _384) + _452;
    float _464 = ((((_431.x - _450) * _384) + _450) * 2.0) + (-1.0);
    float _465 = ((((_431.y - _451) * _384) + _451) * 2.0) + (-1.0);
    float _466 = dot(vec2(_464, _465), vec2(_464, _465));
    float _3807 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _471 = sqrt(1.0 - (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))));
    float _476 = _464 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_406.x * 2.0) + (-1.0)));
    float _477 = _465 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_406.y * 2.0) + (-1.0)));
    vec4 _490 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _504 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _506 = _504.x;
    float _507 = 1.0 - _506;
    float _535 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_506 - _507) * cbMtdParam._m0[24u].w) + _507) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3818 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _536 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _544 = ((((cbMtdParam._m0[10u].x - _391) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _536) + _391;
    float _545 = ((((cbMtdParam._m0[10u].y - _392) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _536) + _392;
    float _546 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _393)) * _536) + _393;
    float _551 = (((_406.z - _461) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _461;
    float _555 = ((cbMtdParam._m0[23u].y - _551) * _536) + _551;
    vec4 _574 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _576 = _574.x;
    float _577 = _574.y;
    float _583 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_237, _238, _239, 0.0));
    vec4 _598 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _268) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _269) + cbTextureTilingScale._m0[18u].w));
    float _600 = _598.x;
    float _605 = fract(_598.w + cbPerFrame._m0[22u].x);
    float _607 = (1.0 - _605) * _600;
    float _612 = ((_605 + (-1.0)) + _600) * 9.0;
    float _614 = ((_600 + (-1.0)) + _605) * 9.0;
    float _615 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _616 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _630 = (_607 * ((_598.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _615 : (isnan(_615) ? 3.0 : min(_615, 3.0))) * 3.1415927410125732421875);
    float _632 = (_607 * ((_598.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _616 : (isnan(_616) ? 3.0 : min(_616, 3.0))) * 3.1415927410125732421875);
    float _636 = inversesqrt(dot(vec3(_630, _632, 1.0), vec3(_630, _632, 1.0)));
    float _652 = (((((0.5 - _576) + ((_630 * 0.5) * _636)) * _583) + _576) * 2.0) + (-1.0);
    float _653 = (((((0.5 - _577) + ((_636 * 0.5) * _632)) * _583) + _577) * 2.0) + (-1.0);
    float _654 = dot(vec2(_652, _653), vec2(_652, _653));
    float _3849 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _670 = ((((cbMtdParam._m0[22u].z * _476) - _476) + _652) * _536) + _476;
    float _671 = ((((cbMtdParam._m0[22u].z * _477) - _477) + _653) * _536) + _477;
    float _672 = (_536 * (sqrt(1.0 - (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) - _471)) + _471;
    float _674 = cbMtdParam._m0[22u].x + _490.w;
    float _677 = fma(_672, _237, fma(_671, _243 * TANGENT.x, (_229 * _221) * _670));
    float _680 = fma(_672, _238, fma(_671, _243 * TANGENT.y, (_229 * _222) * _670));
    float _683 = fma(_672, _239, fma(_671, _243 * TANGENT.z, (_229 * _223) * _670));
    float _687 = inversesqrt(dot(vec3(_677, _680, _683), vec3(_677, _680, _683)));
    float _688 = _687 * _677;
    float _689 = _687 * _680;
    float _690 = _687 * _683;
    float _3860 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _691 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _3871 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _3882 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _3893 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _3904 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _709 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _760 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _750);
    float _761 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _750);
    float _762 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _750);
    float _766 = inversesqrt(dot(vec3(_760, _761, _762), vec3(_760, _761, _762)));
    float _767 = _760 * _766;
    float _768 = _761 * _766;
    float _769 = _762 * _766;
    float _775 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _776 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _794 = fma(_690, cbSceneParam._m0[5u].z, fma(_689, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _688));
    float _797 = fma(_690, cbSceneParam._m0[6u].z, fma(_689, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _688));
    float _800 = fma(_690, cbSceneParam._m0[7u].z, fma(_689, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _688));
    uint _814 = (_249 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _820 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_814].x;
    float _821 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * cbInstanceData._m0[_814].y;
    float _822 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * cbInstanceData._m0[_814].z;
    float _3915 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _3926 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _824 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _3937 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    vec4 _834 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _775, cbSceneParam._m0[86u].y * _776));
    float _838 = ((isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * TEXCOORD_5.w) * _834.x;
    float _839 = dot(vec3(_688, _689, _690), vec3(_767, _768, _769));
    float _842 = _839 * 2.0;
    float _846 = (_842 * _688) - _767;
    float _847 = (_842 * _689) - _768;
    float _848 = (_842 * _690) - _769;
    float _852 = abs(dot(vec3(_767, _768, _769), vec3(_688, _689, _690)));
    float _3948 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _854 = sqrt(_691);
    float _866 = exp2((_854 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_854 * 3.0));
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _902 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1206;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _932 = fma(_906, cbModelParam._m0[26u].z, fma(_902, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _898));
        float _936 = fma(_906, cbModelParam._m0[27u].z, fma(_902, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _898));
        float _940 = fma(_906, cbModelParam._m0[28u].z, fma(_902, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _898));
        float _964 = _898 + _688;
        float _965 = _902 + _689;
        float _966 = _906 + _690;
        float _976 = fma(_966, cbModelParam._m0[26u].z, fma(_965, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _964)) - _932;
        float _977 = fma(_966, cbModelParam._m0[27u].z, fma(_965, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _964)) - _936;
        float _978 = fma(_966, cbModelParam._m0[28u].z, fma(_965, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _964)) - _940;
        float _982 = inversesqrt(dot(vec3(_976, _977, _978), vec3(_976, _977, _978)));
        float _995 = ((_982 * _976) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_932 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_982 * _977) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_936 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_982 * _978) / cbModelParam._m0[34u].z) + ((((((_940 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        float _1034 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_1000.x + (-0.5));
        float _1036 = _1034 * (_1000.y + (-0.5));
        float _1037 = _1034 * (_1000.z + (-0.5));
        float _1044 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1007.x + (-0.5));
        float _1046 = _1044 * (_1007.y + (-0.5));
        float _1047 = _1044 * (_1007.z + (-0.5));
        float _1054 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1014.x + (-0.5));
        float _1056 = _1054 * (_1014.y + (-0.5));
        float _1057 = _1054 * (_1014.z + (-0.5));
        float _1064 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1021.x + (-0.5));
        float _1066 = _1064 * (_1021.y + (-0.5));
        float _1067 = _1064 * (_1021.z + (-0.5));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = _1035 * 0.5;
        float _1072 = _1045 * 0.5;
        float _1073 = _1055 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1088 = (dot(vec3(_688, _689, _690), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1098 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3996 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1100 + 1.0))) + _1105) * _1068;
        float _1115 = _1036 * 0.5;
        float _1116 = _1046 * 0.5;
        float _1117 = _1056 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_688, _689, _690), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _4029 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1142 + 1.0))) + _1147) * _1069;
        float _1157 = _1037 * 0.5;
        float _1158 = _1047 * 0.5;
        float _1159 = _1057 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_688, _689, _690), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _4062 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1184 + 1.0))) + _1189) * _1070;
        _1206 = _1037;
        _1208 = _1036;
        _1209 = _1035;
        _1210 = _1047;
        _1211 = _1046;
        _1212 = _1045;
        _1213 = _1057;
        _1214 = _1056;
        _1215 = _1055;
        _1216 = _1070;
        _1217 = _1069;
        _1218 = _1068;
        _1219 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1220 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
        _1221 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
    }
    else
    {
        _1206 = _1207;
        _1208 = _1207;
        _1209 = _1207;
        _1210 = _1207;
        _1211 = _1207;
        _1212 = _1207;
        _1213 = _1207;
        _1214 = _1207;
        _1215 = _1207;
        _1216 = _1207;
        _1217 = _1207;
        _1218 = _1207;
        _1219 = 0.0;
        _1220 = 0.0;
        _1221 = 0.0;
    }
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1246 = fma(_906, cbModelParam._m0[30u].z, fma(_902, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _898));
        float _1250 = fma(_906, cbModelParam._m0[31u].z, fma(_902, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _898));
        float _1254 = fma(_906, cbModelParam._m0[32u].z, fma(_902, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _898));
        float _1277 = _898 + _688;
        float _1278 = _902 + _689;
        float _1279 = _906 + _690;
        float _1289 = fma(_1279, cbModelParam._m0[30u].z, fma(_1278, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1277)) - _1246;
        float _1290 = fma(_1279, cbModelParam._m0[31u].z, fma(_1278, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1277)) - _1250;
        float _1291 = fma(_1279, cbModelParam._m0[32u].z, fma(_1278, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1277)) - _1254;
        float _1295 = inversesqrt(dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291)));
        float _1308 = ((_1295 * _1289) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1246 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1309 = ((_1295 * _1290) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1250 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1310 = ((_1295 * _1291) / cbModelParam._m0[35u].z) + ((((((_1254 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        float _1345 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1312.x + (-0.5));
        float _1347 = _1345 * (_1312.y + (-0.5));
        float _1348 = _1345 * (_1312.z + (-0.5));
        float _1355 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1319.x + (-0.5));
        float _1357 = _1355 * (_1319.y + (-0.5));
        float _1358 = _1355 * (_1319.z + (-0.5));
        float _1365 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1326.x + (-0.5));
        float _1367 = _1365 * (_1326.y + (-0.5));
        float _1368 = _1365 * (_1326.z + (-0.5));
        float _1375 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1333.x + (-0.5));
        float _1377 = _1375 * (_1333.y + (-0.5));
        float _1378 = _1375 * (_1333.z + (-0.5));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = _1346 * 0.5;
        float _1383 = _1356 * 0.5;
        float _1384 = _1366 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_688, _689, _690), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _4125 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1409 + 1.0))) + _1414) * _1379;
        float _1424 = _1347 * 0.5;
        float _1425 = _1357 * 0.5;
        float _1426 = _1367 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_688, _689, _690), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _4158 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1451 + 1.0))) + _1456) * _1380;
        float _1466 = _1348 * 0.5;
        float _1467 = _1358 * 0.5;
        float _1468 = _1368 * 0.5;
        float _1469 = dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468));
        float _1474 = (_1469 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1469);
        float _1482 = (dot(vec3(_688, _689, _690), vec3(_1474 * _1466, _1474 * _1467, _1474 * _1468)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1491 = sqrt(((_1467 * _1467) + (_1466 * _1466)) + (_1468 * _1468)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1493 = _1492 * 2.0;
        float _1497 = (1.0 - _1492) / (_1492 + 1.0);
        float _4191 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1507 = ((((1.0 - _1498) * (_1493 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1493 + 1.0))) + _1498) * _1381;
        _1515 = _1348;
        _1516 = _1347;
        _1517 = _1346;
        _1518 = _1358;
        _1519 = _1357;
        _1520 = _1356;
        _1521 = _1368;
        _1522 = _1367;
        _1523 = _1366;
        _1524 = _1381;
        _1525 = _1380;
        _1526 = _1379;
        _1527 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
        _1528 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
        _1529 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)));
    }
    else
    {
        _1515 = _1207;
        _1516 = _1207;
        _1517 = _1207;
        _1518 = _1207;
        _1519 = _1207;
        _1520 = _1207;
        _1521 = _1207;
        _1522 = _1207;
        _1523 = _1207;
        _1524 = _1207;
        _1525 = _1207;
        _1526 = _1207;
        _1527 = 0.0;
        _1528 = 0.0;
        _1529 = 0.0;
    }
    float _1539 = (cbModelParam._m0[1u].x * (_1527 - _1219)) + _1219;
    float _1540 = (cbModelParam._m0[1u].x * (_1528 - _1220)) + _1220;
    float _1541 = (cbModelParam._m0[1u].x * (_1529 - _1221)) + _1221;
    float _1562 = fma(_1541, cbSceneParam._m0[89u].z, fma(_1540, cbSceneParam._m0[89u].y, _1539 * cbSceneParam._m0[89u].x));
    float _1565 = fma(_1541, cbSceneParam._m0[90u].z, fma(_1540, cbSceneParam._m0[90u].y, _1539 * cbSceneParam._m0[90u].x));
    float _1568 = fma(_1541, cbSceneParam._m0[91u].z, fma(_1540, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1539));
    float _1583 = _846 * 0.5;
    float _1584 = _847 * 0.5;
    float _1585 = _848 * 0.5;
    float _1586 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1517, _1520, _1523, _1526));
    float _1589 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1516, _1519, _1522, _1525));
    float _1592 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1515, _1518, _1521, _1524));
    float _1626;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1599 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1206, _1210, _1213, _1216));
        float _1603 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1208, _1211, _1214, _1217));
        float _1607 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1209, _1212, _1215, _1218));
        float _1614 = dot(vec4(cbModelParam._m0[39u]), vec4(_1583, _1584, _1585, 1.0));
        _1626 = dot(vec3(isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1614) ? 0.0 : (isnan(0.0) ? _1614 : max(0.0, _1614))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1626 = 1.0;
    }
    float _1637;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1628 = dot(vec4(cbModelParam._m0[40u]), vec4(_1583, _1584, _1585, 1.0));
        _1637 = dot(vec3(isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1628) ? 0.0 : (isnan(0.0) ? _1628 : max(0.0, _1628))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1637 = 1.0;
    }
    float _1641 = (_1637 * cbModelParam._m0[1u].x) + (_1626 * (1.0 - cbModelParam._m0[1u].x));
    float _1651 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _691);
    float _1652 = isnan(_1651) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1651 : min(cbModelParam._m0[25u].z, _1651));
    float _1734;
    float _1736;
    float _1738;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1701 = fma(_906, cbModelParam._m0[13u].z, fma(_902, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _898)) + cbModelParam._m0[13u].w;
        float _1705 = fma(_906, cbModelParam._m0[14u].z, fma(_902, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _898)) + cbModelParam._m0[14u].w;
        float _1709 = fma(_906, cbModelParam._m0[15u].z, fma(_902, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _898)) + cbModelParam._m0[15u].w;
        float _1712 = fma(_848, cbModelParam._m0[13u].z, fma(_847, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _846));
        float _1715 = fma(_848, cbModelParam._m0[14u].z, fma(_847, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _846));
        float _1718 = fma(_848, cbModelParam._m0[15u].z, fma(_847, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _846));
        float _1746;
        if (_1712 > 0.0)
        {
            _1746 = abs((1.0 - _1701) / _1712);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1701 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1746 = frontier_phi_14_12_ladder;
        }
        float _1916;
        if (_1715 > 0.0)
        {
            _1916 = abs((1.0 - _1705) / _1715);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1705 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1916 = frontier_phi_23_19_ladder;
        }
        float _2211;
        if (_1718 > 0.0)
        {
            _2211 = abs((1.0 - _1709) / _1718);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1709 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2211 = frontier_phi_35_30_ladder;
        }
        float _2213 = isnan(_1916) ? _1746 : (isnan(_1746) ? _1916 : min(_1746, _1916));
        float _2214 = isnan(_2211) ? _2213 : (isnan(_2213) ? _2211 : min(_2213, _2211));
        float _2218 = (_2214 * _1712) + _1701;
        float _2219 = (_2214 * _1715) + _1705;
        float _2220 = (_2214 * _1718) + _1709;
        float _2221 = _2214 * 9.9999997473787516355514526367188e-05;
        float _2223 = (-1.0) - _2221;
        float _2225 = _2221 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2220 > _2225) || ((_2220 < _2223) || ((_2219 > _2225) || ((_2219 < _2223) || ((_2218 < _2223) || (_2218 > _2225))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2365 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2220, cbModelParam._m0[9u].z, fma(_2219, cbModelParam._m0[9u].y, _2218 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2220, cbModelParam._m0[10u].z, fma(_2219, cbModelParam._m0[10u].y, _2218 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2220, cbModelParam._m0[11u].z, fma(_2219, cbModelParam._m0[11u].y, _2218 * cbModelParam._m0[11u].x))), _1652);
            frontier_phi_13_35_ladder = _2365.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2365.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2365.x * cbModelParam._m0[1u].y;
        }
        _1734 = frontier_phi_13_35_ladder_2;
        _1736 = frontier_phi_13_35_ladder_1;
        _1738 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1722 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_846, _847, _848), _1652);
        _1734 = _1722.x * cbModelParam._m0[1u].y;
        _1736 = _1722.y * cbModelParam._m0[1u].y;
        _1738 = _1722.z * cbModelParam._m0[1u].y;
    }
    float _1742 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _691);
    float _1743 = isnan(_1742) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1742 : min(cbModelParam._m0[25u].w, _1742));
    float _1833;
    float _1835;
    float _1837;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1797 = fma(_906, cbModelParam._m0[21u].z, fma(_902, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _898)) + cbModelParam._m0[21u].w;
        float _1801 = fma(_906, cbModelParam._m0[22u].z, fma(_902, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _898)) + cbModelParam._m0[22u].w;
        float _1805 = fma(_906, cbModelParam._m0[23u].z, fma(_902, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _898)) + cbModelParam._m0[23u].w;
        float _1808 = fma(_848, cbModelParam._m0[21u].z, fma(_847, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _846));
        float _1811 = fma(_848, cbModelParam._m0[22u].z, fma(_847, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _846));
        float _1814 = fma(_848, cbModelParam._m0[23u].z, fma(_847, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _846));
        float _1921;
        if (_1808 > 0.0)
        {
            _1921 = abs((1.0 - _1797) / _1808);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1797 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1921 = frontier_phi_25_21_ladder;
        }
        float _2238;
        if (_1811 > 0.0)
        {
            _2238 = abs((1.0 - _1801) / _1811);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1801 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2238 = frontier_phi_37_32_ladder;
        }
        float _2565;
        if (_1814 > 0.0)
        {
            _2565 = abs((1.0 - _1805) / _1814);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1805 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2565 = frontier_phi_47_44_ladder;
        }
        float _2567 = isnan(_2238) ? _1921 : (isnan(_1921) ? _2238 : min(_1921, _2238));
        float _2568 = isnan(_2565) ? _2567 : (isnan(_2567) ? _2565 : min(_2567, _2565));
        float _2572 = (_2568 * _1808) + _1797;
        float _2573 = (_2568 * _1811) + _1801;
        float _2574 = (_2568 * _1814) + _1805;
        float _2575 = _2568 * 9.9999997473787516355514526367188e-05;
        float _2576 = (-1.0) - _2575;
        float _2578 = _2575 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2574 > _2578) || ((_2574 < _2576) || ((_2573 > _2578) || ((_2573 < _2576) || ((_2572 < _2576) || (_2572 > _2578))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2692 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2574, cbModelParam._m0[17u].z, fma(_2573, cbModelParam._m0[17u].y, _2572 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2574, cbModelParam._m0[18u].z, fma(_2573, cbModelParam._m0[18u].y, _2572 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2574, cbModelParam._m0[19u].z, fma(_2573, cbModelParam._m0[19u].y, _2572 * cbModelParam._m0[19u].x))), _1743);
            frontier_phi_22_47_ladder = _2692.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2692.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2692.x * cbModelParam._m0[1u].z;
        }
        _1833 = frontier_phi_22_47_ladder_2;
        _1835 = frontier_phi_22_47_ladder_1;
        _1837 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1817 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_846, _847, _848), _1743);
        _1833 = _1817.x * cbModelParam._m0[1u].z;
        _1835 = _1817.y * cbModelParam._m0[1u].z;
        _1837 = _1817.z * cbModelParam._m0[1u].z;
    }
    float _1849 = ((((1.0 - _866) * ((_854 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_866 * _854)) * _838;
    float _1850 = _1849 * ((cbModelParam._m0[1u].w * (_1833 - _1734)) + _1734);
    float _1851 = _1849 * ((cbModelParam._m0[1u].w * (_1835 - _1736)) + _1736);
    float _1852 = _1849 * ((cbModelParam._m0[1u].w * (_1837 - _1738)) + _1738);
    float _1855 = fma(_1852, cbSceneParam._m0[89u].z, fma(_1851, cbSceneParam._m0[89u].y, _1850 * cbSceneParam._m0[89u].x));
    float _1858 = fma(_1852, cbSceneParam._m0[90u].z, fma(_1851, cbSceneParam._m0[90u].y, _1850 * cbSceneParam._m0[90u].x));
    float _1861 = fma(_1852, cbSceneParam._m0[91u].z, fma(_1851, cbSceneParam._m0[91u].y, _1850 * cbSceneParam._m0[91u].x));
    float _1895 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1899 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1903 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1907 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1908 = _1895 / _1907;
    float _1909 = _1899 / _1907;
    float _1910 = _1903 / _1907;
    float _2057;
    float _2058;
    float _2059;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1937 = ((uint(_1910 > cbSceneParam._m0[59u].y) + uint(_1910 > cbSceneParam._m0[59u].x)) + uint(_1910 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1938 = _1937 + 43u;
        uint _1946 = _1937 + 44u;
        uint _1954 = _1937 + 45u;
        uint _1962 = _1937 + 46u;
        float _1973 = fma(_1907, cbSceneParam._m0[_1938].w, fma(_1903, cbSceneParam._m0[_1938].z, fma(_1899, cbSceneParam._m0[_1938].y, _1895 * cbSceneParam._m0[_1938].x)));
        float _1977 = fma(_1907, cbSceneParam._m0[_1946].w, fma(_1903, cbSceneParam._m0[_1946].z, fma(_1899, cbSceneParam._m0[_1946].y, _1895 * cbSceneParam._m0[_1946].x)));
        float _1985 = fma(_1907, cbSceneParam._m0[_1962].w, fma(_1903, cbSceneParam._m0[_1962].z, fma(_1899, cbSceneParam._m0[_1962].y, _1895 * cbSceneParam._m0[_1962].x)));
        float _1990 = cbSceneParam._m0[33u].z * _1985;
        float _1992 = cbSceneParam._m0[33u].w * _1985;
        float _1995 = fma(_1907, cbSceneParam._m0[_1954].w, fma(_1903, cbSceneParam._m0[_1954].z, fma(_1899, cbSceneParam._m0[_1954].y, _1895 * cbSceneParam._m0[_1954].x))) / _1985;
        float _2043 = (cbSceneParam._m0[33u].x - sqrt(((_1909 * _1909) + (_1908 * _1908)) + (_1910 * _1910))) * cbSceneParam._m0[33u].y;
        float _4317 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2050 = (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1990 + _1973) / _1985, (_1992 + _1977) / _1985), _1995), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1992 + _1973) / _1985, (_1977 - _1990) / _1985), _1995), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1973 - _1990) / _1985, (_1977 - _1992) / _1985), _1995), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1973 - _1992) / _1985, (_1990 + _1977) / _1985), _1995), 0.0)).x), vec4(0.25)));
        _2057 = 1.0 - (_2050 * cbSceneParam._m0[34u].x);
        _2058 = 1.0 - (_2050 * cbSceneParam._m0[34u].y);
        _2059 = 1.0 - (_2050 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2057 = 1.0;
        _2058 = 1.0;
        _2059 = 1.0;
    }
    float _2123;
    float _2125;
    float _2127;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2111 = fma(_1907, cbSceneParam._m0[63u].w, fma(_1903, cbSceneParam._m0[63u].z, fma(_1899, cbSceneParam._m0[63u].y, _1895 * cbSceneParam._m0[63u].x)));
        float _2112 = fma(_1907, cbSceneParam._m0[60u].w, fma(_1903, cbSceneParam._m0[60u].z, fma(_1899, cbSceneParam._m0[60u].y, _1895 * cbSceneParam._m0[60u].x))) / _2111;
        float _2113 = fma(_1907, cbSceneParam._m0[61u].w, fma(_1903, cbSceneParam._m0[61u].z, fma(_1899, cbSceneParam._m0[61u].y, _1895 * cbSceneParam._m0[61u].x))) / _2111;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2112 >= cbSceneParam._m0[64u].x) && (_2113 >= cbSceneParam._m0[64u].y)) && (_2112 <= cbSceneParam._m0[64u].z)) && (_2113 <= cbSceneParam._m0[64u].w))
        {
            float _2251 = fma(_1907, cbSceneParam._m0[62u].w, fma(_1903, cbSceneParam._m0[62u].z, fma(_1899, cbSceneParam._m0[62u].y, _1895 * cbSceneParam._m0[62u].x))) / _2111;
            float _2255 = isnan(cbSceneParam._m0[41u].w) ? _2251 : (isnan(_2251) ? cbSceneParam._m0[41u].w : max(_2251, cbSceneParam._m0[41u].w));
            float _2298 = (cbSceneParam._m0[33u].x - sqrt(((_1909 * _1909) + (_1908 * _1908)) + (_1910 * _1910))) * cbSceneParam._m0[33u].y;
            float _4333 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
            float _2305 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2112, cbSceneParam._m0[33u].w + _2113), _2255), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2112, _2113 - cbSceneParam._m0[33u].z), _2255), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2112 - cbSceneParam._m0[33u].z, _2113 - cbSceneParam._m0[33u].w), _2255), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2112 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2113), _2255), 0.0)).x), vec4(0.25)));
            float _2309 = 1.0 - (_2305 * cbSceneParam._m0[34u].x);
            float _2310 = 1.0 - (_2305 * cbSceneParam._m0[34u].y);
            float _2311 = 1.0 - (_2305 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2311) ? _2059 : (isnan(_2059) ? _2311 : min(_2059, _2311));
            frontier_phi_34_33_ladder_1 = isnan(_2310) ? _2058 : (isnan(_2058) ? _2310 : min(_2058, _2310));
            frontier_phi_34_33_ladder_2 = isnan(_2309) ? _2057 : (isnan(_2057) ? _2309 : min(_2057, _2309));
        }
        else
        {
            frontier_phi_34_33_ladder = _2059;
            frontier_phi_34_33_ladder_1 = _2058;
            frontier_phi_34_33_ladder_2 = _2057;
        }
        _2123 = frontier_phi_34_33_ladder_2;
        _2125 = frontier_phi_34_33_ladder_1;
        _2127 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2123 = _2057;
        _2125 = _2058;
        _2127 = _2059;
    }
    uvec4 _2132 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _2134 = _2132.x * 14u;
    uint _2135 = _2134 + 13u;
    float _2142 = _838 + (-1.0);
    float _2147 = (cbLight._m0[_2135].x * _2142) + 1.0;
    float _2148 = (cbLight._m0[_2135].y * _2142) + 1.0;
    float _2149 = (cbLight._m0[_2135].z * _2142) + 1.0;
    float _2150 = (cbLight._m0[_2135].w * _2142) + 1.0;
    uint _2151 = _2134 + 5u;
    float _2157 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
    uint _2161 = _2134 + 4u;
    float _2170 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
    uint _2174 = _2134 | 1u;
    float _2185 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_688, _689, _690));
    float _2188 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_688, _689, _690));
    float _4369 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _4380 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2193 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * 0.3183098733425140380859375;
    float _2195 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * 0.3183098733425140380859375;
    float _2202 = ((cbLight._m0[_2151].x * _2157) * _2195) + (((cbLight._m0[_2161].x * _2123) * _2170) * _2193);
    float _2203 = ((_2157 * cbLight._m0[_2151].y) * _2195) + (((cbLight._m0[_2161].y * _2125) * _2170) * _2193);
    float _2204 = ((_2157 * cbLight._m0[_2151].z) * _2195) + (((cbLight._m0[_2161].z * _2127) * _2170) * _2193);
    uvec4 _2208 = floatBitsToUint(cbLight._m0[_2134 + 12u]);
    bool _2210 = _2208.x == 0u;
    float _2312;
    float _2314;
    float _2316;
    if (_2210)
    {
        _2312 = _2202;
        _2314 = _2203;
        _2316 = _2204;
    }
    else
    {
        uint _2320 = _2134 + 6u;
        float _2336 = (dot(vec3(cbLight._m0[_2134 + 2u].xyz), vec3(_688, _689, _690)) * 0.5) + 0.5;
        float _2337 = _2336 * _2336;
        float _4391 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2338 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2339 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
        _2312 = (((cbLight._m0[_2320].x * 0.3183098733425140380859375) * _2338) * _2339) + _2202;
        _2314 = (((cbLight._m0[_2320].y * 0.3183098733425140380859375) * _2338) * _2339) + _2203;
        _2316 = (((cbLight._m0[_2320].z * 0.3183098733425140380859375) * _2338) * _2339) + _2204;
    }
    bool _2319 = _2208.y == 0u;
    float _2374;
    float _2376;
    float _2378;
    if (_2319)
    {
        _2374 = _2312;
        _2376 = _2314;
        _2378 = _2316;
    }
    else
    {
        uint _2536 = _2134 + 7u;
        float _2552 = (dot(vec3(cbLight._m0[_2134 + 3u].xyz), vec3(_688, _689, _690)) * 0.5) + 0.5;
        float _2553 = _2552 * _2552;
        float _4407 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2554 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2555 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
        _2374 = (((cbLight._m0[_2536].x * 0.3183098733425140380859375) * _2554) * _2555) + _2312;
        _2376 = (((cbLight._m0[_2536].y * 0.3183098733425140380859375) * _2554) * _2555) + _2314;
        _2378 = (((cbLight._m0[_2536].z * 0.3183098733425140380859375) * _2554) * _2555) + _2316;
    }
    uint _2381 = _2134 + 8u;
    float _2394 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2134].w)) * _691) * 0.949999988079071044921875);
    float _2395 = _2394 * _2394;
    float _2396 = cbLight._m0[_2134].x + _767;
    float _2397 = cbLight._m0[_2134].y + _768;
    float _2398 = cbLight._m0[_2134].z + _769;
    float _2402 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
    float _2403 = _2402 * _2396;
    float _2404 = _2402 * _2397;
    float _2405 = _2402 * _2398;
    float _2406 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_2134].xyz));
    float _4423 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _4434 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _2410 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _2411 = dot(vec3(_688, _689, _690), vec3(_2403, _2404, _2405));
    float _4445 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _2415 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_2403, _2404, _2405));
    float _4456 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2419 = _2395 * _2395;
    float _2423 = ((_2414 * _2414) * (_2419 + (-1.0))) + 1.0;
    float _2434 = (exp2(log2(1.0 - (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2435 = 1.0 - _2395;
    float _2446 = (0.5 / (((_2410 * ((_2409 * _2435) + _2395)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2435) + _2395) * _2409))) * _2409;
    float _4467 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2448 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2419 / ((_2423 * _2423) * 3.141590118408203125));
    uint _2462 = _2134 + 9u;
    float _2473 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2174].w)) * _691) * 0.949999988079071044921875);
    float _2474 = _2473 * _2473;
    float _2475 = cbLight._m0[_2174].x + _767;
    float _2476 = cbLight._m0[_2174].y + _768;
    float _2477 = cbLight._m0[_2174].z + _769;
    float _2481 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
    float _2482 = _2481 * _2475;
    float _2483 = _2481 * _2476;
    float _2484 = _2481 * _2477;
    float _2485 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_2174].xyz));
    float _4478 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2488 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2489 = dot(vec3(_688, _689, _690), vec3(_2482, _2483, _2484));
    float _4489 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2492 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    float _2493 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_2482, _2483, _2484));
    float _4500 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2497 = _2474 * _2474;
    float _2501 = ((_2492 * _2492) * (_2497 + (-1.0))) + 1.0;
    float _2510 = (exp2(log2(1.0 - (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2511 = 1.0 - _2474;
    float _2521 = (0.5 / (((_2410 * ((_2488 * _2511) + _2474)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2511) + _2474) * _2488))) * _2488;
    float _4511 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2523 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2497 / ((_2501 * _2501) * 3.141590118408203125));
    float _2533 = (((_2510 * cbLight._m0[_2462].x) * _2523) * _2157) + ((((cbLight._m0[_2381].x * _2123) * _2434) * _2448) * _2170);
    float _2534 = (((_2510 * cbLight._m0[_2462].y) * _2523) * _2157) + ((((cbLight._m0[_2381].y * _2125) * _2434) * _2448) * _2170);
    float _2535 = (((_2510 * cbLight._m0[_2462].z) * _2523) * _2157) + ((((cbLight._m0[_2381].z * _2127) * _2434) * _2448) * _2170);
    float _2591;
    float _2593;
    float _2595;
    if (_2210)
    {
        _2591 = _2533;
        _2593 = _2534;
        _2595 = _2535;
    }
    else
    {
        uint _2597 = _2134 + 2u;
        uint _2601 = _2134 + 10u;
        float _2615 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2597].w)) * _691) * 0.949999988079071044921875);
        float _2616 = _2615 * _2615;
        float _2617 = cbLight._m0[_2597].x + _767;
        float _2618 = cbLight._m0[_2597].y + _768;
        float _2619 = cbLight._m0[_2597].z + _769;
        float _2623 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
        float _2624 = _2623 * _2617;
        float _2625 = _2623 * _2618;
        float _2626 = _2623 * _2619;
        float _2627 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_2597].xyz));
        float _4522 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2630 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2631 = dot(vec3(_688, _689, _690), vec3(_2624, _2625, _2626));
        float _4533 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2634 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2635 = dot(vec3(cbLight._m0[_2597].xyz), vec3(_2624, _2625, _2626));
        float _4544 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2639 = _2616 * _2616;
        float _2643 = ((_2634 * _2634) * (_2639 + (-1.0))) + 1.0;
        float _2652 = (exp2(log2(1.0 - (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2653 = 1.0 - _2616;
        float _2663 = (0.5 / (((_2410 * ((_2630 * _2653) + _2616)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2653) + _2616) * _2630))) * _2630;
        float _4555 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2665 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2639 / ((_2643 * _2643) * 3.141590118408203125));
        float _2666 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
        _2591 = (((_2652 * cbLight._m0[_2601].x) * _2665) * _2666) + _2533;
        _2593 = (((_2652 * cbLight._m0[_2601].y) * _2665) * _2666) + _2534;
        _2595 = (((_2652 * cbLight._m0[_2601].z) * _2665) * _2666) + _2535;
    }
    float _2697;
    float _2699;
    float _2701;
    if (_2319)
    {
        _2697 = _2591;
        _2699 = _2593;
        _2701 = _2595;
    }
    else
    {
        uint _2708 = _2134 + 3u;
        uint _2712 = _2134 + 11u;
        float _2726 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2708].w)) * _691) * 0.949999988079071044921875);
        float _2727 = _2726 * _2726;
        float _2728 = cbLight._m0[_2708].x + _767;
        float _2729 = cbLight._m0[_2708].y + _768;
        float _2730 = cbLight._m0[_2708].z + _769;
        float _2734 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
        float _2735 = _2734 * _2728;
        float _2736 = _2734 * _2729;
        float _2737 = _2734 * _2730;
        float _2738 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_2708].xyz));
        float _4571 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2741 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2742 = dot(vec3(_688, _689, _690), vec3(_2735, _2736, _2737));
        float _4582 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2745 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2746 = dot(vec3(cbLight._m0[_2708].xyz), vec3(_2735, _2736, _2737));
        float _4593 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2750 = _2727 * _2727;
        float _2754 = ((_2745 * _2745) * (_2750 + (-1.0))) + 1.0;
        float _2763 = (exp2(log2(1.0 - (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2764 = 1.0 - _2727;
        float _2774 = (0.5 / (((_2410 * ((_2741 * _2764) + _2727)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2764) + _2727) * _2741))) * _2741;
        float _4604 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2776 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2750 / ((_2754 * _2754) * 3.141590118408203125));
        float _2777 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
        _2697 = (((_2763 * cbLight._m0[_2712].x) * _2776) * _2777) + _2591;
        _2699 = (((_2763 * cbLight._m0[_2712].y) * _2776) * _2777) + _2593;
        _2701 = (((_2763 * cbLight._m0[_2712].z) * _2776) * _2777) + _2595;
    }
    float _2843;
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    if (_2132.y == 0u)
    {
        uvec4 _2798 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2799 = _2798.x;
        uint _2810 = uint((float(_2798.y) * floor(float(uint(cbSceneParam._m0[85u].y * _776) / _2799))) + floor(float(uint(cbSceneParam._m0[85u].x * _775) / _2799)));
        float _2820 = (log2(_1910 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2821 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        uint _2824 = uint(isnan(14.0) ? _2821 : (isnan(_2821) ? 14.0 : min(_2821, 14.0)));
        uvec4 _2829 = texelFetch(g_lightClusterGridBuffer, int(((_2824 << 2u) + (_2810 << 6u)) >> 2u));
        uint _2830 = _2829.x;
        uint _2831 = _2798.z;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        if (((((1u << ((_2831 >> 4u) & 15u)) + 4294967295u) & _2830) == 0u) || ((_2831 & 240u) == 0u))
        {
            _2910 = 0.0;
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
            _2920 = 0.0;
        }
        else
        {
            float _2911;
            float _2913;
            float _2915;
            float _2917;
            float _2919;
            float _2921;
            float _3055 = 0.0;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            uint _3061 = 0u;
            uint _3070;
            bool _3071;
            for (;;)
            {
                _3070 = texelFetch(g_lightClassification, int((((_2824 << 5u) + (_2810 << 9u)) + (_3061 << 2u)) >> 2u)).x;
                _3071 = _3070 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3071)
                {
                    frontier_phi_66_pred = _3060;
                    frontier_phi_66_pred_1 = _3059;
                    frontier_phi_66_pred_2 = _3058;
                    frontier_phi_66_pred_3 = _3057;
                    frontier_phi_66_pred_4 = _3056;
                    frontier_phi_66_pred_5 = _3055;
                }
                else
                {
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    uint _3185;
                    _3179 = _3055;
                    _3180 = _3056;
                    _3181 = _3057;
                    _3182 = _3058;
                    _3183 = _3059;
                    _3184 = _3060;
                    _3185 = _3070;
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    for (;;)
                    {
                        uint _3189 = uint(findLSB(_3185)) + (_3061 << 5u);
                        uint _3186 = (_3185 + 4294967295u) & _3185;
                        uint _3191 = _3189 * 48u;
                        vec4 _3205 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3191)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 3u)).x));
                        uint _3211 = (_3189 * 48u) + 4u;
                        vec4 _3224 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3211)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 3u)).x));
                        uint _3230 = (_3189 * 48u) + 8u;
                        vec3 _3241 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3230)).x, texelFetch(g_PointLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3230 + 2u)).x));
                        float _3245 = _3205.x - _1908;
                        float _3246 = _3205.y - _1909;
                        float _3247 = _3205.z - _1910;
                        float _3248 = dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247));
                        float _3251 = inversesqrt(_3248);
                        float _3252 = _3251 * _3245;
                        float _3253 = _3251 * _3246;
                        float _3254 = _3251 * _3247;
                        float _3255 = dot(vec3(_794, _797, _800), vec3(_3252, _3253, _3254));
                        float _3260 = 1.0 - (_3248 * _3205.w);
                        float _4630 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                        float _3261 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3262 = sqrt(_3248) * _3224.w;
                        float _3265 = 1.39999997615814208984375 / (_3262 + 1.39999997615814208984375);
                        float _3266 = _3265 * _3265;
                        float _3269 = ((1.0 - _3266) * _3255) + _3266;
                        float _3272 = _3262 * _3262;
                        float _3276 = ((isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0))) * _3261) / ((_3272 * 0.699999988079071044921875) + 1.0);
                        float _3280 = (-0.0) - _1908;
                        float _3281 = (-0.0) - _1909;
                        float _3282 = (-0.0) - _1910;
                        float _3286 = inversesqrt(dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282)));
                        float _3287 = _3286 * _3280;
                        float _3288 = _3286 * _3281;
                        float _3289 = _3286 * _3282;
                        float _3296 = exp2(log2(1.0 / ((_3272 * 3.5) + 5.0)) * 0.25);
                        float _3297 = 1.0 - _854;
                        float _3304 = sqrt(1.0 - ((1.0 - (_3297 * _3297)) * (1.0 - (_3296 * _3296))));
                        float _3305 = _3304 * _3304;
                        float _3306 = _3305 * _3305;
                        float _3307 = _3287 + _3252;
                        float _3308 = _3288 + _3253;
                        float _3309 = _3289 + _3254;
                        float _3313 = inversesqrt(dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309)));
                        float _3317 = dot(vec3(_794, _797, _800), vec3(_3287, _3288, _3289));
                        float _4646 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                        float _3320 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3321 = dot(vec3(_794, _797, _800), vec3(_3313 * _3307, _3313 * _3308, _3313 * _3309));
                        float _4657 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3324 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3328 = ((_3324 * _3324) * (_3306 + (-1.0))) + 1.0;
                        float _3329 = _3265 * _3305;
                        float _3330 = _3329 * _3329;
                        float _3333 = ((1.0 - _3330) * _3255) + _3330;
                        float _4668 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3334 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                        float _3335 = 1.0 - _3305;
                        float _3345 = (0.5 / (((_3334 * ((_3320 * _3335) + _3305)) + 9.9999999392252902907785028219223e-09) + (((_3334 * _3335) + _3305) * _3320))) * _3334;
                        float _4679 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3355 = (((_3306 * 3.1415927410125732421875) * (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) / ((_3328 * _3328) * ((_3272 * 2.1991131305694580078125) + 3.141590118408203125))) * _3261;
                        _3114 = (_3276 * _3224.x) + _3182;
                        _3115 = (_3276 * _3224.y) + _3183;
                        _3116 = (_3276 * _3224.z) + _3184;
                        _3111 = (_3355 * _3241.x) + _3179;
                        _3112 = (_3355 * _3241.y) + _3180;
                        _3113 = (_3355 * _3241.z) + _3181;
                        if (_3186 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3179 = _3111;
                            _3180 = _3112;
                            _3181 = _3113;
                            _3182 = _3114;
                            _3183 = _3115;
                            _3184 = _3116;
                            _3185 = _3186;
                        }
                    }
                    frontier_phi_66_pred = _3116;
                    frontier_phi_66_pred_1 = _3115;
                    frontier_phi_66_pred_2 = _3114;
                    frontier_phi_66_pred_3 = _3113;
                    frontier_phi_66_pred_4 = _3112;
                    frontier_phi_66_pred_5 = _3111;
                }
                _2921 = frontier_phi_66_pred;
                _2919 = frontier_phi_66_pred_1;
                _2917 = frontier_phi_66_pred_2;
                _2915 = frontier_phi_66_pred_3;
                _2913 = frontier_phi_66_pred_4;
                _2911 = frontier_phi_66_pred_5;
                uint _3062 = _3061 + 1u;
                if (_3062 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3055 = _2911;
                    _3056 = _2913;
                    _3057 = _2915;
                    _3058 = _2917;
                    _3059 = _2919;
                    _3060 = _2921;
                    _3061 = _3062;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2910 = _2911;
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
            _2920 = _2921;
        }
        uvec4 _2924 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2925 = _2924.z;
        uint _2927 = (_2925 >> 8u) & 15u;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        if (((4294967295u << _2927) & _2830) == 0u)
        {
            _3023 = _2910;
            _3025 = _2912;
            _3027 = _2914;
            _3029 = _2916;
            _3031 = _2918;
            _3033 = _2920;
        }
        else
        {
            float _3048 = inversesqrt(dot(vec3(_1908, _1909, _1910), vec3(_1908, _1909, _1910)));
            float _3049 = _3048 * _1908;
            float _3050 = _3048 * _1909;
            float _3051 = _3048 * _1910;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2927 < ((_2925 >> 12u) & 15u))
            {
                float _3024;
                float _3026;
                float _3028;
                float _3030;
                float _3032;
                float _3034;
                float _3162 = _2910;
                float _3163 = _2912;
                float _3164 = _2914;
                float _3165 = _2916;
                float _3166 = _2918;
                float _3167 = _2920;
                uint _3168 = _2927;
                uint _3177;
                bool _3178;
                for (;;)
                {
                    _3177 = texelFetch(g_lightClassification, int((((_2824 << 5u) + (_2810 << 9u)) + (_3168 << 2u)) >> 2u)).x;
                    _3178 = _3177 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3178)
                    {
                        frontier_phi_72_pred = _3167;
                        frontier_phi_72_pred_1 = _3166;
                        frontier_phi_72_pred_2 = _3165;
                        frontier_phi_72_pred_3 = _3164;
                        frontier_phi_72_pred_4 = _3163;
                        frontier_phi_72_pred_5 = _3162;
                    }
                    else
                    {
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3373 = _3162;
                        float _3374 = _3163;
                        float _3375 = _3164;
                        float _3376 = _3165;
                        float _3377 = _3166;
                        float _3378 = _3167;
                        uint _3379 = _3177;
                        uint _3380;
                        vec4 _3405;
                        float _3406;
                        vec4 _3421;
                        vec3 _3433;
                        vec4 _3448;
                        vec4 _3463;
                        float _3509;
                        bool _3510;
                        for (;;)
                        {
                            uint _3390 = ((_3168 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3379));
                            _3380 = (_3379 + 4294967295u) & _3379;
                            uint _3392 = _3390 * 40u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            _3406 = _3405.w;
                            uint _3408 = (_3390 * 40u) + 4u;
                            _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            uint _3423 = (_3390 * 40u) + 8u;
                            _3433 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x));
                            uint _3435 = (_3390 * 40u) + 16u;
                            _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3450 = (_3390 * 40u) + 20u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3465 = (_3390 * 40u) + 24u;
                            vec4 _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            uint _3484 = (_3390 * 40u) + 28u;
                            vec4 _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            _3509 = fma(_1910, _3497.z, fma(_1909, _3497.y, _3497.x * _1908)) + _3497.w;
                            _3510 = !((fma(_1910, _3478.z, fma(_1909, _3478.y, _3478.x * _1908)) + _3478.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3510)
                            {
                                float _3537 = _3405.x - _1908;
                                float _3538 = _3405.y - _1909;
                                float _3539 = _3405.z - _1910;
                                float _3540 = dot(vec3(_3537, _3538, _3539), vec3(_3537, _3538, _3539));
                                float _3543 = inversesqrt(_3540);
                                float _3544 = _3543 * _3537;
                                float _3545 = _3543 * _3538;
                                float _3546 = _3543 * _3539;
                                float _3550 = 1.0 - (_3540 / (_3406 * _3406));
                                float _4690 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3551 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3555 = sqrt(_3540) * _3421.w;
                                float _3557 = 1.39999997615814208984375 / (_3555 + 1.39999997615814208984375);
                                float _3558 = _3557 * _3557;
                                float _3561 = ((1.0 - _3558) * dot(vec3(_3544, _3545, _3546), vec3(_794, _797, _800))) + _3558;
                                float _3564 = _3555 * _3555;
                                float _3568 = (fma(_1910, _3448.z, fma(_1909, _3448.y, _3448.x * _1908)) + _3448.w) / _3509;
                                float _3569 = (fma(_1910, _3463.z, fma(_1909, _3463.y, _3463.x * _1908)) + _3463.w) / _3509;
                                float _3573 = 1.0 - dot(vec2(_3568, _3569), vec2(_3568, _3569));
                                float _4706 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3574 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3575 = _3574 * (((isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0))) * _3551) / ((_3564 * 0.699999988079071044921875) + 1.0));
                                float _3587 = exp2(log2(1.0 / ((_3564 * 3.5) + 5.0)) * 0.25);
                                float _3588 = 1.0 - _854;
                                float _3595 = sqrt(1.0 - ((1.0 - (_3588 * _3588)) * (1.0 - (_3587 * _3587))));
                                float _3596 = _3595 * _3595;
                                float _3597 = _3596 * _3596;
                                float _3598 = _3544 - _3049;
                                float _3599 = _3545 - _3050;
                                float _3600 = _3546 - _3051;
                                float _3604 = inversesqrt(dot(vec3(_3598, _3599, _3600), vec3(_3598, _3599, _3600)));
                                float _3608 = dot(vec3(_794, _797, _800), vec3((-0.0) - _3049, (-0.0) - _3050, (-0.0) - _3051));
                                float _4717 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3611 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3612 = dot(vec3(_794, _797, _800), vec3(_3604 * _3598, _3604 * _3599, _3604 * _3600));
                                float _4728 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3615 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3619 = ((_3615 * _3615) * (_3597 + (-1.0))) + 1.0;
                                float _3620 = _3557 * _3596;
                                float _3621 = _3620 * _3620;
                                float _3627 = ((1.0 - _3621) * dot(vec3(_794, _797, _800), vec3(_3544, _3545, _3546))) + _3621;
                                float _4739 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3628 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3629 = 1.0 - _3596;
                                float _3639 = (0.5 / (((_3628 * ((_3611 * _3629) + _3596)) + 9.9999999392252902907785028219223e-09) + (((_3628 * _3629) + _3596) * _3611))) * _3628;
                                float _4750 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3649 = (_3574 * _3551) * (((_3597 * 3.1415927410125732421875) * (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) / ((_3619 * _3619) * ((_3564 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3575 * _3421.y;
                                frontier_phi_78_pred_1 = _3575 * _3421.x;
                                frontier_phi_78_pred_2 = _3649 * _3433.z;
                                frontier_phi_78_pred_3 = _3649 * _3433.y;
                                frontier_phi_78_pred_4 = _3649 * _3433.x;
                                frontier_phi_78_pred_5 = _3575 * _3421.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3657 = frontier_phi_78_pred;
                            _3656 = frontier_phi_78_pred_1;
                            _3655 = frontier_phi_78_pred_2;
                            _3654 = frontier_phi_78_pred_3;
                            _3653 = frontier_phi_78_pred_4;
                            _3658 = frontier_phi_78_pred_5;
                            _3363 = _3656 + _3376;
                            _3364 = _3657 + _3377;
                            _3365 = _3658 + _3378;
                            _3360 = _3653 + _3373;
                            _3361 = _3654 + _3374;
                            _3362 = _3655 + _3375;
                            if (_3380 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3380;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3365;
                        frontier_phi_72_pred_1 = _3364;
                        frontier_phi_72_pred_2 = _3363;
                        frontier_phi_72_pred_3 = _3362;
                        frontier_phi_72_pred_4 = _3361;
                        frontier_phi_72_pred_5 = _3360;
                    }
                    _3034 = frontier_phi_72_pred;
                    _3032 = frontier_phi_72_pred_1;
                    _3030 = frontier_phi_72_pred_2;
                    _3028 = frontier_phi_72_pred_3;
                    _3026 = frontier_phi_72_pred_4;
                    _3024 = frontier_phi_72_pred_5;
                    uint _3169 = _3168 + 1u;
                    if (_3169 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3162 = _3024;
                        _3163 = _3026;
                        _3164 = _3028;
                        _3165 = _3030;
                        _3166 = _3032;
                        _3167 = _3034;
                        _3168 = _3169;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3034;
                frontier_phi_60_61_ladder_1 = _3032;
                frontier_phi_60_61_ladder_2 = _3028;
                frontier_phi_60_61_ladder_3 = _3026;
                frontier_phi_60_61_ladder_4 = _3024;
                frontier_phi_60_61_ladder_5 = _3030;
            }
            else
            {
                frontier_phi_60_61_ladder = _2920;
                frontier_phi_60_61_ladder_1 = _2918;
                frontier_phi_60_61_ladder_2 = _2914;
                frontier_phi_60_61_ladder_3 = _2912;
                frontier_phi_60_61_ladder_4 = _2910;
                frontier_phi_60_61_ladder_5 = _2916;
            }
            _3023 = frontier_phi_60_61_ladder_4;
            _3025 = frontier_phi_60_61_ladder_3;
            _3027 = frontier_phi_60_61_ladder_2;
            _3029 = frontier_phi_60_61_ladder_5;
            _3031 = frontier_phi_60_61_ladder_1;
            _3033 = frontier_phi_60_61_ladder;
        }
        float _3038 = isnan(1.0) ? _838 : (isnan(_838) ? 1.0 : min(_838, 1.0));
        _2843 = (_3038 * _3029) + _2374;
        _2845 = (_3038 * _3031) + _2376;
        _2847 = (_3038 * _3033) + _2378;
        _2849 = ((_3023 * 0.039999999105930328369140625) * _3038) + _2697;
        _2851 = ((_3025 * 0.039999999105930328369140625) * _3038) + _2699;
        _2853 = ((_3027 * 0.039999999105930328369140625) * _3038) + _2701;
    }
    else
    {
        _2843 = _2374;
        _2845 = _2376;
        _2847 = _2378;
        _2849 = _2697;
        _2851 = _2699;
        _2853 = _2701;
    }
    float _4766 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _4777 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4788 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    uint _2873 = _249 + 6u;
    float _2881 = _775 / cbSceneParam._m0[86u].x;
    float _2882 = _776 / cbSceneParam._m0[86u].y;
    vec4 _2896 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2881, _2882, (log2((isnan(cbSceneParam._m0[77u].w) ? _709 : (isnan(_709) ? cbSceneParam._m0[77u].w : min(_709, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2898 = _2896.x;
    float _2899 = _2896.y;
    float _2900 = _2896.z;
    float _2901 = _2896.w;
    float _2973;
    float _2975;
    float _2977;
    float _2979;
    if (_709 > cbSceneParam._m0[78u].w)
    {
        float _2935 = isnan(_709) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _709 : min(cbSceneParam._m0[80u].w, _709));
        float _2936 = _2935 / _709;
        float _2947 = _2936 * _760;
        float _2948 = _761 * _2936;
        float _2949 = (-0.0) - _2948;
        float _2951 = _2936 * _762;
        float _2953 = (cbSceneParam._m0[77u].w * _2949) / _2935;
        float _2954 = _2953 + cbSceneParam._m0[79u].w;
        float _2955 = cbSceneParam._m0[79u].w - _2948;
        float _2961 = sqrt(((_2947 * _2947) + (_2948 * _2948)) + (_2951 * _2951));
        float _2964 = (1.0 - (cbSceneParam._m0[77u].w / _2935)) * _2961;
        float _2969 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2971 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3124;
        if (abs((_2949 - _2953) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3124 = ((((_2954 > 0.0) ? exp2(_2969 * _2954) : (2.0 - exp2(_2971 * _2954))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2964;
        }
        else
        {
            float _3084 = 1.0 / cbSceneParam._m0[80u].x;
            float _3085 = isnan(_2955) ? _2954 : (isnan(_2954) ? _2955 : max(_2954, _2955));
            float _3086 = isnan(_2955) ? _2954 : (isnan(_2954) ? _2955 : min(_2954, _2955));
            float _3095 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : min(_3085, 0.0));
            float _3096 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : min(_3086, 0.0));
            _3124 = ((abs(_2961 / _2949) * cbSceneParam._m0[80u].y) * ((((_3095 - _3096) * 2.0) - ((exp2(_2969 * (isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0)))) - exp2(_2969 * (isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0))))) * _3084)) - ((exp2(_2971 * _3095) - exp2(_2971 * _3096)) * _3084))) + (_2964 * cbSceneParam._m0[80u].z);
        }
        vec4 _3126 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2881, _2882, 1.0), 0.0);
        float _3135 = exp2((_3124 * (-1.44269502162933349609375)) * (1.0 - _3126.w));
        float _3136 = log2(_3135);
        float _3152 = log2(_2901);
        _2973 = (exp2(_3152 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3136 * cbSceneParam._m0[78u].x)) * _3126.x) / cbSceneParam._m0[78u].x)) + _2898;
        _2975 = (exp2(_3152 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3136 * cbSceneParam._m0[78u].y)) * _3126.y) / cbSceneParam._m0[78u].y)) + _2899;
        _2977 = (exp2(_3152 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3136 * cbSceneParam._m0[78u].z)) * _3126.z) / cbSceneParam._m0[78u].z)) + _2900;
        _2979 = _3135 * _2901;
    }
    else
    {
        _2973 = _2898;
        _2975 = _2899;
        _2977 = _2900;
        _2979 = _2901;
    }
    float _2991 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2992 = _2991 == 3.0;
    float _2993 = log2(_2979);
    float _3000 = exp2(_2993 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2843 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _838))) + ((_2849 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1641)) * cbPerFrame._m0[3u].x));
    float _3001 = exp2(_2993 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2845 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _838))) + ((_2851 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1641)) * cbPerFrame._m0[3u].x));
    float _3002 = exp2(_2993 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2847 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _838))) + ((_2853 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1641)) * cbPerFrame._m0[3u].x));
    float _3011 = (_2991 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3011 * (_2992 ? _3000 : (_3000 + (cbSceneParam._m0[72u].w * _2973)));
    SV_Target.y = _3011 * (_2992 ? _3001 : (_3001 + (cbSceneParam._m0[72u].w * _2975)));
    SV_Target.z = _3011 * (_2992 ? _3002 : (_3002 + (cbSceneParam._m0[72u].w * _2977)));
    SV_Target.w = cbInstanceData._m0[_2873].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2873].w;
}


