#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _907;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    vec4 _242 = texture(sampler2D(C_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _248 = _242.x * cbMtdParam._m0[9u].x;
    float _249 = _242.y * cbMtdParam._m0[9u].y;
    float _250 = _242.z * cbMtdParam._m0[9u].z;
    vec4 _262 = texture(sampler2D(C_AMSN_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _269 = cbMtdParam._m0[10u].x + _262.x;
    vec4 _281 = texture(sampler2D(C_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _285 = _281.z;
    float _289 = (_281.x * 2.0) + (-1.0);
    float _291 = (_281.y * 2.0) + (-1.0);
    float _292 = dot(vec2(_289, _291), vec2(_289, _291));
    float _3268 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _298 = sqrt(1.0 - (isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0))));
    float _301 = fma(_298, _220, fma(_291, _212 * TANGENT.x, (_198 * _190) * _289));
    float _304 = fma(_298, _221, fma(_291, _212 * TANGENT.y, (_198 * _191) * _289));
    float _307 = fma(_298, _222, fma(_291, _212 * TANGENT.z, (_198 * _192) * _289));
    float _311 = inversesqrt(dot(vec3(_301, _304, _307), vec3(_301, _304, _307)));
    float _312 = _311 * _301;
    float _313 = _311 * _304;
    float _314 = _311 * _307;
    float _3279 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _315 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
    float _3290 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3301 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3312 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3323 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _319 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
    float _335 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _376 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _386 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _376);
    float _387 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _376);
    float _388 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _376);
    float _392 = inversesqrt(dot(vec3(_386, _387, _388), vec3(_386, _387, _388)));
    float _393 = _386 * _392;
    float _394 = _387 * _392;
    float _395 = _388 * _392;
    float _401 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _402 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _404 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _406 = _404.w;
    float _427 = fma(_314, cbSceneParam._m0[5u].z, fma(_313, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _312));
    float _430 = fma(_314, cbSceneParam._m0[6u].z, fma(_313, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _312));
    float _433 = fma(_314, cbSceneParam._m0[7u].z, fma(_313, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _312));
    vec4 _435 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _446 = (((_435.y - _315) + (_435.w * _315)) * cbMtdParam._m0[3u].x) + _315;
    uint _459 = uint(roundEven(NORMAL.w)) * 13u;
    uint _462 = (_459 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _468 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0)))) * cbInstanceData._m0[_462].x;
    float _469 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0)))) * cbInstanceData._m0[_462].y;
    float _470 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0)))) * cbInstanceData._m0[_462].z;
    float _3334 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _471 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
    float _3345 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    float _3356 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
    vec4 _474 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _479 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _490 = (((_479.x - _319) + (_479.w * _319)) * cbMtdParam._m0[3u].x) + _319;
    float _503 = (cbMtdParam._m0[3u].x * (((_471 * _406) - _471) + _474.x)) + _471;
    float _504 = (cbMtdParam._m0[3u].x * (((_472 * _406) - _472) + _474.y)) + _472;
    float _505 = (cbMtdParam._m0[3u].x * (((_473 * _406) - _473) + _474.z)) + _473;
    float _506 = 1.0 - _490;
    float _507 = _506 * _503;
    float _508 = _506 * _504;
    float _509 = _506 * _505;
    float _514 = (_503 + (-0.039999999105930328369140625)) * _490;
    float _515 = (_504 + (-0.039999999105930328369140625)) * _490;
    float _516 = (_505 + (-0.039999999105930328369140625)) * _490;
    float _517 = _514 + 0.039999999105930328369140625;
    float _519 = _515 + 0.039999999105930328369140625;
    float _520 = _516 + 0.039999999105930328369140625;
    vec4 _529 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _401, cbSceneParam._m0[86u].y * _402));
    float _532 = _529.x * TEXCOORD_4;
    float _533 = dot(vec3(_312, _313, _314), vec3(_393, _394, _395));
    float _536 = _533 * 2.0;
    float _540 = (_536 * _312) - _393;
    float _541 = (_536 * _313) - _394;
    float _542 = (_536 * _314) - _395;
    float _546 = abs(dot(vec3(_393, _394, _395), vec3(_312, _313, _314)));
    float _3367 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _548 = sqrt(_446);
    float _561 = exp2((_548 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_548 * 3.0));
    float _567 = (1.0 - _561) * ((_548 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _568 = _561 * _548;
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _906;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _631 = fma(_604, cbModelParam._m0[26u].z, fma(_600, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _596));
        float _635 = fma(_604, cbModelParam._m0[27u].z, fma(_600, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _596));
        float _639 = fma(_604, cbModelParam._m0[28u].z, fma(_600, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _596));
        float _664 = _596 + _312;
        float _665 = _600 + _313;
        float _666 = _604 + _314;
        float _676 = fma(_666, cbModelParam._m0[26u].z, fma(_665, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _664)) - _631;
        float _677 = fma(_666, cbModelParam._m0[27u].z, fma(_665, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _664)) - _635;
        float _678 = fma(_666, cbModelParam._m0[28u].z, fma(_665, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _664)) - _639;
        float _682 = inversesqrt(dot(vec3(_676, _677, _678), vec3(_676, _677, _678)));
        float _695 = ((_682 * _676) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_631 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _696 = ((_682 * _677) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_635 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _697 = ((_682 * _678) / cbModelParam._m0[34u].z) + ((((((_639 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_695, _696, _697), 0.0);
        float _734 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_700.x + (-0.5));
        float _736 = _734 * (_700.y + (-0.5));
        float _737 = _734 * (_700.z + (-0.5));
        float _744 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _745 = _744 * (_707.x + (-0.5));
        float _746 = _744 * (_707.y + (-0.5));
        float _747 = _744 * (_707.z + (-0.5));
        float _754 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _755 = _754 * (_714.x + (-0.5));
        float _756 = _754 * (_714.y + (-0.5));
        float _757 = _754 * (_714.z + (-0.5));
        float _764 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _765 = _764 * (_721.x + (-0.5));
        float _766 = _764 * (_721.y + (-0.5));
        float _767 = _764 * (_721.z + (-0.5));
        float _768 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _769 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _770 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _771 = _735 * 0.5;
        float _772 = _745 * 0.5;
        float _773 = _755 * 0.5;
        float _774 = dot(vec3(_771, _772, _773), vec3(_771, _772, _773));
        float _779 = (_774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_774);
        float _788 = (dot(vec3(_312, _313, _314), vec3(_779 * _771, _779 * _772, _779 * _773)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _798 = sqrt(((_772 * _772) + (_771 * _771)) + (_773 * _773)) / (_768 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _800 = _799 * 2.0;
        float _804 = (1.0 - _799) / (_799 + 1.0);
        float _3415 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _814 = ((((1.0 - _805) * (_800 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_800 + 1.0))) + _805) * _768;
        float _815 = _736 * 0.5;
        float _816 = _746 * 0.5;
        float _817 = _756 * 0.5;
        float _818 = dot(vec3(_815, _816, _817), vec3(_815, _816, _817));
        float _823 = (_818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_818);
        float _831 = (dot(vec3(_312, _313, _314), vec3(_823 * _815, _823 * _816, _823 * _817)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _840 = sqrt(((_816 * _816) + (_815 * _815)) + (_817 * _817)) / (_769 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _842 = _841 * 2.0;
        float _846 = (1.0 - _841) / (_841 + 1.0);
        float _3448 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _856 = ((((1.0 - _847) * (_842 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_842 + 1.0))) + _847) * _769;
        float _857 = _737 * 0.5;
        float _858 = _747 * 0.5;
        float _859 = _757 * 0.5;
        float _860 = dot(vec3(_857, _858, _859), vec3(_857, _858, _859));
        float _865 = (_860 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_860);
        float _873 = (dot(vec3(_312, _313, _314), vec3(_865 * _857, _865 * _858, _865 * _859)) + 1.0) * 0.5;
        float _3459 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _882 = sqrt(((_858 * _858) + (_857 * _857)) + (_859 * _859)) / (_770 + 9.9999997473787516355514526367188e-06);
        float _3470 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _884 = _883 * 2.0;
        float _888 = (1.0 - _883) / (_883 + 1.0);
        float _3481 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _898 = ((((1.0 - _889) * (_884 + 2.0)) * exp2(log2(isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * (_884 + 1.0))) + _889) * _770;
        _906 = _737;
        _908 = _736;
        _909 = _735;
        _910 = _747;
        _911 = _746;
        _912 = _745;
        _913 = _757;
        _914 = _756;
        _915 = _755;
        _916 = _770;
        _917 = _769;
        _918 = _768;
        _919 = cbModelParam._m0[36u].z * (isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0)));
        _920 = cbModelParam._m0[36u].z * (isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0)));
        _921 = cbModelParam._m0[36u].z * (isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0)));
    }
    else
    {
        _906 = _907;
        _908 = _907;
        _909 = _907;
        _910 = _907;
        _911 = _907;
        _912 = _907;
        _913 = _907;
        _914 = _907;
        _915 = _907;
        _916 = _907;
        _917 = _907;
        _918 = _907;
        _919 = 0.0;
        _920 = 0.0;
        _921 = 0.0;
    }
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _947 = fma(_604, cbModelParam._m0[30u].z, fma(_600, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _596));
        float _951 = fma(_604, cbModelParam._m0[31u].z, fma(_600, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _596));
        float _955 = fma(_604, cbModelParam._m0[32u].z, fma(_600, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _596));
        float _978 = _596 + _312;
        float _979 = _600 + _313;
        float _980 = _604 + _314;
        float _990 = fma(_980, cbModelParam._m0[30u].z, fma(_979, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _978)) - _947;
        float _991 = fma(_980, cbModelParam._m0[31u].z, fma(_979, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _978)) - _951;
        float _992 = fma(_980, cbModelParam._m0[32u].z, fma(_979, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _978)) - _955;
        float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
        float _1009 = ((_996 * _990) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_947 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_996 * _991) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_951 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_996 * _992) / cbModelParam._m0[35u].z) + ((((((_955 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        float _1046 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1013.x + (-0.5));
        float _1048 = _1046 * (_1013.y + (-0.5));
        float _1049 = _1046 * (_1013.z + (-0.5));
        float _1056 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1020.x + (-0.5));
        float _1058 = _1056 * (_1020.y + (-0.5));
        float _1059 = _1056 * (_1020.z + (-0.5));
        float _1066 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1027.x + (-0.5));
        float _1068 = _1066 * (_1027.y + (-0.5));
        float _1069 = _1066 * (_1027.z + (-0.5));
        float _1076 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1034.x + (-0.5));
        float _1078 = _1076 * (_1034.y + (-0.5));
        float _1079 = _1076 * (_1034.z + (-0.5));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = _1047 * 0.5;
        float _1084 = _1057 * 0.5;
        float _1085 = _1067 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_312, _313, _314), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3544 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_1110 + 1.0))) + _1115) * _1080;
        float _1125 = _1048 * 0.5;
        float _1126 = _1058 * 0.5;
        float _1127 = _1068 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_312, _313, _314), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3577 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_1152 + 1.0))) + _1157) * _1081;
        float _1167 = _1049 * 0.5;
        float _1168 = _1059 * 0.5;
        float _1169 = _1069 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_312, _313, _314), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3610 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_1194 + 1.0))) + _1199) * _1082;
        _1216 = _1049;
        _1217 = _1048;
        _1218 = _1047;
        _1219 = _1059;
        _1220 = _1058;
        _1221 = _1057;
        _1222 = _1069;
        _1223 = _1068;
        _1224 = _1067;
        _1225 = _1082;
        _1226 = _1081;
        _1227 = _1080;
        _1228 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1229 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
    }
    else
    {
        _1216 = _907;
        _1217 = _907;
        _1218 = _907;
        _1219 = _907;
        _1220 = _907;
        _1221 = _907;
        _1222 = _907;
        _1223 = _907;
        _1224 = _907;
        _1225 = _907;
        _1226 = _907;
        _1227 = _907;
        _1228 = 0.0;
        _1229 = 0.0;
        _1230 = 0.0;
    }
    float _1240 = (cbModelParam._m0[1u].x * (_1228 - _919)) + _919;
    float _1241 = (cbModelParam._m0[1u].x * (_1229 - _920)) + _920;
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _921)) + _921;
    float _1263 = fma(_1242, cbSceneParam._m0[89u].z, fma(_1241, cbSceneParam._m0[89u].y, _1240 * cbSceneParam._m0[89u].x));
    float _1266 = fma(_1242, cbSceneParam._m0[90u].z, fma(_1241, cbSceneParam._m0[90u].y, _1240 * cbSceneParam._m0[90u].x));
    float _1269 = fma(_1242, cbSceneParam._m0[91u].z, fma(_1241, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1240));
    float _1284 = _540 * 0.5;
    float _1285 = _541 * 0.5;
    float _1286 = _542 * 0.5;
    float _1287 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1290 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1217, _1220, _1223, _1226));
    float _1293 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_1216, _1219, _1222, _1225));
    float _1327;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1300 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_906, _910, _913, _916));
        float _1304 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_908, _911, _914, _917));
        float _1308 = dot(vec4(_1284, _1285, _1286, 1.0), vec4(_909, _912, _915, _918));
        float _1315 = dot(vec4(cbModelParam._m0[39u]), vec4(_1284, _1285, _1286, 1.0));
        _1327 = dot(vec3(isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1315) ? 0.0 : (isnan(0.0) ? _1315 : max(0.0, _1315))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1327 = 1.0;
    }
    float _1338;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1329 = dot(vec4(cbModelParam._m0[40u]), vec4(_1284, _1285, _1286, 1.0));
        _1338 = dot(vec3(isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1329) ? 0.0 : (isnan(0.0) ? _1329 : max(0.0, _1329))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1338 = 1.0;
    }
    float _1342 = (_1338 * cbModelParam._m0[1u].x) + (_1327 * (1.0 - cbModelParam._m0[1u].x));
    float _1352 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _446);
    float _1353 = isnan(_1352) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1352 : min(cbModelParam._m0[25u].z, _1352));
    float _1435;
    float _1437;
    float _1439;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1402 = fma(_604, cbModelParam._m0[13u].z, fma(_600, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _596)) + cbModelParam._m0[13u].w;
        float _1406 = fma(_604, cbModelParam._m0[14u].z, fma(_600, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _596)) + cbModelParam._m0[14u].w;
        float _1410 = fma(_604, cbModelParam._m0[15u].z, fma(_600, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _596)) + cbModelParam._m0[15u].w;
        float _1413 = fma(_542, cbModelParam._m0[13u].z, fma(_541, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _540));
        float _1416 = fma(_542, cbModelParam._m0[14u].z, fma(_541, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _540));
        float _1419 = fma(_542, cbModelParam._m0[15u].z, fma(_541, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _540));
        float _1447;
        if (_1413 > 0.0)
        {
            _1447 = abs((1.0 - _1402) / _1413);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1402 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1447 = frontier_phi_16_14_ladder;
        }
        float _1676;
        if (_1416 > 0.0)
        {
            _1676 = abs((1.0 - _1406) / _1416);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1406 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1676 = frontier_phi_25_21_ladder;
        }
        float _1933;
        if (_1419 > 0.0)
        {
            _1933 = abs((1.0 - _1410) / _1419);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1410 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1933 = frontier_phi_37_32_ladder;
        }
        float _1935 = isnan(_1676) ? _1447 : (isnan(_1447) ? _1676 : min(_1447, _1676));
        float _1936 = isnan(_1933) ? _1935 : (isnan(_1935) ? _1933 : min(_1935, _1933));
        float _1940 = (_1936 * _1413) + _1402;
        float _1941 = (_1936 * _1416) + _1406;
        float _1942 = (_1936 * _1419) + _1410;
        float _1943 = _1936 * 9.9999997473787516355514526367188e-05;
        float _1945 = (-1.0) - _1943;
        float _1947 = _1943 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1942 > _1947) || ((_1942 < _1945) || ((_1941 > _1947) || ((_1941 < _1945) || ((_1940 < _1945) || (_1940 > _1947))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2070 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1942, cbModelParam._m0[9u].z, fma(_1941, cbModelParam._m0[9u].y, _1940 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1942, cbModelParam._m0[10u].z, fma(_1941, cbModelParam._m0[10u].y, _1940 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1942, cbModelParam._m0[11u].z, fma(_1941, cbModelParam._m0[11u].y, _1940 * cbModelParam._m0[11u].x))), _1353);
            frontier_phi_15_37_ladder = _2070.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2070.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2070.x * cbModelParam._m0[1u].y;
        }
        _1435 = frontier_phi_15_37_ladder_2;
        _1437 = frontier_phi_15_37_ladder_1;
        _1439 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1423 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_540, _541, _542), _1353);
        _1435 = _1423.x * cbModelParam._m0[1u].y;
        _1437 = _1423.y * cbModelParam._m0[1u].y;
        _1439 = _1423.z * cbModelParam._m0[1u].y;
    }
    float _1443 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _446);
    float _1444 = isnan(_1443) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1443 : min(cbModelParam._m0[25u].w, _1443));
    float _1537;
    float _1539;
    float _1541;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1501 = fma(_604, cbModelParam._m0[21u].z, fma(_600, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _596)) + cbModelParam._m0[21u].w;
        float _1505 = fma(_604, cbModelParam._m0[22u].z, fma(_600, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _596)) + cbModelParam._m0[22u].w;
        float _1509 = fma(_604, cbModelParam._m0[23u].z, fma(_600, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _596)) + cbModelParam._m0[23u].w;
        float _1512 = fma(_542, cbModelParam._m0[21u].z, fma(_541, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _540));
        float _1515 = fma(_542, cbModelParam._m0[22u].z, fma(_541, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _540));
        float _1518 = fma(_542, cbModelParam._m0[23u].z, fma(_541, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _540));
        float _1681;
        if (_1512 > 0.0)
        {
            _1681 = abs((1.0 - _1501) / _1512);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1501 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1681 = frontier_phi_27_23_ladder;
        }
        float _1960;
        if (_1515 > 0.0)
        {
            _1960 = abs((1.0 - _1505) / _1515);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1505 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1960 = frontier_phi_39_34_ladder;
        }
        float _2173;
        if (_1518 > 0.0)
        {
            _2173 = abs((1.0 - _1509) / _1518);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1509 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2173 = frontier_phi_48_45_ladder;
        }
        float _2175 = isnan(_1960) ? _1681 : (isnan(_1681) ? _1960 : min(_1681, _1960));
        float _2176 = isnan(_2173) ? _2175 : (isnan(_2175) ? _2173 : min(_2175, _2173));
        float _2180 = (_2176 * _1512) + _1501;
        float _2181 = (_2176 * _1515) + _1505;
        float _2182 = (_2176 * _1518) + _1509;
        float _2183 = _2176 * 9.9999997473787516355514526367188e-05;
        float _2184 = (-1.0) - _2183;
        float _2186 = _2183 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2182 > _2186) || ((_2182 < _2184) || ((_2181 > _2186) || ((_2181 < _2184) || ((_2180 < _2184) || (_2180 > _2186))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2380 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2182, cbModelParam._m0[17u].z, fma(_2181, cbModelParam._m0[17u].y, _2180 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2182, cbModelParam._m0[18u].z, fma(_2181, cbModelParam._m0[18u].y, _2180 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2182, cbModelParam._m0[19u].z, fma(_2181, cbModelParam._m0[19u].y, _2180 * cbModelParam._m0[19u].x))), _1444);
            frontier_phi_24_48_ladder = _2380.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2380.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2380.x * cbModelParam._m0[1u].z;
        }
        _1537 = frontier_phi_24_48_ladder_2;
        _1539 = frontier_phi_24_48_ladder_1;
        _1541 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1521 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_540, _541, _542), _1444);
        _1537 = _1521.x * cbModelParam._m0[1u].z;
        _1539 = _1521.y * cbModelParam._m0[1u].z;
        _1541 = _1521.z * cbModelParam._m0[1u].z;
    }
    float _1554 = (((_567 * _517) + _568) * _532) * ((cbModelParam._m0[1u].w * (_1537 - _1435)) + _1435);
    float _1556 = (((_567 * _519) + _568) * _532) * ((cbModelParam._m0[1u].w * (_1539 - _1437)) + _1437);
    float _1558 = (((_567 * _520) + _568) * _532) * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1561 = fma(_1558, cbSceneParam._m0[89u].z, fma(_1556, cbSceneParam._m0[89u].y, _1554 * cbSceneParam._m0[89u].x));
    float _1564 = fma(_1558, cbSceneParam._m0[90u].z, fma(_1556, cbSceneParam._m0[90u].y, _1554 * cbSceneParam._m0[90u].x));
    float _1567 = fma(_1558, cbSceneParam._m0[91u].z, fma(_1556, cbSceneParam._m0[91u].y, _1554 * cbSceneParam._m0[91u].x));
    vec4 _1575 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_401, _402));
    float _1577 = _1575.w;
    float _1589 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1577);
    float _1590 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1577);
    float _1591 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1577);
    uvec4 _1595 = floatBitsToUint(cbInstanceData._m0[_459 + 5u]);
    uint _1597 = _1595.x * 14u;
    uint _1598 = _1597 + 13u;
    float _1605 = _532 + (-1.0);
    float _1610 = (cbLight._m0[_1598].x * _1605) + 1.0;
    float _1611 = (cbLight._m0[_1598].y * _1605) + 1.0;
    float _1612 = (cbLight._m0[_1598].z * _1605) + 1.0;
    float _1613 = (cbLight._m0[_1598].w * _1605) + 1.0;
    uint _1614 = _1597 + 5u;
    float _1620 = isnan(1.0) ? _1611 : (isnan(_1611) ? 1.0 : min(_1611, 1.0));
    uint _1624 = _1597 + 4u;
    float _1634 = isnan(1.0) ? _1610 : (isnan(_1610) ? 1.0 : min(_1610, 1.0));
    uint _1638 = _1597 | 1u;
    float _1649 = dot(vec3(cbLight._m0[_1597].xyz), vec3(_312, _313, _314));
    float _1652 = dot(vec3(cbLight._m0[_1638].xyz), vec3(_312, _313, _314));
    float _3746 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
    float _3757 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
    float _1657 = (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * 0.3183098733425140380859375;
    float _1659 = (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * 0.3183098733425140380859375;
    float _1666 = ((cbLight._m0[_1614].x * _1620) * _1659) + (((cbLight._m0[_1624].x * _1589) * _1634) * _1657);
    float _1667 = ((_1620 * cbLight._m0[_1614].y) * _1659) + (((cbLight._m0[_1624].y * _1590) * _1634) * _1657);
    float _1668 = ((_1620 * cbLight._m0[_1614].z) * _1659) + (((cbLight._m0[_1624].z * _1591) * _1634) * _1657);
    uvec4 _1673 = floatBitsToUint(cbLight._m0[_1597 + 12u]);
    bool _1675 = _1673.x == 0u;
    float _1686;
    float _1688;
    float _1690;
    if (_1675)
    {
        _1686 = _1666;
        _1688 = _1667;
        _1690 = _1668;
    }
    else
    {
        uint _1694 = _1597 + 6u;
        float _1710 = (dot(vec3(cbLight._m0[_1597 + 2u].xyz), vec3(_312, _313, _314)) * 0.5) + 0.5;
        float _1711 = _1710 * _1710;
        float _3768 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1713 = isnan(1.0) ? _1612 : (isnan(_1612) ? 1.0 : min(_1612, 1.0));
        _1686 = (((cbLight._m0[_1694].x * 0.3183098733425140380859375) * _1712) * _1713) + _1666;
        _1688 = (((cbLight._m0[_1694].y * 0.3183098733425140380859375) * _1712) * _1713) + _1667;
        _1690 = (((cbLight._m0[_1694].z * 0.3183098733425140380859375) * _1712) * _1713) + _1668;
    }
    bool _1693 = _1673.y == 0u;
    float _1731;
    float _1733;
    float _1735;
    if (_1693)
    {
        _1731 = _1686;
        _1733 = _1688;
        _1735 = _1690;
    }
    else
    {
        uint _1904 = _1597 + 7u;
        float _1920 = (dot(vec3(cbLight._m0[_1597 + 3u].xyz), vec3(_312, _313, _314)) * 0.5) + 0.5;
        float _1921 = _1920 * _1920;
        float _3784 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1922 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1923 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
        _1731 = (((cbLight._m0[_1904].x * 0.3183098733425140380859375) * _1922) * _1923) + _1686;
        _1733 = (((cbLight._m0[_1904].y * 0.3183098733425140380859375) * _1922) * _1923) + _1688;
        _1735 = (((cbLight._m0[_1904].z * 0.3183098733425140380859375) * _1922) * _1923) + _1690;
    }
    uint _1738 = _1597 + 8u;
    float _1751 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1597].w)) * _446) * 0.949999988079071044921875);
    float _1752 = _1751 * _1751;
    float _1753 = cbLight._m0[_1597].x + _393;
    float _1754 = cbLight._m0[_1597].y + _394;
    float _1755 = cbLight._m0[_1597].z + _395;
    float _1759 = inversesqrt(dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755)));
    float _1760 = _1759 * _1753;
    float _1761 = _1759 * _1754;
    float _1762 = _1759 * _1755;
    float _1763 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_1597].xyz));
    float _3800 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1766 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _3811 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _1767 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _1768 = dot(vec3(_312, _313, _314), vec3(_1760, _1761, _1762));
    float _3822 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1771 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _1772 = dot(vec3(cbLight._m0[_1597].xyz), vec3(_1760, _1761, _1762));
    float _3833 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1776 = _1752 * _1752;
    float _1780 = ((_1771 * _1771) * (_1776 + (-1.0))) + 1.0;
    float _1788 = exp2(log2(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * 5.0);
    float _1789 = 0.959999978542327880859375 - _514;
    float _1791 = 0.959999978542327880859375 - _515;
    float _1792 = 0.959999978542327880859375 - _516;
    float _1799 = 1.0 - _1752;
    float _1810 = (0.5 / (((_1767 * ((_1766 * _1799) + _1752)) + 9.9999999392252902907785028219223e-09) + (((_1767 * _1799) + _1752) * _1766))) * _1766;
    float _3844 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1812 = (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1776 / ((_1780 * _1780) * 3.141590118408203125));
    uint _1826 = _1597 + 9u;
    float _1837 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1638].w)) * _446) * 0.949999988079071044921875);
    float _1838 = _1837 * _1837;
    float _1839 = cbLight._m0[_1638].x + _393;
    float _1840 = cbLight._m0[_1638].y + _394;
    float _1841 = cbLight._m0[_1638].z + _395;
    float _1845 = inversesqrt(dot(vec3(_1839, _1840, _1841), vec3(_1839, _1840, _1841)));
    float _1846 = _1845 * _1839;
    float _1847 = _1845 * _1840;
    float _1848 = _1845 * _1841;
    float _1849 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_1638].xyz));
    float _3855 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1852 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _1853 = dot(vec3(_312, _313, _314), vec3(_1846, _1847, _1848));
    float _3866 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1856 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _1857 = dot(vec3(cbLight._m0[_1638].xyz), vec3(_1846, _1847, _1848));
    float _3877 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1861 = _1838 * _1838;
    float _1865 = ((_1856 * _1856) * (_1861 + (-1.0))) + 1.0;
    float _1872 = exp2(log2(1.0 - (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) * 5.0);
    float _1879 = 1.0 - _1838;
    float _1889 = (0.5 / (((_1767 * ((_1852 * _1879) + _1838)) + 9.9999999392252902907785028219223e-09) + (((_1767 * _1879) + _1838) * _1852))) * _1852;
    float _3888 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1891 = (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1861 / ((_1865 * _1865) * 3.141590118408203125));
    float _1901 = (((((_1872 * _1789) + _517) * cbLight._m0[_1826].x) * _1891) * _1620) + ((((cbLight._m0[_1738].x * _1589) * ((_1788 * _1789) + _517)) * _1812) * _1634);
    float _1902 = (((((_1872 * _1791) + _519) * cbLight._m0[_1826].y) * _1891) * _1620) + ((((cbLight._m0[_1738].y * _1590) * ((_1788 * _1791) + _519)) * _1812) * _1634);
    float _1903 = (((((_1872 * _1792) + _520) * cbLight._m0[_1826].z) * _1891) * _1620) + ((((cbLight._m0[_1738].z * _1591) * ((_1788 * _1792) + _520)) * _1812) * _1634);
    float _1965;
    float _1967;
    float _1969;
    if (_1675)
    {
        _1965 = _1901;
        _1967 = _1902;
        _1969 = _1903;
    }
    else
    {
        uint _1971 = _1597 + 2u;
        uint _1975 = _1597 + 10u;
        float _1989 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1971].w)) * _446) * 0.949999988079071044921875);
        float _1990 = _1989 * _1989;
        float _1991 = cbLight._m0[_1971].x + _393;
        float _1992 = cbLight._m0[_1971].y + _394;
        float _1993 = cbLight._m0[_1971].z + _395;
        float _1997 = inversesqrt(dot(vec3(_1991, _1992, _1993), vec3(_1991, _1992, _1993)));
        float _1998 = _1997 * _1991;
        float _1999 = _1997 * _1992;
        float _2000 = _1997 * _1993;
        float _2001 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_1971].xyz));
        float _3899 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2004 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _2005 = dot(vec3(_312, _313, _314), vec3(_1998, _1999, _2000));
        float _3910 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2008 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _2009 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_1998, _1999, _2000));
        float _3921 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2013 = _1990 * _1990;
        float _2017 = ((_2008 * _2008) * (_2013 + (-1.0))) + 1.0;
        float _2024 = exp2(log2(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * 5.0);
        float _2031 = 1.0 - _1990;
        float _2041 = (0.5 / (((_1767 * ((_2004 * _2031) + _1990)) + 9.9999999392252902907785028219223e-09) + (((_1767 * _2031) + _1990) * _2004))) * _2004;
        float _3932 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2043 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_2013 / ((_2017 * _2017) * 3.141590118408203125));
        float _2044 = isnan(1.0) ? _1612 : (isnan(_1612) ? 1.0 : min(_1612, 1.0));
        _1965 = (((((_2024 * _1789) + _517) * cbLight._m0[_1975].x) * _2043) * _2044) + _1901;
        _1967 = (((((_2024 * _1791) + _519) * cbLight._m0[_1975].y) * _2043) * _2044) + _1902;
        _1969 = (((((_2024 * _1792) + _520) * cbLight._m0[_1975].z) * _2043) * _2044) + _1903;
    }
    float _2079;
    float _2081;
    float _2083;
    if (_1693)
    {
        _2079 = _1965;
        _2081 = _1967;
        _2083 = _1969;
    }
    else
    {
        uint _2090 = _1597 + 3u;
        uint _2094 = _1597 + 11u;
        float _2108 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2090].w)) * _446) * 0.949999988079071044921875);
        float _2109 = _2108 * _2108;
        float _2110 = cbLight._m0[_2090].x + _393;
        float _2111 = cbLight._m0[_2090].y + _394;
        float _2112 = cbLight._m0[_2090].z + _395;
        float _2116 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
        float _2117 = _2116 * _2110;
        float _2118 = _2116 * _2111;
        float _2119 = _2116 * _2112;
        float _2120 = dot(vec3(_312, _313, _314), vec3(cbLight._m0[_2090].xyz));
        float _3948 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2123 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _2124 = dot(vec3(_312, _313, _314), vec3(_2117, _2118, _2119));
        float _3959 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2127 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _2128 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_2117, _2118, _2119));
        float _3970 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2132 = _2109 * _2109;
        float _2136 = ((_2127 * _2127) * (_2132 + (-1.0))) + 1.0;
        float _2143 = exp2(log2(1.0 - (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * 5.0);
        float _2150 = 1.0 - _2109;
        float _2160 = (0.5 / (((_1767 * ((_2123 * _2150) + _2109)) + 9.9999999392252902907785028219223e-09) + (((_1767 * _2150) + _2109) * _2123))) * _2123;
        float _3981 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2162 = (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_2132 / ((_2136 * _2136) * 3.141590118408203125));
        float _2163 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
        _2079 = (((((_2143 * _1789) + _517) * cbLight._m0[_2094].x) * _2162) * _2163) + _1965;
        _2081 = (((((_2143 * _1791) + _519) * cbLight._m0[_2094].y) * _2162) * _2163) + _1967;
        _2083 = (((((_2143 * _1792) + _520) * cbLight._m0[_2094].z) * _2162) * _2163) + _1969;
    }
    float _2297;
    float _2299;
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    if (_1595.y == 0u)
    {
        float _2238 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2239 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2238;
        float _2240 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2238;
        float _2241 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2238;
        uvec4 _2253 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2254 = _2253.x;
        uint _2265 = uint((float(_2253.y) * floor(float(uint(cbSceneParam._m0[85u].y * _402) / _2254))) + floor(float(uint(cbSceneParam._m0[85u].x * _401) / _2254)));
        float _2275 = (log2(_2241 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2276 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        uint _2279 = uint(isnan(14.0) ? _2276 : (isnan(_2276) ? 14.0 : min(_2276, 14.0)));
        uvec4 _2284 = texelFetch(g_lightClusterGridBuffer, int(((_2279 << 2u) + (_2265 << 6u)) >> 2u));
        uint _2285 = _2284.x;
        uint _2286 = _2253.z;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        if (((((1u << ((_2286 >> 4u) & 15u)) + 4294967295u) & _2285) == 0u) || ((_2286 & 240u) == 0u))
        {
            _2385 = 0.0;
            _2387 = 0.0;
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
        }
        else
        {
            float _2386;
            float _2388;
            float _2390;
            float _2392;
            float _2394;
            float _2396;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            float _2534 = 0.0;
            uint _2535 = 0u;
            uint _2544;
            bool _2545;
            for (;;)
            {
                _2544 = texelFetch(g_lightClassification, int((((_2279 << 5u) + (_2265 << 9u)) + (_2535 << 2u)) >> 2u)).x;
                _2545 = _2544 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2545)
                {
                    frontier_phi_63_pred = _2534;
                    frontier_phi_63_pred_1 = _2533;
                    frontier_phi_63_pred_2 = _2532;
                    frontier_phi_63_pred_3 = _2531;
                    frontier_phi_63_pred_4 = _2530;
                    frontier_phi_63_pred_5 = _2529;
                }
                else
                {
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    uint _2659;
                    _2653 = _2529;
                    _2654 = _2530;
                    _2655 = _2531;
                    _2656 = _2532;
                    _2657 = _2533;
                    _2658 = _2534;
                    _2659 = _2544;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    for (;;)
                    {
                        uint _2663 = uint(findLSB(_2659)) + (_2535 << 5u);
                        uint _2660 = (_2659 + 4294967295u) & _2659;
                        uint _2665 = _2663 * 48u;
                        vec4 _2679 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2665)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 3u)).x));
                        uint _2685 = (_2663 * 48u) + 4u;
                        vec4 _2698 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 3u)).x));
                        uint _2704 = (_2663 * 48u) + 8u;
                        vec3 _2715 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2704)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 2u)).x));
                        float _2719 = _2679.x - _2239;
                        float _2720 = _2679.y - _2240;
                        float _2721 = _2679.z - _2241;
                        float _2722 = dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721));
                        float _2725 = inversesqrt(_2722);
                        float _2726 = _2725 * _2719;
                        float _2727 = _2725 * _2720;
                        float _2728 = _2725 * _2721;
                        float _2729 = dot(vec3(_427, _430, _433), vec3(_2726, _2727, _2728));
                        float _2734 = 1.0 - (_2722 * _2679.w);
                        float _4007 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                        float _2735 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
                        float _2736 = sqrt(_2722) * _2698.w;
                        float _2739 = 1.39999997615814208984375 / (_2736 + 1.39999997615814208984375);
                        float _2740 = _2739 * _2739;
                        float _2743 = ((1.0 - _2740) * _2729) + _2740;
                        float _2746 = _2736 * _2736;
                        float _2750 = ((isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0))) * _2735) / ((_2746 * 0.699999988079071044921875) + 1.0);
                        float _2754 = (-0.0) - _2239;
                        float _2755 = (-0.0) - _2240;
                        float _2756 = (-0.0) - _2241;
                        float _2760 = inversesqrt(dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756)));
                        float _2761 = _2760 * _2754;
                        float _2762 = _2760 * _2755;
                        float _2763 = _2760 * _2756;
                        float _2771 = exp2(log2(1.0 / ((_2746 * 3.5) + 5.0)) * 0.25);
                        float _2772 = 1.0 - _548;
                        float _2779 = sqrt(1.0 - ((1.0 - (_2772 * _2772)) * (1.0 - (_2771 * _2771))));
                        float _2780 = _2779 * _2779;
                        float _2781 = _2780 * _2780;
                        float _2782 = _2761 + _2726;
                        float _2783 = _2762 + _2727;
                        float _2784 = _2763 + _2728;
                        float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
                        float _2792 = dot(vec3(_427, _430, _433), vec3(_2761, _2762, _2763));
                        float _4023 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2795 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                        float _2796 = dot(vec3(_427, _430, _433), vec3(_2788 * _2782, _2788 * _2783, _2788 * _2784));
                        float _4034 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2799 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                        float _2803 = ((_2799 * _2799) * (_2781 + (-1.0))) + 1.0;
                        float _2804 = _2739 * _2780;
                        float _2805 = _2804 * _2804;
                        float _2808 = ((1.0 - _2805) * _2729) + _2805;
                        float _4045 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2809 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                        float _2810 = 1.0 - _2780;
                        float _2820 = (0.5 / (((_2809 * ((_2795 * _2810) + _2780)) + 9.9999999392252902907785028219223e-09) + (((_2809 * _2810) + _2780) * _2795))) * _2809;
                        float _4056 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                        float _2831 = (((_2781 * 3.1415927410125732421875) * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) / ((_2803 * _2803) * ((_2746 * 2.1991131305694580078125) + 3.141590118408203125))) * _2735;
                        _2588 = (_2750 * _2698.x) + _2656;
                        _2589 = (_2750 * _2698.y) + _2657;
                        _2590 = (_2750 * _2698.z) + _2658;
                        _2585 = (_2831 * _2715.x) + _2653;
                        _2586 = (_2831 * _2715.y) + _2654;
                        _2587 = (_2831 * _2715.z) + _2655;
                        if (_2660 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2653 = _2585;
                            _2654 = _2586;
                            _2655 = _2587;
                            _2656 = _2588;
                            _2657 = _2589;
                            _2658 = _2590;
                            _2659 = _2660;
                        }
                    }
                    frontier_phi_63_pred = _2590;
                    frontier_phi_63_pred_1 = _2589;
                    frontier_phi_63_pred_2 = _2588;
                    frontier_phi_63_pred_3 = _2587;
                    frontier_phi_63_pred_4 = _2586;
                    frontier_phi_63_pred_5 = _2585;
                }
                _2396 = frontier_phi_63_pred;
                _2394 = frontier_phi_63_pred_1;
                _2392 = frontier_phi_63_pred_2;
                _2390 = frontier_phi_63_pred_3;
                _2388 = frontier_phi_63_pred_4;
                _2386 = frontier_phi_63_pred_5;
                uint _2536 = _2535 + 1u;
                if (_2536 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2529 = _2386;
                    _2530 = _2388;
                    _2531 = _2390;
                    _2532 = _2392;
                    _2533 = _2394;
                    _2534 = _2396;
                    _2535 = _2536;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2385 = _2386;
            _2387 = _2388;
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
        }
        uvec4 _2399 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2400 = _2399.z;
        uint _2402 = (_2400 >> 8u) & 15u;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        if (((4294967295u << _2402) & _2285) == 0u)
        {
            _2497 = _2385;
            _2499 = _2387;
            _2501 = _2389;
            _2503 = _2391;
            _2505 = _2393;
            _2507 = _2395;
        }
        else
        {
            float _2522 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
            float _2523 = _2522 * _2239;
            float _2524 = _2522 * _2240;
            float _2525 = _2522 * _2241;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2402 < ((_2400 >> 12u) & 15u))
            {
                float _2498;
                float _2500;
                float _2502;
                float _2504;
                float _2506;
                float _2508;
                float _2636 = _2385;
                float _2637 = _2387;
                float _2638 = _2389;
                float _2639 = _2391;
                float _2640 = _2393;
                float _2641 = _2395;
                uint _2642 = _2402;
                uint _2651;
                bool _2652;
                for (;;)
                {
                    _2651 = texelFetch(g_lightClassification, int((((_2279 << 5u) + (_2265 << 9u)) + (_2642 << 2u)) >> 2u)).x;
                    _2652 = _2651 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2652)
                    {
                        frontier_phi_69_pred = _2641;
                        frontier_phi_69_pred_1 = _2640;
                        frontier_phi_69_pred_2 = _2639;
                        frontier_phi_69_pred_3 = _2638;
                        frontier_phi_69_pred_4 = _2637;
                        frontier_phi_69_pred_5 = _2636;
                    }
                    else
                    {
                        float _2836;
                        float _2837;
                        float _2838;
                        float _2839;
                        float _2840;
                        float _2841;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _2849 = _2636;
                        float _2850 = _2637;
                        float _2851 = _2638;
                        float _2852 = _2639;
                        float _2853 = _2640;
                        float _2854 = _2641;
                        uint _2855 = _2651;
                        uint _2856;
                        vec4 _2881;
                        float _2882;
                        vec4 _2897;
                        vec3 _2909;
                        vec4 _2925;
                        vec4 _2941;
                        float _2988;
                        bool _2989;
                        for (;;)
                        {
                            uint _2866 = ((_2642 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2855));
                            _2856 = (_2855 + 4294967295u) & _2855;
                            uint _2868 = _2866 * 40u;
                            _2881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 3u)).x));
                            _2882 = _2881.w;
                            uint _2884 = (_2866 * 40u) + 4u;
                            _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            uint _2899 = (_2866 * 40u) + 8u;
                            _2909 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2899)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 2u)).x));
                            uint _2912 = (_2866 * 40u) + 16u;
                            _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            uint _2928 = (_2866 * 40u) + 20u;
                            _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            uint _2944 = (_2866 * 40u) + 24u;
                            vec4 _2957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 3u)).x));
                            uint _2963 = (_2866 * 40u) + 28u;
                            vec4 _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            _2988 = fma(_2241, _2976.z, fma(_2240, _2976.y, _2976.x * _2239)) + _2976.w;
                            _2989 = !((fma(_2241, _2957.z, fma(_2240, _2957.y, _2957.x * _2239)) + _2957.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2989)
                            {
                                float _3016 = _2881.x - _2239;
                                float _3017 = _2881.y - _2240;
                                float _3018 = _2881.z - _2241;
                                float _3019 = dot(vec3(_3016, _3017, _3018), vec3(_3016, _3017, _3018));
                                float _3022 = inversesqrt(_3019);
                                float _3023 = _3022 * _3016;
                                float _3024 = _3022 * _3017;
                                float _3025 = _3022 * _3018;
                                float _3029 = 1.0 - (_3019 / (_2882 * _2882));
                                float _4067 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3030 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                                float _3034 = sqrt(_3019) * _2897.w;
                                float _3036 = 1.39999997615814208984375 / (_3034 + 1.39999997615814208984375);
                                float _3037 = _3036 * _3036;
                                float _3040 = ((1.0 - _3037) * dot(vec3(_3023, _3024, _3025), vec3(_427, _430, _433))) + _3037;
                                float _3043 = _3034 * _3034;
                                float _3047 = (fma(_2241, _2925.z, fma(_2240, _2925.y, _2925.x * _2239)) + _2925.w) / _2988;
                                float _3048 = (fma(_2241, _2941.z, fma(_2240, _2941.y, _2941.x * _2239)) + _2941.w) / _2988;
                                float _3052 = 1.0 - dot(vec2(_3047, _3048), vec2(_3047, _3048));
                                float _4083 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                                float _3053 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                                float _3054 = _3053 * (((isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0))) * _3030) / ((_3043 * 0.699999988079071044921875) + 1.0));
                                float _3066 = exp2(log2(1.0 / ((_3043 * 3.5) + 5.0)) * 0.25);
                                float _3067 = 1.0 - _548;
                                float _3074 = sqrt(1.0 - ((1.0 - (_3067 * _3067)) * (1.0 - (_3066 * _3066))));
                                float _3075 = _3074 * _3074;
                                float _3076 = _3075 * _3075;
                                float _3077 = _3023 - _2523;
                                float _3078 = _3024 - _2524;
                                float _3079 = _3025 - _2525;
                                float _3083 = inversesqrt(dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079)));
                                float _3087 = dot(vec3(_427, _430, _433), vec3((-0.0) - _2523, (-0.0) - _2524, (-0.0) - _2525));
                                float _4094 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3090 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                                float _3091 = dot(vec3(_427, _430, _433), vec3(_3083 * _3077, _3083 * _3078, _3083 * _3079));
                                float _4105 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3094 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                                float _3098 = ((_3094 * _3094) * (_3076 + (-1.0))) + 1.0;
                                float _3099 = _3036 * _3075;
                                float _3100 = _3099 * _3099;
                                float _3106 = ((1.0 - _3100) * dot(vec3(_427, _430, _433), vec3(_3023, _3024, _3025))) + _3100;
                                float _4116 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3107 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                                float _3108 = 1.0 - _3075;
                                float _3118 = (0.5 / (((_3107 * ((_3090 * _3108) + _3075)) + 9.9999999392252902907785028219223e-09) + (((_3107 * _3108) + _3075) * _3090))) * _3107;
                                float _4127 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3128 = (_3053 * _3030) * (((_3076 * 3.1415927410125732421875) * (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) / ((_3098 * _3098) * ((_3043 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3054 * _2897.z;
                                frontier_phi_75_pred_1 = _3054 * _2897.y;
                                frontier_phi_75_pred_2 = _3054 * _2897.x;
                                frontier_phi_75_pred_3 = _3128 * _2909.z;
                                frontier_phi_75_pred_4 = _3128 * _2909.y;
                                frontier_phi_75_pred_5 = _3128 * _2909.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3137 = frontier_phi_75_pred;
                            _3136 = frontier_phi_75_pred_1;
                            _3135 = frontier_phi_75_pred_2;
                            _3134 = frontier_phi_75_pred_3;
                            _3133 = frontier_phi_75_pred_4;
                            _3132 = frontier_phi_75_pred_5;
                            _2839 = _3135 + _2852;
                            _2840 = _3136 + _2853;
                            _2841 = _3137 + _2854;
                            _2836 = _3132 + _2849;
                            _2837 = _3133 + _2850;
                            _2838 = _3134 + _2851;
                            if (_2856 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2849 = _2836;
                                _2850 = _2837;
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2840;
                                _2854 = _2841;
                                _2855 = _2856;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2841;
                        frontier_phi_69_pred_1 = _2840;
                        frontier_phi_69_pred_2 = _2839;
                        frontier_phi_69_pred_3 = _2838;
                        frontier_phi_69_pred_4 = _2837;
                        frontier_phi_69_pred_5 = _2836;
                    }
                    _2508 = frontier_phi_69_pred;
                    _2506 = frontier_phi_69_pred_1;
                    _2504 = frontier_phi_69_pred_2;
                    _2502 = frontier_phi_69_pred_3;
                    _2500 = frontier_phi_69_pred_4;
                    _2498 = frontier_phi_69_pred_5;
                    uint _2643 = _2642 + 1u;
                    if (_2643 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2636 = _2498;
                        _2637 = _2500;
                        _2638 = _2502;
                        _2639 = _2504;
                        _2640 = _2506;
                        _2641 = _2508;
                        _2642 = _2643;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2508;
                frontier_phi_57_58_ladder_1 = _2506;
                frontier_phi_57_58_ladder_2 = _2504;
                frontier_phi_57_58_ladder_3 = _2502;
                frontier_phi_57_58_ladder_4 = _2500;
                frontier_phi_57_58_ladder_5 = _2498;
            }
            else
            {
                frontier_phi_57_58_ladder = _2395;
                frontier_phi_57_58_ladder_1 = _2393;
                frontier_phi_57_58_ladder_2 = _2391;
                frontier_phi_57_58_ladder_3 = _2389;
                frontier_phi_57_58_ladder_4 = _2387;
                frontier_phi_57_58_ladder_5 = _2385;
            }
            _2497 = frontier_phi_57_58_ladder_5;
            _2499 = frontier_phi_57_58_ladder_4;
            _2501 = frontier_phi_57_58_ladder_3;
            _2503 = frontier_phi_57_58_ladder_2;
            _2505 = frontier_phi_57_58_ladder_1;
            _2507 = frontier_phi_57_58_ladder;
        }
        float _2512 = isnan(1.0) ? _532 : (isnan(_532) ? 1.0 : min(_532, 1.0));
        _2297 = (_2512 * _2503) + _1731;
        _2299 = (_2512 * _2505) + _1733;
        _2301 = (_2512 * _2507) + _1735;
        _2303 = ((_2497 * _517) * _2512) + _2079;
        _2305 = ((_2499 * _519) * _2512) + _2081;
        _2307 = ((_2501 * _520) * _2512) + _2083;
    }
    else
    {
        _2297 = _1731;
        _2299 = _1733;
        _2301 = _1735;
        _2303 = _2079;
        _2305 = _2081;
        _2307 = _2083;
    }
    float _4143 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _4154 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _4165 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    uint _2327 = _459 + 6u;
    float _2335 = _401 / cbSceneParam._m0[86u].x;
    float _2336 = _402 / cbSceneParam._m0[86u].y;
    vec4 _2350 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2335, _2336, (log2((isnan(cbSceneParam._m0[77u].w) ? _335 : (isnan(_335) ? cbSceneParam._m0[77u].w : min(_335, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2352 = _2350.x;
    float _2353 = _2350.y;
    float _2354 = _2350.z;
    float _2355 = _2350.w;
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    if (_335 > cbSceneParam._m0[78u].w)
    {
        float _2410 = isnan(_335) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _335 : min(cbSceneParam._m0[80u].w, _335));
        float _2411 = _2410 / _335;
        float _2422 = _2411 * _386;
        float _2423 = _387 * _2411;
        float _2424 = (-0.0) - _2423;
        float _2425 = _2411 * _388;
        float _2427 = (cbSceneParam._m0[77u].w * _2424) / _2410;
        float _2428 = _2427 + cbSceneParam._m0[79u].w;
        float _2429 = cbSceneParam._m0[79u].w - _2423;
        float _2435 = sqrt(((_2422 * _2422) + (_2423 * _2423)) + (_2425 * _2425));
        float _2438 = (1.0 - (cbSceneParam._m0[77u].w / _2410)) * _2435;
        float _2443 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2445 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2598;
        if (abs((_2424 - _2427) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2598 = ((((_2428 > 0.0) ? exp2(_2443 * _2428) : (2.0 - exp2(_2445 * _2428))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2438;
        }
        else
        {
            float _2558 = 1.0 / cbSceneParam._m0[80u].x;
            float _2559 = isnan(_2429) ? _2428 : (isnan(_2428) ? _2429 : max(_2428, _2429));
            float _2560 = isnan(_2429) ? _2428 : (isnan(_2428) ? _2429 : min(_2428, _2429));
            float _2569 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : min(_2559, 0.0));
            float _2570 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : min(_2560, 0.0));
            _2598 = ((abs(_2435 / _2424) * cbSceneParam._m0[80u].y) * ((((_2569 - _2570) * 2.0) - ((exp2(_2443 * (isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0)))) - exp2(_2443 * (isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0))))) * _2558)) - ((exp2(_2445 * _2569) - exp2(_2445 * _2570)) * _2558))) + (_2438 * cbSceneParam._m0[80u].z);
        }
        vec4 _2600 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2335, _2336, 1.0), 0.0);
        float _2609 = exp2((_2598 * (-1.44269502162933349609375)) * (1.0 - _2600.w));
        float _2610 = log2(_2609);
        float _2626 = log2(_2355);
        _2447 = (exp2(_2626 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].x)) * _2600.x) / cbSceneParam._m0[78u].x)) + _2352;
        _2449 = (exp2(_2626 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].y)) * _2600.y) / cbSceneParam._m0[78u].y)) + _2353;
        _2451 = (exp2(_2626 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2610 * cbSceneParam._m0[78u].z)) * _2600.z) / cbSceneParam._m0[78u].z)) + _2354;
        _2453 = _2609 * _2355;
    }
    else
    {
        _2447 = _2352;
        _2449 = _2353;
        _2451 = _2354;
        _2453 = _2355;
    }
    float _2465 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2466 = _2465 == 3.0;
    float _2467 = log2(_2453);
    float _2474 = exp2(_2467 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2297 + ((isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))) * _532))) + ((_2303 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _1342)) * cbPerFrame._m0[3u].x));
    float _2475 = exp2(_2467 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_2299 + ((isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))) * _532))) + ((_2305 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _1342)) * cbPerFrame._m0[3u].x));
    float _2476 = exp2(_2467 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2301 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _532))) + ((_2307 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1342)) * cbPerFrame._m0[3u].x));
    float _2485 = (_2465 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2485 * (_2466 ? _2474 : (_2474 + (cbSceneParam._m0[72u].w * _2447)));
    SV_Target.y = _2485 * (_2466 ? _2475 : (_2475 + (cbSceneParam._m0[72u].w * _2449)));
    SV_Target.z = _2485 * (_2466 ? _2476 : (_2476 + (cbSceneParam._m0[72u].w * _2451)));
    SV_Target.w = cbInstanceData._m0[_2327].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2327].w;
}


