#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _950;
float _3341;
float _3342;
float _3343;
float _3344;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    vec4 _244 = texture(sampler2D(C_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _250 = _244.x * cbMtdParam._m0[9u].x;
    float _251 = _244.y * cbMtdParam._m0[9u].y;
    float _252 = _244.z * cbMtdParam._m0[9u].z;
    vec4 _264 = texture(sampler2D(C_AMSN_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _271 = cbMtdParam._m0[10u].x + _264.x;
    vec4 _283 = texture(sampler2D(C_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _287 = _283.z;
    float _291 = (_283.x * 2.0) + (-1.0);
    float _293 = (_283.y * 2.0) + (-1.0);
    float _294 = dot(vec2(_291, _293), vec2(_291, _293));
    float _3353 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _300 = sqrt(1.0 - (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0))));
    float _303 = fma(_300, _222, fma(_293, _214 * TANGENT.x, (_200 * _192) * _291));
    float _306 = fma(_300, _223, fma(_293, _214 * TANGENT.y, (_200 * _193) * _291));
    float _309 = fma(_300, _224, fma(_293, _214 * TANGENT.z, (_200 * _194) * _291));
    float _313 = inversesqrt(dot(vec3(_303, _306, _309), vec3(_303, _306, _309)));
    float _314 = _313 * _303;
    float _315 = _313 * _306;
    float _316 = _313 * _309;
    float _3364 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _317 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _3375 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3386 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3397 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3408 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _321 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _337 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _378 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _388 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _378);
    float _389 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _378);
    float _390 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _378);
    float _394 = inversesqrt(dot(vec3(_388, _389, _390), vec3(_388, _389, _390)));
    float _395 = _388 * _394;
    float _396 = _389 * _394;
    float _397 = _390 * _394;
    vec4 _402 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _404 = _402.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _629 = sqrt(((_388 * _388) + (_389 * _389)) + (_390 * _390));
        float _635 = (cbMatDynParam._m0[5u].x * _629) + cbMatDynParam._m0[5u].y;
        float _3419 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _636 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _640 = (cbMatDynParam._m0[5u].z * _629) + cbMatDynParam._m0[5u].w;
        float _3430 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) - _636)) + _636) < ((_404 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _416 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _417 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _419 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _421 = _419.w;
    float _441 = fma(_316, cbSceneParam._m0[5u].z, fma(_315, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _314));
    float _444 = fma(_316, cbSceneParam._m0[6u].z, fma(_315, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _314));
    float _447 = fma(_316, cbSceneParam._m0[7u].z, fma(_315, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _314));
    vec4 _449 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _460 = (((_449.y - _317) + (_449.w * _317)) * cbMtdParam._m0[3u].x) + _317;
    uint _473 = uint(roundEven(NORMAL.w)) * 13u;
    uint _475 = _473 + 9u;
    uint _476 = _475 + uint(cbMatDynParam._m0[0u].w);
    float _482 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0)))) * cbInstanceData._m0[_476].x;
    float _483 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0)))) * cbInstanceData._m0[_476].y;
    float _484 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0)))) * cbInstanceData._m0[_476].z;
    float _3441 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _485 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _3452 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _486 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    float _3463 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _487 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    vec4 _488 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _493 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _504 = (((_493.x - _321) + (_493.w * _321)) * cbMtdParam._m0[3u].x) + _321;
    float _517 = (cbMtdParam._m0[3u].x * (((_485 * _421) - _485) + _488.x)) + _485;
    float _518 = (cbMtdParam._m0[3u].x * (((_486 * _421) - _486) + _488.y)) + _486;
    float _519 = (cbMtdParam._m0[3u].x * (((_487 * _421) - _487) + _488.z)) + _487;
    float _520 = 1.0 - _504;
    float _521 = _520 * _517;
    float _522 = _520 * _518;
    float _523 = _520 * _519;
    float _528 = (_517 + (-0.039999999105930328369140625)) * _504;
    float _529 = (_518 + (-0.039999999105930328369140625)) * _504;
    float _530 = (_519 + (-0.039999999105930328369140625)) * _504;
    float _531 = _528 + 0.039999999105930328369140625;
    float _533 = _529 + 0.039999999105930328369140625;
    float _534 = _530 + 0.039999999105930328369140625;
    vec4 _543 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _416, cbSceneParam._m0[86u].y * _417));
    float _546 = _543.x * TEXCOORD_4;
    float _547 = dot(vec3(_314, _315, _316), vec3(_395, _396, _397));
    float _550 = _547 * 2.0;
    float _554 = (_550 * _314) - _395;
    float _555 = (_550 * _315) - _396;
    float _556 = (_550 * _316) - _397;
    float _560 = abs(dot(vec3(_395, _396, _397), vec3(_314, _315, _316)));
    float _3474 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _562 = sqrt(_460);
    float _575 = exp2((_562 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_562 * 3.0));
    float _581 = (1.0 - _575) * ((_562 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _582 = _575 * _562;
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _949;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _674 = fma(_618, cbModelParam._m0[26u].z, fma(_614, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _610));
        float _678 = fma(_618, cbModelParam._m0[27u].z, fma(_614, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _610));
        float _682 = fma(_618, cbModelParam._m0[28u].z, fma(_614, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _610));
        float _707 = _610 + _314;
        float _708 = _614 + _315;
        float _709 = _618 + _316;
        float _719 = fma(_709, cbModelParam._m0[26u].z, fma(_708, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _707)) - _674;
        float _720 = fma(_709, cbModelParam._m0[27u].z, fma(_708, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _707)) - _678;
        float _721 = fma(_709, cbModelParam._m0[28u].z, fma(_708, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _707)) - _682;
        float _725 = inversesqrt(dot(vec3(_719, _720, _721), vec3(_719, _720, _721)));
        float _738 = ((_725 * _719) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_674 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _739 = ((_725 * _720) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_678 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _740 = ((_725 * _721) / cbModelParam._m0[34u].z) + ((((((_682 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        vec4 _757 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        vec4 _764 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_738, _739, _740), 0.0);
        float _777 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _778 = _777 * (_743.x + (-0.5));
        float _779 = _777 * (_743.y + (-0.5));
        float _780 = _777 * (_743.z + (-0.5));
        float _787 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _788 = _787 * (_750.x + (-0.5));
        float _789 = _787 * (_750.y + (-0.5));
        float _790 = _787 * (_750.z + (-0.5));
        float _797 = exp2((_757.w + (-0.5)) * 20.0) * 2.0;
        float _798 = _797 * (_757.x + (-0.5));
        float _799 = _797 * (_757.y + (-0.5));
        float _800 = _797 * (_757.z + (-0.5));
        float _807 = exp2((_764.w + (-0.5)) * 20.0) * 2.0;
        float _808 = _807 * (_764.x + (-0.5));
        float _809 = _807 * (_764.y + (-0.5));
        float _810 = _807 * (_764.z + (-0.5));
        float _811 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _812 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _813 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _814 = _778 * 0.5;
        float _815 = _788 * 0.5;
        float _816 = _798 * 0.5;
        float _817 = dot(vec3(_814, _815, _816), vec3(_814, _815, _816));
        float _822 = (_817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_817);
        float _831 = (dot(vec3(_314, _315, _316), vec3(_822 * _814, _822 * _815, _822 * _816)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _841 = sqrt(((_815 * _815) + (_814 * _814)) + (_816 * _816)) / (_811 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _843 = _842 * 2.0;
        float _847 = (1.0 - _842) / (_842 + 1.0);
        float _3522 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _857 = ((((1.0 - _848) * (_843 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_843 + 1.0))) + _848) * _811;
        float _858 = _779 * 0.5;
        float _859 = _789 * 0.5;
        float _860 = _799 * 0.5;
        float _861 = dot(vec3(_858, _859, _860), vec3(_858, _859, _860));
        float _866 = (_861 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_861);
        float _874 = (dot(vec3(_314, _315, _316), vec3(_866 * _858, _866 * _859, _866 * _860)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _883 = sqrt(((_859 * _859) + (_858 * _858)) + (_860 * _860)) / (_812 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _885 = _884 * 2.0;
        float _889 = (1.0 - _884) / (_884 + 1.0);
        float _3555 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _899 = ((((1.0 - _890) * (_885 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_885 + 1.0))) + _890) * _812;
        float _900 = _780 * 0.5;
        float _901 = _790 * 0.5;
        float _902 = _800 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _916 = (dot(vec3(_314, _315, _316), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3566 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _925 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_813 + 9.9999997473787516355514526367188e-06);
        float _3577 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _927 = _926 * 2.0;
        float _931 = (1.0 - _926) / (_926 + 1.0);
        float _3588 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _941 = ((((1.0 - _932) * (_927 + 2.0)) * exp2(log2(isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * (_927 + 1.0))) + _932) * _813;
        _949 = _780;
        _951 = _779;
        _952 = _778;
        _953 = _790;
        _954 = _789;
        _955 = _788;
        _956 = _800;
        _957 = _799;
        _958 = _798;
        _959 = _813;
        _960 = _812;
        _961 = _811;
        _962 = cbModelParam._m0[36u].z * (isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0)));
        _963 = cbModelParam._m0[36u].z * (isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0)));
        _964 = cbModelParam._m0[36u].z * (isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)));
    }
    else
    {
        _949 = _950;
        _951 = _950;
        _952 = _950;
        _953 = _950;
        _954 = _950;
        _955 = _950;
        _956 = _950;
        _957 = _950;
        _958 = _950;
        _959 = _950;
        _960 = _950;
        _961 = _950;
        _962 = 0.0;
        _963 = 0.0;
        _964 = 0.0;
    }
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _993 = fma(_618, cbModelParam._m0[30u].z, fma(_614, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _610));
        float _997 = fma(_618, cbModelParam._m0[31u].z, fma(_614, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _610));
        float _1001 = fma(_618, cbModelParam._m0[32u].z, fma(_614, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _610));
        float _1024 = _610 + _314;
        float _1025 = _614 + _315;
        float _1026 = _618 + _316;
        float _1036 = fma(_1026, cbModelParam._m0[30u].z, fma(_1025, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1024)) - _993;
        float _1037 = fma(_1026, cbModelParam._m0[31u].z, fma(_1025, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1024)) - _997;
        float _1038 = fma(_1026, cbModelParam._m0[32u].z, fma(_1025, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1024)) - _1001;
        float _1042 = inversesqrt(dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038)));
        float _1055 = ((_1042 * _1036) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_993 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1056 = ((_1042 * _1037) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_997 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1057 = ((_1042 * _1038) / cbModelParam._m0[35u].z) + ((((((_1001 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        float _1092 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1059.x + (-0.5));
        float _1094 = _1092 * (_1059.y + (-0.5));
        float _1095 = _1092 * (_1059.z + (-0.5));
        float _1102 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1066.x + (-0.5));
        float _1104 = _1102 * (_1066.y + (-0.5));
        float _1105 = _1102 * (_1066.z + (-0.5));
        float _1112 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1073.x + (-0.5));
        float _1114 = _1112 * (_1073.y + (-0.5));
        float _1115 = _1112 * (_1073.z + (-0.5));
        float _1122 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1080.x + (-0.5));
        float _1124 = _1122 * (_1080.y + (-0.5));
        float _1125 = _1122 * (_1080.z + (-0.5));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = _1093 * 0.5;
        float _1130 = _1103 * 0.5;
        float _1131 = _1113 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_314, _315, _316), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3651 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1156 + 1.0))) + _1161) * _1126;
        float _1171 = _1094 * 0.5;
        float _1172 = _1104 * 0.5;
        float _1173 = _1114 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_314, _315, _316), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3684 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1198 + 1.0))) + _1203) * _1127;
        float _1213 = _1095 * 0.5;
        float _1214 = _1105 * 0.5;
        float _1215 = _1115 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_314, _315, _316), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3695 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3706 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3717 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_1240 + 1.0))) + _1245) * _1128;
        _1262 = _1095;
        _1263 = _1094;
        _1264 = _1093;
        _1265 = _1105;
        _1266 = _1104;
        _1267 = _1103;
        _1268 = _1115;
        _1269 = _1114;
        _1270 = _1113;
        _1271 = _1128;
        _1272 = _1127;
        _1273 = _1126;
        _1274 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1275 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1276 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
    }
    else
    {
        _1262 = _950;
        _1263 = _950;
        _1264 = _950;
        _1265 = _950;
        _1266 = _950;
        _1267 = _950;
        _1268 = _950;
        _1269 = _950;
        _1270 = _950;
        _1271 = _950;
        _1272 = _950;
        _1273 = _950;
        _1274 = 0.0;
        _1275 = 0.0;
        _1276 = 0.0;
    }
    float _1286 = (cbModelParam._m0[1u].x * (_1274 - _962)) + _962;
    float _1287 = (cbModelParam._m0[1u].x * (_1275 - _963)) + _963;
    float _1288 = (cbModelParam._m0[1u].x * (_1276 - _964)) + _964;
    float _1309 = fma(_1288, cbSceneParam._m0[89u].z, fma(_1287, cbSceneParam._m0[89u].y, _1286 * cbSceneParam._m0[89u].x));
    float _1312 = fma(_1288, cbSceneParam._m0[90u].z, fma(_1287, cbSceneParam._m0[90u].y, _1286 * cbSceneParam._m0[90u].x));
    float _1315 = fma(_1288, cbSceneParam._m0[91u].z, fma(_1287, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1286));
    float _1330 = _554 * 0.5;
    float _1331 = _555 * 0.5;
    float _1332 = _556 * 0.5;
    float _1333 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_1264, _1267, _1270, _1273));
    float _1336 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_1263, _1266, _1269, _1272));
    float _1339 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_1262, _1265, _1268, _1271));
    float _1373;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1346 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_949, _953, _956, _959));
        float _1350 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_951, _954, _957, _960));
        float _1354 = dot(vec4(_1330, _1331, _1332, 1.0), vec4(_952, _955, _958, _961));
        float _1361 = dot(vec4(cbModelParam._m0[39u]), vec4(_1330, _1331, _1332, 1.0));
        _1373 = dot(vec3(isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)), isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1361) ? 0.0 : (isnan(0.0) ? _1361 : max(0.0, _1361))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1373 = 1.0;
    }
    float _1384;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1375 = dot(vec4(cbModelParam._m0[40u]), vec4(_1330, _1331, _1332, 1.0));
        _1384 = dot(vec3(isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)), isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)), isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1375) ? 0.0 : (isnan(0.0) ? _1375 : max(0.0, _1375))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1384 = 1.0;
    }
    float _1388 = (_1384 * cbModelParam._m0[1u].x) + (_1373 * (1.0 - cbModelParam._m0[1u].x));
    float _1398 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _460);
    float _1399 = isnan(_1398) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1398 : min(cbModelParam._m0[25u].z, _1398));
    float _1481;
    float _1483;
    float _1485;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1448 = fma(_618, cbModelParam._m0[13u].z, fma(_614, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _610)) + cbModelParam._m0[13u].w;
        float _1452 = fma(_618, cbModelParam._m0[14u].z, fma(_614, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _610)) + cbModelParam._m0[14u].w;
        float _1456 = fma(_618, cbModelParam._m0[15u].z, fma(_614, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _610)) + cbModelParam._m0[15u].w;
        float _1459 = fma(_556, cbModelParam._m0[13u].z, fma(_555, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _554));
        float _1462 = fma(_556, cbModelParam._m0[14u].z, fma(_555, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _554));
        float _1465 = fma(_556, cbModelParam._m0[15u].z, fma(_555, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _554));
        float _1493;
        if (_1459 > 0.0)
        {
            _1493 = abs((1.0 - _1448) / _1459);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1448 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1493 = frontier_phi_19_17_ladder;
        }
        float _1701;
        if (_1462 > 0.0)
        {
            _1701 = abs((1.0 - _1452) / _1462);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1452 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1701 = frontier_phi_28_24_ladder;
        }
        float _1955;
        if (_1465 > 0.0)
        {
            _1955 = abs((1.0 - _1456) / _1465);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1456 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1955 = frontier_phi_40_35_ladder;
        }
        float _1957 = isnan(_1701) ? _1493 : (isnan(_1493) ? _1701 : min(_1493, _1701));
        float _1958 = isnan(_1955) ? _1957 : (isnan(_1957) ? _1955 : min(_1957, _1955));
        float _1962 = (_1958 * _1459) + _1448;
        float _1963 = (_1958 * _1462) + _1452;
        float _1964 = (_1958 * _1465) + _1456;
        float _1965 = _1958 * 9.9999997473787516355514526367188e-05;
        float _1967 = (-1.0) - _1965;
        float _1969 = _1965 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1964 > _1969) || ((_1964 < _1967) || ((_1963 > _1969) || ((_1963 < _1967) || ((_1962 < _1967) || (_1962 > _1969))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2092 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1964, cbModelParam._m0[9u].z, fma(_1963, cbModelParam._m0[9u].y, _1962 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1964, cbModelParam._m0[10u].z, fma(_1963, cbModelParam._m0[10u].y, _1962 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1964, cbModelParam._m0[11u].z, fma(_1963, cbModelParam._m0[11u].y, _1962 * cbModelParam._m0[11u].x))), _1399);
            frontier_phi_18_40_ladder = _2092.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2092.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2092.x * cbModelParam._m0[1u].y;
        }
        _1481 = frontier_phi_18_40_ladder_2;
        _1483 = frontier_phi_18_40_ladder_1;
        _1485 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1469 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_554, _555, _556), _1399);
        _1481 = _1469.x * cbModelParam._m0[1u].y;
        _1483 = _1469.y * cbModelParam._m0[1u].y;
        _1485 = _1469.z * cbModelParam._m0[1u].y;
    }
    float _1489 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _460);
    float _1490 = isnan(_1489) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1489 : min(cbModelParam._m0[25u].w, _1489));
    float _1583;
    float _1585;
    float _1587;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1547 = fma(_618, cbModelParam._m0[21u].z, fma(_614, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _610)) + cbModelParam._m0[21u].w;
        float _1551 = fma(_618, cbModelParam._m0[22u].z, fma(_614, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _610)) + cbModelParam._m0[22u].w;
        float _1555 = fma(_618, cbModelParam._m0[23u].z, fma(_614, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _610)) + cbModelParam._m0[23u].w;
        float _1558 = fma(_556, cbModelParam._m0[21u].z, fma(_555, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _554));
        float _1561 = fma(_556, cbModelParam._m0[22u].z, fma(_555, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _554));
        float _1564 = fma(_556, cbModelParam._m0[23u].z, fma(_555, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _554));
        float _1706;
        if (_1558 > 0.0)
        {
            _1706 = abs((1.0 - _1547) / _1558);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1547 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1706 = frontier_phi_30_26_ladder;
        }
        float _1982;
        if (_1561 > 0.0)
        {
            _1982 = abs((1.0 - _1551) / _1561);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1551 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1982 = frontier_phi_42_37_ladder;
        }
        float _2195;
        if (_1564 > 0.0)
        {
            _2195 = abs((1.0 - _1555) / _1564);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1555 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2195 = frontier_phi_51_48_ladder;
        }
        float _2197 = isnan(_1982) ? _1706 : (isnan(_1706) ? _1982 : min(_1706, _1982));
        float _2198 = isnan(_2195) ? _2197 : (isnan(_2197) ? _2195 : min(_2197, _2195));
        float _2202 = (_2198 * _1558) + _1547;
        float _2203 = (_2198 * _1561) + _1551;
        float _2204 = (_2198 * _1564) + _1555;
        float _2205 = _2198 * 9.9999997473787516355514526367188e-05;
        float _2206 = (-1.0) - _2205;
        float _2208 = _2205 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2204 > _2208) || ((_2204 < _2206) || ((_2203 > _2208) || ((_2203 < _2206) || ((_2202 < _2206) || (_2202 > _2208))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2402 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2204, cbModelParam._m0[17u].z, fma(_2203, cbModelParam._m0[17u].y, _2202 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2204, cbModelParam._m0[18u].z, fma(_2203, cbModelParam._m0[18u].y, _2202 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2204, cbModelParam._m0[19u].z, fma(_2203, cbModelParam._m0[19u].y, _2202 * cbModelParam._m0[19u].x))), _1490);
            frontier_phi_27_51_ladder = _2402.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2402.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2402.x * cbModelParam._m0[1u].z;
        }
        _1583 = frontier_phi_27_51_ladder_2;
        _1585 = frontier_phi_27_51_ladder_1;
        _1587 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1567 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_554, _555, _556), _1490);
        _1583 = _1567.x * cbModelParam._m0[1u].z;
        _1585 = _1567.y * cbModelParam._m0[1u].z;
        _1587 = _1567.z * cbModelParam._m0[1u].z;
    }
    float _1600 = (((_581 * _531) + _582) * _546) * ((cbModelParam._m0[1u].w * (_1583 - _1481)) + _1481);
    float _1602 = (((_581 * _533) + _582) * _546) * ((cbModelParam._m0[1u].w * (_1585 - _1483)) + _1483);
    float _1604 = (((_581 * _534) + _582) * _546) * ((cbModelParam._m0[1u].w * (_1587 - _1485)) + _1485);
    float _1607 = fma(_1604, cbSceneParam._m0[89u].z, fma(_1602, cbSceneParam._m0[89u].y, _1600 * cbSceneParam._m0[89u].x));
    float _1610 = fma(_1604, cbSceneParam._m0[90u].z, fma(_1602, cbSceneParam._m0[90u].y, _1600 * cbSceneParam._m0[90u].x));
    float _1613 = fma(_1604, cbSceneParam._m0[91u].z, fma(_1602, cbSceneParam._m0[91u].y, _1600 * cbSceneParam._m0[91u].x));
    uvec4 _1623 = floatBitsToUint(cbInstanceData._m0[_473 + 5u]);
    uint _1625 = _1623.x * 14u;
    uint _1626 = _1625 + 13u;
    float _1633 = _546 + (-1.0);
    float _1638 = (cbLight._m0[_1626].x * _1633) + 1.0;
    float _1639 = (cbLight._m0[_1626].y * _1633) + 1.0;
    float _1640 = (cbLight._m0[_1626].z * _1633) + 1.0;
    float _1641 = (cbLight._m0[_1626].w * _1633) + 1.0;
    uint _1642 = _1625 + 5u;
    float _1648 = isnan(1.0) ? _1639 : (isnan(_1639) ? 1.0 : min(_1639, 1.0));
    uint _1652 = _1625 + 4u;
    float _1659 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
    uint _1663 = _1625 | 1u;
    float _1674 = dot(vec3(cbLight._m0[_1625].xyz), vec3(_314, _315, _316));
    float _1677 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_314, _315, _316));
    float _3853 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _3864 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _1682 = (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * 0.3183098733425140380859375;
    float _1684 = (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * 0.3183098733425140380859375;
    float _1691 = ((cbLight._m0[_1642].x * _1648) * _1684) + ((cbLight._m0[_1652].x * _1659) * _1682);
    float _1692 = ((_1648 * cbLight._m0[_1642].y) * _1684) + ((_1659 * cbLight._m0[_1652].y) * _1682);
    float _1693 = ((_1648 * cbLight._m0[_1642].z) * _1684) + ((_1659 * cbLight._m0[_1652].z) * _1682);
    uvec4 _1698 = floatBitsToUint(cbLight._m0[_1625 + 12u]);
    bool _1700 = _1698.x == 0u;
    float _1711;
    float _1713;
    float _1715;
    if (_1700)
    {
        _1711 = _1691;
        _1713 = _1692;
        _1715 = _1693;
    }
    else
    {
        uint _1719 = _1625 + 6u;
        float _1735 = (dot(vec3(cbLight._m0[_1625 + 2u].xyz), vec3(_314, _315, _316)) * 0.5) + 0.5;
        float _1736 = _1735 * _1735;
        float _3875 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1738 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
        _1711 = (((cbLight._m0[_1719].x * 0.3183098733425140380859375) * _1737) * _1738) + _1691;
        _1713 = (((cbLight._m0[_1719].y * 0.3183098733425140380859375) * _1737) * _1738) + _1692;
        _1715 = (((cbLight._m0[_1719].z * 0.3183098733425140380859375) * _1737) * _1738) + _1693;
    }
    bool _1718 = _1698.y == 0u;
    float _1756;
    float _1758;
    float _1760;
    if (_1718)
    {
        _1756 = _1711;
        _1758 = _1713;
        _1760 = _1715;
    }
    else
    {
        uint _1926 = _1625 + 7u;
        float _1942 = (dot(vec3(cbLight._m0[_1625 + 3u].xyz), vec3(_314, _315, _316)) * 0.5) + 0.5;
        float _1943 = _1942 * _1942;
        float _3891 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1944 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1945 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
        _1756 = (((cbLight._m0[_1926].x * 0.3183098733425140380859375) * _1944) * _1945) + _1711;
        _1758 = (((cbLight._m0[_1926].y * 0.3183098733425140380859375) * _1944) * _1945) + _1713;
        _1760 = (((cbLight._m0[_1926].z * 0.3183098733425140380859375) * _1944) * _1945) + _1715;
    }
    uint _1763 = _1625 + 8u;
    float _1776 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1625].w)) * _460) * 0.949999988079071044921875);
    float _1777 = _1776 * _1776;
    float _1778 = cbLight._m0[_1625].x + _395;
    float _1779 = cbLight._m0[_1625].y + _396;
    float _1780 = cbLight._m0[_1625].z + _397;
    float _1784 = inversesqrt(dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780)));
    float _1785 = _1784 * _1778;
    float _1786 = _1784 * _1779;
    float _1787 = _1784 * _1780;
    float _1788 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1625].xyz));
    float _3907 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1791 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _1792 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _1793 = dot(vec3(_314, _315, _316), vec3(_1785, _1786, _1787));
    float _3929 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1796 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _1797 = dot(vec3(cbLight._m0[_1625].xyz), vec3(_1785, _1786, _1787));
    float _3940 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1801 = _1777 * _1777;
    float _1805 = ((_1796 * _1796) * (_1801 + (-1.0))) + 1.0;
    float _1813 = exp2(log2(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * 5.0);
    float _1814 = 0.959999978542327880859375 - _528;
    float _1816 = 0.959999978542327880859375 - _529;
    float _1817 = 0.959999978542327880859375 - _530;
    float _1824 = 1.0 - _1777;
    float _1835 = (0.5 / (((_1792 * ((_1791 * _1824) + _1777)) + 9.9999999392252902907785028219223e-09) + (((_1792 * _1824) + _1777) * _1791))) * _1791;
    float _3951 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1837 = (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1801 / ((_1805 * _1805) * 3.141590118408203125));
    uint _1848 = _1625 + 9u;
    float _1859 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1663].w)) * _460) * 0.949999988079071044921875);
    float _1860 = _1859 * _1859;
    float _1861 = cbLight._m0[_1663].x + _395;
    float _1862 = cbLight._m0[_1663].y + _396;
    float _1863 = cbLight._m0[_1663].z + _397;
    float _1867 = inversesqrt(dot(vec3(_1861, _1862, _1863), vec3(_1861, _1862, _1863)));
    float _1868 = _1867 * _1861;
    float _1869 = _1867 * _1862;
    float _1870 = _1867 * _1863;
    float _1871 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1663].xyz));
    float _3962 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1874 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _1875 = dot(vec3(_314, _315, _316), vec3(_1868, _1869, _1870));
    float _3973 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1879 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_1868, _1869, _1870));
    float _3984 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1883 = _1860 * _1860;
    float _1887 = ((_1878 * _1878) * (_1883 + (-1.0))) + 1.0;
    float _1894 = exp2(log2(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * 5.0);
    float _1901 = 1.0 - _1860;
    float _1911 = (0.5 / (((_1792 * ((_1874 * _1901) + _1860)) + 9.9999999392252902907785028219223e-09) + (((_1792 * _1901) + _1860) * _1874))) * _1874;
    float _3995 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1913 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1883 / ((_1887 * _1887) * 3.141590118408203125));
    float _1923 = (((((_1894 * _1814) + _531) * cbLight._m0[_1848].x) * _1913) * _1648) + (((((_1813 * _1814) + _531) * cbLight._m0[_1763].x) * _1837) * _1659);
    float _1924 = (((((_1894 * _1816) + _533) * cbLight._m0[_1848].y) * _1913) * _1648) + (((((_1813 * _1816) + _533) * cbLight._m0[_1763].y) * _1837) * _1659);
    float _1925 = (((((_1894 * _1817) + _534) * cbLight._m0[_1848].z) * _1913) * _1648) + (((((_1813 * _1817) + _534) * cbLight._m0[_1763].z) * _1837) * _1659);
    float _1987;
    float _1989;
    float _1991;
    if (_1700)
    {
        _1987 = _1923;
        _1989 = _1924;
        _1991 = _1925;
    }
    else
    {
        uint _1993 = _1625 + 2u;
        uint _1997 = _1625 + 10u;
        float _2011 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _460) * 0.949999988079071044921875);
        float _2012 = _2011 * _2011;
        float _2013 = cbLight._m0[_1993].x + _395;
        float _2014 = cbLight._m0[_1993].y + _396;
        float _2015 = cbLight._m0[_1993].z + _397;
        float _2019 = inversesqrt(dot(vec3(_2013, _2014, _2015), vec3(_2013, _2014, _2015)));
        float _2020 = _2019 * _2013;
        float _2021 = _2019 * _2014;
        float _2022 = _2019 * _2015;
        float _2023 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1993].xyz));
        float _4006 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2026 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _2027 = dot(vec3(_314, _315, _316), vec3(_2020, _2021, _2022));
        float _4017 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2030 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _2031 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2020, _2021, _2022));
        float _4028 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2035 = _2012 * _2012;
        float _2039 = ((_2030 * _2030) * (_2035 + (-1.0))) + 1.0;
        float _2046 = exp2(log2(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * 5.0);
        float _2053 = 1.0 - _2012;
        float _2063 = (0.5 / (((_1792 * ((_2026 * _2053) + _2012)) + 9.9999999392252902907785028219223e-09) + (((_1792 * _2053) + _2012) * _2026))) * _2026;
        float _4039 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2065 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_2035 / ((_2039 * _2039) * 3.141590118408203125));
        float _2066 = isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0));
        _1987 = (((((_2046 * _1814) + _531) * cbLight._m0[_1997].x) * _2065) * _2066) + _1923;
        _1989 = (((((_2046 * _1816) + _533) * cbLight._m0[_1997].y) * _2065) * _2066) + _1924;
        _1991 = (((((_2046 * _1817) + _534) * cbLight._m0[_1997].z) * _2065) * _2066) + _1925;
    }
    float _2101;
    float _2103;
    float _2105;
    if (_1718)
    {
        _2101 = _1987;
        _2103 = _1989;
        _2105 = _1991;
    }
    else
    {
        uint _2112 = _1625 + 3u;
        uint _2116 = _1625 + 11u;
        float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _460) * 0.949999988079071044921875);
        float _2131 = _2130 * _2130;
        float _2132 = cbLight._m0[_2112].x + _395;
        float _2133 = cbLight._m0[_2112].y + _396;
        float _2134 = cbLight._m0[_2112].z + _397;
        float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
        float _2139 = _2138 * _2132;
        float _2140 = _2138 * _2133;
        float _2141 = _2138 * _2134;
        float _2142 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_2112].xyz));
        float _4055 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2145 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _2146 = dot(vec3(_314, _315, _316), vec3(_2139, _2140, _2141));
        float _4066 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2149 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _2150 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2139, _2140, _2141));
        float _4077 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2154 = _2131 * _2131;
        float _2158 = ((_2149 * _2149) * (_2154 + (-1.0))) + 1.0;
        float _2165 = exp2(log2(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * 5.0);
        float _2172 = 1.0 - _2131;
        float _2182 = (0.5 / (((_1792 * ((_2145 * _2172) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_1792 * _2172) + _2131) * _2145))) * _2145;
        float _4088 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2184 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_2154 / ((_2158 * _2158) * 3.141590118408203125));
        float _2185 = isnan(1.0) ? _1641 : (isnan(_1641) ? 1.0 : min(_1641, 1.0));
        _2101 = (((((_2165 * _1814) + _531) * cbLight._m0[_2116].x) * _2184) * _2185) + _1987;
        _2103 = (((((_2165 * _1816) + _533) * cbLight._m0[_2116].y) * _2184) * _2185) + _1989;
        _2105 = (((((_2165 * _1817) + _534) * cbLight._m0[_2116].z) * _2184) * _2185) + _1991;
    }
    float _2319;
    float _2321;
    float _2323;
    float _2325;
    float _2327;
    float _2329;
    if (_1623.y == 0u)
    {
        float _2260 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2261 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2260;
        float _2262 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2260;
        float _2263 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2260;
        uvec4 _2275 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2276 = _2275.x;
        uint _2287 = uint((float(_2275.y) * floor(float(uint(cbSceneParam._m0[85u].y * _417) / _2276))) + floor(float(uint(cbSceneParam._m0[85u].x * _416) / _2276)));
        float _2297 = (log2(_2263 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2298 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        uint _2301 = uint(isnan(14.0) ? _2298 : (isnan(_2298) ? 14.0 : min(_2298, 14.0)));
        uvec4 _2306 = texelFetch(g_lightClusterGridBuffer, int(((_2301 << 2u) + (_2287 << 6u)) >> 2u));
        uint _2307 = _2306.x;
        uint _2308 = _2275.z;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        if (((((1u << ((_2308 >> 4u) & 15u)) + 4294967295u) & _2307) == 0u) || ((_2308 & 240u) == 0u))
        {
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
        }
        else
        {
            float _2408;
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2418;
            float _2559 = 0.0;
            float _2560 = 0.0;
            float _2561 = 0.0;
            float _2562 = 0.0;
            float _2563 = 0.0;
            float _2564 = 0.0;
            uint _2565 = 0u;
            uint _2574;
            bool _2575;
            for (;;)
            {
                _2574 = texelFetch(g_lightClassification, int((((_2301 << 5u) + (_2287 << 9u)) + (_2565 << 2u)) >> 2u)).x;
                _2575 = _2574 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2575)
                {
                    frontier_phi_68_pred = _2561;
                    frontier_phi_68_pred_1 = _2564;
                    frontier_phi_68_pred_2 = _2563;
                    frontier_phi_68_pred_3 = _2562;
                    frontier_phi_68_pred_4 = _2560;
                    frontier_phi_68_pred_5 = _2559;
                }
                else
                {
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    float _2709;
                    uint _2710;
                    _2704 = _2559;
                    _2705 = _2560;
                    _2706 = _2561;
                    _2707 = _2562;
                    _2708 = _2563;
                    _2709 = _2564;
                    _2710 = _2574;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    float _2635;
                    float _2636;
                    for (;;)
                    {
                        uint _2714 = uint(findLSB(_2710)) + (_2565 << 5u);
                        uint _2711 = (_2710 + 4294967295u) & _2710;
                        uint _2716 = _2714 * 48u;
                        vec4 _2730 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2716)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 3u)).x));
                        uint _2736 = (_2714 * 48u) + 4u;
                        vec4 _2749 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2736)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 3u)).x));
                        uint _2755 = (_2714 * 48u) + 8u;
                        vec3 _2766 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2755)).x, texelFetch(g_PointLightRenderingBuffer, int(_2755 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2755 + 2u)).x));
                        float _2770 = _2730.x - _2261;
                        float _2771 = _2730.y - _2262;
                        float _2772 = _2730.z - _2263;
                        float _2773 = dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772));
                        float _2776 = inversesqrt(_2773);
                        float _2777 = _2776 * _2770;
                        float _2778 = _2776 * _2771;
                        float _2779 = _2776 * _2772;
                        float _2780 = dot(vec3(_441, _444, _447), vec3(_2777, _2778, _2779));
                        float _2785 = 1.0 - (_2773 * _2730.w);
                        float _4114 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                        float _2786 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                        float _2787 = sqrt(_2773) * _2749.w;
                        float _2790 = 1.39999997615814208984375 / (_2787 + 1.39999997615814208984375);
                        float _2791 = _2790 * _2790;
                        float _2794 = ((1.0 - _2791) * _2780) + _2791;
                        float _2797 = _2787 * _2787;
                        float _2801 = ((isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0))) * _2786) / ((_2797 * 0.699999988079071044921875) + 1.0);
                        float _2805 = (-0.0) - _2261;
                        float _2806 = (-0.0) - _2262;
                        float _2807 = (-0.0) - _2263;
                        float _2811 = inversesqrt(dot(vec3(_2805, _2806, _2807), vec3(_2805, _2806, _2807)));
                        float _2812 = _2811 * _2805;
                        float _2813 = _2811 * _2806;
                        float _2814 = _2811 * _2807;
                        float _2822 = exp2(log2(1.0 / ((_2797 * 3.5) + 5.0)) * 0.25);
                        float _2823 = 1.0 - _562;
                        float _2830 = sqrt(1.0 - ((1.0 - (_2823 * _2823)) * (1.0 - (_2822 * _2822))));
                        float _2831 = _2830 * _2830;
                        float _2832 = _2831 * _2831;
                        float _2833 = _2812 + _2777;
                        float _2834 = _2813 + _2778;
                        float _2835 = _2814 + _2779;
                        float _2839 = inversesqrt(dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835)));
                        float _2843 = dot(vec3(_441, _444, _447), vec3(_2812, _2813, _2814));
                        float _4130 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
                        float _2846 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                        float _2847 = dot(vec3(_441, _444, _447), vec3(_2839 * _2833, _2839 * _2834, _2839 * _2835));
                        float _4141 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
                        float _2850 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                        float _2854 = ((_2850 * _2850) * (_2832 + (-1.0))) + 1.0;
                        float _2855 = _2790 * _2831;
                        float _2856 = _2855 * _2855;
                        float _2859 = ((1.0 - _2856) * _2780) + _2856;
                        float _4152 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2860 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                        float _2861 = 1.0 - _2831;
                        float _2871 = (0.5 / (((_2860 * ((_2846 * _2861) + _2831)) + 9.9999999392252902907785028219223e-09) + (((_2860 * _2861) + _2831) * _2846))) * _2860;
                        float _4163 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2882 = (((_2832 * 3.1415927410125732421875) * (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) / ((_2854 * _2854) * ((_2797 * 2.1991131305694580078125) + 3.141590118408203125))) * _2786;
                        _2634 = (_2801 * _2749.x) + _2707;
                        _2635 = (_2801 * _2749.y) + _2708;
                        _2636 = (_2801 * _2749.z) + _2709;
                        _2631 = (_2882 * _2766.x) + _2704;
                        _2632 = (_2882 * _2766.y) + _2705;
                        _2633 = (_2882 * _2766.z) + _2706;
                        if (_2711 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2704 = _2631;
                            _2705 = _2632;
                            _2706 = _2633;
                            _2707 = _2634;
                            _2708 = _2635;
                            _2709 = _2636;
                            _2710 = _2711;
                        }
                    }
                    frontier_phi_68_pred = _2633;
                    frontier_phi_68_pred_1 = _2636;
                    frontier_phi_68_pred_2 = _2635;
                    frontier_phi_68_pred_3 = _2634;
                    frontier_phi_68_pred_4 = _2632;
                    frontier_phi_68_pred_5 = _2631;
                }
                _2412 = frontier_phi_68_pred;
                _2418 = frontier_phi_68_pred_1;
                _2416 = frontier_phi_68_pred_2;
                _2414 = frontier_phi_68_pred_3;
                _2410 = frontier_phi_68_pred_4;
                _2408 = frontier_phi_68_pred_5;
                uint _2566 = _2565 + 1u;
                if (_2566 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2559 = _2408;
                    _2560 = _2410;
                    _2561 = _2412;
                    _2562 = _2414;
                    _2563 = _2416;
                    _2564 = _2418;
                    _2565 = _2566;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
        }
        uvec4 _2421 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2422 = _2421.z;
        uint _2424 = (_2422 >> 8u) & 15u;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        if (((4294967295u << _2424) & _2307) == 0u)
        {
            _2527 = _2407;
            _2529 = _2409;
            _2531 = _2411;
            _2533 = _2413;
            _2535 = _2415;
            _2537 = _2417;
        }
        else
        {
            float _2552 = inversesqrt(dot(vec3(_2261, _2262, _2263), vec3(_2261, _2262, _2263)));
            float _2553 = _2552 * _2261;
            float _2554 = _2552 * _2262;
            float _2555 = _2552 * _2263;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2424 < ((_2422 >> 12u) & 15u))
            {
                float _2528;
                float _2530;
                float _2532;
                float _2534;
                float _2536;
                float _2538;
                float _2687 = _2407;
                float _2688 = _2409;
                float _2689 = _2411;
                float _2690 = _2413;
                float _2691 = _2415;
                float _2692 = _2417;
                uint _2693 = _2424;
                uint _2702;
                bool _2703;
                for (;;)
                {
                    _2702 = texelFetch(g_lightClassification, int((((_2301 << 5u) + (_2287 << 9u)) + (_2693 << 2u)) >> 2u)).x;
                    _2703 = _2702 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2703)
                    {
                        frontier_phi_79_pred = _2692;
                        frontier_phi_79_pred_1 = _2691;
                        frontier_phi_79_pred_2 = _2690;
                        frontier_phi_79_pred_3 = _2689;
                        frontier_phi_79_pred_4 = _2688;
                        frontier_phi_79_pred_5 = _2687;
                    }
                    else
                    {
                        float _2896;
                        float _2897;
                        float _2898;
                        float _2899;
                        float _2900;
                        float _2901;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _2909 = _2687;
                        float _2910 = _2688;
                        float _2911 = _2689;
                        float _2912 = _2690;
                        float _2913 = _2691;
                        float _2914 = _2692;
                        uint _2915 = _2702;
                        uint _2916;
                        vec4 _2941;
                        float _2942;
                        vec4 _2957;
                        vec3 _2969;
                        vec4 _2985;
                        vec4 _3001;
                        float _3048;
                        bool _3049;
                        for (;;)
                        {
                            uint _2926 = ((_2693 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2915));
                            _2916 = (_2915 + 4294967295u) & _2915;
                            uint _2928 = _2926 * 40u;
                            _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            _2942 = _2941.w;
                            uint _2944 = (_2926 * 40u) + 4u;
                            _2957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 3u)).x));
                            uint _2959 = (_2926 * 40u) + 8u;
                            _2969 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x));
                            uint _2972 = (_2926 * 40u) + 16u;
                            _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            uint _2988 = (_2926 * 40u) + 20u;
                            _3001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 3u)).x));
                            uint _3004 = (_2926 * 40u) + 24u;
                            vec4 _3017 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 3u)).x));
                            uint _3023 = (_2926 * 40u) + 28u;
                            vec4 _3036 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 3u)).x));
                            _3048 = fma(_2263, _3036.z, fma(_2262, _3036.y, _3036.x * _2261)) + _3036.w;
                            _3049 = !((fma(_2263, _3017.z, fma(_2262, _3017.y, _3017.x * _2261)) + _3017.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3049)
                            {
                                float _3076 = _2941.x - _2261;
                                float _3077 = _2941.y - _2262;
                                float _3078 = _2941.z - _2263;
                                float _3079 = dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078));
                                float _3082 = inversesqrt(_3079);
                                float _3083 = _3082 * _3076;
                                float _3084 = _3082 * _3077;
                                float _3085 = _3082 * _3078;
                                float _3089 = 1.0 - (_3079 / (_2942 * _2942));
                                float _4174 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3090 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                                float _3094 = sqrt(_3079) * _2957.w;
                                float _3096 = 1.39999997615814208984375 / (_3094 + 1.39999997615814208984375);
                                float _3097 = _3096 * _3096;
                                float _3100 = ((1.0 - _3097) * dot(vec3(_3083, _3084, _3085), vec3(_441, _444, _447))) + _3097;
                                float _3103 = _3094 * _3094;
                                float _3107 = (fma(_2263, _2985.z, fma(_2262, _2985.y, _2985.x * _2261)) + _2985.w) / _3048;
                                float _3108 = (fma(_2263, _3001.z, fma(_2262, _3001.y, _3001.x * _2261)) + _3001.w) / _3048;
                                float _3112 = 1.0 - dot(vec2(_3107, _3108), vec2(_3107, _3108));
                                float _4190 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                                float _3113 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                                float _3114 = _3113 * (((isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0))) * _3090) / ((_3103 * 0.699999988079071044921875) + 1.0));
                                float _3126 = exp2(log2(1.0 / ((_3103 * 3.5) + 5.0)) * 0.25);
                                float _3127 = 1.0 - _562;
                                float _3134 = sqrt(1.0 - ((1.0 - (_3127 * _3127)) * (1.0 - (_3126 * _3126))));
                                float _3135 = _3134 * _3134;
                                float _3136 = _3135 * _3135;
                                float _3137 = _3083 - _2553;
                                float _3138 = _3084 - _2554;
                                float _3139 = _3085 - _2555;
                                float _3143 = inversesqrt(dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139)));
                                float _3147 = dot(vec3(_441, _444, _447), vec3((-0.0) - _2553, (-0.0) - _2554, (-0.0) - _2555));
                                float _4201 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                                float _3150 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                                float _3151 = dot(vec3(_441, _444, _447), vec3(_3143 * _3137, _3143 * _3138, _3143 * _3139));
                                float _4212 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                                float _3154 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                                float _3158 = ((_3154 * _3154) * (_3136 + (-1.0))) + 1.0;
                                float _3159 = _3096 * _3135;
                                float _3160 = _3159 * _3159;
                                float _3166 = ((1.0 - _3160) * dot(vec3(_441, _444, _447), vec3(_3083, _3084, _3085))) + _3160;
                                float _4223 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3167 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                                float _3168 = 1.0 - _3135;
                                float _3178 = (0.5 / (((_3167 * ((_3150 * _3168) + _3135)) + 9.9999999392252902907785028219223e-09) + (((_3167 * _3168) + _3135) * _3150))) * _3167;
                                float _4234 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3188 = (_3113 * _3090) * (((_3136 * 3.1415927410125732421875) * (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) / ((_3158 * _3158) * ((_3103 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3114 * _2957.z;
                                frontier_phi_85_pred_1 = _3114 * _2957.y;
                                frontier_phi_85_pred_2 = _3114 * _2957.x;
                                frontier_phi_85_pred_3 = _3188 * _2969.z;
                                frontier_phi_85_pred_4 = _3188 * _2969.y;
                                frontier_phi_85_pred_5 = _3188 * _2969.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3197 = frontier_phi_85_pred;
                            _3196 = frontier_phi_85_pred_1;
                            _3195 = frontier_phi_85_pred_2;
                            _3194 = frontier_phi_85_pred_3;
                            _3193 = frontier_phi_85_pred_4;
                            _3192 = frontier_phi_85_pred_5;
                            _2899 = _3195 + _2912;
                            _2900 = _3196 + _2913;
                            _2901 = _3197 + _2914;
                            _2896 = _3192 + _2909;
                            _2897 = _3193 + _2910;
                            _2898 = _3194 + _2911;
                            if (_2916 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2909 = _2896;
                                _2910 = _2897;
                                _2911 = _2898;
                                _2912 = _2899;
                                _2913 = _2900;
                                _2914 = _2901;
                                _2915 = _2916;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2901;
                        frontier_phi_79_pred_1 = _2900;
                        frontier_phi_79_pred_2 = _2899;
                        frontier_phi_79_pred_3 = _2898;
                        frontier_phi_79_pred_4 = _2897;
                        frontier_phi_79_pred_5 = _2896;
                    }
                    _2538 = frontier_phi_79_pred;
                    _2536 = frontier_phi_79_pred_1;
                    _2534 = frontier_phi_79_pred_2;
                    _2532 = frontier_phi_79_pred_3;
                    _2530 = frontier_phi_79_pred_4;
                    _2528 = frontier_phi_79_pred_5;
                    uint _2694 = _2693 + 1u;
                    if (_2694 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2687 = _2528;
                        _2688 = _2530;
                        _2689 = _2532;
                        _2690 = _2534;
                        _2691 = _2536;
                        _2692 = _2538;
                        _2693 = _2694;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2534;
                frontier_phi_60_61_ladder_1 = _2538;
                frontier_phi_60_61_ladder_2 = _2536;
                frontier_phi_60_61_ladder_3 = _2532;
                frontier_phi_60_61_ladder_4 = _2530;
                frontier_phi_60_61_ladder_5 = _2528;
            }
            else
            {
                frontier_phi_60_61_ladder = _2413;
                frontier_phi_60_61_ladder_1 = _2417;
                frontier_phi_60_61_ladder_2 = _2415;
                frontier_phi_60_61_ladder_3 = _2411;
                frontier_phi_60_61_ladder_4 = _2409;
                frontier_phi_60_61_ladder_5 = _2407;
            }
            _2527 = frontier_phi_60_61_ladder_5;
            _2529 = frontier_phi_60_61_ladder_4;
            _2531 = frontier_phi_60_61_ladder_3;
            _2533 = frontier_phi_60_61_ladder;
            _2535 = frontier_phi_60_61_ladder_2;
            _2537 = frontier_phi_60_61_ladder_1;
        }
        float _2542 = isnan(1.0) ? _546 : (isnan(_546) ? 1.0 : min(_546, 1.0));
        _2319 = (_2542 * _2533) + _1756;
        _2321 = (_2542 * _2535) + _1758;
        _2323 = (_2542 * _2537) + _1760;
        _2325 = ((_2527 * _531) * _2542) + _2101;
        _2327 = ((_2529 * _533) * _2542) + _2103;
        _2329 = ((_2531 * _534) * _2542) + _2105;
    }
    else
    {
        _2319 = _1756;
        _2321 = _1758;
        _2323 = _1760;
        _2325 = _2101;
        _2327 = _2103;
        _2329 = _2105;
    }
    float _4250 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _4261 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _4272 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _2346 = ((isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2319 + ((isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0))) * _546))) + ((_2325 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _1388)) * cbPerFrame._m0[3u].x);
    float _2347 = ((isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2321 + ((isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))) * _546))) + ((_2327 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _1388)) * cbPerFrame._m0[3u].x);
    float _2348 = ((isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2323 + ((isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0))) * _546))) + ((_2329 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _1388)) * cbPerFrame._m0[3u].x);
    uint _2349 = _473 + 6u;
    float _2357 = _416 / cbSceneParam._m0[86u].x;
    float _2358 = _417 / cbSceneParam._m0[86u].y;
    vec4 _2372 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, (log2((isnan(cbSceneParam._m0[77u].w) ? _337 : (isnan(_337) ? cbSceneParam._m0[77u].w : min(_337, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2374 = _2372.x;
    float _2375 = _2372.y;
    float _2376 = _2372.z;
    float _2377 = _2372.w;
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    if (_337 > cbSceneParam._m0[78u].w)
    {
        float _2432 = isnan(_337) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _337 : min(cbSceneParam._m0[80u].w, _337));
        float _2433 = _2432 / _337;
        float _2444 = _2433 * _388;
        float _2445 = _389 * _2433;
        float _2446 = (-0.0) - _2445;
        float _2447 = _2433 * _390;
        float _2449 = (cbSceneParam._m0[77u].w * _2446) / _2432;
        float _2450 = _2449 + cbSceneParam._m0[79u].w;
        float _2451 = cbSceneParam._m0[79u].w - _2445;
        float _2457 = sqrt(((_2444 * _2444) + (_2445 * _2445)) + (_2447 * _2447));
        float _2460 = (1.0 - (cbSceneParam._m0[77u].w / _2432)) * _2457;
        float _2465 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2467 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2644;
        if (abs((_2446 - _2449) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2644 = ((((_2450 > 0.0) ? exp2(_2465 * _2450) : (2.0 - exp2(_2467 * _2450))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2460;
        }
        else
        {
            float _2588 = 1.0 / cbSceneParam._m0[80u].x;
            float _2589 = isnan(_2451) ? _2450 : (isnan(_2450) ? _2451 : max(_2450, _2451));
            float _2590 = isnan(_2451) ? _2450 : (isnan(_2450) ? _2451 : min(_2450, _2451));
            float _2599 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : min(_2589, 0.0));
            float _2600 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : min(_2590, 0.0));
            _2644 = ((abs(_2457 / _2446) * cbSceneParam._m0[80u].y) * ((((_2599 - _2600) * 2.0) - ((exp2(_2465 * (isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0)))) - exp2(_2465 * (isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0))))) * _2588)) - ((exp2(_2467 * _2599) - exp2(_2467 * _2600)) * _2588))) + (_2460 * cbSceneParam._m0[80u].z);
        }
        vec4 _2646 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, 1.0), 0.0);
        float _2655 = exp2((_2644 * (-1.44269502162933349609375)) * (1.0 - _2646.w));
        float _2656 = log2(_2655);
        float _2672 = log2(_2377);
        _2469 = (exp2(_2672 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2656 * cbSceneParam._m0[78u].x)) * _2646.x) / cbSceneParam._m0[78u].x)) + _2374;
        _2471 = (exp2(_2672 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2656 * cbSceneParam._m0[78u].y)) * _2646.y) / cbSceneParam._m0[78u].y)) + _2375;
        _2473 = (exp2(_2672 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2656 * cbSceneParam._m0[78u].z)) * _2646.z) / cbSceneParam._m0[78u].z)) + _2376;
        _2475 = _2655 * _2377;
    }
    else
    {
        _2469 = _2374;
        _2471 = _2375;
        _2473 = _2376;
        _2475 = _2377;
    }
    bool _2682;
    vec4 _2485;
    vec4 _2507;
    float _2509;
    float _2513;
    float _2514;
    float _2515;
    float _2516;
    bool _2526;
    for (;;)
    {
        _2485 = cbMatDynParam._m0[0u];
        float _2487 = roundEven(_2485.y);
        bool _2488 = _2487 == 3.0;
        float _2489 = log2(_2475);
        float _2496 = exp2(_2489 * cbSceneParam._m0[78u].x) * _2346;
        float _2497 = exp2(_2489 * cbSceneParam._m0[78u].y) * _2347;
        float _2498 = exp2(_2489 * cbSceneParam._m0[78u].z) * _2348;
        float _2505 = _404 + (-0.5);
        _2507 = cbMtdParam._m0[1u];
        _2509 = _2507.y * _2505;
        float _2512 = (_2487 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2513 = _2512 * (_2488 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2469)));
        _2514 = _2512 * (_2488 ? _2497 : (_2497 + (cbSceneParam._m0[72u].w * _2471)));
        _2515 = _2512 * (_2488 ? _2498 : (_2498 + (cbSceneParam._m0[72u].w * _2473)));
        _2516 = _2505 * 0.999000012874603271484375;
        _2526 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2526)
        {
            if ((cbInstanceData._m0[_473 + 7u].x + _2516) < 0.5)
            {
                _2682 = true;
                break;
            }
        }
        uint _2623 = _475 + uint(_2485.w);
        if ((cbInstanceData._m0[_2623].w < 1.0) && ((cbInstanceData._m0[_2623].w + _2516) < 0.5))
        {
            _2682 = true;
            break;
        }
        if ((_2509 + 1.0) < _2507.x)
        {
            _2682 = true;
            break;
        }
        _2682 = false;
        break;
    }
    float _2887;
    if (_2682)
    {
        discard_state = true;
        _2887 = 0.0;
    }
    else
    {
        _2887 = cbInstanceData._m0[_2349].w;
    }
    SV_Target.x = _2513;
    SV_Target.y = _2514;
    SV_Target.z = _2515;
    SV_Target.w = _2887;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2349].w;
    discard_exit();
}


