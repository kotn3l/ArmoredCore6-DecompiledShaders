#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _909;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222;
    float _223;
    float _224;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
    }
    else
    {
        _222 = _208;
        _223 = _209;
        _224 = _210;
    }
    vec4 _244 = texture(sampler2D(C_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _250 = _244.x * cbMtdParam._m0[9u].x;
    float _251 = _244.y * cbMtdParam._m0[9u].y;
    float _252 = _244.z * cbMtdParam._m0[9u].z;
    vec4 _264 = texture(sampler2D(C_AMSN_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _271 = cbMtdParam._m0[10u].x + _264.x;
    vec4 _283 = texture(sampler2D(C_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _287 = _283.z;
    float _291 = (_283.x * 2.0) + (-1.0);
    float _293 = (_283.y * 2.0) + (-1.0);
    float _294 = dot(vec2(_291, _293), vec2(_291, _293));
    float _3529 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _300 = sqrt(1.0 - (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))));
    float _303 = fma(_300, _222, fma(_293, _214 * TANGENT.x, (_200 * _192) * _291));
    float _306 = fma(_300, _223, fma(_293, _214 * TANGENT.y, (_200 * _193) * _291));
    float _309 = fma(_300, _224, fma(_293, _214 * TANGENT.z, (_200 * _194) * _291));
    float _313 = inversesqrt(dot(vec3(_303, _306, _309), vec3(_303, _306, _309)));
    float _314 = _313 * _303;
    float _315 = _313 * _306;
    float _316 = _313 * _309;
    float _3540 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _317 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _3551 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3562 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3573 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3584 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _321 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _337 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _378 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _388 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _378);
    float _389 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _378);
    float _390 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _378);
    float _394 = inversesqrt(dot(vec3(_388, _389, _390), vec3(_388, _389, _390)));
    float _395 = _388 * _394;
    float _396 = _389 * _394;
    float _397 = _390 * _394;
    float _403 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _404 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _406 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _408 = _406.w;
    float _429 = fma(_316, cbSceneParam._m0[5u].z, fma(_315, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _314));
    float _432 = fma(_316, cbSceneParam._m0[6u].z, fma(_315, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _314));
    float _435 = fma(_316, cbSceneParam._m0[7u].z, fma(_315, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _314));
    vec4 _437 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _448 = (((_437.y - _317) + (_437.w * _317)) * cbMtdParam._m0[3u].x) + _317;
    uint _461 = uint(roundEven(NORMAL.w)) * 13u;
    uint _464 = (_461 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _470 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) * cbInstanceData._m0[_464].x;
    float _471 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * cbInstanceData._m0[_464].y;
    float _472 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * cbInstanceData._m0[_464].z;
    float _3595 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _3606 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _3617 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    vec4 _476 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _481 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _492 = (((_481.x - _321) + (_481.w * _321)) * cbMtdParam._m0[3u].x) + _321;
    float _505 = (cbMtdParam._m0[3u].x * (((_473 * _408) - _473) + _476.x)) + _473;
    float _506 = (cbMtdParam._m0[3u].x * (((_474 * _408) - _474) + _476.y)) + _474;
    float _507 = (cbMtdParam._m0[3u].x * (((_475 * _408) - _475) + _476.z)) + _475;
    float _508 = 1.0 - _492;
    float _509 = _508 * _505;
    float _510 = _508 * _506;
    float _511 = _508 * _507;
    float _516 = (_505 + (-0.039999999105930328369140625)) * _492;
    float _517 = (_506 + (-0.039999999105930328369140625)) * _492;
    float _518 = (_507 + (-0.039999999105930328369140625)) * _492;
    float _519 = _516 + 0.039999999105930328369140625;
    float _521 = _517 + 0.039999999105930328369140625;
    float _522 = _518 + 0.039999999105930328369140625;
    vec4 _531 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _403, cbSceneParam._m0[86u].y * _404));
    float _534 = _531.x * TEXCOORD_4;
    float _535 = dot(vec3(_314, _315, _316), vec3(_395, _396, _397));
    float _538 = _535 * 2.0;
    float _542 = (_538 * _314) - _395;
    float _543 = (_538 * _315) - _396;
    float _544 = (_538 * _316) - _397;
    float _548 = abs(dot(vec3(_395, _396, _397), vec3(_314, _315, _316)));
    float _3628 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _550 = sqrt(_448);
    float _563 = exp2((_550 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_550 * 3.0));
    float _569 = (1.0 - _563) * ((_550 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _570 = _563 * _550;
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _908;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _633 = fma(_606, cbModelParam._m0[26u].z, fma(_602, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _598));
        float _637 = fma(_606, cbModelParam._m0[27u].z, fma(_602, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _598));
        float _641 = fma(_606, cbModelParam._m0[28u].z, fma(_602, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _598));
        float _666 = _598 + _314;
        float _667 = _602 + _315;
        float _668 = _606 + _316;
        float _678 = fma(_668, cbModelParam._m0[26u].z, fma(_667, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _666)) - _633;
        float _679 = fma(_668, cbModelParam._m0[27u].z, fma(_667, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _666)) - _637;
        float _680 = fma(_668, cbModelParam._m0[28u].z, fma(_667, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _666)) - _641;
        float _684 = inversesqrt(dot(vec3(_678, _679, _680), vec3(_678, _679, _680)));
        float _697 = ((_684 * _678) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_633 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _698 = ((_684 * _679) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_637 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _699 = ((_684 * _680) / cbModelParam._m0[34u].z) + ((((((_641 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        vec4 _716 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        vec4 _723 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_697, _698, _699), 0.0);
        float _736 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_702.x + (-0.5));
        float _738 = _736 * (_702.y + (-0.5));
        float _739 = _736 * (_702.z + (-0.5));
        float _746 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_709.x + (-0.5));
        float _748 = _746 * (_709.y + (-0.5));
        float _749 = _746 * (_709.z + (-0.5));
        float _756 = exp2((_716.w + (-0.5)) * 20.0) * 2.0;
        float _757 = _756 * (_716.x + (-0.5));
        float _758 = _756 * (_716.y + (-0.5));
        float _759 = _756 * (_716.z + (-0.5));
        float _766 = exp2((_723.w + (-0.5)) * 20.0) * 2.0;
        float _767 = _766 * (_723.x + (-0.5));
        float _768 = _766 * (_723.y + (-0.5));
        float _769 = _766 * (_723.z + (-0.5));
        float _770 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _771 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _772 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _773 = _737 * 0.5;
        float _774 = _747 * 0.5;
        float _775 = _757 * 0.5;
        float _776 = dot(vec3(_773, _774, _775), vec3(_773, _774, _775));
        float _781 = (_776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_776);
        float _790 = (dot(vec3(_314, _315, _316), vec3(_781 * _773, _781 * _774, _781 * _775)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _800 = sqrt(((_774 * _774) + (_773 * _773)) + (_775 * _775)) / (_770 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _802 = _801 * 2.0;
        float _806 = (1.0 - _801) / (_801 + 1.0);
        float _3676 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _816 = ((((1.0 - _807) * (_802 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_802 + 1.0))) + _807) * _770;
        float _817 = _738 * 0.5;
        float _818 = _748 * 0.5;
        float _819 = _758 * 0.5;
        float _820 = dot(vec3(_817, _818, _819), vec3(_817, _818, _819));
        float _825 = (_820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_820);
        float _833 = (dot(vec3(_314, _315, _316), vec3(_825 * _817, _825 * _818, _825 * _819)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _842 = sqrt(((_818 * _818) + (_817 * _817)) + (_819 * _819)) / (_771 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _844 = _843 * 2.0;
        float _848 = (1.0 - _843) / (_843 + 1.0);
        float _3709 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _858 = ((((1.0 - _849) * (_844 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_844 + 1.0))) + _849) * _771;
        float _859 = _739 * 0.5;
        float _860 = _749 * 0.5;
        float _861 = _759 * 0.5;
        float _862 = dot(vec3(_859, _860, _861), vec3(_859, _860, _861));
        float _867 = (_862 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_862);
        float _875 = (dot(vec3(_314, _315, _316), vec3(_867 * _859, _867 * _860, _867 * _861)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _884 = sqrt(((_860 * _860) + (_859 * _859)) + (_861 * _861)) / (_772 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _886 = _885 * 2.0;
        float _890 = (1.0 - _885) / (_885 + 1.0);
        float _3742 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _900 = ((((1.0 - _891) * (_886 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_886 + 1.0))) + _891) * _772;
        _908 = _739;
        _910 = _738;
        _911 = _737;
        _912 = _749;
        _913 = _748;
        _914 = _747;
        _915 = _759;
        _916 = _758;
        _917 = _757;
        _918 = _772;
        _919 = _771;
        _920 = _770;
        _921 = cbModelParam._m0[36u].z * (isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0)));
        _922 = cbModelParam._m0[36u].z * (isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0)));
        _923 = cbModelParam._m0[36u].z * (isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0)));
    }
    else
    {
        _908 = _909;
        _910 = _909;
        _911 = _909;
        _912 = _909;
        _913 = _909;
        _914 = _909;
        _915 = _909;
        _916 = _909;
        _917 = _909;
        _918 = _909;
        _919 = _909;
        _920 = _909;
        _921 = 0.0;
        _922 = 0.0;
        _923 = 0.0;
    }
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _949 = fma(_606, cbModelParam._m0[30u].z, fma(_602, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _598));
        float _953 = fma(_606, cbModelParam._m0[31u].z, fma(_602, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _598));
        float _957 = fma(_606, cbModelParam._m0[32u].z, fma(_602, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _598));
        float _980 = _598 + _314;
        float _981 = _602 + _315;
        float _982 = _606 + _316;
        float _992 = fma(_982, cbModelParam._m0[30u].z, fma(_981, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _980)) - _949;
        float _993 = fma(_982, cbModelParam._m0[31u].z, fma(_981, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _980)) - _953;
        float _994 = fma(_982, cbModelParam._m0[32u].z, fma(_981, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _980)) - _957;
        float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
        float _1011 = ((_998 * _992) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_949 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_998 * _993) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_953 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_998 * _994) / cbModelParam._m0[35u].z) + ((((((_957 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        float _1048 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1015.x + (-0.5));
        float _1050 = _1048 * (_1015.y + (-0.5));
        float _1051 = _1048 * (_1015.z + (-0.5));
        float _1058 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1022.x + (-0.5));
        float _1060 = _1058 * (_1022.y + (-0.5));
        float _1061 = _1058 * (_1022.z + (-0.5));
        float _1068 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1029.x + (-0.5));
        float _1070 = _1068 * (_1029.y + (-0.5));
        float _1071 = _1068 * (_1029.z + (-0.5));
        float _1078 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1036.x + (-0.5));
        float _1080 = _1078 * (_1036.y + (-0.5));
        float _1081 = _1078 * (_1036.z + (-0.5));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = _1049 * 0.5;
        float _1086 = _1059 * 0.5;
        float _1087 = _1069 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_314, _315, _316), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3805 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1112 + 1.0))) + _1117) * _1082;
        float _1127 = _1050 * 0.5;
        float _1128 = _1060 * 0.5;
        float _1129 = _1070 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_314, _315, _316), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3838 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1154 + 1.0))) + _1159) * _1083;
        float _1169 = _1051 * 0.5;
        float _1170 = _1061 * 0.5;
        float _1171 = _1071 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_314, _315, _316), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3871 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1196 + 1.0))) + _1201) * _1084;
        _1218 = _1051;
        _1219 = _1050;
        _1220 = _1049;
        _1221 = _1061;
        _1222 = _1060;
        _1223 = _1059;
        _1224 = _1071;
        _1225 = _1070;
        _1226 = _1069;
        _1227 = _1084;
        _1228 = _1083;
        _1229 = _1082;
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1231 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
    }
    else
    {
        _1218 = _909;
        _1219 = _909;
        _1220 = _909;
        _1221 = _909;
        _1222 = _909;
        _1223 = _909;
        _1224 = _909;
        _1225 = _909;
        _1226 = _909;
        _1227 = _909;
        _1228 = _909;
        _1229 = _909;
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
    }
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _921)) + _921;
    float _1243 = (cbModelParam._m0[1u].x * (_1231 - _922)) + _922;
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _923)) + _923;
    float _1265 = fma(_1244, cbSceneParam._m0[89u].z, fma(_1243, cbSceneParam._m0[89u].y, _1242 * cbSceneParam._m0[89u].x));
    float _1268 = fma(_1244, cbSceneParam._m0[90u].z, fma(_1243, cbSceneParam._m0[90u].y, _1242 * cbSceneParam._m0[90u].x));
    float _1271 = fma(_1244, cbSceneParam._m0[91u].z, fma(_1243, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1242));
    float _1286 = _542 * 0.5;
    float _1287 = _543 * 0.5;
    float _1288 = _544 * 0.5;
    float _1289 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1292 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1219, _1222, _1225, _1228));
    float _1295 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1329;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1302 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_908, _912, _915, _918));
        float _1306 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_910, _913, _916, _919));
        float _1310 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_911, _914, _917, _920));
        float _1317 = dot(vec4(cbModelParam._m0[39u]), vec4(_1286, _1287, _1288, 1.0));
        _1329 = dot(vec3(isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1317) ? 0.0 : (isnan(0.0) ? _1317 : max(0.0, _1317))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1329 = 1.0;
    }
    float _1340;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1331 = dot(vec4(cbModelParam._m0[40u]), vec4(_1286, _1287, _1288, 1.0));
        _1340 = dot(vec3(isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1331) ? 0.0 : (isnan(0.0) ? _1331 : max(0.0, _1331))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1340 = 1.0;
    }
    float _1344 = (_1340 * cbModelParam._m0[1u].x) + (_1329 * (1.0 - cbModelParam._m0[1u].x));
    float _1354 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _448);
    float _1355 = isnan(_1354) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1354 : min(cbModelParam._m0[25u].z, _1354));
    float _1437;
    float _1439;
    float _1441;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1404 = fma(_606, cbModelParam._m0[13u].z, fma(_602, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _598)) + cbModelParam._m0[13u].w;
        float _1408 = fma(_606, cbModelParam._m0[14u].z, fma(_602, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _598)) + cbModelParam._m0[14u].w;
        float _1412 = fma(_606, cbModelParam._m0[15u].z, fma(_602, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _598)) + cbModelParam._m0[15u].w;
        float _1415 = fma(_544, cbModelParam._m0[13u].z, fma(_543, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _542));
        float _1418 = fma(_544, cbModelParam._m0[14u].z, fma(_543, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _542));
        float _1421 = fma(_544, cbModelParam._m0[15u].z, fma(_543, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _542));
        float _1449;
        if (_1415 > 0.0)
        {
            _1449 = abs((1.0 - _1404) / _1415);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1404 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1449 = frontier_phi_16_14_ladder;
        }
        float _1625;
        if (_1418 > 0.0)
        {
            _1625 = abs((1.0 - _1408) / _1418);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1408 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1625 = frontier_phi_25_21_ladder;
        }
        float _1921;
        if (_1421 > 0.0)
        {
            _1921 = abs((1.0 - _1412) / _1421);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1412 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1921 = frontier_phi_37_32_ladder;
        }
        float _1923 = isnan(_1625) ? _1449 : (isnan(_1449) ? _1625 : min(_1449, _1625));
        float _1924 = isnan(_1921) ? _1923 : (isnan(_1923) ? _1921 : min(_1923, _1921));
        float _1928 = (_1924 * _1415) + _1404;
        float _1929 = (_1924 * _1418) + _1408;
        float _1930 = (_1924 * _1421) + _1412;
        float _1931 = _1924 * 9.9999997473787516355514526367188e-05;
        float _1933 = (-1.0) - _1931;
        float _1935 = _1931 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1930 > _1935) || ((_1930 < _1933) || ((_1929 > _1935) || ((_1929 < _1933) || ((_1928 < _1933) || (_1928 > _1935))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2075 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1930, cbModelParam._m0[9u].z, fma(_1929, cbModelParam._m0[9u].y, _1928 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1930, cbModelParam._m0[10u].z, fma(_1929, cbModelParam._m0[10u].y, _1928 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1930, cbModelParam._m0[11u].z, fma(_1929, cbModelParam._m0[11u].y, _1928 * cbModelParam._m0[11u].x))), _1355);
            frontier_phi_15_37_ladder = _2075.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2075.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2075.z * cbModelParam._m0[1u].y;
        }
        _1437 = frontier_phi_15_37_ladder_1;
        _1439 = frontier_phi_15_37_ladder;
        _1441 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1425 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_542, _543, _544), _1355);
        _1437 = _1425.x * cbModelParam._m0[1u].y;
        _1439 = _1425.y * cbModelParam._m0[1u].y;
        _1441 = _1425.z * cbModelParam._m0[1u].y;
    }
    float _1445 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _448);
    float _1446 = isnan(_1445) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1445 : min(cbModelParam._m0[25u].w, _1445));
    float _1539;
    float _1541;
    float _1543;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1503 = fma(_606, cbModelParam._m0[21u].z, fma(_602, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _598)) + cbModelParam._m0[21u].w;
        float _1507 = fma(_606, cbModelParam._m0[22u].z, fma(_602, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _598)) + cbModelParam._m0[22u].w;
        float _1511 = fma(_606, cbModelParam._m0[23u].z, fma(_602, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _598)) + cbModelParam._m0[23u].w;
        float _1514 = fma(_544, cbModelParam._m0[21u].z, fma(_543, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _542));
        float _1517 = fma(_544, cbModelParam._m0[22u].z, fma(_543, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _542));
        float _1520 = fma(_544, cbModelParam._m0[23u].z, fma(_543, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _542));
        float _1630;
        if (_1514 > 0.0)
        {
            _1630 = abs((1.0 - _1503) / _1514);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1503 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1630 = frontier_phi_27_23_ladder;
        }
        float _1948;
        if (_1517 > 0.0)
        {
            _1948 = abs((1.0 - _1507) / _1517);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1507 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1948 = frontier_phi_39_34_ladder;
        }
        float _2286;
        if (_1520 > 0.0)
        {
            _2286 = abs((1.0 - _1511) / _1520);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1511 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2286 = frontier_phi_49_46_ladder;
        }
        float _2288 = isnan(_1948) ? _1630 : (isnan(_1630) ? _1948 : min(_1630, _1948));
        float _2289 = isnan(_2286) ? _2288 : (isnan(_2288) ? _2286 : min(_2288, _2286));
        float _2293 = (_2289 * _1514) + _1503;
        float _2294 = (_2289 * _1517) + _1507;
        float _2295 = (_2289 * _1520) + _1511;
        float _2296 = _2289 * 9.9999997473787516355514526367188e-05;
        float _2297 = (-1.0) - _2296;
        float _2299 = _2296 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2295 > _2299) || ((_2295 < _2297) || ((_2294 > _2299) || ((_2294 < _2297) || ((_2293 < _2297) || (_2293 > _2299))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2417 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2295, cbModelParam._m0[17u].z, fma(_2294, cbModelParam._m0[17u].y, _2293 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2295, cbModelParam._m0[18u].z, fma(_2294, cbModelParam._m0[18u].y, _2293 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2295, cbModelParam._m0[19u].z, fma(_2294, cbModelParam._m0[19u].y, _2293 * cbModelParam._m0[19u].x))), _1446);
            frontier_phi_24_49_ladder = _2417.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2417.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2417.x * cbModelParam._m0[1u].z;
        }
        _1539 = frontier_phi_24_49_ladder_2;
        _1541 = frontier_phi_24_49_ladder_1;
        _1543 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1523 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_542, _543, _544), _1446);
        _1539 = _1523.x * cbModelParam._m0[1u].z;
        _1541 = _1523.y * cbModelParam._m0[1u].z;
        _1543 = _1523.z * cbModelParam._m0[1u].z;
    }
    float _1556 = (((_569 * _519) + _570) * _534) * ((cbModelParam._m0[1u].w * (_1539 - _1437)) + _1437);
    float _1558 = (((_569 * _521) + _570) * _534) * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1560 = (((_569 * _522) + _570) * _534) * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1563 = fma(_1560, cbSceneParam._m0[89u].z, fma(_1558, cbSceneParam._m0[89u].y, _1556 * cbSceneParam._m0[89u].x));
    float _1566 = fma(_1560, cbSceneParam._m0[90u].z, fma(_1558, cbSceneParam._m0[90u].y, _1556 * cbSceneParam._m0[90u].x));
    float _1569 = fma(_1560, cbSceneParam._m0[91u].z, fma(_1558, cbSceneParam._m0[91u].y, _1556 * cbSceneParam._m0[91u].x));
    float _1604 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1608 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1612 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1616 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1617 = _1604 / _1616;
    float _1618 = _1608 / _1616;
    float _1619 = _1612 / _1616;
    float _1766;
    float _1767;
    float _1768;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1646 = ((uint(_1619 > cbSceneParam._m0[59u].y) + uint(_1619 > cbSceneParam._m0[59u].x)) + uint(_1619 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1647 = _1646 + 43u;
        uint _1655 = _1646 + 44u;
        uint _1663 = _1646 + 45u;
        uint _1671 = _1646 + 46u;
        float _1682 = fma(_1616, cbSceneParam._m0[_1647].w, fma(_1612, cbSceneParam._m0[_1647].z, fma(_1608, cbSceneParam._m0[_1647].y, _1604 * cbSceneParam._m0[_1647].x)));
        float _1686 = fma(_1616, cbSceneParam._m0[_1655].w, fma(_1612, cbSceneParam._m0[_1655].z, fma(_1608, cbSceneParam._m0[_1655].y, _1604 * cbSceneParam._m0[_1655].x)));
        float _1694 = fma(_1616, cbSceneParam._m0[_1671].w, fma(_1612, cbSceneParam._m0[_1671].z, fma(_1608, cbSceneParam._m0[_1671].y, _1604 * cbSceneParam._m0[_1671].x)));
        float _1699 = cbSceneParam._m0[33u].z * _1694;
        float _1701 = cbSceneParam._m0[33u].w * _1694;
        float _1704 = fma(_1616, cbSceneParam._m0[_1663].w, fma(_1612, cbSceneParam._m0[_1663].z, fma(_1608, cbSceneParam._m0[_1663].y, _1604 * cbSceneParam._m0[_1663].x))) / _1694;
        float _1752 = (cbSceneParam._m0[33u].x - sqrt(((_1618 * _1618) + (_1617 * _1617)) + (_1619 * _1619))) * cbSceneParam._m0[33u].y;
        float _3997 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1759 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1699 + _1682) / _1694, (_1701 + _1686) / _1694), _1704), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1701 + _1682) / _1694, (_1686 - _1699) / _1694), _1704), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1682 - _1699) / _1694, (_1686 - _1701) / _1694), _1704), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1682 - _1701) / _1694, (_1699 + _1686) / _1694), _1704), 0.0)).x), vec4(0.25)));
        _1766 = 1.0 - (_1759 * cbSceneParam._m0[34u].x);
        _1767 = 1.0 - (_1759 * cbSceneParam._m0[34u].y);
        _1768 = 1.0 - (_1759 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1766 = 1.0;
        _1767 = 1.0;
        _1768 = 1.0;
    }
    float _1832;
    float _1834;
    float _1836;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1820 = fma(_1616, cbSceneParam._m0[63u].w, fma(_1612, cbSceneParam._m0[63u].z, fma(_1608, cbSceneParam._m0[63u].y, _1604 * cbSceneParam._m0[63u].x)));
        float _1821 = fma(_1616, cbSceneParam._m0[60u].w, fma(_1612, cbSceneParam._m0[60u].z, fma(_1608, cbSceneParam._m0[60u].y, _1604 * cbSceneParam._m0[60u].x))) / _1820;
        float _1822 = fma(_1616, cbSceneParam._m0[61u].w, fma(_1612, cbSceneParam._m0[61u].z, fma(_1608, cbSceneParam._m0[61u].y, _1604 * cbSceneParam._m0[61u].x))) / _1820;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1821 >= cbSceneParam._m0[64u].x) && (_1822 >= cbSceneParam._m0[64u].y)) && (_1821 <= cbSceneParam._m0[64u].z)) && (_1822 <= cbSceneParam._m0[64u].w))
        {
            float _1961 = fma(_1616, cbSceneParam._m0[62u].w, fma(_1612, cbSceneParam._m0[62u].z, fma(_1608, cbSceneParam._m0[62u].y, _1604 * cbSceneParam._m0[62u].x))) / _1820;
            float _1965 = isnan(cbSceneParam._m0[41u].w) ? _1961 : (isnan(_1961) ? cbSceneParam._m0[41u].w : max(_1961, cbSceneParam._m0[41u].w));
            float _2008 = (cbSceneParam._m0[33u].x - sqrt(((_1618 * _1618) + (_1617 * _1617)) + (_1619 * _1619))) * cbSceneParam._m0[33u].y;
            float _4013 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
            float _2015 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1821, cbSceneParam._m0[33u].w + _1822), _1965), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1821, _1822 - cbSceneParam._m0[33u].z), _1965), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1821 - cbSceneParam._m0[33u].z, _1822 - cbSceneParam._m0[33u].w), _1965), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1821 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1822), _1965), 0.0)).x), vec4(0.25)));
            float _2019 = 1.0 - (_2015 * cbSceneParam._m0[34u].x);
            float _2020 = 1.0 - (_2015 * cbSceneParam._m0[34u].y);
            float _2021 = 1.0 - (_2015 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2020) ? _1767 : (isnan(_1767) ? _2020 : min(_1767, _2020));
            frontier_phi_36_35_ladder_1 = isnan(_2021) ? _1768 : (isnan(_1768) ? _2021 : min(_1768, _2021));
            frontier_phi_36_35_ladder_2 = isnan(_2019) ? _1766 : (isnan(_1766) ? _2019 : min(_1766, _2019));
        }
        else
        {
            frontier_phi_36_35_ladder = _1767;
            frontier_phi_36_35_ladder_1 = _1768;
            frontier_phi_36_35_ladder_2 = _1766;
        }
        _1832 = frontier_phi_36_35_ladder_2;
        _1834 = frontier_phi_36_35_ladder;
        _1836 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1832 = _1766;
        _1834 = _1767;
        _1836 = _1768;
    }
    uvec4 _1841 = floatBitsToUint(cbInstanceData._m0[_461 + 5u]);
    uint _1843 = _1841.x * 14u;
    uint _1844 = _1843 + 13u;
    float _1851 = _534 + (-1.0);
    float _1856 = (cbLight._m0[_1844].x * _1851) + 1.0;
    float _1857 = (cbLight._m0[_1844].y * _1851) + 1.0;
    float _1858 = (cbLight._m0[_1844].z * _1851) + 1.0;
    float _1859 = (cbLight._m0[_1844].w * _1851) + 1.0;
    uint _1860 = _1843 + 5u;
    float _1866 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
    uint _1870 = _1843 + 4u;
    float _1880 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
    uint _1884 = _1843 | 1u;
    float _1895 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_314, _315, _316));
    float _1898 = dot(vec3(cbLight._m0[_1884].xyz), vec3(_314, _315, _316));
    float _4049 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _4060 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1903 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * 0.3183098733425140380859375;
    float _1905 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * 0.3183098733425140380859375;
    float _1912 = ((cbLight._m0[_1860].x * _1866) * _1905) + (((cbLight._m0[_1870].x * _1832) * _1880) * _1903);
    float _1913 = ((_1866 * cbLight._m0[_1860].y) * _1905) + (((cbLight._m0[_1870].y * _1834) * _1880) * _1903);
    float _1914 = ((_1866 * cbLight._m0[_1860].z) * _1905) + (((cbLight._m0[_1870].z * _1836) * _1880) * _1903);
    uvec4 _1918 = floatBitsToUint(cbLight._m0[_1843 + 12u]);
    bool _1920 = _1918.x == 0u;
    float _2022;
    float _2024;
    float _2026;
    if (_1920)
    {
        _2022 = _1912;
        _2024 = _1913;
        _2026 = _1914;
    }
    else
    {
        uint _2030 = _1843 + 6u;
        float _2046 = (dot(vec3(cbLight._m0[_1843 + 2u].xyz), vec3(_314, _315, _316)) * 0.5) + 0.5;
        float _2047 = _2046 * _2046;
        float _4071 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2048 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _2049 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _2022 = (((cbLight._m0[_2030].x * 0.3183098733425140380859375) * _2048) * _2049) + _1912;
        _2024 = (((cbLight._m0[_2030].y * 0.3183098733425140380859375) * _2048) * _2049) + _1913;
        _2026 = (((cbLight._m0[_2030].z * 0.3183098733425140380859375) * _2048) * _2049) + _1914;
    }
    bool _2029 = _1918.y == 0u;
    float _2084;
    float _2086;
    float _2088;
    if (_2029)
    {
        _2084 = _2022;
        _2086 = _2024;
        _2088 = _2026;
    }
    else
    {
        uint _2257 = _1843 + 7u;
        float _2273 = (dot(vec3(cbLight._m0[_1843 + 3u].xyz), vec3(_314, _315, _316)) * 0.5) + 0.5;
        float _2274 = _2273 * _2273;
        float _4087 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2275 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2276 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _2084 = (((cbLight._m0[_2257].x * 0.3183098733425140380859375) * _2275) * _2276) + _2022;
        _2086 = (((cbLight._m0[_2257].y * 0.3183098733425140380859375) * _2275) * _2276) + _2024;
        _2088 = (((cbLight._m0[_2257].z * 0.3183098733425140380859375) * _2275) * _2276) + _2026;
    }
    uint _2091 = _1843 + 8u;
    float _2104 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1843].w)) * _448) * 0.949999988079071044921875);
    float _2105 = _2104 * _2104;
    float _2106 = cbLight._m0[_1843].x + _395;
    float _2107 = cbLight._m0[_1843].y + _396;
    float _2108 = cbLight._m0[_1843].z + _397;
    float _2112 = inversesqrt(dot(vec3(_2106, _2107, _2108), vec3(_2106, _2107, _2108)));
    float _2113 = _2112 * _2106;
    float _2114 = _2112 * _2107;
    float _2115 = _2112 * _2108;
    float _2116 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1843].xyz));
    float _4103 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2119 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _2120 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _2121 = dot(vec3(_314, _315, _316), vec3(_2113, _2114, _2115));
    float _4125 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2124 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _2125 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_2113, _2114, _2115));
    float _4136 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2129 = _2105 * _2105;
    float _2133 = ((_2124 * _2124) * (_2129 + (-1.0))) + 1.0;
    float _2141 = exp2(log2(1.0 - (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * 5.0);
    float _2142 = 0.959999978542327880859375 - _516;
    float _2144 = 0.959999978542327880859375 - _517;
    float _2145 = 0.959999978542327880859375 - _518;
    float _2152 = 1.0 - _2105;
    float _2163 = (0.5 / (((_2120 * ((_2119 * _2152) + _2105)) + 9.9999999392252902907785028219223e-09) + (((_2120 * _2152) + _2105) * _2119))) * _2119;
    float _4147 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2165 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_2129 / ((_2133 * _2133) * 3.141590118408203125));
    uint _2179 = _1843 + 9u;
    float _2190 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1884].w)) * _448) * 0.949999988079071044921875);
    float _2191 = _2190 * _2190;
    float _2192 = cbLight._m0[_1884].x + _395;
    float _2193 = cbLight._m0[_1884].y + _396;
    float _2194 = cbLight._m0[_1884].z + _397;
    float _2198 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
    float _2199 = _2198 * _2192;
    float _2200 = _2198 * _2193;
    float _2201 = _2198 * _2194;
    float _2202 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_1884].xyz));
    float _4158 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2205 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _2206 = dot(vec3(_314, _315, _316), vec3(_2199, _2200, _2201));
    float _4169 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _2210 = dot(vec3(cbLight._m0[_1884].xyz), vec3(_2199, _2200, _2201));
    float _4180 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2214 = _2191 * _2191;
    float _2218 = ((_2209 * _2209) * (_2214 + (-1.0))) + 1.0;
    float _2225 = exp2(log2(1.0 - (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * 5.0);
    float _2232 = 1.0 - _2191;
    float _2242 = (0.5 / (((_2120 * ((_2205 * _2232) + _2191)) + 9.9999999392252902907785028219223e-09) + (((_2120 * _2232) + _2191) * _2205))) * _2205;
    float _4191 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2244 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2214 / ((_2218 * _2218) * 3.141590118408203125));
    float _2254 = (((((_2225 * _2142) + _519) * cbLight._m0[_2179].x) * _2244) * _1866) + ((((cbLight._m0[_2091].x * _1832) * ((_2141 * _2142) + _519)) * _2165) * _1880);
    float _2255 = (((((_2225 * _2144) + _521) * cbLight._m0[_2179].y) * _2244) * _1866) + ((((cbLight._m0[_2091].y * _1834) * ((_2141 * _2144) + _521)) * _2165) * _1880);
    float _2256 = (((((_2225 * _2145) + _522) * cbLight._m0[_2179].z) * _2244) * _1866) + ((((cbLight._m0[_2091].z * _1836) * ((_2141 * _2145) + _522)) * _2165) * _1880);
    float _2312;
    float _2314;
    float _2316;
    if (_1920)
    {
        _2312 = _2254;
        _2314 = _2255;
        _2316 = _2256;
    }
    else
    {
        uint _2318 = _1843 + 2u;
        uint _2322 = _1843 + 10u;
        float _2336 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2318].w)) * _448) * 0.949999988079071044921875);
        float _2337 = _2336 * _2336;
        float _2338 = cbLight._m0[_2318].x + _395;
        float _2339 = cbLight._m0[_2318].y + _396;
        float _2340 = cbLight._m0[_2318].z + _397;
        float _2344 = inversesqrt(dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340)));
        float _2345 = _2344 * _2338;
        float _2346 = _2344 * _2339;
        float _2347 = _2344 * _2340;
        float _2348 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_2318].xyz));
        float _4202 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2351 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _2352 = dot(vec3(_314, _315, _316), vec3(_2345, _2346, _2347));
        float _4213 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2355 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2356 = dot(vec3(cbLight._m0[_2318].xyz), vec3(_2345, _2346, _2347));
        float _4224 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2360 = _2337 * _2337;
        float _2364 = ((_2355 * _2355) * (_2360 + (-1.0))) + 1.0;
        float _2371 = exp2(log2(1.0 - (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * 5.0);
        float _2378 = 1.0 - _2337;
        float _2388 = (0.5 / (((_2120 * ((_2351 * _2378) + _2337)) + 9.9999999392252902907785028219223e-09) + (((_2120 * _2378) + _2337) * _2351))) * _2351;
        float _4235 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2390 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2360 / ((_2364 * _2364) * 3.141590118408203125));
        float _2391 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _2312 = (((((_2371 * _2142) + _519) * cbLight._m0[_2322].x) * _2390) * _2391) + _2254;
        _2314 = (((((_2371 * _2144) + _521) * cbLight._m0[_2322].y) * _2390) * _2391) + _2255;
        _2316 = (((((_2371 * _2145) + _522) * cbLight._m0[_2322].z) * _2390) * _2391) + _2256;
    }
    float _2422;
    float _2424;
    float _2426;
    if (_2029)
    {
        _2422 = _2312;
        _2424 = _2314;
        _2426 = _2316;
    }
    else
    {
        uint _2433 = _1843 + 3u;
        uint _2437 = _1843 + 11u;
        float _2451 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2433].w)) * _448) * 0.949999988079071044921875);
        float _2452 = _2451 * _2451;
        float _2453 = cbLight._m0[_2433].x + _395;
        float _2454 = cbLight._m0[_2433].y + _396;
        float _2455 = cbLight._m0[_2433].z + _397;
        float _2459 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
        float _2460 = _2459 * _2453;
        float _2461 = _2459 * _2454;
        float _2462 = _2459 * _2455;
        float _2463 = dot(vec3(_314, _315, _316), vec3(cbLight._m0[_2433].xyz));
        float _4251 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2466 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2467 = dot(vec3(_314, _315, _316), vec3(_2460, _2461, _2462));
        float _4262 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2470 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2471 = dot(vec3(cbLight._m0[_2433].xyz), vec3(_2460, _2461, _2462));
        float _4273 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2475 = _2452 * _2452;
        float _2479 = ((_2470 * _2470) * (_2475 + (-1.0))) + 1.0;
        float _2486 = exp2(log2(1.0 - (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) * 5.0);
        float _2493 = 1.0 - _2452;
        float _2503 = (0.5 / (((_2120 * ((_2466 * _2493) + _2452)) + 9.9999999392252902907785028219223e-09) + (((_2120 * _2493) + _2452) * _2466))) * _2466;
        float _4284 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2505 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2475 / ((_2479 * _2479) * 3.141590118408203125));
        float _2506 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _2422 = (((((_2486 * _2142) + _519) * cbLight._m0[_2437].x) * _2505) * _2506) + _2312;
        _2424 = (((((_2486 * _2144) + _521) * cbLight._m0[_2437].y) * _2505) * _2506) + _2314;
        _2426 = (((((_2486 * _2145) + _522) * cbLight._m0[_2437].z) * _2505) * _2506) + _2316;
    }
    float _2571;
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    if (_1841.y == 0u)
    {
        uvec4 _2527 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2528 = _2527.x;
        uint _2539 = uint((float(_2527.y) * floor(float(uint(cbSceneParam._m0[85u].y * _404) / _2528))) + floor(float(uint(cbSceneParam._m0[85u].x * _403) / _2528)));
        float _2549 = (log2(_1619 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2550 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        uint _2553 = uint(isnan(14.0) ? _2550 : (isnan(_2550) ? 14.0 : min(_2550, 14.0)));
        uvec4 _2558 = texelFetch(g_lightClusterGridBuffer, int(((_2553 << 2u) + (_2539 << 6u)) >> 2u));
        uint _2559 = _2558.x;
        uint _2560 = _2527.z;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        if (((((1u << ((_2560 >> 4u) & 15u)) + 4294967295u) & _2559) == 0u) || ((_2560 & 240u) == 0u))
        {
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
        }
        else
        {
            float _2639;
            float _2641;
            float _2643;
            float _2645;
            float _2647;
            float _2649;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            uint _2788 = 0u;
            uint _2797;
            bool _2798;
            for (;;)
            {
                _2797 = texelFetch(g_lightClassification, int((((_2553 << 5u) + (_2539 << 9u)) + (_2788 << 2u)) >> 2u)).x;
                _2798 = _2797 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2798)
                {
                    frontier_phi_68_pred = _2787;
                    frontier_phi_68_pred_1 = _2786;
                    frontier_phi_68_pred_2 = _2785;
                    frontier_phi_68_pred_3 = _2783;
                    frontier_phi_68_pred_4 = _2782;
                    frontier_phi_68_pred_5 = _2784;
                }
                else
                {
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    uint _2912;
                    _2906 = _2782;
                    _2907 = _2783;
                    _2908 = _2784;
                    _2909 = _2785;
                    _2910 = _2786;
                    _2911 = _2787;
                    _2912 = _2797;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    for (;;)
                    {
                        uint _2916 = uint(findLSB(_2912)) + (_2788 << 5u);
                        uint _2913 = (_2912 + 4294967295u) & _2912;
                        uint _2918 = _2916 * 48u;
                        vec4 _2932 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2918)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 3u)).x));
                        uint _2938 = (_2916 * 48u) + 4u;
                        vec4 _2951 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2938)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 3u)).x));
                        uint _2957 = (_2916 * 48u) + 8u;
                        vec3 _2968 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2957)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 2u)).x));
                        float _2972 = _2932.x - _1617;
                        float _2973 = _2932.y - _1618;
                        float _2974 = _2932.z - _1619;
                        float _2975 = dot(vec3(_2972, _2973, _2974), vec3(_2972, _2973, _2974));
                        float _2978 = inversesqrt(_2975);
                        float _2979 = _2978 * _2972;
                        float _2980 = _2978 * _2973;
                        float _2981 = _2978 * _2974;
                        float _2982 = dot(vec3(_429, _432, _435), vec3(_2979, _2980, _2981));
                        float _2987 = 1.0 - (_2975 * _2932.w);
                        float _4310 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2988 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                        float _2989 = sqrt(_2975) * _2951.w;
                        float _2992 = 1.39999997615814208984375 / (_2989 + 1.39999997615814208984375);
                        float _2993 = _2992 * _2992;
                        float _2996 = ((1.0 - _2993) * _2982) + _2993;
                        float _2999 = _2989 * _2989;
                        float _3003 = ((isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0))) * _2988) / ((_2999 * 0.699999988079071044921875) + 1.0);
                        float _3007 = (-0.0) - _1617;
                        float _3008 = (-0.0) - _1618;
                        float _3009 = (-0.0) - _1619;
                        float _3013 = inversesqrt(dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009)));
                        float _3014 = _3013 * _3007;
                        float _3015 = _3013 * _3008;
                        float _3016 = _3013 * _3009;
                        float _3023 = exp2(log2(1.0 / ((_2999 * 3.5) + 5.0)) * 0.25);
                        float _3024 = 1.0 - _550;
                        float _3031 = sqrt(1.0 - ((1.0 - (_3024 * _3024)) * (1.0 - (_3023 * _3023))));
                        float _3032 = _3031 * _3031;
                        float _3033 = _3032 * _3032;
                        float _3034 = _3014 + _2979;
                        float _3035 = _3015 + _2980;
                        float _3036 = _3016 + _2981;
                        float _3040 = inversesqrt(dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036)));
                        float _3044 = dot(vec3(_429, _432, _435), vec3(_3014, _3015, _3016));
                        float _4326 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3047 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                        float _3048 = dot(vec3(_429, _432, _435), vec3(_3040 * _3034, _3040 * _3035, _3040 * _3036));
                        float _4337 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3051 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _3055 = ((_3051 * _3051) * (_3033 + (-1.0))) + 1.0;
                        float _3056 = _2992 * _3032;
                        float _3057 = _3056 * _3056;
                        float _3060 = ((1.0 - _3057) * _2982) + _3057;
                        float _4348 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3061 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _3062 = 1.0 - _3032;
                        float _3072 = (0.5 / (((_3061 * ((_3047 * _3062) + _3032)) + 9.9999999392252902907785028219223e-09) + (((_3061 * _3062) + _3032) * _3047))) * _3061;
                        float _4359 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3083 = (((_3033 * 3.1415927410125732421875) * (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) / ((_3055 * _3055) * ((_2999 * 2.1991131305694580078125) + 3.141590118408203125))) * _2988;
                        _2841 = (_3003 * _2951.x) + _2909;
                        _2842 = (_3003 * _2951.y) + _2910;
                        _2843 = (_3003 * _2951.z) + _2911;
                        _2838 = (_3083 * _2968.x) + _2906;
                        _2839 = (_3083 * _2968.y) + _2907;
                        _2840 = (_3083 * _2968.z) + _2908;
                        if (_2913 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2906 = _2838;
                            _2907 = _2839;
                            _2908 = _2840;
                            _2909 = _2841;
                            _2910 = _2842;
                            _2911 = _2843;
                            _2912 = _2913;
                        }
                    }
                    frontier_phi_68_pred = _2843;
                    frontier_phi_68_pred_1 = _2842;
                    frontier_phi_68_pred_2 = _2841;
                    frontier_phi_68_pred_3 = _2839;
                    frontier_phi_68_pred_4 = _2838;
                    frontier_phi_68_pred_5 = _2840;
                }
                _2649 = frontier_phi_68_pred;
                _2647 = frontier_phi_68_pred_1;
                _2645 = frontier_phi_68_pred_2;
                _2641 = frontier_phi_68_pred_3;
                _2639 = frontier_phi_68_pred_4;
                _2643 = frontier_phi_68_pred_5;
                uint _2789 = _2788 + 1u;
                if (_2789 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2782 = _2639;
                    _2783 = _2641;
                    _2784 = _2643;
                    _2785 = _2645;
                    _2786 = _2647;
                    _2787 = _2649;
                    _2788 = _2789;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
        }
        uvec4 _2652 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2653 = _2652.z;
        uint _2655 = (_2653 >> 8u) & 15u;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        if (((4294967295u << _2655) & _2559) == 0u)
        {
            _2750 = _2638;
            _2752 = _2640;
            _2754 = _2642;
            _2756 = _2644;
            _2758 = _2646;
            _2760 = _2648;
        }
        else
        {
            float _2775 = inversesqrt(dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619)));
            float _2776 = _2775 * _1617;
            float _2777 = _2775 * _1618;
            float _2778 = _2775 * _1619;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2655 < ((_2653 >> 12u) & 15u))
            {
                float _2751;
                float _2753;
                float _2755;
                float _2757;
                float _2759;
                float _2761;
                float _2889 = _2638;
                float _2890 = _2640;
                float _2891 = _2642;
                float _2892 = _2644;
                float _2893 = _2646;
                float _2894 = _2648;
                uint _2895 = _2655;
                uint _2904;
                bool _2905;
                for (;;)
                {
                    _2904 = texelFetch(g_lightClassification, int((((_2553 << 5u) + (_2539 << 9u)) + (_2895 << 2u)) >> 2u)).x;
                    _2905 = _2904 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2905)
                    {
                        frontier_phi_74_pred = _2891;
                        frontier_phi_74_pred_1 = _2890;
                        frontier_phi_74_pred_2 = _2889;
                        frontier_phi_74_pred_3 = _2894;
                        frontier_phi_74_pred_4 = _2893;
                        frontier_phi_74_pred_5 = _2892;
                    }
                    else
                    {
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3101 = _2889;
                        float _3102 = _2890;
                        float _3103 = _2891;
                        float _3104 = _2892;
                        float _3105 = _2893;
                        float _3106 = _2894;
                        uint _3107 = _2904;
                        uint _3108;
                        vec4 _3133;
                        float _3134;
                        vec4 _3149;
                        vec3 _3161;
                        vec4 _3177;
                        vec4 _3193;
                        float _3240;
                        bool _3241;
                        for (;;)
                        {
                            uint _3118 = ((_2895 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3107));
                            _3108 = (_3107 + 4294967295u) & _3107;
                            uint _3120 = _3118 * 40u;
                            _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            _3134 = _3133.w;
                            uint _3136 = (_3118 * 40u) + 4u;
                            _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            uint _3151 = (_3118 * 40u) + 8u;
                            _3161 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x));
                            uint _3164 = (_3118 * 40u) + 16u;
                            _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            uint _3180 = (_3118 * 40u) + 20u;
                            _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            uint _3196 = (_3118 * 40u) + 24u;
                            vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            uint _3215 = (_3118 * 40u) + 28u;
                            vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            _3240 = fma(_1619, _3228.z, fma(_1618, _3228.y, _3228.x * _1617)) + _3228.w;
                            _3241 = !((fma(_1619, _3209.z, fma(_1618, _3209.y, _3209.x * _1617)) + _3209.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3241)
                            {
                                float _3268 = _3133.x - _1617;
                                float _3269 = _3133.y - _1618;
                                float _3270 = _3133.z - _1619;
                                float _3271 = dot(vec3(_3268, _3269, _3270), vec3(_3268, _3269, _3270));
                                float _3274 = inversesqrt(_3271);
                                float _3275 = _3274 * _3268;
                                float _3276 = _3274 * _3269;
                                float _3277 = _3274 * _3270;
                                float _3281 = 1.0 - (_3271 / (_3134 * _3134));
                                float _4370 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3282 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3286 = sqrt(_3271) * _3149.w;
                                float _3288 = 1.39999997615814208984375 / (_3286 + 1.39999997615814208984375);
                                float _3289 = _3288 * _3288;
                                float _3292 = ((1.0 - _3289) * dot(vec3(_3275, _3276, _3277), vec3(_429, _432, _435))) + _3289;
                                float _3295 = _3286 * _3286;
                                float _3299 = (fma(_1619, _3177.z, fma(_1618, _3177.y, _3177.x * _1617)) + _3177.w) / _3240;
                                float _3300 = (fma(_1619, _3193.z, fma(_1618, _3193.y, _3193.x * _1617)) + _3193.w) / _3240;
                                float _3304 = 1.0 - dot(vec2(_3299, _3300), vec2(_3299, _3300));
                                float _4386 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3305 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3306 = _3305 * (((isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0))) * _3282) / ((_3295 * 0.699999988079071044921875) + 1.0));
                                float _3318 = exp2(log2(1.0 / ((_3295 * 3.5) + 5.0)) * 0.25);
                                float _3319 = 1.0 - _550;
                                float _3326 = sqrt(1.0 - ((1.0 - (_3319 * _3319)) * (1.0 - (_3318 * _3318))));
                                float _3327 = _3326 * _3326;
                                float _3328 = _3327 * _3327;
                                float _3329 = _3275 - _2776;
                                float _3330 = _3276 - _2777;
                                float _3331 = _3277 - _2778;
                                float _3335 = inversesqrt(dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331)));
                                float _3339 = dot(vec3(_429, _432, _435), vec3((-0.0) - _2776, (-0.0) - _2777, (-0.0) - _2778));
                                float _4397 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3342 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3343 = dot(vec3(_429, _432, _435), vec3(_3335 * _3329, _3335 * _3330, _3335 * _3331));
                                float _4408 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3346 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3350 = ((_3346 * _3346) * (_3328 + (-1.0))) + 1.0;
                                float _3351 = _3288 * _3327;
                                float _3352 = _3351 * _3351;
                                float _3358 = ((1.0 - _3352) * dot(vec3(_429, _432, _435), vec3(_3275, _3276, _3277))) + _3352;
                                float _4419 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3359 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3360 = 1.0 - _3327;
                                float _3370 = (0.5 / (((_3359 * ((_3342 * _3360) + _3327)) + 9.9999999392252902907785028219223e-09) + (((_3359 * _3360) + _3327) * _3342))) * _3359;
                                float _4430 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3380 = (_3305 * _3282) * (((_3328 * 3.1415927410125732421875) * (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) / ((_3350 * _3350) * ((_3295 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3380 * _3161.z;
                                frontier_phi_80_pred_1 = _3380 * _3161.y;
                                frontier_phi_80_pred_2 = _3380 * _3161.x;
                                frontier_phi_80_pred_3 = _3306 * _3149.z;
                                frontier_phi_80_pred_4 = _3306 * _3149.y;
                                frontier_phi_80_pred_5 = _3306 * _3149.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3386 = frontier_phi_80_pred;
                            _3385 = frontier_phi_80_pred_1;
                            _3384 = frontier_phi_80_pred_2;
                            _3389 = frontier_phi_80_pred_3;
                            _3388 = frontier_phi_80_pred_4;
                            _3387 = frontier_phi_80_pred_5;
                            _3091 = _3387 + _3104;
                            _3092 = _3388 + _3105;
                            _3093 = _3389 + _3106;
                            _3088 = _3384 + _3101;
                            _3089 = _3385 + _3102;
                            _3090 = _3386 + _3103;
                            if (_3108 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3108;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3090;
                        frontier_phi_74_pred_1 = _3089;
                        frontier_phi_74_pred_2 = _3088;
                        frontier_phi_74_pred_3 = _3093;
                        frontier_phi_74_pred_4 = _3092;
                        frontier_phi_74_pred_5 = _3091;
                    }
                    _2755 = frontier_phi_74_pred;
                    _2753 = frontier_phi_74_pred_1;
                    _2751 = frontier_phi_74_pred_2;
                    _2761 = frontier_phi_74_pred_3;
                    _2759 = frontier_phi_74_pred_4;
                    _2757 = frontier_phi_74_pred_5;
                    uint _2896 = _2895 + 1u;
                    if (_2896 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2889 = _2751;
                        _2890 = _2753;
                        _2891 = _2755;
                        _2892 = _2757;
                        _2893 = _2759;
                        _2894 = _2761;
                        _2895 = _2896;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2759;
                frontier_phi_62_63_ladder_1 = _2757;
                frontier_phi_62_63_ladder_2 = _2755;
                frontier_phi_62_63_ladder_3 = _2761;
                frontier_phi_62_63_ladder_4 = _2753;
                frontier_phi_62_63_ladder_5 = _2751;
            }
            else
            {
                frontier_phi_62_63_ladder = _2646;
                frontier_phi_62_63_ladder_1 = _2644;
                frontier_phi_62_63_ladder_2 = _2642;
                frontier_phi_62_63_ladder_3 = _2648;
                frontier_phi_62_63_ladder_4 = _2640;
                frontier_phi_62_63_ladder_5 = _2638;
            }
            _2750 = frontier_phi_62_63_ladder_5;
            _2752 = frontier_phi_62_63_ladder_4;
            _2754 = frontier_phi_62_63_ladder_2;
            _2756 = frontier_phi_62_63_ladder_1;
            _2758 = frontier_phi_62_63_ladder;
            _2760 = frontier_phi_62_63_ladder_3;
        }
        float _2765 = isnan(1.0) ? _534 : (isnan(_534) ? 1.0 : min(_534, 1.0));
        _2571 = (_2765 * _2756) + _2084;
        _2573 = (_2765 * _2758) + _2086;
        _2575 = (_2765 * _2760) + _2088;
        _2577 = ((_2750 * _519) * _2765) + _2422;
        _2579 = ((_2752 * _521) * _2765) + _2424;
        _2581 = ((_2754 * _522) * _2765) + _2426;
    }
    else
    {
        _2571 = _2084;
        _2573 = _2086;
        _2575 = _2088;
        _2577 = _2422;
        _2579 = _2424;
        _2581 = _2426;
    }
    float _4446 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _4457 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _4468 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    uint _2601 = _461 + 6u;
    float _2609 = _403 / cbSceneParam._m0[86u].x;
    float _2610 = _404 / cbSceneParam._m0[86u].y;
    vec4 _2624 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2609, _2610, (log2((isnan(cbSceneParam._m0[77u].w) ? _337 : (isnan(_337) ? cbSceneParam._m0[77u].w : min(_337, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2626 = _2624.x;
    float _2627 = _2624.y;
    float _2628 = _2624.z;
    float _2629 = _2624.w;
    float _2700;
    float _2702;
    float _2704;
    float _2706;
    if (_337 > cbSceneParam._m0[78u].w)
    {
        float _2663 = isnan(_337) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _337 : min(cbSceneParam._m0[80u].w, _337));
        float _2664 = _2663 / _337;
        float _2675 = _2664 * _388;
        float _2676 = _389 * _2664;
        float _2677 = (-0.0) - _2676;
        float _2678 = _2664 * _390;
        float _2680 = (cbSceneParam._m0[77u].w * _2677) / _2663;
        float _2681 = _2680 + cbSceneParam._m0[79u].w;
        float _2682 = cbSceneParam._m0[79u].w - _2676;
        float _2688 = sqrt(((_2675 * _2675) + (_2676 * _2676)) + (_2678 * _2678));
        float _2691 = (1.0 - (cbSceneParam._m0[77u].w / _2663)) * _2688;
        float _2696 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2698 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2851;
        if (abs((_2677 - _2680) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2851 = ((((_2681 > 0.0) ? exp2(_2696 * _2681) : (2.0 - exp2(_2698 * _2681))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2691;
        }
        else
        {
            float _2811 = 1.0 / cbSceneParam._m0[80u].x;
            float _2812 = isnan(_2682) ? _2681 : (isnan(_2681) ? _2682 : max(_2681, _2682));
            float _2813 = isnan(_2682) ? _2681 : (isnan(_2681) ? _2682 : min(_2681, _2682));
            float _2822 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : min(_2812, 0.0));
            float _2823 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : min(_2813, 0.0));
            _2851 = ((abs(_2688 / _2677) * cbSceneParam._m0[80u].y) * ((((_2822 - _2823) * 2.0) - ((exp2(_2696 * (isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0)))) - exp2(_2696 * (isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0))))) * _2811)) - ((exp2(_2698 * _2822) - exp2(_2698 * _2823)) * _2811))) + (_2691 * cbSceneParam._m0[80u].z);
        }
        vec4 _2853 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2609, _2610, 1.0), 0.0);
        float _2862 = exp2((_2851 * (-1.44269502162933349609375)) * (1.0 - _2853.w));
        float _2863 = log2(_2862);
        float _2879 = log2(_2629);
        _2700 = (exp2(_2879 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2863 * cbSceneParam._m0[78u].x)) * _2853.x) / cbSceneParam._m0[78u].x)) + _2626;
        _2702 = (exp2(_2879 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2863 * cbSceneParam._m0[78u].y)) * _2853.y) / cbSceneParam._m0[78u].y)) + _2627;
        _2704 = (exp2(_2879 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2863 * cbSceneParam._m0[78u].z)) * _2853.z) / cbSceneParam._m0[78u].z)) + _2628;
        _2706 = _2862 * _2629;
    }
    else
    {
        _2700 = _2626;
        _2702 = _2627;
        _2704 = _2628;
        _2706 = _2629;
    }
    float _2718 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2719 = _2718 == 3.0;
    float _2720 = log2(_2706);
    float _2727 = exp2(_2720 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2571 + ((isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))) * _534))) + ((_2577 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _1344)) * cbPerFrame._m0[3u].x));
    float _2728 = exp2(_2720 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2573 + ((isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))) * _534))) + ((_2579 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _1344)) * cbPerFrame._m0[3u].x));
    float _2729 = exp2(_2720 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2575 + ((isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))) * _534))) + ((_2581 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _1344)) * cbPerFrame._m0[3u].x));
    float _2738 = (_2718 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2738 * (_2719 ? _2727 : (_2727 + (cbSceneParam._m0[72u].w * _2700)));
    SV_Target.y = _2738 * (_2719 ? _2728 : (_2728 + (cbSceneParam._m0[72u].w * _2702)));
    SV_Target.z = _2738 * (_2719 ? _2729 : (_2729 + (cbSceneParam._m0[72u].w * _2704)));
    SV_Target.w = cbInstanceData._m0[_2601].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2601].w;
}


