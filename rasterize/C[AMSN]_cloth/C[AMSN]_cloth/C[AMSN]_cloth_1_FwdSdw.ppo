#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _892;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    vec4 _242 = texture(sampler2D(C_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _248 = _242.x * cbMtdParam._m0[9u].x;
    float _249 = _242.y * cbMtdParam._m0[9u].y;
    float _250 = _242.z * cbMtdParam._m0[9u].z;
    vec4 _266 = texture(sampler2D(C_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _270 = _266.z;
    float _274 = (_266.x * 2.0) + (-1.0);
    float _276 = (_266.y * 2.0) + (-1.0);
    float _277 = dot(vec2(_274, _276), vec2(_274, _276));
    float _3512 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _283 = sqrt(1.0 - (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))));
    float _286 = fma(_283, _220, fma(_276, _212 * TANGENT.x, (_198 * _190) * _274));
    float _289 = fma(_283, _221, fma(_276, _212 * TANGENT.y, (_198 * _191) * _274));
    float _292 = fma(_283, _222, fma(_276, _212 * TANGENT.z, (_198 * _192) * _274));
    float _296 = inversesqrt(dot(vec3(_286, _289, _292), vec3(_286, _289, _292)));
    float _297 = _296 * _286;
    float _298 = _296 * _289;
    float _299 = _296 * _292;
    float _3523 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _300 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _3534 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3545 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3556 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3567 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _304 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _320 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _361 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _371 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _361);
    float _372 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _361);
    float _373 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _361);
    float _377 = inversesqrt(dot(vec3(_371, _372, _373), vec3(_371, _372, _373)));
    float _378 = _371 * _377;
    float _379 = _372 * _377;
    float _380 = _373 * _377;
    float _386 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _387 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _389 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _391 = _389.w;
    float _412 = fma(_299, cbSceneParam._m0[5u].z, fma(_298, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _297));
    float _415 = fma(_299, cbSceneParam._m0[6u].z, fma(_298, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _297));
    float _418 = fma(_299, cbSceneParam._m0[7u].z, fma(_298, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _297));
    vec4 _420 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _431 = (((_420.y - _300) + (_420.w * _300)) * cbMtdParam._m0[3u].x) + _300;
    uint _444 = uint(roundEven(NORMAL.w)) * 13u;
    uint _447 = (_444 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _453 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)))) * cbInstanceData._m0[_447].x;
    float _454 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) * cbInstanceData._m0[_447].y;
    float _455 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * cbInstanceData._m0[_447].z;
    float _3578 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _3589 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _3600 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    vec4 _459 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _464 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _475 = (((_464.x - _304) + (_464.w * _304)) * cbMtdParam._m0[3u].x) + _304;
    float _488 = (cbMtdParam._m0[3u].x * (((_456 * _391) - _456) + _459.x)) + _456;
    float _489 = (cbMtdParam._m0[3u].x * (((_457 * _391) - _457) + _459.y)) + _457;
    float _490 = (cbMtdParam._m0[3u].x * (((_458 * _391) - _458) + _459.z)) + _458;
    float _491 = 1.0 - _475;
    float _492 = _491 * _488;
    float _493 = _491 * _489;
    float _494 = _491 * _490;
    float _499 = (_488 + (-0.039999999105930328369140625)) * _475;
    float _500 = (_489 + (-0.039999999105930328369140625)) * _475;
    float _501 = (_490 + (-0.039999999105930328369140625)) * _475;
    float _502 = _499 + 0.039999999105930328369140625;
    float _504 = _500 + 0.039999999105930328369140625;
    float _505 = _501 + 0.039999999105930328369140625;
    vec4 _514 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _386, cbSceneParam._m0[86u].y * _387));
    float _517 = _514.x * TEXCOORD_4;
    float _518 = dot(vec3(_297, _298, _299), vec3(_378, _379, _380));
    float _521 = _518 * 2.0;
    float _525 = (_521 * _297) - _378;
    float _526 = (_521 * _298) - _379;
    float _527 = (_521 * _299) - _380;
    float _531 = abs(dot(vec3(_378, _379, _380), vec3(_297, _298, _299)));
    float _3611 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _533 = sqrt(_431);
    float _546 = exp2((_533 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_533 * 3.0));
    float _552 = (1.0 - _546) * ((_533 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _553 = _546 * _533;
    float _581 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _585 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _589 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _891;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _616 = fma(_589, cbModelParam._m0[26u].z, fma(_585, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _581));
        float _620 = fma(_589, cbModelParam._m0[27u].z, fma(_585, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _581));
        float _624 = fma(_589, cbModelParam._m0[28u].z, fma(_585, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _581));
        float _649 = _581 + _297;
        float _650 = _585 + _298;
        float _651 = _589 + _299;
        float _661 = fma(_651, cbModelParam._m0[26u].z, fma(_650, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _649)) - _616;
        float _662 = fma(_651, cbModelParam._m0[27u].z, fma(_650, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _649)) - _620;
        float _663 = fma(_651, cbModelParam._m0[28u].z, fma(_650, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _649)) - _624;
        float _667 = inversesqrt(dot(vec3(_661, _662, _663), vec3(_661, _662, _663)));
        float _680 = ((_667 * _661) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_616 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _681 = ((_667 * _662) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_620 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _682 = ((_667 * _663) / cbModelParam._m0[34u].z) + ((((((_624 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _685 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        float _719 = exp2((_685.w + (-0.5)) * 20.0) * 2.0;
        float _720 = _719 * (_685.x + (-0.5));
        float _721 = _719 * (_685.y + (-0.5));
        float _722 = _719 * (_685.z + (-0.5));
        float _729 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _730 = _729 * (_692.x + (-0.5));
        float _731 = _729 * (_692.y + (-0.5));
        float _732 = _729 * (_692.z + (-0.5));
        float _739 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _740 = _739 * (_699.x + (-0.5));
        float _741 = _739 * (_699.y + (-0.5));
        float _742 = _739 * (_699.z + (-0.5));
        float _749 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_706.x + (-0.5));
        float _751 = _749 * (_706.y + (-0.5));
        float _752 = _749 * (_706.z + (-0.5));
        float _753 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _756 = _720 * 0.5;
        float _757 = _730 * 0.5;
        float _758 = _740 * 0.5;
        float _759 = dot(vec3(_756, _757, _758), vec3(_756, _757, _758));
        float _764 = (_759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_759);
        float _773 = (dot(vec3(_297, _298, _299), vec3(_764 * _756, _764 * _757, _764 * _758)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _783 = sqrt(((_757 * _757) + (_756 * _756)) + (_758 * _758)) / (_753 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _785 = _784 * 2.0;
        float _789 = (1.0 - _784) / (_784 + 1.0);
        float _3659 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _799 = ((((1.0 - _790) * (_785 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_785 + 1.0))) + _790) * _753;
        float _800 = _721 * 0.5;
        float _801 = _731 * 0.5;
        float _802 = _741 * 0.5;
        float _803 = dot(vec3(_800, _801, _802), vec3(_800, _801, _802));
        float _808 = (_803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_803);
        float _816 = (dot(vec3(_297, _298, _299), vec3(_808 * _800, _808 * _801, _808 * _802)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _825 = sqrt(((_801 * _801) + (_800 * _800)) + (_802 * _802)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _827 = _826 * 2.0;
        float _831 = (1.0 - _826) / (_826 + 1.0);
        float _3692 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _841 = ((((1.0 - _832) * (_827 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_827 + 1.0))) + _832) * _754;
        float _842 = _722 * 0.5;
        float _843 = _732 * 0.5;
        float _844 = _742 * 0.5;
        float _845 = dot(vec3(_842, _843, _844), vec3(_842, _843, _844));
        float _850 = (_845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_845);
        float _858 = (dot(vec3(_297, _298, _299), vec3(_850 * _842, _850 * _843, _850 * _844)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _867 = sqrt(((_843 * _843) + (_842 * _842)) + (_844 * _844)) / (_755 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _869 = _868 * 2.0;
        float _873 = (1.0 - _868) / (_868 + 1.0);
        float _3725 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _883 = ((((1.0 - _874) * (_869 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_869 + 1.0))) + _874) * _755;
        _891 = _722;
        _893 = _721;
        _894 = _720;
        _895 = _732;
        _896 = _731;
        _897 = _730;
        _898 = _742;
        _899 = _741;
        _900 = _740;
        _901 = _755;
        _902 = _754;
        _903 = _753;
        _904 = cbModelParam._m0[36u].z * (isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0)));
        _905 = cbModelParam._m0[36u].z * (isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0)));
        _906 = cbModelParam._m0[36u].z * (isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0)));
    }
    else
    {
        _891 = _892;
        _893 = _892;
        _894 = _892;
        _895 = _892;
        _896 = _892;
        _897 = _892;
        _898 = _892;
        _899 = _892;
        _900 = _892;
        _901 = _892;
        _902 = _892;
        _903 = _892;
        _904 = 0.0;
        _905 = 0.0;
        _906 = 0.0;
    }
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _932 = fma(_589, cbModelParam._m0[30u].z, fma(_585, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _581));
        float _936 = fma(_589, cbModelParam._m0[31u].z, fma(_585, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _581));
        float _940 = fma(_589, cbModelParam._m0[32u].z, fma(_585, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _581));
        float _963 = _581 + _297;
        float _964 = _585 + _298;
        float _965 = _589 + _299;
        float _975 = fma(_965, cbModelParam._m0[30u].z, fma(_964, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _963)) - _932;
        float _976 = fma(_965, cbModelParam._m0[31u].z, fma(_964, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _963)) - _936;
        float _977 = fma(_965, cbModelParam._m0[32u].z, fma(_964, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _963)) - _940;
        float _981 = inversesqrt(dot(vec3(_975, _976, _977), vec3(_975, _976, _977)));
        float _994 = ((_981 * _975) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_932 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_981 * _976) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_936 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_981 * _977) / cbModelParam._m0[35u].z) + ((((((_940 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        float _1031 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_998.x + (-0.5));
        float _1033 = _1031 * (_998.y + (-0.5));
        float _1034 = _1031 * (_998.z + (-0.5));
        float _1041 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1005.x + (-0.5));
        float _1043 = _1041 * (_1005.y + (-0.5));
        float _1044 = _1041 * (_1005.z + (-0.5));
        float _1051 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1012.x + (-0.5));
        float _1053 = _1051 * (_1012.y + (-0.5));
        float _1054 = _1051 * (_1012.z + (-0.5));
        float _1061 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1019.x + (-0.5));
        float _1063 = _1061 * (_1019.y + (-0.5));
        float _1064 = _1061 * (_1019.z + (-0.5));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = _1032 * 0.5;
        float _1069 = _1042 * 0.5;
        float _1070 = _1052 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_297, _298, _299), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3788 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1095 + 1.0))) + _1100) * _1065;
        float _1110 = _1033 * 0.5;
        float _1111 = _1043 * 0.5;
        float _1112 = _1053 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_297, _298, _299), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3821 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1137 + 1.0))) + _1142) * _1066;
        float _1152 = _1034 * 0.5;
        float _1153 = _1044 * 0.5;
        float _1154 = _1054 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_297, _298, _299), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3854 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1179 + 1.0))) + _1184) * _1067;
        _1201 = _1034;
        _1202 = _1033;
        _1203 = _1032;
        _1204 = _1044;
        _1205 = _1043;
        _1206 = _1042;
        _1207 = _1054;
        _1208 = _1053;
        _1209 = _1052;
        _1210 = _1067;
        _1211 = _1066;
        _1212 = _1065;
        _1213 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1214 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1215 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
    }
    else
    {
        _1201 = _892;
        _1202 = _892;
        _1203 = _892;
        _1204 = _892;
        _1205 = _892;
        _1206 = _892;
        _1207 = _892;
        _1208 = _892;
        _1209 = _892;
        _1210 = _892;
        _1211 = _892;
        _1212 = _892;
        _1213 = 0.0;
        _1214 = 0.0;
        _1215 = 0.0;
    }
    float _1225 = (cbModelParam._m0[1u].x * (_1213 - _904)) + _904;
    float _1226 = (cbModelParam._m0[1u].x * (_1214 - _905)) + _905;
    float _1227 = (cbModelParam._m0[1u].x * (_1215 - _906)) + _906;
    float _1248 = fma(_1227, cbSceneParam._m0[89u].z, fma(_1226, cbSceneParam._m0[89u].y, _1225 * cbSceneParam._m0[89u].x));
    float _1251 = fma(_1227, cbSceneParam._m0[90u].z, fma(_1226, cbSceneParam._m0[90u].y, _1225 * cbSceneParam._m0[90u].x));
    float _1254 = fma(_1227, cbSceneParam._m0[91u].z, fma(_1226, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1225));
    float _1269 = _525 * 0.5;
    float _1270 = _526 * 0.5;
    float _1271 = _527 * 0.5;
    float _1272 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1203, _1206, _1209, _1212));
    float _1275 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1202, _1205, _1208, _1211));
    float _1278 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1201, _1204, _1207, _1210));
    float _1312;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1285 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_891, _895, _898, _901));
        float _1289 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_893, _896, _899, _902));
        float _1293 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_894, _897, _900, _903));
        float _1300 = dot(vec4(cbModelParam._m0[39u]), vec4(_1269, _1270, _1271, 1.0));
        _1312 = dot(vec3(isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1300) ? 0.0 : (isnan(0.0) ? _1300 : max(0.0, _1300))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1312 = 1.0;
    }
    float _1323;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1314 = dot(vec4(cbModelParam._m0[40u]), vec4(_1269, _1270, _1271, 1.0));
        _1323 = dot(vec3(isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1314) ? 0.0 : (isnan(0.0) ? _1314 : max(0.0, _1314))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1323 = 1.0;
    }
    float _1327 = (_1323 * cbModelParam._m0[1u].x) + (_1312 * (1.0 - cbModelParam._m0[1u].x));
    float _1337 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _431);
    float _1338 = isnan(_1337) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1337 : min(cbModelParam._m0[25u].z, _1337));
    float _1420;
    float _1422;
    float _1424;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1387 = fma(_589, cbModelParam._m0[13u].z, fma(_585, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _581)) + cbModelParam._m0[13u].w;
        float _1391 = fma(_589, cbModelParam._m0[14u].z, fma(_585, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _581)) + cbModelParam._m0[14u].w;
        float _1395 = fma(_589, cbModelParam._m0[15u].z, fma(_585, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _581)) + cbModelParam._m0[15u].w;
        float _1398 = fma(_527, cbModelParam._m0[13u].z, fma(_526, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _525));
        float _1401 = fma(_527, cbModelParam._m0[14u].z, fma(_526, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _525));
        float _1404 = fma(_527, cbModelParam._m0[15u].z, fma(_526, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _525));
        float _1432;
        if (_1398 > 0.0)
        {
            _1432 = abs((1.0 - _1387) / _1398);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1398 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1387 + 1.0) / _1398);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1432 = frontier_phi_16_14_ladder;
        }
        float _1608;
        if (_1401 > 0.0)
        {
            _1608 = abs((1.0 - _1391) / _1401);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1391 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1608 = frontier_phi_25_21_ladder;
        }
        float _1904;
        if (_1404 > 0.0)
        {
            _1904 = abs((1.0 - _1395) / _1404);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1395 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1904 = frontier_phi_37_32_ladder;
        }
        float _1906 = isnan(_1608) ? _1432 : (isnan(_1432) ? _1608 : min(_1432, _1608));
        float _1907 = isnan(_1904) ? _1906 : (isnan(_1906) ? _1904 : min(_1906, _1904));
        float _1911 = (_1907 * _1398) + _1387;
        float _1912 = (_1907 * _1401) + _1391;
        float _1913 = (_1907 * _1404) + _1395;
        float _1914 = _1907 * 9.9999997473787516355514526367188e-05;
        float _1916 = (-1.0) - _1914;
        float _1918 = _1914 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1913 > _1918) || ((_1913 < _1916) || ((_1912 > _1918) || ((_1912 < _1916) || ((_1911 < _1916) || (_1911 > _1918))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2058 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1913, cbModelParam._m0[9u].z, fma(_1912, cbModelParam._m0[9u].y, _1911 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1913, cbModelParam._m0[10u].z, fma(_1912, cbModelParam._m0[10u].y, _1911 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1913, cbModelParam._m0[11u].z, fma(_1912, cbModelParam._m0[11u].y, _1911 * cbModelParam._m0[11u].x))), _1338);
            frontier_phi_15_37_ladder = _2058.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2058.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2058.z * cbModelParam._m0[1u].y;
        }
        _1420 = frontier_phi_15_37_ladder_1;
        _1422 = frontier_phi_15_37_ladder;
        _1424 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1408 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_525, _526, _527), _1338);
        _1420 = _1408.x * cbModelParam._m0[1u].y;
        _1422 = _1408.y * cbModelParam._m0[1u].y;
        _1424 = _1408.z * cbModelParam._m0[1u].y;
    }
    float _1428 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _431);
    float _1429 = isnan(_1428) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1428 : min(cbModelParam._m0[25u].w, _1428));
    float _1522;
    float _1524;
    float _1526;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1486 = fma(_589, cbModelParam._m0[21u].z, fma(_585, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _581)) + cbModelParam._m0[21u].w;
        float _1490 = fma(_589, cbModelParam._m0[22u].z, fma(_585, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _581)) + cbModelParam._m0[22u].w;
        float _1494 = fma(_589, cbModelParam._m0[23u].z, fma(_585, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _581)) + cbModelParam._m0[23u].w;
        float _1497 = fma(_527, cbModelParam._m0[21u].z, fma(_526, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _525));
        float _1500 = fma(_527, cbModelParam._m0[22u].z, fma(_526, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _525));
        float _1503 = fma(_527, cbModelParam._m0[23u].z, fma(_526, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _525));
        float _1613;
        if (_1497 > 0.0)
        {
            _1613 = abs((1.0 - _1486) / _1497);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1486 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1613 = frontier_phi_27_23_ladder;
        }
        float _1931;
        if (_1500 > 0.0)
        {
            _1931 = abs((1.0 - _1490) / _1500);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1490 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1931 = frontier_phi_39_34_ladder;
        }
        float _2269;
        if (_1503 > 0.0)
        {
            _2269 = abs((1.0 - _1494) / _1503);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1494 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2269 = frontier_phi_49_46_ladder;
        }
        float _2271 = isnan(_1931) ? _1613 : (isnan(_1613) ? _1931 : min(_1613, _1931));
        float _2272 = isnan(_2269) ? _2271 : (isnan(_2271) ? _2269 : min(_2271, _2269));
        float _2276 = (_2272 * _1497) + _1486;
        float _2277 = (_2272 * _1500) + _1490;
        float _2278 = (_2272 * _1503) + _1494;
        float _2279 = _2272 * 9.9999997473787516355514526367188e-05;
        float _2280 = (-1.0) - _2279;
        float _2282 = _2279 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2278 > _2282) || ((_2278 < _2280) || ((_2277 > _2282) || ((_2277 < _2280) || ((_2276 < _2280) || (_2276 > _2282))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2400 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2278, cbModelParam._m0[17u].z, fma(_2277, cbModelParam._m0[17u].y, _2276 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2278, cbModelParam._m0[18u].z, fma(_2277, cbModelParam._m0[18u].y, _2276 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2278, cbModelParam._m0[19u].z, fma(_2277, cbModelParam._m0[19u].y, _2276 * cbModelParam._m0[19u].x))), _1429);
            frontier_phi_24_49_ladder = _2400.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2400.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2400.x * cbModelParam._m0[1u].z;
        }
        _1522 = frontier_phi_24_49_ladder_2;
        _1524 = frontier_phi_24_49_ladder_1;
        _1526 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1506 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_525, _526, _527), _1429);
        _1522 = _1506.x * cbModelParam._m0[1u].z;
        _1524 = _1506.y * cbModelParam._m0[1u].z;
        _1526 = _1506.z * cbModelParam._m0[1u].z;
    }
    float _1539 = (((_552 * _502) + _553) * _517) * ((cbModelParam._m0[1u].w * (_1522 - _1420)) + _1420);
    float _1541 = (((_552 * _504) + _553) * _517) * ((cbModelParam._m0[1u].w * (_1524 - _1422)) + _1422);
    float _1543 = (((_552 * _505) + _553) * _517) * ((cbModelParam._m0[1u].w * (_1526 - _1424)) + _1424);
    float _1546 = fma(_1543, cbSceneParam._m0[89u].z, fma(_1541, cbSceneParam._m0[89u].y, _1539 * cbSceneParam._m0[89u].x));
    float _1549 = fma(_1543, cbSceneParam._m0[90u].z, fma(_1541, cbSceneParam._m0[90u].y, _1539 * cbSceneParam._m0[90u].x));
    float _1552 = fma(_1543, cbSceneParam._m0[91u].z, fma(_1541, cbSceneParam._m0[91u].y, _1539 * cbSceneParam._m0[91u].x));
    float _1587 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1591 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1595 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1599 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1600 = _1587 / _1599;
    float _1601 = _1591 / _1599;
    float _1602 = _1595 / _1599;
    float _1749;
    float _1750;
    float _1751;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1629 = ((uint(_1602 > cbSceneParam._m0[59u].y) + uint(_1602 > cbSceneParam._m0[59u].x)) + uint(_1602 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1630 = _1629 + 43u;
        uint _1638 = _1629 + 44u;
        uint _1646 = _1629 + 45u;
        uint _1654 = _1629 + 46u;
        float _1665 = fma(_1599, cbSceneParam._m0[_1630].w, fma(_1595, cbSceneParam._m0[_1630].z, fma(_1591, cbSceneParam._m0[_1630].y, _1587 * cbSceneParam._m0[_1630].x)));
        float _1669 = fma(_1599, cbSceneParam._m0[_1638].w, fma(_1595, cbSceneParam._m0[_1638].z, fma(_1591, cbSceneParam._m0[_1638].y, _1587 * cbSceneParam._m0[_1638].x)));
        float _1677 = fma(_1599, cbSceneParam._m0[_1654].w, fma(_1595, cbSceneParam._m0[_1654].z, fma(_1591, cbSceneParam._m0[_1654].y, _1587 * cbSceneParam._m0[_1654].x)));
        float _1682 = cbSceneParam._m0[33u].z * _1677;
        float _1684 = cbSceneParam._m0[33u].w * _1677;
        float _1687 = fma(_1599, cbSceneParam._m0[_1646].w, fma(_1595, cbSceneParam._m0[_1646].z, fma(_1591, cbSceneParam._m0[_1646].y, _1587 * cbSceneParam._m0[_1646].x))) / _1677;
        float _1735 = (cbSceneParam._m0[33u].x - sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602))) * cbSceneParam._m0[33u].y;
        float _3980 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1742 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1682 + _1665) / _1677, (_1684 + _1669) / _1677), _1687), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1684 + _1665) / _1677, (_1669 - _1682) / _1677), _1687), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1665 - _1682) / _1677, (_1669 - _1684) / _1677), _1687), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1665 - _1684) / _1677, (_1682 + _1669) / _1677), _1687), 0.0)).x), vec4(0.25)));
        _1749 = 1.0 - (_1742 * cbSceneParam._m0[34u].x);
        _1750 = 1.0 - (_1742 * cbSceneParam._m0[34u].y);
        _1751 = 1.0 - (_1742 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1749 = 1.0;
        _1750 = 1.0;
        _1751 = 1.0;
    }
    float _1815;
    float _1817;
    float _1819;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1803 = fma(_1599, cbSceneParam._m0[63u].w, fma(_1595, cbSceneParam._m0[63u].z, fma(_1591, cbSceneParam._m0[63u].y, _1587 * cbSceneParam._m0[63u].x)));
        float _1804 = fma(_1599, cbSceneParam._m0[60u].w, fma(_1595, cbSceneParam._m0[60u].z, fma(_1591, cbSceneParam._m0[60u].y, _1587 * cbSceneParam._m0[60u].x))) / _1803;
        float _1805 = fma(_1599, cbSceneParam._m0[61u].w, fma(_1595, cbSceneParam._m0[61u].z, fma(_1591, cbSceneParam._m0[61u].y, _1587 * cbSceneParam._m0[61u].x))) / _1803;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1804 >= cbSceneParam._m0[64u].x) && (_1805 >= cbSceneParam._m0[64u].y)) && (_1804 <= cbSceneParam._m0[64u].z)) && (_1805 <= cbSceneParam._m0[64u].w))
        {
            float _1944 = fma(_1599, cbSceneParam._m0[62u].w, fma(_1595, cbSceneParam._m0[62u].z, fma(_1591, cbSceneParam._m0[62u].y, _1587 * cbSceneParam._m0[62u].x))) / _1803;
            float _1948 = isnan(cbSceneParam._m0[41u].w) ? _1944 : (isnan(_1944) ? cbSceneParam._m0[41u].w : max(_1944, cbSceneParam._m0[41u].w));
            float _1991 = (cbSceneParam._m0[33u].x - sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602))) * cbSceneParam._m0[33u].y;
            float _3996 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
            float _1998 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1804, cbSceneParam._m0[33u].w + _1805), _1948), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1804, _1805 - cbSceneParam._m0[33u].z), _1948), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1804 - cbSceneParam._m0[33u].z, _1805 - cbSceneParam._m0[33u].w), _1948), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1804 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1805), _1948), 0.0)).x), vec4(0.25)));
            float _2002 = 1.0 - (_1998 * cbSceneParam._m0[34u].x);
            float _2003 = 1.0 - (_1998 * cbSceneParam._m0[34u].y);
            float _2004 = 1.0 - (_1998 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2003) ? _1750 : (isnan(_1750) ? _2003 : min(_1750, _2003));
            frontier_phi_36_35_ladder_1 = isnan(_2004) ? _1751 : (isnan(_1751) ? _2004 : min(_1751, _2004));
            frontier_phi_36_35_ladder_2 = isnan(_2002) ? _1749 : (isnan(_1749) ? _2002 : min(_1749, _2002));
        }
        else
        {
            frontier_phi_36_35_ladder = _1750;
            frontier_phi_36_35_ladder_1 = _1751;
            frontier_phi_36_35_ladder_2 = _1749;
        }
        _1815 = frontier_phi_36_35_ladder_2;
        _1817 = frontier_phi_36_35_ladder;
        _1819 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1815 = _1749;
        _1817 = _1750;
        _1819 = _1751;
    }
    uvec4 _1824 = floatBitsToUint(cbInstanceData._m0[_444 + 5u]);
    uint _1826 = _1824.x * 14u;
    uint _1827 = _1826 + 13u;
    float _1834 = _517 + (-1.0);
    float _1839 = (cbLight._m0[_1827].x * _1834) + 1.0;
    float _1840 = (cbLight._m0[_1827].y * _1834) + 1.0;
    float _1841 = (cbLight._m0[_1827].z * _1834) + 1.0;
    float _1842 = (cbLight._m0[_1827].w * _1834) + 1.0;
    uint _1843 = _1826 + 5u;
    float _1849 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
    uint _1853 = _1826 + 4u;
    float _1863 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
    uint _1867 = _1826 | 1u;
    float _1878 = dot(vec3(cbLight._m0[_1826].xyz), vec3(_297, _298, _299));
    float _1881 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_297, _298, _299));
    float _4032 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _4043 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1886 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * 0.3183098733425140380859375;
    float _1888 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * 0.3183098733425140380859375;
    float _1895 = ((cbLight._m0[_1843].x * _1849) * _1888) + (((cbLight._m0[_1853].x * _1815) * _1863) * _1886);
    float _1896 = ((_1849 * cbLight._m0[_1843].y) * _1888) + (((cbLight._m0[_1853].y * _1817) * _1863) * _1886);
    float _1897 = ((_1849 * cbLight._m0[_1843].z) * _1888) + (((cbLight._m0[_1853].z * _1819) * _1863) * _1886);
    uvec4 _1901 = floatBitsToUint(cbLight._m0[_1826 + 12u]);
    bool _1903 = _1901.x == 0u;
    float _2005;
    float _2007;
    float _2009;
    if (_1903)
    {
        _2005 = _1895;
        _2007 = _1896;
        _2009 = _1897;
    }
    else
    {
        uint _2013 = _1826 + 6u;
        float _2029 = (dot(vec3(cbLight._m0[_1826 + 2u].xyz), vec3(_297, _298, _299)) * 0.5) + 0.5;
        float _2030 = _2029 * _2029;
        float _4054 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2031 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2032 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
        _2005 = (((cbLight._m0[_2013].x * 0.3183098733425140380859375) * _2031) * _2032) + _1895;
        _2007 = (((cbLight._m0[_2013].y * 0.3183098733425140380859375) * _2031) * _2032) + _1896;
        _2009 = (((cbLight._m0[_2013].z * 0.3183098733425140380859375) * _2031) * _2032) + _1897;
    }
    bool _2012 = _1901.y == 0u;
    float _2067;
    float _2069;
    float _2071;
    if (_2012)
    {
        _2067 = _2005;
        _2069 = _2007;
        _2071 = _2009;
    }
    else
    {
        uint _2240 = _1826 + 7u;
        float _2256 = (dot(vec3(cbLight._m0[_1826 + 3u].xyz), vec3(_297, _298, _299)) * 0.5) + 0.5;
        float _2257 = _2256 * _2256;
        float _4070 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2258 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _2259 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
        _2067 = (((cbLight._m0[_2240].x * 0.3183098733425140380859375) * _2258) * _2259) + _2005;
        _2069 = (((cbLight._m0[_2240].y * 0.3183098733425140380859375) * _2258) * _2259) + _2007;
        _2071 = (((cbLight._m0[_2240].z * 0.3183098733425140380859375) * _2258) * _2259) + _2009;
    }
    uint _2074 = _1826 + 8u;
    float _2087 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1826].w)) * _431) * 0.949999988079071044921875);
    float _2088 = _2087 * _2087;
    float _2089 = cbLight._m0[_1826].x + _378;
    float _2090 = cbLight._m0[_1826].y + _379;
    float _2091 = cbLight._m0[_1826].z + _380;
    float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
    float _2096 = _2095 * _2089;
    float _2097 = _2095 * _2090;
    float _2098 = _2095 * _2091;
    float _2099 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1826].xyz));
    float _4086 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _2103 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _2104 = dot(vec3(_297, _298, _299), vec3(_2096, _2097, _2098));
    float _4108 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2107 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _2108 = dot(vec3(cbLight._m0[_1826].xyz), vec3(_2096, _2097, _2098));
    float _4119 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2112 = _2088 * _2088;
    float _2116 = ((_2107 * _2107) * (_2112 + (-1.0))) + 1.0;
    float _2124 = exp2(log2(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * 5.0);
    float _2125 = 0.959999978542327880859375 - _499;
    float _2127 = 0.959999978542327880859375 - _500;
    float _2128 = 0.959999978542327880859375 - _501;
    float _2135 = 1.0 - _2088;
    float _2146 = (0.5 / (((_2103 * ((_2102 * _2135) + _2088)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2135) + _2088) * _2102))) * _2102;
    float _4130 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2148 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2112 / ((_2116 * _2116) * 3.141590118408203125));
    uint _2162 = _1826 + 9u;
    float _2173 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1867].w)) * _431) * 0.949999988079071044921875);
    float _2174 = _2173 * _2173;
    float _2175 = cbLight._m0[_1867].x + _378;
    float _2176 = cbLight._m0[_1867].y + _379;
    float _2177 = cbLight._m0[_1867].z + _380;
    float _2181 = inversesqrt(dot(vec3(_2175, _2176, _2177), vec3(_2175, _2176, _2177)));
    float _2182 = _2181 * _2175;
    float _2183 = _2181 * _2176;
    float _2184 = _2181 * _2177;
    float _2185 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1867].xyz));
    float _4141 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2188 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _2189 = dot(vec3(_297, _298, _299), vec3(_2182, _2183, _2184));
    float _4152 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2193 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_2182, _2183, _2184));
    float _4163 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2197 = _2174 * _2174;
    float _2201 = ((_2192 * _2192) * (_2197 + (-1.0))) + 1.0;
    float _2208 = exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0);
    float _2215 = 1.0 - _2174;
    float _2225 = (0.5 / (((_2103 * ((_2188 * _2215) + _2174)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2215) + _2174) * _2188))) * _2188;
    float _4174 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2227 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2197 / ((_2201 * _2201) * 3.141590118408203125));
    float _2237 = (((((_2208 * _2125) + _502) * cbLight._m0[_2162].x) * _2227) * _1849) + ((((cbLight._m0[_2074].x * _1815) * ((_2124 * _2125) + _502)) * _2148) * _1863);
    float _2238 = (((((_2208 * _2127) + _504) * cbLight._m0[_2162].y) * _2227) * _1849) + ((((cbLight._m0[_2074].y * _1817) * ((_2124 * _2127) + _504)) * _2148) * _1863);
    float _2239 = (((((_2208 * _2128) + _505) * cbLight._m0[_2162].z) * _2227) * _1849) + ((((cbLight._m0[_2074].z * _1819) * ((_2124 * _2128) + _505)) * _2148) * _1863);
    float _2295;
    float _2297;
    float _2299;
    if (_1903)
    {
        _2295 = _2237;
        _2297 = _2238;
        _2299 = _2239;
    }
    else
    {
        uint _2301 = _1826 + 2u;
        uint _2305 = _1826 + 10u;
        float _2319 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2301].w)) * _431) * 0.949999988079071044921875);
        float _2320 = _2319 * _2319;
        float _2321 = cbLight._m0[_2301].x + _378;
        float _2322 = cbLight._m0[_2301].y + _379;
        float _2323 = cbLight._m0[_2301].z + _380;
        float _2327 = inversesqrt(dot(vec3(_2321, _2322, _2323), vec3(_2321, _2322, _2323)));
        float _2328 = _2327 * _2321;
        float _2329 = _2327 * _2322;
        float _2330 = _2327 * _2323;
        float _2331 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_2301].xyz));
        float _4185 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2334 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _2335 = dot(vec3(_297, _298, _299), vec3(_2328, _2329, _2330));
        float _4196 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2338 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2339 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_2328, _2329, _2330));
        float _4207 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2343 = _2320 * _2320;
        float _2347 = ((_2338 * _2338) * (_2343 + (-1.0))) + 1.0;
        float _2354 = exp2(log2(1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * 5.0);
        float _2361 = 1.0 - _2320;
        float _2371 = (0.5 / (((_2103 * ((_2334 * _2361) + _2320)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2361) + _2320) * _2334))) * _2334;
        float _4218 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2373 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2343 / ((_2347 * _2347) * 3.141590118408203125));
        float _2374 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
        _2295 = (((((_2354 * _2125) + _502) * cbLight._m0[_2305].x) * _2373) * _2374) + _2237;
        _2297 = (((((_2354 * _2127) + _504) * cbLight._m0[_2305].y) * _2373) * _2374) + _2238;
        _2299 = (((((_2354 * _2128) + _505) * cbLight._m0[_2305].z) * _2373) * _2374) + _2239;
    }
    float _2405;
    float _2407;
    float _2409;
    if (_2012)
    {
        _2405 = _2295;
        _2407 = _2297;
        _2409 = _2299;
    }
    else
    {
        uint _2416 = _1826 + 3u;
        uint _2420 = _1826 + 11u;
        float _2434 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2416].w)) * _431) * 0.949999988079071044921875);
        float _2435 = _2434 * _2434;
        float _2436 = cbLight._m0[_2416].x + _378;
        float _2437 = cbLight._m0[_2416].y + _379;
        float _2438 = cbLight._m0[_2416].z + _380;
        float _2442 = inversesqrt(dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438)));
        float _2443 = _2442 * _2436;
        float _2444 = _2442 * _2437;
        float _2445 = _2442 * _2438;
        float _2446 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_2416].xyz));
        float _4234 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2449 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2450 = dot(vec3(_297, _298, _299), vec3(_2443, _2444, _2445));
        float _4245 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2454 = dot(vec3(cbLight._m0[_2416].xyz), vec3(_2443, _2444, _2445));
        float _4256 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2458 = _2435 * _2435;
        float _2462 = ((_2453 * _2453) * (_2458 + (-1.0))) + 1.0;
        float _2469 = exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0);
        float _2476 = 1.0 - _2435;
        float _2486 = (0.5 / (((_2103 * ((_2449 * _2476) + _2435)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2476) + _2435) * _2449))) * _2449;
        float _4267 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2488 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2458 / ((_2462 * _2462) * 3.141590118408203125));
        float _2489 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
        _2405 = (((((_2469 * _2125) + _502) * cbLight._m0[_2420].x) * _2488) * _2489) + _2295;
        _2407 = (((((_2469 * _2127) + _504) * cbLight._m0[_2420].y) * _2488) * _2489) + _2297;
        _2409 = (((((_2469 * _2128) + _505) * cbLight._m0[_2420].z) * _2488) * _2489) + _2299;
    }
    float _2554;
    float _2556;
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    if (_1824.y == 0u)
    {
        uvec4 _2510 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2511 = _2510.x;
        uint _2522 = uint((float(_2510.y) * floor(float(uint(cbSceneParam._m0[85u].y * _387) / _2511))) + floor(float(uint(cbSceneParam._m0[85u].x * _386) / _2511)));
        float _2532 = (log2(_1602 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2533 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        uint _2536 = uint(isnan(14.0) ? _2533 : (isnan(_2533) ? 14.0 : min(_2533, 14.0)));
        uvec4 _2541 = texelFetch(g_lightClusterGridBuffer, int(((_2536 << 2u) + (_2522 << 6u)) >> 2u));
        uint _2542 = _2541.x;
        uint _2543 = _2510.z;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        if (((((1u << ((_2543 >> 4u) & 15u)) + 4294967295u) & _2542) == 0u) || ((_2543 & 240u) == 0u))
        {
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
        }
        else
        {
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2630;
            float _2632;
            float _2765 = 0.0;
            float _2766 = 0.0;
            float _2767 = 0.0;
            float _2768 = 0.0;
            float _2769 = 0.0;
            float _2770 = 0.0;
            uint _2771 = 0u;
            uint _2780;
            bool _2781;
            for (;;)
            {
                _2780 = texelFetch(g_lightClassification, int((((_2536 << 5u) + (_2522 << 9u)) + (_2771 << 2u)) >> 2u)).x;
                _2781 = _2780 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2781)
                {
                    frontier_phi_68_pred = _2770;
                    frontier_phi_68_pred_1 = _2769;
                    frontier_phi_68_pred_2 = _2768;
                    frontier_phi_68_pred_3 = _2766;
                    frontier_phi_68_pred_4 = _2765;
                    frontier_phi_68_pred_5 = _2767;
                }
                else
                {
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    uint _2895;
                    _2889 = _2765;
                    _2890 = _2766;
                    _2891 = _2767;
                    _2892 = _2768;
                    _2893 = _2769;
                    _2894 = _2770;
                    _2895 = _2780;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    for (;;)
                    {
                        uint _2899 = uint(findLSB(_2895)) + (_2771 << 5u);
                        uint _2896 = (_2895 + 4294967295u) & _2895;
                        uint _2901 = _2899 * 48u;
                        vec4 _2915 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2901)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 3u)).x));
                        uint _2921 = (_2899 * 48u) + 4u;
                        vec4 _2934 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2921)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 3u)).x));
                        uint _2940 = (_2899 * 48u) + 8u;
                        vec3 _2951 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2940)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 2u)).x));
                        float _2955 = _2915.x - _1600;
                        float _2956 = _2915.y - _1601;
                        float _2957 = _2915.z - _1602;
                        float _2958 = dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957));
                        float _2961 = inversesqrt(_2958);
                        float _2962 = _2961 * _2955;
                        float _2963 = _2961 * _2956;
                        float _2964 = _2961 * _2957;
                        float _2965 = dot(vec3(_412, _415, _418), vec3(_2962, _2963, _2964));
                        float _2970 = 1.0 - (_2958 * _2915.w);
                        float _4293 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2971 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                        float _2972 = sqrt(_2958) * _2934.w;
                        float _2975 = 1.39999997615814208984375 / (_2972 + 1.39999997615814208984375);
                        float _2976 = _2975 * _2975;
                        float _2979 = ((1.0 - _2976) * _2965) + _2976;
                        float _2982 = _2972 * _2972;
                        float _2986 = ((isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0))) * _2971) / ((_2982 * 0.699999988079071044921875) + 1.0);
                        float _2990 = (-0.0) - _1600;
                        float _2991 = (-0.0) - _1601;
                        float _2992 = (-0.0) - _1602;
                        float _2996 = inversesqrt(dot(vec3(_2990, _2991, _2992), vec3(_2990, _2991, _2992)));
                        float _2997 = _2996 * _2990;
                        float _2998 = _2996 * _2991;
                        float _2999 = _2996 * _2992;
                        float _3006 = exp2(log2(1.0 / ((_2982 * 3.5) + 5.0)) * 0.25);
                        float _3007 = 1.0 - _533;
                        float _3014 = sqrt(1.0 - ((1.0 - (_3007 * _3007)) * (1.0 - (_3006 * _3006))));
                        float _3015 = _3014 * _3014;
                        float _3016 = _3015 * _3015;
                        float _3017 = _2997 + _2962;
                        float _3018 = _2998 + _2963;
                        float _3019 = _2999 + _2964;
                        float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
                        float _3027 = dot(vec3(_412, _415, _418), vec3(_2997, _2998, _2999));
                        float _4309 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3030 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                        float _3031 = dot(vec3(_412, _415, _418), vec3(_3023 * _3017, _3023 * _3018, _3023 * _3019));
                        float _4320 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3034 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _3038 = ((_3034 * _3034) * (_3016 + (-1.0))) + 1.0;
                        float _3039 = _2975 * _3015;
                        float _3040 = _3039 * _3039;
                        float _3043 = ((1.0 - _3040) * _2965) + _3040;
                        float _4331 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3044 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _3045 = 1.0 - _3015;
                        float _3055 = (0.5 / (((_3044 * ((_3030 * _3045) + _3015)) + 9.9999999392252902907785028219223e-09) + (((_3044 * _3045) + _3015) * _3030))) * _3044;
                        float _4342 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3066 = (((_3016 * 3.1415927410125732421875) * (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) / ((_3038 * _3038) * ((_2982 * 2.1991131305694580078125) + 3.141590118408203125))) * _2971;
                        _2824 = (_2986 * _2934.x) + _2892;
                        _2825 = (_2986 * _2934.y) + _2893;
                        _2826 = (_2986 * _2934.z) + _2894;
                        _2821 = (_3066 * _2951.x) + _2889;
                        _2822 = (_3066 * _2951.y) + _2890;
                        _2823 = (_3066 * _2951.z) + _2891;
                        if (_2896 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2889 = _2821;
                            _2890 = _2822;
                            _2891 = _2823;
                            _2892 = _2824;
                            _2893 = _2825;
                            _2894 = _2826;
                            _2895 = _2896;
                        }
                    }
                    frontier_phi_68_pred = _2826;
                    frontier_phi_68_pred_1 = _2825;
                    frontier_phi_68_pred_2 = _2824;
                    frontier_phi_68_pred_3 = _2822;
                    frontier_phi_68_pred_4 = _2821;
                    frontier_phi_68_pred_5 = _2823;
                }
                _2632 = frontier_phi_68_pred;
                _2630 = frontier_phi_68_pred_1;
                _2628 = frontier_phi_68_pred_2;
                _2624 = frontier_phi_68_pred_3;
                _2622 = frontier_phi_68_pred_4;
                _2626 = frontier_phi_68_pred_5;
                uint _2772 = _2771 + 1u;
                if (_2772 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2765 = _2622;
                    _2766 = _2624;
                    _2767 = _2626;
                    _2768 = _2628;
                    _2769 = _2630;
                    _2770 = _2632;
                    _2771 = _2772;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
        }
        uvec4 _2635 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2636 = _2635.z;
        uint _2638 = (_2636 >> 8u) & 15u;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        if (((4294967295u << _2638) & _2542) == 0u)
        {
            _2733 = _2621;
            _2735 = _2623;
            _2737 = _2625;
            _2739 = _2627;
            _2741 = _2629;
            _2743 = _2631;
        }
        else
        {
            float _2758 = inversesqrt(dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602)));
            float _2759 = _2758 * _1600;
            float _2760 = _2758 * _1601;
            float _2761 = _2758 * _1602;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2638 < ((_2636 >> 12u) & 15u))
            {
                float _2734;
                float _2736;
                float _2738;
                float _2740;
                float _2742;
                float _2744;
                float _2872 = _2621;
                float _2873 = _2623;
                float _2874 = _2625;
                float _2875 = _2627;
                float _2876 = _2629;
                float _2877 = _2631;
                uint _2878 = _2638;
                uint _2887;
                bool _2888;
                for (;;)
                {
                    _2887 = texelFetch(g_lightClassification, int((((_2536 << 5u) + (_2522 << 9u)) + (_2878 << 2u)) >> 2u)).x;
                    _2888 = _2887 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2888)
                    {
                        frontier_phi_74_pred = _2874;
                        frontier_phi_74_pred_1 = _2873;
                        frontier_phi_74_pred_2 = _2872;
                        frontier_phi_74_pred_3 = _2877;
                        frontier_phi_74_pred_4 = _2876;
                        frontier_phi_74_pred_5 = _2875;
                    }
                    else
                    {
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3084 = _2872;
                        float _3085 = _2873;
                        float _3086 = _2874;
                        float _3087 = _2875;
                        float _3088 = _2876;
                        float _3089 = _2877;
                        uint _3090 = _2887;
                        uint _3091;
                        vec4 _3116;
                        float _3117;
                        vec4 _3132;
                        vec3 _3144;
                        vec4 _3160;
                        vec4 _3176;
                        float _3223;
                        bool _3224;
                        for (;;)
                        {
                            uint _3101 = ((_2878 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3090));
                            _3091 = (_3090 + 4294967295u) & _3090;
                            uint _3103 = _3101 * 40u;
                            _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            _3117 = _3116.w;
                            uint _3119 = (_3101 * 40u) + 4u;
                            _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            uint _3134 = (_3101 * 40u) + 8u;
                            _3144 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x));
                            uint _3147 = (_3101 * 40u) + 16u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3163 = (_3101 * 40u) + 20u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3179 = (_3101 * 40u) + 24u;
                            vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            uint _3198 = (_3101 * 40u) + 28u;
                            vec4 _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            _3223 = fma(_1602, _3211.z, fma(_1601, _3211.y, _3211.x * _1600)) + _3211.w;
                            _3224 = !((fma(_1602, _3192.z, fma(_1601, _3192.y, _3192.x * _1600)) + _3192.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3224)
                            {
                                float _3251 = _3116.x - _1600;
                                float _3252 = _3116.y - _1601;
                                float _3253 = _3116.z - _1602;
                                float _3254 = dot(vec3(_3251, _3252, _3253), vec3(_3251, _3252, _3253));
                                float _3257 = inversesqrt(_3254);
                                float _3258 = _3257 * _3251;
                                float _3259 = _3257 * _3252;
                                float _3260 = _3257 * _3253;
                                float _3264 = 1.0 - (_3254 / (_3117 * _3117));
                                float _4353 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3265 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3269 = sqrt(_3254) * _3132.w;
                                float _3271 = 1.39999997615814208984375 / (_3269 + 1.39999997615814208984375);
                                float _3272 = _3271 * _3271;
                                float _3275 = ((1.0 - _3272) * dot(vec3(_3258, _3259, _3260), vec3(_412, _415, _418))) + _3272;
                                float _3278 = _3269 * _3269;
                                float _3282 = (fma(_1602, _3160.z, fma(_1601, _3160.y, _3160.x * _1600)) + _3160.w) / _3223;
                                float _3283 = (fma(_1602, _3176.z, fma(_1601, _3176.y, _3176.x * _1600)) + _3176.w) / _3223;
                                float _3287 = 1.0 - dot(vec2(_3282, _3283), vec2(_3282, _3283));
                                float _4369 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3288 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                                float _3289 = _3288 * (((isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0))) * _3265) / ((_3278 * 0.699999988079071044921875) + 1.0));
                                float _3301 = exp2(log2(1.0 / ((_3278 * 3.5) + 5.0)) * 0.25);
                                float _3302 = 1.0 - _533;
                                float _3309 = sqrt(1.0 - ((1.0 - (_3302 * _3302)) * (1.0 - (_3301 * _3301))));
                                float _3310 = _3309 * _3309;
                                float _3311 = _3310 * _3310;
                                float _3312 = _3258 - _2759;
                                float _3313 = _3259 - _2760;
                                float _3314 = _3260 - _2761;
                                float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
                                float _3322 = dot(vec3(_412, _415, _418), vec3((-0.0) - _2759, (-0.0) - _2760, (-0.0) - _2761));
                                float _4380 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3325 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3326 = dot(vec3(_412, _415, _418), vec3(_3318 * _3312, _3318 * _3313, _3318 * _3314));
                                float _4391 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3329 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3333 = ((_3329 * _3329) * (_3311 + (-1.0))) + 1.0;
                                float _3334 = _3271 * _3310;
                                float _3335 = _3334 * _3334;
                                float _3341 = ((1.0 - _3335) * dot(vec3(_412, _415, _418), vec3(_3258, _3259, _3260))) + _3335;
                                float _4402 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3342 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3343 = 1.0 - _3310;
                                float _3353 = (0.5 / (((_3342 * ((_3325 * _3343) + _3310)) + 9.9999999392252902907785028219223e-09) + (((_3342 * _3343) + _3310) * _3325))) * _3342;
                                float _4413 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3363 = (_3288 * _3265) * (((_3311 * 3.1415927410125732421875) * (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) / ((_3333 * _3333) * ((_3278 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3363 * _3144.z;
                                frontier_phi_80_pred_1 = _3363 * _3144.y;
                                frontier_phi_80_pred_2 = _3363 * _3144.x;
                                frontier_phi_80_pred_3 = _3289 * _3132.z;
                                frontier_phi_80_pred_4 = _3289 * _3132.y;
                                frontier_phi_80_pred_5 = _3289 * _3132.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3369 = frontier_phi_80_pred;
                            _3368 = frontier_phi_80_pred_1;
                            _3367 = frontier_phi_80_pred_2;
                            _3372 = frontier_phi_80_pred_3;
                            _3371 = frontier_phi_80_pred_4;
                            _3370 = frontier_phi_80_pred_5;
                            _3074 = _3370 + _3087;
                            _3075 = _3371 + _3088;
                            _3076 = _3372 + _3089;
                            _3071 = _3367 + _3084;
                            _3072 = _3368 + _3085;
                            _3073 = _3369 + _3086;
                            if (_3091 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3091;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3073;
                        frontier_phi_74_pred_1 = _3072;
                        frontier_phi_74_pred_2 = _3071;
                        frontier_phi_74_pred_3 = _3076;
                        frontier_phi_74_pred_4 = _3075;
                        frontier_phi_74_pred_5 = _3074;
                    }
                    _2738 = frontier_phi_74_pred;
                    _2736 = frontier_phi_74_pred_1;
                    _2734 = frontier_phi_74_pred_2;
                    _2744 = frontier_phi_74_pred_3;
                    _2742 = frontier_phi_74_pred_4;
                    _2740 = frontier_phi_74_pred_5;
                    uint _2879 = _2878 + 1u;
                    if (_2879 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2872 = _2734;
                        _2873 = _2736;
                        _2874 = _2738;
                        _2875 = _2740;
                        _2876 = _2742;
                        _2877 = _2744;
                        _2878 = _2879;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2742;
                frontier_phi_62_63_ladder_1 = _2740;
                frontier_phi_62_63_ladder_2 = _2738;
                frontier_phi_62_63_ladder_3 = _2744;
                frontier_phi_62_63_ladder_4 = _2736;
                frontier_phi_62_63_ladder_5 = _2734;
            }
            else
            {
                frontier_phi_62_63_ladder = _2629;
                frontier_phi_62_63_ladder_1 = _2627;
                frontier_phi_62_63_ladder_2 = _2625;
                frontier_phi_62_63_ladder_3 = _2631;
                frontier_phi_62_63_ladder_4 = _2623;
                frontier_phi_62_63_ladder_5 = _2621;
            }
            _2733 = frontier_phi_62_63_ladder_5;
            _2735 = frontier_phi_62_63_ladder_4;
            _2737 = frontier_phi_62_63_ladder_2;
            _2739 = frontier_phi_62_63_ladder_1;
            _2741 = frontier_phi_62_63_ladder;
            _2743 = frontier_phi_62_63_ladder_3;
        }
        float _2748 = isnan(1.0) ? _517 : (isnan(_517) ? 1.0 : min(_517, 1.0));
        _2554 = (_2748 * _2739) + _2067;
        _2556 = (_2748 * _2741) + _2069;
        _2558 = (_2748 * _2743) + _2071;
        _2560 = ((_2733 * _502) * _2748) + _2405;
        _2562 = ((_2735 * _504) * _2748) + _2407;
        _2564 = ((_2737 * _505) * _2748) + _2409;
    }
    else
    {
        _2554 = _2067;
        _2556 = _2069;
        _2558 = _2071;
        _2560 = _2405;
        _2562 = _2407;
        _2564 = _2409;
    }
    float _4429 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _4440 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _4451 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    uint _2584 = _444 + 6u;
    float _2592 = _386 / cbSceneParam._m0[86u].x;
    float _2593 = _387 / cbSceneParam._m0[86u].y;
    vec4 _2607 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2592, _2593, (log2((isnan(cbSceneParam._m0[77u].w) ? _320 : (isnan(_320) ? cbSceneParam._m0[77u].w : min(_320, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2609 = _2607.x;
    float _2610 = _2607.y;
    float _2611 = _2607.z;
    float _2612 = _2607.w;
    float _2683;
    float _2685;
    float _2687;
    float _2689;
    if (_320 > cbSceneParam._m0[78u].w)
    {
        float _2646 = isnan(_320) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _320 : min(cbSceneParam._m0[80u].w, _320));
        float _2647 = _2646 / _320;
        float _2658 = _2647 * _371;
        float _2659 = _372 * _2647;
        float _2660 = (-0.0) - _2659;
        float _2661 = _2647 * _373;
        float _2663 = (cbSceneParam._m0[77u].w * _2660) / _2646;
        float _2664 = _2663 + cbSceneParam._m0[79u].w;
        float _2665 = cbSceneParam._m0[79u].w - _2659;
        float _2671 = sqrt(((_2658 * _2658) + (_2659 * _2659)) + (_2661 * _2661));
        float _2674 = (1.0 - (cbSceneParam._m0[77u].w / _2646)) * _2671;
        float _2679 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2681 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2834;
        if (abs((_2660 - _2663) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2834 = ((((_2664 > 0.0) ? exp2(_2679 * _2664) : (2.0 - exp2(_2681 * _2664))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2674;
        }
        else
        {
            float _2794 = 1.0 / cbSceneParam._m0[80u].x;
            float _2795 = isnan(_2665) ? _2664 : (isnan(_2664) ? _2665 : max(_2664, _2665));
            float _2796 = isnan(_2665) ? _2664 : (isnan(_2664) ? _2665 : min(_2664, _2665));
            float _2805 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : min(_2795, 0.0));
            float _2806 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : min(_2796, 0.0));
            _2834 = ((abs(_2671 / _2660) * cbSceneParam._m0[80u].y) * ((((_2805 - _2806) * 2.0) - ((exp2(_2679 * (isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0)))) - exp2(_2679 * (isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0))))) * _2794)) - ((exp2(_2681 * _2805) - exp2(_2681 * _2806)) * _2794))) + (_2674 * cbSceneParam._m0[80u].z);
        }
        vec4 _2836 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2592, _2593, 1.0), 0.0);
        float _2845 = exp2((_2834 * (-1.44269502162933349609375)) * (1.0 - _2836.w));
        float _2846 = log2(_2845);
        float _2862 = log2(_2612);
        _2683 = (exp2(_2862 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2846 * cbSceneParam._m0[78u].x)) * _2836.x) / cbSceneParam._m0[78u].x)) + _2609;
        _2685 = (exp2(_2862 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2846 * cbSceneParam._m0[78u].y)) * _2836.y) / cbSceneParam._m0[78u].y)) + _2610;
        _2687 = (exp2(_2862 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2846 * cbSceneParam._m0[78u].z)) * _2836.z) / cbSceneParam._m0[78u].z)) + _2611;
        _2689 = _2845 * _2612;
    }
    else
    {
        _2683 = _2609;
        _2685 = _2610;
        _2687 = _2611;
        _2689 = _2612;
    }
    float _2701 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2702 = _2701 == 3.0;
    float _2703 = log2(_2689);
    float _2710 = exp2(_2703 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2554 + ((isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))) * _517))) + ((_2560 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _1327)) * cbPerFrame._m0[3u].x));
    float _2711 = exp2(_2703 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2556 + ((isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))) * _517))) + ((_2562 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _1327)) * cbPerFrame._m0[3u].x));
    float _2712 = exp2(_2703 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2558 + ((isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))) * _517))) + ((_2564 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _1327)) * cbPerFrame._m0[3u].x));
    float _2721 = (_2701 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2721 * (_2702 ? _2710 : (_2710 + (cbSceneParam._m0[72u].w * _2683)));
    SV_Target.y = _2721 * (_2702 ? _2711 : (_2711 + (cbSceneParam._m0[72u].w * _2685)));
    SV_Target.z = _2721 * (_2702 ? _2712 : (_2712 + (cbSceneParam._m0[72u].w * _2687)));
    SV_Target.w = cbInstanceData._m0[_2584].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2584].w;
}


