#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _933;
float _3324;
float _3325;
float _3326;
float _3327;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    vec4 _242 = texture(sampler2D(C_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _248 = _242.x * cbMtdParam._m0[9u].x;
    float _249 = _242.y * cbMtdParam._m0[9u].y;
    float _250 = _242.z * cbMtdParam._m0[9u].z;
    vec4 _266 = texture(sampler2D(C_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _270 = _266.z;
    float _274 = (_266.x * 2.0) + (-1.0);
    float _276 = (_266.y * 2.0) + (-1.0);
    float _277 = dot(vec2(_274, _276), vec2(_274, _276));
    float _3336 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _283 = sqrt(1.0 - (isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0))));
    float _286 = fma(_283, _220, fma(_276, _212 * TANGENT.x, (_198 * _190) * _274));
    float _289 = fma(_283, _221, fma(_276, _212 * TANGENT.y, (_198 * _191) * _274));
    float _292 = fma(_283, _222, fma(_276, _212 * TANGENT.z, (_198 * _192) * _274));
    float _296 = inversesqrt(dot(vec3(_286, _289, _292), vec3(_286, _289, _292)));
    float _297 = _296 * _286;
    float _298 = _296 * _289;
    float _299 = _296 * _292;
    float _3347 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _300 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
    float _3358 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3369 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3380 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3391 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _304 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
    float _320 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _361 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _371 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _361);
    float _372 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _361);
    float _373 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _361);
    float _377 = inversesqrt(dot(vec3(_371, _372, _373), vec3(_371, _372, _373)));
    float _378 = _371 * _377;
    float _379 = _372 * _377;
    float _380 = _373 * _377;
    vec4 _385 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _387 = _385.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _612 = sqrt(((_371 * _371) + (_372 * _372)) + (_373 * _373));
        float _618 = (cbMatDynParam._m0[5u].x * _612) + cbMatDynParam._m0[5u].y;
        float _3402 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
        float _619 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _623 = (cbMatDynParam._m0[5u].z * _612) + cbMatDynParam._m0[5u].w;
        float _3413 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0))) - _619)) + _619) < ((_387 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _399 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _400 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _402 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _404 = _402.w;
    float _424 = fma(_299, cbSceneParam._m0[5u].z, fma(_298, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _297));
    float _427 = fma(_299, cbSceneParam._m0[6u].z, fma(_298, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _297));
    float _430 = fma(_299, cbSceneParam._m0[7u].z, fma(_298, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _297));
    vec4 _432 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _443 = (((_432.y - _300) + (_432.w * _300)) * cbMtdParam._m0[3u].x) + _300;
    uint _456 = uint(roundEven(NORMAL.w)) * 13u;
    uint _458 = _456 + 9u;
    uint _459 = _458 + uint(cbMatDynParam._m0[0u].w);
    float _465 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0)))) * cbInstanceData._m0[_459].x;
    float _466 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0)))) * cbInstanceData._m0[_459].y;
    float _467 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0)))) * cbInstanceData._m0[_459].z;
    float _3424 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _468 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
    float _3435 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _469 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
    float _3446 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _470 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    vec4 _471 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _476 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _487 = (((_476.x - _304) + (_476.w * _304)) * cbMtdParam._m0[3u].x) + _304;
    float _500 = (cbMtdParam._m0[3u].x * (((_468 * _404) - _468) + _471.x)) + _468;
    float _501 = (cbMtdParam._m0[3u].x * (((_469 * _404) - _469) + _471.y)) + _469;
    float _502 = (cbMtdParam._m0[3u].x * (((_470 * _404) - _470) + _471.z)) + _470;
    float _503 = 1.0 - _487;
    float _504 = _503 * _500;
    float _505 = _503 * _501;
    float _506 = _503 * _502;
    float _511 = (_500 + (-0.039999999105930328369140625)) * _487;
    float _512 = (_501 + (-0.039999999105930328369140625)) * _487;
    float _513 = (_502 + (-0.039999999105930328369140625)) * _487;
    float _514 = _511 + 0.039999999105930328369140625;
    float _516 = _512 + 0.039999999105930328369140625;
    float _517 = _513 + 0.039999999105930328369140625;
    vec4 _526 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _399, cbSceneParam._m0[86u].y * _400));
    float _529 = _526.x * TEXCOORD_4;
    float _530 = dot(vec3(_297, _298, _299), vec3(_378, _379, _380));
    float _533 = _530 * 2.0;
    float _537 = (_533 * _297) - _378;
    float _538 = (_533 * _298) - _379;
    float _539 = (_533 * _299) - _380;
    float _543 = abs(dot(vec3(_378, _379, _380), vec3(_297, _298, _299)));
    float _3457 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _545 = sqrt(_443);
    float _558 = exp2((_545 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_545 * 3.0));
    float _564 = (1.0 - _558) * ((_545 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _565 = _558 * _545;
    float _593 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _597 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _601 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _932;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _657 = fma(_601, cbModelParam._m0[26u].z, fma(_597, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _593));
        float _661 = fma(_601, cbModelParam._m0[27u].z, fma(_597, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _593));
        float _665 = fma(_601, cbModelParam._m0[28u].z, fma(_597, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _593));
        float _690 = _593 + _297;
        float _691 = _597 + _298;
        float _692 = _601 + _299;
        float _702 = fma(_692, cbModelParam._m0[26u].z, fma(_691, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _690)) - _657;
        float _703 = fma(_692, cbModelParam._m0[27u].z, fma(_691, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _690)) - _661;
        float _704 = fma(_692, cbModelParam._m0[28u].z, fma(_691, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _690)) - _665;
        float _708 = inversesqrt(dot(vec3(_702, _703, _704), vec3(_702, _703, _704)));
        float _721 = ((_708 * _702) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_657 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _722 = ((_708 * _703) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_661 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _723 = ((_708 * _704) / cbModelParam._m0[34u].z) + ((((((_665 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_721, _722, _723), 0.0);
        vec4 _733 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_721, _722, _723), 0.0);
        vec4 _740 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_721, _722, _723), 0.0);
        vec4 _747 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_721, _722, _723), 0.0);
        float _760 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _761 = _760 * (_726.x + (-0.5));
        float _762 = _760 * (_726.y + (-0.5));
        float _763 = _760 * (_726.z + (-0.5));
        float _770 = exp2((_733.w + (-0.5)) * 20.0) * 2.0;
        float _771 = _770 * (_733.x + (-0.5));
        float _772 = _770 * (_733.y + (-0.5));
        float _773 = _770 * (_733.z + (-0.5));
        float _780 = exp2((_740.w + (-0.5)) * 20.0) * 2.0;
        float _781 = _780 * (_740.x + (-0.5));
        float _782 = _780 * (_740.y + (-0.5));
        float _783 = _780 * (_740.z + (-0.5));
        float _790 = exp2((_747.w + (-0.5)) * 20.0) * 2.0;
        float _791 = _790 * (_747.x + (-0.5));
        float _792 = _790 * (_747.y + (-0.5));
        float _793 = _790 * (_747.z + (-0.5));
        float _794 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _795 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _796 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _797 = _761 * 0.5;
        float _798 = _771 * 0.5;
        float _799 = _781 * 0.5;
        float _800 = dot(vec3(_797, _798, _799), vec3(_797, _798, _799));
        float _805 = (_800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_800);
        float _814 = (dot(vec3(_297, _298, _299), vec3(_805 * _797, _805 * _798, _805 * _799)) + 1.0) * 0.5;
        float _3483 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _824 = sqrt(((_798 * _798) + (_797 * _797)) + (_799 * _799)) / (_794 + 9.9999997473787516355514526367188e-06);
        float _3494 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _826 = _825 * 2.0;
        float _830 = (1.0 - _825) / (_825 + 1.0);
        float _3505 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _840 = ((((1.0 - _831) * (_826 + 2.0)) * exp2(log2(isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))) * (_826 + 1.0))) + _831) * _794;
        float _841 = _762 * 0.5;
        float _842 = _772 * 0.5;
        float _843 = _782 * 0.5;
        float _844 = dot(vec3(_841, _842, _843), vec3(_841, _842, _843));
        float _849 = (_844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_844);
        float _857 = (dot(vec3(_297, _298, _299), vec3(_849 * _841, _849 * _842, _849 * _843)) + 1.0) * 0.5;
        float _3516 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _866 = sqrt(((_842 * _842) + (_841 * _841)) + (_843 * _843)) / (_795 + 9.9999997473787516355514526367188e-06);
        float _3527 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _868 = _867 * 2.0;
        float _872 = (1.0 - _867) / (_867 + 1.0);
        float _3538 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _882 = ((((1.0 - _873) * (_868 + 2.0)) * exp2(log2(isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * (_868 + 1.0))) + _873) * _795;
        float _883 = _763 * 0.5;
        float _884 = _773 * 0.5;
        float _885 = _783 * 0.5;
        float _886 = dot(vec3(_883, _884, _885), vec3(_883, _884, _885));
        float _891 = (_886 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_886);
        float _899 = (dot(vec3(_297, _298, _299), vec3(_891 * _883, _891 * _884, _891 * _885)) + 1.0) * 0.5;
        float _3549 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _908 = sqrt(((_884 * _884) + (_883 * _883)) + (_885 * _885)) / (_796 + 9.9999997473787516355514526367188e-06);
        float _3560 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _910 = _909 * 2.0;
        float _914 = (1.0 - _909) / (_909 + 1.0);
        float _3571 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _924 = ((((1.0 - _915) * (_910 + 2.0)) * exp2(log2(isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * (_910 + 1.0))) + _915) * _796;
        _932 = _763;
        _934 = _762;
        _935 = _761;
        _936 = _773;
        _937 = _772;
        _938 = _771;
        _939 = _783;
        _940 = _782;
        _941 = _781;
        _942 = _796;
        _943 = _795;
        _944 = _794;
        _945 = cbModelParam._m0[36u].z * (isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0)));
        _946 = cbModelParam._m0[36u].z * (isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0)));
        _947 = cbModelParam._m0[36u].z * (isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0)));
    }
    else
    {
        _932 = _933;
        _934 = _933;
        _935 = _933;
        _936 = _933;
        _937 = _933;
        _938 = _933;
        _939 = _933;
        _940 = _933;
        _941 = _933;
        _942 = _933;
        _943 = _933;
        _944 = _933;
        _945 = 0.0;
        _946 = 0.0;
        _947 = 0.0;
    }
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _976 = fma(_601, cbModelParam._m0[30u].z, fma(_597, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _593));
        float _980 = fma(_601, cbModelParam._m0[31u].z, fma(_597, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _593));
        float _984 = fma(_601, cbModelParam._m0[32u].z, fma(_597, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _593));
        float _1007 = _593 + _297;
        float _1008 = _597 + _298;
        float _1009 = _601 + _299;
        float _1019 = fma(_1009, cbModelParam._m0[30u].z, fma(_1008, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1007)) - _976;
        float _1020 = fma(_1009, cbModelParam._m0[31u].z, fma(_1008, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1007)) - _980;
        float _1021 = fma(_1009, cbModelParam._m0[32u].z, fma(_1008, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1007)) - _984;
        float _1025 = inversesqrt(dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021)));
        float _1038 = ((_1025 * _1019) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_976 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1039 = ((_1025 * _1020) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_980 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1040 = ((_1025 * _1021) / cbModelParam._m0[35u].z) + ((((((_984 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        float _1075 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1042.x + (-0.5));
        float _1077 = _1075 * (_1042.y + (-0.5));
        float _1078 = _1075 * (_1042.z + (-0.5));
        float _1085 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1049.x + (-0.5));
        float _1087 = _1085 * (_1049.y + (-0.5));
        float _1088 = _1085 * (_1049.z + (-0.5));
        float _1095 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1056.x + (-0.5));
        float _1097 = _1095 * (_1056.y + (-0.5));
        float _1098 = _1095 * (_1056.z + (-0.5));
        float _1105 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1063.x + (-0.5));
        float _1107 = _1105 * (_1063.y + (-0.5));
        float _1108 = _1105 * (_1063.z + (-0.5));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = _1076 * 0.5;
        float _1113 = _1086 * 0.5;
        float _1114 = _1096 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_297, _298, _299), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3612 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3623 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3634 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * (_1139 + 1.0))) + _1144) * _1109;
        float _1154 = _1077 * 0.5;
        float _1155 = _1087 * 0.5;
        float _1156 = _1097 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_297, _298, _299), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3645 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3656 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3667 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * (_1181 + 1.0))) + _1186) * _1110;
        float _1196 = _1078 * 0.5;
        float _1197 = _1088 * 0.5;
        float _1198 = _1098 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_297, _298, _299), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3678 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3689 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3700 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * (_1223 + 1.0))) + _1228) * _1111;
        _1245 = _1078;
        _1246 = _1077;
        _1247 = _1076;
        _1248 = _1088;
        _1249 = _1087;
        _1250 = _1086;
        _1251 = _1098;
        _1252 = _1097;
        _1253 = _1096;
        _1254 = _1111;
        _1255 = _1110;
        _1256 = _1109;
        _1257 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1258 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1259 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
    }
    else
    {
        _1245 = _933;
        _1246 = _933;
        _1247 = _933;
        _1248 = _933;
        _1249 = _933;
        _1250 = _933;
        _1251 = _933;
        _1252 = _933;
        _1253 = _933;
        _1254 = _933;
        _1255 = _933;
        _1256 = _933;
        _1257 = 0.0;
        _1258 = 0.0;
        _1259 = 0.0;
    }
    float _1269 = (cbModelParam._m0[1u].x * (_1257 - _945)) + _945;
    float _1270 = (cbModelParam._m0[1u].x * (_1258 - _946)) + _946;
    float _1271 = (cbModelParam._m0[1u].x * (_1259 - _947)) + _947;
    float _1292 = fma(_1271, cbSceneParam._m0[89u].z, fma(_1270, cbSceneParam._m0[89u].y, _1269 * cbSceneParam._m0[89u].x));
    float _1295 = fma(_1271, cbSceneParam._m0[90u].z, fma(_1270, cbSceneParam._m0[90u].y, _1269 * cbSceneParam._m0[90u].x));
    float _1298 = fma(_1271, cbSceneParam._m0[91u].z, fma(_1270, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1269));
    float _1313 = _537 * 0.5;
    float _1314 = _538 * 0.5;
    float _1315 = _539 * 0.5;
    float _1316 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_1247, _1250, _1253, _1256));
    float _1319 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_1246, _1249, _1252, _1255));
    float _1322 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_1245, _1248, _1251, _1254));
    float _1356;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1329 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_932, _936, _939, _942));
        float _1333 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_934, _937, _940, _943));
        float _1337 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_935, _938, _941, _944));
        float _1344 = dot(vec4(cbModelParam._m0[39u]), vec4(_1313, _1314, _1315, 1.0));
        _1356 = dot(vec3(isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)), isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1344) ? 0.0 : (isnan(0.0) ? _1344 : max(0.0, _1344))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1356 = 1.0;
    }
    float _1367;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1358 = dot(vec4(cbModelParam._m0[40u]), vec4(_1313, _1314, _1315, 1.0));
        _1367 = dot(vec3(isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)), isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1358) ? 0.0 : (isnan(0.0) ? _1358 : max(0.0, _1358))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1367 = 1.0;
    }
    float _1371 = (_1367 * cbModelParam._m0[1u].x) + (_1356 * (1.0 - cbModelParam._m0[1u].x));
    float _1381 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _443);
    float _1382 = isnan(_1381) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1381 : min(cbModelParam._m0[25u].z, _1381));
    float _1464;
    float _1466;
    float _1468;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1431 = fma(_601, cbModelParam._m0[13u].z, fma(_597, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _593)) + cbModelParam._m0[13u].w;
        float _1435 = fma(_601, cbModelParam._m0[14u].z, fma(_597, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _593)) + cbModelParam._m0[14u].w;
        float _1439 = fma(_601, cbModelParam._m0[15u].z, fma(_597, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _593)) + cbModelParam._m0[15u].w;
        float _1442 = fma(_539, cbModelParam._m0[13u].z, fma(_538, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _537));
        float _1445 = fma(_539, cbModelParam._m0[14u].z, fma(_538, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _537));
        float _1448 = fma(_539, cbModelParam._m0[15u].z, fma(_538, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _537));
        float _1476;
        if (_1442 > 0.0)
        {
            _1476 = abs((1.0 - _1431) / _1442);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1431 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1476 = frontier_phi_19_17_ladder;
        }
        float _1684;
        if (_1445 > 0.0)
        {
            _1684 = abs((1.0 - _1435) / _1445);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1435 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1684 = frontier_phi_28_24_ladder;
        }
        float _1938;
        if (_1448 > 0.0)
        {
            _1938 = abs((1.0 - _1439) / _1448);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1448 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1439 + 1.0) / _1448);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1938 = frontier_phi_40_35_ladder;
        }
        float _1940 = isnan(_1684) ? _1476 : (isnan(_1476) ? _1684 : min(_1476, _1684));
        float _1941 = isnan(_1938) ? _1940 : (isnan(_1940) ? _1938 : min(_1940, _1938));
        float _1945 = (_1941 * _1442) + _1431;
        float _1946 = (_1941 * _1445) + _1435;
        float _1947 = (_1941 * _1448) + _1439;
        float _1948 = _1941 * 9.9999997473787516355514526367188e-05;
        float _1950 = (-1.0) - _1948;
        float _1952 = _1948 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1947 > _1952) || ((_1947 < _1950) || ((_1946 > _1952) || ((_1946 < _1950) || ((_1945 < _1950) || (_1945 > _1952))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2075 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1947, cbModelParam._m0[9u].z, fma(_1946, cbModelParam._m0[9u].y, _1945 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1947, cbModelParam._m0[10u].z, fma(_1946, cbModelParam._m0[10u].y, _1945 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1947, cbModelParam._m0[11u].z, fma(_1946, cbModelParam._m0[11u].y, _1945 * cbModelParam._m0[11u].x))), _1382);
            frontier_phi_18_40_ladder = _2075.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2075.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2075.x * cbModelParam._m0[1u].y;
        }
        _1464 = frontier_phi_18_40_ladder_2;
        _1466 = frontier_phi_18_40_ladder_1;
        _1468 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1452 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_537, _538, _539), _1382);
        _1464 = _1452.x * cbModelParam._m0[1u].y;
        _1466 = _1452.y * cbModelParam._m0[1u].y;
        _1468 = _1452.z * cbModelParam._m0[1u].y;
    }
    float _1472 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _443);
    float _1473 = isnan(_1472) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1472 : min(cbModelParam._m0[25u].w, _1472));
    float _1566;
    float _1568;
    float _1570;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1530 = fma(_601, cbModelParam._m0[21u].z, fma(_597, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _593)) + cbModelParam._m0[21u].w;
        float _1534 = fma(_601, cbModelParam._m0[22u].z, fma(_597, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _593)) + cbModelParam._m0[22u].w;
        float _1538 = fma(_601, cbModelParam._m0[23u].z, fma(_597, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _593)) + cbModelParam._m0[23u].w;
        float _1541 = fma(_539, cbModelParam._m0[21u].z, fma(_538, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _537));
        float _1544 = fma(_539, cbModelParam._m0[22u].z, fma(_538, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _537));
        float _1547 = fma(_539, cbModelParam._m0[23u].z, fma(_538, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _537));
        float _1689;
        if (_1541 > 0.0)
        {
            _1689 = abs((1.0 - _1530) / _1541);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1530 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1689 = frontier_phi_30_26_ladder;
        }
        float _1965;
        if (_1544 > 0.0)
        {
            _1965 = abs((1.0 - _1534) / _1544);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1534 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1965 = frontier_phi_42_37_ladder;
        }
        float _2178;
        if (_1547 > 0.0)
        {
            _2178 = abs((1.0 - _1538) / _1547);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1538 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2178 = frontier_phi_51_48_ladder;
        }
        float _2180 = isnan(_1965) ? _1689 : (isnan(_1689) ? _1965 : min(_1689, _1965));
        float _2181 = isnan(_2178) ? _2180 : (isnan(_2180) ? _2178 : min(_2180, _2178));
        float _2185 = (_2181 * _1541) + _1530;
        float _2186 = (_2181 * _1544) + _1534;
        float _2187 = (_2181 * _1547) + _1538;
        float _2188 = _2181 * 9.9999997473787516355514526367188e-05;
        float _2189 = (-1.0) - _2188;
        float _2191 = _2188 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2187 > _2191) || ((_2187 < _2189) || ((_2186 > _2191) || ((_2186 < _2189) || ((_2185 < _2189) || (_2185 > _2191))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2385 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2187, cbModelParam._m0[17u].z, fma(_2186, cbModelParam._m0[17u].y, _2185 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2187, cbModelParam._m0[18u].z, fma(_2186, cbModelParam._m0[18u].y, _2185 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2187, cbModelParam._m0[19u].z, fma(_2186, cbModelParam._m0[19u].y, _2185 * cbModelParam._m0[19u].x))), _1473);
            frontier_phi_27_51_ladder = _2385.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2385.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2385.x * cbModelParam._m0[1u].z;
        }
        _1566 = frontier_phi_27_51_ladder_2;
        _1568 = frontier_phi_27_51_ladder_1;
        _1570 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1550 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_537, _538, _539), _1473);
        _1566 = _1550.x * cbModelParam._m0[1u].z;
        _1568 = _1550.y * cbModelParam._m0[1u].z;
        _1570 = _1550.z * cbModelParam._m0[1u].z;
    }
    float _1583 = (((_564 * _514) + _565) * _529) * ((cbModelParam._m0[1u].w * (_1566 - _1464)) + _1464);
    float _1585 = (((_564 * _516) + _565) * _529) * ((cbModelParam._m0[1u].w * (_1568 - _1466)) + _1466);
    float _1587 = (((_564 * _517) + _565) * _529) * ((cbModelParam._m0[1u].w * (_1570 - _1468)) + _1468);
    float _1590 = fma(_1587, cbSceneParam._m0[89u].z, fma(_1585, cbSceneParam._m0[89u].y, _1583 * cbSceneParam._m0[89u].x));
    float _1593 = fma(_1587, cbSceneParam._m0[90u].z, fma(_1585, cbSceneParam._m0[90u].y, _1583 * cbSceneParam._m0[90u].x));
    float _1596 = fma(_1587, cbSceneParam._m0[91u].z, fma(_1585, cbSceneParam._m0[91u].y, _1583 * cbSceneParam._m0[91u].x));
    uvec4 _1606 = floatBitsToUint(cbInstanceData._m0[_456 + 5u]);
    uint _1608 = _1606.x * 14u;
    uint _1609 = _1608 + 13u;
    float _1616 = _529 + (-1.0);
    float _1621 = (cbLight._m0[_1609].x * _1616) + 1.0;
    float _1622 = (cbLight._m0[_1609].y * _1616) + 1.0;
    float _1623 = (cbLight._m0[_1609].z * _1616) + 1.0;
    float _1624 = (cbLight._m0[_1609].w * _1616) + 1.0;
    uint _1625 = _1608 + 5u;
    float _1631 = isnan(1.0) ? _1622 : (isnan(_1622) ? 1.0 : min(_1622, 1.0));
    uint _1635 = _1608 + 4u;
    float _1642 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
    uint _1646 = _1608 | 1u;
    float _1657 = dot(vec3(cbLight._m0[_1608].xyz), vec3(_297, _298, _299));
    float _1660 = dot(vec3(cbLight._m0[_1646].xyz), vec3(_297, _298, _299));
    float _3836 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _3847 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1665 = (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * 0.3183098733425140380859375;
    float _1667 = (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * 0.3183098733425140380859375;
    float _1674 = ((cbLight._m0[_1625].x * _1631) * _1667) + ((cbLight._m0[_1635].x * _1642) * _1665);
    float _1675 = ((_1631 * cbLight._m0[_1625].y) * _1667) + ((_1642 * cbLight._m0[_1635].y) * _1665);
    float _1676 = ((_1631 * cbLight._m0[_1625].z) * _1667) + ((_1642 * cbLight._m0[_1635].z) * _1665);
    uvec4 _1681 = floatBitsToUint(cbLight._m0[_1608 + 12u]);
    bool _1683 = _1681.x == 0u;
    float _1694;
    float _1696;
    float _1698;
    if (_1683)
    {
        _1694 = _1674;
        _1696 = _1675;
        _1698 = _1676;
    }
    else
    {
        uint _1702 = _1608 + 6u;
        float _1718 = (dot(vec3(cbLight._m0[_1608 + 2u].xyz), vec3(_297, _298, _299)) * 0.5) + 0.5;
        float _1719 = _1718 * _1718;
        float _3858 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1721 = isnan(1.0) ? _1623 : (isnan(_1623) ? 1.0 : min(_1623, 1.0));
        _1694 = (((cbLight._m0[_1702].x * 0.3183098733425140380859375) * _1720) * _1721) + _1674;
        _1696 = (((cbLight._m0[_1702].y * 0.3183098733425140380859375) * _1720) * _1721) + _1675;
        _1698 = (((cbLight._m0[_1702].z * 0.3183098733425140380859375) * _1720) * _1721) + _1676;
    }
    bool _1701 = _1681.y == 0u;
    float _1739;
    float _1741;
    float _1743;
    if (_1701)
    {
        _1739 = _1694;
        _1741 = _1696;
        _1743 = _1698;
    }
    else
    {
        uint _1909 = _1608 + 7u;
        float _1925 = (dot(vec3(cbLight._m0[_1608 + 3u].xyz), vec3(_297, _298, _299)) * 0.5) + 0.5;
        float _1926 = _1925 * _1925;
        float _3874 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1927 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1928 = isnan(1.0) ? _1624 : (isnan(_1624) ? 1.0 : min(_1624, 1.0));
        _1739 = (((cbLight._m0[_1909].x * 0.3183098733425140380859375) * _1927) * _1928) + _1694;
        _1741 = (((cbLight._m0[_1909].y * 0.3183098733425140380859375) * _1927) * _1928) + _1696;
        _1743 = (((cbLight._m0[_1909].z * 0.3183098733425140380859375) * _1927) * _1928) + _1698;
    }
    uint _1746 = _1608 + 8u;
    float _1759 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1608].w)) * _443) * 0.949999988079071044921875);
    float _1760 = _1759 * _1759;
    float _1761 = cbLight._m0[_1608].x + _378;
    float _1762 = cbLight._m0[_1608].y + _379;
    float _1763 = cbLight._m0[_1608].z + _380;
    float _1767 = inversesqrt(dot(vec3(_1761, _1762, _1763), vec3(_1761, _1762, _1763)));
    float _1768 = _1767 * _1761;
    float _1769 = _1767 * _1762;
    float _1770 = _1767 * _1763;
    float _1771 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1608].xyz));
    float _3890 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1774 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _3901 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _1775 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _1776 = dot(vec3(_297, _298, _299), vec3(_1768, _1769, _1770));
    float _3912 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1779 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _1780 = dot(vec3(cbLight._m0[_1608].xyz), vec3(_1768, _1769, _1770));
    float _3923 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1784 = _1760 * _1760;
    float _1788 = ((_1779 * _1779) * (_1784 + (-1.0))) + 1.0;
    float _1796 = exp2(log2(1.0 - (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * 5.0);
    float _1797 = 0.959999978542327880859375 - _511;
    float _1799 = 0.959999978542327880859375 - _512;
    float _1800 = 0.959999978542327880859375 - _513;
    float _1807 = 1.0 - _1760;
    float _1818 = (0.5 / (((_1775 * ((_1774 * _1807) + _1760)) + 9.9999999392252902907785028219223e-09) + (((_1775 * _1807) + _1760) * _1774))) * _1774;
    float _3934 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1820 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1784 / ((_1788 * _1788) * 3.141590118408203125));
    uint _1831 = _1608 + 9u;
    float _1842 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1646].w)) * _443) * 0.949999988079071044921875);
    float _1843 = _1842 * _1842;
    float _1844 = cbLight._m0[_1646].x + _378;
    float _1845 = cbLight._m0[_1646].y + _379;
    float _1846 = cbLight._m0[_1646].z + _380;
    float _1850 = inversesqrt(dot(vec3(_1844, _1845, _1846), vec3(_1844, _1845, _1846)));
    float _1851 = _1850 * _1844;
    float _1852 = _1850 * _1845;
    float _1853 = _1850 * _1846;
    float _1854 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1646].xyz));
    float _3945 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1857 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _1858 = dot(vec3(_297, _298, _299), vec3(_1851, _1852, _1853));
    float _3956 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1861 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _1862 = dot(vec3(cbLight._m0[_1646].xyz), vec3(_1851, _1852, _1853));
    float _3967 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1866 = _1843 * _1843;
    float _1870 = ((_1861 * _1861) * (_1866 + (-1.0))) + 1.0;
    float _1877 = exp2(log2(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * 5.0);
    float _1884 = 1.0 - _1843;
    float _1894 = (0.5 / (((_1775 * ((_1857 * _1884) + _1843)) + 9.9999999392252902907785028219223e-09) + (((_1775 * _1884) + _1843) * _1857))) * _1857;
    float _3978 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1896 = (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1866 / ((_1870 * _1870) * 3.141590118408203125));
    float _1906 = (((((_1877 * _1797) + _514) * cbLight._m0[_1831].x) * _1896) * _1631) + (((((_1796 * _1797) + _514) * cbLight._m0[_1746].x) * _1820) * _1642);
    float _1907 = (((((_1877 * _1799) + _516) * cbLight._m0[_1831].y) * _1896) * _1631) + (((((_1796 * _1799) + _516) * cbLight._m0[_1746].y) * _1820) * _1642);
    float _1908 = (((((_1877 * _1800) + _517) * cbLight._m0[_1831].z) * _1896) * _1631) + (((((_1796 * _1800) + _517) * cbLight._m0[_1746].z) * _1820) * _1642);
    float _1970;
    float _1972;
    float _1974;
    if (_1683)
    {
        _1970 = _1906;
        _1972 = _1907;
        _1974 = _1908;
    }
    else
    {
        uint _1976 = _1608 + 2u;
        uint _1980 = _1608 + 10u;
        float _1994 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1976].w)) * _443) * 0.949999988079071044921875);
        float _1995 = _1994 * _1994;
        float _1996 = cbLight._m0[_1976].x + _378;
        float _1997 = cbLight._m0[_1976].y + _379;
        float _1998 = cbLight._m0[_1976].z + _380;
        float _2002 = inversesqrt(dot(vec3(_1996, _1997, _1998), vec3(_1996, _1997, _1998)));
        float _2003 = _2002 * _1996;
        float _2004 = _2002 * _1997;
        float _2005 = _2002 * _1998;
        float _2006 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1976].xyz));
        float _3989 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2009 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _2010 = dot(vec3(_297, _298, _299), vec3(_2003, _2004, _2005));
        float _4000 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2013 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _2014 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_2003, _2004, _2005));
        float _4011 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2018 = _1995 * _1995;
        float _2022 = ((_2013 * _2013) * (_2018 + (-1.0))) + 1.0;
        float _2029 = exp2(log2(1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * 5.0);
        float _2036 = 1.0 - _1995;
        float _2046 = (0.5 / (((_1775 * ((_2009 * _2036) + _1995)) + 9.9999999392252902907785028219223e-09) + (((_1775 * _2036) + _1995) * _2009))) * _2009;
        float _4022 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2048 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_2018 / ((_2022 * _2022) * 3.141590118408203125));
        float _2049 = isnan(1.0) ? _1623 : (isnan(_1623) ? 1.0 : min(_1623, 1.0));
        _1970 = (((((_2029 * _1797) + _514) * cbLight._m0[_1980].x) * _2048) * _2049) + _1906;
        _1972 = (((((_2029 * _1799) + _516) * cbLight._m0[_1980].y) * _2048) * _2049) + _1907;
        _1974 = (((((_2029 * _1800) + _517) * cbLight._m0[_1980].z) * _2048) * _2049) + _1908;
    }
    float _2084;
    float _2086;
    float _2088;
    if (_1701)
    {
        _2084 = _1970;
        _2086 = _1972;
        _2088 = _1974;
    }
    else
    {
        uint _2095 = _1608 + 3u;
        uint _2099 = _1608 + 11u;
        float _2113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2095].w)) * _443) * 0.949999988079071044921875);
        float _2114 = _2113 * _2113;
        float _2115 = cbLight._m0[_2095].x + _378;
        float _2116 = cbLight._m0[_2095].y + _379;
        float _2117 = cbLight._m0[_2095].z + _380;
        float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
        float _2122 = _2121 * _2115;
        float _2123 = _2121 * _2116;
        float _2124 = _2121 * _2117;
        float _2125 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_2095].xyz));
        float _4038 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2128 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _2129 = dot(vec3(_297, _298, _299), vec3(_2122, _2123, _2124));
        float _4049 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2132 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _2133 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2122, _2123, _2124));
        float _4060 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2137 = _2114 * _2114;
        float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
        float _2148 = exp2(log2(1.0 - (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * 5.0);
        float _2155 = 1.0 - _2114;
        float _2165 = (0.5 / (((_1775 * ((_2128 * _2155) + _2114)) + 9.9999999392252902907785028219223e-09) + (((_1775 * _2155) + _2114) * _2128))) * _2128;
        float _4071 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2167 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
        float _2168 = isnan(1.0) ? _1624 : (isnan(_1624) ? 1.0 : min(_1624, 1.0));
        _2084 = (((((_2148 * _1797) + _514) * cbLight._m0[_2099].x) * _2167) * _2168) + _1970;
        _2086 = (((((_2148 * _1799) + _516) * cbLight._m0[_2099].y) * _2167) * _2168) + _1972;
        _2088 = (((((_2148 * _1800) + _517) * cbLight._m0[_2099].z) * _2167) * _2168) + _1974;
    }
    float _2302;
    float _2304;
    float _2306;
    float _2308;
    float _2310;
    float _2312;
    if (_1606.y == 0u)
    {
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2244 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2243;
        float _2245 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2243;
        float _2246 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2243;
        uvec4 _2258 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2259 = _2258.x;
        uint _2270 = uint((float(_2258.y) * floor(float(uint(cbSceneParam._m0[85u].y * _400) / _2259))) + floor(float(uint(cbSceneParam._m0[85u].x * _399) / _2259)));
        float _2280 = (log2(_2246 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2281 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        uint _2284 = uint(isnan(14.0) ? _2281 : (isnan(_2281) ? 14.0 : min(_2281, 14.0)));
        uvec4 _2289 = texelFetch(g_lightClusterGridBuffer, int(((_2284 << 2u) + (_2270 << 6u)) >> 2u));
        uint _2290 = _2289.x;
        uint _2291 = _2258.z;
        float _2390;
        float _2392;
        float _2394;
        float _2396;
        float _2398;
        float _2400;
        if (((((1u << ((_2291 >> 4u) & 15u)) + 4294967295u) & _2290) == 0u) || ((_2291 & 240u) == 0u))
        {
            _2390 = 0.0;
            _2392 = 0.0;
            _2394 = 0.0;
            _2396 = 0.0;
            _2398 = 0.0;
            _2400 = 0.0;
        }
        else
        {
            float _2391;
            float _2393;
            float _2395;
            float _2397;
            float _2399;
            float _2401;
            float _2542 = 0.0;
            float _2543 = 0.0;
            float _2544 = 0.0;
            float _2545 = 0.0;
            float _2546 = 0.0;
            float _2547 = 0.0;
            uint _2548 = 0u;
            uint _2557;
            bool _2558;
            for (;;)
            {
                _2557 = texelFetch(g_lightClassification, int((((_2284 << 5u) + (_2270 << 9u)) + (_2548 << 2u)) >> 2u)).x;
                _2558 = _2557 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2558)
                {
                    frontier_phi_68_pred = _2544;
                    frontier_phi_68_pred_1 = _2547;
                    frontier_phi_68_pred_2 = _2546;
                    frontier_phi_68_pred_3 = _2545;
                    frontier_phi_68_pred_4 = _2543;
                    frontier_phi_68_pred_5 = _2542;
                }
                else
                {
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    uint _2693;
                    _2687 = _2542;
                    _2688 = _2543;
                    _2689 = _2544;
                    _2690 = _2545;
                    _2691 = _2546;
                    _2692 = _2547;
                    _2693 = _2557;
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    for (;;)
                    {
                        uint _2697 = uint(findLSB(_2693)) + (_2548 << 5u);
                        uint _2694 = (_2693 + 4294967295u) & _2693;
                        uint _2699 = _2697 * 48u;
                        vec4 _2713 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2699)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 3u)).x));
                        uint _2719 = (_2697 * 48u) + 4u;
                        vec4 _2732 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2719)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 3u)).x));
                        uint _2738 = (_2697 * 48u) + 8u;
                        vec3 _2749 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2738)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 2u)).x));
                        float _2753 = _2713.x - _2244;
                        float _2754 = _2713.y - _2245;
                        float _2755 = _2713.z - _2246;
                        float _2756 = dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755));
                        float _2759 = inversesqrt(_2756);
                        float _2760 = _2759 * _2753;
                        float _2761 = _2759 * _2754;
                        float _2762 = _2759 * _2755;
                        float _2763 = dot(vec3(_424, _427, _430), vec3(_2760, _2761, _2762));
                        float _2768 = 1.0 - (_2756 * _2713.w);
                        float _4097 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                        float _2769 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                        float _2770 = sqrt(_2756) * _2732.w;
                        float _2773 = 1.39999997615814208984375 / (_2770 + 1.39999997615814208984375);
                        float _2774 = _2773 * _2773;
                        float _2777 = ((1.0 - _2774) * _2763) + _2774;
                        float _2780 = _2770 * _2770;
                        float _2784 = ((isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0))) * _2769) / ((_2780 * 0.699999988079071044921875) + 1.0);
                        float _2788 = (-0.0) - _2244;
                        float _2789 = (-0.0) - _2245;
                        float _2790 = (-0.0) - _2246;
                        float _2794 = inversesqrt(dot(vec3(_2788, _2789, _2790), vec3(_2788, _2789, _2790)));
                        float _2795 = _2794 * _2788;
                        float _2796 = _2794 * _2789;
                        float _2797 = _2794 * _2790;
                        float _2805 = exp2(log2(1.0 / ((_2780 * 3.5) + 5.0)) * 0.25);
                        float _2806 = 1.0 - _545;
                        float _2813 = sqrt(1.0 - ((1.0 - (_2806 * _2806)) * (1.0 - (_2805 * _2805))));
                        float _2814 = _2813 * _2813;
                        float _2815 = _2814 * _2814;
                        float _2816 = _2795 + _2760;
                        float _2817 = _2796 + _2761;
                        float _2818 = _2797 + _2762;
                        float _2822 = inversesqrt(dot(vec3(_2816, _2817, _2818), vec3(_2816, _2817, _2818)));
                        float _2826 = dot(vec3(_424, _427, _430), vec3(_2795, _2796, _2797));
                        float _4113 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2829 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                        float _2830 = dot(vec3(_424, _427, _430), vec3(_2822 * _2816, _2822 * _2817, _2822 * _2818));
                        float _4124 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2833 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                        float _2837 = ((_2833 * _2833) * (_2815 + (-1.0))) + 1.0;
                        float _2838 = _2773 * _2814;
                        float _2839 = _2838 * _2838;
                        float _2842 = ((1.0 - _2839) * _2763) + _2839;
                        float _4135 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                        float _2843 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                        float _2844 = 1.0 - _2814;
                        float _2854 = (0.5 / (((_2843 * ((_2829 * _2844) + _2814)) + 9.9999999392252902907785028219223e-09) + (((_2843 * _2844) + _2814) * _2829))) * _2843;
                        float _4146 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
                        float _2865 = (((_2815 * 3.1415927410125732421875) * (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) / ((_2837 * _2837) * ((_2780 * 2.1991131305694580078125) + 3.141590118408203125))) * _2769;
                        _2617 = (_2784 * _2732.x) + _2690;
                        _2618 = (_2784 * _2732.y) + _2691;
                        _2619 = (_2784 * _2732.z) + _2692;
                        _2614 = (_2865 * _2749.x) + _2687;
                        _2615 = (_2865 * _2749.y) + _2688;
                        _2616 = (_2865 * _2749.z) + _2689;
                        if (_2694 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2687 = _2614;
                            _2688 = _2615;
                            _2689 = _2616;
                            _2690 = _2617;
                            _2691 = _2618;
                            _2692 = _2619;
                            _2693 = _2694;
                        }
                    }
                    frontier_phi_68_pred = _2616;
                    frontier_phi_68_pred_1 = _2619;
                    frontier_phi_68_pred_2 = _2618;
                    frontier_phi_68_pred_3 = _2617;
                    frontier_phi_68_pred_4 = _2615;
                    frontier_phi_68_pred_5 = _2614;
                }
                _2395 = frontier_phi_68_pred;
                _2401 = frontier_phi_68_pred_1;
                _2399 = frontier_phi_68_pred_2;
                _2397 = frontier_phi_68_pred_3;
                _2393 = frontier_phi_68_pred_4;
                _2391 = frontier_phi_68_pred_5;
                uint _2549 = _2548 + 1u;
                if (_2549 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2542 = _2391;
                    _2543 = _2393;
                    _2544 = _2395;
                    _2545 = _2397;
                    _2546 = _2399;
                    _2547 = _2401;
                    _2548 = _2549;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2390 = _2391;
            _2392 = _2393;
            _2394 = _2395;
            _2396 = _2397;
            _2398 = _2399;
            _2400 = _2401;
        }
        uvec4 _2404 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2405 = _2404.z;
        uint _2407 = (_2405 >> 8u) & 15u;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        if (((4294967295u << _2407) & _2290) == 0u)
        {
            _2510 = _2390;
            _2512 = _2392;
            _2514 = _2394;
            _2516 = _2396;
            _2518 = _2398;
            _2520 = _2400;
        }
        else
        {
            float _2535 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
            float _2536 = _2535 * _2244;
            float _2537 = _2535 * _2245;
            float _2538 = _2535 * _2246;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2407 < ((_2405 >> 12u) & 15u))
            {
                float _2511;
                float _2513;
                float _2515;
                float _2517;
                float _2519;
                float _2521;
                float _2670 = _2390;
                float _2671 = _2392;
                float _2672 = _2394;
                float _2673 = _2396;
                float _2674 = _2398;
                float _2675 = _2400;
                uint _2676 = _2407;
                uint _2685;
                bool _2686;
                for (;;)
                {
                    _2685 = texelFetch(g_lightClassification, int((((_2284 << 5u) + (_2270 << 9u)) + (_2676 << 2u)) >> 2u)).x;
                    _2686 = _2685 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2686)
                    {
                        frontier_phi_79_pred = _2675;
                        frontier_phi_79_pred_1 = _2674;
                        frontier_phi_79_pred_2 = _2673;
                        frontier_phi_79_pred_3 = _2672;
                        frontier_phi_79_pred_4 = _2671;
                        frontier_phi_79_pred_5 = _2670;
                    }
                    else
                    {
                        float _2879;
                        float _2880;
                        float _2881;
                        float _2882;
                        float _2883;
                        float _2884;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _2892 = _2670;
                        float _2893 = _2671;
                        float _2894 = _2672;
                        float _2895 = _2673;
                        float _2896 = _2674;
                        float _2897 = _2675;
                        uint _2898 = _2685;
                        uint _2899;
                        vec4 _2924;
                        float _2925;
                        vec4 _2940;
                        vec3 _2952;
                        vec4 _2968;
                        vec4 _2984;
                        float _3031;
                        bool _3032;
                        for (;;)
                        {
                            uint _2909 = ((_2676 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2898));
                            _2899 = (_2898 + 4294967295u) & _2898;
                            uint _2911 = _2909 * 40u;
                            _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            _2925 = _2924.w;
                            uint _2927 = (_2909 * 40u) + 4u;
                            _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            uint _2942 = (_2909 * 40u) + 8u;
                            _2952 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x));
                            uint _2955 = (_2909 * 40u) + 16u;
                            _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            uint _2971 = (_2909 * 40u) + 20u;
                            _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            uint _2987 = (_2909 * 40u) + 24u;
                            vec4 _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3006 = (_2909 * 40u) + 28u;
                            vec4 _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            _3031 = fma(_2246, _3019.z, fma(_2245, _3019.y, _3019.x * _2244)) + _3019.w;
                            _3032 = !((fma(_2246, _3000.z, fma(_2245, _3000.y, _3000.x * _2244)) + _3000.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3032)
                            {
                                float _3059 = _2924.x - _2244;
                                float _3060 = _2924.y - _2245;
                                float _3061 = _2924.z - _2246;
                                float _3062 = dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061));
                                float _3065 = inversesqrt(_3062);
                                float _3066 = _3065 * _3059;
                                float _3067 = _3065 * _3060;
                                float _3068 = _3065 * _3061;
                                float _3072 = 1.0 - (_3062 / (_2925 * _2925));
                                float _4157 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3073 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3077 = sqrt(_3062) * _2940.w;
                                float _3079 = 1.39999997615814208984375 / (_3077 + 1.39999997615814208984375);
                                float _3080 = _3079 * _3079;
                                float _3083 = ((1.0 - _3080) * dot(vec3(_3066, _3067, _3068), vec3(_424, _427, _430))) + _3080;
                                float _3086 = _3077 * _3077;
                                float _3090 = (fma(_2246, _2968.z, fma(_2245, _2968.y, _2968.x * _2244)) + _2968.w) / _3031;
                                float _3091 = (fma(_2246, _2984.z, fma(_2245, _2984.y, _2984.x * _2244)) + _2984.w) / _3031;
                                float _3095 = 1.0 - dot(vec2(_3090, _3091), vec2(_3090, _3091));
                                float _4173 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3096 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                                float _3097 = _3096 * (((isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0))) * _3073) / ((_3086 * 0.699999988079071044921875) + 1.0));
                                float _3109 = exp2(log2(1.0 / ((_3086 * 3.5) + 5.0)) * 0.25);
                                float _3110 = 1.0 - _545;
                                float _3117 = sqrt(1.0 - ((1.0 - (_3110 * _3110)) * (1.0 - (_3109 * _3109))));
                                float _3118 = _3117 * _3117;
                                float _3119 = _3118 * _3118;
                                float _3120 = _3066 - _2536;
                                float _3121 = _3067 - _2537;
                                float _3122 = _3068 - _2538;
                                float _3126 = inversesqrt(dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122)));
                                float _3130 = dot(vec3(_424, _427, _430), vec3((-0.0) - _2536, (-0.0) - _2537, (-0.0) - _2538));
                                float _4184 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3133 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                                float _3134 = dot(vec3(_424, _427, _430), vec3(_3126 * _3120, _3126 * _3121, _3126 * _3122));
                                float _4195 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3137 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                                float _3141 = ((_3137 * _3137) * (_3119 + (-1.0))) + 1.0;
                                float _3142 = _3079 * _3118;
                                float _3143 = _3142 * _3142;
                                float _3149 = ((1.0 - _3143) * dot(vec3(_424, _427, _430), vec3(_3066, _3067, _3068))) + _3143;
                                float _4206 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3150 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                                float _3151 = 1.0 - _3118;
                                float _3161 = (0.5 / (((_3150 * ((_3133 * _3151) + _3118)) + 9.9999999392252902907785028219223e-09) + (((_3150 * _3151) + _3118) * _3133))) * _3150;
                                float _4217 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3171 = (_3096 * _3073) * (((_3119 * 3.1415927410125732421875) * (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) / ((_3141 * _3141) * ((_3086 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3097 * _2940.z;
                                frontier_phi_85_pred_1 = _3097 * _2940.y;
                                frontier_phi_85_pred_2 = _3097 * _2940.x;
                                frontier_phi_85_pred_3 = _3171 * _2952.z;
                                frontier_phi_85_pred_4 = _3171 * _2952.y;
                                frontier_phi_85_pred_5 = _3171 * _2952.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3180 = frontier_phi_85_pred;
                            _3179 = frontier_phi_85_pred_1;
                            _3178 = frontier_phi_85_pred_2;
                            _3177 = frontier_phi_85_pred_3;
                            _3176 = frontier_phi_85_pred_4;
                            _3175 = frontier_phi_85_pred_5;
                            _2882 = _3178 + _2895;
                            _2883 = _3179 + _2896;
                            _2884 = _3180 + _2897;
                            _2879 = _3175 + _2892;
                            _2880 = _3176 + _2893;
                            _2881 = _3177 + _2894;
                            if (_2899 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2899;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2884;
                        frontier_phi_79_pred_1 = _2883;
                        frontier_phi_79_pred_2 = _2882;
                        frontier_phi_79_pred_3 = _2881;
                        frontier_phi_79_pred_4 = _2880;
                        frontier_phi_79_pred_5 = _2879;
                    }
                    _2521 = frontier_phi_79_pred;
                    _2519 = frontier_phi_79_pred_1;
                    _2517 = frontier_phi_79_pred_2;
                    _2515 = frontier_phi_79_pred_3;
                    _2513 = frontier_phi_79_pred_4;
                    _2511 = frontier_phi_79_pred_5;
                    uint _2677 = _2676 + 1u;
                    if (_2677 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2670 = _2511;
                        _2671 = _2513;
                        _2672 = _2515;
                        _2673 = _2517;
                        _2674 = _2519;
                        _2675 = _2521;
                        _2676 = _2677;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2517;
                frontier_phi_60_61_ladder_1 = _2521;
                frontier_phi_60_61_ladder_2 = _2519;
                frontier_phi_60_61_ladder_3 = _2515;
                frontier_phi_60_61_ladder_4 = _2513;
                frontier_phi_60_61_ladder_5 = _2511;
            }
            else
            {
                frontier_phi_60_61_ladder = _2396;
                frontier_phi_60_61_ladder_1 = _2400;
                frontier_phi_60_61_ladder_2 = _2398;
                frontier_phi_60_61_ladder_3 = _2394;
                frontier_phi_60_61_ladder_4 = _2392;
                frontier_phi_60_61_ladder_5 = _2390;
            }
            _2510 = frontier_phi_60_61_ladder_5;
            _2512 = frontier_phi_60_61_ladder_4;
            _2514 = frontier_phi_60_61_ladder_3;
            _2516 = frontier_phi_60_61_ladder;
            _2518 = frontier_phi_60_61_ladder_2;
            _2520 = frontier_phi_60_61_ladder_1;
        }
        float _2525 = isnan(1.0) ? _529 : (isnan(_529) ? 1.0 : min(_529, 1.0));
        _2302 = (_2525 * _2516) + _1739;
        _2304 = (_2525 * _2518) + _1741;
        _2306 = (_2525 * _2520) + _1743;
        _2308 = ((_2510 * _514) * _2525) + _2084;
        _2310 = ((_2512 * _516) * _2525) + _2086;
        _2312 = ((_2514 * _517) * _2525) + _2088;
    }
    else
    {
        _2302 = _1739;
        _2304 = _1741;
        _2306 = _1743;
        _2308 = _2084;
        _2310 = _2086;
        _2312 = _2088;
    }
    float _4233 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _4244 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _4255 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _2329 = ((isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2302 + ((isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))) * _529))) + ((_2308 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _1371)) * cbPerFrame._m0[3u].x);
    float _2330 = ((isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2304 + ((isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))) * _529))) + ((_2310 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _1371)) * cbPerFrame._m0[3u].x);
    float _2331 = ((isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2306 + ((isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))) * _529))) + ((_2312 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _1371)) * cbPerFrame._m0[3u].x);
    uint _2332 = _456 + 6u;
    float _2340 = _399 / cbSceneParam._m0[86u].x;
    float _2341 = _400 / cbSceneParam._m0[86u].y;
    vec4 _2355 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2340, _2341, (log2((isnan(cbSceneParam._m0[77u].w) ? _320 : (isnan(_320) ? cbSceneParam._m0[77u].w : min(_320, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2357 = _2355.x;
    float _2358 = _2355.y;
    float _2359 = _2355.z;
    float _2360 = _2355.w;
    float _2452;
    float _2454;
    float _2456;
    float _2458;
    if (_320 > cbSceneParam._m0[78u].w)
    {
        float _2415 = isnan(_320) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _320 : min(cbSceneParam._m0[80u].w, _320));
        float _2416 = _2415 / _320;
        float _2427 = _2416 * _371;
        float _2428 = _372 * _2416;
        float _2429 = (-0.0) - _2428;
        float _2430 = _2416 * _373;
        float _2432 = (cbSceneParam._m0[77u].w * _2429) / _2415;
        float _2433 = _2432 + cbSceneParam._m0[79u].w;
        float _2434 = cbSceneParam._m0[79u].w - _2428;
        float _2440 = sqrt(((_2427 * _2427) + (_2428 * _2428)) + (_2430 * _2430));
        float _2443 = (1.0 - (cbSceneParam._m0[77u].w / _2415)) * _2440;
        float _2448 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2450 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2627;
        if (abs((_2429 - _2432) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2627 = ((((_2433 > 0.0) ? exp2(_2448 * _2433) : (2.0 - exp2(_2450 * _2433))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2443;
        }
        else
        {
            float _2571 = 1.0 / cbSceneParam._m0[80u].x;
            float _2572 = isnan(_2434) ? _2433 : (isnan(_2433) ? _2434 : max(_2433, _2434));
            float _2573 = isnan(_2434) ? _2433 : (isnan(_2433) ? _2434 : min(_2433, _2434));
            float _2582 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : min(_2572, 0.0));
            float _2583 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : min(_2573, 0.0));
            _2627 = ((abs(_2440 / _2429) * cbSceneParam._m0[80u].y) * ((((_2582 - _2583) * 2.0) - ((exp2(_2448 * (isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0)))) - exp2(_2448 * (isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0))))) * _2571)) - ((exp2(_2450 * _2582) - exp2(_2450 * _2583)) * _2571))) + (_2443 * cbSceneParam._m0[80u].z);
        }
        vec4 _2629 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2340, _2341, 1.0), 0.0);
        float _2638 = exp2((_2627 * (-1.44269502162933349609375)) * (1.0 - _2629.w));
        float _2639 = log2(_2638);
        float _2655 = log2(_2360);
        _2452 = (exp2(_2655 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2639 * cbSceneParam._m0[78u].x)) * _2629.x) / cbSceneParam._m0[78u].x)) + _2357;
        _2454 = (exp2(_2655 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2639 * cbSceneParam._m0[78u].y)) * _2629.y) / cbSceneParam._m0[78u].y)) + _2358;
        _2456 = (exp2(_2655 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2639 * cbSceneParam._m0[78u].z)) * _2629.z) / cbSceneParam._m0[78u].z)) + _2359;
        _2458 = _2638 * _2360;
    }
    else
    {
        _2452 = _2357;
        _2454 = _2358;
        _2456 = _2359;
        _2458 = _2360;
    }
    bool _2665;
    vec4 _2468;
    vec4 _2490;
    float _2492;
    float _2496;
    float _2497;
    float _2498;
    float _2499;
    bool _2509;
    for (;;)
    {
        _2468 = cbMatDynParam._m0[0u];
        float _2470 = roundEven(_2468.y);
        bool _2471 = _2470 == 3.0;
        float _2472 = log2(_2458);
        float _2479 = exp2(_2472 * cbSceneParam._m0[78u].x) * _2329;
        float _2480 = exp2(_2472 * cbSceneParam._m0[78u].y) * _2330;
        float _2481 = exp2(_2472 * cbSceneParam._m0[78u].z) * _2331;
        float _2488 = _387 + (-0.5);
        _2490 = cbMtdParam._m0[1u];
        _2492 = _2490.y * _2488;
        float _2495 = (_2470 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2496 = _2495 * (_2471 ? _2479 : (_2479 + (cbSceneParam._m0[72u].w * _2452)));
        _2497 = _2495 * (_2471 ? _2480 : (_2480 + (cbSceneParam._m0[72u].w * _2454)));
        _2498 = _2495 * (_2471 ? _2481 : (_2481 + (cbSceneParam._m0[72u].w * _2456)));
        _2499 = _2488 * 0.999000012874603271484375;
        _2509 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2509)
        {
            if ((cbInstanceData._m0[_456 + 7u].x + _2499) < 0.5)
            {
                _2665 = true;
                break;
            }
        }
        uint _2606 = _458 + uint(_2468.w);
        if ((cbInstanceData._m0[_2606].w < 1.0) && ((cbInstanceData._m0[_2606].w + _2499) < 0.5))
        {
            _2665 = true;
            break;
        }
        if ((_2492 + 1.0) < _2490.x)
        {
            _2665 = true;
            break;
        }
        _2665 = false;
        break;
    }
    float _2870;
    if (_2665)
    {
        discard_state = true;
        _2870 = 0.0;
    }
    else
    {
        _2870 = cbInstanceData._m0[_2332].w;
    }
    SV_Target.x = _2496;
    SV_Target.y = _2497;
    SV_Target.z = _2498;
    SV_Target.w = _2870;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2332].w;
    discard_exit();
}


