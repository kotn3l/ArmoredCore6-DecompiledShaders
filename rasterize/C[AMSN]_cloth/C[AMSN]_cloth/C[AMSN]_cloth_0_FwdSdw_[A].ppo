#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _954;
float _3628;
float _3629;
float _3630;
float _3631;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    vec4 _248 = texture(sampler2D(C_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _254 = _248.x * cbMtdParam._m0[9u].x;
    float _255 = _248.y * cbMtdParam._m0[9u].y;
    float _256 = _248.z * cbMtdParam._m0[9u].z;
    vec4 _268 = texture(sampler2D(C_AMSN_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _275 = cbMtdParam._m0[10u].x + _268.x;
    vec4 _287 = texture(sampler2D(C_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _291 = _287.z;
    float _295 = (_287.x * 2.0) + (-1.0);
    float _297 = (_287.y * 2.0) + (-1.0);
    float _298 = dot(vec2(_295, _297), vec2(_295, _297));
    float _3640 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _304 = sqrt(1.0 - (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))));
    float _307 = fma(_304, _226, fma(_297, _218 * TANGENT.x, (_204 * _196) * _295));
    float _310 = fma(_304, _227, fma(_297, _218 * TANGENT.y, (_204 * _197) * _295));
    float _313 = fma(_304, _228, fma(_297, _218 * TANGENT.z, (_204 * _198) * _295));
    float _317 = inversesqrt(dot(vec3(_307, _310, _313), vec3(_307, _310, _313)));
    float _318 = _317 * _307;
    float _319 = _317 * _310;
    float _320 = _317 * _313;
    float _3651 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _321 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _3662 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3673 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3684 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3695 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _325 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _341 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _382 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _392 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _382);
    float _393 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _382);
    float _394 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _382);
    float _398 = inversesqrt(dot(vec3(_392, _393, _394), vec3(_392, _393, _394)));
    float _399 = _392 * _398;
    float _400 = _393 * _398;
    float _401 = _394 * _398;
    vec4 _406 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _408 = _406.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _633 = sqrt(((_392 * _392) + (_393 * _393)) + (_394 * _394));
        float _639 = (cbMatDynParam._m0[5u].x * _633) + cbMatDynParam._m0[5u].y;
        float _3706 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
        float _640 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _644 = (cbMatDynParam._m0[5u].z * _633) + cbMatDynParam._m0[5u].w;
        float _3717 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) - _640)) + _640) < ((_408 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _420 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _421 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _423 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _425 = _423.w;
    float _445 = fma(_320, cbSceneParam._m0[5u].z, fma(_319, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _318));
    float _448 = fma(_320, cbSceneParam._m0[6u].z, fma(_319, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _318));
    float _451 = fma(_320, cbSceneParam._m0[7u].z, fma(_319, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _318));
    vec4 _453 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _464 = (((_453.y - _321) + (_453.w * _321)) * cbMtdParam._m0[3u].x) + _321;
    uint _477 = uint(roundEven(NORMAL.w)) * 13u;
    uint _479 = _477 + 9u;
    uint _480 = _479 + uint(cbMatDynParam._m0[0u].w);
    float _486 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) * cbInstanceData._m0[_480].x;
    float _487 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0)))) * cbInstanceData._m0[_480].y;
    float _488 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0)))) * cbInstanceData._m0[_480].z;
    float _3728 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _489 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _490 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _3750 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _491 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    vec4 _492 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _497 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _508 = (((_497.x - _325) + (_497.w * _325)) * cbMtdParam._m0[3u].x) + _325;
    float _521 = (cbMtdParam._m0[3u].x * (((_489 * _425) - _489) + _492.x)) + _489;
    float _522 = (cbMtdParam._m0[3u].x * (((_490 * _425) - _490) + _492.y)) + _490;
    float _523 = (cbMtdParam._m0[3u].x * (((_491 * _425) - _491) + _492.z)) + _491;
    float _524 = 1.0 - _508;
    float _525 = _524 * _521;
    float _526 = _524 * _522;
    float _527 = _524 * _523;
    float _532 = (_521 + (-0.039999999105930328369140625)) * _508;
    float _533 = (_522 + (-0.039999999105930328369140625)) * _508;
    float _534 = (_523 + (-0.039999999105930328369140625)) * _508;
    float _535 = _532 + 0.039999999105930328369140625;
    float _537 = _533 + 0.039999999105930328369140625;
    float _538 = _534 + 0.039999999105930328369140625;
    vec4 _547 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _420, cbSceneParam._m0[86u].y * _421));
    float _550 = _547.x * TEXCOORD_4;
    float _551 = dot(vec3(_318, _319, _320), vec3(_399, _400, _401));
    float _554 = _551 * 2.0;
    float _558 = (_554 * _318) - _399;
    float _559 = (_554 * _319) - _400;
    float _560 = (_554 * _320) - _401;
    float _564 = abs(dot(vec3(_399, _400, _401), vec3(_318, _319, _320)));
    float _3761 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _566 = sqrt(_464);
    float _579 = exp2((_566 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_566 * 3.0));
    float _585 = (1.0 - _579) * ((_566 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _586 = _579 * _566;
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _953;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _678 = fma(_622, cbModelParam._m0[26u].z, fma(_618, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _614));
        float _682 = fma(_622, cbModelParam._m0[27u].z, fma(_618, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _614));
        float _686 = fma(_622, cbModelParam._m0[28u].z, fma(_618, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _614));
        float _711 = _614 + _318;
        float _712 = _618 + _319;
        float _713 = _622 + _320;
        float _723 = fma(_713, cbModelParam._m0[26u].z, fma(_712, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _711)) - _678;
        float _724 = fma(_713, cbModelParam._m0[27u].z, fma(_712, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _711)) - _682;
        float _725 = fma(_713, cbModelParam._m0[28u].z, fma(_712, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _711)) - _686;
        float _729 = inversesqrt(dot(vec3(_723, _724, _725), vec3(_723, _724, _725)));
        float _742 = ((_729 * _723) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_678 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _743 = ((_729 * _724) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_682 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _744 = ((_729 * _725) / cbModelParam._m0[34u].z) + ((((((_686 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _747 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        vec4 _754 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        vec4 _761 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        vec4 _768 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_742, _743, _744), 0.0);
        float _781 = exp2((_747.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_747.x + (-0.5));
        float _783 = _781 * (_747.y + (-0.5));
        float _784 = _781 * (_747.z + (-0.5));
        float _791 = exp2((_754.w + (-0.5)) * 20.0) * 2.0;
        float _792 = _791 * (_754.x + (-0.5));
        float _793 = _791 * (_754.y + (-0.5));
        float _794 = _791 * (_754.z + (-0.5));
        float _801 = exp2((_761.w + (-0.5)) * 20.0) * 2.0;
        float _802 = _801 * (_761.x + (-0.5));
        float _803 = _801 * (_761.y + (-0.5));
        float _804 = _801 * (_761.z + (-0.5));
        float _811 = exp2((_768.w + (-0.5)) * 20.0) * 2.0;
        float _812 = _811 * (_768.x + (-0.5));
        float _813 = _811 * (_768.y + (-0.5));
        float _814 = _811 * (_768.z + (-0.5));
        float _815 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _816 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _817 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _818 = _782 * 0.5;
        float _819 = _792 * 0.5;
        float _820 = _802 * 0.5;
        float _821 = dot(vec3(_818, _819, _820), vec3(_818, _819, _820));
        float _826 = (_821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_821);
        float _835 = (dot(vec3(_318, _319, _320), vec3(_826 * _818, _826 * _819, _826 * _820)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _845 = sqrt(((_819 * _819) + (_818 * _818)) + (_820 * _820)) / (_815 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _847 = _846 * 2.0;
        float _851 = (1.0 - _846) / (_846 + 1.0);
        float _3809 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _861 = ((((1.0 - _852) * (_847 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_847 + 1.0))) + _852) * _815;
        float _862 = _783 * 0.5;
        float _863 = _793 * 0.5;
        float _864 = _803 * 0.5;
        float _865 = dot(vec3(_862, _863, _864), vec3(_862, _863, _864));
        float _870 = (_865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_865);
        float _878 = (dot(vec3(_318, _319, _320), vec3(_870 * _862, _870 * _863, _870 * _864)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _887 = sqrt(((_863 * _863) + (_862 * _862)) + (_864 * _864)) / (_816 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _889 = _888 * 2.0;
        float _893 = (1.0 - _888) / (_888 + 1.0);
        float _3842 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _903 = ((((1.0 - _894) * (_889 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_889 + 1.0))) + _894) * _816;
        float _904 = _784 * 0.5;
        float _905 = _794 * 0.5;
        float _906 = _804 * 0.5;
        float _907 = dot(vec3(_904, _905, _906), vec3(_904, _905, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _920 = (dot(vec3(_318, _319, _320), vec3(_912 * _904, _912 * _905, _912 * _906)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _929 = sqrt(((_905 * _905) + (_904 * _904)) + (_906 * _906)) / (_817 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _931 = _930 * 2.0;
        float _935 = (1.0 - _930) / (_930 + 1.0);
        float _3875 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _945 = ((((1.0 - _936) * (_931 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_931 + 1.0))) + _936) * _817;
        _953 = _784;
        _955 = _783;
        _956 = _782;
        _957 = _794;
        _958 = _793;
        _959 = _792;
        _960 = _804;
        _961 = _803;
        _962 = _802;
        _963 = _817;
        _964 = _816;
        _965 = _815;
        _966 = cbModelParam._m0[36u].z * (isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0)));
        _967 = cbModelParam._m0[36u].z * (isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0)));
        _968 = cbModelParam._m0[36u].z * (isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0)));
    }
    else
    {
        _953 = _954;
        _955 = _954;
        _956 = _954;
        _957 = _954;
        _958 = _954;
        _959 = _954;
        _960 = _954;
        _961 = _954;
        _962 = _954;
        _963 = _954;
        _964 = _954;
        _965 = _954;
        _966 = 0.0;
        _967 = 0.0;
        _968 = 0.0;
    }
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _997 = fma(_622, cbModelParam._m0[30u].z, fma(_618, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _614));
        float _1001 = fma(_622, cbModelParam._m0[31u].z, fma(_618, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _614));
        float _1005 = fma(_622, cbModelParam._m0[32u].z, fma(_618, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _614));
        float _1028 = _614 + _318;
        float _1029 = _618 + _319;
        float _1030 = _622 + _320;
        float _1040 = fma(_1030, cbModelParam._m0[30u].z, fma(_1029, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1028)) - _997;
        float _1041 = fma(_1030, cbModelParam._m0[31u].z, fma(_1029, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1028)) - _1001;
        float _1042 = fma(_1030, cbModelParam._m0[32u].z, fma(_1029, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1028)) - _1005;
        float _1046 = inversesqrt(dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042)));
        float _1059 = ((_1046 * _1040) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_997 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1046 * _1041) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1001 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1046 * _1042) / cbModelParam._m0[35u].z) + ((((((_1005 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1059, _1060, _1061), 0.0);
        float _1096 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1063.x + (-0.5));
        float _1098 = _1096 * (_1063.y + (-0.5));
        float _1099 = _1096 * (_1063.z + (-0.5));
        float _1106 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1070.x + (-0.5));
        float _1108 = _1106 * (_1070.y + (-0.5));
        float _1109 = _1106 * (_1070.z + (-0.5));
        float _1116 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1077.x + (-0.5));
        float _1118 = _1116 * (_1077.y + (-0.5));
        float _1119 = _1116 * (_1077.z + (-0.5));
        float _1126 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1084.x + (-0.5));
        float _1128 = _1126 * (_1084.y + (-0.5));
        float _1129 = _1126 * (_1084.z + (-0.5));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = _1097 * 0.5;
        float _1134 = _1107 * 0.5;
        float _1135 = _1117 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_318, _319, _320), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3938 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1160 + 1.0))) + _1165) * _1130;
        float _1175 = _1098 * 0.5;
        float _1176 = _1108 * 0.5;
        float _1177 = _1118 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_318, _319, _320), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3971 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1202 + 1.0))) + _1207) * _1131;
        float _1217 = _1099 * 0.5;
        float _1218 = _1109 * 0.5;
        float _1219 = _1119 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_318, _319, _320), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _4004 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1244 + 1.0))) + _1249) * _1132;
        _1266 = _1099;
        _1267 = _1098;
        _1268 = _1097;
        _1269 = _1109;
        _1270 = _1108;
        _1271 = _1107;
        _1272 = _1119;
        _1273 = _1118;
        _1274 = _1117;
        _1275 = _1132;
        _1276 = _1131;
        _1277 = _1130;
        _1278 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1279 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1280 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
    }
    else
    {
        _1266 = _954;
        _1267 = _954;
        _1268 = _954;
        _1269 = _954;
        _1270 = _954;
        _1271 = _954;
        _1272 = _954;
        _1273 = _954;
        _1274 = _954;
        _1275 = _954;
        _1276 = _954;
        _1277 = _954;
        _1278 = 0.0;
        _1279 = 0.0;
        _1280 = 0.0;
    }
    float _1290 = (cbModelParam._m0[1u].x * (_1278 - _966)) + _966;
    float _1291 = (cbModelParam._m0[1u].x * (_1279 - _967)) + _967;
    float _1292 = (cbModelParam._m0[1u].x * (_1280 - _968)) + _968;
    float _1313 = fma(_1292, cbSceneParam._m0[89u].z, fma(_1291, cbSceneParam._m0[89u].y, _1290 * cbSceneParam._m0[89u].x));
    float _1316 = fma(_1292, cbSceneParam._m0[90u].z, fma(_1291, cbSceneParam._m0[90u].y, _1290 * cbSceneParam._m0[90u].x));
    float _1319 = fma(_1292, cbSceneParam._m0[91u].z, fma(_1291, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1290));
    float _1334 = _558 * 0.5;
    float _1335 = _559 * 0.5;
    float _1336 = _560 * 0.5;
    float _1337 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1268, _1271, _1274, _1277));
    float _1340 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1267, _1270, _1273, _1276));
    float _1343 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_1266, _1269, _1272, _1275));
    float _1377;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1350 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_953, _957, _960, _963));
        float _1354 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_955, _958, _961, _964));
        float _1358 = dot(vec4(_1334, _1335, _1336, 1.0), vec4(_956, _959, _962, _965));
        float _1365 = dot(vec4(cbModelParam._m0[39u]), vec4(_1334, _1335, _1336, 1.0));
        _1377 = dot(vec3(isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)), isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1365) ? 0.0 : (isnan(0.0) ? _1365 : max(0.0, _1365))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1377 = 1.0;
    }
    float _1388;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1379 = dot(vec4(cbModelParam._m0[40u]), vec4(_1334, _1335, _1336, 1.0));
        _1388 = dot(vec3(isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1379) ? 0.0 : (isnan(0.0) ? _1379 : max(0.0, _1379))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1388 = 1.0;
    }
    float _1392 = (_1388 * cbModelParam._m0[1u].x) + (_1377 * (1.0 - cbModelParam._m0[1u].x));
    float _1402 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _464);
    float _1403 = isnan(_1402) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1402 : min(cbModelParam._m0[25u].z, _1402));
    float _1485;
    float _1487;
    float _1489;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1452 = fma(_622, cbModelParam._m0[13u].z, fma(_618, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _614)) + cbModelParam._m0[13u].w;
        float _1456 = fma(_622, cbModelParam._m0[14u].z, fma(_618, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _614)) + cbModelParam._m0[14u].w;
        float _1460 = fma(_622, cbModelParam._m0[15u].z, fma(_618, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _614)) + cbModelParam._m0[15u].w;
        float _1463 = fma(_560, cbModelParam._m0[13u].z, fma(_559, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _558));
        float _1466 = fma(_560, cbModelParam._m0[14u].z, fma(_559, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _558));
        float _1469 = fma(_560, cbModelParam._m0[15u].z, fma(_559, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _558));
        float _1497;
        if (_1463 > 0.0)
        {
            _1497 = abs((1.0 - _1452) / _1463);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1452 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1497 = frontier_phi_19_17_ladder;
        }
        float _1673;
        if (_1466 > 0.0)
        {
            _1673 = abs((1.0 - _1456) / _1466);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1456 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1673 = frontier_phi_28_24_ladder;
        }
        float _1969;
        if (_1469 > 0.0)
        {
            _1969 = abs((1.0 - _1460) / _1469);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1460 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1969 = frontier_phi_40_35_ladder;
        }
        float _1971 = isnan(_1673) ? _1497 : (isnan(_1497) ? _1673 : min(_1497, _1673));
        float _1972 = isnan(_1969) ? _1971 : (isnan(_1971) ? _1969 : min(_1971, _1969));
        float _1976 = (_1972 * _1463) + _1452;
        float _1977 = (_1972 * _1466) + _1456;
        float _1978 = (_1972 * _1469) + _1460;
        float _1979 = _1972 * 9.9999997473787516355514526367188e-05;
        float _1981 = (-1.0) - _1979;
        float _1983 = _1979 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1978 > _1983) || ((_1978 < _1981) || ((_1977 > _1983) || ((_1977 < _1981) || ((_1976 < _1981) || (_1976 > _1983))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2123 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1978, cbModelParam._m0[9u].z, fma(_1977, cbModelParam._m0[9u].y, _1976 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1978, cbModelParam._m0[10u].z, fma(_1977, cbModelParam._m0[10u].y, _1976 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1978, cbModelParam._m0[11u].z, fma(_1977, cbModelParam._m0[11u].y, _1976 * cbModelParam._m0[11u].x))), _1403);
            frontier_phi_18_40_ladder = _2123.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2123.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2123.x * cbModelParam._m0[1u].y;
        }
        _1485 = frontier_phi_18_40_ladder_2;
        _1487 = frontier_phi_18_40_ladder_1;
        _1489 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1473 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_558, _559, _560), _1403);
        _1485 = _1473.x * cbModelParam._m0[1u].y;
        _1487 = _1473.y * cbModelParam._m0[1u].y;
        _1489 = _1473.z * cbModelParam._m0[1u].y;
    }
    float _1493 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _464);
    float _1494 = isnan(_1493) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1493 : min(cbModelParam._m0[25u].w, _1493));
    float _1587;
    float _1589;
    float _1591;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1551 = fma(_622, cbModelParam._m0[21u].z, fma(_618, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _614)) + cbModelParam._m0[21u].w;
        float _1555 = fma(_622, cbModelParam._m0[22u].z, fma(_618, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _614)) + cbModelParam._m0[22u].w;
        float _1559 = fma(_622, cbModelParam._m0[23u].z, fma(_618, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _614)) + cbModelParam._m0[23u].w;
        float _1562 = fma(_560, cbModelParam._m0[21u].z, fma(_559, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _558));
        float _1565 = fma(_560, cbModelParam._m0[22u].z, fma(_559, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _558));
        float _1568 = fma(_560, cbModelParam._m0[23u].z, fma(_559, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _558));
        float _1678;
        if (_1562 > 0.0)
        {
            _1678 = abs((1.0 - _1551) / _1562);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1551 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1678 = frontier_phi_30_26_ladder;
        }
        float _1996;
        if (_1565 > 0.0)
        {
            _1996 = abs((1.0 - _1555) / _1565);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1555 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1996 = frontier_phi_42_37_ladder;
        }
        float _2334;
        if (_1568 > 0.0)
        {
            _2334 = abs((1.0 - _1559) / _1568);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1559 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2334 = frontier_phi_52_49_ladder;
        }
        float _2336 = isnan(_1996) ? _1678 : (isnan(_1678) ? _1996 : min(_1678, _1996));
        float _2337 = isnan(_2334) ? _2336 : (isnan(_2336) ? _2334 : min(_2336, _2334));
        float _2341 = (_2337 * _1562) + _1551;
        float _2342 = (_2337 * _1565) + _1555;
        float _2343 = (_2337 * _1568) + _1559;
        float _2344 = _2337 * 9.9999997473787516355514526367188e-05;
        float _2345 = (-1.0) - _2344;
        float _2347 = _2344 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2343 > _2347) || ((_2343 < _2345) || ((_2342 > _2347) || ((_2342 < _2345) || ((_2341 < _2345) || (_2341 > _2347))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2465 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2343, cbModelParam._m0[17u].z, fma(_2342, cbModelParam._m0[17u].y, _2341 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2343, cbModelParam._m0[18u].z, fma(_2342, cbModelParam._m0[18u].y, _2341 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2343, cbModelParam._m0[19u].z, fma(_2342, cbModelParam._m0[19u].y, _2341 * cbModelParam._m0[19u].x))), _1494);
            frontier_phi_27_52_ladder = _2465.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2465.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2465.x * cbModelParam._m0[1u].z;
        }
        _1587 = frontier_phi_27_52_ladder_2;
        _1589 = frontier_phi_27_52_ladder_1;
        _1591 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1571 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_558, _559, _560), _1494);
        _1587 = _1571.x * cbModelParam._m0[1u].z;
        _1589 = _1571.y * cbModelParam._m0[1u].z;
        _1591 = _1571.z * cbModelParam._m0[1u].z;
    }
    float _1604 = (((_585 * _535) + _586) * _550) * ((cbModelParam._m0[1u].w * (_1587 - _1485)) + _1485);
    float _1606 = (((_585 * _537) + _586) * _550) * ((cbModelParam._m0[1u].w * (_1589 - _1487)) + _1487);
    float _1608 = (((_585 * _538) + _586) * _550) * ((cbModelParam._m0[1u].w * (_1591 - _1489)) + _1489);
    float _1611 = fma(_1608, cbSceneParam._m0[89u].z, fma(_1606, cbSceneParam._m0[89u].y, _1604 * cbSceneParam._m0[89u].x));
    float _1614 = fma(_1608, cbSceneParam._m0[90u].z, fma(_1606, cbSceneParam._m0[90u].y, _1604 * cbSceneParam._m0[90u].x));
    float _1617 = fma(_1608, cbSceneParam._m0[91u].z, fma(_1606, cbSceneParam._m0[91u].y, _1604 * cbSceneParam._m0[91u].x));
    float _1652 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1656 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1660 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1664 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1665 = _1652 / _1664;
    float _1666 = _1656 / _1664;
    float _1667 = _1660 / _1664;
    float _1814;
    float _1815;
    float _1816;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1694 = ((uint(_1667 > cbSceneParam._m0[59u].y) + uint(_1667 > cbSceneParam._m0[59u].x)) + uint(_1667 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1695 = _1694 + 43u;
        uint _1703 = _1694 + 44u;
        uint _1711 = _1694 + 45u;
        uint _1719 = _1694 + 46u;
        float _1730 = fma(_1664, cbSceneParam._m0[_1695].w, fma(_1660, cbSceneParam._m0[_1695].z, fma(_1656, cbSceneParam._m0[_1695].y, _1652 * cbSceneParam._m0[_1695].x)));
        float _1734 = fma(_1664, cbSceneParam._m0[_1703].w, fma(_1660, cbSceneParam._m0[_1703].z, fma(_1656, cbSceneParam._m0[_1703].y, _1652 * cbSceneParam._m0[_1703].x)));
        float _1742 = fma(_1664, cbSceneParam._m0[_1719].w, fma(_1660, cbSceneParam._m0[_1719].z, fma(_1656, cbSceneParam._m0[_1719].y, _1652 * cbSceneParam._m0[_1719].x)));
        float _1747 = cbSceneParam._m0[33u].z * _1742;
        float _1749 = cbSceneParam._m0[33u].w * _1742;
        float _1752 = fma(_1664, cbSceneParam._m0[_1711].w, fma(_1660, cbSceneParam._m0[_1711].z, fma(_1656, cbSceneParam._m0[_1711].y, _1652 * cbSceneParam._m0[_1711].x))) / _1742;
        float _1800 = (cbSceneParam._m0[33u].x - sqrt(((_1666 * _1666) + (_1665 * _1665)) + (_1667 * _1667))) * cbSceneParam._m0[33u].y;
        float _4130 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1807 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1747 + _1730) / _1742, (_1749 + _1734) / _1742), _1752), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1749 + _1730) / _1742, (_1734 - _1747) / _1742), _1752), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1730 - _1747) / _1742, (_1734 - _1749) / _1742), _1752), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1730 - _1749) / _1742, (_1747 + _1734) / _1742), _1752), 0.0)).x), vec4(0.25)));
        _1814 = 1.0 - (_1807 * cbSceneParam._m0[34u].x);
        _1815 = 1.0 - (_1807 * cbSceneParam._m0[34u].y);
        _1816 = 1.0 - (_1807 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1814 = 1.0;
        _1815 = 1.0;
        _1816 = 1.0;
    }
    float _1880;
    float _1882;
    float _1884;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1868 = fma(_1664, cbSceneParam._m0[63u].w, fma(_1660, cbSceneParam._m0[63u].z, fma(_1656, cbSceneParam._m0[63u].y, _1652 * cbSceneParam._m0[63u].x)));
        float _1869 = fma(_1664, cbSceneParam._m0[60u].w, fma(_1660, cbSceneParam._m0[60u].z, fma(_1656, cbSceneParam._m0[60u].y, _1652 * cbSceneParam._m0[60u].x))) / _1868;
        float _1870 = fma(_1664, cbSceneParam._m0[61u].w, fma(_1660, cbSceneParam._m0[61u].z, fma(_1656, cbSceneParam._m0[61u].y, _1652 * cbSceneParam._m0[61u].x))) / _1868;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1869 >= cbSceneParam._m0[64u].x) && (_1870 >= cbSceneParam._m0[64u].y)) && (_1869 <= cbSceneParam._m0[64u].z)) && (_1870 <= cbSceneParam._m0[64u].w))
        {
            float _2009 = fma(_1664, cbSceneParam._m0[62u].w, fma(_1660, cbSceneParam._m0[62u].z, fma(_1656, cbSceneParam._m0[62u].y, _1652 * cbSceneParam._m0[62u].x))) / _1868;
            float _2013 = isnan(cbSceneParam._m0[41u].w) ? _2009 : (isnan(_2009) ? cbSceneParam._m0[41u].w : max(_2009, cbSceneParam._m0[41u].w));
            float _2056 = (cbSceneParam._m0[33u].x - sqrt(((_1666 * _1666) + (_1665 * _1665)) + (_1667 * _1667))) * cbSceneParam._m0[33u].y;
            float _4146 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
            float _2063 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1869, cbSceneParam._m0[33u].w + _1870), _2013), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1869, _1870 - cbSceneParam._m0[33u].z), _2013), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1869 - cbSceneParam._m0[33u].z, _1870 - cbSceneParam._m0[33u].w), _2013), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1869 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1870), _2013), 0.0)).x), vec4(0.25)));
            float _2067 = 1.0 - (_2063 * cbSceneParam._m0[34u].x);
            float _2068 = 1.0 - (_2063 * cbSceneParam._m0[34u].y);
            float _2069 = 1.0 - (_2063 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2068) ? _1815 : (isnan(_1815) ? _2068 : min(_1815, _2068));
            frontier_phi_39_38_ladder_1 = isnan(_2067) ? _1814 : (isnan(_1814) ? _2067 : min(_1814, _2067));
            frontier_phi_39_38_ladder_2 = isnan(_2069) ? _1816 : (isnan(_1816) ? _2069 : min(_1816, _2069));
        }
        else
        {
            frontier_phi_39_38_ladder = _1815;
            frontier_phi_39_38_ladder_1 = _1814;
            frontier_phi_39_38_ladder_2 = _1816;
        }
        _1880 = frontier_phi_39_38_ladder_1;
        _1882 = frontier_phi_39_38_ladder;
        _1884 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1880 = _1814;
        _1882 = _1815;
        _1884 = _1816;
    }
    uvec4 _1889 = floatBitsToUint(cbInstanceData._m0[_477 + 5u]);
    uint _1891 = _1889.x * 14u;
    uint _1892 = _1891 + 13u;
    float _1899 = _550 + (-1.0);
    float _1904 = (cbLight._m0[_1892].x * _1899) + 1.0;
    float _1905 = (cbLight._m0[_1892].y * _1899) + 1.0;
    float _1906 = (cbLight._m0[_1892].z * _1899) + 1.0;
    float _1907 = (cbLight._m0[_1892].w * _1899) + 1.0;
    uint _1908 = _1891 + 5u;
    float _1914 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
    uint _1918 = _1891 + 4u;
    float _1928 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
    uint _1932 = _1891 | 1u;
    float _1943 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_318, _319, _320));
    float _1946 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_318, _319, _320));
    float _4182 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _4193 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1951 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * 0.3183098733425140380859375;
    float _1953 = (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * 0.3183098733425140380859375;
    float _1960 = ((cbLight._m0[_1908].x * _1914) * _1953) + (((cbLight._m0[_1918].x * _1880) * _1928) * _1951);
    float _1961 = ((_1914 * cbLight._m0[_1908].y) * _1953) + (((cbLight._m0[_1918].y * _1882) * _1928) * _1951);
    float _1962 = ((_1914 * cbLight._m0[_1908].z) * _1953) + (((cbLight._m0[_1918].z * _1884) * _1928) * _1951);
    uvec4 _1966 = floatBitsToUint(cbLight._m0[_1891 + 12u]);
    bool _1968 = _1966.x == 0u;
    float _2070;
    float _2072;
    float _2074;
    if (_1968)
    {
        _2070 = _1960;
        _2072 = _1961;
        _2074 = _1962;
    }
    else
    {
        uint _2078 = _1891 + 6u;
        float _2094 = (dot(vec3(cbLight._m0[_1891 + 2u].xyz), vec3(_318, _319, _320)) * 0.5) + 0.5;
        float _2095 = _2094 * _2094;
        float _4204 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2096 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2097 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
        _2070 = (((cbLight._m0[_2078].x * 0.3183098733425140380859375) * _2096) * _2097) + _1960;
        _2072 = (((cbLight._m0[_2078].y * 0.3183098733425140380859375) * _2096) * _2097) + _1961;
        _2074 = (((cbLight._m0[_2078].z * 0.3183098733425140380859375) * _2096) * _2097) + _1962;
    }
    bool _2077 = _1966.y == 0u;
    float _2132;
    float _2134;
    float _2136;
    if (_2077)
    {
        _2132 = _2070;
        _2134 = _2072;
        _2136 = _2074;
    }
    else
    {
        uint _2305 = _1891 + 7u;
        float _2321 = (dot(vec3(cbLight._m0[_1891 + 3u].xyz), vec3(_318, _319, _320)) * 0.5) + 0.5;
        float _2322 = _2321 * _2321;
        float _4220 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2323 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2324 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
        _2132 = (((cbLight._m0[_2305].x * 0.3183098733425140380859375) * _2323) * _2324) + _2070;
        _2134 = (((cbLight._m0[_2305].y * 0.3183098733425140380859375) * _2323) * _2324) + _2072;
        _2136 = (((cbLight._m0[_2305].z * 0.3183098733425140380859375) * _2323) * _2324) + _2074;
    }
    uint _2139 = _1891 + 8u;
    float _2152 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1891].w)) * _464) * 0.949999988079071044921875);
    float _2153 = _2152 * _2152;
    float _2154 = cbLight._m0[_1891].x + _399;
    float _2155 = cbLight._m0[_1891].y + _400;
    float _2156 = cbLight._m0[_1891].z + _401;
    float _2160 = inversesqrt(dot(vec3(_2154, _2155, _2156), vec3(_2154, _2155, _2156)));
    float _2161 = _2160 * _2154;
    float _2162 = _2160 * _2155;
    float _2163 = _2160 * _2156;
    float _2164 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1891].xyz));
    float _4236 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2167 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _4247 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _2168 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _2169 = dot(vec3(_318, _319, _320), vec3(_2161, _2162, _2163));
    float _4258 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2172 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _2173 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_2161, _2162, _2163));
    float _4269 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2177 = _2153 * _2153;
    float _2181 = ((_2172 * _2172) * (_2177 + (-1.0))) + 1.0;
    float _2189 = exp2(log2(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) * 5.0);
    float _2190 = 0.959999978542327880859375 - _532;
    float _2192 = 0.959999978542327880859375 - _533;
    float _2193 = 0.959999978542327880859375 - _534;
    float _2200 = 1.0 - _2153;
    float _2211 = (0.5 / (((_2168 * ((_2167 * _2200) + _2153)) + 9.9999999392252902907785028219223e-09) + (((_2168 * _2200) + _2153) * _2167))) * _2167;
    float _4280 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2213 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2177 / ((_2181 * _2181) * 3.141590118408203125));
    uint _2227 = _1891 + 9u;
    float _2238 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1932].w)) * _464) * 0.949999988079071044921875);
    float _2239 = _2238 * _2238;
    float _2240 = cbLight._m0[_1932].x + _399;
    float _2241 = cbLight._m0[_1932].y + _400;
    float _2242 = cbLight._m0[_1932].z + _401;
    float _2246 = inversesqrt(dot(vec3(_2240, _2241, _2242), vec3(_2240, _2241, _2242)));
    float _2247 = _2246 * _2240;
    float _2248 = _2246 * _2241;
    float _2249 = _2246 * _2242;
    float _2250 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_1932].xyz));
    float _4291 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2254 = dot(vec3(_318, _319, _320), vec3(_2247, _2248, _2249));
    float _4302 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2257 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2258 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_2247, _2248, _2249));
    float _4313 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2262 = _2239 * _2239;
    float _2266 = ((_2257 * _2257) * (_2262 + (-1.0))) + 1.0;
    float _2273 = exp2(log2(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * 5.0);
    float _2280 = 1.0 - _2239;
    float _2290 = (0.5 / (((_2168 * ((_2253 * _2280) + _2239)) + 9.9999999392252902907785028219223e-09) + (((_2168 * _2280) + _2239) * _2253))) * _2253;
    float _4324 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2292 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2262 / ((_2266 * _2266) * 3.141590118408203125));
    float _2302 = (((((_2273 * _2190) + _535) * cbLight._m0[_2227].x) * _2292) * _1914) + ((((cbLight._m0[_2139].x * _1880) * ((_2189 * _2190) + _535)) * _2213) * _1928);
    float _2303 = (((((_2273 * _2192) + _537) * cbLight._m0[_2227].y) * _2292) * _1914) + ((((cbLight._m0[_2139].y * _1882) * ((_2189 * _2192) + _537)) * _2213) * _1928);
    float _2304 = (((((_2273 * _2193) + _538) * cbLight._m0[_2227].z) * _2292) * _1914) + ((((cbLight._m0[_2139].z * _1884) * ((_2189 * _2193) + _538)) * _2213) * _1928);
    float _2360;
    float _2362;
    float _2364;
    if (_1968)
    {
        _2360 = _2302;
        _2362 = _2303;
        _2364 = _2304;
    }
    else
    {
        uint _2366 = _1891 + 2u;
        uint _2370 = _1891 + 10u;
        float _2384 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2366].w)) * _464) * 0.949999988079071044921875);
        float _2385 = _2384 * _2384;
        float _2386 = cbLight._m0[_2366].x + _399;
        float _2387 = cbLight._m0[_2366].y + _400;
        float _2388 = cbLight._m0[_2366].z + _401;
        float _2392 = inversesqrt(dot(vec3(_2386, _2387, _2388), vec3(_2386, _2387, _2388)));
        float _2393 = _2392 * _2386;
        float _2394 = _2392 * _2387;
        float _2395 = _2392 * _2388;
        float _2396 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_2366].xyz));
        float _4335 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2399 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2400 = dot(vec3(_318, _319, _320), vec3(_2393, _2394, _2395));
        float _4346 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2403 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2404 = dot(vec3(cbLight._m0[_2366].xyz), vec3(_2393, _2394, _2395));
        float _4357 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2408 = _2385 * _2385;
        float _2412 = ((_2403 * _2403) * (_2408 + (-1.0))) + 1.0;
        float _2419 = exp2(log2(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * 5.0);
        float _2426 = 1.0 - _2385;
        float _2436 = (0.5 / (((_2168 * ((_2399 * _2426) + _2385)) + 9.9999999392252902907785028219223e-09) + (((_2168 * _2426) + _2385) * _2399))) * _2399;
        float _4368 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2438 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2408 / ((_2412 * _2412) * 3.141590118408203125));
        float _2439 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
        _2360 = (((((_2419 * _2190) + _535) * cbLight._m0[_2370].x) * _2438) * _2439) + _2302;
        _2362 = (((((_2419 * _2192) + _537) * cbLight._m0[_2370].y) * _2438) * _2439) + _2303;
        _2364 = (((((_2419 * _2193) + _538) * cbLight._m0[_2370].z) * _2438) * _2439) + _2304;
    }
    float _2470;
    float _2472;
    float _2474;
    if (_2077)
    {
        _2470 = _2360;
        _2472 = _2362;
        _2474 = _2364;
    }
    else
    {
        uint _2481 = _1891 + 3u;
        uint _2485 = _1891 + 11u;
        float _2499 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2481].w)) * _464) * 0.949999988079071044921875);
        float _2500 = _2499 * _2499;
        float _2501 = cbLight._m0[_2481].x + _399;
        float _2502 = cbLight._m0[_2481].y + _400;
        float _2503 = cbLight._m0[_2481].z + _401;
        float _2507 = inversesqrt(dot(vec3(_2501, _2502, _2503), vec3(_2501, _2502, _2503)));
        float _2508 = _2507 * _2501;
        float _2509 = _2507 * _2502;
        float _2510 = _2507 * _2503;
        float _2511 = dot(vec3(_318, _319, _320), vec3(cbLight._m0[_2481].xyz));
        float _4384 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2514 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2515 = dot(vec3(_318, _319, _320), vec3(_2508, _2509, _2510));
        float _4395 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2518 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2519 = dot(vec3(cbLight._m0[_2481].xyz), vec3(_2508, _2509, _2510));
        float _4406 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2523 = _2500 * _2500;
        float _2527 = ((_2518 * _2518) * (_2523 + (-1.0))) + 1.0;
        float _2534 = exp2(log2(1.0 - (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) * 5.0);
        float _2541 = 1.0 - _2500;
        float _2551 = (0.5 / (((_2168 * ((_2514 * _2541) + _2500)) + 9.9999999392252902907785028219223e-09) + (((_2168 * _2541) + _2500) * _2514))) * _2514;
        float _4417 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2553 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2523 / ((_2527 * _2527) * 3.141590118408203125));
        float _2554 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
        _2470 = (((((_2534 * _2190) + _535) * cbLight._m0[_2485].x) * _2553) * _2554) + _2360;
        _2472 = (((((_2534 * _2192) + _537) * cbLight._m0[_2485].y) * _2553) * _2554) + _2362;
        _2474 = (((((_2534 * _2193) + _538) * cbLight._m0[_2485].z) * _2553) * _2554) + _2364;
    }
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    if (_1889.y == 0u)
    {
        uvec4 _2575 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2576 = _2575.x;
        uint _2587 = uint((float(_2575.y) * floor(float(uint(cbSceneParam._m0[85u].y * _421) / _2576))) + floor(float(uint(cbSceneParam._m0[85u].x * _420) / _2576)));
        float _2597 = (log2(_1667 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2598 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        uint _2601 = uint(isnan(14.0) ? _2598 : (isnan(_2598) ? 14.0 : min(_2598, 14.0)));
        uvec4 _2606 = texelFetch(g_lightClusterGridBuffer, int(((_2601 << 2u) + (_2587 << 6u)) >> 2u));
        uint _2607 = _2606.x;
        uint _2608 = _2575.z;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        if (((((1u << ((_2608 >> 4u) & 15u)) + 4294967295u) & _2607) == 0u) || ((_2608 & 240u) == 0u))
        {
            _2686 = 0.0;
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
        }
        else
        {
            float _2687;
            float _2689;
            float _2691;
            float _2693;
            float _2695;
            float _2697;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            float _2842 = 0.0;
            float _2843 = 0.0;
            uint _2844 = 0u;
            uint _2853;
            bool _2854;
            for (;;)
            {
                _2853 = texelFetch(g_lightClassification, int((((_2601 << 5u) + (_2587 << 9u)) + (_2844 << 2u)) >> 2u)).x;
                _2854 = _2853 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2854)
                {
                    frontier_phi_73_pred = _2843;
                    frontier_phi_73_pred_1 = _2842;
                    frontier_phi_73_pred_2 = _2841;
                    frontier_phi_73_pred_3 = _2840;
                    frontier_phi_73_pred_4 = _2839;
                    frontier_phi_73_pred_5 = _2838;
                }
                else
                {
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    uint _2989;
                    _2983 = _2838;
                    _2984 = _2839;
                    _2985 = _2840;
                    _2986 = _2841;
                    _2987 = _2842;
                    _2988 = _2843;
                    _2989 = _2853;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    for (;;)
                    {
                        uint _2993 = uint(findLSB(_2989)) + (_2844 << 5u);
                        uint _2990 = (_2989 + 4294967295u) & _2989;
                        uint _2995 = _2993 * 48u;
                        vec4 _3009 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2995)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 3u)).x));
                        uint _3015 = (_2993 * 48u) + 4u;
                        vec4 _3028 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3015)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3015 + 3u)).x));
                        uint _3034 = (_2993 * 48u) + 8u;
                        vec3 _3045 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3034)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 2u)).x));
                        float _3049 = _3009.x - _1665;
                        float _3050 = _3009.y - _1666;
                        float _3051 = _3009.z - _1667;
                        float _3052 = dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051));
                        float _3055 = inversesqrt(_3052);
                        float _3056 = _3055 * _3049;
                        float _3057 = _3055 * _3050;
                        float _3058 = _3055 * _3051;
                        float _3059 = dot(vec3(_445, _448, _451), vec3(_3056, _3057, _3058));
                        float _3064 = 1.0 - (_3052 * _3009.w);
                        float _4443 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3065 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                        float _3066 = sqrt(_3052) * _3028.w;
                        float _3069 = 1.39999997615814208984375 / (_3066 + 1.39999997615814208984375);
                        float _3070 = _3069 * _3069;
                        float _3073 = ((1.0 - _3070) * _3059) + _3070;
                        float _3076 = _3066 * _3066;
                        float _3080 = ((isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0))) * _3065) / ((_3076 * 0.699999988079071044921875) + 1.0);
                        float _3084 = (-0.0) - _1665;
                        float _3085 = (-0.0) - _1666;
                        float _3086 = (-0.0) - _1667;
                        float _3090 = inversesqrt(dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086)));
                        float _3091 = _3090 * _3084;
                        float _3092 = _3090 * _3085;
                        float _3093 = _3090 * _3086;
                        float _3100 = exp2(log2(1.0 / ((_3076 * 3.5) + 5.0)) * 0.25);
                        float _3101 = 1.0 - _566;
                        float _3108 = sqrt(1.0 - ((1.0 - (_3101 * _3101)) * (1.0 - (_3100 * _3100))));
                        float _3109 = _3108 * _3108;
                        float _3110 = _3109 * _3109;
                        float _3111 = _3091 + _3056;
                        float _3112 = _3092 + _3057;
                        float _3113 = _3093 + _3058;
                        float _3117 = inversesqrt(dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113)));
                        float _3121 = dot(vec3(_445, _448, _451), vec3(_3091, _3092, _3093));
                        float _4459 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3124 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                        float _3125 = dot(vec3(_445, _448, _451), vec3(_3117 * _3111, _3117 * _3112, _3117 * _3113));
                        float _4470 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3128 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3132 = ((_3128 * _3128) * (_3110 + (-1.0))) + 1.0;
                        float _3133 = _3069 * _3109;
                        float _3134 = _3133 * _3133;
                        float _3137 = ((1.0 - _3134) * _3059) + _3134;
                        float _4481 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3138 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                        float _3139 = 1.0 - _3109;
                        float _3149 = (0.5 / (((_3138 * ((_3124 * _3139) + _3109)) + 9.9999999392252902907785028219223e-09) + (((_3138 * _3139) + _3109) * _3124))) * _3138;
                        float _4492 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3160 = (((_3110 * 3.1415927410125732421875) * (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) / ((_3132 * _3132) * ((_3076 * 2.1991131305694580078125) + 3.141590118408203125))) * _3065;
                        _2913 = (_3080 * _3028.x) + _2986;
                        _2914 = (_3080 * _3028.y) + _2987;
                        _2915 = (_3080 * _3028.z) + _2988;
                        _2910 = (_3160 * _3045.x) + _2983;
                        _2911 = (_3160 * _3045.y) + _2984;
                        _2912 = (_3160 * _3045.z) + _2985;
                        if (_2990 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2983 = _2910;
                            _2984 = _2911;
                            _2985 = _2912;
                            _2986 = _2913;
                            _2987 = _2914;
                            _2988 = _2915;
                            _2989 = _2990;
                        }
                    }
                    frontier_phi_73_pred = _2915;
                    frontier_phi_73_pred_1 = _2914;
                    frontier_phi_73_pred_2 = _2913;
                    frontier_phi_73_pred_3 = _2912;
                    frontier_phi_73_pred_4 = _2911;
                    frontier_phi_73_pred_5 = _2910;
                }
                _2697 = frontier_phi_73_pred;
                _2695 = frontier_phi_73_pred_1;
                _2693 = frontier_phi_73_pred_2;
                _2691 = frontier_phi_73_pred_3;
                _2689 = frontier_phi_73_pred_4;
                _2687 = frontier_phi_73_pred_5;
                uint _2845 = _2844 + 1u;
                if (_2845 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2838 = _2687;
                    _2839 = _2689;
                    _2840 = _2691;
                    _2841 = _2693;
                    _2842 = _2695;
                    _2843 = _2697;
                    _2844 = _2845;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2686 = _2687;
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
        }
        uvec4 _2700 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2701 = _2700.z;
        uint _2703 = (_2701 >> 8u) & 15u;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        if (((4294967295u << _2703) & _2607) == 0u)
        {
            _2806 = _2686;
            _2808 = _2688;
            _2810 = _2690;
            _2812 = _2692;
            _2814 = _2694;
            _2816 = _2696;
        }
        else
        {
            float _2831 = inversesqrt(dot(vec3(_1665, _1666, _1667), vec3(_1665, _1666, _1667)));
            float _2832 = _2831 * _1665;
            float _2833 = _2831 * _1666;
            float _2834 = _2831 * _1667;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2703 < ((_2701 >> 12u) & 15u))
            {
                float _2807;
                float _2809;
                float _2811;
                float _2813;
                float _2815;
                float _2817;
                float _2966 = _2686;
                float _2967 = _2688;
                float _2968 = _2690;
                float _2969 = _2692;
                float _2970 = _2694;
                float _2971 = _2696;
                uint _2972 = _2703;
                uint _2981;
                bool _2982;
                for (;;)
                {
                    _2981 = texelFetch(g_lightClassification, int((((_2601 << 5u) + (_2587 << 9u)) + (_2972 << 2u)) >> 2u)).x;
                    _2982 = _2981 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2982)
                    {
                        frontier_phi_84_pred = _2970;
                        frontier_phi_84_pred_1 = _2969;
                        frontier_phi_84_pred_2 = _2968;
                        frontier_phi_84_pred_3 = _2967;
                        frontier_phi_84_pred_4 = _2966;
                        frontier_phi_84_pred_5 = _2971;
                    }
                    else
                    {
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3187 = _2966;
                        float _3188 = _2967;
                        float _3189 = _2968;
                        float _3190 = _2969;
                        float _3191 = _2970;
                        float _3192 = _2971;
                        uint _3193 = _2981;
                        uint _3194;
                        vec4 _3219;
                        float _3220;
                        vec4 _3235;
                        vec3 _3247;
                        vec4 _3263;
                        vec4 _3279;
                        float _3326;
                        bool _3327;
                        for (;;)
                        {
                            uint _3204 = ((_2972 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3193));
                            _3194 = (_3193 + 4294967295u) & _3193;
                            uint _3206 = _3204 * 40u;
                            _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            _3220 = _3219.w;
                            uint _3222 = (_3204 * 40u) + 4u;
                            _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            uint _3237 = (_3204 * 40u) + 8u;
                            _3247 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x));
                            uint _3250 = (_3204 * 40u) + 16u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3266 = (_3204 * 40u) + 20u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            uint _3282 = (_3204 * 40u) + 24u;
                            vec4 _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3301 = (_3204 * 40u) + 28u;
                            vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            _3326 = fma(_1667, _3314.z, fma(_1666, _3314.y, _3314.x * _1665)) + _3314.w;
                            _3327 = !((fma(_1667, _3295.z, fma(_1666, _3295.y, _3295.x * _1665)) + _3295.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3327)
                            {
                                float _3354 = _3219.x - _1665;
                                float _3355 = _3219.y - _1666;
                                float _3356 = _3219.z - _1667;
                                float _3357 = dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356));
                                float _3360 = inversesqrt(_3357);
                                float _3361 = _3360 * _3354;
                                float _3362 = _3360 * _3355;
                                float _3363 = _3360 * _3356;
                                float _3367 = 1.0 - (_3357 / (_3220 * _3220));
                                float _4503 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3368 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                                float _3372 = sqrt(_3357) * _3235.w;
                                float _3374 = 1.39999997615814208984375 / (_3372 + 1.39999997615814208984375);
                                float _3375 = _3374 * _3374;
                                float _3378 = ((1.0 - _3375) * dot(vec3(_3361, _3362, _3363), vec3(_445, _448, _451))) + _3375;
                                float _3381 = _3372 * _3372;
                                float _3385 = (fma(_1667, _3263.z, fma(_1666, _3263.y, _3263.x * _1665)) + _3263.w) / _3326;
                                float _3386 = (fma(_1667, _3279.z, fma(_1666, _3279.y, _3279.x * _1665)) + _3279.w) / _3326;
                                float _3390 = 1.0 - dot(vec2(_3385, _3386), vec2(_3385, _3386));
                                float _4519 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3391 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3392 = _3391 * (((isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0))) * _3368) / ((_3381 * 0.699999988079071044921875) + 1.0));
                                float _3404 = exp2(log2(1.0 / ((_3381 * 3.5) + 5.0)) * 0.25);
                                float _3405 = 1.0 - _566;
                                float _3412 = sqrt(1.0 - ((1.0 - (_3405 * _3405)) * (1.0 - (_3404 * _3404))));
                                float _3413 = _3412 * _3412;
                                float _3414 = _3413 * _3413;
                                float _3415 = _3361 - _2832;
                                float _3416 = _3362 - _2833;
                                float _3417 = _3363 - _2834;
                                float _3421 = inversesqrt(dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417)));
                                float _3425 = dot(vec3(_445, _448, _451), vec3((-0.0) - _2832, (-0.0) - _2833, (-0.0) - _2834));
                                float _4530 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3428 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3429 = dot(vec3(_445, _448, _451), vec3(_3421 * _3415, _3421 * _3416, _3421 * _3417));
                                float _4541 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3432 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3436 = ((_3432 * _3432) * (_3414 + (-1.0))) + 1.0;
                                float _3437 = _3374 * _3413;
                                float _3438 = _3437 * _3437;
                                float _3444 = ((1.0 - _3438) * dot(vec3(_445, _448, _451), vec3(_3361, _3362, _3363))) + _3438;
                                float _4552 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3445 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                                float _3446 = 1.0 - _3413;
                                float _3456 = (0.5 / (((_3445 * ((_3428 * _3446) + _3413)) + 9.9999999392252902907785028219223e-09) + (((_3445 * _3446) + _3413) * _3428))) * _3445;
                                float _4563 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3466 = (_3391 * _3368) * (((_3414 * 3.1415927410125732421875) * (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) / ((_3436 * _3436) * ((_3381 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3392 * _3235.y;
                                frontier_phi_90_pred_1 = _3392 * _3235.x;
                                frontier_phi_90_pred_2 = _3466 * _3247.z;
                                frontier_phi_90_pred_3 = _3466 * _3247.y;
                                frontier_phi_90_pred_4 = _3466 * _3247.x;
                                frontier_phi_90_pred_5 = _3392 * _3235.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3474 = frontier_phi_90_pred;
                            _3473 = frontier_phi_90_pred_1;
                            _3472 = frontier_phi_90_pred_2;
                            _3471 = frontier_phi_90_pred_3;
                            _3470 = frontier_phi_90_pred_4;
                            _3475 = frontier_phi_90_pred_5;
                            _3177 = _3473 + _3190;
                            _3178 = _3474 + _3191;
                            _3179 = _3475 + _3192;
                            _3174 = _3470 + _3187;
                            _3175 = _3471 + _3188;
                            _3176 = _3472 + _3189;
                            if (_3194 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3194;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3178;
                        frontier_phi_84_pred_1 = _3177;
                        frontier_phi_84_pred_2 = _3176;
                        frontier_phi_84_pred_3 = _3175;
                        frontier_phi_84_pred_4 = _3174;
                        frontier_phi_84_pred_5 = _3179;
                    }
                    _2815 = frontier_phi_84_pred;
                    _2813 = frontier_phi_84_pred_1;
                    _2811 = frontier_phi_84_pred_2;
                    _2809 = frontier_phi_84_pred_3;
                    _2807 = frontier_phi_84_pred_4;
                    _2817 = frontier_phi_84_pred_5;
                    uint _2973 = _2972 + 1u;
                    if (_2973 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2966 = _2807;
                        _2967 = _2809;
                        _2968 = _2811;
                        _2969 = _2813;
                        _2970 = _2815;
                        _2971 = _2817;
                        _2972 = _2973;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2817;
                frontier_phi_65_66_ladder_1 = _2813;
                frontier_phi_65_66_ladder_2 = _2815;
                frontier_phi_65_66_ladder_3 = _2809;
                frontier_phi_65_66_ladder_4 = _2807;
                frontier_phi_65_66_ladder_5 = _2811;
            }
            else
            {
                frontier_phi_65_66_ladder = _2696;
                frontier_phi_65_66_ladder_1 = _2692;
                frontier_phi_65_66_ladder_2 = _2694;
                frontier_phi_65_66_ladder_3 = _2688;
                frontier_phi_65_66_ladder_4 = _2686;
                frontier_phi_65_66_ladder_5 = _2690;
            }
            _2806 = frontier_phi_65_66_ladder_4;
            _2808 = frontier_phi_65_66_ladder_3;
            _2810 = frontier_phi_65_66_ladder_5;
            _2812 = frontier_phi_65_66_ladder_1;
            _2814 = frontier_phi_65_66_ladder_2;
            _2816 = frontier_phi_65_66_ladder;
        }
        float _2821 = isnan(1.0) ? _550 : (isnan(_550) ? 1.0 : min(_550, 1.0));
        _2619 = (_2821 * _2812) + _2132;
        _2621 = (_2821 * _2814) + _2134;
        _2623 = (_2821 * _2816) + _2136;
        _2625 = ((_2806 * _535) * _2821) + _2470;
        _2627 = ((_2808 * _537) * _2821) + _2472;
        _2629 = ((_2810 * _538) * _2821) + _2474;
    }
    else
    {
        _2619 = _2132;
        _2621 = _2134;
        _2623 = _2136;
        _2625 = _2470;
        _2627 = _2472;
        _2629 = _2474;
    }
    float _4579 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _4590 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _4601 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _2646 = ((isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2619 + ((isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0))) * _550))) + ((_2625 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _1392)) * cbPerFrame._m0[3u].x);
    float _2647 = ((isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2621 + ((isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))) * _550))) + ((_2627 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _1392)) * cbPerFrame._m0[3u].x);
    float _2648 = ((isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2623 + ((isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))) * _550))) + ((_2629 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _1392)) * cbPerFrame._m0[3u].x);
    uint _2649 = _477 + 6u;
    float _2657 = _420 / cbSceneParam._m0[86u].x;
    float _2658 = _421 / cbSceneParam._m0[86u].y;
    vec4 _2672 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2657, _2658, (log2((isnan(cbSceneParam._m0[77u].w) ? _341 : (isnan(_341) ? cbSceneParam._m0[77u].w : min(_341, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2674 = _2672.x;
    float _2675 = _2672.y;
    float _2676 = _2672.z;
    float _2677 = _2672.w;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    if (_341 > cbSceneParam._m0[78u].w)
    {
        float _2711 = isnan(_341) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _341 : min(cbSceneParam._m0[80u].w, _341));
        float _2712 = _2711 / _341;
        float _2723 = _2712 * _392;
        float _2724 = _393 * _2712;
        float _2725 = (-0.0) - _2724;
        float _2726 = _2712 * _394;
        float _2728 = (cbSceneParam._m0[77u].w * _2725) / _2711;
        float _2729 = _2728 + cbSceneParam._m0[79u].w;
        float _2730 = cbSceneParam._m0[79u].w - _2724;
        float _2736 = sqrt(((_2723 * _2723) + (_2724 * _2724)) + (_2726 * _2726));
        float _2739 = (1.0 - (cbSceneParam._m0[77u].w / _2711)) * _2736;
        float _2744 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2746 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2923;
        if (abs((_2725 - _2728) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2923 = ((((_2729 > 0.0) ? exp2(_2744 * _2729) : (2.0 - exp2(_2746 * _2729))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2739;
        }
        else
        {
            float _2867 = 1.0 / cbSceneParam._m0[80u].x;
            float _2868 = isnan(_2730) ? _2729 : (isnan(_2729) ? _2730 : max(_2729, _2730));
            float _2869 = isnan(_2730) ? _2729 : (isnan(_2729) ? _2730 : min(_2729, _2730));
            float _2878 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : min(_2868, 0.0));
            float _2879 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : min(_2869, 0.0));
            _2923 = ((abs(_2736 / _2725) * cbSceneParam._m0[80u].y) * ((((_2878 - _2879) * 2.0) - ((exp2(_2744 * (isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0)))) - exp2(_2744 * (isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0))))) * _2867)) - ((exp2(_2746 * _2878) - exp2(_2746 * _2879)) * _2867))) + (_2739 * cbSceneParam._m0[80u].z);
        }
        vec4 _2925 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2657, _2658, 1.0), 0.0);
        float _2934 = exp2((_2923 * (-1.44269502162933349609375)) * (1.0 - _2925.w));
        float _2935 = log2(_2934);
        float _2951 = log2(_2677);
        _2748 = (exp2(_2951 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2935 * cbSceneParam._m0[78u].x)) * _2925.x) / cbSceneParam._m0[78u].x)) + _2674;
        _2750 = (exp2(_2951 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2935 * cbSceneParam._m0[78u].y)) * _2925.y) / cbSceneParam._m0[78u].y)) + _2675;
        _2752 = (exp2(_2951 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2935 * cbSceneParam._m0[78u].z)) * _2925.z) / cbSceneParam._m0[78u].z)) + _2676;
        _2754 = _2934 * _2677;
    }
    else
    {
        _2748 = _2674;
        _2750 = _2675;
        _2752 = _2676;
        _2754 = _2677;
    }
    bool _2961;
    vec4 _2764;
    vec4 _2786;
    float _2788;
    float _2792;
    float _2793;
    float _2794;
    float _2795;
    bool _2805;
    for (;;)
    {
        _2764 = cbMatDynParam._m0[0u];
        float _2766 = roundEven(_2764.y);
        bool _2767 = _2766 == 3.0;
        float _2768 = log2(_2754);
        float _2775 = exp2(_2768 * cbSceneParam._m0[78u].x) * _2646;
        float _2776 = exp2(_2768 * cbSceneParam._m0[78u].y) * _2647;
        float _2777 = exp2(_2768 * cbSceneParam._m0[78u].z) * _2648;
        float _2784 = _408 + (-0.5);
        _2786 = cbMtdParam._m0[1u];
        _2788 = _2786.y * _2784;
        float _2791 = (_2766 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2792 = _2791 * (_2767 ? _2775 : (_2775 + (cbSceneParam._m0[72u].w * _2748)));
        _2793 = _2791 * (_2767 ? _2776 : (_2776 + (cbSceneParam._m0[72u].w * _2750)));
        _2794 = _2791 * (_2767 ? _2777 : (_2777 + (cbSceneParam._m0[72u].w * _2752)));
        _2795 = _2784 * 0.999000012874603271484375;
        _2805 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2805)
        {
            if ((cbInstanceData._m0[_477 + 7u].x + _2795) < 0.5)
            {
                _2961 = true;
                break;
            }
        }
        uint _2902 = _479 + uint(_2764.w);
        if ((cbInstanceData._m0[_2902].w < 1.0) && ((cbInstanceData._m0[_2902].w + _2795) < 0.5))
        {
            _2961 = true;
            break;
        }
        if ((_2788 + 1.0) < _2786.x)
        {
            _2961 = true;
            break;
        }
        _2961 = false;
        break;
    }
    float _3165;
    if (_2961)
    {
        discard_state = true;
        _3165 = 0.0;
    }
    else
    {
        _3165 = cbInstanceData._m0[_2649].w;
    }
    SV_Target.x = _2792;
    SV_Target.y = _2793;
    SV_Target.z = _2794;
    SV_Target.w = _3165;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2649].w;
    discard_exit();
}


