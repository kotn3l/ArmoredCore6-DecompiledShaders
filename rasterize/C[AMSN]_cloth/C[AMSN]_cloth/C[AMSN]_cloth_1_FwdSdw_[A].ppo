#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _937;
float _3611;
float _3612;
float _3613;
float _3614;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224;
    float _225;
    float _226;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
    }
    else
    {
        _224 = _210;
        _225 = _211;
        _226 = _212;
    }
    vec4 _246 = texture(sampler2D(C_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _252 = _246.x * cbMtdParam._m0[9u].x;
    float _253 = _246.y * cbMtdParam._m0[9u].y;
    float _254 = _246.z * cbMtdParam._m0[9u].z;
    vec4 _270 = texture(sampler2D(C_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _270.z;
    float _278 = (_270.x * 2.0) + (-1.0);
    float _280 = (_270.y * 2.0) + (-1.0);
    float _281 = dot(vec2(_278, _280), vec2(_278, _280));
    float _3623 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _287 = sqrt(1.0 - (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))));
    float _290 = fma(_287, _224, fma(_280, _216 * TANGENT.x, (_202 * _194) * _278));
    float _293 = fma(_287, _225, fma(_280, _216 * TANGENT.y, (_202 * _195) * _278));
    float _296 = fma(_287, _226, fma(_280, _216 * TANGENT.z, (_202 * _196) * _278));
    float _300 = inversesqrt(dot(vec3(_290, _293, _296), vec3(_290, _293, _296)));
    float _301 = _300 * _290;
    float _302 = _300 * _293;
    float _303 = _300 * _296;
    float _3634 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _304 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _3645 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3656 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3667 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3678 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _308 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _324 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _365 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _375 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _365);
    float _376 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _365);
    float _377 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _365);
    float _381 = inversesqrt(dot(vec3(_375, _376, _377), vec3(_375, _376, _377)));
    float _382 = _375 * _381;
    float _383 = _376 * _381;
    float _384 = _377 * _381;
    vec4 _389 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _391 = _389.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _616 = sqrt(((_375 * _375) + (_376 * _376)) + (_377 * _377));
        float _622 = (cbMatDynParam._m0[5u].x * _616) + cbMatDynParam._m0[5u].y;
        float _3689 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
        float _623 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _627 = (cbMatDynParam._m0[5u].z * _616) + cbMatDynParam._m0[5u].w;
        float _3700 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) - _623)) + _623) < ((_391 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _403 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _404 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _406 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _408 = _406.w;
    float _428 = fma(_303, cbSceneParam._m0[5u].z, fma(_302, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _301));
    float _431 = fma(_303, cbSceneParam._m0[6u].z, fma(_302, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _301));
    float _434 = fma(_303, cbSceneParam._m0[7u].z, fma(_302, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _301));
    vec4 _436 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _447 = (((_436.y - _304) + (_436.w * _304)) * cbMtdParam._m0[3u].x) + _304;
    uint _460 = uint(roundEven(NORMAL.w)) * 13u;
    uint _462 = _460 + 9u;
    uint _463 = _462 + uint(cbMatDynParam._m0[0u].w);
    float _469 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0)))) * cbInstanceData._m0[_463].x;
    float _470 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0)))) * cbInstanceData._m0[_463].y;
    float _471 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0)))) * cbInstanceData._m0[_463].z;
    float _3711 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _3722 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _3733 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    vec4 _475 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _480 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _491 = (((_480.x - _308) + (_480.w * _308)) * cbMtdParam._m0[3u].x) + _308;
    float _504 = (cbMtdParam._m0[3u].x * (((_472 * _408) - _472) + _475.x)) + _472;
    float _505 = (cbMtdParam._m0[3u].x * (((_473 * _408) - _473) + _475.y)) + _473;
    float _506 = (cbMtdParam._m0[3u].x * (((_474 * _408) - _474) + _475.z)) + _474;
    float _507 = 1.0 - _491;
    float _508 = _507 * _504;
    float _509 = _507 * _505;
    float _510 = _507 * _506;
    float _515 = (_504 + (-0.039999999105930328369140625)) * _491;
    float _516 = (_505 + (-0.039999999105930328369140625)) * _491;
    float _517 = (_506 + (-0.039999999105930328369140625)) * _491;
    float _518 = _515 + 0.039999999105930328369140625;
    float _520 = _516 + 0.039999999105930328369140625;
    float _521 = _517 + 0.039999999105930328369140625;
    vec4 _530 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _403, cbSceneParam._m0[86u].y * _404));
    float _533 = _530.x * TEXCOORD_4;
    float _534 = dot(vec3(_301, _302, _303), vec3(_382, _383, _384));
    float _537 = _534 * 2.0;
    float _541 = (_537 * _301) - _382;
    float _542 = (_537 * _302) - _383;
    float _543 = (_537 * _303) - _384;
    float _547 = abs(dot(vec3(_382, _383, _384), vec3(_301, _302, _303)));
    float _3744 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _549 = sqrt(_447);
    float _562 = exp2((_549 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_549 * 3.0));
    float _568 = (1.0 - _562) * ((_549 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _569 = _562 * _549;
    float _597 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _601 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _605 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _936;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _661 = fma(_605, cbModelParam._m0[26u].z, fma(_601, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _597));
        float _665 = fma(_605, cbModelParam._m0[27u].z, fma(_601, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _597));
        float _669 = fma(_605, cbModelParam._m0[28u].z, fma(_601, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _597));
        float _694 = _597 + _301;
        float _695 = _601 + _302;
        float _696 = _605 + _303;
        float _706 = fma(_696, cbModelParam._m0[26u].z, fma(_695, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _694)) - _661;
        float _707 = fma(_696, cbModelParam._m0[27u].z, fma(_695, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _694)) - _665;
        float _708 = fma(_696, cbModelParam._m0[28u].z, fma(_695, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _694)) - _669;
        float _712 = inversesqrt(dot(vec3(_706, _707, _708), vec3(_706, _707, _708)));
        float _725 = ((_712 * _706) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_661 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _726 = ((_712 * _707) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_665 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _727 = ((_712 * _708) / cbModelParam._m0[34u].z) + ((((((_669 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _730 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_725, _726, _727), 0.0);
        vec4 _737 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_725, _726, _727), 0.0);
        vec4 _744 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_725, _726, _727), 0.0);
        vec4 _751 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_725, _726, _727), 0.0);
        float _764 = exp2((_730.w + (-0.5)) * 20.0) * 2.0;
        float _765 = _764 * (_730.x + (-0.5));
        float _766 = _764 * (_730.y + (-0.5));
        float _767 = _764 * (_730.z + (-0.5));
        float _774 = exp2((_737.w + (-0.5)) * 20.0) * 2.0;
        float _775 = _774 * (_737.x + (-0.5));
        float _776 = _774 * (_737.y + (-0.5));
        float _777 = _774 * (_737.z + (-0.5));
        float _784 = exp2((_744.w + (-0.5)) * 20.0) * 2.0;
        float _785 = _784 * (_744.x + (-0.5));
        float _786 = _784 * (_744.y + (-0.5));
        float _787 = _784 * (_744.z + (-0.5));
        float _794 = exp2((_751.w + (-0.5)) * 20.0) * 2.0;
        float _795 = _794 * (_751.x + (-0.5));
        float _796 = _794 * (_751.y + (-0.5));
        float _797 = _794 * (_751.z + (-0.5));
        float _798 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _799 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _800 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _801 = _765 * 0.5;
        float _802 = _775 * 0.5;
        float _803 = _785 * 0.5;
        float _804 = dot(vec3(_801, _802, _803), vec3(_801, _802, _803));
        float _809 = (_804 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_804);
        float _818 = (dot(vec3(_301, _302, _303), vec3(_809 * _801, _809 * _802, _809 * _803)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _828 = sqrt(((_802 * _802) + (_801 * _801)) + (_803 * _803)) / (_798 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _830 = _829 * 2.0;
        float _834 = (1.0 - _829) / (_829 + 1.0);
        float _3792 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _844 = ((((1.0 - _835) * (_830 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_830 + 1.0))) + _835) * _798;
        float _845 = _766 * 0.5;
        float _846 = _776 * 0.5;
        float _847 = _786 * 0.5;
        float _848 = dot(vec3(_845, _846, _847), vec3(_845, _846, _847));
        float _853 = (_848 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_848);
        float _861 = (dot(vec3(_301, _302, _303), vec3(_853 * _845, _853 * _846, _853 * _847)) + 1.0) * 0.5;
        float _3803 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _870 = sqrt(((_846 * _846) + (_845 * _845)) + (_847 * _847)) / (_799 + 9.9999997473787516355514526367188e-06);
        float _3814 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _872 = _871 * 2.0;
        float _876 = (1.0 - _871) / (_871 + 1.0);
        float _3825 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _886 = ((((1.0 - _877) * (_872 + 2.0)) * exp2(log2(isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_872 + 1.0))) + _877) * _799;
        float _887 = _767 * 0.5;
        float _888 = _777 * 0.5;
        float _889 = _787 * 0.5;
        float _890 = dot(vec3(_887, _888, _889), vec3(_887, _888, _889));
        float _895 = (_890 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_890);
        float _903 = (dot(vec3(_301, _302, _303), vec3(_895 * _887, _895 * _888, _895 * _889)) + 1.0) * 0.5;
        float _3836 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _912 = sqrt(((_888 * _888) + (_887 * _887)) + (_889 * _889)) / (_800 + 9.9999997473787516355514526367188e-06);
        float _3847 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _914 = _913 * 2.0;
        float _918 = (1.0 - _913) / (_913 + 1.0);
        float _3858 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _928 = ((((1.0 - _919) * (_914 + 2.0)) * exp2(log2(isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_914 + 1.0))) + _919) * _800;
        _936 = _767;
        _938 = _766;
        _939 = _765;
        _940 = _777;
        _941 = _776;
        _942 = _775;
        _943 = _787;
        _944 = _786;
        _945 = _785;
        _946 = _800;
        _947 = _799;
        _948 = _798;
        _949 = cbModelParam._m0[36u].z * (isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0)));
        _950 = cbModelParam._m0[36u].z * (isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0)));
        _951 = cbModelParam._m0[36u].z * (isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0)));
    }
    else
    {
        _936 = _937;
        _938 = _937;
        _939 = _937;
        _940 = _937;
        _941 = _937;
        _942 = _937;
        _943 = _937;
        _944 = _937;
        _945 = _937;
        _946 = _937;
        _947 = _937;
        _948 = _937;
        _949 = 0.0;
        _950 = 0.0;
        _951 = 0.0;
    }
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _980 = fma(_605, cbModelParam._m0[30u].z, fma(_601, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _597));
        float _984 = fma(_605, cbModelParam._m0[31u].z, fma(_601, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _597));
        float _988 = fma(_605, cbModelParam._m0[32u].z, fma(_601, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _597));
        float _1011 = _597 + _301;
        float _1012 = _601 + _302;
        float _1013 = _605 + _303;
        float _1023 = fma(_1013, cbModelParam._m0[30u].z, fma(_1012, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1011)) - _980;
        float _1024 = fma(_1013, cbModelParam._m0[31u].z, fma(_1012, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1011)) - _984;
        float _1025 = fma(_1013, cbModelParam._m0[32u].z, fma(_1012, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1011)) - _988;
        float _1029 = inversesqrt(dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025)));
        float _1042 = ((_1029 * _1023) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_980 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1043 = ((_1029 * _1024) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_984 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1044 = ((_1029 * _1025) / cbModelParam._m0[35u].z) + ((((((_988 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        float _1079 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1046.x + (-0.5));
        float _1081 = _1079 * (_1046.y + (-0.5));
        float _1082 = _1079 * (_1046.z + (-0.5));
        float _1089 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1053.x + (-0.5));
        float _1091 = _1089 * (_1053.y + (-0.5));
        float _1092 = _1089 * (_1053.z + (-0.5));
        float _1099 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1060.x + (-0.5));
        float _1101 = _1099 * (_1060.y + (-0.5));
        float _1102 = _1099 * (_1060.z + (-0.5));
        float _1109 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1067.x + (-0.5));
        float _1111 = _1109 * (_1067.y + (-0.5));
        float _1112 = _1109 * (_1067.z + (-0.5));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = _1080 * 0.5;
        float _1117 = _1090 * 0.5;
        float _1118 = _1100 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_301, _302, _303), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3921 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1143 + 1.0))) + _1148) * _1113;
        float _1158 = _1081 * 0.5;
        float _1159 = _1091 * 0.5;
        float _1160 = _1101 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_301, _302, _303), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3932 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3943 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3954 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1185 + 1.0))) + _1190) * _1114;
        float _1200 = _1082 * 0.5;
        float _1201 = _1092 * 0.5;
        float _1202 = _1102 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(_301, _302, _303), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _3965 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3976 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3987 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1227 + 1.0))) + _1232) * _1115;
        _1249 = _1082;
        _1250 = _1081;
        _1251 = _1080;
        _1252 = _1092;
        _1253 = _1091;
        _1254 = _1090;
        _1255 = _1102;
        _1256 = _1101;
        _1257 = _1100;
        _1258 = _1115;
        _1259 = _1114;
        _1260 = _1113;
        _1261 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1262 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
        _1263 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
    }
    else
    {
        _1249 = _937;
        _1250 = _937;
        _1251 = _937;
        _1252 = _937;
        _1253 = _937;
        _1254 = _937;
        _1255 = _937;
        _1256 = _937;
        _1257 = _937;
        _1258 = _937;
        _1259 = _937;
        _1260 = _937;
        _1261 = 0.0;
        _1262 = 0.0;
        _1263 = 0.0;
    }
    float _1273 = (cbModelParam._m0[1u].x * (_1261 - _949)) + _949;
    float _1274 = (cbModelParam._m0[1u].x * (_1262 - _950)) + _950;
    float _1275 = (cbModelParam._m0[1u].x * (_1263 - _951)) + _951;
    float _1296 = fma(_1275, cbSceneParam._m0[89u].z, fma(_1274, cbSceneParam._m0[89u].y, _1273 * cbSceneParam._m0[89u].x));
    float _1299 = fma(_1275, cbSceneParam._m0[90u].z, fma(_1274, cbSceneParam._m0[90u].y, _1273 * cbSceneParam._m0[90u].x));
    float _1302 = fma(_1275, cbSceneParam._m0[91u].z, fma(_1274, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1273));
    float _1317 = _541 * 0.5;
    float _1318 = _542 * 0.5;
    float _1319 = _543 * 0.5;
    float _1320 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_1251, _1254, _1257, _1260));
    float _1323 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_1250, _1253, _1256, _1259));
    float _1326 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_1249, _1252, _1255, _1258));
    float _1360;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1333 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_936, _940, _943, _946));
        float _1337 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_938, _941, _944, _947));
        float _1341 = dot(vec4(_1317, _1318, _1319, 1.0), vec4(_939, _942, _945, _948));
        float _1348 = dot(vec4(cbModelParam._m0[39u]), vec4(_1317, _1318, _1319, 1.0));
        _1360 = dot(vec3(isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)), isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1348) ? 0.0 : (isnan(0.0) ? _1348 : max(0.0, _1348))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1360 = 1.0;
    }
    float _1371;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1362 = dot(vec4(cbModelParam._m0[40u]), vec4(_1317, _1318, _1319, 1.0));
        _1371 = dot(vec3(isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)), isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)), isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1362) ? 0.0 : (isnan(0.0) ? _1362 : max(0.0, _1362))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1371 = 1.0;
    }
    float _1375 = (_1371 * cbModelParam._m0[1u].x) + (_1360 * (1.0 - cbModelParam._m0[1u].x));
    float _1385 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _447);
    float _1386 = isnan(_1385) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1385 : min(cbModelParam._m0[25u].z, _1385));
    float _1468;
    float _1470;
    float _1472;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1435 = fma(_605, cbModelParam._m0[13u].z, fma(_601, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _597)) + cbModelParam._m0[13u].w;
        float _1439 = fma(_605, cbModelParam._m0[14u].z, fma(_601, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _597)) + cbModelParam._m0[14u].w;
        float _1443 = fma(_605, cbModelParam._m0[15u].z, fma(_601, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _597)) + cbModelParam._m0[15u].w;
        float _1446 = fma(_543, cbModelParam._m0[13u].z, fma(_542, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _541));
        float _1449 = fma(_543, cbModelParam._m0[14u].z, fma(_542, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _541));
        float _1452 = fma(_543, cbModelParam._m0[15u].z, fma(_542, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _541));
        float _1480;
        if (_1446 > 0.0)
        {
            _1480 = abs((1.0 - _1435) / _1446);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1435 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1480 = frontier_phi_19_17_ladder;
        }
        float _1656;
        if (_1449 > 0.0)
        {
            _1656 = abs((1.0 - _1439) / _1449);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1439 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1656 = frontier_phi_28_24_ladder;
        }
        float _1952;
        if (_1452 > 0.0)
        {
            _1952 = abs((1.0 - _1443) / _1452);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1443 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1952 = frontier_phi_40_35_ladder;
        }
        float _1954 = isnan(_1656) ? _1480 : (isnan(_1480) ? _1656 : min(_1480, _1656));
        float _1955 = isnan(_1952) ? _1954 : (isnan(_1954) ? _1952 : min(_1954, _1952));
        float _1959 = (_1955 * _1446) + _1435;
        float _1960 = (_1955 * _1449) + _1439;
        float _1961 = (_1955 * _1452) + _1443;
        float _1962 = _1955 * 9.9999997473787516355514526367188e-05;
        float _1964 = (-1.0) - _1962;
        float _1966 = _1962 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1961 > _1966) || ((_1961 < _1964) || ((_1960 > _1966) || ((_1960 < _1964) || ((_1959 < _1964) || (_1959 > _1966))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2106 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1961, cbModelParam._m0[9u].z, fma(_1960, cbModelParam._m0[9u].y, _1959 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1961, cbModelParam._m0[10u].z, fma(_1960, cbModelParam._m0[10u].y, _1959 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1961, cbModelParam._m0[11u].z, fma(_1960, cbModelParam._m0[11u].y, _1959 * cbModelParam._m0[11u].x))), _1386);
            frontier_phi_18_40_ladder = _2106.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2106.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2106.x * cbModelParam._m0[1u].y;
        }
        _1468 = frontier_phi_18_40_ladder_2;
        _1470 = frontier_phi_18_40_ladder_1;
        _1472 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1456 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_541, _542, _543), _1386);
        _1468 = _1456.x * cbModelParam._m0[1u].y;
        _1470 = _1456.y * cbModelParam._m0[1u].y;
        _1472 = _1456.z * cbModelParam._m0[1u].y;
    }
    float _1476 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _447);
    float _1477 = isnan(_1476) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1476 : min(cbModelParam._m0[25u].w, _1476));
    float _1570;
    float _1572;
    float _1574;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1534 = fma(_605, cbModelParam._m0[21u].z, fma(_601, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _597)) + cbModelParam._m0[21u].w;
        float _1538 = fma(_605, cbModelParam._m0[22u].z, fma(_601, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _597)) + cbModelParam._m0[22u].w;
        float _1542 = fma(_605, cbModelParam._m0[23u].z, fma(_601, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _597)) + cbModelParam._m0[23u].w;
        float _1545 = fma(_543, cbModelParam._m0[21u].z, fma(_542, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _541));
        float _1548 = fma(_543, cbModelParam._m0[22u].z, fma(_542, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _541));
        float _1551 = fma(_543, cbModelParam._m0[23u].z, fma(_542, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _541));
        float _1661;
        if (_1545 > 0.0)
        {
            _1661 = abs((1.0 - _1534) / _1545);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1534 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1661 = frontier_phi_30_26_ladder;
        }
        float _1979;
        if (_1548 > 0.0)
        {
            _1979 = abs((1.0 - _1538) / _1548);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1538 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1979 = frontier_phi_42_37_ladder;
        }
        float _2317;
        if (_1551 > 0.0)
        {
            _2317 = abs((1.0 - _1542) / _1551);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1542 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2317 = frontier_phi_52_49_ladder;
        }
        float _2319 = isnan(_1979) ? _1661 : (isnan(_1661) ? _1979 : min(_1661, _1979));
        float _2320 = isnan(_2317) ? _2319 : (isnan(_2319) ? _2317 : min(_2319, _2317));
        float _2324 = (_2320 * _1545) + _1534;
        float _2325 = (_2320 * _1548) + _1538;
        float _2326 = (_2320 * _1551) + _1542;
        float _2327 = _2320 * 9.9999997473787516355514526367188e-05;
        float _2328 = (-1.0) - _2327;
        float _2330 = _2327 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2326 > _2330) || ((_2326 < _2328) || ((_2325 > _2330) || ((_2325 < _2328) || ((_2324 < _2328) || (_2324 > _2330))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2448 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2326, cbModelParam._m0[17u].z, fma(_2325, cbModelParam._m0[17u].y, _2324 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2326, cbModelParam._m0[18u].z, fma(_2325, cbModelParam._m0[18u].y, _2324 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2326, cbModelParam._m0[19u].z, fma(_2325, cbModelParam._m0[19u].y, _2324 * cbModelParam._m0[19u].x))), _1477);
            frontier_phi_27_52_ladder = _2448.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2448.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2448.x * cbModelParam._m0[1u].z;
        }
        _1570 = frontier_phi_27_52_ladder_2;
        _1572 = frontier_phi_27_52_ladder_1;
        _1574 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1554 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_541, _542, _543), _1477);
        _1570 = _1554.x * cbModelParam._m0[1u].z;
        _1572 = _1554.y * cbModelParam._m0[1u].z;
        _1574 = _1554.z * cbModelParam._m0[1u].z;
    }
    float _1587 = (((_568 * _518) + _569) * _533) * ((cbModelParam._m0[1u].w * (_1570 - _1468)) + _1468);
    float _1589 = (((_568 * _520) + _569) * _533) * ((cbModelParam._m0[1u].w * (_1572 - _1470)) + _1470);
    float _1591 = (((_568 * _521) + _569) * _533) * ((cbModelParam._m0[1u].w * (_1574 - _1472)) + _1472);
    float _1594 = fma(_1591, cbSceneParam._m0[89u].z, fma(_1589, cbSceneParam._m0[89u].y, _1587 * cbSceneParam._m0[89u].x));
    float _1597 = fma(_1591, cbSceneParam._m0[90u].z, fma(_1589, cbSceneParam._m0[90u].y, _1587 * cbSceneParam._m0[90u].x));
    float _1600 = fma(_1591, cbSceneParam._m0[91u].z, fma(_1589, cbSceneParam._m0[91u].y, _1587 * cbSceneParam._m0[91u].x));
    float _1635 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1639 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1643 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1647 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1648 = _1635 / _1647;
    float _1649 = _1639 / _1647;
    float _1650 = _1643 / _1647;
    float _1797;
    float _1798;
    float _1799;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1677 = ((uint(_1650 > cbSceneParam._m0[59u].y) + uint(_1650 > cbSceneParam._m0[59u].x)) + uint(_1650 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1678 = _1677 + 43u;
        uint _1686 = _1677 + 44u;
        uint _1694 = _1677 + 45u;
        uint _1702 = _1677 + 46u;
        float _1713 = fma(_1647, cbSceneParam._m0[_1678].w, fma(_1643, cbSceneParam._m0[_1678].z, fma(_1639, cbSceneParam._m0[_1678].y, _1635 * cbSceneParam._m0[_1678].x)));
        float _1717 = fma(_1647, cbSceneParam._m0[_1686].w, fma(_1643, cbSceneParam._m0[_1686].z, fma(_1639, cbSceneParam._m0[_1686].y, _1635 * cbSceneParam._m0[_1686].x)));
        float _1725 = fma(_1647, cbSceneParam._m0[_1702].w, fma(_1643, cbSceneParam._m0[_1702].z, fma(_1639, cbSceneParam._m0[_1702].y, _1635 * cbSceneParam._m0[_1702].x)));
        float _1730 = cbSceneParam._m0[33u].z * _1725;
        float _1732 = cbSceneParam._m0[33u].w * _1725;
        float _1735 = fma(_1647, cbSceneParam._m0[_1694].w, fma(_1643, cbSceneParam._m0[_1694].z, fma(_1639, cbSceneParam._m0[_1694].y, _1635 * cbSceneParam._m0[_1694].x))) / _1725;
        float _1783 = (cbSceneParam._m0[33u].x - sqrt(((_1649 * _1649) + (_1648 * _1648)) + (_1650 * _1650))) * cbSceneParam._m0[33u].y;
        float _4113 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1790 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1730 + _1713) / _1725, (_1732 + _1717) / _1725), _1735), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1732 + _1713) / _1725, (_1717 - _1730) / _1725), _1735), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1713 - _1730) / _1725, (_1717 - _1732) / _1725), _1735), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1713 - _1732) / _1725, (_1730 + _1717) / _1725), _1735), 0.0)).x), vec4(0.25)));
        _1797 = 1.0 - (_1790 * cbSceneParam._m0[34u].x);
        _1798 = 1.0 - (_1790 * cbSceneParam._m0[34u].y);
        _1799 = 1.0 - (_1790 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1797 = 1.0;
        _1798 = 1.0;
        _1799 = 1.0;
    }
    float _1863;
    float _1865;
    float _1867;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1851 = fma(_1647, cbSceneParam._m0[63u].w, fma(_1643, cbSceneParam._m0[63u].z, fma(_1639, cbSceneParam._m0[63u].y, _1635 * cbSceneParam._m0[63u].x)));
        float _1852 = fma(_1647, cbSceneParam._m0[60u].w, fma(_1643, cbSceneParam._m0[60u].z, fma(_1639, cbSceneParam._m0[60u].y, _1635 * cbSceneParam._m0[60u].x))) / _1851;
        float _1853 = fma(_1647, cbSceneParam._m0[61u].w, fma(_1643, cbSceneParam._m0[61u].z, fma(_1639, cbSceneParam._m0[61u].y, _1635 * cbSceneParam._m0[61u].x))) / _1851;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1852 >= cbSceneParam._m0[64u].x) && (_1853 >= cbSceneParam._m0[64u].y)) && (_1852 <= cbSceneParam._m0[64u].z)) && (_1853 <= cbSceneParam._m0[64u].w))
        {
            float _1992 = fma(_1647, cbSceneParam._m0[62u].w, fma(_1643, cbSceneParam._m0[62u].z, fma(_1639, cbSceneParam._m0[62u].y, _1635 * cbSceneParam._m0[62u].x))) / _1851;
            float _1996 = isnan(cbSceneParam._m0[41u].w) ? _1992 : (isnan(_1992) ? cbSceneParam._m0[41u].w : max(_1992, cbSceneParam._m0[41u].w));
            float _2039 = (cbSceneParam._m0[33u].x - sqrt(((_1649 * _1649) + (_1648 * _1648)) + (_1650 * _1650))) * cbSceneParam._m0[33u].y;
            float _4129 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
            float _2046 = (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1852, cbSceneParam._m0[33u].w + _1853), _1996), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1852, _1853 - cbSceneParam._m0[33u].z), _1996), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1852 - cbSceneParam._m0[33u].z, _1853 - cbSceneParam._m0[33u].w), _1996), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1852 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1853), _1996), 0.0)).x), vec4(0.25)));
            float _2050 = 1.0 - (_2046 * cbSceneParam._m0[34u].x);
            float _2051 = 1.0 - (_2046 * cbSceneParam._m0[34u].y);
            float _2052 = 1.0 - (_2046 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2051) ? _1798 : (isnan(_1798) ? _2051 : min(_1798, _2051));
            frontier_phi_39_38_ladder_1 = isnan(_2050) ? _1797 : (isnan(_1797) ? _2050 : min(_1797, _2050));
            frontier_phi_39_38_ladder_2 = isnan(_2052) ? _1799 : (isnan(_1799) ? _2052 : min(_1799, _2052));
        }
        else
        {
            frontier_phi_39_38_ladder = _1798;
            frontier_phi_39_38_ladder_1 = _1797;
            frontier_phi_39_38_ladder_2 = _1799;
        }
        _1863 = frontier_phi_39_38_ladder_1;
        _1865 = frontier_phi_39_38_ladder;
        _1867 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1863 = _1797;
        _1865 = _1798;
        _1867 = _1799;
    }
    uvec4 _1872 = floatBitsToUint(cbInstanceData._m0[_460 + 5u]);
    uint _1874 = _1872.x * 14u;
    uint _1875 = _1874 + 13u;
    float _1882 = _533 + (-1.0);
    float _1887 = (cbLight._m0[_1875].x * _1882) + 1.0;
    float _1888 = (cbLight._m0[_1875].y * _1882) + 1.0;
    float _1889 = (cbLight._m0[_1875].z * _1882) + 1.0;
    float _1890 = (cbLight._m0[_1875].w * _1882) + 1.0;
    uint _1891 = _1874 + 5u;
    float _1897 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
    uint _1901 = _1874 + 4u;
    float _1911 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
    uint _1915 = _1874 | 1u;
    float _1926 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_301, _302, _303));
    float _1929 = dot(vec3(cbLight._m0[_1915].xyz), vec3(_301, _302, _303));
    float _4165 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _4176 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1934 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * 0.3183098733425140380859375;
    float _1936 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * 0.3183098733425140380859375;
    float _1943 = ((cbLight._m0[_1891].x * _1897) * _1936) + (((cbLight._m0[_1901].x * _1863) * _1911) * _1934);
    float _1944 = ((_1897 * cbLight._m0[_1891].y) * _1936) + (((cbLight._m0[_1901].y * _1865) * _1911) * _1934);
    float _1945 = ((_1897 * cbLight._m0[_1891].z) * _1936) + (((cbLight._m0[_1901].z * _1867) * _1911) * _1934);
    uvec4 _1949 = floatBitsToUint(cbLight._m0[_1874 + 12u]);
    bool _1951 = _1949.x == 0u;
    float _2053;
    float _2055;
    float _2057;
    if (_1951)
    {
        _2053 = _1943;
        _2055 = _1944;
        _2057 = _1945;
    }
    else
    {
        uint _2061 = _1874 + 6u;
        float _2077 = (dot(vec3(cbLight._m0[_1874 + 2u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _2078 = _2077 * _2077;
        float _4187 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2079 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _2080 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
        _2053 = (((cbLight._m0[_2061].x * 0.3183098733425140380859375) * _2079) * _2080) + _1943;
        _2055 = (((cbLight._m0[_2061].y * 0.3183098733425140380859375) * _2079) * _2080) + _1944;
        _2057 = (((cbLight._m0[_2061].z * 0.3183098733425140380859375) * _2079) * _2080) + _1945;
    }
    bool _2060 = _1949.y == 0u;
    float _2115;
    float _2117;
    float _2119;
    if (_2060)
    {
        _2115 = _2053;
        _2117 = _2055;
        _2119 = _2057;
    }
    else
    {
        uint _2288 = _1874 + 7u;
        float _2304 = (dot(vec3(cbLight._m0[_1874 + 3u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _2305 = _2304 * _2304;
        float _4203 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2306 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _2307 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2115 = (((cbLight._m0[_2288].x * 0.3183098733425140380859375) * _2306) * _2307) + _2053;
        _2117 = (((cbLight._m0[_2288].y * 0.3183098733425140380859375) * _2306) * _2307) + _2055;
        _2119 = (((cbLight._m0[_2288].z * 0.3183098733425140380859375) * _2306) * _2307) + _2057;
    }
    uint _2122 = _1874 + 8u;
    float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1874].w)) * _447) * 0.949999988079071044921875);
    float _2136 = _2135 * _2135;
    float _2137 = cbLight._m0[_1874].x + _382;
    float _2138 = cbLight._m0[_1874].y + _383;
    float _2139 = cbLight._m0[_1874].z + _384;
    float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
    float _2144 = _2143 * _2137;
    float _2145 = _2143 * _2138;
    float _2146 = _2143 * _2139;
    float _2147 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1874].xyz));
    float _4219 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _4230 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _2151 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _2152 = dot(vec3(_301, _302, _303), vec3(_2144, _2145, _2146));
    float _4241 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2155 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _2156 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_2144, _2145, _2146));
    float _4252 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2160 = _2136 * _2136;
    float _2164 = ((_2155 * _2155) * (_2160 + (-1.0))) + 1.0;
    float _2172 = exp2(log2(1.0 - (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) * 5.0);
    float _2173 = 0.959999978542327880859375 - _515;
    float _2175 = 0.959999978542327880859375 - _516;
    float _2176 = 0.959999978542327880859375 - _517;
    float _2183 = 1.0 - _2136;
    float _2194 = (0.5 / (((_2151 * ((_2150 * _2183) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2183) + _2136) * _2150))) * _2150;
    float _4263 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2196 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2160 / ((_2164 * _2164) * 3.141590118408203125));
    uint _2210 = _1874 + 9u;
    float _2221 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1915].w)) * _447) * 0.949999988079071044921875);
    float _2222 = _2221 * _2221;
    float _2223 = cbLight._m0[_1915].x + _382;
    float _2224 = cbLight._m0[_1915].y + _383;
    float _2225 = cbLight._m0[_1915].z + _384;
    float _2229 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
    float _2230 = _2229 * _2223;
    float _2231 = _2229 * _2224;
    float _2232 = _2229 * _2225;
    float _2233 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1915].xyz));
    float _4274 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2236 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _2237 = dot(vec3(_301, _302, _303), vec3(_2230, _2231, _2232));
    float _4285 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2240 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2241 = dot(vec3(cbLight._m0[_1915].xyz), vec3(_2230, _2231, _2232));
    float _4296 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2245 = _2222 * _2222;
    float _2249 = ((_2240 * _2240) * (_2245 + (-1.0))) + 1.0;
    float _2256 = exp2(log2(1.0 - (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) * 5.0);
    float _2263 = 1.0 - _2222;
    float _2273 = (0.5 / (((_2151 * ((_2236 * _2263) + _2222)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2263) + _2222) * _2236))) * _2236;
    float _4307 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2275 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2245 / ((_2249 * _2249) * 3.141590118408203125));
    float _2285 = (((((_2256 * _2173) + _518) * cbLight._m0[_2210].x) * _2275) * _1897) + ((((cbLight._m0[_2122].x * _1863) * ((_2172 * _2173) + _518)) * _2196) * _1911);
    float _2286 = (((((_2256 * _2175) + _520) * cbLight._m0[_2210].y) * _2275) * _1897) + ((((cbLight._m0[_2122].y * _1865) * ((_2172 * _2175) + _520)) * _2196) * _1911);
    float _2287 = (((((_2256 * _2176) + _521) * cbLight._m0[_2210].z) * _2275) * _1897) + ((((cbLight._m0[_2122].z * _1867) * ((_2172 * _2176) + _521)) * _2196) * _1911);
    float _2343;
    float _2345;
    float _2347;
    if (_1951)
    {
        _2343 = _2285;
        _2345 = _2286;
        _2347 = _2287;
    }
    else
    {
        uint _2349 = _1874 + 2u;
        uint _2353 = _1874 + 10u;
        float _2367 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2349].w)) * _447) * 0.949999988079071044921875);
        float _2368 = _2367 * _2367;
        float _2369 = cbLight._m0[_2349].x + _382;
        float _2370 = cbLight._m0[_2349].y + _383;
        float _2371 = cbLight._m0[_2349].z + _384;
        float _2375 = inversesqrt(dot(vec3(_2369, _2370, _2371), vec3(_2369, _2370, _2371)));
        float _2376 = _2375 * _2369;
        float _2377 = _2375 * _2370;
        float _2378 = _2375 * _2371;
        float _2379 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_2349].xyz));
        float _4318 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2382 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2383 = dot(vec3(_301, _302, _303), vec3(_2376, _2377, _2378));
        float _4329 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2386 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2387 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_2376, _2377, _2378));
        float _4340 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2391 = _2368 * _2368;
        float _2395 = ((_2386 * _2386) * (_2391 + (-1.0))) + 1.0;
        float _2402 = exp2(log2(1.0 - (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) * 5.0);
        float _2409 = 1.0 - _2368;
        float _2419 = (0.5 / (((_2151 * ((_2382 * _2409) + _2368)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2409) + _2368) * _2382))) * _2382;
        float _4351 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2421 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2391 / ((_2395 * _2395) * 3.141590118408203125));
        float _2422 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
        _2343 = (((((_2402 * _2173) + _518) * cbLight._m0[_2353].x) * _2421) * _2422) + _2285;
        _2345 = (((((_2402 * _2175) + _520) * cbLight._m0[_2353].y) * _2421) * _2422) + _2286;
        _2347 = (((((_2402 * _2176) + _521) * cbLight._m0[_2353].z) * _2421) * _2422) + _2287;
    }
    float _2453;
    float _2455;
    float _2457;
    if (_2060)
    {
        _2453 = _2343;
        _2455 = _2345;
        _2457 = _2347;
    }
    else
    {
        uint _2464 = _1874 + 3u;
        uint _2468 = _1874 + 11u;
        float _2482 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2464].w)) * _447) * 0.949999988079071044921875);
        float _2483 = _2482 * _2482;
        float _2484 = cbLight._m0[_2464].x + _382;
        float _2485 = cbLight._m0[_2464].y + _383;
        float _2486 = cbLight._m0[_2464].z + _384;
        float _2490 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
        float _2491 = _2490 * _2484;
        float _2492 = _2490 * _2485;
        float _2493 = _2490 * _2486;
        float _2494 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_2464].xyz));
        float _4367 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2497 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2498 = dot(vec3(_301, _302, _303), vec3(_2491, _2492, _2493));
        float _4378 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2501 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2502 = dot(vec3(cbLight._m0[_2464].xyz), vec3(_2491, _2492, _2493));
        float _4389 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2506 = _2483 * _2483;
        float _2510 = ((_2501 * _2501) * (_2506 + (-1.0))) + 1.0;
        float _2517 = exp2(log2(1.0 - (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) * 5.0);
        float _2524 = 1.0 - _2483;
        float _2534 = (0.5 / (((_2151 * ((_2497 * _2524) + _2483)) + 9.9999999392252902907785028219223e-09) + (((_2151 * _2524) + _2483) * _2497))) * _2497;
        float _4400 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2536 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2506 / ((_2510 * _2510) * 3.141590118408203125));
        float _2537 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2453 = (((((_2517 * _2173) + _518) * cbLight._m0[_2468].x) * _2536) * _2537) + _2343;
        _2455 = (((((_2517 * _2175) + _520) * cbLight._m0[_2468].y) * _2536) * _2537) + _2345;
        _2457 = (((((_2517 * _2176) + _521) * cbLight._m0[_2468].z) * _2536) * _2537) + _2347;
    }
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    float _2612;
    if (_1872.y == 0u)
    {
        uvec4 _2558 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2559 = _2558.x;
        uint _2570 = uint((float(_2558.y) * floor(float(uint(cbSceneParam._m0[85u].y * _404) / _2559))) + floor(float(uint(cbSceneParam._m0[85u].x * _403) / _2559)));
        float _2580 = (log2(_1650 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2581 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        uint _2584 = uint(isnan(14.0) ? _2581 : (isnan(_2581) ? 14.0 : min(_2581, 14.0)));
        uvec4 _2589 = texelFetch(g_lightClusterGridBuffer, int(((_2584 << 2u) + (_2570 << 6u)) >> 2u));
        uint _2590 = _2589.x;
        uint _2591 = _2558.z;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        if (((((1u << ((_2591 >> 4u) & 15u)) + 4294967295u) & _2590) == 0u) || ((_2591 & 240u) == 0u))
        {
            _2669 = 0.0;
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
        }
        else
        {
            float _2670;
            float _2672;
            float _2674;
            float _2676;
            float _2678;
            float _2680;
            float _2821 = 0.0;
            float _2822 = 0.0;
            float _2823 = 0.0;
            float _2824 = 0.0;
            float _2825 = 0.0;
            float _2826 = 0.0;
            uint _2827 = 0u;
            uint _2836;
            bool _2837;
            for (;;)
            {
                _2836 = texelFetch(g_lightClassification, int((((_2584 << 5u) + (_2570 << 9u)) + (_2827 << 2u)) >> 2u)).x;
                _2837 = _2836 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2837)
                {
                    frontier_phi_73_pred = _2826;
                    frontier_phi_73_pred_1 = _2825;
                    frontier_phi_73_pred_2 = _2824;
                    frontier_phi_73_pred_3 = _2823;
                    frontier_phi_73_pred_4 = _2822;
                    frontier_phi_73_pred_5 = _2821;
                }
                else
                {
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    uint _2972;
                    _2966 = _2821;
                    _2967 = _2822;
                    _2968 = _2823;
                    _2969 = _2824;
                    _2970 = _2825;
                    _2971 = _2826;
                    _2972 = _2836;
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    for (;;)
                    {
                        uint _2976 = uint(findLSB(_2972)) + (_2827 << 5u);
                        uint _2973 = (_2972 + 4294967295u) & _2972;
                        uint _2978 = _2976 * 48u;
                        vec4 _2992 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2978)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 3u)).x));
                        uint _2998 = (_2976 * 48u) + 4u;
                        vec4 _3011 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2998)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 3u)).x));
                        uint _3017 = (_2976 * 48u) + 8u;
                        vec3 _3028 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3017)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 2u)).x));
                        float _3032 = _2992.x - _1648;
                        float _3033 = _2992.y - _1649;
                        float _3034 = _2992.z - _1650;
                        float _3035 = dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034));
                        float _3038 = inversesqrt(_3035);
                        float _3039 = _3038 * _3032;
                        float _3040 = _3038 * _3033;
                        float _3041 = _3038 * _3034;
                        float _3042 = dot(vec3(_428, _431, _434), vec3(_3039, _3040, _3041));
                        float _3047 = 1.0 - (_3035 * _2992.w);
                        float _4426 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                        float _3048 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                        float _3049 = sqrt(_3035) * _3011.w;
                        float _3052 = 1.39999997615814208984375 / (_3049 + 1.39999997615814208984375);
                        float _3053 = _3052 * _3052;
                        float _3056 = ((1.0 - _3053) * _3042) + _3053;
                        float _3059 = _3049 * _3049;
                        float _3063 = ((isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0))) * _3048) / ((_3059 * 0.699999988079071044921875) + 1.0);
                        float _3067 = (-0.0) - _1648;
                        float _3068 = (-0.0) - _1649;
                        float _3069 = (-0.0) - _1650;
                        float _3073 = inversesqrt(dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069)));
                        float _3074 = _3073 * _3067;
                        float _3075 = _3073 * _3068;
                        float _3076 = _3073 * _3069;
                        float _3083 = exp2(log2(1.0 / ((_3059 * 3.5) + 5.0)) * 0.25);
                        float _3084 = 1.0 - _549;
                        float _3091 = sqrt(1.0 - ((1.0 - (_3084 * _3084)) * (1.0 - (_3083 * _3083))));
                        float _3092 = _3091 * _3091;
                        float _3093 = _3092 * _3092;
                        float _3094 = _3074 + _3039;
                        float _3095 = _3075 + _3040;
                        float _3096 = _3076 + _3041;
                        float _3100 = inversesqrt(dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096)));
                        float _3104 = dot(vec3(_428, _431, _434), vec3(_3074, _3075, _3076));
                        float _4442 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3107 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                        float _3108 = dot(vec3(_428, _431, _434), vec3(_3100 * _3094, _3100 * _3095, _3100 * _3096));
                        float _4453 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3111 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                        float _3115 = ((_3111 * _3111) * (_3093 + (-1.0))) + 1.0;
                        float _3116 = _3052 * _3092;
                        float _3117 = _3116 * _3116;
                        float _3120 = ((1.0 - _3117) * _3042) + _3117;
                        float _4464 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                        float _3121 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3122 = 1.0 - _3092;
                        float _3132 = (0.5 / (((_3121 * ((_3107 * _3122) + _3092)) + 9.9999999392252902907785028219223e-09) + (((_3121 * _3122) + _3092) * _3107))) * _3121;
                        float _4475 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3143 = (((_3093 * 3.1415927410125732421875) * (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) / ((_3115 * _3115) * ((_3059 * 2.1991131305694580078125) + 3.141590118408203125))) * _3048;
                        _2896 = (_3063 * _3011.x) + _2969;
                        _2897 = (_3063 * _3011.y) + _2970;
                        _2898 = (_3063 * _3011.z) + _2971;
                        _2893 = (_3143 * _3028.x) + _2966;
                        _2894 = (_3143 * _3028.y) + _2967;
                        _2895 = (_3143 * _3028.z) + _2968;
                        if (_2973 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2966 = _2893;
                            _2967 = _2894;
                            _2968 = _2895;
                            _2969 = _2896;
                            _2970 = _2897;
                            _2971 = _2898;
                            _2972 = _2973;
                        }
                    }
                    frontier_phi_73_pred = _2898;
                    frontier_phi_73_pred_1 = _2897;
                    frontier_phi_73_pred_2 = _2896;
                    frontier_phi_73_pred_3 = _2895;
                    frontier_phi_73_pred_4 = _2894;
                    frontier_phi_73_pred_5 = _2893;
                }
                _2680 = frontier_phi_73_pred;
                _2678 = frontier_phi_73_pred_1;
                _2676 = frontier_phi_73_pred_2;
                _2674 = frontier_phi_73_pred_3;
                _2672 = frontier_phi_73_pred_4;
                _2670 = frontier_phi_73_pred_5;
                uint _2828 = _2827 + 1u;
                if (_2828 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2821 = _2670;
                    _2822 = _2672;
                    _2823 = _2674;
                    _2824 = _2676;
                    _2825 = _2678;
                    _2826 = _2680;
                    _2827 = _2828;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2669 = _2670;
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
        }
        uvec4 _2683 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2684 = _2683.z;
        uint _2686 = (_2684 >> 8u) & 15u;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        if (((4294967295u << _2686) & _2590) == 0u)
        {
            _2789 = _2669;
            _2791 = _2671;
            _2793 = _2673;
            _2795 = _2675;
            _2797 = _2677;
            _2799 = _2679;
        }
        else
        {
            float _2814 = inversesqrt(dot(vec3(_1648, _1649, _1650), vec3(_1648, _1649, _1650)));
            float _2815 = _2814 * _1648;
            float _2816 = _2814 * _1649;
            float _2817 = _2814 * _1650;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2686 < ((_2684 >> 12u) & 15u))
            {
                float _2790;
                float _2792;
                float _2794;
                float _2796;
                float _2798;
                float _2800;
                float _2949 = _2669;
                float _2950 = _2671;
                float _2951 = _2673;
                float _2952 = _2675;
                float _2953 = _2677;
                float _2954 = _2679;
                uint _2955 = _2686;
                uint _2964;
                bool _2965;
                for (;;)
                {
                    _2964 = texelFetch(g_lightClassification, int((((_2584 << 5u) + (_2570 << 9u)) + (_2955 << 2u)) >> 2u)).x;
                    _2965 = _2964 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2965)
                    {
                        frontier_phi_84_pred = _2953;
                        frontier_phi_84_pred_1 = _2952;
                        frontier_phi_84_pred_2 = _2951;
                        frontier_phi_84_pred_3 = _2950;
                        frontier_phi_84_pred_4 = _2949;
                        frontier_phi_84_pred_5 = _2954;
                    }
                    else
                    {
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3170 = _2949;
                        float _3171 = _2950;
                        float _3172 = _2951;
                        float _3173 = _2952;
                        float _3174 = _2953;
                        float _3175 = _2954;
                        uint _3176 = _2964;
                        uint _3177;
                        vec4 _3202;
                        float _3203;
                        vec4 _3218;
                        vec3 _3230;
                        vec4 _3246;
                        vec4 _3262;
                        float _3309;
                        bool _3310;
                        for (;;)
                        {
                            uint _3187 = ((_2955 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3176));
                            _3177 = (_3176 + 4294967295u) & _3176;
                            uint _3189 = _3187 * 40u;
                            _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            _3203 = _3202.w;
                            uint _3205 = (_3187 * 40u) + 4u;
                            _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            uint _3220 = (_3187 * 40u) + 8u;
                            _3230 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x));
                            uint _3233 = (_3187 * 40u) + 16u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            uint _3249 = (_3187 * 40u) + 20u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3265 = (_3187 * 40u) + 24u;
                            vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3284 = (_3187 * 40u) + 28u;
                            vec4 _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            _3309 = fma(_1650, _3297.z, fma(_1649, _3297.y, _3297.x * _1648)) + _3297.w;
                            _3310 = !((fma(_1650, _3278.z, fma(_1649, _3278.y, _3278.x * _1648)) + _3278.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3310)
                            {
                                float _3337 = _3202.x - _1648;
                                float _3338 = _3202.y - _1649;
                                float _3339 = _3202.z - _1650;
                                float _3340 = dot(vec3(_3337, _3338, _3339), vec3(_3337, _3338, _3339));
                                float _3343 = inversesqrt(_3340);
                                float _3344 = _3343 * _3337;
                                float _3345 = _3343 * _3338;
                                float _3346 = _3343 * _3339;
                                float _3350 = 1.0 - (_3340 / (_3203 * _3203));
                                float _4486 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3351 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                                float _3355 = sqrt(_3340) * _3218.w;
                                float _3357 = 1.39999997615814208984375 / (_3355 + 1.39999997615814208984375);
                                float _3358 = _3357 * _3357;
                                float _3361 = ((1.0 - _3358) * dot(vec3(_3344, _3345, _3346), vec3(_428, _431, _434))) + _3358;
                                float _3364 = _3355 * _3355;
                                float _3368 = (fma(_1650, _3246.z, fma(_1649, _3246.y, _3246.x * _1648)) + _3246.w) / _3309;
                                float _3369 = (fma(_1650, _3262.z, fma(_1649, _3262.y, _3262.x * _1648)) + _3262.w) / _3309;
                                float _3373 = 1.0 - dot(vec2(_3368, _3369), vec2(_3368, _3369));
                                float _4502 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3374 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                                float _3375 = _3374 * (((isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0))) * _3351) / ((_3364 * 0.699999988079071044921875) + 1.0));
                                float _3387 = exp2(log2(1.0 / ((_3364 * 3.5) + 5.0)) * 0.25);
                                float _3388 = 1.0 - _549;
                                float _3395 = sqrt(1.0 - ((1.0 - (_3388 * _3388)) * (1.0 - (_3387 * _3387))));
                                float _3396 = _3395 * _3395;
                                float _3397 = _3396 * _3396;
                                float _3398 = _3344 - _2815;
                                float _3399 = _3345 - _2816;
                                float _3400 = _3346 - _2817;
                                float _3404 = inversesqrt(dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400)));
                                float _3408 = dot(vec3(_428, _431, _434), vec3((-0.0) - _2815, (-0.0) - _2816, (-0.0) - _2817));
                                float _4513 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3411 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3412 = dot(vec3(_428, _431, _434), vec3(_3404 * _3398, _3404 * _3399, _3404 * _3400));
                                float _4524 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3415 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3419 = ((_3415 * _3415) * (_3397 + (-1.0))) + 1.0;
                                float _3420 = _3357 * _3396;
                                float _3421 = _3420 * _3420;
                                float _3427 = ((1.0 - _3421) * dot(vec3(_428, _431, _434), vec3(_3344, _3345, _3346))) + _3421;
                                float _4535 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3428 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3429 = 1.0 - _3396;
                                float _3439 = (0.5 / (((_3428 * ((_3411 * _3429) + _3396)) + 9.9999999392252902907785028219223e-09) + (((_3428 * _3429) + _3396) * _3411))) * _3428;
                                float _4546 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3449 = (_3374 * _3351) * (((_3397 * 3.1415927410125732421875) * (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) / ((_3419 * _3419) * ((_3364 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3375 * _3218.y;
                                frontier_phi_90_pred_1 = _3375 * _3218.x;
                                frontier_phi_90_pred_2 = _3449 * _3230.z;
                                frontier_phi_90_pred_3 = _3449 * _3230.y;
                                frontier_phi_90_pred_4 = _3449 * _3230.x;
                                frontier_phi_90_pred_5 = _3375 * _3218.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3457 = frontier_phi_90_pred;
                            _3456 = frontier_phi_90_pred_1;
                            _3455 = frontier_phi_90_pred_2;
                            _3454 = frontier_phi_90_pred_3;
                            _3453 = frontier_phi_90_pred_4;
                            _3458 = frontier_phi_90_pred_5;
                            _3160 = _3456 + _3173;
                            _3161 = _3457 + _3174;
                            _3162 = _3458 + _3175;
                            _3157 = _3453 + _3170;
                            _3158 = _3454 + _3171;
                            _3159 = _3455 + _3172;
                            if (_3177 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3177;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3161;
                        frontier_phi_84_pred_1 = _3160;
                        frontier_phi_84_pred_2 = _3159;
                        frontier_phi_84_pred_3 = _3158;
                        frontier_phi_84_pred_4 = _3157;
                        frontier_phi_84_pred_5 = _3162;
                    }
                    _2798 = frontier_phi_84_pred;
                    _2796 = frontier_phi_84_pred_1;
                    _2794 = frontier_phi_84_pred_2;
                    _2792 = frontier_phi_84_pred_3;
                    _2790 = frontier_phi_84_pred_4;
                    _2800 = frontier_phi_84_pred_5;
                    uint _2956 = _2955 + 1u;
                    if (_2956 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2949 = _2790;
                        _2950 = _2792;
                        _2951 = _2794;
                        _2952 = _2796;
                        _2953 = _2798;
                        _2954 = _2800;
                        _2955 = _2956;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2800;
                frontier_phi_65_66_ladder_1 = _2796;
                frontier_phi_65_66_ladder_2 = _2798;
                frontier_phi_65_66_ladder_3 = _2792;
                frontier_phi_65_66_ladder_4 = _2790;
                frontier_phi_65_66_ladder_5 = _2794;
            }
            else
            {
                frontier_phi_65_66_ladder = _2679;
                frontier_phi_65_66_ladder_1 = _2675;
                frontier_phi_65_66_ladder_2 = _2677;
                frontier_phi_65_66_ladder_3 = _2671;
                frontier_phi_65_66_ladder_4 = _2669;
                frontier_phi_65_66_ladder_5 = _2673;
            }
            _2789 = frontier_phi_65_66_ladder_4;
            _2791 = frontier_phi_65_66_ladder_3;
            _2793 = frontier_phi_65_66_ladder_5;
            _2795 = frontier_phi_65_66_ladder_1;
            _2797 = frontier_phi_65_66_ladder_2;
            _2799 = frontier_phi_65_66_ladder;
        }
        float _2804 = isnan(1.0) ? _533 : (isnan(_533) ? 1.0 : min(_533, 1.0));
        _2602 = (_2804 * _2795) + _2115;
        _2604 = (_2804 * _2797) + _2117;
        _2606 = (_2804 * _2799) + _2119;
        _2608 = ((_2789 * _518) * _2804) + _2453;
        _2610 = ((_2791 * _520) * _2804) + _2455;
        _2612 = ((_2793 * _521) * _2804) + _2457;
    }
    else
    {
        _2602 = _2115;
        _2604 = _2117;
        _2606 = _2119;
        _2608 = _2453;
        _2610 = _2455;
        _2612 = _2457;
    }
    float _4562 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _4573 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _4584 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _2629 = ((isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2602 + ((isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))) * _533))) + ((_2608 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _1375)) * cbPerFrame._m0[3u].x);
    float _2630 = ((isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2604 + ((isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))) * _533))) + ((_2610 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _1375)) * cbPerFrame._m0[3u].x);
    float _2631 = ((isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2606 + ((isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0))) * _533))) + ((_2612 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _1375)) * cbPerFrame._m0[3u].x);
    uint _2632 = _460 + 6u;
    float _2640 = _403 / cbSceneParam._m0[86u].x;
    float _2641 = _404 / cbSceneParam._m0[86u].y;
    vec4 _2655 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2640, _2641, (log2((isnan(cbSceneParam._m0[77u].w) ? _324 : (isnan(_324) ? cbSceneParam._m0[77u].w : min(_324, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2657 = _2655.x;
    float _2658 = _2655.y;
    float _2659 = _2655.z;
    float _2660 = _2655.w;
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    if (_324 > cbSceneParam._m0[78u].w)
    {
        float _2694 = isnan(_324) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _324 : min(cbSceneParam._m0[80u].w, _324));
        float _2695 = _2694 / _324;
        float _2706 = _2695 * _375;
        float _2707 = _376 * _2695;
        float _2708 = (-0.0) - _2707;
        float _2709 = _2695 * _377;
        float _2711 = (cbSceneParam._m0[77u].w * _2708) / _2694;
        float _2712 = _2711 + cbSceneParam._m0[79u].w;
        float _2713 = cbSceneParam._m0[79u].w - _2707;
        float _2719 = sqrt(((_2706 * _2706) + (_2707 * _2707)) + (_2709 * _2709));
        float _2722 = (1.0 - (cbSceneParam._m0[77u].w / _2694)) * _2719;
        float _2727 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2729 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2906;
        if (abs((_2708 - _2711) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2906 = ((((_2712 > 0.0) ? exp2(_2727 * _2712) : (2.0 - exp2(_2729 * _2712))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2722;
        }
        else
        {
            float _2850 = 1.0 / cbSceneParam._m0[80u].x;
            float _2851 = isnan(_2713) ? _2712 : (isnan(_2712) ? _2713 : max(_2712, _2713));
            float _2852 = isnan(_2713) ? _2712 : (isnan(_2712) ? _2713 : min(_2712, _2713));
            float _2861 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : min(_2851, 0.0));
            float _2862 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : min(_2852, 0.0));
            _2906 = ((abs(_2719 / _2708) * cbSceneParam._m0[80u].y) * ((((_2861 - _2862) * 2.0) - ((exp2(_2727 * (isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0)))) - exp2(_2727 * (isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0))))) * _2850)) - ((exp2(_2729 * _2861) - exp2(_2729 * _2862)) * _2850))) + (_2722 * cbSceneParam._m0[80u].z);
        }
        vec4 _2908 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2640, _2641, 1.0), 0.0);
        float _2917 = exp2((_2906 * (-1.44269502162933349609375)) * (1.0 - _2908.w));
        float _2918 = log2(_2917);
        float _2934 = log2(_2660);
        _2731 = (exp2(_2934 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2918 * cbSceneParam._m0[78u].x)) * _2908.x) / cbSceneParam._m0[78u].x)) + _2657;
        _2733 = (exp2(_2934 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2918 * cbSceneParam._m0[78u].y)) * _2908.y) / cbSceneParam._m0[78u].y)) + _2658;
        _2735 = (exp2(_2934 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2918 * cbSceneParam._m0[78u].z)) * _2908.z) / cbSceneParam._m0[78u].z)) + _2659;
        _2737 = _2917 * _2660;
    }
    else
    {
        _2731 = _2657;
        _2733 = _2658;
        _2735 = _2659;
        _2737 = _2660;
    }
    bool _2944;
    vec4 _2747;
    vec4 _2769;
    float _2771;
    float _2775;
    float _2776;
    float _2777;
    float _2778;
    bool _2788;
    for (;;)
    {
        _2747 = cbMatDynParam._m0[0u];
        float _2749 = roundEven(_2747.y);
        bool _2750 = _2749 == 3.0;
        float _2751 = log2(_2737);
        float _2758 = exp2(_2751 * cbSceneParam._m0[78u].x) * _2629;
        float _2759 = exp2(_2751 * cbSceneParam._m0[78u].y) * _2630;
        float _2760 = exp2(_2751 * cbSceneParam._m0[78u].z) * _2631;
        float _2767 = _391 + (-0.5);
        _2769 = cbMtdParam._m0[1u];
        _2771 = _2769.y * _2767;
        float _2774 = (_2749 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2775 = _2774 * (_2750 ? _2758 : (_2758 + (cbSceneParam._m0[72u].w * _2731)));
        _2776 = _2774 * (_2750 ? _2759 : (_2759 + (cbSceneParam._m0[72u].w * _2733)));
        _2777 = _2774 * (_2750 ? _2760 : (_2760 + (cbSceneParam._m0[72u].w * _2735)));
        _2778 = _2767 * 0.999000012874603271484375;
        _2788 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2788)
        {
            if ((cbInstanceData._m0[_460 + 7u].x + _2778) < 0.5)
            {
                _2944 = true;
                break;
            }
        }
        uint _2885 = _462 + uint(_2747.w);
        if ((cbInstanceData._m0[_2885].w < 1.0) && ((cbInstanceData._m0[_2885].w + _2778) < 0.5))
        {
            _2944 = true;
            break;
        }
        if ((_2771 + 1.0) < _2769.x)
        {
            _2944 = true;
            break;
        }
        _2944 = false;
        break;
    }
    float _3148;
    if (_2944)
    {
        discard_state = true;
        _3148 = 0.0;
    }
    else
    {
        _3148 = cbInstanceData._m0[_2632].w;
    }
    SV_Target.x = _2775;
    SV_Target.y = _2776;
    SV_Target.z = _2777;
    SV_Target.w = _3148;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2632].w;
    discard_exit();
}


