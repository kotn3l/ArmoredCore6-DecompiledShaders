#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _890;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _240 = texture(sampler2D(C_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _246 = _240.x * cbMtdParam._m0[9u].x;
    float _247 = _240.y * cbMtdParam._m0[9u].y;
    float _248 = _240.z * cbMtdParam._m0[9u].z;
    vec4 _264 = texture(sampler2D(C_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _264.z;
    float _272 = (_264.x * 2.0) + (-1.0);
    float _274 = (_264.y * 2.0) + (-1.0);
    float _275 = dot(vec2(_272, _274), vec2(_272, _274));
    float _3251 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _281 = sqrt(1.0 - (isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0))));
    float _284 = fma(_281, _218, fma(_274, _210 * TANGENT.x, (_196 * _188) * _272));
    float _287 = fma(_281, _219, fma(_274, _210 * TANGENT.y, (_196 * _189) * _272));
    float _290 = fma(_281, _220, fma(_274, _210 * TANGENT.z, (_196 * _190) * _272));
    float _294 = inversesqrt(dot(vec3(_284, _287, _290), vec3(_284, _287, _290)));
    float _295 = _294 * _284;
    float _296 = _294 * _287;
    float _297 = _294 * _290;
    float _3262 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _298 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
    float _3273 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3284 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3295 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3306 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _302 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
    float _318 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _359 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _369 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _359);
    float _370 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _359);
    float _371 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _359);
    float _375 = inversesqrt(dot(vec3(_369, _370, _371), vec3(_369, _370, _371)));
    float _376 = _369 * _375;
    float _377 = _370 * _375;
    float _378 = _371 * _375;
    float _384 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _385 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _387 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _389 = _387.w;
    float _410 = fma(_297, cbSceneParam._m0[5u].z, fma(_296, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _295));
    float _413 = fma(_297, cbSceneParam._m0[6u].z, fma(_296, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _295));
    float _416 = fma(_297, cbSceneParam._m0[7u].z, fma(_296, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _295));
    vec4 _418 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _429 = (((_418.y - _298) + (_418.w * _298)) * cbMtdParam._m0[3u].x) + _298;
    uint _442 = uint(roundEven(NORMAL.w)) * 13u;
    uint _445 = (_442 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _451 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0)))) * cbInstanceData._m0[_445].x;
    float _452 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0)))) * cbInstanceData._m0[_445].y;
    float _453 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0)))) * cbInstanceData._m0[_445].z;
    float _3317 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
    float _3328 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _3339 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    vec4 _457 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _462 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _473 = (((_462.x - _302) + (_462.w * _302)) * cbMtdParam._m0[3u].x) + _302;
    float _486 = (cbMtdParam._m0[3u].x * (((_454 * _389) - _454) + _457.x)) + _454;
    float _487 = (cbMtdParam._m0[3u].x * (((_455 * _389) - _455) + _457.y)) + _455;
    float _488 = (cbMtdParam._m0[3u].x * (((_456 * _389) - _456) + _457.z)) + _456;
    float _489 = 1.0 - _473;
    float _490 = _489 * _486;
    float _491 = _489 * _487;
    float _492 = _489 * _488;
    float _497 = (_486 + (-0.039999999105930328369140625)) * _473;
    float _498 = (_487 + (-0.039999999105930328369140625)) * _473;
    float _499 = (_488 + (-0.039999999105930328369140625)) * _473;
    float _500 = _497 + 0.039999999105930328369140625;
    float _502 = _498 + 0.039999999105930328369140625;
    float _503 = _499 + 0.039999999105930328369140625;
    vec4 _512 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _384, cbSceneParam._m0[86u].y * _385));
    float _515 = _512.x * TEXCOORD_4;
    float _516 = dot(vec3(_295, _296, _297), vec3(_376, _377, _378));
    float _519 = _516 * 2.0;
    float _523 = (_519 * _295) - _376;
    float _524 = (_519 * _296) - _377;
    float _525 = (_519 * _297) - _378;
    float _529 = abs(dot(vec3(_376, _377, _378), vec3(_295, _296, _297)));
    float _3350 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _531 = sqrt(_429);
    float _544 = exp2((_531 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_531 * 3.0));
    float _550 = (1.0 - _544) * ((_531 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _551 = _544 * _531;
    float _579 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _583 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _587 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _889;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _614 = fma(_587, cbModelParam._m0[26u].z, fma(_583, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _579));
        float _618 = fma(_587, cbModelParam._m0[27u].z, fma(_583, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _579));
        float _622 = fma(_587, cbModelParam._m0[28u].z, fma(_583, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _579));
        float _647 = _579 + _295;
        float _648 = _583 + _296;
        float _649 = _587 + _297;
        float _659 = fma(_649, cbModelParam._m0[26u].z, fma(_648, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _647)) - _614;
        float _660 = fma(_649, cbModelParam._m0[27u].z, fma(_648, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _647)) - _618;
        float _661 = fma(_649, cbModelParam._m0[28u].z, fma(_648, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _647)) - _622;
        float _665 = inversesqrt(dot(vec3(_659, _660, _661), vec3(_659, _660, _661)));
        float _678 = ((_665 * _659) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_614 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _679 = ((_665 * _660) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_618 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _680 = ((_665 * _661) / cbModelParam._m0[34u].z) + ((((((_622 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_678, _679, _680), 0.0);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_678, _679, _680), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_678, _679, _680), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_678, _679, _680), 0.0);
        float _717 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _718 = _717 * (_683.x + (-0.5));
        float _719 = _717 * (_683.y + (-0.5));
        float _720 = _717 * (_683.z + (-0.5));
        float _727 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _728 = _727 * (_690.x + (-0.5));
        float _729 = _727 * (_690.y + (-0.5));
        float _730 = _727 * (_690.z + (-0.5));
        float _737 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _738 = _737 * (_697.x + (-0.5));
        float _739 = _737 * (_697.y + (-0.5));
        float _740 = _737 * (_697.z + (-0.5));
        float _747 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_704.x + (-0.5));
        float _749 = _747 * (_704.y + (-0.5));
        float _750 = _747 * (_704.z + (-0.5));
        float _751 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _752 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _753 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _754 = _718 * 0.5;
        float _755 = _728 * 0.5;
        float _756 = _738 * 0.5;
        float _757 = dot(vec3(_754, _755, _756), vec3(_754, _755, _756));
        float _762 = (_757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_757);
        float _771 = (dot(vec3(_295, _296, _297), vec3(_762 * _754, _762 * _755, _762 * _756)) + 1.0) * 0.5;
        float _3376 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _781 = sqrt(((_755 * _755) + (_754 * _754)) + (_756 * _756)) / (_751 + 9.9999997473787516355514526367188e-06);
        float _3387 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _783 = _782 * 2.0;
        float _787 = (1.0 - _782) / (_782 + 1.0);
        float _3398 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _797 = ((((1.0 - _788) * (_783 + 2.0)) * exp2(log2(isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0))) * (_783 + 1.0))) + _788) * _751;
        float _798 = _719 * 0.5;
        float _799 = _729 * 0.5;
        float _800 = _739 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _814 = (dot(vec3(_295, _296, _297), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3409 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _823 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_752 + 9.9999997473787516355514526367188e-06);
        float _3420 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _825 = _824 * 2.0;
        float _829 = (1.0 - _824) / (_824 + 1.0);
        float _3431 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _839 = ((((1.0 - _830) * (_825 + 2.0)) * exp2(log2(isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) * (_825 + 1.0))) + _830) * _752;
        float _840 = _720 * 0.5;
        float _841 = _730 * 0.5;
        float _842 = _740 * 0.5;
        float _843 = dot(vec3(_840, _841, _842), vec3(_840, _841, _842));
        float _848 = (_843 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_843);
        float _856 = (dot(vec3(_295, _296, _297), vec3(_848 * _840, _848 * _841, _848 * _842)) + 1.0) * 0.5;
        float _3442 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _865 = sqrt(((_841 * _841) + (_840 * _840)) + (_842 * _842)) / (_753 + 9.9999997473787516355514526367188e-06);
        float _3453 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _867 = _866 * 2.0;
        float _871 = (1.0 - _866) / (_866 + 1.0);
        float _3464 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _881 = ((((1.0 - _872) * (_867 + 2.0)) * exp2(log2(isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * (_867 + 1.0))) + _872) * _753;
        _889 = _720;
        _891 = _719;
        _892 = _718;
        _893 = _730;
        _894 = _729;
        _895 = _728;
        _896 = _740;
        _897 = _739;
        _898 = _738;
        _899 = _753;
        _900 = _752;
        _901 = _751;
        _902 = cbModelParam._m0[36u].z * (isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0)));
        _903 = cbModelParam._m0[36u].z * (isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0)));
        _904 = cbModelParam._m0[36u].z * (isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0)));
    }
    else
    {
        _889 = _890;
        _891 = _890;
        _892 = _890;
        _893 = _890;
        _894 = _890;
        _895 = _890;
        _896 = _890;
        _897 = _890;
        _898 = _890;
        _899 = _890;
        _900 = _890;
        _901 = _890;
        _902 = 0.0;
        _903 = 0.0;
        _904 = 0.0;
    }
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _930 = fma(_587, cbModelParam._m0[30u].z, fma(_583, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _579));
        float _934 = fma(_587, cbModelParam._m0[31u].z, fma(_583, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _579));
        float _938 = fma(_587, cbModelParam._m0[32u].z, fma(_583, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _579));
        float _961 = _579 + _295;
        float _962 = _583 + _296;
        float _963 = _587 + _297;
        float _973 = fma(_963, cbModelParam._m0[30u].z, fma(_962, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _961)) - _930;
        float _974 = fma(_963, cbModelParam._m0[31u].z, fma(_962, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _961)) - _934;
        float _975 = fma(_963, cbModelParam._m0[32u].z, fma(_962, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _961)) - _938;
        float _979 = inversesqrt(dot(vec3(_973, _974, _975), vec3(_973, _974, _975)));
        float _992 = ((_979 * _973) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_930 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _993 = ((_979 * _974) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_934 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _994 = ((_979 * _975) / cbModelParam._m0[35u].z) + ((((((_938 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        float _1029 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_996.x + (-0.5));
        float _1031 = _1029 * (_996.y + (-0.5));
        float _1032 = _1029 * (_996.z + (-0.5));
        float _1039 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_1003.x + (-0.5));
        float _1041 = _1039 * (_1003.y + (-0.5));
        float _1042 = _1039 * (_1003.z + (-0.5));
        float _1049 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1010.x + (-0.5));
        float _1051 = _1049 * (_1010.y + (-0.5));
        float _1052 = _1049 * (_1010.z + (-0.5));
        float _1059 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1017.x + (-0.5));
        float _1061 = _1059 * (_1017.y + (-0.5));
        float _1062 = _1059 * (_1017.z + (-0.5));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = _1030 * 0.5;
        float _1067 = _1040 * 0.5;
        float _1068 = _1050 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_295, _296, _297), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3505 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _3516 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3527 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * (_1093 + 1.0))) + _1098) * _1063;
        float _1108 = _1031 * 0.5;
        float _1109 = _1041 * 0.5;
        float _1110 = _1051 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_295, _296, _297), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3538 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3549 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3560 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_1135 + 1.0))) + _1140) * _1064;
        float _1150 = _1032 * 0.5;
        float _1151 = _1042 * 0.5;
        float _1152 = _1052 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_295, _296, _297), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3571 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3582 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3593 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * (_1177 + 1.0))) + _1182) * _1065;
        _1199 = _1032;
        _1200 = _1031;
        _1201 = _1030;
        _1202 = _1042;
        _1203 = _1041;
        _1204 = _1040;
        _1205 = _1052;
        _1206 = _1051;
        _1207 = _1050;
        _1208 = _1065;
        _1209 = _1064;
        _1210 = _1063;
        _1211 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1212 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1213 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
    }
    else
    {
        _1199 = _890;
        _1200 = _890;
        _1201 = _890;
        _1202 = _890;
        _1203 = _890;
        _1204 = _890;
        _1205 = _890;
        _1206 = _890;
        _1207 = _890;
        _1208 = _890;
        _1209 = _890;
        _1210 = _890;
        _1211 = 0.0;
        _1212 = 0.0;
        _1213 = 0.0;
    }
    float _1223 = (cbModelParam._m0[1u].x * (_1211 - _902)) + _902;
    float _1224 = (cbModelParam._m0[1u].x * (_1212 - _903)) + _903;
    float _1225 = (cbModelParam._m0[1u].x * (_1213 - _904)) + _904;
    float _1246 = fma(_1225, cbSceneParam._m0[89u].z, fma(_1224, cbSceneParam._m0[89u].y, _1223 * cbSceneParam._m0[89u].x));
    float _1249 = fma(_1225, cbSceneParam._m0[90u].z, fma(_1224, cbSceneParam._m0[90u].y, _1223 * cbSceneParam._m0[90u].x));
    float _1252 = fma(_1225, cbSceneParam._m0[91u].z, fma(_1224, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1223));
    float _1267 = _523 * 0.5;
    float _1268 = _524 * 0.5;
    float _1269 = _525 * 0.5;
    float _1270 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_1201, _1204, _1207, _1210));
    float _1273 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_1200, _1203, _1206, _1209));
    float _1276 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_1199, _1202, _1205, _1208));
    float _1310;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1283 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_889, _893, _896, _899));
        float _1287 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_891, _894, _897, _900));
        float _1291 = dot(vec4(_1267, _1268, _1269, 1.0), vec4(_892, _895, _898, _901));
        float _1298 = dot(vec4(cbModelParam._m0[39u]), vec4(_1267, _1268, _1269, 1.0));
        _1310 = dot(vec3(isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1298) ? 0.0 : (isnan(0.0) ? _1298 : max(0.0, _1298))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1310 = 1.0;
    }
    float _1321;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1312 = dot(vec4(cbModelParam._m0[40u]), vec4(_1267, _1268, _1269, 1.0));
        _1321 = dot(vec3(isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)), isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)), isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1312) ? 0.0 : (isnan(0.0) ? _1312 : max(0.0, _1312))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1321 = 1.0;
    }
    float _1325 = (_1321 * cbModelParam._m0[1u].x) + (_1310 * (1.0 - cbModelParam._m0[1u].x));
    float _1335 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _429);
    float _1336 = isnan(_1335) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1335 : min(cbModelParam._m0[25u].z, _1335));
    float _1418;
    float _1420;
    float _1422;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1385 = fma(_587, cbModelParam._m0[13u].z, fma(_583, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _579)) + cbModelParam._m0[13u].w;
        float _1389 = fma(_587, cbModelParam._m0[14u].z, fma(_583, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _579)) + cbModelParam._m0[14u].w;
        float _1393 = fma(_587, cbModelParam._m0[15u].z, fma(_583, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _579)) + cbModelParam._m0[15u].w;
        float _1396 = fma(_525, cbModelParam._m0[13u].z, fma(_524, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _523));
        float _1399 = fma(_525, cbModelParam._m0[14u].z, fma(_524, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _523));
        float _1402 = fma(_525, cbModelParam._m0[15u].z, fma(_524, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _523));
        float _1430;
        if (_1396 > 0.0)
        {
            _1430 = abs((1.0 - _1385) / _1396);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1396 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1385 + 1.0) / _1396);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1430 = frontier_phi_16_14_ladder;
        }
        float _1659;
        if (_1399 > 0.0)
        {
            _1659 = abs((1.0 - _1389) / _1399);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1389 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1659 = frontier_phi_25_21_ladder;
        }
        float _1916;
        if (_1402 > 0.0)
        {
            _1916 = abs((1.0 - _1393) / _1402);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1393 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1916 = frontier_phi_37_32_ladder;
        }
        float _1918 = isnan(_1659) ? _1430 : (isnan(_1430) ? _1659 : min(_1430, _1659));
        float _1919 = isnan(_1916) ? _1918 : (isnan(_1918) ? _1916 : min(_1918, _1916));
        float _1923 = (_1919 * _1396) + _1385;
        float _1924 = (_1919 * _1399) + _1389;
        float _1925 = (_1919 * _1402) + _1393;
        float _1926 = _1919 * 9.9999997473787516355514526367188e-05;
        float _1928 = (-1.0) - _1926;
        float _1930 = _1926 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1925 > _1930) || ((_1925 < _1928) || ((_1924 > _1930) || ((_1924 < _1928) || ((_1923 < _1928) || (_1923 > _1930))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2053 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1925, cbModelParam._m0[9u].z, fma(_1924, cbModelParam._m0[9u].y, _1923 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1925, cbModelParam._m0[10u].z, fma(_1924, cbModelParam._m0[10u].y, _1923 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1925, cbModelParam._m0[11u].z, fma(_1924, cbModelParam._m0[11u].y, _1923 * cbModelParam._m0[11u].x))), _1336);
            frontier_phi_15_37_ladder = _2053.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2053.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2053.x * cbModelParam._m0[1u].y;
        }
        _1418 = frontier_phi_15_37_ladder_2;
        _1420 = frontier_phi_15_37_ladder_1;
        _1422 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1406 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_523, _524, _525), _1336);
        _1418 = _1406.x * cbModelParam._m0[1u].y;
        _1420 = _1406.y * cbModelParam._m0[1u].y;
        _1422 = _1406.z * cbModelParam._m0[1u].y;
    }
    float _1426 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _429);
    float _1427 = isnan(_1426) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1426 : min(cbModelParam._m0[25u].w, _1426));
    float _1520;
    float _1522;
    float _1524;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1484 = fma(_587, cbModelParam._m0[21u].z, fma(_583, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _579)) + cbModelParam._m0[21u].w;
        float _1488 = fma(_587, cbModelParam._m0[22u].z, fma(_583, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _579)) + cbModelParam._m0[22u].w;
        float _1492 = fma(_587, cbModelParam._m0[23u].z, fma(_583, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _579)) + cbModelParam._m0[23u].w;
        float _1495 = fma(_525, cbModelParam._m0[21u].z, fma(_524, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _523));
        float _1498 = fma(_525, cbModelParam._m0[22u].z, fma(_524, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _523));
        float _1501 = fma(_525, cbModelParam._m0[23u].z, fma(_524, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _523));
        float _1664;
        if (_1495 > 0.0)
        {
            _1664 = abs((1.0 - _1484) / _1495);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1484 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1664 = frontier_phi_27_23_ladder;
        }
        float _1943;
        if (_1498 > 0.0)
        {
            _1943 = abs((1.0 - _1488) / _1498);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1488 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1943 = frontier_phi_39_34_ladder;
        }
        float _2156;
        if (_1501 > 0.0)
        {
            _2156 = abs((1.0 - _1492) / _1501);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1492 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2156 = frontier_phi_48_45_ladder;
        }
        float _2158 = isnan(_1943) ? _1664 : (isnan(_1664) ? _1943 : min(_1664, _1943));
        float _2159 = isnan(_2156) ? _2158 : (isnan(_2158) ? _2156 : min(_2158, _2156));
        float _2163 = (_2159 * _1495) + _1484;
        float _2164 = (_2159 * _1498) + _1488;
        float _2165 = (_2159 * _1501) + _1492;
        float _2166 = _2159 * 9.9999997473787516355514526367188e-05;
        float _2167 = (-1.0) - _2166;
        float _2169 = _2166 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2165 > _2169) || ((_2165 < _2167) || ((_2164 > _2169) || ((_2164 < _2167) || ((_2163 < _2167) || (_2163 > _2169))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2363 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2165, cbModelParam._m0[17u].z, fma(_2164, cbModelParam._m0[17u].y, _2163 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2165, cbModelParam._m0[18u].z, fma(_2164, cbModelParam._m0[18u].y, _2163 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2165, cbModelParam._m0[19u].z, fma(_2164, cbModelParam._m0[19u].y, _2163 * cbModelParam._m0[19u].x))), _1427);
            frontier_phi_24_48_ladder = _2363.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2363.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2363.x * cbModelParam._m0[1u].z;
        }
        _1520 = frontier_phi_24_48_ladder_2;
        _1522 = frontier_phi_24_48_ladder_1;
        _1524 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1504 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_523, _524, _525), _1427);
        _1520 = _1504.x * cbModelParam._m0[1u].z;
        _1522 = _1504.y * cbModelParam._m0[1u].z;
        _1524 = _1504.z * cbModelParam._m0[1u].z;
    }
    float _1537 = (((_550 * _500) + _551) * _515) * ((cbModelParam._m0[1u].w * (_1520 - _1418)) + _1418);
    float _1539 = (((_550 * _502) + _551) * _515) * ((cbModelParam._m0[1u].w * (_1522 - _1420)) + _1420);
    float _1541 = (((_550 * _503) + _551) * _515) * ((cbModelParam._m0[1u].w * (_1524 - _1422)) + _1422);
    float _1544 = fma(_1541, cbSceneParam._m0[89u].z, fma(_1539, cbSceneParam._m0[89u].y, _1537 * cbSceneParam._m0[89u].x));
    float _1547 = fma(_1541, cbSceneParam._m0[90u].z, fma(_1539, cbSceneParam._m0[90u].y, _1537 * cbSceneParam._m0[90u].x));
    float _1550 = fma(_1541, cbSceneParam._m0[91u].z, fma(_1539, cbSceneParam._m0[91u].y, _1537 * cbSceneParam._m0[91u].x));
    vec4 _1558 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_384, _385));
    float _1560 = _1558.w;
    float _1572 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1560);
    float _1573 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1560);
    float _1574 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1560);
    uvec4 _1578 = floatBitsToUint(cbInstanceData._m0[_442 + 5u]);
    uint _1580 = _1578.x * 14u;
    uint _1581 = _1580 + 13u;
    float _1588 = _515 + (-1.0);
    float _1593 = (cbLight._m0[_1581].x * _1588) + 1.0;
    float _1594 = (cbLight._m0[_1581].y * _1588) + 1.0;
    float _1595 = (cbLight._m0[_1581].z * _1588) + 1.0;
    float _1596 = (cbLight._m0[_1581].w * _1588) + 1.0;
    uint _1597 = _1580 + 5u;
    float _1603 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
    uint _1607 = _1580 + 4u;
    float _1617 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
    uint _1621 = _1580 | 1u;
    float _1632 = dot(vec3(cbLight._m0[_1580].xyz), vec3(_295, _296, _297));
    float _1635 = dot(vec3(cbLight._m0[_1621].xyz), vec3(_295, _296, _297));
    float _3729 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
    float _3740 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
    float _1640 = (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * 0.3183098733425140380859375;
    float _1642 = (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * 0.3183098733425140380859375;
    float _1649 = ((cbLight._m0[_1597].x * _1603) * _1642) + (((cbLight._m0[_1607].x * _1572) * _1617) * _1640);
    float _1650 = ((_1603 * cbLight._m0[_1597].y) * _1642) + (((cbLight._m0[_1607].y * _1573) * _1617) * _1640);
    float _1651 = ((_1603 * cbLight._m0[_1597].z) * _1642) + (((cbLight._m0[_1607].z * _1574) * _1617) * _1640);
    uvec4 _1656 = floatBitsToUint(cbLight._m0[_1580 + 12u]);
    bool _1658 = _1656.x == 0u;
    float _1669;
    float _1671;
    float _1673;
    if (_1658)
    {
        _1669 = _1649;
        _1671 = _1650;
        _1673 = _1651;
    }
    else
    {
        uint _1677 = _1580 + 6u;
        float _1693 = (dot(vec3(cbLight._m0[_1580 + 2u].xyz), vec3(_295, _296, _297)) * 0.5) + 0.5;
        float _1694 = _1693 * _1693;
        float _3751 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1696 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _1669 = (((cbLight._m0[_1677].x * 0.3183098733425140380859375) * _1695) * _1696) + _1649;
        _1671 = (((cbLight._m0[_1677].y * 0.3183098733425140380859375) * _1695) * _1696) + _1650;
        _1673 = (((cbLight._m0[_1677].z * 0.3183098733425140380859375) * _1695) * _1696) + _1651;
    }
    bool _1676 = _1656.y == 0u;
    float _1714;
    float _1716;
    float _1718;
    if (_1676)
    {
        _1714 = _1669;
        _1716 = _1671;
        _1718 = _1673;
    }
    else
    {
        uint _1887 = _1580 + 7u;
        float _1903 = (dot(vec3(cbLight._m0[_1580 + 3u].xyz), vec3(_295, _296, _297)) * 0.5) + 0.5;
        float _1904 = _1903 * _1903;
        float _3767 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1905 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1906 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
        _1714 = (((cbLight._m0[_1887].x * 0.3183098733425140380859375) * _1905) * _1906) + _1669;
        _1716 = (((cbLight._m0[_1887].y * 0.3183098733425140380859375) * _1905) * _1906) + _1671;
        _1718 = (((cbLight._m0[_1887].z * 0.3183098733425140380859375) * _1905) * _1906) + _1673;
    }
    uint _1721 = _1580 + 8u;
    float _1734 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1580].w)) * _429) * 0.949999988079071044921875);
    float _1735 = _1734 * _1734;
    float _1736 = cbLight._m0[_1580].x + _376;
    float _1737 = cbLight._m0[_1580].y + _377;
    float _1738 = cbLight._m0[_1580].z + _378;
    float _1742 = inversesqrt(dot(vec3(_1736, _1737, _1738), vec3(_1736, _1737, _1738)));
    float _1743 = _1742 * _1736;
    float _1744 = _1742 * _1737;
    float _1745 = _1742 * _1738;
    float _1746 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_1580].xyz));
    float _3783 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1749 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _1750 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _1751 = dot(vec3(_295, _296, _297), vec3(_1743, _1744, _1745));
    float _3805 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1754 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _1755 = dot(vec3(cbLight._m0[_1580].xyz), vec3(_1743, _1744, _1745));
    float _3816 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1759 = _1735 * _1735;
    float _1763 = ((_1754 * _1754) * (_1759 + (-1.0))) + 1.0;
    float _1771 = exp2(log2(1.0 - (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) * 5.0);
    float _1772 = 0.959999978542327880859375 - _497;
    float _1774 = 0.959999978542327880859375 - _498;
    float _1775 = 0.959999978542327880859375 - _499;
    float _1782 = 1.0 - _1735;
    float _1793 = (0.5 / (((_1750 * ((_1749 * _1782) + _1735)) + 9.9999999392252902907785028219223e-09) + (((_1750 * _1782) + _1735) * _1749))) * _1749;
    float _3827 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1795 = (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1759 / ((_1763 * _1763) * 3.141590118408203125));
    uint _1809 = _1580 + 9u;
    float _1820 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1621].w)) * _429) * 0.949999988079071044921875);
    float _1821 = _1820 * _1820;
    float _1822 = cbLight._m0[_1621].x + _376;
    float _1823 = cbLight._m0[_1621].y + _377;
    float _1824 = cbLight._m0[_1621].z + _378;
    float _1828 = inversesqrt(dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824)));
    float _1829 = _1828 * _1822;
    float _1830 = _1828 * _1823;
    float _1831 = _1828 * _1824;
    float _1832 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_1621].xyz));
    float _3838 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1835 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _1836 = dot(vec3(_295, _296, _297), vec3(_1829, _1830, _1831));
    float _3849 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1839 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _1840 = dot(vec3(cbLight._m0[_1621].xyz), vec3(_1829, _1830, _1831));
    float _3860 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1844 = _1821 * _1821;
    float _1848 = ((_1839 * _1839) * (_1844 + (-1.0))) + 1.0;
    float _1855 = exp2(log2(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * 5.0);
    float _1862 = 1.0 - _1821;
    float _1872 = (0.5 / (((_1750 * ((_1835 * _1862) + _1821)) + 9.9999999392252902907785028219223e-09) + (((_1750 * _1862) + _1821) * _1835))) * _1835;
    float _3871 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1874 = (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1844 / ((_1848 * _1848) * 3.141590118408203125));
    float _1884 = (((((_1855 * _1772) + _500) * cbLight._m0[_1809].x) * _1874) * _1603) + ((((cbLight._m0[_1721].x * _1572) * ((_1771 * _1772) + _500)) * _1795) * _1617);
    float _1885 = (((((_1855 * _1774) + _502) * cbLight._m0[_1809].y) * _1874) * _1603) + ((((cbLight._m0[_1721].y * _1573) * ((_1771 * _1774) + _502)) * _1795) * _1617);
    float _1886 = (((((_1855 * _1775) + _503) * cbLight._m0[_1809].z) * _1874) * _1603) + ((((cbLight._m0[_1721].z * _1574) * ((_1771 * _1775) + _503)) * _1795) * _1617);
    float _1948;
    float _1950;
    float _1952;
    if (_1658)
    {
        _1948 = _1884;
        _1950 = _1885;
        _1952 = _1886;
    }
    else
    {
        uint _1954 = _1580 + 2u;
        uint _1958 = _1580 + 10u;
        float _1972 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1954].w)) * _429) * 0.949999988079071044921875);
        float _1973 = _1972 * _1972;
        float _1974 = cbLight._m0[_1954].x + _376;
        float _1975 = cbLight._m0[_1954].y + _377;
        float _1976 = cbLight._m0[_1954].z + _378;
        float _1980 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
        float _1981 = _1980 * _1974;
        float _1982 = _1980 * _1975;
        float _1983 = _1980 * _1976;
        float _1984 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_1954].xyz));
        float _3882 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1987 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1988 = dot(vec3(_295, _296, _297), vec3(_1981, _1982, _1983));
        float _3893 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1991 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1992 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_1981, _1982, _1983));
        float _3904 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1996 = _1973 * _1973;
        float _2000 = ((_1991 * _1991) * (_1996 + (-1.0))) + 1.0;
        float _2007 = exp2(log2(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * 5.0);
        float _2014 = 1.0 - _1973;
        float _2024 = (0.5 / (((_1750 * ((_1987 * _2014) + _1973)) + 9.9999999392252902907785028219223e-09) + (((_1750 * _2014) + _1973) * _1987))) * _1987;
        float _3915 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2026 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1996 / ((_2000 * _2000) * 3.141590118408203125));
        float _2027 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
        _1948 = (((((_2007 * _1772) + _500) * cbLight._m0[_1958].x) * _2026) * _2027) + _1884;
        _1950 = (((((_2007 * _1774) + _502) * cbLight._m0[_1958].y) * _2026) * _2027) + _1885;
        _1952 = (((((_2007 * _1775) + _503) * cbLight._m0[_1958].z) * _2026) * _2027) + _1886;
    }
    float _2062;
    float _2064;
    float _2066;
    if (_1676)
    {
        _2062 = _1948;
        _2064 = _1950;
        _2066 = _1952;
    }
    else
    {
        uint _2073 = _1580 + 3u;
        uint _2077 = _1580 + 11u;
        float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2073].w)) * _429) * 0.949999988079071044921875);
        float _2092 = _2091 * _2091;
        float _2093 = cbLight._m0[_2073].x + _376;
        float _2094 = cbLight._m0[_2073].y + _377;
        float _2095 = cbLight._m0[_2073].z + _378;
        float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
        float _2100 = _2099 * _2093;
        float _2101 = _2099 * _2094;
        float _2102 = _2099 * _2095;
        float _2103 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_2073].xyz));
        float _3931 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2106 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _2107 = dot(vec3(_295, _296, _297), vec3(_2100, _2101, _2102));
        float _3942 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2110 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _2111 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_2100, _2101, _2102));
        float _3953 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2115 = _2092 * _2092;
        float _2119 = ((_2110 * _2110) * (_2115 + (-1.0))) + 1.0;
        float _2126 = exp2(log2(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * 5.0);
        float _2133 = 1.0 - _2092;
        float _2143 = (0.5 / (((_1750 * ((_2106 * _2133) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_1750 * _2133) + _2092) * _2106))) * _2106;
        float _3964 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2145 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_2115 / ((_2119 * _2119) * 3.141590118408203125));
        float _2146 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
        _2062 = (((((_2126 * _1772) + _500) * cbLight._m0[_2077].x) * _2145) * _2146) + _1948;
        _2064 = (((((_2126 * _1774) + _502) * cbLight._m0[_2077].y) * _2145) * _2146) + _1950;
        _2066 = (((((_2126 * _1775) + _503) * cbLight._m0[_2077].z) * _2145) * _2146) + _1952;
    }
    float _2280;
    float _2282;
    float _2284;
    float _2286;
    float _2288;
    float _2290;
    if (_1578.y == 0u)
    {
        float _2221 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2222 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2221;
        float _2223 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2221;
        float _2224 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2221;
        uvec4 _2236 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2237 = _2236.x;
        uint _2248 = uint((float(_2236.y) * floor(float(uint(cbSceneParam._m0[85u].y * _385) / _2237))) + floor(float(uint(cbSceneParam._m0[85u].x * _384) / _2237)));
        float _2258 = (log2(_2224 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2259 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        uint _2262 = uint(isnan(14.0) ? _2259 : (isnan(_2259) ? 14.0 : min(_2259, 14.0)));
        uvec4 _2267 = texelFetch(g_lightClusterGridBuffer, int(((_2262 << 2u) + (_2248 << 6u)) >> 2u));
        uint _2268 = _2267.x;
        uint _2269 = _2236.z;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        float _2376;
        float _2378;
        if (((((1u << ((_2269 >> 4u) & 15u)) + 4294967295u) & _2268) == 0u) || ((_2269 & 240u) == 0u))
        {
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
        }
        else
        {
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2377;
            float _2379;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            float _2516 = 0.0;
            float _2517 = 0.0;
            uint _2518 = 0u;
            uint _2527;
            bool _2528;
            for (;;)
            {
                _2527 = texelFetch(g_lightClassification, int((((_2262 << 5u) + (_2248 << 9u)) + (_2518 << 2u)) >> 2u)).x;
                _2528 = _2527 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2528)
                {
                    frontier_phi_63_pred = _2517;
                    frontier_phi_63_pred_1 = _2516;
                    frontier_phi_63_pred_2 = _2515;
                    frontier_phi_63_pred_3 = _2514;
                    frontier_phi_63_pred_4 = _2513;
                    frontier_phi_63_pred_5 = _2512;
                }
                else
                {
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    uint _2642;
                    _2636 = _2512;
                    _2637 = _2513;
                    _2638 = _2514;
                    _2639 = _2515;
                    _2640 = _2516;
                    _2641 = _2517;
                    _2642 = _2527;
                    float _2568;
                    float _2569;
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    for (;;)
                    {
                        uint _2646 = uint(findLSB(_2642)) + (_2518 << 5u);
                        uint _2643 = (_2642 + 4294967295u) & _2642;
                        uint _2648 = _2646 * 48u;
                        vec4 _2662 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2648)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 3u)).x));
                        uint _2668 = (_2646 * 48u) + 4u;
                        vec4 _2681 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2668)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 3u)).x));
                        uint _2687 = (_2646 * 48u) + 8u;
                        vec3 _2698 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2687)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 2u)).x));
                        float _2702 = _2662.x - _2222;
                        float _2703 = _2662.y - _2223;
                        float _2704 = _2662.z - _2224;
                        float _2705 = dot(vec3(_2702, _2703, _2704), vec3(_2702, _2703, _2704));
                        float _2708 = inversesqrt(_2705);
                        float _2709 = _2708 * _2702;
                        float _2710 = _2708 * _2703;
                        float _2711 = _2708 * _2704;
                        float _2712 = dot(vec3(_410, _413, _416), vec3(_2709, _2710, _2711));
                        float _2717 = 1.0 - (_2705 * _2662.w);
                        float _3990 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
                        float _2718 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
                        float _2719 = sqrt(_2705) * _2681.w;
                        float _2722 = 1.39999997615814208984375 / (_2719 + 1.39999997615814208984375);
                        float _2723 = _2722 * _2722;
                        float _2726 = ((1.0 - _2723) * _2712) + _2723;
                        float _2729 = _2719 * _2719;
                        float _2733 = ((isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0))) * _2718) / ((_2729 * 0.699999988079071044921875) + 1.0);
                        float _2737 = (-0.0) - _2222;
                        float _2738 = (-0.0) - _2223;
                        float _2739 = (-0.0) - _2224;
                        float _2743 = inversesqrt(dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739)));
                        float _2744 = _2743 * _2737;
                        float _2745 = _2743 * _2738;
                        float _2746 = _2743 * _2739;
                        float _2754 = exp2(log2(1.0 / ((_2729 * 3.5) + 5.0)) * 0.25);
                        float _2755 = 1.0 - _531;
                        float _2762 = sqrt(1.0 - ((1.0 - (_2755 * _2755)) * (1.0 - (_2754 * _2754))));
                        float _2763 = _2762 * _2762;
                        float _2764 = _2763 * _2763;
                        float _2765 = _2744 + _2709;
                        float _2766 = _2745 + _2710;
                        float _2767 = _2746 + _2711;
                        float _2771 = inversesqrt(dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767)));
                        float _2775 = dot(vec3(_410, _413, _416), vec3(_2744, _2745, _2746));
                        float _4006 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                        float _2778 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
                        float _2779 = dot(vec3(_410, _413, _416), vec3(_2771 * _2765, _2771 * _2766, _2771 * _2767));
                        float _4017 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
                        float _2782 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
                        float _2786 = ((_2782 * _2782) * (_2764 + (-1.0))) + 1.0;
                        float _2787 = _2722 * _2763;
                        float _2788 = _2787 * _2787;
                        float _2791 = ((1.0 - _2788) * _2712) + _2788;
                        float _4028 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
                        float _2792 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                        float _2793 = 1.0 - _2763;
                        float _2803 = (0.5 / (((_2792 * ((_2778 * _2793) + _2763)) + 9.9999999392252902907785028219223e-09) + (((_2792 * _2793) + _2763) * _2778))) * _2792;
                        float _4039 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                        float _2814 = (((_2764 * 3.1415927410125732421875) * (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) / ((_2786 * _2786) * ((_2729 * 2.1991131305694580078125) + 3.141590118408203125))) * _2718;
                        _2571 = (_2733 * _2681.x) + _2639;
                        _2572 = (_2733 * _2681.y) + _2640;
                        _2573 = (_2733 * _2681.z) + _2641;
                        _2568 = (_2814 * _2698.x) + _2636;
                        _2569 = (_2814 * _2698.y) + _2637;
                        _2570 = (_2814 * _2698.z) + _2638;
                        if (_2643 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2636 = _2568;
                            _2637 = _2569;
                            _2638 = _2570;
                            _2639 = _2571;
                            _2640 = _2572;
                            _2641 = _2573;
                            _2642 = _2643;
                        }
                    }
                    frontier_phi_63_pred = _2573;
                    frontier_phi_63_pred_1 = _2572;
                    frontier_phi_63_pred_2 = _2571;
                    frontier_phi_63_pred_3 = _2570;
                    frontier_phi_63_pred_4 = _2569;
                    frontier_phi_63_pred_5 = _2568;
                }
                _2379 = frontier_phi_63_pred;
                _2377 = frontier_phi_63_pred_1;
                _2375 = frontier_phi_63_pred_2;
                _2373 = frontier_phi_63_pred_3;
                _2371 = frontier_phi_63_pred_4;
                _2369 = frontier_phi_63_pred_5;
                uint _2519 = _2518 + 1u;
                if (_2519 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2512 = _2369;
                    _2513 = _2371;
                    _2514 = _2373;
                    _2515 = _2375;
                    _2516 = _2377;
                    _2517 = _2379;
                    _2518 = _2519;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
        }
        uvec4 _2382 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2383 = _2382.z;
        uint _2385 = (_2383 >> 8u) & 15u;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        if (((4294967295u << _2385) & _2268) == 0u)
        {
            _2480 = _2368;
            _2482 = _2370;
            _2484 = _2372;
            _2486 = _2374;
            _2488 = _2376;
            _2490 = _2378;
        }
        else
        {
            float _2505 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
            float _2506 = _2505 * _2222;
            float _2507 = _2505 * _2223;
            float _2508 = _2505 * _2224;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2385 < ((_2383 >> 12u) & 15u))
            {
                float _2481;
                float _2483;
                float _2485;
                float _2487;
                float _2489;
                float _2491;
                float _2619 = _2368;
                float _2620 = _2370;
                float _2621 = _2372;
                float _2622 = _2374;
                float _2623 = _2376;
                float _2624 = _2378;
                uint _2625 = _2385;
                uint _2634;
                bool _2635;
                for (;;)
                {
                    _2634 = texelFetch(g_lightClassification, int((((_2262 << 5u) + (_2248 << 9u)) + (_2625 << 2u)) >> 2u)).x;
                    _2635 = _2634 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2635)
                    {
                        frontier_phi_69_pred = _2624;
                        frontier_phi_69_pred_1 = _2623;
                        frontier_phi_69_pred_2 = _2622;
                        frontier_phi_69_pred_3 = _2621;
                        frontier_phi_69_pred_4 = _2620;
                        frontier_phi_69_pred_5 = _2619;
                    }
                    else
                    {
                        float _2819;
                        float _2820;
                        float _2821;
                        float _2822;
                        float _2823;
                        float _2824;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _2832 = _2619;
                        float _2833 = _2620;
                        float _2834 = _2621;
                        float _2835 = _2622;
                        float _2836 = _2623;
                        float _2837 = _2624;
                        uint _2838 = _2634;
                        uint _2839;
                        vec4 _2864;
                        float _2865;
                        vec4 _2880;
                        vec3 _2892;
                        vec4 _2908;
                        vec4 _2924;
                        float _2971;
                        bool _2972;
                        for (;;)
                        {
                            uint _2849 = ((_2625 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2838));
                            _2839 = (_2838 + 4294967295u) & _2838;
                            uint _2851 = _2849 * 40u;
                            _2864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 3u)).x));
                            _2865 = _2864.w;
                            uint _2867 = (_2849 * 40u) + 4u;
                            _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            uint _2882 = (_2849 * 40u) + 8u;
                            _2892 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x));
                            uint _2895 = (_2849 * 40u) + 16u;
                            _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            uint _2911 = (_2849 * 40u) + 20u;
                            _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            uint _2927 = (_2849 * 40u) + 24u;
                            vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            uint _2946 = (_2849 * 40u) + 28u;
                            vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            _2971 = fma(_2224, _2959.z, fma(_2223, _2959.y, _2959.x * _2222)) + _2959.w;
                            _2972 = !((fma(_2224, _2940.z, fma(_2223, _2940.y, _2940.x * _2222)) + _2940.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2972)
                            {
                                float _2999 = _2864.x - _2222;
                                float _3000 = _2864.y - _2223;
                                float _3001 = _2864.z - _2224;
                                float _3002 = dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001));
                                float _3005 = inversesqrt(_3002);
                                float _3006 = _3005 * _2999;
                                float _3007 = _3005 * _3000;
                                float _3008 = _3005 * _3001;
                                float _3012 = 1.0 - (_3002 / (_2865 * _2865));
                                float _4050 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                                float _3013 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                                float _3017 = sqrt(_3002) * _2880.w;
                                float _3019 = 1.39999997615814208984375 / (_3017 + 1.39999997615814208984375);
                                float _3020 = _3019 * _3019;
                                float _3023 = ((1.0 - _3020) * dot(vec3(_3006, _3007, _3008), vec3(_410, _413, _416))) + _3020;
                                float _3026 = _3017 * _3017;
                                float _3030 = (fma(_2224, _2908.z, fma(_2223, _2908.y, _2908.x * _2222)) + _2908.w) / _2971;
                                float _3031 = (fma(_2224, _2924.z, fma(_2223, _2924.y, _2924.x * _2222)) + _2924.w) / _2971;
                                float _3035 = 1.0 - dot(vec2(_3030, _3031), vec2(_3030, _3031));
                                float _4066 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                                float _3036 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                                float _3037 = _3036 * (((isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0))) * _3013) / ((_3026 * 0.699999988079071044921875) + 1.0));
                                float _3049 = exp2(log2(1.0 / ((_3026 * 3.5) + 5.0)) * 0.25);
                                float _3050 = 1.0 - _531;
                                float _3057 = sqrt(1.0 - ((1.0 - (_3050 * _3050)) * (1.0 - (_3049 * _3049))));
                                float _3058 = _3057 * _3057;
                                float _3059 = _3058 * _3058;
                                float _3060 = _3006 - _2506;
                                float _3061 = _3007 - _2507;
                                float _3062 = _3008 - _2508;
                                float _3066 = inversesqrt(dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062)));
                                float _3070 = dot(vec3(_410, _413, _416), vec3((-0.0) - _2506, (-0.0) - _2507, (-0.0) - _2508));
                                float _4077 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3073 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                                float _3074 = dot(vec3(_410, _413, _416), vec3(_3066 * _3060, _3066 * _3061, _3066 * _3062));
                                float _4088 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                                float _3077 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                                float _3081 = ((_3077 * _3077) * (_3059 + (-1.0))) + 1.0;
                                float _3082 = _3019 * _3058;
                                float _3083 = _3082 * _3082;
                                float _3089 = ((1.0 - _3083) * dot(vec3(_410, _413, _416), vec3(_3006, _3007, _3008))) + _3083;
                                float _4099 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3090 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                                float _3091 = 1.0 - _3058;
                                float _3101 = (0.5 / (((_3090 * ((_3073 * _3091) + _3058)) + 9.9999999392252902907785028219223e-09) + (((_3090 * _3091) + _3058) * _3073))) * _3090;
                                float _4110 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3111 = (_3036 * _3013) * (((_3059 * 3.1415927410125732421875) * (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) / ((_3081 * _3081) * ((_3026 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3037 * _2880.z;
                                frontier_phi_75_pred_1 = _3037 * _2880.y;
                                frontier_phi_75_pred_2 = _3037 * _2880.x;
                                frontier_phi_75_pred_3 = _3111 * _2892.z;
                                frontier_phi_75_pred_4 = _3111 * _2892.y;
                                frontier_phi_75_pred_5 = _3111 * _2892.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3120 = frontier_phi_75_pred;
                            _3119 = frontier_phi_75_pred_1;
                            _3118 = frontier_phi_75_pred_2;
                            _3117 = frontier_phi_75_pred_3;
                            _3116 = frontier_phi_75_pred_4;
                            _3115 = frontier_phi_75_pred_5;
                            _2822 = _3118 + _2835;
                            _2823 = _3119 + _2836;
                            _2824 = _3120 + _2837;
                            _2819 = _3115 + _2832;
                            _2820 = _3116 + _2833;
                            _2821 = _3117 + _2834;
                            if (_2839 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2832 = _2819;
                                _2833 = _2820;
                                _2834 = _2821;
                                _2835 = _2822;
                                _2836 = _2823;
                                _2837 = _2824;
                                _2838 = _2839;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2824;
                        frontier_phi_69_pred_1 = _2823;
                        frontier_phi_69_pred_2 = _2822;
                        frontier_phi_69_pred_3 = _2821;
                        frontier_phi_69_pred_4 = _2820;
                        frontier_phi_69_pred_5 = _2819;
                    }
                    _2491 = frontier_phi_69_pred;
                    _2489 = frontier_phi_69_pred_1;
                    _2487 = frontier_phi_69_pred_2;
                    _2485 = frontier_phi_69_pred_3;
                    _2483 = frontier_phi_69_pred_4;
                    _2481 = frontier_phi_69_pred_5;
                    uint _2626 = _2625 + 1u;
                    if (_2626 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2619 = _2481;
                        _2620 = _2483;
                        _2621 = _2485;
                        _2622 = _2487;
                        _2623 = _2489;
                        _2624 = _2491;
                        _2625 = _2626;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2491;
                frontier_phi_57_58_ladder_1 = _2489;
                frontier_phi_57_58_ladder_2 = _2487;
                frontier_phi_57_58_ladder_3 = _2485;
                frontier_phi_57_58_ladder_4 = _2483;
                frontier_phi_57_58_ladder_5 = _2481;
            }
            else
            {
                frontier_phi_57_58_ladder = _2378;
                frontier_phi_57_58_ladder_1 = _2376;
                frontier_phi_57_58_ladder_2 = _2374;
                frontier_phi_57_58_ladder_3 = _2372;
                frontier_phi_57_58_ladder_4 = _2370;
                frontier_phi_57_58_ladder_5 = _2368;
            }
            _2480 = frontier_phi_57_58_ladder_5;
            _2482 = frontier_phi_57_58_ladder_4;
            _2484 = frontier_phi_57_58_ladder_3;
            _2486 = frontier_phi_57_58_ladder_2;
            _2488 = frontier_phi_57_58_ladder_1;
            _2490 = frontier_phi_57_58_ladder;
        }
        float _2495 = isnan(1.0) ? _515 : (isnan(_515) ? 1.0 : min(_515, 1.0));
        _2280 = (_2495 * _2486) + _1714;
        _2282 = (_2495 * _2488) + _1716;
        _2284 = (_2495 * _2490) + _1718;
        _2286 = ((_2480 * _500) * _2495) + _2062;
        _2288 = ((_2482 * _502) * _2495) + _2064;
        _2290 = ((_2484 * _503) * _2495) + _2066;
    }
    else
    {
        _2280 = _1714;
        _2282 = _1716;
        _2284 = _1718;
        _2286 = _2062;
        _2288 = _2064;
        _2290 = _2066;
    }
    float _4126 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _4137 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _4148 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    uint _2310 = _442 + 6u;
    float _2318 = _384 / cbSceneParam._m0[86u].x;
    float _2319 = _385 / cbSceneParam._m0[86u].y;
    vec4 _2333 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2318, _2319, (log2((isnan(cbSceneParam._m0[77u].w) ? _318 : (isnan(_318) ? cbSceneParam._m0[77u].w : min(_318, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2335 = _2333.x;
    float _2336 = _2333.y;
    float _2337 = _2333.z;
    float _2338 = _2333.w;
    float _2430;
    float _2432;
    float _2434;
    float _2436;
    if (_318 > cbSceneParam._m0[78u].w)
    {
        float _2393 = isnan(_318) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _318 : min(cbSceneParam._m0[80u].w, _318));
        float _2394 = _2393 / _318;
        float _2405 = _2394 * _369;
        float _2406 = _370 * _2394;
        float _2407 = (-0.0) - _2406;
        float _2408 = _2394 * _371;
        float _2410 = (cbSceneParam._m0[77u].w * _2407) / _2393;
        float _2411 = _2410 + cbSceneParam._m0[79u].w;
        float _2412 = cbSceneParam._m0[79u].w - _2406;
        float _2418 = sqrt(((_2405 * _2405) + (_2406 * _2406)) + (_2408 * _2408));
        float _2421 = (1.0 - (cbSceneParam._m0[77u].w / _2393)) * _2418;
        float _2426 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2428 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2581;
        if (abs((_2407 - _2410) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2581 = ((((_2411 > 0.0) ? exp2(_2426 * _2411) : (2.0 - exp2(_2428 * _2411))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2421;
        }
        else
        {
            float _2541 = 1.0 / cbSceneParam._m0[80u].x;
            float _2542 = isnan(_2412) ? _2411 : (isnan(_2411) ? _2412 : max(_2411, _2412));
            float _2543 = isnan(_2412) ? _2411 : (isnan(_2411) ? _2412 : min(_2411, _2412));
            float _2552 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : min(_2542, 0.0));
            float _2553 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : min(_2543, 0.0));
            _2581 = ((abs(_2418 / _2407) * cbSceneParam._m0[80u].y) * ((((_2552 - _2553) * 2.0) - ((exp2(_2426 * (isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0)))) - exp2(_2426 * (isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0))))) * _2541)) - ((exp2(_2428 * _2552) - exp2(_2428 * _2553)) * _2541))) + (_2421 * cbSceneParam._m0[80u].z);
        }
        vec4 _2583 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2318, _2319, 1.0), 0.0);
        float _2592 = exp2((_2581 * (-1.44269502162933349609375)) * (1.0 - _2583.w));
        float _2593 = log2(_2592);
        float _2609 = log2(_2338);
        _2430 = (exp2(_2609 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2593 * cbSceneParam._m0[78u].x)) * _2583.x) / cbSceneParam._m0[78u].x)) + _2335;
        _2432 = (exp2(_2609 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2593 * cbSceneParam._m0[78u].y)) * _2583.y) / cbSceneParam._m0[78u].y)) + _2336;
        _2434 = (exp2(_2609 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2593 * cbSceneParam._m0[78u].z)) * _2583.z) / cbSceneParam._m0[78u].z)) + _2337;
        _2436 = _2592 * _2338;
    }
    else
    {
        _2430 = _2335;
        _2432 = _2336;
        _2434 = _2337;
        _2436 = _2338;
    }
    float _2448 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2449 = _2448 == 3.0;
    float _2450 = log2(_2436);
    float _2457 = exp2(_2450 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_2280 + ((isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))) * _515))) + ((_2286 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _1325)) * cbPerFrame._m0[3u].x));
    float _2458 = exp2(_2450 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_2282 + ((isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))) * _515))) + ((_2288 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _1325)) * cbPerFrame._m0[3u].x));
    float _2459 = exp2(_2450 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2284 + ((isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))) * _515))) + ((_2290 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _1325)) * cbPerFrame._m0[3u].x));
    float _2468 = (_2448 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2468 * (_2449 ? _2457 : (_2457 + (cbSceneParam._m0[72u].w * _2430)));
    SV_Target.y = _2468 * (_2449 ? _2458 : (_2458 + (cbSceneParam._m0[72u].w * _2432)));
    SV_Target.z = _2468 * (_2449 ? _2459 : (_2459 + (cbSceneParam._m0[72u].w * _2434)));
    SV_Target.w = cbInstanceData._m0[_2310].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2310].w;
}


