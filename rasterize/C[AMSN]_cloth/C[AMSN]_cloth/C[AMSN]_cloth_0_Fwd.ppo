#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D C_AMSN_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _905;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = _203 * NORMAL.x;
    float _205 = _203 * NORMAL.y;
    float _206 = _203 * NORMAL.z;
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218;
    float _219;
    float _220;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
    }
    else
    {
        _218 = _204;
        _219 = _205;
        _220 = _206;
    }
    vec4 _240 = texture(sampler2D(C_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _246 = _240.x * cbMtdParam._m0[9u].x;
    float _247 = _240.y * cbMtdParam._m0[9u].y;
    float _248 = _240.z * cbMtdParam._m0[9u].z;
    vec4 _260 = texture(sampler2D(C_AMSN_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _267 = cbMtdParam._m0[10u].x + _260.x;
    vec4 _279 = texture(sampler2D(C_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _283 = _279.z;
    float _287 = (_279.x * 2.0) + (-1.0);
    float _289 = (_279.y * 2.0) + (-1.0);
    float _290 = dot(vec2(_287, _289), vec2(_287, _289));
    float _3242 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _296 = sqrt(1.0 - (isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0))));
    float _299 = fma(_296, _218, fma(_289, _210 * TANGENT.x, (_196 * _188) * _287));
    float _302 = fma(_296, _219, fma(_289, _210 * TANGENT.y, (_196 * _189) * _287));
    float _305 = fma(_296, _220, fma(_289, _210 * TANGENT.z, (_196 * _190) * _287));
    float _309 = inversesqrt(dot(vec3(_299, _302, _305), vec3(_299, _302, _305)));
    float _310 = _309 * _299;
    float _311 = _309 * _302;
    float _312 = _309 * _305;
    float _3253 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _313 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
    float _3264 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3275 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3286 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3297 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _317 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
    float _333 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _374 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _384 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _374);
    float _385 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _374);
    float _386 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _374);
    float _390 = inversesqrt(dot(vec3(_384, _385, _386), vec3(_384, _385, _386)));
    float _391 = _384 * _390;
    float _392 = _385 * _390;
    float _393 = _386 * _390;
    float _399 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _400 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _402 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _404 = _402.w;
    float _425 = fma(_312, cbSceneParam._m0[5u].z, fma(_311, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _310));
    float _428 = fma(_312, cbSceneParam._m0[6u].z, fma(_311, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _310));
    float _431 = fma(_312, cbSceneParam._m0[7u].z, fma(_311, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _310));
    vec4 _433 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _444 = (((_433.y - _313) + (_433.w * _313)) * cbMtdParam._m0[3u].x) + _313;
    uint _457 = uint(roundEven(NORMAL.w)) * 13u;
    uint _460 = (_457 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _466 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0)))) * cbInstanceData._m0[_460].x;
    float _467 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0)))) * cbInstanceData._m0[_460].y;
    float _468 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0)))) * cbInstanceData._m0[_460].z;
    float _3308 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _469 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
    float _3319 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _470 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
    float _3330 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _471 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
    vec4 _472 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _477 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _488 = (((_477.x - _317) + (_477.w * _317)) * cbMtdParam._m0[3u].x) + _317;
    float _501 = (cbMtdParam._m0[3u].x * (((_469 * _404) - _469) + _472.x)) + _469;
    float _502 = (cbMtdParam._m0[3u].x * (((_470 * _404) - _470) + _472.y)) + _470;
    float _503 = (cbMtdParam._m0[3u].x * (((_471 * _404) - _471) + _472.z)) + _471;
    float _504 = 1.0 - _488;
    float _505 = _504 * _501;
    float _506 = _504 * _502;
    float _507 = _504 * _503;
    float _512 = (_501 + (-0.039999999105930328369140625)) * _488;
    float _513 = (_502 + (-0.039999999105930328369140625)) * _488;
    float _514 = (_503 + (-0.039999999105930328369140625)) * _488;
    float _515 = _512 + 0.039999999105930328369140625;
    float _517 = _513 + 0.039999999105930328369140625;
    float _518 = _514 + 0.039999999105930328369140625;
    vec4 _527 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _399, cbSceneParam._m0[86u].y * _400));
    float _530 = _527.x * TEXCOORD_4;
    float _531 = dot(vec3(_310, _311, _312), vec3(_391, _392, _393));
    float _534 = _531 * 2.0;
    float _538 = (_534 * _310) - _391;
    float _539 = (_534 * _311) - _392;
    float _540 = (_534 * _312) - _393;
    float _544 = abs(dot(vec3(_391, _392, _393), vec3(_310, _311, _312)));
    float _3341 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _546 = sqrt(_444);
    float _559 = exp2((_546 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_546 * 3.0));
    float _565 = (1.0 - _559) * ((_546 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _566 = _559 * _546;
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _598 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _904;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _629 = fma(_602, cbModelParam._m0[26u].z, fma(_598, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _594));
        float _633 = fma(_602, cbModelParam._m0[27u].z, fma(_598, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _594));
        float _637 = fma(_602, cbModelParam._m0[28u].z, fma(_598, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _594));
        float _662 = _594 + _310;
        float _663 = _598 + _311;
        float _664 = _602 + _312;
        float _674 = fma(_664, cbModelParam._m0[26u].z, fma(_663, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _662)) - _629;
        float _675 = fma(_664, cbModelParam._m0[27u].z, fma(_663, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _662)) - _633;
        float _676 = fma(_664, cbModelParam._m0[28u].z, fma(_663, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _662)) - _637;
        float _680 = inversesqrt(dot(vec3(_674, _675, _676), vec3(_674, _675, _676)));
        float _693 = ((_680 * _674) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_629 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _694 = ((_680 * _675) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_633 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _695 = ((_680 * _676) / cbModelParam._m0[34u].z) + ((((((_637 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _698 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_693, _694, _695), 0.0);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_693, _694, _695), 0.0);
        vec4 _712 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_693, _694, _695), 0.0);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_693, _694, _695), 0.0);
        float _732 = exp2((_698.w + (-0.5)) * 20.0) * 2.0;
        float _733 = _732 * (_698.x + (-0.5));
        float _734 = _732 * (_698.y + (-0.5));
        float _735 = _732 * (_698.z + (-0.5));
        float _742 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _743 = _742 * (_705.x + (-0.5));
        float _744 = _742 * (_705.y + (-0.5));
        float _745 = _742 * (_705.z + (-0.5));
        float _752 = exp2((_712.w + (-0.5)) * 20.0) * 2.0;
        float _753 = _752 * (_712.x + (-0.5));
        float _754 = _752 * (_712.y + (-0.5));
        float _755 = _752 * (_712.z + (-0.5));
        float _762 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _763 = _762 * (_719.x + (-0.5));
        float _764 = _762 * (_719.y + (-0.5));
        float _765 = _762 * (_719.z + (-0.5));
        float _766 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _767 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _768 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _769 = _733 * 0.5;
        float _770 = _743 * 0.5;
        float _771 = _753 * 0.5;
        float _772 = dot(vec3(_769, _770, _771), vec3(_769, _770, _771));
        float _777 = (_772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_772);
        float _786 = (dot(vec3(_310, _311, _312), vec3(_777 * _769, _777 * _770, _777 * _771)) + 1.0) * 0.5;
        float _3367 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _796 = sqrt(((_770 * _770) + (_769 * _769)) + (_771 * _771)) / (_766 + 9.9999997473787516355514526367188e-06);
        float _3378 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _798 = _797 * 2.0;
        float _802 = (1.0 - _797) / (_797 + 1.0);
        float _3389 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _812 = ((((1.0 - _803) * (_798 + 2.0)) * exp2(log2(isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * (_798 + 1.0))) + _803) * _766;
        float _813 = _734 * 0.5;
        float _814 = _744 * 0.5;
        float _815 = _754 * 0.5;
        float _816 = dot(vec3(_813, _814, _815), vec3(_813, _814, _815));
        float _821 = (_816 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_816);
        float _829 = (dot(vec3(_310, _311, _312), vec3(_821 * _813, _821 * _814, _821 * _815)) + 1.0) * 0.5;
        float _3400 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _838 = sqrt(((_814 * _814) + (_813 * _813)) + (_815 * _815)) / (_767 + 9.9999997473787516355514526367188e-06);
        float _3411 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _840 = _839 * 2.0;
        float _844 = (1.0 - _839) / (_839 + 1.0);
        float _3422 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _854 = ((((1.0 - _845) * (_840 + 2.0)) * exp2(log2(isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) * (_840 + 1.0))) + _845) * _767;
        float _855 = _735 * 0.5;
        float _856 = _745 * 0.5;
        float _857 = _755 * 0.5;
        float _858 = dot(vec3(_855, _856, _857), vec3(_855, _856, _857));
        float _863 = (_858 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_858);
        float _871 = (dot(vec3(_310, _311, _312), vec3(_863 * _855, _863 * _856, _863 * _857)) + 1.0) * 0.5;
        float _3433 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _880 = sqrt(((_856 * _856) + (_855 * _855)) + (_857 * _857)) / (_768 + 9.9999997473787516355514526367188e-06);
        float _3444 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _882 = _881 * 2.0;
        float _886 = (1.0 - _881) / (_881 + 1.0);
        float _3455 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _896 = ((((1.0 - _887) * (_882 + 2.0)) * exp2(log2(isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))) * (_882 + 1.0))) + _887) * _768;
        _904 = _735;
        _906 = _734;
        _907 = _733;
        _908 = _745;
        _909 = _744;
        _910 = _743;
        _911 = _755;
        _912 = _754;
        _913 = _753;
        _914 = _768;
        _915 = _767;
        _916 = _766;
        _917 = cbModelParam._m0[36u].z * (isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0)));
        _918 = cbModelParam._m0[36u].z * (isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0)));
        _919 = cbModelParam._m0[36u].z * (isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0)));
    }
    else
    {
        _904 = _905;
        _906 = _905;
        _907 = _905;
        _908 = _905;
        _909 = _905;
        _910 = _905;
        _911 = _905;
        _912 = _905;
        _913 = _905;
        _914 = _905;
        _915 = _905;
        _916 = _905;
        _917 = 0.0;
        _918 = 0.0;
        _919 = 0.0;
    }
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _945 = fma(_602, cbModelParam._m0[30u].z, fma(_598, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _594));
        float _949 = fma(_602, cbModelParam._m0[31u].z, fma(_598, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _594));
        float _953 = fma(_602, cbModelParam._m0[32u].z, fma(_598, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _594));
        float _976 = _594 + _310;
        float _977 = _598 + _311;
        float _978 = _602 + _312;
        float _988 = fma(_978, cbModelParam._m0[30u].z, fma(_977, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _976)) - _945;
        float _989 = fma(_978, cbModelParam._m0[31u].z, fma(_977, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _976)) - _949;
        float _990 = fma(_978, cbModelParam._m0[32u].z, fma(_977, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _976)) - _953;
        float _994 = inversesqrt(dot(vec3(_988, _989, _990), vec3(_988, _989, _990)));
        float _1007 = ((_994 * _988) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_945 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_994 * _989) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_949 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1009 = ((_994 * _990) / cbModelParam._m0[35u].z) + ((((((_953 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        float _1044 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1011.x + (-0.5));
        float _1046 = _1044 * (_1011.y + (-0.5));
        float _1047 = _1044 * (_1011.z + (-0.5));
        float _1054 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1018.x + (-0.5));
        float _1056 = _1054 * (_1018.y + (-0.5));
        float _1057 = _1054 * (_1018.z + (-0.5));
        float _1064 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1025.x + (-0.5));
        float _1066 = _1064 * (_1025.y + (-0.5));
        float _1067 = _1064 * (_1025.z + (-0.5));
        float _1074 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1032.x + (-0.5));
        float _1076 = _1074 * (_1032.y + (-0.5));
        float _1077 = _1074 * (_1032.z + (-0.5));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = _1045 * 0.5;
        float _1082 = _1055 * 0.5;
        float _1083 = _1065 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_310, _311, _312), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3496 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3507 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3518 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * (_1108 + 1.0))) + _1113) * _1078;
        float _1123 = _1046 * 0.5;
        float _1124 = _1056 * 0.5;
        float _1125 = _1066 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_310, _311, _312), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3529 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3540 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3551 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * (_1150 + 1.0))) + _1155) * _1079;
        float _1165 = _1047 * 0.5;
        float _1166 = _1057 * 0.5;
        float _1167 = _1067 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_310, _311, _312), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3562 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3573 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3584 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * (_1192 + 1.0))) + _1197) * _1080;
        _1214 = _1047;
        _1215 = _1046;
        _1216 = _1045;
        _1217 = _1057;
        _1218 = _1056;
        _1219 = _1055;
        _1220 = _1067;
        _1221 = _1066;
        _1222 = _1065;
        _1223 = _1080;
        _1224 = _1079;
        _1225 = _1078;
        _1226 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1227 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1228 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
    }
    else
    {
        _1214 = _905;
        _1215 = _905;
        _1216 = _905;
        _1217 = _905;
        _1218 = _905;
        _1219 = _905;
        _1220 = _905;
        _1221 = _905;
        _1222 = _905;
        _1223 = _905;
        _1224 = _905;
        _1225 = _905;
        _1226 = 0.0;
        _1227 = 0.0;
        _1228 = 0.0;
    }
    float _1238 = (cbModelParam._m0[1u].x * (_1226 - _917)) + _917;
    float _1239 = (cbModelParam._m0[1u].x * (_1227 - _918)) + _918;
    float _1240 = (cbModelParam._m0[1u].x * (_1228 - _919)) + _919;
    float _1261 = fma(_1240, cbSceneParam._m0[89u].z, fma(_1239, cbSceneParam._m0[89u].y, _1238 * cbSceneParam._m0[89u].x));
    float _1264 = fma(_1240, cbSceneParam._m0[90u].z, fma(_1239, cbSceneParam._m0[90u].y, _1238 * cbSceneParam._m0[90u].x));
    float _1267 = fma(_1240, cbSceneParam._m0[91u].z, fma(_1239, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1238));
    float _1282 = _538 * 0.5;
    float _1283 = _539 * 0.5;
    float _1284 = _540 * 0.5;
    float _1285 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_1216, _1219, _1222, _1225));
    float _1288 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_1215, _1218, _1221, _1224));
    float _1291 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_1214, _1217, _1220, _1223));
    float _1325;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1298 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_904, _908, _911, _914));
        float _1302 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_906, _909, _912, _915));
        float _1306 = dot(vec4(_1282, _1283, _1284, 1.0), vec4(_907, _910, _913, _916));
        float _1313 = dot(vec4(cbModelParam._m0[39u]), vec4(_1282, _1283, _1284, 1.0));
        _1325 = dot(vec3(isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1313) ? 0.0 : (isnan(0.0) ? _1313 : max(0.0, _1313))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1325 = 1.0;
    }
    float _1336;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1327 = dot(vec4(cbModelParam._m0[40u]), vec4(_1282, _1283, _1284, 1.0));
        _1336 = dot(vec3(isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)), isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1327) ? 0.0 : (isnan(0.0) ? _1327 : max(0.0, _1327))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1336 = 1.0;
    }
    float _1340 = (_1336 * cbModelParam._m0[1u].x) + (_1325 * (1.0 - cbModelParam._m0[1u].x));
    float _1350 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _444);
    float _1351 = isnan(_1350) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1350 : min(cbModelParam._m0[25u].z, _1350));
    float _1433;
    float _1435;
    float _1437;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1400 = fma(_602, cbModelParam._m0[13u].z, fma(_598, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _594)) + cbModelParam._m0[13u].w;
        float _1404 = fma(_602, cbModelParam._m0[14u].z, fma(_598, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _594)) + cbModelParam._m0[14u].w;
        float _1408 = fma(_602, cbModelParam._m0[15u].z, fma(_598, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _594)) + cbModelParam._m0[15u].w;
        float _1411 = fma(_540, cbModelParam._m0[13u].z, fma(_539, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _538));
        float _1414 = fma(_540, cbModelParam._m0[14u].z, fma(_539, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _538));
        float _1417 = fma(_540, cbModelParam._m0[15u].z, fma(_539, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _538));
        float _1445;
        if (_1411 > 0.0)
        {
            _1445 = abs((1.0 - _1400) / _1411);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1400 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1445 = frontier_phi_16_14_ladder;
        }
        float _1653;
        if (_1414 > 0.0)
        {
            _1653 = abs((1.0 - _1404) / _1414);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1404 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1653 = frontier_phi_25_21_ladder;
        }
        float _1907;
        if (_1417 > 0.0)
        {
            _1907 = abs((1.0 - _1408) / _1417);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1408 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1907 = frontier_phi_37_32_ladder;
        }
        float _1909 = isnan(_1653) ? _1445 : (isnan(_1445) ? _1653 : min(_1445, _1653));
        float _1910 = isnan(_1907) ? _1909 : (isnan(_1909) ? _1907 : min(_1909, _1907));
        float _1914 = (_1910 * _1411) + _1400;
        float _1915 = (_1910 * _1414) + _1404;
        float _1916 = (_1910 * _1417) + _1408;
        float _1917 = _1910 * 9.9999997473787516355514526367188e-05;
        float _1919 = (-1.0) - _1917;
        float _1921 = _1917 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1916 > _1921) || ((_1916 < _1919) || ((_1915 > _1921) || ((_1915 < _1919) || ((_1914 < _1919) || (_1914 > _1921))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2044 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1916, cbModelParam._m0[9u].z, fma(_1915, cbModelParam._m0[9u].y, _1914 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1916, cbModelParam._m0[10u].z, fma(_1915, cbModelParam._m0[10u].y, _1914 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1916, cbModelParam._m0[11u].z, fma(_1915, cbModelParam._m0[11u].y, _1914 * cbModelParam._m0[11u].x))), _1351);
            frontier_phi_15_37_ladder = _2044.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2044.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2044.x * cbModelParam._m0[1u].y;
        }
        _1433 = frontier_phi_15_37_ladder_2;
        _1435 = frontier_phi_15_37_ladder_1;
        _1437 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1421 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_538, _539, _540), _1351);
        _1433 = _1421.x * cbModelParam._m0[1u].y;
        _1435 = _1421.y * cbModelParam._m0[1u].y;
        _1437 = _1421.z * cbModelParam._m0[1u].y;
    }
    float _1441 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _444);
    float _1442 = isnan(_1441) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1441 : min(cbModelParam._m0[25u].w, _1441));
    float _1535;
    float _1537;
    float _1539;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1499 = fma(_602, cbModelParam._m0[21u].z, fma(_598, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _594)) + cbModelParam._m0[21u].w;
        float _1503 = fma(_602, cbModelParam._m0[22u].z, fma(_598, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _594)) + cbModelParam._m0[22u].w;
        float _1507 = fma(_602, cbModelParam._m0[23u].z, fma(_598, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _594)) + cbModelParam._m0[23u].w;
        float _1510 = fma(_540, cbModelParam._m0[21u].z, fma(_539, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _538));
        float _1513 = fma(_540, cbModelParam._m0[22u].z, fma(_539, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _538));
        float _1516 = fma(_540, cbModelParam._m0[23u].z, fma(_539, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _538));
        float _1658;
        if (_1510 > 0.0)
        {
            _1658 = abs((1.0 - _1499) / _1510);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1499 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1658 = frontier_phi_27_23_ladder;
        }
        float _1934;
        if (_1513 > 0.0)
        {
            _1934 = abs((1.0 - _1503) / _1513);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1503 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1934 = frontier_phi_39_34_ladder;
        }
        float _2147;
        if (_1516 > 0.0)
        {
            _2147 = abs((1.0 - _1507) / _1516);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1507 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2147 = frontier_phi_48_45_ladder;
        }
        float _2149 = isnan(_1934) ? _1658 : (isnan(_1658) ? _1934 : min(_1658, _1934));
        float _2150 = isnan(_2147) ? _2149 : (isnan(_2149) ? _2147 : min(_2149, _2147));
        float _2154 = (_2150 * _1510) + _1499;
        float _2155 = (_2150 * _1513) + _1503;
        float _2156 = (_2150 * _1516) + _1507;
        float _2157 = _2150 * 9.9999997473787516355514526367188e-05;
        float _2158 = (-1.0) - _2157;
        float _2160 = _2157 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2156 > _2160) || ((_2156 < _2158) || ((_2155 > _2160) || ((_2155 < _2158) || ((_2154 < _2158) || (_2154 > _2160))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2354 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2156, cbModelParam._m0[17u].z, fma(_2155, cbModelParam._m0[17u].y, _2154 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2156, cbModelParam._m0[18u].z, fma(_2155, cbModelParam._m0[18u].y, _2154 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2156, cbModelParam._m0[19u].z, fma(_2155, cbModelParam._m0[19u].y, _2154 * cbModelParam._m0[19u].x))), _1442);
            frontier_phi_24_48_ladder = _2354.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2354.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2354.x * cbModelParam._m0[1u].z;
        }
        _1535 = frontier_phi_24_48_ladder_2;
        _1537 = frontier_phi_24_48_ladder_1;
        _1539 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1519 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_538, _539, _540), _1442);
        _1535 = _1519.x * cbModelParam._m0[1u].z;
        _1537 = _1519.y * cbModelParam._m0[1u].z;
        _1539 = _1519.z * cbModelParam._m0[1u].z;
    }
    float _1552 = (((_565 * _515) + _566) * _530) * ((cbModelParam._m0[1u].w * (_1535 - _1433)) + _1433);
    float _1554 = (((_565 * _517) + _566) * _530) * ((cbModelParam._m0[1u].w * (_1537 - _1435)) + _1435);
    float _1556 = (((_565 * _518) + _566) * _530) * ((cbModelParam._m0[1u].w * (_1539 - _1437)) + _1437);
    float _1559 = fma(_1556, cbSceneParam._m0[89u].z, fma(_1554, cbSceneParam._m0[89u].y, _1552 * cbSceneParam._m0[89u].x));
    float _1562 = fma(_1556, cbSceneParam._m0[90u].z, fma(_1554, cbSceneParam._m0[90u].y, _1552 * cbSceneParam._m0[90u].x));
    float _1565 = fma(_1556, cbSceneParam._m0[91u].z, fma(_1554, cbSceneParam._m0[91u].y, _1552 * cbSceneParam._m0[91u].x));
    uvec4 _1575 = floatBitsToUint(cbInstanceData._m0[_457 + 5u]);
    uint _1577 = _1575.x * 14u;
    uint _1578 = _1577 + 13u;
    float _1585 = _530 + (-1.0);
    float _1590 = (cbLight._m0[_1578].x * _1585) + 1.0;
    float _1591 = (cbLight._m0[_1578].y * _1585) + 1.0;
    float _1592 = (cbLight._m0[_1578].z * _1585) + 1.0;
    float _1593 = (cbLight._m0[_1578].w * _1585) + 1.0;
    uint _1594 = _1577 + 5u;
    float _1600 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
    uint _1604 = _1577 + 4u;
    float _1611 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
    uint _1615 = _1577 | 1u;
    float _1626 = dot(vec3(cbLight._m0[_1577].xyz), vec3(_310, _311, _312));
    float _1629 = dot(vec3(cbLight._m0[_1615].xyz), vec3(_310, _311, _312));
    float _3720 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
    float _3731 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
    float _1634 = (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * 0.3183098733425140380859375;
    float _1636 = (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * 0.3183098733425140380859375;
    float _1643 = ((cbLight._m0[_1594].x * _1600) * _1636) + ((cbLight._m0[_1604].x * _1611) * _1634);
    float _1644 = ((_1600 * cbLight._m0[_1594].y) * _1636) + ((_1611 * cbLight._m0[_1604].y) * _1634);
    float _1645 = ((_1600 * cbLight._m0[_1594].z) * _1636) + ((_1611 * cbLight._m0[_1604].z) * _1634);
    uvec4 _1650 = floatBitsToUint(cbLight._m0[_1577 + 12u]);
    bool _1652 = _1650.x == 0u;
    float _1663;
    float _1665;
    float _1667;
    if (_1652)
    {
        _1663 = _1643;
        _1665 = _1644;
        _1667 = _1645;
    }
    else
    {
        uint _1671 = _1577 + 6u;
        float _1687 = (dot(vec3(cbLight._m0[_1577 + 2u].xyz), vec3(_310, _311, _312)) * 0.5) + 0.5;
        float _1688 = _1687 * _1687;
        float _3742 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1690 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
        _1663 = (((cbLight._m0[_1671].x * 0.3183098733425140380859375) * _1689) * _1690) + _1643;
        _1665 = (((cbLight._m0[_1671].y * 0.3183098733425140380859375) * _1689) * _1690) + _1644;
        _1667 = (((cbLight._m0[_1671].z * 0.3183098733425140380859375) * _1689) * _1690) + _1645;
    }
    bool _1670 = _1650.y == 0u;
    float _1708;
    float _1710;
    float _1712;
    if (_1670)
    {
        _1708 = _1663;
        _1710 = _1665;
        _1712 = _1667;
    }
    else
    {
        uint _1878 = _1577 + 7u;
        float _1894 = (dot(vec3(cbLight._m0[_1577 + 3u].xyz), vec3(_310, _311, _312)) * 0.5) + 0.5;
        float _1895 = _1894 * _1894;
        float _3758 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1897 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
        _1708 = (((cbLight._m0[_1878].x * 0.3183098733425140380859375) * _1896) * _1897) + _1663;
        _1710 = (((cbLight._m0[_1878].y * 0.3183098733425140380859375) * _1896) * _1897) + _1665;
        _1712 = (((cbLight._m0[_1878].z * 0.3183098733425140380859375) * _1896) * _1897) + _1667;
    }
    uint _1715 = _1577 + 8u;
    float _1728 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1577].w)) * _444) * 0.949999988079071044921875);
    float _1729 = _1728 * _1728;
    float _1730 = cbLight._m0[_1577].x + _391;
    float _1731 = cbLight._m0[_1577].y + _392;
    float _1732 = cbLight._m0[_1577].z + _393;
    float _1736 = inversesqrt(dot(vec3(_1730, _1731, _1732), vec3(_1730, _1731, _1732)));
    float _1737 = _1736 * _1730;
    float _1738 = _1736 * _1731;
    float _1739 = _1736 * _1732;
    float _1740 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1577].xyz));
    float _3774 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1743 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _3785 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _1744 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _1745 = dot(vec3(_310, _311, _312), vec3(_1737, _1738, _1739));
    float _3796 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1748 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _1749 = dot(vec3(cbLight._m0[_1577].xyz), vec3(_1737, _1738, _1739));
    float _3807 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1753 = _1729 * _1729;
    float _1757 = ((_1748 * _1748) * (_1753 + (-1.0))) + 1.0;
    float _1765 = exp2(log2(1.0 - (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) * 5.0);
    float _1766 = 0.959999978542327880859375 - _512;
    float _1768 = 0.959999978542327880859375 - _513;
    float _1769 = 0.959999978542327880859375 - _514;
    float _1776 = 1.0 - _1729;
    float _1787 = (0.5 / (((_1744 * ((_1743 * _1776) + _1729)) + 9.9999999392252902907785028219223e-09) + (((_1744 * _1776) + _1729) * _1743))) * _1743;
    float _3818 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1789 = (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1753 / ((_1757 * _1757) * 3.141590118408203125));
    uint _1800 = _1577 + 9u;
    float _1811 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1615].w)) * _444) * 0.949999988079071044921875);
    float _1812 = _1811 * _1811;
    float _1813 = cbLight._m0[_1615].x + _391;
    float _1814 = cbLight._m0[_1615].y + _392;
    float _1815 = cbLight._m0[_1615].z + _393;
    float _1819 = inversesqrt(dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815)));
    float _1820 = _1819 * _1813;
    float _1821 = _1819 * _1814;
    float _1822 = _1819 * _1815;
    float _1823 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1615].xyz));
    float _3829 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1826 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _1827 = dot(vec3(_310, _311, _312), vec3(_1820, _1821, _1822));
    float _3840 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1830 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _1831 = dot(vec3(cbLight._m0[_1615].xyz), vec3(_1820, _1821, _1822));
    float _3851 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1835 = _1812 * _1812;
    float _1839 = ((_1830 * _1830) * (_1835 + (-1.0))) + 1.0;
    float _1846 = exp2(log2(1.0 - (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * 5.0);
    float _1853 = 1.0 - _1812;
    float _1863 = (0.5 / (((_1744 * ((_1826 * _1853) + _1812)) + 9.9999999392252902907785028219223e-09) + (((_1744 * _1853) + _1812) * _1826))) * _1826;
    float _3862 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1865 = (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1835 / ((_1839 * _1839) * 3.141590118408203125));
    float _1875 = (((((_1846 * _1766) + _515) * cbLight._m0[_1800].x) * _1865) * _1600) + (((((_1765 * _1766) + _515) * cbLight._m0[_1715].x) * _1789) * _1611);
    float _1876 = (((((_1846 * _1768) + _517) * cbLight._m0[_1800].y) * _1865) * _1600) + (((((_1765 * _1768) + _517) * cbLight._m0[_1715].y) * _1789) * _1611);
    float _1877 = (((((_1846 * _1769) + _518) * cbLight._m0[_1800].z) * _1865) * _1600) + (((((_1765 * _1769) + _518) * cbLight._m0[_1715].z) * _1789) * _1611);
    float _1939;
    float _1941;
    float _1943;
    if (_1652)
    {
        _1939 = _1875;
        _1941 = _1876;
        _1943 = _1877;
    }
    else
    {
        uint _1945 = _1577 + 2u;
        uint _1949 = _1577 + 10u;
        float _1963 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1945].w)) * _444) * 0.949999988079071044921875);
        float _1964 = _1963 * _1963;
        float _1965 = cbLight._m0[_1945].x + _391;
        float _1966 = cbLight._m0[_1945].y + _392;
        float _1967 = cbLight._m0[_1945].z + _393;
        float _1971 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
        float _1972 = _1971 * _1965;
        float _1973 = _1971 * _1966;
        float _1974 = _1971 * _1967;
        float _1975 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1945].xyz));
        float _3873 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1978 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1979 = dot(vec3(_310, _311, _312), vec3(_1972, _1973, _1974));
        float _3884 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
        float _1982 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1983 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_1972, _1973, _1974));
        float _3895 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1987 = _1964 * _1964;
        float _1991 = ((_1982 * _1982) * (_1987 + (-1.0))) + 1.0;
        float _1998 = exp2(log2(1.0 - (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * 5.0);
        float _2005 = 1.0 - _1964;
        float _2015 = (0.5 / (((_1744 * ((_1978 * _2005) + _1964)) + 9.9999999392252902907785028219223e-09) + (((_1744 * _2005) + _1964) * _1978))) * _1978;
        float _3906 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2017 = (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1987 / ((_1991 * _1991) * 3.141590118408203125));
        float _2018 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
        _1939 = (((((_1998 * _1766) + _515) * cbLight._m0[_1949].x) * _2017) * _2018) + _1875;
        _1941 = (((((_1998 * _1768) + _517) * cbLight._m0[_1949].y) * _2017) * _2018) + _1876;
        _1943 = (((((_1998 * _1769) + _518) * cbLight._m0[_1949].z) * _2017) * _2018) + _1877;
    }
    float _2053;
    float _2055;
    float _2057;
    if (_1670)
    {
        _2053 = _1939;
        _2055 = _1941;
        _2057 = _1943;
    }
    else
    {
        uint _2064 = _1577 + 3u;
        uint _2068 = _1577 + 11u;
        float _2082 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2064].w)) * _444) * 0.949999988079071044921875);
        float _2083 = _2082 * _2082;
        float _2084 = cbLight._m0[_2064].x + _391;
        float _2085 = cbLight._m0[_2064].y + _392;
        float _2086 = cbLight._m0[_2064].z + _393;
        float _2090 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
        float _2091 = _2090 * _2084;
        float _2092 = _2090 * _2085;
        float _2093 = _2090 * _2086;
        float _2094 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_2064].xyz));
        float _3922 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2097 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _2098 = dot(vec3(_310, _311, _312), vec3(_2091, _2092, _2093));
        float _3933 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2101 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _2102 = dot(vec3(cbLight._m0[_2064].xyz), vec3(_2091, _2092, _2093));
        float _3944 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2106 = _2083 * _2083;
        float _2110 = ((_2101 * _2101) * (_2106 + (-1.0))) + 1.0;
        float _2117 = exp2(log2(1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * 5.0);
        float _2124 = 1.0 - _2083;
        float _2134 = (0.5 / (((_1744 * ((_2097 * _2124) + _2083)) + 9.9999999392252902907785028219223e-09) + (((_1744 * _2124) + _2083) * _2097))) * _2097;
        float _3955 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2136 = (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_2106 / ((_2110 * _2110) * 3.141590118408203125));
        float _2137 = isnan(1.0) ? _1593 : (isnan(_1593) ? 1.0 : min(_1593, 1.0));
        _2053 = (((((_2117 * _1766) + _515) * cbLight._m0[_2068].x) * _2136) * _2137) + _1939;
        _2055 = (((((_2117 * _1768) + _517) * cbLight._m0[_2068].y) * _2136) * _2137) + _1941;
        _2057 = (((((_2117 * _1769) + _518) * cbLight._m0[_2068].z) * _2136) * _2137) + _1943;
    }
    float _2271;
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    if (_1575.y == 0u)
    {
        float _2212 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2213 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2212;
        float _2214 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2212;
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2212;
        uvec4 _2227 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2228 = _2227.x;
        uint _2239 = uint((float(_2227.y) * floor(float(uint(cbSceneParam._m0[85u].y * _400) / _2228))) + floor(float(uint(cbSceneParam._m0[85u].x * _399) / _2228)));
        float _2249 = (log2(_2215 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2250 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        uint _2253 = uint(isnan(14.0) ? _2250 : (isnan(_2250) ? 14.0 : min(_2250, 14.0)));
        uvec4 _2258 = texelFetch(g_lightClusterGridBuffer, int(((_2253 << 2u) + (_2239 << 6u)) >> 2u));
        uint _2259 = _2258.x;
        uint _2260 = _2227.z;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        if (((((1u << ((_2260 >> 4u) & 15u)) + 4294967295u) & _2259) == 0u) || ((_2260 & 240u) == 0u))
        {
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
        }
        else
        {
            float _2360;
            float _2362;
            float _2364;
            float _2366;
            float _2368;
            float _2370;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            float _2507 = 0.0;
            float _2508 = 0.0;
            uint _2509 = 0u;
            uint _2518;
            bool _2519;
            for (;;)
            {
                _2518 = texelFetch(g_lightClassification, int((((_2253 << 5u) + (_2239 << 9u)) + (_2509 << 2u)) >> 2u)).x;
                _2519 = _2518 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2519)
                {
                    frontier_phi_63_pred = _2508;
                    frontier_phi_63_pred_1 = _2507;
                    frontier_phi_63_pred_2 = _2506;
                    frontier_phi_63_pred_3 = _2505;
                    frontier_phi_63_pred_4 = _2504;
                    frontier_phi_63_pred_5 = _2503;
                }
                else
                {
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    uint _2633;
                    _2627 = _2503;
                    _2628 = _2504;
                    _2629 = _2505;
                    _2630 = _2506;
                    _2631 = _2507;
                    _2632 = _2508;
                    _2633 = _2518;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    float _2563;
                    float _2564;
                    for (;;)
                    {
                        uint _2637 = uint(findLSB(_2633)) + (_2509 << 5u);
                        uint _2634 = (_2633 + 4294967295u) & _2633;
                        uint _2639 = _2637 * 48u;
                        vec4 _2653 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2639)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2639 + 3u)).x));
                        uint _2659 = (_2637 * 48u) + 4u;
                        vec4 _2672 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2659)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 3u)).x));
                        uint _2678 = (_2637 * 48u) + 8u;
                        vec3 _2689 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2678)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 2u)).x));
                        float _2693 = _2653.x - _2213;
                        float _2694 = _2653.y - _2214;
                        float _2695 = _2653.z - _2215;
                        float _2696 = dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695));
                        float _2699 = inversesqrt(_2696);
                        float _2700 = _2699 * _2693;
                        float _2701 = _2699 * _2694;
                        float _2702 = _2699 * _2695;
                        float _2703 = dot(vec3(_425, _428, _431), vec3(_2700, _2701, _2702));
                        float _2708 = 1.0 - (_2696 * _2653.w);
                        float _3981 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
                        float _2709 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
                        float _2710 = sqrt(_2696) * _2672.w;
                        float _2713 = 1.39999997615814208984375 / (_2710 + 1.39999997615814208984375);
                        float _2714 = _2713 * _2713;
                        float _2717 = ((1.0 - _2714) * _2703) + _2714;
                        float _2720 = _2710 * _2710;
                        float _2724 = ((isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0))) * _2709) / ((_2720 * 0.699999988079071044921875) + 1.0);
                        float _2728 = (-0.0) - _2213;
                        float _2729 = (-0.0) - _2214;
                        float _2730 = (-0.0) - _2215;
                        float _2734 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
                        float _2735 = _2734 * _2728;
                        float _2736 = _2734 * _2729;
                        float _2737 = _2734 * _2730;
                        float _2745 = exp2(log2(1.0 / ((_2720 * 3.5) + 5.0)) * 0.25);
                        float _2746 = 1.0 - _546;
                        float _2753 = sqrt(1.0 - ((1.0 - (_2746 * _2746)) * (1.0 - (_2745 * _2745))));
                        float _2754 = _2753 * _2753;
                        float _2755 = _2754 * _2754;
                        float _2756 = _2735 + _2700;
                        float _2757 = _2736 + _2701;
                        float _2758 = _2737 + _2702;
                        float _2762 = inversesqrt(dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758)));
                        float _2766 = dot(vec3(_425, _428, _431), vec3(_2735, _2736, _2737));
                        float _3997 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
                        float _2769 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
                        float _2770 = dot(vec3(_425, _428, _431), vec3(_2762 * _2756, _2762 * _2757, _2762 * _2758));
                        float _4008 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
                        float _2773 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                        float _2777 = ((_2773 * _2773) * (_2755 + (-1.0))) + 1.0;
                        float _2778 = _2713 * _2754;
                        float _2779 = _2778 * _2778;
                        float _2782 = ((1.0 - _2779) * _2703) + _2779;
                        float _4019 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2783 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
                        float _2784 = 1.0 - _2754;
                        float _2794 = (0.5 / (((_2783 * ((_2769 * _2784) + _2754)) + 9.9999999392252902907785028219223e-09) + (((_2783 * _2784) + _2754) * _2769))) * _2783;
                        float _4030 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                        float _2805 = (((_2755 * 3.1415927410125732421875) * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) / ((_2777 * _2777) * ((_2720 * 2.1991131305694580078125) + 3.141590118408203125))) * _2709;
                        _2562 = (_2724 * _2672.x) + _2630;
                        _2563 = (_2724 * _2672.y) + _2631;
                        _2564 = (_2724 * _2672.z) + _2632;
                        _2559 = (_2805 * _2689.x) + _2627;
                        _2560 = (_2805 * _2689.y) + _2628;
                        _2561 = (_2805 * _2689.z) + _2629;
                        if (_2634 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2627 = _2559;
                            _2628 = _2560;
                            _2629 = _2561;
                            _2630 = _2562;
                            _2631 = _2563;
                            _2632 = _2564;
                            _2633 = _2634;
                        }
                    }
                    frontier_phi_63_pred = _2564;
                    frontier_phi_63_pred_1 = _2563;
                    frontier_phi_63_pred_2 = _2562;
                    frontier_phi_63_pred_3 = _2561;
                    frontier_phi_63_pred_4 = _2560;
                    frontier_phi_63_pred_5 = _2559;
                }
                _2370 = frontier_phi_63_pred;
                _2368 = frontier_phi_63_pred_1;
                _2366 = frontier_phi_63_pred_2;
                _2364 = frontier_phi_63_pred_3;
                _2362 = frontier_phi_63_pred_4;
                _2360 = frontier_phi_63_pred_5;
                uint _2510 = _2509 + 1u;
                if (_2510 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2503 = _2360;
                    _2504 = _2362;
                    _2505 = _2364;
                    _2506 = _2366;
                    _2507 = _2368;
                    _2508 = _2370;
                    _2509 = _2510;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
        }
        uvec4 _2373 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2374 = _2373.z;
        uint _2376 = (_2374 >> 8u) & 15u;
        float _2471;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        if (((4294967295u << _2376) & _2259) == 0u)
        {
            _2471 = _2359;
            _2473 = _2361;
            _2475 = _2363;
            _2477 = _2365;
            _2479 = _2367;
            _2481 = _2369;
        }
        else
        {
            float _2496 = inversesqrt(dot(vec3(_2213, _2214, _2215), vec3(_2213, _2214, _2215)));
            float _2497 = _2496 * _2213;
            float _2498 = _2496 * _2214;
            float _2499 = _2496 * _2215;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2376 < ((_2374 >> 12u) & 15u))
            {
                float _2472;
                float _2474;
                float _2476;
                float _2478;
                float _2480;
                float _2482;
                float _2610 = _2359;
                float _2611 = _2361;
                float _2612 = _2363;
                float _2613 = _2365;
                float _2614 = _2367;
                float _2615 = _2369;
                uint _2616 = _2376;
                uint _2625;
                bool _2626;
                for (;;)
                {
                    _2625 = texelFetch(g_lightClassification, int((((_2253 << 5u) + (_2239 << 9u)) + (_2616 << 2u)) >> 2u)).x;
                    _2626 = _2625 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2626)
                    {
                        frontier_phi_69_pred = _2615;
                        frontier_phi_69_pred_1 = _2614;
                        frontier_phi_69_pred_2 = _2613;
                        frontier_phi_69_pred_3 = _2612;
                        frontier_phi_69_pred_4 = _2611;
                        frontier_phi_69_pred_5 = _2610;
                    }
                    else
                    {
                        float _2810;
                        float _2811;
                        float _2812;
                        float _2813;
                        float _2814;
                        float _2815;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _2823 = _2610;
                        float _2824 = _2611;
                        float _2825 = _2612;
                        float _2826 = _2613;
                        float _2827 = _2614;
                        float _2828 = _2615;
                        uint _2829 = _2625;
                        uint _2830;
                        vec4 _2855;
                        float _2856;
                        vec4 _2871;
                        vec3 _2883;
                        vec4 _2899;
                        vec4 _2915;
                        float _2962;
                        bool _2963;
                        for (;;)
                        {
                            uint _2840 = ((_2616 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2829));
                            _2830 = (_2829 + 4294967295u) & _2829;
                            uint _2842 = _2840 * 40u;
                            _2855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 3u)).x));
                            _2856 = _2855.w;
                            uint _2858 = (_2840 * 40u) + 4u;
                            _2871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 3u)).x));
                            uint _2873 = (_2840 * 40u) + 8u;
                            _2883 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 2u)).x));
                            uint _2886 = (_2840 * 40u) + 16u;
                            _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            uint _2902 = (_2840 * 40u) + 20u;
                            _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            uint _2918 = (_2840 * 40u) + 24u;
                            vec4 _2931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 3u)).x));
                            uint _2937 = (_2840 * 40u) + 28u;
                            vec4 _2950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 3u)).x));
                            _2962 = fma(_2215, _2950.z, fma(_2214, _2950.y, _2950.x * _2213)) + _2950.w;
                            _2963 = !((fma(_2215, _2931.z, fma(_2214, _2931.y, _2931.x * _2213)) + _2931.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2963)
                            {
                                float _2990 = _2855.x - _2213;
                                float _2991 = _2855.y - _2214;
                                float _2992 = _2855.z - _2215;
                                float _2993 = dot(vec3(_2990, _2991, _2992), vec3(_2990, _2991, _2992));
                                float _2996 = inversesqrt(_2993);
                                float _2997 = _2996 * _2990;
                                float _2998 = _2996 * _2991;
                                float _2999 = _2996 * _2992;
                                float _3003 = 1.0 - (_2993 / (_2856 * _2856));
                                float _4041 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                                float _3004 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
                                float _3008 = sqrt(_2993) * _2871.w;
                                float _3010 = 1.39999997615814208984375 / (_3008 + 1.39999997615814208984375);
                                float _3011 = _3010 * _3010;
                                float _3014 = ((1.0 - _3011) * dot(vec3(_2997, _2998, _2999), vec3(_425, _428, _431))) + _3011;
                                float _3017 = _3008 * _3008;
                                float _3021 = (fma(_2215, _2899.z, fma(_2214, _2899.y, _2899.x * _2213)) + _2899.w) / _2962;
                                float _3022 = (fma(_2215, _2915.z, fma(_2214, _2915.y, _2915.x * _2213)) + _2915.w) / _2962;
                                float _3026 = 1.0 - dot(vec2(_3021, _3022), vec2(_3021, _3022));
                                float _4057 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                                float _3027 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                                float _3028 = _3027 * (((isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0))) * _3004) / ((_3017 * 0.699999988079071044921875) + 1.0));
                                float _3040 = exp2(log2(1.0 / ((_3017 * 3.5) + 5.0)) * 0.25);
                                float _3041 = 1.0 - _546;
                                float _3048 = sqrt(1.0 - ((1.0 - (_3041 * _3041)) * (1.0 - (_3040 * _3040))));
                                float _3049 = _3048 * _3048;
                                float _3050 = _3049 * _3049;
                                float _3051 = _2997 - _2497;
                                float _3052 = _2998 - _2498;
                                float _3053 = _2999 - _2499;
                                float _3057 = inversesqrt(dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053)));
                                float _3061 = dot(vec3(_425, _428, _431), vec3((-0.0) - _2497, (-0.0) - _2498, (-0.0) - _2499));
                                float _4068 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3064 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
                                float _3065 = dot(vec3(_425, _428, _431), vec3(_3057 * _3051, _3057 * _3052, _3057 * _3053));
                                float _4079 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                                float _3068 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
                                float _3072 = ((_3068 * _3068) * (_3050 + (-1.0))) + 1.0;
                                float _3073 = _3010 * _3049;
                                float _3074 = _3073 * _3073;
                                float _3080 = ((1.0 - _3074) * dot(vec3(_425, _428, _431), vec3(_2997, _2998, _2999))) + _3074;
                                float _4090 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                                float _3081 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
                                float _3082 = 1.0 - _3049;
                                float _3092 = (0.5 / (((_3081 * ((_3064 * _3082) + _3049)) + 9.9999999392252902907785028219223e-09) + (((_3081 * _3082) + _3049) * _3064))) * _3081;
                                float _4101 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3102 = (_3027 * _3004) * (((_3050 * 3.1415927410125732421875) * (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) / ((_3072 * _3072) * ((_3017 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3028 * _2871.z;
                                frontier_phi_75_pred_1 = _3028 * _2871.y;
                                frontier_phi_75_pred_2 = _3028 * _2871.x;
                                frontier_phi_75_pred_3 = _3102 * _2883.z;
                                frontier_phi_75_pred_4 = _3102 * _2883.y;
                                frontier_phi_75_pred_5 = _3102 * _2883.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3111 = frontier_phi_75_pred;
                            _3110 = frontier_phi_75_pred_1;
                            _3109 = frontier_phi_75_pred_2;
                            _3108 = frontier_phi_75_pred_3;
                            _3107 = frontier_phi_75_pred_4;
                            _3106 = frontier_phi_75_pred_5;
                            _2813 = _3109 + _2826;
                            _2814 = _3110 + _2827;
                            _2815 = _3111 + _2828;
                            _2810 = _3106 + _2823;
                            _2811 = _3107 + _2824;
                            _2812 = _3108 + _2825;
                            if (_2830 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2823 = _2810;
                                _2824 = _2811;
                                _2825 = _2812;
                                _2826 = _2813;
                                _2827 = _2814;
                                _2828 = _2815;
                                _2829 = _2830;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2815;
                        frontier_phi_69_pred_1 = _2814;
                        frontier_phi_69_pred_2 = _2813;
                        frontier_phi_69_pred_3 = _2812;
                        frontier_phi_69_pred_4 = _2811;
                        frontier_phi_69_pred_5 = _2810;
                    }
                    _2482 = frontier_phi_69_pred;
                    _2480 = frontier_phi_69_pred_1;
                    _2478 = frontier_phi_69_pred_2;
                    _2476 = frontier_phi_69_pred_3;
                    _2474 = frontier_phi_69_pred_4;
                    _2472 = frontier_phi_69_pred_5;
                    uint _2617 = _2616 + 1u;
                    if (_2617 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2610 = _2472;
                        _2611 = _2474;
                        _2612 = _2476;
                        _2613 = _2478;
                        _2614 = _2480;
                        _2615 = _2482;
                        _2616 = _2617;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2482;
                frontier_phi_57_58_ladder_1 = _2480;
                frontier_phi_57_58_ladder_2 = _2478;
                frontier_phi_57_58_ladder_3 = _2476;
                frontier_phi_57_58_ladder_4 = _2474;
                frontier_phi_57_58_ladder_5 = _2472;
            }
            else
            {
                frontier_phi_57_58_ladder = _2369;
                frontier_phi_57_58_ladder_1 = _2367;
                frontier_phi_57_58_ladder_2 = _2365;
                frontier_phi_57_58_ladder_3 = _2363;
                frontier_phi_57_58_ladder_4 = _2361;
                frontier_phi_57_58_ladder_5 = _2359;
            }
            _2471 = frontier_phi_57_58_ladder_5;
            _2473 = frontier_phi_57_58_ladder_4;
            _2475 = frontier_phi_57_58_ladder_3;
            _2477 = frontier_phi_57_58_ladder_2;
            _2479 = frontier_phi_57_58_ladder_1;
            _2481 = frontier_phi_57_58_ladder;
        }
        float _2486 = isnan(1.0) ? _530 : (isnan(_530) ? 1.0 : min(_530, 1.0));
        _2271 = (_2486 * _2477) + _1708;
        _2273 = (_2486 * _2479) + _1710;
        _2275 = (_2486 * _2481) + _1712;
        _2277 = ((_2471 * _515) * _2486) + _2053;
        _2279 = ((_2473 * _517) * _2486) + _2055;
        _2281 = ((_2475 * _518) * _2486) + _2057;
    }
    else
    {
        _2271 = _1708;
        _2273 = _1710;
        _2275 = _1712;
        _2277 = _2053;
        _2279 = _2055;
        _2281 = _2057;
    }
    float _4117 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _4128 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _4139 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    uint _2301 = _457 + 6u;
    float _2309 = _399 / cbSceneParam._m0[86u].x;
    float _2310 = _400 / cbSceneParam._m0[86u].y;
    vec4 _2324 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2309, _2310, (log2((isnan(cbSceneParam._m0[77u].w) ? _333 : (isnan(_333) ? cbSceneParam._m0[77u].w : min(_333, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2326 = _2324.x;
    float _2327 = _2324.y;
    float _2328 = _2324.z;
    float _2329 = _2324.w;
    float _2421;
    float _2423;
    float _2425;
    float _2427;
    if (_333 > cbSceneParam._m0[78u].w)
    {
        float _2384 = isnan(_333) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _333 : min(cbSceneParam._m0[80u].w, _333));
        float _2385 = _2384 / _333;
        float _2396 = _2385 * _384;
        float _2397 = _385 * _2385;
        float _2398 = (-0.0) - _2397;
        float _2399 = _2385 * _386;
        float _2401 = (cbSceneParam._m0[77u].w * _2398) / _2384;
        float _2402 = _2401 + cbSceneParam._m0[79u].w;
        float _2403 = cbSceneParam._m0[79u].w - _2397;
        float _2409 = sqrt(((_2396 * _2396) + (_2397 * _2397)) + (_2399 * _2399));
        float _2412 = (1.0 - (cbSceneParam._m0[77u].w / _2384)) * _2409;
        float _2417 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2419 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2572;
        if (abs((_2398 - _2401) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2572 = ((((_2402 > 0.0) ? exp2(_2417 * _2402) : (2.0 - exp2(_2419 * _2402))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2412;
        }
        else
        {
            float _2532 = 1.0 / cbSceneParam._m0[80u].x;
            float _2533 = isnan(_2403) ? _2402 : (isnan(_2402) ? _2403 : max(_2402, _2403));
            float _2534 = isnan(_2403) ? _2402 : (isnan(_2402) ? _2403 : min(_2402, _2403));
            float _2543 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : min(_2533, 0.0));
            float _2544 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : min(_2534, 0.0));
            _2572 = ((abs(_2409 / _2398) * cbSceneParam._m0[80u].y) * ((((_2543 - _2544) * 2.0) - ((exp2(_2417 * (isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0)))) - exp2(_2417 * (isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0))))) * _2532)) - ((exp2(_2419 * _2543) - exp2(_2419 * _2544)) * _2532))) + (_2412 * cbSceneParam._m0[80u].z);
        }
        vec4 _2574 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2309, _2310, 1.0), 0.0);
        float _2583 = exp2((_2572 * (-1.44269502162933349609375)) * (1.0 - _2574.w));
        float _2584 = log2(_2583);
        float _2600 = log2(_2329);
        _2421 = (exp2(_2600 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2584 * cbSceneParam._m0[78u].x)) * _2574.x) / cbSceneParam._m0[78u].x)) + _2326;
        _2423 = (exp2(_2600 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2584 * cbSceneParam._m0[78u].y)) * _2574.y) / cbSceneParam._m0[78u].y)) + _2327;
        _2425 = (exp2(_2600 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2584 * cbSceneParam._m0[78u].z)) * _2574.z) / cbSceneParam._m0[78u].z)) + _2328;
        _2427 = _2583 * _2329;
    }
    else
    {
        _2421 = _2326;
        _2423 = _2327;
        _2425 = _2328;
        _2427 = _2329;
    }
    float _2439 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2440 = _2439 == 3.0;
    float _2441 = log2(_2427);
    float _2448 = exp2(_2441 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_2271 + ((isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))) * _530))) + ((_2277 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _1340)) * cbPerFrame._m0[3u].x));
    float _2449 = exp2(_2441 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_2273 + ((isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))) * _530))) + ((_2279 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _1340)) * cbPerFrame._m0[3u].x));
    float _2450 = exp2(_2441 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2275 + ((isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))) * _530))) + ((_2281 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1340)) * cbPerFrame._m0[3u].x));
    float _2459 = (_2439 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2459 * (_2440 ? _2448 : (_2448 + (cbSceneParam._m0[72u].w * _2421)));
    SV_Target.y = _2459 * (_2440 ? _2449 : (_2449 + (cbSceneParam._m0[72u].w * _2423)));
    SV_Target.z = _2459 * (_2440 ? _2450 : (_2450 + (cbSceneParam._m0[72u].w * _2425)));
    SV_Target.w = cbInstanceData._m0[_2301].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2301].w;
}


