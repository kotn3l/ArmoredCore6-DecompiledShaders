#version 460

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec4 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec4 TEXCOORD_1_1;
layout(location = 5) out float TEXCOORD_5;
layout(location = 6) out vec4 TEXCOORD_6;
layout(location = 5, component = 1) out vec2 TEXCOORD_10;

void main()
{
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_1_1.x = 0.0;
    TEXCOORD_1_1.y = 0.0;
    TEXCOORD_1_1.z = 0.0;
    TEXCOORD_1_1.w = 0.0;
    TEXCOORD_5 = 0.0;
    TEXCOORD_6.x = 0.0;
    TEXCOORD_6.y = 0.0;
    TEXCOORD_6.z = 0.0;
    TEXCOORD_6.w = 0.0;
    TEXCOORD_10.x = 0.0;
    TEXCOORD_10.y = 0.0;
    float _198 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _200 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _201 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _210 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _211 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _212 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _222 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + (uint(gl_InstanceIndex) - uint(gl_BaseInstance));
    uvec4 _224 = texelFetch(g_InstanceIndexBuffer, int(_222));
    uint _225 = _224.x;
    precise float _226 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _231 = isnan(_226) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _226 : max(0.001000000047497451305389404296875, _226));
    precise float _233 = BLENDWEIGHT.x / _231;
    precise float _234 = BLENDWEIGHT.y / _231;
    precise float _235 = BLENDWEIGHT.z / _231;
    precise float _236 = BLENDWEIGHT.w / _231;
    uvec4 _243 = floatBitsToUint(cbInstanceData._m0[(_225 * 13u) + 4u]);
    uint _244 = _243.x;
    uint _246 = (_244 + uint(float(BLENDINDICES.x))) * 3u;
    uint _253 = _246 + 1u;
    uint _260 = _246 + 2u;
    precise float _267 = _233 * cbObjMatrix._m0[_246].x;
    precise float _268 = _233 * cbObjMatrix._m0[_253].x;
    precise float _269 = _233 * cbObjMatrix._m0[_260].x;
    precise float _270 = _233 * cbObjMatrix._m0[_246].y;
    precise float _271 = _233 * cbObjMatrix._m0[_253].y;
    precise float _272 = _233 * cbObjMatrix._m0[_260].y;
    precise float _273 = _233 * cbObjMatrix._m0[_246].z;
    precise float _274 = _233 * cbObjMatrix._m0[_253].z;
    precise float _275 = _233 * cbObjMatrix._m0[_260].z;
    precise float _276 = _233 * cbObjMatrix._m0[_246].w;
    precise float _277 = _233 * cbObjMatrix._m0[_253].w;
    precise float _278 = _233 * cbObjMatrix._m0[_260].w;
    uint _281 = (_244 + uint(float(BLENDINDICES.y))) * 3u;
    uint _288 = _281 + 1u;
    uint _295 = _281 + 2u;
    precise float _302 = _234 * cbObjMatrix._m0[_281].x;
    precise float _303 = _234 * cbObjMatrix._m0[_288].x;
    precise float _304 = _234 * cbObjMatrix._m0[_295].x;
    precise float _305 = _234 * cbObjMatrix._m0[_281].y;
    precise float _306 = _234 * cbObjMatrix._m0[_288].y;
    precise float _307 = _234 * cbObjMatrix._m0[_295].y;
    precise float _308 = _234 * cbObjMatrix._m0[_281].z;
    precise float _309 = _234 * cbObjMatrix._m0[_288].z;
    precise float _310 = _234 * cbObjMatrix._m0[_295].z;
    precise float _311 = _234 * cbObjMatrix._m0[_281].w;
    precise float _312 = _234 * cbObjMatrix._m0[_288].w;
    precise float _313 = _234 * cbObjMatrix._m0[_295].w;
    precise float _314 = _267 + _302;
    precise float _315 = _268 + _303;
    precise float _316 = _269 + _304;
    precise float _317 = _270 + _305;
    precise float _318 = _271 + _306;
    precise float _319 = _272 + _307;
    precise float _320 = _273 + _308;
    precise float _321 = _274 + _309;
    precise float _322 = _275 + _310;
    precise float _323 = _276 + _311;
    precise float _324 = _277 + _312;
    precise float _325 = _278 + _313;
    uint _328 = (_244 + uint(float(BLENDINDICES.z))) * 3u;
    uint _335 = _328 + 1u;
    uint _342 = _328 + 2u;
    precise float _349 = _235 * cbObjMatrix._m0[_328].x;
    precise float _350 = _235 * cbObjMatrix._m0[_335].x;
    precise float _351 = _235 * cbObjMatrix._m0[_342].x;
    precise float _352 = _235 * cbObjMatrix._m0[_328].y;
    precise float _353 = _235 * cbObjMatrix._m0[_335].y;
    precise float _354 = _235 * cbObjMatrix._m0[_342].y;
    precise float _355 = _235 * cbObjMatrix._m0[_328].z;
    precise float _356 = _235 * cbObjMatrix._m0[_335].z;
    precise float _357 = _235 * cbObjMatrix._m0[_342].z;
    precise float _358 = _235 * cbObjMatrix._m0[_328].w;
    precise float _359 = _235 * cbObjMatrix._m0[_335].w;
    precise float _360 = _235 * cbObjMatrix._m0[_342].w;
    precise float _361 = _314 + _349;
    precise float _362 = _315 + _350;
    precise float _363 = _316 + _351;
    precise float _364 = _317 + _352;
    precise float _365 = _318 + _353;
    precise float _366 = _319 + _354;
    precise float _367 = _320 + _355;
    precise float _368 = _321 + _356;
    precise float _369 = _322 + _357;
    precise float _370 = _323 + _358;
    precise float _371 = _324 + _359;
    precise float _372 = _325 + _360;
    uint _375 = (_244 + uint(float(BLENDINDICES.w))) * 3u;
    uint _382 = _375 + 1u;
    uint _389 = _375 + 2u;
    precise float _396 = _236 * cbObjMatrix._m0[_375].x;
    precise float _397 = _236 * cbObjMatrix._m0[_382].x;
    precise float _398 = _236 * cbObjMatrix._m0[_389].x;
    precise float _399 = _236 * cbObjMatrix._m0[_375].y;
    precise float _400 = _236 * cbObjMatrix._m0[_382].y;
    precise float _401 = _236 * cbObjMatrix._m0[_389].y;
    precise float _402 = _236 * cbObjMatrix._m0[_375].z;
    precise float _403 = _236 * cbObjMatrix._m0[_382].z;
    precise float _404 = _236 * cbObjMatrix._m0[_389].z;
    precise float _405 = _236 * cbObjMatrix._m0[_375].w;
    precise float _406 = _236 * cbObjMatrix._m0[_382].w;
    precise float _407 = _236 * cbObjMatrix._m0[_389].w;
    precise float _408 = _361 + _396;
    precise float _409 = _362 + _397;
    precise float _410 = _363 + _398;
    precise float _411 = _364 + _399;
    precise float _412 = _365 + _400;
    precise float _413 = _366 + _401;
    precise float _414 = _367 + _402;
    precise float _415 = _368 + _403;
    precise float _416 = _369 + _404;
    precise float _417 = _370 + _405;
    precise float _418 = _371 + _406;
    precise float _419 = _372 + _407;
    precise float _420 = POSITION.x * _408;
    precise float _421 = POSITION.y * _411;
    precise float _422 = _421 + _420;
    precise float _423 = POSITION.z * _414;
    precise float _424 = _423 + _422;
    precise float _425 = 1.0 * _417;
    precise float _426 = _425 + _424;
    precise float _427 = POSITION.x * _409;
    precise float _428 = POSITION.y * _412;
    precise float _429 = _428 + _427;
    precise float _430 = POSITION.z * _415;
    precise float _431 = _430 + _429;
    precise float _432 = 1.0 * _418;
    precise float _433 = _432 + _431;
    precise float _434 = POSITION.x * _410;
    precise float _435 = POSITION.y * _413;
    precise float _436 = _435 + _434;
    precise float _437 = POSITION.z * _416;
    precise float _438 = _437 + _436;
    precise float _439 = 1.0 * _419;
    precise float _440 = _439 + _438;
    precise float _465 = _426 - cbSceneParam._m0[3u].x;
    precise float _466 = _433 - cbSceneParam._m0[3u].y;
    precise float _467 = _440 - cbSceneParam._m0[3u].z;
    precise float _495 = _465 * cbSceneParam._m0[24u].x;
    precise float _496 = _466 * cbSceneParam._m0[24u].y;
    precise float _497 = _496 + _495;
    precise float _498 = _467 * cbSceneParam._m0[24u].z;
    precise float _499 = _498 + _497;
    precise float _500 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _501 = _500 + _499;
    precise float _502 = _465 * cbSceneParam._m0[25u].x;
    precise float _503 = _466 * cbSceneParam._m0[25u].y;
    precise float _504 = _503 + _502;
    precise float _505 = _467 * cbSceneParam._m0[25u].z;
    precise float _506 = _505 + _504;
    precise float _507 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _508 = _507 + _506;
    precise float _509 = _465 * cbSceneParam._m0[26u].x;
    precise float _510 = _466 * cbSceneParam._m0[26u].y;
    precise float _511 = _510 + _509;
    precise float _512 = _467 * cbSceneParam._m0[26u].z;
    precise float _513 = _512 + _511;
    precise float _514 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _515 = _514 + _513;
    precise float _516 = _465 * cbSceneParam._m0[27u].x;
    precise float _517 = _466 * cbSceneParam._m0[27u].y;
    precise float _518 = _517 + _516;
    precise float _519 = _467 * cbSceneParam._m0[27u].z;
    precise float _520 = _519 + _518;
    precise float _521 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _522 = _521 + _520;
    gl_Position.x = _501;
    gl_Position.y = _508;
    gl_Position.z = _515;
    gl_Position.w = _522;
    POSITION_1.x = _501;
    POSITION_1.y = _508;
    POSITION_1.z = _515;
    POSITION_1.w = _522;
    NORMAL_1.x = fma(_201, _414, fma(_200, _411, _408 * _198));
    NORMAL_1.y = fma(_201, _415, fma(_200, _412, _409 * _198));
    NORMAL_1.z = fma(_201, _416, fma(_200, _413, _410 * _198));
    NORMAL_1.w = float(_225);
    TANGENT_1.x = fma(_212, _414, fma(_211, _411, _408 * _210));
    TANGENT_1.y = fma(_212, _415, fma(_211, _412, _409 * _210));
    TANGENT_1.z = fma(_212, _416, fma(_211, _413, _410 * _210));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_1_1.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1_1.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_1_1.z = ((float(int(uint(TEXCOORD.z))) * 0.00048828125) * cbTexScroll._m0[1u].x) + cbTexScroll._m0[1u].z;
    TEXCOORD_1_1.w = ((float(int(uint(TEXCOORD.w))) * 0.00048828125) * cbTexScroll._m0[1u].y) + cbTexScroll._m0[1u].w;
    TEXCOORD_5 = COLOR_1.x;
    TEXCOORD_6.x = TEXCOORD_1.x;
    TEXCOORD_6.y = TEXCOORD_1.y;
    TEXCOORD_6.z = TEXCOORD_1.z;
    TEXCOORD_6.w = COLOR_1.w;
    TEXCOORD_10.x = _515;
    TEXCOORD_10.y = _522;
}


