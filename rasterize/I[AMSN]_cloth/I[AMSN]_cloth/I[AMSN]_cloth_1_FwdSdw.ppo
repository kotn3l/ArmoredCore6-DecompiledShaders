#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D I_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D I_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _895;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    vec4 _293 = texture(sampler2D(I_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _299 = _293.w;
    float _300 = _293.x * cbMtdParam._m0[9u].x;
    float _301 = _293.y * cbMtdParam._m0[9u].y;
    float _302 = _293.z * cbMtdParam._m0[9u].z;
    vec4 _317 = texture(sampler2D(I_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _321 = _317.z;
    float _325 = (_317.x * 2.0) + (-1.0);
    float _327 = (_317.y * 2.0) + (-1.0);
    float _328 = dot(vec2(_325, _327), vec2(_325, _327));
    float _3543 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _334 = sqrt(1.0 - (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))));
    float _352 = cbMtdParam._m0[12u].x - cbMtdParam._m0[12u].w;
    float _354 = (sqrt(((_273 * _273) + (_274 * _274)) + (_275 * _275)) - cbMtdParam._m0[12u].w) / (isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0)));
    float _3559 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _356 = 1.0 - (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)));
    float _364 = abs((fract(cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3570 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _365 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _375 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _382 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _383 = _382 * _273;
    float _384 = _382 * _274;
    float _385 = _382 * _275;
    float _389 = dot(vec4(_383, _384, _385, 0.0), vec4(_375 * _217, _375 * _218, _375 * _219, 0.0)) - (((_365 * _365) * cbMtdParam._m0[11u].w) * (3.0 - (_365 * 2.0)));
    float _3581 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _396 = exp2(log2(1.0 - (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    float _399 = fma(_334, _217, fma(_327, _209 * TANGENT.x, (_195 * _187) * _325));
    float _402 = fma(_334, _218, fma(_327, _209 * TANGENT.y, (_195 * _188) * _325));
    float _405 = fma(_334, _219, fma(_327, _209 * TANGENT.z, (_195 * _189) * _325));
    float _409 = inversesqrt(dot(vec3(_399, _402, _405), vec3(_399, _402, _405)));
    float _410 = _409 * _399;
    float _411 = _409 * _402;
    float _412 = _409 * _405;
    float _3597 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _413 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _3608 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _414 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _3619 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3630 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3641 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3652 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _418 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _434 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _440 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _441 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _462 = fma(_412, cbSceneParam._m0[5u].z, fma(_411, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _410));
    float _465 = fma(_412, cbSceneParam._m0[6u].z, fma(_411, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _410));
    float _468 = fma(_412, cbSceneParam._m0[7u].z, fma(_411, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _410));
    uint _481 = uint(roundEven(NORMAL.w)) * 13u;
    uint _482 = _481 + 9u;
    uint _483 = _482 + uint(cbMatDynParam._m0[0u].w);
    float _489 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) * cbInstanceData._m0[_483].x;
    float _490 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) * cbInstanceData._m0[_483].y;
    float _491 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) * cbInstanceData._m0[_483].z;
    float _3663 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _492 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _3674 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _493 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _3685 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _494 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _495 = 1.0 - _418;
    float _496 = _492 * _495;
    float _497 = _493 * _495;
    float _498 = _494 * _495;
    float _503 = (_492 + (-0.039999999105930328369140625)) * _418;
    float _504 = (_493 + (-0.039999999105930328369140625)) * _418;
    float _505 = (_494 + (-0.039999999105930328369140625)) * _418;
    float _506 = _503 + 0.039999999105930328369140625;
    float _508 = _504 + 0.039999999105930328369140625;
    float _509 = _505 + 0.039999999105930328369140625;
    vec4 _518 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _440, cbSceneParam._m0[86u].y * _441));
    float _521 = _518.x * TEXCOORD_1.w;
    float _522 = dot(vec3(_410, _411, _412), vec3(_383, _384, _385));
    float _525 = _522 * 2.0;
    float _529 = (_525 * _410) - _383;
    float _530 = (_525 * _411) - _384;
    float _531 = (_525 * _412) - _385;
    float _535 = abs(dot(vec3(_383, _384, _385), vec3(_410, _411, _412)));
    float _3696 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _537 = sqrt(_414);
    float _549 = exp2((_537 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_537 * 3.0));
    float _555 = (1.0 - _549) * ((_537 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _556 = _549 * _537;
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _894;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _619 = fma(_592, cbModelParam._m0[26u].z, fma(_588, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _584));
        float _623 = fma(_592, cbModelParam._m0[27u].z, fma(_588, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _584));
        float _627 = fma(_592, cbModelParam._m0[28u].z, fma(_588, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _584));
        float _652 = _584 + _410;
        float _653 = _588 + _411;
        float _654 = _592 + _412;
        float _664 = fma(_654, cbModelParam._m0[26u].z, fma(_653, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _652)) - _619;
        float _665 = fma(_654, cbModelParam._m0[27u].z, fma(_653, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _652)) - _623;
        float _666 = fma(_654, cbModelParam._m0[28u].z, fma(_653, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _652)) - _627;
        float _670 = inversesqrt(dot(vec3(_664, _665, _666), vec3(_664, _665, _666)));
        float _683 = ((_670 * _664) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_619 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _684 = ((_670 * _665) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_623 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _685 = ((_670 * _666) / cbModelParam._m0[34u].z) + ((((((_627 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_683, _684, _685), 0.0);
        float _722 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_688.x + (-0.5));
        float _724 = _722 * (_688.y + (-0.5));
        float _725 = _722 * (_688.z + (-0.5));
        float _732 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _733 = _732 * (_695.x + (-0.5));
        float _734 = _732 * (_695.y + (-0.5));
        float _735 = _732 * (_695.z + (-0.5));
        float _742 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _743 = _742 * (_702.x + (-0.5));
        float _744 = _742 * (_702.y + (-0.5));
        float _745 = _742 * (_702.z + (-0.5));
        float _752 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _753 = _752 * (_709.x + (-0.5));
        float _754 = _752 * (_709.y + (-0.5));
        float _755 = _752 * (_709.z + (-0.5));
        float _756 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _757 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _758 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _759 = _723 * 0.5;
        float _760 = _733 * 0.5;
        float _761 = _743 * 0.5;
        float _762 = dot(vec3(_759, _760, _761), vec3(_759, _760, _761));
        float _767 = (_762 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_762);
        float _776 = (dot(vec3(_410, _411, _412), vec3(_767 * _759, _767 * _760, _767 * _761)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _786 = sqrt(((_760 * _760) + (_759 * _759)) + (_761 * _761)) / (_756 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _788 = _787 * 2.0;
        float _792 = (1.0 - _787) / (_787 + 1.0);
        float _3744 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _802 = ((((1.0 - _793) * (_788 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_788 + 1.0))) + _793) * _756;
        float _803 = _724 * 0.5;
        float _804 = _734 * 0.5;
        float _805 = _744 * 0.5;
        float _806 = dot(vec3(_803, _804, _805), vec3(_803, _804, _805));
        float _811 = (_806 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_806);
        float _819 = (dot(vec3(_410, _411, _412), vec3(_811 * _803, _811 * _804, _811 * _805)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _828 = sqrt(((_804 * _804) + (_803 * _803)) + (_805 * _805)) / (_757 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _830 = _829 * 2.0;
        float _834 = (1.0 - _829) / (_829 + 1.0);
        float _3777 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _844 = ((((1.0 - _835) * (_830 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_830 + 1.0))) + _835) * _757;
        float _845 = _725 * 0.5;
        float _846 = _735 * 0.5;
        float _847 = _745 * 0.5;
        float _848 = dot(vec3(_845, _846, _847), vec3(_845, _846, _847));
        float _853 = (_848 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_848);
        float _861 = (dot(vec3(_410, _411, _412), vec3(_853 * _845, _853 * _846, _853 * _847)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _870 = sqrt(((_846 * _846) + (_845 * _845)) + (_847 * _847)) / (_758 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _872 = _871 * 2.0;
        float _876 = (1.0 - _871) / (_871 + 1.0);
        float _3810 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _886 = ((((1.0 - _877) * (_872 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_872 + 1.0))) + _877) * _758;
        _894 = _725;
        _896 = _724;
        _897 = _723;
        _898 = _735;
        _899 = _734;
        _900 = _733;
        _901 = _745;
        _902 = _744;
        _903 = _743;
        _904 = _758;
        _905 = _757;
        _906 = _756;
        _907 = cbModelParam._m0[36u].z * (isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0)));
        _908 = cbModelParam._m0[36u].z * (isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0)));
        _909 = cbModelParam._m0[36u].z * (isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0)));
    }
    else
    {
        _894 = _895;
        _896 = _895;
        _897 = _895;
        _898 = _895;
        _899 = _895;
        _900 = _895;
        _901 = _895;
        _902 = _895;
        _903 = _895;
        _904 = _895;
        _905 = _895;
        _906 = _895;
        _907 = 0.0;
        _908 = 0.0;
        _909 = 0.0;
    }
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _935 = fma(_592, cbModelParam._m0[30u].z, fma(_588, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _584));
        float _939 = fma(_592, cbModelParam._m0[31u].z, fma(_588, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _584));
        float _943 = fma(_592, cbModelParam._m0[32u].z, fma(_588, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _584));
        float _966 = _584 + _410;
        float _967 = _588 + _411;
        float _968 = _592 + _412;
        float _978 = fma(_968, cbModelParam._m0[30u].z, fma(_967, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _966)) - _935;
        float _979 = fma(_968, cbModelParam._m0[31u].z, fma(_967, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _966)) - _939;
        float _980 = fma(_968, cbModelParam._m0[32u].z, fma(_967, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _966)) - _943;
        float _984 = inversesqrt(dot(vec3(_978, _979, _980), vec3(_978, _979, _980)));
        float _997 = ((_984 * _978) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_935 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _998 = ((_984 * _979) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_939 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _999 = ((_984 * _980) / cbModelParam._m0[35u].z) + ((((((_943 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        float _1034 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_1001.x + (-0.5));
        float _1036 = _1034 * (_1001.y + (-0.5));
        float _1037 = _1034 * (_1001.z + (-0.5));
        float _1044 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1008.x + (-0.5));
        float _1046 = _1044 * (_1008.y + (-0.5));
        float _1047 = _1044 * (_1008.z + (-0.5));
        float _1054 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1015.x + (-0.5));
        float _1056 = _1054 * (_1015.y + (-0.5));
        float _1057 = _1054 * (_1015.z + (-0.5));
        float _1064 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1022.x + (-0.5));
        float _1066 = _1064 * (_1022.y + (-0.5));
        float _1067 = _1064 * (_1022.z + (-0.5));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = _1035 * 0.5;
        float _1072 = _1045 * 0.5;
        float _1073 = _1055 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(_410, _411, _412), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _3873 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1098 + 1.0))) + _1103) * _1068;
        float _1113 = _1036 * 0.5;
        float _1114 = _1046 * 0.5;
        float _1115 = _1056 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_410, _411, _412), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3906 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1140 + 1.0))) + _1145) * _1069;
        float _1155 = _1037 * 0.5;
        float _1156 = _1047 * 0.5;
        float _1157 = _1057 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_410, _411, _412), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3939 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1182 + 1.0))) + _1187) * _1070;
        _1204 = _1037;
        _1205 = _1036;
        _1206 = _1035;
        _1207 = _1047;
        _1208 = _1046;
        _1209 = _1045;
        _1210 = _1057;
        _1211 = _1056;
        _1212 = _1055;
        _1213 = _1070;
        _1214 = _1069;
        _1215 = _1068;
        _1216 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
        _1217 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1218 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
    }
    else
    {
        _1204 = _895;
        _1205 = _895;
        _1206 = _895;
        _1207 = _895;
        _1208 = _895;
        _1209 = _895;
        _1210 = _895;
        _1211 = _895;
        _1212 = _895;
        _1213 = _895;
        _1214 = _895;
        _1215 = _895;
        _1216 = 0.0;
        _1217 = 0.0;
        _1218 = 0.0;
    }
    float _1228 = (cbModelParam._m0[1u].x * (_1216 - _907)) + _907;
    float _1229 = (cbModelParam._m0[1u].x * (_1217 - _908)) + _908;
    float _1230 = (cbModelParam._m0[1u].x * (_1218 - _909)) + _909;
    float _1251 = fma(_1230, cbSceneParam._m0[89u].z, fma(_1229, cbSceneParam._m0[89u].y, _1228 * cbSceneParam._m0[89u].x));
    float _1254 = fma(_1230, cbSceneParam._m0[90u].z, fma(_1229, cbSceneParam._m0[90u].y, _1228 * cbSceneParam._m0[90u].x));
    float _1257 = fma(_1230, cbSceneParam._m0[91u].z, fma(_1229, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1228));
    float _1272 = _529 * 0.5;
    float _1273 = _530 * 0.5;
    float _1274 = _531 * 0.5;
    float _1275 = dot(vec4(_1272, _1273, _1274, 1.0), vec4(_1206, _1209, _1212, _1215));
    float _1278 = dot(vec4(_1272, _1273, _1274, 1.0), vec4(_1205, _1208, _1211, _1214));
    float _1281 = dot(vec4(_1272, _1273, _1274, 1.0), vec4(_1204, _1207, _1210, _1213));
    float _1315;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1288 = dot(vec4(_1272, _1273, _1274, 1.0), vec4(_894, _898, _901, _904));
        float _1292 = dot(vec4(_1272, _1273, _1274, 1.0), vec4(_896, _899, _902, _905));
        float _1296 = dot(vec4(_1272, _1273, _1274, 1.0), vec4(_897, _900, _903, _906));
        float _1303 = dot(vec4(cbModelParam._m0[39u]), vec4(_1272, _1273, _1274, 1.0));
        _1315 = dot(vec3(isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)), isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1303) ? 0.0 : (isnan(0.0) ? _1303 : max(0.0, _1303))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1315 = 1.0;
    }
    float _1326;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1317 = dot(vec4(cbModelParam._m0[40u]), vec4(_1272, _1273, _1274, 1.0));
        _1326 = dot(vec3(isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)), isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1317) ? 0.0 : (isnan(0.0) ? _1317 : max(0.0, _1317))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1326 = 1.0;
    }
    float _1330 = (_1326 * cbModelParam._m0[1u].x) + (_1315 * (1.0 - cbModelParam._m0[1u].x));
    float _1340 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _414);
    float _1341 = isnan(_1340) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1340 : min(cbModelParam._m0[25u].z, _1340));
    float _1423;
    float _1425;
    float _1427;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1390 = fma(_592, cbModelParam._m0[13u].z, fma(_588, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _584)) + cbModelParam._m0[13u].w;
        float _1394 = fma(_592, cbModelParam._m0[14u].z, fma(_588, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _584)) + cbModelParam._m0[14u].w;
        float _1398 = fma(_592, cbModelParam._m0[15u].z, fma(_588, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _584)) + cbModelParam._m0[15u].w;
        float _1401 = fma(_531, cbModelParam._m0[13u].z, fma(_530, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _529));
        float _1404 = fma(_531, cbModelParam._m0[14u].z, fma(_530, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _529));
        float _1407 = fma(_531, cbModelParam._m0[15u].z, fma(_530, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _529));
        float _1435;
        if (_1401 > 0.0)
        {
            _1435 = abs((1.0 - _1390) / _1401);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1390 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1435 = frontier_phi_16_14_ladder;
        }
        float _1609;
        if (_1404 > 0.0)
        {
            _1609 = abs((1.0 - _1394) / _1404);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1394 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1609 = frontier_phi_25_21_ladder;
        }
        float _1905;
        if (_1407 > 0.0)
        {
            _1905 = abs((1.0 - _1398) / _1407);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1398 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1905 = frontier_phi_37_32_ladder;
        }
        float _1907 = isnan(_1609) ? _1435 : (isnan(_1435) ? _1609 : min(_1435, _1609));
        float _1908 = isnan(_1905) ? _1907 : (isnan(_1907) ? _1905 : min(_1907, _1905));
        float _1912 = (_1908 * _1401) + _1390;
        float _1913 = (_1908 * _1404) + _1394;
        float _1914 = (_1908 * _1407) + _1398;
        float _1915 = _1908 * 9.9999997473787516355514526367188e-05;
        float _1917 = (-1.0) - _1915;
        float _1919 = _1915 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1914 > _1919) || ((_1914 < _1917) || ((_1913 > _1919) || ((_1913 < _1917) || ((_1912 < _1917) || (_1912 > _1919))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2059 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1914, cbModelParam._m0[9u].z, fma(_1913, cbModelParam._m0[9u].y, _1912 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1914, cbModelParam._m0[10u].z, fma(_1913, cbModelParam._m0[10u].y, _1912 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1914, cbModelParam._m0[11u].z, fma(_1913, cbModelParam._m0[11u].y, _1912 * cbModelParam._m0[11u].x))), _1341);
            frontier_phi_15_37_ladder = _2059.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2059.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2059.z * cbModelParam._m0[1u].y;
        }
        _1423 = frontier_phi_15_37_ladder_1;
        _1425 = frontier_phi_15_37_ladder;
        _1427 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1411 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_529, _530, _531), _1341);
        _1423 = _1411.x * cbModelParam._m0[1u].y;
        _1425 = _1411.y * cbModelParam._m0[1u].y;
        _1427 = _1411.z * cbModelParam._m0[1u].y;
    }
    float _1431 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _414);
    float _1432 = isnan(_1431) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1431 : min(cbModelParam._m0[25u].w, _1431));
    float _1524;
    float _1526;
    float _1528;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1488 = fma(_592, cbModelParam._m0[21u].z, fma(_588, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _584)) + cbModelParam._m0[21u].w;
        float _1492 = fma(_592, cbModelParam._m0[22u].z, fma(_588, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _584)) + cbModelParam._m0[22u].w;
        float _1496 = fma(_592, cbModelParam._m0[23u].z, fma(_588, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _584)) + cbModelParam._m0[23u].w;
        float _1499 = fma(_531, cbModelParam._m0[21u].z, fma(_530, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _529));
        float _1502 = fma(_531, cbModelParam._m0[22u].z, fma(_530, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _529));
        float _1505 = fma(_531, cbModelParam._m0[23u].z, fma(_530, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _529));
        float _1614;
        if (_1499 > 0.0)
        {
            _1614 = abs((1.0 - _1488) / _1499);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1488 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1614 = frontier_phi_27_23_ladder;
        }
        float _1932;
        if (_1502 > 0.0)
        {
            _1932 = abs((1.0 - _1492) / _1502);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1492 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1932 = frontier_phi_39_34_ladder;
        }
        float _2270;
        if (_1505 > 0.0)
        {
            _2270 = abs((1.0 - _1496) / _1505);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1496 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2270 = frontier_phi_49_46_ladder;
        }
        float _2272 = isnan(_1932) ? _1614 : (isnan(_1614) ? _1932 : min(_1614, _1932));
        float _2273 = isnan(_2270) ? _2272 : (isnan(_2272) ? _2270 : min(_2272, _2270));
        float _2277 = (_2273 * _1499) + _1488;
        float _2278 = (_2273 * _1502) + _1492;
        float _2279 = (_2273 * _1505) + _1496;
        float _2280 = _2273 * 9.9999997473787516355514526367188e-05;
        float _2281 = (-1.0) - _2280;
        float _2283 = _2280 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2279 > _2283) || ((_2279 < _2281) || ((_2278 > _2283) || ((_2278 < _2281) || ((_2277 < _2281) || (_2277 > _2283))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2401 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2279, cbModelParam._m0[17u].z, fma(_2278, cbModelParam._m0[17u].y, _2277 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2279, cbModelParam._m0[18u].z, fma(_2278, cbModelParam._m0[18u].y, _2277 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2279, cbModelParam._m0[19u].z, fma(_2278, cbModelParam._m0[19u].y, _2277 * cbModelParam._m0[19u].x))), _1432);
            frontier_phi_24_49_ladder = _2401.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2401.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2401.x * cbModelParam._m0[1u].z;
        }
        _1524 = frontier_phi_24_49_ladder_2;
        _1526 = frontier_phi_24_49_ladder_1;
        _1528 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1508 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_529, _530, _531), _1432);
        _1524 = _1508.x * cbModelParam._m0[1u].z;
        _1526 = _1508.y * cbModelParam._m0[1u].z;
        _1528 = _1508.z * cbModelParam._m0[1u].z;
    }
    float _1541 = (((_555 * _506) + _556) * _521) * ((cbModelParam._m0[1u].w * (_1524 - _1423)) + _1423);
    float _1543 = (((_555 * _508) + _556) * _521) * ((cbModelParam._m0[1u].w * (_1526 - _1425)) + _1425);
    float _1545 = (((_555 * _509) + _556) * _521) * ((cbModelParam._m0[1u].w * (_1528 - _1427)) + _1427);
    float _1548 = fma(_1545, cbSceneParam._m0[89u].z, fma(_1543, cbSceneParam._m0[89u].y, _1541 * cbSceneParam._m0[89u].x));
    float _1551 = fma(_1545, cbSceneParam._m0[90u].z, fma(_1543, cbSceneParam._m0[90u].y, _1541 * cbSceneParam._m0[90u].x));
    float _1554 = fma(_1545, cbSceneParam._m0[91u].z, fma(_1543, cbSceneParam._m0[91u].y, _1541 * cbSceneParam._m0[91u].x));
    float _1588 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1592 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1596 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1600 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1601 = _1588 / _1600;
    float _1602 = _1592 / _1600;
    float _1603 = _1596 / _1600;
    float _1750;
    float _1751;
    float _1752;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1630 = ((uint(_1603 > cbSceneParam._m0[59u].y) + uint(_1603 > cbSceneParam._m0[59u].x)) + uint(_1603 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1631 = _1630 + 43u;
        uint _1639 = _1630 + 44u;
        uint _1647 = _1630 + 45u;
        uint _1655 = _1630 + 46u;
        float _1666 = fma(_1600, cbSceneParam._m0[_1631].w, fma(_1596, cbSceneParam._m0[_1631].z, fma(_1592, cbSceneParam._m0[_1631].y, _1588 * cbSceneParam._m0[_1631].x)));
        float _1670 = fma(_1600, cbSceneParam._m0[_1639].w, fma(_1596, cbSceneParam._m0[_1639].z, fma(_1592, cbSceneParam._m0[_1639].y, _1588 * cbSceneParam._m0[_1639].x)));
        float _1678 = fma(_1600, cbSceneParam._m0[_1655].w, fma(_1596, cbSceneParam._m0[_1655].z, fma(_1592, cbSceneParam._m0[_1655].y, _1588 * cbSceneParam._m0[_1655].x)));
        float _1683 = cbSceneParam._m0[33u].z * _1678;
        float _1685 = cbSceneParam._m0[33u].w * _1678;
        float _1688 = fma(_1600, cbSceneParam._m0[_1647].w, fma(_1596, cbSceneParam._m0[_1647].z, fma(_1592, cbSceneParam._m0[_1647].y, _1588 * cbSceneParam._m0[_1647].x))) / _1678;
        float _1736 = (cbSceneParam._m0[33u].x - sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603))) * cbSceneParam._m0[33u].y;
        float _4065 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1743 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1683 + _1666) / _1678, (_1685 + _1670) / _1678), _1688), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1685 + _1666) / _1678, (_1670 - _1683) / _1678), _1688), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1666 - _1683) / _1678, (_1670 - _1685) / _1678), _1688), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1666 - _1685) / _1678, (_1683 + _1670) / _1678), _1688), 0.0)).x), vec4(0.25)));
        _1750 = 1.0 - (_1743 * cbSceneParam._m0[34u].x);
        _1751 = 1.0 - (_1743 * cbSceneParam._m0[34u].y);
        _1752 = 1.0 - (_1743 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1750 = 1.0;
        _1751 = 1.0;
        _1752 = 1.0;
    }
    float _1816;
    float _1818;
    float _1820;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1804 = fma(_1600, cbSceneParam._m0[63u].w, fma(_1596, cbSceneParam._m0[63u].z, fma(_1592, cbSceneParam._m0[63u].y, _1588 * cbSceneParam._m0[63u].x)));
        float _1805 = fma(_1600, cbSceneParam._m0[60u].w, fma(_1596, cbSceneParam._m0[60u].z, fma(_1592, cbSceneParam._m0[60u].y, _1588 * cbSceneParam._m0[60u].x))) / _1804;
        float _1806 = fma(_1600, cbSceneParam._m0[61u].w, fma(_1596, cbSceneParam._m0[61u].z, fma(_1592, cbSceneParam._m0[61u].y, _1588 * cbSceneParam._m0[61u].x))) / _1804;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1805 >= cbSceneParam._m0[64u].x) && (_1806 >= cbSceneParam._m0[64u].y)) && (_1805 <= cbSceneParam._m0[64u].z)) && (_1806 <= cbSceneParam._m0[64u].w))
        {
            float _1945 = fma(_1600, cbSceneParam._m0[62u].w, fma(_1596, cbSceneParam._m0[62u].z, fma(_1592, cbSceneParam._m0[62u].y, _1588 * cbSceneParam._m0[62u].x))) / _1804;
            float _1949 = isnan(cbSceneParam._m0[41u].w) ? _1945 : (isnan(_1945) ? cbSceneParam._m0[41u].w : max(_1945, cbSceneParam._m0[41u].w));
            float _1992 = (cbSceneParam._m0[33u].x - sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603))) * cbSceneParam._m0[33u].y;
            float _4081 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
            float _1999 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1805, cbSceneParam._m0[33u].w + _1806), _1949), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1805, _1806 - cbSceneParam._m0[33u].z), _1949), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1805 - cbSceneParam._m0[33u].z, _1806 - cbSceneParam._m0[33u].w), _1949), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1805 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1806), _1949), 0.0)).x), vec4(0.25)));
            float _2003 = 1.0 - (_1999 * cbSceneParam._m0[34u].x);
            float _2004 = 1.0 - (_1999 * cbSceneParam._m0[34u].y);
            float _2005 = 1.0 - (_1999 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2004) ? _1751 : (isnan(_1751) ? _2004 : min(_1751, _2004));
            frontier_phi_36_35_ladder_1 = isnan(_2005) ? _1752 : (isnan(_1752) ? _2005 : min(_1752, _2005));
            frontier_phi_36_35_ladder_2 = isnan(_2003) ? _1750 : (isnan(_1750) ? _2003 : min(_1750, _2003));
        }
        else
        {
            frontier_phi_36_35_ladder = _1751;
            frontier_phi_36_35_ladder_1 = _1752;
            frontier_phi_36_35_ladder_2 = _1750;
        }
        _1816 = frontier_phi_36_35_ladder_2;
        _1818 = frontier_phi_36_35_ladder;
        _1820 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1816 = _1750;
        _1818 = _1751;
        _1820 = _1752;
    }
    uvec4 _1825 = floatBitsToUint(cbInstanceData._m0[_481 + 5u]);
    uint _1827 = _1825.x * 14u;
    uint _1828 = _1827 + 13u;
    float _1835 = _521 + (-1.0);
    float _1840 = (cbLight._m0[_1828].x * _1835) + 1.0;
    float _1841 = (cbLight._m0[_1828].y * _1835) + 1.0;
    float _1842 = (cbLight._m0[_1828].z * _1835) + 1.0;
    float _1843 = (cbLight._m0[_1828].w * _1835) + 1.0;
    uint _1844 = _1827 + 5u;
    float _1850 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
    uint _1854 = _1827 + 4u;
    float _1864 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
    uint _1868 = _1827 | 1u;
    float _1879 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_410, _411, _412));
    float _1882 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_410, _411, _412));
    float _4117 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _4128 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1887 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * 0.3183098733425140380859375;
    float _1889 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * 0.3183098733425140380859375;
    float _1896 = ((cbLight._m0[_1844].x * _1850) * _1889) + (((cbLight._m0[_1854].x * _1816) * _1864) * _1887);
    float _1897 = ((_1850 * cbLight._m0[_1844].y) * _1889) + (((cbLight._m0[_1854].y * _1818) * _1864) * _1887);
    float _1898 = ((_1850 * cbLight._m0[_1844].z) * _1889) + (((cbLight._m0[_1854].z * _1820) * _1864) * _1887);
    uvec4 _1902 = floatBitsToUint(cbLight._m0[_1827 + 12u]);
    bool _1904 = _1902.x == 0u;
    float _2006;
    float _2008;
    float _2010;
    if (_1904)
    {
        _2006 = _1896;
        _2008 = _1897;
        _2010 = _1898;
    }
    else
    {
        uint _2014 = _1827 + 6u;
        float _2030 = (dot(vec3(cbLight._m0[_1827 + 2u].xyz), vec3(_410, _411, _412)) * 0.5) + 0.5;
        float _2031 = _2030 * _2030;
        float _4139 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2032 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2033 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
        _2006 = (((cbLight._m0[_2014].x * 0.3183098733425140380859375) * _2032) * _2033) + _1896;
        _2008 = (((cbLight._m0[_2014].y * 0.3183098733425140380859375) * _2032) * _2033) + _1897;
        _2010 = (((cbLight._m0[_2014].z * 0.3183098733425140380859375) * _2032) * _2033) + _1898;
    }
    bool _2013 = _1902.y == 0u;
    float _2068;
    float _2070;
    float _2072;
    if (_2013)
    {
        _2068 = _2006;
        _2070 = _2008;
        _2072 = _2010;
    }
    else
    {
        uint _2241 = _1827 + 7u;
        float _2257 = (dot(vec3(cbLight._m0[_1827 + 3u].xyz), vec3(_410, _411, _412)) * 0.5) + 0.5;
        float _2258 = _2257 * _2257;
        float _4155 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2259 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2260 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
        _2068 = (((cbLight._m0[_2241].x * 0.3183098733425140380859375) * _2259) * _2260) + _2006;
        _2070 = (((cbLight._m0[_2241].y * 0.3183098733425140380859375) * _2259) * _2260) + _2008;
        _2072 = (((cbLight._m0[_2241].z * 0.3183098733425140380859375) * _2259) * _2260) + _2010;
    }
    uint _2075 = _1827 + 8u;
    float _2088 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1827].w)) * _414) * 0.949999988079071044921875);
    float _2089 = _2088 * _2088;
    float _2090 = cbLight._m0[_1827].x + _383;
    float _2091 = cbLight._m0[_1827].y + _384;
    float _2092 = cbLight._m0[_1827].z + _385;
    float _2096 = inversesqrt(dot(vec3(_2090, _2091, _2092), vec3(_2090, _2091, _2092)));
    float _2097 = _2096 * _2090;
    float _2098 = _2096 * _2091;
    float _2099 = _2096 * _2092;
    float _2100 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_1827].xyz));
    float _4171 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _4182 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _2104 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2105 = dot(vec3(_410, _411, _412), vec3(_2097, _2098, _2099));
    float _4193 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2108 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _2109 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_2097, _2098, _2099));
    float _4204 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2113 = _2089 * _2089;
    float _2117 = ((_2108 * _2108) * (_2113 + (-1.0))) + 1.0;
    float _2125 = exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0);
    float _2126 = 0.959999978542327880859375 - _503;
    float _2128 = 0.959999978542327880859375 - _504;
    float _2129 = 0.959999978542327880859375 - _505;
    float _2136 = 1.0 - _2089;
    float _2147 = (0.5 / (((_2104 * ((_2103 * _2136) + _2089)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2136) + _2089) * _2103))) * _2103;
    float _4215 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2149 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2113 / ((_2117 * _2117) * 3.141590118408203125));
    uint _2163 = _1827 + 9u;
    float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1868].w)) * _414) * 0.949999988079071044921875);
    float _2175 = _2174 * _2174;
    float _2176 = cbLight._m0[_1868].x + _383;
    float _2177 = cbLight._m0[_1868].y + _384;
    float _2178 = cbLight._m0[_1868].z + _385;
    float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
    float _2183 = _2182 * _2176;
    float _2184 = _2182 * _2177;
    float _2185 = _2182 * _2178;
    float _2186 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_1868].xyz));
    float _4226 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2190 = dot(vec3(_410, _411, _412), vec3(_2183, _2184, _2185));
    float _4237 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2193 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _2194 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_2183, _2184, _2185));
    float _4248 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2198 = _2175 * _2175;
    float _2202 = ((_2193 * _2193) * (_2198 + (-1.0))) + 1.0;
    float _2209 = exp2(log2(1.0 - (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * 5.0);
    float _2216 = 1.0 - _2175;
    float _2226 = (0.5 / (((_2104 * ((_2189 * _2216) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2216) + _2175) * _2189))) * _2189;
    float _4259 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2228 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_2198 / ((_2202 * _2202) * 3.141590118408203125));
    float _2238 = (((((_2209 * _2126) + _506) * cbLight._m0[_2163].x) * _2228) * _1850) + ((((cbLight._m0[_2075].x * _1816) * ((_2125 * _2126) + _506)) * _2149) * _1864);
    float _2239 = (((((_2209 * _2128) + _508) * cbLight._m0[_2163].y) * _2228) * _1850) + ((((cbLight._m0[_2075].y * _1818) * ((_2125 * _2128) + _508)) * _2149) * _1864);
    float _2240 = (((((_2209 * _2129) + _509) * cbLight._m0[_2163].z) * _2228) * _1850) + ((((cbLight._m0[_2075].z * _1820) * ((_2125 * _2129) + _509)) * _2149) * _1864);
    float _2296;
    float _2298;
    float _2300;
    if (_1904)
    {
        _2296 = _2238;
        _2298 = _2239;
        _2300 = _2240;
    }
    else
    {
        uint _2302 = _1827 + 2u;
        uint _2306 = _1827 + 10u;
        float _2320 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2302].w)) * _414) * 0.949999988079071044921875);
        float _2321 = _2320 * _2320;
        float _2322 = cbLight._m0[_2302].x + _383;
        float _2323 = cbLight._m0[_2302].y + _384;
        float _2324 = cbLight._m0[_2302].z + _385;
        float _2328 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
        float _2329 = _2328 * _2322;
        float _2330 = _2328 * _2323;
        float _2331 = _2328 * _2324;
        float _2332 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_2302].xyz));
        float _4270 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2335 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2336 = dot(vec3(_410, _411, _412), vec3(_2329, _2330, _2331));
        float _4281 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2339 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2340 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_2329, _2330, _2331));
        float _4292 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2344 = _2321 * _2321;
        float _2348 = ((_2339 * _2339) * (_2344 + (-1.0))) + 1.0;
        float _2355 = exp2(log2(1.0 - (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) * 5.0);
        float _2362 = 1.0 - _2321;
        float _2372 = (0.5 / (((_2104 * ((_2335 * _2362) + _2321)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2362) + _2321) * _2335))) * _2335;
        float _4303 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2374 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_2344 / ((_2348 * _2348) * 3.141590118408203125));
        float _2375 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
        _2296 = (((((_2355 * _2126) + _506) * cbLight._m0[_2306].x) * _2374) * _2375) + _2238;
        _2298 = (((((_2355 * _2128) + _508) * cbLight._m0[_2306].y) * _2374) * _2375) + _2239;
        _2300 = (((((_2355 * _2129) + _509) * cbLight._m0[_2306].z) * _2374) * _2375) + _2240;
    }
    float _2406;
    float _2408;
    float _2410;
    if (_2013)
    {
        _2406 = _2296;
        _2408 = _2298;
        _2410 = _2300;
    }
    else
    {
        uint _2417 = _1827 + 3u;
        uint _2421 = _1827 + 11u;
        float _2435 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2417].w)) * _414) * 0.949999988079071044921875);
        float _2436 = _2435 * _2435;
        float _2437 = cbLight._m0[_2417].x + _383;
        float _2438 = cbLight._m0[_2417].y + _384;
        float _2439 = cbLight._m0[_2417].z + _385;
        float _2443 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
        float _2444 = _2443 * _2437;
        float _2445 = _2443 * _2438;
        float _2446 = _2443 * _2439;
        float _2447 = dot(vec3(_410, _411, _412), vec3(cbLight._m0[_2417].xyz));
        float _4319 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _2451 = dot(vec3(_410, _411, _412), vec3(_2444, _2445, _2446));
        float _4330 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2454 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _2455 = dot(vec3(cbLight._m0[_2417].xyz), vec3(_2444, _2445, _2446));
        float _4341 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2459 = _2436 * _2436;
        float _2463 = ((_2454 * _2454) * (_2459 + (-1.0))) + 1.0;
        float _2470 = exp2(log2(1.0 - (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) * 5.0);
        float _2477 = 1.0 - _2436;
        float _2487 = (0.5 / (((_2104 * ((_2450 * _2477) + _2436)) + 9.9999999392252902907785028219223e-09) + (((_2104 * _2477) + _2436) * _2450))) * _2450;
        float _4352 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2489 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2459 / ((_2463 * _2463) * 3.141590118408203125));
        float _2490 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
        _2406 = (((((_2470 * _2126) + _506) * cbLight._m0[_2421].x) * _2489) * _2490) + _2296;
        _2408 = (((((_2470 * _2128) + _508) * cbLight._m0[_2421].y) * _2489) * _2490) + _2298;
        _2410 = (((((_2470 * _2129) + _509) * cbLight._m0[_2421].z) * _2489) * _2490) + _2300;
    }
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    float _2563;
    float _2565;
    if (_1825.y == 0u)
    {
        uvec4 _2511 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2512 = _2511.x;
        uint _2523 = uint((float(_2511.y) * floor(float(uint(cbSceneParam._m0[85u].y * _441) / _2512))) + floor(float(uint(cbSceneParam._m0[85u].x * _440) / _2512)));
        float _2533 = (log2(_1603 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2534 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        uint _2537 = uint(isnan(14.0) ? _2534 : (isnan(_2534) ? 14.0 : min(_2534, 14.0)));
        uvec4 _2542 = texelFetch(g_lightClusterGridBuffer, int(((_2537 << 2u) + (_2523 << 6u)) >> 2u));
        uint _2543 = _2542.x;
        uint _2544 = _2511.z;
        float _2652;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        if (((((1u << ((_2544 >> 4u) & 15u)) + 4294967295u) & _2543) == 0u) || ((_2544 & 240u) == 0u))
        {
            _2652 = 0.0;
            _2654 = 0.0;
            _2656 = 0.0;
            _2658 = 0.0;
            _2660 = 0.0;
            _2662 = 0.0;
        }
        else
        {
            float _2653;
            float _2655;
            float _2657;
            float _2659;
            float _2661;
            float _2663;
            float _2796 = 0.0;
            float _2797 = 0.0;
            float _2798 = 0.0;
            float _2799 = 0.0;
            float _2800 = 0.0;
            float _2801 = 0.0;
            uint _2802 = 0u;
            uint _2811;
            bool _2812;
            for (;;)
            {
                _2811 = texelFetch(g_lightClassification, int((((_2537 << 5u) + (_2523 << 9u)) + (_2802 << 2u)) >> 2u)).x;
                _2812 = _2811 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2812)
                {
                    frontier_phi_68_pred = _2801;
                    frontier_phi_68_pred_1 = _2800;
                    frontier_phi_68_pred_2 = _2799;
                    frontier_phi_68_pred_3 = _2797;
                    frontier_phi_68_pred_4 = _2796;
                    frontier_phi_68_pred_5 = _2798;
                }
                else
                {
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    uint _2926;
                    _2920 = _2796;
                    _2921 = _2797;
                    _2922 = _2798;
                    _2923 = _2799;
                    _2924 = _2800;
                    _2925 = _2801;
                    _2926 = _2811;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    for (;;)
                    {
                        uint _2930 = uint(findLSB(_2926)) + (_2802 << 5u);
                        uint _2927 = (_2926 + 4294967295u) & _2926;
                        uint _2932 = _2930 * 48u;
                        vec4 _2946 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2932)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 3u)).x));
                        uint _2952 = (_2930 * 48u) + 4u;
                        vec4 _2965 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2952)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 3u)).x));
                        uint _2971 = (_2930 * 48u) + 8u;
                        vec3 _2982 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2971)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 2u)).x));
                        float _2986 = _2946.x - _1601;
                        float _2987 = _2946.y - _1602;
                        float _2988 = _2946.z - _1603;
                        float _2989 = dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988));
                        float _2992 = inversesqrt(_2989);
                        float _2993 = _2992 * _2986;
                        float _2994 = _2992 * _2987;
                        float _2995 = _2992 * _2988;
                        float _2996 = dot(vec3(_462, _465, _468), vec3(_2993, _2994, _2995));
                        float _3001 = 1.0 - (_2989 * _2946.w);
                        float _4378 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3002 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                        float _3003 = sqrt(_2989) * _2965.w;
                        float _3006 = 1.39999997615814208984375 / (_3003 + 1.39999997615814208984375);
                        float _3007 = _3006 * _3006;
                        float _3010 = ((1.0 - _3007) * _2996) + _3007;
                        float _3013 = _3003 * _3003;
                        float _3017 = ((isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0))) * _3002) / ((_3013 * 0.699999988079071044921875) + 1.0);
                        float _3021 = (-0.0) - _1601;
                        float _3022 = (-0.0) - _1602;
                        float _3023 = (-0.0) - _1603;
                        float _3027 = inversesqrt(dot(vec3(_3021, _3022, _3023), vec3(_3021, _3022, _3023)));
                        float _3028 = _3027 * _3021;
                        float _3029 = _3027 * _3022;
                        float _3030 = _3027 * _3023;
                        float _3037 = exp2(log2(1.0 / ((_3013 * 3.5) + 5.0)) * 0.25);
                        float _3038 = 1.0 - _537;
                        float _3045 = sqrt(1.0 - ((1.0 - (_3038 * _3038)) * (1.0 - (_3037 * _3037))));
                        float _3046 = _3045 * _3045;
                        float _3047 = _3046 * _3046;
                        float _3048 = _3028 + _2993;
                        float _3049 = _3029 + _2994;
                        float _3050 = _3030 + _2995;
                        float _3054 = inversesqrt(dot(vec3(_3048, _3049, _3050), vec3(_3048, _3049, _3050)));
                        float _3058 = dot(vec3(_462, _465, _468), vec3(_3028, _3029, _3030));
                        float _4394 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                        float _3061 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                        float _3062 = dot(vec3(_462, _465, _468), vec3(_3054 * _3048, _3054 * _3049, _3054 * _3050));
                        float _4405 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3065 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                        float _3069 = ((_3065 * _3065) * (_3047 + (-1.0))) + 1.0;
                        float _3070 = _3006 * _3046;
                        float _3071 = _3070 * _3070;
                        float _3074 = ((1.0 - _3071) * _2996) + _3071;
                        float _4416 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3075 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                        float _3076 = 1.0 - _3046;
                        float _3086 = (0.5 / (((_3075 * ((_3061 * _3076) + _3046)) + 9.9999999392252902907785028219223e-09) + (((_3075 * _3076) + _3046) * _3061))) * _3075;
                        float _4427 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3097 = (((_3047 * 3.1415927410125732421875) * (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) / ((_3069 * _3069) * ((_3013 * 2.1991131305694580078125) + 3.141590118408203125))) * _3002;
                        _2855 = (_3017 * _2965.x) + _2923;
                        _2856 = (_3017 * _2965.y) + _2924;
                        _2857 = (_3017 * _2965.z) + _2925;
                        _2852 = (_3097 * _2982.x) + _2920;
                        _2853 = (_3097 * _2982.y) + _2921;
                        _2854 = (_3097 * _2982.z) + _2922;
                        if (_2927 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2920 = _2852;
                            _2921 = _2853;
                            _2922 = _2854;
                            _2923 = _2855;
                            _2924 = _2856;
                            _2925 = _2857;
                            _2926 = _2927;
                        }
                    }
                    frontier_phi_68_pred = _2857;
                    frontier_phi_68_pred_1 = _2856;
                    frontier_phi_68_pred_2 = _2855;
                    frontier_phi_68_pred_3 = _2853;
                    frontier_phi_68_pred_4 = _2852;
                    frontier_phi_68_pred_5 = _2854;
                }
                _2663 = frontier_phi_68_pred;
                _2661 = frontier_phi_68_pred_1;
                _2659 = frontier_phi_68_pred_2;
                _2655 = frontier_phi_68_pred_3;
                _2653 = frontier_phi_68_pred_4;
                _2657 = frontier_phi_68_pred_5;
                uint _2803 = _2802 + 1u;
                if (_2803 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2796 = _2653;
                    _2797 = _2655;
                    _2798 = _2657;
                    _2799 = _2659;
                    _2800 = _2661;
                    _2801 = _2663;
                    _2802 = _2803;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2652 = _2653;
            _2654 = _2655;
            _2656 = _2657;
            _2658 = _2659;
            _2660 = _2661;
            _2662 = _2663;
        }
        uvec4 _2666 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2667 = _2666.z;
        uint _2669 = (_2667 >> 8u) & 15u;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        if (((4294967295u << _2669) & _2543) == 0u)
        {
            _2764 = _2652;
            _2766 = _2654;
            _2768 = _2656;
            _2770 = _2658;
            _2772 = _2660;
            _2774 = _2662;
        }
        else
        {
            float _2789 = inversesqrt(dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603)));
            float _2790 = _2789 * _1601;
            float _2791 = _2789 * _1602;
            float _2792 = _2789 * _1603;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2669 < ((_2667 >> 12u) & 15u))
            {
                float _2765;
                float _2767;
                float _2769;
                float _2771;
                float _2773;
                float _2775;
                float _2903 = _2652;
                float _2904 = _2654;
                float _2905 = _2656;
                float _2906 = _2658;
                float _2907 = _2660;
                float _2908 = _2662;
                uint _2909 = _2669;
                uint _2918;
                bool _2919;
                for (;;)
                {
                    _2918 = texelFetch(g_lightClassification, int((((_2537 << 5u) + (_2523 << 9u)) + (_2909 << 2u)) >> 2u)).x;
                    _2919 = _2918 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2919)
                    {
                        frontier_phi_74_pred = _2905;
                        frontier_phi_74_pred_1 = _2904;
                        frontier_phi_74_pred_2 = _2903;
                        frontier_phi_74_pred_3 = _2908;
                        frontier_phi_74_pred_4 = _2907;
                        frontier_phi_74_pred_5 = _2906;
                    }
                    else
                    {
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3115 = _2903;
                        float _3116 = _2904;
                        float _3117 = _2905;
                        float _3118 = _2906;
                        float _3119 = _2907;
                        float _3120 = _2908;
                        uint _3121 = _2918;
                        uint _3122;
                        vec4 _3147;
                        float _3148;
                        vec4 _3163;
                        vec3 _3175;
                        vec4 _3191;
                        vec4 _3207;
                        float _3254;
                        bool _3255;
                        for (;;)
                        {
                            uint _3132 = ((_2909 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3121));
                            _3122 = (_3121 + 4294967295u) & _3121;
                            uint _3134 = _3132 * 40u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            _3148 = _3147.w;
                            uint _3150 = (_3132 * 40u) + 4u;
                            _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            uint _3165 = (_3132 * 40u) + 8u;
                            _3175 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x));
                            uint _3178 = (_3132 * 40u) + 16u;
                            _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            uint _3194 = (_3132 * 40u) + 20u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            uint _3210 = (_3132 * 40u) + 24u;
                            vec4 _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            uint _3229 = (_3132 * 40u) + 28u;
                            vec4 _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            _3254 = fma(_1603, _3242.z, fma(_1602, _3242.y, _3242.x * _1601)) + _3242.w;
                            _3255 = !((fma(_1603, _3223.z, fma(_1602, _3223.y, _3223.x * _1601)) + _3223.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3255)
                            {
                                float _3282 = _3147.x - _1601;
                                float _3283 = _3147.y - _1602;
                                float _3284 = _3147.z - _1603;
                                float _3285 = dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284));
                                float _3288 = inversesqrt(_3285);
                                float _3289 = _3288 * _3282;
                                float _3290 = _3288 * _3283;
                                float _3291 = _3288 * _3284;
                                float _3295 = 1.0 - (_3285 / (_3148 * _3148));
                                float _4438 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3296 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                                float _3300 = sqrt(_3285) * _3163.w;
                                float _3302 = 1.39999997615814208984375 / (_3300 + 1.39999997615814208984375);
                                float _3303 = _3302 * _3302;
                                float _3306 = ((1.0 - _3303) * dot(vec3(_3289, _3290, _3291), vec3(_462, _465, _468))) + _3303;
                                float _3309 = _3300 * _3300;
                                float _3313 = (fma(_1603, _3191.z, fma(_1602, _3191.y, _3191.x * _1601)) + _3191.w) / _3254;
                                float _3314 = (fma(_1603, _3207.z, fma(_1602, _3207.y, _3207.x * _1601)) + _3207.w) / _3254;
                                float _3318 = 1.0 - dot(vec2(_3313, _3314), vec2(_3313, _3314));
                                float _4454 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3319 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                                float _3320 = _3319 * (((isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0))) * _3296) / ((_3309 * 0.699999988079071044921875) + 1.0));
                                float _3332 = exp2(log2(1.0 / ((_3309 * 3.5) + 5.0)) * 0.25);
                                float _3333 = 1.0 - _537;
                                float _3340 = sqrt(1.0 - ((1.0 - (_3333 * _3333)) * (1.0 - (_3332 * _3332))));
                                float _3341 = _3340 * _3340;
                                float _3342 = _3341 * _3341;
                                float _3343 = _3289 - _2790;
                                float _3344 = _3290 - _2791;
                                float _3345 = _3291 - _2792;
                                float _3349 = inversesqrt(dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345)));
                                float _3353 = dot(vec3(_462, _465, _468), vec3((-0.0) - _2790, (-0.0) - _2791, (-0.0) - _2792));
                                float _4465 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3356 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                                float _3357 = dot(vec3(_462, _465, _468), vec3(_3349 * _3343, _3349 * _3344, _3349 * _3345));
                                float _4476 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3360 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                                float _3364 = ((_3360 * _3360) * (_3342 + (-1.0))) + 1.0;
                                float _3365 = _3302 * _3341;
                                float _3366 = _3365 * _3365;
                                float _3372 = ((1.0 - _3366) * dot(vec3(_462, _465, _468), vec3(_3289, _3290, _3291))) + _3366;
                                float _4487 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3373 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3374 = 1.0 - _3341;
                                float _3384 = (0.5 / (((_3373 * ((_3356 * _3374) + _3341)) + 9.9999999392252902907785028219223e-09) + (((_3373 * _3374) + _3341) * _3356))) * _3373;
                                float _4498 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                                float _3394 = (_3319 * _3296) * (((_3342 * 3.1415927410125732421875) * (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) / ((_3364 * _3364) * ((_3309 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3394 * _3175.z;
                                frontier_phi_80_pred_1 = _3394 * _3175.y;
                                frontier_phi_80_pred_2 = _3394 * _3175.x;
                                frontier_phi_80_pred_3 = _3320 * _3163.z;
                                frontier_phi_80_pred_4 = _3320 * _3163.y;
                                frontier_phi_80_pred_5 = _3320 * _3163.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3400 = frontier_phi_80_pred;
                            _3399 = frontier_phi_80_pred_1;
                            _3398 = frontier_phi_80_pred_2;
                            _3403 = frontier_phi_80_pred_3;
                            _3402 = frontier_phi_80_pred_4;
                            _3401 = frontier_phi_80_pred_5;
                            _3105 = _3401 + _3118;
                            _3106 = _3402 + _3119;
                            _3107 = _3403 + _3120;
                            _3102 = _3398 + _3115;
                            _3103 = _3399 + _3116;
                            _3104 = _3400 + _3117;
                            if (_3122 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3115 = _3102;
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3105;
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3122;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3104;
                        frontier_phi_74_pred_1 = _3103;
                        frontier_phi_74_pred_2 = _3102;
                        frontier_phi_74_pred_3 = _3107;
                        frontier_phi_74_pred_4 = _3106;
                        frontier_phi_74_pred_5 = _3105;
                    }
                    _2769 = frontier_phi_74_pred;
                    _2767 = frontier_phi_74_pred_1;
                    _2765 = frontier_phi_74_pred_2;
                    _2775 = frontier_phi_74_pred_3;
                    _2773 = frontier_phi_74_pred_4;
                    _2771 = frontier_phi_74_pred_5;
                    uint _2910 = _2909 + 1u;
                    if (_2910 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2903 = _2765;
                        _2904 = _2767;
                        _2905 = _2769;
                        _2906 = _2771;
                        _2907 = _2773;
                        _2908 = _2775;
                        _2909 = _2910;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2773;
                frontier_phi_62_63_ladder_1 = _2771;
                frontier_phi_62_63_ladder_2 = _2769;
                frontier_phi_62_63_ladder_3 = _2775;
                frontier_phi_62_63_ladder_4 = _2767;
                frontier_phi_62_63_ladder_5 = _2765;
            }
            else
            {
                frontier_phi_62_63_ladder = _2660;
                frontier_phi_62_63_ladder_1 = _2658;
                frontier_phi_62_63_ladder_2 = _2656;
                frontier_phi_62_63_ladder_3 = _2662;
                frontier_phi_62_63_ladder_4 = _2654;
                frontier_phi_62_63_ladder_5 = _2652;
            }
            _2764 = frontier_phi_62_63_ladder_5;
            _2766 = frontier_phi_62_63_ladder_4;
            _2768 = frontier_phi_62_63_ladder_2;
            _2770 = frontier_phi_62_63_ladder_1;
            _2772 = frontier_phi_62_63_ladder;
            _2774 = frontier_phi_62_63_ladder_3;
        }
        float _2779 = isnan(1.0) ? _521 : (isnan(_521) ? 1.0 : min(_521, 1.0));
        _2555 = (_2779 * _2770) + _2068;
        _2557 = (_2779 * _2772) + _2070;
        _2559 = (_2779 * _2774) + _2072;
        _2561 = ((_2764 * _506) * _2779) + _2406;
        _2563 = ((_2766 * _508) * _2779) + _2408;
        _2565 = ((_2768 * _509) * _2779) + _2410;
    }
    else
    {
        _2555 = _2068;
        _2557 = _2070;
        _2559 = _2072;
        _2561 = _2406;
        _2563 = _2408;
        _2565 = _2410;
    }
    uint _2571 = _482 + uint(cbMatDynParam._m0[0u].w);
    float _4514 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _4525 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _4536 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _4547 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _2606 = (((isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2555 + ((isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))) * _521))) + ((_2561 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _1330)) * cbPerFrame._m0[3u].x)) + ((((cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _356) * _396) * cbInstanceData._m0[_2571].x);
    float _2608 = (((((cbMtdParam._m0[10u].y * TEXCOORD_1.z) * _356) * _396) * cbInstanceData._m0[_2571].y) + ((_2563 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _1330)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2557 + ((isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))) * _521)));
    float _2610 = (((((cbMtdParam._m0[10u].z * TEXCOORD_1.z) * _356) * _396) * cbInstanceData._m0[_2571].z) + ((_2565 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _1330)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2559 + ((isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))) * _521)));
    float _2618 = cbInstanceData._m0[_481 + 6u].w * (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)));
    float _2623 = _440 / cbSceneParam._m0[86u].x;
    float _2624 = _441 / cbSceneParam._m0[86u].y;
    vec4 _2638 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2623, _2624, (log2((isnan(cbSceneParam._m0[77u].w) ? _434 : (isnan(_434) ? cbSceneParam._m0[77u].w : min(_434, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2640 = _2638.x;
    float _2641 = _2638.y;
    float _2642 = _2638.z;
    float _2643 = _2638.w;
    float _2714;
    float _2716;
    float _2718;
    float _2720;
    if (_434 > cbSceneParam._m0[78u].w)
    {
        float _2677 = isnan(_434) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _434 : min(cbSceneParam._m0[80u].w, _434));
        float _2678 = _2677 / _434;
        float _2689 = _2678 * _273;
        float _2690 = _274 * _2678;
        float _2691 = (-0.0) - _2690;
        float _2692 = _2678 * _275;
        float _2694 = (cbSceneParam._m0[77u].w * _2691) / _2677;
        float _2695 = _2694 + cbSceneParam._m0[79u].w;
        float _2696 = cbSceneParam._m0[79u].w - _2690;
        float _2702 = sqrt(((_2689 * _2689) + (_2690 * _2690)) + (_2692 * _2692));
        float _2705 = (1.0 - (cbSceneParam._m0[77u].w / _2677)) * _2702;
        float _2710 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2712 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2865;
        if (abs((_2691 - _2694) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2865 = ((((_2695 > 0.0) ? exp2(_2710 * _2695) : (2.0 - exp2(_2712 * _2695))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2705;
        }
        else
        {
            float _2825 = 1.0 / cbSceneParam._m0[80u].x;
            float _2826 = isnan(_2696) ? _2695 : (isnan(_2695) ? _2696 : max(_2695, _2696));
            float _2827 = isnan(_2696) ? _2695 : (isnan(_2695) ? _2696 : min(_2695, _2696));
            float _2836 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : min(_2826, 0.0));
            float _2837 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : min(_2827, 0.0));
            _2865 = ((abs(_2702 / _2691) * cbSceneParam._m0[80u].y) * ((((_2836 - _2837) * 2.0) - ((exp2(_2710 * (isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0)))) - exp2(_2710 * (isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0))))) * _2825)) - ((exp2(_2712 * _2836) - exp2(_2712 * _2837)) * _2825))) + (_2705 * cbSceneParam._m0[80u].z);
        }
        vec4 _2867 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2623, _2624, 1.0), 0.0);
        float _2876 = exp2((_2865 * (-1.44269502162933349609375)) * (1.0 - _2867.w));
        float _2877 = log2(_2876);
        float _2893 = log2(_2643);
        _2714 = (exp2(_2893 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2877 * cbSceneParam._m0[78u].x)) * _2867.x) / cbSceneParam._m0[78u].x)) + _2640;
        _2716 = (exp2(_2893 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2877 * cbSceneParam._m0[78u].y)) * _2867.y) / cbSceneParam._m0[78u].y)) + _2641;
        _2718 = (exp2(_2893 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2877 * cbSceneParam._m0[78u].z)) * _2867.z) / cbSceneParam._m0[78u].z)) + _2642;
        _2720 = _2876 * _2643;
    }
    else
    {
        _2714 = _2640;
        _2716 = _2641;
        _2718 = _2642;
        _2720 = _2643;
    }
    float _2732 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2733 = _2732 == 3.0;
    float _2734 = log2(_2720);
    float _2741 = exp2(_2734 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0)));
    float _2742 = exp2(_2734 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0)));
    float _2743 = exp2(_2734 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0)));
    float _2752 = (_2732 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2752 * (_2733 ? _2741 : (_2741 + (cbSceneParam._m0[72u].w * _2714)));
    SV_Target.y = _2752 * (_2733 ? _2742 : (_2742 + (cbSceneParam._m0[72u].w * _2716)));
    SV_Target.z = _2752 * (_2733 ? _2743 : (_2743 + (cbSceneParam._m0[72u].w * _2718)));
    SV_Target.w = _2618;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2618;
}


