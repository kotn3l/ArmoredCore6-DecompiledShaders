#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D I_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D I_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1021;
float _3722;
float _3723;
float _3724;
float _3725;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221;
    float _222;
    float _223;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
    }
    else
    {
        _221 = _207;
        _222 = _208;
        _223 = _209;
    }
    float _267 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _277 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _267);
    float _278 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _267);
    float _279 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _267);
    vec4 _297 = texture(sampler2D(I_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _303 = _297.w;
    float _304 = _297.x * cbMtdParam._m0[9u].x;
    float _305 = _297.y * cbMtdParam._m0[9u].y;
    float _306 = _297.z * cbMtdParam._m0[9u].z;
    vec4 _321 = texture(sampler2D(I_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _325 = _321.z;
    float _329 = (_321.x * 2.0) + (-1.0);
    float _331 = (_321.y * 2.0) + (-1.0);
    float _332 = dot(vec2(_329, _331), vec2(_329, _331));
    float _3734 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _338 = sqrt(1.0 - (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))));
    float _353 = sqrt(((_277 * _277) + (_278 * _278)) + (_279 * _279));
    float _356 = cbMtdParam._m0[12u].x - cbMtdParam._m0[12u].w;
    float _358 = (_353 - cbMtdParam._m0[12u].w) / (isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0)));
    float _3750 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _360 = 1.0 - (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)));
    float _368 = abs((fract(cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3761 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _369 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _379 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _386 = inversesqrt(dot(vec3(_277, _278, _279), vec3(_277, _278, _279)));
    float _393 = dot(vec4(_386 * _277, _386 * _278, _386 * _279, 0.0), vec4(_379 * _221, _379 * _222, _379 * _223, 0.0)) - (((_369 * _369) * cbMtdParam._m0[11u].w) * (3.0 - (_369 * 2.0)));
    float _3772 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _400 = exp2(log2(1.0 - (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    float _404 = cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y;
    float _415 = gl_FragCoord.x * 0.125;
    float _417 = gl_FragCoord.y * 0.125;
    float _428 = fma(_338, _221, fma(_331, _213 * TANGENT.x, (_199 * _191) * _329));
    float _431 = fma(_338, _222, fma(_331, _213 * TANGENT.y, (_199 * _192) * _329));
    float _434 = fma(_338, _223, fma(_331, _213 * TANGENT.z, (_199 * _193) * _329));
    float _438 = inversesqrt(dot(vec3(_428, _431, _434), vec3(_428, _431, _434)));
    float _439 = _438 * _428;
    float _440 = _438 * _431;
    float _441 = _438 * _434;
    float _3793 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _442 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _3804 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _443 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _3815 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _3826 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3837 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _3848 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _447 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    if (!(((floatBitsToUint(cbSceneParam._m0[69u]).w != 0u) ? ((_353 - cbMtdParam._m0[12u].y) / (isnan(0.001000000047497451305389404296875) ? _404 : (isnan(_404) ? 0.001000000047497451305389404296875 : max(_404, 0.001000000047497451305389404296875)))) : 1.0) >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_415, _417)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _466 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _506 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _515 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _506);
    float _516 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _506);
    float _517 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _506);
    float _521 = inversesqrt(dot(vec3(_515, _516, _517), vec3(_515, _516, _517)));
    float _522 = _515 * _521;
    float _523 = _516 * _521;
    float _524 = _517 * _521;
    vec4 _526 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_415, _417));
    float _528 = _526.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _702 = sqrt(((_515 * _515) + (_516 * _516)) + (_517 * _517));
        float _708 = (cbMatDynParam._m0[5u].x * _702) + cbMatDynParam._m0[5u].y;
        float _3859 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _709 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _713 = (cbMatDynParam._m0[5u].z * _702) + cbMatDynParam._m0[5u].w;
        float _3870 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) - _709)) + _709) < ((_528 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _540 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _541 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _561 = fma(_441, cbSceneParam._m0[5u].z, fma(_440, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _439));
    float _564 = fma(_441, cbSceneParam._m0[6u].z, fma(_440, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _439));
    float _567 = fma(_441, cbSceneParam._m0[7u].z, fma(_440, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _439));
    uint _580 = uint(roundEven(NORMAL.w)) * 13u;
    uint _581 = _580 + 9u;
    uint _582 = _581 + uint(cbMatDynParam._m0[0u].w);
    float _588 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * cbInstanceData._m0[_582].x;
    float _589 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * cbInstanceData._m0[_582].y;
    float _590 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * cbInstanceData._m0[_582].z;
    float _3881 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _591 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _3892 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _592 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _593 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _594 = 1.0 - _447;
    float _595 = _591 * _594;
    float _596 = _592 * _594;
    float _597 = _593 * _594;
    float _602 = (_591 + (-0.039999999105930328369140625)) * _447;
    float _603 = (_592 + (-0.039999999105930328369140625)) * _447;
    float _604 = (_593 + (-0.039999999105930328369140625)) * _447;
    float _605 = _602 + 0.039999999105930328369140625;
    float _607 = _603 + 0.039999999105930328369140625;
    float _608 = _604 + 0.039999999105930328369140625;
    vec4 _617 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _540, cbSceneParam._m0[86u].y * _541));
    float _620 = _617.x * TEXCOORD_1.w;
    float _621 = dot(vec3(_439, _440, _441), vec3(_522, _523, _524));
    float _624 = _621 * 2.0;
    float _628 = (_624 * _439) - _522;
    float _629 = (_624 * _440) - _523;
    float _630 = (_624 * _441) - _524;
    float _634 = abs(dot(vec3(_522, _523, _524), vec3(_439, _440, _441)));
    float _3914 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _636 = sqrt(_443);
    float _648 = exp2((_636 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_636 * 3.0));
    float _654 = (1.0 - _648) * ((_636 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _655 = _648 * _636;
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1020;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _745 = fma(_691, cbModelParam._m0[26u].z, fma(_687, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _683));
        float _749 = fma(_691, cbModelParam._m0[27u].z, fma(_687, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _683));
        float _753 = fma(_691, cbModelParam._m0[28u].z, fma(_687, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _683));
        float _778 = _683 + _439;
        float _779 = _687 + _440;
        float _780 = _691 + _441;
        float _790 = fma(_780, cbModelParam._m0[26u].z, fma(_779, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _778)) - _745;
        float _791 = fma(_780, cbModelParam._m0[27u].z, fma(_779, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _778)) - _749;
        float _792 = fma(_780, cbModelParam._m0[28u].z, fma(_779, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _778)) - _753;
        float _796 = inversesqrt(dot(vec3(_790, _791, _792), vec3(_790, _791, _792)));
        float _809 = ((_796 * _790) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_745 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _810 = ((_796 * _791) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_749 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _811 = ((_796 * _792) / cbModelParam._m0[34u].z) + ((((((_753 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        float _848 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_814.x + (-0.5));
        float _850 = _848 * (_814.y + (-0.5));
        float _851 = _848 * (_814.z + (-0.5));
        float _858 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_821.x + (-0.5));
        float _860 = _858 * (_821.y + (-0.5));
        float _861 = _858 * (_821.z + (-0.5));
        float _868 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_828.x + (-0.5));
        float _870 = _868 * (_828.y + (-0.5));
        float _871 = _868 * (_828.z + (-0.5));
        float _878 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_835.x + (-0.5));
        float _880 = _878 * (_835.y + (-0.5));
        float _881 = _878 * (_835.z + (-0.5));
        float _882 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _885 = _849 * 0.5;
        float _886 = _859 * 0.5;
        float _887 = _869 * 0.5;
        float _888 = dot(vec3(_885, _886, _887), vec3(_885, _886, _887));
        float _893 = (_888 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_888);
        float _902 = (dot(vec3(_439, _440, _441), vec3(_893 * _885, _893 * _886, _893 * _887)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _912 = sqrt(((_886 * _886) + (_885 * _885)) + (_887 * _887)) / (_882 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _914 = _913 * 2.0;
        float _918 = (1.0 - _913) / (_913 + 1.0);
        float _3962 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _928 = ((((1.0 - _919) * (_914 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_914 + 1.0))) + _919) * _882;
        float _929 = _850 * 0.5;
        float _930 = _860 * 0.5;
        float _931 = _870 * 0.5;
        float _932 = dot(vec3(_929, _930, _931), vec3(_929, _930, _931));
        float _937 = (_932 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_932);
        float _945 = (dot(vec3(_439, _440, _441), vec3(_937 * _929, _937 * _930, _937 * _931)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _954 = sqrt(((_930 * _930) + (_929 * _929)) + (_931 * _931)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _956 = _955 * 2.0;
        float _960 = (1.0 - _955) / (_955 + 1.0);
        float _3995 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _970 = ((((1.0 - _961) * (_956 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_956 + 1.0))) + _961) * _883;
        float _971 = _851 * 0.5;
        float _972 = _861 * 0.5;
        float _973 = _871 * 0.5;
        float _974 = dot(vec3(_971, _972, _973), vec3(_971, _972, _973));
        float _979 = (_974 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_974);
        float _987 = (dot(vec3(_439, _440, _441), vec3(_979 * _971, _979 * _972, _979 * _973)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _996 = sqrt(((_972 * _972) + (_971 * _971)) + (_973 * _973)) / (_884 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _998 = _997 * 2.0;
        float _1002 = (1.0 - _997) / (_997 + 1.0);
        float _4028 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1012 = ((((1.0 - _1003) * (_998 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_998 + 1.0))) + _1003) * _884;
        _1020 = _851;
        _1022 = _850;
        _1023 = _849;
        _1024 = _861;
        _1025 = _860;
        _1026 = _859;
        _1027 = _871;
        _1028 = _870;
        _1029 = _869;
        _1030 = _884;
        _1031 = _883;
        _1032 = _882;
        _1033 = cbModelParam._m0[36u].z * (isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0)));
        _1034 = cbModelParam._m0[36u].z * (isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0)));
        _1035 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0)));
    }
    else
    {
        _1020 = _1021;
        _1022 = _1021;
        _1023 = _1021;
        _1024 = _1021;
        _1025 = _1021;
        _1026 = _1021;
        _1027 = _1021;
        _1028 = _1021;
        _1029 = _1021;
        _1030 = _1021;
        _1031 = _1021;
        _1032 = _1021;
        _1033 = 0.0;
        _1034 = 0.0;
        _1035 = 0.0;
    }
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1061 = fma(_691, cbModelParam._m0[30u].z, fma(_687, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _683));
        float _1065 = fma(_691, cbModelParam._m0[31u].z, fma(_687, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _683));
        float _1069 = fma(_691, cbModelParam._m0[32u].z, fma(_687, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _683));
        float _1092 = _683 + _439;
        float _1093 = _687 + _440;
        float _1094 = _691 + _441;
        float _1104 = fma(_1094, cbModelParam._m0[30u].z, fma(_1093, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1092)) - _1061;
        float _1105 = fma(_1094, cbModelParam._m0[31u].z, fma(_1093, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1092)) - _1065;
        float _1106 = fma(_1094, cbModelParam._m0[32u].z, fma(_1093, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1092)) - _1069;
        float _1110 = inversesqrt(dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106)));
        float _1123 = ((_1110 * _1104) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1061 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1110 * _1105) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1065 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1110 * _1106) / cbModelParam._m0[35u].z) + ((((((_1069 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        float _1160 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1127.x + (-0.5));
        float _1162 = _1160 * (_1127.y + (-0.5));
        float _1163 = _1160 * (_1127.z + (-0.5));
        float _1170 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1134.x + (-0.5));
        float _1172 = _1170 * (_1134.y + (-0.5));
        float _1173 = _1170 * (_1134.z + (-0.5));
        float _1180 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1141.x + (-0.5));
        float _1182 = _1180 * (_1141.y + (-0.5));
        float _1183 = _1180 * (_1141.z + (-0.5));
        float _1190 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1148.x + (-0.5));
        float _1192 = _1190 * (_1148.y + (-0.5));
        float _1193 = _1190 * (_1148.z + (-0.5));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = _1161 * 0.5;
        float _1198 = _1171 * 0.5;
        float _1199 = _1181 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_439, _440, _441), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _4091 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1224 + 1.0))) + _1229) * _1194;
        float _1239 = _1162 * 0.5;
        float _1240 = _1172 * 0.5;
        float _1241 = _1182 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_439, _440, _441), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _4124 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1266 + 1.0))) + _1271) * _1195;
        float _1281 = _1163 * 0.5;
        float _1282 = _1173 * 0.5;
        float _1283 = _1183 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_439, _440, _441), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _4157 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1308 + 1.0))) + _1313) * _1196;
        _1330 = _1163;
        _1331 = _1162;
        _1332 = _1161;
        _1333 = _1173;
        _1334 = _1172;
        _1335 = _1171;
        _1336 = _1183;
        _1337 = _1182;
        _1338 = _1181;
        _1339 = _1196;
        _1340 = _1195;
        _1341 = _1194;
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
        _1343 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1344 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
    }
    else
    {
        _1330 = _1021;
        _1331 = _1021;
        _1332 = _1021;
        _1333 = _1021;
        _1334 = _1021;
        _1335 = _1021;
        _1336 = _1021;
        _1337 = _1021;
        _1338 = _1021;
        _1339 = _1021;
        _1340 = _1021;
        _1341 = _1021;
        _1342 = 0.0;
        _1343 = 0.0;
        _1344 = 0.0;
    }
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1033)) + _1033;
    float _1355 = (cbModelParam._m0[1u].x * (_1343 - _1034)) + _1034;
    float _1356 = (cbModelParam._m0[1u].x * (_1344 - _1035)) + _1035;
    float _1377 = fma(_1356, cbSceneParam._m0[89u].z, fma(_1355, cbSceneParam._m0[89u].y, _1354 * cbSceneParam._m0[89u].x));
    float _1380 = fma(_1356, cbSceneParam._m0[90u].z, fma(_1355, cbSceneParam._m0[90u].y, _1354 * cbSceneParam._m0[90u].x));
    float _1383 = fma(_1356, cbSceneParam._m0[91u].z, fma(_1355, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1354));
    float _1398 = _628 * 0.5;
    float _1399 = _629 * 0.5;
    float _1400 = _630 * 0.5;
    float _1401 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1332, _1335, _1338, _1341));
    float _1404 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1331, _1334, _1337, _1340));
    float _1407 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1441;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1414 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1020, _1024, _1027, _1030));
        float _1418 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1022, _1025, _1028, _1031));
        float _1422 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1023, _1026, _1029, _1032));
        float _1429 = dot(vec4(cbModelParam._m0[39u]), vec4(_1398, _1399, _1400, 1.0));
        _1441 = dot(vec3(isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1429) ? 0.0 : (isnan(0.0) ? _1429 : max(0.0, _1429))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1441 = 1.0;
    }
    float _1452;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1443 = dot(vec4(cbModelParam._m0[40u]), vec4(_1398, _1399, _1400, 1.0));
        _1452 = dot(vec3(isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1443) ? 0.0 : (isnan(0.0) ? _1443 : max(0.0, _1443))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1452 = 1.0;
    }
    float _1456 = (_1452 * cbModelParam._m0[1u].x) + (_1441 * (1.0 - cbModelParam._m0[1u].x));
    float _1466 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _443);
    float _1467 = isnan(_1466) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1466 : min(cbModelParam._m0[25u].z, _1466));
    float _1549;
    float _1551;
    float _1553;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1516 = fma(_691, cbModelParam._m0[13u].z, fma(_687, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _683)) + cbModelParam._m0[13u].w;
        float _1520 = fma(_691, cbModelParam._m0[14u].z, fma(_687, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _683)) + cbModelParam._m0[14u].w;
        float _1524 = fma(_691, cbModelParam._m0[15u].z, fma(_687, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _683)) + cbModelParam._m0[15u].w;
        float _1527 = fma(_630, cbModelParam._m0[13u].z, fma(_629, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _628));
        float _1530 = fma(_630, cbModelParam._m0[14u].z, fma(_629, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _628));
        float _1533 = fma(_630, cbModelParam._m0[15u].z, fma(_629, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _628));
        float _1561;
        if (_1527 > 0.0)
        {
            _1561 = abs((1.0 - _1516) / _1527);
        }
        else
        {
            float frontier_phi_21_19_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_21_19_ladder = abs((_1516 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_21_19_ladder = 5000.0;
            }
            _1561 = frontier_phi_21_19_ladder;
        }
        float _1735;
        if (_1530 > 0.0)
        {
            _1735 = abs((1.0 - _1520) / _1530);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1520 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1735 = frontier_phi_30_26_ladder;
        }
        float _2031;
        if (_1533 > 0.0)
        {
            _2031 = abs((1.0 - _1524) / _1533);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1524 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2031 = frontier_phi_42_37_ladder;
        }
        float _2033 = isnan(_1735) ? _1561 : (isnan(_1561) ? _1735 : min(_1561, _1735));
        float _2034 = isnan(_2031) ? _2033 : (isnan(_2033) ? _2031 : min(_2033, _2031));
        float _2038 = (_2034 * _1527) + _1516;
        float _2039 = (_2034 * _1530) + _1520;
        float _2040 = (_2034 * _1533) + _1524;
        float _2041 = _2034 * 9.9999997473787516355514526367188e-05;
        float _2043 = (-1.0) - _2041;
        float _2045 = _2041 + 1.0;
        float frontier_phi_20_42_ladder;
        float frontier_phi_20_42_ladder_1;
        float frontier_phi_20_42_ladder_2;
        if ((_2040 > _2045) || ((_2040 < _2043) || ((_2039 > _2045) || ((_2039 < _2043) || ((_2038 < _2043) || (_2038 > _2045))))))
        {
            frontier_phi_20_42_ladder = 0.0;
            frontier_phi_20_42_ladder_1 = 0.0;
            frontier_phi_20_42_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2185 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2040, cbModelParam._m0[9u].z, fma(_2039, cbModelParam._m0[9u].y, _2038 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2040, cbModelParam._m0[10u].z, fma(_2039, cbModelParam._m0[10u].y, _2038 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2040, cbModelParam._m0[11u].z, fma(_2039, cbModelParam._m0[11u].y, _2038 * cbModelParam._m0[11u].x))), _1467);
            frontier_phi_20_42_ladder = _2185.z * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_1 = _2185.y * cbModelParam._m0[1u].y;
            frontier_phi_20_42_ladder_2 = _2185.x * cbModelParam._m0[1u].y;
        }
        _1549 = frontier_phi_20_42_ladder_2;
        _1551 = frontier_phi_20_42_ladder_1;
        _1553 = frontier_phi_20_42_ladder;
    }
    else
    {
        vec4 _1537 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_628, _629, _630), _1467);
        _1549 = _1537.x * cbModelParam._m0[1u].y;
        _1551 = _1537.y * cbModelParam._m0[1u].y;
        _1553 = _1537.z * cbModelParam._m0[1u].y;
    }
    float _1557 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _443);
    float _1558 = isnan(_1557) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1557 : min(cbModelParam._m0[25u].w, _1557));
    float _1650;
    float _1652;
    float _1654;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1614 = fma(_691, cbModelParam._m0[21u].z, fma(_687, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _683)) + cbModelParam._m0[21u].w;
        float _1618 = fma(_691, cbModelParam._m0[22u].z, fma(_687, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _683)) + cbModelParam._m0[22u].w;
        float _1622 = fma(_691, cbModelParam._m0[23u].z, fma(_687, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _683)) + cbModelParam._m0[23u].w;
        float _1625 = fma(_630, cbModelParam._m0[21u].z, fma(_629, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _628));
        float _1628 = fma(_630, cbModelParam._m0[22u].z, fma(_629, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _628));
        float _1631 = fma(_630, cbModelParam._m0[23u].z, fma(_629, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _628));
        float _1740;
        if (_1625 > 0.0)
        {
            _1740 = abs((1.0 - _1614) / _1625);
        }
        else
        {
            float frontier_phi_32_28_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_32_28_ladder = abs((_1614 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_32_28_ladder = 5000.0;
            }
            _1740 = frontier_phi_32_28_ladder;
        }
        float _2058;
        if (_1628 > 0.0)
        {
            _2058 = abs((1.0 - _1618) / _1628);
        }
        else
        {
            float frontier_phi_44_39_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_44_39_ladder = abs((_1618 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_44_39_ladder = 5000.0;
            }
            _2058 = frontier_phi_44_39_ladder;
        }
        float _2396;
        if (_1631 > 0.0)
        {
            _2396 = abs((1.0 - _1622) / _1631);
        }
        else
        {
            float frontier_phi_54_51_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_54_51_ladder = abs((_1622 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_54_51_ladder = 5000.0;
            }
            _2396 = frontier_phi_54_51_ladder;
        }
        float _2398 = isnan(_2058) ? _1740 : (isnan(_1740) ? _2058 : min(_1740, _2058));
        float _2399 = isnan(_2396) ? _2398 : (isnan(_2398) ? _2396 : min(_2398, _2396));
        float _2403 = (_2399 * _1625) + _1614;
        float _2404 = (_2399 * _1628) + _1618;
        float _2405 = (_2399 * _1631) + _1622;
        float _2406 = _2399 * 9.9999997473787516355514526367188e-05;
        float _2407 = (-1.0) - _2406;
        float _2409 = _2406 + 1.0;
        float frontier_phi_29_54_ladder;
        float frontier_phi_29_54_ladder_1;
        float frontier_phi_29_54_ladder_2;
        if ((_2405 > _2409) || ((_2405 < _2407) || ((_2404 > _2409) || ((_2404 < _2407) || ((_2403 < _2407) || (_2403 > _2409))))))
        {
            frontier_phi_29_54_ladder = 0.0;
            frontier_phi_29_54_ladder_1 = 0.0;
            frontier_phi_29_54_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2527 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2405, cbModelParam._m0[17u].z, fma(_2404, cbModelParam._m0[17u].y, _2403 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2405, cbModelParam._m0[18u].z, fma(_2404, cbModelParam._m0[18u].y, _2403 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2405, cbModelParam._m0[19u].z, fma(_2404, cbModelParam._m0[19u].y, _2403 * cbModelParam._m0[19u].x))), _1558);
            frontier_phi_29_54_ladder = _2527.z * cbModelParam._m0[1u].z;
            frontier_phi_29_54_ladder_1 = _2527.y * cbModelParam._m0[1u].z;
            frontier_phi_29_54_ladder_2 = _2527.x * cbModelParam._m0[1u].z;
        }
        _1650 = frontier_phi_29_54_ladder_2;
        _1652 = frontier_phi_29_54_ladder_1;
        _1654 = frontier_phi_29_54_ladder;
    }
    else
    {
        vec4 _1634 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_628, _629, _630), _1558);
        _1650 = _1634.x * cbModelParam._m0[1u].z;
        _1652 = _1634.y * cbModelParam._m0[1u].z;
        _1654 = _1634.z * cbModelParam._m0[1u].z;
    }
    float _1667 = (((_654 * _605) + _655) * _620) * ((cbModelParam._m0[1u].w * (_1650 - _1549)) + _1549);
    float _1669 = (((_654 * _607) + _655) * _620) * ((cbModelParam._m0[1u].w * (_1652 - _1551)) + _1551);
    float _1671 = (((_654 * _608) + _655) * _620) * ((cbModelParam._m0[1u].w * (_1654 - _1553)) + _1553);
    float _1674 = fma(_1671, cbSceneParam._m0[89u].z, fma(_1669, cbSceneParam._m0[89u].y, _1667 * cbSceneParam._m0[89u].x));
    float _1677 = fma(_1671, cbSceneParam._m0[90u].z, fma(_1669, cbSceneParam._m0[90u].y, _1667 * cbSceneParam._m0[90u].x));
    float _1680 = fma(_1671, cbSceneParam._m0[91u].z, fma(_1669, cbSceneParam._m0[91u].y, _1667 * cbSceneParam._m0[91u].x));
    float _1714 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1718 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1722 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1726 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1727 = _1714 / _1726;
    float _1728 = _1718 / _1726;
    float _1729 = _1722 / _1726;
    float _1876;
    float _1877;
    float _1878;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1756 = ((uint(_1729 > cbSceneParam._m0[59u].y) + uint(_1729 > cbSceneParam._m0[59u].x)) + uint(_1729 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1757 = _1756 + 43u;
        uint _1765 = _1756 + 44u;
        uint _1773 = _1756 + 45u;
        uint _1781 = _1756 + 46u;
        float _1792 = fma(_1726, cbSceneParam._m0[_1757].w, fma(_1722, cbSceneParam._m0[_1757].z, fma(_1718, cbSceneParam._m0[_1757].y, _1714 * cbSceneParam._m0[_1757].x)));
        float _1796 = fma(_1726, cbSceneParam._m0[_1765].w, fma(_1722, cbSceneParam._m0[_1765].z, fma(_1718, cbSceneParam._m0[_1765].y, _1714 * cbSceneParam._m0[_1765].x)));
        float _1804 = fma(_1726, cbSceneParam._m0[_1781].w, fma(_1722, cbSceneParam._m0[_1781].z, fma(_1718, cbSceneParam._m0[_1781].y, _1714 * cbSceneParam._m0[_1781].x)));
        float _1809 = cbSceneParam._m0[33u].z * _1804;
        float _1811 = cbSceneParam._m0[33u].w * _1804;
        float _1814 = fma(_1726, cbSceneParam._m0[_1773].w, fma(_1722, cbSceneParam._m0[_1773].z, fma(_1718, cbSceneParam._m0[_1773].y, _1714 * cbSceneParam._m0[_1773].x))) / _1804;
        float _1862 = (cbSceneParam._m0[33u].x - sqrt(((_1728 * _1728) + (_1727 * _1727)) + (_1729 * _1729))) * cbSceneParam._m0[33u].y;
        float _4283 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1869 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1809 + _1792) / _1804, (_1811 + _1796) / _1804), _1814), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1811 + _1792) / _1804, (_1796 - _1809) / _1804), _1814), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1792 - _1809) / _1804, (_1796 - _1811) / _1804), _1814), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1792 - _1811) / _1804, (_1809 + _1796) / _1804), _1814), 0.0)).x), vec4(0.25)));
        _1876 = 1.0 - (_1869 * cbSceneParam._m0[34u].x);
        _1877 = 1.0 - (_1869 * cbSceneParam._m0[34u].y);
        _1878 = 1.0 - (_1869 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1876 = 1.0;
        _1877 = 1.0;
        _1878 = 1.0;
    }
    float _1942;
    float _1944;
    float _1946;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1930 = fma(_1726, cbSceneParam._m0[63u].w, fma(_1722, cbSceneParam._m0[63u].z, fma(_1718, cbSceneParam._m0[63u].y, _1714 * cbSceneParam._m0[63u].x)));
        float _1931 = fma(_1726, cbSceneParam._m0[60u].w, fma(_1722, cbSceneParam._m0[60u].z, fma(_1718, cbSceneParam._m0[60u].y, _1714 * cbSceneParam._m0[60u].x))) / _1930;
        float _1932 = fma(_1726, cbSceneParam._m0[61u].w, fma(_1722, cbSceneParam._m0[61u].z, fma(_1718, cbSceneParam._m0[61u].y, _1714 * cbSceneParam._m0[61u].x))) / _1930;
        float frontier_phi_41_40_ladder;
        float frontier_phi_41_40_ladder_1;
        float frontier_phi_41_40_ladder_2;
        if ((((_1931 >= cbSceneParam._m0[64u].x) && (_1932 >= cbSceneParam._m0[64u].y)) && (_1931 <= cbSceneParam._m0[64u].z)) && (_1932 <= cbSceneParam._m0[64u].w))
        {
            float _2071 = fma(_1726, cbSceneParam._m0[62u].w, fma(_1722, cbSceneParam._m0[62u].z, fma(_1718, cbSceneParam._m0[62u].y, _1714 * cbSceneParam._m0[62u].x))) / _1930;
            float _2075 = isnan(cbSceneParam._m0[41u].w) ? _2071 : (isnan(_2071) ? cbSceneParam._m0[41u].w : max(_2071, cbSceneParam._m0[41u].w));
            float _2118 = (cbSceneParam._m0[33u].x - sqrt(((_1728 * _1728) + (_1727 * _1727)) + (_1729 * _1729))) * cbSceneParam._m0[33u].y;
            float _4299 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
            float _2125 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1931, cbSceneParam._m0[33u].w + _1932), _2075), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1931, _1932 - cbSceneParam._m0[33u].z), _2075), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1931 - cbSceneParam._m0[33u].z, _1932 - cbSceneParam._m0[33u].w), _2075), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1931 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1932), _2075), 0.0)).x), vec4(0.25)));
            float _2129 = 1.0 - (_2125 * cbSceneParam._m0[34u].x);
            float _2130 = 1.0 - (_2125 * cbSceneParam._m0[34u].y);
            float _2131 = 1.0 - (_2125 * cbSceneParam._m0[34u].z);
            frontier_phi_41_40_ladder = isnan(_2130) ? _1877 : (isnan(_1877) ? _2130 : min(_1877, _2130));
            frontier_phi_41_40_ladder_1 = isnan(_2129) ? _1876 : (isnan(_1876) ? _2129 : min(_1876, _2129));
            frontier_phi_41_40_ladder_2 = isnan(_2131) ? _1878 : (isnan(_1878) ? _2131 : min(_1878, _2131));
        }
        else
        {
            frontier_phi_41_40_ladder = _1877;
            frontier_phi_41_40_ladder_1 = _1876;
            frontier_phi_41_40_ladder_2 = _1878;
        }
        _1942 = frontier_phi_41_40_ladder_1;
        _1944 = frontier_phi_41_40_ladder;
        _1946 = frontier_phi_41_40_ladder_2;
    }
    else
    {
        _1942 = _1876;
        _1944 = _1877;
        _1946 = _1878;
    }
    uvec4 _1951 = floatBitsToUint(cbInstanceData._m0[_580 + 5u]);
    uint _1953 = _1951.x * 14u;
    uint _1954 = _1953 + 13u;
    float _1961 = _620 + (-1.0);
    float _1966 = (cbLight._m0[_1954].x * _1961) + 1.0;
    float _1967 = (cbLight._m0[_1954].y * _1961) + 1.0;
    float _1968 = (cbLight._m0[_1954].z * _1961) + 1.0;
    float _1969 = (cbLight._m0[_1954].w * _1961) + 1.0;
    uint _1970 = _1953 + 5u;
    float _1976 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
    uint _1980 = _1953 + 4u;
    float _1990 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
    uint _1994 = _1953 | 1u;
    float _2005 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_439, _440, _441));
    float _2008 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_439, _440, _441));
    float _4335 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _4346 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2013 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * 0.3183098733425140380859375;
    float _2015 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * 0.3183098733425140380859375;
    float _2022 = ((cbLight._m0[_1970].x * _1976) * _2015) + (((cbLight._m0[_1980].x * _1942) * _1990) * _2013);
    float _2023 = ((_1976 * cbLight._m0[_1970].y) * _2015) + (((cbLight._m0[_1980].y * _1944) * _1990) * _2013);
    float _2024 = ((_1976 * cbLight._m0[_1970].z) * _2015) + (((cbLight._m0[_1980].z * _1946) * _1990) * _2013);
    uvec4 _2028 = floatBitsToUint(cbLight._m0[_1953 + 12u]);
    bool _2030 = _2028.x == 0u;
    float _2132;
    float _2134;
    float _2136;
    if (_2030)
    {
        _2132 = _2022;
        _2134 = _2023;
        _2136 = _2024;
    }
    else
    {
        uint _2140 = _1953 + 6u;
        float _2156 = (dot(vec3(cbLight._m0[_1953 + 2u].xyz), vec3(_439, _440, _441)) * 0.5) + 0.5;
        float _2157 = _2156 * _2156;
        float _4357 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2158 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _2159 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
        _2132 = (((cbLight._m0[_2140].x * 0.3183098733425140380859375) * _2158) * _2159) + _2022;
        _2134 = (((cbLight._m0[_2140].y * 0.3183098733425140380859375) * _2158) * _2159) + _2023;
        _2136 = (((cbLight._m0[_2140].z * 0.3183098733425140380859375) * _2158) * _2159) + _2024;
    }
    bool _2139 = _2028.y == 0u;
    float _2194;
    float _2196;
    float _2198;
    if (_2139)
    {
        _2194 = _2132;
        _2196 = _2134;
        _2198 = _2136;
    }
    else
    {
        uint _2367 = _1953 + 7u;
        float _2383 = (dot(vec3(cbLight._m0[_1953 + 3u].xyz), vec3(_439, _440, _441)) * 0.5) + 0.5;
        float _2384 = _2383 * _2383;
        float _4373 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2385 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2386 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
        _2194 = (((cbLight._m0[_2367].x * 0.3183098733425140380859375) * _2385) * _2386) + _2132;
        _2196 = (((cbLight._m0[_2367].y * 0.3183098733425140380859375) * _2385) * _2386) + _2134;
        _2198 = (((cbLight._m0[_2367].z * 0.3183098733425140380859375) * _2385) * _2386) + _2136;
    }
    uint _2201 = _1953 + 8u;
    float _2214 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1953].w)) * _443) * 0.949999988079071044921875);
    float _2215 = _2214 * _2214;
    float _2216 = cbLight._m0[_1953].x + _522;
    float _2217 = cbLight._m0[_1953].y + _523;
    float _2218 = cbLight._m0[_1953].z + _524;
    float _2222 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
    float _2223 = _2222 * _2216;
    float _2224 = _2222 * _2217;
    float _2225 = _2222 * _2218;
    float _2226 = dot(vec3(_439, _440, _441), vec3(cbLight._m0[_1953].xyz));
    float _4389 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _4400 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _2230 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _2231 = dot(vec3(_439, _440, _441), vec3(_2223, _2224, _2225));
    float _4411 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2234 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _2235 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_2223, _2224, _2225));
    float _4422 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2239 = _2215 * _2215;
    float _2243 = ((_2234 * _2234) * (_2239 + (-1.0))) + 1.0;
    float _2251 = exp2(log2(1.0 - (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) * 5.0);
    float _2252 = 0.959999978542327880859375 - _602;
    float _2254 = 0.959999978542327880859375 - _603;
    float _2255 = 0.959999978542327880859375 - _604;
    float _2262 = 1.0 - _2215;
    float _2273 = (0.5 / (((_2230 * ((_2229 * _2262) + _2215)) + 9.9999999392252902907785028219223e-09) + (((_2230 * _2262) + _2215) * _2229))) * _2229;
    float _4433 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2275 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2239 / ((_2243 * _2243) * 3.141590118408203125));
    uint _2289 = _1953 + 9u;
    float _2300 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1994].w)) * _443) * 0.949999988079071044921875);
    float _2301 = _2300 * _2300;
    float _2302 = cbLight._m0[_1994].x + _522;
    float _2303 = cbLight._m0[_1994].y + _523;
    float _2304 = cbLight._m0[_1994].z + _524;
    float _2308 = inversesqrt(dot(vec3(_2302, _2303, _2304), vec3(_2302, _2303, _2304)));
    float _2309 = _2308 * _2302;
    float _2310 = _2308 * _2303;
    float _2311 = _2308 * _2304;
    float _2312 = dot(vec3(_439, _440, _441), vec3(cbLight._m0[_1994].xyz));
    float _4444 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2316 = dot(vec3(_439, _440, _441), vec3(_2309, _2310, _2311));
    float _4455 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2319 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2320 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_2309, _2310, _2311));
    float _4466 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2324 = _2301 * _2301;
    float _2328 = ((_2319 * _2319) * (_2324 + (-1.0))) + 1.0;
    float _2335 = exp2(log2(1.0 - (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) * 5.0);
    float _2342 = 1.0 - _2301;
    float _2352 = (0.5 / (((_2230 * ((_2315 * _2342) + _2301)) + 9.9999999392252902907785028219223e-09) + (((_2230 * _2342) + _2301) * _2315))) * _2315;
    float _4477 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2354 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2324 / ((_2328 * _2328) * 3.141590118408203125));
    float _2364 = (((((_2335 * _2252) + _605) * cbLight._m0[_2289].x) * _2354) * _1976) + ((((cbLight._m0[_2201].x * _1942) * ((_2251 * _2252) + _605)) * _2275) * _1990);
    float _2365 = (((((_2335 * _2254) + _607) * cbLight._m0[_2289].y) * _2354) * _1976) + ((((cbLight._m0[_2201].y * _1944) * ((_2251 * _2254) + _607)) * _2275) * _1990);
    float _2366 = (((((_2335 * _2255) + _608) * cbLight._m0[_2289].z) * _2354) * _1976) + ((((cbLight._m0[_2201].z * _1946) * ((_2251 * _2255) + _608)) * _2275) * _1990);
    float _2422;
    float _2424;
    float _2426;
    if (_2030)
    {
        _2422 = _2364;
        _2424 = _2365;
        _2426 = _2366;
    }
    else
    {
        uint _2428 = _1953 + 2u;
        uint _2432 = _1953 + 10u;
        float _2446 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2428].w)) * _443) * 0.949999988079071044921875);
        float _2447 = _2446 * _2446;
        float _2448 = cbLight._m0[_2428].x + _522;
        float _2449 = cbLight._m0[_2428].y + _523;
        float _2450 = cbLight._m0[_2428].z + _524;
        float _2454 = inversesqrt(dot(vec3(_2448, _2449, _2450), vec3(_2448, _2449, _2450)));
        float _2455 = _2454 * _2448;
        float _2456 = _2454 * _2449;
        float _2457 = _2454 * _2450;
        float _2458 = dot(vec3(_439, _440, _441), vec3(cbLight._m0[_2428].xyz));
        float _4488 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2461 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2462 = dot(vec3(_439, _440, _441), vec3(_2455, _2456, _2457));
        float _4499 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2465 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2466 = dot(vec3(cbLight._m0[_2428].xyz), vec3(_2455, _2456, _2457));
        float _4510 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2470 = _2447 * _2447;
        float _2474 = ((_2465 * _2465) * (_2470 + (-1.0))) + 1.0;
        float _2481 = exp2(log2(1.0 - (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) * 5.0);
        float _2488 = 1.0 - _2447;
        float _2498 = (0.5 / (((_2230 * ((_2461 * _2488) + _2447)) + 9.9999999392252902907785028219223e-09) + (((_2230 * _2488) + _2447) * _2461))) * _2461;
        float _4521 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2500 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2470 / ((_2474 * _2474) * 3.141590118408203125));
        float _2501 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
        _2422 = (((((_2481 * _2252) + _605) * cbLight._m0[_2432].x) * _2500) * _2501) + _2364;
        _2424 = (((((_2481 * _2254) + _607) * cbLight._m0[_2432].y) * _2500) * _2501) + _2365;
        _2426 = (((((_2481 * _2255) + _608) * cbLight._m0[_2432].z) * _2500) * _2501) + _2366;
    }
    float _2532;
    float _2534;
    float _2536;
    if (_2139)
    {
        _2532 = _2422;
        _2534 = _2424;
        _2536 = _2426;
    }
    else
    {
        uint _2543 = _1953 + 3u;
        uint _2547 = _1953 + 11u;
        float _2561 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2543].w)) * _443) * 0.949999988079071044921875);
        float _2562 = _2561 * _2561;
        float _2563 = cbLight._m0[_2543].x + _522;
        float _2564 = cbLight._m0[_2543].y + _523;
        float _2565 = cbLight._m0[_2543].z + _524;
        float _2569 = inversesqrt(dot(vec3(_2563, _2564, _2565), vec3(_2563, _2564, _2565)));
        float _2570 = _2569 * _2563;
        float _2571 = _2569 * _2564;
        float _2572 = _2569 * _2565;
        float _2573 = dot(vec3(_439, _440, _441), vec3(cbLight._m0[_2543].xyz));
        float _4537 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2576 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2577 = dot(vec3(_439, _440, _441), vec3(_2570, _2571, _2572));
        float _4548 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2580 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2581 = dot(vec3(cbLight._m0[_2543].xyz), vec3(_2570, _2571, _2572));
        float _4559 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2585 = _2562 * _2562;
        float _2589 = ((_2580 * _2580) * (_2585 + (-1.0))) + 1.0;
        float _2596 = exp2(log2(1.0 - (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0)))) * 5.0);
        float _2603 = 1.0 - _2562;
        float _2613 = (0.5 / (((_2230 * ((_2576 * _2603) + _2562)) + 9.9999999392252902907785028219223e-09) + (((_2230 * _2603) + _2562) * _2576))) * _2576;
        float _4570 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2615 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2585 / ((_2589 * _2589) * 3.141590118408203125));
        float _2616 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
        _2532 = (((((_2596 * _2252) + _605) * cbLight._m0[_2547].x) * _2615) * _2616) + _2422;
        _2534 = (((((_2596 * _2254) + _607) * cbLight._m0[_2547].y) * _2615) * _2616) + _2424;
        _2536 = (((((_2596 * _2255) + _608) * cbLight._m0[_2547].z) * _2615) * _2616) + _2426;
    }
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    if (_1951.y == 0u)
    {
        uvec4 _2637 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2638 = _2637.x;
        uint _2649 = uint((float(_2637.y) * floor(float(uint(cbSceneParam._m0[85u].y * _541) / _2638))) + floor(float(uint(cbSceneParam._m0[85u].x * _540) / _2638)));
        float _2659 = (log2(_1729 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2660 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        uint _2663 = uint(isnan(14.0) ? _2660 : (isnan(_2660) ? 14.0 : min(_2660, 14.0)));
        uvec4 _2668 = texelFetch(g_lightClusterGridBuffer, int(((_2663 << 2u) + (_2649 << 6u)) >> 2u));
        uint _2669 = _2668.x;
        uint _2670 = _2637.z;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        if (((((1u << ((_2670 >> 4u) & 15u)) + 4294967295u) & _2669) == 0u) || ((_2670 & 240u) == 0u))
        {
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
        }
        else
        {
            float _2779;
            float _2781;
            float _2783;
            float _2785;
            float _2787;
            float _2789;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            uint _2936 = 0u;
            uint _2945;
            bool _2946;
            for (;;)
            {
                _2945 = texelFetch(g_lightClassification, int((((_2663 << 5u) + (_2649 << 9u)) + (_2936 << 2u)) >> 2u)).x;
                _2946 = _2945 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                float frontier_phi_75_pred_3;
                float frontier_phi_75_pred_4;
                float frontier_phi_75_pred_5;
                if (_2946)
                {
                    frontier_phi_75_pred = _2935;
                    frontier_phi_75_pred_1 = _2934;
                    frontier_phi_75_pred_2 = _2933;
                    frontier_phi_75_pred_3 = _2932;
                    frontier_phi_75_pred_4 = _2931;
                    frontier_phi_75_pred_5 = _2930;
                }
                else
                {
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    uint _3081;
                    _3075 = _2930;
                    _3076 = _2931;
                    _3077 = _2932;
                    _3078 = _2933;
                    _3079 = _2934;
                    _3080 = _2935;
                    _3081 = _2945;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    for (;;)
                    {
                        uint _3085 = uint(findLSB(_3081)) + (_2936 << 5u);
                        uint _3082 = (_3081 + 4294967295u) & _3081;
                        uint _3087 = _3085 * 48u;
                        vec4 _3101 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3087)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 3u)).x));
                        uint _3107 = (_3085 * 48u) + 4u;
                        vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3107)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 3u)).x));
                        uint _3126 = (_3085 * 48u) + 8u;
                        vec3 _3137 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3126)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 2u)).x));
                        float _3141 = _3101.x - _1727;
                        float _3142 = _3101.y - _1728;
                        float _3143 = _3101.z - _1729;
                        float _3144 = dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143));
                        float _3147 = inversesqrt(_3144);
                        float _3148 = _3147 * _3141;
                        float _3149 = _3147 * _3142;
                        float _3150 = _3147 * _3143;
                        float _3151 = dot(vec3(_561, _564, _567), vec3(_3148, _3149, _3150));
                        float _3156 = 1.0 - (_3144 * _3101.w);
                        float _4596 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3157 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                        float _3158 = sqrt(_3144) * _3120.w;
                        float _3161 = 1.39999997615814208984375 / (_3158 + 1.39999997615814208984375);
                        float _3162 = _3161 * _3161;
                        float _3165 = ((1.0 - _3162) * _3151) + _3162;
                        float _3168 = _3158 * _3158;
                        float _3172 = ((isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0))) * _3157) / ((_3168 * 0.699999988079071044921875) + 1.0);
                        float _3176 = (-0.0) - _1727;
                        float _3177 = (-0.0) - _1728;
                        float _3178 = (-0.0) - _1729;
                        float _3182 = inversesqrt(dot(vec3(_3176, _3177, _3178), vec3(_3176, _3177, _3178)));
                        float _3183 = _3182 * _3176;
                        float _3184 = _3182 * _3177;
                        float _3185 = _3182 * _3178;
                        float _3192 = exp2(log2(1.0 / ((_3168 * 3.5) + 5.0)) * 0.25);
                        float _3193 = 1.0 - _636;
                        float _3200 = sqrt(1.0 - ((1.0 - (_3193 * _3193)) * (1.0 - (_3192 * _3192))));
                        float _3201 = _3200 * _3200;
                        float _3202 = _3201 * _3201;
                        float _3203 = _3183 + _3148;
                        float _3204 = _3184 + _3149;
                        float _3205 = _3185 + _3150;
                        float _3209 = inversesqrt(dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205)));
                        float _3213 = dot(vec3(_561, _564, _567), vec3(_3183, _3184, _3185));
                        float _4612 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3216 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                        float _3217 = dot(vec3(_561, _564, _567), vec3(_3209 * _3203, _3209 * _3204, _3209 * _3205));
                        float _4623 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3220 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3224 = ((_3220 * _3220) * (_3202 + (-1.0))) + 1.0;
                        float _3225 = _3161 * _3201;
                        float _3226 = _3225 * _3225;
                        float _3229 = ((1.0 - _3226) * _3151) + _3226;
                        float _4634 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3230 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                        float _3231 = 1.0 - _3201;
                        float _3241 = (0.5 / (((_3230 * ((_3216 * _3231) + _3201)) + 9.9999999392252902907785028219223e-09) + (((_3230 * _3231) + _3201) * _3216))) * _3230;
                        float _4645 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3252 = (((_3202 * 3.1415927410125732421875) * (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0)))) / ((_3224 * _3224) * ((_3168 * 2.1991131305694580078125) + 3.141590118408203125))) * _3157;
                        _3005 = (_3172 * _3120.x) + _3078;
                        _3006 = (_3172 * _3120.y) + _3079;
                        _3007 = (_3172 * _3120.z) + _3080;
                        _3002 = (_3252 * _3137.x) + _3075;
                        _3003 = (_3252 * _3137.y) + _3076;
                        _3004 = (_3252 * _3137.z) + _3077;
                        if (_3082 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3075 = _3002;
                            _3076 = _3003;
                            _3077 = _3004;
                            _3078 = _3005;
                            _3079 = _3006;
                            _3080 = _3007;
                            _3081 = _3082;
                        }
                    }
                    frontier_phi_75_pred = _3007;
                    frontier_phi_75_pred_1 = _3006;
                    frontier_phi_75_pred_2 = _3005;
                    frontier_phi_75_pred_3 = _3004;
                    frontier_phi_75_pred_4 = _3003;
                    frontier_phi_75_pred_5 = _3002;
                }
                _2789 = frontier_phi_75_pred;
                _2787 = frontier_phi_75_pred_1;
                _2785 = frontier_phi_75_pred_2;
                _2783 = frontier_phi_75_pred_3;
                _2781 = frontier_phi_75_pred_4;
                _2779 = frontier_phi_75_pred_5;
                uint _2937 = _2936 + 1u;
                if (_2937 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2930 = _2779;
                    _2931 = _2781;
                    _2932 = _2783;
                    _2933 = _2785;
                    _2934 = _2787;
                    _2935 = _2789;
                    _2936 = _2937;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
        }
        uvec4 _2792 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2793 = _2792.z;
        uint _2795 = (_2793 >> 8u) & 15u;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        if (((4294967295u << _2795) & _2669) == 0u)
        {
            _2898 = _2778;
            _2900 = _2780;
            _2902 = _2782;
            _2904 = _2784;
            _2906 = _2786;
            _2908 = _2788;
        }
        else
        {
            float _2923 = inversesqrt(dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729)));
            float _2924 = _2923 * _1727;
            float _2925 = _2923 * _1728;
            float _2926 = _2923 * _1729;
            float frontier_phi_67_68_ladder;
            float frontier_phi_67_68_ladder_1;
            float frontier_phi_67_68_ladder_2;
            float frontier_phi_67_68_ladder_3;
            float frontier_phi_67_68_ladder_4;
            float frontier_phi_67_68_ladder_5;
            if (_2795 < ((_2793 >> 12u) & 15u))
            {
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _3058 = _2778;
                float _3059 = _2780;
                float _3060 = _2782;
                float _3061 = _2784;
                float _3062 = _2786;
                float _3063 = _2788;
                uint _3064 = _2795;
                uint _3073;
                bool _3074;
                for (;;)
                {
                    _3073 = texelFetch(g_lightClassification, int((((_2663 << 5u) + (_2649 << 9u)) + (_3064 << 2u)) >> 2u)).x;
                    _3074 = _3073 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    float frontier_phi_86_pred_3;
                    float frontier_phi_86_pred_4;
                    float frontier_phi_86_pred_5;
                    if (_3074)
                    {
                        frontier_phi_86_pred = _3062;
                        frontier_phi_86_pred_1 = _3061;
                        frontier_phi_86_pred_2 = _3060;
                        frontier_phi_86_pred_3 = _3059;
                        frontier_phi_86_pred_4 = _3058;
                        frontier_phi_86_pred_5 = _3063;
                    }
                    else
                    {
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3279 = _3058;
                        float _3280 = _3059;
                        float _3281 = _3060;
                        float _3282 = _3061;
                        float _3283 = _3062;
                        float _3284 = _3063;
                        uint _3285 = _3073;
                        uint _3286;
                        vec4 _3311;
                        float _3312;
                        vec4 _3327;
                        vec3 _3339;
                        vec4 _3355;
                        vec4 _3371;
                        float _3418;
                        bool _3419;
                        for (;;)
                        {
                            uint _3296 = ((_3064 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3285));
                            _3286 = (_3285 + 4294967295u) & _3285;
                            uint _3298 = _3296 * 40u;
                            _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            _3312 = _3311.w;
                            uint _3314 = (_3296 * 40u) + 4u;
                            _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            uint _3329 = (_3296 * 40u) + 8u;
                            _3339 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x));
                            uint _3342 = (_3296 * 40u) + 16u;
                            _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3358 = (_3296 * 40u) + 20u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3374 = (_3296 * 40u) + 24u;
                            vec4 _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3393 = (_3296 * 40u) + 28u;
                            vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            _3418 = fma(_1729, _3406.z, fma(_1728, _3406.y, _3406.x * _1727)) + _3406.w;
                            _3419 = !((fma(_1729, _3387.z, fma(_1728, _3387.y, _3387.x * _1727)) + _3387.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            float frontier_phi_92_pred_3;
                            float frontier_phi_92_pred_4;
                            float frontier_phi_92_pred_5;
                            if (_3419)
                            {
                                float _3446 = _3311.x - _1727;
                                float _3447 = _3311.y - _1728;
                                float _3448 = _3311.z - _1729;
                                float _3449 = dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448));
                                float _3452 = inversesqrt(_3449);
                                float _3453 = _3452 * _3446;
                                float _3454 = _3452 * _3447;
                                float _3455 = _3452 * _3448;
                                float _3459 = 1.0 - (_3449 / (_3312 * _3312));
                                float _4656 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3464 = sqrt(_3449) * _3327.w;
                                float _3466 = 1.39999997615814208984375 / (_3464 + 1.39999997615814208984375);
                                float _3467 = _3466 * _3466;
                                float _3470 = ((1.0 - _3467) * dot(vec3(_3453, _3454, _3455), vec3(_561, _564, _567))) + _3467;
                                float _3473 = _3464 * _3464;
                                float _3477 = (fma(_1729, _3355.z, fma(_1728, _3355.y, _3355.x * _1727)) + _3355.w) / _3418;
                                float _3478 = (fma(_1729, _3371.z, fma(_1728, _3371.y, _3371.x * _1727)) + _3371.w) / _3418;
                                float _3482 = 1.0 - dot(vec2(_3477, _3478), vec2(_3477, _3478));
                                float _4672 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3483 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3484 = _3483 * (((isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0))) * _3460) / ((_3473 * 0.699999988079071044921875) + 1.0));
                                float _3496 = exp2(log2(1.0 / ((_3473 * 3.5) + 5.0)) * 0.25);
                                float _3497 = 1.0 - _636;
                                float _3504 = sqrt(1.0 - ((1.0 - (_3497 * _3497)) * (1.0 - (_3496 * _3496))));
                                float _3505 = _3504 * _3504;
                                float _3506 = _3505 * _3505;
                                float _3507 = _3453 - _2924;
                                float _3508 = _3454 - _2925;
                                float _3509 = _3455 - _2926;
                                float _3513 = inversesqrt(dot(vec3(_3507, _3508, _3509), vec3(_3507, _3508, _3509)));
                                float _3517 = dot(vec3(_561, _564, _567), vec3((-0.0) - _2924, (-0.0) - _2925, (-0.0) - _2926));
                                float _4683 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3520 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3521 = dot(vec3(_561, _564, _567), vec3(_3513 * _3507, _3513 * _3508, _3513 * _3509));
                                float _4694 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3524 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3528 = ((_3524 * _3524) * (_3506 + (-1.0))) + 1.0;
                                float _3529 = _3466 * _3505;
                                float _3530 = _3529 * _3529;
                                float _3536 = ((1.0 - _3530) * dot(vec3(_561, _564, _567), vec3(_3453, _3454, _3455))) + _3530;
                                float _4705 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3537 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3538 = 1.0 - _3505;
                                float _3548 = (0.5 / (((_3537 * ((_3520 * _3538) + _3505)) + 9.9999999392252902907785028219223e-09) + (((_3537 * _3538) + _3505) * _3520))) * _3537;
                                float _4716 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3558 = (_3483 * _3460) * (((_3506 * 3.1415927410125732421875) * (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0)))) / ((_3528 * _3528) * ((_3473 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_92_pred = _3484 * _3327.y;
                                frontier_phi_92_pred_1 = _3484 * _3327.x;
                                frontier_phi_92_pred_2 = _3558 * _3339.z;
                                frontier_phi_92_pred_3 = _3558 * _3339.y;
                                frontier_phi_92_pred_4 = _3558 * _3339.x;
                                frontier_phi_92_pred_5 = _3484 * _3327.z;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                                frontier_phi_92_pred_3 = 0.0;
                                frontier_phi_92_pred_4 = 0.0;
                                frontier_phi_92_pred_5 = 0.0;
                            }
                            _3566 = frontier_phi_92_pred;
                            _3565 = frontier_phi_92_pred_1;
                            _3564 = frontier_phi_92_pred_2;
                            _3563 = frontier_phi_92_pred_3;
                            _3562 = frontier_phi_92_pred_4;
                            _3567 = frontier_phi_92_pred_5;
                            _3269 = _3565 + _3282;
                            _3270 = _3566 + _3283;
                            _3271 = _3567 + _3284;
                            _3266 = _3562 + _3279;
                            _3267 = _3563 + _3280;
                            _3268 = _3564 + _3281;
                            if (_3286 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3286;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _3270;
                        frontier_phi_86_pred_1 = _3269;
                        frontier_phi_86_pred_2 = _3268;
                        frontier_phi_86_pred_3 = _3267;
                        frontier_phi_86_pred_4 = _3266;
                        frontier_phi_86_pred_5 = _3271;
                    }
                    _2907 = frontier_phi_86_pred;
                    _2905 = frontier_phi_86_pred_1;
                    _2903 = frontier_phi_86_pred_2;
                    _2901 = frontier_phi_86_pred_3;
                    _2899 = frontier_phi_86_pred_4;
                    _2909 = frontier_phi_86_pred_5;
                    uint _3065 = _3064 + 1u;
                    if (_3065 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3058 = _2899;
                        _3059 = _2901;
                        _3060 = _2903;
                        _3061 = _2905;
                        _3062 = _2907;
                        _3063 = _2909;
                        _3064 = _3065;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_67_68_ladder = _2909;
                frontier_phi_67_68_ladder_1 = _2905;
                frontier_phi_67_68_ladder_2 = _2907;
                frontier_phi_67_68_ladder_3 = _2901;
                frontier_phi_67_68_ladder_4 = _2899;
                frontier_phi_67_68_ladder_5 = _2903;
            }
            else
            {
                frontier_phi_67_68_ladder = _2788;
                frontier_phi_67_68_ladder_1 = _2784;
                frontier_phi_67_68_ladder_2 = _2786;
                frontier_phi_67_68_ladder_3 = _2780;
                frontier_phi_67_68_ladder_4 = _2778;
                frontier_phi_67_68_ladder_5 = _2782;
            }
            _2898 = frontier_phi_67_68_ladder_4;
            _2900 = frontier_phi_67_68_ladder_3;
            _2902 = frontier_phi_67_68_ladder_5;
            _2904 = frontier_phi_67_68_ladder_1;
            _2906 = frontier_phi_67_68_ladder_2;
            _2908 = frontier_phi_67_68_ladder;
        }
        float _2913 = isnan(1.0) ? _620 : (isnan(_620) ? 1.0 : min(_620, 1.0));
        _2681 = (_2913 * _2904) + _2194;
        _2683 = (_2913 * _2906) + _2196;
        _2685 = (_2913 * _2908) + _2198;
        _2687 = ((_2898 * _605) * _2913) + _2532;
        _2689 = ((_2900 * _607) * _2913) + _2534;
        _2691 = ((_2902 * _608) * _2913) + _2536;
    }
    else
    {
        _2681 = _2194;
        _2683 = _2196;
        _2685 = _2198;
        _2687 = _2532;
        _2689 = _2534;
        _2691 = _2536;
    }
    uint _2697 = _581 + uint(cbMatDynParam._m0[0u].w);
    float _4732 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _4743 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _4754 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _4765 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _2732 = (((isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2681 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _620))) + ((_2687 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _1456)) * cbPerFrame._m0[3u].x)) + ((((cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _360) * _400) * cbInstanceData._m0[_2697].x);
    float _2734 = (((((cbMtdParam._m0[10u].y * TEXCOORD_1.z) * _360) * _400) * cbInstanceData._m0[_2697].y) + ((_2689 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _1456)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2683 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _620)));
    float _2736 = (((((cbMtdParam._m0[10u].z * TEXCOORD_1.z) * _360) * _400) * cbInstanceData._m0[_2697].z) + ((_2691 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _1456)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2685 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _620)));
    float _2737 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
    float _2738 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
    float _2739 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
    float _2744 = cbInstanceData._m0[_580 + 6u].w * (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0)));
    float _2749 = _540 / cbSceneParam._m0[86u].x;
    float _2750 = _541 / cbSceneParam._m0[86u].y;
    vec4 _2764 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2749, _2750, (log2((isnan(cbSceneParam._m0[77u].w) ? _466 : (isnan(_466) ? cbSceneParam._m0[77u].w : min(_466, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2766 = _2764.x;
    float _2767 = _2764.y;
    float _2768 = _2764.z;
    float _2769 = _2764.w;
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    if (_466 > cbSceneParam._m0[78u].w)
    {
        float _2803 = isnan(_466) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _466 : min(cbSceneParam._m0[80u].w, _466));
        float _2804 = _2803 / _466;
        float _2815 = _2804 * _515;
        float _2816 = _516 * _2804;
        float _2817 = (-0.0) - _2816;
        float _2818 = _2804 * _517;
        float _2820 = (cbSceneParam._m0[77u].w * _2817) / _2803;
        float _2821 = _2820 + cbSceneParam._m0[79u].w;
        float _2822 = cbSceneParam._m0[79u].w - _2816;
        float _2828 = sqrt(((_2815 * _2815) + (_2816 * _2816)) + (_2818 * _2818));
        float _2831 = (1.0 - (cbSceneParam._m0[77u].w / _2803)) * _2828;
        float _2836 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2838 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3015;
        if (abs((_2817 - _2820) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3015 = ((((_2821 > 0.0) ? exp2(_2836 * _2821) : (2.0 - exp2(_2838 * _2821))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2831;
        }
        else
        {
            float _2959 = 1.0 / cbSceneParam._m0[80u].x;
            float _2960 = isnan(_2822) ? _2821 : (isnan(_2821) ? _2822 : max(_2821, _2822));
            float _2961 = isnan(_2822) ? _2821 : (isnan(_2821) ? _2822 : min(_2821, _2822));
            float _2970 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : min(_2960, 0.0));
            float _2971 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : min(_2961, 0.0));
            _3015 = ((abs(_2828 / _2817) * cbSceneParam._m0[80u].y) * ((((_2970 - _2971) * 2.0) - ((exp2(_2836 * (isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0)))) - exp2(_2836 * (isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0))))) * _2959)) - ((exp2(_2838 * _2970) - exp2(_2838 * _2971)) * _2959))) + (_2831 * cbSceneParam._m0[80u].z);
        }
        vec4 _3017 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2749, _2750, 1.0), 0.0);
        float _3026 = exp2((_3015 * (-1.44269502162933349609375)) * (1.0 - _3017.w));
        float _3027 = log2(_3026);
        float _3043 = log2(_2769);
        _2840 = (exp2(_3043 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].x)) * _3017.x) / cbSceneParam._m0[78u].x)) + _2766;
        _2842 = (exp2(_3043 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].y)) * _3017.y) / cbSceneParam._m0[78u].y)) + _2767;
        _2844 = (exp2(_3043 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3027 * cbSceneParam._m0[78u].z)) * _3017.z) / cbSceneParam._m0[78u].z)) + _2768;
        _2846 = _3026 * _2769;
    }
    else
    {
        _2840 = _2766;
        _2842 = _2767;
        _2844 = _2768;
        _2846 = _2769;
    }
    bool _3053;
    vec4 _2856;
    vec4 _2878;
    float _2880;
    float _2884;
    float _2885;
    float _2886;
    float _2887;
    bool _2897;
    for (;;)
    {
        _2856 = cbMatDynParam._m0[0u];
        float _2858 = roundEven(_2856.y);
        bool _2859 = _2858 == 3.0;
        float _2860 = log2(_2846);
        float _2867 = exp2(_2860 * cbSceneParam._m0[78u].x) * _2737;
        float _2868 = exp2(_2860 * cbSceneParam._m0[78u].y) * _2738;
        float _2869 = exp2(_2860 * cbSceneParam._m0[78u].z) * _2739;
        float _2876 = _528 + (-0.5);
        _2878 = cbMtdParam._m0[1u];
        _2880 = _2878.y * _2876;
        float _2883 = (_2858 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2884 = _2883 * (_2859 ? _2867 : (_2867 + (cbSceneParam._m0[72u].w * _2840)));
        _2885 = _2883 * (_2859 ? _2868 : (_2868 + (cbSceneParam._m0[72u].w * _2842)));
        _2886 = _2883 * (_2859 ? _2869 : (_2869 + (cbSceneParam._m0[72u].w * _2844)));
        _2887 = _2876 * 0.999000012874603271484375;
        _2897 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2897)
        {
            if ((cbInstanceData._m0[_580 + 7u].x + _2887) < 0.5)
            {
                _3053 = true;
                break;
            }
        }
        uint _2994 = _581 + uint(_2856.w);
        if ((cbInstanceData._m0[_2994].w < 1.0) && ((cbInstanceData._m0[_2994].w + _2887) < 0.5))
        {
            _3053 = true;
            break;
        }
        if ((_2880 + _303) < _2878.x)
        {
            _3053 = true;
            break;
        }
        _3053 = false;
        break;
    }
    float _3257;
    if (_3053)
    {
        discard_state = true;
        _3257 = 0.0;
    }
    else
    {
        _3257 = _2744;
    }
    SV_Target.x = _2884;
    SV_Target.y = _2885;
    SV_Target.z = _2886;
    SV_Target.w = _3257;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2744;
    discard_exit();
}


