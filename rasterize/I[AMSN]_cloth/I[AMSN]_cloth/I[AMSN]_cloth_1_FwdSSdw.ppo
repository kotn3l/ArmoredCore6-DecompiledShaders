#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D I_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D I_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _893;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _291 = texture(sampler2D(I_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _297 = _291.w;
    float _298 = _291.x * cbMtdParam._m0[9u].x;
    float _299 = _291.y * cbMtdParam._m0[9u].y;
    float _300 = _291.z * cbMtdParam._m0[9u].z;
    vec4 _315 = texture(sampler2D(I_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _319 = _315.z;
    float _323 = (_315.x * 2.0) + (-1.0);
    float _325 = (_315.y * 2.0) + (-1.0);
    float _326 = dot(vec2(_323, _325), vec2(_323, _325));
    float _3282 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _332 = sqrt(1.0 - (isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0))));
    float _350 = cbMtdParam._m0[12u].x - cbMtdParam._m0[12u].w;
    float _352 = (sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273)) - cbMtdParam._m0[12u].w) / (isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0)));
    float _3298 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _354 = 1.0 - (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0)));
    float _362 = abs((fract(cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3309 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _363 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
    float _373 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _380 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _381 = _380 * _271;
    float _382 = _380 * _272;
    float _383 = _380 * _273;
    float _387 = dot(vec4(_381, _382, _383, 0.0), vec4(_373 * _215, _373 * _216, _373 * _217, 0.0)) - (((_363 * _363) * cbMtdParam._m0[11u].w) * (3.0 - (_363 * 2.0)));
    float _3320 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _394 = exp2(log2(1.0 - (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    float _397 = fma(_332, _215, fma(_325, _207 * TANGENT.x, (_193 * _185) * _323));
    float _400 = fma(_332, _216, fma(_325, _207 * TANGENT.y, (_193 * _186) * _323));
    float _403 = fma(_332, _217, fma(_325, _207 * TANGENT.z, (_193 * _187) * _323));
    float _407 = inversesqrt(dot(vec3(_397, _400, _403), vec3(_397, _400, _403)));
    float _408 = _407 * _397;
    float _409 = _407 * _400;
    float _410 = _407 * _403;
    float _3336 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _411 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
    float _3347 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _412 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
    float _3358 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _3369 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3380 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _3391 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _416 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
    float _432 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _438 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _439 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _460 = fma(_410, cbSceneParam._m0[5u].z, fma(_409, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _408));
    float _463 = fma(_410, cbSceneParam._m0[6u].z, fma(_409, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _408));
    float _466 = fma(_410, cbSceneParam._m0[7u].z, fma(_409, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _408));
    uint _479 = uint(roundEven(NORMAL.w)) * 13u;
    uint _480 = _479 + 9u;
    uint _481 = _480 + uint(cbMatDynParam._m0[0u].w);
    float _487 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0)))) * cbInstanceData._m0[_481].x;
    float _488 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0)))) * cbInstanceData._m0[_481].y;
    float _489 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0)))) * cbInstanceData._m0[_481].z;
    float _3402 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _490 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
    float _3413 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _491 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
    float _3424 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _492 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
    float _493 = 1.0 - _416;
    float _494 = _490 * _493;
    float _495 = _491 * _493;
    float _496 = _492 * _493;
    float _501 = (_490 + (-0.039999999105930328369140625)) * _416;
    float _502 = (_491 + (-0.039999999105930328369140625)) * _416;
    float _503 = (_492 + (-0.039999999105930328369140625)) * _416;
    float _504 = _501 + 0.039999999105930328369140625;
    float _506 = _502 + 0.039999999105930328369140625;
    float _507 = _503 + 0.039999999105930328369140625;
    vec4 _516 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _438, cbSceneParam._m0[86u].y * _439));
    float _519 = _516.x * TEXCOORD_1.w;
    float _520 = dot(vec3(_408, _409, _410), vec3(_381, _382, _383));
    float _523 = _520 * 2.0;
    float _527 = (_523 * _408) - _381;
    float _528 = (_523 * _409) - _382;
    float _529 = (_523 * _410) - _383;
    float _533 = abs(dot(vec3(_381, _382, _383), vec3(_408, _409, _410)));
    float _3435 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _535 = sqrt(_412);
    float _547 = exp2((_535 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_535 * 3.0));
    float _553 = (1.0 - _547) * ((_535 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _554 = _547 * _535;
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _892;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _617 = fma(_590, cbModelParam._m0[26u].z, fma(_586, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _582));
        float _621 = fma(_590, cbModelParam._m0[27u].z, fma(_586, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _582));
        float _625 = fma(_590, cbModelParam._m0[28u].z, fma(_586, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _582));
        float _650 = _582 + _408;
        float _651 = _586 + _409;
        float _652 = _590 + _410;
        float _662 = fma(_652, cbModelParam._m0[26u].z, fma(_651, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _650)) - _617;
        float _663 = fma(_652, cbModelParam._m0[27u].z, fma(_651, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _650)) - _621;
        float _664 = fma(_652, cbModelParam._m0[28u].z, fma(_651, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _650)) - _625;
        float _668 = inversesqrt(dot(vec3(_662, _663, _664), vec3(_662, _663, _664)));
        float _681 = ((_668 * _662) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_617 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _682 = ((_668 * _663) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_621 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _683 = ((_668 * _664) / cbModelParam._m0[34u].z) + ((((((_625 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        float _720 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_686.x + (-0.5));
        float _722 = _720 * (_686.y + (-0.5));
        float _723 = _720 * (_686.z + (-0.5));
        float _730 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_693.x + (-0.5));
        float _732 = _730 * (_693.y + (-0.5));
        float _733 = _730 * (_693.z + (-0.5));
        float _740 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_700.x + (-0.5));
        float _742 = _740 * (_700.y + (-0.5));
        float _743 = _740 * (_700.z + (-0.5));
        float _750 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_707.x + (-0.5));
        float _752 = _750 * (_707.y + (-0.5));
        float _753 = _750 * (_707.z + (-0.5));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _756 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _757 = _721 * 0.5;
        float _758 = _731 * 0.5;
        float _759 = _741 * 0.5;
        float _760 = dot(vec3(_757, _758, _759), vec3(_757, _758, _759));
        float _765 = (_760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_760);
        float _774 = (dot(vec3(_408, _409, _410), vec3(_765 * _757, _765 * _758, _765 * _759)) + 1.0) * 0.5;
        float _3461 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _784 = sqrt(((_758 * _758) + (_757 * _757)) + (_759 * _759)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3472 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _786 = _785 * 2.0;
        float _790 = (1.0 - _785) / (_785 + 1.0);
        float _3483 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _800 = ((((1.0 - _791) * (_786 + 2.0)) * exp2(log2(isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) * (_786 + 1.0))) + _791) * _754;
        float _801 = _722 * 0.5;
        float _802 = _732 * 0.5;
        float _803 = _742 * 0.5;
        float _804 = dot(vec3(_801, _802, _803), vec3(_801, _802, _803));
        float _809 = (_804 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_804);
        float _817 = (dot(vec3(_408, _409, _410), vec3(_809 * _801, _809 * _802, _809 * _803)) + 1.0) * 0.5;
        float _3494 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _826 = sqrt(((_802 * _802) + (_801 * _801)) + (_803 * _803)) / (_755 + 9.9999997473787516355514526367188e-06);
        float _3505 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _828 = _827 * 2.0;
        float _832 = (1.0 - _827) / (_827 + 1.0);
        float _3516 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _842 = ((((1.0 - _833) * (_828 + 2.0)) * exp2(log2(isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * (_828 + 1.0))) + _833) * _755;
        float _843 = _723 * 0.5;
        float _844 = _733 * 0.5;
        float _845 = _743 * 0.5;
        float _846 = dot(vec3(_843, _844, _845), vec3(_843, _844, _845));
        float _851 = (_846 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_846);
        float _859 = (dot(vec3(_408, _409, _410), vec3(_851 * _843, _851 * _844, _851 * _845)) + 1.0) * 0.5;
        float _3527 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _868 = sqrt(((_844 * _844) + (_843 * _843)) + (_845 * _845)) / (_756 + 9.9999997473787516355514526367188e-06);
        float _3538 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _870 = _869 * 2.0;
        float _874 = (1.0 - _869) / (_869 + 1.0);
        float _3549 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _884 = ((((1.0 - _875) * (_870 + 2.0)) * exp2(log2(isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * (_870 + 1.0))) + _875) * _756;
        _892 = _723;
        _894 = _722;
        _895 = _721;
        _896 = _733;
        _897 = _732;
        _898 = _731;
        _899 = _743;
        _900 = _742;
        _901 = _741;
        _902 = _756;
        _903 = _755;
        _904 = _754;
        _905 = cbModelParam._m0[36u].z * (isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0)));
        _906 = cbModelParam._m0[36u].z * (isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0)));
        _907 = cbModelParam._m0[36u].z * (isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0)));
    }
    else
    {
        _892 = _893;
        _894 = _893;
        _895 = _893;
        _896 = _893;
        _897 = _893;
        _898 = _893;
        _899 = _893;
        _900 = _893;
        _901 = _893;
        _902 = _893;
        _903 = _893;
        _904 = _893;
        _905 = 0.0;
        _906 = 0.0;
        _907 = 0.0;
    }
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _933 = fma(_590, cbModelParam._m0[30u].z, fma(_586, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _582));
        float _937 = fma(_590, cbModelParam._m0[31u].z, fma(_586, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _582));
        float _941 = fma(_590, cbModelParam._m0[32u].z, fma(_586, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _582));
        float _964 = _582 + _408;
        float _965 = _586 + _409;
        float _966 = _590 + _410;
        float _976 = fma(_966, cbModelParam._m0[30u].z, fma(_965, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _964)) - _933;
        float _977 = fma(_966, cbModelParam._m0[31u].z, fma(_965, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _964)) - _937;
        float _978 = fma(_966, cbModelParam._m0[32u].z, fma(_965, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _964)) - _941;
        float _982 = inversesqrt(dot(vec3(_976, _977, _978), vec3(_976, _977, _978)));
        float _995 = ((_982 * _976) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_933 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_982 * _977) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_937 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_982 * _978) / cbModelParam._m0[35u].z) + ((((((_941 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        float _1032 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_999.x + (-0.5));
        float _1034 = _1032 * (_999.y + (-0.5));
        float _1035 = _1032 * (_999.z + (-0.5));
        float _1042 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1006.x + (-0.5));
        float _1044 = _1042 * (_1006.y + (-0.5));
        float _1045 = _1042 * (_1006.z + (-0.5));
        float _1052 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1013.x + (-0.5));
        float _1054 = _1052 * (_1013.y + (-0.5));
        float _1055 = _1052 * (_1013.z + (-0.5));
        float _1062 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1020.x + (-0.5));
        float _1064 = _1062 * (_1020.y + (-0.5));
        float _1065 = _1062 * (_1020.z + (-0.5));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = _1033 * 0.5;
        float _1070 = _1043 * 0.5;
        float _1071 = _1053 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_408, _409, _410), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3590 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3601 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3612 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * (_1096 + 1.0))) + _1101) * _1066;
        float _1111 = _1034 * 0.5;
        float _1112 = _1044 * 0.5;
        float _1113 = _1054 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_408, _409, _410), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3623 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3634 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3645 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * (_1138 + 1.0))) + _1143) * _1067;
        float _1153 = _1035 * 0.5;
        float _1154 = _1045 * 0.5;
        float _1155 = _1055 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_408, _409, _410), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3656 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3667 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3678 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (_1180 + 1.0))) + _1185) * _1068;
        _1202 = _1035;
        _1203 = _1034;
        _1204 = _1033;
        _1205 = _1045;
        _1206 = _1044;
        _1207 = _1043;
        _1208 = _1055;
        _1209 = _1054;
        _1210 = _1053;
        _1211 = _1068;
        _1212 = _1067;
        _1213 = _1066;
        _1214 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
        _1215 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
        _1216 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
    }
    else
    {
        _1202 = _893;
        _1203 = _893;
        _1204 = _893;
        _1205 = _893;
        _1206 = _893;
        _1207 = _893;
        _1208 = _893;
        _1209 = _893;
        _1210 = _893;
        _1211 = _893;
        _1212 = _893;
        _1213 = _893;
        _1214 = 0.0;
        _1215 = 0.0;
        _1216 = 0.0;
    }
    float _1226 = (cbModelParam._m0[1u].x * (_1214 - _905)) + _905;
    float _1227 = (cbModelParam._m0[1u].x * (_1215 - _906)) + _906;
    float _1228 = (cbModelParam._m0[1u].x * (_1216 - _907)) + _907;
    float _1249 = fma(_1228, cbSceneParam._m0[89u].z, fma(_1227, cbSceneParam._m0[89u].y, _1226 * cbSceneParam._m0[89u].x));
    float _1252 = fma(_1228, cbSceneParam._m0[90u].z, fma(_1227, cbSceneParam._m0[90u].y, _1226 * cbSceneParam._m0[90u].x));
    float _1255 = fma(_1228, cbSceneParam._m0[91u].z, fma(_1227, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1226));
    float _1270 = _527 * 0.5;
    float _1271 = _528 * 0.5;
    float _1272 = _529 * 0.5;
    float _1273 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_1204, _1207, _1210, _1213));
    float _1276 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_1203, _1206, _1209, _1212));
    float _1279 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_1202, _1205, _1208, _1211));
    float _1313;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1286 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_892, _896, _899, _902));
        float _1290 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_894, _897, _900, _903));
        float _1294 = dot(vec4(_1270, _1271, _1272, 1.0), vec4(_895, _898, _901, _904));
        float _1301 = dot(vec4(cbModelParam._m0[39u]), vec4(_1270, _1271, _1272, 1.0));
        _1313 = dot(vec3(isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)), isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)), isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1301) ? 0.0 : (isnan(0.0) ? _1301 : max(0.0, _1301))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1313 = 1.0;
    }
    float _1324;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1315 = dot(vec4(cbModelParam._m0[40u]), vec4(_1270, _1271, _1272, 1.0));
        _1324 = dot(vec3(isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)), isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1315) ? 0.0 : (isnan(0.0) ? _1315 : max(0.0, _1315))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1324 = 1.0;
    }
    float _1328 = (_1324 * cbModelParam._m0[1u].x) + (_1313 * (1.0 - cbModelParam._m0[1u].x));
    float _1338 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _412);
    float _1339 = isnan(_1338) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1338 : min(cbModelParam._m0[25u].z, _1338));
    float _1421;
    float _1423;
    float _1425;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1388 = fma(_590, cbModelParam._m0[13u].z, fma(_586, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _582)) + cbModelParam._m0[13u].w;
        float _1392 = fma(_590, cbModelParam._m0[14u].z, fma(_586, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _582)) + cbModelParam._m0[14u].w;
        float _1396 = fma(_590, cbModelParam._m0[15u].z, fma(_586, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _582)) + cbModelParam._m0[15u].w;
        float _1399 = fma(_529, cbModelParam._m0[13u].z, fma(_528, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _527));
        float _1402 = fma(_529, cbModelParam._m0[14u].z, fma(_528, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _527));
        float _1405 = fma(_529, cbModelParam._m0[15u].z, fma(_528, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _527));
        float _1433;
        if (_1399 > 0.0)
        {
            _1433 = abs((1.0 - _1388) / _1399);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1388 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1433 = frontier_phi_16_14_ladder;
        }
        float _1660;
        if (_1402 > 0.0)
        {
            _1660 = abs((1.0 - _1392) / _1402);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1392 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1660 = frontier_phi_25_21_ladder;
        }
        float _1917;
        if (_1405 > 0.0)
        {
            _1917 = abs((1.0 - _1396) / _1405);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1396 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1917 = frontier_phi_37_32_ladder;
        }
        float _1919 = isnan(_1660) ? _1433 : (isnan(_1433) ? _1660 : min(_1433, _1660));
        float _1920 = isnan(_1917) ? _1919 : (isnan(_1919) ? _1917 : min(_1919, _1917));
        float _1924 = (_1920 * _1399) + _1388;
        float _1925 = (_1920 * _1402) + _1392;
        float _1926 = (_1920 * _1405) + _1396;
        float _1927 = _1920 * 9.9999997473787516355514526367188e-05;
        float _1929 = (-1.0) - _1927;
        float _1931 = _1927 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1926 > _1931) || ((_1926 < _1929) || ((_1925 > _1931) || ((_1925 < _1929) || ((_1924 < _1929) || (_1924 > _1931))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2054 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1926, cbModelParam._m0[9u].z, fma(_1925, cbModelParam._m0[9u].y, _1924 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1926, cbModelParam._m0[10u].z, fma(_1925, cbModelParam._m0[10u].y, _1924 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1926, cbModelParam._m0[11u].z, fma(_1925, cbModelParam._m0[11u].y, _1924 * cbModelParam._m0[11u].x))), _1339);
            frontier_phi_15_37_ladder = _2054.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2054.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2054.x * cbModelParam._m0[1u].y;
        }
        _1421 = frontier_phi_15_37_ladder_2;
        _1423 = frontier_phi_15_37_ladder_1;
        _1425 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1409 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_527, _528, _529), _1339);
        _1421 = _1409.x * cbModelParam._m0[1u].y;
        _1423 = _1409.y * cbModelParam._m0[1u].y;
        _1425 = _1409.z * cbModelParam._m0[1u].y;
    }
    float _1429 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _412);
    float _1430 = isnan(_1429) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1429 : min(cbModelParam._m0[25u].w, _1429));
    float _1522;
    float _1524;
    float _1526;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1486 = fma(_590, cbModelParam._m0[21u].z, fma(_586, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _582)) + cbModelParam._m0[21u].w;
        float _1490 = fma(_590, cbModelParam._m0[22u].z, fma(_586, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _582)) + cbModelParam._m0[22u].w;
        float _1494 = fma(_590, cbModelParam._m0[23u].z, fma(_586, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _582)) + cbModelParam._m0[23u].w;
        float _1497 = fma(_529, cbModelParam._m0[21u].z, fma(_528, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _527));
        float _1500 = fma(_529, cbModelParam._m0[22u].z, fma(_528, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _527));
        float _1503 = fma(_529, cbModelParam._m0[23u].z, fma(_528, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _527));
        float _1665;
        if (_1497 > 0.0)
        {
            _1665 = abs((1.0 - _1486) / _1497);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1486 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1665 = frontier_phi_27_23_ladder;
        }
        float _1944;
        if (_1500 > 0.0)
        {
            _1944 = abs((1.0 - _1490) / _1500);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1490 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1944 = frontier_phi_39_34_ladder;
        }
        float _2157;
        if (_1503 > 0.0)
        {
            _2157 = abs((1.0 - _1494) / _1503);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1494 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2157 = frontier_phi_48_45_ladder;
        }
        float _2159 = isnan(_1944) ? _1665 : (isnan(_1665) ? _1944 : min(_1665, _1944));
        float _2160 = isnan(_2157) ? _2159 : (isnan(_2159) ? _2157 : min(_2159, _2157));
        float _2164 = (_2160 * _1497) + _1486;
        float _2165 = (_2160 * _1500) + _1490;
        float _2166 = (_2160 * _1503) + _1494;
        float _2167 = _2160 * 9.9999997473787516355514526367188e-05;
        float _2168 = (-1.0) - _2167;
        float _2170 = _2167 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2166 > _2170) || ((_2166 < _2168) || ((_2165 > _2170) || ((_2165 < _2168) || ((_2164 < _2168) || (_2164 > _2170))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2394 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2166, cbModelParam._m0[17u].z, fma(_2165, cbModelParam._m0[17u].y, _2164 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2166, cbModelParam._m0[18u].z, fma(_2165, cbModelParam._m0[18u].y, _2164 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2166, cbModelParam._m0[19u].z, fma(_2165, cbModelParam._m0[19u].y, _2164 * cbModelParam._m0[19u].x))), _1430);
            frontier_phi_24_48_ladder = _2394.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2394.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2394.x * cbModelParam._m0[1u].z;
        }
        _1522 = frontier_phi_24_48_ladder_2;
        _1524 = frontier_phi_24_48_ladder_1;
        _1526 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1506 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_527, _528, _529), _1430);
        _1522 = _1506.x * cbModelParam._m0[1u].z;
        _1524 = _1506.y * cbModelParam._m0[1u].z;
        _1526 = _1506.z * cbModelParam._m0[1u].z;
    }
    float _1539 = (((_553 * _504) + _554) * _519) * ((cbModelParam._m0[1u].w * (_1522 - _1421)) + _1421);
    float _1541 = (((_553 * _506) + _554) * _519) * ((cbModelParam._m0[1u].w * (_1524 - _1423)) + _1423);
    float _1543 = (((_553 * _507) + _554) * _519) * ((cbModelParam._m0[1u].w * (_1526 - _1425)) + _1425);
    float _1546 = fma(_1543, cbSceneParam._m0[89u].z, fma(_1541, cbSceneParam._m0[89u].y, _1539 * cbSceneParam._m0[89u].x));
    float _1549 = fma(_1543, cbSceneParam._m0[90u].z, fma(_1541, cbSceneParam._m0[90u].y, _1539 * cbSceneParam._m0[90u].x));
    float _1552 = fma(_1543, cbSceneParam._m0[91u].z, fma(_1541, cbSceneParam._m0[91u].y, _1539 * cbSceneParam._m0[91u].x));
    vec4 _1560 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_438, _439));
    float _1562 = _1560.w;
    float _1574 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1562);
    float _1575 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1562);
    float _1576 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1562);
    uvec4 _1580 = floatBitsToUint(cbInstanceData._m0[_479 + 5u]);
    uint _1582 = _1580.x * 14u;
    uint _1583 = _1582 + 13u;
    float _1590 = _519 + (-1.0);
    float _1595 = (cbLight._m0[_1583].x * _1590) + 1.0;
    float _1596 = (cbLight._m0[_1583].y * _1590) + 1.0;
    float _1597 = (cbLight._m0[_1583].z * _1590) + 1.0;
    float _1598 = (cbLight._m0[_1583].w * _1590) + 1.0;
    uint _1599 = _1582 + 5u;
    float _1605 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
    uint _1609 = _1582 + 4u;
    float _1619 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
    uint _1623 = _1582 | 1u;
    float _1634 = dot(vec3(cbLight._m0[_1582].xyz), vec3(_408, _409, _410));
    float _1637 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_408, _409, _410));
    float _3814 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
    float _3825 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1642 = (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))) * 0.3183098733425140380859375;
    float _1644 = (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * 0.3183098733425140380859375;
    float _1651 = ((cbLight._m0[_1599].x * _1605) * _1644) + (((cbLight._m0[_1609].x * _1574) * _1619) * _1642);
    float _1652 = ((_1605 * cbLight._m0[_1599].y) * _1644) + (((cbLight._m0[_1609].y * _1575) * _1619) * _1642);
    float _1653 = ((_1605 * cbLight._m0[_1599].z) * _1644) + (((cbLight._m0[_1609].z * _1576) * _1619) * _1642);
    uvec4 _1657 = floatBitsToUint(cbLight._m0[_1582 + 12u]);
    bool _1659 = _1657.x == 0u;
    float _1670;
    float _1672;
    float _1674;
    if (_1659)
    {
        _1670 = _1651;
        _1672 = _1652;
        _1674 = _1653;
    }
    else
    {
        uint _1678 = _1582 + 6u;
        float _1694 = (dot(vec3(cbLight._m0[_1582 + 2u].xyz), vec3(_408, _409, _410)) * 0.5) + 0.5;
        float _1695 = _1694 * _1694;
        float _3836 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1697 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
        _1670 = (((cbLight._m0[_1678].x * 0.3183098733425140380859375) * _1696) * _1697) + _1651;
        _1672 = (((cbLight._m0[_1678].y * 0.3183098733425140380859375) * _1696) * _1697) + _1652;
        _1674 = (((cbLight._m0[_1678].z * 0.3183098733425140380859375) * _1696) * _1697) + _1653;
    }
    bool _1677 = _1657.y == 0u;
    float _1715;
    float _1717;
    float _1719;
    if (_1677)
    {
        _1715 = _1670;
        _1717 = _1672;
        _1719 = _1674;
    }
    else
    {
        uint _1888 = _1582 + 7u;
        float _1904 = (dot(vec3(cbLight._m0[_1582 + 3u].xyz), vec3(_408, _409, _410)) * 0.5) + 0.5;
        float _1905 = _1904 * _1904;
        float _3852 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1906 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1907 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
        _1715 = (((cbLight._m0[_1888].x * 0.3183098733425140380859375) * _1906) * _1907) + _1670;
        _1717 = (((cbLight._m0[_1888].y * 0.3183098733425140380859375) * _1906) * _1907) + _1672;
        _1719 = (((cbLight._m0[_1888].z * 0.3183098733425140380859375) * _1906) * _1907) + _1674;
    }
    uint _1722 = _1582 + 8u;
    float _1735 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1582].w)) * _412) * 0.949999988079071044921875);
    float _1736 = _1735 * _1735;
    float _1737 = cbLight._m0[_1582].x + _381;
    float _1738 = cbLight._m0[_1582].y + _382;
    float _1739 = cbLight._m0[_1582].z + _383;
    float _1743 = inversesqrt(dot(vec3(_1737, _1738, _1739), vec3(_1737, _1738, _1739)));
    float _1744 = _1743 * _1737;
    float _1745 = _1743 * _1738;
    float _1746 = _1743 * _1739;
    float _1747 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_1582].xyz));
    float _3868 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1750 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _3879 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _1751 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _1752 = dot(vec3(_408, _409, _410), vec3(_1744, _1745, _1746));
    float _3890 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1755 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _1756 = dot(vec3(cbLight._m0[_1582].xyz), vec3(_1744, _1745, _1746));
    float _3901 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1760 = _1736 * _1736;
    float _1764 = ((_1755 * _1755) * (_1760 + (-1.0))) + 1.0;
    float _1772 = exp2(log2(1.0 - (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * 5.0);
    float _1773 = 0.959999978542327880859375 - _501;
    float _1775 = 0.959999978542327880859375 - _502;
    float _1776 = 0.959999978542327880859375 - _503;
    float _1783 = 1.0 - _1736;
    float _1794 = (0.5 / (((_1751 * ((_1750 * _1783) + _1736)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _1783) + _1736) * _1750))) * _1750;
    float _3912 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1796 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1760 / ((_1764 * _1764) * 3.141590118408203125));
    uint _1810 = _1582 + 9u;
    float _1821 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1623].w)) * _412) * 0.949999988079071044921875);
    float _1822 = _1821 * _1821;
    float _1823 = cbLight._m0[_1623].x + _381;
    float _1824 = cbLight._m0[_1623].y + _382;
    float _1825 = cbLight._m0[_1623].z + _383;
    float _1829 = inversesqrt(dot(vec3(_1823, _1824, _1825), vec3(_1823, _1824, _1825)));
    float _1830 = _1829 * _1823;
    float _1831 = _1829 * _1824;
    float _1832 = _1829 * _1825;
    float _1833 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_1623].xyz));
    float _3923 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1836 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _1837 = dot(vec3(_408, _409, _410), vec3(_1830, _1831, _1832));
    float _3934 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1840 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _1841 = dot(vec3(cbLight._m0[_1623].xyz), vec3(_1830, _1831, _1832));
    float _3945 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1845 = _1822 * _1822;
    float _1849 = ((_1840 * _1840) * (_1845 + (-1.0))) + 1.0;
    float _1856 = exp2(log2(1.0 - (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * 5.0);
    float _1863 = 1.0 - _1822;
    float _1873 = (0.5 / (((_1751 * ((_1836 * _1863) + _1822)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _1863) + _1822) * _1836))) * _1836;
    float _3956 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1875 = (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1845 / ((_1849 * _1849) * 3.141590118408203125));
    float _1885 = (((((_1856 * _1773) + _504) * cbLight._m0[_1810].x) * _1875) * _1605) + ((((cbLight._m0[_1722].x * _1574) * ((_1772 * _1773) + _504)) * _1796) * _1619);
    float _1886 = (((((_1856 * _1775) + _506) * cbLight._m0[_1810].y) * _1875) * _1605) + ((((cbLight._m0[_1722].y * _1575) * ((_1772 * _1775) + _506)) * _1796) * _1619);
    float _1887 = (((((_1856 * _1776) + _507) * cbLight._m0[_1810].z) * _1875) * _1605) + ((((cbLight._m0[_1722].z * _1576) * ((_1772 * _1776) + _507)) * _1796) * _1619);
    float _1949;
    float _1951;
    float _1953;
    if (_1659)
    {
        _1949 = _1885;
        _1951 = _1886;
        _1953 = _1887;
    }
    else
    {
        uint _1955 = _1582 + 2u;
        uint _1959 = _1582 + 10u;
        float _1973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1955].w)) * _412) * 0.949999988079071044921875);
        float _1974 = _1973 * _1973;
        float _1975 = cbLight._m0[_1955].x + _381;
        float _1976 = cbLight._m0[_1955].y + _382;
        float _1977 = cbLight._m0[_1955].z + _383;
        float _1981 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
        float _1982 = _1981 * _1975;
        float _1983 = _1981 * _1976;
        float _1984 = _1981 * _1977;
        float _1985 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_1955].xyz));
        float _3967 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1988 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1989 = dot(vec3(_408, _409, _410), vec3(_1982, _1983, _1984));
        float _3978 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1992 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1993 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_1982, _1983, _1984));
        float _3989 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1997 = _1974 * _1974;
        float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
        float _2008 = exp2(log2(1.0 - (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) * 5.0);
        float _2015 = 1.0 - _1974;
        float _2025 = (0.5 / (((_1751 * ((_1988 * _2015) + _1974)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _2015) + _1974) * _1988))) * _1988;
        float _4000 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2027 = (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
        float _2028 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
        _1949 = (((((_2008 * _1773) + _504) * cbLight._m0[_1959].x) * _2027) * _2028) + _1885;
        _1951 = (((((_2008 * _1775) + _506) * cbLight._m0[_1959].y) * _2027) * _2028) + _1886;
        _1953 = (((((_2008 * _1776) + _507) * cbLight._m0[_1959].z) * _2027) * _2028) + _1887;
    }
    float _2063;
    float _2065;
    float _2067;
    if (_1677)
    {
        _2063 = _1949;
        _2065 = _1951;
        _2067 = _1953;
    }
    else
    {
        uint _2074 = _1582 + 3u;
        uint _2078 = _1582 + 11u;
        float _2092 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2074].w)) * _412) * 0.949999988079071044921875);
        float _2093 = _2092 * _2092;
        float _2094 = cbLight._m0[_2074].x + _381;
        float _2095 = cbLight._m0[_2074].y + _382;
        float _2096 = cbLight._m0[_2074].z + _383;
        float _2100 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
        float _2101 = _2100 * _2094;
        float _2102 = _2100 * _2095;
        float _2103 = _2100 * _2096;
        float _2104 = dot(vec3(_408, _409, _410), vec3(cbLight._m0[_2074].xyz));
        float _4016 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2107 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _2108 = dot(vec3(_408, _409, _410), vec3(_2101, _2102, _2103));
        float _4027 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2111 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _2112 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_2101, _2102, _2103));
        float _4038 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2116 = _2093 * _2093;
        float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
        float _2127 = exp2(log2(1.0 - (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * 5.0);
        float _2134 = 1.0 - _2093;
        float _2144 = (0.5 / (((_1751 * ((_2107 * _2134) + _2093)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _2134) + _2093) * _2107))) * _2107;
        float _4049 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2146 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
        float _2147 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
        _2063 = (((((_2127 * _1773) + _504) * cbLight._m0[_2078].x) * _2146) * _2147) + _1949;
        _2065 = (((((_2127 * _1775) + _506) * cbLight._m0[_2078].y) * _2146) * _2147) + _1951;
        _2067 = (((((_2127 * _1776) + _507) * cbLight._m0[_2078].z) * _2146) * _2147) + _1953;
    }
    float _2281;
    float _2283;
    float _2285;
    float _2287;
    float _2289;
    float _2291;
    if (_1580.y == 0u)
    {
        float _2222 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2223 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2222;
        float _2224 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2222;
        float _2225 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2222;
        uvec4 _2237 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2238 = _2237.x;
        uint _2249 = uint((float(_2237.y) * floor(float(uint(cbSceneParam._m0[85u].y * _439) / _2238))) + floor(float(uint(cbSceneParam._m0[85u].x * _438) / _2238)));
        float _2259 = (log2(_2225 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2260 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        uint _2263 = uint(isnan(14.0) ? _2260 : (isnan(_2260) ? 14.0 : min(_2260, 14.0)));
        uvec4 _2268 = texelFetch(g_lightClusterGridBuffer, int(((_2263 << 2u) + (_2249 << 6u)) >> 2u));
        uint _2269 = _2268.x;
        uint _2270 = _2237.z;
        float _2399;
        float _2401;
        float _2403;
        float _2405;
        float _2407;
        float _2409;
        if (((((1u << ((_2270 >> 4u) & 15u)) + 4294967295u) & _2269) == 0u) || ((_2270 & 240u) == 0u))
        {
            _2399 = 0.0;
            _2401 = 0.0;
            _2403 = 0.0;
            _2405 = 0.0;
            _2407 = 0.0;
            _2409 = 0.0;
        }
        else
        {
            float _2400;
            float _2402;
            float _2404;
            float _2406;
            float _2408;
            float _2410;
            float _2543 = 0.0;
            float _2544 = 0.0;
            float _2545 = 0.0;
            float _2546 = 0.0;
            float _2547 = 0.0;
            float _2548 = 0.0;
            uint _2549 = 0u;
            uint _2558;
            bool _2559;
            for (;;)
            {
                _2558 = texelFetch(g_lightClassification, int((((_2263 << 5u) + (_2249 << 9u)) + (_2549 << 2u)) >> 2u)).x;
                _2559 = _2558 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2559)
                {
                    frontier_phi_63_pred = _2548;
                    frontier_phi_63_pred_1 = _2547;
                    frontier_phi_63_pred_2 = _2546;
                    frontier_phi_63_pred_3 = _2545;
                    frontier_phi_63_pred_4 = _2544;
                    frontier_phi_63_pred_5 = _2543;
                }
                else
                {
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    uint _2673;
                    _2667 = _2543;
                    _2668 = _2544;
                    _2669 = _2545;
                    _2670 = _2546;
                    _2671 = _2547;
                    _2672 = _2548;
                    _2673 = _2558;
                    float _2599;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    for (;;)
                    {
                        uint _2677 = uint(findLSB(_2673)) + (_2549 << 5u);
                        uint _2674 = (_2673 + 4294967295u) & _2673;
                        uint _2679 = _2677 * 48u;
                        vec4 _2693 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2679)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 3u)).x));
                        uint _2699 = (_2677 * 48u) + 4u;
                        vec4 _2712 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2699)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 3u)).x));
                        uint _2718 = (_2677 * 48u) + 8u;
                        vec3 _2729 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2718)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 2u)).x));
                        float _2733 = _2693.x - _2223;
                        float _2734 = _2693.y - _2224;
                        float _2735 = _2693.z - _2225;
                        float _2736 = dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735));
                        float _2739 = inversesqrt(_2736);
                        float _2740 = _2739 * _2733;
                        float _2741 = _2739 * _2734;
                        float _2742 = _2739 * _2735;
                        float _2743 = dot(vec3(_460, _463, _466), vec3(_2740, _2741, _2742));
                        float _2748 = 1.0 - (_2736 * _2693.w);
                        float _4075 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                        float _2749 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                        float _2750 = sqrt(_2736) * _2712.w;
                        float _2753 = 1.39999997615814208984375 / (_2750 + 1.39999997615814208984375);
                        float _2754 = _2753 * _2753;
                        float _2757 = ((1.0 - _2754) * _2743) + _2754;
                        float _2760 = _2750 * _2750;
                        float _2764 = ((isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0))) * _2749) / ((_2760 * 0.699999988079071044921875) + 1.0);
                        float _2768 = (-0.0) - _2223;
                        float _2769 = (-0.0) - _2224;
                        float _2770 = (-0.0) - _2225;
                        float _2774 = inversesqrt(dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770)));
                        float _2775 = _2774 * _2768;
                        float _2776 = _2774 * _2769;
                        float _2777 = _2774 * _2770;
                        float _2785 = exp2(log2(1.0 / ((_2760 * 3.5) + 5.0)) * 0.25);
                        float _2786 = 1.0 - _535;
                        float _2793 = sqrt(1.0 - ((1.0 - (_2786 * _2786)) * (1.0 - (_2785 * _2785))));
                        float _2794 = _2793 * _2793;
                        float _2795 = _2794 * _2794;
                        float _2796 = _2775 + _2740;
                        float _2797 = _2776 + _2741;
                        float _2798 = _2777 + _2742;
                        float _2802 = inversesqrt(dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798)));
                        float _2806 = dot(vec3(_460, _463, _466), vec3(_2775, _2776, _2777));
                        float _4091 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
                        float _2809 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                        float _2810 = dot(vec3(_460, _463, _466), vec3(_2802 * _2796, _2802 * _2797, _2802 * _2798));
                        float _4102 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                        float _2813 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                        float _2817 = ((_2813 * _2813) * (_2795 + (-1.0))) + 1.0;
                        float _2818 = _2753 * _2794;
                        float _2819 = _2818 * _2818;
                        float _2822 = ((1.0 - _2819) * _2743) + _2819;
                        float _4113 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _2823 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                        float _2824 = 1.0 - _2794;
                        float _2834 = (0.5 / (((_2823 * ((_2809 * _2824) + _2794)) + 9.9999999392252902907785028219223e-09) + (((_2823 * _2824) + _2794) * _2809))) * _2823;
                        float _4124 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
                        float _2845 = (((_2795 * 3.1415927410125732421875) * (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) / ((_2817 * _2817) * ((_2760 * 2.1991131305694580078125) + 3.141590118408203125))) * _2749;
                        _2602 = (_2764 * _2712.x) + _2670;
                        _2603 = (_2764 * _2712.y) + _2671;
                        _2604 = (_2764 * _2712.z) + _2672;
                        _2599 = (_2845 * _2729.x) + _2667;
                        _2600 = (_2845 * _2729.y) + _2668;
                        _2601 = (_2845 * _2729.z) + _2669;
                        if (_2674 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2667 = _2599;
                            _2668 = _2600;
                            _2669 = _2601;
                            _2670 = _2602;
                            _2671 = _2603;
                            _2672 = _2604;
                            _2673 = _2674;
                        }
                    }
                    frontier_phi_63_pred = _2604;
                    frontier_phi_63_pred_1 = _2603;
                    frontier_phi_63_pred_2 = _2602;
                    frontier_phi_63_pred_3 = _2601;
                    frontier_phi_63_pred_4 = _2600;
                    frontier_phi_63_pred_5 = _2599;
                }
                _2410 = frontier_phi_63_pred;
                _2408 = frontier_phi_63_pred_1;
                _2406 = frontier_phi_63_pred_2;
                _2404 = frontier_phi_63_pred_3;
                _2402 = frontier_phi_63_pred_4;
                _2400 = frontier_phi_63_pred_5;
                uint _2550 = _2549 + 1u;
                if (_2550 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2543 = _2400;
                    _2544 = _2402;
                    _2545 = _2404;
                    _2546 = _2406;
                    _2547 = _2408;
                    _2548 = _2410;
                    _2549 = _2550;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2399 = _2400;
            _2401 = _2402;
            _2403 = _2404;
            _2405 = _2406;
            _2407 = _2408;
            _2409 = _2410;
        }
        uvec4 _2413 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2414 = _2413.z;
        uint _2416 = (_2414 >> 8u) & 15u;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        if (((4294967295u << _2416) & _2269) == 0u)
        {
            _2511 = _2399;
            _2513 = _2401;
            _2515 = _2403;
            _2517 = _2405;
            _2519 = _2407;
            _2521 = _2409;
        }
        else
        {
            float _2536 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
            float _2537 = _2536 * _2223;
            float _2538 = _2536 * _2224;
            float _2539 = _2536 * _2225;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2416 < ((_2414 >> 12u) & 15u))
            {
                float _2512;
                float _2514;
                float _2516;
                float _2518;
                float _2520;
                float _2522;
                float _2650 = _2399;
                float _2651 = _2401;
                float _2652 = _2403;
                float _2653 = _2405;
                float _2654 = _2407;
                float _2655 = _2409;
                uint _2656 = _2416;
                uint _2665;
                bool _2666;
                for (;;)
                {
                    _2665 = texelFetch(g_lightClassification, int((((_2263 << 5u) + (_2249 << 9u)) + (_2656 << 2u)) >> 2u)).x;
                    _2666 = _2665 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2666)
                    {
                        frontier_phi_69_pred = _2655;
                        frontier_phi_69_pred_1 = _2654;
                        frontier_phi_69_pred_2 = _2653;
                        frontier_phi_69_pred_3 = _2652;
                        frontier_phi_69_pred_4 = _2651;
                        frontier_phi_69_pred_5 = _2650;
                    }
                    else
                    {
                        float _2850;
                        float _2851;
                        float _2852;
                        float _2853;
                        float _2854;
                        float _2855;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _2863 = _2650;
                        float _2864 = _2651;
                        float _2865 = _2652;
                        float _2866 = _2653;
                        float _2867 = _2654;
                        float _2868 = _2655;
                        uint _2869 = _2665;
                        uint _2870;
                        vec4 _2895;
                        float _2896;
                        vec4 _2911;
                        vec3 _2923;
                        vec4 _2939;
                        vec4 _2955;
                        float _3002;
                        bool _3003;
                        for (;;)
                        {
                            uint _2880 = ((_2656 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2869));
                            _2870 = (_2869 + 4294967295u) & _2869;
                            uint _2882 = _2880 * 40u;
                            _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            _2896 = _2895.w;
                            uint _2898 = (_2880 * 40u) + 4u;
                            _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            uint _2913 = (_2880 * 40u) + 8u;
                            _2923 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x));
                            uint _2926 = (_2880 * 40u) + 16u;
                            _2939 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 3u)).x));
                            uint _2942 = (_2880 * 40u) + 20u;
                            _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            uint _2958 = (_2880 * 40u) + 24u;
                            vec4 _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            uint _2977 = (_2880 * 40u) + 28u;
                            vec4 _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            _3002 = fma(_2225, _2990.z, fma(_2224, _2990.y, _2990.x * _2223)) + _2990.w;
                            _3003 = !((fma(_2225, _2971.z, fma(_2224, _2971.y, _2971.x * _2223)) + _2971.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3003)
                            {
                                float _3030 = _2895.x - _2223;
                                float _3031 = _2895.y - _2224;
                                float _3032 = _2895.z - _2225;
                                float _3033 = dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032));
                                float _3036 = inversesqrt(_3033);
                                float _3037 = _3036 * _3030;
                                float _3038 = _3036 * _3031;
                                float _3039 = _3036 * _3032;
                                float _3043 = 1.0 - (_3033 / (_2896 * _2896));
                                float _4135 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                                float _3044 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                                float _3048 = sqrt(_3033) * _2911.w;
                                float _3050 = 1.39999997615814208984375 / (_3048 + 1.39999997615814208984375);
                                float _3051 = _3050 * _3050;
                                float _3054 = ((1.0 - _3051) * dot(vec3(_3037, _3038, _3039), vec3(_460, _463, _466))) + _3051;
                                float _3057 = _3048 * _3048;
                                float _3061 = (fma(_2225, _2939.z, fma(_2224, _2939.y, _2939.x * _2223)) + _2939.w) / _3002;
                                float _3062 = (fma(_2225, _2955.z, fma(_2224, _2955.y, _2955.x * _2223)) + _2955.w) / _3002;
                                float _3066 = 1.0 - dot(vec2(_3061, _3062), vec2(_3061, _3062));
                                float _4151 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3067 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                                float _3068 = _3067 * (((isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0))) * _3044) / ((_3057 * 0.699999988079071044921875) + 1.0));
                                float _3080 = exp2(log2(1.0 / ((_3057 * 3.5) + 5.0)) * 0.25);
                                float _3081 = 1.0 - _535;
                                float _3088 = sqrt(1.0 - ((1.0 - (_3081 * _3081)) * (1.0 - (_3080 * _3080))));
                                float _3089 = _3088 * _3088;
                                float _3090 = _3089 * _3089;
                                float _3091 = _3037 - _2537;
                                float _3092 = _3038 - _2538;
                                float _3093 = _3039 - _2539;
                                float _3097 = inversesqrt(dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093)));
                                float _3101 = dot(vec3(_460, _463, _466), vec3((-0.0) - _2537, (-0.0) - _2538, (-0.0) - _2539));
                                float _4162 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3104 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                                float _3105 = dot(vec3(_460, _463, _466), vec3(_3097 * _3091, _3097 * _3092, _3097 * _3093));
                                float _4173 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3108 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                                float _3112 = ((_3108 * _3108) * (_3090 + (-1.0))) + 1.0;
                                float _3113 = _3050 * _3089;
                                float _3114 = _3113 * _3113;
                                float _3120 = ((1.0 - _3114) * dot(vec3(_460, _463, _466), vec3(_3037, _3038, _3039))) + _3114;
                                float _4184 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3121 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                                float _3122 = 1.0 - _3089;
                                float _3132 = (0.5 / (((_3121 * ((_3104 * _3122) + _3089)) + 9.9999999392252902907785028219223e-09) + (((_3121 * _3122) + _3089) * _3104))) * _3121;
                                float _4195 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                                float _3142 = (_3067 * _3044) * (((_3090 * 3.1415927410125732421875) * (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) / ((_3112 * _3112) * ((_3057 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3068 * _2911.z;
                                frontier_phi_75_pred_1 = _3068 * _2911.y;
                                frontier_phi_75_pred_2 = _3068 * _2911.x;
                                frontier_phi_75_pred_3 = _3142 * _2923.z;
                                frontier_phi_75_pred_4 = _3142 * _2923.y;
                                frontier_phi_75_pred_5 = _3142 * _2923.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3151 = frontier_phi_75_pred;
                            _3150 = frontier_phi_75_pred_1;
                            _3149 = frontier_phi_75_pred_2;
                            _3148 = frontier_phi_75_pred_3;
                            _3147 = frontier_phi_75_pred_4;
                            _3146 = frontier_phi_75_pred_5;
                            _2853 = _3149 + _2866;
                            _2854 = _3150 + _2867;
                            _2855 = _3151 + _2868;
                            _2850 = _3146 + _2863;
                            _2851 = _3147 + _2864;
                            _2852 = _3148 + _2865;
                            if (_2870 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2853;
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2870;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2855;
                        frontier_phi_69_pred_1 = _2854;
                        frontier_phi_69_pred_2 = _2853;
                        frontier_phi_69_pred_3 = _2852;
                        frontier_phi_69_pred_4 = _2851;
                        frontier_phi_69_pred_5 = _2850;
                    }
                    _2522 = frontier_phi_69_pred;
                    _2520 = frontier_phi_69_pred_1;
                    _2518 = frontier_phi_69_pred_2;
                    _2516 = frontier_phi_69_pred_3;
                    _2514 = frontier_phi_69_pred_4;
                    _2512 = frontier_phi_69_pred_5;
                    uint _2657 = _2656 + 1u;
                    if (_2657 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2650 = _2512;
                        _2651 = _2514;
                        _2652 = _2516;
                        _2653 = _2518;
                        _2654 = _2520;
                        _2655 = _2522;
                        _2656 = _2657;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2522;
                frontier_phi_57_58_ladder_1 = _2520;
                frontier_phi_57_58_ladder_2 = _2518;
                frontier_phi_57_58_ladder_3 = _2516;
                frontier_phi_57_58_ladder_4 = _2514;
                frontier_phi_57_58_ladder_5 = _2512;
            }
            else
            {
                frontier_phi_57_58_ladder = _2409;
                frontier_phi_57_58_ladder_1 = _2407;
                frontier_phi_57_58_ladder_2 = _2405;
                frontier_phi_57_58_ladder_3 = _2403;
                frontier_phi_57_58_ladder_4 = _2401;
                frontier_phi_57_58_ladder_5 = _2399;
            }
            _2511 = frontier_phi_57_58_ladder_5;
            _2513 = frontier_phi_57_58_ladder_4;
            _2515 = frontier_phi_57_58_ladder_3;
            _2517 = frontier_phi_57_58_ladder_2;
            _2519 = frontier_phi_57_58_ladder_1;
            _2521 = frontier_phi_57_58_ladder;
        }
        float _2526 = isnan(1.0) ? _519 : (isnan(_519) ? 1.0 : min(_519, 1.0));
        _2281 = (_2526 * _2517) + _1715;
        _2283 = (_2526 * _2519) + _1717;
        _2285 = (_2526 * _2521) + _1719;
        _2287 = ((_2511 * _504) * _2526) + _2063;
        _2289 = ((_2513 * _506) * _2526) + _2065;
        _2291 = ((_2515 * _507) * _2526) + _2067;
    }
    else
    {
        _2281 = _1715;
        _2283 = _1717;
        _2285 = _1719;
        _2287 = _2063;
        _2289 = _2065;
        _2291 = _2067;
    }
    uint _2297 = _480 + uint(cbMatDynParam._m0[0u].w);
    float _4211 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _4222 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _4233 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _4244 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _2332 = (((isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_2281 + ((isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))) * _519))) + ((_2287 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _1328)) * cbPerFrame._m0[3u].x)) + ((((cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _354) * _394) * cbInstanceData._m0[_2297].x);
    float _2334 = (((((cbMtdParam._m0[10u].y * TEXCOORD_1.z) * _354) * _394) * cbInstanceData._m0[_2297].y) + ((_2289 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _1328)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2283 + ((isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))) * _519)));
    float _2336 = (((((cbMtdParam._m0[10u].z * TEXCOORD_1.z) * _354) * _394) * cbInstanceData._m0[_2297].z) + ((_2291 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _1328)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2285 + ((isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))) * _519)));
    float _2344 = cbInstanceData._m0[_479 + 6u].w * (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)));
    float _2349 = _438 / cbSceneParam._m0[86u].x;
    float _2350 = _439 / cbSceneParam._m0[86u].y;
    vec4 _2364 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2349, _2350, (log2((isnan(cbSceneParam._m0[77u].w) ? _432 : (isnan(_432) ? cbSceneParam._m0[77u].w : min(_432, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2366 = _2364.x;
    float _2367 = _2364.y;
    float _2368 = _2364.z;
    float _2369 = _2364.w;
    float _2461;
    float _2463;
    float _2465;
    float _2467;
    if (_432 > cbSceneParam._m0[78u].w)
    {
        float _2424 = isnan(_432) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _432 : min(cbSceneParam._m0[80u].w, _432));
        float _2425 = _2424 / _432;
        float _2436 = _2425 * _271;
        float _2437 = _272 * _2425;
        float _2438 = (-0.0) - _2437;
        float _2439 = _2425 * _273;
        float _2441 = (cbSceneParam._m0[77u].w * _2438) / _2424;
        float _2442 = _2441 + cbSceneParam._m0[79u].w;
        float _2443 = cbSceneParam._m0[79u].w - _2437;
        float _2449 = sqrt(((_2436 * _2436) + (_2437 * _2437)) + (_2439 * _2439));
        float _2452 = (1.0 - (cbSceneParam._m0[77u].w / _2424)) * _2449;
        float _2457 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2459 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2612;
        if (abs((_2438 - _2441) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2612 = ((((_2442 > 0.0) ? exp2(_2457 * _2442) : (2.0 - exp2(_2459 * _2442))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2452;
        }
        else
        {
            float _2572 = 1.0 / cbSceneParam._m0[80u].x;
            float _2573 = isnan(_2443) ? _2442 : (isnan(_2442) ? _2443 : max(_2442, _2443));
            float _2574 = isnan(_2443) ? _2442 : (isnan(_2442) ? _2443 : min(_2442, _2443));
            float _2583 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : min(_2573, 0.0));
            float _2584 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : min(_2574, 0.0));
            _2612 = ((abs(_2449 / _2438) * cbSceneParam._m0[80u].y) * ((((_2583 - _2584) * 2.0) - ((exp2(_2457 * (isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0)))) - exp2(_2457 * (isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0))))) * _2572)) - ((exp2(_2459 * _2583) - exp2(_2459 * _2584)) * _2572))) + (_2452 * cbSceneParam._m0[80u].z);
        }
        vec4 _2614 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2349, _2350, 1.0), 0.0);
        float _2623 = exp2((_2612 * (-1.44269502162933349609375)) * (1.0 - _2614.w));
        float _2624 = log2(_2623);
        float _2640 = log2(_2369);
        _2461 = (exp2(_2640 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2624 * cbSceneParam._m0[78u].x)) * _2614.x) / cbSceneParam._m0[78u].x)) + _2366;
        _2463 = (exp2(_2640 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2624 * cbSceneParam._m0[78u].y)) * _2614.y) / cbSceneParam._m0[78u].y)) + _2367;
        _2465 = (exp2(_2640 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2624 * cbSceneParam._m0[78u].z)) * _2614.z) / cbSceneParam._m0[78u].z)) + _2368;
        _2467 = _2623 * _2369;
    }
    else
    {
        _2461 = _2366;
        _2463 = _2367;
        _2465 = _2368;
        _2467 = _2369;
    }
    float _2479 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2480 = _2479 == 3.0;
    float _2481 = log2(_2467);
    float _2488 = exp2(_2481 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0)));
    float _2489 = exp2(_2481 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0)));
    float _2490 = exp2(_2481 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0)));
    float _2499 = (_2479 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2499 * (_2480 ? _2488 : (_2488 + (cbSceneParam._m0[72u].w * _2461)));
    SV_Target.y = _2499 * (_2480 ? _2489 : (_2489 + (cbSceneParam._m0[72u].w * _2463)));
    SV_Target.z = _2499 * (_2480 ? _2490 : (_2490 + (cbSceneParam._m0[72u].w * _2465)));
    SV_Target.w = _2344;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2344;
}


