#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbvModelParamUBO
{
    vec4 _m0[10];
} cbvModelParam;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uint BINORMAL;
layout(location = 4) in uvec4 BLENDINDICES;
layout(location = 5) in vec4 BLENDWEIGHT;
layout(location = 6) in vec4 COLOR_1;
layout(location = 7) in ivec2 TEXCOORD;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec4 TEXCOORD_1;
layout(location = 5) out vec2 TEXCOORD_5;

void main()
{
    uint _81 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_1.x = 0.0;
    TEXCOORD_1.y = 0.0;
    TEXCOORD_1.z = 0.0;
    TEXCOORD_1.w = 0.0;
    TEXCOORD_5.x = 0.0;
    TEXCOORD_5.y = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _172 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _174 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _175 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _182 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _183 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _184 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _424;
    float _425;
    float _426;
    float _427;
    float _428;
    float _429;
    float _430;
    float _431;
    float _432;
    float _433;
    float _434;
    float _435;
    if (floatBitsToUint(cbMatDynParam._m0[1u]).x == 0u)
    {
        uint _208 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _81;
        precise float _212 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
        float _217 = isnan(_212) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _212 : max(0.001000000047497451305389404296875, _212));
        precise float _219 = BLENDWEIGHT.x / _217;
        precise float _220 = BLENDWEIGHT.y / _217;
        precise float _221 = BLENDWEIGHT.z / _217;
        precise float _222 = BLENDWEIGHT.w / _217;
        uvec4 _229 = floatBitsToUint(cbInstanceData._m0[(texelFetch(g_InstanceIndexBuffer, int(_208)).x * 13u) + 4u]);
        uint _230 = _229.x;
        uint _232 = (_230 + uint(float(BLENDINDICES.x))) * 3u;
        uint _239 = _232 + 1u;
        uint _246 = _232 + 2u;
        precise float _253 = _219 * cbObjMatrix._m0[_232].x;
        precise float _254 = _219 * cbObjMatrix._m0[_239].x;
        precise float _255 = _219 * cbObjMatrix._m0[_246].x;
        precise float _256 = _219 * cbObjMatrix._m0[_232].y;
        precise float _257 = _219 * cbObjMatrix._m0[_239].y;
        precise float _258 = _219 * cbObjMatrix._m0[_246].y;
        precise float _259 = _219 * cbObjMatrix._m0[_232].z;
        precise float _260 = _219 * cbObjMatrix._m0[_239].z;
        precise float _261 = _219 * cbObjMatrix._m0[_246].z;
        precise float _262 = _219 * cbObjMatrix._m0[_232].w;
        precise float _263 = _219 * cbObjMatrix._m0[_239].w;
        precise float _264 = _219 * cbObjMatrix._m0[_246].w;
        uint _267 = (_230 + uint(float(BLENDINDICES.y))) * 3u;
        uint _274 = _267 + 1u;
        uint _281 = _267 + 2u;
        precise float _288 = _220 * cbObjMatrix._m0[_267].x;
        precise float _289 = _220 * cbObjMatrix._m0[_274].x;
        precise float _290 = _220 * cbObjMatrix._m0[_281].x;
        precise float _291 = _220 * cbObjMatrix._m0[_267].y;
        precise float _292 = _220 * cbObjMatrix._m0[_274].y;
        precise float _293 = _220 * cbObjMatrix._m0[_281].y;
        precise float _294 = _220 * cbObjMatrix._m0[_267].z;
        precise float _295 = _220 * cbObjMatrix._m0[_274].z;
        precise float _296 = _220 * cbObjMatrix._m0[_281].z;
        precise float _297 = _220 * cbObjMatrix._m0[_267].w;
        precise float _298 = _220 * cbObjMatrix._m0[_274].w;
        precise float _299 = _220 * cbObjMatrix._m0[_281].w;
        precise float _300 = _253 + _288;
        precise float _301 = _254 + _289;
        precise float _302 = _255 + _290;
        precise float _303 = _256 + _291;
        precise float _304 = _257 + _292;
        precise float _305 = _258 + _293;
        precise float _306 = _259 + _294;
        precise float _307 = _260 + _295;
        precise float _308 = _261 + _296;
        precise float _309 = _262 + _297;
        precise float _310 = _263 + _298;
        precise float _311 = _264 + _299;
        uint _314 = (_230 + uint(float(BLENDINDICES.z))) * 3u;
        uint _321 = _314 + 1u;
        uint _328 = _314 + 2u;
        precise float _335 = _221 * cbObjMatrix._m0[_314].x;
        precise float _336 = _221 * cbObjMatrix._m0[_321].x;
        precise float _337 = _221 * cbObjMatrix._m0[_328].x;
        precise float _338 = _221 * cbObjMatrix._m0[_314].y;
        precise float _339 = _221 * cbObjMatrix._m0[_321].y;
        precise float _340 = _221 * cbObjMatrix._m0[_328].y;
        precise float _341 = _221 * cbObjMatrix._m0[_314].z;
        precise float _342 = _221 * cbObjMatrix._m0[_321].z;
        precise float _343 = _221 * cbObjMatrix._m0[_328].z;
        precise float _344 = _221 * cbObjMatrix._m0[_314].w;
        precise float _345 = _221 * cbObjMatrix._m0[_321].w;
        precise float _346 = _221 * cbObjMatrix._m0[_328].w;
        precise float _347 = _300 + _335;
        precise float _348 = _301 + _336;
        precise float _349 = _302 + _337;
        precise float _350 = _303 + _338;
        precise float _351 = _304 + _339;
        precise float _352 = _305 + _340;
        precise float _353 = _306 + _341;
        precise float _354 = _307 + _342;
        precise float _355 = _308 + _343;
        precise float _356 = _309 + _344;
        precise float _357 = _310 + _345;
        precise float _358 = _311 + _346;
        uint _361 = (_230 + uint(float(BLENDINDICES.w))) * 3u;
        uint _368 = _361 + 1u;
        uint _375 = _361 + 2u;
        precise float _382 = _222 * cbObjMatrix._m0[_361].x;
        precise float _383 = _222 * cbObjMatrix._m0[_368].x;
        precise float _384 = _222 * cbObjMatrix._m0[_375].x;
        precise float _385 = _222 * cbObjMatrix._m0[_361].y;
        precise float _386 = _222 * cbObjMatrix._m0[_368].y;
        precise float _387 = _222 * cbObjMatrix._m0[_375].y;
        precise float _388 = _222 * cbObjMatrix._m0[_361].z;
        precise float _389 = _222 * cbObjMatrix._m0[_368].z;
        precise float _390 = _222 * cbObjMatrix._m0[_375].z;
        precise float _391 = _222 * cbObjMatrix._m0[_361].w;
        precise float _392 = _222 * cbObjMatrix._m0[_368].w;
        precise float _393 = _222 * cbObjMatrix._m0[_375].w;
        precise float _394 = _347 + _382;
        precise float _395 = _348 + _383;
        precise float _396 = _349 + _384;
        precise float _397 = _350 + _385;
        precise float _398 = _351 + _386;
        precise float _399 = _352 + _387;
        precise float _400 = _353 + _388;
        precise float _401 = _354 + _389;
        precise float _402 = _355 + _390;
        precise float _403 = _356 + _391;
        precise float _404 = _357 + _392;
        precise float _405 = _358 + _393;
        _424 = _394;
        _425 = _397;
        _426 = _400;
        _427 = _403;
        _428 = _395;
        _429 = _398;
        _430 = _401;
        _431 = _404;
        _432 = _396;
        _433 = _399;
        _434 = _402;
        _435 = _405;
    }
    else
    {
        _424 = cbvModelParam._m0[0u].x;
        _425 = cbvModelParam._m0[0u].y;
        _426 = cbvModelParam._m0[0u].z;
        _427 = cbvModelParam._m0[0u].w;
        _428 = cbvModelParam._m0[1u].x;
        _429 = cbvModelParam._m0[1u].y;
        _430 = cbvModelParam._m0[1u].z;
        _431 = cbvModelParam._m0[1u].w;
        _432 = cbvModelParam._m0[2u].x;
        _433 = cbvModelParam._m0[2u].y;
        _434 = cbvModelParam._m0[2u].z;
        _435 = cbvModelParam._m0[2u].w;
    }
    precise float _436 = POSITION.x * _424;
    precise float _437 = POSITION.y * _425;
    precise float _438 = _437 + _436;
    precise float _439 = POSITION.z * _426;
    precise float _440 = _439 + _438;
    precise float _441 = 1.0 * _427;
    precise float _442 = _441 + _440;
    precise float _443 = POSITION.x * _428;
    precise float _444 = POSITION.y * _429;
    precise float _445 = _444 + _443;
    precise float _446 = POSITION.z * _430;
    precise float _447 = _446 + _445;
    precise float _448 = 1.0 * _431;
    precise float _449 = _448 + _447;
    precise float _450 = POSITION.x * _432;
    precise float _451 = POSITION.y * _433;
    precise float _452 = _451 + _450;
    precise float _453 = POSITION.z * _434;
    precise float _454 = _453 + _452;
    precise float _455 = 1.0 * _435;
    precise float _456 = _455 + _454;
    uint _470 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _81;
    uvec4 _472 = texelFetch(g_InstanceIndexBuffer, int(_470));
    uint _473 = _472.x;
    precise float _489 = _442 - cbSceneParam._m0[3u].x;
    precise float _490 = _449 - cbSceneParam._m0[3u].y;
    precise float _491 = _456 - cbSceneParam._m0[3u].z;
    precise float _519 = _489 * cbSceneParam._m0[24u].x;
    precise float _520 = _490 * cbSceneParam._m0[24u].y;
    precise float _521 = _520 + _519;
    precise float _522 = _491 * cbSceneParam._m0[24u].z;
    precise float _523 = _522 + _521;
    precise float _524 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _525 = _524 + _523;
    precise float _526 = _489 * cbSceneParam._m0[25u].x;
    precise float _527 = _490 * cbSceneParam._m0[25u].y;
    precise float _528 = _527 + _526;
    precise float _529 = _491 * cbSceneParam._m0[25u].z;
    precise float _530 = _529 + _528;
    precise float _531 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _532 = _531 + _530;
    precise float _533 = _489 * cbSceneParam._m0[26u].x;
    precise float _534 = _490 * cbSceneParam._m0[26u].y;
    precise float _535 = _534 + _533;
    precise float _536 = _491 * cbSceneParam._m0[26u].z;
    precise float _537 = _536 + _535;
    precise float _538 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _539 = _538 + _537;
    precise float _540 = _489 * cbSceneParam._m0[27u].x;
    precise float _541 = _490 * cbSceneParam._m0[27u].y;
    precise float _542 = _541 + _540;
    precise float _543 = _491 * cbSceneParam._m0[27u].z;
    precise float _544 = _543 + _542;
    precise float _545 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _546 = _545 + _544;
    gl_Position.x = _525;
    gl_Position.y = _532;
    gl_Position.z = _539;
    gl_Position.w = _546;
    POSITION_1.x = _525;
    POSITION_1.y = _532;
    POSITION_1.z = _539;
    POSITION_1.w = _546;
    NORMAL_1.x = fma(_175, _426, fma(_174, _425, _424 * _172));
    NORMAL_1.y = fma(_175, _430, fma(_174, _429, _428 * _172));
    NORMAL_1.z = fma(_175, _434, fma(_174, _433, _432 * _172));
    NORMAL_1.w = float(_473);
    TANGENT_1.x = fma(_184, _426, fma(_183, _425, _424 * _182));
    TANGENT_1.y = fma(_184, _430, fma(_183, _429, _428 * _182));
    TANGENT_1.z = fma(_184, _434, fma(_183, _433, _432 * _182));
    TANGENT_1.w = (float(BINORMAL) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_1.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_1.z = COLOR_1.w;
    TEXCOORD_1.w = COLOR_1.x;
    TEXCOORD_5.x = _539;
    TEXCOORD_5.y = _546;
    gl_ClipDistance[0u] = dot(vec4(_525, _532, _539, _546), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_525, _532, _539, _546), vec4(cbInstanceData._m0[(_473 * 13u) + 3u]));
}


