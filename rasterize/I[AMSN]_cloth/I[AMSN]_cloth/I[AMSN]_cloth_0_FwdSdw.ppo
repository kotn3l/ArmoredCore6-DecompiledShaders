#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D I_AMSN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D I_AMSN_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D I_AMSN_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _912;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    vec4 _295 = texture(sampler2D(I_AMSN_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _301 = _295.w;
    float _302 = _295.x * cbMtdParam._m0[9u].x;
    float _303 = _295.y * cbMtdParam._m0[9u].y;
    float _304 = _295.z * cbMtdParam._m0[9u].z;
    vec4 _316 = texture(sampler2D(I_AMSN_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _322 = cbMtdParam._m0[11u].x + _316.x;
    vec4 _334 = texture(sampler2D(I_AMSN_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _338 = _334.z;
    float _342 = (_334.x * 2.0) + (-1.0);
    float _344 = (_334.y * 2.0) + (-1.0);
    float _345 = dot(vec2(_342, _344), vec2(_342, _344));
    float _3560 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _351 = sqrt(1.0 - (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))));
    float _369 = cbMtdParam._m0[12u].x - cbMtdParam._m0[12u].w;
    float _371 = (sqrt(((_275 * _275) + (_276 * _276)) + (_277 * _277)) - cbMtdParam._m0[12u].w) / (isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0)));
    float _3576 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _373 = 1.0 - (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0)));
    float _381 = abs((fract(cbMtdParam._m0[11u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3587 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _392 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _399 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
    float _400 = _399 * _275;
    float _401 = _399 * _276;
    float _402 = _399 * _277;
    float _406 = dot(vec4(_400, _401, _402, 0.0), vec4(_392 * _219, _392 * _220, _392 * _221, 0.0)) - (((_382 * _382) * cbMtdParam._m0[11u].w) * (3.0 - (_382 * 2.0)));
    float _3598 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _413 = exp2(log2(1.0 - (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[12u].z : (isnan(cbMtdParam._m0[12u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[12u].z, 0.001000000047497451305389404296875))));
    float _416 = fma(_351, _219, fma(_344, _211 * TANGENT.x, (_197 * _189) * _342));
    float _419 = fma(_351, _220, fma(_344, _211 * TANGENT.y, (_197 * _190) * _342));
    float _422 = fma(_351, _221, fma(_344, _211 * TANGENT.z, (_197 * _191) * _342));
    float _426 = inversesqrt(dot(vec3(_416, _419, _422), vec3(_416, _419, _422)));
    float _427 = _426 * _416;
    float _428 = _426 * _419;
    float _429 = _426 * _422;
    float _3614 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _430 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _3625 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _431 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _3636 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _3647 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3658 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _3669 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _435 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _451 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _457 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _458 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _479 = fma(_429, cbSceneParam._m0[5u].z, fma(_428, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _427));
    float _482 = fma(_429, cbSceneParam._m0[6u].z, fma(_428, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _427));
    float _485 = fma(_429, cbSceneParam._m0[7u].z, fma(_428, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _427));
    uint _498 = uint(roundEven(NORMAL.w)) * 13u;
    uint _499 = _498 + 9u;
    uint _500 = _499 + uint(cbMatDynParam._m0[0u].w);
    float _506 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * cbInstanceData._m0[_500].x;
    float _507 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) * cbInstanceData._m0[_500].y;
    float _508 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) * cbInstanceData._m0[_500].z;
    float _3680 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _509 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _3691 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _510 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _3702 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _511 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _512 = 1.0 - _435;
    float _513 = _509 * _512;
    float _514 = _510 * _512;
    float _515 = _511 * _512;
    float _520 = (_509 + (-0.039999999105930328369140625)) * _435;
    float _521 = (_510 + (-0.039999999105930328369140625)) * _435;
    float _522 = (_511 + (-0.039999999105930328369140625)) * _435;
    float _523 = _520 + 0.039999999105930328369140625;
    float _525 = _521 + 0.039999999105930328369140625;
    float _526 = _522 + 0.039999999105930328369140625;
    vec4 _535 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _457, cbSceneParam._m0[86u].y * _458));
    float _538 = _535.x * TEXCOORD_1.w;
    float _539 = dot(vec3(_427, _428, _429), vec3(_400, _401, _402));
    float _542 = _539 * 2.0;
    float _546 = (_542 * _427) - _400;
    float _547 = (_542 * _428) - _401;
    float _548 = (_542 * _429) - _402;
    float _552 = abs(dot(vec3(_400, _401, _402), vec3(_427, _428, _429)));
    float _3713 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _554 = sqrt(_431);
    float _566 = exp2((_554 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_554 * 3.0));
    float _572 = (1.0 - _566) * ((_554 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _573 = _566 * _554;
    float _601 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _605 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _609 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _911;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _636 = fma(_609, cbModelParam._m0[26u].z, fma(_605, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _601));
        float _640 = fma(_609, cbModelParam._m0[27u].z, fma(_605, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _601));
        float _644 = fma(_609, cbModelParam._m0[28u].z, fma(_605, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _601));
        float _669 = _601 + _427;
        float _670 = _605 + _428;
        float _671 = _609 + _429;
        float _681 = fma(_671, cbModelParam._m0[26u].z, fma(_670, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _669)) - _636;
        float _682 = fma(_671, cbModelParam._m0[27u].z, fma(_670, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _669)) - _640;
        float _683 = fma(_671, cbModelParam._m0[28u].z, fma(_670, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _669)) - _644;
        float _687 = inversesqrt(dot(vec3(_681, _682, _683), vec3(_681, _682, _683)));
        float _700 = ((_687 * _681) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_636 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _701 = ((_687 * _682) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_640 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _702 = ((_687 * _683) / cbModelParam._m0[34u].z) + ((((((_644 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        vec4 _712 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_700, _701, _702), 0.0);
        float _739 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _740 = _739 * (_705.x + (-0.5));
        float _741 = _739 * (_705.y + (-0.5));
        float _742 = _739 * (_705.z + (-0.5));
        float _749 = exp2((_712.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_712.x + (-0.5));
        float _751 = _749 * (_712.y + (-0.5));
        float _752 = _749 * (_712.z + (-0.5));
        float _759 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_719.x + (-0.5));
        float _761 = _759 * (_719.y + (-0.5));
        float _762 = _759 * (_719.z + (-0.5));
        float _769 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_726.x + (-0.5));
        float _771 = _769 * (_726.y + (-0.5));
        float _772 = _769 * (_726.z + (-0.5));
        float _773 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _774 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _775 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _776 = _740 * 0.5;
        float _777 = _750 * 0.5;
        float _778 = _760 * 0.5;
        float _779 = dot(vec3(_776, _777, _778), vec3(_776, _777, _778));
        float _784 = (_779 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_779);
        float _793 = (dot(vec3(_427, _428, _429), vec3(_784 * _776, _784 * _777, _784 * _778)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _803 = sqrt(((_777 * _777) + (_776 * _776)) + (_778 * _778)) / (_773 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _805 = _804 * 2.0;
        float _809 = (1.0 - _804) / (_804 + 1.0);
        float _3761 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _819 = ((((1.0 - _810) * (_805 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_805 + 1.0))) + _810) * _773;
        float _820 = _741 * 0.5;
        float _821 = _751 * 0.5;
        float _822 = _761 * 0.5;
        float _823 = dot(vec3(_820, _821, _822), vec3(_820, _821, _822));
        float _828 = (_823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_823);
        float _836 = (dot(vec3(_427, _428, _429), vec3(_828 * _820, _828 * _821, _828 * _822)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _845 = sqrt(((_821 * _821) + (_820 * _820)) + (_822 * _822)) / (_774 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _847 = _846 * 2.0;
        float _851 = (1.0 - _846) / (_846 + 1.0);
        float _3794 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _861 = ((((1.0 - _852) * (_847 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_847 + 1.0))) + _852) * _774;
        float _862 = _742 * 0.5;
        float _863 = _752 * 0.5;
        float _864 = _762 * 0.5;
        float _865 = dot(vec3(_862, _863, _864), vec3(_862, _863, _864));
        float _870 = (_865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_865);
        float _878 = (dot(vec3(_427, _428, _429), vec3(_870 * _862, _870 * _863, _870 * _864)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _887 = sqrt(((_863 * _863) + (_862 * _862)) + (_864 * _864)) / (_775 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _889 = _888 * 2.0;
        float _893 = (1.0 - _888) / (_888 + 1.0);
        float _3827 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _903 = ((((1.0 - _894) * (_889 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_889 + 1.0))) + _894) * _775;
        _911 = _742;
        _913 = _741;
        _914 = _740;
        _915 = _752;
        _916 = _751;
        _917 = _750;
        _918 = _762;
        _919 = _761;
        _920 = _760;
        _921 = _775;
        _922 = _774;
        _923 = _773;
        _924 = cbModelParam._m0[36u].z * (isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0)));
        _925 = cbModelParam._m0[36u].z * (isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0)));
        _926 = cbModelParam._m0[36u].z * (isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0)));
    }
    else
    {
        _911 = _912;
        _913 = _912;
        _914 = _912;
        _915 = _912;
        _916 = _912;
        _917 = _912;
        _918 = _912;
        _919 = _912;
        _920 = _912;
        _921 = _912;
        _922 = _912;
        _923 = _912;
        _924 = 0.0;
        _925 = 0.0;
        _926 = 0.0;
    }
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _952 = fma(_609, cbModelParam._m0[30u].z, fma(_605, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _601));
        float _956 = fma(_609, cbModelParam._m0[31u].z, fma(_605, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _601));
        float _960 = fma(_609, cbModelParam._m0[32u].z, fma(_605, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _601));
        float _983 = _601 + _427;
        float _984 = _605 + _428;
        float _985 = _609 + _429;
        float _995 = fma(_985, cbModelParam._m0[30u].z, fma(_984, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _983)) - _952;
        float _996 = fma(_985, cbModelParam._m0[31u].z, fma(_984, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _983)) - _956;
        float _997 = fma(_985, cbModelParam._m0[32u].z, fma(_984, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _983)) - _960;
        float _1001 = inversesqrt(dot(vec3(_995, _996, _997), vec3(_995, _996, _997)));
        float _1014 = ((_1001 * _995) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_952 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1001 * _996) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_956 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1001 * _997) / cbModelParam._m0[35u].z) + ((((((_960 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        float _1051 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1018.x + (-0.5));
        float _1053 = _1051 * (_1018.y + (-0.5));
        float _1054 = _1051 * (_1018.z + (-0.5));
        float _1061 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1025.x + (-0.5));
        float _1063 = _1061 * (_1025.y + (-0.5));
        float _1064 = _1061 * (_1025.z + (-0.5));
        float _1071 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1032.x + (-0.5));
        float _1073 = _1071 * (_1032.y + (-0.5));
        float _1074 = _1071 * (_1032.z + (-0.5));
        float _1081 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1039.x + (-0.5));
        float _1083 = _1081 * (_1039.y + (-0.5));
        float _1084 = _1081 * (_1039.z + (-0.5));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = _1052 * 0.5;
        float _1089 = _1062 * 0.5;
        float _1090 = _1072 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(_427, _428, _429), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3890 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1115 + 1.0))) + _1120) * _1085;
        float _1130 = _1053 * 0.5;
        float _1131 = _1063 * 0.5;
        float _1132 = _1073 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_427, _428, _429), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3923 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1157 + 1.0))) + _1162) * _1086;
        float _1172 = _1054 * 0.5;
        float _1173 = _1064 * 0.5;
        float _1174 = _1074 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_427, _428, _429), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3956 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1199 + 1.0))) + _1204) * _1087;
        _1221 = _1054;
        _1222 = _1053;
        _1223 = _1052;
        _1224 = _1064;
        _1225 = _1063;
        _1226 = _1062;
        _1227 = _1074;
        _1228 = _1073;
        _1229 = _1072;
        _1230 = _1087;
        _1231 = _1086;
        _1232 = _1085;
        _1233 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1235 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
    }
    else
    {
        _1221 = _912;
        _1222 = _912;
        _1223 = _912;
        _1224 = _912;
        _1225 = _912;
        _1226 = _912;
        _1227 = _912;
        _1228 = _912;
        _1229 = _912;
        _1230 = _912;
        _1231 = _912;
        _1232 = _912;
        _1233 = 0.0;
        _1234 = 0.0;
        _1235 = 0.0;
    }
    float _1245 = (cbModelParam._m0[1u].x * (_1233 - _924)) + _924;
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _925)) + _925;
    float _1247 = (cbModelParam._m0[1u].x * (_1235 - _926)) + _926;
    float _1268 = fma(_1247, cbSceneParam._m0[89u].z, fma(_1246, cbSceneParam._m0[89u].y, _1245 * cbSceneParam._m0[89u].x));
    float _1271 = fma(_1247, cbSceneParam._m0[90u].z, fma(_1246, cbSceneParam._m0[90u].y, _1245 * cbSceneParam._m0[90u].x));
    float _1274 = fma(_1247, cbSceneParam._m0[91u].z, fma(_1246, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1245));
    float _1289 = _546 * 0.5;
    float _1290 = _547 * 0.5;
    float _1291 = _548 * 0.5;
    float _1292 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_1223, _1226, _1229, _1232));
    float _1295 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1298 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_1221, _1224, _1227, _1230));
    float _1332;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1305 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_911, _915, _918, _921));
        float _1309 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_913, _916, _919, _922));
        float _1313 = dot(vec4(_1289, _1290, _1291, 1.0), vec4(_914, _917, _920, _923));
        float _1320 = dot(vec4(cbModelParam._m0[39u]), vec4(_1289, _1290, _1291, 1.0));
        _1332 = dot(vec3(isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)), isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)), isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1320) ? 0.0 : (isnan(0.0) ? _1320 : max(0.0, _1320))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1332 = 1.0;
    }
    float _1343;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1334 = dot(vec4(cbModelParam._m0[40u]), vec4(_1289, _1290, _1291, 1.0));
        _1343 = dot(vec3(isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1334) ? 0.0 : (isnan(0.0) ? _1334 : max(0.0, _1334))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1343 = 1.0;
    }
    float _1347 = (_1343 * cbModelParam._m0[1u].x) + (_1332 * (1.0 - cbModelParam._m0[1u].x));
    float _1357 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _431);
    float _1358 = isnan(_1357) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1357 : min(cbModelParam._m0[25u].z, _1357));
    float _1440;
    float _1442;
    float _1444;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1407 = fma(_609, cbModelParam._m0[13u].z, fma(_605, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _601)) + cbModelParam._m0[13u].w;
        float _1411 = fma(_609, cbModelParam._m0[14u].z, fma(_605, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _601)) + cbModelParam._m0[14u].w;
        float _1415 = fma(_609, cbModelParam._m0[15u].z, fma(_605, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _601)) + cbModelParam._m0[15u].w;
        float _1418 = fma(_548, cbModelParam._m0[13u].z, fma(_547, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _546));
        float _1421 = fma(_548, cbModelParam._m0[14u].z, fma(_547, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _546));
        float _1424 = fma(_548, cbModelParam._m0[15u].z, fma(_547, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _546));
        float _1452;
        if (_1418 > 0.0)
        {
            _1452 = abs((1.0 - _1407) / _1418);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1407 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1452 = frontier_phi_16_14_ladder;
        }
        float _1626;
        if (_1421 > 0.0)
        {
            _1626 = abs((1.0 - _1411) / _1421);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1411 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1626 = frontier_phi_25_21_ladder;
        }
        float _1922;
        if (_1424 > 0.0)
        {
            _1922 = abs((1.0 - _1415) / _1424);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1415 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1922 = frontier_phi_37_32_ladder;
        }
        float _1924 = isnan(_1626) ? _1452 : (isnan(_1452) ? _1626 : min(_1452, _1626));
        float _1925 = isnan(_1922) ? _1924 : (isnan(_1924) ? _1922 : min(_1924, _1922));
        float _1929 = (_1925 * _1418) + _1407;
        float _1930 = (_1925 * _1421) + _1411;
        float _1931 = (_1925 * _1424) + _1415;
        float _1932 = _1925 * 9.9999997473787516355514526367188e-05;
        float _1934 = (-1.0) - _1932;
        float _1936 = _1932 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1931 > _1936) || ((_1931 < _1934) || ((_1930 > _1936) || ((_1930 < _1934) || ((_1929 < _1934) || (_1929 > _1936))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2076 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1931, cbModelParam._m0[9u].z, fma(_1930, cbModelParam._m0[9u].y, _1929 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1931, cbModelParam._m0[10u].z, fma(_1930, cbModelParam._m0[10u].y, _1929 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1931, cbModelParam._m0[11u].z, fma(_1930, cbModelParam._m0[11u].y, _1929 * cbModelParam._m0[11u].x))), _1358);
            frontier_phi_15_37_ladder = _2076.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2076.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2076.z * cbModelParam._m0[1u].y;
        }
        _1440 = frontier_phi_15_37_ladder_1;
        _1442 = frontier_phi_15_37_ladder;
        _1444 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1428 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_546, _547, _548), _1358);
        _1440 = _1428.x * cbModelParam._m0[1u].y;
        _1442 = _1428.y * cbModelParam._m0[1u].y;
        _1444 = _1428.z * cbModelParam._m0[1u].y;
    }
    float _1448 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _431);
    float _1449 = isnan(_1448) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1448 : min(cbModelParam._m0[25u].w, _1448));
    float _1541;
    float _1543;
    float _1545;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1505 = fma(_609, cbModelParam._m0[21u].z, fma(_605, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _601)) + cbModelParam._m0[21u].w;
        float _1509 = fma(_609, cbModelParam._m0[22u].z, fma(_605, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _601)) + cbModelParam._m0[22u].w;
        float _1513 = fma(_609, cbModelParam._m0[23u].z, fma(_605, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _601)) + cbModelParam._m0[23u].w;
        float _1516 = fma(_548, cbModelParam._m0[21u].z, fma(_547, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _546));
        float _1519 = fma(_548, cbModelParam._m0[22u].z, fma(_547, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _546));
        float _1522 = fma(_548, cbModelParam._m0[23u].z, fma(_547, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _546));
        float _1631;
        if (_1516 > 0.0)
        {
            _1631 = abs((1.0 - _1505) / _1516);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1505 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1631 = frontier_phi_27_23_ladder;
        }
        float _1949;
        if (_1519 > 0.0)
        {
            _1949 = abs((1.0 - _1509) / _1519);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1509 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1949 = frontier_phi_39_34_ladder;
        }
        float _2287;
        if (_1522 > 0.0)
        {
            _2287 = abs((1.0 - _1513) / _1522);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1513 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2287 = frontier_phi_49_46_ladder;
        }
        float _2289 = isnan(_1949) ? _1631 : (isnan(_1631) ? _1949 : min(_1631, _1949));
        float _2290 = isnan(_2287) ? _2289 : (isnan(_2289) ? _2287 : min(_2289, _2287));
        float _2294 = (_2290 * _1516) + _1505;
        float _2295 = (_2290 * _1519) + _1509;
        float _2296 = (_2290 * _1522) + _1513;
        float _2297 = _2290 * 9.9999997473787516355514526367188e-05;
        float _2298 = (-1.0) - _2297;
        float _2300 = _2297 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2296 > _2300) || ((_2296 < _2298) || ((_2295 > _2300) || ((_2295 < _2298) || ((_2294 < _2298) || (_2294 > _2300))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2418 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2296, cbModelParam._m0[17u].z, fma(_2295, cbModelParam._m0[17u].y, _2294 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2296, cbModelParam._m0[18u].z, fma(_2295, cbModelParam._m0[18u].y, _2294 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2296, cbModelParam._m0[19u].z, fma(_2295, cbModelParam._m0[19u].y, _2294 * cbModelParam._m0[19u].x))), _1449);
            frontier_phi_24_49_ladder = _2418.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2418.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2418.x * cbModelParam._m0[1u].z;
        }
        _1541 = frontier_phi_24_49_ladder_2;
        _1543 = frontier_phi_24_49_ladder_1;
        _1545 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1525 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_546, _547, _548), _1449);
        _1541 = _1525.x * cbModelParam._m0[1u].z;
        _1543 = _1525.y * cbModelParam._m0[1u].z;
        _1545 = _1525.z * cbModelParam._m0[1u].z;
    }
    float _1558 = (((_572 * _523) + _573) * _538) * ((cbModelParam._m0[1u].w * (_1541 - _1440)) + _1440);
    float _1560 = (((_572 * _525) + _573) * _538) * ((cbModelParam._m0[1u].w * (_1543 - _1442)) + _1442);
    float _1562 = (((_572 * _526) + _573) * _538) * ((cbModelParam._m0[1u].w * (_1545 - _1444)) + _1444);
    float _1565 = fma(_1562, cbSceneParam._m0[89u].z, fma(_1560, cbSceneParam._m0[89u].y, _1558 * cbSceneParam._m0[89u].x));
    float _1568 = fma(_1562, cbSceneParam._m0[90u].z, fma(_1560, cbSceneParam._m0[90u].y, _1558 * cbSceneParam._m0[90u].x));
    float _1571 = fma(_1562, cbSceneParam._m0[91u].z, fma(_1560, cbSceneParam._m0[91u].y, _1558 * cbSceneParam._m0[91u].x));
    float _1605 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1609 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1613 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1617 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1618 = _1605 / _1617;
    float _1619 = _1609 / _1617;
    float _1620 = _1613 / _1617;
    float _1767;
    float _1768;
    float _1769;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1647 = ((uint(_1620 > cbSceneParam._m0[59u].y) + uint(_1620 > cbSceneParam._m0[59u].x)) + uint(_1620 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1648 = _1647 + 43u;
        uint _1656 = _1647 + 44u;
        uint _1664 = _1647 + 45u;
        uint _1672 = _1647 + 46u;
        float _1683 = fma(_1617, cbSceneParam._m0[_1648].w, fma(_1613, cbSceneParam._m0[_1648].z, fma(_1609, cbSceneParam._m0[_1648].y, _1605 * cbSceneParam._m0[_1648].x)));
        float _1687 = fma(_1617, cbSceneParam._m0[_1656].w, fma(_1613, cbSceneParam._m0[_1656].z, fma(_1609, cbSceneParam._m0[_1656].y, _1605 * cbSceneParam._m0[_1656].x)));
        float _1695 = fma(_1617, cbSceneParam._m0[_1672].w, fma(_1613, cbSceneParam._m0[_1672].z, fma(_1609, cbSceneParam._m0[_1672].y, _1605 * cbSceneParam._m0[_1672].x)));
        float _1700 = cbSceneParam._m0[33u].z * _1695;
        float _1702 = cbSceneParam._m0[33u].w * _1695;
        float _1705 = fma(_1617, cbSceneParam._m0[_1664].w, fma(_1613, cbSceneParam._m0[_1664].z, fma(_1609, cbSceneParam._m0[_1664].y, _1605 * cbSceneParam._m0[_1664].x))) / _1695;
        float _1753 = (cbSceneParam._m0[33u].x - sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620))) * cbSceneParam._m0[33u].y;
        float _4082 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1760 = (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1700 + _1683) / _1695, (_1702 + _1687) / _1695), _1705), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1702 + _1683) / _1695, (_1687 - _1700) / _1695), _1705), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1683 - _1700) / _1695, (_1687 - _1702) / _1695), _1705), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1683 - _1702) / _1695, (_1700 + _1687) / _1695), _1705), 0.0)).x), vec4(0.25)));
        _1767 = 1.0 - (_1760 * cbSceneParam._m0[34u].x);
        _1768 = 1.0 - (_1760 * cbSceneParam._m0[34u].y);
        _1769 = 1.0 - (_1760 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1767 = 1.0;
        _1768 = 1.0;
        _1769 = 1.0;
    }
    float _1833;
    float _1835;
    float _1837;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1821 = fma(_1617, cbSceneParam._m0[63u].w, fma(_1613, cbSceneParam._m0[63u].z, fma(_1609, cbSceneParam._m0[63u].y, _1605 * cbSceneParam._m0[63u].x)));
        float _1822 = fma(_1617, cbSceneParam._m0[60u].w, fma(_1613, cbSceneParam._m0[60u].z, fma(_1609, cbSceneParam._m0[60u].y, _1605 * cbSceneParam._m0[60u].x))) / _1821;
        float _1823 = fma(_1617, cbSceneParam._m0[61u].w, fma(_1613, cbSceneParam._m0[61u].z, fma(_1609, cbSceneParam._m0[61u].y, _1605 * cbSceneParam._m0[61u].x))) / _1821;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1822 >= cbSceneParam._m0[64u].x) && (_1823 >= cbSceneParam._m0[64u].y)) && (_1822 <= cbSceneParam._m0[64u].z)) && (_1823 <= cbSceneParam._m0[64u].w))
        {
            float _1962 = fma(_1617, cbSceneParam._m0[62u].w, fma(_1613, cbSceneParam._m0[62u].z, fma(_1609, cbSceneParam._m0[62u].y, _1605 * cbSceneParam._m0[62u].x))) / _1821;
            float _1966 = isnan(cbSceneParam._m0[41u].w) ? _1962 : (isnan(_1962) ? cbSceneParam._m0[41u].w : max(_1962, cbSceneParam._m0[41u].w));
            float _2009 = (cbSceneParam._m0[33u].x - sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620))) * cbSceneParam._m0[33u].y;
            float _4098 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
            float _2016 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1822, cbSceneParam._m0[33u].w + _1823), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1822, _1823 - cbSceneParam._m0[33u].z), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1822 - cbSceneParam._m0[33u].z, _1823 - cbSceneParam._m0[33u].w), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1822 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1823), _1966), 0.0)).x), vec4(0.25)));
            float _2020 = 1.0 - (_2016 * cbSceneParam._m0[34u].x);
            float _2021 = 1.0 - (_2016 * cbSceneParam._m0[34u].y);
            float _2022 = 1.0 - (_2016 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2021) ? _1768 : (isnan(_1768) ? _2021 : min(_1768, _2021));
            frontier_phi_36_35_ladder_1 = isnan(_2022) ? _1769 : (isnan(_1769) ? _2022 : min(_1769, _2022));
            frontier_phi_36_35_ladder_2 = isnan(_2020) ? _1767 : (isnan(_1767) ? _2020 : min(_1767, _2020));
        }
        else
        {
            frontier_phi_36_35_ladder = _1768;
            frontier_phi_36_35_ladder_1 = _1769;
            frontier_phi_36_35_ladder_2 = _1767;
        }
        _1833 = frontier_phi_36_35_ladder_2;
        _1835 = frontier_phi_36_35_ladder;
        _1837 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1833 = _1767;
        _1835 = _1768;
        _1837 = _1769;
    }
    uvec4 _1842 = floatBitsToUint(cbInstanceData._m0[_498 + 5u]);
    uint _1844 = _1842.x * 14u;
    uint _1845 = _1844 + 13u;
    float _1852 = _538 + (-1.0);
    float _1857 = (cbLight._m0[_1845].x * _1852) + 1.0;
    float _1858 = (cbLight._m0[_1845].y * _1852) + 1.0;
    float _1859 = (cbLight._m0[_1845].z * _1852) + 1.0;
    float _1860 = (cbLight._m0[_1845].w * _1852) + 1.0;
    uint _1861 = _1844 + 5u;
    float _1867 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
    uint _1871 = _1844 + 4u;
    float _1881 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
    uint _1885 = _1844 | 1u;
    float _1896 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_427, _428, _429));
    float _1899 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_427, _428, _429));
    float _4134 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _4145 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1904 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * 0.3183098733425140380859375;
    float _1906 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * 0.3183098733425140380859375;
    float _1913 = ((cbLight._m0[_1861].x * _1867) * _1906) + (((cbLight._m0[_1871].x * _1833) * _1881) * _1904);
    float _1914 = ((_1867 * cbLight._m0[_1861].y) * _1906) + (((cbLight._m0[_1871].y * _1835) * _1881) * _1904);
    float _1915 = ((_1867 * cbLight._m0[_1861].z) * _1906) + (((cbLight._m0[_1871].z * _1837) * _1881) * _1904);
    uvec4 _1919 = floatBitsToUint(cbLight._m0[_1844 + 12u]);
    bool _1921 = _1919.x == 0u;
    float _2023;
    float _2025;
    float _2027;
    if (_1921)
    {
        _2023 = _1913;
        _2025 = _1914;
        _2027 = _1915;
    }
    else
    {
        uint _2031 = _1844 + 6u;
        float _2047 = (dot(vec3(cbLight._m0[_1844 + 2u].xyz), vec3(_427, _428, _429)) * 0.5) + 0.5;
        float _2048 = _2047 * _2047;
        float _4156 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2049 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2050 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _2023 = (((cbLight._m0[_2031].x * 0.3183098733425140380859375) * _2049) * _2050) + _1913;
        _2025 = (((cbLight._m0[_2031].y * 0.3183098733425140380859375) * _2049) * _2050) + _1914;
        _2027 = (((cbLight._m0[_2031].z * 0.3183098733425140380859375) * _2049) * _2050) + _1915;
    }
    bool _2030 = _1919.y == 0u;
    float _2085;
    float _2087;
    float _2089;
    if (_2030)
    {
        _2085 = _2023;
        _2087 = _2025;
        _2089 = _2027;
    }
    else
    {
        uint _2258 = _1844 + 7u;
        float _2274 = (dot(vec3(cbLight._m0[_1844 + 3u].xyz), vec3(_427, _428, _429)) * 0.5) + 0.5;
        float _2275 = _2274 * _2274;
        float _4172 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2276 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _2277 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _2085 = (((cbLight._m0[_2258].x * 0.3183098733425140380859375) * _2276) * _2277) + _2023;
        _2087 = (((cbLight._m0[_2258].y * 0.3183098733425140380859375) * _2276) * _2277) + _2025;
        _2089 = (((cbLight._m0[_2258].z * 0.3183098733425140380859375) * _2276) * _2277) + _2027;
    }
    uint _2092 = _1844 + 8u;
    float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1844].w)) * _431) * 0.949999988079071044921875);
    float _2106 = _2105 * _2105;
    float _2107 = cbLight._m0[_1844].x + _400;
    float _2108 = cbLight._m0[_1844].y + _401;
    float _2109 = cbLight._m0[_1844].z + _402;
    float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
    float _2114 = _2113 * _2107;
    float _2115 = _2113 * _2108;
    float _2116 = _2113 * _2109;
    float _2117 = dot(vec3(_427, _428, _429), vec3(cbLight._m0[_1844].xyz));
    float _4188 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _4199 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _2121 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _2122 = dot(vec3(_427, _428, _429), vec3(_2114, _2115, _2116));
    float _4210 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2125 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _2126 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_2114, _2115, _2116));
    float _4221 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2130 = _2106 * _2106;
    float _2134 = ((_2125 * _2125) * (_2130 + (-1.0))) + 1.0;
    float _2142 = exp2(log2(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) * 5.0);
    float _2143 = 0.959999978542327880859375 - _520;
    float _2145 = 0.959999978542327880859375 - _521;
    float _2146 = 0.959999978542327880859375 - _522;
    float _2153 = 1.0 - _2106;
    float _2164 = (0.5 / (((_2121 * ((_2120 * _2153) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2153) + _2106) * _2120))) * _2120;
    float _4232 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2166 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2130 / ((_2134 * _2134) * 3.141590118408203125));
    uint _2180 = _1844 + 9u;
    float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1885].w)) * _431) * 0.949999988079071044921875);
    float _2192 = _2191 * _2191;
    float _2193 = cbLight._m0[_1885].x + _400;
    float _2194 = cbLight._m0[_1885].y + _401;
    float _2195 = cbLight._m0[_1885].z + _402;
    float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
    float _2200 = _2199 * _2193;
    float _2201 = _2199 * _2194;
    float _2202 = _2199 * _2195;
    float _2203 = dot(vec3(_427, _428, _429), vec3(cbLight._m0[_1885].xyz));
    float _4243 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _2207 = dot(vec3(_427, _428, _429), vec3(_2200, _2201, _2202));
    float _4254 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _2211 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_2200, _2201, _2202));
    float _4265 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2215 = _2192 * _2192;
    float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
    float _2226 = exp2(log2(1.0 - (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) * 5.0);
    float _2233 = 1.0 - _2192;
    float _2243 = (0.5 / (((_2121 * ((_2206 * _2233) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2233) + _2192) * _2206))) * _2206;
    float _4276 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2245 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
    float _2255 = (((((_2226 * _2143) + _523) * cbLight._m0[_2180].x) * _2245) * _1867) + ((((cbLight._m0[_2092].x * _1833) * ((_2142 * _2143) + _523)) * _2166) * _1881);
    float _2256 = (((((_2226 * _2145) + _525) * cbLight._m0[_2180].y) * _2245) * _1867) + ((((cbLight._m0[_2092].y * _1835) * ((_2142 * _2145) + _525)) * _2166) * _1881);
    float _2257 = (((((_2226 * _2146) + _526) * cbLight._m0[_2180].z) * _2245) * _1867) + ((((cbLight._m0[_2092].z * _1837) * ((_2142 * _2146) + _526)) * _2166) * _1881);
    float _2313;
    float _2315;
    float _2317;
    if (_1921)
    {
        _2313 = _2255;
        _2315 = _2256;
        _2317 = _2257;
    }
    else
    {
        uint _2319 = _1844 + 2u;
        uint _2323 = _1844 + 10u;
        float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2319].w)) * _431) * 0.949999988079071044921875);
        float _2338 = _2337 * _2337;
        float _2339 = cbLight._m0[_2319].x + _400;
        float _2340 = cbLight._m0[_2319].y + _401;
        float _2341 = cbLight._m0[_2319].z + _402;
        float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
        float _2346 = _2345 * _2339;
        float _2347 = _2345 * _2340;
        float _2348 = _2345 * _2341;
        float _2349 = dot(vec3(_427, _428, _429), vec3(cbLight._m0[_2319].xyz));
        float _4287 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _2353 = dot(vec3(_427, _428, _429), vec3(_2346, _2347, _2348));
        float _4298 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _2357 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_2346, _2347, _2348));
        float _4309 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2361 = _2338 * _2338;
        float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
        float _2372 = exp2(log2(1.0 - (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) * 5.0);
        float _2379 = 1.0 - _2338;
        float _2389 = (0.5 / (((_2121 * ((_2352 * _2379) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2379) + _2338) * _2352))) * _2352;
        float _4320 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2391 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
        float _2392 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
        _2313 = (((((_2372 * _2143) + _523) * cbLight._m0[_2323].x) * _2391) * _2392) + _2255;
        _2315 = (((((_2372 * _2145) + _525) * cbLight._m0[_2323].y) * _2391) * _2392) + _2256;
        _2317 = (((((_2372 * _2146) + _526) * cbLight._m0[_2323].z) * _2391) * _2392) + _2257;
    }
    float _2423;
    float _2425;
    float _2427;
    if (_2030)
    {
        _2423 = _2313;
        _2425 = _2315;
        _2427 = _2317;
    }
    else
    {
        uint _2434 = _1844 + 3u;
        uint _2438 = _1844 + 11u;
        float _2452 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2434].w)) * _431) * 0.949999988079071044921875);
        float _2453 = _2452 * _2452;
        float _2454 = cbLight._m0[_2434].x + _400;
        float _2455 = cbLight._m0[_2434].y + _401;
        float _2456 = cbLight._m0[_2434].z + _402;
        float _2460 = inversesqrt(dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456)));
        float _2461 = _2460 * _2454;
        float _2462 = _2460 * _2455;
        float _2463 = _2460 * _2456;
        float _2464 = dot(vec3(_427, _428, _429), vec3(cbLight._m0[_2434].xyz));
        float _4336 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2468 = dot(vec3(_427, _428, _429), vec3(_2461, _2462, _2463));
        float _4347 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _2472 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_2461, _2462, _2463));
        float _4358 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2476 = _2453 * _2453;
        float _2480 = ((_2471 * _2471) * (_2476 + (-1.0))) + 1.0;
        float _2487 = exp2(log2(1.0 - (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) * 5.0);
        float _2494 = 1.0 - _2453;
        float _2504 = (0.5 / (((_2121 * ((_2467 * _2494) + _2453)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2494) + _2453) * _2467))) * _2467;
        float _4369 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2506 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_2476 / ((_2480 * _2480) * 3.141590118408203125));
        float _2507 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
        _2423 = (((((_2487 * _2143) + _523) * cbLight._m0[_2438].x) * _2506) * _2507) + _2313;
        _2425 = (((((_2487 * _2145) + _525) * cbLight._m0[_2438].y) * _2506) * _2507) + _2315;
        _2427 = (((((_2487 * _2146) + _526) * cbLight._m0[_2438].z) * _2506) * _2507) + _2317;
    }
    float _2572;
    float _2574;
    float _2576;
    float _2578;
    float _2580;
    float _2582;
    if (_1842.y == 0u)
    {
        uvec4 _2528 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2529 = _2528.x;
        uint _2540 = uint((float(_2528.y) * floor(float(uint(cbSceneParam._m0[85u].y * _458) / _2529))) + floor(float(uint(cbSceneParam._m0[85u].x * _457) / _2529)));
        float _2550 = (log2(_1620 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2551 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        uint _2554 = uint(isnan(14.0) ? _2551 : (isnan(_2551) ? 14.0 : min(_2551, 14.0)));
        uvec4 _2559 = texelFetch(g_lightClusterGridBuffer, int(((_2554 << 2u) + (_2540 << 6u)) >> 2u));
        uint _2560 = _2559.x;
        uint _2561 = _2528.z;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        if (((((1u << ((_2561 >> 4u) & 15u)) + 4294967295u) & _2560) == 0u) || ((_2561 & 240u) == 0u))
        {
            _2669 = 0.0;
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
        }
        else
        {
            float _2670;
            float _2672;
            float _2674;
            float _2676;
            float _2678;
            float _2680;
            float _2813 = 0.0;
            float _2814 = 0.0;
            float _2815 = 0.0;
            float _2816 = 0.0;
            float _2817 = 0.0;
            float _2818 = 0.0;
            uint _2819 = 0u;
            uint _2828;
            bool _2829;
            for (;;)
            {
                _2828 = texelFetch(g_lightClassification, int((((_2554 << 5u) + (_2540 << 9u)) + (_2819 << 2u)) >> 2u)).x;
                _2829 = _2828 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2829)
                {
                    frontier_phi_68_pred = _2818;
                    frontier_phi_68_pred_1 = _2817;
                    frontier_phi_68_pred_2 = _2816;
                    frontier_phi_68_pred_3 = _2814;
                    frontier_phi_68_pred_4 = _2813;
                    frontier_phi_68_pred_5 = _2815;
                }
                else
                {
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    uint _2943;
                    _2937 = _2813;
                    _2938 = _2814;
                    _2939 = _2815;
                    _2940 = _2816;
                    _2941 = _2817;
                    _2942 = _2818;
                    _2943 = _2828;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    for (;;)
                    {
                        uint _2947 = uint(findLSB(_2943)) + (_2819 << 5u);
                        uint _2944 = (_2943 + 4294967295u) & _2943;
                        uint _2949 = _2947 * 48u;
                        vec4 _2963 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2949)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 3u)).x));
                        uint _2969 = (_2947 * 48u) + 4u;
                        vec4 _2982 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2969)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 3u)).x));
                        uint _2988 = (_2947 * 48u) + 8u;
                        vec3 _2999 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2988)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 2u)).x));
                        float _3003 = _2963.x - _1618;
                        float _3004 = _2963.y - _1619;
                        float _3005 = _2963.z - _1620;
                        float _3006 = dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005));
                        float _3009 = inversesqrt(_3006);
                        float _3010 = _3009 * _3003;
                        float _3011 = _3009 * _3004;
                        float _3012 = _3009 * _3005;
                        float _3013 = dot(vec3(_479, _482, _485), vec3(_3010, _3011, _3012));
                        float _3018 = 1.0 - (_3006 * _2963.w);
                        float _4395 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3019 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                        float _3020 = sqrt(_3006) * _2982.w;
                        float _3023 = 1.39999997615814208984375 / (_3020 + 1.39999997615814208984375);
                        float _3024 = _3023 * _3023;
                        float _3027 = ((1.0 - _3024) * _3013) + _3024;
                        float _3030 = _3020 * _3020;
                        float _3034 = ((isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0))) * _3019) / ((_3030 * 0.699999988079071044921875) + 1.0);
                        float _3038 = (-0.0) - _1618;
                        float _3039 = (-0.0) - _1619;
                        float _3040 = (-0.0) - _1620;
                        float _3044 = inversesqrt(dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040)));
                        float _3045 = _3044 * _3038;
                        float _3046 = _3044 * _3039;
                        float _3047 = _3044 * _3040;
                        float _3054 = exp2(log2(1.0 / ((_3030 * 3.5) + 5.0)) * 0.25);
                        float _3055 = 1.0 - _554;
                        float _3062 = sqrt(1.0 - ((1.0 - (_3055 * _3055)) * (1.0 - (_3054 * _3054))));
                        float _3063 = _3062 * _3062;
                        float _3064 = _3063 * _3063;
                        float _3065 = _3045 + _3010;
                        float _3066 = _3046 + _3011;
                        float _3067 = _3047 + _3012;
                        float _3071 = inversesqrt(dot(vec3(_3065, _3066, _3067), vec3(_3065, _3066, _3067)));
                        float _3075 = dot(vec3(_479, _482, _485), vec3(_3045, _3046, _3047));
                        float _4411 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3078 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3079 = dot(vec3(_479, _482, _485), vec3(_3071 * _3065, _3071 * _3066, _3071 * _3067));
                        float _4422 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3082 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                        float _3086 = ((_3082 * _3082) * (_3064 + (-1.0))) + 1.0;
                        float _3087 = _3023 * _3063;
                        float _3088 = _3087 * _3087;
                        float _3091 = ((1.0 - _3088) * _3013) + _3088;
                        float _4433 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3092 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                        float _3093 = 1.0 - _3063;
                        float _3103 = (0.5 / (((_3092 * ((_3078 * _3093) + _3063)) + 9.9999999392252902907785028219223e-09) + (((_3092 * _3093) + _3063) * _3078))) * _3092;
                        float _4444 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                        float _3114 = (((_3064 * 3.1415927410125732421875) * (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) / ((_3086 * _3086) * ((_3030 * 2.1991131305694580078125) + 3.141590118408203125))) * _3019;
                        _2872 = (_3034 * _2982.x) + _2940;
                        _2873 = (_3034 * _2982.y) + _2941;
                        _2874 = (_3034 * _2982.z) + _2942;
                        _2869 = (_3114 * _2999.x) + _2937;
                        _2870 = (_3114 * _2999.y) + _2938;
                        _2871 = (_3114 * _2999.z) + _2939;
                        if (_2944 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2937 = _2869;
                            _2938 = _2870;
                            _2939 = _2871;
                            _2940 = _2872;
                            _2941 = _2873;
                            _2942 = _2874;
                            _2943 = _2944;
                        }
                    }
                    frontier_phi_68_pred = _2874;
                    frontier_phi_68_pred_1 = _2873;
                    frontier_phi_68_pred_2 = _2872;
                    frontier_phi_68_pred_3 = _2870;
                    frontier_phi_68_pred_4 = _2869;
                    frontier_phi_68_pred_5 = _2871;
                }
                _2680 = frontier_phi_68_pred;
                _2678 = frontier_phi_68_pred_1;
                _2676 = frontier_phi_68_pred_2;
                _2672 = frontier_phi_68_pred_3;
                _2670 = frontier_phi_68_pred_4;
                _2674 = frontier_phi_68_pred_5;
                uint _2820 = _2819 + 1u;
                if (_2820 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2813 = _2670;
                    _2814 = _2672;
                    _2815 = _2674;
                    _2816 = _2676;
                    _2817 = _2678;
                    _2818 = _2680;
                    _2819 = _2820;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2669 = _2670;
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
        }
        uvec4 _2683 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2684 = _2683.z;
        uint _2686 = (_2684 >> 8u) & 15u;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        if (((4294967295u << _2686) & _2560) == 0u)
        {
            _2781 = _2669;
            _2783 = _2671;
            _2785 = _2673;
            _2787 = _2675;
            _2789 = _2677;
            _2791 = _2679;
        }
        else
        {
            float _2806 = inversesqrt(dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620)));
            float _2807 = _2806 * _1618;
            float _2808 = _2806 * _1619;
            float _2809 = _2806 * _1620;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2686 < ((_2684 >> 12u) & 15u))
            {
                float _2782;
                float _2784;
                float _2786;
                float _2788;
                float _2790;
                float _2792;
                float _2920 = _2669;
                float _2921 = _2671;
                float _2922 = _2673;
                float _2923 = _2675;
                float _2924 = _2677;
                float _2925 = _2679;
                uint _2926 = _2686;
                uint _2935;
                bool _2936;
                for (;;)
                {
                    _2935 = texelFetch(g_lightClassification, int((((_2554 << 5u) + (_2540 << 9u)) + (_2926 << 2u)) >> 2u)).x;
                    _2936 = _2935 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2936)
                    {
                        frontier_phi_74_pred = _2922;
                        frontier_phi_74_pred_1 = _2921;
                        frontier_phi_74_pred_2 = _2920;
                        frontier_phi_74_pred_3 = _2925;
                        frontier_phi_74_pred_4 = _2924;
                        frontier_phi_74_pred_5 = _2923;
                    }
                    else
                    {
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3132 = _2920;
                        float _3133 = _2921;
                        float _3134 = _2922;
                        float _3135 = _2923;
                        float _3136 = _2924;
                        float _3137 = _2925;
                        uint _3138 = _2935;
                        uint _3139;
                        vec4 _3164;
                        float _3165;
                        vec4 _3180;
                        vec3 _3192;
                        vec4 _3208;
                        vec4 _3224;
                        float _3271;
                        bool _3272;
                        for (;;)
                        {
                            uint _3149 = ((_2926 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3138));
                            _3139 = (_3138 + 4294967295u) & _3138;
                            uint _3151 = _3149 * 40u;
                            _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            _3165 = _3164.w;
                            uint _3167 = (_3149 * 40u) + 4u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3182 = (_3149 * 40u) + 8u;
                            _3192 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x));
                            uint _3195 = (_3149 * 40u) + 16u;
                            _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            uint _3211 = (_3149 * 40u) + 20u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            uint _3227 = (_3149 * 40u) + 24u;
                            vec4 _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3246 = (_3149 * 40u) + 28u;
                            vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            _3271 = fma(_1620, _3259.z, fma(_1619, _3259.y, _3259.x * _1618)) + _3259.w;
                            _3272 = !((fma(_1620, _3240.z, fma(_1619, _3240.y, _3240.x * _1618)) + _3240.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3272)
                            {
                                float _3299 = _3164.x - _1618;
                                float _3300 = _3164.y - _1619;
                                float _3301 = _3164.z - _1620;
                                float _3302 = dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301));
                                float _3305 = inversesqrt(_3302);
                                float _3306 = _3305 * _3299;
                                float _3307 = _3305 * _3300;
                                float _3308 = _3305 * _3301;
                                float _3312 = 1.0 - (_3302 / (_3165 * _3165));
                                float _4455 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3313 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                                float _3317 = sqrt(_3302) * _3180.w;
                                float _3319 = 1.39999997615814208984375 / (_3317 + 1.39999997615814208984375);
                                float _3320 = _3319 * _3319;
                                float _3323 = ((1.0 - _3320) * dot(vec3(_3306, _3307, _3308), vec3(_479, _482, _485))) + _3320;
                                float _3326 = _3317 * _3317;
                                float _3330 = (fma(_1620, _3208.z, fma(_1619, _3208.y, _3208.x * _1618)) + _3208.w) / _3271;
                                float _3331 = (fma(_1620, _3224.z, fma(_1619, _3224.y, _3224.x * _1618)) + _3224.w) / _3271;
                                float _3335 = 1.0 - dot(vec2(_3330, _3331), vec2(_3330, _3331));
                                float _4471 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3336 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3337 = _3336 * (((isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0))) * _3313) / ((_3326 * 0.699999988079071044921875) + 1.0));
                                float _3349 = exp2(log2(1.0 / ((_3326 * 3.5) + 5.0)) * 0.25);
                                float _3350 = 1.0 - _554;
                                float _3357 = sqrt(1.0 - ((1.0 - (_3350 * _3350)) * (1.0 - (_3349 * _3349))));
                                float _3358 = _3357 * _3357;
                                float _3359 = _3358 * _3358;
                                float _3360 = _3306 - _2807;
                                float _3361 = _3307 - _2808;
                                float _3362 = _3308 - _2809;
                                float _3366 = inversesqrt(dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362)));
                                float _3370 = dot(vec3(_479, _482, _485), vec3((-0.0) - _2807, (-0.0) - _2808, (-0.0) - _2809));
                                float _4482 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3373 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                                float _3374 = dot(vec3(_479, _482, _485), vec3(_3366 * _3360, _3366 * _3361, _3366 * _3362));
                                float _4493 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3377 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                                float _3381 = ((_3377 * _3377) * (_3359 + (-1.0))) + 1.0;
                                float _3382 = _3319 * _3358;
                                float _3383 = _3382 * _3382;
                                float _3389 = ((1.0 - _3383) * dot(vec3(_479, _482, _485), vec3(_3306, _3307, _3308))) + _3383;
                                float _4504 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3390 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                                float _3391 = 1.0 - _3358;
                                float _3401 = (0.5 / (((_3390 * ((_3373 * _3391) + _3358)) + 9.9999999392252902907785028219223e-09) + (((_3390 * _3391) + _3358) * _3373))) * _3390;
                                float _4515 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3411 = (_3336 * _3313) * (((_3359 * 3.1415927410125732421875) * (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) / ((_3381 * _3381) * ((_3326 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3411 * _3192.z;
                                frontier_phi_80_pred_1 = _3411 * _3192.y;
                                frontier_phi_80_pred_2 = _3411 * _3192.x;
                                frontier_phi_80_pred_3 = _3337 * _3180.z;
                                frontier_phi_80_pred_4 = _3337 * _3180.y;
                                frontier_phi_80_pred_5 = _3337 * _3180.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3417 = frontier_phi_80_pred;
                            _3416 = frontier_phi_80_pred_1;
                            _3415 = frontier_phi_80_pred_2;
                            _3420 = frontier_phi_80_pred_3;
                            _3419 = frontier_phi_80_pred_4;
                            _3418 = frontier_phi_80_pred_5;
                            _3122 = _3418 + _3135;
                            _3123 = _3419 + _3136;
                            _3124 = _3420 + _3137;
                            _3119 = _3415 + _3132;
                            _3120 = _3416 + _3133;
                            _3121 = _3417 + _3134;
                            if (_3139 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3139;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3121;
                        frontier_phi_74_pred_1 = _3120;
                        frontier_phi_74_pred_2 = _3119;
                        frontier_phi_74_pred_3 = _3124;
                        frontier_phi_74_pred_4 = _3123;
                        frontier_phi_74_pred_5 = _3122;
                    }
                    _2786 = frontier_phi_74_pred;
                    _2784 = frontier_phi_74_pred_1;
                    _2782 = frontier_phi_74_pred_2;
                    _2792 = frontier_phi_74_pred_3;
                    _2790 = frontier_phi_74_pred_4;
                    _2788 = frontier_phi_74_pred_5;
                    uint _2927 = _2926 + 1u;
                    if (_2927 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2920 = _2782;
                        _2921 = _2784;
                        _2922 = _2786;
                        _2923 = _2788;
                        _2924 = _2790;
                        _2925 = _2792;
                        _2926 = _2927;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2790;
                frontier_phi_62_63_ladder_1 = _2788;
                frontier_phi_62_63_ladder_2 = _2786;
                frontier_phi_62_63_ladder_3 = _2792;
                frontier_phi_62_63_ladder_4 = _2784;
                frontier_phi_62_63_ladder_5 = _2782;
            }
            else
            {
                frontier_phi_62_63_ladder = _2677;
                frontier_phi_62_63_ladder_1 = _2675;
                frontier_phi_62_63_ladder_2 = _2673;
                frontier_phi_62_63_ladder_3 = _2679;
                frontier_phi_62_63_ladder_4 = _2671;
                frontier_phi_62_63_ladder_5 = _2669;
            }
            _2781 = frontier_phi_62_63_ladder_5;
            _2783 = frontier_phi_62_63_ladder_4;
            _2785 = frontier_phi_62_63_ladder_2;
            _2787 = frontier_phi_62_63_ladder_1;
            _2789 = frontier_phi_62_63_ladder;
            _2791 = frontier_phi_62_63_ladder_3;
        }
        float _2796 = isnan(1.0) ? _538 : (isnan(_538) ? 1.0 : min(_538, 1.0));
        _2572 = (_2796 * _2787) + _2085;
        _2574 = (_2796 * _2789) + _2087;
        _2576 = (_2796 * _2791) + _2089;
        _2578 = ((_2781 * _523) * _2796) + _2423;
        _2580 = ((_2783 * _525) * _2796) + _2425;
        _2582 = ((_2785 * _526) * _2796) + _2427;
    }
    else
    {
        _2572 = _2085;
        _2574 = _2087;
        _2576 = _2089;
        _2578 = _2423;
        _2580 = _2425;
        _2582 = _2427;
    }
    uint _2588 = _499 + uint(cbMatDynParam._m0[0u].w);
    float _4531 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _4542 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _4553 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _4564 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _2623 = (((isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2572 + ((isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))) * _538))) + ((_2578 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1347)) * cbPerFrame._m0[3u].x)) + ((((cbMtdParam._m0[10u].x * TEXCOORD_1.z) * _373) * _413) * cbInstanceData._m0[_2588].x);
    float _2625 = (((((cbMtdParam._m0[10u].y * TEXCOORD_1.z) * _373) * _413) * cbInstanceData._m0[_2588].y) + ((_2580 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _1347)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2574 + ((isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))) * _538)));
    float _2627 = (((((cbMtdParam._m0[10u].z * TEXCOORD_1.z) * _373) * _413) * cbInstanceData._m0[_2588].z) + ((_2582 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _1347)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2576 + ((isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))) * _538)));
    float _2635 = cbInstanceData._m0[_498 + 6u].w * (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)));
    float _2640 = _457 / cbSceneParam._m0[86u].x;
    float _2641 = _458 / cbSceneParam._m0[86u].y;
    vec4 _2655 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2640, _2641, (log2((isnan(cbSceneParam._m0[77u].w) ? _451 : (isnan(_451) ? cbSceneParam._m0[77u].w : min(_451, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2657 = _2655.x;
    float _2658 = _2655.y;
    float _2659 = _2655.z;
    float _2660 = _2655.w;
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    if (_451 > cbSceneParam._m0[78u].w)
    {
        float _2694 = isnan(_451) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _451 : min(cbSceneParam._m0[80u].w, _451));
        float _2695 = _2694 / _451;
        float _2706 = _2695 * _275;
        float _2707 = _276 * _2695;
        float _2708 = (-0.0) - _2707;
        float _2709 = _2695 * _277;
        float _2711 = (cbSceneParam._m0[77u].w * _2708) / _2694;
        float _2712 = _2711 + cbSceneParam._m0[79u].w;
        float _2713 = cbSceneParam._m0[79u].w - _2707;
        float _2719 = sqrt(((_2706 * _2706) + (_2707 * _2707)) + (_2709 * _2709));
        float _2722 = (1.0 - (cbSceneParam._m0[77u].w / _2694)) * _2719;
        float _2727 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2729 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2882;
        if (abs((_2708 - _2711) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2882 = ((((_2712 > 0.0) ? exp2(_2727 * _2712) : (2.0 - exp2(_2729 * _2712))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2722;
        }
        else
        {
            float _2842 = 1.0 / cbSceneParam._m0[80u].x;
            float _2843 = isnan(_2713) ? _2712 : (isnan(_2712) ? _2713 : max(_2712, _2713));
            float _2844 = isnan(_2713) ? _2712 : (isnan(_2712) ? _2713 : min(_2712, _2713));
            float _2853 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : min(_2843, 0.0));
            float _2854 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : min(_2844, 0.0));
            _2882 = ((abs(_2719 / _2708) * cbSceneParam._m0[80u].y) * ((((_2853 - _2854) * 2.0) - ((exp2(_2727 * (isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0)))) - exp2(_2727 * (isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0))))) * _2842)) - ((exp2(_2729 * _2853) - exp2(_2729 * _2854)) * _2842))) + (_2722 * cbSceneParam._m0[80u].z);
        }
        vec4 _2884 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2640, _2641, 1.0), 0.0);
        float _2893 = exp2((_2882 * (-1.44269502162933349609375)) * (1.0 - _2884.w));
        float _2894 = log2(_2893);
        float _2910 = log2(_2660);
        _2731 = (exp2(_2910 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2894 * cbSceneParam._m0[78u].x)) * _2884.x) / cbSceneParam._m0[78u].x)) + _2657;
        _2733 = (exp2(_2910 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2894 * cbSceneParam._m0[78u].y)) * _2884.y) / cbSceneParam._m0[78u].y)) + _2658;
        _2735 = (exp2(_2910 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2894 * cbSceneParam._m0[78u].z)) * _2884.z) / cbSceneParam._m0[78u].z)) + _2659;
        _2737 = _2893 * _2660;
    }
    else
    {
        _2731 = _2657;
        _2733 = _2658;
        _2735 = _2659;
        _2737 = _2660;
    }
    float _2749 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2750 = _2749 == 3.0;
    float _2751 = log2(_2737);
    float _2758 = exp2(_2751 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0)));
    float _2759 = exp2(_2751 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0)));
    float _2760 = exp2(_2751 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0)));
    float _2769 = (_2749 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2769 * (_2750 ? _2758 : (_2758 + (cbSceneParam._m0[72u].w * _2731)));
    SV_Target.y = _2769 * (_2750 ? _2759 : (_2759 + (cbSceneParam._m0[72u].w * _2733)));
    SV_Target.z = _2769 * (_2750 ? _2760 : (_2760 + (cbSceneParam._m0[72u].w * _2735)));
    SV_Target.w = _2635;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2635;
}


