#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1273;
float _3919;
float _3920;
float _3921;
float _3922;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _258 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _264 = _258.x * cbMtdParam._m0[10u].x;
    float _265 = _258.y * cbMtdParam._m0[10u].y;
    float _266 = _258.z * cbMtdParam._m0[10u].z;
    vec4 _285 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x;
    float _343 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _332)) + 1.0;
    float _3931 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _344 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _351 = (_344 * ((_285.x * cbMtdParam._m0[11u].x) - _264)) + _264;
    float _352 = (_344 * ((_285.y * cbMtdParam._m0[11u].y) - _265)) + _265;
    float _353 = (_344 * ((_285.z * cbMtdParam._m0[11u].z) - _266)) + _266;
    vec4 _372 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _402 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _332)) + 1.0;
    float _3942 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _403 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _410 = (_403 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _411 = (_403 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _412 = (_403 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    vec4 _429 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _454 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _332)) + 1.0;
    float _3953 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _462 = (_455 * ((_429.x * cbMtdParam._m0[13u].x) - _410)) + _410;
    float _463 = (_455 * ((_429.y * cbMtdParam._m0[13u].y) - _411)) + _411;
    float _464 = (_455 * ((_429.z * cbMtdParam._m0[13u].z) - _412)) + _412;
    vec4 _485 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _514 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3964 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _515 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _522 = (_515 * ((_485.x * cbMtdParam._m0[14u].x) - _462)) + _462;
    float _523 = (_515 * ((_485.y * cbMtdParam._m0[14u].y) - _463)) + _463;
    float _524 = (_515 * ((_485.z * cbMtdParam._m0[14u].z) - _464)) + _464;
    vec4 _540 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _562 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _580 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _582 = _580.x;
    float _583 = _580.y;
    float _586 = cbMtdParam._m0[16u].w * _580.z;
    float _589 = (((cbMtdParam._m0[17u].x * _562.z) - _586) * _344) + _586;
    vec4 _602 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _611 = (((cbMtdParam._m0[17u].y * _602.z) - _589) * _403) + _589;
    vec4 _624 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _633 = (((cbMtdParam._m0[17u].z * _624.z) - _611) * _455) + _611;
    float _638 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_540.z * cbMtdParam._m0[16u].z) - _633)) + _633;
    vec4 _651 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _663 = ((_562.x - _582) * _344) + _582;
    float _664 = ((_562.y - _583) * _344) + _583;
    float _669 = ((_602.x - _663) * _403) + _663;
    float _670 = ((_602.y - _664) * _403) + _664;
    float _679 = ((((_624.x - _669) * _455) + _669) * 2.0) + (-1.0);
    float _680 = ((((_624.y - _670) * _455) + _670) * 2.0) + (-1.0);
    float _681 = dot(vec2(_679, _680), vec2(_679, _680));
    float _3975 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _686 = sqrt(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))));
    float _696 = ((((_651.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _679) + ((((_540.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y);
    float _697 = ((((_651.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _680) + ((((_540.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y);
    float _700 = fma(_686, _228 * NORMAL.x, fma(_697, _235 * TANGENT.x, (_221 * _213) * _696));
    float _703 = fma(_686, _228 * NORMAL.y, fma(_697, _235 * TANGENT.y, (_221 * _214) * _696));
    float _706 = fma(_686, _228 * NORMAL.z, fma(_697, _235 * TANGENT.z, (_221 * _215) * _696));
    float _710 = inversesqrt(dot(vec3(_700, _703, _706), vec3(_700, _703, _706)));
    float _711 = _710 * _700;
    float _712 = _710 * _703;
    float _713 = _710 * _706;
    float _3986 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _714 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _4008 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _4019 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _733 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _773 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _783 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _773);
    float _784 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _773);
    float _785 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _773);
    float _789 = inversesqrt(dot(vec3(_783, _784, _785), vec3(_783, _784, _785)));
    float _790 = _783 * _789;
    float _791 = _784 * _789;
    float _792 = _785 * _789;
    vec4 _797 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _799 = _797.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _953 = sqrt(((_783 * _783) + (_784 * _784)) + (_785 * _785));
        float _959 = (cbMatDynParam._m0[5u].x * _953) + cbMatDynParam._m0[5u].y;
        float _4030 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _964 = (cbMatDynParam._m0[5u].z * _953) + cbMatDynParam._m0[5u].w;
        float _4041 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) - _960)) + _960) < ((_799 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _810 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _811 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _829 = fma(_713, cbSceneParam._m0[5u].z, fma(_712, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _711));
    float _832 = fma(_713, cbSceneParam._m0[6u].z, fma(_712, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _711));
    float _835 = fma(_713, cbSceneParam._m0[7u].z, fma(_712, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _711));
    uint _848 = uint(roundEven(NORMAL.w)) * 13u;
    uint _849 = _848 + 9u;
    uint _850 = _849 + uint(cbMatDynParam._m0[0u].w);
    float _856 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * cbInstanceData._m0[_850].x;
    float _857 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_850].y;
    float _858 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * cbInstanceData._m0[_850].z;
    float _4052 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _860 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _4074 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _861 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    vec4 _870 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _810, cbSceneParam._m0[86u].y * _811));
    float _873 = _870.x * TEXCOORD_5.w;
    float _874 = dot(vec3(_711, _712, _713), vec3(_790, _791, _792));
    float _877 = _874 * 2.0;
    float _881 = (_877 * _711) - _790;
    float _882 = (_877 * _712) - _791;
    float _883 = (_877 * _713) - _792;
    float _887 = abs(dot(vec3(_790, _791, _792), vec3(_711, _712, _713)));
    float _4085 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _889 = sqrt(_714);
    float _902 = exp2((_889 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_889 * 3.0));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1272;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _997 = fma(_942, cbModelParam._m0[26u].z, fma(_938, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _934));
        float _1001 = fma(_942, cbModelParam._m0[27u].z, fma(_938, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _934));
        float _1005 = fma(_942, cbModelParam._m0[28u].z, fma(_938, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _934));
        float _1030 = _934 + _711;
        float _1031 = _938 + _712;
        float _1032 = _942 + _713;
        float _1042 = fma(_1032, cbModelParam._m0[26u].z, fma(_1031, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1030)) - _997;
        float _1043 = fma(_1032, cbModelParam._m0[27u].z, fma(_1031, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1030)) - _1001;
        float _1044 = fma(_1032, cbModelParam._m0[28u].z, fma(_1031, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1030)) - _1005;
        float _1048 = inversesqrt(dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044)));
        float _1061 = ((_1048 * _1042) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_997 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1048 * _1043) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1001 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1048 * _1044) / cbModelParam._m0[34u].z) + ((((((_1005 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1061, _1062, _1063), 0.0);
        float _1100 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1066.x + (-0.5));
        float _1102 = _1100 * (_1066.y + (-0.5));
        float _1103 = _1100 * (_1066.z + (-0.5));
        float _1110 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1073.x + (-0.5));
        float _1112 = _1110 * (_1073.y + (-0.5));
        float _1113 = _1110 * (_1073.z + (-0.5));
        float _1120 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1080.x + (-0.5));
        float _1122 = _1120 * (_1080.y + (-0.5));
        float _1123 = _1120 * (_1080.z + (-0.5));
        float _1130 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1087.x + (-0.5));
        float _1132 = _1130 * (_1087.y + (-0.5));
        float _1133 = _1130 * (_1087.z + (-0.5));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = _1101 * 0.5;
        float _1138 = _1111 * 0.5;
        float _1139 = _1121 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1154 = (dot(vec3(_711, _712, _713), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1164 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _4133 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1166 + 1.0))) + _1171) * _1134;
        float _1181 = _1102 * 0.5;
        float _1182 = _1112 * 0.5;
        float _1183 = _1122 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_711, _712, _713), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _4166 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1208 + 1.0))) + _1213) * _1135;
        float _1223 = _1103 * 0.5;
        float _1224 = _1113 * 0.5;
        float _1225 = _1123 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_711, _712, _713), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _4199 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1250 + 1.0))) + _1255) * _1136;
        _1272 = _1103;
        _1274 = _1102;
        _1275 = _1101;
        _1276 = _1113;
        _1277 = _1112;
        _1278 = _1111;
        _1279 = _1123;
        _1280 = _1122;
        _1281 = _1121;
        _1282 = _1136;
        _1283 = _1135;
        _1284 = _1134;
        _1285 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
        _1286 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1287 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
    }
    else
    {
        _1272 = _1273;
        _1274 = _1273;
        _1275 = _1273;
        _1276 = _1273;
        _1277 = _1273;
        _1278 = _1273;
        _1279 = _1273;
        _1280 = _1273;
        _1281 = _1273;
        _1282 = _1273;
        _1283 = _1273;
        _1284 = _1273;
        _1285 = 0.0;
        _1286 = 0.0;
        _1287 = 0.0;
    }
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1316 = fma(_942, cbModelParam._m0[30u].z, fma(_938, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _934));
        float _1320 = fma(_942, cbModelParam._m0[31u].z, fma(_938, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _934));
        float _1324 = fma(_942, cbModelParam._m0[32u].z, fma(_938, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _934));
        float _1347 = _934 + _711;
        float _1348 = _938 + _712;
        float _1349 = _942 + _713;
        float _1359 = fma(_1349, cbModelParam._m0[30u].z, fma(_1348, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1347)) - _1316;
        float _1360 = fma(_1349, cbModelParam._m0[31u].z, fma(_1348, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1347)) - _1320;
        float _1361 = fma(_1349, cbModelParam._m0[32u].z, fma(_1348, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1347)) - _1324;
        float _1365 = inversesqrt(dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361)));
        float _1378 = ((_1365 * _1359) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1316 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1379 = ((_1365 * _1360) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1320 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1380 = ((_1365 * _1361) / cbModelParam._m0[35u].z) + ((((((_1324 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        float _1415 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1382.x + (-0.5));
        float _1417 = _1415 * (_1382.y + (-0.5));
        float _1418 = _1415 * (_1382.z + (-0.5));
        float _1425 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1389.x + (-0.5));
        float _1427 = _1425 * (_1389.y + (-0.5));
        float _1428 = _1425 * (_1389.z + (-0.5));
        float _1435 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1396.x + (-0.5));
        float _1437 = _1435 * (_1396.y + (-0.5));
        float _1438 = _1435 * (_1396.z + (-0.5));
        float _1445 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1403.x + (-0.5));
        float _1447 = _1445 * (_1403.y + (-0.5));
        float _1448 = _1445 * (_1403.z + (-0.5));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = _1416 * 0.5;
        float _1453 = _1426 * 0.5;
        float _1454 = _1436 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_711, _712, _713), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _4262 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1479 + 1.0))) + _1484) * _1449;
        float _1494 = _1417 * 0.5;
        float _1495 = _1427 * 0.5;
        float _1496 = _1437 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_711, _712, _713), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4295 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1521 + 1.0))) + _1526) * _1450;
        float _1536 = _1418 * 0.5;
        float _1537 = _1428 * 0.5;
        float _1538 = _1438 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_711, _712, _713), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4328 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1563 + 1.0))) + _1568) * _1451;
        _1585 = _1418;
        _1586 = _1417;
        _1587 = _1416;
        _1588 = _1428;
        _1589 = _1427;
        _1590 = _1426;
        _1591 = _1438;
        _1592 = _1437;
        _1593 = _1436;
        _1594 = _1451;
        _1595 = _1450;
        _1596 = _1449;
        _1597 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
        _1598 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
    }
    else
    {
        _1585 = _1273;
        _1586 = _1273;
        _1587 = _1273;
        _1588 = _1273;
        _1589 = _1273;
        _1590 = _1273;
        _1591 = _1273;
        _1592 = _1273;
        _1593 = _1273;
        _1594 = _1273;
        _1595 = _1273;
        _1596 = _1273;
        _1597 = 0.0;
        _1598 = 0.0;
        _1599 = 0.0;
    }
    float _1609 = (cbModelParam._m0[1u].x * (_1597 - _1285)) + _1285;
    float _1610 = (cbModelParam._m0[1u].x * (_1598 - _1286)) + _1286;
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1287)) + _1287;
    float _1632 = fma(_1611, cbSceneParam._m0[89u].z, fma(_1610, cbSceneParam._m0[89u].y, _1609 * cbSceneParam._m0[89u].x));
    float _1635 = fma(_1611, cbSceneParam._m0[90u].z, fma(_1610, cbSceneParam._m0[90u].y, _1609 * cbSceneParam._m0[90u].x));
    float _1638 = fma(_1611, cbSceneParam._m0[91u].z, fma(_1610, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1609));
    float _1653 = _881 * 0.5;
    float _1654 = _882 * 0.5;
    float _1655 = _883 * 0.5;
    float _1656 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1659 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1586, _1589, _1592, _1595));
    float _1662 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1585, _1588, _1591, _1594));
    float _1696;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1669 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1272, _1276, _1279, _1282));
        float _1673 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1274, _1277, _1280, _1283));
        float _1677 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1275, _1278, _1281, _1284));
        float _1684 = dot(vec4(cbModelParam._m0[39u]), vec4(_1653, _1654, _1655, 1.0));
        _1696 = dot(vec3(isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1684) ? 0.0 : (isnan(0.0) ? _1684 : max(0.0, _1684))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1696 = 1.0;
    }
    float _1707;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1698 = dot(vec4(cbModelParam._m0[40u]), vec4(_1653, _1654, _1655, 1.0));
        _1707 = dot(vec3(isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1698) ? 0.0 : (isnan(0.0) ? _1698 : max(0.0, _1698))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1707 = 1.0;
    }
    float _1711 = (_1707 * cbModelParam._m0[1u].x) + (_1696 * (1.0 - cbModelParam._m0[1u].x));
    float _1721 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _714);
    float _1722 = isnan(_1721) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1721 : min(cbModelParam._m0[25u].z, _1721));
    float _1802;
    float _1804;
    float _1806;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1769 = fma(_942, cbModelParam._m0[13u].z, fma(_938, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _934)) + cbModelParam._m0[13u].w;
        float _1773 = fma(_942, cbModelParam._m0[14u].z, fma(_938, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _934)) + cbModelParam._m0[14u].w;
        float _1777 = fma(_942, cbModelParam._m0[15u].z, fma(_938, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _934)) + cbModelParam._m0[15u].w;
        float _1780 = fma(_883, cbModelParam._m0[13u].z, fma(_882, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _881));
        float _1783 = fma(_883, cbModelParam._m0[14u].z, fma(_882, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _881));
        float _1786 = fma(_883, cbModelParam._m0[15u].z, fma(_882, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _881));
        float _1814;
        if (_1780 > 0.0)
        {
            _1814 = abs((1.0 - _1769) / _1780);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1769 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1814 = frontier_phi_17_15_ladder;
        }
        float _1985;
        if (_1783 > 0.0)
        {
            _1985 = abs((1.0 - _1773) / _1783);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1773 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1985 = frontier_phi_26_22_ladder;
        }
        float _2281;
        if (_1786 > 0.0)
        {
            _2281 = abs((1.0 - _1777) / _1786);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1777 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2281 = frontier_phi_38_33_ladder;
        }
        float _2283 = isnan(_1985) ? _1814 : (isnan(_1814) ? _1985 : min(_1814, _1985));
        float _2284 = isnan(_2281) ? _2283 : (isnan(_2283) ? _2281 : min(_2283, _2281));
        float _2288 = (_2284 * _1780) + _1769;
        float _2289 = (_2284 * _1783) + _1773;
        float _2290 = (_2284 * _1786) + _1777;
        float _2291 = _2284 * 9.9999997473787516355514526367188e-05;
        float _2293 = (-1.0) - _2291;
        float _2295 = _2291 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2290 > _2295) || ((_2290 < _2293) || ((_2289 > _2295) || ((_2289 < _2293) || ((_2288 < _2293) || (_2288 > _2295))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2435 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2290, cbModelParam._m0[9u].z, fma(_2289, cbModelParam._m0[9u].y, _2288 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2290, cbModelParam._m0[10u].z, fma(_2289, cbModelParam._m0[10u].y, _2288 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2290, cbModelParam._m0[11u].z, fma(_2289, cbModelParam._m0[11u].y, _2288 * cbModelParam._m0[11u].x))), _1722);
            frontier_phi_16_38_ladder = _2435.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2435.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2435.x * cbModelParam._m0[1u].y;
        }
        _1802 = frontier_phi_16_38_ladder_2;
        _1804 = frontier_phi_16_38_ladder_1;
        _1806 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1790 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_881, _882, _883), _1722);
        _1802 = _1790.x * cbModelParam._m0[1u].y;
        _1804 = _1790.y * cbModelParam._m0[1u].y;
        _1806 = _1790.z * cbModelParam._m0[1u].y;
    }
    float _1810 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _714);
    float _1811 = isnan(_1810) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1810 : min(cbModelParam._m0[25u].w, _1810));
    float _1902;
    float _1904;
    float _1906;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1866 = fma(_942, cbModelParam._m0[21u].z, fma(_938, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _934)) + cbModelParam._m0[21u].w;
        float _1870 = fma(_942, cbModelParam._m0[22u].z, fma(_938, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _934)) + cbModelParam._m0[22u].w;
        float _1874 = fma(_942, cbModelParam._m0[23u].z, fma(_938, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _934)) + cbModelParam._m0[23u].w;
        float _1877 = fma(_883, cbModelParam._m0[21u].z, fma(_882, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _881));
        float _1880 = fma(_883, cbModelParam._m0[22u].z, fma(_882, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _881));
        float _1883 = fma(_883, cbModelParam._m0[23u].z, fma(_882, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _881));
        float _1990;
        if (_1877 > 0.0)
        {
            _1990 = abs((1.0 - _1866) / _1877);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1866 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1990 = frontier_phi_28_24_ladder;
        }
        float _2308;
        if (_1880 > 0.0)
        {
            _2308 = abs((1.0 - _1870) / _1880);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1870 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2308 = frontier_phi_40_35_ladder;
        }
        float _2635;
        if (_1883 > 0.0)
        {
            _2635 = abs((1.0 - _1874) / _1883);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1874 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2635 = frontier_phi_50_47_ladder;
        }
        float _2637 = isnan(_2308) ? _1990 : (isnan(_1990) ? _2308 : min(_1990, _2308));
        float _2638 = isnan(_2635) ? _2637 : (isnan(_2637) ? _2635 : min(_2637, _2635));
        float _2642 = (_2638 * _1877) + _1866;
        float _2643 = (_2638 * _1880) + _1870;
        float _2644 = (_2638 * _1883) + _1874;
        float _2645 = _2638 * 9.9999997473787516355514526367188e-05;
        float _2646 = (-1.0) - _2645;
        float _2648 = _2645 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2644 > _2648) || ((_2644 < _2646) || ((_2643 > _2648) || ((_2643 < _2646) || ((_2642 < _2646) || (_2642 > _2648))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2762 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2644, cbModelParam._m0[17u].z, fma(_2643, cbModelParam._m0[17u].y, _2642 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2644, cbModelParam._m0[18u].z, fma(_2643, cbModelParam._m0[18u].y, _2642 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2644, cbModelParam._m0[19u].z, fma(_2643, cbModelParam._m0[19u].y, _2642 * cbModelParam._m0[19u].x))), _1811);
            frontier_phi_25_50_ladder = _2762.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2762.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2762.x * cbModelParam._m0[1u].z;
        }
        _1902 = frontier_phi_25_50_ladder_2;
        _1904 = frontier_phi_25_50_ladder_1;
        _1906 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1886 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_881, _882, _883), _1811);
        _1902 = _1886.x * cbModelParam._m0[1u].z;
        _1904 = _1886.y * cbModelParam._m0[1u].z;
        _1906 = _1886.z * cbModelParam._m0[1u].z;
    }
    float _1918 = ((((1.0 - _902) * ((_889 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_902 * _889)) * _873;
    float _1919 = _1918 * ((cbModelParam._m0[1u].w * (_1902 - _1802)) + _1802);
    float _1920 = _1918 * ((cbModelParam._m0[1u].w * (_1904 - _1804)) + _1804);
    float _1921 = _1918 * ((cbModelParam._m0[1u].w * (_1906 - _1806)) + _1806);
    float _1924 = fma(_1921, cbSceneParam._m0[89u].z, fma(_1920, cbSceneParam._m0[89u].y, _1919 * cbSceneParam._m0[89u].x));
    float _1927 = fma(_1921, cbSceneParam._m0[90u].z, fma(_1920, cbSceneParam._m0[90u].y, _1919 * cbSceneParam._m0[90u].x));
    float _1930 = fma(_1921, cbSceneParam._m0[91u].z, fma(_1920, cbSceneParam._m0[91u].y, _1919 * cbSceneParam._m0[91u].x));
    float _1964 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1968 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1972 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1976 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1977 = _1964 / _1976;
    float _1978 = _1968 / _1976;
    float _1979 = _1972 / _1976;
    float _2126;
    float _2127;
    float _2128;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2006 = ((uint(_1979 > cbSceneParam._m0[59u].y) + uint(_1979 > cbSceneParam._m0[59u].x)) + uint(_1979 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2007 = _2006 + 43u;
        uint _2015 = _2006 + 44u;
        uint _2023 = _2006 + 45u;
        uint _2031 = _2006 + 46u;
        float _2042 = fma(_1976, cbSceneParam._m0[_2007].w, fma(_1972, cbSceneParam._m0[_2007].z, fma(_1968, cbSceneParam._m0[_2007].y, _1964 * cbSceneParam._m0[_2007].x)));
        float _2046 = fma(_1976, cbSceneParam._m0[_2015].w, fma(_1972, cbSceneParam._m0[_2015].z, fma(_1968, cbSceneParam._m0[_2015].y, _1964 * cbSceneParam._m0[_2015].x)));
        float _2054 = fma(_1976, cbSceneParam._m0[_2031].w, fma(_1972, cbSceneParam._m0[_2031].z, fma(_1968, cbSceneParam._m0[_2031].y, _1964 * cbSceneParam._m0[_2031].x)));
        float _2059 = cbSceneParam._m0[33u].z * _2054;
        float _2061 = cbSceneParam._m0[33u].w * _2054;
        float _2064 = fma(_1976, cbSceneParam._m0[_2023].w, fma(_1972, cbSceneParam._m0[_2023].z, fma(_1968, cbSceneParam._m0[_2023].y, _1964 * cbSceneParam._m0[_2023].x))) / _2054;
        float _2112 = (cbSceneParam._m0[33u].x - sqrt(((_1978 * _1978) + (_1977 * _1977)) + (_1979 * _1979))) * cbSceneParam._m0[33u].y;
        float _4454 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2119 = (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2059 + _2042) / _2054, (_2061 + _2046) / _2054), _2064), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2061 + _2042) / _2054, (_2046 - _2059) / _2054), _2064), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2042 - _2059) / _2054, (_2046 - _2061) / _2054), _2064), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2042 - _2061) / _2054, (_2059 + _2046) / _2054), _2064), 0.0)).x), vec4(0.25)));
        _2126 = 1.0 - (_2119 * cbSceneParam._m0[34u].x);
        _2127 = 1.0 - (_2119 * cbSceneParam._m0[34u].y);
        _2128 = 1.0 - (_2119 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2126 = 1.0;
        _2127 = 1.0;
        _2128 = 1.0;
    }
    float _2192;
    float _2194;
    float _2196;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2180 = fma(_1976, cbSceneParam._m0[63u].w, fma(_1972, cbSceneParam._m0[63u].z, fma(_1968, cbSceneParam._m0[63u].y, _1964 * cbSceneParam._m0[63u].x)));
        float _2181 = fma(_1976, cbSceneParam._m0[60u].w, fma(_1972, cbSceneParam._m0[60u].z, fma(_1968, cbSceneParam._m0[60u].y, _1964 * cbSceneParam._m0[60u].x))) / _2180;
        float _2182 = fma(_1976, cbSceneParam._m0[61u].w, fma(_1972, cbSceneParam._m0[61u].z, fma(_1968, cbSceneParam._m0[61u].y, _1964 * cbSceneParam._m0[61u].x))) / _2180;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2181 >= cbSceneParam._m0[64u].x) && (_2182 >= cbSceneParam._m0[64u].y)) && (_2181 <= cbSceneParam._m0[64u].z)) && (_2182 <= cbSceneParam._m0[64u].w))
        {
            float _2321 = fma(_1976, cbSceneParam._m0[62u].w, fma(_1972, cbSceneParam._m0[62u].z, fma(_1968, cbSceneParam._m0[62u].y, _1964 * cbSceneParam._m0[62u].x))) / _2180;
            float _2325 = isnan(cbSceneParam._m0[41u].w) ? _2321 : (isnan(_2321) ? cbSceneParam._m0[41u].w : max(_2321, cbSceneParam._m0[41u].w));
            float _2368 = (cbSceneParam._m0[33u].x - sqrt(((_1978 * _1978) + (_1977 * _1977)) + (_1979 * _1979))) * cbSceneParam._m0[33u].y;
            float _4470 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
            float _2375 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2181, cbSceneParam._m0[33u].w + _2182), _2325), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2181, _2182 - cbSceneParam._m0[33u].z), _2325), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2181 - cbSceneParam._m0[33u].z, _2182 - cbSceneParam._m0[33u].w), _2325), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2181 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2182), _2325), 0.0)).x), vec4(0.25)));
            float _2379 = 1.0 - (_2375 * cbSceneParam._m0[34u].x);
            float _2380 = 1.0 - (_2375 * cbSceneParam._m0[34u].y);
            float _2381 = 1.0 - (_2375 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2381) ? _2128 : (isnan(_2128) ? _2381 : min(_2128, _2381));
            frontier_phi_37_36_ladder_1 = isnan(_2380) ? _2127 : (isnan(_2127) ? _2380 : min(_2127, _2380));
            frontier_phi_37_36_ladder_2 = isnan(_2379) ? _2126 : (isnan(_2126) ? _2379 : min(_2126, _2379));
        }
        else
        {
            frontier_phi_37_36_ladder = _2128;
            frontier_phi_37_36_ladder_1 = _2127;
            frontier_phi_37_36_ladder_2 = _2126;
        }
        _2192 = frontier_phi_37_36_ladder_2;
        _2194 = frontier_phi_37_36_ladder_1;
        _2196 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2192 = _2126;
        _2194 = _2127;
        _2196 = _2128;
    }
    uvec4 _2201 = floatBitsToUint(cbInstanceData._m0[_848 + 5u]);
    uint _2203 = _2201.x * 14u;
    uint _2204 = _2203 + 13u;
    float _2211 = _873 + (-1.0);
    float _2216 = (cbLight._m0[_2204].x * _2211) + 1.0;
    float _2217 = (cbLight._m0[_2204].y * _2211) + 1.0;
    float _2218 = (cbLight._m0[_2204].z * _2211) + 1.0;
    float _2219 = (cbLight._m0[_2204].w * _2211) + 1.0;
    uint _2220 = _2203 + 5u;
    float _2226 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
    uint _2230 = _2203 + 4u;
    float _2240 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
    uint _2244 = _2203 | 1u;
    float _2255 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_711, _712, _713));
    float _2258 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_711, _712, _713));
    float _4506 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _4517 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2263 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * 0.3183098733425140380859375;
    float _2265 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * 0.3183098733425140380859375;
    float _2272 = ((cbLight._m0[_2220].x * _2226) * _2265) + (((cbLight._m0[_2230].x * _2192) * _2240) * _2263);
    float _2273 = ((_2226 * cbLight._m0[_2220].y) * _2265) + (((cbLight._m0[_2230].y * _2194) * _2240) * _2263);
    float _2274 = ((_2226 * cbLight._m0[_2220].z) * _2265) + (((cbLight._m0[_2230].z * _2196) * _2240) * _2263);
    uvec4 _2278 = floatBitsToUint(cbLight._m0[_2203 + 12u]);
    bool _2280 = _2278.x == 0u;
    float _2382;
    float _2384;
    float _2386;
    if (_2280)
    {
        _2382 = _2272;
        _2384 = _2273;
        _2386 = _2274;
    }
    else
    {
        uint _2390 = _2203 + 6u;
        float _2406 = (dot(vec3(cbLight._m0[_2203 + 2u].xyz), vec3(_711, _712, _713)) * 0.5) + 0.5;
        float _2407 = _2406 * _2406;
        float _4528 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2408 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2409 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
        _2382 = (((cbLight._m0[_2390].x * 0.3183098733425140380859375) * _2408) * _2409) + _2272;
        _2384 = (((cbLight._m0[_2390].y * 0.3183098733425140380859375) * _2408) * _2409) + _2273;
        _2386 = (((cbLight._m0[_2390].z * 0.3183098733425140380859375) * _2408) * _2409) + _2274;
    }
    bool _2389 = _2278.y == 0u;
    float _2444;
    float _2446;
    float _2448;
    if (_2389)
    {
        _2444 = _2382;
        _2446 = _2384;
        _2448 = _2386;
    }
    else
    {
        uint _2606 = _2203 + 7u;
        float _2622 = (dot(vec3(cbLight._m0[_2203 + 3u].xyz), vec3(_711, _712, _713)) * 0.5) + 0.5;
        float _2623 = _2622 * _2622;
        float _4544 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2624 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2625 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
        _2444 = (((cbLight._m0[_2606].x * 0.3183098733425140380859375) * _2624) * _2625) + _2382;
        _2446 = (((cbLight._m0[_2606].y * 0.3183098733425140380859375) * _2624) * _2625) + _2384;
        _2448 = (((cbLight._m0[_2606].z * 0.3183098733425140380859375) * _2624) * _2625) + _2386;
    }
    uint _2451 = _2203 + 8u;
    float _2464 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2203].w)) * _714) * 0.949999988079071044921875);
    float _2465 = _2464 * _2464;
    float _2466 = cbLight._m0[_2203].x + _790;
    float _2467 = cbLight._m0[_2203].y + _791;
    float _2468 = cbLight._m0[_2203].z + _792;
    float _2472 = inversesqrt(dot(vec3(_2466, _2467, _2468), vec3(_2466, _2467, _2468)));
    float _2473 = _2472 * _2466;
    float _2474 = _2472 * _2467;
    float _2475 = _2472 * _2468;
    float _2476 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_2203].xyz));
    float _4560 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2479 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _4571 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _2480 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2481 = dot(vec3(_711, _712, _713), vec3(_2473, _2474, _2475));
    float _4582 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _2485 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2473, _2474, _2475));
    float _4593 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2489 = _2465 * _2465;
    float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
    float _2504 = (exp2(log2(1.0 - (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2505 = 1.0 - _2465;
    float _2516 = (0.5 / (((_2480 * ((_2479 * _2505) + _2465)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2505) + _2465) * _2479))) * _2479;
    float _4604 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2518 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
    uint _2532 = _2203 + 9u;
    float _2543 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _714) * 0.949999988079071044921875);
    float _2544 = _2543 * _2543;
    float _2545 = cbLight._m0[_2244].x + _790;
    float _2546 = cbLight._m0[_2244].y + _791;
    float _2547 = cbLight._m0[_2244].z + _792;
    float _2551 = inversesqrt(dot(vec3(_2545, _2546, _2547), vec3(_2545, _2546, _2547)));
    float _2552 = _2551 * _2545;
    float _2553 = _2551 * _2546;
    float _2554 = _2551 * _2547;
    float _2555 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_2244].xyz));
    float _4615 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2558 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2559 = dot(vec3(_711, _712, _713), vec3(_2552, _2553, _2554));
    float _4626 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2562 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
    float _2563 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2552, _2553, _2554));
    float _4637 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2567 = _2544 * _2544;
    float _2571 = ((_2562 * _2562) * (_2567 + (-1.0))) + 1.0;
    float _2580 = (exp2(log2(1.0 - (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2581 = 1.0 - _2544;
    float _2591 = (0.5 / (((_2480 * ((_2558 * _2581) + _2544)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2581) + _2544) * _2558))) * _2558;
    float _4648 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2593 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2567 / ((_2571 * _2571) * 3.141590118408203125));
    float _2603 = (((_2580 * cbLight._m0[_2532].x) * _2593) * _2226) + ((((cbLight._m0[_2451].x * _2192) * _2504) * _2518) * _2240);
    float _2604 = (((_2580 * cbLight._m0[_2532].y) * _2593) * _2226) + ((((cbLight._m0[_2451].y * _2194) * _2504) * _2518) * _2240);
    float _2605 = (((_2580 * cbLight._m0[_2532].z) * _2593) * _2226) + ((((cbLight._m0[_2451].z * _2196) * _2504) * _2518) * _2240);
    float _2661;
    float _2663;
    float _2665;
    if (_2280)
    {
        _2661 = _2603;
        _2663 = _2604;
        _2665 = _2605;
    }
    else
    {
        uint _2667 = _2203 + 2u;
        uint _2671 = _2203 + 10u;
        float _2685 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2667].w)) * _714) * 0.949999988079071044921875);
        float _2686 = _2685 * _2685;
        float _2687 = cbLight._m0[_2667].x + _790;
        float _2688 = cbLight._m0[_2667].y + _791;
        float _2689 = cbLight._m0[_2667].z + _792;
        float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
        float _2694 = _2693 * _2687;
        float _2695 = _2693 * _2688;
        float _2696 = _2693 * _2689;
        float _2697 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_2667].xyz));
        float _4659 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2700 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2701 = dot(vec3(_711, _712, _713), vec3(_2694, _2695, _2696));
        float _4670 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2704 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2705 = dot(vec3(cbLight._m0[_2667].xyz), vec3(_2694, _2695, _2696));
        float _4681 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2709 = _2686 * _2686;
        float _2713 = ((_2704 * _2704) * (_2709 + (-1.0))) + 1.0;
        float _2722 = (exp2(log2(1.0 - (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2723 = 1.0 - _2686;
        float _2733 = (0.5 / (((_2480 * ((_2700 * _2723) + _2686)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2723) + _2686) * _2700))) * _2700;
        float _4692 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2735 = (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * (_2709 / ((_2713 * _2713) * 3.141590118408203125));
        float _2736 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
        _2661 = (((_2722 * cbLight._m0[_2671].x) * _2735) * _2736) + _2603;
        _2663 = (((_2722 * cbLight._m0[_2671].y) * _2735) * _2736) + _2604;
        _2665 = (((_2722 * cbLight._m0[_2671].z) * _2735) * _2736) + _2605;
    }
    float _2767;
    float _2769;
    float _2771;
    if (_2389)
    {
        _2767 = _2661;
        _2769 = _2663;
        _2771 = _2665;
    }
    else
    {
        uint _2778 = _2203 + 3u;
        uint _2782 = _2203 + 11u;
        float _2796 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2778].w)) * _714) * 0.949999988079071044921875);
        float _2797 = _2796 * _2796;
        float _2798 = cbLight._m0[_2778].x + _790;
        float _2799 = cbLight._m0[_2778].y + _791;
        float _2800 = cbLight._m0[_2778].z + _792;
        float _2804 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
        float _2805 = _2804 * _2798;
        float _2806 = _2804 * _2799;
        float _2807 = _2804 * _2800;
        float _2808 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_2778].xyz));
        float _4708 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2811 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2812 = dot(vec3(_711, _712, _713), vec3(_2805, _2806, _2807));
        float _4719 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2815 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
        float _2816 = dot(vec3(cbLight._m0[_2778].xyz), vec3(_2805, _2806, _2807));
        float _4730 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2820 = _2797 * _2797;
        float _2824 = ((_2815 * _2815) * (_2820 + (-1.0))) + 1.0;
        float _2833 = (exp2(log2(1.0 - (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2834 = 1.0 - _2797;
        float _2844 = (0.5 / (((_2480 * ((_2811 * _2834) + _2797)) + 9.9999999392252902907785028219223e-09) + (((_2480 * _2834) + _2797) * _2811))) * _2811;
        float _4741 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2846 = (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * (_2820 / ((_2824 * _2824) * 3.141590118408203125));
        float _2847 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
        _2767 = (((_2833 * cbLight._m0[_2782].x) * _2846) * _2847) + _2661;
        _2769 = (((_2833 * cbLight._m0[_2782].y) * _2846) * _2847) + _2663;
        _2771 = (((_2833 * cbLight._m0[_2782].z) * _2846) * _2847) + _2665;
    }
    float _2913;
    float _2915;
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    if (_2201.y == 0u)
    {
        uvec4 _2868 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2869 = _2868.x;
        uint _2880 = uint((float(_2868.y) * floor(float(uint(cbSceneParam._m0[85u].y * _811) / _2869))) + floor(float(uint(cbSceneParam._m0[85u].x * _810) / _2869)));
        float _2890 = (log2(_1979 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2891 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        uint _2894 = uint(isnan(14.0) ? _2891 : (isnan(_2891) ? 14.0 : min(_2891, 14.0)));
        uvec4 _2899 = texelFetch(g_lightClusterGridBuffer, int(((_2894 << 2u) + (_2880 << 6u)) >> 2u));
        uint _2900 = _2899.x;
        uint _2901 = _2868.z;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        if (((((1u << ((_2901 >> 4u) & 15u)) + 4294967295u) & _2900) == 0u) || ((_2901 & 240u) == 0u))
        {
            _2980 = 0.0;
            _2982 = 0.0;
            _2984 = 0.0;
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
        }
        else
        {
            float _2981;
            float _2983;
            float _2985;
            float _2987;
            float _2989;
            float _2991;
            float _3133 = 0.0;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            uint _3139 = 0u;
            uint _3148;
            bool _3149;
            for (;;)
            {
                _3148 = texelFetch(g_lightClassification, int((((_2894 << 5u) + (_2880 << 9u)) + (_3139 << 2u)) >> 2u)).x;
                _3149 = _3148 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3149)
                {
                    frontier_phi_71_pred = _3138;
                    frontier_phi_71_pred_1 = _3137;
                    frontier_phi_71_pred_2 = _3136;
                    frontier_phi_71_pred_3 = _3135;
                    frontier_phi_71_pred_4 = _3134;
                    frontier_phi_71_pred_5 = _3133;
                }
                else
                {
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    uint _3284;
                    _3278 = _3133;
                    _3279 = _3134;
                    _3280 = _3135;
                    _3281 = _3136;
                    _3282 = _3137;
                    _3283 = _3138;
                    _3284 = _3148;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    for (;;)
                    {
                        uint _3288 = uint(findLSB(_3284)) + (_3139 << 5u);
                        uint _3285 = (_3284 + 4294967295u) & _3284;
                        uint _3290 = _3288 * 48u;
                        vec4 _3304 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3290)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 3u)).x));
                        uint _3310 = (_3288 * 48u) + 4u;
                        vec4 _3323 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3310)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 3u)).x));
                        uint _3329 = (_3288 * 48u) + 8u;
                        vec3 _3340 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3329)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 2u)).x));
                        float _3344 = _3304.x - _1977;
                        float _3345 = _3304.y - _1978;
                        float _3346 = _3304.z - _1979;
                        float _3347 = dot(vec3(_3344, _3345, _3346), vec3(_3344, _3345, _3346));
                        float _3350 = inversesqrt(_3347);
                        float _3351 = _3350 * _3344;
                        float _3352 = _3350 * _3345;
                        float _3353 = _3350 * _3346;
                        float _3354 = dot(vec3(_829, _832, _835), vec3(_3351, _3352, _3353));
                        float _3359 = 1.0 - (_3347 * _3304.w);
                        float _4767 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                        float _3360 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3361 = sqrt(_3347) * _3323.w;
                        float _3364 = 1.39999997615814208984375 / (_3361 + 1.39999997615814208984375);
                        float _3365 = _3364 * _3364;
                        float _3368 = ((1.0 - _3365) * _3354) + _3365;
                        float _3371 = _3361 * _3361;
                        float _3375 = ((isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0))) * _3360) / ((_3371 * 0.699999988079071044921875) + 1.0);
                        float _3379 = (-0.0) - _1977;
                        float _3380 = (-0.0) - _1978;
                        float _3381 = (-0.0) - _1979;
                        float _3385 = inversesqrt(dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381)));
                        float _3386 = _3385 * _3379;
                        float _3387 = _3385 * _3380;
                        float _3388 = _3385 * _3381;
                        float _3395 = exp2(log2(1.0 / ((_3371 * 3.5) + 5.0)) * 0.25);
                        float _3396 = 1.0 - _889;
                        float _3403 = sqrt(1.0 - ((1.0 - (_3396 * _3396)) * (1.0 - (_3395 * _3395))));
                        float _3404 = _3403 * _3403;
                        float _3405 = _3404 * _3404;
                        float _3406 = _3386 + _3351;
                        float _3407 = _3387 + _3352;
                        float _3408 = _3388 + _3353;
                        float _3412 = inversesqrt(dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408)));
                        float _3416 = dot(vec3(_829, _832, _835), vec3(_3386, _3387, _3388));
                        float _4783 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                        float _3419 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3420 = dot(vec3(_829, _832, _835), vec3(_3412 * _3406, _3412 * _3407, _3412 * _3408));
                        float _4794 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                        float _3423 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3427 = ((_3423 * _3423) * (_3405 + (-1.0))) + 1.0;
                        float _3428 = _3364 * _3404;
                        float _3429 = _3428 * _3428;
                        float _3432 = ((1.0 - _3429) * _3354) + _3429;
                        float _4805 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                        float _3433 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                        float _3434 = 1.0 - _3404;
                        float _3444 = (0.5 / (((_3433 * ((_3419 * _3434) + _3404)) + 9.9999999392252902907785028219223e-09) + (((_3433 * _3434) + _3404) * _3419))) * _3433;
                        float _4816 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                        float _3455 = (((_3405 * 3.1415927410125732421875) * (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0)))) / ((_3427 * _3427) * ((_3371 * 2.1991131305694580078125) + 3.141590118408203125))) * _3360;
                        _3208 = (_3375 * _3323.x) + _3281;
                        _3209 = (_3375 * _3323.y) + _3282;
                        _3210 = (_3375 * _3323.z) + _3283;
                        _3205 = (_3455 * _3340.x) + _3278;
                        _3206 = (_3455 * _3340.y) + _3279;
                        _3207 = (_3455 * _3340.z) + _3280;
                        if (_3285 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3278 = _3205;
                            _3279 = _3206;
                            _3280 = _3207;
                            _3281 = _3208;
                            _3282 = _3209;
                            _3283 = _3210;
                            _3284 = _3285;
                        }
                    }
                    frontier_phi_71_pred = _3210;
                    frontier_phi_71_pred_1 = _3209;
                    frontier_phi_71_pred_2 = _3208;
                    frontier_phi_71_pred_3 = _3207;
                    frontier_phi_71_pred_4 = _3206;
                    frontier_phi_71_pred_5 = _3205;
                }
                _2991 = frontier_phi_71_pred;
                _2989 = frontier_phi_71_pred_1;
                _2987 = frontier_phi_71_pred_2;
                _2985 = frontier_phi_71_pred_3;
                _2983 = frontier_phi_71_pred_4;
                _2981 = frontier_phi_71_pred_5;
                uint _3140 = _3139 + 1u;
                if (_3140 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3133 = _2981;
                    _3134 = _2983;
                    _3135 = _2985;
                    _3136 = _2987;
                    _3137 = _2989;
                    _3138 = _2991;
                    _3139 = _3140;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2980 = _2981;
            _2982 = _2983;
            _2984 = _2985;
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
        }
        uvec4 _2994 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2995 = _2994.z;
        uint _2997 = (_2995 >> 8u) & 15u;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        if (((4294967295u << _2997) & _2900) == 0u)
        {
            _3101 = _2980;
            _3103 = _2982;
            _3105 = _2984;
            _3107 = _2986;
            _3109 = _2988;
            _3111 = _2990;
        }
        else
        {
            float _3126 = inversesqrt(dot(vec3(_1977, _1978, _1979), vec3(_1977, _1978, _1979)));
            float _3127 = _3126 * _1977;
            float _3128 = _3126 * _1978;
            float _3129 = _3126 * _1979;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2997 < ((_2995 >> 12u) & 15u))
            {
                float _3102;
                float _3104;
                float _3106;
                float _3108;
                float _3110;
                float _3112;
                float _3261 = _2980;
                float _3262 = _2982;
                float _3263 = _2984;
                float _3264 = _2986;
                float _3265 = _2988;
                float _3266 = _2990;
                uint _3267 = _2997;
                uint _3276;
                bool _3277;
                for (;;)
                {
                    _3276 = texelFetch(g_lightClassification, int((((_2894 << 5u) + (_2880 << 9u)) + (_3267 << 2u)) >> 2u)).x;
                    _3277 = _3276 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3277)
                    {
                        frontier_phi_82_pred = _3266;
                        frontier_phi_82_pred_1 = _3265;
                        frontier_phi_82_pred_2 = _3264;
                        frontier_phi_82_pred_3 = _3263;
                        frontier_phi_82_pred_4 = _3262;
                        frontier_phi_82_pred_5 = _3261;
                    }
                    else
                    {
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3482 = _3261;
                        float _3483 = _3262;
                        float _3484 = _3263;
                        float _3485 = _3264;
                        float _3486 = _3265;
                        float _3487 = _3266;
                        uint _3488 = _3276;
                        uint _3489;
                        vec4 _3514;
                        float _3515;
                        vec4 _3530;
                        vec3 _3542;
                        vec4 _3557;
                        vec4 _3572;
                        float _3619;
                        bool _3620;
                        for (;;)
                        {
                            uint _3499 = ((_3267 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3488));
                            _3489 = (_3488 + 4294967295u) & _3488;
                            uint _3501 = _3499 * 40u;
                            _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            _3515 = _3514.w;
                            uint _3517 = (_3499 * 40u) + 4u;
                            _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            uint _3532 = (_3499 * 40u) + 8u;
                            _3542 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x));
                            uint _3544 = (_3499 * 40u) + 16u;
                            _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            uint _3559 = (_3499 * 40u) + 20u;
                            _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3575 = (_3499 * 40u) + 24u;
                            vec4 _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            uint _3594 = (_3499 * 40u) + 28u;
                            vec4 _3607 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 3u)).x));
                            _3619 = fma(_1979, _3607.z, fma(_1978, _3607.y, _3607.x * _1977)) + _3607.w;
                            _3620 = !((fma(_1979, _3588.z, fma(_1978, _3588.y, _3588.x * _1977)) + _3588.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3620)
                            {
                                float _3647 = _3514.x - _1977;
                                float _3648 = _3514.y - _1978;
                                float _3649 = _3514.z - _1979;
                                float _3650 = dot(vec3(_3647, _3648, _3649), vec3(_3647, _3648, _3649));
                                float _3653 = inversesqrt(_3650);
                                float _3654 = _3653 * _3647;
                                float _3655 = _3653 * _3648;
                                float _3656 = _3653 * _3649;
                                float _3660 = 1.0 - (_3650 / (_3515 * _3515));
                                float _4827 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3661 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3665 = sqrt(_3650) * _3530.w;
                                float _3667 = 1.39999997615814208984375 / (_3665 + 1.39999997615814208984375);
                                float _3668 = _3667 * _3667;
                                float _3671 = ((1.0 - _3668) * dot(vec3(_3654, _3655, _3656), vec3(_829, _832, _835))) + _3668;
                                float _3674 = _3665 * _3665;
                                float _3678 = (fma(_1979, _3557.z, fma(_1978, _3557.y, _3557.x * _1977)) + _3557.w) / _3619;
                                float _3679 = (fma(_1979, _3572.z, fma(_1978, _3572.y, _3572.x * _1977)) + _3572.w) / _3619;
                                float _3683 = 1.0 - dot(vec2(_3678, _3679), vec2(_3678, _3679));
                                float _4843 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3684 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3685 = _3684 * (((isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0))) * _3661) / ((_3674 * 0.699999988079071044921875) + 1.0));
                                float _3697 = exp2(log2(1.0 / ((_3674 * 3.5) + 5.0)) * 0.25);
                                float _3698 = 1.0 - _889;
                                float _3705 = sqrt(1.0 - ((1.0 - (_3698 * _3698)) * (1.0 - (_3697 * _3697))));
                                float _3706 = _3705 * _3705;
                                float _3707 = _3706 * _3706;
                                float _3708 = _3654 - _3127;
                                float _3709 = _3655 - _3128;
                                float _3710 = _3656 - _3129;
                                float _3714 = inversesqrt(dot(vec3(_3708, _3709, _3710), vec3(_3708, _3709, _3710)));
                                float _3718 = dot(vec3(_829, _832, _835), vec3((-0.0) - _3127, (-0.0) - _3128, (-0.0) - _3129));
                                float _4854 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3721 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3722 = dot(vec3(_829, _832, _835), vec3(_3714 * _3708, _3714 * _3709, _3714 * _3710));
                                float _4865 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3725 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3729 = ((_3725 * _3725) * (_3707 + (-1.0))) + 1.0;
                                float _3730 = _3667 * _3706;
                                float _3731 = _3730 * _3730;
                                float _3737 = ((1.0 - _3731) * dot(vec3(_829, _832, _835), vec3(_3654, _3655, _3656))) + _3731;
                                float _4876 = isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0));
                                float _3738 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3739 = 1.0 - _3706;
                                float _3749 = (0.5 / (((_3738 * ((_3721 * _3739) + _3706)) + 9.9999999392252902907785028219223e-09) + (((_3738 * _3739) + _3706) * _3721))) * _3738;
                                float _4887 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3759 = (_3684 * _3661) * (((_3707 * 3.1415927410125732421875) * (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0)))) / ((_3729 * _3729) * ((_3674 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3685 * _3530.z;
                                frontier_phi_88_pred_1 = _3685 * _3530.y;
                                frontier_phi_88_pred_2 = _3685 * _3530.x;
                                frontier_phi_88_pred_3 = _3759 * _3542.z;
                                frontier_phi_88_pred_4 = _3759 * _3542.y;
                                frontier_phi_88_pred_5 = _3759 * _3542.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3768 = frontier_phi_88_pred;
                            _3767 = frontier_phi_88_pred_1;
                            _3766 = frontier_phi_88_pred_2;
                            _3765 = frontier_phi_88_pred_3;
                            _3764 = frontier_phi_88_pred_4;
                            _3763 = frontier_phi_88_pred_5;
                            _3472 = _3766 + _3485;
                            _3473 = _3767 + _3486;
                            _3474 = _3768 + _3487;
                            _3469 = _3763 + _3482;
                            _3470 = _3764 + _3483;
                            _3471 = _3765 + _3484;
                            if (_3489 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3489;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3474;
                        frontier_phi_82_pred_1 = _3473;
                        frontier_phi_82_pred_2 = _3472;
                        frontier_phi_82_pred_3 = _3471;
                        frontier_phi_82_pred_4 = _3470;
                        frontier_phi_82_pred_5 = _3469;
                    }
                    _3112 = frontier_phi_82_pred;
                    _3110 = frontier_phi_82_pred_1;
                    _3108 = frontier_phi_82_pred_2;
                    _3106 = frontier_phi_82_pred_3;
                    _3104 = frontier_phi_82_pred_4;
                    _3102 = frontier_phi_82_pred_5;
                    uint _3268 = _3267 + 1u;
                    if (_3268 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3261 = _3102;
                        _3262 = _3104;
                        _3263 = _3106;
                        _3264 = _3108;
                        _3265 = _3110;
                        _3266 = _3112;
                        _3267 = _3268;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3108;
                frontier_phi_63_64_ladder_1 = _3112;
                frontier_phi_63_64_ladder_2 = _3110;
                frontier_phi_63_64_ladder_3 = _3106;
                frontier_phi_63_64_ladder_4 = _3104;
                frontier_phi_63_64_ladder_5 = _3102;
            }
            else
            {
                frontier_phi_63_64_ladder = _2986;
                frontier_phi_63_64_ladder_1 = _2990;
                frontier_phi_63_64_ladder_2 = _2988;
                frontier_phi_63_64_ladder_3 = _2984;
                frontier_phi_63_64_ladder_4 = _2982;
                frontier_phi_63_64_ladder_5 = _2980;
            }
            _3101 = frontier_phi_63_64_ladder_5;
            _3103 = frontier_phi_63_64_ladder_4;
            _3105 = frontier_phi_63_64_ladder_3;
            _3107 = frontier_phi_63_64_ladder;
            _3109 = frontier_phi_63_64_ladder_2;
            _3111 = frontier_phi_63_64_ladder_1;
        }
        float _3116 = isnan(1.0) ? _873 : (isnan(_873) ? 1.0 : min(_873, 1.0));
        _2913 = (_3116 * _3107) + _2444;
        _2915 = (_3116 * _3109) + _2446;
        _2917 = (_3116 * _3111) + _2448;
        _2919 = ((_3101 * 0.039999999105930328369140625) * _3116) + _2767;
        _2921 = ((_3103 * 0.039999999105930328369140625) * _3116) + _2769;
        _2923 = ((_3105 * 0.039999999105930328369140625) * _3116) + _2771;
    }
    else
    {
        _2913 = _2444;
        _2915 = _2446;
        _2917 = _2448;
        _2919 = _2767;
        _2921 = _2769;
        _2923 = _2771;
    }
    float _4903 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4914 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _4925 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _2940 = ((isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2913 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _873))) + ((_2919 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1711)) * cbPerFrame._m0[3u].x);
    float _2941 = ((isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (_2915 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _873))) + ((_2921 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1711)) * cbPerFrame._m0[3u].x);
    float _2942 = ((isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0))) * (_2917 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _873))) + ((_2923 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1711)) * cbPerFrame._m0[3u].x);
    uint _2943 = _848 + 6u;
    float _2951 = _810 / cbSceneParam._m0[86u].x;
    float _2952 = _811 / cbSceneParam._m0[86u].y;
    vec4 _2966 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2951, _2952, (log2((isnan(cbSceneParam._m0[77u].w) ? _733 : (isnan(_733) ? cbSceneParam._m0[77u].w : min(_733, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2968 = _2966.x;
    float _2969 = _2966.y;
    float _2970 = _2966.z;
    float _2971 = _2966.w;
    float _3043;
    float _3045;
    float _3047;
    float _3049;
    if (_733 > cbSceneParam._m0[78u].w)
    {
        float _3005 = isnan(_733) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _733 : min(cbSceneParam._m0[80u].w, _733));
        float _3006 = _3005 / _733;
        float _3017 = _3006 * _783;
        float _3018 = _784 * _3006;
        float _3019 = (-0.0) - _3018;
        float _3021 = _3006 * _785;
        float _3023 = (cbSceneParam._m0[77u].w * _3019) / _3005;
        float _3024 = _3023 + cbSceneParam._m0[79u].w;
        float _3025 = cbSceneParam._m0[79u].w - _3018;
        float _3031 = sqrt(((_3017 * _3017) + (_3018 * _3018)) + (_3021 * _3021));
        float _3034 = (1.0 - (cbSceneParam._m0[77u].w / _3005)) * _3031;
        float _3039 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3041 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3218;
        if (abs((_3019 - _3023) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3218 = ((((_3024 > 0.0) ? exp2(_3039 * _3024) : (2.0 - exp2(_3041 * _3024))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3034;
        }
        else
        {
            float _3162 = 1.0 / cbSceneParam._m0[80u].x;
            float _3163 = isnan(_3025) ? _3024 : (isnan(_3024) ? _3025 : max(_3024, _3025));
            float _3164 = isnan(_3025) ? _3024 : (isnan(_3024) ? _3025 : min(_3024, _3025));
            float _3173 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : min(_3163, 0.0));
            float _3174 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : min(_3164, 0.0));
            _3218 = ((abs(_3031 / _3019) * cbSceneParam._m0[80u].y) * ((((_3173 - _3174) * 2.0) - ((exp2(_3039 * (isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0)))) - exp2(_3039 * (isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0))))) * _3162)) - ((exp2(_3041 * _3173) - exp2(_3041 * _3174)) * _3162))) + (_3034 * cbSceneParam._m0[80u].z);
        }
        vec4 _3220 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2951, _2952, 1.0), 0.0);
        float _3229 = exp2((_3218 * (-1.44269502162933349609375)) * (1.0 - _3220.w));
        float _3230 = log2(_3229);
        float _3246 = log2(_2971);
        _3043 = (exp2(_3246 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].x)) * _3220.x) / cbSceneParam._m0[78u].x)) + _2968;
        _3045 = (exp2(_3246 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].y)) * _3220.y) / cbSceneParam._m0[78u].y)) + _2969;
        _3047 = (exp2(_3246 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].z)) * _3220.z) / cbSceneParam._m0[78u].z)) + _2970;
        _3049 = _3229 * _2971;
    }
    else
    {
        _3043 = _2968;
        _3045 = _2969;
        _3047 = _2970;
        _3049 = _2971;
    }
    bool _3256;
    vec4 _3059;
    vec4 _3081;
    float _3083;
    float _3087;
    float _3088;
    float _3089;
    float _3090;
    bool _3100;
    for (;;)
    {
        _3059 = cbMatDynParam._m0[0u];
        float _3061 = roundEven(_3059.y);
        bool _3062 = _3061 == 3.0;
        float _3063 = log2(_3049);
        float _3070 = exp2(_3063 * cbSceneParam._m0[78u].x) * _2940;
        float _3071 = exp2(_3063 * cbSceneParam._m0[78u].y) * _2941;
        float _3072 = exp2(_3063 * cbSceneParam._m0[78u].z) * _2942;
        float _3079 = _799 + (-0.5);
        _3081 = cbMtdParam._m0[1u];
        _3083 = _3081.y * _3079;
        float _3086 = (_3061 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3087 = _3086 * (_3062 ? _3070 : (_3070 + (cbSceneParam._m0[72u].w * _3043)));
        _3088 = _3086 * (_3062 ? _3071 : (_3071 + (cbSceneParam._m0[72u].w * _3045)));
        _3089 = _3086 * (_3062 ? _3072 : (_3072 + (cbSceneParam._m0[72u].w * _3047)));
        _3090 = _3079 * 0.999000012874603271484375;
        _3100 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3100)
        {
            if ((cbInstanceData._m0[_848 + 7u].x + _3090) < 0.5)
            {
                _3256 = true;
                break;
            }
        }
        uint _3197 = _849 + uint(_3059.w);
        if ((cbInstanceData._m0[_3197].w < 1.0) && ((cbInstanceData._m0[_3197].w + _3090) < 0.5))
        {
            _3256 = true;
            break;
        }
        if ((_3083 + 1.0) < _3081.x)
        {
            _3256 = true;
            break;
        }
        _3256 = false;
        break;
    }
    float _3460;
    if (_3256)
    {
        discard_state = true;
        _3460 = 0.0;
    }
    else
    {
        _3460 = cbInstanceData._m0[_2943].w;
    }
    SV_Target.x = _3087;
    SV_Target.y = _3088;
    SV_Target.z = _3089;
    SV_Target.w = _3460;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2943].w;
    discard_exit();
}


