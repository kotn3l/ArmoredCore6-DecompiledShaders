#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1141;
float _3788;
float _3789;
float _3790;
float _3791;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _242 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _248 = _242.x * cbMtdParam._m0[10u].x;
    float _249 = _242.y * cbMtdParam._m0[10u].y;
    float _250 = _242.z * cbMtdParam._m0[10u].z;
    vec4 _269 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _316 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x;
    float _327 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _316)) + 1.0;
    float _3800 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _328 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _335 = (_328 * ((_269.x * cbMtdParam._m0[11u].x) - _248)) + _248;
    float _336 = (_328 * ((_269.y * cbMtdParam._m0[11u].y) - _249)) + _249;
    float _337 = (_328 * ((_269.z * cbMtdParam._m0[11u].z) - _250)) + _250;
    vec4 _356 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _386 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _316)) + 1.0;
    float _3811 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _394 = (_387 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _395 = (_387 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _396 = (_387 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    vec4 _413 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _438 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _316)) + 1.0;
    float _3822 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _446 = (_439 * ((_413.x * cbMtdParam._m0[13u].x) - _394)) + _394;
    float _447 = (_439 * ((_413.y * cbMtdParam._m0[13u].y) - _395)) + _395;
    float _448 = (_439 * ((_413.z * cbMtdParam._m0[13u].z) - _396)) + _396;
    vec4 _460 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _478 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _480 = _478.x;
    float _481 = _478.y;
    float _487 = cbMtdParam._m0[16u].w * _478.z;
    float _490 = (((cbMtdParam._m0[17u].x * _460.z) - _487) * _328) + _487;
    vec4 _503 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _512 = (((cbMtdParam._m0[17u].y * _503.z) - _490) * _387) + _490;
    vec4 _525 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _534 = (((cbMtdParam._m0[17u].z * _525.z) - _512) * _439) + _512;
    float _539 = ((_460.x - _480) * _328) + _480;
    float _540 = ((_460.y - _481) * _328) + _481;
    float _545 = ((_503.x - _539) * _387) + _539;
    float _546 = ((_503.y - _540) * _387) + _540;
    float _555 = ((((_525.x - _545) * _439) + _545) * 2.0) + (-1.0);
    float _557 = ((((_525.y - _546) * _439) + _546) * 2.0) + (-1.0);
    float _558 = dot(vec2(_555, _557), vec2(_555, _557));
    float _3833 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _563 = sqrt(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))));
    float _566 = fma(_563, _212 * NORMAL.x, fma(_557, _219 * TANGENT.x, (_205 * _197) * _555));
    float _569 = fma(_563, _212 * NORMAL.y, fma(_557, _219 * TANGENT.y, (_205 * _198) * _555));
    float _572 = fma(_563, _212 * NORMAL.z, fma(_557, _219 * TANGENT.z, (_205 * _199) * _555));
    float _576 = inversesqrt(dot(vec3(_566, _569, _572), vec3(_566, _569, _572)));
    float _577 = _576 * _566;
    float _578 = _576 * _569;
    float _579 = _576 * _572;
    float _3844 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _580 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _3855 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3866 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3877 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _599 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _640 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _650 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _640);
    float _651 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _640);
    float _652 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _640);
    float _656 = inversesqrt(dot(vec3(_650, _651, _652), vec3(_650, _651, _652)));
    float _657 = _650 * _656;
    float _658 = _651 * _656;
    float _659 = _652 * _656;
    vec4 _664 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _666 = _664.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _820 = sqrt(((_650 * _650) + (_651 * _651)) + (_652 * _652));
        float _826 = (cbMatDynParam._m0[5u].x * _820) + cbMatDynParam._m0[5u].y;
        float _3888 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _831 = (cbMatDynParam._m0[5u].z * _820) + cbMatDynParam._m0[5u].w;
        float _3899 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) - _827)) + _827) < ((_666 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _677 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _678 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _696 = fma(_579, cbSceneParam._m0[5u].z, fma(_578, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _577));
    float _699 = fma(_579, cbSceneParam._m0[6u].z, fma(_578, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _577));
    float _702 = fma(_579, cbSceneParam._m0[7u].z, fma(_578, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _577));
    uint _715 = uint(roundEven(NORMAL.w)) * 13u;
    uint _716 = _715 + 9u;
    uint _717 = _716 + uint(cbMatDynParam._m0[0u].w);
    float _723 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * cbInstanceData._m0[_717].x;
    float _724 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) * cbInstanceData._m0[_717].y;
    float _725 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) * cbInstanceData._m0[_717].z;
    float _3910 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _3921 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _3932 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    vec4 _737 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _677, cbSceneParam._m0[86u].y * _678));
    float _740 = _737.x * TEXCOORD_5.w;
    float _741 = dot(vec3(_577, _578, _579), vec3(_657, _658, _659));
    float _744 = _741 * 2.0;
    float _748 = (_744 * _577) - _657;
    float _749 = (_744 * _578) - _658;
    float _750 = (_744 * _579) - _659;
    float _754 = abs(dot(vec3(_657, _658, _659), vec3(_577, _578, _579)));
    float _3943 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _756 = sqrt(_580);
    float _769 = exp2((_756 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_756 * 3.0));
    float _801 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _805 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1140;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _865 = fma(_809, cbModelParam._m0[26u].z, fma(_805, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _801));
        float _869 = fma(_809, cbModelParam._m0[27u].z, fma(_805, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _801));
        float _873 = fma(_809, cbModelParam._m0[28u].z, fma(_805, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _801));
        float _898 = _801 + _577;
        float _899 = _805 + _578;
        float _900 = _809 + _579;
        float _910 = fma(_900, cbModelParam._m0[26u].z, fma(_899, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _898)) - _865;
        float _911 = fma(_900, cbModelParam._m0[27u].z, fma(_899, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _898)) - _869;
        float _912 = fma(_900, cbModelParam._m0[28u].z, fma(_899, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _898)) - _873;
        float _916 = inversesqrt(dot(vec3(_910, _911, _912), vec3(_910, _911, _912)));
        float _929 = ((_916 * _910) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_865 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _930 = ((_916 * _911) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_869 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _931 = ((_916 * _912) / cbModelParam._m0[34u].z) + ((((((_873 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        float _968 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_934.x + (-0.5));
        float _970 = _968 * (_934.y + (-0.5));
        float _971 = _968 * (_934.z + (-0.5));
        float _978 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_941.x + (-0.5));
        float _980 = _978 * (_941.y + (-0.5));
        float _981 = _978 * (_941.z + (-0.5));
        float _988 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_948.x + (-0.5));
        float _990 = _988 * (_948.y + (-0.5));
        float _991 = _988 * (_948.z + (-0.5));
        float _998 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_955.x + (-0.5));
        float _1000 = _998 * (_955.y + (-0.5));
        float _1001 = _998 * (_955.z + (-0.5));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1005 = _969 * 0.5;
        float _1006 = _979 * 0.5;
        float _1007 = _989 * 0.5;
        float _1008 = dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007));
        float _1013 = (_1008 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1008);
        float _1022 = (dot(vec3(_577, _578, _579), vec3(_1013 * _1005, _1013 * _1006, _1013 * _1007)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1032 = sqrt(((_1006 * _1006) + (_1005 * _1005)) + (_1007 * _1007)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1034 = _1033 * 2.0;
        float _1038 = (1.0 - _1033) / (_1033 + 1.0);
        float _3991 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1048 = ((((1.0 - _1039) * (_1034 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1034 + 1.0))) + _1039) * _1002;
        float _1049 = _970 * 0.5;
        float _1050 = _980 * 0.5;
        float _1051 = _990 * 0.5;
        float _1052 = dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051));
        float _1057 = (_1052 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1052);
        float _1065 = (dot(vec3(_577, _578, _579), vec3(_1057 * _1049, _1057 * _1050, _1057 * _1051)) + 1.0) * 0.5;
        float _4002 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1074 = sqrt(((_1050 * _1050) + (_1049 * _1049)) + (_1051 * _1051)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _4013 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1076 = _1075 * 2.0;
        float _1080 = (1.0 - _1075) / (_1075 + 1.0);
        float _4024 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1090 = ((((1.0 - _1081) * (_1076 + 2.0)) * exp2(log2(isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1076 + 1.0))) + _1081) * _1003;
        float _1091 = _971 * 0.5;
        float _1092 = _981 * 0.5;
        float _1093 = _991 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(_577, _578, _579), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _4035 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1004 + 9.9999997473787516355514526367188e-06);
        float _4046 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _4057 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_1118 + 1.0))) + _1123) * _1004;
        _1140 = _971;
        _1142 = _970;
        _1143 = _969;
        _1144 = _981;
        _1145 = _980;
        _1146 = _979;
        _1147 = _991;
        _1148 = _990;
        _1149 = _989;
        _1150 = _1004;
        _1151 = _1003;
        _1152 = _1002;
        _1153 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0)));
        _1154 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0)));
        _1155 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
    }
    else
    {
        _1140 = _1141;
        _1142 = _1141;
        _1143 = _1141;
        _1144 = _1141;
        _1145 = _1141;
        _1146 = _1141;
        _1147 = _1141;
        _1148 = _1141;
        _1149 = _1141;
        _1150 = _1141;
        _1151 = _1141;
        _1152 = _1141;
        _1153 = 0.0;
        _1154 = 0.0;
        _1155 = 0.0;
    }
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1184 = fma(_809, cbModelParam._m0[30u].z, fma(_805, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _801));
        float _1188 = fma(_809, cbModelParam._m0[31u].z, fma(_805, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _801));
        float _1192 = fma(_809, cbModelParam._m0[32u].z, fma(_805, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _801));
        float _1215 = _801 + _577;
        float _1216 = _805 + _578;
        float _1217 = _809 + _579;
        float _1227 = fma(_1217, cbModelParam._m0[30u].z, fma(_1216, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1215)) - _1184;
        float _1228 = fma(_1217, cbModelParam._m0[31u].z, fma(_1216, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1215)) - _1188;
        float _1229 = fma(_1217, cbModelParam._m0[32u].z, fma(_1216, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1215)) - _1192;
        float _1233 = inversesqrt(dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229)));
        float _1246 = ((_1233 * _1227) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1184 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1247 = ((_1233 * _1228) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1188 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1248 = ((_1233 * _1229) / cbModelParam._m0[35u].z) + ((((((_1192 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        float _1283 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1250.x + (-0.5));
        float _1285 = _1283 * (_1250.y + (-0.5));
        float _1286 = _1283 * (_1250.z + (-0.5));
        float _1293 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1257.x + (-0.5));
        float _1295 = _1293 * (_1257.y + (-0.5));
        float _1296 = _1293 * (_1257.z + (-0.5));
        float _1303 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1264.x + (-0.5));
        float _1305 = _1303 * (_1264.y + (-0.5));
        float _1306 = _1303 * (_1264.z + (-0.5));
        float _1313 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1271.x + (-0.5));
        float _1315 = _1313 * (_1271.y + (-0.5));
        float _1316 = _1313 * (_1271.z + (-0.5));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = _1284 * 0.5;
        float _1321 = _1294 * 0.5;
        float _1322 = _1304 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_577, _578, _579), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4120 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1347 + 1.0))) + _1352) * _1317;
        float _1362 = _1285 * 0.5;
        float _1363 = _1295 * 0.5;
        float _1364 = _1305 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_577, _578, _579), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4153 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1389 + 1.0))) + _1394) * _1318;
        float _1404 = _1286 * 0.5;
        float _1405 = _1296 * 0.5;
        float _1406 = _1306 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_577, _578, _579), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _4186 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1431 + 1.0))) + _1436) * _1319;
        _1453 = _1286;
        _1454 = _1285;
        _1455 = _1284;
        _1456 = _1296;
        _1457 = _1295;
        _1458 = _1294;
        _1459 = _1306;
        _1460 = _1305;
        _1461 = _1304;
        _1462 = _1319;
        _1463 = _1318;
        _1464 = _1317;
        _1465 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
        _1466 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
        _1467 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
    }
    else
    {
        _1453 = _1141;
        _1454 = _1141;
        _1455 = _1141;
        _1456 = _1141;
        _1457 = _1141;
        _1458 = _1141;
        _1459 = _1141;
        _1460 = _1141;
        _1461 = _1141;
        _1462 = _1141;
        _1463 = _1141;
        _1464 = _1141;
        _1465 = 0.0;
        _1466 = 0.0;
        _1467 = 0.0;
    }
    float _1477 = (cbModelParam._m0[1u].x * (_1465 - _1153)) + _1153;
    float _1478 = (cbModelParam._m0[1u].x * (_1466 - _1154)) + _1154;
    float _1479 = (cbModelParam._m0[1u].x * (_1467 - _1155)) + _1155;
    float _1500 = fma(_1479, cbSceneParam._m0[89u].z, fma(_1478, cbSceneParam._m0[89u].y, _1477 * cbSceneParam._m0[89u].x));
    float _1503 = fma(_1479, cbSceneParam._m0[90u].z, fma(_1478, cbSceneParam._m0[90u].y, _1477 * cbSceneParam._m0[90u].x));
    float _1506 = fma(_1479, cbSceneParam._m0[91u].z, fma(_1478, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1477));
    float _1521 = _748 * 0.5;
    float _1522 = _749 * 0.5;
    float _1523 = _750 * 0.5;
    float _1524 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1455, _1458, _1461, _1464));
    float _1527 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1454, _1457, _1460, _1463));
    float _1530 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1453, _1456, _1459, _1462));
    float _1564;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1537 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1140, _1144, _1147, _1150));
        float _1541 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1142, _1145, _1148, _1151));
        float _1545 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1143, _1146, _1149, _1152));
        float _1552 = dot(vec4(cbModelParam._m0[39u]), vec4(_1521, _1522, _1523, 1.0));
        _1564 = dot(vec3(isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)), isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1552) ? 0.0 : (isnan(0.0) ? _1552 : max(0.0, _1552))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1564 = 1.0;
    }
    float _1575;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1566 = dot(vec4(cbModelParam._m0[40u]), vec4(_1521, _1522, _1523, 1.0));
        _1575 = dot(vec3(isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)), isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1566) ? 0.0 : (isnan(0.0) ? _1566 : max(0.0, _1566))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1575 = 1.0;
    }
    float _1579 = (_1575 * cbModelParam._m0[1u].x) + (_1564 * (1.0 - cbModelParam._m0[1u].x));
    float _1589 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _580);
    float _1590 = isnan(_1589) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1589 : min(cbModelParam._m0[25u].z, _1589));
    float _1671;
    float _1673;
    float _1675;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1638 = fma(_809, cbModelParam._m0[13u].z, fma(_805, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _801)) + cbModelParam._m0[13u].w;
        float _1642 = fma(_809, cbModelParam._m0[14u].z, fma(_805, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _801)) + cbModelParam._m0[14u].w;
        float _1646 = fma(_809, cbModelParam._m0[15u].z, fma(_805, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _801)) + cbModelParam._m0[15u].w;
        float _1649 = fma(_750, cbModelParam._m0[13u].z, fma(_749, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _748));
        float _1652 = fma(_750, cbModelParam._m0[14u].z, fma(_749, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _748));
        float _1655 = fma(_750, cbModelParam._m0[15u].z, fma(_749, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _748));
        float _1683;
        if (_1649 > 0.0)
        {
            _1683 = abs((1.0 - _1638) / _1649);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1638 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1683 = frontier_phi_17_15_ladder;
        }
        float _1854;
        if (_1652 > 0.0)
        {
            _1854 = abs((1.0 - _1642) / _1652);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1642 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1854 = frontier_phi_26_22_ladder;
        }
        float _2150;
        if (_1655 > 0.0)
        {
            _2150 = abs((1.0 - _1646) / _1655);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1646 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2150 = frontier_phi_38_33_ladder;
        }
        float _2152 = isnan(_1854) ? _1683 : (isnan(_1683) ? _1854 : min(_1683, _1854));
        float _2153 = isnan(_2150) ? _2152 : (isnan(_2152) ? _2150 : min(_2152, _2150));
        float _2157 = (_2153 * _1649) + _1638;
        float _2158 = (_2153 * _1652) + _1642;
        float _2159 = (_2153 * _1655) + _1646;
        float _2160 = _2153 * 9.9999997473787516355514526367188e-05;
        float _2162 = (-1.0) - _2160;
        float _2164 = _2160 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2159 > _2164) || ((_2159 < _2162) || ((_2158 > _2164) || ((_2158 < _2162) || ((_2157 < _2162) || (_2157 > _2164))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2304 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2159, cbModelParam._m0[9u].z, fma(_2158, cbModelParam._m0[9u].y, _2157 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2159, cbModelParam._m0[10u].z, fma(_2158, cbModelParam._m0[10u].y, _2157 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2159, cbModelParam._m0[11u].z, fma(_2158, cbModelParam._m0[11u].y, _2157 * cbModelParam._m0[11u].x))), _1590);
            frontier_phi_16_38_ladder = _2304.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2304.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2304.x * cbModelParam._m0[1u].y;
        }
        _1671 = frontier_phi_16_38_ladder_2;
        _1673 = frontier_phi_16_38_ladder_1;
        _1675 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1659 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_748, _749, _750), _1590);
        _1671 = _1659.x * cbModelParam._m0[1u].y;
        _1673 = _1659.y * cbModelParam._m0[1u].y;
        _1675 = _1659.z * cbModelParam._m0[1u].y;
    }
    float _1679 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _580);
    float _1680 = isnan(_1679) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1679 : min(cbModelParam._m0[25u].w, _1679));
    float _1771;
    float _1773;
    float _1775;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1735 = fma(_809, cbModelParam._m0[21u].z, fma(_805, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _801)) + cbModelParam._m0[21u].w;
        float _1739 = fma(_809, cbModelParam._m0[22u].z, fma(_805, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _801)) + cbModelParam._m0[22u].w;
        float _1743 = fma(_809, cbModelParam._m0[23u].z, fma(_805, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _801)) + cbModelParam._m0[23u].w;
        float _1746 = fma(_750, cbModelParam._m0[21u].z, fma(_749, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _748));
        float _1749 = fma(_750, cbModelParam._m0[22u].z, fma(_749, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _748));
        float _1752 = fma(_750, cbModelParam._m0[23u].z, fma(_749, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _748));
        float _1859;
        if (_1746 > 0.0)
        {
            _1859 = abs((1.0 - _1735) / _1746);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1735 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1859 = frontier_phi_28_24_ladder;
        }
        float _2177;
        if (_1749 > 0.0)
        {
            _2177 = abs((1.0 - _1739) / _1749);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1739 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2177 = frontier_phi_40_35_ladder;
        }
        float _2504;
        if (_1752 > 0.0)
        {
            _2504 = abs((1.0 - _1743) / _1752);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1743 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2504 = frontier_phi_50_47_ladder;
        }
        float _2506 = isnan(_2177) ? _1859 : (isnan(_1859) ? _2177 : min(_1859, _2177));
        float _2507 = isnan(_2504) ? _2506 : (isnan(_2506) ? _2504 : min(_2506, _2504));
        float _2511 = (_2507 * _1746) + _1735;
        float _2512 = (_2507 * _1749) + _1739;
        float _2513 = (_2507 * _1752) + _1743;
        float _2514 = _2507 * 9.9999997473787516355514526367188e-05;
        float _2515 = (-1.0) - _2514;
        float _2517 = _2514 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2513 > _2517) || ((_2513 < _2515) || ((_2512 > _2517) || ((_2512 < _2515) || ((_2511 < _2515) || (_2511 > _2517))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2631 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2513, cbModelParam._m0[17u].z, fma(_2512, cbModelParam._m0[17u].y, _2511 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2513, cbModelParam._m0[18u].z, fma(_2512, cbModelParam._m0[18u].y, _2511 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2513, cbModelParam._m0[19u].z, fma(_2512, cbModelParam._m0[19u].y, _2511 * cbModelParam._m0[19u].x))), _1680);
            frontier_phi_25_50_ladder = _2631.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2631.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2631.x * cbModelParam._m0[1u].z;
        }
        _1771 = frontier_phi_25_50_ladder_2;
        _1773 = frontier_phi_25_50_ladder_1;
        _1775 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1755 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_748, _749, _750), _1680);
        _1771 = _1755.x * cbModelParam._m0[1u].z;
        _1773 = _1755.y * cbModelParam._m0[1u].z;
        _1775 = _1755.z * cbModelParam._m0[1u].z;
    }
    float _1787 = ((((1.0 - _769) * ((_756 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_769 * _756)) * _740;
    float _1788 = _1787 * ((cbModelParam._m0[1u].w * (_1771 - _1671)) + _1671);
    float _1789 = _1787 * ((cbModelParam._m0[1u].w * (_1773 - _1673)) + _1673);
    float _1790 = _1787 * ((cbModelParam._m0[1u].w * (_1775 - _1675)) + _1675);
    float _1793 = fma(_1790, cbSceneParam._m0[89u].z, fma(_1789, cbSceneParam._m0[89u].y, _1788 * cbSceneParam._m0[89u].x));
    float _1796 = fma(_1790, cbSceneParam._m0[90u].z, fma(_1789, cbSceneParam._m0[90u].y, _1788 * cbSceneParam._m0[90u].x));
    float _1799 = fma(_1790, cbSceneParam._m0[91u].z, fma(_1789, cbSceneParam._m0[91u].y, _1788 * cbSceneParam._m0[91u].x));
    float _1833 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1837 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1841 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1845 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1846 = _1833 / _1845;
    float _1847 = _1837 / _1845;
    float _1848 = _1841 / _1845;
    float _1995;
    float _1996;
    float _1997;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1875 = ((uint(_1848 > cbSceneParam._m0[59u].y) + uint(_1848 > cbSceneParam._m0[59u].x)) + uint(_1848 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1876 = _1875 + 43u;
        uint _1884 = _1875 + 44u;
        uint _1892 = _1875 + 45u;
        uint _1900 = _1875 + 46u;
        float _1911 = fma(_1845, cbSceneParam._m0[_1876].w, fma(_1841, cbSceneParam._m0[_1876].z, fma(_1837, cbSceneParam._m0[_1876].y, _1833 * cbSceneParam._m0[_1876].x)));
        float _1915 = fma(_1845, cbSceneParam._m0[_1884].w, fma(_1841, cbSceneParam._m0[_1884].z, fma(_1837, cbSceneParam._m0[_1884].y, _1833 * cbSceneParam._m0[_1884].x)));
        float _1923 = fma(_1845, cbSceneParam._m0[_1900].w, fma(_1841, cbSceneParam._m0[_1900].z, fma(_1837, cbSceneParam._m0[_1900].y, _1833 * cbSceneParam._m0[_1900].x)));
        float _1928 = cbSceneParam._m0[33u].z * _1923;
        float _1930 = cbSceneParam._m0[33u].w * _1923;
        float _1933 = fma(_1845, cbSceneParam._m0[_1892].w, fma(_1841, cbSceneParam._m0[_1892].z, fma(_1837, cbSceneParam._m0[_1892].y, _1833 * cbSceneParam._m0[_1892].x))) / _1923;
        float _1981 = (cbSceneParam._m0[33u].x - sqrt(((_1847 * _1847) + (_1846 * _1846)) + (_1848 * _1848))) * cbSceneParam._m0[33u].y;
        float _4312 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1988 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1928 + _1911) / _1923, (_1930 + _1915) / _1923), _1933), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1930 + _1911) / _1923, (_1915 - _1928) / _1923), _1933), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1911 - _1928) / _1923, (_1915 - _1930) / _1923), _1933), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1911 - _1930) / _1923, (_1928 + _1915) / _1923), _1933), 0.0)).x), vec4(0.25)));
        _1995 = 1.0 - (_1988 * cbSceneParam._m0[34u].x);
        _1996 = 1.0 - (_1988 * cbSceneParam._m0[34u].y);
        _1997 = 1.0 - (_1988 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1995 = 1.0;
        _1996 = 1.0;
        _1997 = 1.0;
    }
    float _2061;
    float _2063;
    float _2065;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2049 = fma(_1845, cbSceneParam._m0[63u].w, fma(_1841, cbSceneParam._m0[63u].z, fma(_1837, cbSceneParam._m0[63u].y, _1833 * cbSceneParam._m0[63u].x)));
        float _2050 = fma(_1845, cbSceneParam._m0[60u].w, fma(_1841, cbSceneParam._m0[60u].z, fma(_1837, cbSceneParam._m0[60u].y, _1833 * cbSceneParam._m0[60u].x))) / _2049;
        float _2051 = fma(_1845, cbSceneParam._m0[61u].w, fma(_1841, cbSceneParam._m0[61u].z, fma(_1837, cbSceneParam._m0[61u].y, _1833 * cbSceneParam._m0[61u].x))) / _2049;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2050 >= cbSceneParam._m0[64u].x) && (_2051 >= cbSceneParam._m0[64u].y)) && (_2050 <= cbSceneParam._m0[64u].z)) && (_2051 <= cbSceneParam._m0[64u].w))
        {
            float _2190 = fma(_1845, cbSceneParam._m0[62u].w, fma(_1841, cbSceneParam._m0[62u].z, fma(_1837, cbSceneParam._m0[62u].y, _1833 * cbSceneParam._m0[62u].x))) / _2049;
            float _2194 = isnan(cbSceneParam._m0[41u].w) ? _2190 : (isnan(_2190) ? cbSceneParam._m0[41u].w : max(_2190, cbSceneParam._m0[41u].w));
            float _2237 = (cbSceneParam._m0[33u].x - sqrt(((_1847 * _1847) + (_1846 * _1846)) + (_1848 * _1848))) * cbSceneParam._m0[33u].y;
            float _4328 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
            float _2244 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2050, cbSceneParam._m0[33u].w + _2051), _2194), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2050, _2051 - cbSceneParam._m0[33u].z), _2194), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2050 - cbSceneParam._m0[33u].z, _2051 - cbSceneParam._m0[33u].w), _2194), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2050 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2051), _2194), 0.0)).x), vec4(0.25)));
            float _2248 = 1.0 - (_2244 * cbSceneParam._m0[34u].x);
            float _2249 = 1.0 - (_2244 * cbSceneParam._m0[34u].y);
            float _2250 = 1.0 - (_2244 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2250) ? _1997 : (isnan(_1997) ? _2250 : min(_1997, _2250));
            frontier_phi_37_36_ladder_1 = isnan(_2249) ? _1996 : (isnan(_1996) ? _2249 : min(_1996, _2249));
            frontier_phi_37_36_ladder_2 = isnan(_2248) ? _1995 : (isnan(_1995) ? _2248 : min(_1995, _2248));
        }
        else
        {
            frontier_phi_37_36_ladder = _1997;
            frontier_phi_37_36_ladder_1 = _1996;
            frontier_phi_37_36_ladder_2 = _1995;
        }
        _2061 = frontier_phi_37_36_ladder_2;
        _2063 = frontier_phi_37_36_ladder_1;
        _2065 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2061 = _1995;
        _2063 = _1996;
        _2065 = _1997;
    }
    uvec4 _2070 = floatBitsToUint(cbInstanceData._m0[_715 + 5u]);
    uint _2072 = _2070.x * 14u;
    uint _2073 = _2072 + 13u;
    float _2080 = _740 + (-1.0);
    float _2085 = (cbLight._m0[_2073].x * _2080) + 1.0;
    float _2086 = (cbLight._m0[_2073].y * _2080) + 1.0;
    float _2087 = (cbLight._m0[_2073].z * _2080) + 1.0;
    float _2088 = (cbLight._m0[_2073].w * _2080) + 1.0;
    uint _2089 = _2072 + 5u;
    float _2095 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
    uint _2099 = _2072 + 4u;
    float _2109 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
    uint _2113 = _2072 | 1u;
    float _2124 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_577, _578, _579));
    float _2127 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_577, _578, _579));
    float _4364 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _4375 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2132 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * 0.3183098733425140380859375;
    float _2134 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * 0.3183098733425140380859375;
    float _2141 = ((cbLight._m0[_2089].x * _2095) * _2134) + (((cbLight._m0[_2099].x * _2061) * _2109) * _2132);
    float _2142 = ((_2095 * cbLight._m0[_2089].y) * _2134) + (((cbLight._m0[_2099].y * _2063) * _2109) * _2132);
    float _2143 = ((_2095 * cbLight._m0[_2089].z) * _2134) + (((cbLight._m0[_2099].z * _2065) * _2109) * _2132);
    uvec4 _2147 = floatBitsToUint(cbLight._m0[_2072 + 12u]);
    bool _2149 = _2147.x == 0u;
    float _2251;
    float _2253;
    float _2255;
    if (_2149)
    {
        _2251 = _2141;
        _2253 = _2142;
        _2255 = _2143;
    }
    else
    {
        uint _2259 = _2072 + 6u;
        float _2275 = (dot(vec3(cbLight._m0[_2072 + 2u].xyz), vec3(_577, _578, _579)) * 0.5) + 0.5;
        float _2276 = _2275 * _2275;
        float _4386 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2277 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2278 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
        _2251 = (((cbLight._m0[_2259].x * 0.3183098733425140380859375) * _2277) * _2278) + _2141;
        _2253 = (((cbLight._m0[_2259].y * 0.3183098733425140380859375) * _2277) * _2278) + _2142;
        _2255 = (((cbLight._m0[_2259].z * 0.3183098733425140380859375) * _2277) * _2278) + _2143;
    }
    bool _2258 = _2147.y == 0u;
    float _2313;
    float _2315;
    float _2317;
    if (_2258)
    {
        _2313 = _2251;
        _2315 = _2253;
        _2317 = _2255;
    }
    else
    {
        uint _2475 = _2072 + 7u;
        float _2491 = (dot(vec3(cbLight._m0[_2072 + 3u].xyz), vec3(_577, _578, _579)) * 0.5) + 0.5;
        float _2492 = _2491 * _2491;
        float _4402 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2493 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2494 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
        _2313 = (((cbLight._m0[_2475].x * 0.3183098733425140380859375) * _2493) * _2494) + _2251;
        _2315 = (((cbLight._m0[_2475].y * 0.3183098733425140380859375) * _2493) * _2494) + _2253;
        _2317 = (((cbLight._m0[_2475].z * 0.3183098733425140380859375) * _2493) * _2494) + _2255;
    }
    uint _2320 = _2072 + 8u;
    float _2333 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2072].w)) * _580) * 0.949999988079071044921875);
    float _2334 = _2333 * _2333;
    float _2335 = cbLight._m0[_2072].x + _657;
    float _2336 = cbLight._m0[_2072].y + _658;
    float _2337 = cbLight._m0[_2072].z + _659;
    float _2341 = inversesqrt(dot(vec3(_2335, _2336, _2337), vec3(_2335, _2336, _2337)));
    float _2342 = _2341 * _2335;
    float _2343 = _2341 * _2336;
    float _2344 = _2341 * _2337;
    float _2345 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2072].xyz));
    float _4418 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2348 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _4429 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _2349 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _2350 = dot(vec3(_577, _578, _579), vec3(_2342, _2343, _2344));
    float _4440 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2353 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _2354 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_2342, _2343, _2344));
    float _4451 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2358 = _2334 * _2334;
    float _2362 = ((_2353 * _2353) * (_2358 + (-1.0))) + 1.0;
    float _2373 = (exp2(log2(1.0 - (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2374 = 1.0 - _2334;
    float _2385 = (0.5 / (((_2349 * ((_2348 * _2374) + _2334)) + 9.9999999392252902907785028219223e-09) + (((_2349 * _2374) + _2334) * _2348))) * _2348;
    float _4462 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2387 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2358 / ((_2362 * _2362) * 3.141590118408203125));
    uint _2401 = _2072 + 9u;
    float _2412 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2113].w)) * _580) * 0.949999988079071044921875);
    float _2413 = _2412 * _2412;
    float _2414 = cbLight._m0[_2113].x + _657;
    float _2415 = cbLight._m0[_2113].y + _658;
    float _2416 = cbLight._m0[_2113].z + _659;
    float _2420 = inversesqrt(dot(vec3(_2414, _2415, _2416), vec3(_2414, _2415, _2416)));
    float _2421 = _2420 * _2414;
    float _2422 = _2420 * _2415;
    float _2423 = _2420 * _2416;
    float _2424 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2113].xyz));
    float _4473 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2427 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _2428 = dot(vec3(_577, _578, _579), vec3(_2421, _2422, _2423));
    float _4484 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2431 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
    float _2432 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_2421, _2422, _2423));
    float _4495 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2436 = _2413 * _2413;
    float _2440 = ((_2431 * _2431) * (_2436 + (-1.0))) + 1.0;
    float _2449 = (exp2(log2(1.0 - (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2450 = 1.0 - _2413;
    float _2460 = (0.5 / (((_2349 * ((_2427 * _2450) + _2413)) + 9.9999999392252902907785028219223e-09) + (((_2349 * _2450) + _2413) * _2427))) * _2427;
    float _4506 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2462 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2436 / ((_2440 * _2440) * 3.141590118408203125));
    float _2472 = (((_2449 * cbLight._m0[_2401].x) * _2462) * _2095) + ((((cbLight._m0[_2320].x * _2061) * _2373) * _2387) * _2109);
    float _2473 = (((_2449 * cbLight._m0[_2401].y) * _2462) * _2095) + ((((cbLight._m0[_2320].y * _2063) * _2373) * _2387) * _2109);
    float _2474 = (((_2449 * cbLight._m0[_2401].z) * _2462) * _2095) + ((((cbLight._m0[_2320].z * _2065) * _2373) * _2387) * _2109);
    float _2530;
    float _2532;
    float _2534;
    if (_2149)
    {
        _2530 = _2472;
        _2532 = _2473;
        _2534 = _2474;
    }
    else
    {
        uint _2536 = _2072 + 2u;
        uint _2540 = _2072 + 10u;
        float _2554 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2536].w)) * _580) * 0.949999988079071044921875);
        float _2555 = _2554 * _2554;
        float _2556 = cbLight._m0[_2536].x + _657;
        float _2557 = cbLight._m0[_2536].y + _658;
        float _2558 = cbLight._m0[_2536].z + _659;
        float _2562 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
        float _2563 = _2562 * _2556;
        float _2564 = _2562 * _2557;
        float _2565 = _2562 * _2558;
        float _2566 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2536].xyz));
        float _4517 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2569 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2570 = dot(vec3(_577, _578, _579), vec3(_2563, _2564, _2565));
        float _4528 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2573 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2574 = dot(vec3(cbLight._m0[_2536].xyz), vec3(_2563, _2564, _2565));
        float _4539 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2578 = _2555 * _2555;
        float _2582 = ((_2573 * _2573) * (_2578 + (-1.0))) + 1.0;
        float _2591 = (exp2(log2(1.0 - (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2592 = 1.0 - _2555;
        float _2602 = (0.5 / (((_2349 * ((_2569 * _2592) + _2555)) + 9.9999999392252902907785028219223e-09) + (((_2349 * _2592) + _2555) * _2569))) * _2569;
        float _4550 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2604 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2578 / ((_2582 * _2582) * 3.141590118408203125));
        float _2605 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
        _2530 = (((_2591 * cbLight._m0[_2540].x) * _2604) * _2605) + _2472;
        _2532 = (((_2591 * cbLight._m0[_2540].y) * _2604) * _2605) + _2473;
        _2534 = (((_2591 * cbLight._m0[_2540].z) * _2604) * _2605) + _2474;
    }
    float _2636;
    float _2638;
    float _2640;
    if (_2258)
    {
        _2636 = _2530;
        _2638 = _2532;
        _2640 = _2534;
    }
    else
    {
        uint _2647 = _2072 + 3u;
        uint _2651 = _2072 + 11u;
        float _2665 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2647].w)) * _580) * 0.949999988079071044921875);
        float _2666 = _2665 * _2665;
        float _2667 = cbLight._m0[_2647].x + _657;
        float _2668 = cbLight._m0[_2647].y + _658;
        float _2669 = cbLight._m0[_2647].z + _659;
        float _2673 = inversesqrt(dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669)));
        float _2674 = _2673 * _2667;
        float _2675 = _2673 * _2668;
        float _2676 = _2673 * _2669;
        float _2677 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_2647].xyz));
        float _4566 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2680 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2681 = dot(vec3(_577, _578, _579), vec3(_2674, _2675, _2676));
        float _4577 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2684 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2685 = dot(vec3(cbLight._m0[_2647].xyz), vec3(_2674, _2675, _2676));
        float _4588 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2689 = _2666 * _2666;
        float _2693 = ((_2684 * _2684) * (_2689 + (-1.0))) + 1.0;
        float _2702 = (exp2(log2(1.0 - (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2703 = 1.0 - _2666;
        float _2713 = (0.5 / (((_2349 * ((_2680 * _2703) + _2666)) + 9.9999999392252902907785028219223e-09) + (((_2349 * _2703) + _2666) * _2680))) * _2680;
        float _4599 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2715 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2689 / ((_2693 * _2693) * 3.141590118408203125));
        float _2716 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
        _2636 = (((_2702 * cbLight._m0[_2651].x) * _2715) * _2716) + _2530;
        _2638 = (((_2702 * cbLight._m0[_2651].y) * _2715) * _2716) + _2532;
        _2640 = (((_2702 * cbLight._m0[_2651].z) * _2715) * _2716) + _2534;
    }
    float _2782;
    float _2784;
    float _2786;
    float _2788;
    float _2790;
    float _2792;
    if (_2070.y == 0u)
    {
        uvec4 _2737 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2738 = _2737.x;
        uint _2749 = uint((float(_2737.y) * floor(float(uint(cbSceneParam._m0[85u].y * _678) / _2738))) + floor(float(uint(cbSceneParam._m0[85u].x * _677) / _2738)));
        float _2759 = (log2(_1848 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2760 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        uint _2763 = uint(isnan(14.0) ? _2760 : (isnan(_2760) ? 14.0 : min(_2760, 14.0)));
        uvec4 _2768 = texelFetch(g_lightClusterGridBuffer, int(((_2763 << 2u) + (_2749 << 6u)) >> 2u));
        uint _2769 = _2768.x;
        uint _2770 = _2737.z;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        if (((((1u << ((_2770 >> 4u) & 15u)) + 4294967295u) & _2769) == 0u) || ((_2770 & 240u) == 0u))
        {
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
        }
        else
        {
            float _2850;
            float _2852;
            float _2854;
            float _2856;
            float _2858;
            float _2860;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            uint _3008 = 0u;
            uint _3017;
            bool _3018;
            for (;;)
            {
                _3017 = texelFetch(g_lightClassification, int((((_2763 << 5u) + (_2749 << 9u)) + (_3008 << 2u)) >> 2u)).x;
                _3018 = _3017 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3018)
                {
                    frontier_phi_71_pred = _3007;
                    frontier_phi_71_pred_1 = _3006;
                    frontier_phi_71_pred_2 = _3005;
                    frontier_phi_71_pred_3 = _3004;
                    frontier_phi_71_pred_4 = _3003;
                    frontier_phi_71_pred_5 = _3002;
                }
                else
                {
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    uint _3153;
                    _3147 = _3002;
                    _3148 = _3003;
                    _3149 = _3004;
                    _3150 = _3005;
                    _3151 = _3006;
                    _3152 = _3007;
                    _3153 = _3017;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    for (;;)
                    {
                        uint _3157 = uint(findLSB(_3153)) + (_3008 << 5u);
                        uint _3154 = (_3153 + 4294967295u) & _3153;
                        uint _3159 = _3157 * 48u;
                        vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3159)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 3u)).x));
                        uint _3179 = (_3157 * 48u) + 4u;
                        vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3179)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 3u)).x));
                        uint _3198 = (_3157 * 48u) + 8u;
                        vec3 _3209 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x));
                        float _3213 = _3173.x - _1846;
                        float _3214 = _3173.y - _1847;
                        float _3215 = _3173.z - _1848;
                        float _3216 = dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215));
                        float _3219 = inversesqrt(_3216);
                        float _3220 = _3219 * _3213;
                        float _3221 = _3219 * _3214;
                        float _3222 = _3219 * _3215;
                        float _3223 = dot(vec3(_696, _699, _702), vec3(_3220, _3221, _3222));
                        float _3228 = 1.0 - (_3216 * _3173.w);
                        float _4625 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3229 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                        float _3230 = sqrt(_3216) * _3192.w;
                        float _3233 = 1.39999997615814208984375 / (_3230 + 1.39999997615814208984375);
                        float _3234 = _3233 * _3233;
                        float _3237 = ((1.0 - _3234) * _3223) + _3234;
                        float _3240 = _3230 * _3230;
                        float _3244 = ((isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0))) * _3229) / ((_3240 * 0.699999988079071044921875) + 1.0);
                        float _3248 = (-0.0) - _1846;
                        float _3249 = (-0.0) - _1847;
                        float _3250 = (-0.0) - _1848;
                        float _3254 = inversesqrt(dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250)));
                        float _3255 = _3254 * _3248;
                        float _3256 = _3254 * _3249;
                        float _3257 = _3254 * _3250;
                        float _3264 = exp2(log2(1.0 / ((_3240 * 3.5) + 5.0)) * 0.25);
                        float _3265 = 1.0 - _756;
                        float _3272 = sqrt(1.0 - ((1.0 - (_3265 * _3265)) * (1.0 - (_3264 * _3264))));
                        float _3273 = _3272 * _3272;
                        float _3274 = _3273 * _3273;
                        float _3275 = _3255 + _3220;
                        float _3276 = _3256 + _3221;
                        float _3277 = _3257 + _3222;
                        float _3281 = inversesqrt(dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277)));
                        float _3285 = dot(vec3(_696, _699, _702), vec3(_3255, _3256, _3257));
                        float _4641 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3288 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                        float _3289 = dot(vec3(_696, _699, _702), vec3(_3281 * _3275, _3281 * _3276, _3281 * _3277));
                        float _4652 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3292 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                        float _3296 = ((_3292 * _3292) * (_3274 + (-1.0))) + 1.0;
                        float _3297 = _3233 * _3273;
                        float _3298 = _3297 * _3297;
                        float _3301 = ((1.0 - _3298) * _3223) + _3298;
                        float _4663 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3302 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                        float _3303 = 1.0 - _3273;
                        float _3313 = (0.5 / (((_3302 * ((_3288 * _3303) + _3273)) + 9.9999999392252902907785028219223e-09) + (((_3302 * _3303) + _3273) * _3288))) * _3302;
                        float _4674 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3324 = (((_3274 * 3.1415927410125732421875) * (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) / ((_3296 * _3296) * ((_3240 * 2.1991131305694580078125) + 3.141590118408203125))) * _3229;
                        _3077 = (_3244 * _3192.x) + _3150;
                        _3078 = (_3244 * _3192.y) + _3151;
                        _3079 = (_3244 * _3192.z) + _3152;
                        _3074 = (_3324 * _3209.x) + _3147;
                        _3075 = (_3324 * _3209.y) + _3148;
                        _3076 = (_3324 * _3209.z) + _3149;
                        if (_3154 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3147 = _3074;
                            _3148 = _3075;
                            _3149 = _3076;
                            _3150 = _3077;
                            _3151 = _3078;
                            _3152 = _3079;
                            _3153 = _3154;
                        }
                    }
                    frontier_phi_71_pred = _3079;
                    frontier_phi_71_pred_1 = _3078;
                    frontier_phi_71_pred_2 = _3077;
                    frontier_phi_71_pred_3 = _3076;
                    frontier_phi_71_pred_4 = _3075;
                    frontier_phi_71_pred_5 = _3074;
                }
                _2860 = frontier_phi_71_pred;
                _2858 = frontier_phi_71_pred_1;
                _2856 = frontier_phi_71_pred_2;
                _2854 = frontier_phi_71_pred_3;
                _2852 = frontier_phi_71_pred_4;
                _2850 = frontier_phi_71_pred_5;
                uint _3009 = _3008 + 1u;
                if (_3009 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3002 = _2850;
                    _3003 = _2852;
                    _3004 = _2854;
                    _3005 = _2856;
                    _3006 = _2858;
                    _3007 = _2860;
                    _3008 = _3009;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
        }
        uvec4 _2863 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2864 = _2863.z;
        uint _2866 = (_2864 >> 8u) & 15u;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        if (((4294967295u << _2866) & _2769) == 0u)
        {
            _2970 = _2849;
            _2972 = _2851;
            _2974 = _2853;
            _2976 = _2855;
            _2978 = _2857;
            _2980 = _2859;
        }
        else
        {
            float _2995 = inversesqrt(dot(vec3(_1846, _1847, _1848), vec3(_1846, _1847, _1848)));
            float _2996 = _2995 * _1846;
            float _2997 = _2995 * _1847;
            float _2998 = _2995 * _1848;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2866 < ((_2864 >> 12u) & 15u))
            {
                float _2971;
                float _2973;
                float _2975;
                float _2977;
                float _2979;
                float _2981;
                float _3130 = _2849;
                float _3131 = _2851;
                float _3132 = _2853;
                float _3133 = _2855;
                float _3134 = _2857;
                float _3135 = _2859;
                uint _3136 = _2866;
                uint _3145;
                bool _3146;
                for (;;)
                {
                    _3145 = texelFetch(g_lightClassification, int((((_2763 << 5u) + (_2749 << 9u)) + (_3136 << 2u)) >> 2u)).x;
                    _3146 = _3145 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3146)
                    {
                        frontier_phi_82_pred = _3135;
                        frontier_phi_82_pred_1 = _3134;
                        frontier_phi_82_pred_2 = _3133;
                        frontier_phi_82_pred_3 = _3132;
                        frontier_phi_82_pred_4 = _3131;
                        frontier_phi_82_pred_5 = _3130;
                    }
                    else
                    {
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3351 = _3130;
                        float _3352 = _3131;
                        float _3353 = _3132;
                        float _3354 = _3133;
                        float _3355 = _3134;
                        float _3356 = _3135;
                        uint _3357 = _3145;
                        uint _3358;
                        vec4 _3383;
                        float _3384;
                        vec4 _3399;
                        vec3 _3411;
                        vec4 _3426;
                        vec4 _3441;
                        float _3488;
                        bool _3489;
                        for (;;)
                        {
                            uint _3368 = ((_3136 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3357));
                            _3358 = (_3357 + 4294967295u) & _3357;
                            uint _3370 = _3368 * 40u;
                            _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            _3384 = _3383.w;
                            uint _3386 = (_3368 * 40u) + 4u;
                            _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            uint _3401 = (_3368 * 40u) + 8u;
                            _3411 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x));
                            uint _3413 = (_3368 * 40u) + 16u;
                            _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            uint _3428 = (_3368 * 40u) + 20u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3444 = (_3368 * 40u) + 24u;
                            vec4 _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3463 = (_3368 * 40u) + 28u;
                            vec4 _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            _3488 = fma(_1848, _3476.z, fma(_1847, _3476.y, _3476.x * _1846)) + _3476.w;
                            _3489 = !((fma(_1848, _3457.z, fma(_1847, _3457.y, _3457.x * _1846)) + _3457.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3489)
                            {
                                float _3516 = _3383.x - _1846;
                                float _3517 = _3383.y - _1847;
                                float _3518 = _3383.z - _1848;
                                float _3519 = dot(vec3(_3516, _3517, _3518), vec3(_3516, _3517, _3518));
                                float _3522 = inversesqrt(_3519);
                                float _3523 = _3522 * _3516;
                                float _3524 = _3522 * _3517;
                                float _3525 = _3522 * _3518;
                                float _3529 = 1.0 - (_3519 / (_3384 * _3384));
                                float _4685 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3530 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3534 = sqrt(_3519) * _3399.w;
                                float _3536 = 1.39999997615814208984375 / (_3534 + 1.39999997615814208984375);
                                float _3537 = _3536 * _3536;
                                float _3540 = ((1.0 - _3537) * dot(vec3(_3523, _3524, _3525), vec3(_696, _699, _702))) + _3537;
                                float _3543 = _3534 * _3534;
                                float _3547 = (fma(_1848, _3426.z, fma(_1847, _3426.y, _3426.x * _1846)) + _3426.w) / _3488;
                                float _3548 = (fma(_1848, _3441.z, fma(_1847, _3441.y, _3441.x * _1846)) + _3441.w) / _3488;
                                float _3552 = 1.0 - dot(vec2(_3547, _3548), vec2(_3547, _3548));
                                float _4701 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3553 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3554 = _3553 * (((isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0))) * _3530) / ((_3543 * 0.699999988079071044921875) + 1.0));
                                float _3566 = exp2(log2(1.0 / ((_3543 * 3.5) + 5.0)) * 0.25);
                                float _3567 = 1.0 - _756;
                                float _3574 = sqrt(1.0 - ((1.0 - (_3567 * _3567)) * (1.0 - (_3566 * _3566))));
                                float _3575 = _3574 * _3574;
                                float _3576 = _3575 * _3575;
                                float _3577 = _3523 - _2996;
                                float _3578 = _3524 - _2997;
                                float _3579 = _3525 - _2998;
                                float _3583 = inversesqrt(dot(vec3(_3577, _3578, _3579), vec3(_3577, _3578, _3579)));
                                float _3587 = dot(vec3(_696, _699, _702), vec3((-0.0) - _2996, (-0.0) - _2997, (-0.0) - _2998));
                                float _4712 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3590 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3591 = dot(vec3(_696, _699, _702), vec3(_3583 * _3577, _3583 * _3578, _3583 * _3579));
                                float _4723 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3594 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3598 = ((_3594 * _3594) * (_3576 + (-1.0))) + 1.0;
                                float _3599 = _3536 * _3575;
                                float _3600 = _3599 * _3599;
                                float _3606 = ((1.0 - _3600) * dot(vec3(_696, _699, _702), vec3(_3523, _3524, _3525))) + _3600;
                                float _4734 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3607 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3608 = 1.0 - _3575;
                                float _3618 = (0.5 / (((_3607 * ((_3590 * _3608) + _3575)) + 9.9999999392252902907785028219223e-09) + (((_3607 * _3608) + _3575) * _3590))) * _3607;
                                float _4745 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3628 = (_3553 * _3530) * (((_3576 * 3.1415927410125732421875) * (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) / ((_3598 * _3598) * ((_3543 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3554 * _3399.z;
                                frontier_phi_88_pred_1 = _3554 * _3399.y;
                                frontier_phi_88_pred_2 = _3554 * _3399.x;
                                frontier_phi_88_pred_3 = _3628 * _3411.z;
                                frontier_phi_88_pred_4 = _3628 * _3411.y;
                                frontier_phi_88_pred_5 = _3628 * _3411.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3637 = frontier_phi_88_pred;
                            _3636 = frontier_phi_88_pred_1;
                            _3635 = frontier_phi_88_pred_2;
                            _3634 = frontier_phi_88_pred_3;
                            _3633 = frontier_phi_88_pred_4;
                            _3632 = frontier_phi_88_pred_5;
                            _3341 = _3635 + _3354;
                            _3342 = _3636 + _3355;
                            _3343 = _3637 + _3356;
                            _3338 = _3632 + _3351;
                            _3339 = _3633 + _3352;
                            _3340 = _3634 + _3353;
                            if (_3358 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3358;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3343;
                        frontier_phi_82_pred_1 = _3342;
                        frontier_phi_82_pred_2 = _3341;
                        frontier_phi_82_pred_3 = _3340;
                        frontier_phi_82_pred_4 = _3339;
                        frontier_phi_82_pred_5 = _3338;
                    }
                    _2981 = frontier_phi_82_pred;
                    _2979 = frontier_phi_82_pred_1;
                    _2977 = frontier_phi_82_pred_2;
                    _2975 = frontier_phi_82_pred_3;
                    _2973 = frontier_phi_82_pred_4;
                    _2971 = frontier_phi_82_pred_5;
                    uint _3137 = _3136 + 1u;
                    if (_3137 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3130 = _2971;
                        _3131 = _2973;
                        _3132 = _2975;
                        _3133 = _2977;
                        _3134 = _2979;
                        _3135 = _2981;
                        _3136 = _3137;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2977;
                frontier_phi_63_64_ladder_1 = _2981;
                frontier_phi_63_64_ladder_2 = _2979;
                frontier_phi_63_64_ladder_3 = _2975;
                frontier_phi_63_64_ladder_4 = _2973;
                frontier_phi_63_64_ladder_5 = _2971;
            }
            else
            {
                frontier_phi_63_64_ladder = _2855;
                frontier_phi_63_64_ladder_1 = _2859;
                frontier_phi_63_64_ladder_2 = _2857;
                frontier_phi_63_64_ladder_3 = _2853;
                frontier_phi_63_64_ladder_4 = _2851;
                frontier_phi_63_64_ladder_5 = _2849;
            }
            _2970 = frontier_phi_63_64_ladder_5;
            _2972 = frontier_phi_63_64_ladder_4;
            _2974 = frontier_phi_63_64_ladder_3;
            _2976 = frontier_phi_63_64_ladder;
            _2978 = frontier_phi_63_64_ladder_2;
            _2980 = frontier_phi_63_64_ladder_1;
        }
        float _2985 = isnan(1.0) ? _740 : (isnan(_740) ? 1.0 : min(_740, 1.0));
        _2782 = (_2985 * _2976) + _2313;
        _2784 = (_2985 * _2978) + _2315;
        _2786 = (_2985 * _2980) + _2317;
        _2788 = ((_2970 * 0.039999999105930328369140625) * _2985) + _2636;
        _2790 = ((_2972 * 0.039999999105930328369140625) * _2985) + _2638;
        _2792 = ((_2974 * 0.039999999105930328369140625) * _2985) + _2640;
    }
    else
    {
        _2782 = _2313;
        _2784 = _2315;
        _2786 = _2317;
        _2788 = _2636;
        _2790 = _2638;
        _2792 = _2640;
    }
    float _4761 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _4772 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _4783 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _2809 = ((isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2782 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _740))) + ((_2788 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1579)) * cbPerFrame._m0[3u].x);
    float _2810 = ((isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2784 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _740))) + ((_2790 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1579)) * cbPerFrame._m0[3u].x);
    float _2811 = ((isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_2786 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _740))) + ((_2792 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1579)) * cbPerFrame._m0[3u].x);
    uint _2812 = _715 + 6u;
    float _2820 = _677 / cbSceneParam._m0[86u].x;
    float _2821 = _678 / cbSceneParam._m0[86u].y;
    vec4 _2835 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2820, _2821, (log2((isnan(cbSceneParam._m0[77u].w) ? _599 : (isnan(_599) ? cbSceneParam._m0[77u].w : min(_599, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2837 = _2835.x;
    float _2838 = _2835.y;
    float _2839 = _2835.z;
    float _2840 = _2835.w;
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    if (_599 > cbSceneParam._m0[78u].w)
    {
        float _2874 = isnan(_599) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _599 : min(cbSceneParam._m0[80u].w, _599));
        float _2875 = _2874 / _599;
        float _2886 = _2875 * _650;
        float _2887 = _651 * _2875;
        float _2888 = (-0.0) - _2887;
        float _2890 = _2875 * _652;
        float _2892 = (cbSceneParam._m0[77u].w * _2888) / _2874;
        float _2893 = _2892 + cbSceneParam._m0[79u].w;
        float _2894 = cbSceneParam._m0[79u].w - _2887;
        float _2900 = sqrt(((_2886 * _2886) + (_2887 * _2887)) + (_2890 * _2890));
        float _2903 = (1.0 - (cbSceneParam._m0[77u].w / _2874)) * _2900;
        float _2908 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2910 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3087;
        if (abs((_2888 - _2892) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3087 = ((((_2893 > 0.0) ? exp2(_2908 * _2893) : (2.0 - exp2(_2910 * _2893))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2903;
        }
        else
        {
            float _3031 = 1.0 / cbSceneParam._m0[80u].x;
            float _3032 = isnan(_2894) ? _2893 : (isnan(_2893) ? _2894 : max(_2893, _2894));
            float _3033 = isnan(_2894) ? _2893 : (isnan(_2893) ? _2894 : min(_2893, _2894));
            float _3042 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : min(_3032, 0.0));
            float _3043 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : min(_3033, 0.0));
            _3087 = ((abs(_2900 / _2888) * cbSceneParam._m0[80u].y) * ((((_3042 - _3043) * 2.0) - ((exp2(_2908 * (isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0)))) - exp2(_2908 * (isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0))))) * _3031)) - ((exp2(_2910 * _3042) - exp2(_2910 * _3043)) * _3031))) + (_2903 * cbSceneParam._m0[80u].z);
        }
        vec4 _3089 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2820, _2821, 1.0), 0.0);
        float _3098 = exp2((_3087 * (-1.44269502162933349609375)) * (1.0 - _3089.w));
        float _3099 = log2(_3098);
        float _3115 = log2(_2840);
        _2912 = (exp2(_3115 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3099 * cbSceneParam._m0[78u].x)) * _3089.x) / cbSceneParam._m0[78u].x)) + _2837;
        _2914 = (exp2(_3115 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3099 * cbSceneParam._m0[78u].y)) * _3089.y) / cbSceneParam._m0[78u].y)) + _2838;
        _2916 = (exp2(_3115 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3099 * cbSceneParam._m0[78u].z)) * _3089.z) / cbSceneParam._m0[78u].z)) + _2839;
        _2918 = _3098 * _2840;
    }
    else
    {
        _2912 = _2837;
        _2914 = _2838;
        _2916 = _2839;
        _2918 = _2840;
    }
    bool _3125;
    vec4 _2928;
    vec4 _2950;
    float _2952;
    float _2956;
    float _2957;
    float _2958;
    float _2959;
    bool _2969;
    for (;;)
    {
        _2928 = cbMatDynParam._m0[0u];
        float _2930 = roundEven(_2928.y);
        bool _2931 = _2930 == 3.0;
        float _2932 = log2(_2918);
        float _2939 = exp2(_2932 * cbSceneParam._m0[78u].x) * _2809;
        float _2940 = exp2(_2932 * cbSceneParam._m0[78u].y) * _2810;
        float _2941 = exp2(_2932 * cbSceneParam._m0[78u].z) * _2811;
        float _2948 = _666 + (-0.5);
        _2950 = cbMtdParam._m0[1u];
        _2952 = _2950.y * _2948;
        float _2955 = (_2930 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2956 = _2955 * (_2931 ? _2939 : (_2939 + (cbSceneParam._m0[72u].w * _2912)));
        _2957 = _2955 * (_2931 ? _2940 : (_2940 + (cbSceneParam._m0[72u].w * _2914)));
        _2958 = _2955 * (_2931 ? _2941 : (_2941 + (cbSceneParam._m0[72u].w * _2916)));
        _2959 = _2948 * 0.999000012874603271484375;
        _2969 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2969)
        {
            if ((cbInstanceData._m0[_715 + 7u].x + _2959) < 0.5)
            {
                _3125 = true;
                break;
            }
        }
        uint _3066 = _716 + uint(_2928.w);
        if ((cbInstanceData._m0[_3066].w < 1.0) && ((cbInstanceData._m0[_3066].w + _2959) < 0.5))
        {
            _3125 = true;
            break;
        }
        if ((_2952 + 1.0) < _2950.x)
        {
            _3125 = true;
            break;
        }
        _3125 = false;
        break;
    }
    float _3329;
    if (_3125)
    {
        discard_state = true;
        _3329 = 0.0;
    }
    else
    {
        _3329 = cbInstanceData._m0[_2812].w;
    }
    SV_Target.x = _2956;
    SV_Target.y = _2957;
    SV_Target.z = _2958;
    SV_Target.w = _3329;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2812].w;
    discard_exit();
}


