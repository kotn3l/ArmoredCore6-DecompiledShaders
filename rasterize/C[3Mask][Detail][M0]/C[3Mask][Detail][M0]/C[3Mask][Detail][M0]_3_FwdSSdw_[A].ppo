#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1245;
float _3632;
float _3633;
float _3634;
float _3635;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _254 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _260 = _254.x * cbMtdParam._m0[10u].x;
    float _261 = _254.y * cbMtdParam._m0[10u].y;
    float _262 = _254.z * cbMtdParam._m0[10u].z;
    vec4 _281 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _328 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x;
    float _339 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _328)) + 1.0;
    float _3644 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _340 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _347 = (_340 * ((_281.x * cbMtdParam._m0[11u].x) - _260)) + _260;
    float _348 = (_340 * ((_281.y * cbMtdParam._m0[11u].y) - _261)) + _261;
    float _349 = (_340 * ((_281.z * cbMtdParam._m0[11u].z) - _262)) + _262;
    vec4 _368 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _398 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _328)) + 1.0;
    float _3655 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _399 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _406 = (_399 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _407 = (_399 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _408 = (_399 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    vec4 _425 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _450 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _328)) + 1.0;
    float _3666 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _458 = (_451 * ((_425.x * cbMtdParam._m0[13u].x) - _406)) + _406;
    float _459 = (_451 * ((_425.y * cbMtdParam._m0[13u].y) - _407)) + _407;
    float _460 = (_451 * ((_425.z * cbMtdParam._m0[13u].z) - _408)) + _408;
    vec4 _481 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _510 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3677 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _511 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _518 = (_511 * ((_481.x * cbMtdParam._m0[14u].x) - _458)) + _458;
    float _519 = (_511 * ((_481.y * cbMtdParam._m0[14u].y) - _459)) + _459;
    float _520 = (_511 * ((_481.z * cbMtdParam._m0[14u].z) - _460)) + _460;
    vec4 _536 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _558 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _576 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _578 = _576.x;
    float _579 = _576.y;
    float _582 = cbMtdParam._m0[16u].w * _576.z;
    float _585 = (((cbMtdParam._m0[17u].x * _558.z) - _582) * _340) + _582;
    vec4 _598 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _607 = (((cbMtdParam._m0[17u].y * _598.z) - _585) * _399) + _585;
    vec4 _620 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _629 = (((cbMtdParam._m0[17u].z * _620.z) - _607) * _451) + _607;
    float _634 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_536.z * cbMtdParam._m0[16u].z) - _629)) + _629;
    float _639 = ((_558.x - _578) * _340) + _578;
    float _640 = ((_558.y - _579) * _340) + _579;
    float _645 = ((_598.x - _639) * _399) + _639;
    float _646 = ((_598.y - _640) * _399) + _640;
    float _655 = ((((_620.x - _645) * _451) + _645) * 2.0) + (-1.0);
    float _656 = ((((_620.y - _646) * _451) + _646) * 2.0) + (-1.0);
    float _657 = dot(vec2(_655, _656), vec2(_655, _656));
    float _3688 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _662 = sqrt(1.0 - (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))));
    float _668 = ((((_536.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _655;
    float _669 = ((((_536.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _656;
    float _672 = fma(_662, _224 * NORMAL.x, fma(_669, _231 * TANGENT.x, (_217 * _209) * _668));
    float _675 = fma(_662, _224 * NORMAL.y, fma(_669, _231 * TANGENT.y, (_217 * _210) * _668));
    float _678 = fma(_662, _224 * NORMAL.z, fma(_669, _231 * TANGENT.z, (_217 * _211) * _668));
    float _682 = inversesqrt(dot(vec3(_672, _675, _678), vec3(_672, _675, _678)));
    float _683 = _682 * _672;
    float _684 = _682 * _675;
    float _685 = _682 * _678;
    float _3699 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _686 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _3710 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _3721 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _3732 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _705 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _755 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _745);
    float _756 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _745);
    float _757 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _745);
    float _761 = inversesqrt(dot(vec3(_755, _756, _757), vec3(_755, _756, _757)));
    float _762 = _755 * _761;
    float _763 = _756 * _761;
    float _764 = _757 * _761;
    vec4 _769 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _771 = _769.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _925 = sqrt(((_755 * _755) + (_756 * _756)) + (_757 * _757));
        float _931 = (cbMatDynParam._m0[5u].x * _925) + cbMatDynParam._m0[5u].y;
        float _3743 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _936 = (cbMatDynParam._m0[5u].z * _925) + cbMatDynParam._m0[5u].w;
        float _3754 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) - _932)) + _932) < ((_771 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _782 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _783 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _801 = fma(_685, cbSceneParam._m0[5u].z, fma(_684, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _683));
    float _804 = fma(_685, cbSceneParam._m0[6u].z, fma(_684, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _683));
    float _807 = fma(_685, cbSceneParam._m0[7u].z, fma(_684, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _683));
    uint _820 = uint(roundEven(NORMAL.w)) * 13u;
    uint _821 = _820 + 9u;
    uint _822 = _821 + uint(cbMatDynParam._m0[0u].w);
    float _828 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))) * cbInstanceData._m0[_822].x;
    float _829 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) * cbInstanceData._m0[_822].y;
    float _830 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) * cbInstanceData._m0[_822].z;
    float _3765 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _3776 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    vec4 _842 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _782, cbSceneParam._m0[86u].y * _783));
    float _845 = _842.x * TEXCOORD_5.w;
    float _846 = dot(vec3(_683, _684, _685), vec3(_762, _763, _764));
    float _849 = _846 * 2.0;
    float _853 = (_849 * _683) - _762;
    float _854 = (_849 * _684) - _763;
    float _855 = (_849 * _685) - _764;
    float _859 = abs(dot(vec3(_762, _763, _764), vec3(_683, _684, _685)));
    float _3798 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _861 = sqrt(_686);
    float _874 = exp2((_861 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_861 * 3.0));
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _910 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1244;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _969 = fma(_914, cbModelParam._m0[26u].z, fma(_910, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _906));
        float _973 = fma(_914, cbModelParam._m0[27u].z, fma(_910, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _906));
        float _977 = fma(_914, cbModelParam._m0[28u].z, fma(_910, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _906));
        float _1002 = _906 + _683;
        float _1003 = _910 + _684;
        float _1004 = _914 + _685;
        float _1014 = fma(_1004, cbModelParam._m0[26u].z, fma(_1003, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1002)) - _969;
        float _1015 = fma(_1004, cbModelParam._m0[27u].z, fma(_1003, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1002)) - _973;
        float _1016 = fma(_1004, cbModelParam._m0[28u].z, fma(_1003, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1002)) - _977;
        float _1020 = inversesqrt(dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016)));
        float _1033 = ((_1020 * _1014) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_969 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1034 = ((_1020 * _1015) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_973 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1020 * _1016) / cbModelParam._m0[34u].z) + ((((((_977 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1033, _1034, _1035), 0.0);
        float _1072 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1038.x + (-0.5));
        float _1074 = _1072 * (_1038.y + (-0.5));
        float _1075 = _1072 * (_1038.z + (-0.5));
        float _1082 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1045.x + (-0.5));
        float _1084 = _1082 * (_1045.y + (-0.5));
        float _1085 = _1082 * (_1045.z + (-0.5));
        float _1092 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1052.x + (-0.5));
        float _1094 = _1092 * (_1052.y + (-0.5));
        float _1095 = _1092 * (_1052.z + (-0.5));
        float _1102 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1059.x + (-0.5));
        float _1104 = _1102 * (_1059.y + (-0.5));
        float _1105 = _1102 * (_1059.z + (-0.5));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = _1073 * 0.5;
        float _1110 = _1083 * 0.5;
        float _1111 = _1093 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1126 = (dot(vec3(_683, _684, _685), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3824 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1136 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3835 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3846 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1138 + 1.0))) + _1143) * _1106;
        float _1153 = _1074 * 0.5;
        float _1154 = _1084 * 0.5;
        float _1155 = _1094 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_683, _684, _685), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3879 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1180 + 1.0))) + _1185) * _1107;
        float _1195 = _1075 * 0.5;
        float _1196 = _1085 * 0.5;
        float _1197 = _1095 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_683, _684, _685), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3912 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1222 + 1.0))) + _1227) * _1108;
        _1244 = _1075;
        _1246 = _1074;
        _1247 = _1073;
        _1248 = _1085;
        _1249 = _1084;
        _1250 = _1083;
        _1251 = _1095;
        _1252 = _1094;
        _1253 = _1093;
        _1254 = _1108;
        _1255 = _1107;
        _1256 = _1106;
        _1257 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
        _1258 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
        _1259 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
    }
    else
    {
        _1244 = _1245;
        _1246 = _1245;
        _1247 = _1245;
        _1248 = _1245;
        _1249 = _1245;
        _1250 = _1245;
        _1251 = _1245;
        _1252 = _1245;
        _1253 = _1245;
        _1254 = _1245;
        _1255 = _1245;
        _1256 = _1245;
        _1257 = 0.0;
        _1258 = 0.0;
        _1259 = 0.0;
    }
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1288 = fma(_914, cbModelParam._m0[30u].z, fma(_910, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _906));
        float _1292 = fma(_914, cbModelParam._m0[31u].z, fma(_910, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _906));
        float _1296 = fma(_914, cbModelParam._m0[32u].z, fma(_910, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _906));
        float _1319 = _906 + _683;
        float _1320 = _910 + _684;
        float _1321 = _914 + _685;
        float _1331 = fma(_1321, cbModelParam._m0[30u].z, fma(_1320, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1319)) - _1288;
        float _1332 = fma(_1321, cbModelParam._m0[31u].z, fma(_1320, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1319)) - _1292;
        float _1333 = fma(_1321, cbModelParam._m0[32u].z, fma(_1320, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1319)) - _1296;
        float _1337 = inversesqrt(dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333)));
        float _1350 = ((_1337 * _1331) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1288 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1351 = ((_1337 * _1332) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1292 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1352 = ((_1337 * _1333) / cbModelParam._m0[35u].z) + ((((((_1296 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        float _1387 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1354.x + (-0.5));
        float _1389 = _1387 * (_1354.y + (-0.5));
        float _1390 = _1387 * (_1354.z + (-0.5));
        float _1397 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1361.x + (-0.5));
        float _1399 = _1397 * (_1361.y + (-0.5));
        float _1400 = _1397 * (_1361.z + (-0.5));
        float _1407 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1368.x + (-0.5));
        float _1409 = _1407 * (_1368.y + (-0.5));
        float _1410 = _1407 * (_1368.z + (-0.5));
        float _1417 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1375.x + (-0.5));
        float _1419 = _1417 * (_1375.y + (-0.5));
        float _1420 = _1417 * (_1375.z + (-0.5));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = _1388 * 0.5;
        float _1425 = _1398 * 0.5;
        float _1426 = _1408 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_683, _684, _685), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _3975 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1451 + 1.0))) + _1456) * _1421;
        float _1466 = _1389 * 0.5;
        float _1467 = _1399 * 0.5;
        float _1468 = _1409 * 0.5;
        float _1469 = dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468));
        float _1474 = (_1469 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1469);
        float _1482 = (dot(vec3(_683, _684, _685), vec3(_1474 * _1466, _1474 * _1467, _1474 * _1468)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1491 = sqrt(((_1467 * _1467) + (_1466 * _1466)) + (_1468 * _1468)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1493 = _1492 * 2.0;
        float _1497 = (1.0 - _1492) / (_1492 + 1.0);
        float _4008 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1507 = ((((1.0 - _1498) * (_1493 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1493 + 1.0))) + _1498) * _1422;
        float _1508 = _1390 * 0.5;
        float _1509 = _1400 * 0.5;
        float _1510 = _1410 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1524 = (dot(vec3(_683, _684, _685), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1533 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _4041 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1535 + 1.0))) + _1540) * _1423;
        _1557 = _1390;
        _1558 = _1389;
        _1559 = _1388;
        _1560 = _1400;
        _1561 = _1399;
        _1562 = _1398;
        _1563 = _1410;
        _1564 = _1409;
        _1565 = _1408;
        _1566 = _1423;
        _1567 = _1422;
        _1568 = _1421;
        _1569 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
        _1570 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)));
        _1571 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
    }
    else
    {
        _1557 = _1245;
        _1558 = _1245;
        _1559 = _1245;
        _1560 = _1245;
        _1561 = _1245;
        _1562 = _1245;
        _1563 = _1245;
        _1564 = _1245;
        _1565 = _1245;
        _1566 = _1245;
        _1567 = _1245;
        _1568 = _1245;
        _1569 = 0.0;
        _1570 = 0.0;
        _1571 = 0.0;
    }
    float _1581 = (cbModelParam._m0[1u].x * (_1569 - _1257)) + _1257;
    float _1582 = (cbModelParam._m0[1u].x * (_1570 - _1258)) + _1258;
    float _1583 = (cbModelParam._m0[1u].x * (_1571 - _1259)) + _1259;
    float _1604 = fma(_1583, cbSceneParam._m0[89u].z, fma(_1582, cbSceneParam._m0[89u].y, _1581 * cbSceneParam._m0[89u].x));
    float _1607 = fma(_1583, cbSceneParam._m0[90u].z, fma(_1582, cbSceneParam._m0[90u].y, _1581 * cbSceneParam._m0[90u].x));
    float _1610 = fma(_1583, cbSceneParam._m0[91u].z, fma(_1582, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1581));
    float _1625 = _853 * 0.5;
    float _1626 = _854 * 0.5;
    float _1627 = _855 * 0.5;
    float _1628 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1559, _1562, _1565, _1568));
    float _1631 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1558, _1561, _1564, _1567));
    float _1634 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1557, _1560, _1563, _1566));
    float _1668;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1641 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1244, _1248, _1251, _1254));
        float _1645 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1246, _1249, _1252, _1255));
        float _1649 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1247, _1250, _1253, _1256));
        float _1656 = dot(vec4(cbModelParam._m0[39u]), vec4(_1625, _1626, _1627, 1.0));
        _1668 = dot(vec3(isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1656) ? 0.0 : (isnan(0.0) ? _1656 : max(0.0, _1656))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1668 = 1.0;
    }
    float _1679;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1670 = dot(vec4(cbModelParam._m0[40u]), vec4(_1625, _1626, _1627, 1.0));
        _1679 = dot(vec3(isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1670) ? 0.0 : (isnan(0.0) ? _1670 : max(0.0, _1670))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1679 = 1.0;
    }
    float _1683 = (_1679 * cbModelParam._m0[1u].x) + (_1668 * (1.0 - cbModelParam._m0[1u].x));
    float _1693 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _686);
    float _1694 = isnan(_1693) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1693 : min(cbModelParam._m0[25u].z, _1693));
    float _1774;
    float _1776;
    float _1778;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1741 = fma(_914, cbModelParam._m0[13u].z, fma(_910, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _906)) + cbModelParam._m0[13u].w;
        float _1745 = fma(_914, cbModelParam._m0[14u].z, fma(_910, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _906)) + cbModelParam._m0[14u].w;
        float _1749 = fma(_914, cbModelParam._m0[15u].z, fma(_910, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _906)) + cbModelParam._m0[15u].w;
        float _1752 = fma(_855, cbModelParam._m0[13u].z, fma(_854, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _853));
        float _1755 = fma(_855, cbModelParam._m0[14u].z, fma(_854, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _853));
        float _1758 = fma(_855, cbModelParam._m0[15u].z, fma(_854, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _853));
        float _1786;
        if (_1752 > 0.0)
        {
            _1786 = abs((1.0 - _1741) / _1752);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1741 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1786 = frontier_phi_17_15_ladder;
        }
        float _2010;
        if (_1755 > 0.0)
        {
            _2010 = abs((1.0 - _1745) / _1755);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1745 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2010 = frontier_phi_26_22_ladder;
        }
        float _2256;
        if (_1758 > 0.0)
        {
            _2256 = abs((1.0 - _1749) / _1758);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1749 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2256 = frontier_phi_38_33_ladder;
        }
        float _2258 = isnan(_2010) ? _1786 : (isnan(_1786) ? _2010 : min(_1786, _2010));
        float _2259 = isnan(_2256) ? _2258 : (isnan(_2258) ? _2256 : min(_2258, _2256));
        float _2263 = (_2259 * _1752) + _1741;
        float _2264 = (_2259 * _1755) + _1745;
        float _2265 = (_2259 * _1758) + _1749;
        float _2266 = _2259 * 9.9999997473787516355514526367188e-05;
        float _2268 = (-1.0) - _2266;
        float _2270 = _2266 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2265 > _2270) || ((_2265 < _2268) || ((_2264 > _2270) || ((_2264 < _2268) || ((_2263 < _2268) || (_2263 > _2270))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2389 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2265, cbModelParam._m0[9u].z, fma(_2264, cbModelParam._m0[9u].y, _2263 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2265, cbModelParam._m0[10u].z, fma(_2264, cbModelParam._m0[10u].y, _2263 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2265, cbModelParam._m0[11u].z, fma(_2264, cbModelParam._m0[11u].y, _2263 * cbModelParam._m0[11u].x))), _1694);
            frontier_phi_16_38_ladder = _2389.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2389.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2389.x * cbModelParam._m0[1u].y;
        }
        _1774 = frontier_phi_16_38_ladder_2;
        _1776 = frontier_phi_16_38_ladder_1;
        _1778 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1762 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_853, _854, _855), _1694);
        _1774 = _1762.x * cbModelParam._m0[1u].y;
        _1776 = _1762.y * cbModelParam._m0[1u].y;
        _1778 = _1762.z * cbModelParam._m0[1u].y;
    }
    float _1782 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _686);
    float _1783 = isnan(_1782) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1782 : min(cbModelParam._m0[25u].w, _1782));
    float _1874;
    float _1876;
    float _1878;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1838 = fma(_914, cbModelParam._m0[21u].z, fma(_910, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _906)) + cbModelParam._m0[21u].w;
        float _1842 = fma(_914, cbModelParam._m0[22u].z, fma(_910, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _906)) + cbModelParam._m0[22u].w;
        float _1846 = fma(_914, cbModelParam._m0[23u].z, fma(_910, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _906)) + cbModelParam._m0[23u].w;
        float _1849 = fma(_855, cbModelParam._m0[21u].z, fma(_854, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _853));
        float _1852 = fma(_855, cbModelParam._m0[22u].z, fma(_854, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _853));
        float _1855 = fma(_855, cbModelParam._m0[23u].z, fma(_854, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _853));
        float _2015;
        if (_1849 > 0.0)
        {
            _2015 = abs((1.0 - _1838) / _1849);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1838 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2015 = frontier_phi_28_24_ladder;
        }
        float _2283;
        if (_1852 > 0.0)
        {
            _2283 = abs((1.0 - _1842) / _1852);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1842 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2283 = frontier_phi_40_35_ladder;
        }
        float _2488;
        if (_1855 > 0.0)
        {
            _2488 = abs((1.0 - _1846) / _1855);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1846 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2488 = frontier_phi_49_46_ladder;
        }
        float _2490 = isnan(_2283) ? _2015 : (isnan(_2015) ? _2283 : min(_2015, _2283));
        float _2491 = isnan(_2488) ? _2490 : (isnan(_2490) ? _2488 : min(_2490, _2488));
        float _2495 = (_2491 * _1849) + _1838;
        float _2496 = (_2491 * _1852) + _1842;
        float _2497 = (_2491 * _1855) + _1846;
        float _2498 = _2491 * 9.9999997473787516355514526367188e-05;
        float _2499 = (-1.0) - _2498;
        float _2501 = _2498 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2497 > _2501) || ((_2497 < _2499) || ((_2496 > _2501) || ((_2496 < _2499) || ((_2495 < _2499) || (_2495 > _2501))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2696 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2497, cbModelParam._m0[17u].z, fma(_2496, cbModelParam._m0[17u].y, _2495 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2497, cbModelParam._m0[18u].z, fma(_2496, cbModelParam._m0[18u].y, _2495 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2497, cbModelParam._m0[19u].z, fma(_2496, cbModelParam._m0[19u].y, _2495 * cbModelParam._m0[19u].x))), _1783);
            frontier_phi_25_49_ladder = _2696.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2696.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2696.x * cbModelParam._m0[1u].z;
        }
        _1874 = frontier_phi_25_49_ladder_2;
        _1876 = frontier_phi_25_49_ladder_1;
        _1878 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1858 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_853, _854, _855), _1783);
        _1874 = _1858.x * cbModelParam._m0[1u].z;
        _1876 = _1858.y * cbModelParam._m0[1u].z;
        _1878 = _1858.z * cbModelParam._m0[1u].z;
    }
    float _1890 = ((((1.0 - _874) * ((_861 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_874 * _861)) * _845;
    float _1891 = _1890 * ((cbModelParam._m0[1u].w * (_1874 - _1774)) + _1774);
    float _1892 = _1890 * ((cbModelParam._m0[1u].w * (_1876 - _1776)) + _1776);
    float _1893 = _1890 * ((cbModelParam._m0[1u].w * (_1878 - _1778)) + _1778);
    float _1896 = fma(_1893, cbSceneParam._m0[89u].z, fma(_1892, cbSceneParam._m0[89u].y, _1891 * cbSceneParam._m0[89u].x));
    float _1899 = fma(_1893, cbSceneParam._m0[90u].z, fma(_1892, cbSceneParam._m0[90u].y, _1891 * cbSceneParam._m0[90u].x));
    float _1902 = fma(_1893, cbSceneParam._m0[91u].z, fma(_1892, cbSceneParam._m0[91u].y, _1891 * cbSceneParam._m0[91u].x));
    vec4 _1910 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_782, _783));
    float _1912 = _1910.w;
    float _1924 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1912);
    float _1925 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1912);
    float _1926 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1912);
    uvec4 _1930 = floatBitsToUint(cbInstanceData._m0[_820 + 5u]);
    uint _1932 = _1930.x * 14u;
    uint _1933 = _1932 + 13u;
    float _1940 = _845 + (-1.0);
    float _1945 = (cbLight._m0[_1933].x * _1940) + 1.0;
    float _1946 = (cbLight._m0[_1933].y * _1940) + 1.0;
    float _1947 = (cbLight._m0[_1933].z * _1940) + 1.0;
    float _1948 = (cbLight._m0[_1933].w * _1940) + 1.0;
    uint _1949 = _1932 + 5u;
    float _1955 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
    uint _1959 = _1932 + 4u;
    float _1969 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
    uint _1973 = _1932 | 1u;
    float _1984 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_683, _684, _685));
    float _1987 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_683, _684, _685));
    float _4177 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _4188 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1992 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * 0.3183098733425140380859375;
    float _1994 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * 0.3183098733425140380859375;
    float _2001 = ((cbLight._m0[_1949].x * _1955) * _1994) + (((cbLight._m0[_1959].x * _1924) * _1969) * _1992);
    float _2002 = ((_1955 * cbLight._m0[_1949].y) * _1994) + (((cbLight._m0[_1959].y * _1925) * _1969) * _1992);
    float _2003 = ((_1955 * cbLight._m0[_1949].z) * _1994) + (((cbLight._m0[_1959].z * _1926) * _1969) * _1992);
    uvec4 _2007 = floatBitsToUint(cbLight._m0[_1932 + 12u]);
    bool _2009 = _2007.x == 0u;
    float _2020;
    float _2022;
    float _2024;
    if (_2009)
    {
        _2020 = _2001;
        _2022 = _2002;
        _2024 = _2003;
    }
    else
    {
        uint _2028 = _1932 + 6u;
        float _2044 = (dot(vec3(cbLight._m0[_1932 + 2u].xyz), vec3(_683, _684, _685)) * 0.5) + 0.5;
        float _2045 = _2044 * _2044;
        float _4199 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2046 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2047 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
        _2020 = (((cbLight._m0[_2028].x * 0.3183098733425140380859375) * _2046) * _2047) + _2001;
        _2022 = (((cbLight._m0[_2028].y * 0.3183098733425140380859375) * _2046) * _2047) + _2002;
        _2024 = (((cbLight._m0[_2028].z * 0.3183098733425140380859375) * _2046) * _2047) + _2003;
    }
    bool _2027 = _2007.y == 0u;
    float _2065;
    float _2067;
    float _2069;
    if (_2027)
    {
        _2065 = _2020;
        _2067 = _2022;
        _2069 = _2024;
    }
    else
    {
        uint _2227 = _1932 + 7u;
        float _2243 = (dot(vec3(cbLight._m0[_1932 + 3u].xyz), vec3(_683, _684, _685)) * 0.5) + 0.5;
        float _2244 = _2243 * _2243;
        float _4215 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2245 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _2246 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
        _2065 = (((cbLight._m0[_2227].x * 0.3183098733425140380859375) * _2245) * _2246) + _2020;
        _2067 = (((cbLight._m0[_2227].y * 0.3183098733425140380859375) * _2245) * _2246) + _2022;
        _2069 = (((cbLight._m0[_2227].z * 0.3183098733425140380859375) * _2245) * _2246) + _2024;
    }
    uint _2072 = _1932 + 8u;
    float _2085 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1932].w)) * _686) * 0.949999988079071044921875);
    float _2086 = _2085 * _2085;
    float _2087 = cbLight._m0[_1932].x + _762;
    float _2088 = cbLight._m0[_1932].y + _763;
    float _2089 = cbLight._m0[_1932].z + _764;
    float _2093 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
    float _2094 = _2093 * _2087;
    float _2095 = _2093 * _2088;
    float _2096 = _2093 * _2089;
    float _2097 = dot(vec3(_683, _684, _685), vec3(cbLight._m0[_1932].xyz));
    float _4231 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _4242 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _2101 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _2102 = dot(vec3(_683, _684, _685), vec3(_2094, _2095, _2096));
    float _4253 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _2106 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_2094, _2095, _2096));
    float _4264 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2110 = _2086 * _2086;
    float _2114 = ((_2105 * _2105) * (_2110 + (-1.0))) + 1.0;
    float _2125 = (exp2(log2(1.0 - (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2126 = 1.0 - _2086;
    float _2137 = (0.5 / (((_2101 * ((_2100 * _2126) + _2086)) + 9.9999999392252902907785028219223e-09) + (((_2101 * _2126) + _2086) * _2100))) * _2100;
    float _4275 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2139 = (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2110 / ((_2114 * _2114) * 3.141590118408203125));
    uint _2153 = _1932 + 9u;
    float _2164 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1973].w)) * _686) * 0.949999988079071044921875);
    float _2165 = _2164 * _2164;
    float _2166 = cbLight._m0[_1973].x + _762;
    float _2167 = cbLight._m0[_1973].y + _763;
    float _2168 = cbLight._m0[_1973].z + _764;
    float _2172 = inversesqrt(dot(vec3(_2166, _2167, _2168), vec3(_2166, _2167, _2168)));
    float _2173 = _2172 * _2166;
    float _2174 = _2172 * _2167;
    float _2175 = _2172 * _2168;
    float _2176 = dot(vec3(_683, _684, _685), vec3(cbLight._m0[_1973].xyz));
    float _4286 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2179 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _2180 = dot(vec3(_683, _684, _685), vec3(_2173, _2174, _2175));
    float _4297 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2183 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _2184 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_2173, _2174, _2175));
    float _4308 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2188 = _2165 * _2165;
    float _2192 = ((_2183 * _2183) * (_2188 + (-1.0))) + 1.0;
    float _2201 = (exp2(log2(1.0 - (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2202 = 1.0 - _2165;
    float _2212 = (0.5 / (((_2101 * ((_2179 * _2202) + _2165)) + 9.9999999392252902907785028219223e-09) + (((_2101 * _2202) + _2165) * _2179))) * _2179;
    float _4319 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2214 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2188 / ((_2192 * _2192) * 3.141590118408203125));
    float _2224 = (((_2201 * cbLight._m0[_2153].x) * _2214) * _1955) + ((((cbLight._m0[_2072].x * _1924) * _2125) * _2139) * _1969);
    float _2225 = (((_2201 * cbLight._m0[_2153].y) * _2214) * _1955) + ((((cbLight._m0[_2072].y * _1925) * _2125) * _2139) * _1969);
    float _2226 = (((_2201 * cbLight._m0[_2153].z) * _2214) * _1955) + ((((cbLight._m0[_2072].z * _1926) * _2125) * _2139) * _1969);
    float _2288;
    float _2290;
    float _2292;
    if (_2009)
    {
        _2288 = _2224;
        _2290 = _2225;
        _2292 = _2226;
    }
    else
    {
        uint _2294 = _1932 + 2u;
        uint _2298 = _1932 + 10u;
        float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2294].w)) * _686) * 0.949999988079071044921875);
        float _2313 = _2312 * _2312;
        float _2314 = cbLight._m0[_2294].x + _762;
        float _2315 = cbLight._m0[_2294].y + _763;
        float _2316 = cbLight._m0[_2294].z + _764;
        float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
        float _2321 = _2320 * _2314;
        float _2322 = _2320 * _2315;
        float _2323 = _2320 * _2316;
        float _2324 = dot(vec3(_683, _684, _685), vec3(cbLight._m0[_2294].xyz));
        float _4330 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2327 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _2328 = dot(vec3(_683, _684, _685), vec3(_2321, _2322, _2323));
        float _4341 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2331 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2332 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_2321, _2322, _2323));
        float _4352 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2336 = _2313 * _2313;
        float _2340 = ((_2331 * _2331) * (_2336 + (-1.0))) + 1.0;
        float _2349 = (exp2(log2(1.0 - (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2350 = 1.0 - _2313;
        float _2360 = (0.5 / (((_2101 * ((_2327 * _2350) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_2101 * _2350) + _2313) * _2327))) * _2327;
        float _4363 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2362 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2336 / ((_2340 * _2340) * 3.141590118408203125));
        float _2363 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
        _2288 = (((_2349 * cbLight._m0[_2298].x) * _2362) * _2363) + _2224;
        _2290 = (((_2349 * cbLight._m0[_2298].y) * _2362) * _2363) + _2225;
        _2292 = (((_2349 * cbLight._m0[_2298].z) * _2362) * _2363) + _2226;
    }
    float _2398;
    float _2400;
    float _2402;
    if (_2027)
    {
        _2398 = _2288;
        _2400 = _2290;
        _2402 = _2292;
    }
    else
    {
        uint _2409 = _1932 + 3u;
        uint _2413 = _1932 + 11u;
        float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2409].w)) * _686) * 0.949999988079071044921875);
        float _2428 = _2427 * _2427;
        float _2429 = cbLight._m0[_2409].x + _762;
        float _2430 = cbLight._m0[_2409].y + _763;
        float _2431 = cbLight._m0[_2409].z + _764;
        float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
        float _2436 = _2435 * _2429;
        float _2437 = _2435 * _2430;
        float _2438 = _2435 * _2431;
        float _2439 = dot(vec3(_683, _684, _685), vec3(cbLight._m0[_2409].xyz));
        float _4379 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2443 = dot(vec3(_683, _684, _685), vec3(_2436, _2437, _2438));
        float _4390 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2447 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_2436, _2437, _2438));
        float _4401 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2451 = _2428 * _2428;
        float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
        float _2464 = (exp2(log2(1.0 - (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2465 = 1.0 - _2428;
        float _2475 = (0.5 / (((_2101 * ((_2442 * _2465) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2101 * _2465) + _2428) * _2442))) * _2442;
        float _4412 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2477 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
        float _2478 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
        _2398 = (((_2464 * cbLight._m0[_2413].x) * _2477) * _2478) + _2288;
        _2400 = (((_2464 * cbLight._m0[_2413].y) * _2477) * _2478) + _2290;
        _2402 = (((_2464 * cbLight._m0[_2413].z) * _2477) * _2478) + _2292;
    }
    float _2613;
    float _2615;
    float _2617;
    float _2619;
    float _2621;
    float _2623;
    if (_1930.y == 0u)
    {
        float _2553 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2554 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2553;
        float _2555 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2553;
        float _2556 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2553;
        uvec4 _2568 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2569 = _2568.x;
        uint _2580 = uint((float(_2568.y) * floor(float(uint(cbSceneParam._m0[85u].y * _783) / _2569))) + floor(float(uint(cbSceneParam._m0[85u].x * _782) / _2569)));
        float _2590 = (log2(_2556 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2591 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        uint _2594 = uint(isnan(14.0) ? _2591 : (isnan(_2591) ? 14.0 : min(_2591, 14.0)));
        uvec4 _2599 = texelFetch(g_lightClusterGridBuffer, int(((_2594 << 2u) + (_2580 << 6u)) >> 2u));
        uint _2600 = _2599.x;
        uint _2601 = _2568.z;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        if (((((1u << ((_2601 >> 4u) & 15u)) + 4294967295u) & _2600) == 0u) || ((_2601 & 240u) == 0u))
        {
            _2701 = 0.0;
            _2703 = 0.0;
            _2705 = 0.0;
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
        }
        else
        {
            float _2702;
            float _2704;
            float _2706;
            float _2708;
            float _2710;
            float _2712;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            uint _2860 = 0u;
            uint _2869;
            bool _2870;
            for (;;)
            {
                _2869 = texelFetch(g_lightClassification, int((((_2594 << 5u) + (_2580 << 9u)) + (_2860 << 2u)) >> 2u)).x;
                _2870 = _2869 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2870)
                {
                    frontier_phi_66_pred = _2854;
                    frontier_phi_66_pred_1 = _2859;
                    frontier_phi_66_pred_2 = _2858;
                    frontier_phi_66_pred_3 = _2857;
                    frontier_phi_66_pred_4 = _2856;
                    frontier_phi_66_pred_5 = _2855;
                }
                else
                {
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    uint _3005;
                    _2999 = _2854;
                    _3000 = _2855;
                    _3001 = _2856;
                    _3002 = _2857;
                    _3003 = _2858;
                    _3004 = _2859;
                    _3005 = _2869;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    for (;;)
                    {
                        uint _3009 = uint(findLSB(_3005)) + (_2860 << 5u);
                        uint _3006 = (_3005 + 4294967295u) & _3005;
                        uint _3011 = _3009 * 48u;
                        vec4 _3025 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3011)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 3u)).x));
                        uint _3031 = (_3009 * 48u) + 4u;
                        vec4 _3044 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3031)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 3u)).x));
                        uint _3050 = (_3009 * 48u) + 8u;
                        vec3 _3061 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3050)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 2u)).x));
                        float _3065 = _3025.x - _2554;
                        float _3066 = _3025.y - _2555;
                        float _3067 = _3025.z - _2556;
                        float _3068 = dot(vec3(_3065, _3066, _3067), vec3(_3065, _3066, _3067));
                        float _3071 = inversesqrt(_3068);
                        float _3072 = _3071 * _3065;
                        float _3073 = _3071 * _3066;
                        float _3074 = _3071 * _3067;
                        float _3075 = dot(vec3(_801, _804, _807), vec3(_3072, _3073, _3074));
                        float _3080 = 1.0 - (_3068 * _3025.w);
                        float _4438 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3081 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                        float _3082 = sqrt(_3068) * _3044.w;
                        float _3085 = 1.39999997615814208984375 / (_3082 + 1.39999997615814208984375);
                        float _3086 = _3085 * _3085;
                        float _3089 = ((1.0 - _3086) * _3075) + _3086;
                        float _3092 = _3082 * _3082;
                        float _3096 = ((isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0))) * _3081) / ((_3092 * 0.699999988079071044921875) + 1.0);
                        float _3100 = (-0.0) - _2554;
                        float _3101 = (-0.0) - _2555;
                        float _3102 = (-0.0) - _2556;
                        float _3106 = inversesqrt(dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102)));
                        float _3107 = _3106 * _3100;
                        float _3108 = _3106 * _3101;
                        float _3109 = _3106 * _3102;
                        float _3117 = exp2(log2(1.0 / ((_3092 * 3.5) + 5.0)) * 0.25);
                        float _3118 = 1.0 - _861;
                        float _3125 = sqrt(1.0 - ((1.0 - (_3118 * _3118)) * (1.0 - (_3117 * _3117))));
                        float _3126 = _3125 * _3125;
                        float _3127 = _3126 * _3126;
                        float _3128 = _3107 + _3072;
                        float _3129 = _3108 + _3073;
                        float _3130 = _3109 + _3074;
                        float _3134 = inversesqrt(dot(vec3(_3128, _3129, _3130), vec3(_3128, _3129, _3130)));
                        float _3138 = dot(vec3(_801, _804, _807), vec3(_3107, _3108, _3109));
                        float _4454 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3141 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                        float _3142 = dot(vec3(_801, _804, _807), vec3(_3134 * _3128, _3134 * _3129, _3134 * _3130));
                        float _4465 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3145 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                        float _3149 = ((_3145 * _3145) * (_3127 + (-1.0))) + 1.0;
                        float _3150 = _3085 * _3126;
                        float _3151 = _3150 * _3150;
                        float _3154 = ((1.0 - _3151) * _3075) + _3151;
                        float _4476 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3155 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                        float _3156 = 1.0 - _3126;
                        float _3166 = (0.5 / (((_3155 * ((_3141 * _3156) + _3126)) + 9.9999999392252902907785028219223e-09) + (((_3155 * _3156) + _3126) * _3141))) * _3155;
                        float _4487 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3177 = (((_3127 * 3.1415927410125732421875) * (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0)))) / ((_3149 * _3149) * ((_3092 * 2.1991131305694580078125) + 3.141590118408203125))) * _3081;
                        _2929 = (_3096 * _3044.x) + _3002;
                        _2930 = (_3096 * _3044.y) + _3003;
                        _2931 = (_3096 * _3044.z) + _3004;
                        _2926 = (_3177 * _3061.x) + _2999;
                        _2927 = (_3177 * _3061.y) + _3000;
                        _2928 = (_3177 * _3061.z) + _3001;
                        if (_3006 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2999 = _2926;
                            _3000 = _2927;
                            _3001 = _2928;
                            _3002 = _2929;
                            _3003 = _2930;
                            _3004 = _2931;
                            _3005 = _3006;
                        }
                    }
                    frontier_phi_66_pred = _2926;
                    frontier_phi_66_pred_1 = _2931;
                    frontier_phi_66_pred_2 = _2930;
                    frontier_phi_66_pred_3 = _2929;
                    frontier_phi_66_pred_4 = _2928;
                    frontier_phi_66_pred_5 = _2927;
                }
                _2702 = frontier_phi_66_pred;
                _2712 = frontier_phi_66_pred_1;
                _2710 = frontier_phi_66_pred_2;
                _2708 = frontier_phi_66_pred_3;
                _2706 = frontier_phi_66_pred_4;
                _2704 = frontier_phi_66_pred_5;
                uint _2861 = _2860 + 1u;
                if (_2861 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2854 = _2702;
                    _2855 = _2704;
                    _2856 = _2706;
                    _2857 = _2708;
                    _2858 = _2710;
                    _2859 = _2712;
                    _2860 = _2861;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2701 = _2702;
            _2703 = _2704;
            _2705 = _2706;
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
        }
        uvec4 _2715 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2716 = _2715.z;
        uint _2718 = (_2716 >> 8u) & 15u;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        if (((4294967295u << _2718) & _2600) == 0u)
        {
            _2822 = _2701;
            _2824 = _2703;
            _2826 = _2705;
            _2828 = _2707;
            _2830 = _2709;
            _2832 = _2711;
        }
        else
        {
            float _2847 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
            float _2848 = _2847 * _2554;
            float _2849 = _2847 * _2555;
            float _2850 = _2847 * _2556;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2718 < ((_2716 >> 12u) & 15u))
            {
                float _2823;
                float _2825;
                float _2827;
                float _2829;
                float _2831;
                float _2833;
                float _2982 = _2701;
                float _2983 = _2703;
                float _2984 = _2705;
                float _2985 = _2707;
                float _2986 = _2709;
                float _2987 = _2711;
                uint _2988 = _2718;
                uint _2997;
                bool _2998;
                for (;;)
                {
                    _2997 = texelFetch(g_lightClassification, int((((_2594 << 5u) + (_2580 << 9u)) + (_2988 << 2u)) >> 2u)).x;
                    _2998 = _2997 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2998)
                    {
                        frontier_phi_77_pred = _2987;
                        frontier_phi_77_pred_1 = _2986;
                        frontier_phi_77_pred_2 = _2985;
                        frontier_phi_77_pred_3 = _2984;
                        frontier_phi_77_pred_4 = _2983;
                        frontier_phi_77_pred_5 = _2982;
                    }
                    else
                    {
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3204 = _2982;
                        float _3205 = _2983;
                        float _3206 = _2984;
                        float _3207 = _2985;
                        float _3208 = _2986;
                        float _3209 = _2987;
                        uint _3210 = _2997;
                        uint _3211;
                        vec4 _3236;
                        float _3237;
                        vec4 _3252;
                        vec3 _3264;
                        vec4 _3279;
                        vec4 _3294;
                        float _3341;
                        bool _3342;
                        for (;;)
                        {
                            uint _3221 = ((_2988 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3210));
                            _3211 = (_3210 + 4294967295u) & _3210;
                            uint _3223 = _3221 * 40u;
                            _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            _3237 = _3236.w;
                            uint _3239 = (_3221 * 40u) + 4u;
                            _3252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 3u)).x));
                            uint _3254 = (_3221 * 40u) + 8u;
                            _3264 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x));
                            uint _3266 = (_3221 * 40u) + 16u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            uint _3281 = (_3221 * 40u) + 20u;
                            _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3297 = (_3221 * 40u) + 24u;
                            vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3316 = (_3221 * 40u) + 28u;
                            vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            _3341 = fma(_2556, _3329.z, fma(_2555, _3329.y, _3329.x * _2554)) + _3329.w;
                            _3342 = !((fma(_2556, _3310.z, fma(_2555, _3310.y, _3310.x * _2554)) + _3310.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3342)
                            {
                                float _3369 = _3236.x - _2554;
                                float _3370 = _3236.y - _2555;
                                float _3371 = _3236.z - _2556;
                                float _3372 = dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371));
                                float _3375 = inversesqrt(_3372);
                                float _3376 = _3375 * _3369;
                                float _3377 = _3375 * _3370;
                                float _3378 = _3375 * _3371;
                                float _3382 = 1.0 - (_3372 / (_3237 * _3237));
                                float _4498 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3383 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                                float _3387 = sqrt(_3372) * _3252.w;
                                float _3389 = 1.39999997615814208984375 / (_3387 + 1.39999997615814208984375);
                                float _3390 = _3389 * _3389;
                                float _3393 = ((1.0 - _3390) * dot(vec3(_3376, _3377, _3378), vec3(_801, _804, _807))) + _3390;
                                float _3396 = _3387 * _3387;
                                float _3400 = (fma(_2556, _3279.z, fma(_2555, _3279.y, _3279.x * _2554)) + _3279.w) / _3341;
                                float _3401 = (fma(_2556, _3294.z, fma(_2555, _3294.y, _3294.x * _2554)) + _3294.w) / _3341;
                                float _3405 = 1.0 - dot(vec2(_3400, _3401), vec2(_3400, _3401));
                                float _4514 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3406 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                                float _3407 = _3406 * (((isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0))) * _3383) / ((_3396 * 0.699999988079071044921875) + 1.0));
                                float _3419 = exp2(log2(1.0 / ((_3396 * 3.5) + 5.0)) * 0.25);
                                float _3420 = 1.0 - _861;
                                float _3427 = sqrt(1.0 - ((1.0 - (_3420 * _3420)) * (1.0 - (_3419 * _3419))));
                                float _3428 = _3427 * _3427;
                                float _3429 = _3428 * _3428;
                                float _3430 = _3376 - _2848;
                                float _3431 = _3377 - _2849;
                                float _3432 = _3378 - _2850;
                                float _3436 = inversesqrt(dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432)));
                                float _3440 = dot(vec3(_801, _804, _807), vec3((-0.0) - _2848, (-0.0) - _2849, (-0.0) - _2850));
                                float _4525 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3443 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                                float _3444 = dot(vec3(_801, _804, _807), vec3(_3436 * _3430, _3436 * _3431, _3436 * _3432));
                                float _4536 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3447 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                                float _3451 = ((_3447 * _3447) * (_3429 + (-1.0))) + 1.0;
                                float _3452 = _3389 * _3428;
                                float _3453 = _3452 * _3452;
                                float _3459 = ((1.0 - _3453) * dot(vec3(_801, _804, _807), vec3(_3376, _3377, _3378))) + _3453;
                                float _4547 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3461 = 1.0 - _3428;
                                float _3471 = (0.5 / (((_3460 * ((_3443 * _3461) + _3428)) + 9.9999999392252902907785028219223e-09) + (((_3460 * _3461) + _3428) * _3443))) * _3460;
                                float _4558 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3481 = (_3406 * _3383) * (((_3429 * 3.1415927410125732421875) * (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) / ((_3451 * _3451) * ((_3396 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3407 * _3252.y;
                                frontier_phi_83_pred_1 = _3407 * _3252.x;
                                frontier_phi_83_pred_2 = _3481 * _3264.z;
                                frontier_phi_83_pred_3 = _3481 * _3264.y;
                                frontier_phi_83_pred_4 = _3481 * _3264.x;
                                frontier_phi_83_pred_5 = _3407 * _3252.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3489 = frontier_phi_83_pred;
                            _3488 = frontier_phi_83_pred_1;
                            _3487 = frontier_phi_83_pred_2;
                            _3486 = frontier_phi_83_pred_3;
                            _3485 = frontier_phi_83_pred_4;
                            _3490 = frontier_phi_83_pred_5;
                            _3194 = _3488 + _3207;
                            _3195 = _3489 + _3208;
                            _3196 = _3490 + _3209;
                            _3191 = _3485 + _3204;
                            _3192 = _3486 + _3205;
                            _3193 = _3487 + _3206;
                            if (_3211 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3204 = _3191;
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3211;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3196;
                        frontier_phi_77_pred_1 = _3195;
                        frontier_phi_77_pred_2 = _3194;
                        frontier_phi_77_pred_3 = _3193;
                        frontier_phi_77_pred_4 = _3192;
                        frontier_phi_77_pred_5 = _3191;
                    }
                    _2833 = frontier_phi_77_pred;
                    _2831 = frontier_phi_77_pred_1;
                    _2829 = frontier_phi_77_pred_2;
                    _2827 = frontier_phi_77_pred_3;
                    _2825 = frontier_phi_77_pred_4;
                    _2823 = frontier_phi_77_pred_5;
                    uint _2989 = _2988 + 1u;
                    if (_2989 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2982 = _2823;
                        _2983 = _2825;
                        _2984 = _2827;
                        _2985 = _2829;
                        _2986 = _2831;
                        _2987 = _2833;
                        _2988 = _2989;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2827;
                frontier_phi_58_59_ladder_1 = _2833;
                frontier_phi_58_59_ladder_2 = _2831;
                frontier_phi_58_59_ladder_3 = _2829;
                frontier_phi_58_59_ladder_4 = _2825;
                frontier_phi_58_59_ladder_5 = _2823;
            }
            else
            {
                frontier_phi_58_59_ladder = _2705;
                frontier_phi_58_59_ladder_1 = _2711;
                frontier_phi_58_59_ladder_2 = _2709;
                frontier_phi_58_59_ladder_3 = _2707;
                frontier_phi_58_59_ladder_4 = _2703;
                frontier_phi_58_59_ladder_5 = _2701;
            }
            _2822 = frontier_phi_58_59_ladder_5;
            _2824 = frontier_phi_58_59_ladder_4;
            _2826 = frontier_phi_58_59_ladder;
            _2828 = frontier_phi_58_59_ladder_3;
            _2830 = frontier_phi_58_59_ladder_2;
            _2832 = frontier_phi_58_59_ladder_1;
        }
        float _2837 = isnan(1.0) ? _845 : (isnan(_845) ? 1.0 : min(_845, 1.0));
        _2613 = (_2837 * _2828) + _2065;
        _2615 = (_2837 * _2830) + _2067;
        _2617 = (_2837 * _2832) + _2069;
        _2619 = ((_2822 * 0.039999999105930328369140625) * _2837) + _2398;
        _2621 = ((_2824 * 0.039999999105930328369140625) * _2837) + _2400;
        _2623 = ((_2826 * 0.039999999105930328369140625) * _2837) + _2402;
    }
    else
    {
        _2613 = _2065;
        _2615 = _2067;
        _2617 = _2069;
        _2619 = _2398;
        _2621 = _2400;
        _2623 = _2402;
    }
    float _4574 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4585 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4596 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _2640 = ((isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2613 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _845))) + ((_2619 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1683)) * cbPerFrame._m0[3u].x);
    float _2641 = ((isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2615 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _845))) + ((_2621 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1683)) * cbPerFrame._m0[3u].x);
    float _2642 = ((isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2617 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _845))) + ((_2623 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1683)) * cbPerFrame._m0[3u].x);
    uint _2643 = _820 + 6u;
    float _2651 = _782 / cbSceneParam._m0[86u].x;
    float _2652 = _783 / cbSceneParam._m0[86u].y;
    vec4 _2666 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2651, _2652, (log2((isnan(cbSceneParam._m0[77u].w) ? _705 : (isnan(_705) ? cbSceneParam._m0[77u].w : min(_705, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2668 = _2666.x;
    float _2669 = _2666.y;
    float _2670 = _2666.z;
    float _2671 = _2666.w;
    float _2764;
    float _2766;
    float _2768;
    float _2770;
    if (_705 > cbSceneParam._m0[78u].w)
    {
        float _2726 = isnan(_705) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _705 : min(cbSceneParam._m0[80u].w, _705));
        float _2727 = _2726 / _705;
        float _2738 = _2727 * _755;
        float _2739 = _756 * _2727;
        float _2740 = (-0.0) - _2739;
        float _2742 = _2727 * _757;
        float _2744 = (cbSceneParam._m0[77u].w * _2740) / _2726;
        float _2745 = _2744 + cbSceneParam._m0[79u].w;
        float _2746 = cbSceneParam._m0[79u].w - _2739;
        float _2752 = sqrt(((_2738 * _2738) + (_2739 * _2739)) + (_2742 * _2742));
        float _2755 = (1.0 - (cbSceneParam._m0[77u].w / _2726)) * _2752;
        float _2760 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2762 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2939;
        if (abs((_2740 - _2744) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2939 = ((((_2745 > 0.0) ? exp2(_2760 * _2745) : (2.0 - exp2(_2762 * _2745))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2755;
        }
        else
        {
            float _2883 = 1.0 / cbSceneParam._m0[80u].x;
            float _2884 = isnan(_2746) ? _2745 : (isnan(_2745) ? _2746 : max(_2745, _2746));
            float _2885 = isnan(_2746) ? _2745 : (isnan(_2745) ? _2746 : min(_2745, _2746));
            float _2894 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : min(_2884, 0.0));
            float _2895 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : min(_2885, 0.0));
            _2939 = ((abs(_2752 / _2740) * cbSceneParam._m0[80u].y) * ((((_2894 - _2895) * 2.0) - ((exp2(_2760 * (isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0)))) - exp2(_2760 * (isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0))))) * _2883)) - ((exp2(_2762 * _2894) - exp2(_2762 * _2895)) * _2883))) + (_2755 * cbSceneParam._m0[80u].z);
        }
        vec4 _2941 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2651, _2652, 1.0), 0.0);
        float _2950 = exp2((_2939 * (-1.44269502162933349609375)) * (1.0 - _2941.w));
        float _2951 = log2(_2950);
        float _2967 = log2(_2671);
        _2764 = (exp2(_2967 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2951 * cbSceneParam._m0[78u].x)) * _2941.x) / cbSceneParam._m0[78u].x)) + _2668;
        _2766 = (exp2(_2967 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2951 * cbSceneParam._m0[78u].y)) * _2941.y) / cbSceneParam._m0[78u].y)) + _2669;
        _2768 = (exp2(_2967 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2951 * cbSceneParam._m0[78u].z)) * _2941.z) / cbSceneParam._m0[78u].z)) + _2670;
        _2770 = _2950 * _2671;
    }
    else
    {
        _2764 = _2668;
        _2766 = _2669;
        _2768 = _2670;
        _2770 = _2671;
    }
    bool _2977;
    vec4 _2780;
    vec4 _2802;
    float _2804;
    float _2808;
    float _2809;
    float _2810;
    float _2811;
    bool _2821;
    for (;;)
    {
        _2780 = cbMatDynParam._m0[0u];
        float _2782 = roundEven(_2780.y);
        bool _2783 = _2782 == 3.0;
        float _2784 = log2(_2770);
        float _2791 = exp2(_2784 * cbSceneParam._m0[78u].x) * _2640;
        float _2792 = exp2(_2784 * cbSceneParam._m0[78u].y) * _2641;
        float _2793 = exp2(_2784 * cbSceneParam._m0[78u].z) * _2642;
        float _2800 = _771 + (-0.5);
        _2802 = cbMtdParam._m0[1u];
        _2804 = _2802.y * _2800;
        float _2807 = (_2782 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2808 = _2807 * (_2783 ? _2791 : (_2791 + (cbSceneParam._m0[72u].w * _2764)));
        _2809 = _2807 * (_2783 ? _2792 : (_2792 + (cbSceneParam._m0[72u].w * _2766)));
        _2810 = _2807 * (_2783 ? _2793 : (_2793 + (cbSceneParam._m0[72u].w * _2768)));
        _2811 = _2800 * 0.999000012874603271484375;
        _2821 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2821)
        {
            if ((cbInstanceData._m0[_820 + 7u].x + _2811) < 0.5)
            {
                _2977 = true;
                break;
            }
        }
        uint _2918 = _821 + uint(_2780.w);
        if ((cbInstanceData._m0[_2918].w < 1.0) && ((cbInstanceData._m0[_2918].w + _2811) < 0.5))
        {
            _2977 = true;
            break;
        }
        if ((_2804 + 1.0) < _2802.x)
        {
            _2977 = true;
            break;
        }
        _2977 = false;
        break;
    }
    float _3182;
    if (_2977)
    {
        discard_state = true;
        _3182 = 0.0;
    }
    else
    {
        _3182 = cbInstanceData._m0[_2643].w;
    }
    SV_Target.x = _2808;
    SV_Target.y = _2809;
    SV_Target.z = _2810;
    SV_Target.w = _3182;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2643].w;
    discard_exit();
}


