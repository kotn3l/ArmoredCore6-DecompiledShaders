#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1118;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _236 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _242 = _236.x * cbMtdParam._m0[10u].x;
    float _243 = _236.y * cbMtdParam._m0[10u].y;
    float _244 = _236.z * cbMtdParam._m0[10u].z;
    vec4 _263 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _310 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x;
    float _321 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _310)) + 1.0;
    float _3428 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _322 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    float _329 = (_322 * ((_263.x * cbMtdParam._m0[11u].x) - _242)) + _242;
    float _330 = (_322 * ((_263.y * cbMtdParam._m0[11u].y) - _243)) + _243;
    float _331 = (_322 * ((_263.z * cbMtdParam._m0[11u].z) - _244)) + _244;
    vec4 _350 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _380 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _310)) + 1.0;
    float _3439 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _381 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    float _388 = (_381 * ((_350.x * cbMtdParam._m0[12u].x) - _329)) + _329;
    float _389 = (_381 * ((_350.y * cbMtdParam._m0[12u].y) - _330)) + _330;
    float _390 = (_381 * ((_350.z * cbMtdParam._m0[12u].z) - _331)) + _331;
    vec4 _407 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _432 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _310)) + 1.0;
    float _3450 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
    float _440 = (_433 * ((_407.x * cbMtdParam._m0[13u].x) - _388)) + _388;
    float _441 = (_433 * ((_407.y * cbMtdParam._m0[13u].y) - _389)) + _389;
    float _442 = (_433 * ((_407.z * cbMtdParam._m0[13u].z) - _390)) + _390;
    vec4 _454 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _472 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _474 = _472.x;
    float _475 = _472.y;
    float _481 = cbMtdParam._m0[16u].w * _472.z;
    float _484 = (((cbMtdParam._m0[17u].x * _454.z) - _481) * _322) + _481;
    vec4 _497 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _506 = (((cbMtdParam._m0[17u].y * _497.z) - _484) * _381) + _484;
    vec4 _519 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _528 = (((cbMtdParam._m0[17u].z * _519.z) - _506) * _433) + _506;
    vec4 _541 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _554 = ((_454.x - _474) * _322) + _474;
    float _555 = ((_454.y - _475) * _322) + _475;
    float _560 = ((_497.x - _554) * _381) + _554;
    float _561 = ((_497.y - _555) * _381) + _555;
    float _570 = ((((_519.x - _560) * _433) + _560) * 2.0) + (-1.0);
    float _571 = ((((_519.y - _561) * _433) + _561) * 2.0) + (-1.0);
    float _572 = dot(vec2(_570, _571), vec2(_570, _571));
    float _3461 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _577 = sqrt(1.0 - (isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))));
    float _580 = (((_541.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _570;
    float _581 = (((_541.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _571;
    float _584 = fma(_577, _206 * NORMAL.x, fma(_581, _213 * TANGENT.x, (_199 * _191) * _580));
    float _587 = fma(_577, _206 * NORMAL.y, fma(_581, _213 * TANGENT.y, (_199 * _192) * _580));
    float _590 = fma(_577, _206 * NORMAL.z, fma(_581, _213 * TANGENT.z, (_199 * _193) * _580));
    float _594 = inversesqrt(dot(vec3(_584, _587, _590), vec3(_584, _587, _590)));
    float _595 = _594 * _584;
    float _596 = _594 * _587;
    float _597 = _594 * _590;
    float _3472 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _598 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _3483 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3494 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3505 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _617 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _658 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _668 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _658);
    float _669 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _658);
    float _670 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _658);
    float _674 = inversesqrt(dot(vec3(_668, _669, _670), vec3(_668, _669, _670)));
    float _675 = _668 * _674;
    float _676 = _669 * _674;
    float _677 = _670 * _674;
    float _683 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _684 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _702 = fma(_597, cbSceneParam._m0[5u].z, fma(_596, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _595));
    float _705 = fma(_597, cbSceneParam._m0[6u].z, fma(_596, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _595));
    float _708 = fma(_597, cbSceneParam._m0[7u].z, fma(_596, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _595));
    uint _721 = uint(roundEven(NORMAL.w)) * 13u;
    uint _723 = (_721 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _729 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0)))) * cbInstanceData._m0[_723].x;
    float _730 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0)))) * cbInstanceData._m0[_723].y;
    float _731 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0)))) * cbInstanceData._m0[_723].z;
    float _3516 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _3527 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    float _3538 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    vec4 _743 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _683, cbSceneParam._m0[86u].y * _684));
    float _746 = _743.x * TEXCOORD_5.w;
    float _747 = dot(vec3(_595, _596, _597), vec3(_675, _676, _677));
    float _750 = _747 * 2.0;
    float _754 = (_750 * _595) - _675;
    float _755 = (_750 * _596) - _676;
    float _756 = (_750 * _597) - _677;
    float _760 = abs(dot(vec3(_675, _676, _677), vec3(_595, _596, _597)));
    float _3549 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _762 = sqrt(_598);
    float _775 = exp2((_762 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_762 * 3.0));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1117;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _842 = fma(_815, cbModelParam._m0[26u].z, fma(_811, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _807));
        float _846 = fma(_815, cbModelParam._m0[27u].z, fma(_811, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _807));
        float _850 = fma(_815, cbModelParam._m0[28u].z, fma(_811, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _807));
        float _875 = _807 + _595;
        float _876 = _811 + _596;
        float _877 = _815 + _597;
        float _887 = fma(_877, cbModelParam._m0[26u].z, fma(_876, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _875)) - _842;
        float _888 = fma(_877, cbModelParam._m0[27u].z, fma(_876, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _875)) - _846;
        float _889 = fma(_877, cbModelParam._m0[28u].z, fma(_876, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _875)) - _850;
        float _893 = inversesqrt(dot(vec3(_887, _888, _889), vec3(_887, _888, _889)));
        float _906 = ((_893 * _887) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_842 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _907 = ((_893 * _888) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_846 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _908 = ((_893 * _889) / cbModelParam._m0[34u].z) + ((((((_850 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        float _945 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_911.x + (-0.5));
        float _947 = _945 * (_911.y + (-0.5));
        float _948 = _945 * (_911.z + (-0.5));
        float _955 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_918.x + (-0.5));
        float _957 = _955 * (_918.y + (-0.5));
        float _958 = _955 * (_918.z + (-0.5));
        float _965 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_925.x + (-0.5));
        float _967 = _965 * (_925.y + (-0.5));
        float _968 = _965 * (_925.z + (-0.5));
        float _975 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_932.x + (-0.5));
        float _977 = _975 * (_932.y + (-0.5));
        float _978 = _975 * (_932.z + (-0.5));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = _946 * 0.5;
        float _983 = _956 * 0.5;
        float _984 = _966 * 0.5;
        float _985 = dot(vec3(_982, _983, _984), vec3(_982, _983, _984));
        float _990 = (_985 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_985);
        float _999 = (dot(vec3(_595, _596, _597), vec3(_990 * _982, _990 * _983, _990 * _984)) + 1.0) * 0.5;
        float _3575 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1009 = sqrt(((_983 * _983) + (_982 * _982)) + (_984 * _984)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3586 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3597 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * (_1011 + 1.0))) + _1016) * _979;
        float _1026 = _947 * 0.5;
        float _1027 = _957 * 0.5;
        float _1028 = _967 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_595, _596, _597), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3608 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3619 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3630 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * (_1053 + 1.0))) + _1058) * _980;
        float _1068 = _948 * 0.5;
        float _1069 = _958 * 0.5;
        float _1070 = _968 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_595, _596, _597), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3641 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3652 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3663 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * (_1095 + 1.0))) + _1100) * _981;
        _1117 = _948;
        _1119 = _947;
        _1120 = _946;
        _1121 = _958;
        _1122 = _957;
        _1123 = _956;
        _1124 = _968;
        _1125 = _967;
        _1126 = _966;
        _1127 = _981;
        _1128 = _980;
        _1129 = _979;
        _1130 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
        _1132 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
    }
    else
    {
        _1117 = _1118;
        _1119 = _1118;
        _1120 = _1118;
        _1121 = _1118;
        _1122 = _1118;
        _1123 = _1118;
        _1124 = _1118;
        _1125 = _1118;
        _1126 = _1118;
        _1127 = _1118;
        _1128 = _1118;
        _1129 = _1118;
        _1130 = 0.0;
        _1131 = 0.0;
        _1132 = 0.0;
    }
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1158 = fma(_815, cbModelParam._m0[30u].z, fma(_811, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _807));
        float _1162 = fma(_815, cbModelParam._m0[31u].z, fma(_811, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _807));
        float _1166 = fma(_815, cbModelParam._m0[32u].z, fma(_811, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _807));
        float _1189 = _807 + _595;
        float _1190 = _811 + _596;
        float _1191 = _815 + _597;
        float _1201 = fma(_1191, cbModelParam._m0[30u].z, fma(_1190, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1189)) - _1158;
        float _1202 = fma(_1191, cbModelParam._m0[31u].z, fma(_1190, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1189)) - _1162;
        float _1203 = fma(_1191, cbModelParam._m0[32u].z, fma(_1190, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1189)) - _1166;
        float _1207 = inversesqrt(dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203)));
        float _1220 = ((_1207 * _1201) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1158 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1207 * _1202) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1162 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1207 * _1203) / cbModelParam._m0[35u].z) + ((((((_1166 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1220, _1221, _1222), 0.0);
        float _1257 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1224.x + (-0.5));
        float _1259 = _1257 * (_1224.y + (-0.5));
        float _1260 = _1257 * (_1224.z + (-0.5));
        float _1267 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1231.x + (-0.5));
        float _1269 = _1267 * (_1231.y + (-0.5));
        float _1270 = _1267 * (_1231.z + (-0.5));
        float _1277 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1238.x + (-0.5));
        float _1279 = _1277 * (_1238.y + (-0.5));
        float _1280 = _1277 * (_1238.z + (-0.5));
        float _1287 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1245.x + (-0.5));
        float _1289 = _1287 * (_1245.y + (-0.5));
        float _1290 = _1287 * (_1245.z + (-0.5));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = _1258 * 0.5;
        float _1295 = _1268 * 0.5;
        float _1296 = _1278 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_595, _596, _597), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3704 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _3715 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _3726 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_1321 + 1.0))) + _1326) * _1291;
        float _1336 = _1259 * 0.5;
        float _1337 = _1269 * 0.5;
        float _1338 = _1279 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_595, _596, _597), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _3737 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _3748 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _3759 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1363 + 1.0))) + _1368) * _1292;
        float _1378 = _1260 * 0.5;
        float _1379 = _1270 * 0.5;
        float _1380 = _1280 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_595, _596, _597), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _3792 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1405 + 1.0))) + _1410) * _1293;
        _1427 = _1260;
        _1428 = _1259;
        _1429 = _1258;
        _1430 = _1270;
        _1431 = _1269;
        _1432 = _1268;
        _1433 = _1280;
        _1434 = _1279;
        _1435 = _1278;
        _1436 = _1293;
        _1437 = _1292;
        _1438 = _1291;
        _1439 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1440 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
    }
    else
    {
        _1427 = _1118;
        _1428 = _1118;
        _1429 = _1118;
        _1430 = _1118;
        _1431 = _1118;
        _1432 = _1118;
        _1433 = _1118;
        _1434 = _1118;
        _1435 = _1118;
        _1436 = _1118;
        _1437 = _1118;
        _1438 = _1118;
        _1439 = 0.0;
        _1440 = 0.0;
        _1441 = 0.0;
    }
    float _1451 = (cbModelParam._m0[1u].x * (_1439 - _1130)) + _1130;
    float _1452 = (cbModelParam._m0[1u].x * (_1440 - _1131)) + _1131;
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1132)) + _1132;
    float _1474 = fma(_1453, cbSceneParam._m0[89u].z, fma(_1452, cbSceneParam._m0[89u].y, _1451 * cbSceneParam._m0[89u].x));
    float _1477 = fma(_1453, cbSceneParam._m0[90u].z, fma(_1452, cbSceneParam._m0[90u].y, _1451 * cbSceneParam._m0[90u].x));
    float _1480 = fma(_1453, cbSceneParam._m0[91u].z, fma(_1452, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1451));
    float _1495 = _754 * 0.5;
    float _1496 = _755 * 0.5;
    float _1497 = _756 * 0.5;
    float _1498 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1501 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1428, _1431, _1434, _1437));
    float _1504 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1427, _1430, _1433, _1436));
    float _1538;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1511 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1117, _1121, _1124, _1127));
        float _1515 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1119, _1122, _1125, _1128));
        float _1519 = dot(vec4(_1495, _1496, _1497, 1.0), vec4(_1120, _1123, _1126, _1129));
        float _1526 = dot(vec4(cbModelParam._m0[39u]), vec4(_1495, _1496, _1497, 1.0));
        _1538 = dot(vec3(isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1526) ? 0.0 : (isnan(0.0) ? _1526 : max(0.0, _1526))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1538 = 1.0;
    }
    float _1549;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1540 = dot(vec4(cbModelParam._m0[40u]), vec4(_1495, _1496, _1497, 1.0));
        _1549 = dot(vec3(isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1540) ? 0.0 : (isnan(0.0) ? _1540 : max(0.0, _1540))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1549 = 1.0;
    }
    float _1553 = (_1549 * cbModelParam._m0[1u].x) + (_1538 * (1.0 - cbModelParam._m0[1u].x));
    float _1563 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _598);
    float _1564 = isnan(_1563) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1563 : min(cbModelParam._m0[25u].z, _1563));
    float _1645;
    float _1647;
    float _1649;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1612 = fma(_815, cbModelParam._m0[13u].z, fma(_811, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _807)) + cbModelParam._m0[13u].w;
        float _1616 = fma(_815, cbModelParam._m0[14u].z, fma(_811, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _807)) + cbModelParam._m0[14u].w;
        float _1620 = fma(_815, cbModelParam._m0[15u].z, fma(_811, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _807)) + cbModelParam._m0[15u].w;
        float _1623 = fma(_756, cbModelParam._m0[13u].z, fma(_755, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _754));
        float _1626 = fma(_756, cbModelParam._m0[14u].z, fma(_755, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _754));
        float _1629 = fma(_756, cbModelParam._m0[15u].z, fma(_755, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _754));
        float _1657;
        if (_1623 > 0.0)
        {
            _1657 = abs((1.0 - _1612) / _1623);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1612 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1657 = frontier_phi_14_12_ladder;
        }
        float _1860;
        if (_1626 > 0.0)
        {
            _1860 = abs((1.0 - _1616) / _1626);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1616 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1860 = frontier_phi_23_19_ladder;
        }
        float _2103;
        if (_1629 > 0.0)
        {
            _2103 = abs((1.0 - _1620) / _1629);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1620 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2103 = frontier_phi_35_30_ladder;
        }
        float _2105 = isnan(_1860) ? _1657 : (isnan(_1657) ? _1860 : min(_1657, _1860));
        float _2106 = isnan(_2103) ? _2105 : (isnan(_2105) ? _2103 : min(_2105, _2103));
        float _2110 = (_2106 * _1623) + _1612;
        float _2111 = (_2106 * _1626) + _1616;
        float _2112 = (_2106 * _1629) + _1620;
        float _2113 = _2106 * 9.9999997473787516355514526367188e-05;
        float _2115 = (-1.0) - _2113;
        float _2117 = _2113 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2112 > _2117) || ((_2112 < _2115) || ((_2111 > _2117) || ((_2111 < _2115) || ((_2110 < _2115) || (_2110 > _2117))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2236 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2112, cbModelParam._m0[9u].z, fma(_2111, cbModelParam._m0[9u].y, _2110 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2112, cbModelParam._m0[10u].z, fma(_2111, cbModelParam._m0[10u].y, _2110 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2112, cbModelParam._m0[11u].z, fma(_2111, cbModelParam._m0[11u].y, _2110 * cbModelParam._m0[11u].x))), _1564);
            frontier_phi_13_35_ladder = _2236.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2236.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2236.x * cbModelParam._m0[1u].y;
        }
        _1645 = frontier_phi_13_35_ladder_2;
        _1647 = frontier_phi_13_35_ladder_1;
        _1649 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1633 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_754, _755, _756), _1564);
        _1645 = _1633.x * cbModelParam._m0[1u].y;
        _1647 = _1633.y * cbModelParam._m0[1u].y;
        _1649 = _1633.z * cbModelParam._m0[1u].y;
    }
    float _1653 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _598);
    float _1654 = isnan(_1653) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1653 : min(cbModelParam._m0[25u].w, _1653));
    float _1745;
    float _1747;
    float _1749;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1709 = fma(_815, cbModelParam._m0[21u].z, fma(_811, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _807)) + cbModelParam._m0[21u].w;
        float _1713 = fma(_815, cbModelParam._m0[22u].z, fma(_811, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _807)) + cbModelParam._m0[22u].w;
        float _1717 = fma(_815, cbModelParam._m0[23u].z, fma(_811, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _807)) + cbModelParam._m0[23u].w;
        float _1720 = fma(_756, cbModelParam._m0[21u].z, fma(_755, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _754));
        float _1723 = fma(_756, cbModelParam._m0[22u].z, fma(_755, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _754));
        float _1726 = fma(_756, cbModelParam._m0[23u].z, fma(_755, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _754));
        float _1865;
        if (_1720 > 0.0)
        {
            _1865 = abs((1.0 - _1709) / _1720);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1709 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1865 = frontier_phi_25_21_ladder;
        }
        float _2130;
        if (_1723 > 0.0)
        {
            _2130 = abs((1.0 - _1713) / _1723);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1713 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2130 = frontier_phi_37_32_ladder;
        }
        float _2335;
        if (_1726 > 0.0)
        {
            _2335 = abs((1.0 - _1717) / _1726);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1717 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2335 = frontier_phi_46_43_ladder;
        }
        float _2337 = isnan(_2130) ? _1865 : (isnan(_1865) ? _2130 : min(_1865, _2130));
        float _2338 = isnan(_2335) ? _2337 : (isnan(_2337) ? _2335 : min(_2337, _2335));
        float _2342 = (_2338 * _1720) + _1709;
        float _2343 = (_2338 * _1723) + _1713;
        float _2344 = (_2338 * _1726) + _1717;
        float _2345 = _2338 * 9.9999997473787516355514526367188e-05;
        float _2346 = (-1.0) - _2345;
        float _2348 = _2345 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2344 > _2348) || ((_2344 < _2346) || ((_2343 > _2348) || ((_2343 < _2346) || ((_2342 < _2346) || (_2342 > _2348))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2543 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2344, cbModelParam._m0[17u].z, fma(_2343, cbModelParam._m0[17u].y, _2342 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2344, cbModelParam._m0[18u].z, fma(_2343, cbModelParam._m0[18u].y, _2342 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2344, cbModelParam._m0[19u].z, fma(_2343, cbModelParam._m0[19u].y, _2342 * cbModelParam._m0[19u].x))), _1654);
            frontier_phi_22_46_ladder = _2543.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2543.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2543.x * cbModelParam._m0[1u].z;
        }
        _1745 = frontier_phi_22_46_ladder_2;
        _1747 = frontier_phi_22_46_ladder_1;
        _1749 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1729 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_754, _755, _756), _1654);
        _1745 = _1729.x * cbModelParam._m0[1u].z;
        _1747 = _1729.y * cbModelParam._m0[1u].z;
        _1749 = _1729.z * cbModelParam._m0[1u].z;
    }
    float _1761 = ((((1.0 - _775) * ((_762 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_775 * _762)) * _746;
    float _1762 = _1761 * ((cbModelParam._m0[1u].w * (_1745 - _1645)) + _1645);
    float _1763 = _1761 * ((cbModelParam._m0[1u].w * (_1747 - _1647)) + _1647);
    float _1764 = _1761 * ((cbModelParam._m0[1u].w * (_1749 - _1649)) + _1649);
    float _1767 = fma(_1764, cbSceneParam._m0[89u].z, fma(_1763, cbSceneParam._m0[89u].y, _1762 * cbSceneParam._m0[89u].x));
    float _1770 = fma(_1764, cbSceneParam._m0[90u].z, fma(_1763, cbSceneParam._m0[90u].y, _1762 * cbSceneParam._m0[90u].x));
    float _1773 = fma(_1764, cbSceneParam._m0[91u].z, fma(_1763, cbSceneParam._m0[91u].y, _1762 * cbSceneParam._m0[91u].x));
    uvec4 _1783 = floatBitsToUint(cbInstanceData._m0[_721 + 5u]);
    uint _1785 = _1783.x * 14u;
    uint _1786 = _1785 + 13u;
    float _1793 = _746 + (-1.0);
    float _1798 = (cbLight._m0[_1786].x * _1793) + 1.0;
    float _1799 = (cbLight._m0[_1786].y * _1793) + 1.0;
    float _1800 = (cbLight._m0[_1786].z * _1793) + 1.0;
    float _1801 = (cbLight._m0[_1786].w * _1793) + 1.0;
    uint _1802 = _1785 + 5u;
    float _1808 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
    uint _1812 = _1785 + 4u;
    float _1819 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
    uint _1823 = _1785 | 1u;
    float _1834 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_595, _596, _597));
    float _1837 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_595, _596, _597));
    float _3928 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _3939 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1842 = (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * 0.3183098733425140380859375;
    float _1844 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * 0.3183098733425140380859375;
    float _1851 = ((cbLight._m0[_1802].x * _1808) * _1844) + ((cbLight._m0[_1812].x * _1819) * _1842);
    float _1852 = ((_1808 * cbLight._m0[_1802].y) * _1844) + ((_1819 * cbLight._m0[_1812].y) * _1842);
    float _1853 = ((_1808 * cbLight._m0[_1802].z) * _1844) + ((_1819 * cbLight._m0[_1812].z) * _1842);
    uvec4 _1857 = floatBitsToUint(cbLight._m0[_1785 + 12u]);
    bool _1859 = _1857.x == 0u;
    float _1870;
    float _1872;
    float _1874;
    if (_1859)
    {
        _1870 = _1851;
        _1872 = _1852;
        _1874 = _1853;
    }
    else
    {
        uint _1878 = _1785 + 6u;
        float _1894 = (dot(vec3(cbLight._m0[_1785 + 2u].xyz), vec3(_595, _596, _597)) * 0.5) + 0.5;
        float _1895 = _1894 * _1894;
        float _3950 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1897 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
        _1870 = (((cbLight._m0[_1878].x * 0.3183098733425140380859375) * _1896) * _1897) + _1851;
        _1872 = (((cbLight._m0[_1878].y * 0.3183098733425140380859375) * _1896) * _1897) + _1852;
        _1874 = (((cbLight._m0[_1878].z * 0.3183098733425140380859375) * _1896) * _1897) + _1853;
    }
    bool _1877 = _1857.y == 0u;
    float _1915;
    float _1917;
    float _1919;
    if (_1877)
    {
        _1915 = _1870;
        _1917 = _1872;
        _1919 = _1874;
    }
    else
    {
        uint _2074 = _1785 + 7u;
        float _2090 = (dot(vec3(cbLight._m0[_1785 + 3u].xyz), vec3(_595, _596, _597)) * 0.5) + 0.5;
        float _2091 = _2090 * _2090;
        float _3966 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2092 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _2093 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _1915 = (((cbLight._m0[_2074].x * 0.3183098733425140380859375) * _2092) * _2093) + _1870;
        _1917 = (((cbLight._m0[_2074].y * 0.3183098733425140380859375) * _2092) * _2093) + _1872;
        _1919 = (((cbLight._m0[_2074].z * 0.3183098733425140380859375) * _2092) * _2093) + _1874;
    }
    uint _1922 = _1785 + 8u;
    float _1935 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1785].w)) * _598) * 0.949999988079071044921875);
    float _1936 = _1935 * _1935;
    float _1937 = cbLight._m0[_1785].x + _675;
    float _1938 = cbLight._m0[_1785].y + _676;
    float _1939 = cbLight._m0[_1785].z + _677;
    float _1943 = inversesqrt(dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939)));
    float _1944 = _1943 * _1937;
    float _1945 = _1943 * _1938;
    float _1946 = _1943 * _1939;
    float _1947 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_1785].xyz));
    float _3982 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1950 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _3993 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _1951 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _1952 = dot(vec3(_595, _596, _597), vec3(_1944, _1945, _1946));
    float _4004 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1955 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _1956 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_1944, _1945, _1946));
    float _4015 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1960 = _1936 * _1936;
    float _1964 = ((_1955 * _1955) * (_1960 + (-1.0))) + 1.0;
    float _1975 = (exp2(log2(1.0 - (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1976 = 1.0 - _1936;
    float _1987 = (0.5 / (((_1951 * ((_1950 * _1976) + _1936)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _1976) + _1936) * _1950))) * _1950;
    float _4026 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1989 = (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1960 / ((_1964 * _1964) * 3.141590118408203125));
    uint _2000 = _1785 + 9u;
    float _2011 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _598) * 0.949999988079071044921875);
    float _2012 = _2011 * _2011;
    float _2013 = cbLight._m0[_1823].x + _675;
    float _2014 = cbLight._m0[_1823].y + _676;
    float _2015 = cbLight._m0[_1823].z + _677;
    float _2019 = inversesqrt(dot(vec3(_2013, _2014, _2015), vec3(_2013, _2014, _2015)));
    float _2020 = _2019 * _2013;
    float _2021 = _2019 * _2014;
    float _2022 = _2019 * _2015;
    float _2023 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_1823].xyz));
    float _4037 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _2027 = dot(vec3(_595, _596, _597), vec3(_2020, _2021, _2022));
    float _4048 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2030 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _2031 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_2020, _2021, _2022));
    float _4059 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2035 = _2012 * _2012;
    float _2039 = ((_2030 * _2030) * (_2035 + (-1.0))) + 1.0;
    float _2048 = (exp2(log2(1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2049 = 1.0 - _2012;
    float _2059 = (0.5 / (((_1951 * ((_2026 * _2049) + _2012)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _2049) + _2012) * _2026))) * _2026;
    float _4070 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2061 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_2035 / ((_2039 * _2039) * 3.141590118408203125));
    float _2071 = (((_2048 * cbLight._m0[_2000].x) * _2061) * _1808) + (((_1975 * cbLight._m0[_1922].x) * _1989) * _1819);
    float _2072 = (((_2048 * cbLight._m0[_2000].y) * _2061) * _1808) + (((_1975 * cbLight._m0[_1922].y) * _1989) * _1819);
    float _2073 = (((_2048 * cbLight._m0[_2000].z) * _2061) * _1808) + (((_1975 * cbLight._m0[_1922].z) * _1989) * _1819);
    float _2135;
    float _2137;
    float _2139;
    if (_1859)
    {
        _2135 = _2071;
        _2137 = _2072;
        _2139 = _2073;
    }
    else
    {
        uint _2141 = _1785 + 2u;
        uint _2145 = _1785 + 10u;
        float _2159 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2141].w)) * _598) * 0.949999988079071044921875);
        float _2160 = _2159 * _2159;
        float _2161 = cbLight._m0[_2141].x + _675;
        float _2162 = cbLight._m0[_2141].y + _676;
        float _2163 = cbLight._m0[_2141].z + _677;
        float _2167 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
        float _2168 = _2167 * _2161;
        float _2169 = _2167 * _2162;
        float _2170 = _2167 * _2163;
        float _2171 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_2141].xyz));
        float _4081 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2174 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _2175 = dot(vec3(_595, _596, _597), vec3(_2168, _2169, _2170));
        float _4092 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2178 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _2179 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_2168, _2169, _2170));
        float _4103 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2183 = _2160 * _2160;
        float _2187 = ((_2178 * _2178) * (_2183 + (-1.0))) + 1.0;
        float _2196 = (exp2(log2(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2197 = 1.0 - _2160;
        float _2207 = (0.5 / (((_1951 * ((_2174 * _2197) + _2160)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _2197) + _2160) * _2174))) * _2174;
        float _4114 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2209 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_2183 / ((_2187 * _2187) * 3.141590118408203125));
        float _2210 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
        _2135 = (((_2196 * cbLight._m0[_2145].x) * _2209) * _2210) + _2071;
        _2137 = (((_2196 * cbLight._m0[_2145].y) * _2209) * _2210) + _2072;
        _2139 = (((_2196 * cbLight._m0[_2145].z) * _2209) * _2210) + _2073;
    }
    float _2245;
    float _2247;
    float _2249;
    if (_1877)
    {
        _2245 = _2135;
        _2247 = _2137;
        _2249 = _2139;
    }
    else
    {
        uint _2256 = _1785 + 3u;
        uint _2260 = _1785 + 11u;
        float _2274 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2256].w)) * _598) * 0.949999988079071044921875);
        float _2275 = _2274 * _2274;
        float _2276 = cbLight._m0[_2256].x + _675;
        float _2277 = cbLight._m0[_2256].y + _676;
        float _2278 = cbLight._m0[_2256].z + _677;
        float _2282 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
        float _2283 = _2282 * _2276;
        float _2284 = _2282 * _2277;
        float _2285 = _2282 * _2278;
        float _2286 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_2256].xyz));
        float _4130 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2289 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2290 = dot(vec3(_595, _596, _597), vec3(_2283, _2284, _2285));
        float _4141 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2293 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _2294 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_2283, _2284, _2285));
        float _4152 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2298 = _2275 * _2275;
        float _2302 = ((_2293 * _2293) * (_2298 + (-1.0))) + 1.0;
        float _2311 = (exp2(log2(1.0 - (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2312 = 1.0 - _2275;
        float _2322 = (0.5 / (((_1951 * ((_2289 * _2312) + _2275)) + 9.9999999392252902907785028219223e-09) + (((_1951 * _2312) + _2275) * _2289))) * _2289;
        float _4163 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2324 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_2298 / ((_2302 * _2302) * 3.141590118408203125));
        float _2325 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _2245 = (((_2311 * cbLight._m0[_2260].x) * _2324) * _2325) + _2135;
        _2247 = (((_2311 * cbLight._m0[_2260].y) * _2324) * _2325) + _2137;
        _2249 = (((_2311 * cbLight._m0[_2260].z) * _2324) * _2325) + _2139;
    }
    float _2460;
    float _2462;
    float _2464;
    float _2466;
    float _2468;
    float _2470;
    if (_1783.y == 0u)
    {
        float _2400 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2401 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2400;
        float _2402 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2400;
        float _2403 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2400;
        uvec4 _2415 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2416 = _2415.x;
        uint _2427 = uint((float(_2415.y) * floor(float(uint(cbSceneParam._m0[85u].y * _684) / _2416))) + floor(float(uint(cbSceneParam._m0[85u].x * _683) / _2416)));
        float _2437 = (log2(_2403 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2438 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        uint _2441 = uint(isnan(14.0) ? _2438 : (isnan(_2438) ? 14.0 : min(_2438, 14.0)));
        uvec4 _2446 = texelFetch(g_lightClusterGridBuffer, int(((_2441 << 2u) + (_2427 << 6u)) >> 2u));
        uint _2447 = _2446.x;
        uint _2448 = _2415.z;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        if (((((1u << ((_2448 >> 4u) & 15u)) + 4294967295u) & _2447) == 0u) || ((_2448 & 240u) == 0u))
        {
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
            _2554 = 0.0;
            _2556 = 0.0;
            _2558 = 0.0;
        }
        else
        {
            float _2549;
            float _2551;
            float _2553;
            float _2555;
            float _2557;
            float _2559;
            float _2693 = 0.0;
            float _2694 = 0.0;
            float _2695 = 0.0;
            float _2696 = 0.0;
            float _2697 = 0.0;
            float _2698 = 0.0;
            uint _2699 = 0u;
            uint _2708;
            bool _2709;
            for (;;)
            {
                _2708 = texelFetch(g_lightClassification, int((((_2441 << 5u) + (_2427 << 9u)) + (_2699 << 2u)) >> 2u)).x;
                _2709 = _2708 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2709)
                {
                    frontier_phi_61_pred = _2693;
                    frontier_phi_61_pred_1 = _2698;
                    frontier_phi_61_pred_2 = _2697;
                    frontier_phi_61_pred_3 = _2696;
                    frontier_phi_61_pred_4 = _2695;
                    frontier_phi_61_pred_5 = _2694;
                }
                else
                {
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    uint _2823;
                    _2817 = _2693;
                    _2818 = _2694;
                    _2819 = _2695;
                    _2820 = _2696;
                    _2821 = _2697;
                    _2822 = _2698;
                    _2823 = _2708;
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    float _2753;
                    float _2754;
                    for (;;)
                    {
                        uint _2827 = uint(findLSB(_2823)) + (_2699 << 5u);
                        uint _2824 = (_2823 + 4294967295u) & _2823;
                        uint _2829 = _2827 * 48u;
                        vec4 _2843 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2829)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 3u)).x));
                        uint _2849 = (_2827 * 48u) + 4u;
                        vec4 _2862 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2849)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 3u)).x));
                        uint _2868 = (_2827 * 48u) + 8u;
                        vec3 _2879 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2868)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 2u)).x));
                        float _2883 = _2843.x - _2401;
                        float _2884 = _2843.y - _2402;
                        float _2885 = _2843.z - _2403;
                        float _2886 = dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885));
                        float _2889 = inversesqrt(_2886);
                        float _2890 = _2889 * _2883;
                        float _2891 = _2889 * _2884;
                        float _2892 = _2889 * _2885;
                        float _2893 = dot(vec3(_702, _705, _708), vec3(_2890, _2891, _2892));
                        float _2898 = 1.0 - (_2886 * _2843.w);
                        float _4189 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                        float _2899 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                        float _2900 = sqrt(_2886) * _2862.w;
                        float _2903 = 1.39999997615814208984375 / (_2900 + 1.39999997615814208984375);
                        float _2904 = _2903 * _2903;
                        float _2907 = ((1.0 - _2904) * _2893) + _2904;
                        float _2910 = _2900 * _2900;
                        float _2914 = ((isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0))) * _2899) / ((_2910 * 0.699999988079071044921875) + 1.0);
                        float _2918 = (-0.0) - _2401;
                        float _2919 = (-0.0) - _2402;
                        float _2920 = (-0.0) - _2403;
                        float _2924 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
                        float _2925 = _2924 * _2918;
                        float _2926 = _2924 * _2919;
                        float _2927 = _2924 * _2920;
                        float _2935 = exp2(log2(1.0 / ((_2910 * 3.5) + 5.0)) * 0.25);
                        float _2936 = 1.0 - _762;
                        float _2943 = sqrt(1.0 - ((1.0 - (_2936 * _2936)) * (1.0 - (_2935 * _2935))));
                        float _2944 = _2943 * _2943;
                        float _2945 = _2944 * _2944;
                        float _2946 = _2925 + _2890;
                        float _2947 = _2926 + _2891;
                        float _2948 = _2927 + _2892;
                        float _2952 = inversesqrt(dot(vec3(_2946, _2947, _2948), vec3(_2946, _2947, _2948)));
                        float _2956 = dot(vec3(_702, _705, _708), vec3(_2925, _2926, _2927));
                        float _4205 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2959 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                        float _2960 = dot(vec3(_702, _705, _708), vec3(_2952 * _2946, _2952 * _2947, _2952 * _2948));
                        float _4216 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2963 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                        float _2967 = ((_2963 * _2963) * (_2945 + (-1.0))) + 1.0;
                        float _2968 = _2903 * _2944;
                        float _2969 = _2968 * _2968;
                        float _2972 = ((1.0 - _2969) * _2893) + _2969;
                        float _4227 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2973 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                        float _2974 = 1.0 - _2944;
                        float _2984 = (0.5 / (((_2973 * ((_2959 * _2974) + _2944)) + 9.9999999392252902907785028219223e-09) + (((_2973 * _2974) + _2944) * _2959))) * _2973;
                        float _4238 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                        float _2995 = (((_2945 * 3.1415927410125732421875) * (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) / ((_2967 * _2967) * ((_2910 * 2.1991131305694580078125) + 3.141590118408203125))) * _2899;
                        _2752 = (_2914 * _2862.x) + _2820;
                        _2753 = (_2914 * _2862.y) + _2821;
                        _2754 = (_2914 * _2862.z) + _2822;
                        _2749 = (_2995 * _2879.x) + _2817;
                        _2750 = (_2995 * _2879.y) + _2818;
                        _2751 = (_2995 * _2879.z) + _2819;
                        if (_2824 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2817 = _2749;
                            _2818 = _2750;
                            _2819 = _2751;
                            _2820 = _2752;
                            _2821 = _2753;
                            _2822 = _2754;
                            _2823 = _2824;
                        }
                    }
                    frontier_phi_61_pred = _2749;
                    frontier_phi_61_pred_1 = _2754;
                    frontier_phi_61_pred_2 = _2753;
                    frontier_phi_61_pred_3 = _2752;
                    frontier_phi_61_pred_4 = _2751;
                    frontier_phi_61_pred_5 = _2750;
                }
                _2549 = frontier_phi_61_pred;
                _2559 = frontier_phi_61_pred_1;
                _2557 = frontier_phi_61_pred_2;
                _2555 = frontier_phi_61_pred_3;
                _2553 = frontier_phi_61_pred_4;
                _2551 = frontier_phi_61_pred_5;
                uint _2700 = _2699 + 1u;
                if (_2700 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2693 = _2549;
                    _2694 = _2551;
                    _2695 = _2553;
                    _2696 = _2555;
                    _2697 = _2557;
                    _2698 = _2559;
                    _2699 = _2700;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
            _2554 = _2555;
            _2556 = _2557;
            _2558 = _2559;
        }
        uvec4 _2562 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2563 = _2562.z;
        uint _2565 = (_2563 >> 8u) & 15u;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        if (((4294967295u << _2565) & _2447) == 0u)
        {
            _2661 = _2548;
            _2663 = _2550;
            _2665 = _2552;
            _2667 = _2554;
            _2669 = _2556;
            _2671 = _2558;
        }
        else
        {
            float _2686 = inversesqrt(dot(vec3(_2401, _2402, _2403), vec3(_2401, _2402, _2403)));
            float _2687 = _2686 * _2401;
            float _2688 = _2686 * _2402;
            float _2689 = _2686 * _2403;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2565 < ((_2563 >> 12u) & 15u))
            {
                float _2662;
                float _2664;
                float _2666;
                float _2668;
                float _2670;
                float _2672;
                float _2800 = _2548;
                float _2801 = _2550;
                float _2802 = _2552;
                float _2803 = _2554;
                float _2804 = _2556;
                float _2805 = _2558;
                uint _2806 = _2565;
                uint _2815;
                bool _2816;
                for (;;)
                {
                    _2815 = texelFetch(g_lightClassification, int((((_2441 << 5u) + (_2427 << 9u)) + (_2806 << 2u)) >> 2u)).x;
                    _2816 = _2815 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2816)
                    {
                        frontier_phi_67_pred = _2803;
                        frontier_phi_67_pred_1 = _2804;
                        frontier_phi_67_pred_2 = _2805;
                        frontier_phi_67_pred_3 = _2802;
                        frontier_phi_67_pred_4 = _2801;
                        frontier_phi_67_pred_5 = _2800;
                    }
                    else
                    {
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3005;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3013 = _2800;
                        float _3014 = _2801;
                        float _3015 = _2802;
                        float _3016 = _2803;
                        float _3017 = _2804;
                        float _3018 = _2805;
                        uint _3019 = _2815;
                        uint _3020;
                        vec4 _3045;
                        float _3046;
                        vec4 _3061;
                        vec3 _3073;
                        vec4 _3088;
                        vec4 _3103;
                        float _3150;
                        bool _3151;
                        for (;;)
                        {
                            uint _3030 = ((_2806 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3019));
                            _3020 = (_3019 + 4294967295u) & _3019;
                            uint _3032 = _3030 * 40u;
                            _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            _3046 = _3045.w;
                            uint _3048 = (_3030 * 40u) + 4u;
                            _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            uint _3063 = (_3030 * 40u) + 8u;
                            _3073 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x));
                            uint _3075 = (_3030 * 40u) + 16u;
                            _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            uint _3090 = (_3030 * 40u) + 20u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3106 = (_3030 * 40u) + 24u;
                            vec4 _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            uint _3125 = (_3030 * 40u) + 28u;
                            vec4 _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            _3150 = fma(_2403, _3138.z, fma(_2402, _3138.y, _3138.x * _2401)) + _3138.w;
                            _3151 = !((fma(_2403, _3119.z, fma(_2402, _3119.y, _3119.x * _2401)) + _3119.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3151)
                            {
                                float _3178 = _3045.x - _2401;
                                float _3179 = _3045.y - _2402;
                                float _3180 = _3045.z - _2403;
                                float _3181 = dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180));
                                float _3184 = inversesqrt(_3181);
                                float _3185 = _3184 * _3178;
                                float _3186 = _3184 * _3179;
                                float _3187 = _3184 * _3180;
                                float _3191 = 1.0 - (_3181 / (_3046 * _3046));
                                float _4249 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3192 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                                float _3196 = sqrt(_3181) * _3061.w;
                                float _3198 = 1.39999997615814208984375 / (_3196 + 1.39999997615814208984375);
                                float _3199 = _3198 * _3198;
                                float _3202 = ((1.0 - _3199) * dot(vec3(_3185, _3186, _3187), vec3(_702, _705, _708))) + _3199;
                                float _3205 = _3196 * _3196;
                                float _3209 = (fma(_2403, _3088.z, fma(_2402, _3088.y, _3088.x * _2401)) + _3088.w) / _3150;
                                float _3210 = (fma(_2403, _3103.z, fma(_2402, _3103.y, _3103.x * _2401)) + _3103.w) / _3150;
                                float _3214 = 1.0 - dot(vec2(_3209, _3210), vec2(_3209, _3210));
                                float _4265 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3215 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                                float _3216 = _3215 * (((isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0))) * _3192) / ((_3205 * 0.699999988079071044921875) + 1.0));
                                float _3228 = exp2(log2(1.0 / ((_3205 * 3.5) + 5.0)) * 0.25);
                                float _3229 = 1.0 - _762;
                                float _3236 = sqrt(1.0 - ((1.0 - (_3229 * _3229)) * (1.0 - (_3228 * _3228))));
                                float _3237 = _3236 * _3236;
                                float _3238 = _3237 * _3237;
                                float _3239 = _3185 - _2687;
                                float _3240 = _3186 - _2688;
                                float _3241 = _3187 - _2689;
                                float _3245 = inversesqrt(dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241)));
                                float _3249 = dot(vec3(_702, _705, _708), vec3((-0.0) - _2687, (-0.0) - _2688, (-0.0) - _2689));
                                float _4276 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3252 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                                float _3253 = dot(vec3(_702, _705, _708), vec3(_3245 * _3239, _3245 * _3240, _3245 * _3241));
                                float _4287 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3256 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                                float _3260 = ((_3256 * _3256) * (_3238 + (-1.0))) + 1.0;
                                float _3261 = _3198 * _3237;
                                float _3262 = _3261 * _3261;
                                float _3268 = ((1.0 - _3262) * dot(vec3(_702, _705, _708), vec3(_3185, _3186, _3187))) + _3262;
                                float _4298 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3269 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                                float _3270 = 1.0 - _3237;
                                float _3280 = (0.5 / (((_3269 * ((_3252 * _3270) + _3237)) + 9.9999999392252902907785028219223e-09) + (((_3269 * _3270) + _3237) * _3252))) * _3269;
                                float _4309 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3290 = (_3215 * _3192) * (((_3238 * 3.1415927410125732421875) * (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) / ((_3260 * _3260) * ((_3205 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3290 * _3073.x;
                                frontier_phi_73_pred_1 = _3290 * _3073.y;
                                frontier_phi_73_pred_2 = _3216 * _3061.z;
                                frontier_phi_73_pred_3 = _3216 * _3061.y;
                                frontier_phi_73_pred_4 = _3216 * _3061.x;
                                frontier_phi_73_pred_5 = _3290 * _3073.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3294 = frontier_phi_73_pred;
                            _3295 = frontier_phi_73_pred_1;
                            _3299 = frontier_phi_73_pred_2;
                            _3298 = frontier_phi_73_pred_3;
                            _3297 = frontier_phi_73_pred_4;
                            _3296 = frontier_phi_73_pred_5;
                            _3003 = _3297 + _3016;
                            _3004 = _3298 + _3017;
                            _3005 = _3299 + _3018;
                            _3000 = _3294 + _3013;
                            _3001 = _3295 + _3014;
                            _3002 = _3296 + _3015;
                            if (_3020 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3005;
                                _3019 = _3020;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3003;
                        frontier_phi_67_pred_1 = _3004;
                        frontier_phi_67_pred_2 = _3005;
                        frontier_phi_67_pred_3 = _3002;
                        frontier_phi_67_pred_4 = _3001;
                        frontier_phi_67_pred_5 = _3000;
                    }
                    _2668 = frontier_phi_67_pred;
                    _2670 = frontier_phi_67_pred_1;
                    _2672 = frontier_phi_67_pred_2;
                    _2666 = frontier_phi_67_pred_3;
                    _2664 = frontier_phi_67_pred_4;
                    _2662 = frontier_phi_67_pred_5;
                    uint _2807 = _2806 + 1u;
                    if (_2807 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2800 = _2662;
                        _2801 = _2664;
                        _2802 = _2666;
                        _2803 = _2668;
                        _2804 = _2670;
                        _2805 = _2672;
                        _2806 = _2807;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2670;
                frontier_phi_55_56_ladder_1 = _2672;
                frontier_phi_55_56_ladder_2 = _2668;
                frontier_phi_55_56_ladder_3 = _2666;
                frontier_phi_55_56_ladder_4 = _2664;
                frontier_phi_55_56_ladder_5 = _2662;
            }
            else
            {
                frontier_phi_55_56_ladder = _2556;
                frontier_phi_55_56_ladder_1 = _2558;
                frontier_phi_55_56_ladder_2 = _2554;
                frontier_phi_55_56_ladder_3 = _2552;
                frontier_phi_55_56_ladder_4 = _2550;
                frontier_phi_55_56_ladder_5 = _2548;
            }
            _2661 = frontier_phi_55_56_ladder_5;
            _2663 = frontier_phi_55_56_ladder_4;
            _2665 = frontier_phi_55_56_ladder_3;
            _2667 = frontier_phi_55_56_ladder_2;
            _2669 = frontier_phi_55_56_ladder;
            _2671 = frontier_phi_55_56_ladder_1;
        }
        float _2676 = isnan(1.0) ? _746 : (isnan(_746) ? 1.0 : min(_746, 1.0));
        _2460 = (_2676 * _2667) + _1915;
        _2462 = (_2676 * _2669) + _1917;
        _2464 = (_2676 * _2671) + _1919;
        _2466 = ((_2661 * 0.039999999105930328369140625) * _2676) + _2245;
        _2468 = ((_2663 * 0.039999999105930328369140625) * _2676) + _2247;
        _2470 = ((_2665 * 0.039999999105930328369140625) * _2676) + _2249;
    }
    else
    {
        _2460 = _1915;
        _2462 = _1917;
        _2464 = _1919;
        _2466 = _2245;
        _2468 = _2247;
        _2470 = _2249;
    }
    float _4325 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _4336 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4347 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    uint _2490 = _721 + 6u;
    float _2498 = _683 / cbSceneParam._m0[86u].x;
    float _2499 = _684 / cbSceneParam._m0[86u].y;
    vec4 _2513 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2498, _2499, (log2((isnan(cbSceneParam._m0[77u].w) ? _617 : (isnan(_617) ? cbSceneParam._m0[77u].w : min(_617, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2515 = _2513.x;
    float _2516 = _2513.y;
    float _2517 = _2513.z;
    float _2518 = _2513.w;
    float _2611;
    float _2613;
    float _2615;
    float _2617;
    if (_617 > cbSceneParam._m0[78u].w)
    {
        float _2573 = isnan(_617) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _617 : min(cbSceneParam._m0[80u].w, _617));
        float _2574 = _2573 / _617;
        float _2585 = _2574 * _668;
        float _2586 = _669 * _2574;
        float _2587 = (-0.0) - _2586;
        float _2589 = _2574 * _670;
        float _2591 = (cbSceneParam._m0[77u].w * _2587) / _2573;
        float _2592 = _2591 + cbSceneParam._m0[79u].w;
        float _2593 = cbSceneParam._m0[79u].w - _2586;
        float _2599 = sqrt(((_2585 * _2585) + (_2586 * _2586)) + (_2589 * _2589));
        float _2602 = (1.0 - (cbSceneParam._m0[77u].w / _2573)) * _2599;
        float _2607 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2609 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2762;
        if (abs((_2587 - _2591) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2762 = ((((_2592 > 0.0) ? exp2(_2607 * _2592) : (2.0 - exp2(_2609 * _2592))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2602;
        }
        else
        {
            float _2722 = 1.0 / cbSceneParam._m0[80u].x;
            float _2723 = isnan(_2593) ? _2592 : (isnan(_2592) ? _2593 : max(_2592, _2593));
            float _2724 = isnan(_2593) ? _2592 : (isnan(_2592) ? _2593 : min(_2592, _2593));
            float _2733 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : min(_2723, 0.0));
            float _2734 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : min(_2724, 0.0));
            _2762 = ((abs(_2599 / _2587) * cbSceneParam._m0[80u].y) * ((((_2733 - _2734) * 2.0) - ((exp2(_2607 * (isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0)))) - exp2(_2607 * (isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0))))) * _2722)) - ((exp2(_2609 * _2733) - exp2(_2609 * _2734)) * _2722))) + (_2602 * cbSceneParam._m0[80u].z);
        }
        vec4 _2764 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2498, _2499, 1.0), 0.0);
        float _2773 = exp2((_2762 * (-1.44269502162933349609375)) * (1.0 - _2764.w));
        float _2774 = log2(_2773);
        float _2790 = log2(_2518);
        _2611 = (exp2(_2790 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2774 * cbSceneParam._m0[78u].x)) * _2764.x) / cbSceneParam._m0[78u].x)) + _2515;
        _2613 = (exp2(_2790 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2774 * cbSceneParam._m0[78u].y)) * _2764.y) / cbSceneParam._m0[78u].y)) + _2516;
        _2615 = (exp2(_2790 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2774 * cbSceneParam._m0[78u].z)) * _2764.z) / cbSceneParam._m0[78u].z)) + _2517;
        _2617 = _2773 * _2518;
    }
    else
    {
        _2611 = _2515;
        _2613 = _2516;
        _2615 = _2517;
        _2617 = _2518;
    }
    float _2629 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2630 = _2629 == 3.0;
    float _2631 = log2(_2617);
    float _2638 = exp2(_2631 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_2460 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _746))) + ((_2466 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1553)) * cbPerFrame._m0[3u].x));
    float _2639 = exp2(_2631 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2462 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _746))) + ((_2468 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1553)) * cbPerFrame._m0[3u].x));
    float _2640 = exp2(_2631 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_2464 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _746))) + ((_2470 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1553)) * cbPerFrame._m0[3u].x));
    float _2649 = (_2629 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2649 * (_2630 ? _2638 : (_2638 + (cbSceneParam._m0[72u].w * _2611)));
    SV_Target.y = _2649 * (_2630 ? _2639 : (_2639 + (cbSceneParam._m0[72u].w * _2613)));
    SV_Target.z = _2649 * (_2630 ? _2640 : (_2640 + (cbSceneParam._m0[72u].w * _2615)));
    SV_Target.w = cbInstanceData._m0[_2490].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2490].w;
}


