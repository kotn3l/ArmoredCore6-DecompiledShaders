#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1307;
float _3952;
float _3953;
float _3954;
float _3955;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _260 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _266 = _260.x * cbMtdParam._m0[10u].x;
    float _267 = _260.y * cbMtdParam._m0[10u].y;
    float _268 = _260.z * cbMtdParam._m0[10u].z;
    vec4 _287 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x;
    float _345 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _334)) + 1.0;
    float _3964 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _346 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _353 = (_346 * ((_287.x * cbMtdParam._m0[11u].x) - _266)) + _266;
    float _354 = (_346 * ((_287.y * cbMtdParam._m0[11u].y) - _267)) + _267;
    float _355 = (_346 * ((_287.z * cbMtdParam._m0[11u].z) - _268)) + _268;
    vec4 _374 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _404 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _334)) + 1.0;
    float _3975 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _412 = (_405 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353;
    float _413 = (_405 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _414 = (_405 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _431 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _456 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _334)) + 1.0;
    float _3986 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    vec4 _484 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _492 = ((((_457 * ((_431.x * cbMtdParam._m0[13u].x) - _412)) + _412) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _484.x;
    float _495 = ((((_457 * ((_431.y * cbMtdParam._m0[13u].y) - _413)) + _413) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _484.y;
    float _498 = ((((_457 * ((_431.z * cbMtdParam._m0[13u].z) - _414)) + _414) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _484.z;
    vec4 _519 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _548 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3997 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _549 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _556 = (_549 * ((_519.x * cbMtdParam._m0[14u].x) - _492)) + _492;
    float _557 = (_549 * ((_519.y * cbMtdParam._m0[14u].y) - _495)) + _495;
    float _558 = (_549 * ((_519.z * cbMtdParam._m0[14u].z) - _498)) + _498;
    vec4 _574 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _596 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _614 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _616 = _614.x;
    float _617 = _614.y;
    float _620 = cbMtdParam._m0[16u].w * _614.z;
    float _623 = (((cbMtdParam._m0[17u].x * _596.z) - _620) * _346) + _620;
    vec4 _636 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _645 = (((cbMtdParam._m0[17u].y * _636.z) - _623) * _405) + _623;
    vec4 _658 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _667 = (((cbMtdParam._m0[17u].z * _658.z) - _645) * _457) + _645;
    float _672 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_574.z * cbMtdParam._m0[16u].z) - _667)) + _667;
    vec4 _685 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _697 = ((_596.x - _616) * _346) + _616;
    float _698 = ((_596.y - _617) * _346) + _617;
    float _703 = ((_636.x - _697) * _405) + _697;
    float _704 = ((_636.y - _698) * _405) + _698;
    float _713 = ((((_658.x - _703) * _457) + _703) * 2.0) + (-1.0);
    float _714 = ((((_658.y - _704) * _457) + _704) * 2.0) + (-1.0);
    float _715 = dot(vec2(_713, _714), vec2(_713, _714));
    float _4008 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _720 = sqrt(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))));
    float _730 = ((((_685.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _713) + ((((_574.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y);
    float _731 = ((((_685.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _714) + ((((_574.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y);
    float _734 = fma(_720, _230 * NORMAL.x, fma(_731, _237 * TANGENT.x, (_223 * _215) * _730));
    float _737 = fma(_720, _230 * NORMAL.y, fma(_731, _237 * TANGENT.y, (_223 * _216) * _730));
    float _740 = fma(_720, _230 * NORMAL.z, fma(_731, _237 * TANGENT.z, (_223 * _217) * _730));
    float _744 = inversesqrt(dot(vec3(_734, _737, _740), vec3(_734, _737, _740)));
    float _745 = _744 * _734;
    float _746 = _744 * _737;
    float _747 = _744 * _740;
    float _4019 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _748 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _4030 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _4041 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _4052 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _767 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _817 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _807);
    float _818 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _807);
    float _819 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _807);
    float _823 = inversesqrt(dot(vec3(_817, _818, _819), vec3(_817, _818, _819)));
    float _824 = _817 * _823;
    float _825 = _818 * _823;
    float _826 = _819 * _823;
    vec4 _831 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _833 = _831.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _987 = sqrt(((_817 * _817) + (_818 * _818)) + (_819 * _819));
        float _993 = (cbMatDynParam._m0[5u].x * _987) + cbMatDynParam._m0[5u].y;
        float _4063 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _998 = (cbMatDynParam._m0[5u].z * _987) + cbMatDynParam._m0[5u].w;
        float _4074 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) - _994)) + _994) < ((_833 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _844 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _845 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _863 = fma(_747, cbSceneParam._m0[5u].z, fma(_746, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _745));
    float _866 = fma(_747, cbSceneParam._m0[6u].z, fma(_746, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _745));
    float _869 = fma(_747, cbSceneParam._m0[7u].z, fma(_746, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _745));
    uint _882 = uint(roundEven(NORMAL.w)) * 13u;
    uint _883 = _882 + 9u;
    uint _884 = _883 + uint(cbMatDynParam._m0[0u].w);
    float _890 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * cbInstanceData._m0[_884].x;
    float _891 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * cbInstanceData._m0[_884].y;
    float _892 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_884].z;
    float _4085 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    vec4 _904 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _844, cbSceneParam._m0[86u].y * _845));
    float _907 = _904.x * TEXCOORD_5.w;
    float _908 = dot(vec3(_745, _746, _747), vec3(_824, _825, _826));
    float _911 = _908 * 2.0;
    float _915 = (_911 * _745) - _824;
    float _916 = (_911 * _746) - _825;
    float _917 = (_911 * _747) - _826;
    float _921 = abs(dot(vec3(_824, _825, _826), vec3(_745, _746, _747)));
    float _4118 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _923 = sqrt(_748);
    float _936 = exp2((_923 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_923 * 3.0));
    float _968 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _972 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _976 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1306;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1031 = fma(_976, cbModelParam._m0[26u].z, fma(_972, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _968));
        float _1035 = fma(_976, cbModelParam._m0[27u].z, fma(_972, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _968));
        float _1039 = fma(_976, cbModelParam._m0[28u].z, fma(_972, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _968));
        float _1064 = _968 + _745;
        float _1065 = _972 + _746;
        float _1066 = _976 + _747;
        float _1076 = fma(_1066, cbModelParam._m0[26u].z, fma(_1065, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1064)) - _1031;
        float _1077 = fma(_1066, cbModelParam._m0[27u].z, fma(_1065, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1064)) - _1035;
        float _1078 = fma(_1066, cbModelParam._m0[28u].z, fma(_1065, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1064)) - _1039;
        float _1082 = inversesqrt(dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078)));
        float _1095 = ((_1082 * _1076) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1031 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1096 = ((_1082 * _1077) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1035 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1097 = ((_1082 * _1078) / cbModelParam._m0[34u].z) + ((((((_1039 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        float _1134 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1100.x + (-0.5));
        float _1136 = _1134 * (_1100.y + (-0.5));
        float _1137 = _1134 * (_1100.z + (-0.5));
        float _1144 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1107.x + (-0.5));
        float _1146 = _1144 * (_1107.y + (-0.5));
        float _1147 = _1144 * (_1107.z + (-0.5));
        float _1154 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1114.x + (-0.5));
        float _1156 = _1154 * (_1114.y + (-0.5));
        float _1157 = _1154 * (_1114.z + (-0.5));
        float _1164 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1121.x + (-0.5));
        float _1166 = _1164 * (_1121.y + (-0.5));
        float _1167 = _1164 * (_1121.z + (-0.5));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = _1135 * 0.5;
        float _1172 = _1145 * 0.5;
        float _1173 = _1155 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1188 = (dot(vec3(_745, _746, _747), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1198 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _4166 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1200 + 1.0))) + _1205) * _1168;
        float _1215 = _1136 * 0.5;
        float _1216 = _1146 * 0.5;
        float _1217 = _1156 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_745, _746, _747), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _4199 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1242 + 1.0))) + _1247) * _1169;
        float _1257 = _1137 * 0.5;
        float _1258 = _1147 * 0.5;
        float _1259 = _1157 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_745, _746, _747), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _4232 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1284 + 1.0))) + _1289) * _1170;
        _1306 = _1137;
        _1308 = _1136;
        _1309 = _1135;
        _1310 = _1147;
        _1311 = _1146;
        _1312 = _1145;
        _1313 = _1157;
        _1314 = _1156;
        _1315 = _1155;
        _1316 = _1170;
        _1317 = _1169;
        _1318 = _1168;
        _1319 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1320 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1321 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
    }
    else
    {
        _1306 = _1307;
        _1308 = _1307;
        _1309 = _1307;
        _1310 = _1307;
        _1311 = _1307;
        _1312 = _1307;
        _1313 = _1307;
        _1314 = _1307;
        _1315 = _1307;
        _1316 = _1307;
        _1317 = _1307;
        _1318 = _1307;
        _1319 = 0.0;
        _1320 = 0.0;
        _1321 = 0.0;
    }
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1350 = fma(_976, cbModelParam._m0[30u].z, fma(_972, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _968));
        float _1354 = fma(_976, cbModelParam._m0[31u].z, fma(_972, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _968));
        float _1358 = fma(_976, cbModelParam._m0[32u].z, fma(_972, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _968));
        float _1381 = _968 + _745;
        float _1382 = _972 + _746;
        float _1383 = _976 + _747;
        float _1393 = fma(_1383, cbModelParam._m0[30u].z, fma(_1382, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1381)) - _1350;
        float _1394 = fma(_1383, cbModelParam._m0[31u].z, fma(_1382, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1381)) - _1354;
        float _1395 = fma(_1383, cbModelParam._m0[32u].z, fma(_1382, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1381)) - _1358;
        float _1399 = inversesqrt(dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395)));
        float _1412 = ((_1399 * _1393) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1350 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1413 = ((_1399 * _1394) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1354 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1414 = ((_1399 * _1395) / cbModelParam._m0[35u].z) + ((((((_1358 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        float _1449 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1416.x + (-0.5));
        float _1451 = _1449 * (_1416.y + (-0.5));
        float _1452 = _1449 * (_1416.z + (-0.5));
        float _1459 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1423.x + (-0.5));
        float _1461 = _1459 * (_1423.y + (-0.5));
        float _1462 = _1459 * (_1423.z + (-0.5));
        float _1469 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1430.x + (-0.5));
        float _1471 = _1469 * (_1430.y + (-0.5));
        float _1472 = _1469 * (_1430.z + (-0.5));
        float _1479 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1437.x + (-0.5));
        float _1481 = _1479 * (_1437.y + (-0.5));
        float _1482 = _1479 * (_1437.z + (-0.5));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = _1450 * 0.5;
        float _1487 = _1460 * 0.5;
        float _1488 = _1470 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1502 = (dot(vec3(_745, _746, _747), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1511 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _4295 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1513 + 1.0))) + _1518) * _1483;
        float _1528 = _1451 * 0.5;
        float _1529 = _1461 * 0.5;
        float _1530 = _1471 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1544 = (dot(vec3(_745, _746, _747), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1553 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _4328 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1555 + 1.0))) + _1560) * _1484;
        float _1570 = _1452 * 0.5;
        float _1571 = _1462 * 0.5;
        float _1572 = _1472 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1586 = (dot(vec3(_745, _746, _747), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1595 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _4361 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1597 + 1.0))) + _1602) * _1485;
        _1619 = _1452;
        _1620 = _1451;
        _1621 = _1450;
        _1622 = _1462;
        _1623 = _1461;
        _1624 = _1460;
        _1625 = _1472;
        _1626 = _1471;
        _1627 = _1470;
        _1628 = _1485;
        _1629 = _1484;
        _1630 = _1483;
        _1631 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
        _1632 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
        _1633 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
    }
    else
    {
        _1619 = _1307;
        _1620 = _1307;
        _1621 = _1307;
        _1622 = _1307;
        _1623 = _1307;
        _1624 = _1307;
        _1625 = _1307;
        _1626 = _1307;
        _1627 = _1307;
        _1628 = _1307;
        _1629 = _1307;
        _1630 = _1307;
        _1631 = 0.0;
        _1632 = 0.0;
        _1633 = 0.0;
    }
    float _1643 = (cbModelParam._m0[1u].x * (_1631 - _1319)) + _1319;
    float _1644 = (cbModelParam._m0[1u].x * (_1632 - _1320)) + _1320;
    float _1645 = (cbModelParam._m0[1u].x * (_1633 - _1321)) + _1321;
    float _1666 = fma(_1645, cbSceneParam._m0[89u].z, fma(_1644, cbSceneParam._m0[89u].y, _1643 * cbSceneParam._m0[89u].x));
    float _1669 = fma(_1645, cbSceneParam._m0[90u].z, fma(_1644, cbSceneParam._m0[90u].y, _1643 * cbSceneParam._m0[90u].x));
    float _1672 = fma(_1645, cbSceneParam._m0[91u].z, fma(_1644, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1643));
    float _1687 = _915 * 0.5;
    float _1688 = _916 * 0.5;
    float _1689 = _917 * 0.5;
    float _1690 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1621, _1624, _1627, _1630));
    float _1693 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1620, _1623, _1626, _1629));
    float _1696 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1619, _1622, _1625, _1628));
    float _1730;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1703 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1306, _1310, _1313, _1316));
        float _1707 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1308, _1311, _1314, _1317));
        float _1711 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1309, _1312, _1315, _1318));
        float _1718 = dot(vec4(cbModelParam._m0[39u]), vec4(_1687, _1688, _1689, 1.0));
        _1730 = dot(vec3(isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1718) ? 0.0 : (isnan(0.0) ? _1718 : max(0.0, _1718))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1730 = 1.0;
    }
    float _1741;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1732 = dot(vec4(cbModelParam._m0[40u]), vec4(_1687, _1688, _1689, 1.0));
        _1741 = dot(vec3(isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1732) ? 0.0 : (isnan(0.0) ? _1732 : max(0.0, _1732))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1741 = 1.0;
    }
    float _1745 = (_1741 * cbModelParam._m0[1u].x) + (_1730 * (1.0 - cbModelParam._m0[1u].x));
    float _1755 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _748);
    float _1756 = isnan(_1755) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1755 : min(cbModelParam._m0[25u].z, _1755));
    float _1836;
    float _1838;
    float _1840;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1803 = fma(_976, cbModelParam._m0[13u].z, fma(_972, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _968)) + cbModelParam._m0[13u].w;
        float _1807 = fma(_976, cbModelParam._m0[14u].z, fma(_972, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _968)) + cbModelParam._m0[14u].w;
        float _1811 = fma(_976, cbModelParam._m0[15u].z, fma(_972, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _968)) + cbModelParam._m0[15u].w;
        float _1814 = fma(_917, cbModelParam._m0[13u].z, fma(_916, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _915));
        float _1817 = fma(_917, cbModelParam._m0[14u].z, fma(_916, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _915));
        float _1820 = fma(_917, cbModelParam._m0[15u].z, fma(_916, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _915));
        float _1848;
        if (_1814 > 0.0)
        {
            _1848 = abs((1.0 - _1803) / _1814);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1803 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1848 = frontier_phi_17_15_ladder;
        }
        float _2019;
        if (_1817 > 0.0)
        {
            _2019 = abs((1.0 - _1807) / _1817);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1807 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2019 = frontier_phi_26_22_ladder;
        }
        float _2314;
        if (_1820 > 0.0)
        {
            _2314 = abs((1.0 - _1811) / _1820);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1811 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2314 = frontier_phi_38_33_ladder;
        }
        float _2316 = isnan(_2019) ? _1848 : (isnan(_1848) ? _2019 : min(_1848, _2019));
        float _2317 = isnan(_2314) ? _2316 : (isnan(_2316) ? _2314 : min(_2316, _2314));
        float _2321 = (_2317 * _1814) + _1803;
        float _2322 = (_2317 * _1817) + _1807;
        float _2323 = (_2317 * _1820) + _1811;
        float _2324 = _2317 * 9.9999997473787516355514526367188e-05;
        float _2326 = (-1.0) - _2324;
        float _2328 = _2324 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2323 > _2328) || ((_2323 < _2326) || ((_2322 > _2328) || ((_2322 < _2326) || ((_2321 < _2326) || (_2321 > _2328))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2468 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2323, cbModelParam._m0[9u].z, fma(_2322, cbModelParam._m0[9u].y, _2321 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2323, cbModelParam._m0[10u].z, fma(_2322, cbModelParam._m0[10u].y, _2321 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2323, cbModelParam._m0[11u].z, fma(_2322, cbModelParam._m0[11u].y, _2321 * cbModelParam._m0[11u].x))), _1756);
            frontier_phi_16_38_ladder = _2468.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2468.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2468.x * cbModelParam._m0[1u].y;
        }
        _1836 = frontier_phi_16_38_ladder_2;
        _1838 = frontier_phi_16_38_ladder_1;
        _1840 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1824 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_915, _916, _917), _1756);
        _1836 = _1824.x * cbModelParam._m0[1u].y;
        _1838 = _1824.y * cbModelParam._m0[1u].y;
        _1840 = _1824.z * cbModelParam._m0[1u].y;
    }
    float _1844 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _748);
    float _1845 = isnan(_1844) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1844 : min(cbModelParam._m0[25u].w, _1844));
    float _1936;
    float _1938;
    float _1940;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1900 = fma(_976, cbModelParam._m0[21u].z, fma(_972, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _968)) + cbModelParam._m0[21u].w;
        float _1904 = fma(_976, cbModelParam._m0[22u].z, fma(_972, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _968)) + cbModelParam._m0[22u].w;
        float _1908 = fma(_976, cbModelParam._m0[23u].z, fma(_972, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _968)) + cbModelParam._m0[23u].w;
        float _1911 = fma(_917, cbModelParam._m0[21u].z, fma(_916, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _915));
        float _1914 = fma(_917, cbModelParam._m0[22u].z, fma(_916, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _915));
        float _1917 = fma(_917, cbModelParam._m0[23u].z, fma(_916, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _915));
        float _2024;
        if (_1911 > 0.0)
        {
            _2024 = abs((1.0 - _1900) / _1911);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1900 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2024 = frontier_phi_28_24_ladder;
        }
        float _2341;
        if (_1914 > 0.0)
        {
            _2341 = abs((1.0 - _1904) / _1914);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1904 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2341 = frontier_phi_40_35_ladder;
        }
        float _2668;
        if (_1917 > 0.0)
        {
            _2668 = abs((1.0 - _1908) / _1917);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1908 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2668 = frontier_phi_50_47_ladder;
        }
        float _2670 = isnan(_2341) ? _2024 : (isnan(_2024) ? _2341 : min(_2024, _2341));
        float _2671 = isnan(_2668) ? _2670 : (isnan(_2670) ? _2668 : min(_2670, _2668));
        float _2675 = (_2671 * _1911) + _1900;
        float _2676 = (_2671 * _1914) + _1904;
        float _2677 = (_2671 * _1917) + _1908;
        float _2678 = _2671 * 9.9999997473787516355514526367188e-05;
        float _2679 = (-1.0) - _2678;
        float _2681 = _2678 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2677 > _2681) || ((_2677 < _2679) || ((_2676 > _2681) || ((_2676 < _2679) || ((_2675 < _2679) || (_2675 > _2681))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2795 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2677, cbModelParam._m0[17u].z, fma(_2676, cbModelParam._m0[17u].y, _2675 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2677, cbModelParam._m0[18u].z, fma(_2676, cbModelParam._m0[18u].y, _2675 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2677, cbModelParam._m0[19u].z, fma(_2676, cbModelParam._m0[19u].y, _2675 * cbModelParam._m0[19u].x))), _1845);
            frontier_phi_25_50_ladder = _2795.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2795.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2795.x * cbModelParam._m0[1u].z;
        }
        _1936 = frontier_phi_25_50_ladder_2;
        _1938 = frontier_phi_25_50_ladder_1;
        _1940 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1920 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_915, _916, _917), _1845);
        _1936 = _1920.x * cbModelParam._m0[1u].z;
        _1938 = _1920.y * cbModelParam._m0[1u].z;
        _1940 = _1920.z * cbModelParam._m0[1u].z;
    }
    float _1952 = ((((1.0 - _936) * ((_923 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_936 * _923)) * _907;
    float _1953 = _1952 * ((cbModelParam._m0[1u].w * (_1936 - _1836)) + _1836);
    float _1954 = _1952 * ((cbModelParam._m0[1u].w * (_1938 - _1838)) + _1838);
    float _1955 = _1952 * ((cbModelParam._m0[1u].w * (_1940 - _1840)) + _1840);
    float _1958 = fma(_1955, cbSceneParam._m0[89u].z, fma(_1954, cbSceneParam._m0[89u].y, _1953 * cbSceneParam._m0[89u].x));
    float _1961 = fma(_1955, cbSceneParam._m0[90u].z, fma(_1954, cbSceneParam._m0[90u].y, _1953 * cbSceneParam._m0[90u].x));
    float _1964 = fma(_1955, cbSceneParam._m0[91u].z, fma(_1954, cbSceneParam._m0[91u].y, _1953 * cbSceneParam._m0[91u].x));
    float _1998 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2002 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2006 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2010 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2011 = _1998 / _2010;
    float _2012 = _2002 / _2010;
    float _2013 = _2006 / _2010;
    float _2160;
    float _2161;
    float _2162;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2040 = ((uint(_2013 > cbSceneParam._m0[59u].y) + uint(_2013 > cbSceneParam._m0[59u].x)) + uint(_2013 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2041 = _2040 + 43u;
        uint _2049 = _2040 + 44u;
        uint _2057 = _2040 + 45u;
        uint _2065 = _2040 + 46u;
        float _2076 = fma(_2010, cbSceneParam._m0[_2041].w, fma(_2006, cbSceneParam._m0[_2041].z, fma(_2002, cbSceneParam._m0[_2041].y, _1998 * cbSceneParam._m0[_2041].x)));
        float _2080 = fma(_2010, cbSceneParam._m0[_2049].w, fma(_2006, cbSceneParam._m0[_2049].z, fma(_2002, cbSceneParam._m0[_2049].y, _1998 * cbSceneParam._m0[_2049].x)));
        float _2088 = fma(_2010, cbSceneParam._m0[_2065].w, fma(_2006, cbSceneParam._m0[_2065].z, fma(_2002, cbSceneParam._m0[_2065].y, _1998 * cbSceneParam._m0[_2065].x)));
        float _2093 = cbSceneParam._m0[33u].z * _2088;
        float _2095 = cbSceneParam._m0[33u].w * _2088;
        float _2098 = fma(_2010, cbSceneParam._m0[_2057].w, fma(_2006, cbSceneParam._m0[_2057].z, fma(_2002, cbSceneParam._m0[_2057].y, _1998 * cbSceneParam._m0[_2057].x))) / _2088;
        float _2146 = (cbSceneParam._m0[33u].x - sqrt(((_2012 * _2012) + (_2011 * _2011)) + (_2013 * _2013))) * cbSceneParam._m0[33u].y;
        float _4487 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2153 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2093 + _2076) / _2088, (_2095 + _2080) / _2088), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2095 + _2076) / _2088, (_2080 - _2093) / _2088), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2076 - _2093) / _2088, (_2080 - _2095) / _2088), _2098), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2076 - _2095) / _2088, (_2093 + _2080) / _2088), _2098), 0.0)).x), vec4(0.25)));
        _2160 = 1.0 - (_2153 * cbSceneParam._m0[34u].x);
        _2161 = 1.0 - (_2153 * cbSceneParam._m0[34u].y);
        _2162 = 1.0 - (_2153 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2160 = 1.0;
        _2161 = 1.0;
        _2162 = 1.0;
    }
    float _2226;
    float _2228;
    float _2230;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2214 = fma(_2010, cbSceneParam._m0[63u].w, fma(_2006, cbSceneParam._m0[63u].z, fma(_2002, cbSceneParam._m0[63u].y, _1998 * cbSceneParam._m0[63u].x)));
        float _2215 = fma(_2010, cbSceneParam._m0[60u].w, fma(_2006, cbSceneParam._m0[60u].z, fma(_2002, cbSceneParam._m0[60u].y, _1998 * cbSceneParam._m0[60u].x))) / _2214;
        float _2216 = fma(_2010, cbSceneParam._m0[61u].w, fma(_2006, cbSceneParam._m0[61u].z, fma(_2002, cbSceneParam._m0[61u].y, _1998 * cbSceneParam._m0[61u].x))) / _2214;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2215 >= cbSceneParam._m0[64u].x) && (_2216 >= cbSceneParam._m0[64u].y)) && (_2215 <= cbSceneParam._m0[64u].z)) && (_2216 <= cbSceneParam._m0[64u].w))
        {
            float _2354 = fma(_2010, cbSceneParam._m0[62u].w, fma(_2006, cbSceneParam._m0[62u].z, fma(_2002, cbSceneParam._m0[62u].y, _1998 * cbSceneParam._m0[62u].x))) / _2214;
            float _2358 = isnan(cbSceneParam._m0[41u].w) ? _2354 : (isnan(_2354) ? cbSceneParam._m0[41u].w : max(_2354, cbSceneParam._m0[41u].w));
            float _2401 = (cbSceneParam._m0[33u].x - sqrt(((_2012 * _2012) + (_2011 * _2011)) + (_2013 * _2013))) * cbSceneParam._m0[33u].y;
            float _4503 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
            float _2408 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2215, cbSceneParam._m0[33u].w + _2216), _2358), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2215, _2216 - cbSceneParam._m0[33u].z), _2358), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2215 - cbSceneParam._m0[33u].z, _2216 - cbSceneParam._m0[33u].w), _2358), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2215 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2216), _2358), 0.0)).x), vec4(0.25)));
            float _2412 = 1.0 - (_2408 * cbSceneParam._m0[34u].x);
            float _2413 = 1.0 - (_2408 * cbSceneParam._m0[34u].y);
            float _2414 = 1.0 - (_2408 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2414) ? _2162 : (isnan(_2162) ? _2414 : min(_2162, _2414));
            frontier_phi_37_36_ladder_1 = isnan(_2413) ? _2161 : (isnan(_2161) ? _2413 : min(_2161, _2413));
            frontier_phi_37_36_ladder_2 = isnan(_2412) ? _2160 : (isnan(_2160) ? _2412 : min(_2160, _2412));
        }
        else
        {
            frontier_phi_37_36_ladder = _2162;
            frontier_phi_37_36_ladder_1 = _2161;
            frontier_phi_37_36_ladder_2 = _2160;
        }
        _2226 = frontier_phi_37_36_ladder_2;
        _2228 = frontier_phi_37_36_ladder_1;
        _2230 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2226 = _2160;
        _2228 = _2161;
        _2230 = _2162;
    }
    uvec4 _2235 = floatBitsToUint(cbInstanceData._m0[_882 + 5u]);
    uint _2237 = _2235.x * 14u;
    uint _2238 = _2237 + 13u;
    float _2245 = _907 + (-1.0);
    float _2250 = (cbLight._m0[_2238].x * _2245) + 1.0;
    float _2251 = (cbLight._m0[_2238].y * _2245) + 1.0;
    float _2252 = (cbLight._m0[_2238].z * _2245) + 1.0;
    float _2253 = (cbLight._m0[_2238].w * _2245) + 1.0;
    uint _2254 = _2237 + 5u;
    float _2260 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
    uint _2264 = _2237 + 4u;
    float _2273 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
    uint _2277 = _2237 | 1u;
    float _2288 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_745, _746, _747));
    float _2291 = dot(vec3(cbLight._m0[_2277].xyz), vec3(_745, _746, _747));
    float _4539 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _4550 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2296 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * 0.3183098733425140380859375;
    float _2298 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * 0.3183098733425140380859375;
    float _2305 = ((cbLight._m0[_2254].x * _2260) * _2298) + (((cbLight._m0[_2264].x * _2226) * _2273) * _2296);
    float _2306 = ((_2260 * cbLight._m0[_2254].y) * _2298) + (((cbLight._m0[_2264].y * _2228) * _2273) * _2296);
    float _2307 = ((_2260 * cbLight._m0[_2254].z) * _2298) + (((cbLight._m0[_2264].z * _2230) * _2273) * _2296);
    uvec4 _2311 = floatBitsToUint(cbLight._m0[_2237 + 12u]);
    bool _2313 = _2311.x == 0u;
    float _2415;
    float _2417;
    float _2419;
    if (_2313)
    {
        _2415 = _2305;
        _2417 = _2306;
        _2419 = _2307;
    }
    else
    {
        uint _2423 = _2237 + 6u;
        float _2439 = (dot(vec3(cbLight._m0[_2237 + 2u].xyz), vec3(_745, _746, _747)) * 0.5) + 0.5;
        float _2440 = _2439 * _2439;
        float _4561 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2441 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2442 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
        _2415 = (((cbLight._m0[_2423].x * 0.3183098733425140380859375) * _2441) * _2442) + _2305;
        _2417 = (((cbLight._m0[_2423].y * 0.3183098733425140380859375) * _2441) * _2442) + _2306;
        _2419 = (((cbLight._m0[_2423].z * 0.3183098733425140380859375) * _2441) * _2442) + _2307;
    }
    bool _2422 = _2311.y == 0u;
    float _2477;
    float _2479;
    float _2481;
    if (_2422)
    {
        _2477 = _2415;
        _2479 = _2417;
        _2481 = _2419;
    }
    else
    {
        uint _2639 = _2237 + 7u;
        float _2655 = (dot(vec3(cbLight._m0[_2237 + 3u].xyz), vec3(_745, _746, _747)) * 0.5) + 0.5;
        float _2656 = _2655 * _2655;
        float _4577 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2657 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2658 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
        _2477 = (((cbLight._m0[_2639].x * 0.3183098733425140380859375) * _2657) * _2658) + _2415;
        _2479 = (((cbLight._m0[_2639].y * 0.3183098733425140380859375) * _2657) * _2658) + _2417;
        _2481 = (((cbLight._m0[_2639].z * 0.3183098733425140380859375) * _2657) * _2658) + _2419;
    }
    uint _2484 = _2237 + 8u;
    float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2237].w)) * _748) * 0.949999988079071044921875);
    float _2498 = _2497 * _2497;
    float _2499 = cbLight._m0[_2237].x + _824;
    float _2500 = cbLight._m0[_2237].y + _825;
    float _2501 = cbLight._m0[_2237].z + _826;
    float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
    float _2506 = _2505 * _2499;
    float _2507 = _2505 * _2500;
    float _2508 = _2505 * _2501;
    float _2509 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2237].xyz));
    float _4593 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2512 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _4604 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _2513 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2514 = dot(vec3(_745, _746, _747), vec3(_2506, _2507, _2508));
    float _4615 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2517 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2518 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_2506, _2507, _2508));
    float _4626 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2522 = _2498 * _2498;
    float _2526 = ((_2517 * _2517) * (_2522 + (-1.0))) + 1.0;
    float _2537 = (exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2538 = 1.0 - _2498;
    float _2549 = (0.5 / (((_2513 * ((_2512 * _2538) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2513 * _2538) + _2498) * _2512))) * _2512;
    float _4637 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2551 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2522 / ((_2526 * _2526) * 3.141590118408203125));
    uint _2565 = _2237 + 9u;
    float _2576 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2277].w)) * _748) * 0.949999988079071044921875);
    float _2577 = _2576 * _2576;
    float _2578 = cbLight._m0[_2277].x + _824;
    float _2579 = cbLight._m0[_2277].y + _825;
    float _2580 = cbLight._m0[_2277].z + _826;
    float _2584 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
    float _2585 = _2584 * _2578;
    float _2586 = _2584 * _2579;
    float _2587 = _2584 * _2580;
    float _2588 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2277].xyz));
    float _4648 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2591 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
    float _2592 = dot(vec3(_745, _746, _747), vec3(_2585, _2586, _2587));
    float _4659 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2595 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
    float _2596 = dot(vec3(cbLight._m0[_2277].xyz), vec3(_2585, _2586, _2587));
    float _4670 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2600 = _2577 * _2577;
    float _2604 = ((_2595 * _2595) * (_2600 + (-1.0))) + 1.0;
    float _2613 = (exp2(log2(1.0 - (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2614 = 1.0 - _2577;
    float _2624 = (0.5 / (((_2513 * ((_2591 * _2614) + _2577)) + 9.9999999392252902907785028219223e-09) + (((_2513 * _2614) + _2577) * _2591))) * _2591;
    float _4681 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2626 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2600 / ((_2604 * _2604) * 3.141590118408203125));
    float _2636 = (((_2613 * cbLight._m0[_2565].x) * _2626) * _2260) + ((((cbLight._m0[_2484].x * _2226) * _2537) * _2551) * _2273);
    float _2637 = (((_2613 * cbLight._m0[_2565].y) * _2626) * _2260) + ((((cbLight._m0[_2484].y * _2228) * _2537) * _2551) * _2273);
    float _2638 = (((_2613 * cbLight._m0[_2565].z) * _2626) * _2260) + ((((cbLight._m0[_2484].z * _2230) * _2537) * _2551) * _2273);
    float _2694;
    float _2696;
    float _2698;
    if (_2313)
    {
        _2694 = _2636;
        _2696 = _2637;
        _2698 = _2638;
    }
    else
    {
        uint _2700 = _2237 + 2u;
        uint _2704 = _2237 + 10u;
        float _2718 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2700].w)) * _748) * 0.949999988079071044921875);
        float _2719 = _2718 * _2718;
        float _2720 = cbLight._m0[_2700].x + _824;
        float _2721 = cbLight._m0[_2700].y + _825;
        float _2722 = cbLight._m0[_2700].z + _826;
        float _2726 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
        float _2727 = _2726 * _2720;
        float _2728 = _2726 * _2721;
        float _2729 = _2726 * _2722;
        float _2730 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2700].xyz));
        float _4692 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2733 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2734 = dot(vec3(_745, _746, _747), vec3(_2727, _2728, _2729));
        float _4703 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2737 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2738 = dot(vec3(cbLight._m0[_2700].xyz), vec3(_2727, _2728, _2729));
        float _4714 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2742 = _2719 * _2719;
        float _2746 = ((_2737 * _2737) * (_2742 + (-1.0))) + 1.0;
        float _2755 = (exp2(log2(1.0 - (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2756 = 1.0 - _2719;
        float _2766 = (0.5 / (((_2513 * ((_2733 * _2756) + _2719)) + 9.9999999392252902907785028219223e-09) + (((_2513 * _2756) + _2719) * _2733))) * _2733;
        float _4725 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2768 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2742 / ((_2746 * _2746) * 3.141590118408203125));
        float _2769 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
        _2694 = (((_2755 * cbLight._m0[_2704].x) * _2768) * _2769) + _2636;
        _2696 = (((_2755 * cbLight._m0[_2704].y) * _2768) * _2769) + _2637;
        _2698 = (((_2755 * cbLight._m0[_2704].z) * _2768) * _2769) + _2638;
    }
    float _2800;
    float _2802;
    float _2804;
    if (_2422)
    {
        _2800 = _2694;
        _2802 = _2696;
        _2804 = _2698;
    }
    else
    {
        uint _2811 = _2237 + 3u;
        uint _2815 = _2237 + 11u;
        float _2829 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2811].w)) * _748) * 0.949999988079071044921875);
        float _2830 = _2829 * _2829;
        float _2831 = cbLight._m0[_2811].x + _824;
        float _2832 = cbLight._m0[_2811].y + _825;
        float _2833 = cbLight._m0[_2811].z + _826;
        float _2837 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
        float _2838 = _2837 * _2831;
        float _2839 = _2837 * _2832;
        float _2840 = _2837 * _2833;
        float _2841 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2811].xyz));
        float _4741 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2844 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _2845 = dot(vec3(_745, _746, _747), vec3(_2838, _2839, _2840));
        float _4752 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2848 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
        float _2849 = dot(vec3(cbLight._m0[_2811].xyz), vec3(_2838, _2839, _2840));
        float _4763 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2853 = _2830 * _2830;
        float _2857 = ((_2848 * _2848) * (_2853 + (-1.0))) + 1.0;
        float _2866 = (exp2(log2(1.0 - (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2867 = 1.0 - _2830;
        float _2877 = (0.5 / (((_2513 * ((_2844 * _2867) + _2830)) + 9.9999999392252902907785028219223e-09) + (((_2513 * _2867) + _2830) * _2844))) * _2844;
        float _4774 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        float _2879 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2853 / ((_2857 * _2857) * 3.141590118408203125));
        float _2880 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
        _2800 = (((_2866 * cbLight._m0[_2815].x) * _2879) * _2880) + _2694;
        _2802 = (((_2866 * cbLight._m0[_2815].y) * _2879) * _2880) + _2696;
        _2804 = (((_2866 * cbLight._m0[_2815].z) * _2879) * _2880) + _2698;
    }
    float _2946;
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    float _2956;
    if (_2235.y == 0u)
    {
        uvec4 _2901 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2902 = _2901.x;
        uint _2913 = uint((float(_2901.y) * floor(float(uint(cbSceneParam._m0[85u].y * _845) / _2902))) + floor(float(uint(cbSceneParam._m0[85u].x * _844) / _2902)));
        float _2923 = (log2(_2013 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2924 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        uint _2927 = uint(isnan(14.0) ? _2924 : (isnan(_2924) ? 14.0 : min(_2924, 14.0)));
        uvec4 _2932 = texelFetch(g_lightClusterGridBuffer, int(((_2927 << 2u) + (_2913 << 6u)) >> 2u));
        uint _2933 = _2932.x;
        uint _2934 = _2901.z;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        if (((((1u << ((_2934 >> 4u) & 15u)) + 4294967295u) & _2933) == 0u) || ((_2934 & 240u) == 0u))
        {
            _3013 = 0.0;
            _3015 = 0.0;
            _3017 = 0.0;
            _3019 = 0.0;
            _3021 = 0.0;
            _3023 = 0.0;
        }
        else
        {
            float _3014;
            float _3016;
            float _3018;
            float _3020;
            float _3022;
            float _3024;
            float _3166 = 0.0;
            float _3167 = 0.0;
            float _3168 = 0.0;
            float _3169 = 0.0;
            float _3170 = 0.0;
            float _3171 = 0.0;
            uint _3172 = 0u;
            uint _3181;
            bool _3182;
            for (;;)
            {
                _3181 = texelFetch(g_lightClassification, int((((_2927 << 5u) + (_2913 << 9u)) + (_3172 << 2u)) >> 2u)).x;
                _3182 = _3181 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3182)
                {
                    frontier_phi_71_pred = _3171;
                    frontier_phi_71_pred_1 = _3170;
                    frontier_phi_71_pred_2 = _3169;
                    frontier_phi_71_pred_3 = _3168;
                    frontier_phi_71_pred_4 = _3167;
                    frontier_phi_71_pred_5 = _3166;
                }
                else
                {
                    float _3311;
                    float _3312;
                    float _3313;
                    float _3314;
                    float _3315;
                    float _3316;
                    uint _3317;
                    _3311 = _3166;
                    _3312 = _3167;
                    _3313 = _3168;
                    _3314 = _3169;
                    _3315 = _3170;
                    _3316 = _3171;
                    _3317 = _3181;
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    for (;;)
                    {
                        uint _3321 = uint(findLSB(_3317)) + (_3172 << 5u);
                        uint _3318 = (_3317 + 4294967295u) & _3317;
                        uint _3323 = _3321 * 48u;
                        vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3323)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 3u)).x));
                        uint _3343 = (_3321 * 48u) + 4u;
                        vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3343)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 3u)).x));
                        uint _3362 = (_3321 * 48u) + 8u;
                        vec3 _3373 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3362)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 2u)).x));
                        float _3377 = _3337.x - _2011;
                        float _3378 = _3337.y - _2012;
                        float _3379 = _3337.z - _2013;
                        float _3380 = dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379));
                        float _3383 = inversesqrt(_3380);
                        float _3384 = _3383 * _3377;
                        float _3385 = _3383 * _3378;
                        float _3386 = _3383 * _3379;
                        float _3387 = dot(vec3(_863, _866, _869), vec3(_3384, _3385, _3386));
                        float _3392 = 1.0 - (_3380 * _3337.w);
                        float _4800 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                        float _3393 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3394 = sqrt(_3380) * _3356.w;
                        float _3397 = 1.39999997615814208984375 / (_3394 + 1.39999997615814208984375);
                        float _3398 = _3397 * _3397;
                        float _3401 = ((1.0 - _3398) * _3387) + _3398;
                        float _3404 = _3394 * _3394;
                        float _3408 = ((isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0))) * _3393) / ((_3404 * 0.699999988079071044921875) + 1.0);
                        float _3412 = (-0.0) - _2011;
                        float _3413 = (-0.0) - _2012;
                        float _3414 = (-0.0) - _2013;
                        float _3418 = inversesqrt(dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414)));
                        float _3419 = _3418 * _3412;
                        float _3420 = _3418 * _3413;
                        float _3421 = _3418 * _3414;
                        float _3428 = exp2(log2(1.0 / ((_3404 * 3.5) + 5.0)) * 0.25);
                        float _3429 = 1.0 - _923;
                        float _3436 = sqrt(1.0 - ((1.0 - (_3429 * _3429)) * (1.0 - (_3428 * _3428))));
                        float _3437 = _3436 * _3436;
                        float _3438 = _3437 * _3437;
                        float _3439 = _3419 + _3384;
                        float _3440 = _3420 + _3385;
                        float _3441 = _3421 + _3386;
                        float _3445 = inversesqrt(dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441)));
                        float _3449 = dot(vec3(_863, _866, _869), vec3(_3419, _3420, _3421));
                        float _4816 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3452 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                        float _3453 = dot(vec3(_863, _866, _869), vec3(_3445 * _3439, _3445 * _3440, _3445 * _3441));
                        float _4827 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3456 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                        float _3460 = ((_3456 * _3456) * (_3438 + (-1.0))) + 1.0;
                        float _3461 = _3397 * _3437;
                        float _3462 = _3461 * _3461;
                        float _3465 = ((1.0 - _3462) * _3387) + _3462;
                        float _4838 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3466 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                        float _3467 = 1.0 - _3437;
                        float _3477 = (0.5 / (((_3466 * ((_3452 * _3467) + _3437)) + 9.9999999392252902907785028219223e-09) + (((_3466 * _3467) + _3437) * _3452))) * _3466;
                        float _4849 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3488 = (((_3438 * 3.1415927410125732421875) * (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) / ((_3460 * _3460) * ((_3404 * 2.1991131305694580078125) + 3.141590118408203125))) * _3393;
                        _3241 = (_3408 * _3356.x) + _3314;
                        _3242 = (_3408 * _3356.y) + _3315;
                        _3243 = (_3408 * _3356.z) + _3316;
                        _3238 = (_3488 * _3373.x) + _3311;
                        _3239 = (_3488 * _3373.y) + _3312;
                        _3240 = (_3488 * _3373.z) + _3313;
                        if (_3318 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3311 = _3238;
                            _3312 = _3239;
                            _3313 = _3240;
                            _3314 = _3241;
                            _3315 = _3242;
                            _3316 = _3243;
                            _3317 = _3318;
                        }
                    }
                    frontier_phi_71_pred = _3243;
                    frontier_phi_71_pred_1 = _3242;
                    frontier_phi_71_pred_2 = _3241;
                    frontier_phi_71_pred_3 = _3240;
                    frontier_phi_71_pred_4 = _3239;
                    frontier_phi_71_pred_5 = _3238;
                }
                _3024 = frontier_phi_71_pred;
                _3022 = frontier_phi_71_pred_1;
                _3020 = frontier_phi_71_pred_2;
                _3018 = frontier_phi_71_pred_3;
                _3016 = frontier_phi_71_pred_4;
                _3014 = frontier_phi_71_pred_5;
                uint _3173 = _3172 + 1u;
                if (_3173 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3166 = _3014;
                    _3167 = _3016;
                    _3168 = _3018;
                    _3169 = _3020;
                    _3170 = _3022;
                    _3171 = _3024;
                    _3172 = _3173;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3013 = _3014;
            _3015 = _3016;
            _3017 = _3018;
            _3019 = _3020;
            _3021 = _3022;
            _3023 = _3024;
        }
        uvec4 _3027 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3028 = _3027.z;
        uint _3030 = (_3028 >> 8u) & 15u;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        if (((4294967295u << _3030) & _2933) == 0u)
        {
            _3134 = _3013;
            _3136 = _3015;
            _3138 = _3017;
            _3140 = _3019;
            _3142 = _3021;
            _3144 = _3023;
        }
        else
        {
            float _3159 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
            float _3160 = _3159 * _2011;
            float _3161 = _3159 * _2012;
            float _3162 = _3159 * _2013;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3030 < ((_3028 >> 12u) & 15u))
            {
                float _3135;
                float _3137;
                float _3139;
                float _3141;
                float _3143;
                float _3145;
                float _3294 = _3013;
                float _3295 = _3015;
                float _3296 = _3017;
                float _3297 = _3019;
                float _3298 = _3021;
                float _3299 = _3023;
                uint _3300 = _3030;
                uint _3309;
                bool _3310;
                for (;;)
                {
                    _3309 = texelFetch(g_lightClassification, int((((_2927 << 5u) + (_2913 << 9u)) + (_3300 << 2u)) >> 2u)).x;
                    _3310 = _3309 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3310)
                    {
                        frontier_phi_82_pred = _3299;
                        frontier_phi_82_pred_1 = _3298;
                        frontier_phi_82_pred_2 = _3297;
                        frontier_phi_82_pred_3 = _3296;
                        frontier_phi_82_pred_4 = _3295;
                        frontier_phi_82_pred_5 = _3294;
                    }
                    else
                    {
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3796;
                        float _3797;
                        float _3798;
                        float _3799;
                        float _3800;
                        float _3801;
                        float _3515 = _3294;
                        float _3516 = _3295;
                        float _3517 = _3296;
                        float _3518 = _3297;
                        float _3519 = _3298;
                        float _3520 = _3299;
                        uint _3521 = _3309;
                        uint _3522;
                        vec4 _3547;
                        float _3548;
                        vec4 _3563;
                        vec3 _3575;
                        vec4 _3590;
                        vec4 _3605;
                        float _3652;
                        bool _3653;
                        for (;;)
                        {
                            uint _3532 = ((_3300 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3521));
                            _3522 = (_3521 + 4294967295u) & _3521;
                            uint _3534 = _3532 * 40u;
                            _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            _3548 = _3547.w;
                            uint _3550 = (_3532 * 40u) + 4u;
                            _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            uint _3565 = (_3532 * 40u) + 8u;
                            _3575 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x));
                            uint _3577 = (_3532 * 40u) + 16u;
                            _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            uint _3592 = (_3532 * 40u) + 20u;
                            _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            uint _3608 = (_3532 * 40u) + 24u;
                            vec4 _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            uint _3627 = (_3532 * 40u) + 28u;
                            vec4 _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            _3652 = fma(_2013, _3640.z, fma(_2012, _3640.y, _3640.x * _2011)) + _3640.w;
                            _3653 = !((fma(_2013, _3621.z, fma(_2012, _3621.y, _3621.x * _2011)) + _3621.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3653)
                            {
                                float _3680 = _3547.x - _2011;
                                float _3681 = _3547.y - _2012;
                                float _3682 = _3547.z - _2013;
                                float _3683 = dot(vec3(_3680, _3681, _3682), vec3(_3680, _3681, _3682));
                                float _3686 = inversesqrt(_3683);
                                float _3687 = _3686 * _3680;
                                float _3688 = _3686 * _3681;
                                float _3689 = _3686 * _3682;
                                float _3693 = 1.0 - (_3683 / (_3548 * _3548));
                                float _4860 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3694 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3698 = sqrt(_3683) * _3563.w;
                                float _3700 = 1.39999997615814208984375 / (_3698 + 1.39999997615814208984375);
                                float _3701 = _3700 * _3700;
                                float _3704 = ((1.0 - _3701) * dot(vec3(_3687, _3688, _3689), vec3(_863, _866, _869))) + _3701;
                                float _3707 = _3698 * _3698;
                                float _3711 = (fma(_2013, _3590.z, fma(_2012, _3590.y, _3590.x * _2011)) + _3590.w) / _3652;
                                float _3712 = (fma(_2013, _3605.z, fma(_2012, _3605.y, _3605.x * _2011)) + _3605.w) / _3652;
                                float _3716 = 1.0 - dot(vec2(_3711, _3712), vec2(_3711, _3712));
                                float _4876 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3717 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3718 = _3717 * (((isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0))) * _3694) / ((_3707 * 0.699999988079071044921875) + 1.0));
                                float _3730 = exp2(log2(1.0 / ((_3707 * 3.5) + 5.0)) * 0.25);
                                float _3731 = 1.0 - _923;
                                float _3738 = sqrt(1.0 - ((1.0 - (_3731 * _3731)) * (1.0 - (_3730 * _3730))));
                                float _3739 = _3738 * _3738;
                                float _3740 = _3739 * _3739;
                                float _3741 = _3687 - _3160;
                                float _3742 = _3688 - _3161;
                                float _3743 = _3689 - _3162;
                                float _3747 = inversesqrt(dot(vec3(_3741, _3742, _3743), vec3(_3741, _3742, _3743)));
                                float _3751 = dot(vec3(_863, _866, _869), vec3((-0.0) - _3160, (-0.0) - _3161, (-0.0) - _3162));
                                float _4887 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3754 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                                float _3755 = dot(vec3(_863, _866, _869), vec3(_3747 * _3741, _3747 * _3742, _3747 * _3743));
                                float _4898 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3758 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                                float _3762 = ((_3758 * _3758) * (_3740 + (-1.0))) + 1.0;
                                float _3763 = _3700 * _3739;
                                float _3764 = _3763 * _3763;
                                float _3770 = ((1.0 - _3764) * dot(vec3(_863, _866, _869), vec3(_3687, _3688, _3689))) + _3764;
                                float _4909 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3771 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                                float _3772 = 1.0 - _3739;
                                float _3782 = (0.5 / (((_3771 * ((_3754 * _3772) + _3739)) + 9.9999999392252902907785028219223e-09) + (((_3771 * _3772) + _3739) * _3754))) * _3771;
                                float _4920 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3792 = (_3717 * _3694) * (((_3740 * 3.1415927410125732421875) * (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0)))) / ((_3762 * _3762) * ((_3707 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3718 * _3563.z;
                                frontier_phi_88_pred_1 = _3718 * _3563.y;
                                frontier_phi_88_pred_2 = _3718 * _3563.x;
                                frontier_phi_88_pred_3 = _3792 * _3575.z;
                                frontier_phi_88_pred_4 = _3792 * _3575.y;
                                frontier_phi_88_pred_5 = _3792 * _3575.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3801 = frontier_phi_88_pred;
                            _3800 = frontier_phi_88_pred_1;
                            _3799 = frontier_phi_88_pred_2;
                            _3798 = frontier_phi_88_pred_3;
                            _3797 = frontier_phi_88_pred_4;
                            _3796 = frontier_phi_88_pred_5;
                            _3505 = _3799 + _3518;
                            _3506 = _3800 + _3519;
                            _3507 = _3801 + _3520;
                            _3502 = _3796 + _3515;
                            _3503 = _3797 + _3516;
                            _3504 = _3798 + _3517;
                            if (_3522 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3505;
                                _3519 = _3506;
                                _3520 = _3507;
                                _3521 = _3522;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3507;
                        frontier_phi_82_pred_1 = _3506;
                        frontier_phi_82_pred_2 = _3505;
                        frontier_phi_82_pred_3 = _3504;
                        frontier_phi_82_pred_4 = _3503;
                        frontier_phi_82_pred_5 = _3502;
                    }
                    _3145 = frontier_phi_82_pred;
                    _3143 = frontier_phi_82_pred_1;
                    _3141 = frontier_phi_82_pred_2;
                    _3139 = frontier_phi_82_pred_3;
                    _3137 = frontier_phi_82_pred_4;
                    _3135 = frontier_phi_82_pred_5;
                    uint _3301 = _3300 + 1u;
                    if (_3301 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3294 = _3135;
                        _3295 = _3137;
                        _3296 = _3139;
                        _3297 = _3141;
                        _3298 = _3143;
                        _3299 = _3145;
                        _3300 = _3301;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3141;
                frontier_phi_63_64_ladder_1 = _3145;
                frontier_phi_63_64_ladder_2 = _3143;
                frontier_phi_63_64_ladder_3 = _3139;
                frontier_phi_63_64_ladder_4 = _3137;
                frontier_phi_63_64_ladder_5 = _3135;
            }
            else
            {
                frontier_phi_63_64_ladder = _3019;
                frontier_phi_63_64_ladder_1 = _3023;
                frontier_phi_63_64_ladder_2 = _3021;
                frontier_phi_63_64_ladder_3 = _3017;
                frontier_phi_63_64_ladder_4 = _3015;
                frontier_phi_63_64_ladder_5 = _3013;
            }
            _3134 = frontier_phi_63_64_ladder_5;
            _3136 = frontier_phi_63_64_ladder_4;
            _3138 = frontier_phi_63_64_ladder_3;
            _3140 = frontier_phi_63_64_ladder;
            _3142 = frontier_phi_63_64_ladder_2;
            _3144 = frontier_phi_63_64_ladder_1;
        }
        float _3149 = isnan(1.0) ? _907 : (isnan(_907) ? 1.0 : min(_907, 1.0));
        _2946 = (_3149 * _3140) + _2477;
        _2948 = (_3149 * _3142) + _2479;
        _2950 = (_3149 * _3144) + _2481;
        _2952 = ((_3134 * 0.039999999105930328369140625) * _3149) + _2800;
        _2954 = ((_3136 * 0.039999999105930328369140625) * _3149) + _2802;
        _2956 = ((_3138 * 0.039999999105930328369140625) * _3149) + _2804;
    }
    else
    {
        _2946 = _2477;
        _2948 = _2479;
        _2950 = _2481;
        _2952 = _2800;
        _2954 = _2802;
        _2956 = _2804;
    }
    float _4936 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _4947 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _4958 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _2973 = ((isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_2946 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _907))) + ((_2952 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1745)) * cbPerFrame._m0[3u].x);
    float _2974 = ((isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_2948 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _907))) + ((_2954 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1745)) * cbPerFrame._m0[3u].x);
    float _2975 = ((isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0))) * (_2950 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _907))) + ((_2956 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1745)) * cbPerFrame._m0[3u].x);
    uint _2976 = _882 + 6u;
    float _2984 = _844 / cbSceneParam._m0[86u].x;
    float _2985 = _845 / cbSceneParam._m0[86u].y;
    vec4 _2999 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2984, _2985, (log2((isnan(cbSceneParam._m0[77u].w) ? _767 : (isnan(_767) ? cbSceneParam._m0[77u].w : min(_767, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3001 = _2999.x;
    float _3002 = _2999.y;
    float _3003 = _2999.z;
    float _3004 = _2999.w;
    float _3076;
    float _3078;
    float _3080;
    float _3082;
    if (_767 > cbSceneParam._m0[78u].w)
    {
        float _3038 = isnan(_767) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _767 : min(cbSceneParam._m0[80u].w, _767));
        float _3039 = _3038 / _767;
        float _3050 = _3039 * _817;
        float _3051 = _818 * _3039;
        float _3052 = (-0.0) - _3051;
        float _3054 = _3039 * _819;
        float _3056 = (cbSceneParam._m0[77u].w * _3052) / _3038;
        float _3057 = _3056 + cbSceneParam._m0[79u].w;
        float _3058 = cbSceneParam._m0[79u].w - _3051;
        float _3064 = sqrt(((_3050 * _3050) + (_3051 * _3051)) + (_3054 * _3054));
        float _3067 = (1.0 - (cbSceneParam._m0[77u].w / _3038)) * _3064;
        float _3072 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3074 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3251;
        if (abs((_3052 - _3056) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3251 = ((((_3057 > 0.0) ? exp2(_3072 * _3057) : (2.0 - exp2(_3074 * _3057))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3067;
        }
        else
        {
            float _3195 = 1.0 / cbSceneParam._m0[80u].x;
            float _3196 = isnan(_3058) ? _3057 : (isnan(_3057) ? _3058 : max(_3057, _3058));
            float _3197 = isnan(_3058) ? _3057 : (isnan(_3057) ? _3058 : min(_3057, _3058));
            float _3206 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : min(_3196, 0.0));
            float _3207 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : min(_3197, 0.0));
            _3251 = ((abs(_3064 / _3052) * cbSceneParam._m0[80u].y) * ((((_3206 - _3207) * 2.0) - ((exp2(_3072 * (isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0)))) - exp2(_3072 * (isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0))))) * _3195)) - ((exp2(_3074 * _3206) - exp2(_3074 * _3207)) * _3195))) + (_3067 * cbSceneParam._m0[80u].z);
        }
        vec4 _3253 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2984, _2985, 1.0), 0.0);
        float _3262 = exp2((_3251 * (-1.44269502162933349609375)) * (1.0 - _3253.w));
        float _3263 = log2(_3262);
        float _3279 = log2(_3004);
        _3076 = (exp2(_3279 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3263 * cbSceneParam._m0[78u].x)) * _3253.x) / cbSceneParam._m0[78u].x)) + _3001;
        _3078 = (exp2(_3279 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3263 * cbSceneParam._m0[78u].y)) * _3253.y) / cbSceneParam._m0[78u].y)) + _3002;
        _3080 = (exp2(_3279 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3263 * cbSceneParam._m0[78u].z)) * _3253.z) / cbSceneParam._m0[78u].z)) + _3003;
        _3082 = _3262 * _3004;
    }
    else
    {
        _3076 = _3001;
        _3078 = _3002;
        _3080 = _3003;
        _3082 = _3004;
    }
    bool _3289;
    vec4 _3092;
    vec4 _3114;
    float _3116;
    float _3120;
    float _3121;
    float _3122;
    float _3123;
    bool _3133;
    for (;;)
    {
        _3092 = cbMatDynParam._m0[0u];
        float _3094 = roundEven(_3092.y);
        bool _3095 = _3094 == 3.0;
        float _3096 = log2(_3082);
        float _3103 = exp2(_3096 * cbSceneParam._m0[78u].x) * _2973;
        float _3104 = exp2(_3096 * cbSceneParam._m0[78u].y) * _2974;
        float _3105 = exp2(_3096 * cbSceneParam._m0[78u].z) * _2975;
        float _3112 = _833 + (-0.5);
        _3114 = cbMtdParam._m0[1u];
        _3116 = _3114.y * _3112;
        float _3119 = (_3094 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3120 = _3119 * (_3095 ? _3103 : (_3103 + (cbSceneParam._m0[72u].w * _3076)));
        _3121 = _3119 * (_3095 ? _3104 : (_3104 + (cbSceneParam._m0[72u].w * _3078)));
        _3122 = _3119 * (_3095 ? _3105 : (_3105 + (cbSceneParam._m0[72u].w * _3080)));
        _3123 = _3112 * 0.999000012874603271484375;
        _3133 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3133)
        {
            if ((cbInstanceData._m0[_882 + 7u].x + _3123) < 0.5)
            {
                _3289 = true;
                break;
            }
        }
        uint _3230 = _883 + uint(_3092.w);
        if ((cbInstanceData._m0[_3230].w < 1.0) && ((cbInstanceData._m0[_3230].w + _3123) < 0.5))
        {
            _3289 = true;
            break;
        }
        if ((_3116 + 1.0) < _3114.x)
        {
            _3289 = true;
            break;
        }
        _3289 = false;
        break;
    }
    float _3493;
    if (_3289)
    {
        discard_state = true;
        _3493 = 0.0;
    }
    else
    {
        _3493 = cbInstanceData._m0[_2976].w;
    }
    SV_Target.x = _3120;
    SV_Target.y = _3121;
    SV_Target.z = _3122;
    SV_Target.w = _3493;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2976].w;
    discard_exit();
}


