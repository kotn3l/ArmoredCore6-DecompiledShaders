#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1279;
float _3665;
float _3666;
float _3667;
float _3668;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _256 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _262 = _256.x * cbMtdParam._m0[10u].x;
    float _263 = _256.y * cbMtdParam._m0[10u].y;
    float _264 = _256.z * cbMtdParam._m0[10u].z;
    vec4 _283 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _330 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x;
    float _341 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _330)) + 1.0;
    float _3677 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _342 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _349 = (_342 * ((_283.x * cbMtdParam._m0[11u].x) - _262)) + _262;
    float _350 = (_342 * ((_283.y * cbMtdParam._m0[11u].y) - _263)) + _263;
    float _351 = (_342 * ((_283.z * cbMtdParam._m0[11u].z) - _264)) + _264;
    vec4 _370 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _400 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _330)) + 1.0;
    float _3688 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _401 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _408 = (_401 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _409 = (_401 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _410 = (_401 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    vec4 _427 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _452 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _330)) + 1.0;
    float _3699 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    vec4 _480 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _488 = ((((_453 * ((_427.x * cbMtdParam._m0[13u].x) - _408)) + _408) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _480.x;
    float _491 = ((((_453 * ((_427.y * cbMtdParam._m0[13u].y) - _409)) + _409) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _480.y;
    float _494 = ((((_453 * ((_427.z * cbMtdParam._m0[13u].z) - _410)) + _410) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _480.z;
    vec4 _515 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _544 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3710 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _545 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _552 = (_545 * ((_515.x * cbMtdParam._m0[14u].x) - _488)) + _488;
    float _553 = (_545 * ((_515.y * cbMtdParam._m0[14u].y) - _491)) + _491;
    float _554 = (_545 * ((_515.z * cbMtdParam._m0[14u].z) - _494)) + _494;
    vec4 _570 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _592 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _610 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _612 = _610.x;
    float _613 = _610.y;
    float _616 = cbMtdParam._m0[16u].w * _610.z;
    float _619 = (((cbMtdParam._m0[17u].x * _592.z) - _616) * _342) + _616;
    vec4 _632 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _641 = (((cbMtdParam._m0[17u].y * _632.z) - _619) * _401) + _619;
    vec4 _654 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _663 = (((cbMtdParam._m0[17u].z * _654.z) - _641) * _453) + _641;
    float _668 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_570.z * cbMtdParam._m0[16u].z) - _663)) + _663;
    float _673 = ((_592.x - _612) * _342) + _612;
    float _674 = ((_592.y - _613) * _342) + _613;
    float _679 = ((_632.x - _673) * _401) + _673;
    float _680 = ((_632.y - _674) * _401) + _674;
    float _689 = ((((_654.x - _679) * _453) + _679) * 2.0) + (-1.0);
    float _690 = ((((_654.y - _680) * _453) + _680) * 2.0) + (-1.0);
    float _691 = dot(vec2(_689, _690), vec2(_689, _690));
    float _3721 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _696 = sqrt(1.0 - (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))));
    float _702 = ((((_570.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _689;
    float _703 = ((((_570.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _690;
    float _706 = fma(_696, _226 * NORMAL.x, fma(_703, _233 * TANGENT.x, (_219 * _211) * _702));
    float _709 = fma(_696, _226 * NORMAL.y, fma(_703, _233 * TANGENT.y, (_219 * _212) * _702));
    float _712 = fma(_696, _226 * NORMAL.z, fma(_703, _233 * TANGENT.z, (_219 * _213) * _702));
    float _716 = inversesqrt(dot(vec3(_706, _709, _712), vec3(_706, _709, _712)));
    float _717 = _716 * _706;
    float _718 = _716 * _709;
    float _719 = _716 * _712;
    float _3732 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _720 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _3743 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _3754 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _3765 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _739 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _789 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _779);
    float _790 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _779);
    float _791 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _779);
    float _795 = inversesqrt(dot(vec3(_789, _790, _791), vec3(_789, _790, _791)));
    float _796 = _789 * _795;
    float _797 = _790 * _795;
    float _798 = _791 * _795;
    vec4 _803 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _805 = _803.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _959 = sqrt(((_789 * _789) + (_790 * _790)) + (_791 * _791));
        float _965 = (cbMatDynParam._m0[5u].x * _959) + cbMatDynParam._m0[5u].y;
        float _3776 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _970 = (cbMatDynParam._m0[5u].z * _959) + cbMatDynParam._m0[5u].w;
        float _3787 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) - _966)) + _966) < ((_805 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _816 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _817 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _835 = fma(_719, cbSceneParam._m0[5u].z, fma(_718, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _717));
    float _838 = fma(_719, cbSceneParam._m0[6u].z, fma(_718, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _717));
    float _841 = fma(_719, cbSceneParam._m0[7u].z, fma(_718, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _717));
    uint _854 = uint(roundEven(NORMAL.w)) * 13u;
    uint _855 = _854 + 9u;
    uint _856 = _855 + uint(cbMatDynParam._m0[0u].w);
    float _862 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) * cbInstanceData._m0[_856].x;
    float _863 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) * cbInstanceData._m0[_856].y;
    float _864 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0)))) * cbInstanceData._m0[_856].z;
    float _3798 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _865 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _3809 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    vec4 _876 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _816, cbSceneParam._m0[86u].y * _817));
    float _879 = _876.x * TEXCOORD_5.w;
    float _880 = dot(vec3(_717, _718, _719), vec3(_796, _797, _798));
    float _883 = _880 * 2.0;
    float _887 = (_883 * _717) - _796;
    float _888 = (_883 * _718) - _797;
    float _889 = (_883 * _719) - _798;
    float _893 = abs(dot(vec3(_796, _797, _798), vec3(_717, _718, _719)));
    float _3831 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _895 = sqrt(_720);
    float _908 = exp2((_895 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_895 * 3.0));
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _944 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _948 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1278;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1003 = fma(_948, cbModelParam._m0[26u].z, fma(_944, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _940));
        float _1007 = fma(_948, cbModelParam._m0[27u].z, fma(_944, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _940));
        float _1011 = fma(_948, cbModelParam._m0[28u].z, fma(_944, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _940));
        float _1036 = _940 + _717;
        float _1037 = _944 + _718;
        float _1038 = _948 + _719;
        float _1048 = fma(_1038, cbModelParam._m0[26u].z, fma(_1037, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1036)) - _1003;
        float _1049 = fma(_1038, cbModelParam._m0[27u].z, fma(_1037, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1036)) - _1007;
        float _1050 = fma(_1038, cbModelParam._m0[28u].z, fma(_1037, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1036)) - _1011;
        float _1054 = inversesqrt(dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050)));
        float _1067 = ((_1054 * _1048) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1003 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1068 = ((_1054 * _1049) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1007 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1069 = ((_1054 * _1050) / cbModelParam._m0[34u].z) + ((((((_1011 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1067, _1068, _1069), 0.0);
        float _1106 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1072.x + (-0.5));
        float _1108 = _1106 * (_1072.y + (-0.5));
        float _1109 = _1106 * (_1072.z + (-0.5));
        float _1116 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1079.x + (-0.5));
        float _1118 = _1116 * (_1079.y + (-0.5));
        float _1119 = _1116 * (_1079.z + (-0.5));
        float _1126 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1086.x + (-0.5));
        float _1128 = _1126 * (_1086.y + (-0.5));
        float _1129 = _1126 * (_1086.z + (-0.5));
        float _1136 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1093.x + (-0.5));
        float _1138 = _1136 * (_1093.y + (-0.5));
        float _1139 = _1136 * (_1093.z + (-0.5));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = _1107 * 0.5;
        float _1144 = _1117 * 0.5;
        float _1145 = _1127 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1160 = (dot(vec3(_717, _718, _719), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1170 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3879 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1172 + 1.0))) + _1177) * _1140;
        float _1187 = _1108 * 0.5;
        float _1188 = _1118 * 0.5;
        float _1189 = _1128 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_717, _718, _719), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3912 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1214 + 1.0))) + _1219) * _1141;
        float _1229 = _1109 * 0.5;
        float _1230 = _1119 * 0.5;
        float _1231 = _1129 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_717, _718, _719), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3945 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1256 + 1.0))) + _1261) * _1142;
        _1278 = _1109;
        _1280 = _1108;
        _1281 = _1107;
        _1282 = _1119;
        _1283 = _1118;
        _1284 = _1117;
        _1285 = _1129;
        _1286 = _1128;
        _1287 = _1127;
        _1288 = _1142;
        _1289 = _1141;
        _1290 = _1140;
        _1291 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1292 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1293 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
    }
    else
    {
        _1278 = _1279;
        _1280 = _1279;
        _1281 = _1279;
        _1282 = _1279;
        _1283 = _1279;
        _1284 = _1279;
        _1285 = _1279;
        _1286 = _1279;
        _1287 = _1279;
        _1288 = _1279;
        _1289 = _1279;
        _1290 = _1279;
        _1291 = 0.0;
        _1292 = 0.0;
        _1293 = 0.0;
    }
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1322 = fma(_948, cbModelParam._m0[30u].z, fma(_944, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _940));
        float _1326 = fma(_948, cbModelParam._m0[31u].z, fma(_944, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _940));
        float _1330 = fma(_948, cbModelParam._m0[32u].z, fma(_944, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _940));
        float _1353 = _940 + _717;
        float _1354 = _944 + _718;
        float _1355 = _948 + _719;
        float _1365 = fma(_1355, cbModelParam._m0[30u].z, fma(_1354, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1353)) - _1322;
        float _1366 = fma(_1355, cbModelParam._m0[31u].z, fma(_1354, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1353)) - _1326;
        float _1367 = fma(_1355, cbModelParam._m0[32u].z, fma(_1354, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1353)) - _1330;
        float _1371 = inversesqrt(dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367)));
        float _1384 = ((_1371 * _1365) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1322 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1385 = ((_1371 * _1366) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1326 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1386 = ((_1371 * _1367) / cbModelParam._m0[35u].z) + ((((((_1330 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        float _1421 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1388.x + (-0.5));
        float _1423 = _1421 * (_1388.y + (-0.5));
        float _1424 = _1421 * (_1388.z + (-0.5));
        float _1431 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1395.x + (-0.5));
        float _1433 = _1431 * (_1395.y + (-0.5));
        float _1434 = _1431 * (_1395.z + (-0.5));
        float _1441 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1402.x + (-0.5));
        float _1443 = _1441 * (_1402.y + (-0.5));
        float _1444 = _1441 * (_1402.z + (-0.5));
        float _1451 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1409.x + (-0.5));
        float _1453 = _1451 * (_1409.y + (-0.5));
        float _1454 = _1451 * (_1409.z + (-0.5));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = _1422 * 0.5;
        float _1459 = _1432 * 0.5;
        float _1460 = _1442 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_717, _718, _719), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4008 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1485 + 1.0))) + _1490) * _1455;
        float _1500 = _1423 * 0.5;
        float _1501 = _1433 * 0.5;
        float _1502 = _1443 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_717, _718, _719), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4041 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1527 + 1.0))) + _1532) * _1456;
        float _1542 = _1424 * 0.5;
        float _1543 = _1434 * 0.5;
        float _1544 = _1444 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_717, _718, _719), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4074 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1569 + 1.0))) + _1574) * _1457;
        _1591 = _1424;
        _1592 = _1423;
        _1593 = _1422;
        _1594 = _1434;
        _1595 = _1433;
        _1596 = _1432;
        _1597 = _1444;
        _1598 = _1443;
        _1599 = _1442;
        _1600 = _1457;
        _1601 = _1456;
        _1602 = _1455;
        _1603 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1604 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
    }
    else
    {
        _1591 = _1279;
        _1592 = _1279;
        _1593 = _1279;
        _1594 = _1279;
        _1595 = _1279;
        _1596 = _1279;
        _1597 = _1279;
        _1598 = _1279;
        _1599 = _1279;
        _1600 = _1279;
        _1601 = _1279;
        _1602 = _1279;
        _1603 = 0.0;
        _1604 = 0.0;
        _1605 = 0.0;
    }
    float _1615 = (cbModelParam._m0[1u].x * (_1603 - _1291)) + _1291;
    float _1616 = (cbModelParam._m0[1u].x * (_1604 - _1292)) + _1292;
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1293)) + _1293;
    float _1638 = fma(_1617, cbSceneParam._m0[89u].z, fma(_1616, cbSceneParam._m0[89u].y, _1615 * cbSceneParam._m0[89u].x));
    float _1641 = fma(_1617, cbSceneParam._m0[90u].z, fma(_1616, cbSceneParam._m0[90u].y, _1615 * cbSceneParam._m0[90u].x));
    float _1644 = fma(_1617, cbSceneParam._m0[91u].z, fma(_1616, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1615));
    float _1659 = _887 * 0.5;
    float _1660 = _888 * 0.5;
    float _1661 = _889 * 0.5;
    float _1662 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1665 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1592, _1595, _1598, _1601));
    float _1668 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1591, _1594, _1597, _1600));
    float _1702;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1675 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1278, _1282, _1285, _1288));
        float _1679 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1280, _1283, _1286, _1289));
        float _1683 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1281, _1284, _1287, _1290));
        float _1690 = dot(vec4(cbModelParam._m0[39u]), vec4(_1659, _1660, _1661, 1.0));
        _1702 = dot(vec3(isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1690) ? 0.0 : (isnan(0.0) ? _1690 : max(0.0, _1690))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1702 = 1.0;
    }
    float _1713;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1704 = dot(vec4(cbModelParam._m0[40u]), vec4(_1659, _1660, _1661, 1.0));
        _1713 = dot(vec3(isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1704) ? 0.0 : (isnan(0.0) ? _1704 : max(0.0, _1704))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1713 = 1.0;
    }
    float _1717 = (_1713 * cbModelParam._m0[1u].x) + (_1702 * (1.0 - cbModelParam._m0[1u].x));
    float _1727 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _720);
    float _1728 = isnan(_1727) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1727 : min(cbModelParam._m0[25u].z, _1727));
    float _1808;
    float _1810;
    float _1812;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1775 = fma(_948, cbModelParam._m0[13u].z, fma(_944, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _940)) + cbModelParam._m0[13u].w;
        float _1779 = fma(_948, cbModelParam._m0[14u].z, fma(_944, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _940)) + cbModelParam._m0[14u].w;
        float _1783 = fma(_948, cbModelParam._m0[15u].z, fma(_944, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _940)) + cbModelParam._m0[15u].w;
        float _1786 = fma(_889, cbModelParam._m0[13u].z, fma(_888, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _887));
        float _1789 = fma(_889, cbModelParam._m0[14u].z, fma(_888, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _887));
        float _1792 = fma(_889, cbModelParam._m0[15u].z, fma(_888, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _887));
        float _1820;
        if (_1786 > 0.0)
        {
            _1820 = abs((1.0 - _1775) / _1786);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1775 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1820 = frontier_phi_17_15_ladder;
        }
        float _2043;
        if (_1789 > 0.0)
        {
            _2043 = abs((1.0 - _1779) / _1789);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1779 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2043 = frontier_phi_26_22_ladder;
        }
        float _2289;
        if (_1792 > 0.0)
        {
            _2289 = abs((1.0 - _1783) / _1792);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1783 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2289 = frontier_phi_38_33_ladder;
        }
        float _2291 = isnan(_2043) ? _1820 : (isnan(_1820) ? _2043 : min(_1820, _2043));
        float _2292 = isnan(_2289) ? _2291 : (isnan(_2291) ? _2289 : min(_2291, _2289));
        float _2296 = (_2292 * _1786) + _1775;
        float _2297 = (_2292 * _1789) + _1779;
        float _2298 = (_2292 * _1792) + _1783;
        float _2299 = _2292 * 9.9999997473787516355514526367188e-05;
        float _2301 = (-1.0) - _2299;
        float _2303 = _2299 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2298 > _2303) || ((_2298 < _2301) || ((_2297 > _2303) || ((_2297 < _2301) || ((_2296 < _2301) || (_2296 > _2303))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2422 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2298, cbModelParam._m0[9u].z, fma(_2297, cbModelParam._m0[9u].y, _2296 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2298, cbModelParam._m0[10u].z, fma(_2297, cbModelParam._m0[10u].y, _2296 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2298, cbModelParam._m0[11u].z, fma(_2297, cbModelParam._m0[11u].y, _2296 * cbModelParam._m0[11u].x))), _1728);
            frontier_phi_16_38_ladder = _2422.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2422.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2422.x * cbModelParam._m0[1u].y;
        }
        _1808 = frontier_phi_16_38_ladder_2;
        _1810 = frontier_phi_16_38_ladder_1;
        _1812 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1796 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_887, _888, _889), _1728);
        _1808 = _1796.x * cbModelParam._m0[1u].y;
        _1810 = _1796.y * cbModelParam._m0[1u].y;
        _1812 = _1796.z * cbModelParam._m0[1u].y;
    }
    float _1816 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _720);
    float _1817 = isnan(_1816) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1816 : min(cbModelParam._m0[25u].w, _1816));
    float _1908;
    float _1910;
    float _1912;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1872 = fma(_948, cbModelParam._m0[21u].z, fma(_944, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _940)) + cbModelParam._m0[21u].w;
        float _1876 = fma(_948, cbModelParam._m0[22u].z, fma(_944, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _940)) + cbModelParam._m0[22u].w;
        float _1880 = fma(_948, cbModelParam._m0[23u].z, fma(_944, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _940)) + cbModelParam._m0[23u].w;
        float _1883 = fma(_889, cbModelParam._m0[21u].z, fma(_888, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _887));
        float _1886 = fma(_889, cbModelParam._m0[22u].z, fma(_888, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _887));
        float _1889 = fma(_889, cbModelParam._m0[23u].z, fma(_888, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _887));
        float _2048;
        if (_1883 > 0.0)
        {
            _2048 = abs((1.0 - _1872) / _1883);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1872 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2048 = frontier_phi_28_24_ladder;
        }
        float _2316;
        if (_1886 > 0.0)
        {
            _2316 = abs((1.0 - _1876) / _1886);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1876 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2316 = frontier_phi_40_35_ladder;
        }
        float _2521;
        if (_1889 > 0.0)
        {
            _2521 = abs((1.0 - _1880) / _1889);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1880 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2521 = frontier_phi_49_46_ladder;
        }
        float _2523 = isnan(_2316) ? _2048 : (isnan(_2048) ? _2316 : min(_2048, _2316));
        float _2524 = isnan(_2521) ? _2523 : (isnan(_2523) ? _2521 : min(_2523, _2521));
        float _2528 = (_2524 * _1883) + _1872;
        float _2529 = (_2524 * _1886) + _1876;
        float _2530 = (_2524 * _1889) + _1880;
        float _2531 = _2524 * 9.9999997473787516355514526367188e-05;
        float _2532 = (-1.0) - _2531;
        float _2534 = _2531 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2530 > _2534) || ((_2530 < _2532) || ((_2529 > _2534) || ((_2529 < _2532) || ((_2528 < _2532) || (_2528 > _2534))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2729 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2530, cbModelParam._m0[17u].z, fma(_2529, cbModelParam._m0[17u].y, _2528 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2530, cbModelParam._m0[18u].z, fma(_2529, cbModelParam._m0[18u].y, _2528 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2530, cbModelParam._m0[19u].z, fma(_2529, cbModelParam._m0[19u].y, _2528 * cbModelParam._m0[19u].x))), _1817);
            frontier_phi_25_49_ladder = _2729.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2729.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2729.x * cbModelParam._m0[1u].z;
        }
        _1908 = frontier_phi_25_49_ladder_2;
        _1910 = frontier_phi_25_49_ladder_1;
        _1912 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1892 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_887, _888, _889), _1817);
        _1908 = _1892.x * cbModelParam._m0[1u].z;
        _1910 = _1892.y * cbModelParam._m0[1u].z;
        _1912 = _1892.z * cbModelParam._m0[1u].z;
    }
    float _1924 = ((((1.0 - _908) * ((_895 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_908 * _895)) * _879;
    float _1925 = _1924 * ((cbModelParam._m0[1u].w * (_1908 - _1808)) + _1808);
    float _1926 = _1924 * ((cbModelParam._m0[1u].w * (_1910 - _1810)) + _1810);
    float _1927 = _1924 * ((cbModelParam._m0[1u].w * (_1912 - _1812)) + _1812);
    float _1930 = fma(_1927, cbSceneParam._m0[89u].z, fma(_1926, cbSceneParam._m0[89u].y, _1925 * cbSceneParam._m0[89u].x));
    float _1933 = fma(_1927, cbSceneParam._m0[90u].z, fma(_1926, cbSceneParam._m0[90u].y, _1925 * cbSceneParam._m0[90u].x));
    float _1936 = fma(_1927, cbSceneParam._m0[91u].z, fma(_1926, cbSceneParam._m0[91u].y, _1925 * cbSceneParam._m0[91u].x));
    vec4 _1944 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_816, _817));
    float _1946 = _1944.w;
    float _1958 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1946);
    float _1959 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1946);
    float _1960 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1946);
    uvec4 _1964 = floatBitsToUint(cbInstanceData._m0[_854 + 5u]);
    uint _1966 = _1964.x * 14u;
    uint _1967 = _1966 + 13u;
    float _1974 = _879 + (-1.0);
    float _1979 = (cbLight._m0[_1967].x * _1974) + 1.0;
    float _1980 = (cbLight._m0[_1967].y * _1974) + 1.0;
    float _1981 = (cbLight._m0[_1967].z * _1974) + 1.0;
    float _1982 = (cbLight._m0[_1967].w * _1974) + 1.0;
    uint _1983 = _1966 + 5u;
    float _1989 = isnan(1.0) ? _1980 : (isnan(_1980) ? 1.0 : min(_1980, 1.0));
    uint _1993 = _1966 + 4u;
    float _2002 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
    uint _2006 = _1966 | 1u;
    float _2017 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_717, _718, _719));
    float _2020 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_717, _718, _719));
    float _4210 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _4221 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2025 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * 0.3183098733425140380859375;
    float _2027 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * 0.3183098733425140380859375;
    float _2034 = ((cbLight._m0[_1983].x * _1989) * _2027) + (((cbLight._m0[_1993].x * _1958) * _2002) * _2025);
    float _2035 = ((_1989 * cbLight._m0[_1983].y) * _2027) + (((cbLight._m0[_1993].y * _1959) * _2002) * _2025);
    float _2036 = ((_1989 * cbLight._m0[_1983].z) * _2027) + (((cbLight._m0[_1993].z * _1960) * _2002) * _2025);
    uvec4 _2040 = floatBitsToUint(cbLight._m0[_1966 + 12u]);
    bool _2042 = _2040.x == 0u;
    float _2053;
    float _2055;
    float _2057;
    if (_2042)
    {
        _2053 = _2034;
        _2055 = _2035;
        _2057 = _2036;
    }
    else
    {
        uint _2061 = _1966 + 6u;
        float _2077 = (dot(vec3(cbLight._m0[_1966 + 2u].xyz), vec3(_717, _718, _719)) * 0.5) + 0.5;
        float _2078 = _2077 * _2077;
        float _4232 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2079 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2080 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
        _2053 = (((cbLight._m0[_2061].x * 0.3183098733425140380859375) * _2079) * _2080) + _2034;
        _2055 = (((cbLight._m0[_2061].y * 0.3183098733425140380859375) * _2079) * _2080) + _2035;
        _2057 = (((cbLight._m0[_2061].z * 0.3183098733425140380859375) * _2079) * _2080) + _2036;
    }
    bool _2060 = _2040.y == 0u;
    float _2098;
    float _2100;
    float _2102;
    if (_2060)
    {
        _2098 = _2053;
        _2100 = _2055;
        _2102 = _2057;
    }
    else
    {
        uint _2260 = _1966 + 7u;
        float _2276 = (dot(vec3(cbLight._m0[_1966 + 3u].xyz), vec3(_717, _718, _719)) * 0.5) + 0.5;
        float _2277 = _2276 * _2276;
        float _4248 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2278 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2279 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
        _2098 = (((cbLight._m0[_2260].x * 0.3183098733425140380859375) * _2278) * _2279) + _2053;
        _2100 = (((cbLight._m0[_2260].y * 0.3183098733425140380859375) * _2278) * _2279) + _2055;
        _2102 = (((cbLight._m0[_2260].z * 0.3183098733425140380859375) * _2278) * _2279) + _2057;
    }
    uint _2105 = _1966 + 8u;
    float _2118 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1966].w)) * _720) * 0.949999988079071044921875);
    float _2119 = _2118 * _2118;
    float _2120 = cbLight._m0[_1966].x + _796;
    float _2121 = cbLight._m0[_1966].y + _797;
    float _2122 = cbLight._m0[_1966].z + _798;
    float _2126 = inversesqrt(dot(vec3(_2120, _2121, _2122), vec3(_2120, _2121, _2122)));
    float _2127 = _2126 * _2120;
    float _2128 = _2126 * _2121;
    float _2129 = _2126 * _2122;
    float _2130 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_1966].xyz));
    float _4264 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _4275 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _2134 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _2135 = dot(vec3(_717, _718, _719), vec3(_2127, _2128, _2129));
    float _4286 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2138 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _2139 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_2127, _2128, _2129));
    float _4297 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2143 = _2119 * _2119;
    float _2147 = ((_2138 * _2138) * (_2143 + (-1.0))) + 1.0;
    float _2158 = (exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2159 = 1.0 - _2119;
    float _2170 = (0.5 / (((_2134 * ((_2133 * _2159) + _2119)) + 9.9999999392252902907785028219223e-09) + (((_2134 * _2159) + _2119) * _2133))) * _2133;
    float _4308 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2172 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2143 / ((_2147 * _2147) * 3.141590118408203125));
    uint _2186 = _1966 + 9u;
    float _2197 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2006].w)) * _720) * 0.949999988079071044921875);
    float _2198 = _2197 * _2197;
    float _2199 = cbLight._m0[_2006].x + _796;
    float _2200 = cbLight._m0[_2006].y + _797;
    float _2201 = cbLight._m0[_2006].z + _798;
    float _2205 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
    float _2206 = _2205 * _2199;
    float _2207 = _2205 * _2200;
    float _2208 = _2205 * _2201;
    float _2209 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_2006].xyz));
    float _4319 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _2213 = dot(vec3(_717, _718, _719), vec3(_2206, _2207, _2208));
    float _4330 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2216 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _2217 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_2206, _2207, _2208));
    float _4341 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2221 = _2198 * _2198;
    float _2225 = ((_2216 * _2216) * (_2221 + (-1.0))) + 1.0;
    float _2234 = (exp2(log2(1.0 - (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2235 = 1.0 - _2198;
    float _2245 = (0.5 / (((_2134 * ((_2212 * _2235) + _2198)) + 9.9999999392252902907785028219223e-09) + (((_2134 * _2235) + _2198) * _2212))) * _2212;
    float _4352 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2247 = (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_2221 / ((_2225 * _2225) * 3.141590118408203125));
    float _2257 = (((_2234 * cbLight._m0[_2186].x) * _2247) * _1989) + ((((cbLight._m0[_2105].x * _1958) * _2158) * _2172) * _2002);
    float _2258 = (((_2234 * cbLight._m0[_2186].y) * _2247) * _1989) + ((((cbLight._m0[_2105].y * _1959) * _2158) * _2172) * _2002);
    float _2259 = (((_2234 * cbLight._m0[_2186].z) * _2247) * _1989) + ((((cbLight._m0[_2105].z * _1960) * _2158) * _2172) * _2002);
    float _2321;
    float _2323;
    float _2325;
    if (_2042)
    {
        _2321 = _2257;
        _2323 = _2258;
        _2325 = _2259;
    }
    else
    {
        uint _2327 = _1966 + 2u;
        uint _2331 = _1966 + 10u;
        float _2345 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2327].w)) * _720) * 0.949999988079071044921875);
        float _2346 = _2345 * _2345;
        float _2347 = cbLight._m0[_2327].x + _796;
        float _2348 = cbLight._m0[_2327].y + _797;
        float _2349 = cbLight._m0[_2327].z + _798;
        float _2353 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
        float _2354 = _2353 * _2347;
        float _2355 = _2353 * _2348;
        float _2356 = _2353 * _2349;
        float _2357 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_2327].xyz));
        float _4363 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2360 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2361 = dot(vec3(_717, _718, _719), vec3(_2354, _2355, _2356));
        float _4374 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2364 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2365 = dot(vec3(cbLight._m0[_2327].xyz), vec3(_2354, _2355, _2356));
        float _4385 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2369 = _2346 * _2346;
        float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
        float _2382 = (exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2383 = 1.0 - _2346;
        float _2393 = (0.5 / (((_2134 * ((_2360 * _2383) + _2346)) + 9.9999999392252902907785028219223e-09) + (((_2134 * _2383) + _2346) * _2360))) * _2360;
        float _4396 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2395 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
        float _2396 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
        _2321 = (((_2382 * cbLight._m0[_2331].x) * _2395) * _2396) + _2257;
        _2323 = (((_2382 * cbLight._m0[_2331].y) * _2395) * _2396) + _2258;
        _2325 = (((_2382 * cbLight._m0[_2331].z) * _2395) * _2396) + _2259;
    }
    float _2431;
    float _2433;
    float _2435;
    if (_2060)
    {
        _2431 = _2321;
        _2433 = _2323;
        _2435 = _2325;
    }
    else
    {
        uint _2442 = _1966 + 3u;
        uint _2446 = _1966 + 11u;
        float _2460 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2442].w)) * _720) * 0.949999988079071044921875);
        float _2461 = _2460 * _2460;
        float _2462 = cbLight._m0[_2442].x + _796;
        float _2463 = cbLight._m0[_2442].y + _797;
        float _2464 = cbLight._m0[_2442].z + _798;
        float _2468 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
        float _2469 = _2468 * _2462;
        float _2470 = _2468 * _2463;
        float _2471 = _2468 * _2464;
        float _2472 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_2442].xyz));
        float _4412 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2476 = dot(vec3(_717, _718, _719), vec3(_2469, _2470, _2471));
        float _4423 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2480 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_2469, _2470, _2471));
        float _4434 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2484 = _2461 * _2461;
        float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
        float _2497 = (exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2498 = 1.0 - _2461;
        float _2508 = (0.5 / (((_2134 * ((_2475 * _2498) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2134 * _2498) + _2461) * _2475))) * _2475;
        float _4445 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2510 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
        float _2511 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
        _2431 = (((_2497 * cbLight._m0[_2446].x) * _2510) * _2511) + _2321;
        _2433 = (((_2497 * cbLight._m0[_2446].y) * _2510) * _2511) + _2323;
        _2435 = (((_2497 * cbLight._m0[_2446].z) * _2510) * _2511) + _2325;
    }
    float _2646;
    float _2648;
    float _2650;
    float _2652;
    float _2654;
    float _2656;
    if (_1964.y == 0u)
    {
        float _2586 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2587 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2586;
        float _2588 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2586;
        float _2589 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2586;
        uvec4 _2601 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2602 = _2601.x;
        uint _2613 = uint((float(_2601.y) * floor(float(uint(cbSceneParam._m0[85u].y * _817) / _2602))) + floor(float(uint(cbSceneParam._m0[85u].x * _816) / _2602)));
        float _2623 = (log2(_2589 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2624 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        uint _2627 = uint(isnan(14.0) ? _2624 : (isnan(_2624) ? 14.0 : min(_2624, 14.0)));
        uvec4 _2632 = texelFetch(g_lightClusterGridBuffer, int(((_2627 << 2u) + (_2613 << 6u)) >> 2u));
        uint _2633 = _2632.x;
        uint _2634 = _2601.z;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        if (((((1u << ((_2634 >> 4u) & 15u)) + 4294967295u) & _2633) == 0u) || ((_2634 & 240u) == 0u))
        {
            _2734 = 0.0;
            _2736 = 0.0;
            _2738 = 0.0;
            _2740 = 0.0;
            _2742 = 0.0;
            _2744 = 0.0;
        }
        else
        {
            float _2735;
            float _2737;
            float _2739;
            float _2741;
            float _2743;
            float _2745;
            float _2887 = 0.0;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            uint _2893 = 0u;
            uint _2902;
            bool _2903;
            for (;;)
            {
                _2902 = texelFetch(g_lightClassification, int((((_2627 << 5u) + (_2613 << 9u)) + (_2893 << 2u)) >> 2u)).x;
                _2903 = _2902 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2903)
                {
                    frontier_phi_66_pred = _2887;
                    frontier_phi_66_pred_1 = _2892;
                    frontier_phi_66_pred_2 = _2891;
                    frontier_phi_66_pred_3 = _2890;
                    frontier_phi_66_pred_4 = _2889;
                    frontier_phi_66_pred_5 = _2888;
                }
                else
                {
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    uint _3038;
                    _3032 = _2887;
                    _3033 = _2888;
                    _3034 = _2889;
                    _3035 = _2890;
                    _3036 = _2891;
                    _3037 = _2892;
                    _3038 = _2902;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    for (;;)
                    {
                        uint _3042 = uint(findLSB(_3038)) + (_2893 << 5u);
                        uint _3039 = (_3038 + 4294967295u) & _3038;
                        uint _3044 = _3042 * 48u;
                        vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3044)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 3u)).x));
                        uint _3064 = (_3042 * 48u) + 4u;
                        vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3064)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 3u)).x));
                        uint _3083 = (_3042 * 48u) + 8u;
                        vec3 _3094 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3083)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 2u)).x));
                        float _3098 = _3058.x - _2587;
                        float _3099 = _3058.y - _2588;
                        float _3100 = _3058.z - _2589;
                        float _3101 = dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100));
                        float _3104 = inversesqrt(_3101);
                        float _3105 = _3104 * _3098;
                        float _3106 = _3104 * _3099;
                        float _3107 = _3104 * _3100;
                        float _3108 = dot(vec3(_835, _838, _841), vec3(_3105, _3106, _3107));
                        float _3113 = 1.0 - (_3101 * _3058.w);
                        float _4471 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3114 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                        float _3115 = sqrt(_3101) * _3077.w;
                        float _3118 = 1.39999997615814208984375 / (_3115 + 1.39999997615814208984375);
                        float _3119 = _3118 * _3118;
                        float _3122 = ((1.0 - _3119) * _3108) + _3119;
                        float _3125 = _3115 * _3115;
                        float _3129 = ((isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0))) * _3114) / ((_3125 * 0.699999988079071044921875) + 1.0);
                        float _3133 = (-0.0) - _2587;
                        float _3134 = (-0.0) - _2588;
                        float _3135 = (-0.0) - _2589;
                        float _3139 = inversesqrt(dot(vec3(_3133, _3134, _3135), vec3(_3133, _3134, _3135)));
                        float _3140 = _3139 * _3133;
                        float _3141 = _3139 * _3134;
                        float _3142 = _3139 * _3135;
                        float _3150 = exp2(log2(1.0 / ((_3125 * 3.5) + 5.0)) * 0.25);
                        float _3151 = 1.0 - _895;
                        float _3158 = sqrt(1.0 - ((1.0 - (_3151 * _3151)) * (1.0 - (_3150 * _3150))));
                        float _3159 = _3158 * _3158;
                        float _3160 = _3159 * _3159;
                        float _3161 = _3140 + _3105;
                        float _3162 = _3141 + _3106;
                        float _3163 = _3142 + _3107;
                        float _3167 = inversesqrt(dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163)));
                        float _3171 = dot(vec3(_835, _838, _841), vec3(_3140, _3141, _3142));
                        float _4487 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3174 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3175 = dot(vec3(_835, _838, _841), vec3(_3167 * _3161, _3167 * _3162, _3167 * _3163));
                        float _4498 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3178 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3182 = ((_3178 * _3178) * (_3160 + (-1.0))) + 1.0;
                        float _3183 = _3118 * _3159;
                        float _3184 = _3183 * _3183;
                        float _3187 = ((1.0 - _3184) * _3108) + _3184;
                        float _4509 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3188 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3189 = 1.0 - _3159;
                        float _3199 = (0.5 / (((_3188 * ((_3174 * _3189) + _3159)) + 9.9999999392252902907785028219223e-09) + (((_3188 * _3189) + _3159) * _3174))) * _3188;
                        float _4520 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3210 = (((_3160 * 3.1415927410125732421875) * (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) / ((_3182 * _3182) * ((_3125 * 2.1991131305694580078125) + 3.141590118408203125))) * _3114;
                        _2962 = (_3129 * _3077.x) + _3035;
                        _2963 = (_3129 * _3077.y) + _3036;
                        _2964 = (_3129 * _3077.z) + _3037;
                        _2959 = (_3210 * _3094.x) + _3032;
                        _2960 = (_3210 * _3094.y) + _3033;
                        _2961 = (_3210 * _3094.z) + _3034;
                        if (_3039 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3032 = _2959;
                            _3033 = _2960;
                            _3034 = _2961;
                            _3035 = _2962;
                            _3036 = _2963;
                            _3037 = _2964;
                            _3038 = _3039;
                        }
                    }
                    frontier_phi_66_pred = _2959;
                    frontier_phi_66_pred_1 = _2964;
                    frontier_phi_66_pred_2 = _2963;
                    frontier_phi_66_pred_3 = _2962;
                    frontier_phi_66_pred_4 = _2961;
                    frontier_phi_66_pred_5 = _2960;
                }
                _2735 = frontier_phi_66_pred;
                _2745 = frontier_phi_66_pred_1;
                _2743 = frontier_phi_66_pred_2;
                _2741 = frontier_phi_66_pred_3;
                _2739 = frontier_phi_66_pred_4;
                _2737 = frontier_phi_66_pred_5;
                uint _2894 = _2893 + 1u;
                if (_2894 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2887 = _2735;
                    _2888 = _2737;
                    _2889 = _2739;
                    _2890 = _2741;
                    _2891 = _2743;
                    _2892 = _2745;
                    _2893 = _2894;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2734 = _2735;
            _2736 = _2737;
            _2738 = _2739;
            _2740 = _2741;
            _2742 = _2743;
            _2744 = _2745;
        }
        uvec4 _2748 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2749 = _2748.z;
        uint _2751 = (_2749 >> 8u) & 15u;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        if (((4294967295u << _2751) & _2633) == 0u)
        {
            _2855 = _2734;
            _2857 = _2736;
            _2859 = _2738;
            _2861 = _2740;
            _2863 = _2742;
            _2865 = _2744;
        }
        else
        {
            float _2880 = inversesqrt(dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589)));
            float _2881 = _2880 * _2587;
            float _2882 = _2880 * _2588;
            float _2883 = _2880 * _2589;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2751 < ((_2749 >> 12u) & 15u))
            {
                float _2856;
                float _2858;
                float _2860;
                float _2862;
                float _2864;
                float _2866;
                float _3015 = _2734;
                float _3016 = _2736;
                float _3017 = _2738;
                float _3018 = _2740;
                float _3019 = _2742;
                float _3020 = _2744;
                uint _3021 = _2751;
                uint _3030;
                bool _3031;
                for (;;)
                {
                    _3030 = texelFetch(g_lightClassification, int((((_2627 << 5u) + (_2613 << 9u)) + (_3021 << 2u)) >> 2u)).x;
                    _3031 = _3030 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3031)
                    {
                        frontier_phi_77_pred = _3020;
                        frontier_phi_77_pred_1 = _3019;
                        frontier_phi_77_pred_2 = _3018;
                        frontier_phi_77_pred_3 = _3017;
                        frontier_phi_77_pred_4 = _3016;
                        frontier_phi_77_pred_5 = _3015;
                    }
                    else
                    {
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3229;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3237 = _3015;
                        float _3238 = _3016;
                        float _3239 = _3017;
                        float _3240 = _3018;
                        float _3241 = _3019;
                        float _3242 = _3020;
                        uint _3243 = _3030;
                        uint _3244;
                        vec4 _3269;
                        float _3270;
                        vec4 _3285;
                        vec3 _3297;
                        vec4 _3312;
                        vec4 _3327;
                        float _3374;
                        bool _3375;
                        for (;;)
                        {
                            uint _3254 = ((_3021 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3243));
                            _3244 = (_3243 + 4294967295u) & _3243;
                            uint _3256 = _3254 * 40u;
                            _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            _3270 = _3269.w;
                            uint _3272 = (_3254 * 40u) + 4u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3287 = (_3254 * 40u) + 8u;
                            _3297 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x));
                            uint _3299 = (_3254 * 40u) + 16u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3314 = (_3254 * 40u) + 20u;
                            _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            uint _3330 = (_3254 * 40u) + 24u;
                            vec4 _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            uint _3349 = (_3254 * 40u) + 28u;
                            vec4 _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            _3374 = fma(_2589, _3362.z, fma(_2588, _3362.y, _3362.x * _2587)) + _3362.w;
                            _3375 = !((fma(_2589, _3343.z, fma(_2588, _3343.y, _3343.x * _2587)) + _3343.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3375)
                            {
                                float _3402 = _3269.x - _2587;
                                float _3403 = _3269.y - _2588;
                                float _3404 = _3269.z - _2589;
                                float _3405 = dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404));
                                float _3408 = inversesqrt(_3405);
                                float _3409 = _3408 * _3402;
                                float _3410 = _3408 * _3403;
                                float _3411 = _3408 * _3404;
                                float _3415 = 1.0 - (_3405 / (_3270 * _3270));
                                float _4531 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3416 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3420 = sqrt(_3405) * _3285.w;
                                float _3422 = 1.39999997615814208984375 / (_3420 + 1.39999997615814208984375);
                                float _3423 = _3422 * _3422;
                                float _3426 = ((1.0 - _3423) * dot(vec3(_3409, _3410, _3411), vec3(_835, _838, _841))) + _3423;
                                float _3429 = _3420 * _3420;
                                float _3433 = (fma(_2589, _3312.z, fma(_2588, _3312.y, _3312.x * _2587)) + _3312.w) / _3374;
                                float _3434 = (fma(_2589, _3327.z, fma(_2588, _3327.y, _3327.x * _2587)) + _3327.w) / _3374;
                                float _3438 = 1.0 - dot(vec2(_3433, _3434), vec2(_3433, _3434));
                                float _4547 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3439 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3440 = _3439 * (((isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0))) * _3416) / ((_3429 * 0.699999988079071044921875) + 1.0));
                                float _3452 = exp2(log2(1.0 / ((_3429 * 3.5) + 5.0)) * 0.25);
                                float _3453 = 1.0 - _895;
                                float _3460 = sqrt(1.0 - ((1.0 - (_3453 * _3453)) * (1.0 - (_3452 * _3452))));
                                float _3461 = _3460 * _3460;
                                float _3462 = _3461 * _3461;
                                float _3463 = _3409 - _2881;
                                float _3464 = _3410 - _2882;
                                float _3465 = _3411 - _2883;
                                float _3469 = inversesqrt(dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465)));
                                float _3473 = dot(vec3(_835, _838, _841), vec3((-0.0) - _2881, (-0.0) - _2882, (-0.0) - _2883));
                                float _4558 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3476 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3477 = dot(vec3(_835, _838, _841), vec3(_3469 * _3463, _3469 * _3464, _3469 * _3465));
                                float _4569 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3480 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3484 = ((_3480 * _3480) * (_3462 + (-1.0))) + 1.0;
                                float _3485 = _3422 * _3461;
                                float _3486 = _3485 * _3485;
                                float _3492 = ((1.0 - _3486) * dot(vec3(_835, _838, _841), vec3(_3409, _3410, _3411))) + _3486;
                                float _4580 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3493 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3494 = 1.0 - _3461;
                                float _3504 = (0.5 / (((_3493 * ((_3476 * _3494) + _3461)) + 9.9999999392252902907785028219223e-09) + (((_3493 * _3494) + _3461) * _3476))) * _3493;
                                float _4591 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3514 = (_3439 * _3416) * (((_3462 * 3.1415927410125732421875) * (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) / ((_3484 * _3484) * ((_3429 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3440 * _3285.y;
                                frontier_phi_83_pred_1 = _3440 * _3285.x;
                                frontier_phi_83_pred_2 = _3514 * _3297.z;
                                frontier_phi_83_pred_3 = _3514 * _3297.y;
                                frontier_phi_83_pred_4 = _3514 * _3297.x;
                                frontier_phi_83_pred_5 = _3440 * _3285.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3522 = frontier_phi_83_pred;
                            _3521 = frontier_phi_83_pred_1;
                            _3520 = frontier_phi_83_pred_2;
                            _3519 = frontier_phi_83_pred_3;
                            _3518 = frontier_phi_83_pred_4;
                            _3523 = frontier_phi_83_pred_5;
                            _3227 = _3521 + _3240;
                            _3228 = _3522 + _3241;
                            _3229 = _3523 + _3242;
                            _3224 = _3518 + _3237;
                            _3225 = _3519 + _3238;
                            _3226 = _3520 + _3239;
                            if (_3244 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3227;
                                _3241 = _3228;
                                _3242 = _3229;
                                _3243 = _3244;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3229;
                        frontier_phi_77_pred_1 = _3228;
                        frontier_phi_77_pred_2 = _3227;
                        frontier_phi_77_pred_3 = _3226;
                        frontier_phi_77_pred_4 = _3225;
                        frontier_phi_77_pred_5 = _3224;
                    }
                    _2866 = frontier_phi_77_pred;
                    _2864 = frontier_phi_77_pred_1;
                    _2862 = frontier_phi_77_pred_2;
                    _2860 = frontier_phi_77_pred_3;
                    _2858 = frontier_phi_77_pred_4;
                    _2856 = frontier_phi_77_pred_5;
                    uint _3022 = _3021 + 1u;
                    if (_3022 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3015 = _2856;
                        _3016 = _2858;
                        _3017 = _2860;
                        _3018 = _2862;
                        _3019 = _2864;
                        _3020 = _2866;
                        _3021 = _3022;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2860;
                frontier_phi_58_59_ladder_1 = _2866;
                frontier_phi_58_59_ladder_2 = _2864;
                frontier_phi_58_59_ladder_3 = _2862;
                frontier_phi_58_59_ladder_4 = _2858;
                frontier_phi_58_59_ladder_5 = _2856;
            }
            else
            {
                frontier_phi_58_59_ladder = _2738;
                frontier_phi_58_59_ladder_1 = _2744;
                frontier_phi_58_59_ladder_2 = _2742;
                frontier_phi_58_59_ladder_3 = _2740;
                frontier_phi_58_59_ladder_4 = _2736;
                frontier_phi_58_59_ladder_5 = _2734;
            }
            _2855 = frontier_phi_58_59_ladder_5;
            _2857 = frontier_phi_58_59_ladder_4;
            _2859 = frontier_phi_58_59_ladder;
            _2861 = frontier_phi_58_59_ladder_3;
            _2863 = frontier_phi_58_59_ladder_2;
            _2865 = frontier_phi_58_59_ladder_1;
        }
        float _2870 = isnan(1.0) ? _879 : (isnan(_879) ? 1.0 : min(_879, 1.0));
        _2646 = (_2870 * _2861) + _2098;
        _2648 = (_2870 * _2863) + _2100;
        _2650 = (_2870 * _2865) + _2102;
        _2652 = ((_2855 * 0.039999999105930328369140625) * _2870) + _2431;
        _2654 = ((_2857 * 0.039999999105930328369140625) * _2870) + _2433;
        _2656 = ((_2859 * 0.039999999105930328369140625) * _2870) + _2435;
    }
    else
    {
        _2646 = _2098;
        _2648 = _2100;
        _2650 = _2102;
        _2652 = _2431;
        _2654 = _2433;
        _2656 = _2435;
    }
    float _4607 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4618 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4629 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _2673 = ((isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2646 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _879))) + ((_2652 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1717)) * cbPerFrame._m0[3u].x);
    float _2674 = ((isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2648 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _879))) + ((_2654 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1717)) * cbPerFrame._m0[3u].x);
    float _2675 = ((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2650 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _879))) + ((_2656 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1717)) * cbPerFrame._m0[3u].x);
    uint _2676 = _854 + 6u;
    float _2684 = _816 / cbSceneParam._m0[86u].x;
    float _2685 = _817 / cbSceneParam._m0[86u].y;
    vec4 _2699 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2684, _2685, (log2((isnan(cbSceneParam._m0[77u].w) ? _739 : (isnan(_739) ? cbSceneParam._m0[77u].w : min(_739, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2701 = _2699.x;
    float _2702 = _2699.y;
    float _2703 = _2699.z;
    float _2704 = _2699.w;
    float _2797;
    float _2799;
    float _2801;
    float _2803;
    if (_739 > cbSceneParam._m0[78u].w)
    {
        float _2759 = isnan(_739) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _739 : min(cbSceneParam._m0[80u].w, _739));
        float _2760 = _2759 / _739;
        float _2771 = _2760 * _789;
        float _2772 = _790 * _2760;
        float _2773 = (-0.0) - _2772;
        float _2775 = _2760 * _791;
        float _2777 = (cbSceneParam._m0[77u].w * _2773) / _2759;
        float _2778 = _2777 + cbSceneParam._m0[79u].w;
        float _2779 = cbSceneParam._m0[79u].w - _2772;
        float _2785 = sqrt(((_2771 * _2771) + (_2772 * _2772)) + (_2775 * _2775));
        float _2788 = (1.0 - (cbSceneParam._m0[77u].w / _2759)) * _2785;
        float _2793 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2795 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2972;
        if (abs((_2773 - _2777) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2972 = ((((_2778 > 0.0) ? exp2(_2793 * _2778) : (2.0 - exp2(_2795 * _2778))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2788;
        }
        else
        {
            float _2916 = 1.0 / cbSceneParam._m0[80u].x;
            float _2917 = isnan(_2779) ? _2778 : (isnan(_2778) ? _2779 : max(_2778, _2779));
            float _2918 = isnan(_2779) ? _2778 : (isnan(_2778) ? _2779 : min(_2778, _2779));
            float _2927 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : min(_2917, 0.0));
            float _2928 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : min(_2918, 0.0));
            _2972 = ((abs(_2785 / _2773) * cbSceneParam._m0[80u].y) * ((((_2927 - _2928) * 2.0) - ((exp2(_2793 * (isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0)))) - exp2(_2793 * (isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0))))) * _2916)) - ((exp2(_2795 * _2927) - exp2(_2795 * _2928)) * _2916))) + (_2788 * cbSceneParam._m0[80u].z);
        }
        vec4 _2974 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2684, _2685, 1.0), 0.0);
        float _2983 = exp2((_2972 * (-1.44269502162933349609375)) * (1.0 - _2974.w));
        float _2984 = log2(_2983);
        float _3000 = log2(_2704);
        _2797 = (exp2(_3000 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2984 * cbSceneParam._m0[78u].x)) * _2974.x) / cbSceneParam._m0[78u].x)) + _2701;
        _2799 = (exp2(_3000 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2984 * cbSceneParam._m0[78u].y)) * _2974.y) / cbSceneParam._m0[78u].y)) + _2702;
        _2801 = (exp2(_3000 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2984 * cbSceneParam._m0[78u].z)) * _2974.z) / cbSceneParam._m0[78u].z)) + _2703;
        _2803 = _2983 * _2704;
    }
    else
    {
        _2797 = _2701;
        _2799 = _2702;
        _2801 = _2703;
        _2803 = _2704;
    }
    bool _3010;
    vec4 _2813;
    vec4 _2835;
    float _2837;
    float _2841;
    float _2842;
    float _2843;
    float _2844;
    bool _2854;
    for (;;)
    {
        _2813 = cbMatDynParam._m0[0u];
        float _2815 = roundEven(_2813.y);
        bool _2816 = _2815 == 3.0;
        float _2817 = log2(_2803);
        float _2824 = exp2(_2817 * cbSceneParam._m0[78u].x) * _2673;
        float _2825 = exp2(_2817 * cbSceneParam._m0[78u].y) * _2674;
        float _2826 = exp2(_2817 * cbSceneParam._m0[78u].z) * _2675;
        float _2833 = _805 + (-0.5);
        _2835 = cbMtdParam._m0[1u];
        _2837 = _2835.y * _2833;
        float _2840 = (_2815 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2841 = _2840 * (_2816 ? _2824 : (_2824 + (cbSceneParam._m0[72u].w * _2797)));
        _2842 = _2840 * (_2816 ? _2825 : (_2825 + (cbSceneParam._m0[72u].w * _2799)));
        _2843 = _2840 * (_2816 ? _2826 : (_2826 + (cbSceneParam._m0[72u].w * _2801)));
        _2844 = _2833 * 0.999000012874603271484375;
        _2854 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2854)
        {
            if ((cbInstanceData._m0[_854 + 7u].x + _2844) < 0.5)
            {
                _3010 = true;
                break;
            }
        }
        uint _2951 = _855 + uint(_2813.w);
        if ((cbInstanceData._m0[_2951].w < 1.0) && ((cbInstanceData._m0[_2951].w + _2844) < 0.5))
        {
            _3010 = true;
            break;
        }
        if ((_2837 + 1.0) < _2835.x)
        {
            _3010 = true;
            break;
        }
        _3010 = false;
        break;
    }
    float _3215;
    if (_3010)
    {
        discard_state = true;
        _3215 = 0.0;
    }
    else
    {
        _3215 = cbInstanceData._m0[_2676].w;
    }
    SV_Target.x = _2841;
    SV_Target.y = _2842;
    SV_Target.z = _2843;
    SV_Target.w = _3215;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2676].w;
    discard_exit();
}


