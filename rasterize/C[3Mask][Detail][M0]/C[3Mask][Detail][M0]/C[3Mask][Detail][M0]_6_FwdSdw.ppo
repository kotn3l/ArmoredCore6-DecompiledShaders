#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1130;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _240 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _246 = _240.x * cbMtdParam._m0[10u].x;
    float _247 = _240.y * cbMtdParam._m0[10u].y;
    float _248 = _240.z * cbMtdParam._m0[10u].z;
    vec4 _267 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _314 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x;
    float _325 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _314)) + 1.0;
    float _3722 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _326 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _333 = (_326 * ((_267.x * cbMtdParam._m0[11u].x) - _246)) + _246;
    float _334 = (_326 * ((_267.y * cbMtdParam._m0[11u].y) - _247)) + _247;
    float _335 = (_326 * ((_267.z * cbMtdParam._m0[11u].z) - _248)) + _248;
    vec4 _354 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _384 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _314)) + 1.0;
    float _3733 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _392 = (_385 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _393 = (_385 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _394 = (_385 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    vec4 _411 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _436 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _314)) + 1.0;
    float _3744 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    vec4 _464 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _472 = ((((_437 * ((_411.x * cbMtdParam._m0[13u].x) - _392)) + _392) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _464.x;
    float _475 = ((((_437 * ((_411.y * cbMtdParam._m0[13u].y) - _393)) + _393) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _464.y;
    float _478 = ((((_437 * ((_411.z * cbMtdParam._m0[13u].z) - _394)) + _394) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _464.z;
    vec4 _490 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _508 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _510 = _508.x;
    float _511 = _508.y;
    float _517 = cbMtdParam._m0[16u].w * _508.z;
    float _520 = (((cbMtdParam._m0[17u].x * _490.z) - _517) * _326) + _517;
    vec4 _533 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _542 = (((cbMtdParam._m0[17u].y * _533.z) - _520) * _385) + _520;
    vec4 _555 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _564 = (((cbMtdParam._m0[17u].z * _555.z) - _542) * _437) + _542;
    float _569 = ((_490.x - _510) * _326) + _510;
    float _570 = ((_490.y - _511) * _326) + _511;
    float _575 = ((_533.x - _569) * _385) + _569;
    float _576 = ((_533.y - _570) * _385) + _570;
    float _585 = ((((_555.x - _575) * _437) + _575) * 2.0) + (-1.0);
    float _587 = ((((_555.y - _576) * _437) + _576) * 2.0) + (-1.0);
    float _588 = dot(vec2(_585, _587), vec2(_585, _587));
    float _3755 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _593 = sqrt(1.0 - (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))));
    float _596 = fma(_593, _210 * NORMAL.x, fma(_587, _217 * TANGENT.x, (_203 * _195) * _585));
    float _599 = fma(_593, _210 * NORMAL.y, fma(_587, _217 * TANGENT.y, (_203 * _196) * _585));
    float _602 = fma(_593, _210 * NORMAL.z, fma(_587, _217 * TANGENT.z, (_203 * _197) * _585));
    float _606 = inversesqrt(dot(vec3(_596, _599, _602), vec3(_596, _599, _602)));
    float _607 = _606 * _596;
    float _608 = _606 * _599;
    float _609 = _606 * _602;
    float _3766 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _610 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _3777 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _3788 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3799 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _629 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _680 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _670);
    float _681 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _670);
    float _682 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _670);
    float _686 = inversesqrt(dot(vec3(_680, _681, _682), vec3(_680, _681, _682)));
    float _687 = _680 * _686;
    float _688 = _681 * _686;
    float _689 = _682 * _686;
    float _695 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _696 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _714 = fma(_609, cbSceneParam._m0[5u].z, fma(_608, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _607));
    float _717 = fma(_609, cbSceneParam._m0[6u].z, fma(_608, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _607));
    float _720 = fma(_609, cbSceneParam._m0[7u].z, fma(_608, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _607));
    uint _733 = uint(roundEven(NORMAL.w)) * 13u;
    uint _735 = (_733 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _741 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) * cbInstanceData._m0[_735].x;
    float _742 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)))) * cbInstanceData._m0[_735].y;
    float _743 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0)))) * cbInstanceData._m0[_735].z;
    float _3810 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _3821 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _745 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _3832 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _746 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    vec4 _755 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _695, cbSceneParam._m0[86u].y * _696));
    float _758 = _755.x * TEXCOORD_5.w;
    float _759 = dot(vec3(_607, _608, _609), vec3(_687, _688, _689));
    float _762 = _759 * 2.0;
    float _766 = (_762 * _607) - _687;
    float _767 = (_762 * _608) - _688;
    float _768 = (_762 * _609) - _689;
    float _772 = abs(dot(vec3(_687, _688, _689), vec3(_607, _608, _609)));
    float _3843 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _774 = sqrt(_610);
    float _787 = exp2((_774 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_774 * 3.0));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1129;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _854 = fma(_827, cbModelParam._m0[26u].z, fma(_823, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _819));
        float _858 = fma(_827, cbModelParam._m0[27u].z, fma(_823, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _819));
        float _862 = fma(_827, cbModelParam._m0[28u].z, fma(_823, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _819));
        float _887 = _819 + _607;
        float _888 = _823 + _608;
        float _889 = _827 + _609;
        float _899 = fma(_889, cbModelParam._m0[26u].z, fma(_888, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _887)) - _854;
        float _900 = fma(_889, cbModelParam._m0[27u].z, fma(_888, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _887)) - _858;
        float _901 = fma(_889, cbModelParam._m0[28u].z, fma(_888, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _887)) - _862;
        float _905 = inversesqrt(dot(vec3(_899, _900, _901), vec3(_899, _900, _901)));
        float _918 = ((_905 * _899) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_854 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _919 = ((_905 * _900) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_858 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _920 = ((_905 * _901) / cbModelParam._m0[34u].z) + ((((((_862 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        float _957 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_923.x + (-0.5));
        float _959 = _957 * (_923.y + (-0.5));
        float _960 = _957 * (_923.z + (-0.5));
        float _967 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_930.x + (-0.5));
        float _969 = _967 * (_930.y + (-0.5));
        float _970 = _967 * (_930.z + (-0.5));
        float _977 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_937.x + (-0.5));
        float _979 = _977 * (_937.y + (-0.5));
        float _980 = _977 * (_937.z + (-0.5));
        float _987 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_944.x + (-0.5));
        float _989 = _987 * (_944.y + (-0.5));
        float _990 = _987 * (_944.z + (-0.5));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = _958 * 0.5;
        float _995 = _968 * 0.5;
        float _996 = _978 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1011 = (dot(vec3(_607, _608, _609), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3869 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1021 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3880 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3891 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_1023 + 1.0))) + _1028) * _991;
        float _1038 = _959 * 0.5;
        float _1039 = _969 * 0.5;
        float _1040 = _979 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1054 = (dot(vec3(_607, _608, _609), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3902 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1063 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3913 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3924 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1065 + 1.0))) + _1070) * _992;
        float _1080 = _960 * 0.5;
        float _1081 = _970 * 0.5;
        float _1082 = _980 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_607, _608, _609), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3935 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3946 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3957 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1107 + 1.0))) + _1112) * _993;
        _1129 = _960;
        _1131 = _959;
        _1132 = _958;
        _1133 = _970;
        _1134 = _969;
        _1135 = _968;
        _1136 = _980;
        _1137 = _979;
        _1138 = _978;
        _1139 = _993;
        _1140 = _992;
        _1141 = _991;
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
        _1143 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1144 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
    }
    else
    {
        _1129 = _1130;
        _1131 = _1130;
        _1132 = _1130;
        _1133 = _1130;
        _1134 = _1130;
        _1135 = _1130;
        _1136 = _1130;
        _1137 = _1130;
        _1138 = _1130;
        _1139 = _1130;
        _1140 = _1130;
        _1141 = _1130;
        _1142 = 0.0;
        _1143 = 0.0;
        _1144 = 0.0;
    }
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1170 = fma(_827, cbModelParam._m0[30u].z, fma(_823, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _819));
        float _1174 = fma(_827, cbModelParam._m0[31u].z, fma(_823, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _819));
        float _1178 = fma(_827, cbModelParam._m0[32u].z, fma(_823, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _819));
        float _1201 = _819 + _607;
        float _1202 = _823 + _608;
        float _1203 = _827 + _609;
        float _1213 = fma(_1203, cbModelParam._m0[30u].z, fma(_1202, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1201)) - _1170;
        float _1214 = fma(_1203, cbModelParam._m0[31u].z, fma(_1202, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1201)) - _1174;
        float _1215 = fma(_1203, cbModelParam._m0[32u].z, fma(_1202, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1201)) - _1178;
        float _1219 = inversesqrt(dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215)));
        float _1232 = ((_1219 * _1213) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1170 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1233 = ((_1219 * _1214) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1174 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1234 = ((_1219 * _1215) / cbModelParam._m0[35u].z) + ((((((_1178 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        float _1269 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1236.x + (-0.5));
        float _1271 = _1269 * (_1236.y + (-0.5));
        float _1272 = _1269 * (_1236.z + (-0.5));
        float _1279 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1243.x + (-0.5));
        float _1281 = _1279 * (_1243.y + (-0.5));
        float _1282 = _1279 * (_1243.z + (-0.5));
        float _1289 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1250.x + (-0.5));
        float _1291 = _1289 * (_1250.y + (-0.5));
        float _1292 = _1289 * (_1250.z + (-0.5));
        float _1299 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1257.x + (-0.5));
        float _1301 = _1299 * (_1257.y + (-0.5));
        float _1302 = _1299 * (_1257.z + (-0.5));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = _1270 * 0.5;
        float _1307 = _1280 * 0.5;
        float _1308 = _1290 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_607, _608, _609), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _3998 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _4009 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4020 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1333 + 1.0))) + _1338) * _1303;
        float _1348 = _1271 * 0.5;
        float _1349 = _1281 * 0.5;
        float _1350 = _1291 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_607, _608, _609), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4031 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _4042 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4053 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1375 + 1.0))) + _1380) * _1304;
        float _1390 = _1272 * 0.5;
        float _1391 = _1282 * 0.5;
        float _1392 = _1292 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_607, _608, _609), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _4064 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _4075 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _4086 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1417 + 1.0))) + _1422) * _1305;
        _1439 = _1272;
        _1440 = _1271;
        _1441 = _1270;
        _1442 = _1282;
        _1443 = _1281;
        _1444 = _1280;
        _1445 = _1292;
        _1446 = _1291;
        _1447 = _1290;
        _1448 = _1305;
        _1449 = _1304;
        _1450 = _1303;
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1453 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
    }
    else
    {
        _1439 = _1130;
        _1440 = _1130;
        _1441 = _1130;
        _1442 = _1130;
        _1443 = _1130;
        _1444 = _1130;
        _1445 = _1130;
        _1446 = _1130;
        _1447 = _1130;
        _1448 = _1130;
        _1449 = _1130;
        _1450 = _1130;
        _1451 = 0.0;
        _1452 = 0.0;
        _1453 = 0.0;
    }
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1142)) + _1142;
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1143)) + _1143;
    float _1465 = (cbModelParam._m0[1u].x * (_1453 - _1144)) + _1144;
    float _1486 = fma(_1465, cbSceneParam._m0[89u].z, fma(_1464, cbSceneParam._m0[89u].y, _1463 * cbSceneParam._m0[89u].x));
    float _1489 = fma(_1465, cbSceneParam._m0[90u].z, fma(_1464, cbSceneParam._m0[90u].y, _1463 * cbSceneParam._m0[90u].x));
    float _1492 = fma(_1465, cbSceneParam._m0[91u].z, fma(_1464, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1463));
    float _1507 = _766 * 0.5;
    float _1508 = _767 * 0.5;
    float _1509 = _768 * 0.5;
    float _1510 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1441, _1444, _1447, _1450));
    float _1513 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1516 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1550;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1523 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1129, _1133, _1136, _1139));
        float _1527 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1131, _1134, _1137, _1140));
        float _1531 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1132, _1135, _1138, _1141));
        float _1538 = dot(vec4(cbModelParam._m0[39u]), vec4(_1507, _1508, _1509, 1.0));
        _1550 = dot(vec3(isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1538) ? 0.0 : (isnan(0.0) ? _1538 : max(0.0, _1538))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1550 = 1.0;
    }
    float _1561;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1552 = dot(vec4(cbModelParam._m0[40u]), vec4(_1507, _1508, _1509, 1.0));
        _1561 = dot(vec3(isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1552) ? 0.0 : (isnan(0.0) ? _1552 : max(0.0, _1552))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1561 = 1.0;
    }
    float _1565 = (_1561 * cbModelParam._m0[1u].x) + (_1550 * (1.0 - cbModelParam._m0[1u].x));
    float _1575 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _610);
    float _1576 = isnan(_1575) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1575 : min(cbModelParam._m0[25u].z, _1575));
    float _1657;
    float _1659;
    float _1661;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1624 = fma(_827, cbModelParam._m0[13u].z, fma(_823, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _819)) + cbModelParam._m0[13u].w;
        float _1628 = fma(_827, cbModelParam._m0[14u].z, fma(_823, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _819)) + cbModelParam._m0[14u].w;
        float _1632 = fma(_827, cbModelParam._m0[15u].z, fma(_823, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _819)) + cbModelParam._m0[15u].w;
        float _1635 = fma(_768, cbModelParam._m0[13u].z, fma(_767, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _766));
        float _1638 = fma(_768, cbModelParam._m0[14u].z, fma(_767, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _766));
        float _1641 = fma(_768, cbModelParam._m0[15u].z, fma(_767, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _766));
        float _1669;
        if (_1635 > 0.0)
        {
            _1669 = abs((1.0 - _1624) / _1635);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1624 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1669 = frontier_phi_14_12_ladder;
        }
        float _1840;
        if (_1638 > 0.0)
        {
            _1840 = abs((1.0 - _1628) / _1638);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1628 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1840 = frontier_phi_23_19_ladder;
        }
        float _2135;
        if (_1641 > 0.0)
        {
            _2135 = abs((1.0 - _1632) / _1641);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1632 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2135 = frontier_phi_35_30_ladder;
        }
        float _2137 = isnan(_1840) ? _1669 : (isnan(_1669) ? _1840 : min(_1669, _1840));
        float _2138 = isnan(_2135) ? _2137 : (isnan(_2137) ? _2135 : min(_2137, _2135));
        float _2142 = (_2138 * _1635) + _1624;
        float _2143 = (_2138 * _1638) + _1628;
        float _2144 = (_2138 * _1641) + _1632;
        float _2145 = _2138 * 9.9999997473787516355514526367188e-05;
        float _2147 = (-1.0) - _2145;
        float _2149 = _2145 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2144 > _2149) || ((_2144 < _2147) || ((_2143 > _2149) || ((_2143 < _2147) || ((_2142 < _2147) || (_2142 > _2149))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2289 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2144, cbModelParam._m0[9u].z, fma(_2143, cbModelParam._m0[9u].y, _2142 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2144, cbModelParam._m0[10u].z, fma(_2143, cbModelParam._m0[10u].y, _2142 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2144, cbModelParam._m0[11u].z, fma(_2143, cbModelParam._m0[11u].y, _2142 * cbModelParam._m0[11u].x))), _1576);
            frontier_phi_13_35_ladder = _2289.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2289.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2289.x * cbModelParam._m0[1u].y;
        }
        _1657 = frontier_phi_13_35_ladder_2;
        _1659 = frontier_phi_13_35_ladder_1;
        _1661 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1645 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_766, _767, _768), _1576);
        _1657 = _1645.x * cbModelParam._m0[1u].y;
        _1659 = _1645.y * cbModelParam._m0[1u].y;
        _1661 = _1645.z * cbModelParam._m0[1u].y;
    }
    float _1665 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _610);
    float _1666 = isnan(_1665) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1665 : min(cbModelParam._m0[25u].w, _1665));
    float _1757;
    float _1759;
    float _1761;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1721 = fma(_827, cbModelParam._m0[21u].z, fma(_823, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _819)) + cbModelParam._m0[21u].w;
        float _1725 = fma(_827, cbModelParam._m0[22u].z, fma(_823, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _819)) + cbModelParam._m0[22u].w;
        float _1729 = fma(_827, cbModelParam._m0[23u].z, fma(_823, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _819)) + cbModelParam._m0[23u].w;
        float _1732 = fma(_768, cbModelParam._m0[21u].z, fma(_767, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _766));
        float _1735 = fma(_768, cbModelParam._m0[22u].z, fma(_767, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _766));
        float _1738 = fma(_768, cbModelParam._m0[23u].z, fma(_767, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _766));
        float _1845;
        if (_1732 > 0.0)
        {
            _1845 = abs((1.0 - _1721) / _1732);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1721 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1845 = frontier_phi_25_21_ladder;
        }
        float _2162;
        if (_1735 > 0.0)
        {
            _2162 = abs((1.0 - _1725) / _1735);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1725 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2162 = frontier_phi_37_32_ladder;
        }
        float _2489;
        if (_1738 > 0.0)
        {
            _2489 = abs((1.0 - _1729) / _1738);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1729 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2489 = frontier_phi_47_44_ladder;
        }
        float _2491 = isnan(_2162) ? _1845 : (isnan(_1845) ? _2162 : min(_1845, _2162));
        float _2492 = isnan(_2489) ? _2491 : (isnan(_2491) ? _2489 : min(_2491, _2489));
        float _2496 = (_2492 * _1732) + _1721;
        float _2497 = (_2492 * _1735) + _1725;
        float _2498 = (_2492 * _1738) + _1729;
        float _2499 = _2492 * 9.9999997473787516355514526367188e-05;
        float _2500 = (-1.0) - _2499;
        float _2502 = _2499 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2498 > _2502) || ((_2498 < _2500) || ((_2497 > _2502) || ((_2497 < _2500) || ((_2496 < _2500) || (_2496 > _2502))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2616 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2498, cbModelParam._m0[17u].z, fma(_2497, cbModelParam._m0[17u].y, _2496 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2498, cbModelParam._m0[18u].z, fma(_2497, cbModelParam._m0[18u].y, _2496 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2498, cbModelParam._m0[19u].z, fma(_2497, cbModelParam._m0[19u].y, _2496 * cbModelParam._m0[19u].x))), _1666);
            frontier_phi_22_47_ladder = _2616.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2616.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2616.x * cbModelParam._m0[1u].z;
        }
        _1757 = frontier_phi_22_47_ladder_2;
        _1759 = frontier_phi_22_47_ladder_1;
        _1761 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1741 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_766, _767, _768), _1666);
        _1757 = _1741.x * cbModelParam._m0[1u].z;
        _1759 = _1741.y * cbModelParam._m0[1u].z;
        _1761 = _1741.z * cbModelParam._m0[1u].z;
    }
    float _1773 = ((((1.0 - _787) * ((_774 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_787 * _774)) * _758;
    float _1774 = _1773 * ((cbModelParam._m0[1u].w * (_1757 - _1657)) + _1657);
    float _1775 = _1773 * ((cbModelParam._m0[1u].w * (_1759 - _1659)) + _1659);
    float _1776 = _1773 * ((cbModelParam._m0[1u].w * (_1761 - _1661)) + _1661);
    float _1779 = fma(_1776, cbSceneParam._m0[89u].z, fma(_1775, cbSceneParam._m0[89u].y, _1774 * cbSceneParam._m0[89u].x));
    float _1782 = fma(_1776, cbSceneParam._m0[90u].z, fma(_1775, cbSceneParam._m0[90u].y, _1774 * cbSceneParam._m0[90u].x));
    float _1785 = fma(_1776, cbSceneParam._m0[91u].z, fma(_1775, cbSceneParam._m0[91u].y, _1774 * cbSceneParam._m0[91u].x));
    float _1819 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1823 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1827 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1831 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1832 = _1819 / _1831;
    float _1833 = _1823 / _1831;
    float _1834 = _1827 / _1831;
    float _1981;
    float _1982;
    float _1983;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1861 = ((uint(_1834 > cbSceneParam._m0[59u].y) + uint(_1834 > cbSceneParam._m0[59u].x)) + uint(_1834 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1862 = _1861 + 43u;
        uint _1870 = _1861 + 44u;
        uint _1878 = _1861 + 45u;
        uint _1886 = _1861 + 46u;
        float _1897 = fma(_1831, cbSceneParam._m0[_1862].w, fma(_1827, cbSceneParam._m0[_1862].z, fma(_1823, cbSceneParam._m0[_1862].y, _1819 * cbSceneParam._m0[_1862].x)));
        float _1901 = fma(_1831, cbSceneParam._m0[_1870].w, fma(_1827, cbSceneParam._m0[_1870].z, fma(_1823, cbSceneParam._m0[_1870].y, _1819 * cbSceneParam._m0[_1870].x)));
        float _1909 = fma(_1831, cbSceneParam._m0[_1886].w, fma(_1827, cbSceneParam._m0[_1886].z, fma(_1823, cbSceneParam._m0[_1886].y, _1819 * cbSceneParam._m0[_1886].x)));
        float _1914 = cbSceneParam._m0[33u].z * _1909;
        float _1916 = cbSceneParam._m0[33u].w * _1909;
        float _1919 = fma(_1831, cbSceneParam._m0[_1878].w, fma(_1827, cbSceneParam._m0[_1878].z, fma(_1823, cbSceneParam._m0[_1878].y, _1819 * cbSceneParam._m0[_1878].x))) / _1909;
        float _1967 = (cbSceneParam._m0[33u].x - sqrt(((_1833 * _1833) + (_1832 * _1832)) + (_1834 * _1834))) * cbSceneParam._m0[33u].y;
        float _4212 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1974 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1914 + _1897) / _1909, (_1916 + _1901) / _1909), _1919), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1916 + _1897) / _1909, (_1901 - _1914) / _1909), _1919), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1897 - _1914) / _1909, (_1901 - _1916) / _1909), _1919), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1897 - _1916) / _1909, (_1914 + _1901) / _1909), _1919), 0.0)).x), vec4(0.25)));
        _1981 = 1.0 - (_1974 * cbSceneParam._m0[34u].x);
        _1982 = 1.0 - (_1974 * cbSceneParam._m0[34u].y);
        _1983 = 1.0 - (_1974 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1981 = 1.0;
        _1982 = 1.0;
        _1983 = 1.0;
    }
    float _2047;
    float _2049;
    float _2051;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2035 = fma(_1831, cbSceneParam._m0[63u].w, fma(_1827, cbSceneParam._m0[63u].z, fma(_1823, cbSceneParam._m0[63u].y, _1819 * cbSceneParam._m0[63u].x)));
        float _2036 = fma(_1831, cbSceneParam._m0[60u].w, fma(_1827, cbSceneParam._m0[60u].z, fma(_1823, cbSceneParam._m0[60u].y, _1819 * cbSceneParam._m0[60u].x))) / _2035;
        float _2037 = fma(_1831, cbSceneParam._m0[61u].w, fma(_1827, cbSceneParam._m0[61u].z, fma(_1823, cbSceneParam._m0[61u].y, _1819 * cbSceneParam._m0[61u].x))) / _2035;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2036 >= cbSceneParam._m0[64u].x) && (_2037 >= cbSceneParam._m0[64u].y)) && (_2036 <= cbSceneParam._m0[64u].z)) && (_2037 <= cbSceneParam._m0[64u].w))
        {
            float _2175 = fma(_1831, cbSceneParam._m0[62u].w, fma(_1827, cbSceneParam._m0[62u].z, fma(_1823, cbSceneParam._m0[62u].y, _1819 * cbSceneParam._m0[62u].x))) / _2035;
            float _2179 = isnan(cbSceneParam._m0[41u].w) ? _2175 : (isnan(_2175) ? cbSceneParam._m0[41u].w : max(_2175, cbSceneParam._m0[41u].w));
            float _2222 = (cbSceneParam._m0[33u].x - sqrt(((_1833 * _1833) + (_1832 * _1832)) + (_1834 * _1834))) * cbSceneParam._m0[33u].y;
            float _4228 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
            float _2229 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2036, cbSceneParam._m0[33u].w + _2037), _2179), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2036, _2037 - cbSceneParam._m0[33u].z), _2179), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2036 - cbSceneParam._m0[33u].z, _2037 - cbSceneParam._m0[33u].w), _2179), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2036 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2037), _2179), 0.0)).x), vec4(0.25)));
            float _2233 = 1.0 - (_2229 * cbSceneParam._m0[34u].x);
            float _2234 = 1.0 - (_2229 * cbSceneParam._m0[34u].y);
            float _2235 = 1.0 - (_2229 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2235) ? _1983 : (isnan(_1983) ? _2235 : min(_1983, _2235));
            frontier_phi_34_33_ladder_1 = isnan(_2234) ? _1982 : (isnan(_1982) ? _2234 : min(_1982, _2234));
            frontier_phi_34_33_ladder_2 = isnan(_2233) ? _1981 : (isnan(_1981) ? _2233 : min(_1981, _2233));
        }
        else
        {
            frontier_phi_34_33_ladder = _1983;
            frontier_phi_34_33_ladder_1 = _1982;
            frontier_phi_34_33_ladder_2 = _1981;
        }
        _2047 = frontier_phi_34_33_ladder_2;
        _2049 = frontier_phi_34_33_ladder_1;
        _2051 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2047 = _1981;
        _2049 = _1982;
        _2051 = _1983;
    }
    uvec4 _2056 = floatBitsToUint(cbInstanceData._m0[_733 + 5u]);
    uint _2058 = _2056.x * 14u;
    uint _2059 = _2058 + 13u;
    float _2066 = _758 + (-1.0);
    float _2071 = (cbLight._m0[_2059].x * _2066) + 1.0;
    float _2072 = (cbLight._m0[_2059].y * _2066) + 1.0;
    float _2073 = (cbLight._m0[_2059].z * _2066) + 1.0;
    float _2074 = (cbLight._m0[_2059].w * _2066) + 1.0;
    uint _2075 = _2058 + 5u;
    float _2081 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
    uint _2085 = _2058 + 4u;
    float _2094 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
    uint _2098 = _2058 | 1u;
    float _2109 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_607, _608, _609));
    float _2112 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_607, _608, _609));
    float _4264 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _4275 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2117 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * 0.3183098733425140380859375;
    float _2119 = (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * 0.3183098733425140380859375;
    float _2126 = ((cbLight._m0[_2075].x * _2081) * _2119) + (((cbLight._m0[_2085].x * _2047) * _2094) * _2117);
    float _2127 = ((_2081 * cbLight._m0[_2075].y) * _2119) + (((cbLight._m0[_2085].y * _2049) * _2094) * _2117);
    float _2128 = ((_2081 * cbLight._m0[_2075].z) * _2119) + (((cbLight._m0[_2085].z * _2051) * _2094) * _2117);
    uvec4 _2132 = floatBitsToUint(cbLight._m0[_2058 + 12u]);
    bool _2134 = _2132.x == 0u;
    float _2236;
    float _2238;
    float _2240;
    if (_2134)
    {
        _2236 = _2126;
        _2238 = _2127;
        _2240 = _2128;
    }
    else
    {
        uint _2244 = _2058 + 6u;
        float _2260 = (dot(vec3(cbLight._m0[_2058 + 2u].xyz), vec3(_607, _608, _609)) * 0.5) + 0.5;
        float _2261 = _2260 * _2260;
        float _4286 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2262 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2263 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2236 = (((cbLight._m0[_2244].x * 0.3183098733425140380859375) * _2262) * _2263) + _2126;
        _2238 = (((cbLight._m0[_2244].y * 0.3183098733425140380859375) * _2262) * _2263) + _2127;
        _2240 = (((cbLight._m0[_2244].z * 0.3183098733425140380859375) * _2262) * _2263) + _2128;
    }
    bool _2243 = _2132.y == 0u;
    float _2298;
    float _2300;
    float _2302;
    if (_2243)
    {
        _2298 = _2236;
        _2300 = _2238;
        _2302 = _2240;
    }
    else
    {
        uint _2460 = _2058 + 7u;
        float _2476 = (dot(vec3(cbLight._m0[_2058 + 3u].xyz), vec3(_607, _608, _609)) * 0.5) + 0.5;
        float _2477 = _2476 * _2476;
        float _4302 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2478 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2479 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2298 = (((cbLight._m0[_2460].x * 0.3183098733425140380859375) * _2478) * _2479) + _2236;
        _2300 = (((cbLight._m0[_2460].y * 0.3183098733425140380859375) * _2478) * _2479) + _2238;
        _2302 = (((cbLight._m0[_2460].z * 0.3183098733425140380859375) * _2478) * _2479) + _2240;
    }
    uint _2305 = _2058 + 8u;
    float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _610) * 0.949999988079071044921875);
    float _2319 = _2318 * _2318;
    float _2320 = cbLight._m0[_2058].x + _687;
    float _2321 = cbLight._m0[_2058].y + _688;
    float _2322 = cbLight._m0[_2058].z + _689;
    float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
    float _2327 = _2326 * _2320;
    float _2328 = _2326 * _2321;
    float _2329 = _2326 * _2322;
    float _2330 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_2058].xyz));
    float _4318 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _4329 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _2334 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _2335 = dot(vec3(_607, _608, _609), vec3(_2327, _2328, _2329));
    float _4340 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _2339 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2327, _2328, _2329));
    float _4351 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2343 = _2319 * _2319;
    float _2347 = ((_2338 * _2338) * (_2343 + (-1.0))) + 1.0;
    float _2358 = (exp2(log2(1.0 - (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2359 = 1.0 - _2319;
    float _2370 = (0.5 / (((_2334 * ((_2333 * _2359) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2359) + _2319) * _2333))) * _2333;
    float _4362 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2372 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2343 / ((_2347 * _2347) * 3.141590118408203125));
    uint _2386 = _2058 + 9u;
    float _2397 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _610) * 0.949999988079071044921875);
    float _2398 = _2397 * _2397;
    float _2399 = cbLight._m0[_2098].x + _687;
    float _2400 = cbLight._m0[_2098].y + _688;
    float _2401 = cbLight._m0[_2098].z + _689;
    float _2405 = inversesqrt(dot(vec3(_2399, _2400, _2401), vec3(_2399, _2400, _2401)));
    float _2406 = _2405 * _2399;
    float _2407 = _2405 * _2400;
    float _2408 = _2405 * _2401;
    float _2409 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_2098].xyz));
    float _4373 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2412 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _2413 = dot(vec3(_607, _608, _609), vec3(_2406, _2407, _2408));
    float _4384 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2416 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _2417 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2406, _2407, _2408));
    float _4395 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2421 = _2398 * _2398;
    float _2425 = ((_2416 * _2416) * (_2421 + (-1.0))) + 1.0;
    float _2434 = (exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2435 = 1.0 - _2398;
    float _2445 = (0.5 / (((_2334 * ((_2412 * _2435) + _2398)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2435) + _2398) * _2412))) * _2412;
    float _4406 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2447 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2421 / ((_2425 * _2425) * 3.141590118408203125));
    float _2457 = (((_2434 * cbLight._m0[_2386].x) * _2447) * _2081) + ((((cbLight._m0[_2305].x * _2047) * _2358) * _2372) * _2094);
    float _2458 = (((_2434 * cbLight._m0[_2386].y) * _2447) * _2081) + ((((cbLight._m0[_2305].y * _2049) * _2358) * _2372) * _2094);
    float _2459 = (((_2434 * cbLight._m0[_2386].z) * _2447) * _2081) + ((((cbLight._m0[_2305].z * _2051) * _2358) * _2372) * _2094);
    float _2515;
    float _2517;
    float _2519;
    if (_2134)
    {
        _2515 = _2457;
        _2517 = _2458;
        _2519 = _2459;
    }
    else
    {
        uint _2521 = _2058 + 2u;
        uint _2525 = _2058 + 10u;
        float _2539 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2521].w)) * _610) * 0.949999988079071044921875);
        float _2540 = _2539 * _2539;
        float _2541 = cbLight._m0[_2521].x + _687;
        float _2542 = cbLight._m0[_2521].y + _688;
        float _2543 = cbLight._m0[_2521].z + _689;
        float _2547 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
        float _2548 = _2547 * _2541;
        float _2549 = _2547 * _2542;
        float _2550 = _2547 * _2543;
        float _2551 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_2521].xyz));
        float _4417 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2554 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _2555 = dot(vec3(_607, _608, _609), vec3(_2548, _2549, _2550));
        float _4428 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2559 = dot(vec3(cbLight._m0[_2521].xyz), vec3(_2548, _2549, _2550));
        float _4439 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2563 = _2540 * _2540;
        float _2567 = ((_2558 * _2558) * (_2563 + (-1.0))) + 1.0;
        float _2576 = (exp2(log2(1.0 - (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2577 = 1.0 - _2540;
        float _2587 = (0.5 / (((_2334 * ((_2554 * _2577) + _2540)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2577) + _2540) * _2554))) * _2554;
        float _4450 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2589 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2563 / ((_2567 * _2567) * 3.141590118408203125));
        float _2590 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2515 = (((_2576 * cbLight._m0[_2525].x) * _2589) * _2590) + _2457;
        _2517 = (((_2576 * cbLight._m0[_2525].y) * _2589) * _2590) + _2458;
        _2519 = (((_2576 * cbLight._m0[_2525].z) * _2589) * _2590) + _2459;
    }
    float _2621;
    float _2623;
    float _2625;
    if (_2243)
    {
        _2621 = _2515;
        _2623 = _2517;
        _2625 = _2519;
    }
    else
    {
        uint _2632 = _2058 + 3u;
        uint _2636 = _2058 + 11u;
        float _2650 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2632].w)) * _610) * 0.949999988079071044921875);
        float _2651 = _2650 * _2650;
        float _2652 = cbLight._m0[_2632].x + _687;
        float _2653 = cbLight._m0[_2632].y + _688;
        float _2654 = cbLight._m0[_2632].z + _689;
        float _2658 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
        float _2659 = _2658 * _2652;
        float _2660 = _2658 * _2653;
        float _2661 = _2658 * _2654;
        float _2662 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_2632].xyz));
        float _4466 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2665 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _2666 = dot(vec3(_607, _608, _609), vec3(_2659, _2660, _2661));
        float _4477 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2670 = dot(vec3(cbLight._m0[_2632].xyz), vec3(_2659, _2660, _2661));
        float _4488 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2674 = _2651 * _2651;
        float _2678 = ((_2669 * _2669) * (_2674 + (-1.0))) + 1.0;
        float _2687 = (exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2688 = 1.0 - _2651;
        float _2698 = (0.5 / (((_2334 * ((_2665 * _2688) + _2651)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2688) + _2651) * _2665))) * _2665;
        float _4499 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2700 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2674 / ((_2678 * _2678) * 3.141590118408203125));
        float _2701 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2621 = (((_2687 * cbLight._m0[_2636].x) * _2700) * _2701) + _2515;
        _2623 = (((_2687 * cbLight._m0[_2636].y) * _2700) * _2701) + _2517;
        _2625 = (((_2687 * cbLight._m0[_2636].z) * _2700) * _2701) + _2519;
    }
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    if (_2056.y == 0u)
    {
        uvec4 _2722 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2723 = _2722.x;
        uint _2734 = uint((float(_2722.y) * floor(float(uint(cbSceneParam._m0[85u].y * _696) / _2723))) + floor(float(uint(cbSceneParam._m0[85u].x * _695) / _2723)));
        float _2744 = (log2(_1834 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2745 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        uint _2748 = uint(isnan(14.0) ? _2745 : (isnan(_2745) ? 14.0 : min(_2745, 14.0)));
        uvec4 _2753 = texelFetch(g_lightClusterGridBuffer, int(((_2748 << 2u) + (_2734 << 6u)) >> 2u));
        uint _2754 = _2753.x;
        uint _2755 = _2722.z;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        if (((((1u << ((_2755 >> 4u) & 15u)) + 4294967295u) & _2754) == 0u) || ((_2755 & 240u) == 0u))
        {
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
        }
        else
        {
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2979 = 0.0;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            uint _2985 = 0u;
            uint _2994;
            bool _2995;
            for (;;)
            {
                _2994 = texelFetch(g_lightClassification, int((((_2748 << 5u) + (_2734 << 9u)) + (_2985 << 2u)) >> 2u)).x;
                _2995 = _2994 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2995)
                {
                    frontier_phi_66_pred = _2984;
                    frontier_phi_66_pred_1 = _2983;
                    frontier_phi_66_pred_2 = _2982;
                    frontier_phi_66_pred_3 = _2981;
                    frontier_phi_66_pred_4 = _2980;
                    frontier_phi_66_pred_5 = _2979;
                }
                else
                {
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    uint _3109;
                    _3103 = _2979;
                    _3104 = _2980;
                    _3105 = _2981;
                    _3106 = _2982;
                    _3107 = _2983;
                    _3108 = _2984;
                    _3109 = _2994;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    for (;;)
                    {
                        uint _3113 = uint(findLSB(_3109)) + (_2985 << 5u);
                        uint _3110 = (_3109 + 4294967295u) & _3109;
                        uint _3115 = _3113 * 48u;
                        vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3115)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 3u)).x));
                        uint _3135 = (_3113 * 48u) + 4u;
                        vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3135)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 3u)).x));
                        uint _3154 = (_3113 * 48u) + 8u;
                        vec3 _3165 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3154)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 2u)).x));
                        float _3169 = _3129.x - _1832;
                        float _3170 = _3129.y - _1833;
                        float _3171 = _3129.z - _1834;
                        float _3172 = dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171));
                        float _3175 = inversesqrt(_3172);
                        float _3176 = _3175 * _3169;
                        float _3177 = _3175 * _3170;
                        float _3178 = _3175 * _3171;
                        float _3179 = dot(vec3(_714, _717, _720), vec3(_3176, _3177, _3178));
                        float _3184 = 1.0 - (_3172 * _3129.w);
                        float _4525 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3185 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                        float _3186 = sqrt(_3172) * _3148.w;
                        float _3189 = 1.39999997615814208984375 / (_3186 + 1.39999997615814208984375);
                        float _3190 = _3189 * _3189;
                        float _3193 = ((1.0 - _3190) * _3179) + _3190;
                        float _3196 = _3186 * _3186;
                        float _3200 = ((isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0))) * _3185) / ((_3196 * 0.699999988079071044921875) + 1.0);
                        float _3204 = (-0.0) - _1832;
                        float _3205 = (-0.0) - _1833;
                        float _3206 = (-0.0) - _1834;
                        float _3210 = inversesqrt(dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206)));
                        float _3211 = _3210 * _3204;
                        float _3212 = _3210 * _3205;
                        float _3213 = _3210 * _3206;
                        float _3220 = exp2(log2(1.0 / ((_3196 * 3.5) + 5.0)) * 0.25);
                        float _3221 = 1.0 - _774;
                        float _3228 = sqrt(1.0 - ((1.0 - (_3221 * _3221)) * (1.0 - (_3220 * _3220))));
                        float _3229 = _3228 * _3228;
                        float _3230 = _3229 * _3229;
                        float _3231 = _3211 + _3176;
                        float _3232 = _3212 + _3177;
                        float _3233 = _3213 + _3178;
                        float _3237 = inversesqrt(dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233)));
                        float _3241 = dot(vec3(_714, _717, _720), vec3(_3211, _3212, _3213));
                        float _4541 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3244 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                        float _3245 = dot(vec3(_714, _717, _720), vec3(_3237 * _3231, _3237 * _3232, _3237 * _3233));
                        float _4552 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                        float _3248 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                        float _3252 = ((_3248 * _3248) * (_3230 + (-1.0))) + 1.0;
                        float _3253 = _3189 * _3229;
                        float _3254 = _3253 * _3253;
                        float _3257 = ((1.0 - _3254) * _3179) + _3254;
                        float _4563 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                        float _3258 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                        float _3259 = 1.0 - _3229;
                        float _3269 = (0.5 / (((_3258 * ((_3244 * _3259) + _3229)) + 9.9999999392252902907785028219223e-09) + (((_3258 * _3259) + _3229) * _3244))) * _3258;
                        float _4574 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3280 = (((_3230 * 3.1415927410125732421875) * (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) / ((_3252 * _3252) * ((_3196 * 2.1991131305694580078125) + 3.141590118408203125))) * _3185;
                        _3038 = (_3200 * _3148.x) + _3106;
                        _3039 = (_3200 * _3148.y) + _3107;
                        _3040 = (_3200 * _3148.z) + _3108;
                        _3035 = (_3280 * _3165.x) + _3103;
                        _3036 = (_3280 * _3165.y) + _3104;
                        _3037 = (_3280 * _3165.z) + _3105;
                        if (_3110 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3103 = _3035;
                            _3104 = _3036;
                            _3105 = _3037;
                            _3106 = _3038;
                            _3107 = _3039;
                            _3108 = _3040;
                            _3109 = _3110;
                        }
                    }
                    frontier_phi_66_pred = _3040;
                    frontier_phi_66_pred_1 = _3039;
                    frontier_phi_66_pred_2 = _3038;
                    frontier_phi_66_pred_3 = _3037;
                    frontier_phi_66_pred_4 = _3036;
                    frontier_phi_66_pred_5 = _3035;
                }
                _2845 = frontier_phi_66_pred;
                _2843 = frontier_phi_66_pred_1;
                _2841 = frontier_phi_66_pred_2;
                _2839 = frontier_phi_66_pred_3;
                _2837 = frontier_phi_66_pred_4;
                _2835 = frontier_phi_66_pred_5;
                uint _2986 = _2985 + 1u;
                if (_2986 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2979 = _2835;
                    _2980 = _2837;
                    _2981 = _2839;
                    _2982 = _2841;
                    _2983 = _2843;
                    _2984 = _2845;
                    _2985 = _2986;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
        }
        uvec4 _2848 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2849 = _2848.z;
        uint _2851 = (_2849 >> 8u) & 15u;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        if (((4294967295u << _2851) & _2754) == 0u)
        {
            _2947 = _2834;
            _2949 = _2836;
            _2951 = _2838;
            _2953 = _2840;
            _2955 = _2842;
            _2957 = _2844;
        }
        else
        {
            float _2972 = inversesqrt(dot(vec3(_1832, _1833, _1834), vec3(_1832, _1833, _1834)));
            float _2973 = _2972 * _1832;
            float _2974 = _2972 * _1833;
            float _2975 = _2972 * _1834;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2851 < ((_2849 >> 12u) & 15u))
            {
                float _2948;
                float _2950;
                float _2952;
                float _2954;
                float _2956;
                float _2958;
                float _3086 = _2834;
                float _3087 = _2836;
                float _3088 = _2838;
                float _3089 = _2840;
                float _3090 = _2842;
                float _3091 = _2844;
                uint _3092 = _2851;
                uint _3101;
                bool _3102;
                for (;;)
                {
                    _3101 = texelFetch(g_lightClassification, int((((_2748 << 5u) + (_2734 << 9u)) + (_3092 << 2u)) >> 2u)).x;
                    _3102 = _3101 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3102)
                    {
                        frontier_phi_72_pred = _3091;
                        frontier_phi_72_pred_1 = _3090;
                        frontier_phi_72_pred_2 = _3089;
                        frontier_phi_72_pred_3 = _3088;
                        frontier_phi_72_pred_4 = _3087;
                        frontier_phi_72_pred_5 = _3086;
                    }
                    else
                    {
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3298 = _3086;
                        float _3299 = _3087;
                        float _3300 = _3088;
                        float _3301 = _3089;
                        float _3302 = _3090;
                        float _3303 = _3091;
                        uint _3304 = _3101;
                        uint _3305;
                        vec4 _3330;
                        float _3331;
                        vec4 _3346;
                        vec3 _3358;
                        vec4 _3373;
                        vec4 _3388;
                        float _3435;
                        bool _3436;
                        for (;;)
                        {
                            uint _3315 = ((_3092 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3304));
                            _3305 = (_3304 + 4294967295u) & _3304;
                            uint _3317 = _3315 * 40u;
                            _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            _3331 = _3330.w;
                            uint _3333 = (_3315 * 40u) + 4u;
                            _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3348 = (_3315 * 40u) + 8u;
                            _3358 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x));
                            uint _3360 = (_3315 * 40u) + 16u;
                            _3373 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 3u)).x));
                            uint _3375 = (_3315 * 40u) + 20u;
                            _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            uint _3391 = (_3315 * 40u) + 24u;
                            vec4 _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3410 = (_3315 * 40u) + 28u;
                            vec4 _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            _3435 = fma(_1834, _3423.z, fma(_1833, _3423.y, _3423.x * _1832)) + _3423.w;
                            _3436 = !((fma(_1834, _3404.z, fma(_1833, _3404.y, _3404.x * _1832)) + _3404.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3436)
                            {
                                float _3463 = _3330.x - _1832;
                                float _3464 = _3330.y - _1833;
                                float _3465 = _3330.z - _1834;
                                float _3466 = dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465));
                                float _3469 = inversesqrt(_3466);
                                float _3470 = _3469 * _3463;
                                float _3471 = _3469 * _3464;
                                float _3472 = _3469 * _3465;
                                float _3476 = 1.0 - (_3466 / (_3331 * _3331));
                                float _4585 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3477 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3481 = sqrt(_3466) * _3346.w;
                                float _3483 = 1.39999997615814208984375 / (_3481 + 1.39999997615814208984375);
                                float _3484 = _3483 * _3483;
                                float _3487 = ((1.0 - _3484) * dot(vec3(_3470, _3471, _3472), vec3(_714, _717, _720))) + _3484;
                                float _3490 = _3481 * _3481;
                                float _3494 = (fma(_1834, _3373.z, fma(_1833, _3373.y, _3373.x * _1832)) + _3373.w) / _3435;
                                float _3495 = (fma(_1834, _3388.z, fma(_1833, _3388.y, _3388.x * _1832)) + _3388.w) / _3435;
                                float _3499 = 1.0 - dot(vec2(_3494, _3495), vec2(_3494, _3495));
                                float _4601 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3500 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                                float _3501 = _3500 * (((isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0))) * _3477) / ((_3490 * 0.699999988079071044921875) + 1.0));
                                float _3513 = exp2(log2(1.0 / ((_3490 * 3.5) + 5.0)) * 0.25);
                                float _3514 = 1.0 - _774;
                                float _3521 = sqrt(1.0 - ((1.0 - (_3514 * _3514)) * (1.0 - (_3513 * _3513))));
                                float _3522 = _3521 * _3521;
                                float _3523 = _3522 * _3522;
                                float _3524 = _3470 - _2973;
                                float _3525 = _3471 - _2974;
                                float _3526 = _3472 - _2975;
                                float _3530 = inversesqrt(dot(vec3(_3524, _3525, _3526), vec3(_3524, _3525, _3526)));
                                float _3534 = dot(vec3(_714, _717, _720), vec3((-0.0) - _2973, (-0.0) - _2974, (-0.0) - _2975));
                                float _4612 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3537 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                                float _3538 = dot(vec3(_714, _717, _720), vec3(_3530 * _3524, _3530 * _3525, _3530 * _3526));
                                float _4623 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3541 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                                float _3545 = ((_3541 * _3541) * (_3523 + (-1.0))) + 1.0;
                                float _3546 = _3483 * _3522;
                                float _3547 = _3546 * _3546;
                                float _3553 = ((1.0 - _3547) * dot(vec3(_714, _717, _720), vec3(_3470, _3471, _3472))) + _3547;
                                float _4634 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3554 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                                float _3555 = 1.0 - _3522;
                                float _3565 = (0.5 / (((_3554 * ((_3537 * _3555) + _3522)) + 9.9999999392252902907785028219223e-09) + (((_3554 * _3555) + _3522) * _3537))) * _3554;
                                float _4645 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3575 = (_3500 * _3477) * (((_3523 * 3.1415927410125732421875) * (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0)))) / ((_3545 * _3545) * ((_3490 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3501 * _3346.y;
                                frontier_phi_78_pred_1 = _3501 * _3346.x;
                                frontier_phi_78_pred_2 = _3575 * _3358.z;
                                frontier_phi_78_pred_3 = _3575 * _3358.y;
                                frontier_phi_78_pred_4 = _3575 * _3358.x;
                                frontier_phi_78_pred_5 = _3501 * _3346.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3583 = frontier_phi_78_pred;
                            _3582 = frontier_phi_78_pred_1;
                            _3581 = frontier_phi_78_pred_2;
                            _3580 = frontier_phi_78_pred_3;
                            _3579 = frontier_phi_78_pred_4;
                            _3584 = frontier_phi_78_pred_5;
                            _3288 = _3582 + _3301;
                            _3289 = _3583 + _3302;
                            _3290 = _3584 + _3303;
                            _3285 = _3579 + _3298;
                            _3286 = _3580 + _3299;
                            _3287 = _3581 + _3300;
                            if (_3305 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3305;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3290;
                        frontier_phi_72_pred_1 = _3289;
                        frontier_phi_72_pred_2 = _3288;
                        frontier_phi_72_pred_3 = _3287;
                        frontier_phi_72_pred_4 = _3286;
                        frontier_phi_72_pred_5 = _3285;
                    }
                    _2958 = frontier_phi_72_pred;
                    _2956 = frontier_phi_72_pred_1;
                    _2954 = frontier_phi_72_pred_2;
                    _2952 = frontier_phi_72_pred_3;
                    _2950 = frontier_phi_72_pred_4;
                    _2948 = frontier_phi_72_pred_5;
                    uint _3093 = _3092 + 1u;
                    if (_3093 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3086 = _2948;
                        _3087 = _2950;
                        _3088 = _2952;
                        _3089 = _2954;
                        _3090 = _2956;
                        _3091 = _2958;
                        _3092 = _3093;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2958;
                frontier_phi_60_61_ladder_1 = _2956;
                frontier_phi_60_61_ladder_2 = _2952;
                frontier_phi_60_61_ladder_3 = _2950;
                frontier_phi_60_61_ladder_4 = _2948;
                frontier_phi_60_61_ladder_5 = _2954;
            }
            else
            {
                frontier_phi_60_61_ladder = _2844;
                frontier_phi_60_61_ladder_1 = _2842;
                frontier_phi_60_61_ladder_2 = _2838;
                frontier_phi_60_61_ladder_3 = _2836;
                frontier_phi_60_61_ladder_4 = _2834;
                frontier_phi_60_61_ladder_5 = _2840;
            }
            _2947 = frontier_phi_60_61_ladder_4;
            _2949 = frontier_phi_60_61_ladder_3;
            _2951 = frontier_phi_60_61_ladder_2;
            _2953 = frontier_phi_60_61_ladder_5;
            _2955 = frontier_phi_60_61_ladder_1;
            _2957 = frontier_phi_60_61_ladder;
        }
        float _2962 = isnan(1.0) ? _758 : (isnan(_758) ? 1.0 : min(_758, 1.0));
        _2767 = (_2962 * _2953) + _2298;
        _2769 = (_2962 * _2955) + _2300;
        _2771 = (_2962 * _2957) + _2302;
        _2773 = ((_2947 * 0.039999999105930328369140625) * _2962) + _2621;
        _2775 = ((_2949 * 0.039999999105930328369140625) * _2962) + _2623;
        _2777 = ((_2951 * 0.039999999105930328369140625) * _2962) + _2625;
    }
    else
    {
        _2767 = _2298;
        _2769 = _2300;
        _2771 = _2302;
        _2773 = _2621;
        _2775 = _2623;
        _2777 = _2625;
    }
    float _4661 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4672 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4683 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    uint _2797 = _733 + 6u;
    float _2805 = _695 / cbSceneParam._m0[86u].x;
    float _2806 = _696 / cbSceneParam._m0[86u].y;
    vec4 _2820 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2805, _2806, (log2((isnan(cbSceneParam._m0[77u].w) ? _629 : (isnan(_629) ? cbSceneParam._m0[77u].w : min(_629, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2822 = _2820.x;
    float _2823 = _2820.y;
    float _2824 = _2820.z;
    float _2825 = _2820.w;
    float _2897;
    float _2899;
    float _2901;
    float _2903;
    if (_629 > cbSceneParam._m0[78u].w)
    {
        float _2859 = isnan(_629) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _629 : min(cbSceneParam._m0[80u].w, _629));
        float _2860 = _2859 / _629;
        float _2871 = _2860 * _680;
        float _2872 = _681 * _2860;
        float _2873 = (-0.0) - _2872;
        float _2875 = _2860 * _682;
        float _2877 = (cbSceneParam._m0[77u].w * _2873) / _2859;
        float _2878 = _2877 + cbSceneParam._m0[79u].w;
        float _2879 = cbSceneParam._m0[79u].w - _2872;
        float _2885 = sqrt(((_2871 * _2871) + (_2872 * _2872)) + (_2875 * _2875));
        float _2888 = (1.0 - (cbSceneParam._m0[77u].w / _2859)) * _2885;
        float _2893 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2895 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3048;
        if (abs((_2873 - _2877) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3048 = ((((_2878 > 0.0) ? exp2(_2893 * _2878) : (2.0 - exp2(_2895 * _2878))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2888;
        }
        else
        {
            float _3008 = 1.0 / cbSceneParam._m0[80u].x;
            float _3009 = isnan(_2879) ? _2878 : (isnan(_2878) ? _2879 : max(_2878, _2879));
            float _3010 = isnan(_2879) ? _2878 : (isnan(_2878) ? _2879 : min(_2878, _2879));
            float _3019 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : min(_3009, 0.0));
            float _3020 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : min(_3010, 0.0));
            _3048 = ((abs(_2885 / _2873) * cbSceneParam._m0[80u].y) * ((((_3019 - _3020) * 2.0) - ((exp2(_2893 * (isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0)))) - exp2(_2893 * (isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0))))) * _3008)) - ((exp2(_2895 * _3019) - exp2(_2895 * _3020)) * _3008))) + (_2888 * cbSceneParam._m0[80u].z);
        }
        vec4 _3050 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2805, _2806, 1.0), 0.0);
        float _3059 = exp2((_3048 * (-1.44269502162933349609375)) * (1.0 - _3050.w));
        float _3060 = log2(_3059);
        float _3076 = log2(_2825);
        _2897 = (exp2(_3076 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3060 * cbSceneParam._m0[78u].x)) * _3050.x) / cbSceneParam._m0[78u].x)) + _2822;
        _2899 = (exp2(_3076 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3060 * cbSceneParam._m0[78u].y)) * _3050.y) / cbSceneParam._m0[78u].y)) + _2823;
        _2901 = (exp2(_3076 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3060 * cbSceneParam._m0[78u].z)) * _3050.z) / cbSceneParam._m0[78u].z)) + _2824;
        _2903 = _3059 * _2825;
    }
    else
    {
        _2897 = _2822;
        _2899 = _2823;
        _2901 = _2824;
        _2903 = _2825;
    }
    float _2915 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2916 = _2915 == 3.0;
    float _2917 = log2(_2903);
    float _2924 = exp2(_2917 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2767 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _758))) + ((_2773 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1565)) * cbPerFrame._m0[3u].x));
    float _2925 = exp2(_2917 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2769 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _758))) + ((_2775 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1565)) * cbPerFrame._m0[3u].x));
    float _2926 = exp2(_2917 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2771 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _758))) + ((_2777 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1565)) * cbPerFrame._m0[3u].x));
    float _2935 = (_2915 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2935 * (_2916 ? _2924 : (_2924 + (cbSceneParam._m0[72u].w * _2897)));
    SV_Target.y = _2935 * (_2916 ? _2925 : (_2925 + (cbSceneParam._m0[72u].w * _2899)));
    SV_Target.z = _2935 * (_2916 ? _2926 : (_2926 + (cbSceneParam._m0[72u].w * _2901)));
    SV_Target.w = cbInstanceData._m0[_2797].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2797].w;
}


