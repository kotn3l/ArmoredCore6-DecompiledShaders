#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1203;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _252 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _258 = _252.x * cbMtdParam._m0[10u].x;
    float _259 = _252.y * cbMtdParam._m0[10u].y;
    float _260 = _252.z * cbMtdParam._m0[10u].z;
    vec4 _279 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _326 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x;
    float _337 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _326)) + 1.0;
    float _3795 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _338 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _345 = (_338 * ((_279.x * cbMtdParam._m0[11u].x) - _258)) + _258;
    float _346 = (_338 * ((_279.y * cbMtdParam._m0[11u].y) - _259)) + _259;
    float _347 = (_338 * ((_279.z * cbMtdParam._m0[11u].z) - _260)) + _260;
    vec4 _366 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _396 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _326)) + 1.0;
    float _3806 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _404 = (_397 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _405 = (_397 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _406 = (_397 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    vec4 _423 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _448 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _326)) + 1.0;
    float _3817 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _456 = (_449 * ((_423.x * cbMtdParam._m0[13u].x) - _404)) + _404;
    float _457 = (_449 * ((_423.y * cbMtdParam._m0[13u].y) - _405)) + _405;
    float _458 = (_449 * ((_423.z * cbMtdParam._m0[13u].z) - _406)) + _406;
    vec4 _479 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _508 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3828 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _509 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _516 = (_509 * ((_479.x * cbMtdParam._m0[14u].x) - _456)) + _456;
    float _517 = (_509 * ((_479.y * cbMtdParam._m0[14u].y) - _457)) + _457;
    float _518 = (_509 * ((_479.z * cbMtdParam._m0[14u].z) - _458)) + _458;
    vec4 _534 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _556 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _574 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _576 = _574.x;
    float _577 = _574.y;
    float _580 = cbMtdParam._m0[16u].w * _574.z;
    float _583 = (((cbMtdParam._m0[17u].x * _556.z) - _580) * _338) + _580;
    vec4 _596 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _605 = (((cbMtdParam._m0[17u].y * _596.z) - _583) * _397) + _583;
    vec4 _618 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _627 = (((cbMtdParam._m0[17u].z * _618.z) - _605) * _449) + _605;
    float _632 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_534.z * cbMtdParam._m0[16u].z) - _627)) + _627;
    float _637 = ((_556.x - _576) * _338) + _576;
    float _638 = ((_556.y - _577) * _338) + _577;
    float _643 = ((_596.x - _637) * _397) + _637;
    float _644 = ((_596.y - _638) * _397) + _638;
    float _653 = ((((_618.x - _643) * _449) + _643) * 2.0) + (-1.0);
    float _654 = ((((_618.y - _644) * _449) + _644) * 2.0) + (-1.0);
    float _655 = dot(vec2(_653, _654), vec2(_653, _654));
    float _3839 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _660 = sqrt(1.0 - (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))));
    float _666 = ((((_534.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _653;
    float _667 = ((((_534.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _654;
    float _670 = fma(_660, _222 * NORMAL.x, fma(_667, _229 * TANGENT.x, (_215 * _207) * _666));
    float _673 = fma(_660, _222 * NORMAL.y, fma(_667, _229 * TANGENT.y, (_215 * _208) * _666));
    float _676 = fma(_660, _222 * NORMAL.z, fma(_667, _229 * TANGENT.z, (_215 * _209) * _666));
    float _680 = inversesqrt(dot(vec3(_670, _673, _676), vec3(_670, _673, _676)));
    float _681 = _680 * _670;
    float _682 = _680 * _673;
    float _683 = _680 * _676;
    float _3850 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _684 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _3861 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _3872 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _3883 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _703 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _753 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _743);
    float _754 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _743);
    float _755 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _743);
    float _759 = inversesqrt(dot(vec3(_753, _754, _755), vec3(_753, _754, _755)));
    float _760 = _753 * _759;
    float _761 = _754 * _759;
    float _762 = _755 * _759;
    float _768 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _769 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _787 = fma(_683, cbSceneParam._m0[5u].z, fma(_682, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _681));
    float _790 = fma(_683, cbSceneParam._m0[6u].z, fma(_682, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _681));
    float _793 = fma(_683, cbSceneParam._m0[7u].z, fma(_682, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _681));
    uint _806 = uint(roundEven(NORMAL.w)) * 13u;
    uint _808 = (_806 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _814 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) * cbInstanceData._m0[_808].x;
    float _815 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) * cbInstanceData._m0[_808].y;
    float _816 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * cbInstanceData._m0[_808].z;
    float _3894 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _817 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _3905 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _818 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _3916 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _819 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    vec4 _828 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _768, cbSceneParam._m0[86u].y * _769));
    float _831 = _828.x * TEXCOORD_5.w;
    float _832 = dot(vec3(_681, _682, _683), vec3(_760, _761, _762));
    float _835 = _832 * 2.0;
    float _839 = (_835 * _681) - _760;
    float _840 = (_835 * _682) - _761;
    float _841 = (_835 * _683) - _762;
    float _845 = abs(dot(vec3(_760, _761, _762), vec3(_681, _682, _683)));
    float _3927 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _847 = sqrt(_684);
    float _860 = exp2((_847 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_847 * 3.0));
    float _892 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _900 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1202;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _927 = fma(_900, cbModelParam._m0[26u].z, fma(_896, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _892));
        float _931 = fma(_900, cbModelParam._m0[27u].z, fma(_896, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _892));
        float _935 = fma(_900, cbModelParam._m0[28u].z, fma(_896, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _892));
        float _960 = _892 + _681;
        float _961 = _896 + _682;
        float _962 = _900 + _683;
        float _972 = fma(_962, cbModelParam._m0[26u].z, fma(_961, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _960)) - _927;
        float _973 = fma(_962, cbModelParam._m0[27u].z, fma(_961, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _960)) - _931;
        float _974 = fma(_962, cbModelParam._m0[28u].z, fma(_961, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _960)) - _935;
        float _978 = inversesqrt(dot(vec3(_972, _973, _974), vec3(_972, _973, _974)));
        float _991 = ((_978 * _972) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_927 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _992 = ((_978 * _973) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_931 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _993 = ((_978 * _974) / cbModelParam._m0[34u].z) + ((((((_935 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        float _1030 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_996.x + (-0.5));
        float _1032 = _1030 * (_996.y + (-0.5));
        float _1033 = _1030 * (_996.z + (-0.5));
        float _1040 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1003.x + (-0.5));
        float _1042 = _1040 * (_1003.y + (-0.5));
        float _1043 = _1040 * (_1003.z + (-0.5));
        float _1050 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1010.x + (-0.5));
        float _1052 = _1050 * (_1010.y + (-0.5));
        float _1053 = _1050 * (_1010.z + (-0.5));
        float _1060 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1017.x + (-0.5));
        float _1062 = _1060 * (_1017.y + (-0.5));
        float _1063 = _1060 * (_1017.z + (-0.5));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = _1031 * 0.5;
        float _1068 = _1041 * 0.5;
        float _1069 = _1051 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1084 = (dot(vec3(_681, _682, _683), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1094 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3975 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1096 + 1.0))) + _1101) * _1064;
        float _1111 = _1032 * 0.5;
        float _1112 = _1042 * 0.5;
        float _1113 = _1052 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_681, _682, _683), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _4008 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1138 + 1.0))) + _1143) * _1065;
        float _1153 = _1033 * 0.5;
        float _1154 = _1043 * 0.5;
        float _1155 = _1053 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_681, _682, _683), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _4041 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1180 + 1.0))) + _1185) * _1066;
        _1202 = _1033;
        _1204 = _1032;
        _1205 = _1031;
        _1206 = _1043;
        _1207 = _1042;
        _1208 = _1041;
        _1209 = _1053;
        _1210 = _1052;
        _1211 = _1051;
        _1212 = _1066;
        _1213 = _1065;
        _1214 = _1064;
        _1215 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
        _1216 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
        _1217 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
    }
    else
    {
        _1202 = _1203;
        _1204 = _1203;
        _1205 = _1203;
        _1206 = _1203;
        _1207 = _1203;
        _1208 = _1203;
        _1209 = _1203;
        _1210 = _1203;
        _1211 = _1203;
        _1212 = _1203;
        _1213 = _1203;
        _1214 = _1203;
        _1215 = 0.0;
        _1216 = 0.0;
        _1217 = 0.0;
    }
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1243 = fma(_900, cbModelParam._m0[30u].z, fma(_896, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _892));
        float _1247 = fma(_900, cbModelParam._m0[31u].z, fma(_896, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _892));
        float _1251 = fma(_900, cbModelParam._m0[32u].z, fma(_896, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _892));
        float _1274 = _892 + _681;
        float _1275 = _896 + _682;
        float _1276 = _900 + _683;
        float _1286 = fma(_1276, cbModelParam._m0[30u].z, fma(_1275, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1274)) - _1243;
        float _1287 = fma(_1276, cbModelParam._m0[31u].z, fma(_1275, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1274)) - _1247;
        float _1288 = fma(_1276, cbModelParam._m0[32u].z, fma(_1275, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1274)) - _1251;
        float _1292 = inversesqrt(dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288)));
        float _1305 = ((_1292 * _1286) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1243 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1306 = ((_1292 * _1287) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1247 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1307 = ((_1292 * _1288) / cbModelParam._m0[35u].z) + ((((((_1251 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        float _1342 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1309.x + (-0.5));
        float _1344 = _1342 * (_1309.y + (-0.5));
        float _1345 = _1342 * (_1309.z + (-0.5));
        float _1352 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1316.x + (-0.5));
        float _1354 = _1352 * (_1316.y + (-0.5));
        float _1355 = _1352 * (_1316.z + (-0.5));
        float _1362 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1323.x + (-0.5));
        float _1364 = _1362 * (_1323.y + (-0.5));
        float _1365 = _1362 * (_1323.z + (-0.5));
        float _1372 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1330.x + (-0.5));
        float _1374 = _1372 * (_1330.y + (-0.5));
        float _1375 = _1372 * (_1330.z + (-0.5));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = _1343 * 0.5;
        float _1380 = _1353 * 0.5;
        float _1381 = _1363 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_681, _682, _683), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4104 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1406 + 1.0))) + _1411) * _1376;
        float _1421 = _1344 * 0.5;
        float _1422 = _1354 * 0.5;
        float _1423 = _1364 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_681, _682, _683), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1377 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _4137 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1448 + 1.0))) + _1453) * _1377;
        float _1463 = _1345 * 0.5;
        float _1464 = _1355 * 0.5;
        float _1465 = _1365 * 0.5;
        float _1466 = dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465));
        float _1471 = (_1466 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1466);
        float _1479 = (dot(vec3(_681, _682, _683), vec3(_1471 * _1463, _1471 * _1464, _1471 * _1465)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1488 = sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1490 = _1489 * 2.0;
        float _1494 = (1.0 - _1489) / (_1489 + 1.0);
        float _4170 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1504 = ((((1.0 - _1495) * (_1490 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1490 + 1.0))) + _1495) * _1378;
        _1512 = _1345;
        _1513 = _1344;
        _1514 = _1343;
        _1515 = _1355;
        _1516 = _1354;
        _1517 = _1353;
        _1518 = _1365;
        _1519 = _1364;
        _1520 = _1363;
        _1521 = _1378;
        _1522 = _1377;
        _1523 = _1376;
        _1524 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
        _1525 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
        _1526 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)));
    }
    else
    {
        _1512 = _1203;
        _1513 = _1203;
        _1514 = _1203;
        _1515 = _1203;
        _1516 = _1203;
        _1517 = _1203;
        _1518 = _1203;
        _1519 = _1203;
        _1520 = _1203;
        _1521 = _1203;
        _1522 = _1203;
        _1523 = _1203;
        _1524 = 0.0;
        _1525 = 0.0;
        _1526 = 0.0;
    }
    float _1536 = (cbModelParam._m0[1u].x * (_1524 - _1215)) + _1215;
    float _1537 = (cbModelParam._m0[1u].x * (_1525 - _1216)) + _1216;
    float _1538 = (cbModelParam._m0[1u].x * (_1526 - _1217)) + _1217;
    float _1559 = fma(_1538, cbSceneParam._m0[89u].z, fma(_1537, cbSceneParam._m0[89u].y, _1536 * cbSceneParam._m0[89u].x));
    float _1562 = fma(_1538, cbSceneParam._m0[90u].z, fma(_1537, cbSceneParam._m0[90u].y, _1536 * cbSceneParam._m0[90u].x));
    float _1565 = fma(_1538, cbSceneParam._m0[91u].z, fma(_1537, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1536));
    float _1580 = _839 * 0.5;
    float _1581 = _840 * 0.5;
    float _1582 = _841 * 0.5;
    float _1583 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1514, _1517, _1520, _1523));
    float _1586 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1513, _1516, _1519, _1522));
    float _1589 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1512, _1515, _1518, _1521));
    float _1623;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1596 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1202, _1206, _1209, _1212));
        float _1600 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1204, _1207, _1210, _1213));
        float _1604 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1205, _1208, _1211, _1214));
        float _1611 = dot(vec4(cbModelParam._m0[39u]), vec4(_1580, _1581, _1582, 1.0));
        _1623 = dot(vec3(isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1611) ? 0.0 : (isnan(0.0) ? _1611 : max(0.0, _1611))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1623 = 1.0;
    }
    float _1634;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1625 = dot(vec4(cbModelParam._m0[40u]), vec4(_1580, _1581, _1582, 1.0));
        _1634 = dot(vec3(isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1625) ? 0.0 : (isnan(0.0) ? _1625 : max(0.0, _1625))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1634 = 1.0;
    }
    float _1638 = (_1634 * cbModelParam._m0[1u].x) + (_1623 * (1.0 - cbModelParam._m0[1u].x));
    float _1648 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _684);
    float _1649 = isnan(_1648) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1648 : min(cbModelParam._m0[25u].z, _1648));
    float _1729;
    float _1731;
    float _1733;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1696 = fma(_900, cbModelParam._m0[13u].z, fma(_896, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _892)) + cbModelParam._m0[13u].w;
        float _1700 = fma(_900, cbModelParam._m0[14u].z, fma(_896, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _892)) + cbModelParam._m0[14u].w;
        float _1704 = fma(_900, cbModelParam._m0[15u].z, fma(_896, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _892)) + cbModelParam._m0[15u].w;
        float _1707 = fma(_841, cbModelParam._m0[13u].z, fma(_840, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _839));
        float _1710 = fma(_841, cbModelParam._m0[14u].z, fma(_840, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _839));
        float _1713 = fma(_841, cbModelParam._m0[15u].z, fma(_840, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _839));
        float _1741;
        if (_1707 > 0.0)
        {
            _1741 = abs((1.0 - _1696) / _1707);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1696 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1741 = frontier_phi_14_12_ladder;
        }
        float _1912;
        if (_1710 > 0.0)
        {
            _1912 = abs((1.0 - _1700) / _1710);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1700 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1912 = frontier_phi_23_19_ladder;
        }
        float _2208;
        if (_1713 > 0.0)
        {
            _2208 = abs((1.0 - _1704) / _1713);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1704 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2208 = frontier_phi_35_30_ladder;
        }
        float _2210 = isnan(_1912) ? _1741 : (isnan(_1741) ? _1912 : min(_1741, _1912));
        float _2211 = isnan(_2208) ? _2210 : (isnan(_2210) ? _2208 : min(_2210, _2208));
        float _2215 = (_2211 * _1707) + _1696;
        float _2216 = (_2211 * _1710) + _1700;
        float _2217 = (_2211 * _1713) + _1704;
        float _2218 = _2211 * 9.9999997473787516355514526367188e-05;
        float _2220 = (-1.0) - _2218;
        float _2222 = _2218 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2217 > _2222) || ((_2217 < _2220) || ((_2216 > _2222) || ((_2216 < _2220) || ((_2215 < _2220) || (_2215 > _2222))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2362 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2217, cbModelParam._m0[9u].z, fma(_2216, cbModelParam._m0[9u].y, _2215 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2217, cbModelParam._m0[10u].z, fma(_2216, cbModelParam._m0[10u].y, _2215 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2217, cbModelParam._m0[11u].z, fma(_2216, cbModelParam._m0[11u].y, _2215 * cbModelParam._m0[11u].x))), _1649);
            frontier_phi_13_35_ladder = _2362.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2362.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2362.x * cbModelParam._m0[1u].y;
        }
        _1729 = frontier_phi_13_35_ladder_2;
        _1731 = frontier_phi_13_35_ladder_1;
        _1733 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1717 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_839, _840, _841), _1649);
        _1729 = _1717.x * cbModelParam._m0[1u].y;
        _1731 = _1717.y * cbModelParam._m0[1u].y;
        _1733 = _1717.z * cbModelParam._m0[1u].y;
    }
    float _1737 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _684);
    float _1738 = isnan(_1737) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1737 : min(cbModelParam._m0[25u].w, _1737));
    float _1829;
    float _1831;
    float _1833;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1793 = fma(_900, cbModelParam._m0[21u].z, fma(_896, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _892)) + cbModelParam._m0[21u].w;
        float _1797 = fma(_900, cbModelParam._m0[22u].z, fma(_896, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _892)) + cbModelParam._m0[22u].w;
        float _1801 = fma(_900, cbModelParam._m0[23u].z, fma(_896, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _892)) + cbModelParam._m0[23u].w;
        float _1804 = fma(_841, cbModelParam._m0[21u].z, fma(_840, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _839));
        float _1807 = fma(_841, cbModelParam._m0[22u].z, fma(_840, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _839));
        float _1810 = fma(_841, cbModelParam._m0[23u].z, fma(_840, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _839));
        float _1917;
        if (_1804 > 0.0)
        {
            _1917 = abs((1.0 - _1793) / _1804);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1793 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1917 = frontier_phi_25_21_ladder;
        }
        float _2235;
        if (_1807 > 0.0)
        {
            _2235 = abs((1.0 - _1797) / _1807);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1797 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2235 = frontier_phi_37_32_ladder;
        }
        float _2562;
        if (_1810 > 0.0)
        {
            _2562 = abs((1.0 - _1801) / _1810);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1801 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2562 = frontier_phi_47_44_ladder;
        }
        float _2564 = isnan(_2235) ? _1917 : (isnan(_1917) ? _2235 : min(_1917, _2235));
        float _2565 = isnan(_2562) ? _2564 : (isnan(_2564) ? _2562 : min(_2564, _2562));
        float _2569 = (_2565 * _1804) + _1793;
        float _2570 = (_2565 * _1807) + _1797;
        float _2571 = (_2565 * _1810) + _1801;
        float _2572 = _2565 * 9.9999997473787516355514526367188e-05;
        float _2573 = (-1.0) - _2572;
        float _2575 = _2572 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2571 > _2575) || ((_2571 < _2573) || ((_2570 > _2575) || ((_2570 < _2573) || ((_2569 < _2573) || (_2569 > _2575))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2689 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2571, cbModelParam._m0[17u].z, fma(_2570, cbModelParam._m0[17u].y, _2569 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2571, cbModelParam._m0[18u].z, fma(_2570, cbModelParam._m0[18u].y, _2569 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2571, cbModelParam._m0[19u].z, fma(_2570, cbModelParam._m0[19u].y, _2569 * cbModelParam._m0[19u].x))), _1738);
            frontier_phi_22_47_ladder = _2689.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2689.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2689.x * cbModelParam._m0[1u].z;
        }
        _1829 = frontier_phi_22_47_ladder_2;
        _1831 = frontier_phi_22_47_ladder_1;
        _1833 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1813 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_839, _840, _841), _1738);
        _1829 = _1813.x * cbModelParam._m0[1u].z;
        _1831 = _1813.y * cbModelParam._m0[1u].z;
        _1833 = _1813.z * cbModelParam._m0[1u].z;
    }
    float _1845 = ((((1.0 - _860) * ((_847 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_860 * _847)) * _831;
    float _1846 = _1845 * ((cbModelParam._m0[1u].w * (_1829 - _1729)) + _1729);
    float _1847 = _1845 * ((cbModelParam._m0[1u].w * (_1831 - _1731)) + _1731);
    float _1848 = _1845 * ((cbModelParam._m0[1u].w * (_1833 - _1733)) + _1733);
    float _1851 = fma(_1848, cbSceneParam._m0[89u].z, fma(_1847, cbSceneParam._m0[89u].y, _1846 * cbSceneParam._m0[89u].x));
    float _1854 = fma(_1848, cbSceneParam._m0[90u].z, fma(_1847, cbSceneParam._m0[90u].y, _1846 * cbSceneParam._m0[90u].x));
    float _1857 = fma(_1848, cbSceneParam._m0[91u].z, fma(_1847, cbSceneParam._m0[91u].y, _1846 * cbSceneParam._m0[91u].x));
    float _1891 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1895 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1899 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1903 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1904 = _1891 / _1903;
    float _1905 = _1895 / _1903;
    float _1906 = _1899 / _1903;
    float _2053;
    float _2054;
    float _2055;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1933 = ((uint(_1906 > cbSceneParam._m0[59u].y) + uint(_1906 > cbSceneParam._m0[59u].x)) + uint(_1906 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1934 = _1933 + 43u;
        uint _1942 = _1933 + 44u;
        uint _1950 = _1933 + 45u;
        uint _1958 = _1933 + 46u;
        float _1969 = fma(_1903, cbSceneParam._m0[_1934].w, fma(_1899, cbSceneParam._m0[_1934].z, fma(_1895, cbSceneParam._m0[_1934].y, _1891 * cbSceneParam._m0[_1934].x)));
        float _1973 = fma(_1903, cbSceneParam._m0[_1942].w, fma(_1899, cbSceneParam._m0[_1942].z, fma(_1895, cbSceneParam._m0[_1942].y, _1891 * cbSceneParam._m0[_1942].x)));
        float _1981 = fma(_1903, cbSceneParam._m0[_1958].w, fma(_1899, cbSceneParam._m0[_1958].z, fma(_1895, cbSceneParam._m0[_1958].y, _1891 * cbSceneParam._m0[_1958].x)));
        float _1986 = cbSceneParam._m0[33u].z * _1981;
        float _1988 = cbSceneParam._m0[33u].w * _1981;
        float _1991 = fma(_1903, cbSceneParam._m0[_1950].w, fma(_1899, cbSceneParam._m0[_1950].z, fma(_1895, cbSceneParam._m0[_1950].y, _1891 * cbSceneParam._m0[_1950].x))) / _1981;
        float _2039 = (cbSceneParam._m0[33u].x - sqrt(((_1905 * _1905) + (_1904 * _1904)) + (_1906 * _1906))) * cbSceneParam._m0[33u].y;
        float _4296 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2046 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1986 + _1969) / _1981, (_1988 + _1973) / _1981), _1991), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1988 + _1969) / _1981, (_1973 - _1986) / _1981), _1991), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1969 - _1986) / _1981, (_1973 - _1988) / _1981), _1991), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1969 - _1988) / _1981, (_1986 + _1973) / _1981), _1991), 0.0)).x), vec4(0.25)));
        _2053 = 1.0 - (_2046 * cbSceneParam._m0[34u].x);
        _2054 = 1.0 - (_2046 * cbSceneParam._m0[34u].y);
        _2055 = 1.0 - (_2046 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2053 = 1.0;
        _2054 = 1.0;
        _2055 = 1.0;
    }
    float _2119;
    float _2121;
    float _2123;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2107 = fma(_1903, cbSceneParam._m0[63u].w, fma(_1899, cbSceneParam._m0[63u].z, fma(_1895, cbSceneParam._m0[63u].y, _1891 * cbSceneParam._m0[63u].x)));
        float _2108 = fma(_1903, cbSceneParam._m0[60u].w, fma(_1899, cbSceneParam._m0[60u].z, fma(_1895, cbSceneParam._m0[60u].y, _1891 * cbSceneParam._m0[60u].x))) / _2107;
        float _2109 = fma(_1903, cbSceneParam._m0[61u].w, fma(_1899, cbSceneParam._m0[61u].z, fma(_1895, cbSceneParam._m0[61u].y, _1891 * cbSceneParam._m0[61u].x))) / _2107;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2108 >= cbSceneParam._m0[64u].x) && (_2109 >= cbSceneParam._m0[64u].y)) && (_2108 <= cbSceneParam._m0[64u].z)) && (_2109 <= cbSceneParam._m0[64u].w))
        {
            float _2248 = fma(_1903, cbSceneParam._m0[62u].w, fma(_1899, cbSceneParam._m0[62u].z, fma(_1895, cbSceneParam._m0[62u].y, _1891 * cbSceneParam._m0[62u].x))) / _2107;
            float _2252 = isnan(cbSceneParam._m0[41u].w) ? _2248 : (isnan(_2248) ? cbSceneParam._m0[41u].w : max(_2248, cbSceneParam._m0[41u].w));
            float _2295 = (cbSceneParam._m0[33u].x - sqrt(((_1905 * _1905) + (_1904 * _1904)) + (_1906 * _1906))) * cbSceneParam._m0[33u].y;
            float _4312 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
            float _2302 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2108, cbSceneParam._m0[33u].w + _2109), _2252), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2108, _2109 - cbSceneParam._m0[33u].z), _2252), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2108 - cbSceneParam._m0[33u].z, _2109 - cbSceneParam._m0[33u].w), _2252), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2108 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2109), _2252), 0.0)).x), vec4(0.25)));
            float _2306 = 1.0 - (_2302 * cbSceneParam._m0[34u].x);
            float _2307 = 1.0 - (_2302 * cbSceneParam._m0[34u].y);
            float _2308 = 1.0 - (_2302 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2308) ? _2055 : (isnan(_2055) ? _2308 : min(_2055, _2308));
            frontier_phi_34_33_ladder_1 = isnan(_2307) ? _2054 : (isnan(_2054) ? _2307 : min(_2054, _2307));
            frontier_phi_34_33_ladder_2 = isnan(_2306) ? _2053 : (isnan(_2053) ? _2306 : min(_2053, _2306));
        }
        else
        {
            frontier_phi_34_33_ladder = _2055;
            frontier_phi_34_33_ladder_1 = _2054;
            frontier_phi_34_33_ladder_2 = _2053;
        }
        _2119 = frontier_phi_34_33_ladder_2;
        _2121 = frontier_phi_34_33_ladder_1;
        _2123 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2119 = _2053;
        _2121 = _2054;
        _2123 = _2055;
    }
    uvec4 _2128 = floatBitsToUint(cbInstanceData._m0[_806 + 5u]);
    uint _2130 = _2128.x * 14u;
    uint _2131 = _2130 + 13u;
    float _2138 = _831 + (-1.0);
    float _2143 = (cbLight._m0[_2131].x * _2138) + 1.0;
    float _2144 = (cbLight._m0[_2131].y * _2138) + 1.0;
    float _2145 = (cbLight._m0[_2131].z * _2138) + 1.0;
    float _2146 = (cbLight._m0[_2131].w * _2138) + 1.0;
    uint _2147 = _2130 + 5u;
    float _2153 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
    uint _2157 = _2130 + 4u;
    float _2167 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
    uint _2171 = _2130 | 1u;
    float _2182 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_681, _682, _683));
    float _2185 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_681, _682, _683));
    float _4348 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _4359 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2190 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * 0.3183098733425140380859375;
    float _2192 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * 0.3183098733425140380859375;
    float _2199 = ((cbLight._m0[_2147].x * _2153) * _2192) + (((cbLight._m0[_2157].x * _2119) * _2167) * _2190);
    float _2200 = ((_2153 * cbLight._m0[_2147].y) * _2192) + (((cbLight._m0[_2157].y * _2121) * _2167) * _2190);
    float _2201 = ((_2153 * cbLight._m0[_2147].z) * _2192) + (((cbLight._m0[_2157].z * _2123) * _2167) * _2190);
    uvec4 _2205 = floatBitsToUint(cbLight._m0[_2130 + 12u]);
    bool _2207 = _2205.x == 0u;
    float _2309;
    float _2311;
    float _2313;
    if (_2207)
    {
        _2309 = _2199;
        _2311 = _2200;
        _2313 = _2201;
    }
    else
    {
        uint _2317 = _2130 + 6u;
        float _2333 = (dot(vec3(cbLight._m0[_2130 + 2u].xyz), vec3(_681, _682, _683)) * 0.5) + 0.5;
        float _2334 = _2333 * _2333;
        float _4370 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2335 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2336 = isnan(1.0) ? _2145 : (isnan(_2145) ? 1.0 : min(_2145, 1.0));
        _2309 = (((cbLight._m0[_2317].x * 0.3183098733425140380859375) * _2335) * _2336) + _2199;
        _2311 = (((cbLight._m0[_2317].y * 0.3183098733425140380859375) * _2335) * _2336) + _2200;
        _2313 = (((cbLight._m0[_2317].z * 0.3183098733425140380859375) * _2335) * _2336) + _2201;
    }
    bool _2316 = _2205.y == 0u;
    float _2371;
    float _2373;
    float _2375;
    if (_2316)
    {
        _2371 = _2309;
        _2373 = _2311;
        _2375 = _2313;
    }
    else
    {
        uint _2533 = _2130 + 7u;
        float _2549 = (dot(vec3(cbLight._m0[_2130 + 3u].xyz), vec3(_681, _682, _683)) * 0.5) + 0.5;
        float _2550 = _2549 * _2549;
        float _4386 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2551 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2552 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
        _2371 = (((cbLight._m0[_2533].x * 0.3183098733425140380859375) * _2551) * _2552) + _2309;
        _2373 = (((cbLight._m0[_2533].y * 0.3183098733425140380859375) * _2551) * _2552) + _2311;
        _2375 = (((cbLight._m0[_2533].z * 0.3183098733425140380859375) * _2551) * _2552) + _2313;
    }
    uint _2378 = _2130 + 8u;
    float _2391 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2130].w)) * _684) * 0.949999988079071044921875);
    float _2392 = _2391 * _2391;
    float _2393 = cbLight._m0[_2130].x + _760;
    float _2394 = cbLight._m0[_2130].y + _761;
    float _2395 = cbLight._m0[_2130].z + _762;
    float _2399 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
    float _2400 = _2399 * _2393;
    float _2401 = _2399 * _2394;
    float _2402 = _2399 * _2395;
    float _2403 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_2130].xyz));
    float _4402 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _4413 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _2407 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _2408 = dot(vec3(_681, _682, _683), vec3(_2400, _2401, _2402));
    float _4424 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _2412 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_2400, _2401, _2402));
    float _4435 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2416 = _2392 * _2392;
    float _2420 = ((_2411 * _2411) * (_2416 + (-1.0))) + 1.0;
    float _2431 = (exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2432 = 1.0 - _2392;
    float _2443 = (0.5 / (((_2407 * ((_2406 * _2432) + _2392)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2432) + _2392) * _2406))) * _2406;
    float _4446 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2445 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2416 / ((_2420 * _2420) * 3.141590118408203125));
    uint _2459 = _2130 + 9u;
    float _2470 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2171].w)) * _684) * 0.949999988079071044921875);
    float _2471 = _2470 * _2470;
    float _2472 = cbLight._m0[_2171].x + _760;
    float _2473 = cbLight._m0[_2171].y + _761;
    float _2474 = cbLight._m0[_2171].z + _762;
    float _2478 = inversesqrt(dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474)));
    float _2479 = _2478 * _2472;
    float _2480 = _2478 * _2473;
    float _2481 = _2478 * _2474;
    float _2482 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_2171].xyz));
    float _4457 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2485 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _2486 = dot(vec3(_681, _682, _683), vec3(_2479, _2480, _2481));
    float _4468 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2489 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _2490 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_2479, _2480, _2481));
    float _4479 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2494 = _2471 * _2471;
    float _2498 = ((_2489 * _2489) * (_2494 + (-1.0))) + 1.0;
    float _2507 = (exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2508 = 1.0 - _2471;
    float _2518 = (0.5 / (((_2407 * ((_2485 * _2508) + _2471)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2508) + _2471) * _2485))) * _2485;
    float _4490 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2520 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2494 / ((_2498 * _2498) * 3.141590118408203125));
    float _2530 = (((_2507 * cbLight._m0[_2459].x) * _2520) * _2153) + ((((cbLight._m0[_2378].x * _2119) * _2431) * _2445) * _2167);
    float _2531 = (((_2507 * cbLight._m0[_2459].y) * _2520) * _2153) + ((((cbLight._m0[_2378].y * _2121) * _2431) * _2445) * _2167);
    float _2532 = (((_2507 * cbLight._m0[_2459].z) * _2520) * _2153) + ((((cbLight._m0[_2378].z * _2123) * _2431) * _2445) * _2167);
    float _2588;
    float _2590;
    float _2592;
    if (_2207)
    {
        _2588 = _2530;
        _2590 = _2531;
        _2592 = _2532;
    }
    else
    {
        uint _2594 = _2130 + 2u;
        uint _2598 = _2130 + 10u;
        float _2612 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2594].w)) * _684) * 0.949999988079071044921875);
        float _2613 = _2612 * _2612;
        float _2614 = cbLight._m0[_2594].x + _760;
        float _2615 = cbLight._m0[_2594].y + _761;
        float _2616 = cbLight._m0[_2594].z + _762;
        float _2620 = inversesqrt(dot(vec3(_2614, _2615, _2616), vec3(_2614, _2615, _2616)));
        float _2621 = _2620 * _2614;
        float _2622 = _2620 * _2615;
        float _2623 = _2620 * _2616;
        float _2624 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_2594].xyz));
        float _4501 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2627 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2628 = dot(vec3(_681, _682, _683), vec3(_2621, _2622, _2623));
        float _4512 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2631 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2632 = dot(vec3(cbLight._m0[_2594].xyz), vec3(_2621, _2622, _2623));
        float _4523 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2636 = _2613 * _2613;
        float _2640 = ((_2631 * _2631) * (_2636 + (-1.0))) + 1.0;
        float _2649 = (exp2(log2(1.0 - (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2650 = 1.0 - _2613;
        float _2660 = (0.5 / (((_2407 * ((_2627 * _2650) + _2613)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2650) + _2613) * _2627))) * _2627;
        float _4534 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2662 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2636 / ((_2640 * _2640) * 3.141590118408203125));
        float _2663 = isnan(1.0) ? _2145 : (isnan(_2145) ? 1.0 : min(_2145, 1.0));
        _2588 = (((_2649 * cbLight._m0[_2598].x) * _2662) * _2663) + _2530;
        _2590 = (((_2649 * cbLight._m0[_2598].y) * _2662) * _2663) + _2531;
        _2592 = (((_2649 * cbLight._m0[_2598].z) * _2662) * _2663) + _2532;
    }
    float _2694;
    float _2696;
    float _2698;
    if (_2316)
    {
        _2694 = _2588;
        _2696 = _2590;
        _2698 = _2592;
    }
    else
    {
        uint _2705 = _2130 + 3u;
        uint _2709 = _2130 + 11u;
        float _2723 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2705].w)) * _684) * 0.949999988079071044921875);
        float _2724 = _2723 * _2723;
        float _2725 = cbLight._m0[_2705].x + _760;
        float _2726 = cbLight._m0[_2705].y + _761;
        float _2727 = cbLight._m0[_2705].z + _762;
        float _2731 = inversesqrt(dot(vec3(_2725, _2726, _2727), vec3(_2725, _2726, _2727)));
        float _2732 = _2731 * _2725;
        float _2733 = _2731 * _2726;
        float _2734 = _2731 * _2727;
        float _2735 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_2705].xyz));
        float _4550 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2738 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2739 = dot(vec3(_681, _682, _683), vec3(_2732, _2733, _2734));
        float _4561 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2742 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2743 = dot(vec3(cbLight._m0[_2705].xyz), vec3(_2732, _2733, _2734));
        float _4572 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2747 = _2724 * _2724;
        float _2751 = ((_2742 * _2742) * (_2747 + (-1.0))) + 1.0;
        float _2760 = (exp2(log2(1.0 - (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2761 = 1.0 - _2724;
        float _2771 = (0.5 / (((_2407 * ((_2738 * _2761) + _2724)) + 9.9999999392252902907785028219223e-09) + (((_2407 * _2761) + _2724) * _2738))) * _2738;
        float _4583 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2773 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2747 / ((_2751 * _2751) * 3.141590118408203125));
        float _2774 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
        _2694 = (((_2760 * cbLight._m0[_2709].x) * _2773) * _2774) + _2588;
        _2696 = (((_2760 * cbLight._m0[_2709].y) * _2773) * _2774) + _2590;
        _2698 = (((_2760 * cbLight._m0[_2709].z) * _2773) * _2774) + _2592;
    }
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    if (_2128.y == 0u)
    {
        uvec4 _2795 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2796 = _2795.x;
        uint _2807 = uint((float(_2795.y) * floor(float(uint(cbSceneParam._m0[85u].y * _769) / _2796))) + floor(float(uint(cbSceneParam._m0[85u].x * _768) / _2796)));
        float _2817 = (log2(_1906 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2818 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        uint _2821 = uint(isnan(14.0) ? _2818 : (isnan(_2818) ? 14.0 : min(_2818, 14.0)));
        uvec4 _2826 = texelFetch(g_lightClusterGridBuffer, int(((_2821 << 2u) + (_2807 << 6u)) >> 2u));
        uint _2827 = _2826.x;
        uint _2828 = _2795.z;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        if (((((1u << ((_2828 >> 4u) & 15u)) + 4294967295u) & _2827) == 0u) || ((_2828 & 240u) == 0u))
        {
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
            _2913 = 0.0;
            _2915 = 0.0;
            _2917 = 0.0;
        }
        else
        {
            float _2908;
            float _2910;
            float _2912;
            float _2914;
            float _2916;
            float _2918;
            float _3052 = 0.0;
            float _3053 = 0.0;
            float _3054 = 0.0;
            float _3055 = 0.0;
            float _3056 = 0.0;
            float _3057 = 0.0;
            uint _3058 = 0u;
            uint _3067;
            bool _3068;
            for (;;)
            {
                _3067 = texelFetch(g_lightClassification, int((((_2821 << 5u) + (_2807 << 9u)) + (_3058 << 2u)) >> 2u)).x;
                _3068 = _3067 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3068)
                {
                    frontier_phi_66_pred = _3057;
                    frontier_phi_66_pred_1 = _3056;
                    frontier_phi_66_pred_2 = _3055;
                    frontier_phi_66_pred_3 = _3054;
                    frontier_phi_66_pred_4 = _3053;
                    frontier_phi_66_pred_5 = _3052;
                }
                else
                {
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    uint _3182;
                    _3176 = _3052;
                    _3177 = _3053;
                    _3178 = _3054;
                    _3179 = _3055;
                    _3180 = _3056;
                    _3181 = _3057;
                    _3182 = _3067;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    for (;;)
                    {
                        uint _3186 = uint(findLSB(_3182)) + (_3058 << 5u);
                        uint _3183 = (_3182 + 4294967295u) & _3182;
                        uint _3188 = _3186 * 48u;
                        vec4 _3202 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3188)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 3u)).x));
                        uint _3208 = (_3186 * 48u) + 4u;
                        vec4 _3221 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3208)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 3u)).x));
                        uint _3227 = (_3186 * 48u) + 8u;
                        vec3 _3238 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3227)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3227 + 2u)).x));
                        float _3242 = _3202.x - _1904;
                        float _3243 = _3202.y - _1905;
                        float _3244 = _3202.z - _1906;
                        float _3245 = dot(vec3(_3242, _3243, _3244), vec3(_3242, _3243, _3244));
                        float _3248 = inversesqrt(_3245);
                        float _3249 = _3248 * _3242;
                        float _3250 = _3248 * _3243;
                        float _3251 = _3248 * _3244;
                        float _3252 = dot(vec3(_787, _790, _793), vec3(_3249, _3250, _3251));
                        float _3257 = 1.0 - (_3245 * _3202.w);
                        float _4609 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                        float _3258 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                        float _3259 = sqrt(_3245) * _3221.w;
                        float _3262 = 1.39999997615814208984375 / (_3259 + 1.39999997615814208984375);
                        float _3263 = _3262 * _3262;
                        float _3266 = ((1.0 - _3263) * _3252) + _3263;
                        float _3269 = _3259 * _3259;
                        float _3273 = ((isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0))) * _3258) / ((_3269 * 0.699999988079071044921875) + 1.0);
                        float _3277 = (-0.0) - _1904;
                        float _3278 = (-0.0) - _1905;
                        float _3279 = (-0.0) - _1906;
                        float _3283 = inversesqrt(dot(vec3(_3277, _3278, _3279), vec3(_3277, _3278, _3279)));
                        float _3284 = _3283 * _3277;
                        float _3285 = _3283 * _3278;
                        float _3286 = _3283 * _3279;
                        float _3293 = exp2(log2(1.0 / ((_3269 * 3.5) + 5.0)) * 0.25);
                        float _3294 = 1.0 - _847;
                        float _3301 = sqrt(1.0 - ((1.0 - (_3294 * _3294)) * (1.0 - (_3293 * _3293))));
                        float _3302 = _3301 * _3301;
                        float _3303 = _3302 * _3302;
                        float _3304 = _3284 + _3249;
                        float _3305 = _3285 + _3250;
                        float _3306 = _3286 + _3251;
                        float _3310 = inversesqrt(dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306)));
                        float _3314 = dot(vec3(_787, _790, _793), vec3(_3284, _3285, _3286));
                        float _4625 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3317 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                        float _3318 = dot(vec3(_787, _790, _793), vec3(_3310 * _3304, _3310 * _3305, _3310 * _3306));
                        float _4636 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3321 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                        float _3325 = ((_3321 * _3321) * (_3303 + (-1.0))) + 1.0;
                        float _3326 = _3262 * _3302;
                        float _3327 = _3326 * _3326;
                        float _3330 = ((1.0 - _3327) * _3252) + _3327;
                        float _4647 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3331 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                        float _3332 = 1.0 - _3302;
                        float _3342 = (0.5 / (((_3331 * ((_3317 * _3332) + _3302)) + 9.9999999392252902907785028219223e-09) + (((_3331 * _3332) + _3302) * _3317))) * _3331;
                        float _4658 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3353 = (((_3303 * 3.1415927410125732421875) * (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) / ((_3325 * _3325) * ((_3269 * 2.1991131305694580078125) + 3.141590118408203125))) * _3258;
                        _3111 = (_3273 * _3221.x) + _3179;
                        _3112 = (_3273 * _3221.y) + _3180;
                        _3113 = (_3273 * _3221.z) + _3181;
                        _3108 = (_3353 * _3238.x) + _3176;
                        _3109 = (_3353 * _3238.y) + _3177;
                        _3110 = (_3353 * _3238.z) + _3178;
                        if (_3183 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3176 = _3108;
                            _3177 = _3109;
                            _3178 = _3110;
                            _3179 = _3111;
                            _3180 = _3112;
                            _3181 = _3113;
                            _3182 = _3183;
                        }
                    }
                    frontier_phi_66_pred = _3113;
                    frontier_phi_66_pred_1 = _3112;
                    frontier_phi_66_pred_2 = _3111;
                    frontier_phi_66_pred_3 = _3110;
                    frontier_phi_66_pred_4 = _3109;
                    frontier_phi_66_pred_5 = _3108;
                }
                _2918 = frontier_phi_66_pred;
                _2916 = frontier_phi_66_pred_1;
                _2914 = frontier_phi_66_pred_2;
                _2912 = frontier_phi_66_pred_3;
                _2910 = frontier_phi_66_pred_4;
                _2908 = frontier_phi_66_pred_5;
                uint _3059 = _3058 + 1u;
                if (_3059 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3052 = _2908;
                    _3053 = _2910;
                    _3054 = _2912;
                    _3055 = _2914;
                    _3056 = _2916;
                    _3057 = _2918;
                    _3058 = _3059;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
            _2913 = _2914;
            _2915 = _2916;
            _2917 = _2918;
        }
        uvec4 _2921 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2922 = _2921.z;
        uint _2924 = (_2922 >> 8u) & 15u;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        if (((4294967295u << _2924) & _2827) == 0u)
        {
            _3020 = _2907;
            _3022 = _2909;
            _3024 = _2911;
            _3026 = _2913;
            _3028 = _2915;
            _3030 = _2917;
        }
        else
        {
            float _3045 = inversesqrt(dot(vec3(_1904, _1905, _1906), vec3(_1904, _1905, _1906)));
            float _3046 = _3045 * _1904;
            float _3047 = _3045 * _1905;
            float _3048 = _3045 * _1906;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2924 < ((_2922 >> 12u) & 15u))
            {
                float _3021;
                float _3023;
                float _3025;
                float _3027;
                float _3029;
                float _3031;
                float _3159 = _2907;
                float _3160 = _2909;
                float _3161 = _2911;
                float _3162 = _2913;
                float _3163 = _2915;
                float _3164 = _2917;
                uint _3165 = _2924;
                uint _3174;
                bool _3175;
                for (;;)
                {
                    _3174 = texelFetch(g_lightClassification, int((((_2821 << 5u) + (_2807 << 9u)) + (_3165 << 2u)) >> 2u)).x;
                    _3175 = _3174 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3175)
                    {
                        frontier_phi_72_pred = _3164;
                        frontier_phi_72_pred_1 = _3163;
                        frontier_phi_72_pred_2 = _3162;
                        frontier_phi_72_pred_3 = _3161;
                        frontier_phi_72_pred_4 = _3160;
                        frontier_phi_72_pred_5 = _3159;
                    }
                    else
                    {
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3371 = _3159;
                        float _3372 = _3160;
                        float _3373 = _3161;
                        float _3374 = _3162;
                        float _3375 = _3163;
                        float _3376 = _3164;
                        uint _3377 = _3174;
                        uint _3378;
                        vec4 _3403;
                        float _3404;
                        vec4 _3419;
                        vec3 _3431;
                        vec4 _3446;
                        vec4 _3461;
                        float _3508;
                        bool _3509;
                        for (;;)
                        {
                            uint _3388 = ((_3165 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3377));
                            _3378 = (_3377 + 4294967295u) & _3377;
                            uint _3390 = _3388 * 40u;
                            _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            _3404 = _3403.w;
                            uint _3406 = (_3388 * 40u) + 4u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3421 = (_3388 * 40u) + 8u;
                            _3431 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x));
                            uint _3433 = (_3388 * 40u) + 16u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3448 = (_3388 * 40u) + 20u;
                            _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            uint _3464 = (_3388 * 40u) + 24u;
                            vec4 _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            uint _3483 = (_3388 * 40u) + 28u;
                            vec4 _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            _3508 = fma(_1906, _3496.z, fma(_1905, _3496.y, _3496.x * _1904)) + _3496.w;
                            _3509 = !((fma(_1906, _3477.z, fma(_1905, _3477.y, _3477.x * _1904)) + _3477.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3509)
                            {
                                float _3536 = _3403.x - _1904;
                                float _3537 = _3403.y - _1905;
                                float _3538 = _3403.z - _1906;
                                float _3539 = dot(vec3(_3536, _3537, _3538), vec3(_3536, _3537, _3538));
                                float _3542 = inversesqrt(_3539);
                                float _3543 = _3542 * _3536;
                                float _3544 = _3542 * _3537;
                                float _3545 = _3542 * _3538;
                                float _3549 = 1.0 - (_3539 / (_3404 * _3404));
                                float _4669 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3550 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3554 = sqrt(_3539) * _3419.w;
                                float _3556 = 1.39999997615814208984375 / (_3554 + 1.39999997615814208984375);
                                float _3557 = _3556 * _3556;
                                float _3560 = ((1.0 - _3557) * dot(vec3(_3543, _3544, _3545), vec3(_787, _790, _793))) + _3557;
                                float _3563 = _3554 * _3554;
                                float _3567 = (fma(_1906, _3446.z, fma(_1905, _3446.y, _3446.x * _1904)) + _3446.w) / _3508;
                                float _3568 = (fma(_1906, _3461.z, fma(_1905, _3461.y, _3461.x * _1904)) + _3461.w) / _3508;
                                float _3572 = 1.0 - dot(vec2(_3567, _3568), vec2(_3567, _3568));
                                float _4685 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3573 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3574 = _3573 * (((isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0))) * _3550) / ((_3563 * 0.699999988079071044921875) + 1.0));
                                float _3586 = exp2(log2(1.0 / ((_3563 * 3.5) + 5.0)) * 0.25);
                                float _3587 = 1.0 - _847;
                                float _3594 = sqrt(1.0 - ((1.0 - (_3587 * _3587)) * (1.0 - (_3586 * _3586))));
                                float _3595 = _3594 * _3594;
                                float _3596 = _3595 * _3595;
                                float _3597 = _3543 - _3046;
                                float _3598 = _3544 - _3047;
                                float _3599 = _3545 - _3048;
                                float _3603 = inversesqrt(dot(vec3(_3597, _3598, _3599), vec3(_3597, _3598, _3599)));
                                float _3607 = dot(vec3(_787, _790, _793), vec3((-0.0) - _3046, (-0.0) - _3047, (-0.0) - _3048));
                                float _4696 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3610 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                                float _3611 = dot(vec3(_787, _790, _793), vec3(_3603 * _3597, _3603 * _3598, _3603 * _3599));
                                float _4707 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3614 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3618 = ((_3614 * _3614) * (_3596 + (-1.0))) + 1.0;
                                float _3619 = _3556 * _3595;
                                float _3620 = _3619 * _3619;
                                float _3626 = ((1.0 - _3620) * dot(vec3(_787, _790, _793), vec3(_3543, _3544, _3545))) + _3620;
                                float _4718 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3627 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3628 = 1.0 - _3595;
                                float _3638 = (0.5 / (((_3627 * ((_3610 * _3628) + _3595)) + 9.9999999392252902907785028219223e-09) + (((_3627 * _3628) + _3595) * _3610))) * _3627;
                                float _4729 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3648 = (_3573 * _3550) * (((_3596 * 3.1415927410125732421875) * (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0)))) / ((_3618 * _3618) * ((_3563 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3574 * _3419.y;
                                frontier_phi_78_pred_1 = _3574 * _3419.x;
                                frontier_phi_78_pred_2 = _3648 * _3431.z;
                                frontier_phi_78_pred_3 = _3648 * _3431.y;
                                frontier_phi_78_pred_4 = _3648 * _3431.x;
                                frontier_phi_78_pred_5 = _3574 * _3419.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3656 = frontier_phi_78_pred;
                            _3655 = frontier_phi_78_pred_1;
                            _3654 = frontier_phi_78_pred_2;
                            _3653 = frontier_phi_78_pred_3;
                            _3652 = frontier_phi_78_pred_4;
                            _3657 = frontier_phi_78_pred_5;
                            _3361 = _3655 + _3374;
                            _3362 = _3656 + _3375;
                            _3363 = _3657 + _3376;
                            _3358 = _3652 + _3371;
                            _3359 = _3653 + _3372;
                            _3360 = _3654 + _3373;
                            if (_3378 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3378;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3363;
                        frontier_phi_72_pred_1 = _3362;
                        frontier_phi_72_pred_2 = _3361;
                        frontier_phi_72_pred_3 = _3360;
                        frontier_phi_72_pred_4 = _3359;
                        frontier_phi_72_pred_5 = _3358;
                    }
                    _3031 = frontier_phi_72_pred;
                    _3029 = frontier_phi_72_pred_1;
                    _3027 = frontier_phi_72_pred_2;
                    _3025 = frontier_phi_72_pred_3;
                    _3023 = frontier_phi_72_pred_4;
                    _3021 = frontier_phi_72_pred_5;
                    uint _3166 = _3165 + 1u;
                    if (_3166 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3159 = _3021;
                        _3160 = _3023;
                        _3161 = _3025;
                        _3162 = _3027;
                        _3163 = _3029;
                        _3164 = _3031;
                        _3165 = _3166;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3031;
                frontier_phi_60_61_ladder_1 = _3029;
                frontier_phi_60_61_ladder_2 = _3025;
                frontier_phi_60_61_ladder_3 = _3023;
                frontier_phi_60_61_ladder_4 = _3021;
                frontier_phi_60_61_ladder_5 = _3027;
            }
            else
            {
                frontier_phi_60_61_ladder = _2917;
                frontier_phi_60_61_ladder_1 = _2915;
                frontier_phi_60_61_ladder_2 = _2911;
                frontier_phi_60_61_ladder_3 = _2909;
                frontier_phi_60_61_ladder_4 = _2907;
                frontier_phi_60_61_ladder_5 = _2913;
            }
            _3020 = frontier_phi_60_61_ladder_4;
            _3022 = frontier_phi_60_61_ladder_3;
            _3024 = frontier_phi_60_61_ladder_2;
            _3026 = frontier_phi_60_61_ladder_5;
            _3028 = frontier_phi_60_61_ladder_1;
            _3030 = frontier_phi_60_61_ladder;
        }
        float _3035 = isnan(1.0) ? _831 : (isnan(_831) ? 1.0 : min(_831, 1.0));
        _2840 = (_3035 * _3026) + _2371;
        _2842 = (_3035 * _3028) + _2373;
        _2844 = (_3035 * _3030) + _2375;
        _2846 = ((_3020 * 0.039999999105930328369140625) * _3035) + _2694;
        _2848 = ((_3022 * 0.039999999105930328369140625) * _3035) + _2696;
        _2850 = ((_3024 * 0.039999999105930328369140625) * _3035) + _2698;
    }
    else
    {
        _2840 = _2371;
        _2842 = _2373;
        _2844 = _2375;
        _2846 = _2694;
        _2848 = _2696;
        _2850 = _2698;
    }
    float _4745 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _4756 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _4767 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    uint _2870 = _806 + 6u;
    float _2878 = _768 / cbSceneParam._m0[86u].x;
    float _2879 = _769 / cbSceneParam._m0[86u].y;
    vec4 _2893 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2878, _2879, (log2((isnan(cbSceneParam._m0[77u].w) ? _703 : (isnan(_703) ? cbSceneParam._m0[77u].w : min(_703, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2895 = _2893.x;
    float _2896 = _2893.y;
    float _2897 = _2893.z;
    float _2898 = _2893.w;
    float _2970;
    float _2972;
    float _2974;
    float _2976;
    if (_703 > cbSceneParam._m0[78u].w)
    {
        float _2932 = isnan(_703) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _703 : min(cbSceneParam._m0[80u].w, _703));
        float _2933 = _2932 / _703;
        float _2944 = _2933 * _753;
        float _2945 = _754 * _2933;
        float _2946 = (-0.0) - _2945;
        float _2948 = _2933 * _755;
        float _2950 = (cbSceneParam._m0[77u].w * _2946) / _2932;
        float _2951 = _2950 + cbSceneParam._m0[79u].w;
        float _2952 = cbSceneParam._m0[79u].w - _2945;
        float _2958 = sqrt(((_2944 * _2944) + (_2945 * _2945)) + (_2948 * _2948));
        float _2961 = (1.0 - (cbSceneParam._m0[77u].w / _2932)) * _2958;
        float _2966 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2968 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3121;
        if (abs((_2946 - _2950) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3121 = ((((_2951 > 0.0) ? exp2(_2966 * _2951) : (2.0 - exp2(_2968 * _2951))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2961;
        }
        else
        {
            float _3081 = 1.0 / cbSceneParam._m0[80u].x;
            float _3082 = isnan(_2952) ? _2951 : (isnan(_2951) ? _2952 : max(_2951, _2952));
            float _3083 = isnan(_2952) ? _2951 : (isnan(_2951) ? _2952 : min(_2951, _2952));
            float _3092 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : min(_3082, 0.0));
            float _3093 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : min(_3083, 0.0));
            _3121 = ((abs(_2958 / _2946) * cbSceneParam._m0[80u].y) * ((((_3092 - _3093) * 2.0) - ((exp2(_2966 * (isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0)))) - exp2(_2966 * (isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0))))) * _3081)) - ((exp2(_2968 * _3092) - exp2(_2968 * _3093)) * _3081))) + (_2961 * cbSceneParam._m0[80u].z);
        }
        vec4 _3123 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2878, _2879, 1.0), 0.0);
        float _3132 = exp2((_3121 * (-1.44269502162933349609375)) * (1.0 - _3123.w));
        float _3133 = log2(_3132);
        float _3149 = log2(_2898);
        _2970 = (exp2(_3149 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3133 * cbSceneParam._m0[78u].x)) * _3123.x) / cbSceneParam._m0[78u].x)) + _2895;
        _2972 = (exp2(_3149 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3133 * cbSceneParam._m0[78u].y)) * _3123.y) / cbSceneParam._m0[78u].y)) + _2896;
        _2974 = (exp2(_3149 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3133 * cbSceneParam._m0[78u].z)) * _3123.z) / cbSceneParam._m0[78u].z)) + _2897;
        _2976 = _3132 * _2898;
    }
    else
    {
        _2970 = _2895;
        _2972 = _2896;
        _2974 = _2897;
        _2976 = _2898;
    }
    float _2988 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2989 = _2988 == 3.0;
    float _2990 = log2(_2976);
    float _2997 = exp2(_2990 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2840 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _831))) + ((_2846 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1638)) * cbPerFrame._m0[3u].x));
    float _2998 = exp2(_2990 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2842 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _831))) + ((_2848 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1638)) * cbPerFrame._m0[3u].x));
    float _2999 = exp2(_2990 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2844 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _831))) + ((_2850 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1638)) * cbPerFrame._m0[3u].x));
    float _3008 = (_2988 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3008 * (_2989 ? _2997 : (_2997 + (cbSceneParam._m0[72u].w * _2970)));
    SV_Target.y = _3008 * (_2989 ? _2998 : (_2998 + (cbSceneParam._m0[72u].w * _2972)));
    SV_Target.z = _3008 * (_2989 ? _2999 : (_2999 + (cbSceneParam._m0[72u].w * _2974)));
    SV_Target.w = cbInstanceData._m0[_2870].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2870].w;
}


