#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1201;
float _3847;
float _3848;
float _3849;
float _3850;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _246 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _252 = _246.x * cbMtdParam._m0[10u].x;
    float _253 = _246.y * cbMtdParam._m0[10u].y;
    float _254 = _246.z * cbMtdParam._m0[10u].z;
    vec4 _273 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _320 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x;
    float _331 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _320)) + 1.0;
    float _3859 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _332 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _339 = (_332 * ((_273.x * cbMtdParam._m0[11u].x) - _252)) + _252;
    float _340 = (_332 * ((_273.y * cbMtdParam._m0[11u].y) - _253)) + _253;
    float _341 = (_332 * ((_273.z * cbMtdParam._m0[11u].z) - _254)) + _254;
    vec4 _360 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _390 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _320)) + 1.0;
    float _3870 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _398 = (_391 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _399 = (_391 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _400 = (_391 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    vec4 _417 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _442 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _320)) + 1.0;
    float _3881 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    vec4 _470 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _478 = ((((_443 * ((_417.x * cbMtdParam._m0[13u].x) - _398)) + _398) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _470.x;
    float _481 = ((((_443 * ((_417.y * cbMtdParam._m0[13u].y) - _399)) + _399) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _470.y;
    float _484 = ((((_443 * ((_417.z * cbMtdParam._m0[13u].z) - _400)) + _400) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _470.z;
    vec4 _496 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _514 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _516 = _514.x;
    float _517 = _514.y;
    float _523 = cbMtdParam._m0[16u].w * _514.z;
    float _526 = (((cbMtdParam._m0[17u].x * _496.z) - _523) * _332) + _523;
    vec4 _539 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _548 = (((cbMtdParam._m0[17u].y * _539.z) - _526) * _391) + _526;
    vec4 _561 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _570 = (((cbMtdParam._m0[17u].z * _561.z) - _548) * _443) + _548;
    vec4 _583 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _596 = ((_496.x - _516) * _332) + _516;
    float _597 = ((_496.y - _517) * _332) + _517;
    float _602 = ((_539.x - _596) * _391) + _596;
    float _603 = ((_539.y - _597) * _391) + _597;
    float _612 = ((((_561.x - _602) * _443) + _602) * 2.0) + (-1.0);
    float _613 = ((((_561.y - _603) * _443) + _603) * 2.0) + (-1.0);
    float _614 = dot(vec2(_612, _613), vec2(_612, _613));
    float _3892 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _619 = sqrt(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))));
    float _622 = (((_583.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _612;
    float _623 = (((_583.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _613;
    float _626 = fma(_619, _216 * NORMAL.x, fma(_623, _223 * TANGENT.x, (_209 * _201) * _622));
    float _629 = fma(_619, _216 * NORMAL.y, fma(_623, _223 * TANGENT.y, (_209 * _202) * _622));
    float _632 = fma(_619, _216 * NORMAL.z, fma(_623, _223 * TANGENT.z, (_209 * _203) * _622));
    float _636 = inversesqrt(dot(vec3(_626, _629, _632), vec3(_626, _629, _632)));
    float _637 = _636 * _626;
    float _638 = _636 * _629;
    float _639 = _636 * _632;
    float _3903 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _640 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _3914 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _3925 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _3936 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _659 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _710 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _700);
    float _711 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _700);
    float _712 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _700);
    float _716 = inversesqrt(dot(vec3(_710, _711, _712), vec3(_710, _711, _712)));
    float _717 = _710 * _716;
    float _718 = _711 * _716;
    float _719 = _712 * _716;
    vec4 _724 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _726 = _724.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _880 = sqrt(((_710 * _710) + (_711 * _711)) + (_712 * _712));
        float _886 = (cbMatDynParam._m0[5u].x * _880) + cbMatDynParam._m0[5u].y;
        float _3947 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _891 = (cbMatDynParam._m0[5u].z * _880) + cbMatDynParam._m0[5u].w;
        float _3958 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) - _887)) + _887) < ((_726 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _737 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _738 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _756 = fma(_639, cbSceneParam._m0[5u].z, fma(_638, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _637));
    float _759 = fma(_639, cbSceneParam._m0[6u].z, fma(_638, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _637));
    float _762 = fma(_639, cbSceneParam._m0[7u].z, fma(_638, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _637));
    uint _775 = uint(roundEven(NORMAL.w)) * 13u;
    uint _776 = _775 + 9u;
    uint _777 = _776 + uint(cbMatDynParam._m0[0u].w);
    float _783 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * cbInstanceData._m0[_777].x;
    float _784 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * cbInstanceData._m0[_777].y;
    float _785 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * cbInstanceData._m0[_777].z;
    float _3969 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _3980 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    vec4 _797 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _737, cbSceneParam._m0[86u].y * _738));
    float _800 = _797.x * TEXCOORD_5.w;
    float _801 = dot(vec3(_637, _638, _639), vec3(_717, _718, _719));
    float _804 = _801 * 2.0;
    float _808 = (_804 * _637) - _717;
    float _809 = (_804 * _638) - _718;
    float _810 = (_804 * _639) - _719;
    float _814 = abs(dot(vec3(_717, _718, _719), vec3(_637, _638, _639)));
    float _4002 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _816 = sqrt(_640);
    float _829 = exp2((_816 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_816 * 3.0));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1200;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _925 = fma(_869, cbModelParam._m0[26u].z, fma(_865, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _861));
        float _929 = fma(_869, cbModelParam._m0[27u].z, fma(_865, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _861));
        float _933 = fma(_869, cbModelParam._m0[28u].z, fma(_865, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _861));
        float _958 = _861 + _637;
        float _959 = _865 + _638;
        float _960 = _869 + _639;
        float _970 = fma(_960, cbModelParam._m0[26u].z, fma(_959, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _958)) - _925;
        float _971 = fma(_960, cbModelParam._m0[27u].z, fma(_959, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _958)) - _929;
        float _972 = fma(_960, cbModelParam._m0[28u].z, fma(_959, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _958)) - _933;
        float _976 = inversesqrt(dot(vec3(_970, _971, _972), vec3(_970, _971, _972)));
        float _989 = ((_976 * _970) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_925 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _990 = ((_976 * _971) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_929 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _991 = ((_976 * _972) / cbModelParam._m0[34u].z) + ((((((_933 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        float _1028 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_994.x + (-0.5));
        float _1030 = _1028 * (_994.y + (-0.5));
        float _1031 = _1028 * (_994.z + (-0.5));
        float _1038 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_1001.x + (-0.5));
        float _1040 = _1038 * (_1001.y + (-0.5));
        float _1041 = _1038 * (_1001.z + (-0.5));
        float _1048 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1008.x + (-0.5));
        float _1050 = _1048 * (_1008.y + (-0.5));
        float _1051 = _1048 * (_1008.z + (-0.5));
        float _1058 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1015.x + (-0.5));
        float _1060 = _1058 * (_1015.y + (-0.5));
        float _1061 = _1058 * (_1015.z + (-0.5));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = _1029 * 0.5;
        float _1066 = _1039 * 0.5;
        float _1067 = _1049 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1082 = (dot(vec3(_637, _638, _639), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1092 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _4050 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1094 + 1.0))) + _1099) * _1062;
        float _1109 = _1030 * 0.5;
        float _1110 = _1040 * 0.5;
        float _1111 = _1050 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_637, _638, _639), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _4083 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1136 + 1.0))) + _1141) * _1063;
        float _1151 = _1031 * 0.5;
        float _1152 = _1041 * 0.5;
        float _1153 = _1051 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_637, _638, _639), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _4116 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1178 + 1.0))) + _1183) * _1064;
        _1200 = _1031;
        _1202 = _1030;
        _1203 = _1029;
        _1204 = _1041;
        _1205 = _1040;
        _1206 = _1039;
        _1207 = _1051;
        _1208 = _1050;
        _1209 = _1049;
        _1210 = _1064;
        _1211 = _1063;
        _1212 = _1062;
        _1213 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1214 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
        _1215 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
    }
    else
    {
        _1200 = _1201;
        _1202 = _1201;
        _1203 = _1201;
        _1204 = _1201;
        _1205 = _1201;
        _1206 = _1201;
        _1207 = _1201;
        _1208 = _1201;
        _1209 = _1201;
        _1210 = _1201;
        _1211 = _1201;
        _1212 = _1201;
        _1213 = 0.0;
        _1214 = 0.0;
        _1215 = 0.0;
    }
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1244 = fma(_869, cbModelParam._m0[30u].z, fma(_865, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _861));
        float _1248 = fma(_869, cbModelParam._m0[31u].z, fma(_865, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _861));
        float _1252 = fma(_869, cbModelParam._m0[32u].z, fma(_865, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _861));
        float _1275 = _861 + _637;
        float _1276 = _865 + _638;
        float _1277 = _869 + _639;
        float _1287 = fma(_1277, cbModelParam._m0[30u].z, fma(_1276, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1275)) - _1244;
        float _1288 = fma(_1277, cbModelParam._m0[31u].z, fma(_1276, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1275)) - _1248;
        float _1289 = fma(_1277, cbModelParam._m0[32u].z, fma(_1276, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1275)) - _1252;
        float _1293 = inversesqrt(dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289)));
        float _1306 = ((_1293 * _1287) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1244 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1307 = ((_1293 * _1288) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1248 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1308 = ((_1293 * _1289) / cbModelParam._m0[35u].z) + ((((((_1252 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        float _1343 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1310.x + (-0.5));
        float _1345 = _1343 * (_1310.y + (-0.5));
        float _1346 = _1343 * (_1310.z + (-0.5));
        float _1353 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1317.x + (-0.5));
        float _1355 = _1353 * (_1317.y + (-0.5));
        float _1356 = _1353 * (_1317.z + (-0.5));
        float _1363 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1324.x + (-0.5));
        float _1365 = _1363 * (_1324.y + (-0.5));
        float _1366 = _1363 * (_1324.z + (-0.5));
        float _1373 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1331.x + (-0.5));
        float _1375 = _1373 * (_1331.y + (-0.5));
        float _1376 = _1373 * (_1331.z + (-0.5));
        float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = _1344 * 0.5;
        float _1381 = _1354 * 0.5;
        float _1382 = _1364 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_637, _638, _639), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1377 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _4179 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1407 + 1.0))) + _1412) * _1377;
        float _1422 = _1345 * 0.5;
        float _1423 = _1355 * 0.5;
        float _1424 = _1365 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1438 = (dot(vec3(_637, _638, _639), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1447 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _4212 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1449 + 1.0))) + _1454) * _1378;
        float _1464 = _1346 * 0.5;
        float _1465 = _1356 * 0.5;
        float _1466 = _1366 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_637, _638, _639), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _4245 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1491 + 1.0))) + _1496) * _1379;
        _1513 = _1346;
        _1514 = _1345;
        _1515 = _1344;
        _1516 = _1356;
        _1517 = _1355;
        _1518 = _1354;
        _1519 = _1366;
        _1520 = _1365;
        _1521 = _1364;
        _1522 = _1379;
        _1523 = _1378;
        _1524 = _1377;
        _1525 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
        _1526 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
        _1527 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
    }
    else
    {
        _1513 = _1201;
        _1514 = _1201;
        _1515 = _1201;
        _1516 = _1201;
        _1517 = _1201;
        _1518 = _1201;
        _1519 = _1201;
        _1520 = _1201;
        _1521 = _1201;
        _1522 = _1201;
        _1523 = _1201;
        _1524 = _1201;
        _1525 = 0.0;
        _1526 = 0.0;
        _1527 = 0.0;
    }
    float _1537 = (cbModelParam._m0[1u].x * (_1525 - _1213)) + _1213;
    float _1538 = (cbModelParam._m0[1u].x * (_1526 - _1214)) + _1214;
    float _1539 = (cbModelParam._m0[1u].x * (_1527 - _1215)) + _1215;
    float _1560 = fma(_1539, cbSceneParam._m0[89u].z, fma(_1538, cbSceneParam._m0[89u].y, _1537 * cbSceneParam._m0[89u].x));
    float _1563 = fma(_1539, cbSceneParam._m0[90u].z, fma(_1538, cbSceneParam._m0[90u].y, _1537 * cbSceneParam._m0[90u].x));
    float _1566 = fma(_1539, cbSceneParam._m0[91u].z, fma(_1538, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1537));
    float _1581 = _808 * 0.5;
    float _1582 = _809 * 0.5;
    float _1583 = _810 * 0.5;
    float _1584 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1515, _1518, _1521, _1524));
    float _1587 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1514, _1517, _1520, _1523));
    float _1590 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1513, _1516, _1519, _1522));
    float _1624;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1597 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1200, _1204, _1207, _1210));
        float _1601 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1202, _1205, _1208, _1211));
        float _1605 = dot(vec4(_1581, _1582, _1583, 1.0), vec4(_1203, _1206, _1209, _1212));
        float _1612 = dot(vec4(cbModelParam._m0[39u]), vec4(_1581, _1582, _1583, 1.0));
        _1624 = dot(vec3(isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1612) ? 0.0 : (isnan(0.0) ? _1612 : max(0.0, _1612))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1624 = 1.0;
    }
    float _1635;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1626 = dot(vec4(cbModelParam._m0[40u]), vec4(_1581, _1582, _1583, 1.0));
        _1635 = dot(vec3(isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1626) ? 0.0 : (isnan(0.0) ? _1626 : max(0.0, _1626))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1635 = 1.0;
    }
    float _1639 = (_1635 * cbModelParam._m0[1u].x) + (_1624 * (1.0 - cbModelParam._m0[1u].x));
    float _1649 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _640);
    float _1650 = isnan(_1649) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1649 : min(cbModelParam._m0[25u].z, _1649));
    float _1731;
    float _1733;
    float _1735;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1698 = fma(_869, cbModelParam._m0[13u].z, fma(_865, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _861)) + cbModelParam._m0[13u].w;
        float _1702 = fma(_869, cbModelParam._m0[14u].z, fma(_865, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _861)) + cbModelParam._m0[14u].w;
        float _1706 = fma(_869, cbModelParam._m0[15u].z, fma(_865, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _861)) + cbModelParam._m0[15u].w;
        float _1709 = fma(_810, cbModelParam._m0[13u].z, fma(_809, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _808));
        float _1712 = fma(_810, cbModelParam._m0[14u].z, fma(_809, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _808));
        float _1715 = fma(_810, cbModelParam._m0[15u].z, fma(_809, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _808));
        float _1743;
        if (_1709 > 0.0)
        {
            _1743 = abs((1.0 - _1698) / _1709);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1698 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1743 = frontier_phi_17_15_ladder;
        }
        float _1914;
        if (_1712 > 0.0)
        {
            _1914 = abs((1.0 - _1702) / _1712);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1702 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1914 = frontier_phi_26_22_ladder;
        }
        float _2209;
        if (_1715 > 0.0)
        {
            _2209 = abs((1.0 - _1706) / _1715);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1706 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2209 = frontier_phi_38_33_ladder;
        }
        float _2211 = isnan(_1914) ? _1743 : (isnan(_1743) ? _1914 : min(_1743, _1914));
        float _2212 = isnan(_2209) ? _2211 : (isnan(_2211) ? _2209 : min(_2211, _2209));
        float _2216 = (_2212 * _1709) + _1698;
        float _2217 = (_2212 * _1712) + _1702;
        float _2218 = (_2212 * _1715) + _1706;
        float _2219 = _2212 * 9.9999997473787516355514526367188e-05;
        float _2221 = (-1.0) - _2219;
        float _2223 = _2219 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2218 > _2223) || ((_2218 < _2221) || ((_2217 > _2223) || ((_2217 < _2221) || ((_2216 < _2221) || (_2216 > _2223))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2363 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2218, cbModelParam._m0[9u].z, fma(_2217, cbModelParam._m0[9u].y, _2216 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2218, cbModelParam._m0[10u].z, fma(_2217, cbModelParam._m0[10u].y, _2216 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2218, cbModelParam._m0[11u].z, fma(_2217, cbModelParam._m0[11u].y, _2216 * cbModelParam._m0[11u].x))), _1650);
            frontier_phi_16_38_ladder = _2363.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2363.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2363.x * cbModelParam._m0[1u].y;
        }
        _1731 = frontier_phi_16_38_ladder_2;
        _1733 = frontier_phi_16_38_ladder_1;
        _1735 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1719 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_808, _809, _810), _1650);
        _1731 = _1719.x * cbModelParam._m0[1u].y;
        _1733 = _1719.y * cbModelParam._m0[1u].y;
        _1735 = _1719.z * cbModelParam._m0[1u].y;
    }
    float _1739 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _640);
    float _1740 = isnan(_1739) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1739 : min(cbModelParam._m0[25u].w, _1739));
    float _1831;
    float _1833;
    float _1835;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1795 = fma(_869, cbModelParam._m0[21u].z, fma(_865, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _861)) + cbModelParam._m0[21u].w;
        float _1799 = fma(_869, cbModelParam._m0[22u].z, fma(_865, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _861)) + cbModelParam._m0[22u].w;
        float _1803 = fma(_869, cbModelParam._m0[23u].z, fma(_865, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _861)) + cbModelParam._m0[23u].w;
        float _1806 = fma(_810, cbModelParam._m0[21u].z, fma(_809, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _808));
        float _1809 = fma(_810, cbModelParam._m0[22u].z, fma(_809, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _808));
        float _1812 = fma(_810, cbModelParam._m0[23u].z, fma(_809, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _808));
        float _1919;
        if (_1806 > 0.0)
        {
            _1919 = abs((1.0 - _1795) / _1806);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1795 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1919 = frontier_phi_28_24_ladder;
        }
        float _2236;
        if (_1809 > 0.0)
        {
            _2236 = abs((1.0 - _1799) / _1809);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1799 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2236 = frontier_phi_40_35_ladder;
        }
        float _2563;
        if (_1812 > 0.0)
        {
            _2563 = abs((1.0 - _1803) / _1812);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1803 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2563 = frontier_phi_50_47_ladder;
        }
        float _2565 = isnan(_2236) ? _1919 : (isnan(_1919) ? _2236 : min(_1919, _2236));
        float _2566 = isnan(_2563) ? _2565 : (isnan(_2565) ? _2563 : min(_2565, _2563));
        float _2570 = (_2566 * _1806) + _1795;
        float _2571 = (_2566 * _1809) + _1799;
        float _2572 = (_2566 * _1812) + _1803;
        float _2573 = _2566 * 9.9999997473787516355514526367188e-05;
        float _2574 = (-1.0) - _2573;
        float _2576 = _2573 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2572 > _2576) || ((_2572 < _2574) || ((_2571 > _2576) || ((_2571 < _2574) || ((_2570 < _2574) || (_2570 > _2576))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2690 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2572, cbModelParam._m0[17u].z, fma(_2571, cbModelParam._m0[17u].y, _2570 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2572, cbModelParam._m0[18u].z, fma(_2571, cbModelParam._m0[18u].y, _2570 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2572, cbModelParam._m0[19u].z, fma(_2571, cbModelParam._m0[19u].y, _2570 * cbModelParam._m0[19u].x))), _1740);
            frontier_phi_25_50_ladder = _2690.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2690.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2690.x * cbModelParam._m0[1u].z;
        }
        _1831 = frontier_phi_25_50_ladder_2;
        _1833 = frontier_phi_25_50_ladder_1;
        _1835 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1815 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_808, _809, _810), _1740);
        _1831 = _1815.x * cbModelParam._m0[1u].z;
        _1833 = _1815.y * cbModelParam._m0[1u].z;
        _1835 = _1815.z * cbModelParam._m0[1u].z;
    }
    float _1847 = ((((1.0 - _829) * ((_816 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_829 * _816)) * _800;
    float _1848 = _1847 * ((cbModelParam._m0[1u].w * (_1831 - _1731)) + _1731);
    float _1849 = _1847 * ((cbModelParam._m0[1u].w * (_1833 - _1733)) + _1733);
    float _1850 = _1847 * ((cbModelParam._m0[1u].w * (_1835 - _1735)) + _1735);
    float _1853 = fma(_1850, cbSceneParam._m0[89u].z, fma(_1849, cbSceneParam._m0[89u].y, _1848 * cbSceneParam._m0[89u].x));
    float _1856 = fma(_1850, cbSceneParam._m0[90u].z, fma(_1849, cbSceneParam._m0[90u].y, _1848 * cbSceneParam._m0[90u].x));
    float _1859 = fma(_1850, cbSceneParam._m0[91u].z, fma(_1849, cbSceneParam._m0[91u].y, _1848 * cbSceneParam._m0[91u].x));
    float _1893 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1897 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1901 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1905 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1906 = _1893 / _1905;
    float _1907 = _1897 / _1905;
    float _1908 = _1901 / _1905;
    float _2055;
    float _2056;
    float _2057;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1935 = ((uint(_1908 > cbSceneParam._m0[59u].y) + uint(_1908 > cbSceneParam._m0[59u].x)) + uint(_1908 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1936 = _1935 + 43u;
        uint _1944 = _1935 + 44u;
        uint _1952 = _1935 + 45u;
        uint _1960 = _1935 + 46u;
        float _1971 = fma(_1905, cbSceneParam._m0[_1936].w, fma(_1901, cbSceneParam._m0[_1936].z, fma(_1897, cbSceneParam._m0[_1936].y, _1893 * cbSceneParam._m0[_1936].x)));
        float _1975 = fma(_1905, cbSceneParam._m0[_1944].w, fma(_1901, cbSceneParam._m0[_1944].z, fma(_1897, cbSceneParam._m0[_1944].y, _1893 * cbSceneParam._m0[_1944].x)));
        float _1983 = fma(_1905, cbSceneParam._m0[_1960].w, fma(_1901, cbSceneParam._m0[_1960].z, fma(_1897, cbSceneParam._m0[_1960].y, _1893 * cbSceneParam._m0[_1960].x)));
        float _1988 = cbSceneParam._m0[33u].z * _1983;
        float _1990 = cbSceneParam._m0[33u].w * _1983;
        float _1993 = fma(_1905, cbSceneParam._m0[_1952].w, fma(_1901, cbSceneParam._m0[_1952].z, fma(_1897, cbSceneParam._m0[_1952].y, _1893 * cbSceneParam._m0[_1952].x))) / _1983;
        float _2041 = (cbSceneParam._m0[33u].x - sqrt(((_1907 * _1907) + (_1906 * _1906)) + (_1908 * _1908))) * cbSceneParam._m0[33u].y;
        float _4371 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2048 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1988 + _1971) / _1983, (_1990 + _1975) / _1983), _1993), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1990 + _1971) / _1983, (_1975 - _1988) / _1983), _1993), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1971 - _1988) / _1983, (_1975 - _1990) / _1983), _1993), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1971 - _1990) / _1983, (_1988 + _1975) / _1983), _1993), 0.0)).x), vec4(0.25)));
        _2055 = 1.0 - (_2048 * cbSceneParam._m0[34u].x);
        _2056 = 1.0 - (_2048 * cbSceneParam._m0[34u].y);
        _2057 = 1.0 - (_2048 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2055 = 1.0;
        _2056 = 1.0;
        _2057 = 1.0;
    }
    float _2121;
    float _2123;
    float _2125;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2109 = fma(_1905, cbSceneParam._m0[63u].w, fma(_1901, cbSceneParam._m0[63u].z, fma(_1897, cbSceneParam._m0[63u].y, _1893 * cbSceneParam._m0[63u].x)));
        float _2110 = fma(_1905, cbSceneParam._m0[60u].w, fma(_1901, cbSceneParam._m0[60u].z, fma(_1897, cbSceneParam._m0[60u].y, _1893 * cbSceneParam._m0[60u].x))) / _2109;
        float _2111 = fma(_1905, cbSceneParam._m0[61u].w, fma(_1901, cbSceneParam._m0[61u].z, fma(_1897, cbSceneParam._m0[61u].y, _1893 * cbSceneParam._m0[61u].x))) / _2109;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2110 >= cbSceneParam._m0[64u].x) && (_2111 >= cbSceneParam._m0[64u].y)) && (_2110 <= cbSceneParam._m0[64u].z)) && (_2111 <= cbSceneParam._m0[64u].w))
        {
            float _2249 = fma(_1905, cbSceneParam._m0[62u].w, fma(_1901, cbSceneParam._m0[62u].z, fma(_1897, cbSceneParam._m0[62u].y, _1893 * cbSceneParam._m0[62u].x))) / _2109;
            float _2253 = isnan(cbSceneParam._m0[41u].w) ? _2249 : (isnan(_2249) ? cbSceneParam._m0[41u].w : max(_2249, cbSceneParam._m0[41u].w));
            float _2296 = (cbSceneParam._m0[33u].x - sqrt(((_1907 * _1907) + (_1906 * _1906)) + (_1908 * _1908))) * cbSceneParam._m0[33u].y;
            float _4387 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
            float _2303 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2110, cbSceneParam._m0[33u].w + _2111), _2253), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2110, _2111 - cbSceneParam._m0[33u].z), _2253), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2110 - cbSceneParam._m0[33u].z, _2111 - cbSceneParam._m0[33u].w), _2253), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2110 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2111), _2253), 0.0)).x), vec4(0.25)));
            float _2307 = 1.0 - (_2303 * cbSceneParam._m0[34u].x);
            float _2308 = 1.0 - (_2303 * cbSceneParam._m0[34u].y);
            float _2309 = 1.0 - (_2303 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2309) ? _2057 : (isnan(_2057) ? _2309 : min(_2057, _2309));
            frontier_phi_37_36_ladder_1 = isnan(_2308) ? _2056 : (isnan(_2056) ? _2308 : min(_2056, _2308));
            frontier_phi_37_36_ladder_2 = isnan(_2307) ? _2055 : (isnan(_2055) ? _2307 : min(_2055, _2307));
        }
        else
        {
            frontier_phi_37_36_ladder = _2057;
            frontier_phi_37_36_ladder_1 = _2056;
            frontier_phi_37_36_ladder_2 = _2055;
        }
        _2121 = frontier_phi_37_36_ladder_2;
        _2123 = frontier_phi_37_36_ladder_1;
        _2125 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2121 = _2055;
        _2123 = _2056;
        _2125 = _2057;
    }
    uvec4 _2130 = floatBitsToUint(cbInstanceData._m0[_775 + 5u]);
    uint _2132 = _2130.x * 14u;
    uint _2133 = _2132 + 13u;
    float _2140 = _800 + (-1.0);
    float _2145 = (cbLight._m0[_2133].x * _2140) + 1.0;
    float _2146 = (cbLight._m0[_2133].y * _2140) + 1.0;
    float _2147 = (cbLight._m0[_2133].z * _2140) + 1.0;
    float _2148 = (cbLight._m0[_2133].w * _2140) + 1.0;
    uint _2149 = _2132 + 5u;
    float _2155 = isnan(1.0) ? _2146 : (isnan(_2146) ? 1.0 : min(_2146, 1.0));
    uint _2159 = _2132 + 4u;
    float _2168 = isnan(1.0) ? _2145 : (isnan(_2145) ? 1.0 : min(_2145, 1.0));
    uint _2172 = _2132 | 1u;
    float _2183 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_637, _638, _639));
    float _2186 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_637, _638, _639));
    float _4423 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _4434 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2191 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * 0.3183098733425140380859375;
    float _2193 = (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * 0.3183098733425140380859375;
    float _2200 = ((cbLight._m0[_2149].x * _2155) * _2193) + (((cbLight._m0[_2159].x * _2121) * _2168) * _2191);
    float _2201 = ((_2155 * cbLight._m0[_2149].y) * _2193) + (((cbLight._m0[_2159].y * _2123) * _2168) * _2191);
    float _2202 = ((_2155 * cbLight._m0[_2149].z) * _2193) + (((cbLight._m0[_2159].z * _2125) * _2168) * _2191);
    uvec4 _2206 = floatBitsToUint(cbLight._m0[_2132 + 12u]);
    bool _2208 = _2206.x == 0u;
    float _2310;
    float _2312;
    float _2314;
    if (_2208)
    {
        _2310 = _2200;
        _2312 = _2201;
        _2314 = _2202;
    }
    else
    {
        uint _2318 = _2132 + 6u;
        float _2334 = (dot(vec3(cbLight._m0[_2132 + 2u].xyz), vec3(_637, _638, _639)) * 0.5) + 0.5;
        float _2335 = _2334 * _2334;
        float _4445 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2336 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2337 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
        _2310 = (((cbLight._m0[_2318].x * 0.3183098733425140380859375) * _2336) * _2337) + _2200;
        _2312 = (((cbLight._m0[_2318].y * 0.3183098733425140380859375) * _2336) * _2337) + _2201;
        _2314 = (((cbLight._m0[_2318].z * 0.3183098733425140380859375) * _2336) * _2337) + _2202;
    }
    bool _2317 = _2206.y == 0u;
    float _2372;
    float _2374;
    float _2376;
    if (_2317)
    {
        _2372 = _2310;
        _2374 = _2312;
        _2376 = _2314;
    }
    else
    {
        uint _2534 = _2132 + 7u;
        float _2550 = (dot(vec3(cbLight._m0[_2132 + 3u].xyz), vec3(_637, _638, _639)) * 0.5) + 0.5;
        float _2551 = _2550 * _2550;
        float _4461 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2552 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2553 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
        _2372 = (((cbLight._m0[_2534].x * 0.3183098733425140380859375) * _2552) * _2553) + _2310;
        _2374 = (((cbLight._m0[_2534].y * 0.3183098733425140380859375) * _2552) * _2553) + _2312;
        _2376 = (((cbLight._m0[_2534].z * 0.3183098733425140380859375) * _2552) * _2553) + _2314;
    }
    uint _2379 = _2132 + 8u;
    float _2392 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2132].w)) * _640) * 0.949999988079071044921875);
    float _2393 = _2392 * _2392;
    float _2394 = cbLight._m0[_2132].x + _717;
    float _2395 = cbLight._m0[_2132].y + _718;
    float _2396 = cbLight._m0[_2132].z + _719;
    float _2400 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
    float _2401 = _2400 * _2394;
    float _2402 = _2400 * _2395;
    float _2403 = _2400 * _2396;
    float _2404 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2132].xyz));
    float _4477 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2407 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _4488 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _2408 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    float _2409 = dot(vec3(_637, _638, _639), vec3(_2401, _2402, _2403));
    float _4499 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2412 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _2413 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_2401, _2402, _2403));
    float _4510 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2417 = _2393 * _2393;
    float _2421 = ((_2412 * _2412) * (_2417 + (-1.0))) + 1.0;
    float _2432 = (exp2(log2(1.0 - (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2433 = 1.0 - _2393;
    float _2444 = (0.5 / (((_2408 * ((_2407 * _2433) + _2393)) + 9.9999999392252902907785028219223e-09) + (((_2408 * _2433) + _2393) * _2407))) * _2407;
    float _4521 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2446 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2417 / ((_2421 * _2421) * 3.141590118408203125));
    uint _2460 = _2132 + 9u;
    float _2471 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2172].w)) * _640) * 0.949999988079071044921875);
    float _2472 = _2471 * _2471;
    float _2473 = cbLight._m0[_2172].x + _717;
    float _2474 = cbLight._m0[_2172].y + _718;
    float _2475 = cbLight._m0[_2172].z + _719;
    float _2479 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
    float _2480 = _2479 * _2473;
    float _2481 = _2479 * _2474;
    float _2482 = _2479 * _2475;
    float _2483 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2172].xyz));
    float _4532 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2486 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _2487 = dot(vec3(_637, _638, _639), vec3(_2480, _2481, _2482));
    float _4543 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2490 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _2491 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_2480, _2481, _2482));
    float _4554 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2495 = _2472 * _2472;
    float _2499 = ((_2490 * _2490) * (_2495 + (-1.0))) + 1.0;
    float _2508 = (exp2(log2(1.0 - (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2509 = 1.0 - _2472;
    float _2519 = (0.5 / (((_2408 * ((_2486 * _2509) + _2472)) + 9.9999999392252902907785028219223e-09) + (((_2408 * _2509) + _2472) * _2486))) * _2486;
    float _4565 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2521 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2495 / ((_2499 * _2499) * 3.141590118408203125));
    float _2531 = (((_2508 * cbLight._m0[_2460].x) * _2521) * _2155) + ((((cbLight._m0[_2379].x * _2121) * _2432) * _2446) * _2168);
    float _2532 = (((_2508 * cbLight._m0[_2460].y) * _2521) * _2155) + ((((cbLight._m0[_2379].y * _2123) * _2432) * _2446) * _2168);
    float _2533 = (((_2508 * cbLight._m0[_2460].z) * _2521) * _2155) + ((((cbLight._m0[_2379].z * _2125) * _2432) * _2446) * _2168);
    float _2589;
    float _2591;
    float _2593;
    if (_2208)
    {
        _2589 = _2531;
        _2591 = _2532;
        _2593 = _2533;
    }
    else
    {
        uint _2595 = _2132 + 2u;
        uint _2599 = _2132 + 10u;
        float _2613 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2595].w)) * _640) * 0.949999988079071044921875);
        float _2614 = _2613 * _2613;
        float _2615 = cbLight._m0[_2595].x + _717;
        float _2616 = cbLight._m0[_2595].y + _718;
        float _2617 = cbLight._m0[_2595].z + _719;
        float _2621 = inversesqrt(dot(vec3(_2615, _2616, _2617), vec3(_2615, _2616, _2617)));
        float _2622 = _2621 * _2615;
        float _2623 = _2621 * _2616;
        float _2624 = _2621 * _2617;
        float _2625 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2595].xyz));
        float _4576 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2628 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2629 = dot(vec3(_637, _638, _639), vec3(_2622, _2623, _2624));
        float _4587 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2632 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2633 = dot(vec3(cbLight._m0[_2595].xyz), vec3(_2622, _2623, _2624));
        float _4598 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2637 = _2614 * _2614;
        float _2641 = ((_2632 * _2632) * (_2637 + (-1.0))) + 1.0;
        float _2650 = (exp2(log2(1.0 - (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2651 = 1.0 - _2614;
        float _2661 = (0.5 / (((_2408 * ((_2628 * _2651) + _2614)) + 9.9999999392252902907785028219223e-09) + (((_2408 * _2651) + _2614) * _2628))) * _2628;
        float _4609 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2663 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2637 / ((_2641 * _2641) * 3.141590118408203125));
        float _2664 = isnan(1.0) ? _2147 : (isnan(_2147) ? 1.0 : min(_2147, 1.0));
        _2589 = (((_2650 * cbLight._m0[_2599].x) * _2663) * _2664) + _2531;
        _2591 = (((_2650 * cbLight._m0[_2599].y) * _2663) * _2664) + _2532;
        _2593 = (((_2650 * cbLight._m0[_2599].z) * _2663) * _2664) + _2533;
    }
    float _2695;
    float _2697;
    float _2699;
    if (_2317)
    {
        _2695 = _2589;
        _2697 = _2591;
        _2699 = _2593;
    }
    else
    {
        uint _2706 = _2132 + 3u;
        uint _2710 = _2132 + 11u;
        float _2724 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2706].w)) * _640) * 0.949999988079071044921875);
        float _2725 = _2724 * _2724;
        float _2726 = cbLight._m0[_2706].x + _717;
        float _2727 = cbLight._m0[_2706].y + _718;
        float _2728 = cbLight._m0[_2706].z + _719;
        float _2732 = inversesqrt(dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728)));
        float _2733 = _2732 * _2726;
        float _2734 = _2732 * _2727;
        float _2735 = _2732 * _2728;
        float _2736 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2706].xyz));
        float _4625 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2739 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _2740 = dot(vec3(_637, _638, _639), vec3(_2733, _2734, _2735));
        float _4636 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2743 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2744 = dot(vec3(cbLight._m0[_2706].xyz), vec3(_2733, _2734, _2735));
        float _4647 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2748 = _2725 * _2725;
        float _2752 = ((_2743 * _2743) * (_2748 + (-1.0))) + 1.0;
        float _2761 = (exp2(log2(1.0 - (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2762 = 1.0 - _2725;
        float _2772 = (0.5 / (((_2408 * ((_2739 * _2762) + _2725)) + 9.9999999392252902907785028219223e-09) + (((_2408 * _2762) + _2725) * _2739))) * _2739;
        float _4658 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2774 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2748 / ((_2752 * _2752) * 3.141590118408203125));
        float _2775 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
        _2695 = (((_2761 * cbLight._m0[_2710].x) * _2774) * _2775) + _2589;
        _2697 = (((_2761 * cbLight._m0[_2710].y) * _2774) * _2775) + _2591;
        _2699 = (((_2761 * cbLight._m0[_2710].z) * _2774) * _2775) + _2593;
    }
    float _2841;
    float _2843;
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    if (_2130.y == 0u)
    {
        uvec4 _2796 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2797 = _2796.x;
        uint _2808 = uint((float(_2796.y) * floor(float(uint(cbSceneParam._m0[85u].y * _738) / _2797))) + floor(float(uint(cbSceneParam._m0[85u].x * _737) / _2797)));
        float _2818 = (log2(_1908 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2819 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        uint _2822 = uint(isnan(14.0) ? _2819 : (isnan(_2819) ? 14.0 : min(_2819, 14.0)));
        uvec4 _2827 = texelFetch(g_lightClusterGridBuffer, int(((_2822 << 2u) + (_2808 << 6u)) >> 2u));
        uint _2828 = _2827.x;
        uint _2829 = _2796.z;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        if (((((1u << ((_2829 >> 4u) & 15u)) + 4294967295u) & _2828) == 0u) || ((_2829 & 240u) == 0u))
        {
            _2908 = 0.0;
            _2910 = 0.0;
            _2912 = 0.0;
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
        }
        else
        {
            float _2909;
            float _2911;
            float _2913;
            float _2915;
            float _2917;
            float _2919;
            float _3061 = 0.0;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            uint _3067 = 0u;
            uint _3076;
            bool _3077;
            for (;;)
            {
                _3076 = texelFetch(g_lightClassification, int((((_2822 << 5u) + (_2808 << 9u)) + (_3067 << 2u)) >> 2u)).x;
                _3077 = _3076 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3077)
                {
                    frontier_phi_71_pred = _3066;
                    frontier_phi_71_pred_1 = _3065;
                    frontier_phi_71_pred_2 = _3064;
                    frontier_phi_71_pred_3 = _3063;
                    frontier_phi_71_pred_4 = _3062;
                    frontier_phi_71_pred_5 = _3061;
                }
                else
                {
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    uint _3212;
                    _3206 = _3061;
                    _3207 = _3062;
                    _3208 = _3063;
                    _3209 = _3064;
                    _3210 = _3065;
                    _3211 = _3066;
                    _3212 = _3076;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    for (;;)
                    {
                        uint _3216 = uint(findLSB(_3212)) + (_3067 << 5u);
                        uint _3213 = (_3212 + 4294967295u) & _3212;
                        uint _3218 = _3216 * 48u;
                        vec4 _3232 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3218)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 3u)).x));
                        uint _3238 = (_3216 * 48u) + 4u;
                        vec4 _3251 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3238)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 3u)).x));
                        uint _3257 = (_3216 * 48u) + 8u;
                        vec3 _3268 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3257)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3257 + 2u)).x));
                        float _3272 = _3232.x - _1906;
                        float _3273 = _3232.y - _1907;
                        float _3274 = _3232.z - _1908;
                        float _3275 = dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274));
                        float _3278 = inversesqrt(_3275);
                        float _3279 = _3278 * _3272;
                        float _3280 = _3278 * _3273;
                        float _3281 = _3278 * _3274;
                        float _3282 = dot(vec3(_756, _759, _762), vec3(_3279, _3280, _3281));
                        float _3287 = 1.0 - (_3275 * _3232.w);
                        float _4684 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3288 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                        float _3289 = sqrt(_3275) * _3251.w;
                        float _3292 = 1.39999997615814208984375 / (_3289 + 1.39999997615814208984375);
                        float _3293 = _3292 * _3292;
                        float _3296 = ((1.0 - _3293) * _3282) + _3293;
                        float _3299 = _3289 * _3289;
                        float _3303 = ((isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0))) * _3288) / ((_3299 * 0.699999988079071044921875) + 1.0);
                        float _3307 = (-0.0) - _1906;
                        float _3308 = (-0.0) - _1907;
                        float _3309 = (-0.0) - _1908;
                        float _3313 = inversesqrt(dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309)));
                        float _3314 = _3313 * _3307;
                        float _3315 = _3313 * _3308;
                        float _3316 = _3313 * _3309;
                        float _3323 = exp2(log2(1.0 / ((_3299 * 3.5) + 5.0)) * 0.25);
                        float _3324 = 1.0 - _816;
                        float _3331 = sqrt(1.0 - ((1.0 - (_3324 * _3324)) * (1.0 - (_3323 * _3323))));
                        float _3332 = _3331 * _3331;
                        float _3333 = _3332 * _3332;
                        float _3334 = _3314 + _3279;
                        float _3335 = _3315 + _3280;
                        float _3336 = _3316 + _3281;
                        float _3340 = inversesqrt(dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336)));
                        float _3344 = dot(vec3(_756, _759, _762), vec3(_3314, _3315, _3316));
                        float _4700 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3347 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                        float _3348 = dot(vec3(_756, _759, _762), vec3(_3340 * _3334, _3340 * _3335, _3340 * _3336));
                        float _4711 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3351 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                        float _3355 = ((_3351 * _3351) * (_3333 + (-1.0))) + 1.0;
                        float _3356 = _3292 * _3332;
                        float _3357 = _3356 * _3356;
                        float _3360 = ((1.0 - _3357) * _3282) + _3357;
                        float _4722 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3361 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                        float _3362 = 1.0 - _3332;
                        float _3372 = (0.5 / (((_3361 * ((_3347 * _3362) + _3332)) + 9.9999999392252902907785028219223e-09) + (((_3361 * _3362) + _3332) * _3347))) * _3361;
                        float _4733 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                        float _3383 = (((_3333 * 3.1415927410125732421875) * (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0)))) / ((_3355 * _3355) * ((_3299 * 2.1991131305694580078125) + 3.141590118408203125))) * _3288;
                        _3136 = (_3303 * _3251.x) + _3209;
                        _3137 = (_3303 * _3251.y) + _3210;
                        _3138 = (_3303 * _3251.z) + _3211;
                        _3133 = (_3383 * _3268.x) + _3206;
                        _3134 = (_3383 * _3268.y) + _3207;
                        _3135 = (_3383 * _3268.z) + _3208;
                        if (_3213 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3206 = _3133;
                            _3207 = _3134;
                            _3208 = _3135;
                            _3209 = _3136;
                            _3210 = _3137;
                            _3211 = _3138;
                            _3212 = _3213;
                        }
                    }
                    frontier_phi_71_pred = _3138;
                    frontier_phi_71_pred_1 = _3137;
                    frontier_phi_71_pred_2 = _3136;
                    frontier_phi_71_pred_3 = _3135;
                    frontier_phi_71_pred_4 = _3134;
                    frontier_phi_71_pred_5 = _3133;
                }
                _2919 = frontier_phi_71_pred;
                _2917 = frontier_phi_71_pred_1;
                _2915 = frontier_phi_71_pred_2;
                _2913 = frontier_phi_71_pred_3;
                _2911 = frontier_phi_71_pred_4;
                _2909 = frontier_phi_71_pred_5;
                uint _3068 = _3067 + 1u;
                if (_3068 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3061 = _2909;
                    _3062 = _2911;
                    _3063 = _2913;
                    _3064 = _2915;
                    _3065 = _2917;
                    _3066 = _2919;
                    _3067 = _3068;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2908 = _2909;
            _2910 = _2911;
            _2912 = _2913;
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
        }
        uvec4 _2922 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2923 = _2922.z;
        uint _2925 = (_2923 >> 8u) & 15u;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        if (((4294967295u << _2925) & _2828) == 0u)
        {
            _3029 = _2908;
            _3031 = _2910;
            _3033 = _2912;
            _3035 = _2914;
            _3037 = _2916;
            _3039 = _2918;
        }
        else
        {
            float _3054 = inversesqrt(dot(vec3(_1906, _1907, _1908), vec3(_1906, _1907, _1908)));
            float _3055 = _3054 * _1906;
            float _3056 = _3054 * _1907;
            float _3057 = _3054 * _1908;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2925 < ((_2923 >> 12u) & 15u))
            {
                float _3030;
                float _3032;
                float _3034;
                float _3036;
                float _3038;
                float _3040;
                float _3189 = _2908;
                float _3190 = _2910;
                float _3191 = _2912;
                float _3192 = _2914;
                float _3193 = _2916;
                float _3194 = _2918;
                uint _3195 = _2925;
                uint _3204;
                bool _3205;
                for (;;)
                {
                    _3204 = texelFetch(g_lightClassification, int((((_2822 << 5u) + (_2808 << 9u)) + (_3195 << 2u)) >> 2u)).x;
                    _3205 = _3204 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3205)
                    {
                        frontier_phi_82_pred = _3194;
                        frontier_phi_82_pred_1 = _3193;
                        frontier_phi_82_pred_2 = _3192;
                        frontier_phi_82_pred_3 = _3191;
                        frontier_phi_82_pred_4 = _3190;
                        frontier_phi_82_pred_5 = _3189;
                    }
                    else
                    {
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3691;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3410 = _3189;
                        float _3411 = _3190;
                        float _3412 = _3191;
                        float _3413 = _3192;
                        float _3414 = _3193;
                        float _3415 = _3194;
                        uint _3416 = _3204;
                        uint _3417;
                        vec4 _3442;
                        float _3443;
                        vec4 _3458;
                        vec3 _3470;
                        vec4 _3485;
                        vec4 _3500;
                        float _3547;
                        bool _3548;
                        for (;;)
                        {
                            uint _3427 = ((_3195 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3416));
                            _3417 = (_3416 + 4294967295u) & _3416;
                            uint _3429 = _3427 * 40u;
                            _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            _3443 = _3442.w;
                            uint _3445 = (_3427 * 40u) + 4u;
                            _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            uint _3460 = (_3427 * 40u) + 8u;
                            _3470 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x));
                            uint _3472 = (_3427 * 40u) + 16u;
                            _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            uint _3487 = (_3427 * 40u) + 20u;
                            _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            uint _3503 = (_3427 * 40u) + 24u;
                            vec4 _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            uint _3522 = (_3427 * 40u) + 28u;
                            vec4 _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            _3547 = fma(_1908, _3535.z, fma(_1907, _3535.y, _3535.x * _1906)) + _3535.w;
                            _3548 = !((fma(_1908, _3516.z, fma(_1907, _3516.y, _3516.x * _1906)) + _3516.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3548)
                            {
                                float _3575 = _3442.x - _1906;
                                float _3576 = _3442.y - _1907;
                                float _3577 = _3442.z - _1908;
                                float _3578 = dot(vec3(_3575, _3576, _3577), vec3(_3575, _3576, _3577));
                                float _3581 = inversesqrt(_3578);
                                float _3582 = _3581 * _3575;
                                float _3583 = _3581 * _3576;
                                float _3584 = _3581 * _3577;
                                float _3588 = 1.0 - (_3578 / (_3443 * _3443));
                                float _4744 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3589 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                                float _3593 = sqrt(_3578) * _3458.w;
                                float _3595 = 1.39999997615814208984375 / (_3593 + 1.39999997615814208984375);
                                float _3596 = _3595 * _3595;
                                float _3599 = ((1.0 - _3596) * dot(vec3(_3582, _3583, _3584), vec3(_756, _759, _762))) + _3596;
                                float _3602 = _3593 * _3593;
                                float _3606 = (fma(_1908, _3485.z, fma(_1907, _3485.y, _3485.x * _1906)) + _3485.w) / _3547;
                                float _3607 = (fma(_1908, _3500.z, fma(_1907, _3500.y, _3500.x * _1906)) + _3500.w) / _3547;
                                float _3611 = 1.0 - dot(vec2(_3606, _3607), vec2(_3606, _3607));
                                float _4760 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3612 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3613 = _3612 * (((isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0))) * _3589) / ((_3602 * 0.699999988079071044921875) + 1.0));
                                float _3625 = exp2(log2(1.0 / ((_3602 * 3.5) + 5.0)) * 0.25);
                                float _3626 = 1.0 - _816;
                                float _3633 = sqrt(1.0 - ((1.0 - (_3626 * _3626)) * (1.0 - (_3625 * _3625))));
                                float _3634 = _3633 * _3633;
                                float _3635 = _3634 * _3634;
                                float _3636 = _3582 - _3055;
                                float _3637 = _3583 - _3056;
                                float _3638 = _3584 - _3057;
                                float _3642 = inversesqrt(dot(vec3(_3636, _3637, _3638), vec3(_3636, _3637, _3638)));
                                float _3646 = dot(vec3(_756, _759, _762), vec3((-0.0) - _3055, (-0.0) - _3056, (-0.0) - _3057));
                                float _4771 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3649 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                                float _3650 = dot(vec3(_756, _759, _762), vec3(_3642 * _3636, _3642 * _3637, _3642 * _3638));
                                float _4782 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3653 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                                float _3657 = ((_3653 * _3653) * (_3635 + (-1.0))) + 1.0;
                                float _3658 = _3595 * _3634;
                                float _3659 = _3658 * _3658;
                                float _3665 = ((1.0 - _3659) * dot(vec3(_756, _759, _762), vec3(_3582, _3583, _3584))) + _3659;
                                float _4793 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3666 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                                float _3667 = 1.0 - _3634;
                                float _3677 = (0.5 / (((_3666 * ((_3649 * _3667) + _3634)) + 9.9999999392252902907785028219223e-09) + (((_3666 * _3667) + _3634) * _3649))) * _3666;
                                float _4804 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3687 = (_3612 * _3589) * (((_3635 * 3.1415927410125732421875) * (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0)))) / ((_3657 * _3657) * ((_3602 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3613 * _3458.z;
                                frontier_phi_88_pred_1 = _3613 * _3458.y;
                                frontier_phi_88_pred_2 = _3613 * _3458.x;
                                frontier_phi_88_pred_3 = _3687 * _3470.z;
                                frontier_phi_88_pred_4 = _3687 * _3470.y;
                                frontier_phi_88_pred_5 = _3687 * _3470.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3696 = frontier_phi_88_pred;
                            _3695 = frontier_phi_88_pred_1;
                            _3694 = frontier_phi_88_pred_2;
                            _3693 = frontier_phi_88_pred_3;
                            _3692 = frontier_phi_88_pred_4;
                            _3691 = frontier_phi_88_pred_5;
                            _3400 = _3694 + _3413;
                            _3401 = _3695 + _3414;
                            _3402 = _3696 + _3415;
                            _3397 = _3691 + _3410;
                            _3398 = _3692 + _3411;
                            _3399 = _3693 + _3412;
                            if (_3417 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3410 = _3397;
                                _3411 = _3398;
                                _3412 = _3399;
                                _3413 = _3400;
                                _3414 = _3401;
                                _3415 = _3402;
                                _3416 = _3417;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3402;
                        frontier_phi_82_pred_1 = _3401;
                        frontier_phi_82_pred_2 = _3400;
                        frontier_phi_82_pred_3 = _3399;
                        frontier_phi_82_pred_4 = _3398;
                        frontier_phi_82_pred_5 = _3397;
                    }
                    _3040 = frontier_phi_82_pred;
                    _3038 = frontier_phi_82_pred_1;
                    _3036 = frontier_phi_82_pred_2;
                    _3034 = frontier_phi_82_pred_3;
                    _3032 = frontier_phi_82_pred_4;
                    _3030 = frontier_phi_82_pred_5;
                    uint _3196 = _3195 + 1u;
                    if (_3196 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3189 = _3030;
                        _3190 = _3032;
                        _3191 = _3034;
                        _3192 = _3036;
                        _3193 = _3038;
                        _3194 = _3040;
                        _3195 = _3196;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3036;
                frontier_phi_63_64_ladder_1 = _3040;
                frontier_phi_63_64_ladder_2 = _3038;
                frontier_phi_63_64_ladder_3 = _3034;
                frontier_phi_63_64_ladder_4 = _3032;
                frontier_phi_63_64_ladder_5 = _3030;
            }
            else
            {
                frontier_phi_63_64_ladder = _2914;
                frontier_phi_63_64_ladder_1 = _2918;
                frontier_phi_63_64_ladder_2 = _2916;
                frontier_phi_63_64_ladder_3 = _2912;
                frontier_phi_63_64_ladder_4 = _2910;
                frontier_phi_63_64_ladder_5 = _2908;
            }
            _3029 = frontier_phi_63_64_ladder_5;
            _3031 = frontier_phi_63_64_ladder_4;
            _3033 = frontier_phi_63_64_ladder_3;
            _3035 = frontier_phi_63_64_ladder;
            _3037 = frontier_phi_63_64_ladder_2;
            _3039 = frontier_phi_63_64_ladder_1;
        }
        float _3044 = isnan(1.0) ? _800 : (isnan(_800) ? 1.0 : min(_800, 1.0));
        _2841 = (_3044 * _3035) + _2372;
        _2843 = (_3044 * _3037) + _2374;
        _2845 = (_3044 * _3039) + _2376;
        _2847 = ((_3029 * 0.039999999105930328369140625) * _3044) + _2695;
        _2849 = ((_3031 * 0.039999999105930328369140625) * _3044) + _2697;
        _2851 = ((_3033 * 0.039999999105930328369140625) * _3044) + _2699;
    }
    else
    {
        _2841 = _2372;
        _2843 = _2374;
        _2845 = _2376;
        _2847 = _2695;
        _2849 = _2697;
        _2851 = _2699;
    }
    float _4820 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4831 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4842 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _2868 = ((isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2841 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _800))) + ((_2847 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1639)) * cbPerFrame._m0[3u].x);
    float _2869 = ((isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0))) * (_2843 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _800))) + ((_2849 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1639)) * cbPerFrame._m0[3u].x);
    float _2870 = ((isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2845 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _800))) + ((_2851 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1639)) * cbPerFrame._m0[3u].x);
    uint _2871 = _775 + 6u;
    float _2879 = _737 / cbSceneParam._m0[86u].x;
    float _2880 = _738 / cbSceneParam._m0[86u].y;
    vec4 _2894 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2879, _2880, (log2((isnan(cbSceneParam._m0[77u].w) ? _659 : (isnan(_659) ? cbSceneParam._m0[77u].w : min(_659, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2896 = _2894.x;
    float _2897 = _2894.y;
    float _2898 = _2894.z;
    float _2899 = _2894.w;
    float _2971;
    float _2973;
    float _2975;
    float _2977;
    if (_659 > cbSceneParam._m0[78u].w)
    {
        float _2933 = isnan(_659) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _659 : min(cbSceneParam._m0[80u].w, _659));
        float _2934 = _2933 / _659;
        float _2945 = _2934 * _710;
        float _2946 = _711 * _2934;
        float _2947 = (-0.0) - _2946;
        float _2949 = _2934 * _712;
        float _2951 = (cbSceneParam._m0[77u].w * _2947) / _2933;
        float _2952 = _2951 + cbSceneParam._m0[79u].w;
        float _2953 = cbSceneParam._m0[79u].w - _2946;
        float _2959 = sqrt(((_2945 * _2945) + (_2946 * _2946)) + (_2949 * _2949));
        float _2962 = (1.0 - (cbSceneParam._m0[77u].w / _2933)) * _2959;
        float _2967 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2969 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3146;
        if (abs((_2947 - _2951) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3146 = ((((_2952 > 0.0) ? exp2(_2967 * _2952) : (2.0 - exp2(_2969 * _2952))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2962;
        }
        else
        {
            float _3090 = 1.0 / cbSceneParam._m0[80u].x;
            float _3091 = isnan(_2953) ? _2952 : (isnan(_2952) ? _2953 : max(_2952, _2953));
            float _3092 = isnan(_2953) ? _2952 : (isnan(_2952) ? _2953 : min(_2952, _2953));
            float _3101 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : min(_3091, 0.0));
            float _3102 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : min(_3092, 0.0));
            _3146 = ((abs(_2959 / _2947) * cbSceneParam._m0[80u].y) * ((((_3101 - _3102) * 2.0) - ((exp2(_2967 * (isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0)))) - exp2(_2967 * (isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0))))) * _3090)) - ((exp2(_2969 * _3101) - exp2(_2969 * _3102)) * _3090))) + (_2962 * cbSceneParam._m0[80u].z);
        }
        vec4 _3148 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2879, _2880, 1.0), 0.0);
        float _3157 = exp2((_3146 * (-1.44269502162933349609375)) * (1.0 - _3148.w));
        float _3158 = log2(_3157);
        float _3174 = log2(_2899);
        _2971 = (exp2(_3174 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3158 * cbSceneParam._m0[78u].x)) * _3148.x) / cbSceneParam._m0[78u].x)) + _2896;
        _2973 = (exp2(_3174 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3158 * cbSceneParam._m0[78u].y)) * _3148.y) / cbSceneParam._m0[78u].y)) + _2897;
        _2975 = (exp2(_3174 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3158 * cbSceneParam._m0[78u].z)) * _3148.z) / cbSceneParam._m0[78u].z)) + _2898;
        _2977 = _3157 * _2899;
    }
    else
    {
        _2971 = _2896;
        _2973 = _2897;
        _2975 = _2898;
        _2977 = _2899;
    }
    bool _3184;
    vec4 _2987;
    vec4 _3009;
    float _3011;
    float _3015;
    float _3016;
    float _3017;
    float _3018;
    bool _3028;
    for (;;)
    {
        _2987 = cbMatDynParam._m0[0u];
        float _2989 = roundEven(_2987.y);
        bool _2990 = _2989 == 3.0;
        float _2991 = log2(_2977);
        float _2998 = exp2(_2991 * cbSceneParam._m0[78u].x) * _2868;
        float _2999 = exp2(_2991 * cbSceneParam._m0[78u].y) * _2869;
        float _3000 = exp2(_2991 * cbSceneParam._m0[78u].z) * _2870;
        float _3007 = _726 + (-0.5);
        _3009 = cbMtdParam._m0[1u];
        _3011 = _3009.y * _3007;
        float _3014 = (_2989 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3015 = _3014 * (_2990 ? _2998 : (_2998 + (cbSceneParam._m0[72u].w * _2971)));
        _3016 = _3014 * (_2990 ? _2999 : (_2999 + (cbSceneParam._m0[72u].w * _2973)));
        _3017 = _3014 * (_2990 ? _3000 : (_3000 + (cbSceneParam._m0[72u].w * _2975)));
        _3018 = _3007 * 0.999000012874603271484375;
        _3028 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3028)
        {
            if ((cbInstanceData._m0[_775 + 7u].x + _3018) < 0.5)
            {
                _3184 = true;
                break;
            }
        }
        uint _3125 = _776 + uint(_2987.w);
        if ((cbInstanceData._m0[_3125].w < 1.0) && ((cbInstanceData._m0[_3125].w + _3018) < 0.5))
        {
            _3184 = true;
            break;
        }
        if ((_3011 + 1.0) < _3009.x)
        {
            _3184 = true;
            break;
        }
        _3184 = false;
        break;
    }
    float _3388;
    if (_3184)
    {
        discard_state = true;
        _3388 = 0.0;
    }
    else
    {
        _3388 = cbInstanceData._m0[_2871].w;
    }
    SV_Target.x = _3015;
    SV_Target.y = _3016;
    SV_Target.z = _3017;
    SV_Target.w = _3388;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2871].w;
    discard_exit();
}


