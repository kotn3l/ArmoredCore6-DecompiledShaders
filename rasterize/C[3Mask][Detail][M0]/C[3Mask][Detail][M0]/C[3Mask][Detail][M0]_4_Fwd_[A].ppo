#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1197;
float _3560;
float _3561;
float _3562;
float _3563;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _242 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _248 = _242.x * cbMtdParam._m0[10u].x;
    float _249 = _242.y * cbMtdParam._m0[10u].y;
    float _250 = _242.z * cbMtdParam._m0[10u].z;
    vec4 _269 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _316 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x;
    float _327 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _316)) + 1.0;
    float _3572 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _328 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _335 = (_328 * ((_269.x * cbMtdParam._m0[11u].x) - _248)) + _248;
    float _336 = (_328 * ((_269.y * cbMtdParam._m0[11u].y) - _249)) + _249;
    float _337 = (_328 * ((_269.z * cbMtdParam._m0[11u].z) - _250)) + _250;
    vec4 _356 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _386 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _316)) + 1.0;
    float _3583 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _394 = (_387 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _395 = (_387 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _396 = (_387 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    vec4 _413 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _438 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _316)) + 1.0;
    float _3594 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    vec4 _466 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _474 = ((((_439 * ((_413.x * cbMtdParam._m0[13u].x) - _394)) + _394) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _466.x;
    float _477 = ((((_439 * ((_413.y * cbMtdParam._m0[13u].y) - _395)) + _395) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _466.y;
    float _480 = ((((_439 * ((_413.z * cbMtdParam._m0[13u].z) - _396)) + _396) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _466.z;
    vec4 _492 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _510 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _512 = _510.x;
    float _513 = _510.y;
    float _519 = cbMtdParam._m0[16u].w * _510.z;
    float _522 = (((cbMtdParam._m0[17u].x * _492.z) - _519) * _328) + _519;
    vec4 _535 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _544 = (((cbMtdParam._m0[17u].y * _535.z) - _522) * _387) + _522;
    vec4 _557 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _566 = (((cbMtdParam._m0[17u].z * _557.z) - _544) * _439) + _544;
    vec4 _579 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _592 = ((_492.x - _512) * _328) + _512;
    float _593 = ((_492.y - _513) * _328) + _513;
    float _598 = ((_535.x - _592) * _387) + _592;
    float _599 = ((_535.y - _593) * _387) + _593;
    float _608 = ((((_557.x - _598) * _439) + _598) * 2.0) + (-1.0);
    float _609 = ((((_557.y - _599) * _439) + _599) * 2.0) + (-1.0);
    float _610 = dot(vec2(_608, _609), vec2(_608, _609));
    float _3605 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _615 = sqrt(1.0 - (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))));
    float _618 = (((_579.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _608;
    float _619 = (((_579.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _609;
    float _622 = fma(_615, _212 * NORMAL.x, fma(_619, _219 * TANGENT.x, (_205 * _197) * _618));
    float _625 = fma(_615, _212 * NORMAL.y, fma(_619, _219 * TANGENT.y, (_205 * _198) * _618));
    float _628 = fma(_615, _212 * NORMAL.z, fma(_619, _219 * TANGENT.z, (_205 * _199) * _618));
    float _632 = inversesqrt(dot(vec3(_622, _625, _628), vec3(_622, _625, _628)));
    float _633 = _632 * _622;
    float _634 = _632 * _625;
    float _635 = _632 * _628;
    float _3616 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _636 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _3627 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _3638 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _3649 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _655 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _706 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _696);
    float _707 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _696);
    float _708 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _696);
    float _712 = inversesqrt(dot(vec3(_706, _707, _708), vec3(_706, _707, _708)));
    float _713 = _706 * _712;
    float _714 = _707 * _712;
    float _715 = _708 * _712;
    vec4 _720 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _722 = _720.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _876 = sqrt(((_706 * _706) + (_707 * _707)) + (_708 * _708));
        float _882 = (cbMatDynParam._m0[5u].x * _876) + cbMatDynParam._m0[5u].y;
        float _3660 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _887 = (cbMatDynParam._m0[5u].z * _876) + cbMatDynParam._m0[5u].w;
        float _3671 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) - _883)) + _883) < ((_722 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _733 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _734 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _752 = fma(_635, cbSceneParam._m0[5u].z, fma(_634, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _633));
    float _755 = fma(_635, cbSceneParam._m0[6u].z, fma(_634, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _633));
    float _758 = fma(_635, cbSceneParam._m0[7u].z, fma(_634, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _633));
    uint _771 = uint(roundEven(NORMAL.w)) * 13u;
    uint _772 = _771 + 9u;
    uint _773 = _772 + uint(cbMatDynParam._m0[0u].w);
    float _779 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0)))) * cbInstanceData._m0[_773].x;
    float _780 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0)))) * cbInstanceData._m0[_773].y;
    float _781 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0)))) * cbInstanceData._m0[_773].z;
    float _3682 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _782 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _3693 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _3704 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _784 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    vec4 _793 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _733, cbSceneParam._m0[86u].y * _734));
    float _796 = _793.x * TEXCOORD_5.w;
    float _797 = dot(vec3(_633, _634, _635), vec3(_713, _714, _715));
    float _800 = _797 * 2.0;
    float _804 = (_800 * _633) - _713;
    float _805 = (_800 * _634) - _714;
    float _806 = (_800 * _635) - _715;
    float _810 = abs(dot(vec3(_713, _714, _715), vec3(_633, _634, _635)));
    float _3715 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _812 = sqrt(_636);
    float _825 = exp2((_812 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_812 * 3.0));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1196;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _921 = fma(_865, cbModelParam._m0[26u].z, fma(_861, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _857));
        float _925 = fma(_865, cbModelParam._m0[27u].z, fma(_861, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _857));
        float _929 = fma(_865, cbModelParam._m0[28u].z, fma(_861, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _857));
        float _954 = _857 + _633;
        float _955 = _861 + _634;
        float _956 = _865 + _635;
        float _966 = fma(_956, cbModelParam._m0[26u].z, fma(_955, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _954)) - _921;
        float _967 = fma(_956, cbModelParam._m0[27u].z, fma(_955, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _954)) - _925;
        float _968 = fma(_956, cbModelParam._m0[28u].z, fma(_955, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _954)) - _929;
        float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
        float _985 = ((_972 * _966) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_921 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_972 * _967) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_925 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_972 * _968) / cbModelParam._m0[34u].z) + ((((((_929 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        float _1024 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_990.x + (-0.5));
        float _1026 = _1024 * (_990.y + (-0.5));
        float _1027 = _1024 * (_990.z + (-0.5));
        float _1034 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_997.x + (-0.5));
        float _1036 = _1034 * (_997.y + (-0.5));
        float _1037 = _1034 * (_997.z + (-0.5));
        float _1044 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1004.x + (-0.5));
        float _1046 = _1044 * (_1004.y + (-0.5));
        float _1047 = _1044 * (_1004.z + (-0.5));
        float _1054 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1011.x + (-0.5));
        float _1056 = _1054 * (_1011.y + (-0.5));
        float _1057 = _1054 * (_1011.z + (-0.5));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = _1025 * 0.5;
        float _1062 = _1035 * 0.5;
        float _1063 = _1045 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1078 = (dot(vec3(_633, _634, _635), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3741 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1088 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3752 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3763 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1090 + 1.0))) + _1095) * _1058;
        float _1105 = _1026 * 0.5;
        float _1106 = _1036 * 0.5;
        float _1107 = _1046 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_633, _634, _635), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3774 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3785 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3796 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1132 + 1.0))) + _1137) * _1059;
        float _1147 = _1027 * 0.5;
        float _1148 = _1037 * 0.5;
        float _1149 = _1047 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_633, _634, _635), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3807 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3818 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3829 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_1174 + 1.0))) + _1179) * _1060;
        _1196 = _1027;
        _1198 = _1026;
        _1199 = _1025;
        _1200 = _1037;
        _1201 = _1036;
        _1202 = _1035;
        _1203 = _1047;
        _1204 = _1046;
        _1205 = _1045;
        _1206 = _1060;
        _1207 = _1059;
        _1208 = _1058;
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
    }
    else
    {
        _1196 = _1197;
        _1198 = _1197;
        _1199 = _1197;
        _1200 = _1197;
        _1201 = _1197;
        _1202 = _1197;
        _1203 = _1197;
        _1204 = _1197;
        _1205 = _1197;
        _1206 = _1197;
        _1207 = _1197;
        _1208 = _1197;
        _1209 = 0.0;
        _1210 = 0.0;
        _1211 = 0.0;
    }
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1240 = fma(_865, cbModelParam._m0[30u].z, fma(_861, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _857));
        float _1244 = fma(_865, cbModelParam._m0[31u].z, fma(_861, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _857));
        float _1248 = fma(_865, cbModelParam._m0[32u].z, fma(_861, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _857));
        float _1271 = _857 + _633;
        float _1272 = _861 + _634;
        float _1273 = _865 + _635;
        float _1283 = fma(_1273, cbModelParam._m0[30u].z, fma(_1272, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1271)) - _1240;
        float _1284 = fma(_1273, cbModelParam._m0[31u].z, fma(_1272, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1271)) - _1244;
        float _1285 = fma(_1273, cbModelParam._m0[32u].z, fma(_1272, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1271)) - _1248;
        float _1289 = inversesqrt(dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285)));
        float _1302 = ((_1289 * _1283) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1240 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1303 = ((_1289 * _1284) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1244 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1304 = ((_1289 * _1285) / cbModelParam._m0[35u].z) + ((((((_1248 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        float _1339 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1306.x + (-0.5));
        float _1341 = _1339 * (_1306.y + (-0.5));
        float _1342 = _1339 * (_1306.z + (-0.5));
        float _1349 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1313.x + (-0.5));
        float _1351 = _1349 * (_1313.y + (-0.5));
        float _1352 = _1349 * (_1313.z + (-0.5));
        float _1359 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1320.x + (-0.5));
        float _1361 = _1359 * (_1320.y + (-0.5));
        float _1362 = _1359 * (_1320.z + (-0.5));
        float _1369 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1327.x + (-0.5));
        float _1371 = _1369 * (_1327.y + (-0.5));
        float _1372 = _1369 * (_1327.z + (-0.5));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = _1340 * 0.5;
        float _1377 = _1350 * 0.5;
        float _1378 = _1360 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_633, _634, _635), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _3892 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1403 + 1.0))) + _1408) * _1373;
        float _1418 = _1341 * 0.5;
        float _1419 = _1351 * 0.5;
        float _1420 = _1361 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_633, _634, _635), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _3925 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1445 + 1.0))) + _1450) * _1374;
        float _1460 = _1342 * 0.5;
        float _1461 = _1352 * 0.5;
        float _1462 = _1362 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_633, _634, _635), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _3958 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1487 + 1.0))) + _1492) * _1375;
        _1509 = _1342;
        _1510 = _1341;
        _1511 = _1340;
        _1512 = _1352;
        _1513 = _1351;
        _1514 = _1350;
        _1515 = _1362;
        _1516 = _1361;
        _1517 = _1360;
        _1518 = _1375;
        _1519 = _1374;
        _1520 = _1373;
        _1521 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
        _1522 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1523 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
    }
    else
    {
        _1509 = _1197;
        _1510 = _1197;
        _1511 = _1197;
        _1512 = _1197;
        _1513 = _1197;
        _1514 = _1197;
        _1515 = _1197;
        _1516 = _1197;
        _1517 = _1197;
        _1518 = _1197;
        _1519 = _1197;
        _1520 = _1197;
        _1521 = 0.0;
        _1522 = 0.0;
        _1523 = 0.0;
    }
    float _1533 = (cbModelParam._m0[1u].x * (_1521 - _1209)) + _1209;
    float _1534 = (cbModelParam._m0[1u].x * (_1522 - _1210)) + _1210;
    float _1535 = (cbModelParam._m0[1u].x * (_1523 - _1211)) + _1211;
    float _1556 = fma(_1535, cbSceneParam._m0[89u].z, fma(_1534, cbSceneParam._m0[89u].y, _1533 * cbSceneParam._m0[89u].x));
    float _1559 = fma(_1535, cbSceneParam._m0[90u].z, fma(_1534, cbSceneParam._m0[90u].y, _1533 * cbSceneParam._m0[90u].x));
    float _1562 = fma(_1535, cbSceneParam._m0[91u].z, fma(_1534, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1533));
    float _1577 = _804 * 0.5;
    float _1578 = _805 * 0.5;
    float _1579 = _806 * 0.5;
    float _1580 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1511, _1514, _1517, _1520));
    float _1583 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1510, _1513, _1516, _1519));
    float _1586 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1509, _1512, _1515, _1518));
    float _1620;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1593 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1196, _1200, _1203, _1206));
        float _1597 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1198, _1201, _1204, _1207));
        float _1601 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1199, _1202, _1205, _1208));
        float _1608 = dot(vec4(cbModelParam._m0[39u]), vec4(_1577, _1578, _1579, 1.0));
        _1620 = dot(vec3(isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1608) ? 0.0 : (isnan(0.0) ? _1608 : max(0.0, _1608))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1620 = 1.0;
    }
    float _1631;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1622 = dot(vec4(cbModelParam._m0[40u]), vec4(_1577, _1578, _1579, 1.0));
        _1631 = dot(vec3(isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1622) ? 0.0 : (isnan(0.0) ? _1622 : max(0.0, _1622))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1631 = 1.0;
    }
    float _1635 = (_1631 * cbModelParam._m0[1u].x) + (_1620 * (1.0 - cbModelParam._m0[1u].x));
    float _1645 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _636);
    float _1646 = isnan(_1645) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1645 : min(cbModelParam._m0[25u].z, _1645));
    float _1727;
    float _1729;
    float _1731;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1694 = fma(_865, cbModelParam._m0[13u].z, fma(_861, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _857)) + cbModelParam._m0[13u].w;
        float _1698 = fma(_865, cbModelParam._m0[14u].z, fma(_861, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _857)) + cbModelParam._m0[14u].w;
        float _1702 = fma(_865, cbModelParam._m0[15u].z, fma(_861, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _857)) + cbModelParam._m0[15u].w;
        float _1705 = fma(_806, cbModelParam._m0[13u].z, fma(_805, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _804));
        float _1708 = fma(_806, cbModelParam._m0[14u].z, fma(_805, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _804));
        float _1711 = fma(_806, cbModelParam._m0[15u].z, fma(_805, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _804));
        float _1739;
        if (_1705 > 0.0)
        {
            _1739 = abs((1.0 - _1694) / _1705);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1694 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1739 = frontier_phi_17_15_ladder;
        }
        float _1941;
        if (_1708 > 0.0)
        {
            _1941 = abs((1.0 - _1698) / _1708);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1698 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1941 = frontier_phi_26_22_ladder;
        }
        float _2184;
        if (_1711 > 0.0)
        {
            _2184 = abs((1.0 - _1702) / _1711);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1702 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2184 = frontier_phi_38_33_ladder;
        }
        float _2186 = isnan(_1941) ? _1739 : (isnan(_1739) ? _1941 : min(_1739, _1941));
        float _2187 = isnan(_2184) ? _2186 : (isnan(_2186) ? _2184 : min(_2186, _2184));
        float _2191 = (_2187 * _1705) + _1694;
        float _2192 = (_2187 * _1708) + _1698;
        float _2193 = (_2187 * _1711) + _1702;
        float _2194 = _2187 * 9.9999997473787516355514526367188e-05;
        float _2196 = (-1.0) - _2194;
        float _2198 = _2194 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2193 > _2198) || ((_2193 < _2196) || ((_2192 > _2198) || ((_2192 < _2196) || ((_2191 < _2196) || (_2191 > _2198))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2317 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2193, cbModelParam._m0[9u].z, fma(_2192, cbModelParam._m0[9u].y, _2191 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2193, cbModelParam._m0[10u].z, fma(_2192, cbModelParam._m0[10u].y, _2191 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2193, cbModelParam._m0[11u].z, fma(_2192, cbModelParam._m0[11u].y, _2191 * cbModelParam._m0[11u].x))), _1646);
            frontier_phi_16_38_ladder = _2317.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2317.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2317.x * cbModelParam._m0[1u].y;
        }
        _1727 = frontier_phi_16_38_ladder_2;
        _1729 = frontier_phi_16_38_ladder_1;
        _1731 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1715 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_804, _805, _806), _1646);
        _1727 = _1715.x * cbModelParam._m0[1u].y;
        _1729 = _1715.y * cbModelParam._m0[1u].y;
        _1731 = _1715.z * cbModelParam._m0[1u].y;
    }
    float _1735 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _636);
    float _1736 = isnan(_1735) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1735 : min(cbModelParam._m0[25u].w, _1735));
    float _1827;
    float _1829;
    float _1831;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1791 = fma(_865, cbModelParam._m0[21u].z, fma(_861, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _857)) + cbModelParam._m0[21u].w;
        float _1795 = fma(_865, cbModelParam._m0[22u].z, fma(_861, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _857)) + cbModelParam._m0[22u].w;
        float _1799 = fma(_865, cbModelParam._m0[23u].z, fma(_861, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _857)) + cbModelParam._m0[23u].w;
        float _1802 = fma(_806, cbModelParam._m0[21u].z, fma(_805, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _804));
        float _1805 = fma(_806, cbModelParam._m0[22u].z, fma(_805, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _804));
        float _1808 = fma(_806, cbModelParam._m0[23u].z, fma(_805, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _804));
        float _1946;
        if (_1802 > 0.0)
        {
            _1946 = abs((1.0 - _1791) / _1802);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1791 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1946 = frontier_phi_28_24_ladder;
        }
        float _2211;
        if (_1805 > 0.0)
        {
            _2211 = abs((1.0 - _1795) / _1805);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1795 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2211 = frontier_phi_40_35_ladder;
        }
        float _2416;
        if (_1808 > 0.0)
        {
            _2416 = abs((1.0 - _1799) / _1808);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1799 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2416 = frontier_phi_49_46_ladder;
        }
        float _2418 = isnan(_2211) ? _1946 : (isnan(_1946) ? _2211 : min(_1946, _2211));
        float _2419 = isnan(_2416) ? _2418 : (isnan(_2418) ? _2416 : min(_2418, _2416));
        float _2423 = (_2419 * _1802) + _1791;
        float _2424 = (_2419 * _1805) + _1795;
        float _2425 = (_2419 * _1808) + _1799;
        float _2426 = _2419 * 9.9999997473787516355514526367188e-05;
        float _2427 = (-1.0) - _2426;
        float _2429 = _2426 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2425 > _2429) || ((_2425 < _2427) || ((_2424 > _2429) || ((_2424 < _2427) || ((_2423 < _2427) || (_2423 > _2429))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2624 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2425, cbModelParam._m0[17u].z, fma(_2424, cbModelParam._m0[17u].y, _2423 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2425, cbModelParam._m0[18u].z, fma(_2424, cbModelParam._m0[18u].y, _2423 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2425, cbModelParam._m0[19u].z, fma(_2424, cbModelParam._m0[19u].y, _2423 * cbModelParam._m0[19u].x))), _1736);
            frontier_phi_25_49_ladder = _2624.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2624.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2624.x * cbModelParam._m0[1u].z;
        }
        _1827 = frontier_phi_25_49_ladder_2;
        _1829 = frontier_phi_25_49_ladder_1;
        _1831 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1811 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_804, _805, _806), _1736);
        _1827 = _1811.x * cbModelParam._m0[1u].z;
        _1829 = _1811.y * cbModelParam._m0[1u].z;
        _1831 = _1811.z * cbModelParam._m0[1u].z;
    }
    float _1843 = ((((1.0 - _825) * ((_812 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_825 * _812)) * _796;
    float _1844 = _1843 * ((cbModelParam._m0[1u].w * (_1827 - _1727)) + _1727);
    float _1845 = _1843 * ((cbModelParam._m0[1u].w * (_1829 - _1729)) + _1729);
    float _1846 = _1843 * ((cbModelParam._m0[1u].w * (_1831 - _1731)) + _1731);
    float _1849 = fma(_1846, cbSceneParam._m0[89u].z, fma(_1845, cbSceneParam._m0[89u].y, _1844 * cbSceneParam._m0[89u].x));
    float _1852 = fma(_1846, cbSceneParam._m0[90u].z, fma(_1845, cbSceneParam._m0[90u].y, _1844 * cbSceneParam._m0[90u].x));
    float _1855 = fma(_1846, cbSceneParam._m0[91u].z, fma(_1845, cbSceneParam._m0[91u].y, _1844 * cbSceneParam._m0[91u].x));
    uvec4 _1865 = floatBitsToUint(cbInstanceData._m0[_771 + 5u]);
    uint _1867 = _1865.x * 14u;
    uint _1868 = _1867 + 13u;
    float _1875 = _796 + (-1.0);
    float _1880 = (cbLight._m0[_1868].x * _1875) + 1.0;
    float _1881 = (cbLight._m0[_1868].y * _1875) + 1.0;
    float _1882 = (cbLight._m0[_1868].z * _1875) + 1.0;
    float _1883 = (cbLight._m0[_1868].w * _1875) + 1.0;
    uint _1884 = _1867 + 5u;
    float _1890 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
    uint _1894 = _1867 + 4u;
    float _1900 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
    uint _1904 = _1867 | 1u;
    float _1915 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_633, _634, _635));
    float _1918 = dot(vec3(cbLight._m0[_1904].xyz), vec3(_633, _634, _635));
    float _4094 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _4105 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1923 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * 0.3183098733425140380859375;
    float _1925 = (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * 0.3183098733425140380859375;
    float _1932 = ((cbLight._m0[_1884].x * _1890) * _1925) + ((cbLight._m0[_1894].x * _1900) * _1923);
    float _1933 = ((_1890 * cbLight._m0[_1884].y) * _1925) + ((_1900 * cbLight._m0[_1894].y) * _1923);
    float _1934 = ((_1890 * cbLight._m0[_1884].z) * _1925) + ((_1900 * cbLight._m0[_1894].z) * _1923);
    uvec4 _1938 = floatBitsToUint(cbLight._m0[_1867 + 12u]);
    bool _1940 = _1938.x == 0u;
    float _1951;
    float _1953;
    float _1955;
    if (_1940)
    {
        _1951 = _1932;
        _1953 = _1933;
        _1955 = _1934;
    }
    else
    {
        uint _1959 = _1867 + 6u;
        float _1975 = (dot(vec3(cbLight._m0[_1867 + 2u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _1976 = _1975 * _1975;
        float _4116 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1977 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1978 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
        _1951 = (((cbLight._m0[_1959].x * 0.3183098733425140380859375) * _1977) * _1978) + _1932;
        _1953 = (((cbLight._m0[_1959].y * 0.3183098733425140380859375) * _1977) * _1978) + _1933;
        _1955 = (((cbLight._m0[_1959].z * 0.3183098733425140380859375) * _1977) * _1978) + _1934;
    }
    bool _1958 = _1938.y == 0u;
    float _1996;
    float _1998;
    float _2000;
    if (_1958)
    {
        _1996 = _1951;
        _1998 = _1953;
        _2000 = _1955;
    }
    else
    {
        uint _2155 = _1867 + 7u;
        float _2171 = (dot(vec3(cbLight._m0[_1867 + 3u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _2172 = _2171 * _2171;
        float _4132 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2173 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2174 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
        _1996 = (((cbLight._m0[_2155].x * 0.3183098733425140380859375) * _2173) * _2174) + _1951;
        _1998 = (((cbLight._m0[_2155].y * 0.3183098733425140380859375) * _2173) * _2174) + _1953;
        _2000 = (((cbLight._m0[_2155].z * 0.3183098733425140380859375) * _2173) * _2174) + _1955;
    }
    uint _2003 = _1867 + 8u;
    float _2016 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1867].w)) * _636) * 0.949999988079071044921875);
    float _2017 = _2016 * _2016;
    float _2018 = cbLight._m0[_1867].x + _713;
    float _2019 = cbLight._m0[_1867].y + _714;
    float _2020 = cbLight._m0[_1867].z + _715;
    float _2024 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
    float _2025 = _2024 * _2018;
    float _2026 = _2024 * _2019;
    float _2027 = _2024 * _2020;
    float _2028 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_1867].xyz));
    float _4148 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _4159 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _2032 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _2033 = dot(vec3(_633, _634, _635), vec3(_2025, _2026, _2027));
    float _4170 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _2037 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_2025, _2026, _2027));
    float _4181 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2041 = _2017 * _2017;
    float _2045 = ((_2036 * _2036) * (_2041 + (-1.0))) + 1.0;
    float _2056 = (exp2(log2(1.0 - (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2057 = 1.0 - _2017;
    float _2068 = (0.5 / (((_2032 * ((_2031 * _2057) + _2017)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2057) + _2017) * _2031))) * _2031;
    float _4192 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2070 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2041 / ((_2045 * _2045) * 3.141590118408203125));
    uint _2081 = _1867 + 9u;
    float _2092 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1904].w)) * _636) * 0.949999988079071044921875);
    float _2093 = _2092 * _2092;
    float _2094 = cbLight._m0[_1904].x + _713;
    float _2095 = cbLight._m0[_1904].y + _714;
    float _2096 = cbLight._m0[_1904].z + _715;
    float _2100 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
    float _2101 = _2100 * _2094;
    float _2102 = _2100 * _2095;
    float _2103 = _2100 * _2096;
    float _2104 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_1904].xyz));
    float _4203 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2107 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _2108 = dot(vec3(_633, _634, _635), vec3(_2101, _2102, _2103));
    float _4214 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _2112 = dot(vec3(cbLight._m0[_1904].xyz), vec3(_2101, _2102, _2103));
    float _4225 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2116 = _2093 * _2093;
    float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
    float _2129 = (exp2(log2(1.0 - (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2130 = 1.0 - _2093;
    float _2140 = (0.5 / (((_2032 * ((_2107 * _2130) + _2093)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2130) + _2093) * _2107))) * _2107;
    float _4236 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2142 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
    float _2152 = (((_2129 * cbLight._m0[_2081].x) * _2142) * _1890) + (((_2056 * cbLight._m0[_2003].x) * _2070) * _1900);
    float _2153 = (((_2129 * cbLight._m0[_2081].y) * _2142) * _1890) + (((_2056 * cbLight._m0[_2003].y) * _2070) * _1900);
    float _2154 = (((_2129 * cbLight._m0[_2081].z) * _2142) * _1890) + (((_2056 * cbLight._m0[_2003].z) * _2070) * _1900);
    float _2216;
    float _2218;
    float _2220;
    if (_1940)
    {
        _2216 = _2152;
        _2218 = _2153;
        _2220 = _2154;
    }
    else
    {
        uint _2222 = _1867 + 2u;
        uint _2226 = _1867 + 10u;
        float _2240 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2222].w)) * _636) * 0.949999988079071044921875);
        float _2241 = _2240 * _2240;
        float _2242 = cbLight._m0[_2222].x + _713;
        float _2243 = cbLight._m0[_2222].y + _714;
        float _2244 = cbLight._m0[_2222].z + _715;
        float _2248 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
        float _2249 = _2248 * _2242;
        float _2250 = _2248 * _2243;
        float _2251 = _2248 * _2244;
        float _2252 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2222].xyz));
        float _4247 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2255 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2256 = dot(vec3(_633, _634, _635), vec3(_2249, _2250, _2251));
        float _4258 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2259 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2260 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_2249, _2250, _2251));
        float _4269 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2264 = _2241 * _2241;
        float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
        float _2277 = (exp2(log2(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2278 = 1.0 - _2241;
        float _2288 = (0.5 / (((_2032 * ((_2255 * _2278) + _2241)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2278) + _2241) * _2255))) * _2255;
        float _4280 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2290 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
        float _2291 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
        _2216 = (((_2277 * cbLight._m0[_2226].x) * _2290) * _2291) + _2152;
        _2218 = (((_2277 * cbLight._m0[_2226].y) * _2290) * _2291) + _2153;
        _2220 = (((_2277 * cbLight._m0[_2226].z) * _2290) * _2291) + _2154;
    }
    float _2326;
    float _2328;
    float _2330;
    if (_1958)
    {
        _2326 = _2216;
        _2328 = _2218;
        _2330 = _2220;
    }
    else
    {
        uint _2337 = _1867 + 3u;
        uint _2341 = _1867 + 11u;
        float _2355 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2337].w)) * _636) * 0.949999988079071044921875);
        float _2356 = _2355 * _2355;
        float _2357 = cbLight._m0[_2337].x + _713;
        float _2358 = cbLight._m0[_2337].y + _714;
        float _2359 = cbLight._m0[_2337].z + _715;
        float _2363 = inversesqrt(dot(vec3(_2357, _2358, _2359), vec3(_2357, _2358, _2359)));
        float _2364 = _2363 * _2357;
        float _2365 = _2363 * _2358;
        float _2366 = _2363 * _2359;
        float _2367 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2337].xyz));
        float _4296 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2370 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2371 = dot(vec3(_633, _634, _635), vec3(_2364, _2365, _2366));
        float _4307 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2374 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2375 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_2364, _2365, _2366));
        float _4318 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2379 = _2356 * _2356;
        float _2383 = ((_2374 * _2374) * (_2379 + (-1.0))) + 1.0;
        float _2392 = (exp2(log2(1.0 - (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2393 = 1.0 - _2356;
        float _2403 = (0.5 / (((_2032 * ((_2370 * _2393) + _2356)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2393) + _2356) * _2370))) * _2370;
        float _4329 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2405 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2379 / ((_2383 * _2383) * 3.141590118408203125));
        float _2406 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
        _2326 = (((_2392 * cbLight._m0[_2341].x) * _2405) * _2406) + _2216;
        _2328 = (((_2392 * cbLight._m0[_2341].y) * _2405) * _2406) + _2218;
        _2330 = (((_2392 * cbLight._m0[_2341].z) * _2405) * _2406) + _2220;
    }
    float _2541;
    float _2543;
    float _2545;
    float _2547;
    float _2549;
    float _2551;
    if (_1865.y == 0u)
    {
        float _2481 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2482 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2481;
        float _2483 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2481;
        float _2484 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2481;
        uvec4 _2496 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2497 = _2496.x;
        uint _2508 = uint((float(_2496.y) * floor(float(uint(cbSceneParam._m0[85u].y * _734) / _2497))) + floor(float(uint(cbSceneParam._m0[85u].x * _733) / _2497)));
        float _2518 = (log2(_2484 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2519 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        uint _2522 = uint(isnan(14.0) ? _2519 : (isnan(_2519) ? 14.0 : min(_2519, 14.0)));
        uvec4 _2527 = texelFetch(g_lightClusterGridBuffer, int(((_2522 << 2u) + (_2508 << 6u)) >> 2u));
        uint _2528 = _2527.x;
        uint _2529 = _2496.z;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        if (((((1u << ((_2529 >> 4u) & 15u)) + 4294967295u) & _2528) == 0u) || ((_2529 & 240u) == 0u))
        {
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
            _2637 = 0.0;
            _2639 = 0.0;
        }
        else
        {
            float _2630;
            float _2632;
            float _2634;
            float _2636;
            float _2638;
            float _2640;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            uint _2788 = 0u;
            uint _2797;
            bool _2798;
            for (;;)
            {
                _2797 = texelFetch(g_lightClassification, int((((_2522 << 5u) + (_2508 << 9u)) + (_2788 << 2u)) >> 2u)).x;
                _2798 = _2797 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2798)
                {
                    frontier_phi_66_pred = _2782;
                    frontier_phi_66_pred_1 = _2787;
                    frontier_phi_66_pred_2 = _2786;
                    frontier_phi_66_pred_3 = _2785;
                    frontier_phi_66_pred_4 = _2784;
                    frontier_phi_66_pred_5 = _2783;
                }
                else
                {
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    uint _2933;
                    _2927 = _2782;
                    _2928 = _2783;
                    _2929 = _2784;
                    _2930 = _2785;
                    _2931 = _2786;
                    _2932 = _2787;
                    _2933 = _2797;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    for (;;)
                    {
                        uint _2937 = uint(findLSB(_2933)) + (_2788 << 5u);
                        uint _2934 = (_2933 + 4294967295u) & _2933;
                        uint _2939 = _2937 * 48u;
                        vec4 _2953 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2939)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 3u)).x));
                        uint _2959 = (_2937 * 48u) + 4u;
                        vec4 _2972 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2959)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 3u)).x));
                        uint _2978 = (_2937 * 48u) + 8u;
                        vec3 _2989 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2978)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 2u)).x));
                        float _2993 = _2953.x - _2482;
                        float _2994 = _2953.y - _2483;
                        float _2995 = _2953.z - _2484;
                        float _2996 = dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995));
                        float _2999 = inversesqrt(_2996);
                        float _3000 = _2999 * _2993;
                        float _3001 = _2999 * _2994;
                        float _3002 = _2999 * _2995;
                        float _3003 = dot(vec3(_752, _755, _758), vec3(_3000, _3001, _3002));
                        float _3008 = 1.0 - (_2996 * _2953.w);
                        float _4355 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3009 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                        float _3010 = sqrt(_2996) * _2972.w;
                        float _3013 = 1.39999997615814208984375 / (_3010 + 1.39999997615814208984375);
                        float _3014 = _3013 * _3013;
                        float _3017 = ((1.0 - _3014) * _3003) + _3014;
                        float _3020 = _3010 * _3010;
                        float _3024 = ((isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0))) * _3009) / ((_3020 * 0.699999988079071044921875) + 1.0);
                        float _3028 = (-0.0) - _2482;
                        float _3029 = (-0.0) - _2483;
                        float _3030 = (-0.0) - _2484;
                        float _3034 = inversesqrt(dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030)));
                        float _3035 = _3034 * _3028;
                        float _3036 = _3034 * _3029;
                        float _3037 = _3034 * _3030;
                        float _3045 = exp2(log2(1.0 / ((_3020 * 3.5) + 5.0)) * 0.25);
                        float _3046 = 1.0 - _812;
                        float _3053 = sqrt(1.0 - ((1.0 - (_3046 * _3046)) * (1.0 - (_3045 * _3045))));
                        float _3054 = _3053 * _3053;
                        float _3055 = _3054 * _3054;
                        float _3056 = _3035 + _3000;
                        float _3057 = _3036 + _3001;
                        float _3058 = _3037 + _3002;
                        float _3062 = inversesqrt(dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058)));
                        float _3066 = dot(vec3(_752, _755, _758), vec3(_3035, _3036, _3037));
                        float _4371 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3069 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                        float _3070 = dot(vec3(_752, _755, _758), vec3(_3062 * _3056, _3062 * _3057, _3062 * _3058));
                        float _4382 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3073 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                        float _3077 = ((_3073 * _3073) * (_3055 + (-1.0))) + 1.0;
                        float _3078 = _3013 * _3054;
                        float _3079 = _3078 * _3078;
                        float _3082 = ((1.0 - _3079) * _3003) + _3079;
                        float _4393 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3083 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                        float _3084 = 1.0 - _3054;
                        float _3094 = (0.5 / (((_3083 * ((_3069 * _3084) + _3054)) + 9.9999999392252902907785028219223e-09) + (((_3083 * _3084) + _3054) * _3069))) * _3083;
                        float _4404 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3105 = (((_3055 * 3.1415927410125732421875) * (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) / ((_3077 * _3077) * ((_3020 * 2.1991131305694580078125) + 3.141590118408203125))) * _3009;
                        _2857 = (_3024 * _2972.x) + _2930;
                        _2858 = (_3024 * _2972.y) + _2931;
                        _2859 = (_3024 * _2972.z) + _2932;
                        _2854 = (_3105 * _2989.x) + _2927;
                        _2855 = (_3105 * _2989.y) + _2928;
                        _2856 = (_3105 * _2989.z) + _2929;
                        if (_2934 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2927 = _2854;
                            _2928 = _2855;
                            _2929 = _2856;
                            _2930 = _2857;
                            _2931 = _2858;
                            _2932 = _2859;
                            _2933 = _2934;
                        }
                    }
                    frontier_phi_66_pred = _2854;
                    frontier_phi_66_pred_1 = _2859;
                    frontier_phi_66_pred_2 = _2858;
                    frontier_phi_66_pred_3 = _2857;
                    frontier_phi_66_pred_4 = _2856;
                    frontier_phi_66_pred_5 = _2855;
                }
                _2630 = frontier_phi_66_pred;
                _2640 = frontier_phi_66_pred_1;
                _2638 = frontier_phi_66_pred_2;
                _2636 = frontier_phi_66_pred_3;
                _2634 = frontier_phi_66_pred_4;
                _2632 = frontier_phi_66_pred_5;
                uint _2789 = _2788 + 1u;
                if (_2789 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2782 = _2630;
                    _2783 = _2632;
                    _2784 = _2634;
                    _2785 = _2636;
                    _2786 = _2638;
                    _2787 = _2640;
                    _2788 = _2789;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
            _2637 = _2638;
            _2639 = _2640;
        }
        uvec4 _2643 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2644 = _2643.z;
        uint _2646 = (_2644 >> 8u) & 15u;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        if (((4294967295u << _2646) & _2528) == 0u)
        {
            _2750 = _2629;
            _2752 = _2631;
            _2754 = _2633;
            _2756 = _2635;
            _2758 = _2637;
            _2760 = _2639;
        }
        else
        {
            float _2775 = inversesqrt(dot(vec3(_2482, _2483, _2484), vec3(_2482, _2483, _2484)));
            float _2776 = _2775 * _2482;
            float _2777 = _2775 * _2483;
            float _2778 = _2775 * _2484;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2646 < ((_2644 >> 12u) & 15u))
            {
                float _2751;
                float _2753;
                float _2755;
                float _2757;
                float _2759;
                float _2761;
                float _2910 = _2629;
                float _2911 = _2631;
                float _2912 = _2633;
                float _2913 = _2635;
                float _2914 = _2637;
                float _2915 = _2639;
                uint _2916 = _2646;
                uint _2925;
                bool _2926;
                for (;;)
                {
                    _2925 = texelFetch(g_lightClassification, int((((_2522 << 5u) + (_2508 << 9u)) + (_2916 << 2u)) >> 2u)).x;
                    _2926 = _2925 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2926)
                    {
                        frontier_phi_77_pred = _2915;
                        frontier_phi_77_pred_1 = _2914;
                        frontier_phi_77_pred_2 = _2913;
                        frontier_phi_77_pred_3 = _2912;
                        frontier_phi_77_pred_4 = _2911;
                        frontier_phi_77_pred_5 = _2910;
                    }
                    else
                    {
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3132 = _2910;
                        float _3133 = _2911;
                        float _3134 = _2912;
                        float _3135 = _2913;
                        float _3136 = _2914;
                        float _3137 = _2915;
                        uint _3138 = _2925;
                        uint _3139;
                        vec4 _3164;
                        float _3165;
                        vec4 _3180;
                        vec3 _3192;
                        vec4 _3207;
                        vec4 _3222;
                        float _3269;
                        bool _3270;
                        for (;;)
                        {
                            uint _3149 = ((_2916 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3138));
                            _3139 = (_3138 + 4294967295u) & _3138;
                            uint _3151 = _3149 * 40u;
                            _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            _3165 = _3164.w;
                            uint _3167 = (_3149 * 40u) + 4u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3182 = (_3149 * 40u) + 8u;
                            _3192 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x));
                            uint _3194 = (_3149 * 40u) + 16u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            uint _3209 = (_3149 * 40u) + 20u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            uint _3225 = (_3149 * 40u) + 24u;
                            vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            uint _3244 = (_3149 * 40u) + 28u;
                            vec4 _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            _3269 = fma(_2484, _3257.z, fma(_2483, _3257.y, _3257.x * _2482)) + _3257.w;
                            _3270 = !((fma(_2484, _3238.z, fma(_2483, _3238.y, _3238.x * _2482)) + _3238.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3270)
                            {
                                float _3297 = _3164.x - _2482;
                                float _3298 = _3164.y - _2483;
                                float _3299 = _3164.z - _2484;
                                float _3300 = dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299));
                                float _3303 = inversesqrt(_3300);
                                float _3304 = _3303 * _3297;
                                float _3305 = _3303 * _3298;
                                float _3306 = _3303 * _3299;
                                float _3310 = 1.0 - (_3300 / (_3165 * _3165));
                                float _4415 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3311 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3315 = sqrt(_3300) * _3180.w;
                                float _3317 = 1.39999997615814208984375 / (_3315 + 1.39999997615814208984375);
                                float _3318 = _3317 * _3317;
                                float _3321 = ((1.0 - _3318) * dot(vec3(_3304, _3305, _3306), vec3(_752, _755, _758))) + _3318;
                                float _3324 = _3315 * _3315;
                                float _3328 = (fma(_2484, _3207.z, fma(_2483, _3207.y, _3207.x * _2482)) + _3207.w) / _3269;
                                float _3329 = (fma(_2484, _3222.z, fma(_2483, _3222.y, _3222.x * _2482)) + _3222.w) / _3269;
                                float _3333 = 1.0 - dot(vec2(_3328, _3329), vec2(_3328, _3329));
                                float _4431 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3334 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3335 = _3334 * (((isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0))) * _3311) / ((_3324 * 0.699999988079071044921875) + 1.0));
                                float _3347 = exp2(log2(1.0 / ((_3324 * 3.5) + 5.0)) * 0.25);
                                float _3348 = 1.0 - _812;
                                float _3355 = sqrt(1.0 - ((1.0 - (_3348 * _3348)) * (1.0 - (_3347 * _3347))));
                                float _3356 = _3355 * _3355;
                                float _3357 = _3356 * _3356;
                                float _3358 = _3304 - _2776;
                                float _3359 = _3305 - _2777;
                                float _3360 = _3306 - _2778;
                                float _3364 = inversesqrt(dot(vec3(_3358, _3359, _3360), vec3(_3358, _3359, _3360)));
                                float _3368 = dot(vec3(_752, _755, _758), vec3((-0.0) - _2776, (-0.0) - _2777, (-0.0) - _2778));
                                float _4442 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3371 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                                float _3372 = dot(vec3(_752, _755, _758), vec3(_3364 * _3358, _3364 * _3359, _3364 * _3360));
                                float _4453 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3375 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                                float _3379 = ((_3375 * _3375) * (_3357 + (-1.0))) + 1.0;
                                float _3380 = _3317 * _3356;
                                float _3381 = _3380 * _3380;
                                float _3387 = ((1.0 - _3381) * dot(vec3(_752, _755, _758), vec3(_3304, _3305, _3306))) + _3381;
                                float _4464 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3388 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                                float _3389 = 1.0 - _3356;
                                float _3399 = (0.5 / (((_3388 * ((_3371 * _3389) + _3356)) + 9.9999999392252902907785028219223e-09) + (((_3388 * _3389) + _3356) * _3371))) * _3388;
                                float _4475 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3409 = (_3334 * _3311) * (((_3357 * 3.1415927410125732421875) * (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) / ((_3379 * _3379) * ((_3324 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3335 * _3180.y;
                                frontier_phi_83_pred_1 = _3335 * _3180.x;
                                frontier_phi_83_pred_2 = _3409 * _3192.z;
                                frontier_phi_83_pred_3 = _3409 * _3192.y;
                                frontier_phi_83_pred_4 = _3409 * _3192.x;
                                frontier_phi_83_pred_5 = _3335 * _3180.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3417 = frontier_phi_83_pred;
                            _3416 = frontier_phi_83_pred_1;
                            _3415 = frontier_phi_83_pred_2;
                            _3414 = frontier_phi_83_pred_3;
                            _3413 = frontier_phi_83_pred_4;
                            _3418 = frontier_phi_83_pred_5;
                            _3122 = _3416 + _3135;
                            _3123 = _3417 + _3136;
                            _3124 = _3418 + _3137;
                            _3119 = _3413 + _3132;
                            _3120 = _3414 + _3133;
                            _3121 = _3415 + _3134;
                            if (_3139 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3139;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3124;
                        frontier_phi_77_pred_1 = _3123;
                        frontier_phi_77_pred_2 = _3122;
                        frontier_phi_77_pred_3 = _3121;
                        frontier_phi_77_pred_4 = _3120;
                        frontier_phi_77_pred_5 = _3119;
                    }
                    _2761 = frontier_phi_77_pred;
                    _2759 = frontier_phi_77_pred_1;
                    _2757 = frontier_phi_77_pred_2;
                    _2755 = frontier_phi_77_pred_3;
                    _2753 = frontier_phi_77_pred_4;
                    _2751 = frontier_phi_77_pred_5;
                    uint _2917 = _2916 + 1u;
                    if (_2917 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2910 = _2751;
                        _2911 = _2753;
                        _2912 = _2755;
                        _2913 = _2757;
                        _2914 = _2759;
                        _2915 = _2761;
                        _2916 = _2917;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2755;
                frontier_phi_58_59_ladder_1 = _2761;
                frontier_phi_58_59_ladder_2 = _2759;
                frontier_phi_58_59_ladder_3 = _2757;
                frontier_phi_58_59_ladder_4 = _2753;
                frontier_phi_58_59_ladder_5 = _2751;
            }
            else
            {
                frontier_phi_58_59_ladder = _2633;
                frontier_phi_58_59_ladder_1 = _2639;
                frontier_phi_58_59_ladder_2 = _2637;
                frontier_phi_58_59_ladder_3 = _2635;
                frontier_phi_58_59_ladder_4 = _2631;
                frontier_phi_58_59_ladder_5 = _2629;
            }
            _2750 = frontier_phi_58_59_ladder_5;
            _2752 = frontier_phi_58_59_ladder_4;
            _2754 = frontier_phi_58_59_ladder;
            _2756 = frontier_phi_58_59_ladder_3;
            _2758 = frontier_phi_58_59_ladder_2;
            _2760 = frontier_phi_58_59_ladder_1;
        }
        float _2765 = isnan(1.0) ? _796 : (isnan(_796) ? 1.0 : min(_796, 1.0));
        _2541 = (_2765 * _2756) + _1996;
        _2543 = (_2765 * _2758) + _1998;
        _2545 = (_2765 * _2760) + _2000;
        _2547 = ((_2750 * 0.039999999105930328369140625) * _2765) + _2326;
        _2549 = ((_2752 * 0.039999999105930328369140625) * _2765) + _2328;
        _2551 = ((_2754 * 0.039999999105930328369140625) * _2765) + _2330;
    }
    else
    {
        _2541 = _1996;
        _2543 = _1998;
        _2545 = _2000;
        _2547 = _2326;
        _2549 = _2328;
        _2551 = _2330;
    }
    float _4491 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _4502 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4513 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _2568 = ((isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2541 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _796))) + ((_2547 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1635)) * cbPerFrame._m0[3u].x);
    float _2569 = ((isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2543 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _796))) + ((_2549 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1635)) * cbPerFrame._m0[3u].x);
    float _2570 = ((isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2545 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _796))) + ((_2551 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1635)) * cbPerFrame._m0[3u].x);
    uint _2571 = _771 + 6u;
    float _2579 = _733 / cbSceneParam._m0[86u].x;
    float _2580 = _734 / cbSceneParam._m0[86u].y;
    vec4 _2594 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2579, _2580, (log2((isnan(cbSceneParam._m0[77u].w) ? _655 : (isnan(_655) ? cbSceneParam._m0[77u].w : min(_655, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2596 = _2594.x;
    float _2597 = _2594.y;
    float _2598 = _2594.z;
    float _2599 = _2594.w;
    float _2692;
    float _2694;
    float _2696;
    float _2698;
    if (_655 > cbSceneParam._m0[78u].w)
    {
        float _2654 = isnan(_655) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _655 : min(cbSceneParam._m0[80u].w, _655));
        float _2655 = _2654 / _655;
        float _2666 = _2655 * _706;
        float _2667 = _707 * _2655;
        float _2668 = (-0.0) - _2667;
        float _2670 = _2655 * _708;
        float _2672 = (cbSceneParam._m0[77u].w * _2668) / _2654;
        float _2673 = _2672 + cbSceneParam._m0[79u].w;
        float _2674 = cbSceneParam._m0[79u].w - _2667;
        float _2680 = sqrt(((_2666 * _2666) + (_2667 * _2667)) + (_2670 * _2670));
        float _2683 = (1.0 - (cbSceneParam._m0[77u].w / _2654)) * _2680;
        float _2688 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2690 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2867;
        if (abs((_2668 - _2672) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2867 = ((((_2673 > 0.0) ? exp2(_2688 * _2673) : (2.0 - exp2(_2690 * _2673))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2683;
        }
        else
        {
            float _2811 = 1.0 / cbSceneParam._m0[80u].x;
            float _2812 = isnan(_2674) ? _2673 : (isnan(_2673) ? _2674 : max(_2673, _2674));
            float _2813 = isnan(_2674) ? _2673 : (isnan(_2673) ? _2674 : min(_2673, _2674));
            float _2822 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : min(_2812, 0.0));
            float _2823 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : min(_2813, 0.0));
            _2867 = ((abs(_2680 / _2668) * cbSceneParam._m0[80u].y) * ((((_2822 - _2823) * 2.0) - ((exp2(_2688 * (isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0)))) - exp2(_2688 * (isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0))))) * _2811)) - ((exp2(_2690 * _2822) - exp2(_2690 * _2823)) * _2811))) + (_2683 * cbSceneParam._m0[80u].z);
        }
        vec4 _2869 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2579, _2580, 1.0), 0.0);
        float _2878 = exp2((_2867 * (-1.44269502162933349609375)) * (1.0 - _2869.w));
        float _2879 = log2(_2878);
        float _2895 = log2(_2599);
        _2692 = (exp2(_2895 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2879 * cbSceneParam._m0[78u].x)) * _2869.x) / cbSceneParam._m0[78u].x)) + _2596;
        _2694 = (exp2(_2895 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2879 * cbSceneParam._m0[78u].y)) * _2869.y) / cbSceneParam._m0[78u].y)) + _2597;
        _2696 = (exp2(_2895 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2879 * cbSceneParam._m0[78u].z)) * _2869.z) / cbSceneParam._m0[78u].z)) + _2598;
        _2698 = _2878 * _2599;
    }
    else
    {
        _2692 = _2596;
        _2694 = _2597;
        _2696 = _2598;
        _2698 = _2599;
    }
    bool _2905;
    vec4 _2708;
    vec4 _2730;
    float _2732;
    float _2736;
    float _2737;
    float _2738;
    float _2739;
    bool _2749;
    for (;;)
    {
        _2708 = cbMatDynParam._m0[0u];
        float _2710 = roundEven(_2708.y);
        bool _2711 = _2710 == 3.0;
        float _2712 = log2(_2698);
        float _2719 = exp2(_2712 * cbSceneParam._m0[78u].x) * _2568;
        float _2720 = exp2(_2712 * cbSceneParam._m0[78u].y) * _2569;
        float _2721 = exp2(_2712 * cbSceneParam._m0[78u].z) * _2570;
        float _2728 = _722 + (-0.5);
        _2730 = cbMtdParam._m0[1u];
        _2732 = _2730.y * _2728;
        float _2735 = (_2710 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2736 = _2735 * (_2711 ? _2719 : (_2719 + (cbSceneParam._m0[72u].w * _2692)));
        _2737 = _2735 * (_2711 ? _2720 : (_2720 + (cbSceneParam._m0[72u].w * _2694)));
        _2738 = _2735 * (_2711 ? _2721 : (_2721 + (cbSceneParam._m0[72u].w * _2696)));
        _2739 = _2728 * 0.999000012874603271484375;
        _2749 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2749)
        {
            if ((cbInstanceData._m0[_771 + 7u].x + _2739) < 0.5)
            {
                _2905 = true;
                break;
            }
        }
        uint _2846 = _772 + uint(_2708.w);
        if ((cbInstanceData._m0[_2846].w < 1.0) && ((cbInstanceData._m0[_2846].w + _2739) < 0.5))
        {
            _2905 = true;
            break;
        }
        if ((_2732 + 1.0) < _2730.x)
        {
            _2905 = true;
            break;
        }
        _2905 = false;
        break;
    }
    float _3110;
    if (_2905)
    {
        discard_state = true;
        _3110 = 0.0;
    }
    else
    {
        _3110 = cbInstanceData._m0[_2571].w;
    }
    SV_Target.x = _2736;
    SV_Target.y = _2737;
    SV_Target.z = _2738;
    SV_Target.w = _3110;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2571].w;
    discard_exit();
}


