#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1199;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _248 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _254 = _248.x * cbMtdParam._m0[10u].x;
    float _255 = _248.y * cbMtdParam._m0[10u].y;
    float _256 = _248.z * cbMtdParam._m0[10u].z;
    vec4 _275 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _322 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x;
    float _333 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _322)) + 1.0;
    float _3508 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _334 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _341 = (_334 * ((_275.x * cbMtdParam._m0[11u].x) - _254)) + _254;
    float _342 = (_334 * ((_275.y * cbMtdParam._m0[11u].y) - _255)) + _255;
    float _343 = (_334 * ((_275.z * cbMtdParam._m0[11u].z) - _256)) + _256;
    vec4 _362 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _392 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _322)) + 1.0;
    float _3519 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _400 = (_393 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _401 = (_393 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _402 = (_393 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    vec4 _419 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _444 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _322)) + 1.0;
    float _3530 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _452 = (_445 * ((_419.x * cbMtdParam._m0[13u].x) - _400)) + _400;
    float _453 = (_445 * ((_419.y * cbMtdParam._m0[13u].y) - _401)) + _401;
    float _454 = (_445 * ((_419.z * cbMtdParam._m0[13u].z) - _402)) + _402;
    vec4 _475 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _504 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3541 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _512 = (_505 * ((_475.x * cbMtdParam._m0[14u].x) - _452)) + _452;
    float _513 = (_505 * ((_475.y * cbMtdParam._m0[14u].y) - _453)) + _453;
    float _514 = (_505 * ((_475.z * cbMtdParam._m0[14u].z) - _454)) + _454;
    vec4 _530 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _552 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _570 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _572 = _570.x;
    float _573 = _570.y;
    float _576 = cbMtdParam._m0[16u].w * _570.z;
    float _579 = (((cbMtdParam._m0[17u].x * _552.z) - _576) * _334) + _576;
    vec4 _592 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _601 = (((cbMtdParam._m0[17u].y * _592.z) - _579) * _393) + _579;
    vec4 _614 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _623 = (((cbMtdParam._m0[17u].z * _614.z) - _601) * _445) + _601;
    float _628 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_530.z * cbMtdParam._m0[16u].z) - _623)) + _623;
    float _633 = ((_552.x - _572) * _334) + _572;
    float _634 = ((_552.y - _573) * _334) + _573;
    float _639 = ((_592.x - _633) * _393) + _633;
    float _640 = ((_592.y - _634) * _393) + _634;
    float _649 = ((((_614.x - _639) * _445) + _639) * 2.0) + (-1.0);
    float _650 = ((((_614.y - _640) * _445) + _640) * 2.0) + (-1.0);
    float _651 = dot(vec2(_649, _650), vec2(_649, _650));
    float _3552 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _656 = sqrt(1.0 - (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))));
    float _662 = ((((_530.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _649;
    float _663 = ((((_530.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _650;
    float _666 = fma(_656, _218 * NORMAL.x, fma(_663, _225 * TANGENT.x, (_211 * _203) * _662));
    float _669 = fma(_656, _218 * NORMAL.y, fma(_663, _225 * TANGENT.y, (_211 * _204) * _662));
    float _672 = fma(_656, _218 * NORMAL.z, fma(_663, _225 * TANGENT.z, (_211 * _205) * _662));
    float _676 = inversesqrt(dot(vec3(_666, _669, _672), vec3(_666, _669, _672)));
    float _677 = _676 * _666;
    float _678 = _676 * _669;
    float _679 = _676 * _672;
    float _3563 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _680 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _3574 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _3585 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _3596 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _699 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _749 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _739);
    float _750 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _739);
    float _751 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _739);
    float _755 = inversesqrt(dot(vec3(_749, _750, _751), vec3(_749, _750, _751)));
    float _756 = _749 * _755;
    float _757 = _750 * _755;
    float _758 = _751 * _755;
    float _764 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _765 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _783 = fma(_679, cbSceneParam._m0[5u].z, fma(_678, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _677));
    float _786 = fma(_679, cbSceneParam._m0[6u].z, fma(_678, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _677));
    float _789 = fma(_679, cbSceneParam._m0[7u].z, fma(_678, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _677));
    uint _802 = uint(roundEven(NORMAL.w)) * 13u;
    uint _804 = (_802 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _810 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0)))) * cbInstanceData._m0[_804].x;
    float _811 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0)))) * cbInstanceData._m0[_804].y;
    float _812 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) * cbInstanceData._m0[_804].z;
    float _3607 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _813 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _3618 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _814 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _3629 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    vec4 _824 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _764, cbSceneParam._m0[86u].y * _765));
    float _827 = _824.x * TEXCOORD_5.w;
    float _828 = dot(vec3(_677, _678, _679), vec3(_756, _757, _758));
    float _831 = _828 * 2.0;
    float _835 = (_831 * _677) - _756;
    float _836 = (_831 * _678) - _757;
    float _837 = (_831 * _679) - _758;
    float _841 = abs(dot(vec3(_756, _757, _758), vec3(_677, _678, _679)));
    float _3640 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _843 = sqrt(_680);
    float _856 = exp2((_843 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_843 * 3.0));
    float _888 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _892 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1198;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _923 = fma(_896, cbModelParam._m0[26u].z, fma(_892, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _888));
        float _927 = fma(_896, cbModelParam._m0[27u].z, fma(_892, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _888));
        float _931 = fma(_896, cbModelParam._m0[28u].z, fma(_892, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _888));
        float _956 = _888 + _677;
        float _957 = _892 + _678;
        float _958 = _896 + _679;
        float _968 = fma(_958, cbModelParam._m0[26u].z, fma(_957, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _956)) - _923;
        float _969 = fma(_958, cbModelParam._m0[27u].z, fma(_957, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _956)) - _927;
        float _970 = fma(_958, cbModelParam._m0[28u].z, fma(_957, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _956)) - _931;
        float _974 = inversesqrt(dot(vec3(_968, _969, _970), vec3(_968, _969, _970)));
        float _987 = ((_974 * _968) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_923 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_974 * _969) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_927 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _989 = ((_974 * _970) / cbModelParam._m0[34u].z) + ((((((_931 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        float _1026 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_992.x + (-0.5));
        float _1028 = _1026 * (_992.y + (-0.5));
        float _1029 = _1026 * (_992.z + (-0.5));
        float _1036 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_999.x + (-0.5));
        float _1038 = _1036 * (_999.y + (-0.5));
        float _1039 = _1036 * (_999.z + (-0.5));
        float _1046 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1006.x + (-0.5));
        float _1048 = _1046 * (_1006.y + (-0.5));
        float _1049 = _1046 * (_1006.z + (-0.5));
        float _1056 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1013.x + (-0.5));
        float _1058 = _1056 * (_1013.y + (-0.5));
        float _1059 = _1056 * (_1013.z + (-0.5));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = _1027 * 0.5;
        float _1064 = _1037 * 0.5;
        float _1065 = _1047 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1080 = (dot(vec3(_677, _678, _679), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1090 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3688 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1092 + 1.0))) + _1097) * _1060;
        float _1107 = _1028 * 0.5;
        float _1108 = _1038 * 0.5;
        float _1109 = _1048 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_677, _678, _679), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3721 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_1134 + 1.0))) + _1139) * _1061;
        float _1149 = _1029 * 0.5;
        float _1150 = _1039 * 0.5;
        float _1151 = _1049 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_677, _678, _679), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3754 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1176 + 1.0))) + _1181) * _1062;
        _1198 = _1029;
        _1200 = _1028;
        _1201 = _1027;
        _1202 = _1039;
        _1203 = _1038;
        _1204 = _1037;
        _1205 = _1049;
        _1206 = _1048;
        _1207 = _1047;
        _1208 = _1062;
        _1209 = _1061;
        _1210 = _1060;
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1212 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1213 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
    }
    else
    {
        _1198 = _1199;
        _1200 = _1199;
        _1201 = _1199;
        _1202 = _1199;
        _1203 = _1199;
        _1204 = _1199;
        _1205 = _1199;
        _1206 = _1199;
        _1207 = _1199;
        _1208 = _1199;
        _1209 = _1199;
        _1210 = _1199;
        _1211 = 0.0;
        _1212 = 0.0;
        _1213 = 0.0;
    }
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1239 = fma(_896, cbModelParam._m0[30u].z, fma(_892, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _888));
        float _1243 = fma(_896, cbModelParam._m0[31u].z, fma(_892, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _888));
        float _1247 = fma(_896, cbModelParam._m0[32u].z, fma(_892, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _888));
        float _1270 = _888 + _677;
        float _1271 = _892 + _678;
        float _1272 = _896 + _679;
        float _1282 = fma(_1272, cbModelParam._m0[30u].z, fma(_1271, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1270)) - _1239;
        float _1283 = fma(_1272, cbModelParam._m0[31u].z, fma(_1271, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1270)) - _1243;
        float _1284 = fma(_1272, cbModelParam._m0[32u].z, fma(_1271, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1270)) - _1247;
        float _1288 = inversesqrt(dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284)));
        float _1301 = ((_1288 * _1282) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1239 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1302 = ((_1288 * _1283) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1243 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1303 = ((_1288 * _1284) / cbModelParam._m0[35u].z) + ((((((_1247 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1301, _1302, _1303), 0.0);
        float _1338 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1305.x + (-0.5));
        float _1340 = _1338 * (_1305.y + (-0.5));
        float _1341 = _1338 * (_1305.z + (-0.5));
        float _1348 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1312.x + (-0.5));
        float _1350 = _1348 * (_1312.y + (-0.5));
        float _1351 = _1348 * (_1312.z + (-0.5));
        float _1358 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1319.x + (-0.5));
        float _1360 = _1358 * (_1319.y + (-0.5));
        float _1361 = _1358 * (_1319.z + (-0.5));
        float _1368 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1326.x + (-0.5));
        float _1370 = _1368 * (_1326.y + (-0.5));
        float _1371 = _1368 * (_1326.z + (-0.5));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = _1339 * 0.5;
        float _1376 = _1349 * 0.5;
        float _1377 = _1359 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_677, _678, _679), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _3817 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1402 + 1.0))) + _1407) * _1372;
        float _1417 = _1340 * 0.5;
        float _1418 = _1350 * 0.5;
        float _1419 = _1360 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_677, _678, _679), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _3850 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1444 + 1.0))) + _1449) * _1373;
        float _1459 = _1341 * 0.5;
        float _1460 = _1351 * 0.5;
        float _1461 = _1361 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_677, _678, _679), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _3883 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1486 + 1.0))) + _1491) * _1374;
        _1508 = _1341;
        _1509 = _1340;
        _1510 = _1339;
        _1511 = _1351;
        _1512 = _1350;
        _1513 = _1349;
        _1514 = _1361;
        _1515 = _1360;
        _1516 = _1359;
        _1517 = _1374;
        _1518 = _1373;
        _1519 = _1372;
        _1520 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
        _1521 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
        _1522 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
    }
    else
    {
        _1508 = _1199;
        _1509 = _1199;
        _1510 = _1199;
        _1511 = _1199;
        _1512 = _1199;
        _1513 = _1199;
        _1514 = _1199;
        _1515 = _1199;
        _1516 = _1199;
        _1517 = _1199;
        _1518 = _1199;
        _1519 = _1199;
        _1520 = 0.0;
        _1521 = 0.0;
        _1522 = 0.0;
    }
    float _1532 = (cbModelParam._m0[1u].x * (_1520 - _1211)) + _1211;
    float _1533 = (cbModelParam._m0[1u].x * (_1521 - _1212)) + _1212;
    float _1534 = (cbModelParam._m0[1u].x * (_1522 - _1213)) + _1213;
    float _1555 = fma(_1534, cbSceneParam._m0[89u].z, fma(_1533, cbSceneParam._m0[89u].y, _1532 * cbSceneParam._m0[89u].x));
    float _1558 = fma(_1534, cbSceneParam._m0[90u].z, fma(_1533, cbSceneParam._m0[90u].y, _1532 * cbSceneParam._m0[90u].x));
    float _1561 = fma(_1534, cbSceneParam._m0[91u].z, fma(_1533, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1532));
    float _1576 = _835 * 0.5;
    float _1577 = _836 * 0.5;
    float _1578 = _837 * 0.5;
    float _1579 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1510, _1513, _1516, _1519));
    float _1582 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1509, _1512, _1515, _1518));
    float _1585 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1508, _1511, _1514, _1517));
    float _1619;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1592 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1198, _1202, _1205, _1208));
        float _1596 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1200, _1203, _1206, _1209));
        float _1600 = dot(vec4(_1576, _1577, _1578, 1.0), vec4(_1201, _1204, _1207, _1210));
        float _1607 = dot(vec4(cbModelParam._m0[39u]), vec4(_1576, _1577, _1578, 1.0));
        _1619 = dot(vec3(isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)), isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1607) ? 0.0 : (isnan(0.0) ? _1607 : max(0.0, _1607))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1619 = 1.0;
    }
    float _1630;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1621 = dot(vec4(cbModelParam._m0[40u]), vec4(_1576, _1577, _1578, 1.0));
        _1630 = dot(vec3(isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1621) ? 0.0 : (isnan(0.0) ? _1621 : max(0.0, _1621))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1630 = 1.0;
    }
    float _1634 = (_1630 * cbModelParam._m0[1u].x) + (_1619 * (1.0 - cbModelParam._m0[1u].x));
    float _1644 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _680);
    float _1645 = isnan(_1644) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1644 : min(cbModelParam._m0[25u].z, _1644));
    float _1725;
    float _1727;
    float _1729;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1692 = fma(_896, cbModelParam._m0[13u].z, fma(_892, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _888)) + cbModelParam._m0[13u].w;
        float _1696 = fma(_896, cbModelParam._m0[14u].z, fma(_892, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _888)) + cbModelParam._m0[14u].w;
        float _1700 = fma(_896, cbModelParam._m0[15u].z, fma(_892, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _888)) + cbModelParam._m0[15u].w;
        float _1703 = fma(_837, cbModelParam._m0[13u].z, fma(_836, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _835));
        float _1706 = fma(_837, cbModelParam._m0[14u].z, fma(_836, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _835));
        float _1709 = fma(_837, cbModelParam._m0[15u].z, fma(_836, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _835));
        float _1737;
        if (_1703 > 0.0)
        {
            _1737 = abs((1.0 - _1692) / _1703);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1692 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1737 = frontier_phi_14_12_ladder;
        }
        float _1940;
        if (_1706 > 0.0)
        {
            _1940 = abs((1.0 - _1696) / _1706);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1696 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1940 = frontier_phi_23_19_ladder;
        }
        float _2183;
        if (_1709 > 0.0)
        {
            _2183 = abs((1.0 - _1700) / _1709);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1700 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2183 = frontier_phi_35_30_ladder;
        }
        float _2185 = isnan(_1940) ? _1737 : (isnan(_1737) ? _1940 : min(_1737, _1940));
        float _2186 = isnan(_2183) ? _2185 : (isnan(_2185) ? _2183 : min(_2185, _2183));
        float _2190 = (_2186 * _1703) + _1692;
        float _2191 = (_2186 * _1706) + _1696;
        float _2192 = (_2186 * _1709) + _1700;
        float _2193 = _2186 * 9.9999997473787516355514526367188e-05;
        float _2195 = (-1.0) - _2193;
        float _2197 = _2193 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2192 > _2197) || ((_2192 < _2195) || ((_2191 > _2197) || ((_2191 < _2195) || ((_2190 < _2195) || (_2190 > _2197))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2316 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2192, cbModelParam._m0[9u].z, fma(_2191, cbModelParam._m0[9u].y, _2190 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2192, cbModelParam._m0[10u].z, fma(_2191, cbModelParam._m0[10u].y, _2190 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2192, cbModelParam._m0[11u].z, fma(_2191, cbModelParam._m0[11u].y, _2190 * cbModelParam._m0[11u].x))), _1645);
            frontier_phi_13_35_ladder = _2316.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2316.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2316.x * cbModelParam._m0[1u].y;
        }
        _1725 = frontier_phi_13_35_ladder_2;
        _1727 = frontier_phi_13_35_ladder_1;
        _1729 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1713 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_835, _836, _837), _1645);
        _1725 = _1713.x * cbModelParam._m0[1u].y;
        _1727 = _1713.y * cbModelParam._m0[1u].y;
        _1729 = _1713.z * cbModelParam._m0[1u].y;
    }
    float _1733 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _680);
    float _1734 = isnan(_1733) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1733 : min(cbModelParam._m0[25u].w, _1733));
    float _1825;
    float _1827;
    float _1829;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1789 = fma(_896, cbModelParam._m0[21u].z, fma(_892, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _888)) + cbModelParam._m0[21u].w;
        float _1793 = fma(_896, cbModelParam._m0[22u].z, fma(_892, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _888)) + cbModelParam._m0[22u].w;
        float _1797 = fma(_896, cbModelParam._m0[23u].z, fma(_892, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _888)) + cbModelParam._m0[23u].w;
        float _1800 = fma(_837, cbModelParam._m0[21u].z, fma(_836, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _835));
        float _1803 = fma(_837, cbModelParam._m0[22u].z, fma(_836, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _835));
        float _1806 = fma(_837, cbModelParam._m0[23u].z, fma(_836, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _835));
        float _1945;
        if (_1800 > 0.0)
        {
            _1945 = abs((1.0 - _1789) / _1800);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1789 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1945 = frontier_phi_25_21_ladder;
        }
        float _2210;
        if (_1803 > 0.0)
        {
            _2210 = abs((1.0 - _1793) / _1803);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1793 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2210 = frontier_phi_37_32_ladder;
        }
        float _2415;
        if (_1806 > 0.0)
        {
            _2415 = abs((1.0 - _1797) / _1806);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1797 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2415 = frontier_phi_46_43_ladder;
        }
        float _2417 = isnan(_2210) ? _1945 : (isnan(_1945) ? _2210 : min(_1945, _2210));
        float _2418 = isnan(_2415) ? _2417 : (isnan(_2417) ? _2415 : min(_2417, _2415));
        float _2422 = (_2418 * _1800) + _1789;
        float _2423 = (_2418 * _1803) + _1793;
        float _2424 = (_2418 * _1806) + _1797;
        float _2425 = _2418 * 9.9999997473787516355514526367188e-05;
        float _2426 = (-1.0) - _2425;
        float _2428 = _2425 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2424 > _2428) || ((_2424 < _2426) || ((_2423 > _2428) || ((_2423 < _2426) || ((_2422 < _2426) || (_2422 > _2428))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2623 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2424, cbModelParam._m0[17u].z, fma(_2423, cbModelParam._m0[17u].y, _2422 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2424, cbModelParam._m0[18u].z, fma(_2423, cbModelParam._m0[18u].y, _2422 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2424, cbModelParam._m0[19u].z, fma(_2423, cbModelParam._m0[19u].y, _2422 * cbModelParam._m0[19u].x))), _1734);
            frontier_phi_22_46_ladder = _2623.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2623.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2623.x * cbModelParam._m0[1u].z;
        }
        _1825 = frontier_phi_22_46_ladder_2;
        _1827 = frontier_phi_22_46_ladder_1;
        _1829 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1809 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_835, _836, _837), _1734);
        _1825 = _1809.x * cbModelParam._m0[1u].z;
        _1827 = _1809.y * cbModelParam._m0[1u].z;
        _1829 = _1809.z * cbModelParam._m0[1u].z;
    }
    float _1841 = ((((1.0 - _856) * ((_843 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_856 * _843)) * _827;
    float _1842 = _1841 * ((cbModelParam._m0[1u].w * (_1825 - _1725)) + _1725);
    float _1843 = _1841 * ((cbModelParam._m0[1u].w * (_1827 - _1727)) + _1727);
    float _1844 = _1841 * ((cbModelParam._m0[1u].w * (_1829 - _1729)) + _1729);
    float _1847 = fma(_1844, cbSceneParam._m0[89u].z, fma(_1843, cbSceneParam._m0[89u].y, _1842 * cbSceneParam._m0[89u].x));
    float _1850 = fma(_1844, cbSceneParam._m0[90u].z, fma(_1843, cbSceneParam._m0[90u].y, _1842 * cbSceneParam._m0[90u].x));
    float _1853 = fma(_1844, cbSceneParam._m0[91u].z, fma(_1843, cbSceneParam._m0[91u].y, _1842 * cbSceneParam._m0[91u].x));
    uvec4 _1863 = floatBitsToUint(cbInstanceData._m0[_802 + 5u]);
    uint _1865 = _1863.x * 14u;
    uint _1866 = _1865 + 13u;
    float _1873 = _827 + (-1.0);
    float _1878 = (cbLight._m0[_1866].x * _1873) + 1.0;
    float _1879 = (cbLight._m0[_1866].y * _1873) + 1.0;
    float _1880 = (cbLight._m0[_1866].z * _1873) + 1.0;
    float _1881 = (cbLight._m0[_1866].w * _1873) + 1.0;
    uint _1882 = _1865 + 5u;
    float _1888 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
    uint _1892 = _1865 + 4u;
    float _1899 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
    uint _1903 = _1865 | 1u;
    float _1914 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_677, _678, _679));
    float _1917 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_677, _678, _679));
    float _4019 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _4030 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1922 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * 0.3183098733425140380859375;
    float _1924 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * 0.3183098733425140380859375;
    float _1931 = ((cbLight._m0[_1882].x * _1888) * _1924) + ((cbLight._m0[_1892].x * _1899) * _1922);
    float _1932 = ((_1888 * cbLight._m0[_1882].y) * _1924) + ((_1899 * cbLight._m0[_1892].y) * _1922);
    float _1933 = ((_1888 * cbLight._m0[_1882].z) * _1924) + ((_1899 * cbLight._m0[_1892].z) * _1922);
    uvec4 _1937 = floatBitsToUint(cbLight._m0[_1865 + 12u]);
    bool _1939 = _1937.x == 0u;
    float _1950;
    float _1952;
    float _1954;
    if (_1939)
    {
        _1950 = _1931;
        _1952 = _1932;
        _1954 = _1933;
    }
    else
    {
        uint _1958 = _1865 + 6u;
        float _1974 = (dot(vec3(cbLight._m0[_1865 + 2u].xyz), vec3(_677, _678, _679)) * 0.5) + 0.5;
        float _1975 = _1974 * _1974;
        float _4041 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1976 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1977 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
        _1950 = (((cbLight._m0[_1958].x * 0.3183098733425140380859375) * _1976) * _1977) + _1931;
        _1952 = (((cbLight._m0[_1958].y * 0.3183098733425140380859375) * _1976) * _1977) + _1932;
        _1954 = (((cbLight._m0[_1958].z * 0.3183098733425140380859375) * _1976) * _1977) + _1933;
    }
    bool _1957 = _1937.y == 0u;
    float _1995;
    float _1997;
    float _1999;
    if (_1957)
    {
        _1995 = _1950;
        _1997 = _1952;
        _1999 = _1954;
    }
    else
    {
        uint _2154 = _1865 + 7u;
        float _2170 = (dot(vec3(cbLight._m0[_1865 + 3u].xyz), vec3(_677, _678, _679)) * 0.5) + 0.5;
        float _2171 = _2170 * _2170;
        float _4057 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2172 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _2173 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
        _1995 = (((cbLight._m0[_2154].x * 0.3183098733425140380859375) * _2172) * _2173) + _1950;
        _1997 = (((cbLight._m0[_2154].y * 0.3183098733425140380859375) * _2172) * _2173) + _1952;
        _1999 = (((cbLight._m0[_2154].z * 0.3183098733425140380859375) * _2172) * _2173) + _1954;
    }
    uint _2002 = _1865 + 8u;
    float _2015 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1865].w)) * _680) * 0.949999988079071044921875);
    float _2016 = _2015 * _2015;
    float _2017 = cbLight._m0[_1865].x + _756;
    float _2018 = cbLight._m0[_1865].y + _757;
    float _2019 = cbLight._m0[_1865].z + _758;
    float _2023 = inversesqrt(dot(vec3(_2017, _2018, _2019), vec3(_2017, _2018, _2019)));
    float _2024 = _2023 * _2017;
    float _2025 = _2023 * _2018;
    float _2026 = _2023 * _2019;
    float _2027 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_1865].xyz));
    float _4073 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2030 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _4084 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _2031 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _2032 = dot(vec3(_677, _678, _679), vec3(_2024, _2025, _2026));
    float _4095 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2035 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _2036 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_2024, _2025, _2026));
    float _4106 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2040 = _2016 * _2016;
    float _2044 = ((_2035 * _2035) * (_2040 + (-1.0))) + 1.0;
    float _2055 = (exp2(log2(1.0 - (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2056 = 1.0 - _2016;
    float _2067 = (0.5 / (((_2031 * ((_2030 * _2056) + _2016)) + 9.9999999392252902907785028219223e-09) + (((_2031 * _2056) + _2016) * _2030))) * _2030;
    float _4117 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2069 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_2040 / ((_2044 * _2044) * 3.141590118408203125));
    uint _2080 = _1865 + 9u;
    float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1903].w)) * _680) * 0.949999988079071044921875);
    float _2092 = _2091 * _2091;
    float _2093 = cbLight._m0[_1903].x + _756;
    float _2094 = cbLight._m0[_1903].y + _757;
    float _2095 = cbLight._m0[_1903].z + _758;
    float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
    float _2100 = _2099 * _2093;
    float _2101 = _2099 * _2094;
    float _2102 = _2099 * _2095;
    float _2103 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_1903].xyz));
    float _4128 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _2107 = dot(vec3(_677, _678, _679), vec3(_2100, _2101, _2102));
    float _4139 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _2111 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_2100, _2101, _2102));
    float _4150 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2115 = _2092 * _2092;
    float _2119 = ((_2110 * _2110) * (_2115 + (-1.0))) + 1.0;
    float _2128 = (exp2(log2(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2129 = 1.0 - _2092;
    float _2139 = (0.5 / (((_2031 * ((_2106 * _2129) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_2031 * _2129) + _2092) * _2106))) * _2106;
    float _4161 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2141 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2115 / ((_2119 * _2119) * 3.141590118408203125));
    float _2151 = (((_2128 * cbLight._m0[_2080].x) * _2141) * _1888) + (((_2055 * cbLight._m0[_2002].x) * _2069) * _1899);
    float _2152 = (((_2128 * cbLight._m0[_2080].y) * _2141) * _1888) + (((_2055 * cbLight._m0[_2002].y) * _2069) * _1899);
    float _2153 = (((_2128 * cbLight._m0[_2080].z) * _2141) * _1888) + (((_2055 * cbLight._m0[_2002].z) * _2069) * _1899);
    float _2215;
    float _2217;
    float _2219;
    if (_1939)
    {
        _2215 = _2151;
        _2217 = _2152;
        _2219 = _2153;
    }
    else
    {
        uint _2221 = _1865 + 2u;
        uint _2225 = _1865 + 10u;
        float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2221].w)) * _680) * 0.949999988079071044921875);
        float _2240 = _2239 * _2239;
        float _2241 = cbLight._m0[_2221].x + _756;
        float _2242 = cbLight._m0[_2221].y + _757;
        float _2243 = cbLight._m0[_2221].z + _758;
        float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
        float _2248 = _2247 * _2241;
        float _2249 = _2247 * _2242;
        float _2250 = _2247 * _2243;
        float _2251 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2221].xyz));
        float _4172 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2254 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _2255 = dot(vec3(_677, _678, _679), vec3(_2248, _2249, _2250));
        float _4183 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2258 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _2259 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_2248, _2249, _2250));
        float _4194 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2263 = _2240 * _2240;
        float _2267 = ((_2258 * _2258) * (_2263 + (-1.0))) + 1.0;
        float _2276 = (exp2(log2(1.0 - (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2277 = 1.0 - _2240;
        float _2287 = (0.5 / (((_2031 * ((_2254 * _2277) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_2031 * _2277) + _2240) * _2254))) * _2254;
        float _4205 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2289 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_2263 / ((_2267 * _2267) * 3.141590118408203125));
        float _2290 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
        _2215 = (((_2276 * cbLight._m0[_2225].x) * _2289) * _2290) + _2151;
        _2217 = (((_2276 * cbLight._m0[_2225].y) * _2289) * _2290) + _2152;
        _2219 = (((_2276 * cbLight._m0[_2225].z) * _2289) * _2290) + _2153;
    }
    float _2325;
    float _2327;
    float _2329;
    if (_1957)
    {
        _2325 = _2215;
        _2327 = _2217;
        _2329 = _2219;
    }
    else
    {
        uint _2336 = _1865 + 3u;
        uint _2340 = _1865 + 11u;
        float _2354 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2336].w)) * _680) * 0.949999988079071044921875);
        float _2355 = _2354 * _2354;
        float _2356 = cbLight._m0[_2336].x + _756;
        float _2357 = cbLight._m0[_2336].y + _757;
        float _2358 = cbLight._m0[_2336].z + _758;
        float _2362 = inversesqrt(dot(vec3(_2356, _2357, _2358), vec3(_2356, _2357, _2358)));
        float _2363 = _2362 * _2356;
        float _2364 = _2362 * _2357;
        float _2365 = _2362 * _2358;
        float _2366 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2336].xyz));
        float _4221 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2369 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _2370 = dot(vec3(_677, _678, _679), vec3(_2363, _2364, _2365));
        float _4232 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2373 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2374 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_2363, _2364, _2365));
        float _4243 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2378 = _2355 * _2355;
        float _2382 = ((_2373 * _2373) * (_2378 + (-1.0))) + 1.0;
        float _2391 = (exp2(log2(1.0 - (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2392 = 1.0 - _2355;
        float _2402 = (0.5 / (((_2031 * ((_2369 * _2392) + _2355)) + 9.9999999392252902907785028219223e-09) + (((_2031 * _2392) + _2355) * _2369))) * _2369;
        float _4254 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2404 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2378 / ((_2382 * _2382) * 3.141590118408203125));
        float _2405 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
        _2325 = (((_2391 * cbLight._m0[_2340].x) * _2404) * _2405) + _2215;
        _2327 = (((_2391 * cbLight._m0[_2340].y) * _2404) * _2405) + _2217;
        _2329 = (((_2391 * cbLight._m0[_2340].z) * _2404) * _2405) + _2219;
    }
    float _2540;
    float _2542;
    float _2544;
    float _2546;
    float _2548;
    float _2550;
    if (_1863.y == 0u)
    {
        float _2480 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2481 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2480;
        float _2482 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2480;
        float _2483 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2480;
        uvec4 _2495 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2496 = _2495.x;
        uint _2507 = uint((float(_2495.y) * floor(float(uint(cbSceneParam._m0[85u].y * _765) / _2496))) + floor(float(uint(cbSceneParam._m0[85u].x * _764) / _2496)));
        float _2517 = (log2(_2483 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2518 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        uint _2521 = uint(isnan(14.0) ? _2518 : (isnan(_2518) ? 14.0 : min(_2518, 14.0)));
        uvec4 _2526 = texelFetch(g_lightClusterGridBuffer, int(((_2521 << 2u) + (_2507 << 6u)) >> 2u));
        uint _2527 = _2526.x;
        uint _2528 = _2495.z;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        if (((((1u << ((_2528 >> 4u) & 15u)) + 4294967295u) & _2527) == 0u) || ((_2528 & 240u) == 0u))
        {
            _2628 = 0.0;
            _2630 = 0.0;
            _2632 = 0.0;
            _2634 = 0.0;
            _2636 = 0.0;
            _2638 = 0.0;
        }
        else
        {
            float _2629;
            float _2631;
            float _2633;
            float _2635;
            float _2637;
            float _2639;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            float _2777 = 0.0;
            float _2778 = 0.0;
            uint _2779 = 0u;
            uint _2788;
            bool _2789;
            for (;;)
            {
                _2788 = texelFetch(g_lightClassification, int((((_2521 << 5u) + (_2507 << 9u)) + (_2779 << 2u)) >> 2u)).x;
                _2789 = _2788 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2789)
                {
                    frontier_phi_61_pred = _2773;
                    frontier_phi_61_pred_1 = _2778;
                    frontier_phi_61_pred_2 = _2777;
                    frontier_phi_61_pred_3 = _2776;
                    frontier_phi_61_pred_4 = _2775;
                    frontier_phi_61_pred_5 = _2774;
                }
                else
                {
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    uint _2903;
                    _2897 = _2773;
                    _2898 = _2774;
                    _2899 = _2775;
                    _2900 = _2776;
                    _2901 = _2777;
                    _2902 = _2778;
                    _2903 = _2788;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    for (;;)
                    {
                        uint _2907 = uint(findLSB(_2903)) + (_2779 << 5u);
                        uint _2904 = (_2903 + 4294967295u) & _2903;
                        uint _2909 = _2907 * 48u;
                        vec4 _2923 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2909)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 3u)).x));
                        uint _2929 = (_2907 * 48u) + 4u;
                        vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2929)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2929 + 3u)).x));
                        uint _2948 = (_2907 * 48u) + 8u;
                        vec3 _2959 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2948)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 2u)).x));
                        float _2963 = _2923.x - _2481;
                        float _2964 = _2923.y - _2482;
                        float _2965 = _2923.z - _2483;
                        float _2966 = dot(vec3(_2963, _2964, _2965), vec3(_2963, _2964, _2965));
                        float _2969 = inversesqrt(_2966);
                        float _2970 = _2969 * _2963;
                        float _2971 = _2969 * _2964;
                        float _2972 = _2969 * _2965;
                        float _2973 = dot(vec3(_783, _786, _789), vec3(_2970, _2971, _2972));
                        float _2978 = 1.0 - (_2966 * _2923.w);
                        float _4280 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                        float _2979 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                        float _2980 = sqrt(_2966) * _2942.w;
                        float _2983 = 1.39999997615814208984375 / (_2980 + 1.39999997615814208984375);
                        float _2984 = _2983 * _2983;
                        float _2987 = ((1.0 - _2984) * _2973) + _2984;
                        float _2990 = _2980 * _2980;
                        float _2994 = ((isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0))) * _2979) / ((_2990 * 0.699999988079071044921875) + 1.0);
                        float _2998 = (-0.0) - _2481;
                        float _2999 = (-0.0) - _2482;
                        float _3000 = (-0.0) - _2483;
                        float _3004 = inversesqrt(dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000)));
                        float _3005 = _3004 * _2998;
                        float _3006 = _3004 * _2999;
                        float _3007 = _3004 * _3000;
                        float _3015 = exp2(log2(1.0 / ((_2990 * 3.5) + 5.0)) * 0.25);
                        float _3016 = 1.0 - _843;
                        float _3023 = sqrt(1.0 - ((1.0 - (_3016 * _3016)) * (1.0 - (_3015 * _3015))));
                        float _3024 = _3023 * _3023;
                        float _3025 = _3024 * _3024;
                        float _3026 = _3005 + _2970;
                        float _3027 = _3006 + _2971;
                        float _3028 = _3007 + _2972;
                        float _3032 = inversesqrt(dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028)));
                        float _3036 = dot(vec3(_783, _786, _789), vec3(_3005, _3006, _3007));
                        float _4296 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3039 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                        float _3040 = dot(vec3(_783, _786, _789), vec3(_3032 * _3026, _3032 * _3027, _3032 * _3028));
                        float _4307 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3043 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                        float _3047 = ((_3043 * _3043) * (_3025 + (-1.0))) + 1.0;
                        float _3048 = _2983 * _3024;
                        float _3049 = _3048 * _3048;
                        float _3052 = ((1.0 - _3049) * _2973) + _3049;
                        float _4318 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3053 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _3054 = 1.0 - _3024;
                        float _3064 = (0.5 / (((_3053 * ((_3039 * _3054) + _3024)) + 9.9999999392252902907785028219223e-09) + (((_3053 * _3054) + _3024) * _3039))) * _3053;
                        float _4329 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3075 = (((_3025 * 3.1415927410125732421875) * (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) / ((_3047 * _3047) * ((_2990 * 2.1991131305694580078125) + 3.141590118408203125))) * _2979;
                        _2832 = (_2994 * _2942.x) + _2900;
                        _2833 = (_2994 * _2942.y) + _2901;
                        _2834 = (_2994 * _2942.z) + _2902;
                        _2829 = (_3075 * _2959.x) + _2897;
                        _2830 = (_3075 * _2959.y) + _2898;
                        _2831 = (_3075 * _2959.z) + _2899;
                        if (_2904 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2897 = _2829;
                            _2898 = _2830;
                            _2899 = _2831;
                            _2900 = _2832;
                            _2901 = _2833;
                            _2902 = _2834;
                            _2903 = _2904;
                        }
                    }
                    frontier_phi_61_pred = _2829;
                    frontier_phi_61_pred_1 = _2834;
                    frontier_phi_61_pred_2 = _2833;
                    frontier_phi_61_pred_3 = _2832;
                    frontier_phi_61_pred_4 = _2831;
                    frontier_phi_61_pred_5 = _2830;
                }
                _2629 = frontier_phi_61_pred;
                _2639 = frontier_phi_61_pred_1;
                _2637 = frontier_phi_61_pred_2;
                _2635 = frontier_phi_61_pred_3;
                _2633 = frontier_phi_61_pred_4;
                _2631 = frontier_phi_61_pred_5;
                uint _2780 = _2779 + 1u;
                if (_2780 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2773 = _2629;
                    _2774 = _2631;
                    _2775 = _2633;
                    _2776 = _2635;
                    _2777 = _2637;
                    _2778 = _2639;
                    _2779 = _2780;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2628 = _2629;
            _2630 = _2631;
            _2632 = _2633;
            _2634 = _2635;
            _2636 = _2637;
            _2638 = _2639;
        }
        uvec4 _2642 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2643 = _2642.z;
        uint _2645 = (_2643 >> 8u) & 15u;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        if (((4294967295u << _2645) & _2527) == 0u)
        {
            _2741 = _2628;
            _2743 = _2630;
            _2745 = _2632;
            _2747 = _2634;
            _2749 = _2636;
            _2751 = _2638;
        }
        else
        {
            float _2766 = inversesqrt(dot(vec3(_2481, _2482, _2483), vec3(_2481, _2482, _2483)));
            float _2767 = _2766 * _2481;
            float _2768 = _2766 * _2482;
            float _2769 = _2766 * _2483;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2645 < ((_2643 >> 12u) & 15u))
            {
                float _2742;
                float _2744;
                float _2746;
                float _2748;
                float _2750;
                float _2752;
                float _2880 = _2628;
                float _2881 = _2630;
                float _2882 = _2632;
                float _2883 = _2634;
                float _2884 = _2636;
                float _2885 = _2638;
                uint _2886 = _2645;
                uint _2895;
                bool _2896;
                for (;;)
                {
                    _2895 = texelFetch(g_lightClassification, int((((_2521 << 5u) + (_2507 << 9u)) + (_2886 << 2u)) >> 2u)).x;
                    _2896 = _2895 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2896)
                    {
                        frontier_phi_67_pred = _2883;
                        frontier_phi_67_pred_1 = _2884;
                        frontier_phi_67_pred_2 = _2885;
                        frontier_phi_67_pred_3 = _2882;
                        frontier_phi_67_pred_4 = _2881;
                        frontier_phi_67_pred_5 = _2880;
                    }
                    else
                    {
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3093 = _2880;
                        float _3094 = _2881;
                        float _3095 = _2882;
                        float _3096 = _2883;
                        float _3097 = _2884;
                        float _3098 = _2885;
                        uint _3099 = _2895;
                        uint _3100;
                        vec4 _3125;
                        float _3126;
                        vec4 _3141;
                        vec3 _3153;
                        vec4 _3168;
                        vec4 _3183;
                        float _3230;
                        bool _3231;
                        for (;;)
                        {
                            uint _3110 = ((_2886 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3099));
                            _3100 = (_3099 + 4294967295u) & _3099;
                            uint _3112 = _3110 * 40u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            _3126 = _3125.w;
                            uint _3128 = (_3110 * 40u) + 4u;
                            _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            uint _3143 = (_3110 * 40u) + 8u;
                            _3153 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x));
                            uint _3155 = (_3110 * 40u) + 16u;
                            _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            uint _3170 = (_3110 * 40u) + 20u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            uint _3186 = (_3110 * 40u) + 24u;
                            vec4 _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3205 = (_3110 * 40u) + 28u;
                            vec4 _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            _3230 = fma(_2483, _3218.z, fma(_2482, _3218.y, _3218.x * _2481)) + _3218.w;
                            _3231 = !((fma(_2483, _3199.z, fma(_2482, _3199.y, _3199.x * _2481)) + _3199.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3231)
                            {
                                float _3258 = _3125.x - _2481;
                                float _3259 = _3125.y - _2482;
                                float _3260 = _3125.z - _2483;
                                float _3261 = dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260));
                                float _3264 = inversesqrt(_3261);
                                float _3265 = _3264 * _3258;
                                float _3266 = _3264 * _3259;
                                float _3267 = _3264 * _3260;
                                float _3271 = 1.0 - (_3261 / (_3126 * _3126));
                                float _4340 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3272 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3276 = sqrt(_3261) * _3141.w;
                                float _3278 = 1.39999997615814208984375 / (_3276 + 1.39999997615814208984375);
                                float _3279 = _3278 * _3278;
                                float _3282 = ((1.0 - _3279) * dot(vec3(_3265, _3266, _3267), vec3(_783, _786, _789))) + _3279;
                                float _3285 = _3276 * _3276;
                                float _3289 = (fma(_2483, _3168.z, fma(_2482, _3168.y, _3168.x * _2481)) + _3168.w) / _3230;
                                float _3290 = (fma(_2483, _3183.z, fma(_2482, _3183.y, _3183.x * _2481)) + _3183.w) / _3230;
                                float _3294 = 1.0 - dot(vec2(_3289, _3290), vec2(_3289, _3290));
                                float _4356 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3295 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                                float _3296 = _3295 * (((isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0))) * _3272) / ((_3285 * 0.699999988079071044921875) + 1.0));
                                float _3308 = exp2(log2(1.0 / ((_3285 * 3.5) + 5.0)) * 0.25);
                                float _3309 = 1.0 - _843;
                                float _3316 = sqrt(1.0 - ((1.0 - (_3309 * _3309)) * (1.0 - (_3308 * _3308))));
                                float _3317 = _3316 * _3316;
                                float _3318 = _3317 * _3317;
                                float _3319 = _3265 - _2767;
                                float _3320 = _3266 - _2768;
                                float _3321 = _3267 - _2769;
                                float _3325 = inversesqrt(dot(vec3(_3319, _3320, _3321), vec3(_3319, _3320, _3321)));
                                float _3329 = dot(vec3(_783, _786, _789), vec3((-0.0) - _2767, (-0.0) - _2768, (-0.0) - _2769));
                                float _4367 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3332 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3333 = dot(vec3(_783, _786, _789), vec3(_3325 * _3319, _3325 * _3320, _3325 * _3321));
                                float _4378 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3336 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3340 = ((_3336 * _3336) * (_3318 + (-1.0))) + 1.0;
                                float _3341 = _3278 * _3317;
                                float _3342 = _3341 * _3341;
                                float _3348 = ((1.0 - _3342) * dot(vec3(_783, _786, _789), vec3(_3265, _3266, _3267))) + _3342;
                                float _4389 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3349 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3350 = 1.0 - _3317;
                                float _3360 = (0.5 / (((_3349 * ((_3332 * _3350) + _3317)) + 9.9999999392252902907785028219223e-09) + (((_3349 * _3350) + _3317) * _3332))) * _3349;
                                float _4400 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3370 = (_3295 * _3272) * (((_3318 * 3.1415927410125732421875) * (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) / ((_3340 * _3340) * ((_3285 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3370 * _3153.x;
                                frontier_phi_73_pred_1 = _3370 * _3153.y;
                                frontier_phi_73_pred_2 = _3296 * _3141.z;
                                frontier_phi_73_pred_3 = _3296 * _3141.y;
                                frontier_phi_73_pred_4 = _3296 * _3141.x;
                                frontier_phi_73_pred_5 = _3370 * _3153.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3374 = frontier_phi_73_pred;
                            _3375 = frontier_phi_73_pred_1;
                            _3379 = frontier_phi_73_pred_2;
                            _3378 = frontier_phi_73_pred_3;
                            _3377 = frontier_phi_73_pred_4;
                            _3376 = frontier_phi_73_pred_5;
                            _3083 = _3377 + _3096;
                            _3084 = _3378 + _3097;
                            _3085 = _3379 + _3098;
                            _3080 = _3374 + _3093;
                            _3081 = _3375 + _3094;
                            _3082 = _3376 + _3095;
                            if (_3100 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3100;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3083;
                        frontier_phi_67_pred_1 = _3084;
                        frontier_phi_67_pred_2 = _3085;
                        frontier_phi_67_pred_3 = _3082;
                        frontier_phi_67_pred_4 = _3081;
                        frontier_phi_67_pred_5 = _3080;
                    }
                    _2748 = frontier_phi_67_pred;
                    _2750 = frontier_phi_67_pred_1;
                    _2752 = frontier_phi_67_pred_2;
                    _2746 = frontier_phi_67_pred_3;
                    _2744 = frontier_phi_67_pred_4;
                    _2742 = frontier_phi_67_pred_5;
                    uint _2887 = _2886 + 1u;
                    if (_2887 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2880 = _2742;
                        _2881 = _2744;
                        _2882 = _2746;
                        _2883 = _2748;
                        _2884 = _2750;
                        _2885 = _2752;
                        _2886 = _2887;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2750;
                frontier_phi_55_56_ladder_1 = _2752;
                frontier_phi_55_56_ladder_2 = _2748;
                frontier_phi_55_56_ladder_3 = _2746;
                frontier_phi_55_56_ladder_4 = _2744;
                frontier_phi_55_56_ladder_5 = _2742;
            }
            else
            {
                frontier_phi_55_56_ladder = _2636;
                frontier_phi_55_56_ladder_1 = _2638;
                frontier_phi_55_56_ladder_2 = _2634;
                frontier_phi_55_56_ladder_3 = _2632;
                frontier_phi_55_56_ladder_4 = _2630;
                frontier_phi_55_56_ladder_5 = _2628;
            }
            _2741 = frontier_phi_55_56_ladder_5;
            _2743 = frontier_phi_55_56_ladder_4;
            _2745 = frontier_phi_55_56_ladder_3;
            _2747 = frontier_phi_55_56_ladder_2;
            _2749 = frontier_phi_55_56_ladder;
            _2751 = frontier_phi_55_56_ladder_1;
        }
        float _2756 = isnan(1.0) ? _827 : (isnan(_827) ? 1.0 : min(_827, 1.0));
        _2540 = (_2756 * _2747) + _1995;
        _2542 = (_2756 * _2749) + _1997;
        _2544 = (_2756 * _2751) + _1999;
        _2546 = ((_2741 * 0.039999999105930328369140625) * _2756) + _2325;
        _2548 = ((_2743 * 0.039999999105930328369140625) * _2756) + _2327;
        _2550 = ((_2745 * 0.039999999105930328369140625) * _2756) + _2329;
    }
    else
    {
        _2540 = _1995;
        _2542 = _1997;
        _2544 = _1999;
        _2546 = _2325;
        _2548 = _2327;
        _2550 = _2329;
    }
    float _4416 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _4427 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _4438 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    uint _2570 = _802 + 6u;
    float _2578 = _764 / cbSceneParam._m0[86u].x;
    float _2579 = _765 / cbSceneParam._m0[86u].y;
    vec4 _2593 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2578, _2579, (log2((isnan(cbSceneParam._m0[77u].w) ? _699 : (isnan(_699) ? cbSceneParam._m0[77u].w : min(_699, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2595 = _2593.x;
    float _2596 = _2593.y;
    float _2597 = _2593.z;
    float _2598 = _2593.w;
    float _2691;
    float _2693;
    float _2695;
    float _2697;
    if (_699 > cbSceneParam._m0[78u].w)
    {
        float _2653 = isnan(_699) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _699 : min(cbSceneParam._m0[80u].w, _699));
        float _2654 = _2653 / _699;
        float _2665 = _2654 * _749;
        float _2666 = _750 * _2654;
        float _2667 = (-0.0) - _2666;
        float _2669 = _2654 * _751;
        float _2671 = (cbSceneParam._m0[77u].w * _2667) / _2653;
        float _2672 = _2671 + cbSceneParam._m0[79u].w;
        float _2673 = cbSceneParam._m0[79u].w - _2666;
        float _2679 = sqrt(((_2665 * _2665) + (_2666 * _2666)) + (_2669 * _2669));
        float _2682 = (1.0 - (cbSceneParam._m0[77u].w / _2653)) * _2679;
        float _2687 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2689 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2842;
        if (abs((_2667 - _2671) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2842 = ((((_2672 > 0.0) ? exp2(_2687 * _2672) : (2.0 - exp2(_2689 * _2672))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2682;
        }
        else
        {
            float _2802 = 1.0 / cbSceneParam._m0[80u].x;
            float _2803 = isnan(_2673) ? _2672 : (isnan(_2672) ? _2673 : max(_2672, _2673));
            float _2804 = isnan(_2673) ? _2672 : (isnan(_2672) ? _2673 : min(_2672, _2673));
            float _2813 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : min(_2803, 0.0));
            float _2814 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : min(_2804, 0.0));
            _2842 = ((abs(_2679 / _2667) * cbSceneParam._m0[80u].y) * ((((_2813 - _2814) * 2.0) - ((exp2(_2687 * (isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0)))) - exp2(_2687 * (isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0))))) * _2802)) - ((exp2(_2689 * _2813) - exp2(_2689 * _2814)) * _2802))) + (_2682 * cbSceneParam._m0[80u].z);
        }
        vec4 _2844 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2578, _2579, 1.0), 0.0);
        float _2853 = exp2((_2842 * (-1.44269502162933349609375)) * (1.0 - _2844.w));
        float _2854 = log2(_2853);
        float _2870 = log2(_2598);
        _2691 = (exp2(_2870 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2854 * cbSceneParam._m0[78u].x)) * _2844.x) / cbSceneParam._m0[78u].x)) + _2595;
        _2693 = (exp2(_2870 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2854 * cbSceneParam._m0[78u].y)) * _2844.y) / cbSceneParam._m0[78u].y)) + _2596;
        _2695 = (exp2(_2870 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2854 * cbSceneParam._m0[78u].z)) * _2844.z) / cbSceneParam._m0[78u].z)) + _2597;
        _2697 = _2853 * _2598;
    }
    else
    {
        _2691 = _2595;
        _2693 = _2596;
        _2695 = _2597;
        _2697 = _2598;
    }
    float _2709 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2710 = _2709 == 3.0;
    float _2711 = log2(_2697);
    float _2718 = exp2(_2711 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2540 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _827))) + ((_2546 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1634)) * cbPerFrame._m0[3u].x));
    float _2719 = exp2(_2711 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2542 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _827))) + ((_2548 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1634)) * cbPerFrame._m0[3u].x));
    float _2720 = exp2(_2711 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2544 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _827))) + ((_2550 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1634)) * cbPerFrame._m0[3u].x));
    float _2729 = (_2709 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2729 * (_2710 ? _2718 : (_2718 + (cbSceneParam._m0[72u].w * _2691)));
    SV_Target.y = _2729 * (_2710 ? _2719 : (_2719 + (cbSceneParam._m0[72u].w * _2693)));
    SV_Target.z = _2729 * (_2710 ? _2720 : (_2720 + (cbSceneParam._m0[72u].w * _2695)));
    SV_Target.w = cbInstanceData._m0[_2570].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2570].w;
}


