#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1305;
float _3691;
float _3692;
float _3693;
float _3694;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _258 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _264 = _258.x * cbMtdParam._m0[10u].x;
    float _265 = _258.y * cbMtdParam._m0[10u].y;
    float _266 = _258.z * cbMtdParam._m0[10u].z;
    vec4 _285 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x;
    float _343 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _332)) + 1.0;
    float _3703 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _344 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _351 = (_344 * ((_285.x * cbMtdParam._m0[11u].x) - _264)) + _264;
    float _352 = (_344 * ((_285.y * cbMtdParam._m0[11u].y) - _265)) + _265;
    float _353 = (_344 * ((_285.z * cbMtdParam._m0[11u].z) - _266)) + _266;
    vec4 _372 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _402 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _332)) + 1.0;
    float _3714 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _403 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _410 = (_403 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _411 = (_403 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _412 = (_403 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    vec4 _429 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _454 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _332)) + 1.0;
    float _3725 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    vec4 _482 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _490 = ((((_455 * ((_429.x * cbMtdParam._m0[13u].x) - _410)) + _410) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _482.x;
    float _493 = ((((_455 * ((_429.y * cbMtdParam._m0[13u].y) - _411)) + _411) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _482.y;
    float _496 = ((((_455 * ((_429.z * cbMtdParam._m0[13u].z) - _412)) + _412) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _482.z;
    vec4 _517 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _546 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3736 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _547 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _554 = (_547 * ((_517.x * cbMtdParam._m0[14u].x) - _490)) + _490;
    float _555 = (_547 * ((_517.y * cbMtdParam._m0[14u].y) - _493)) + _493;
    float _556 = (_547 * ((_517.z * cbMtdParam._m0[14u].z) - _496)) + _496;
    vec4 _572 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _594 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _612 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _614 = _612.x;
    float _615 = _612.y;
    float _618 = cbMtdParam._m0[16u].w * _612.z;
    float _621 = (((cbMtdParam._m0[17u].x * _594.z) - _618) * _344) + _618;
    vec4 _634 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _643 = (((cbMtdParam._m0[17u].y * _634.z) - _621) * _403) + _621;
    vec4 _656 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _665 = (((cbMtdParam._m0[17u].z * _656.z) - _643) * _455) + _643;
    float _670 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_572.z * cbMtdParam._m0[16u].z) - _665)) + _665;
    vec4 _683 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _695 = ((_594.x - _614) * _344) + _614;
    float _696 = ((_594.y - _615) * _344) + _615;
    float _701 = ((_634.x - _695) * _403) + _695;
    float _702 = ((_634.y - _696) * _403) + _696;
    float _711 = ((((_656.x - _701) * _455) + _701) * 2.0) + (-1.0);
    float _712 = ((((_656.y - _702) * _455) + _702) * 2.0) + (-1.0);
    float _713 = dot(vec2(_711, _712), vec2(_711, _712));
    float _3747 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _718 = sqrt(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))));
    float _728 = ((((_683.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _711) + ((((_572.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y);
    float _729 = ((((_683.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _712) + ((((_572.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y);
    float _732 = fma(_718, _228 * NORMAL.x, fma(_729, _235 * TANGENT.x, (_221 * _213) * _728));
    float _735 = fma(_718, _228 * NORMAL.y, fma(_729, _235 * TANGENT.y, (_221 * _214) * _728));
    float _738 = fma(_718, _228 * NORMAL.z, fma(_729, _235 * TANGENT.z, (_221 * _215) * _728));
    float _742 = inversesqrt(dot(vec3(_732, _735, _738), vec3(_732, _735, _738)));
    float _743 = _742 * _732;
    float _744 = _742 * _735;
    float _745 = _742 * _738;
    float _3758 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _746 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _3769 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _3780 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _3791 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _765 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _805 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _815 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _805);
    float _816 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _805);
    float _817 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _805);
    float _821 = inversesqrt(dot(vec3(_815, _816, _817), vec3(_815, _816, _817)));
    float _822 = _815 * _821;
    float _823 = _816 * _821;
    float _824 = _817 * _821;
    vec4 _829 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _831 = _829.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _985 = sqrt(((_815 * _815) + (_816 * _816)) + (_817 * _817));
        float _991 = (cbMatDynParam._m0[5u].x * _985) + cbMatDynParam._m0[5u].y;
        float _3802 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _996 = (cbMatDynParam._m0[5u].z * _985) + cbMatDynParam._m0[5u].w;
        float _3813 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) - _992)) + _992) < ((_831 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _842 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _843 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _861 = fma(_745, cbSceneParam._m0[5u].z, fma(_744, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _743));
    float _864 = fma(_745, cbSceneParam._m0[6u].z, fma(_744, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _743));
    float _867 = fma(_745, cbSceneParam._m0[7u].z, fma(_744, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _743));
    uint _880 = uint(roundEven(NORMAL.w)) * 13u;
    uint _881 = _880 + 9u;
    uint _882 = _881 + uint(cbMatDynParam._m0[0u].w);
    float _888 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * cbInstanceData._m0[_882].x;
    float _889 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_882].y;
    float _890 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_882].z;
    float _3824 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _891 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    vec4 _902 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _842, cbSceneParam._m0[86u].y * _843));
    float _905 = _902.x * TEXCOORD_5.w;
    float _906 = dot(vec3(_743, _744, _745), vec3(_822, _823, _824));
    float _909 = _906 * 2.0;
    float _913 = (_909 * _743) - _822;
    float _914 = (_909 * _744) - _823;
    float _915 = (_909 * _745) - _824;
    float _919 = abs(dot(vec3(_822, _823, _824), vec3(_743, _744, _745)));
    float _3857 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _921 = sqrt(_746);
    float _934 = exp2((_921 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_921 * 3.0));
    float _966 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _970 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1304;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1029 = fma(_974, cbModelParam._m0[26u].z, fma(_970, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _966));
        float _1033 = fma(_974, cbModelParam._m0[27u].z, fma(_970, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _966));
        float _1037 = fma(_974, cbModelParam._m0[28u].z, fma(_970, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _966));
        float _1062 = _966 + _743;
        float _1063 = _970 + _744;
        float _1064 = _974 + _745;
        float _1074 = fma(_1064, cbModelParam._m0[26u].z, fma(_1063, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1062)) - _1029;
        float _1075 = fma(_1064, cbModelParam._m0[27u].z, fma(_1063, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1062)) - _1033;
        float _1076 = fma(_1064, cbModelParam._m0[28u].z, fma(_1063, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1062)) - _1037;
        float _1080 = inversesqrt(dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076)));
        float _1093 = ((_1080 * _1074) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1029 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1094 = ((_1080 * _1075) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1033 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1095 = ((_1080 * _1076) / cbModelParam._m0[34u].z) + ((((((_1037 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        float _1132 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1098.x + (-0.5));
        float _1134 = _1132 * (_1098.y + (-0.5));
        float _1135 = _1132 * (_1098.z + (-0.5));
        float _1142 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1105.x + (-0.5));
        float _1144 = _1142 * (_1105.y + (-0.5));
        float _1145 = _1142 * (_1105.z + (-0.5));
        float _1152 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1112.x + (-0.5));
        float _1154 = _1152 * (_1112.y + (-0.5));
        float _1155 = _1152 * (_1112.z + (-0.5));
        float _1162 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1119.x + (-0.5));
        float _1164 = _1162 * (_1119.y + (-0.5));
        float _1165 = _1162 * (_1119.z + (-0.5));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = _1133 * 0.5;
        float _1170 = _1143 * 0.5;
        float _1171 = _1153 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1186 = (dot(vec3(_743, _744, _745), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1196 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3905 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1198 + 1.0))) + _1203) * _1166;
        float _1213 = _1134 * 0.5;
        float _1214 = _1144 * 0.5;
        float _1215 = _1154 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_743, _744, _745), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3938 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1240 + 1.0))) + _1245) * _1167;
        float _1255 = _1135 * 0.5;
        float _1256 = _1145 * 0.5;
        float _1257 = _1155 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_743, _744, _745), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _3971 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1282 + 1.0))) + _1287) * _1168;
        _1304 = _1135;
        _1306 = _1134;
        _1307 = _1133;
        _1308 = _1145;
        _1309 = _1144;
        _1310 = _1143;
        _1311 = _1155;
        _1312 = _1154;
        _1313 = _1153;
        _1314 = _1168;
        _1315 = _1167;
        _1316 = _1166;
        _1317 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1318 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1319 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
    }
    else
    {
        _1304 = _1305;
        _1306 = _1305;
        _1307 = _1305;
        _1308 = _1305;
        _1309 = _1305;
        _1310 = _1305;
        _1311 = _1305;
        _1312 = _1305;
        _1313 = _1305;
        _1314 = _1305;
        _1315 = _1305;
        _1316 = _1305;
        _1317 = 0.0;
        _1318 = 0.0;
        _1319 = 0.0;
    }
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1348 = fma(_974, cbModelParam._m0[30u].z, fma(_970, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _966));
        float _1352 = fma(_974, cbModelParam._m0[31u].z, fma(_970, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _966));
        float _1356 = fma(_974, cbModelParam._m0[32u].z, fma(_970, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _966));
        float _1379 = _966 + _743;
        float _1380 = _970 + _744;
        float _1381 = _974 + _745;
        float _1391 = fma(_1381, cbModelParam._m0[30u].z, fma(_1380, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1379)) - _1348;
        float _1392 = fma(_1381, cbModelParam._m0[31u].z, fma(_1380, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1379)) - _1352;
        float _1393 = fma(_1381, cbModelParam._m0[32u].z, fma(_1380, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1379)) - _1356;
        float _1397 = inversesqrt(dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393)));
        float _1410 = ((_1397 * _1391) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1348 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1411 = ((_1397 * _1392) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1352 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1412 = ((_1397 * _1393) / cbModelParam._m0[35u].z) + ((((((_1356 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        float _1447 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1414.x + (-0.5));
        float _1449 = _1447 * (_1414.y + (-0.5));
        float _1450 = _1447 * (_1414.z + (-0.5));
        float _1457 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1421.x + (-0.5));
        float _1459 = _1457 * (_1421.y + (-0.5));
        float _1460 = _1457 * (_1421.z + (-0.5));
        float _1467 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1428.x + (-0.5));
        float _1469 = _1467 * (_1428.y + (-0.5));
        float _1470 = _1467 * (_1428.z + (-0.5));
        float _1477 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1435.x + (-0.5));
        float _1479 = _1477 * (_1435.y + (-0.5));
        float _1480 = _1477 * (_1435.z + (-0.5));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = _1448 * 0.5;
        float _1485 = _1458 * 0.5;
        float _1486 = _1468 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_743, _744, _745), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4034 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1511 + 1.0))) + _1516) * _1481;
        float _1526 = _1449 * 0.5;
        float _1527 = _1459 * 0.5;
        float _1528 = _1469 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_743, _744, _745), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4067 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1553 + 1.0))) + _1558) * _1482;
        float _1568 = _1450 * 0.5;
        float _1569 = _1460 * 0.5;
        float _1570 = _1470 * 0.5;
        float _1571 = dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570));
        float _1576 = (_1571 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1571);
        float _1584 = (dot(vec3(_743, _744, _745), vec3(_1576 * _1568, _1576 * _1569, _1576 * _1570)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1593 = sqrt(((_1569 * _1569) + (_1568 * _1568)) + (_1570 * _1570)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1595 = _1594 * 2.0;
        float _1599 = (1.0 - _1594) / (_1594 + 1.0);
        float _4100 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1609 = ((((1.0 - _1600) * (_1595 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1595 + 1.0))) + _1600) * _1483;
        _1617 = _1450;
        _1618 = _1449;
        _1619 = _1448;
        _1620 = _1460;
        _1621 = _1459;
        _1622 = _1458;
        _1623 = _1470;
        _1624 = _1469;
        _1625 = _1468;
        _1626 = _1483;
        _1627 = _1482;
        _1628 = _1481;
        _1629 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
        _1630 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
        _1631 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)));
    }
    else
    {
        _1617 = _1305;
        _1618 = _1305;
        _1619 = _1305;
        _1620 = _1305;
        _1621 = _1305;
        _1622 = _1305;
        _1623 = _1305;
        _1624 = _1305;
        _1625 = _1305;
        _1626 = _1305;
        _1627 = _1305;
        _1628 = _1305;
        _1629 = 0.0;
        _1630 = 0.0;
        _1631 = 0.0;
    }
    float _1641 = (cbModelParam._m0[1u].x * (_1629 - _1317)) + _1317;
    float _1642 = (cbModelParam._m0[1u].x * (_1630 - _1318)) + _1318;
    float _1643 = (cbModelParam._m0[1u].x * (_1631 - _1319)) + _1319;
    float _1664 = fma(_1643, cbSceneParam._m0[89u].z, fma(_1642, cbSceneParam._m0[89u].y, _1641 * cbSceneParam._m0[89u].x));
    float _1667 = fma(_1643, cbSceneParam._m0[90u].z, fma(_1642, cbSceneParam._m0[90u].y, _1641 * cbSceneParam._m0[90u].x));
    float _1670 = fma(_1643, cbSceneParam._m0[91u].z, fma(_1642, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1641));
    float _1685 = _913 * 0.5;
    float _1686 = _914 * 0.5;
    float _1687 = _915 * 0.5;
    float _1688 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1619, _1622, _1625, _1628));
    float _1691 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1618, _1621, _1624, _1627));
    float _1694 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1617, _1620, _1623, _1626));
    float _1728;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1701 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1304, _1308, _1311, _1314));
        float _1705 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1306, _1309, _1312, _1315));
        float _1709 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1307, _1310, _1313, _1316));
        float _1716 = dot(vec4(cbModelParam._m0[39u]), vec4(_1685, _1686, _1687, 1.0));
        _1728 = dot(vec3(isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1716) ? 0.0 : (isnan(0.0) ? _1716 : max(0.0, _1716))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1728 = 1.0;
    }
    float _1739;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1730 = dot(vec4(cbModelParam._m0[40u]), vec4(_1685, _1686, _1687, 1.0));
        _1739 = dot(vec3(isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1730) ? 0.0 : (isnan(0.0) ? _1730 : max(0.0, _1730))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1739 = 1.0;
    }
    float _1743 = (_1739 * cbModelParam._m0[1u].x) + (_1728 * (1.0 - cbModelParam._m0[1u].x));
    float _1753 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _746);
    float _1754 = isnan(_1753) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1753 : min(cbModelParam._m0[25u].z, _1753));
    float _1834;
    float _1836;
    float _1838;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1801 = fma(_974, cbModelParam._m0[13u].z, fma(_970, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _966)) + cbModelParam._m0[13u].w;
        float _1805 = fma(_974, cbModelParam._m0[14u].z, fma(_970, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _966)) + cbModelParam._m0[14u].w;
        float _1809 = fma(_974, cbModelParam._m0[15u].z, fma(_970, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _966)) + cbModelParam._m0[15u].w;
        float _1812 = fma(_915, cbModelParam._m0[13u].z, fma(_914, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _913));
        float _1815 = fma(_915, cbModelParam._m0[14u].z, fma(_914, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _913));
        float _1818 = fma(_915, cbModelParam._m0[15u].z, fma(_914, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _913));
        float _1846;
        if (_1812 > 0.0)
        {
            _1846 = abs((1.0 - _1801) / _1812);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1801 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1846 = frontier_phi_17_15_ladder;
        }
        float _2069;
        if (_1815 > 0.0)
        {
            _2069 = abs((1.0 - _1805) / _1815);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1805 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2069 = frontier_phi_26_22_ladder;
        }
        float _2315;
        if (_1818 > 0.0)
        {
            _2315 = abs((1.0 - _1809) / _1818);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1809 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2315 = frontier_phi_38_33_ladder;
        }
        float _2317 = isnan(_2069) ? _1846 : (isnan(_1846) ? _2069 : min(_1846, _2069));
        float _2318 = isnan(_2315) ? _2317 : (isnan(_2317) ? _2315 : min(_2317, _2315));
        float _2322 = (_2318 * _1812) + _1801;
        float _2323 = (_2318 * _1815) + _1805;
        float _2324 = (_2318 * _1818) + _1809;
        float _2325 = _2318 * 9.9999997473787516355514526367188e-05;
        float _2327 = (-1.0) - _2325;
        float _2329 = _2325 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2324 > _2329) || ((_2324 < _2327) || ((_2323 > _2329) || ((_2323 < _2327) || ((_2322 < _2327) || (_2322 > _2329))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2448 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2324, cbModelParam._m0[9u].z, fma(_2323, cbModelParam._m0[9u].y, _2322 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2324, cbModelParam._m0[10u].z, fma(_2323, cbModelParam._m0[10u].y, _2322 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2324, cbModelParam._m0[11u].z, fma(_2323, cbModelParam._m0[11u].y, _2322 * cbModelParam._m0[11u].x))), _1754);
            frontier_phi_16_38_ladder = _2448.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2448.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2448.x * cbModelParam._m0[1u].y;
        }
        _1834 = frontier_phi_16_38_ladder_2;
        _1836 = frontier_phi_16_38_ladder_1;
        _1838 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1822 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_913, _914, _915), _1754);
        _1834 = _1822.x * cbModelParam._m0[1u].y;
        _1836 = _1822.y * cbModelParam._m0[1u].y;
        _1838 = _1822.z * cbModelParam._m0[1u].y;
    }
    float _1842 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _746);
    float _1843 = isnan(_1842) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1842 : min(cbModelParam._m0[25u].w, _1842));
    float _1934;
    float _1936;
    float _1938;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1898 = fma(_974, cbModelParam._m0[21u].z, fma(_970, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _966)) + cbModelParam._m0[21u].w;
        float _1902 = fma(_974, cbModelParam._m0[22u].z, fma(_970, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _966)) + cbModelParam._m0[22u].w;
        float _1906 = fma(_974, cbModelParam._m0[23u].z, fma(_970, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _966)) + cbModelParam._m0[23u].w;
        float _1909 = fma(_915, cbModelParam._m0[21u].z, fma(_914, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _913));
        float _1912 = fma(_915, cbModelParam._m0[22u].z, fma(_914, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _913));
        float _1915 = fma(_915, cbModelParam._m0[23u].z, fma(_914, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _913));
        float _2074;
        if (_1909 > 0.0)
        {
            _2074 = abs((1.0 - _1898) / _1909);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1898 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2074 = frontier_phi_28_24_ladder;
        }
        float _2342;
        if (_1912 > 0.0)
        {
            _2342 = abs((1.0 - _1902) / _1912);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1902 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2342 = frontier_phi_40_35_ladder;
        }
        float _2547;
        if (_1915 > 0.0)
        {
            _2547 = abs((1.0 - _1906) / _1915);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1906 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2547 = frontier_phi_49_46_ladder;
        }
        float _2549 = isnan(_2342) ? _2074 : (isnan(_2074) ? _2342 : min(_2074, _2342));
        float _2550 = isnan(_2547) ? _2549 : (isnan(_2549) ? _2547 : min(_2549, _2547));
        float _2554 = (_2550 * _1909) + _1898;
        float _2555 = (_2550 * _1912) + _1902;
        float _2556 = (_2550 * _1915) + _1906;
        float _2557 = _2550 * 9.9999997473787516355514526367188e-05;
        float _2558 = (-1.0) - _2557;
        float _2560 = _2557 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2556 > _2560) || ((_2556 < _2558) || ((_2555 > _2560) || ((_2555 < _2558) || ((_2554 < _2558) || (_2554 > _2560))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2755 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2556, cbModelParam._m0[17u].z, fma(_2555, cbModelParam._m0[17u].y, _2554 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2556, cbModelParam._m0[18u].z, fma(_2555, cbModelParam._m0[18u].y, _2554 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2556, cbModelParam._m0[19u].z, fma(_2555, cbModelParam._m0[19u].y, _2554 * cbModelParam._m0[19u].x))), _1843);
            frontier_phi_25_49_ladder = _2755.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2755.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2755.x * cbModelParam._m0[1u].z;
        }
        _1934 = frontier_phi_25_49_ladder_2;
        _1936 = frontier_phi_25_49_ladder_1;
        _1938 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1918 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_913, _914, _915), _1843);
        _1934 = _1918.x * cbModelParam._m0[1u].z;
        _1936 = _1918.y * cbModelParam._m0[1u].z;
        _1938 = _1918.z * cbModelParam._m0[1u].z;
    }
    float _1950 = ((((1.0 - _934) * ((_921 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_934 * _921)) * _905;
    float _1951 = _1950 * ((cbModelParam._m0[1u].w * (_1934 - _1834)) + _1834);
    float _1952 = _1950 * ((cbModelParam._m0[1u].w * (_1936 - _1836)) + _1836);
    float _1953 = _1950 * ((cbModelParam._m0[1u].w * (_1938 - _1838)) + _1838);
    float _1956 = fma(_1953, cbSceneParam._m0[89u].z, fma(_1952, cbSceneParam._m0[89u].y, _1951 * cbSceneParam._m0[89u].x));
    float _1959 = fma(_1953, cbSceneParam._m0[90u].z, fma(_1952, cbSceneParam._m0[90u].y, _1951 * cbSceneParam._m0[90u].x));
    float _1962 = fma(_1953, cbSceneParam._m0[91u].z, fma(_1952, cbSceneParam._m0[91u].y, _1951 * cbSceneParam._m0[91u].x));
    vec4 _1970 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_842, _843));
    float _1972 = _1970.w;
    float _1984 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1972);
    float _1985 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1972);
    float _1986 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1972);
    uvec4 _1990 = floatBitsToUint(cbInstanceData._m0[_880 + 5u]);
    uint _1992 = _1990.x * 14u;
    uint _1993 = _1992 + 13u;
    float _2000 = _905 + (-1.0);
    float _2005 = (cbLight._m0[_1993].x * _2000) + 1.0;
    float _2006 = (cbLight._m0[_1993].y * _2000) + 1.0;
    float _2007 = (cbLight._m0[_1993].z * _2000) + 1.0;
    float _2008 = (cbLight._m0[_1993].w * _2000) + 1.0;
    uint _2009 = _1992 + 5u;
    float _2015 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
    uint _2019 = _1992 + 4u;
    float _2028 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
    uint _2032 = _1992 | 1u;
    float _2043 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_743, _744, _745));
    float _2046 = dot(vec3(cbLight._m0[_2032].xyz), vec3(_743, _744, _745));
    float _4236 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _4247 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2051 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * 0.3183098733425140380859375;
    float _2053 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * 0.3183098733425140380859375;
    float _2060 = ((cbLight._m0[_2009].x * _2015) * _2053) + (((cbLight._m0[_2019].x * _1984) * _2028) * _2051);
    float _2061 = ((_2015 * cbLight._m0[_2009].y) * _2053) + (((cbLight._m0[_2019].y * _1985) * _2028) * _2051);
    float _2062 = ((_2015 * cbLight._m0[_2009].z) * _2053) + (((cbLight._m0[_2019].z * _1986) * _2028) * _2051);
    uvec4 _2066 = floatBitsToUint(cbLight._m0[_1992 + 12u]);
    bool _2068 = _2066.x == 0u;
    float _2079;
    float _2081;
    float _2083;
    if (_2068)
    {
        _2079 = _2060;
        _2081 = _2061;
        _2083 = _2062;
    }
    else
    {
        uint _2087 = _1992 + 6u;
        float _2103 = (dot(vec3(cbLight._m0[_1992 + 2u].xyz), vec3(_743, _744, _745)) * 0.5) + 0.5;
        float _2104 = _2103 * _2103;
        float _4258 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2105 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2106 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
        _2079 = (((cbLight._m0[_2087].x * 0.3183098733425140380859375) * _2105) * _2106) + _2060;
        _2081 = (((cbLight._m0[_2087].y * 0.3183098733425140380859375) * _2105) * _2106) + _2061;
        _2083 = (((cbLight._m0[_2087].z * 0.3183098733425140380859375) * _2105) * _2106) + _2062;
    }
    bool _2086 = _2066.y == 0u;
    float _2124;
    float _2126;
    float _2128;
    if (_2086)
    {
        _2124 = _2079;
        _2126 = _2081;
        _2128 = _2083;
    }
    else
    {
        uint _2286 = _1992 + 7u;
        float _2302 = (dot(vec3(cbLight._m0[_1992 + 3u].xyz), vec3(_743, _744, _745)) * 0.5) + 0.5;
        float _2303 = _2302 * _2302;
        float _4274 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2304 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2305 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
        _2124 = (((cbLight._m0[_2286].x * 0.3183098733425140380859375) * _2304) * _2305) + _2079;
        _2126 = (((cbLight._m0[_2286].y * 0.3183098733425140380859375) * _2304) * _2305) + _2081;
        _2128 = (((cbLight._m0[_2286].z * 0.3183098733425140380859375) * _2304) * _2305) + _2083;
    }
    uint _2131 = _1992 + 8u;
    float _2144 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1992].w)) * _746) * 0.949999988079071044921875);
    float _2145 = _2144 * _2144;
    float _2146 = cbLight._m0[_1992].x + _822;
    float _2147 = cbLight._m0[_1992].y + _823;
    float _2148 = cbLight._m0[_1992].z + _824;
    float _2152 = inversesqrt(dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148)));
    float _2153 = _2152 * _2146;
    float _2154 = _2152 * _2147;
    float _2155 = _2152 * _2148;
    float _2156 = dot(vec3(_743, _744, _745), vec3(cbLight._m0[_1992].xyz));
    float _4290 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2159 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _4301 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _2160 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2161 = dot(vec3(_743, _744, _745), vec3(_2153, _2154, _2155));
    float _4312 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _2165 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_2153, _2154, _2155));
    float _4323 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2169 = _2145 * _2145;
    float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
    float _2184 = (exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2185 = 1.0 - _2145;
    float _2196 = (0.5 / (((_2160 * ((_2159 * _2185) + _2145)) + 9.9999999392252902907785028219223e-09) + (((_2160 * _2185) + _2145) * _2159))) * _2159;
    float _4334 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2198 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
    uint _2212 = _1992 + 9u;
    float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2032].w)) * _746) * 0.949999988079071044921875);
    float _2224 = _2223 * _2223;
    float _2225 = cbLight._m0[_2032].x + _822;
    float _2226 = cbLight._m0[_2032].y + _823;
    float _2227 = cbLight._m0[_2032].z + _824;
    float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
    float _2232 = _2231 * _2225;
    float _2233 = _2231 * _2226;
    float _2234 = _2231 * _2227;
    float _2235 = dot(vec3(_743, _744, _745), vec3(cbLight._m0[_2032].xyz));
    float _4345 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2238 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2239 = dot(vec3(_743, _744, _745), vec3(_2232, _2233, _2234));
    float _4356 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _2243 = dot(vec3(cbLight._m0[_2032].xyz), vec3(_2232, _2233, _2234));
    float _4367 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2247 = _2224 * _2224;
    float _2251 = ((_2242 * _2242) * (_2247 + (-1.0))) + 1.0;
    float _2260 = (exp2(log2(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2261 = 1.0 - _2224;
    float _2271 = (0.5 / (((_2160 * ((_2238 * _2261) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_2160 * _2261) + _2224) * _2238))) * _2238;
    float _4378 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2273 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2247 / ((_2251 * _2251) * 3.141590118408203125));
    float _2283 = (((_2260 * cbLight._m0[_2212].x) * _2273) * _2015) + ((((cbLight._m0[_2131].x * _1984) * _2184) * _2198) * _2028);
    float _2284 = (((_2260 * cbLight._m0[_2212].y) * _2273) * _2015) + ((((cbLight._m0[_2131].y * _1985) * _2184) * _2198) * _2028);
    float _2285 = (((_2260 * cbLight._m0[_2212].z) * _2273) * _2015) + ((((cbLight._m0[_2131].z * _1986) * _2184) * _2198) * _2028);
    float _2347;
    float _2349;
    float _2351;
    if (_2068)
    {
        _2347 = _2283;
        _2349 = _2284;
        _2351 = _2285;
    }
    else
    {
        uint _2353 = _1992 + 2u;
        uint _2357 = _1992 + 10u;
        float _2371 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2353].w)) * _746) * 0.949999988079071044921875);
        float _2372 = _2371 * _2371;
        float _2373 = cbLight._m0[_2353].x + _822;
        float _2374 = cbLight._m0[_2353].y + _823;
        float _2375 = cbLight._m0[_2353].z + _824;
        float _2379 = inversesqrt(dot(vec3(_2373, _2374, _2375), vec3(_2373, _2374, _2375)));
        float _2380 = _2379 * _2373;
        float _2381 = _2379 * _2374;
        float _2382 = _2379 * _2375;
        float _2383 = dot(vec3(_743, _744, _745), vec3(cbLight._m0[_2353].xyz));
        float _4389 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2386 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2387 = dot(vec3(_743, _744, _745), vec3(_2380, _2381, _2382));
        float _4400 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2390 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2391 = dot(vec3(cbLight._m0[_2353].xyz), vec3(_2380, _2381, _2382));
        float _4411 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2395 = _2372 * _2372;
        float _2399 = ((_2390 * _2390) * (_2395 + (-1.0))) + 1.0;
        float _2408 = (exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2409 = 1.0 - _2372;
        float _2419 = (0.5 / (((_2160 * ((_2386 * _2409) + _2372)) + 9.9999999392252902907785028219223e-09) + (((_2160 * _2409) + _2372) * _2386))) * _2386;
        float _4422 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2421 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2395 / ((_2399 * _2399) * 3.141590118408203125));
        float _2422 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
        _2347 = (((_2408 * cbLight._m0[_2357].x) * _2421) * _2422) + _2283;
        _2349 = (((_2408 * cbLight._m0[_2357].y) * _2421) * _2422) + _2284;
        _2351 = (((_2408 * cbLight._m0[_2357].z) * _2421) * _2422) + _2285;
    }
    float _2457;
    float _2459;
    float _2461;
    if (_2086)
    {
        _2457 = _2347;
        _2459 = _2349;
        _2461 = _2351;
    }
    else
    {
        uint _2468 = _1992 + 3u;
        uint _2472 = _1992 + 11u;
        float _2486 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2468].w)) * _746) * 0.949999988079071044921875);
        float _2487 = _2486 * _2486;
        float _2488 = cbLight._m0[_2468].x + _822;
        float _2489 = cbLight._m0[_2468].y + _823;
        float _2490 = cbLight._m0[_2468].z + _824;
        float _2494 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
        float _2495 = _2494 * _2488;
        float _2496 = _2494 * _2489;
        float _2497 = _2494 * _2490;
        float _2498 = dot(vec3(_743, _744, _745), vec3(cbLight._m0[_2468].xyz));
        float _4438 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2501 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2502 = dot(vec3(_743, _744, _745), vec3(_2495, _2496, _2497));
        float _4449 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2506 = dot(vec3(cbLight._m0[_2468].xyz), vec3(_2495, _2496, _2497));
        float _4460 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2510 = _2487 * _2487;
        float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
        float _2523 = (exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2524 = 1.0 - _2487;
        float _2534 = (0.5 / (((_2160 * ((_2501 * _2524) + _2487)) + 9.9999999392252902907785028219223e-09) + (((_2160 * _2524) + _2487) * _2501))) * _2501;
        float _4471 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2536 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
        float _2537 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
        _2457 = (((_2523 * cbLight._m0[_2472].x) * _2536) * _2537) + _2347;
        _2459 = (((_2523 * cbLight._m0[_2472].y) * _2536) * _2537) + _2349;
        _2461 = (((_2523 * cbLight._m0[_2472].z) * _2536) * _2537) + _2351;
    }
    float _2672;
    float _2674;
    float _2676;
    float _2678;
    float _2680;
    float _2682;
    if (_1990.y == 0u)
    {
        float _2612 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2613 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2612;
        float _2614 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2612;
        float _2615 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2612;
        uvec4 _2627 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2628 = _2627.x;
        uint _2639 = uint((float(_2627.y) * floor(float(uint(cbSceneParam._m0[85u].y * _843) / _2628))) + floor(float(uint(cbSceneParam._m0[85u].x * _842) / _2628)));
        float _2649 = (log2(_2615 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2650 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        uint _2653 = uint(isnan(14.0) ? _2650 : (isnan(_2650) ? 14.0 : min(_2650, 14.0)));
        uvec4 _2658 = texelFetch(g_lightClusterGridBuffer, int(((_2653 << 2u) + (_2639 << 6u)) >> 2u));
        uint _2659 = _2658.x;
        uint _2660 = _2627.z;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        if (((((1u << ((_2660 >> 4u) & 15u)) + 4294967295u) & _2659) == 0u) || ((_2660 & 240u) == 0u))
        {
            _2760 = 0.0;
            _2762 = 0.0;
            _2764 = 0.0;
            _2766 = 0.0;
            _2768 = 0.0;
            _2770 = 0.0;
        }
        else
        {
            float _2761;
            float _2763;
            float _2765;
            float _2767;
            float _2769;
            float _2771;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            float _2916 = 0.0;
            float _2917 = 0.0;
            float _2918 = 0.0;
            uint _2919 = 0u;
            uint _2928;
            bool _2929;
            for (;;)
            {
                _2928 = texelFetch(g_lightClassification, int((((_2653 << 5u) + (_2639 << 9u)) + (_2919 << 2u)) >> 2u)).x;
                _2929 = _2928 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2929)
                {
                    frontier_phi_66_pred = _2913;
                    frontier_phi_66_pred_1 = _2918;
                    frontier_phi_66_pred_2 = _2917;
                    frontier_phi_66_pred_3 = _2916;
                    frontier_phi_66_pred_4 = _2915;
                    frontier_phi_66_pred_5 = _2914;
                }
                else
                {
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    uint _3064;
                    _3058 = _2913;
                    _3059 = _2914;
                    _3060 = _2915;
                    _3061 = _2916;
                    _3062 = _2917;
                    _3063 = _2918;
                    _3064 = _2928;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    for (;;)
                    {
                        uint _3068 = uint(findLSB(_3064)) + (_2919 << 5u);
                        uint _3065 = (_3064 + 4294967295u) & _3064;
                        uint _3070 = _3068 * 48u;
                        vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3070)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 3u)).x));
                        uint _3090 = (_3068 * 48u) + 4u;
                        vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3090)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 3u)).x));
                        uint _3109 = (_3068 * 48u) + 8u;
                        vec3 _3120 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x));
                        float _3124 = _3084.x - _2613;
                        float _3125 = _3084.y - _2614;
                        float _3126 = _3084.z - _2615;
                        float _3127 = dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126));
                        float _3130 = inversesqrt(_3127);
                        float _3131 = _3130 * _3124;
                        float _3132 = _3130 * _3125;
                        float _3133 = _3130 * _3126;
                        float _3134 = dot(vec3(_861, _864, _867), vec3(_3131, _3132, _3133));
                        float _3139 = 1.0 - (_3127 * _3084.w);
                        float _4497 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3140 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3141 = sqrt(_3127) * _3103.w;
                        float _3144 = 1.39999997615814208984375 / (_3141 + 1.39999997615814208984375);
                        float _3145 = _3144 * _3144;
                        float _3148 = ((1.0 - _3145) * _3134) + _3145;
                        float _3151 = _3141 * _3141;
                        float _3155 = ((isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))) * _3140) / ((_3151 * 0.699999988079071044921875) + 1.0);
                        float _3159 = (-0.0) - _2613;
                        float _3160 = (-0.0) - _2614;
                        float _3161 = (-0.0) - _2615;
                        float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
                        float _3166 = _3165 * _3159;
                        float _3167 = _3165 * _3160;
                        float _3168 = _3165 * _3161;
                        float _3176 = exp2(log2(1.0 / ((_3151 * 3.5) + 5.0)) * 0.25);
                        float _3177 = 1.0 - _921;
                        float _3184 = sqrt(1.0 - ((1.0 - (_3177 * _3177)) * (1.0 - (_3176 * _3176))));
                        float _3185 = _3184 * _3184;
                        float _3186 = _3185 * _3185;
                        float _3187 = _3166 + _3131;
                        float _3188 = _3167 + _3132;
                        float _3189 = _3168 + _3133;
                        float _3193 = inversesqrt(dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189)));
                        float _3197 = dot(vec3(_861, _864, _867), vec3(_3166, _3167, _3168));
                        float _4513 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3200 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                        float _3201 = dot(vec3(_861, _864, _867), vec3(_3193 * _3187, _3193 * _3188, _3193 * _3189));
                        float _4524 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3204 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                        float _3208 = ((_3204 * _3204) * (_3186 + (-1.0))) + 1.0;
                        float _3209 = _3144 * _3185;
                        float _3210 = _3209 * _3209;
                        float _3213 = ((1.0 - _3210) * _3134) + _3210;
                        float _4535 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3214 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                        float _3215 = 1.0 - _3185;
                        float _3225 = (0.5 / (((_3214 * ((_3200 * _3215) + _3185)) + 9.9999999392252902907785028219223e-09) + (((_3214 * _3215) + _3185) * _3200))) * _3214;
                        float _4546 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3236 = (((_3186 * 3.1415927410125732421875) * (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) / ((_3208 * _3208) * ((_3151 * 2.1991131305694580078125) + 3.141590118408203125))) * _3140;
                        _2988 = (_3155 * _3103.x) + _3061;
                        _2989 = (_3155 * _3103.y) + _3062;
                        _2990 = (_3155 * _3103.z) + _3063;
                        _2985 = (_3236 * _3120.x) + _3058;
                        _2986 = (_3236 * _3120.y) + _3059;
                        _2987 = (_3236 * _3120.z) + _3060;
                        if (_3065 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3058 = _2985;
                            _3059 = _2986;
                            _3060 = _2987;
                            _3061 = _2988;
                            _3062 = _2989;
                            _3063 = _2990;
                            _3064 = _3065;
                        }
                    }
                    frontier_phi_66_pred = _2985;
                    frontier_phi_66_pred_1 = _2990;
                    frontier_phi_66_pred_2 = _2989;
                    frontier_phi_66_pred_3 = _2988;
                    frontier_phi_66_pred_4 = _2987;
                    frontier_phi_66_pred_5 = _2986;
                }
                _2761 = frontier_phi_66_pred;
                _2771 = frontier_phi_66_pred_1;
                _2769 = frontier_phi_66_pred_2;
                _2767 = frontier_phi_66_pred_3;
                _2765 = frontier_phi_66_pred_4;
                _2763 = frontier_phi_66_pred_5;
                uint _2920 = _2919 + 1u;
                if (_2920 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2913 = _2761;
                    _2914 = _2763;
                    _2915 = _2765;
                    _2916 = _2767;
                    _2917 = _2769;
                    _2918 = _2771;
                    _2919 = _2920;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2760 = _2761;
            _2762 = _2763;
            _2764 = _2765;
            _2766 = _2767;
            _2768 = _2769;
            _2770 = _2771;
        }
        uvec4 _2774 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2775 = _2774.z;
        uint _2777 = (_2775 >> 8u) & 15u;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        if (((4294967295u << _2777) & _2659) == 0u)
        {
            _2881 = _2760;
            _2883 = _2762;
            _2885 = _2764;
            _2887 = _2766;
            _2889 = _2768;
            _2891 = _2770;
        }
        else
        {
            float _2906 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
            float _2907 = _2906 * _2613;
            float _2908 = _2906 * _2614;
            float _2909 = _2906 * _2615;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2777 < ((_2775 >> 12u) & 15u))
            {
                float _2882;
                float _2884;
                float _2886;
                float _2888;
                float _2890;
                float _2892;
                float _3041 = _2760;
                float _3042 = _2762;
                float _3043 = _2764;
                float _3044 = _2766;
                float _3045 = _2768;
                float _3046 = _2770;
                uint _3047 = _2777;
                uint _3056;
                bool _3057;
                for (;;)
                {
                    _3056 = texelFetch(g_lightClassification, int((((_2653 << 5u) + (_2639 << 9u)) + (_3047 << 2u)) >> 2u)).x;
                    _3057 = _3056 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3057)
                    {
                        frontier_phi_77_pred = _3046;
                        frontier_phi_77_pred_1 = _3045;
                        frontier_phi_77_pred_2 = _3044;
                        frontier_phi_77_pred_3 = _3043;
                        frontier_phi_77_pred_4 = _3042;
                        frontier_phi_77_pred_5 = _3041;
                    }
                    else
                    {
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3263 = _3041;
                        float _3264 = _3042;
                        float _3265 = _3043;
                        float _3266 = _3044;
                        float _3267 = _3045;
                        float _3268 = _3046;
                        uint _3269 = _3056;
                        uint _3270;
                        vec4 _3295;
                        float _3296;
                        vec4 _3311;
                        vec3 _3323;
                        vec4 _3338;
                        vec4 _3353;
                        float _3400;
                        bool _3401;
                        for (;;)
                        {
                            uint _3280 = ((_3047 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3269));
                            _3270 = (_3269 + 4294967295u) & _3269;
                            uint _3282 = _3280 * 40u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            _3296 = _3295.w;
                            uint _3298 = (_3280 * 40u) + 4u;
                            _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            uint _3313 = (_3280 * 40u) + 8u;
                            _3323 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x));
                            uint _3325 = (_3280 * 40u) + 16u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            uint _3340 = (_3280 * 40u) + 20u;
                            _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            uint _3356 = (_3280 * 40u) + 24u;
                            vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            uint _3375 = (_3280 * 40u) + 28u;
                            vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            _3400 = fma(_2615, _3388.z, fma(_2614, _3388.y, _3388.x * _2613)) + _3388.w;
                            _3401 = !((fma(_2615, _3369.z, fma(_2614, _3369.y, _3369.x * _2613)) + _3369.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3401)
                            {
                                float _3428 = _3295.x - _2613;
                                float _3429 = _3295.y - _2614;
                                float _3430 = _3295.z - _2615;
                                float _3431 = dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430));
                                float _3434 = inversesqrt(_3431);
                                float _3435 = _3434 * _3428;
                                float _3436 = _3434 * _3429;
                                float _3437 = _3434 * _3430;
                                float _3441 = 1.0 - (_3431 / (_3296 * _3296));
                                float _4557 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3442 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3446 = sqrt(_3431) * _3311.w;
                                float _3448 = 1.39999997615814208984375 / (_3446 + 1.39999997615814208984375);
                                float _3449 = _3448 * _3448;
                                float _3452 = ((1.0 - _3449) * dot(vec3(_3435, _3436, _3437), vec3(_861, _864, _867))) + _3449;
                                float _3455 = _3446 * _3446;
                                float _3459 = (fma(_2615, _3338.z, fma(_2614, _3338.y, _3338.x * _2613)) + _3338.w) / _3400;
                                float _3460 = (fma(_2615, _3353.z, fma(_2614, _3353.y, _3353.x * _2613)) + _3353.w) / _3400;
                                float _3464 = 1.0 - dot(vec2(_3459, _3460), vec2(_3459, _3460));
                                float _4573 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3465 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3466 = _3465 * (((isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0))) * _3442) / ((_3455 * 0.699999988079071044921875) + 1.0));
                                float _3478 = exp2(log2(1.0 / ((_3455 * 3.5) + 5.0)) * 0.25);
                                float _3479 = 1.0 - _921;
                                float _3486 = sqrt(1.0 - ((1.0 - (_3479 * _3479)) * (1.0 - (_3478 * _3478))));
                                float _3487 = _3486 * _3486;
                                float _3488 = _3487 * _3487;
                                float _3489 = _3435 - _2907;
                                float _3490 = _3436 - _2908;
                                float _3491 = _3437 - _2909;
                                float _3495 = inversesqrt(dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491)));
                                float _3499 = dot(vec3(_861, _864, _867), vec3((-0.0) - _2907, (-0.0) - _2908, (-0.0) - _2909));
                                float _4584 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3502 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                                float _3503 = dot(vec3(_861, _864, _867), vec3(_3495 * _3489, _3495 * _3490, _3495 * _3491));
                                float _4595 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3506 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3510 = ((_3506 * _3506) * (_3488 + (-1.0))) + 1.0;
                                float _3511 = _3448 * _3487;
                                float _3512 = _3511 * _3511;
                                float _3518 = ((1.0 - _3512) * dot(vec3(_861, _864, _867), vec3(_3435, _3436, _3437))) + _3512;
                                float _4606 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3519 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3520 = 1.0 - _3487;
                                float _3530 = (0.5 / (((_3519 * ((_3502 * _3520) + _3487)) + 9.9999999392252902907785028219223e-09) + (((_3519 * _3520) + _3487) * _3502))) * _3519;
                                float _4617 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3540 = (_3465 * _3442) * (((_3488 * 3.1415927410125732421875) * (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) / ((_3510 * _3510) * ((_3455 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3466 * _3311.y;
                                frontier_phi_83_pred_1 = _3466 * _3311.x;
                                frontier_phi_83_pred_2 = _3540 * _3323.z;
                                frontier_phi_83_pred_3 = _3540 * _3323.y;
                                frontier_phi_83_pred_4 = _3540 * _3323.x;
                                frontier_phi_83_pred_5 = _3466 * _3311.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3548 = frontier_phi_83_pred;
                            _3547 = frontier_phi_83_pred_1;
                            _3546 = frontier_phi_83_pred_2;
                            _3545 = frontier_phi_83_pred_3;
                            _3544 = frontier_phi_83_pred_4;
                            _3549 = frontier_phi_83_pred_5;
                            _3253 = _3547 + _3266;
                            _3254 = _3548 + _3267;
                            _3255 = _3549 + _3268;
                            _3250 = _3544 + _3263;
                            _3251 = _3545 + _3264;
                            _3252 = _3546 + _3265;
                            if (_3270 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3270;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3255;
                        frontier_phi_77_pred_1 = _3254;
                        frontier_phi_77_pred_2 = _3253;
                        frontier_phi_77_pred_3 = _3252;
                        frontier_phi_77_pred_4 = _3251;
                        frontier_phi_77_pred_5 = _3250;
                    }
                    _2892 = frontier_phi_77_pred;
                    _2890 = frontier_phi_77_pred_1;
                    _2888 = frontier_phi_77_pred_2;
                    _2886 = frontier_phi_77_pred_3;
                    _2884 = frontier_phi_77_pred_4;
                    _2882 = frontier_phi_77_pred_5;
                    uint _3048 = _3047 + 1u;
                    if (_3048 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3041 = _2882;
                        _3042 = _2884;
                        _3043 = _2886;
                        _3044 = _2888;
                        _3045 = _2890;
                        _3046 = _2892;
                        _3047 = _3048;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2886;
                frontier_phi_58_59_ladder_1 = _2892;
                frontier_phi_58_59_ladder_2 = _2890;
                frontier_phi_58_59_ladder_3 = _2888;
                frontier_phi_58_59_ladder_4 = _2884;
                frontier_phi_58_59_ladder_5 = _2882;
            }
            else
            {
                frontier_phi_58_59_ladder = _2764;
                frontier_phi_58_59_ladder_1 = _2770;
                frontier_phi_58_59_ladder_2 = _2768;
                frontier_phi_58_59_ladder_3 = _2766;
                frontier_phi_58_59_ladder_4 = _2762;
                frontier_phi_58_59_ladder_5 = _2760;
            }
            _2881 = frontier_phi_58_59_ladder_5;
            _2883 = frontier_phi_58_59_ladder_4;
            _2885 = frontier_phi_58_59_ladder;
            _2887 = frontier_phi_58_59_ladder_3;
            _2889 = frontier_phi_58_59_ladder_2;
            _2891 = frontier_phi_58_59_ladder_1;
        }
        float _2896 = isnan(1.0) ? _905 : (isnan(_905) ? 1.0 : min(_905, 1.0));
        _2672 = (_2896 * _2887) + _2124;
        _2674 = (_2896 * _2889) + _2126;
        _2676 = (_2896 * _2891) + _2128;
        _2678 = ((_2881 * 0.039999999105930328369140625) * _2896) + _2457;
        _2680 = ((_2883 * 0.039999999105930328369140625) * _2896) + _2459;
        _2682 = ((_2885 * 0.039999999105930328369140625) * _2896) + _2461;
    }
    else
    {
        _2672 = _2124;
        _2674 = _2126;
        _2676 = _2128;
        _2678 = _2457;
        _2680 = _2459;
        _2682 = _2461;
    }
    float _4633 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _4644 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _4655 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _2699 = ((isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2672 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _905))) + ((_2678 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1743)) * cbPerFrame._m0[3u].x);
    float _2700 = ((isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2674 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _905))) + ((_2680 + ((isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))) * _1743)) * cbPerFrame._m0[3u].x);
    float _2701 = ((isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2676 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _905))) + ((_2682 + ((isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))) * _1743)) * cbPerFrame._m0[3u].x);
    uint _2702 = _880 + 6u;
    float _2710 = _842 / cbSceneParam._m0[86u].x;
    float _2711 = _843 / cbSceneParam._m0[86u].y;
    vec4 _2725 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2710, _2711, (log2((isnan(cbSceneParam._m0[77u].w) ? _765 : (isnan(_765) ? cbSceneParam._m0[77u].w : min(_765, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2727 = _2725.x;
    float _2728 = _2725.y;
    float _2729 = _2725.z;
    float _2730 = _2725.w;
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    if (_765 > cbSceneParam._m0[78u].w)
    {
        float _2785 = isnan(_765) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _765 : min(cbSceneParam._m0[80u].w, _765));
        float _2786 = _2785 / _765;
        float _2797 = _2786 * _815;
        float _2798 = _816 * _2786;
        float _2799 = (-0.0) - _2798;
        float _2801 = _2786 * _817;
        float _2803 = (cbSceneParam._m0[77u].w * _2799) / _2785;
        float _2804 = _2803 + cbSceneParam._m0[79u].w;
        float _2805 = cbSceneParam._m0[79u].w - _2798;
        float _2811 = sqrt(((_2797 * _2797) + (_2798 * _2798)) + (_2801 * _2801));
        float _2814 = (1.0 - (cbSceneParam._m0[77u].w / _2785)) * _2811;
        float _2819 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2821 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2998;
        if (abs((_2799 - _2803) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2998 = ((((_2804 > 0.0) ? exp2(_2819 * _2804) : (2.0 - exp2(_2821 * _2804))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2814;
        }
        else
        {
            float _2942 = 1.0 / cbSceneParam._m0[80u].x;
            float _2943 = isnan(_2805) ? _2804 : (isnan(_2804) ? _2805 : max(_2804, _2805));
            float _2944 = isnan(_2805) ? _2804 : (isnan(_2804) ? _2805 : min(_2804, _2805));
            float _2953 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : min(_2943, 0.0));
            float _2954 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : min(_2944, 0.0));
            _2998 = ((abs(_2811 / _2799) * cbSceneParam._m0[80u].y) * ((((_2953 - _2954) * 2.0) - ((exp2(_2819 * (isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0)))) - exp2(_2819 * (isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0))))) * _2942)) - ((exp2(_2821 * _2953) - exp2(_2821 * _2954)) * _2942))) + (_2814 * cbSceneParam._m0[80u].z);
        }
        vec4 _3000 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2710, _2711, 1.0), 0.0);
        float _3009 = exp2((_2998 * (-1.44269502162933349609375)) * (1.0 - _3000.w));
        float _3010 = log2(_3009);
        float _3026 = log2(_2730);
        _2823 = (exp2(_3026 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].x)) * _3000.x) / cbSceneParam._m0[78u].x)) + _2727;
        _2825 = (exp2(_3026 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].y)) * _3000.y) / cbSceneParam._m0[78u].y)) + _2728;
        _2827 = (exp2(_3026 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].z)) * _3000.z) / cbSceneParam._m0[78u].z)) + _2729;
        _2829 = _3009 * _2730;
    }
    else
    {
        _2823 = _2727;
        _2825 = _2728;
        _2827 = _2729;
        _2829 = _2730;
    }
    bool _3036;
    vec4 _2839;
    vec4 _2861;
    float _2863;
    float _2867;
    float _2868;
    float _2869;
    float _2870;
    bool _2880;
    for (;;)
    {
        _2839 = cbMatDynParam._m0[0u];
        float _2841 = roundEven(_2839.y);
        bool _2842 = _2841 == 3.0;
        float _2843 = log2(_2829);
        float _2850 = exp2(_2843 * cbSceneParam._m0[78u].x) * _2699;
        float _2851 = exp2(_2843 * cbSceneParam._m0[78u].y) * _2700;
        float _2852 = exp2(_2843 * cbSceneParam._m0[78u].z) * _2701;
        float _2859 = _831 + (-0.5);
        _2861 = cbMtdParam._m0[1u];
        _2863 = _2861.y * _2859;
        float _2866 = (_2841 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2867 = _2866 * (_2842 ? _2850 : (_2850 + (cbSceneParam._m0[72u].w * _2823)));
        _2868 = _2866 * (_2842 ? _2851 : (_2851 + (cbSceneParam._m0[72u].w * _2825)));
        _2869 = _2866 * (_2842 ? _2852 : (_2852 + (cbSceneParam._m0[72u].w * _2827)));
        _2870 = _2859 * 0.999000012874603271484375;
        _2880 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2880)
        {
            if ((cbInstanceData._m0[_880 + 7u].x + _2870) < 0.5)
            {
                _3036 = true;
                break;
            }
        }
        uint _2977 = _881 + uint(_2839.w);
        if ((cbInstanceData._m0[_2977].w < 1.0) && ((cbInstanceData._m0[_2977].w + _2870) < 0.5))
        {
            _3036 = true;
            break;
        }
        if ((_2863 + 1.0) < _2861.x)
        {
            _3036 = true;
            break;
        }
        _3036 = false;
        break;
    }
    float _3241;
    if (_3036)
    {
        discard_state = true;
        _3241 = 0.0;
    }
    else
    {
        _3241 = cbInstanceData._m0[_2702].w;
    }
    SV_Target.x = _2867;
    SV_Target.y = _2868;
    SV_Target.z = _2869;
    SV_Target.w = _3241;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2702].w;
    discard_exit();
}


