#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1201;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _250 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _256 = _250.x * cbMtdParam._m0[10u].x;
    float _257 = _250.y * cbMtdParam._m0[10u].y;
    float _258 = _250.z * cbMtdParam._m0[10u].z;
    vec4 _277 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _324 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x;
    float _335 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _324)) + 1.0;
    float _3534 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _336 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _343 = (_336 * ((_277.x * cbMtdParam._m0[11u].x) - _256)) + _256;
    float _344 = (_336 * ((_277.y * cbMtdParam._m0[11u].y) - _257)) + _257;
    float _345 = (_336 * ((_277.z * cbMtdParam._m0[11u].z) - _258)) + _258;
    vec4 _364 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _394 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _324)) + 1.0;
    float _3545 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    float _402 = (_395 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _403 = (_395 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _404 = (_395 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    vec4 _421 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _446 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _324)) + 1.0;
    float _3556 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _454 = (_447 * ((_421.x * cbMtdParam._m0[13u].x) - _402)) + _402;
    float _455 = (_447 * ((_421.y * cbMtdParam._m0[13u].y) - _403)) + _403;
    float _456 = (_447 * ((_421.z * cbMtdParam._m0[13u].z) - _404)) + _404;
    vec4 _477 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _506 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3567 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _507 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _514 = (_507 * ((_477.x * cbMtdParam._m0[14u].x) - _454)) + _454;
    float _515 = (_507 * ((_477.y * cbMtdParam._m0[14u].y) - _455)) + _455;
    float _516 = (_507 * ((_477.z * cbMtdParam._m0[14u].z) - _456)) + _456;
    vec4 _532 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _554 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _572 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _574 = _572.x;
    float _575 = _572.y;
    float _578 = cbMtdParam._m0[16u].w * _572.z;
    float _581 = (((cbMtdParam._m0[17u].x * _554.z) - _578) * _336) + _578;
    vec4 _594 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _603 = (((cbMtdParam._m0[17u].y * _594.z) - _581) * _395) + _581;
    vec4 _616 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _625 = (((cbMtdParam._m0[17u].z * _616.z) - _603) * _447) + _603;
    float _630 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_532.z * cbMtdParam._m0[16u].z) - _625)) + _625;
    float _635 = ((_554.x - _574) * _336) + _574;
    float _636 = ((_554.y - _575) * _336) + _575;
    float _641 = ((_594.x - _635) * _395) + _635;
    float _642 = ((_594.y - _636) * _395) + _636;
    float _651 = ((((_616.x - _641) * _447) + _641) * 2.0) + (-1.0);
    float _652 = ((((_616.y - _642) * _447) + _642) * 2.0) + (-1.0);
    float _653 = dot(vec2(_651, _652), vec2(_651, _652));
    float _3578 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _658 = sqrt(1.0 - (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))));
    float _664 = ((((_532.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _651;
    float _665 = ((((_532.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _652;
    float _668 = fma(_658, _220 * NORMAL.x, fma(_665, _227 * TANGENT.x, (_213 * _205) * _664));
    float _671 = fma(_658, _220 * NORMAL.y, fma(_665, _227 * TANGENT.y, (_213 * _206) * _664));
    float _674 = fma(_658, _220 * NORMAL.z, fma(_665, _227 * TANGENT.z, (_213 * _207) * _664));
    float _678 = inversesqrt(dot(vec3(_668, _671, _674), vec3(_668, _671, _674)));
    float _679 = _678 * _668;
    float _680 = _678 * _671;
    float _681 = _678 * _674;
    float _3589 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _682 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _3600 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _3611 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _3622 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _701 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _751 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _741);
    float _752 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _741);
    float _753 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _741);
    float _757 = inversesqrt(dot(vec3(_751, _752, _753), vec3(_751, _752, _753)));
    float _758 = _751 * _757;
    float _759 = _752 * _757;
    float _760 = _753 * _757;
    float _766 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _767 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _785 = fma(_681, cbSceneParam._m0[5u].z, fma(_680, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _679));
    float _788 = fma(_681, cbSceneParam._m0[6u].z, fma(_680, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _679));
    float _791 = fma(_681, cbSceneParam._m0[7u].z, fma(_680, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _679));
    uint _804 = uint(roundEven(NORMAL.w)) * 13u;
    uint _806 = (_804 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _812 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0)))) * cbInstanceData._m0[_806].x;
    float _813 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0)))) * cbInstanceData._m0[_806].y;
    float _814 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) * cbInstanceData._m0[_806].z;
    float _3633 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _3644 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _816 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _3655 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _817 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    vec4 _826 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _766, cbSceneParam._m0[86u].y * _767));
    float _829 = _826.x * TEXCOORD_5.w;
    float _830 = dot(vec3(_679, _680, _681), vec3(_758, _759, _760));
    float _833 = _830 * 2.0;
    float _837 = (_833 * _679) - _758;
    float _838 = (_833 * _680) - _759;
    float _839 = (_833 * _681) - _760;
    float _843 = abs(dot(vec3(_758, _759, _760), vec3(_679, _680, _681)));
    float _3666 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _845 = sqrt(_682);
    float _858 = exp2((_845 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_845 * 3.0));
    float _890 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1200;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _925 = fma(_898, cbModelParam._m0[26u].z, fma(_894, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _890));
        float _929 = fma(_898, cbModelParam._m0[27u].z, fma(_894, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _890));
        float _933 = fma(_898, cbModelParam._m0[28u].z, fma(_894, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _890));
        float _958 = _890 + _679;
        float _959 = _894 + _680;
        float _960 = _898 + _681;
        float _970 = fma(_960, cbModelParam._m0[26u].z, fma(_959, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _958)) - _925;
        float _971 = fma(_960, cbModelParam._m0[27u].z, fma(_959, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _958)) - _929;
        float _972 = fma(_960, cbModelParam._m0[28u].z, fma(_959, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _958)) - _933;
        float _976 = inversesqrt(dot(vec3(_970, _971, _972), vec3(_970, _971, _972)));
        float _989 = ((_976 * _970) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_925 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _990 = ((_976 * _971) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_929 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _991 = ((_976 * _972) / cbModelParam._m0[34u].z) + ((((((_933 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        float _1028 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_994.x + (-0.5));
        float _1030 = _1028 * (_994.y + (-0.5));
        float _1031 = _1028 * (_994.z + (-0.5));
        float _1038 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_1001.x + (-0.5));
        float _1040 = _1038 * (_1001.y + (-0.5));
        float _1041 = _1038 * (_1001.z + (-0.5));
        float _1048 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1008.x + (-0.5));
        float _1050 = _1048 * (_1008.y + (-0.5));
        float _1051 = _1048 * (_1008.z + (-0.5));
        float _1058 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1015.x + (-0.5));
        float _1060 = _1058 * (_1015.y + (-0.5));
        float _1061 = _1058 * (_1015.z + (-0.5));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = _1029 * 0.5;
        float _1066 = _1039 * 0.5;
        float _1067 = _1049 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1082 = (dot(vec3(_679, _680, _681), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1092 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3714 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1094 + 1.0))) + _1099) * _1062;
        float _1109 = _1030 * 0.5;
        float _1110 = _1040 * 0.5;
        float _1111 = _1050 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_679, _680, _681), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3747 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1136 + 1.0))) + _1141) * _1063;
        float _1151 = _1031 * 0.5;
        float _1152 = _1041 * 0.5;
        float _1153 = _1051 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_679, _680, _681), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _3780 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1178 + 1.0))) + _1183) * _1064;
        _1200 = _1031;
        _1202 = _1030;
        _1203 = _1029;
        _1204 = _1041;
        _1205 = _1040;
        _1206 = _1039;
        _1207 = _1051;
        _1208 = _1050;
        _1209 = _1049;
        _1210 = _1064;
        _1211 = _1063;
        _1212 = _1062;
        _1213 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1214 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
        _1215 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
    }
    else
    {
        _1200 = _1201;
        _1202 = _1201;
        _1203 = _1201;
        _1204 = _1201;
        _1205 = _1201;
        _1206 = _1201;
        _1207 = _1201;
        _1208 = _1201;
        _1209 = _1201;
        _1210 = _1201;
        _1211 = _1201;
        _1212 = _1201;
        _1213 = 0.0;
        _1214 = 0.0;
        _1215 = 0.0;
    }
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1241 = fma(_898, cbModelParam._m0[30u].z, fma(_894, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _890));
        float _1245 = fma(_898, cbModelParam._m0[31u].z, fma(_894, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _890));
        float _1249 = fma(_898, cbModelParam._m0[32u].z, fma(_894, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _890));
        float _1272 = _890 + _679;
        float _1273 = _894 + _680;
        float _1274 = _898 + _681;
        float _1284 = fma(_1274, cbModelParam._m0[30u].z, fma(_1273, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1272)) - _1241;
        float _1285 = fma(_1274, cbModelParam._m0[31u].z, fma(_1273, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1272)) - _1245;
        float _1286 = fma(_1274, cbModelParam._m0[32u].z, fma(_1273, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1272)) - _1249;
        float _1290 = inversesqrt(dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286)));
        float _1303 = ((_1290 * _1284) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1241 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1304 = ((_1290 * _1285) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1245 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1305 = ((_1290 * _1286) / cbModelParam._m0[35u].z) + ((((((_1249 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        float _1340 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1307.x + (-0.5));
        float _1342 = _1340 * (_1307.y + (-0.5));
        float _1343 = _1340 * (_1307.z + (-0.5));
        float _1350 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1314.x + (-0.5));
        float _1352 = _1350 * (_1314.y + (-0.5));
        float _1353 = _1350 * (_1314.z + (-0.5));
        float _1360 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1321.x + (-0.5));
        float _1362 = _1360 * (_1321.y + (-0.5));
        float _1363 = _1360 * (_1321.z + (-0.5));
        float _1370 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1328.x + (-0.5));
        float _1372 = _1370 * (_1328.y + (-0.5));
        float _1373 = _1370 * (_1328.z + (-0.5));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = _1341 * 0.5;
        float _1378 = _1351 * 0.5;
        float _1379 = _1361 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_679, _680, _681), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _3843 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1404 + 1.0))) + _1409) * _1374;
        float _1419 = _1342 * 0.5;
        float _1420 = _1352 * 0.5;
        float _1421 = _1362 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_679, _680, _681), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _3876 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1446 + 1.0))) + _1451) * _1375;
        float _1461 = _1343 * 0.5;
        float _1462 = _1353 * 0.5;
        float _1463 = _1363 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_679, _680, _681), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _3909 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1488 + 1.0))) + _1493) * _1376;
        _1510 = _1343;
        _1511 = _1342;
        _1512 = _1341;
        _1513 = _1353;
        _1514 = _1352;
        _1515 = _1351;
        _1516 = _1363;
        _1517 = _1362;
        _1518 = _1361;
        _1519 = _1376;
        _1520 = _1375;
        _1521 = _1374;
        _1522 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
        _1523 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
        _1524 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
    }
    else
    {
        _1510 = _1201;
        _1511 = _1201;
        _1512 = _1201;
        _1513 = _1201;
        _1514 = _1201;
        _1515 = _1201;
        _1516 = _1201;
        _1517 = _1201;
        _1518 = _1201;
        _1519 = _1201;
        _1520 = _1201;
        _1521 = _1201;
        _1522 = 0.0;
        _1523 = 0.0;
        _1524 = 0.0;
    }
    float _1534 = (cbModelParam._m0[1u].x * (_1522 - _1213)) + _1213;
    float _1535 = (cbModelParam._m0[1u].x * (_1523 - _1214)) + _1214;
    float _1536 = (cbModelParam._m0[1u].x * (_1524 - _1215)) + _1215;
    float _1557 = fma(_1536, cbSceneParam._m0[89u].z, fma(_1535, cbSceneParam._m0[89u].y, _1534 * cbSceneParam._m0[89u].x));
    float _1560 = fma(_1536, cbSceneParam._m0[90u].z, fma(_1535, cbSceneParam._m0[90u].y, _1534 * cbSceneParam._m0[90u].x));
    float _1563 = fma(_1536, cbSceneParam._m0[91u].z, fma(_1535, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1534));
    float _1578 = _837 * 0.5;
    float _1579 = _838 * 0.5;
    float _1580 = _839 * 0.5;
    float _1581 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1512, _1515, _1518, _1521));
    float _1584 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1511, _1514, _1517, _1520));
    float _1587 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1510, _1513, _1516, _1519));
    float _1621;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1594 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1200, _1204, _1207, _1210));
        float _1598 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1202, _1205, _1208, _1211));
        float _1602 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1203, _1206, _1209, _1212));
        float _1609 = dot(vec4(cbModelParam._m0[39u]), vec4(_1578, _1579, _1580, 1.0));
        _1621 = dot(vec3(isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1609) ? 0.0 : (isnan(0.0) ? _1609 : max(0.0, _1609))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1621 = 1.0;
    }
    float _1632;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1623 = dot(vec4(cbModelParam._m0[40u]), vec4(_1578, _1579, _1580, 1.0));
        _1632 = dot(vec3(isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1623) ? 0.0 : (isnan(0.0) ? _1623 : max(0.0, _1623))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1632 = 1.0;
    }
    float _1636 = (_1632 * cbModelParam._m0[1u].x) + (_1621 * (1.0 - cbModelParam._m0[1u].x));
    float _1646 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _682);
    float _1647 = isnan(_1646) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1646 : min(cbModelParam._m0[25u].z, _1646));
    float _1727;
    float _1729;
    float _1731;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1694 = fma(_898, cbModelParam._m0[13u].z, fma(_894, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _890)) + cbModelParam._m0[13u].w;
        float _1698 = fma(_898, cbModelParam._m0[14u].z, fma(_894, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _890)) + cbModelParam._m0[14u].w;
        float _1702 = fma(_898, cbModelParam._m0[15u].z, fma(_894, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _890)) + cbModelParam._m0[15u].w;
        float _1705 = fma(_839, cbModelParam._m0[13u].z, fma(_838, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _837));
        float _1708 = fma(_839, cbModelParam._m0[14u].z, fma(_838, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _837));
        float _1711 = fma(_839, cbModelParam._m0[15u].z, fma(_838, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _837));
        float _1739;
        if (_1705 > 0.0)
        {
            _1739 = abs((1.0 - _1694) / _1705);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1694 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1739 = frontier_phi_14_12_ladder;
        }
        float _1963;
        if (_1708 > 0.0)
        {
            _1963 = abs((1.0 - _1698) / _1708);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1698 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1963 = frontier_phi_23_19_ladder;
        }
        float _2209;
        if (_1711 > 0.0)
        {
            _2209 = abs((1.0 - _1702) / _1711);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1702 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2209 = frontier_phi_35_30_ladder;
        }
        float _2211 = isnan(_1963) ? _1739 : (isnan(_1739) ? _1963 : min(_1739, _1963));
        float _2212 = isnan(_2209) ? _2211 : (isnan(_2211) ? _2209 : min(_2211, _2209));
        float _2216 = (_2212 * _1705) + _1694;
        float _2217 = (_2212 * _1708) + _1698;
        float _2218 = (_2212 * _1711) + _1702;
        float _2219 = _2212 * 9.9999997473787516355514526367188e-05;
        float _2221 = (-1.0) - _2219;
        float _2223 = _2219 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2218 > _2223) || ((_2218 < _2221) || ((_2217 > _2223) || ((_2217 < _2221) || ((_2216 < _2221) || (_2216 > _2223))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2342 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2218, cbModelParam._m0[9u].z, fma(_2217, cbModelParam._m0[9u].y, _2216 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2218, cbModelParam._m0[10u].z, fma(_2217, cbModelParam._m0[10u].y, _2216 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2218, cbModelParam._m0[11u].z, fma(_2217, cbModelParam._m0[11u].y, _2216 * cbModelParam._m0[11u].x))), _1647);
            frontier_phi_13_35_ladder = _2342.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2342.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2342.x * cbModelParam._m0[1u].y;
        }
        _1727 = frontier_phi_13_35_ladder_2;
        _1729 = frontier_phi_13_35_ladder_1;
        _1731 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1715 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_837, _838, _839), _1647);
        _1727 = _1715.x * cbModelParam._m0[1u].y;
        _1729 = _1715.y * cbModelParam._m0[1u].y;
        _1731 = _1715.z * cbModelParam._m0[1u].y;
    }
    float _1735 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _682);
    float _1736 = isnan(_1735) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1735 : min(cbModelParam._m0[25u].w, _1735));
    float _1827;
    float _1829;
    float _1831;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1791 = fma(_898, cbModelParam._m0[21u].z, fma(_894, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _890)) + cbModelParam._m0[21u].w;
        float _1795 = fma(_898, cbModelParam._m0[22u].z, fma(_894, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _890)) + cbModelParam._m0[22u].w;
        float _1799 = fma(_898, cbModelParam._m0[23u].z, fma(_894, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _890)) + cbModelParam._m0[23u].w;
        float _1802 = fma(_839, cbModelParam._m0[21u].z, fma(_838, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _837));
        float _1805 = fma(_839, cbModelParam._m0[22u].z, fma(_838, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _837));
        float _1808 = fma(_839, cbModelParam._m0[23u].z, fma(_838, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _837));
        float _1968;
        if (_1802 > 0.0)
        {
            _1968 = abs((1.0 - _1791) / _1802);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1791 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1968 = frontier_phi_25_21_ladder;
        }
        float _2236;
        if (_1805 > 0.0)
        {
            _2236 = abs((1.0 - _1795) / _1805);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1795 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2236 = frontier_phi_37_32_ladder;
        }
        float _2441;
        if (_1808 > 0.0)
        {
            _2441 = abs((1.0 - _1799) / _1808);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1799 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2441 = frontier_phi_46_43_ladder;
        }
        float _2443 = isnan(_2236) ? _1968 : (isnan(_1968) ? _2236 : min(_1968, _2236));
        float _2444 = isnan(_2441) ? _2443 : (isnan(_2443) ? _2441 : min(_2443, _2441));
        float _2448 = (_2444 * _1802) + _1791;
        float _2449 = (_2444 * _1805) + _1795;
        float _2450 = (_2444 * _1808) + _1799;
        float _2451 = _2444 * 9.9999997473787516355514526367188e-05;
        float _2452 = (-1.0) - _2451;
        float _2454 = _2451 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2450 > _2454) || ((_2450 < _2452) || ((_2449 > _2454) || ((_2449 < _2452) || ((_2448 < _2452) || (_2448 > _2454))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2649 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2450, cbModelParam._m0[17u].z, fma(_2449, cbModelParam._m0[17u].y, _2448 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2450, cbModelParam._m0[18u].z, fma(_2449, cbModelParam._m0[18u].y, _2448 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2450, cbModelParam._m0[19u].z, fma(_2449, cbModelParam._m0[19u].y, _2448 * cbModelParam._m0[19u].x))), _1736);
            frontier_phi_22_46_ladder = _2649.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2649.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2649.x * cbModelParam._m0[1u].z;
        }
        _1827 = frontier_phi_22_46_ladder_2;
        _1829 = frontier_phi_22_46_ladder_1;
        _1831 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1811 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_837, _838, _839), _1736);
        _1827 = _1811.x * cbModelParam._m0[1u].z;
        _1829 = _1811.y * cbModelParam._m0[1u].z;
        _1831 = _1811.z * cbModelParam._m0[1u].z;
    }
    float _1843 = ((((1.0 - _858) * ((_845 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_858 * _845)) * _829;
    float _1844 = _1843 * ((cbModelParam._m0[1u].w * (_1827 - _1727)) + _1727);
    float _1845 = _1843 * ((cbModelParam._m0[1u].w * (_1829 - _1729)) + _1729);
    float _1846 = _1843 * ((cbModelParam._m0[1u].w * (_1831 - _1731)) + _1731);
    float _1849 = fma(_1846, cbSceneParam._m0[89u].z, fma(_1845, cbSceneParam._m0[89u].y, _1844 * cbSceneParam._m0[89u].x));
    float _1852 = fma(_1846, cbSceneParam._m0[90u].z, fma(_1845, cbSceneParam._m0[90u].y, _1844 * cbSceneParam._m0[90u].x));
    float _1855 = fma(_1846, cbSceneParam._m0[91u].z, fma(_1845, cbSceneParam._m0[91u].y, _1844 * cbSceneParam._m0[91u].x));
    vec4 _1863 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_766, _767));
    float _1865 = _1863.w;
    float _1877 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1865);
    float _1878 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1865);
    float _1879 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1865);
    uvec4 _1883 = floatBitsToUint(cbInstanceData._m0[_804 + 5u]);
    uint _1885 = _1883.x * 14u;
    uint _1886 = _1885 + 13u;
    float _1893 = _829 + (-1.0);
    float _1898 = (cbLight._m0[_1886].x * _1893) + 1.0;
    float _1899 = (cbLight._m0[_1886].y * _1893) + 1.0;
    float _1900 = (cbLight._m0[_1886].z * _1893) + 1.0;
    float _1901 = (cbLight._m0[_1886].w * _1893) + 1.0;
    uint _1902 = _1885 + 5u;
    float _1908 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
    uint _1912 = _1885 + 4u;
    float _1922 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
    uint _1926 = _1885 | 1u;
    float _1937 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_679, _680, _681));
    float _1940 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_679, _680, _681));
    float _4045 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _4056 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1945 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * 0.3183098733425140380859375;
    float _1947 = (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * 0.3183098733425140380859375;
    float _1954 = ((cbLight._m0[_1902].x * _1908) * _1947) + (((cbLight._m0[_1912].x * _1877) * _1922) * _1945);
    float _1955 = ((_1908 * cbLight._m0[_1902].y) * _1947) + (((cbLight._m0[_1912].y * _1878) * _1922) * _1945);
    float _1956 = ((_1908 * cbLight._m0[_1902].z) * _1947) + (((cbLight._m0[_1912].z * _1879) * _1922) * _1945);
    uvec4 _1960 = floatBitsToUint(cbLight._m0[_1885 + 12u]);
    bool _1962 = _1960.x == 0u;
    float _1973;
    float _1975;
    float _1977;
    if (_1962)
    {
        _1973 = _1954;
        _1975 = _1955;
        _1977 = _1956;
    }
    else
    {
        uint _1981 = _1885 + 6u;
        float _1997 = (dot(vec3(cbLight._m0[_1885 + 2u].xyz), vec3(_679, _680, _681)) * 0.5) + 0.5;
        float _1998 = _1997 * _1997;
        float _4067 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _1999 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _2000 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
        _1973 = (((cbLight._m0[_1981].x * 0.3183098733425140380859375) * _1999) * _2000) + _1954;
        _1975 = (((cbLight._m0[_1981].y * 0.3183098733425140380859375) * _1999) * _2000) + _1955;
        _1977 = (((cbLight._m0[_1981].z * 0.3183098733425140380859375) * _1999) * _2000) + _1956;
    }
    bool _1980 = _1960.y == 0u;
    float _2018;
    float _2020;
    float _2022;
    if (_1980)
    {
        _2018 = _1973;
        _2020 = _1975;
        _2022 = _1977;
    }
    else
    {
        uint _2180 = _1885 + 7u;
        float _2196 = (dot(vec3(cbLight._m0[_1885 + 3u].xyz), vec3(_679, _680, _681)) * 0.5) + 0.5;
        float _2197 = _2196 * _2196;
        float _4083 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2198 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _2199 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
        _2018 = (((cbLight._m0[_2180].x * 0.3183098733425140380859375) * _2198) * _2199) + _1973;
        _2020 = (((cbLight._m0[_2180].y * 0.3183098733425140380859375) * _2198) * _2199) + _1975;
        _2022 = (((cbLight._m0[_2180].z * 0.3183098733425140380859375) * _2198) * _2199) + _1977;
    }
    uint _2025 = _1885 + 8u;
    float _2038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1885].w)) * _682) * 0.949999988079071044921875);
    float _2039 = _2038 * _2038;
    float _2040 = cbLight._m0[_1885].x + _758;
    float _2041 = cbLight._m0[_1885].y + _759;
    float _2042 = cbLight._m0[_1885].z + _760;
    float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
    float _2047 = _2046 * _2040;
    float _2048 = _2046 * _2041;
    float _2049 = _2046 * _2042;
    float _2050 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_1885].xyz));
    float _4099 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _4110 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _2054 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _2055 = dot(vec3(_679, _680, _681), vec3(_2047, _2048, _2049));
    float _4121 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _2059 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_2047, _2048, _2049));
    float _4132 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2063 = _2039 * _2039;
    float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
    float _2078 = (exp2(log2(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2079 = 1.0 - _2039;
    float _2090 = (0.5 / (((_2054 * ((_2053 * _2079) + _2039)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2079) + _2039) * _2053))) * _2053;
    float _4143 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2092 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
    uint _2106 = _1885 + 9u;
    float _2117 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1926].w)) * _682) * 0.949999988079071044921875);
    float _2118 = _2117 * _2117;
    float _2119 = cbLight._m0[_1926].x + _758;
    float _2120 = cbLight._m0[_1926].y + _759;
    float _2121 = cbLight._m0[_1926].z + _760;
    float _2125 = inversesqrt(dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121)));
    float _2126 = _2125 * _2119;
    float _2127 = _2125 * _2120;
    float _2128 = _2125 * _2121;
    float _2129 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_1926].xyz));
    float _4154 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2132 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _2133 = dot(vec3(_679, _680, _681), vec3(_2126, _2127, _2128));
    float _4165 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2136 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _2137 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_2126, _2127, _2128));
    float _4176 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2141 = _2118 * _2118;
    float _2145 = ((_2136 * _2136) * (_2141 + (-1.0))) + 1.0;
    float _2154 = (exp2(log2(1.0 - (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2155 = 1.0 - _2118;
    float _2165 = (0.5 / (((_2054 * ((_2132 * _2155) + _2118)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2155) + _2118) * _2132))) * _2132;
    float _4187 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2167 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2141 / ((_2145 * _2145) * 3.141590118408203125));
    float _2177 = (((_2154 * cbLight._m0[_2106].x) * _2167) * _1908) + ((((cbLight._m0[_2025].x * _1877) * _2078) * _2092) * _1922);
    float _2178 = (((_2154 * cbLight._m0[_2106].y) * _2167) * _1908) + ((((cbLight._m0[_2025].y * _1878) * _2078) * _2092) * _1922);
    float _2179 = (((_2154 * cbLight._m0[_2106].z) * _2167) * _1908) + ((((cbLight._m0[_2025].z * _1879) * _2078) * _2092) * _1922);
    float _2241;
    float _2243;
    float _2245;
    if (_1962)
    {
        _2241 = _2177;
        _2243 = _2178;
        _2245 = _2179;
    }
    else
    {
        uint _2247 = _1885 + 2u;
        uint _2251 = _1885 + 10u;
        float _2265 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2247].w)) * _682) * 0.949999988079071044921875);
        float _2266 = _2265 * _2265;
        float _2267 = cbLight._m0[_2247].x + _758;
        float _2268 = cbLight._m0[_2247].y + _759;
        float _2269 = cbLight._m0[_2247].z + _760;
        float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
        float _2274 = _2273 * _2267;
        float _2275 = _2273 * _2268;
        float _2276 = _2273 * _2269;
        float _2277 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_2247].xyz));
        float _4198 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2280 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2281 = dot(vec3(_679, _680, _681), vec3(_2274, _2275, _2276));
        float _4209 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2284 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2285 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_2274, _2275, _2276));
        float _4220 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2289 = _2266 * _2266;
        float _2293 = ((_2284 * _2284) * (_2289 + (-1.0))) + 1.0;
        float _2302 = (exp2(log2(1.0 - (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2303 = 1.0 - _2266;
        float _2313 = (0.5 / (((_2054 * ((_2280 * _2303) + _2266)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2303) + _2266) * _2280))) * _2280;
        float _4231 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2315 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2289 / ((_2293 * _2293) * 3.141590118408203125));
        float _2316 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
        _2241 = (((_2302 * cbLight._m0[_2251].x) * _2315) * _2316) + _2177;
        _2243 = (((_2302 * cbLight._m0[_2251].y) * _2315) * _2316) + _2178;
        _2245 = (((_2302 * cbLight._m0[_2251].z) * _2315) * _2316) + _2179;
    }
    float _2351;
    float _2353;
    float _2355;
    if (_1980)
    {
        _2351 = _2241;
        _2353 = _2243;
        _2355 = _2245;
    }
    else
    {
        uint _2362 = _1885 + 3u;
        uint _2366 = _1885 + 11u;
        float _2380 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2362].w)) * _682) * 0.949999988079071044921875);
        float _2381 = _2380 * _2380;
        float _2382 = cbLight._m0[_2362].x + _758;
        float _2383 = cbLight._m0[_2362].y + _759;
        float _2384 = cbLight._m0[_2362].z + _760;
        float _2388 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
        float _2389 = _2388 * _2382;
        float _2390 = _2388 * _2383;
        float _2391 = _2388 * _2384;
        float _2392 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_2362].xyz));
        float _4247 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2395 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2396 = dot(vec3(_679, _680, _681), vec3(_2389, _2390, _2391));
        float _4258 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2399 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2400 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_2389, _2390, _2391));
        float _4269 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2404 = _2381 * _2381;
        float _2408 = ((_2399 * _2399) * (_2404 + (-1.0))) + 1.0;
        float _2417 = (exp2(log2(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2418 = 1.0 - _2381;
        float _2428 = (0.5 / (((_2054 * ((_2395 * _2418) + _2381)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2418) + _2381) * _2395))) * _2395;
        float _4280 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2430 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2404 / ((_2408 * _2408) * 3.141590118408203125));
        float _2431 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
        _2351 = (((_2417 * cbLight._m0[_2366].x) * _2430) * _2431) + _2241;
        _2353 = (((_2417 * cbLight._m0[_2366].y) * _2430) * _2431) + _2243;
        _2355 = (((_2417 * cbLight._m0[_2366].z) * _2430) * _2431) + _2245;
    }
    float _2566;
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    float _2576;
    if (_1883.y == 0u)
    {
        float _2506 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2507 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2506;
        float _2508 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2506;
        float _2509 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2506;
        uvec4 _2521 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2522 = _2521.x;
        uint _2533 = uint((float(_2521.y) * floor(float(uint(cbSceneParam._m0[85u].y * _767) / _2522))) + floor(float(uint(cbSceneParam._m0[85u].x * _766) / _2522)));
        float _2543 = (log2(_2509 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2544 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        uint _2547 = uint(isnan(14.0) ? _2544 : (isnan(_2544) ? 14.0 : min(_2544, 14.0)));
        uvec4 _2552 = texelFetch(g_lightClusterGridBuffer, int(((_2547 << 2u) + (_2533 << 6u)) >> 2u));
        uint _2553 = _2552.x;
        uint _2554 = _2521.z;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        if (((((1u << ((_2554 >> 4u) & 15u)) + 4294967295u) & _2553) == 0u) || ((_2554 & 240u) == 0u))
        {
            _2654 = 0.0;
            _2656 = 0.0;
            _2658 = 0.0;
            _2660 = 0.0;
            _2662 = 0.0;
            _2664 = 0.0;
        }
        else
        {
            float _2655;
            float _2657;
            float _2659;
            float _2661;
            float _2663;
            float _2665;
            float _2799 = 0.0;
            float _2800 = 0.0;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            uint _2805 = 0u;
            uint _2814;
            bool _2815;
            for (;;)
            {
                _2814 = texelFetch(g_lightClassification, int((((_2547 << 5u) + (_2533 << 9u)) + (_2805 << 2u)) >> 2u)).x;
                _2815 = _2814 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2815)
                {
                    frontier_phi_61_pred = _2799;
                    frontier_phi_61_pred_1 = _2804;
                    frontier_phi_61_pred_2 = _2803;
                    frontier_phi_61_pred_3 = _2802;
                    frontier_phi_61_pred_4 = _2801;
                    frontier_phi_61_pred_5 = _2800;
                }
                else
                {
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    uint _2929;
                    _2923 = _2799;
                    _2924 = _2800;
                    _2925 = _2801;
                    _2926 = _2802;
                    _2927 = _2803;
                    _2928 = _2804;
                    _2929 = _2814;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    for (;;)
                    {
                        uint _2933 = uint(findLSB(_2929)) + (_2805 << 5u);
                        uint _2930 = (_2929 + 4294967295u) & _2929;
                        uint _2935 = _2933 * 48u;
                        vec4 _2949 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2935)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 3u)).x));
                        uint _2955 = (_2933 * 48u) + 4u;
                        vec4 _2968 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2955)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 3u)).x));
                        uint _2974 = (_2933 * 48u) + 8u;
                        vec3 _2985 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2974)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 2u)).x));
                        float _2989 = _2949.x - _2507;
                        float _2990 = _2949.y - _2508;
                        float _2991 = _2949.z - _2509;
                        float _2992 = dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991));
                        float _2995 = inversesqrt(_2992);
                        float _2996 = _2995 * _2989;
                        float _2997 = _2995 * _2990;
                        float _2998 = _2995 * _2991;
                        float _2999 = dot(vec3(_785, _788, _791), vec3(_2996, _2997, _2998));
                        float _3004 = 1.0 - (_2992 * _2949.w);
                        float _4306 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3005 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                        float _3006 = sqrt(_2992) * _2968.w;
                        float _3009 = 1.39999997615814208984375 / (_3006 + 1.39999997615814208984375);
                        float _3010 = _3009 * _3009;
                        float _3013 = ((1.0 - _3010) * _2999) + _3010;
                        float _3016 = _3006 * _3006;
                        float _3020 = ((isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0))) * _3005) / ((_3016 * 0.699999988079071044921875) + 1.0);
                        float _3024 = (-0.0) - _2507;
                        float _3025 = (-0.0) - _2508;
                        float _3026 = (-0.0) - _2509;
                        float _3030 = inversesqrt(dot(vec3(_3024, _3025, _3026), vec3(_3024, _3025, _3026)));
                        float _3031 = _3030 * _3024;
                        float _3032 = _3030 * _3025;
                        float _3033 = _3030 * _3026;
                        float _3041 = exp2(log2(1.0 / ((_3016 * 3.5) + 5.0)) * 0.25);
                        float _3042 = 1.0 - _845;
                        float _3049 = sqrt(1.0 - ((1.0 - (_3042 * _3042)) * (1.0 - (_3041 * _3041))));
                        float _3050 = _3049 * _3049;
                        float _3051 = _3050 * _3050;
                        float _3052 = _3031 + _2996;
                        float _3053 = _3032 + _2997;
                        float _3054 = _3033 + _2998;
                        float _3058 = inversesqrt(dot(vec3(_3052, _3053, _3054), vec3(_3052, _3053, _3054)));
                        float _3062 = dot(vec3(_785, _788, _791), vec3(_3031, _3032, _3033));
                        float _4322 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3065 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _3066 = dot(vec3(_785, _788, _791), vec3(_3058 * _3052, _3058 * _3053, _3058 * _3054));
                        float _4333 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3069 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                        float _3073 = ((_3069 * _3069) * (_3051 + (-1.0))) + 1.0;
                        float _3074 = _3009 * _3050;
                        float _3075 = _3074 * _3074;
                        float _3078 = ((1.0 - _3075) * _2999) + _3075;
                        float _4344 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3079 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                        float _3080 = 1.0 - _3050;
                        float _3090 = (0.5 / (((_3079 * ((_3065 * _3080) + _3050)) + 9.9999999392252902907785028219223e-09) + (((_3079 * _3080) + _3050) * _3065))) * _3079;
                        float _4355 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3101 = (((_3051 * 3.1415927410125732421875) * (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) / ((_3073 * _3073) * ((_3016 * 2.1991131305694580078125) + 3.141590118408203125))) * _3005;
                        _2858 = (_3020 * _2968.x) + _2926;
                        _2859 = (_3020 * _2968.y) + _2927;
                        _2860 = (_3020 * _2968.z) + _2928;
                        _2855 = (_3101 * _2985.x) + _2923;
                        _2856 = (_3101 * _2985.y) + _2924;
                        _2857 = (_3101 * _2985.z) + _2925;
                        if (_2930 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2923 = _2855;
                            _2924 = _2856;
                            _2925 = _2857;
                            _2926 = _2858;
                            _2927 = _2859;
                            _2928 = _2860;
                            _2929 = _2930;
                        }
                    }
                    frontier_phi_61_pred = _2855;
                    frontier_phi_61_pred_1 = _2860;
                    frontier_phi_61_pred_2 = _2859;
                    frontier_phi_61_pred_3 = _2858;
                    frontier_phi_61_pred_4 = _2857;
                    frontier_phi_61_pred_5 = _2856;
                }
                _2655 = frontier_phi_61_pred;
                _2665 = frontier_phi_61_pred_1;
                _2663 = frontier_phi_61_pred_2;
                _2661 = frontier_phi_61_pred_3;
                _2659 = frontier_phi_61_pred_4;
                _2657 = frontier_phi_61_pred_5;
                uint _2806 = _2805 + 1u;
                if (_2806 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2799 = _2655;
                    _2800 = _2657;
                    _2801 = _2659;
                    _2802 = _2661;
                    _2803 = _2663;
                    _2804 = _2665;
                    _2805 = _2806;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2654 = _2655;
            _2656 = _2657;
            _2658 = _2659;
            _2660 = _2661;
            _2662 = _2663;
            _2664 = _2665;
        }
        uvec4 _2668 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2669 = _2668.z;
        uint _2671 = (_2669 >> 8u) & 15u;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        if (((4294967295u << _2671) & _2553) == 0u)
        {
            _2767 = _2654;
            _2769 = _2656;
            _2771 = _2658;
            _2773 = _2660;
            _2775 = _2662;
            _2777 = _2664;
        }
        else
        {
            float _2792 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
            float _2793 = _2792 * _2507;
            float _2794 = _2792 * _2508;
            float _2795 = _2792 * _2509;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2671 < ((_2669 >> 12u) & 15u))
            {
                float _2768;
                float _2770;
                float _2772;
                float _2774;
                float _2776;
                float _2778;
                float _2906 = _2654;
                float _2907 = _2656;
                float _2908 = _2658;
                float _2909 = _2660;
                float _2910 = _2662;
                float _2911 = _2664;
                uint _2912 = _2671;
                uint _2921;
                bool _2922;
                for (;;)
                {
                    _2921 = texelFetch(g_lightClassification, int((((_2547 << 5u) + (_2533 << 9u)) + (_2912 << 2u)) >> 2u)).x;
                    _2922 = _2921 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2922)
                    {
                        frontier_phi_67_pred = _2909;
                        frontier_phi_67_pred_1 = _2910;
                        frontier_phi_67_pred_2 = _2911;
                        frontier_phi_67_pred_3 = _2908;
                        frontier_phi_67_pred_4 = _2907;
                        frontier_phi_67_pred_5 = _2906;
                    }
                    else
                    {
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3119 = _2906;
                        float _3120 = _2907;
                        float _3121 = _2908;
                        float _3122 = _2909;
                        float _3123 = _2910;
                        float _3124 = _2911;
                        uint _3125 = _2921;
                        uint _3126;
                        vec4 _3151;
                        float _3152;
                        vec4 _3167;
                        vec3 _3179;
                        vec4 _3194;
                        vec4 _3209;
                        float _3256;
                        bool _3257;
                        for (;;)
                        {
                            uint _3136 = ((_2912 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3125));
                            _3126 = (_3125 + 4294967295u) & _3125;
                            uint _3138 = _3136 * 40u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            _3152 = _3151.w;
                            uint _3154 = (_3136 * 40u) + 4u;
                            _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            uint _3169 = (_3136 * 40u) + 8u;
                            _3179 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x));
                            uint _3181 = (_3136 * 40u) + 16u;
                            _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            uint _3196 = (_3136 * 40u) + 20u;
                            _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            uint _3212 = (_3136 * 40u) + 24u;
                            vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            uint _3231 = (_3136 * 40u) + 28u;
                            vec4 _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            _3256 = fma(_2509, _3244.z, fma(_2508, _3244.y, _3244.x * _2507)) + _3244.w;
                            _3257 = !((fma(_2509, _3225.z, fma(_2508, _3225.y, _3225.x * _2507)) + _3225.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3257)
                            {
                                float _3284 = _3151.x - _2507;
                                float _3285 = _3151.y - _2508;
                                float _3286 = _3151.z - _2509;
                                float _3287 = dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286));
                                float _3290 = inversesqrt(_3287);
                                float _3291 = _3290 * _3284;
                                float _3292 = _3290 * _3285;
                                float _3293 = _3290 * _3286;
                                float _3297 = 1.0 - (_3287 / (_3152 * _3152));
                                float _4366 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3298 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3302 = sqrt(_3287) * _3167.w;
                                float _3304 = 1.39999997615814208984375 / (_3302 + 1.39999997615814208984375);
                                float _3305 = _3304 * _3304;
                                float _3308 = ((1.0 - _3305) * dot(vec3(_3291, _3292, _3293), vec3(_785, _788, _791))) + _3305;
                                float _3311 = _3302 * _3302;
                                float _3315 = (fma(_2509, _3194.z, fma(_2508, _3194.y, _3194.x * _2507)) + _3194.w) / _3256;
                                float _3316 = (fma(_2509, _3209.z, fma(_2508, _3209.y, _3209.x * _2507)) + _3209.w) / _3256;
                                float _3320 = 1.0 - dot(vec2(_3315, _3316), vec2(_3315, _3316));
                                float _4382 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3321 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3322 = _3321 * (((isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0))) * _3298) / ((_3311 * 0.699999988079071044921875) + 1.0));
                                float _3334 = exp2(log2(1.0 / ((_3311 * 3.5) + 5.0)) * 0.25);
                                float _3335 = 1.0 - _845;
                                float _3342 = sqrt(1.0 - ((1.0 - (_3335 * _3335)) * (1.0 - (_3334 * _3334))));
                                float _3343 = _3342 * _3342;
                                float _3344 = _3343 * _3343;
                                float _3345 = _3291 - _2793;
                                float _3346 = _3292 - _2794;
                                float _3347 = _3293 - _2795;
                                float _3351 = inversesqrt(dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347)));
                                float _3355 = dot(vec3(_785, _788, _791), vec3((-0.0) - _2793, (-0.0) - _2794, (-0.0) - _2795));
                                float _4393 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3358 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                                float _3359 = dot(vec3(_785, _788, _791), vec3(_3351 * _3345, _3351 * _3346, _3351 * _3347));
                                float _4404 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3362 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3366 = ((_3362 * _3362) * (_3344 + (-1.0))) + 1.0;
                                float _3367 = _3304 * _3343;
                                float _3368 = _3367 * _3367;
                                float _3374 = ((1.0 - _3368) * dot(vec3(_785, _788, _791), vec3(_3291, _3292, _3293))) + _3368;
                                float _4415 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3375 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3376 = 1.0 - _3343;
                                float _3386 = (0.5 / (((_3375 * ((_3358 * _3376) + _3343)) + 9.9999999392252902907785028219223e-09) + (((_3375 * _3376) + _3343) * _3358))) * _3375;
                                float _4426 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3396 = (_3321 * _3298) * (((_3344 * 3.1415927410125732421875) * (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) / ((_3366 * _3366) * ((_3311 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3396 * _3179.x;
                                frontier_phi_73_pred_1 = _3396 * _3179.y;
                                frontier_phi_73_pred_2 = _3322 * _3167.z;
                                frontier_phi_73_pred_3 = _3322 * _3167.y;
                                frontier_phi_73_pred_4 = _3322 * _3167.x;
                                frontier_phi_73_pred_5 = _3396 * _3179.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3400 = frontier_phi_73_pred;
                            _3401 = frontier_phi_73_pred_1;
                            _3405 = frontier_phi_73_pred_2;
                            _3404 = frontier_phi_73_pred_3;
                            _3403 = frontier_phi_73_pred_4;
                            _3402 = frontier_phi_73_pred_5;
                            _3109 = _3403 + _3122;
                            _3110 = _3404 + _3123;
                            _3111 = _3405 + _3124;
                            _3106 = _3400 + _3119;
                            _3107 = _3401 + _3120;
                            _3108 = _3402 + _3121;
                            if (_3126 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3126;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3109;
                        frontier_phi_67_pred_1 = _3110;
                        frontier_phi_67_pred_2 = _3111;
                        frontier_phi_67_pred_3 = _3108;
                        frontier_phi_67_pred_4 = _3107;
                        frontier_phi_67_pred_5 = _3106;
                    }
                    _2774 = frontier_phi_67_pred;
                    _2776 = frontier_phi_67_pred_1;
                    _2778 = frontier_phi_67_pred_2;
                    _2772 = frontier_phi_67_pred_3;
                    _2770 = frontier_phi_67_pred_4;
                    _2768 = frontier_phi_67_pred_5;
                    uint _2913 = _2912 + 1u;
                    if (_2913 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2906 = _2768;
                        _2907 = _2770;
                        _2908 = _2772;
                        _2909 = _2774;
                        _2910 = _2776;
                        _2911 = _2778;
                        _2912 = _2913;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2776;
                frontier_phi_55_56_ladder_1 = _2778;
                frontier_phi_55_56_ladder_2 = _2774;
                frontier_phi_55_56_ladder_3 = _2772;
                frontier_phi_55_56_ladder_4 = _2770;
                frontier_phi_55_56_ladder_5 = _2768;
            }
            else
            {
                frontier_phi_55_56_ladder = _2662;
                frontier_phi_55_56_ladder_1 = _2664;
                frontier_phi_55_56_ladder_2 = _2660;
                frontier_phi_55_56_ladder_3 = _2658;
                frontier_phi_55_56_ladder_4 = _2656;
                frontier_phi_55_56_ladder_5 = _2654;
            }
            _2767 = frontier_phi_55_56_ladder_5;
            _2769 = frontier_phi_55_56_ladder_4;
            _2771 = frontier_phi_55_56_ladder_3;
            _2773 = frontier_phi_55_56_ladder_2;
            _2775 = frontier_phi_55_56_ladder;
            _2777 = frontier_phi_55_56_ladder_1;
        }
        float _2782 = isnan(1.0) ? _829 : (isnan(_829) ? 1.0 : min(_829, 1.0));
        _2566 = (_2782 * _2773) + _2018;
        _2568 = (_2782 * _2775) + _2020;
        _2570 = (_2782 * _2777) + _2022;
        _2572 = ((_2767 * 0.039999999105930328369140625) * _2782) + _2351;
        _2574 = ((_2769 * 0.039999999105930328369140625) * _2782) + _2353;
        _2576 = ((_2771 * 0.039999999105930328369140625) * _2782) + _2355;
    }
    else
    {
        _2566 = _2018;
        _2568 = _2020;
        _2570 = _2022;
        _2572 = _2351;
        _2574 = _2353;
        _2576 = _2355;
    }
    float _4442 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _4453 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _4464 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    uint _2596 = _804 + 6u;
    float _2604 = _766 / cbSceneParam._m0[86u].x;
    float _2605 = _767 / cbSceneParam._m0[86u].y;
    vec4 _2619 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2604, _2605, (log2((isnan(cbSceneParam._m0[77u].w) ? _701 : (isnan(_701) ? cbSceneParam._m0[77u].w : min(_701, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2621 = _2619.x;
    float _2622 = _2619.y;
    float _2623 = _2619.z;
    float _2624 = _2619.w;
    float _2717;
    float _2719;
    float _2721;
    float _2723;
    if (_701 > cbSceneParam._m0[78u].w)
    {
        float _2679 = isnan(_701) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _701 : min(cbSceneParam._m0[80u].w, _701));
        float _2680 = _2679 / _701;
        float _2691 = _2680 * _751;
        float _2692 = _752 * _2680;
        float _2693 = (-0.0) - _2692;
        float _2695 = _2680 * _753;
        float _2697 = (cbSceneParam._m0[77u].w * _2693) / _2679;
        float _2698 = _2697 + cbSceneParam._m0[79u].w;
        float _2699 = cbSceneParam._m0[79u].w - _2692;
        float _2705 = sqrt(((_2691 * _2691) + (_2692 * _2692)) + (_2695 * _2695));
        float _2708 = (1.0 - (cbSceneParam._m0[77u].w / _2679)) * _2705;
        float _2713 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2715 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2868;
        if (abs((_2693 - _2697) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2868 = ((((_2698 > 0.0) ? exp2(_2713 * _2698) : (2.0 - exp2(_2715 * _2698))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2708;
        }
        else
        {
            float _2828 = 1.0 / cbSceneParam._m0[80u].x;
            float _2829 = isnan(_2699) ? _2698 : (isnan(_2698) ? _2699 : max(_2698, _2699));
            float _2830 = isnan(_2699) ? _2698 : (isnan(_2698) ? _2699 : min(_2698, _2699));
            float _2839 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : min(_2829, 0.0));
            float _2840 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : min(_2830, 0.0));
            _2868 = ((abs(_2705 / _2693) * cbSceneParam._m0[80u].y) * ((((_2839 - _2840) * 2.0) - ((exp2(_2713 * (isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0)))) - exp2(_2713 * (isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0))))) * _2828)) - ((exp2(_2715 * _2839) - exp2(_2715 * _2840)) * _2828))) + (_2708 * cbSceneParam._m0[80u].z);
        }
        vec4 _2870 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2604, _2605, 1.0), 0.0);
        float _2879 = exp2((_2868 * (-1.44269502162933349609375)) * (1.0 - _2870.w));
        float _2880 = log2(_2879);
        float _2896 = log2(_2624);
        _2717 = (exp2(_2896 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].x)) * _2870.x) / cbSceneParam._m0[78u].x)) + _2621;
        _2719 = (exp2(_2896 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].y)) * _2870.y) / cbSceneParam._m0[78u].y)) + _2622;
        _2721 = (exp2(_2896 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].z)) * _2870.z) / cbSceneParam._m0[78u].z)) + _2623;
        _2723 = _2879 * _2624;
    }
    else
    {
        _2717 = _2621;
        _2719 = _2622;
        _2721 = _2623;
        _2723 = _2624;
    }
    float _2735 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2736 = _2735 == 3.0;
    float _2737 = log2(_2723);
    float _2744 = exp2(_2737 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2566 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _829))) + ((_2572 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1636)) * cbPerFrame._m0[3u].x));
    float _2745 = exp2(_2737 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2568 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _829))) + ((_2574 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1636)) * cbPerFrame._m0[3u].x));
    float _2746 = exp2(_2737 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2570 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _829))) + ((_2576 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1636)) * cbPerFrame._m0[3u].x));
    float _2755 = (_2735 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2755 * (_2736 ? _2744 : (_2744 + (cbSceneParam._m0[72u].w * _2717)));
    SV_Target.y = _2755 * (_2736 ? _2745 : (_2745 + (cbSceneParam._m0[72u].w * _2719)));
    SV_Target.z = _2755 * (_2736 ? _2746 : (_2746 + (cbSceneParam._m0[72u].w * _2721)));
    SV_Target.w = cbInstanceData._m0[_2596].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2596].w;
}


