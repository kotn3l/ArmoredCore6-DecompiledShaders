#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1126;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _236 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _242 = _236.x * cbMtdParam._m0[10u].x;
    float _243 = _236.y * cbMtdParam._m0[10u].y;
    float _244 = _236.z * cbMtdParam._m0[10u].z;
    vec4 _263 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _310 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x;
    float _321 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _310)) + 1.0;
    float _3435 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _322 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
    float _329 = (_322 * ((_263.x * cbMtdParam._m0[11u].x) - _242)) + _242;
    float _330 = (_322 * ((_263.y * cbMtdParam._m0[11u].y) - _243)) + _243;
    float _331 = (_322 * ((_263.z * cbMtdParam._m0[11u].z) - _244)) + _244;
    vec4 _350 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _380 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _310)) + 1.0;
    float _3446 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _381 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    float _388 = (_381 * ((_350.x * cbMtdParam._m0[12u].x) - _329)) + _329;
    float _389 = (_381 * ((_350.y * cbMtdParam._m0[12u].y) - _330)) + _330;
    float _390 = (_381 * ((_350.z * cbMtdParam._m0[12u].z) - _331)) + _331;
    vec4 _407 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _432 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _310)) + 1.0;
    float _3457 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
    vec4 _460 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _468 = ((((_433 * ((_407.x * cbMtdParam._m0[13u].x) - _388)) + _388) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _460.x;
    float _471 = ((((_433 * ((_407.y * cbMtdParam._m0[13u].y) - _389)) + _389) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _460.y;
    float _474 = ((((_433 * ((_407.z * cbMtdParam._m0[13u].z) - _390)) + _390) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _460.z;
    vec4 _486 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _504 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _506 = _504.x;
    float _507 = _504.y;
    float _513 = cbMtdParam._m0[16u].w * _504.z;
    float _516 = (((cbMtdParam._m0[17u].x * _486.z) - _513) * _322) + _513;
    vec4 _529 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _538 = (((cbMtdParam._m0[17u].y * _529.z) - _516) * _381) + _516;
    vec4 _551 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _560 = (((cbMtdParam._m0[17u].z * _551.z) - _538) * _433) + _538;
    float _565 = ((_486.x - _506) * _322) + _506;
    float _566 = ((_486.y - _507) * _322) + _507;
    float _571 = ((_529.x - _565) * _381) + _565;
    float _572 = ((_529.y - _566) * _381) + _566;
    float _581 = ((((_551.x - _571) * _433) + _571) * 2.0) + (-1.0);
    float _583 = ((((_551.y - _572) * _433) + _572) * 2.0) + (-1.0);
    float _584 = dot(vec2(_581, _583), vec2(_581, _583));
    float _3468 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _589 = sqrt(1.0 - (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))));
    float _592 = fma(_589, _206 * NORMAL.x, fma(_583, _213 * TANGENT.x, (_199 * _191) * _581));
    float _595 = fma(_589, _206 * NORMAL.y, fma(_583, _213 * TANGENT.y, (_199 * _192) * _581));
    float _598 = fma(_589, _206 * NORMAL.z, fma(_583, _213 * TANGENT.z, (_199 * _193) * _581));
    float _602 = inversesqrt(dot(vec3(_592, _595, _598), vec3(_592, _595, _598)));
    float _603 = _602 * _592;
    float _604 = _602 * _595;
    float _605 = _602 * _598;
    float _3479 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _606 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
    float _3490 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _3501 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _3512 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _625 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _676 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _666);
    float _677 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _666);
    float _678 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _666);
    float _682 = inversesqrt(dot(vec3(_676, _677, _678), vec3(_676, _677, _678)));
    float _683 = _676 * _682;
    float _684 = _677 * _682;
    float _685 = _678 * _682;
    float _691 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _692 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _710 = fma(_605, cbSceneParam._m0[5u].z, fma(_604, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _603));
    float _713 = fma(_605, cbSceneParam._m0[6u].z, fma(_604, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _603));
    float _716 = fma(_605, cbSceneParam._m0[7u].z, fma(_604, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _603));
    uint _729 = uint(roundEven(NORMAL.w)) * 13u;
    uint _731 = (_729 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _737 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0)))) * cbInstanceData._m0[_731].x;
    float _738 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0)))) * cbInstanceData._m0[_731].y;
    float _739 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0)))) * cbInstanceData._m0[_731].z;
    float _3523 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _740 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _3534 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _3545 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    vec4 _751 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _691, cbSceneParam._m0[86u].y * _692));
    float _754 = _751.x * TEXCOORD_5.w;
    float _755 = dot(vec3(_603, _604, _605), vec3(_683, _684, _685));
    float _758 = _755 * 2.0;
    float _762 = (_758 * _603) - _683;
    float _763 = (_758 * _604) - _684;
    float _764 = (_758 * _605) - _685;
    float _768 = abs(dot(vec3(_683, _684, _685), vec3(_603, _604, _605)));
    float _3556 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _770 = sqrt(_606);
    float _783 = exp2((_770 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_770 * 3.0));
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1125;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _850 = fma(_823, cbModelParam._m0[26u].z, fma(_819, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _815));
        float _854 = fma(_823, cbModelParam._m0[27u].z, fma(_819, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _815));
        float _858 = fma(_823, cbModelParam._m0[28u].z, fma(_819, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _815));
        float _883 = _815 + _603;
        float _884 = _819 + _604;
        float _885 = _823 + _605;
        float _895 = fma(_885, cbModelParam._m0[26u].z, fma(_884, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _883)) - _850;
        float _896 = fma(_885, cbModelParam._m0[27u].z, fma(_884, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _883)) - _854;
        float _897 = fma(_885, cbModelParam._m0[28u].z, fma(_884, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _883)) - _858;
        float _901 = inversesqrt(dot(vec3(_895, _896, _897), vec3(_895, _896, _897)));
        float _914 = ((_901 * _895) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_850 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_901 * _896) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_854 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _916 = ((_901 * _897) / cbModelParam._m0[34u].z) + ((((((_858 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        float _953 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_919.x + (-0.5));
        float _955 = _953 * (_919.y + (-0.5));
        float _956 = _953 * (_919.z + (-0.5));
        float _963 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_926.x + (-0.5));
        float _965 = _963 * (_926.y + (-0.5));
        float _966 = _963 * (_926.z + (-0.5));
        float _973 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_933.x + (-0.5));
        float _975 = _973 * (_933.y + (-0.5));
        float _976 = _973 * (_933.z + (-0.5));
        float _983 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_940.x + (-0.5));
        float _985 = _983 * (_940.y + (-0.5));
        float _986 = _983 * (_940.z + (-0.5));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = _954 * 0.5;
        float _991 = _964 * 0.5;
        float _992 = _974 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1007 = (dot(vec3(_603, _604, _605), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3582 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1017 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3593 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3604 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * (_1019 + 1.0))) + _1024) * _987;
        float _1034 = _955 * 0.5;
        float _1035 = _965 * 0.5;
        float _1036 = _975 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_603, _604, _605), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3615 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3626 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3637 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) * (_1061 + 1.0))) + _1066) * _988;
        float _1076 = _956 * 0.5;
        float _1077 = _966 * 0.5;
        float _1078 = _976 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_603, _604, _605), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3648 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3659 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3670 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * (_1103 + 1.0))) + _1108) * _989;
        _1125 = _956;
        _1127 = _955;
        _1128 = _954;
        _1129 = _966;
        _1130 = _965;
        _1131 = _964;
        _1132 = _976;
        _1133 = _975;
        _1134 = _974;
        _1135 = _989;
        _1136 = _988;
        _1137 = _987;
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1139 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
    }
    else
    {
        _1125 = _1126;
        _1127 = _1126;
        _1128 = _1126;
        _1129 = _1126;
        _1130 = _1126;
        _1131 = _1126;
        _1132 = _1126;
        _1133 = _1126;
        _1134 = _1126;
        _1135 = _1126;
        _1136 = _1126;
        _1137 = _1126;
        _1138 = 0.0;
        _1139 = 0.0;
        _1140 = 0.0;
    }
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1166 = fma(_823, cbModelParam._m0[30u].z, fma(_819, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _815));
        float _1170 = fma(_823, cbModelParam._m0[31u].z, fma(_819, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _815));
        float _1174 = fma(_823, cbModelParam._m0[32u].z, fma(_819, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _815));
        float _1197 = _815 + _603;
        float _1198 = _819 + _604;
        float _1199 = _823 + _605;
        float _1209 = fma(_1199, cbModelParam._m0[30u].z, fma(_1198, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1197)) - _1166;
        float _1210 = fma(_1199, cbModelParam._m0[31u].z, fma(_1198, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1197)) - _1170;
        float _1211 = fma(_1199, cbModelParam._m0[32u].z, fma(_1198, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1197)) - _1174;
        float _1215 = inversesqrt(dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211)));
        float _1228 = ((_1215 * _1209) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1166 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1215 * _1210) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1170 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1215 * _1211) / cbModelParam._m0[35u].z) + ((((((_1174 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        float _1265 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1232.x + (-0.5));
        float _1267 = _1265 * (_1232.y + (-0.5));
        float _1268 = _1265 * (_1232.z + (-0.5));
        float _1275 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1239.x + (-0.5));
        float _1277 = _1275 * (_1239.y + (-0.5));
        float _1278 = _1275 * (_1239.z + (-0.5));
        float _1285 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1246.x + (-0.5));
        float _1287 = _1285 * (_1246.y + (-0.5));
        float _1288 = _1285 * (_1246.z + (-0.5));
        float _1295 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1253.x + (-0.5));
        float _1297 = _1295 * (_1253.y + (-0.5));
        float _1298 = _1295 * (_1253.z + (-0.5));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = _1266 * 0.5;
        float _1303 = _1276 * 0.5;
        float _1304 = _1286 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_603, _604, _605), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3711 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _3722 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _3733 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (_1329 + 1.0))) + _1334) * _1299;
        float _1344 = _1267 * 0.5;
        float _1345 = _1277 * 0.5;
        float _1346 = _1287 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_603, _604, _605), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _3744 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _3755 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _3766 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_1371 + 1.0))) + _1376) * _1300;
        float _1386 = _1268 * 0.5;
        float _1387 = _1278 * 0.5;
        float _1388 = _1288 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_603, _604, _605), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _3799 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1413 + 1.0))) + _1418) * _1301;
        _1435 = _1268;
        _1436 = _1267;
        _1437 = _1266;
        _1438 = _1278;
        _1439 = _1277;
        _1440 = _1276;
        _1441 = _1288;
        _1442 = _1287;
        _1443 = _1286;
        _1444 = _1301;
        _1445 = _1300;
        _1446 = _1299;
        _1447 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1448 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
    }
    else
    {
        _1435 = _1126;
        _1436 = _1126;
        _1437 = _1126;
        _1438 = _1126;
        _1439 = _1126;
        _1440 = _1126;
        _1441 = _1126;
        _1442 = _1126;
        _1443 = _1126;
        _1444 = _1126;
        _1445 = _1126;
        _1446 = _1126;
        _1447 = 0.0;
        _1448 = 0.0;
        _1449 = 0.0;
    }
    float _1459 = (cbModelParam._m0[1u].x * (_1447 - _1138)) + _1138;
    float _1460 = (cbModelParam._m0[1u].x * (_1448 - _1139)) + _1139;
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1140)) + _1140;
    float _1482 = fma(_1461, cbSceneParam._m0[89u].z, fma(_1460, cbSceneParam._m0[89u].y, _1459 * cbSceneParam._m0[89u].x));
    float _1485 = fma(_1461, cbSceneParam._m0[90u].z, fma(_1460, cbSceneParam._m0[90u].y, _1459 * cbSceneParam._m0[90u].x));
    float _1488 = fma(_1461, cbSceneParam._m0[91u].z, fma(_1460, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1459));
    float _1503 = _762 * 0.5;
    float _1504 = _763 * 0.5;
    float _1505 = _764 * 0.5;
    float _1506 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1509 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1436, _1439, _1442, _1445));
    float _1512 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1435, _1438, _1441, _1444));
    float _1546;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1519 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1125, _1129, _1132, _1135));
        float _1523 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1127, _1130, _1133, _1136));
        float _1527 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1128, _1131, _1134, _1137));
        float _1534 = dot(vec4(cbModelParam._m0[39u]), vec4(_1503, _1504, _1505, 1.0));
        _1546 = dot(vec3(isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1534) ? 0.0 : (isnan(0.0) ? _1534 : max(0.0, _1534))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1546 = 1.0;
    }
    float _1557;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1548 = dot(vec4(cbModelParam._m0[40u]), vec4(_1503, _1504, _1505, 1.0));
        _1557 = dot(vec3(isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1548) ? 0.0 : (isnan(0.0) ? _1548 : max(0.0, _1548))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1557 = 1.0;
    }
    float _1561 = (_1557 * cbModelParam._m0[1u].x) + (_1546 * (1.0 - cbModelParam._m0[1u].x));
    float _1571 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _606);
    float _1572 = isnan(_1571) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1571 : min(cbModelParam._m0[25u].z, _1571));
    float _1653;
    float _1655;
    float _1657;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1620 = fma(_823, cbModelParam._m0[13u].z, fma(_819, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _815)) + cbModelParam._m0[13u].w;
        float _1624 = fma(_823, cbModelParam._m0[14u].z, fma(_819, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _815)) + cbModelParam._m0[14u].w;
        float _1628 = fma(_823, cbModelParam._m0[15u].z, fma(_819, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _815)) + cbModelParam._m0[15u].w;
        float _1631 = fma(_764, cbModelParam._m0[13u].z, fma(_763, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _762));
        float _1634 = fma(_764, cbModelParam._m0[14u].z, fma(_763, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _762));
        float _1637 = fma(_764, cbModelParam._m0[15u].z, fma(_763, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _762));
        float _1665;
        if (_1631 > 0.0)
        {
            _1665 = abs((1.0 - _1620) / _1631);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1620 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1665 = frontier_phi_14_12_ladder;
        }
        float _1867;
        if (_1634 > 0.0)
        {
            _1867 = abs((1.0 - _1624) / _1634);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1624 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1867 = frontier_phi_23_19_ladder;
        }
        float _2110;
        if (_1637 > 0.0)
        {
            _2110 = abs((1.0 - _1628) / _1637);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1628 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2110 = frontier_phi_35_30_ladder;
        }
        float _2112 = isnan(_1867) ? _1665 : (isnan(_1665) ? _1867 : min(_1665, _1867));
        float _2113 = isnan(_2110) ? _2112 : (isnan(_2112) ? _2110 : min(_2112, _2110));
        float _2117 = (_2113 * _1631) + _1620;
        float _2118 = (_2113 * _1634) + _1624;
        float _2119 = (_2113 * _1637) + _1628;
        float _2120 = _2113 * 9.9999997473787516355514526367188e-05;
        float _2122 = (-1.0) - _2120;
        float _2124 = _2120 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2119 > _2124) || ((_2119 < _2122) || ((_2118 > _2124) || ((_2118 < _2122) || ((_2117 < _2122) || (_2117 > _2124))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2243 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2119, cbModelParam._m0[9u].z, fma(_2118, cbModelParam._m0[9u].y, _2117 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2119, cbModelParam._m0[10u].z, fma(_2118, cbModelParam._m0[10u].y, _2117 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2119, cbModelParam._m0[11u].z, fma(_2118, cbModelParam._m0[11u].y, _2117 * cbModelParam._m0[11u].x))), _1572);
            frontier_phi_13_35_ladder = _2243.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2243.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2243.x * cbModelParam._m0[1u].y;
        }
        _1653 = frontier_phi_13_35_ladder_2;
        _1655 = frontier_phi_13_35_ladder_1;
        _1657 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1641 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_762, _763, _764), _1572);
        _1653 = _1641.x * cbModelParam._m0[1u].y;
        _1655 = _1641.y * cbModelParam._m0[1u].y;
        _1657 = _1641.z * cbModelParam._m0[1u].y;
    }
    float _1661 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _606);
    float _1662 = isnan(_1661) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1661 : min(cbModelParam._m0[25u].w, _1661));
    float _1753;
    float _1755;
    float _1757;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1717 = fma(_823, cbModelParam._m0[21u].z, fma(_819, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _815)) + cbModelParam._m0[21u].w;
        float _1721 = fma(_823, cbModelParam._m0[22u].z, fma(_819, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _815)) + cbModelParam._m0[22u].w;
        float _1725 = fma(_823, cbModelParam._m0[23u].z, fma(_819, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _815)) + cbModelParam._m0[23u].w;
        float _1728 = fma(_764, cbModelParam._m0[21u].z, fma(_763, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _762));
        float _1731 = fma(_764, cbModelParam._m0[22u].z, fma(_763, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _762));
        float _1734 = fma(_764, cbModelParam._m0[23u].z, fma(_763, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _762));
        float _1872;
        if (_1728 > 0.0)
        {
            _1872 = abs((1.0 - _1717) / _1728);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1717 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1872 = frontier_phi_25_21_ladder;
        }
        float _2137;
        if (_1731 > 0.0)
        {
            _2137 = abs((1.0 - _1721) / _1731);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1721 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2137 = frontier_phi_37_32_ladder;
        }
        float _2342;
        if (_1734 > 0.0)
        {
            _2342 = abs((1.0 - _1725) / _1734);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1725 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2342 = frontier_phi_46_43_ladder;
        }
        float _2344 = isnan(_2137) ? _1872 : (isnan(_1872) ? _2137 : min(_1872, _2137));
        float _2345 = isnan(_2342) ? _2344 : (isnan(_2344) ? _2342 : min(_2344, _2342));
        float _2349 = (_2345 * _1728) + _1717;
        float _2350 = (_2345 * _1731) + _1721;
        float _2351 = (_2345 * _1734) + _1725;
        float _2352 = _2345 * 9.9999997473787516355514526367188e-05;
        float _2353 = (-1.0) - _2352;
        float _2355 = _2352 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2351 > _2355) || ((_2351 < _2353) || ((_2350 > _2355) || ((_2350 < _2353) || ((_2349 < _2353) || (_2349 > _2355))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2550 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2351, cbModelParam._m0[17u].z, fma(_2350, cbModelParam._m0[17u].y, _2349 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2351, cbModelParam._m0[18u].z, fma(_2350, cbModelParam._m0[18u].y, _2349 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2351, cbModelParam._m0[19u].z, fma(_2350, cbModelParam._m0[19u].y, _2349 * cbModelParam._m0[19u].x))), _1662);
            frontier_phi_22_46_ladder = _2550.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2550.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2550.x * cbModelParam._m0[1u].z;
        }
        _1753 = frontier_phi_22_46_ladder_2;
        _1755 = frontier_phi_22_46_ladder_1;
        _1757 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1737 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_762, _763, _764), _1662);
        _1753 = _1737.x * cbModelParam._m0[1u].z;
        _1755 = _1737.y * cbModelParam._m0[1u].z;
        _1757 = _1737.z * cbModelParam._m0[1u].z;
    }
    float _1769 = ((((1.0 - _783) * ((_770 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_783 * _770)) * _754;
    float _1770 = _1769 * ((cbModelParam._m0[1u].w * (_1753 - _1653)) + _1653);
    float _1771 = _1769 * ((cbModelParam._m0[1u].w * (_1755 - _1655)) + _1655);
    float _1772 = _1769 * ((cbModelParam._m0[1u].w * (_1757 - _1657)) + _1657);
    float _1775 = fma(_1772, cbSceneParam._m0[89u].z, fma(_1771, cbSceneParam._m0[89u].y, _1770 * cbSceneParam._m0[89u].x));
    float _1778 = fma(_1772, cbSceneParam._m0[90u].z, fma(_1771, cbSceneParam._m0[90u].y, _1770 * cbSceneParam._m0[90u].x));
    float _1781 = fma(_1772, cbSceneParam._m0[91u].z, fma(_1771, cbSceneParam._m0[91u].y, _1770 * cbSceneParam._m0[91u].x));
    uvec4 _1791 = floatBitsToUint(cbInstanceData._m0[_729 + 5u]);
    uint _1793 = _1791.x * 14u;
    uint _1794 = _1793 + 13u;
    float _1801 = _754 + (-1.0);
    float _1806 = (cbLight._m0[_1794].x * _1801) + 1.0;
    float _1807 = (cbLight._m0[_1794].y * _1801) + 1.0;
    float _1808 = (cbLight._m0[_1794].z * _1801) + 1.0;
    float _1809 = (cbLight._m0[_1794].w * _1801) + 1.0;
    uint _1810 = _1793 + 5u;
    float _1816 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
    uint _1820 = _1793 + 4u;
    float _1826 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
    uint _1830 = _1793 | 1u;
    float _1841 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_603, _604, _605));
    float _1844 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_603, _604, _605));
    float _3935 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _3946 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1849 = (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * 0.3183098733425140380859375;
    float _1851 = (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * 0.3183098733425140380859375;
    float _1858 = ((cbLight._m0[_1810].x * _1816) * _1851) + ((cbLight._m0[_1820].x * _1826) * _1849);
    float _1859 = ((_1816 * cbLight._m0[_1810].y) * _1851) + ((_1826 * cbLight._m0[_1820].y) * _1849);
    float _1860 = ((_1816 * cbLight._m0[_1810].z) * _1851) + ((_1826 * cbLight._m0[_1820].z) * _1849);
    uvec4 _1864 = floatBitsToUint(cbLight._m0[_1793 + 12u]);
    bool _1866 = _1864.x == 0u;
    float _1877;
    float _1879;
    float _1881;
    if (_1866)
    {
        _1877 = _1858;
        _1879 = _1859;
        _1881 = _1860;
    }
    else
    {
        uint _1885 = _1793 + 6u;
        float _1901 = (dot(vec3(cbLight._m0[_1793 + 2u].xyz), vec3(_603, _604, _605)) * 0.5) + 0.5;
        float _1902 = _1901 * _1901;
        float _3957 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1903 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1904 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _1877 = (((cbLight._m0[_1885].x * 0.3183098733425140380859375) * _1903) * _1904) + _1858;
        _1879 = (((cbLight._m0[_1885].y * 0.3183098733425140380859375) * _1903) * _1904) + _1859;
        _1881 = (((cbLight._m0[_1885].z * 0.3183098733425140380859375) * _1903) * _1904) + _1860;
    }
    bool _1884 = _1864.y == 0u;
    float _1922;
    float _1924;
    float _1926;
    if (_1884)
    {
        _1922 = _1877;
        _1924 = _1879;
        _1926 = _1881;
    }
    else
    {
        uint _2081 = _1793 + 7u;
        float _2097 = (dot(vec3(cbLight._m0[_1793 + 3u].xyz), vec3(_603, _604, _605)) * 0.5) + 0.5;
        float _2098 = _2097 * _2097;
        float _3973 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2099 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _2100 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
        _1922 = (((cbLight._m0[_2081].x * 0.3183098733425140380859375) * _2099) * _2100) + _1877;
        _1924 = (((cbLight._m0[_2081].y * 0.3183098733425140380859375) * _2099) * _2100) + _1879;
        _1926 = (((cbLight._m0[_2081].z * 0.3183098733425140380859375) * _2099) * _2100) + _1881;
    }
    uint _1929 = _1793 + 8u;
    float _1942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1793].w)) * _606) * 0.949999988079071044921875);
    float _1943 = _1942 * _1942;
    float _1944 = cbLight._m0[_1793].x + _683;
    float _1945 = cbLight._m0[_1793].y + _684;
    float _1946 = cbLight._m0[_1793].z + _685;
    float _1950 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
    float _1951 = _1950 * _1944;
    float _1952 = _1950 * _1945;
    float _1953 = _1950 * _1946;
    float _1954 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_1793].xyz));
    float _3989 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _1958 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _1959 = dot(vec3(_603, _604, _605), vec3(_1951, _1952, _1953));
    float _4011 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _1963 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_1951, _1952, _1953));
    float _4022 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1967 = _1943 * _1943;
    float _1971 = ((_1962 * _1962) * (_1967 + (-1.0))) + 1.0;
    float _1982 = (exp2(log2(1.0 - (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1983 = 1.0 - _1943;
    float _1994 = (0.5 / (((_1958 * ((_1957 * _1983) + _1943)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _1983) + _1943) * _1957))) * _1957;
    float _4033 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1996 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1967 / ((_1971 * _1971) * 3.141590118408203125));
    uint _2007 = _1793 + 9u;
    float _2018 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1830].w)) * _606) * 0.949999988079071044921875);
    float _2019 = _2018 * _2018;
    float _2020 = cbLight._m0[_1830].x + _683;
    float _2021 = cbLight._m0[_1830].y + _684;
    float _2022 = cbLight._m0[_1830].z + _685;
    float _2026 = inversesqrt(dot(vec3(_2020, _2021, _2022), vec3(_2020, _2021, _2022)));
    float _2027 = _2026 * _2020;
    float _2028 = _2026 * _2021;
    float _2029 = _2026 * _2022;
    float _2030 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_1830].xyz));
    float _4044 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2033 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _2034 = dot(vec3(_603, _604, _605), vec3(_2027, _2028, _2029));
    float _4055 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2037 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _2038 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_2027, _2028, _2029));
    float _4066 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2042 = _2019 * _2019;
    float _2046 = ((_2037 * _2037) * (_2042 + (-1.0))) + 1.0;
    float _2055 = (exp2(log2(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2056 = 1.0 - _2019;
    float _2066 = (0.5 / (((_1958 * ((_2033 * _2056) + _2019)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2056) + _2019) * _2033))) * _2033;
    float _4077 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2068 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_2042 / ((_2046 * _2046) * 3.141590118408203125));
    float _2078 = (((_2055 * cbLight._m0[_2007].x) * _2068) * _1816) + (((_1982 * cbLight._m0[_1929].x) * _1996) * _1826);
    float _2079 = (((_2055 * cbLight._m0[_2007].y) * _2068) * _1816) + (((_1982 * cbLight._m0[_1929].y) * _1996) * _1826);
    float _2080 = (((_2055 * cbLight._m0[_2007].z) * _2068) * _1816) + (((_1982 * cbLight._m0[_1929].z) * _1996) * _1826);
    float _2142;
    float _2144;
    float _2146;
    if (_1866)
    {
        _2142 = _2078;
        _2144 = _2079;
        _2146 = _2080;
    }
    else
    {
        uint _2148 = _1793 + 2u;
        uint _2152 = _1793 + 10u;
        float _2166 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2148].w)) * _606) * 0.949999988079071044921875);
        float _2167 = _2166 * _2166;
        float _2168 = cbLight._m0[_2148].x + _683;
        float _2169 = cbLight._m0[_2148].y + _684;
        float _2170 = cbLight._m0[_2148].z + _685;
        float _2174 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
        float _2175 = _2174 * _2168;
        float _2176 = _2174 * _2169;
        float _2177 = _2174 * _2170;
        float _2178 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_2148].xyz));
        float _4088 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2181 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _2182 = dot(vec3(_603, _604, _605), vec3(_2175, _2176, _2177));
        float _4099 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2185 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2186 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_2175, _2176, _2177));
        float _4110 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2190 = _2167 * _2167;
        float _2194 = ((_2185 * _2185) * (_2190 + (-1.0))) + 1.0;
        float _2203 = (exp2(log2(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2204 = 1.0 - _2167;
        float _2214 = (0.5 / (((_1958 * ((_2181 * _2204) + _2167)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2204) + _2167) * _2181))) * _2181;
        float _4121 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2216 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2190 / ((_2194 * _2194) * 3.141590118408203125));
        float _2217 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _2142 = (((_2203 * cbLight._m0[_2152].x) * _2216) * _2217) + _2078;
        _2144 = (((_2203 * cbLight._m0[_2152].y) * _2216) * _2217) + _2079;
        _2146 = (((_2203 * cbLight._m0[_2152].z) * _2216) * _2217) + _2080;
    }
    float _2252;
    float _2254;
    float _2256;
    if (_1884)
    {
        _2252 = _2142;
        _2254 = _2144;
        _2256 = _2146;
    }
    else
    {
        uint _2263 = _1793 + 3u;
        uint _2267 = _1793 + 11u;
        float _2281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _606) * 0.949999988079071044921875);
        float _2282 = _2281 * _2281;
        float _2283 = cbLight._m0[_2263].x + _683;
        float _2284 = cbLight._m0[_2263].y + _684;
        float _2285 = cbLight._m0[_2263].z + _685;
        float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
        float _2290 = _2289 * _2283;
        float _2291 = _2289 * _2284;
        float _2292 = _2289 * _2285;
        float _2293 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_2263].xyz));
        float _4137 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2296 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _2297 = dot(vec3(_603, _604, _605), vec3(_2290, _2291, _2292));
        float _4148 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2301 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2290, _2291, _2292));
        float _4159 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2305 = _2282 * _2282;
        float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
        float _2318 = (exp2(log2(1.0 - (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2319 = 1.0 - _2282;
        float _2329 = (0.5 / (((_1958 * ((_2296 * _2319) + _2282)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2319) + _2282) * _2296))) * _2296;
        float _4170 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2331 = (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
        float _2332 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
        _2252 = (((_2318 * cbLight._m0[_2267].x) * _2331) * _2332) + _2142;
        _2254 = (((_2318 * cbLight._m0[_2267].y) * _2331) * _2332) + _2144;
        _2256 = (((_2318 * cbLight._m0[_2267].z) * _2331) * _2332) + _2146;
    }
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    float _2477;
    if (_1791.y == 0u)
    {
        float _2407 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2408 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2407;
        float _2409 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2407;
        float _2410 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2407;
        uvec4 _2422 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2423 = _2422.x;
        uint _2434 = uint((float(_2422.y) * floor(float(uint(cbSceneParam._m0[85u].y * _692) / _2423))) + floor(float(uint(cbSceneParam._m0[85u].x * _691) / _2423)));
        float _2444 = (log2(_2410 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2445 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        uint _2448 = uint(isnan(14.0) ? _2445 : (isnan(_2445) ? 14.0 : min(_2445, 14.0)));
        uvec4 _2453 = texelFetch(g_lightClusterGridBuffer, int(((_2448 << 2u) + (_2434 << 6u)) >> 2u));
        uint _2454 = _2453.x;
        uint _2455 = _2422.z;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        if (((((1u << ((_2455 >> 4u) & 15u)) + 4294967295u) & _2454) == 0u) || ((_2455 & 240u) == 0u))
        {
            _2555 = 0.0;
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
        }
        else
        {
            float _2556;
            float _2558;
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2700 = 0.0;
            float _2701 = 0.0;
            float _2702 = 0.0;
            float _2703 = 0.0;
            float _2704 = 0.0;
            float _2705 = 0.0;
            uint _2706 = 0u;
            uint _2715;
            bool _2716;
            for (;;)
            {
                _2715 = texelFetch(g_lightClassification, int((((_2448 << 5u) + (_2434 << 9u)) + (_2706 << 2u)) >> 2u)).x;
                _2716 = _2715 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2716)
                {
                    frontier_phi_61_pred = _2700;
                    frontier_phi_61_pred_1 = _2705;
                    frontier_phi_61_pred_2 = _2704;
                    frontier_phi_61_pred_3 = _2703;
                    frontier_phi_61_pred_4 = _2702;
                    frontier_phi_61_pred_5 = _2701;
                }
                else
                {
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    uint _2830;
                    _2824 = _2700;
                    _2825 = _2701;
                    _2826 = _2702;
                    _2827 = _2703;
                    _2828 = _2704;
                    _2829 = _2705;
                    _2830 = _2715;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    for (;;)
                    {
                        uint _2834 = uint(findLSB(_2830)) + (_2706 << 5u);
                        uint _2831 = (_2830 + 4294967295u) & _2830;
                        uint _2836 = _2834 * 48u;
                        vec4 _2850 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2836)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 3u)).x));
                        uint _2856 = (_2834 * 48u) + 4u;
                        vec4 _2869 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2856)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 3u)).x));
                        uint _2875 = (_2834 * 48u) + 8u;
                        vec3 _2886 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2875)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 2u)).x));
                        float _2890 = _2850.x - _2408;
                        float _2891 = _2850.y - _2409;
                        float _2892 = _2850.z - _2410;
                        float _2893 = dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892));
                        float _2896 = inversesqrt(_2893);
                        float _2897 = _2896 * _2890;
                        float _2898 = _2896 * _2891;
                        float _2899 = _2896 * _2892;
                        float _2900 = dot(vec3(_710, _713, _716), vec3(_2897, _2898, _2899));
                        float _2905 = 1.0 - (_2893 * _2850.w);
                        float _4196 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                        float _2906 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2907 = sqrt(_2893) * _2869.w;
                        float _2910 = 1.39999997615814208984375 / (_2907 + 1.39999997615814208984375);
                        float _2911 = _2910 * _2910;
                        float _2914 = ((1.0 - _2911) * _2900) + _2911;
                        float _2917 = _2907 * _2907;
                        float _2921 = ((isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0))) * _2906) / ((_2917 * 0.699999988079071044921875) + 1.0);
                        float _2925 = (-0.0) - _2408;
                        float _2926 = (-0.0) - _2409;
                        float _2927 = (-0.0) - _2410;
                        float _2931 = inversesqrt(dot(vec3(_2925, _2926, _2927), vec3(_2925, _2926, _2927)));
                        float _2932 = _2931 * _2925;
                        float _2933 = _2931 * _2926;
                        float _2934 = _2931 * _2927;
                        float _2942 = exp2(log2(1.0 / ((_2917 * 3.5) + 5.0)) * 0.25);
                        float _2943 = 1.0 - _770;
                        float _2950 = sqrt(1.0 - ((1.0 - (_2943 * _2943)) * (1.0 - (_2942 * _2942))));
                        float _2951 = _2950 * _2950;
                        float _2952 = _2951 * _2951;
                        float _2953 = _2932 + _2897;
                        float _2954 = _2933 + _2898;
                        float _2955 = _2934 + _2899;
                        float _2959 = inversesqrt(dot(vec3(_2953, _2954, _2955), vec3(_2953, _2954, _2955)));
                        float _2963 = dot(vec3(_710, _713, _716), vec3(_2932, _2933, _2934));
                        float _4212 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2966 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                        float _2967 = dot(vec3(_710, _713, _716), vec3(_2959 * _2953, _2959 * _2954, _2959 * _2955));
                        float _4223 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                        float _2970 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                        float _2974 = ((_2970 * _2970) * (_2952 + (-1.0))) + 1.0;
                        float _2975 = _2910 * _2951;
                        float _2976 = _2975 * _2975;
                        float _2979 = ((1.0 - _2976) * _2900) + _2976;
                        float _4234 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                        float _2980 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                        float _2981 = 1.0 - _2951;
                        float _2991 = (0.5 / (((_2980 * ((_2966 * _2981) + _2951)) + 9.9999999392252902907785028219223e-09) + (((_2980 * _2981) + _2951) * _2966))) * _2980;
                        float _4245 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _3002 = (((_2952 * 3.1415927410125732421875) * (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) / ((_2974 * _2974) * ((_2917 * 2.1991131305694580078125) + 3.141590118408203125))) * _2906;
                        _2759 = (_2921 * _2869.x) + _2827;
                        _2760 = (_2921 * _2869.y) + _2828;
                        _2761 = (_2921 * _2869.z) + _2829;
                        _2756 = (_3002 * _2886.x) + _2824;
                        _2757 = (_3002 * _2886.y) + _2825;
                        _2758 = (_3002 * _2886.z) + _2826;
                        if (_2831 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2824 = _2756;
                            _2825 = _2757;
                            _2826 = _2758;
                            _2827 = _2759;
                            _2828 = _2760;
                            _2829 = _2761;
                            _2830 = _2831;
                        }
                    }
                    frontier_phi_61_pred = _2756;
                    frontier_phi_61_pred_1 = _2761;
                    frontier_phi_61_pred_2 = _2760;
                    frontier_phi_61_pred_3 = _2759;
                    frontier_phi_61_pred_4 = _2758;
                    frontier_phi_61_pred_5 = _2757;
                }
                _2556 = frontier_phi_61_pred;
                _2566 = frontier_phi_61_pred_1;
                _2564 = frontier_phi_61_pred_2;
                _2562 = frontier_phi_61_pred_3;
                _2560 = frontier_phi_61_pred_4;
                _2558 = frontier_phi_61_pred_5;
                uint _2707 = _2706 + 1u;
                if (_2707 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2700 = _2556;
                    _2701 = _2558;
                    _2702 = _2560;
                    _2703 = _2562;
                    _2704 = _2564;
                    _2705 = _2566;
                    _2706 = _2707;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2555 = _2556;
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
        }
        uvec4 _2569 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2570 = _2569.z;
        uint _2572 = (_2570 >> 8u) & 15u;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        if (((4294967295u << _2572) & _2454) == 0u)
        {
            _2668 = _2555;
            _2670 = _2557;
            _2672 = _2559;
            _2674 = _2561;
            _2676 = _2563;
            _2678 = _2565;
        }
        else
        {
            float _2693 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
            float _2694 = _2693 * _2408;
            float _2695 = _2693 * _2409;
            float _2696 = _2693 * _2410;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2572 < ((_2570 >> 12u) & 15u))
            {
                float _2669;
                float _2671;
                float _2673;
                float _2675;
                float _2677;
                float _2679;
                float _2807 = _2555;
                float _2808 = _2557;
                float _2809 = _2559;
                float _2810 = _2561;
                float _2811 = _2563;
                float _2812 = _2565;
                uint _2813 = _2572;
                uint _2822;
                bool _2823;
                for (;;)
                {
                    _2822 = texelFetch(g_lightClassification, int((((_2448 << 5u) + (_2434 << 9u)) + (_2813 << 2u)) >> 2u)).x;
                    _2823 = _2822 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2823)
                    {
                        frontier_phi_67_pred = _2810;
                        frontier_phi_67_pred_1 = _2811;
                        frontier_phi_67_pred_2 = _2812;
                        frontier_phi_67_pred_3 = _2809;
                        frontier_phi_67_pred_4 = _2808;
                        frontier_phi_67_pred_5 = _2807;
                    }
                    else
                    {
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3020 = _2807;
                        float _3021 = _2808;
                        float _3022 = _2809;
                        float _3023 = _2810;
                        float _3024 = _2811;
                        float _3025 = _2812;
                        uint _3026 = _2822;
                        uint _3027;
                        vec4 _3052;
                        float _3053;
                        vec4 _3068;
                        vec3 _3080;
                        vec4 _3095;
                        vec4 _3110;
                        float _3157;
                        bool _3158;
                        for (;;)
                        {
                            uint _3037 = ((_2813 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3026));
                            _3027 = (_3026 + 4294967295u) & _3026;
                            uint _3039 = _3037 * 40u;
                            _3052 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 3u)).x));
                            _3053 = _3052.w;
                            uint _3055 = (_3037 * 40u) + 4u;
                            _3068 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 3u)).x));
                            uint _3070 = (_3037 * 40u) + 8u;
                            _3080 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x));
                            uint _3082 = (_3037 * 40u) + 16u;
                            _3095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 3u)).x));
                            uint _3097 = (_3037 * 40u) + 20u;
                            _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            uint _3113 = (_3037 * 40u) + 24u;
                            vec4 _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            uint _3132 = (_3037 * 40u) + 28u;
                            vec4 _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            _3157 = fma(_2410, _3145.z, fma(_2409, _3145.y, _3145.x * _2408)) + _3145.w;
                            _3158 = !((fma(_2410, _3126.z, fma(_2409, _3126.y, _3126.x * _2408)) + _3126.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3158)
                            {
                                float _3185 = _3052.x - _2408;
                                float _3186 = _3052.y - _2409;
                                float _3187 = _3052.z - _2410;
                                float _3188 = dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187));
                                float _3191 = inversesqrt(_3188);
                                float _3192 = _3191 * _3185;
                                float _3193 = _3191 * _3186;
                                float _3194 = _3191 * _3187;
                                float _3198 = 1.0 - (_3188 / (_3053 * _3053));
                                float _4256 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3199 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3203 = sqrt(_3188) * _3068.w;
                                float _3205 = 1.39999997615814208984375 / (_3203 + 1.39999997615814208984375);
                                float _3206 = _3205 * _3205;
                                float _3209 = ((1.0 - _3206) * dot(vec3(_3192, _3193, _3194), vec3(_710, _713, _716))) + _3206;
                                float _3212 = _3203 * _3203;
                                float _3216 = (fma(_2410, _3095.z, fma(_2409, _3095.y, _3095.x * _2408)) + _3095.w) / _3157;
                                float _3217 = (fma(_2410, _3110.z, fma(_2409, _3110.y, _3110.x * _2408)) + _3110.w) / _3157;
                                float _3221 = 1.0 - dot(vec2(_3216, _3217), vec2(_3216, _3217));
                                float _4272 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3222 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                                float _3223 = _3222 * (((isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0))) * _3199) / ((_3212 * 0.699999988079071044921875) + 1.0));
                                float _3235 = exp2(log2(1.0 / ((_3212 * 3.5) + 5.0)) * 0.25);
                                float _3236 = 1.0 - _770;
                                float _3243 = sqrt(1.0 - ((1.0 - (_3236 * _3236)) * (1.0 - (_3235 * _3235))));
                                float _3244 = _3243 * _3243;
                                float _3245 = _3244 * _3244;
                                float _3246 = _3192 - _2694;
                                float _3247 = _3193 - _2695;
                                float _3248 = _3194 - _2696;
                                float _3252 = inversesqrt(dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248)));
                                float _3256 = dot(vec3(_710, _713, _716), vec3((-0.0) - _2694, (-0.0) - _2695, (-0.0) - _2696));
                                float _4283 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3259 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3260 = dot(vec3(_710, _713, _716), vec3(_3252 * _3246, _3252 * _3247, _3252 * _3248));
                                float _4294 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3263 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                                float _3267 = ((_3263 * _3263) * (_3245 + (-1.0))) + 1.0;
                                float _3268 = _3205 * _3244;
                                float _3269 = _3268 * _3268;
                                float _3275 = ((1.0 - _3269) * dot(vec3(_710, _713, _716), vec3(_3192, _3193, _3194))) + _3269;
                                float _4305 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3276 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                                float _3277 = 1.0 - _3244;
                                float _3287 = (0.5 / (((_3276 * ((_3259 * _3277) + _3244)) + 9.9999999392252902907785028219223e-09) + (((_3276 * _3277) + _3244) * _3259))) * _3276;
                                float _4316 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3297 = (_3222 * _3199) * (((_3245 * 3.1415927410125732421875) * (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) / ((_3267 * _3267) * ((_3212 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3297 * _3080.x;
                                frontier_phi_73_pred_1 = _3297 * _3080.y;
                                frontier_phi_73_pred_2 = _3223 * _3068.z;
                                frontier_phi_73_pred_3 = _3223 * _3068.y;
                                frontier_phi_73_pred_4 = _3223 * _3068.x;
                                frontier_phi_73_pred_5 = _3297 * _3080.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3301 = frontier_phi_73_pred;
                            _3302 = frontier_phi_73_pred_1;
                            _3306 = frontier_phi_73_pred_2;
                            _3305 = frontier_phi_73_pred_3;
                            _3304 = frontier_phi_73_pred_4;
                            _3303 = frontier_phi_73_pred_5;
                            _3010 = _3304 + _3023;
                            _3011 = _3305 + _3024;
                            _3012 = _3306 + _3025;
                            _3007 = _3301 + _3020;
                            _3008 = _3302 + _3021;
                            _3009 = _3303 + _3022;
                            if (_3027 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3020 = _3007;
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3027;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3010;
                        frontier_phi_67_pred_1 = _3011;
                        frontier_phi_67_pred_2 = _3012;
                        frontier_phi_67_pred_3 = _3009;
                        frontier_phi_67_pred_4 = _3008;
                        frontier_phi_67_pred_5 = _3007;
                    }
                    _2675 = frontier_phi_67_pred;
                    _2677 = frontier_phi_67_pred_1;
                    _2679 = frontier_phi_67_pred_2;
                    _2673 = frontier_phi_67_pred_3;
                    _2671 = frontier_phi_67_pred_4;
                    _2669 = frontier_phi_67_pred_5;
                    uint _2814 = _2813 + 1u;
                    if (_2814 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2807 = _2669;
                        _2808 = _2671;
                        _2809 = _2673;
                        _2810 = _2675;
                        _2811 = _2677;
                        _2812 = _2679;
                        _2813 = _2814;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2677;
                frontier_phi_55_56_ladder_1 = _2679;
                frontier_phi_55_56_ladder_2 = _2675;
                frontier_phi_55_56_ladder_3 = _2673;
                frontier_phi_55_56_ladder_4 = _2671;
                frontier_phi_55_56_ladder_5 = _2669;
            }
            else
            {
                frontier_phi_55_56_ladder = _2563;
                frontier_phi_55_56_ladder_1 = _2565;
                frontier_phi_55_56_ladder_2 = _2561;
                frontier_phi_55_56_ladder_3 = _2559;
                frontier_phi_55_56_ladder_4 = _2557;
                frontier_phi_55_56_ladder_5 = _2555;
            }
            _2668 = frontier_phi_55_56_ladder_5;
            _2670 = frontier_phi_55_56_ladder_4;
            _2672 = frontier_phi_55_56_ladder_3;
            _2674 = frontier_phi_55_56_ladder_2;
            _2676 = frontier_phi_55_56_ladder;
            _2678 = frontier_phi_55_56_ladder_1;
        }
        float _2683 = isnan(1.0) ? _754 : (isnan(_754) ? 1.0 : min(_754, 1.0));
        _2467 = (_2683 * _2674) + _1922;
        _2469 = (_2683 * _2676) + _1924;
        _2471 = (_2683 * _2678) + _1926;
        _2473 = ((_2668 * 0.039999999105930328369140625) * _2683) + _2252;
        _2475 = ((_2670 * 0.039999999105930328369140625) * _2683) + _2254;
        _2477 = ((_2672 * 0.039999999105930328369140625) * _2683) + _2256;
    }
    else
    {
        _2467 = _1922;
        _2469 = _1924;
        _2471 = _1926;
        _2473 = _2252;
        _2475 = _2254;
        _2477 = _2256;
    }
    float _4332 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4343 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4354 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    uint _2497 = _729 + 6u;
    float _2505 = _691 / cbSceneParam._m0[86u].x;
    float _2506 = _692 / cbSceneParam._m0[86u].y;
    vec4 _2520 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2505, _2506, (log2((isnan(cbSceneParam._m0[77u].w) ? _625 : (isnan(_625) ? cbSceneParam._m0[77u].w : min(_625, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2522 = _2520.x;
    float _2523 = _2520.y;
    float _2524 = _2520.z;
    float _2525 = _2520.w;
    float _2618;
    float _2620;
    float _2622;
    float _2624;
    if (_625 > cbSceneParam._m0[78u].w)
    {
        float _2580 = isnan(_625) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _625 : min(cbSceneParam._m0[80u].w, _625));
        float _2581 = _2580 / _625;
        float _2592 = _2581 * _676;
        float _2593 = _677 * _2581;
        float _2594 = (-0.0) - _2593;
        float _2596 = _2581 * _678;
        float _2598 = (cbSceneParam._m0[77u].w * _2594) / _2580;
        float _2599 = _2598 + cbSceneParam._m0[79u].w;
        float _2600 = cbSceneParam._m0[79u].w - _2593;
        float _2606 = sqrt(((_2592 * _2592) + (_2593 * _2593)) + (_2596 * _2596));
        float _2609 = (1.0 - (cbSceneParam._m0[77u].w / _2580)) * _2606;
        float _2614 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2616 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2769;
        if (abs((_2594 - _2598) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2769 = ((((_2599 > 0.0) ? exp2(_2614 * _2599) : (2.0 - exp2(_2616 * _2599))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2609;
        }
        else
        {
            float _2729 = 1.0 / cbSceneParam._m0[80u].x;
            float _2730 = isnan(_2600) ? _2599 : (isnan(_2599) ? _2600 : max(_2599, _2600));
            float _2731 = isnan(_2600) ? _2599 : (isnan(_2599) ? _2600 : min(_2599, _2600));
            float _2740 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : min(_2730, 0.0));
            float _2741 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : min(_2731, 0.0));
            _2769 = ((abs(_2606 / _2594) * cbSceneParam._m0[80u].y) * ((((_2740 - _2741) * 2.0) - ((exp2(_2614 * (isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0)))) - exp2(_2614 * (isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0))))) * _2729)) - ((exp2(_2616 * _2740) - exp2(_2616 * _2741)) * _2729))) + (_2609 * cbSceneParam._m0[80u].z);
        }
        vec4 _2771 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2505, _2506, 1.0), 0.0);
        float _2780 = exp2((_2769 * (-1.44269502162933349609375)) * (1.0 - _2771.w));
        float _2781 = log2(_2780);
        float _2797 = log2(_2525);
        _2618 = (exp2(_2797 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2781 * cbSceneParam._m0[78u].x)) * _2771.x) / cbSceneParam._m0[78u].x)) + _2522;
        _2620 = (exp2(_2797 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2781 * cbSceneParam._m0[78u].y)) * _2771.y) / cbSceneParam._m0[78u].y)) + _2523;
        _2622 = (exp2(_2797 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2781 * cbSceneParam._m0[78u].z)) * _2771.z) / cbSceneParam._m0[78u].z)) + _2524;
        _2624 = _2780 * _2525;
    }
    else
    {
        _2618 = _2522;
        _2620 = _2523;
        _2622 = _2524;
        _2624 = _2525;
    }
    float _2636 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2637 = _2636 == 3.0;
    float _2638 = log2(_2624);
    float _2645 = exp2(_2638 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2467 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _754))) + ((_2473 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1561)) * cbPerFrame._m0[3u].x));
    float _2646 = exp2(_2638 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2469 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _754))) + ((_2475 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1561)) * cbPerFrame._m0[3u].x));
    float _2647 = exp2(_2638 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2471 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _754))) + ((_2477 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1561)) * cbPerFrame._m0[3u].x));
    float _2656 = (_2636 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2656 * (_2637 ? _2645 : (_2645 + (cbSceneParam._m0[72u].w * _2618)));
    SV_Target.y = _2656 * (_2637 ? _2646 : (_2646 + (cbSceneParam._m0[72u].w * _2620)));
    SV_Target.z = _2656 * (_2637 ? _2647 : (_2647 + (cbSceneParam._m0[72u].w * _2622)));
    SV_Target.w = cbInstanceData._m0[_2497].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2497].w;
}


