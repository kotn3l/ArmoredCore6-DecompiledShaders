#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1154;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _240 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _246 = _240.x * cbMtdParam._m0[10u].x;
    float _247 = _240.y * cbMtdParam._m0[10u].y;
    float _248 = _240.z * cbMtdParam._m0[10u].z;
    vec4 _267 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _314 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x;
    float _325 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _314)) + 1.0;
    float _3487 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _326 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    float _333 = (_326 * ((_267.x * cbMtdParam._m0[11u].x) - _246)) + _246;
    float _334 = (_326 * ((_267.y * cbMtdParam._m0[11u].y) - _247)) + _247;
    float _335 = (_326 * ((_267.z * cbMtdParam._m0[11u].z) - _248)) + _248;
    vec4 _354 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _384 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _314)) + 1.0;
    float _3498 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _392 = (_385 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _393 = (_385 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _394 = (_385 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    vec4 _411 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _436 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _314)) + 1.0;
    float _3509 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    vec4 _464 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _472 = ((((_437 * ((_411.x * cbMtdParam._m0[13u].x) - _392)) + _392) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _464.x;
    float _475 = ((((_437 * ((_411.y * cbMtdParam._m0[13u].y) - _393)) + _393) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _464.y;
    float _478 = ((((_437 * ((_411.z * cbMtdParam._m0[13u].z) - _394)) + _394) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _464.z;
    vec4 _490 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _508 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _510 = _508.x;
    float _511 = _508.y;
    float _517 = cbMtdParam._m0[16u].w * _508.z;
    float _520 = (((cbMtdParam._m0[17u].x * _490.z) - _517) * _326) + _517;
    vec4 _533 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _542 = (((cbMtdParam._m0[17u].y * _533.z) - _520) * _385) + _520;
    vec4 _555 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _564 = (((cbMtdParam._m0[17u].z * _555.z) - _542) * _437) + _542;
    vec4 _577 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _590 = ((_490.x - _510) * _326) + _510;
    float _591 = ((_490.y - _511) * _326) + _511;
    float _596 = ((_533.x - _590) * _385) + _590;
    float _597 = ((_533.y - _591) * _385) + _591;
    float _606 = ((((_555.x - _596) * _437) + _596) * 2.0) + (-1.0);
    float _607 = ((((_555.y - _597) * _437) + _597) * 2.0) + (-1.0);
    float _608 = dot(vec2(_606, _607), vec2(_606, _607));
    float _3520 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _613 = sqrt(1.0 - (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))));
    float _616 = (((_577.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _606;
    float _617 = (((_577.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _607;
    float _620 = fma(_613, _210 * NORMAL.x, fma(_617, _217 * TANGENT.x, (_203 * _195) * _616));
    float _623 = fma(_613, _210 * NORMAL.y, fma(_617, _217 * TANGENT.y, (_203 * _196) * _616));
    float _626 = fma(_613, _210 * NORMAL.z, fma(_617, _217 * TANGENT.z, (_203 * _197) * _616));
    float _630 = inversesqrt(dot(vec3(_620, _623, _626), vec3(_620, _623, _626)));
    float _631 = _630 * _620;
    float _632 = _630 * _623;
    float _633 = _630 * _626;
    float _3531 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _634 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _3542 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _3553 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3564 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _653 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _704 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _694);
    float _705 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _694);
    float _706 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _694);
    float _710 = inversesqrt(dot(vec3(_704, _705, _706), vec3(_704, _705, _706)));
    float _711 = _704 * _710;
    float _712 = _705 * _710;
    float _713 = _706 * _710;
    float _719 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _720 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _738 = fma(_633, cbSceneParam._m0[5u].z, fma(_632, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _631));
    float _741 = fma(_633, cbSceneParam._m0[6u].z, fma(_632, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _631));
    float _744 = fma(_633, cbSceneParam._m0[7u].z, fma(_632, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _631));
    uint _757 = uint(roundEven(NORMAL.w)) * 13u;
    uint _759 = (_757 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _765 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0)))) * cbInstanceData._m0[_759].x;
    float _766 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0)))) * cbInstanceData._m0[_759].y;
    float _767 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) * cbInstanceData._m0[_759].z;
    float _3575 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _3586 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _3597 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    vec4 _779 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _719, cbSceneParam._m0[86u].y * _720));
    float _782 = _779.x * TEXCOORD_5.w;
    float _783 = dot(vec3(_631, _632, _633), vec3(_711, _712, _713));
    float _786 = _783 * 2.0;
    float _790 = (_786 * _631) - _711;
    float _791 = (_786 * _632) - _712;
    float _792 = (_786 * _633) - _713;
    float _796 = abs(dot(vec3(_711, _712, _713), vec3(_631, _632, _633)));
    float _3608 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _798 = sqrt(_634);
    float _811 = exp2((_798 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_798 * 3.0));
    float _843 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _847 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _851 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1153;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _878 = fma(_851, cbModelParam._m0[26u].z, fma(_847, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _843));
        float _882 = fma(_851, cbModelParam._m0[27u].z, fma(_847, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _843));
        float _886 = fma(_851, cbModelParam._m0[28u].z, fma(_847, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _843));
        float _911 = _843 + _631;
        float _912 = _847 + _632;
        float _913 = _851 + _633;
        float _923 = fma(_913, cbModelParam._m0[26u].z, fma(_912, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _911)) - _878;
        float _924 = fma(_913, cbModelParam._m0[27u].z, fma(_912, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _911)) - _882;
        float _925 = fma(_913, cbModelParam._m0[28u].z, fma(_912, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _911)) - _886;
        float _929 = inversesqrt(dot(vec3(_923, _924, _925), vec3(_923, _924, _925)));
        float _942 = ((_929 * _923) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_878 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_929 * _924) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_882 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_929 * _925) / cbModelParam._m0[34u].z) + ((((((_886 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        float _981 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_947.x + (-0.5));
        float _983 = _981 * (_947.y + (-0.5));
        float _984 = _981 * (_947.z + (-0.5));
        float _991 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_954.x + (-0.5));
        float _993 = _991 * (_954.y + (-0.5));
        float _994 = _991 * (_954.z + (-0.5));
        float _1001 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_961.x + (-0.5));
        float _1003 = _1001 * (_961.y + (-0.5));
        float _1004 = _1001 * (_961.z + (-0.5));
        float _1011 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_968.x + (-0.5));
        float _1013 = _1011 * (_968.y + (-0.5));
        float _1014 = _1011 * (_968.z + (-0.5));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = _982 * 0.5;
        float _1019 = _992 * 0.5;
        float _1020 = _1002 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1035 = (dot(vec3(_631, _632, _633), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1045 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3656 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_1047 + 1.0))) + _1052) * _1015;
        float _1062 = _983 * 0.5;
        float _1063 = _993 * 0.5;
        float _1064 = _1003 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_631, _632, _633), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3689 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1089 + 1.0))) + _1094) * _1016;
        float _1104 = _984 * 0.5;
        float _1105 = _994 * 0.5;
        float _1106 = _1004 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_631, _632, _633), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3722 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1131 + 1.0))) + _1136) * _1017;
        _1153 = _984;
        _1155 = _983;
        _1156 = _982;
        _1157 = _994;
        _1158 = _993;
        _1159 = _992;
        _1160 = _1004;
        _1161 = _1003;
        _1162 = _1002;
        _1163 = _1017;
        _1164 = _1016;
        _1165 = _1015;
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
    }
    else
    {
        _1153 = _1154;
        _1155 = _1154;
        _1156 = _1154;
        _1157 = _1154;
        _1158 = _1154;
        _1159 = _1154;
        _1160 = _1154;
        _1161 = _1154;
        _1162 = _1154;
        _1163 = _1154;
        _1164 = _1154;
        _1165 = _1154;
        _1166 = 0.0;
        _1167 = 0.0;
        _1168 = 0.0;
    }
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1194 = fma(_851, cbModelParam._m0[30u].z, fma(_847, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _843));
        float _1198 = fma(_851, cbModelParam._m0[31u].z, fma(_847, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _843));
        float _1202 = fma(_851, cbModelParam._m0[32u].z, fma(_847, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _843));
        float _1225 = _843 + _631;
        float _1226 = _847 + _632;
        float _1227 = _851 + _633;
        float _1237 = fma(_1227, cbModelParam._m0[30u].z, fma(_1226, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1225)) - _1194;
        float _1238 = fma(_1227, cbModelParam._m0[31u].z, fma(_1226, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1225)) - _1198;
        float _1239 = fma(_1227, cbModelParam._m0[32u].z, fma(_1226, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1225)) - _1202;
        float _1243 = inversesqrt(dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239)));
        float _1256 = ((_1243 * _1237) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1194 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1257 = ((_1243 * _1238) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1198 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1258 = ((_1243 * _1239) / cbModelParam._m0[35u].z) + ((((((_1202 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        float _1293 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1260.x + (-0.5));
        float _1295 = _1293 * (_1260.y + (-0.5));
        float _1296 = _1293 * (_1260.z + (-0.5));
        float _1303 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1267.x + (-0.5));
        float _1305 = _1303 * (_1267.y + (-0.5));
        float _1306 = _1303 * (_1267.z + (-0.5));
        float _1313 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1274.x + (-0.5));
        float _1315 = _1313 * (_1274.y + (-0.5));
        float _1316 = _1313 * (_1274.z + (-0.5));
        float _1323 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1281.x + (-0.5));
        float _1325 = _1323 * (_1281.y + (-0.5));
        float _1326 = _1323 * (_1281.z + (-0.5));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = _1294 * 0.5;
        float _1331 = _1304 * 0.5;
        float _1332 = _1314 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_631, _632, _633), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _3785 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1357 + 1.0))) + _1362) * _1327;
        float _1372 = _1295 * 0.5;
        float _1373 = _1305 * 0.5;
        float _1374 = _1315 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_631, _632, _633), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _3818 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1399 + 1.0))) + _1404) * _1328;
        float _1414 = _1296 * 0.5;
        float _1415 = _1306 * 0.5;
        float _1416 = _1316 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_631, _632, _633), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _3851 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1441 + 1.0))) + _1446) * _1329;
        _1463 = _1296;
        _1464 = _1295;
        _1465 = _1294;
        _1466 = _1306;
        _1467 = _1305;
        _1468 = _1304;
        _1469 = _1316;
        _1470 = _1315;
        _1471 = _1314;
        _1472 = _1329;
        _1473 = _1328;
        _1474 = _1327;
        _1475 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
        _1476 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1477 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
    }
    else
    {
        _1463 = _1154;
        _1464 = _1154;
        _1465 = _1154;
        _1466 = _1154;
        _1467 = _1154;
        _1468 = _1154;
        _1469 = _1154;
        _1470 = _1154;
        _1471 = _1154;
        _1472 = _1154;
        _1473 = _1154;
        _1474 = _1154;
        _1475 = 0.0;
        _1476 = 0.0;
        _1477 = 0.0;
    }
    float _1487 = (cbModelParam._m0[1u].x * (_1475 - _1166)) + _1166;
    float _1488 = (cbModelParam._m0[1u].x * (_1476 - _1167)) + _1167;
    float _1489 = (cbModelParam._m0[1u].x * (_1477 - _1168)) + _1168;
    float _1510 = fma(_1489, cbSceneParam._m0[89u].z, fma(_1488, cbSceneParam._m0[89u].y, _1487 * cbSceneParam._m0[89u].x));
    float _1513 = fma(_1489, cbSceneParam._m0[90u].z, fma(_1488, cbSceneParam._m0[90u].y, _1487 * cbSceneParam._m0[90u].x));
    float _1516 = fma(_1489, cbSceneParam._m0[91u].z, fma(_1488, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1487));
    float _1531 = _790 * 0.5;
    float _1532 = _791 * 0.5;
    float _1533 = _792 * 0.5;
    float _1534 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1465, _1468, _1471, _1474));
    float _1537 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1464, _1467, _1470, _1473));
    float _1540 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1463, _1466, _1469, _1472));
    float _1574;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1547 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1153, _1157, _1160, _1163));
        float _1551 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1155, _1158, _1161, _1164));
        float _1555 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1156, _1159, _1162, _1165));
        float _1562 = dot(vec4(cbModelParam._m0[39u]), vec4(_1531, _1532, _1533, 1.0));
        _1574 = dot(vec3(isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1562) ? 0.0 : (isnan(0.0) ? _1562 : max(0.0, _1562))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1574 = 1.0;
    }
    float _1585;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1576 = dot(vec4(cbModelParam._m0[40u]), vec4(_1531, _1532, _1533, 1.0));
        _1585 = dot(vec3(isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)), isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1576) ? 0.0 : (isnan(0.0) ? _1576 : max(0.0, _1576))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1585 = 1.0;
    }
    float _1589 = (_1585 * cbModelParam._m0[1u].x) + (_1574 * (1.0 - cbModelParam._m0[1u].x));
    float _1599 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _634);
    float _1600 = isnan(_1599) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1599 : min(cbModelParam._m0[25u].z, _1599));
    float _1681;
    float _1683;
    float _1685;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1648 = fma(_851, cbModelParam._m0[13u].z, fma(_847, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _843)) + cbModelParam._m0[13u].w;
        float _1652 = fma(_851, cbModelParam._m0[14u].z, fma(_847, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _843)) + cbModelParam._m0[14u].w;
        float _1656 = fma(_851, cbModelParam._m0[15u].z, fma(_847, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _843)) + cbModelParam._m0[15u].w;
        float _1659 = fma(_792, cbModelParam._m0[13u].z, fma(_791, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _790));
        float _1662 = fma(_792, cbModelParam._m0[14u].z, fma(_791, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _790));
        float _1665 = fma(_792, cbModelParam._m0[15u].z, fma(_791, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _790));
        float _1693;
        if (_1659 > 0.0)
        {
            _1693 = abs((1.0 - _1648) / _1659);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1648 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1693 = frontier_phi_14_12_ladder;
        }
        float _1916;
        if (_1662 > 0.0)
        {
            _1916 = abs((1.0 - _1652) / _1662);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1652 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1916 = frontier_phi_23_19_ladder;
        }
        float _2162;
        if (_1665 > 0.0)
        {
            _2162 = abs((1.0 - _1656) / _1665);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1656 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2162 = frontier_phi_35_30_ladder;
        }
        float _2164 = isnan(_1916) ? _1693 : (isnan(_1693) ? _1916 : min(_1693, _1916));
        float _2165 = isnan(_2162) ? _2164 : (isnan(_2164) ? _2162 : min(_2164, _2162));
        float _2169 = (_2165 * _1659) + _1648;
        float _2170 = (_2165 * _1662) + _1652;
        float _2171 = (_2165 * _1665) + _1656;
        float _2172 = _2165 * 9.9999997473787516355514526367188e-05;
        float _2174 = (-1.0) - _2172;
        float _2176 = _2172 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2171 > _2176) || ((_2171 < _2174) || ((_2170 > _2176) || ((_2170 < _2174) || ((_2169 < _2174) || (_2169 > _2176))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2295 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2171, cbModelParam._m0[9u].z, fma(_2170, cbModelParam._m0[9u].y, _2169 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2171, cbModelParam._m0[10u].z, fma(_2170, cbModelParam._m0[10u].y, _2169 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2171, cbModelParam._m0[11u].z, fma(_2170, cbModelParam._m0[11u].y, _2169 * cbModelParam._m0[11u].x))), _1600);
            frontier_phi_13_35_ladder = _2295.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2295.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2295.x * cbModelParam._m0[1u].y;
        }
        _1681 = frontier_phi_13_35_ladder_2;
        _1683 = frontier_phi_13_35_ladder_1;
        _1685 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1669 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_790, _791, _792), _1600);
        _1681 = _1669.x * cbModelParam._m0[1u].y;
        _1683 = _1669.y * cbModelParam._m0[1u].y;
        _1685 = _1669.z * cbModelParam._m0[1u].y;
    }
    float _1689 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _634);
    float _1690 = isnan(_1689) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1689 : min(cbModelParam._m0[25u].w, _1689));
    float _1781;
    float _1783;
    float _1785;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1745 = fma(_851, cbModelParam._m0[21u].z, fma(_847, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _843)) + cbModelParam._m0[21u].w;
        float _1749 = fma(_851, cbModelParam._m0[22u].z, fma(_847, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _843)) + cbModelParam._m0[22u].w;
        float _1753 = fma(_851, cbModelParam._m0[23u].z, fma(_847, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _843)) + cbModelParam._m0[23u].w;
        float _1756 = fma(_792, cbModelParam._m0[21u].z, fma(_791, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _790));
        float _1759 = fma(_792, cbModelParam._m0[22u].z, fma(_791, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _790));
        float _1762 = fma(_792, cbModelParam._m0[23u].z, fma(_791, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _790));
        float _1921;
        if (_1756 > 0.0)
        {
            _1921 = abs((1.0 - _1745) / _1756);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1745 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1921 = frontier_phi_25_21_ladder;
        }
        float _2189;
        if (_1759 > 0.0)
        {
            _2189 = abs((1.0 - _1749) / _1759);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1749 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2189 = frontier_phi_37_32_ladder;
        }
        float _2394;
        if (_1762 > 0.0)
        {
            _2394 = abs((1.0 - _1753) / _1762);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1753 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2394 = frontier_phi_46_43_ladder;
        }
        float _2396 = isnan(_2189) ? _1921 : (isnan(_1921) ? _2189 : min(_1921, _2189));
        float _2397 = isnan(_2394) ? _2396 : (isnan(_2396) ? _2394 : min(_2396, _2394));
        float _2401 = (_2397 * _1756) + _1745;
        float _2402 = (_2397 * _1759) + _1749;
        float _2403 = (_2397 * _1762) + _1753;
        float _2404 = _2397 * 9.9999997473787516355514526367188e-05;
        float _2405 = (-1.0) - _2404;
        float _2407 = _2404 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2403 > _2407) || ((_2403 < _2405) || ((_2402 > _2407) || ((_2402 < _2405) || ((_2401 < _2405) || (_2401 > _2407))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2602 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2403, cbModelParam._m0[17u].z, fma(_2402, cbModelParam._m0[17u].y, _2401 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2403, cbModelParam._m0[18u].z, fma(_2402, cbModelParam._m0[18u].y, _2401 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2403, cbModelParam._m0[19u].z, fma(_2402, cbModelParam._m0[19u].y, _2401 * cbModelParam._m0[19u].x))), _1690);
            frontier_phi_22_46_ladder = _2602.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2602.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2602.x * cbModelParam._m0[1u].z;
        }
        _1781 = frontier_phi_22_46_ladder_2;
        _1783 = frontier_phi_22_46_ladder_1;
        _1785 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1765 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_790, _791, _792), _1690);
        _1781 = _1765.x * cbModelParam._m0[1u].z;
        _1783 = _1765.y * cbModelParam._m0[1u].z;
        _1785 = _1765.z * cbModelParam._m0[1u].z;
    }
    float _1797 = ((((1.0 - _811) * ((_798 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_811 * _798)) * _782;
    float _1798 = _1797 * ((cbModelParam._m0[1u].w * (_1781 - _1681)) + _1681);
    float _1799 = _1797 * ((cbModelParam._m0[1u].w * (_1783 - _1683)) + _1683);
    float _1800 = _1797 * ((cbModelParam._m0[1u].w * (_1785 - _1685)) + _1685);
    float _1803 = fma(_1800, cbSceneParam._m0[89u].z, fma(_1799, cbSceneParam._m0[89u].y, _1798 * cbSceneParam._m0[89u].x));
    float _1806 = fma(_1800, cbSceneParam._m0[90u].z, fma(_1799, cbSceneParam._m0[90u].y, _1798 * cbSceneParam._m0[90u].x));
    float _1809 = fma(_1800, cbSceneParam._m0[91u].z, fma(_1799, cbSceneParam._m0[91u].y, _1798 * cbSceneParam._m0[91u].x));
    vec4 _1817 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_719, _720));
    float _1819 = _1817.w;
    float _1831 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1819);
    float _1832 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1819);
    float _1833 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1819);
    uvec4 _1837 = floatBitsToUint(cbInstanceData._m0[_757 + 5u]);
    uint _1839 = _1837.x * 14u;
    uint _1840 = _1839 + 13u;
    float _1847 = _782 + (-1.0);
    float _1852 = (cbLight._m0[_1840].x * _1847) + 1.0;
    float _1853 = (cbLight._m0[_1840].y * _1847) + 1.0;
    float _1854 = (cbLight._m0[_1840].z * _1847) + 1.0;
    float _1855 = (cbLight._m0[_1840].w * _1847) + 1.0;
    uint _1856 = _1839 + 5u;
    float _1862 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
    uint _1866 = _1839 + 4u;
    float _1875 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
    uint _1879 = _1839 | 1u;
    float _1890 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_631, _632, _633));
    float _1893 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_631, _632, _633));
    float _3987 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _3998 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1898 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * 0.3183098733425140380859375;
    float _1900 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * 0.3183098733425140380859375;
    float _1907 = ((cbLight._m0[_1856].x * _1862) * _1900) + (((cbLight._m0[_1866].x * _1831) * _1875) * _1898);
    float _1908 = ((_1862 * cbLight._m0[_1856].y) * _1900) + (((cbLight._m0[_1866].y * _1832) * _1875) * _1898);
    float _1909 = ((_1862 * cbLight._m0[_1856].z) * _1900) + (((cbLight._m0[_1866].z * _1833) * _1875) * _1898);
    uvec4 _1913 = floatBitsToUint(cbLight._m0[_1839 + 12u]);
    bool _1915 = _1913.x == 0u;
    float _1926;
    float _1928;
    float _1930;
    if (_1915)
    {
        _1926 = _1907;
        _1928 = _1908;
        _1930 = _1909;
    }
    else
    {
        uint _1934 = _1839 + 6u;
        float _1950 = (dot(vec3(cbLight._m0[_1839 + 2u].xyz), vec3(_631, _632, _633)) * 0.5) + 0.5;
        float _1951 = _1950 * _1950;
        float _4009 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1952 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1953 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
        _1926 = (((cbLight._m0[_1934].x * 0.3183098733425140380859375) * _1952) * _1953) + _1907;
        _1928 = (((cbLight._m0[_1934].y * 0.3183098733425140380859375) * _1952) * _1953) + _1908;
        _1930 = (((cbLight._m0[_1934].z * 0.3183098733425140380859375) * _1952) * _1953) + _1909;
    }
    bool _1933 = _1913.y == 0u;
    float _1971;
    float _1973;
    float _1975;
    if (_1933)
    {
        _1971 = _1926;
        _1973 = _1928;
        _1975 = _1930;
    }
    else
    {
        uint _2133 = _1839 + 7u;
        float _2149 = (dot(vec3(cbLight._m0[_1839 + 3u].xyz), vec3(_631, _632, _633)) * 0.5) + 0.5;
        float _2150 = _2149 * _2149;
        float _4025 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2151 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _2152 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _1971 = (((cbLight._m0[_2133].x * 0.3183098733425140380859375) * _2151) * _2152) + _1926;
        _1973 = (((cbLight._m0[_2133].y * 0.3183098733425140380859375) * _2151) * _2152) + _1928;
        _1975 = (((cbLight._m0[_2133].z * 0.3183098733425140380859375) * _2151) * _2152) + _1930;
    }
    uint _1978 = _1839 + 8u;
    float _1991 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1839].w)) * _634) * 0.949999988079071044921875);
    float _1992 = _1991 * _1991;
    float _1993 = cbLight._m0[_1839].x + _711;
    float _1994 = cbLight._m0[_1839].y + _712;
    float _1995 = cbLight._m0[_1839].z + _713;
    float _1999 = inversesqrt(dot(vec3(_1993, _1994, _1995), vec3(_1993, _1994, _1995)));
    float _2000 = _1999 * _1993;
    float _2001 = _1999 * _1994;
    float _2002 = _1999 * _1995;
    float _2003 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_1839].xyz));
    float _4041 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2006 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _2007 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _2008 = dot(vec3(_631, _632, _633), vec3(_2000, _2001, _2002));
    float _4063 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2011 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _2012 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_2000, _2001, _2002));
    float _4074 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2016 = _1992 * _1992;
    float _2020 = ((_2011 * _2011) * (_2016 + (-1.0))) + 1.0;
    float _2031 = (exp2(log2(1.0 - (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2032 = 1.0 - _1992;
    float _2043 = (0.5 / (((_2007 * ((_2006 * _2032) + _1992)) + 9.9999999392252902907785028219223e-09) + (((_2007 * _2032) + _1992) * _2006))) * _2006;
    float _4085 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2045 = (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_2016 / ((_2020 * _2020) * 3.141590118408203125));
    uint _2059 = _1839 + 9u;
    float _2070 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1879].w)) * _634) * 0.949999988079071044921875);
    float _2071 = _2070 * _2070;
    float _2072 = cbLight._m0[_1879].x + _711;
    float _2073 = cbLight._m0[_1879].y + _712;
    float _2074 = cbLight._m0[_1879].z + _713;
    float _2078 = inversesqrt(dot(vec3(_2072, _2073, _2074), vec3(_2072, _2073, _2074)));
    float _2079 = _2078 * _2072;
    float _2080 = _2078 * _2073;
    float _2081 = _2078 * _2074;
    float _2082 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_1879].xyz));
    float _4096 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2085 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _2086 = dot(vec3(_631, _632, _633), vec3(_2079, _2080, _2081));
    float _4107 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2089 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _2090 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_2079, _2080, _2081));
    float _4118 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2094 = _2071 * _2071;
    float _2098 = ((_2089 * _2089) * (_2094 + (-1.0))) + 1.0;
    float _2107 = (exp2(log2(1.0 - (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2108 = 1.0 - _2071;
    float _2118 = (0.5 / (((_2007 * ((_2085 * _2108) + _2071)) + 9.9999999392252902907785028219223e-09) + (((_2007 * _2108) + _2071) * _2085))) * _2085;
    float _4129 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2120 = (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_2094 / ((_2098 * _2098) * 3.141590118408203125));
    float _2130 = (((_2107 * cbLight._m0[_2059].x) * _2120) * _1862) + ((((cbLight._m0[_1978].x * _1831) * _2031) * _2045) * _1875);
    float _2131 = (((_2107 * cbLight._m0[_2059].y) * _2120) * _1862) + ((((cbLight._m0[_1978].y * _1832) * _2031) * _2045) * _1875);
    float _2132 = (((_2107 * cbLight._m0[_2059].z) * _2120) * _1862) + ((((cbLight._m0[_1978].z * _1833) * _2031) * _2045) * _1875);
    float _2194;
    float _2196;
    float _2198;
    if (_1915)
    {
        _2194 = _2130;
        _2196 = _2131;
        _2198 = _2132;
    }
    else
    {
        uint _2200 = _1839 + 2u;
        uint _2204 = _1839 + 10u;
        float _2218 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2200].w)) * _634) * 0.949999988079071044921875);
        float _2219 = _2218 * _2218;
        float _2220 = cbLight._m0[_2200].x + _711;
        float _2221 = cbLight._m0[_2200].y + _712;
        float _2222 = cbLight._m0[_2200].z + _713;
        float _2226 = inversesqrt(dot(vec3(_2220, _2221, _2222), vec3(_2220, _2221, _2222)));
        float _2227 = _2226 * _2220;
        float _2228 = _2226 * _2221;
        float _2229 = _2226 * _2222;
        float _2230 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2200].xyz));
        float _4140 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2233 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _2234 = dot(vec3(_631, _632, _633), vec3(_2227, _2228, _2229));
        float _4151 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2237 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _2238 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_2227, _2228, _2229));
        float _4162 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2242 = _2219 * _2219;
        float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
        float _2255 = (exp2(log2(1.0 - (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2256 = 1.0 - _2219;
        float _2266 = (0.5 / (((_2007 * ((_2233 * _2256) + _2219)) + 9.9999999392252902907785028219223e-09) + (((_2007 * _2256) + _2219) * _2233))) * _2233;
        float _4173 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2268 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
        float _2269 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
        _2194 = (((_2255 * cbLight._m0[_2204].x) * _2268) * _2269) + _2130;
        _2196 = (((_2255 * cbLight._m0[_2204].y) * _2268) * _2269) + _2131;
        _2198 = (((_2255 * cbLight._m0[_2204].z) * _2268) * _2269) + _2132;
    }
    float _2304;
    float _2306;
    float _2308;
    if (_1933)
    {
        _2304 = _2194;
        _2306 = _2196;
        _2308 = _2198;
    }
    else
    {
        uint _2315 = _1839 + 3u;
        uint _2319 = _1839 + 11u;
        float _2333 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2315].w)) * _634) * 0.949999988079071044921875);
        float _2334 = _2333 * _2333;
        float _2335 = cbLight._m0[_2315].x + _711;
        float _2336 = cbLight._m0[_2315].y + _712;
        float _2337 = cbLight._m0[_2315].z + _713;
        float _2341 = inversesqrt(dot(vec3(_2335, _2336, _2337), vec3(_2335, _2336, _2337)));
        float _2342 = _2341 * _2335;
        float _2343 = _2341 * _2336;
        float _2344 = _2341 * _2337;
        float _2345 = dot(vec3(_631, _632, _633), vec3(cbLight._m0[_2315].xyz));
        float _4189 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2348 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _2349 = dot(vec3(_631, _632, _633), vec3(_2342, _2343, _2344));
        float _4200 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _2353 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_2342, _2343, _2344));
        float _4211 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2357 = _2334 * _2334;
        float _2361 = ((_2352 * _2352) * (_2357 + (-1.0))) + 1.0;
        float _2370 = (exp2(log2(1.0 - (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2371 = 1.0 - _2334;
        float _2381 = (0.5 / (((_2007 * ((_2348 * _2371) + _2334)) + 9.9999999392252902907785028219223e-09) + (((_2007 * _2371) + _2334) * _2348))) * _2348;
        float _4222 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2383 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2357 / ((_2361 * _2361) * 3.141590118408203125));
        float _2384 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _2304 = (((_2370 * cbLight._m0[_2319].x) * _2383) * _2384) + _2194;
        _2306 = (((_2370 * cbLight._m0[_2319].y) * _2383) * _2384) + _2196;
        _2308 = (((_2370 * cbLight._m0[_2319].z) * _2383) * _2384) + _2198;
    }
    float _2519;
    float _2521;
    float _2523;
    float _2525;
    float _2527;
    float _2529;
    if (_1837.y == 0u)
    {
        float _2459 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2460 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2459;
        float _2461 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2459;
        float _2462 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2459;
        uvec4 _2474 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2475 = _2474.x;
        uint _2486 = uint((float(_2474.y) * floor(float(uint(cbSceneParam._m0[85u].y * _720) / _2475))) + floor(float(uint(cbSceneParam._m0[85u].x * _719) / _2475)));
        float _2496 = (log2(_2462 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2497 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        uint _2500 = uint(isnan(14.0) ? _2497 : (isnan(_2497) ? 14.0 : min(_2497, 14.0)));
        uvec4 _2505 = texelFetch(g_lightClusterGridBuffer, int(((_2500 << 2u) + (_2486 << 6u)) >> 2u));
        uint _2506 = _2505.x;
        uint _2507 = _2474.z;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        if (((((1u << ((_2507 >> 4u) & 15u)) + 4294967295u) & _2506) == 0u) || ((_2507 & 240u) == 0u))
        {
            _2607 = 0.0;
            _2609 = 0.0;
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
            _2617 = 0.0;
        }
        else
        {
            float _2608;
            float _2610;
            float _2612;
            float _2614;
            float _2616;
            float _2618;
            float _2752 = 0.0;
            float _2753 = 0.0;
            float _2754 = 0.0;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            uint _2758 = 0u;
            uint _2767;
            bool _2768;
            for (;;)
            {
                _2767 = texelFetch(g_lightClassification, int((((_2500 << 5u) + (_2486 << 9u)) + (_2758 << 2u)) >> 2u)).x;
                _2768 = _2767 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2768)
                {
                    frontier_phi_61_pred = _2752;
                    frontier_phi_61_pred_1 = _2757;
                    frontier_phi_61_pred_2 = _2756;
                    frontier_phi_61_pred_3 = _2755;
                    frontier_phi_61_pred_4 = _2754;
                    frontier_phi_61_pred_5 = _2753;
                }
                else
                {
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    uint _2882;
                    _2876 = _2752;
                    _2877 = _2753;
                    _2878 = _2754;
                    _2879 = _2755;
                    _2880 = _2756;
                    _2881 = _2757;
                    _2882 = _2767;
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    for (;;)
                    {
                        uint _2886 = uint(findLSB(_2882)) + (_2758 << 5u);
                        uint _2883 = (_2882 + 4294967295u) & _2882;
                        uint _2888 = _2886 * 48u;
                        vec4 _2902 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2888)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 3u)).x));
                        uint _2908 = (_2886 * 48u) + 4u;
                        vec4 _2921 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2908)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 3u)).x));
                        uint _2927 = (_2886 * 48u) + 8u;
                        vec3 _2938 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2927)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 2u)).x));
                        float _2942 = _2902.x - _2460;
                        float _2943 = _2902.y - _2461;
                        float _2944 = _2902.z - _2462;
                        float _2945 = dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944));
                        float _2948 = inversesqrt(_2945);
                        float _2949 = _2948 * _2942;
                        float _2950 = _2948 * _2943;
                        float _2951 = _2948 * _2944;
                        float _2952 = dot(vec3(_738, _741, _744), vec3(_2949, _2950, _2951));
                        float _2957 = 1.0 - (_2945 * _2902.w);
                        float _4248 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                        float _2958 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                        float _2959 = sqrt(_2945) * _2921.w;
                        float _2962 = 1.39999997615814208984375 / (_2959 + 1.39999997615814208984375);
                        float _2963 = _2962 * _2962;
                        float _2966 = ((1.0 - _2963) * _2952) + _2963;
                        float _2969 = _2959 * _2959;
                        float _2973 = ((isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0))) * _2958) / ((_2969 * 0.699999988079071044921875) + 1.0);
                        float _2977 = (-0.0) - _2460;
                        float _2978 = (-0.0) - _2461;
                        float _2979 = (-0.0) - _2462;
                        float _2983 = inversesqrt(dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979)));
                        float _2984 = _2983 * _2977;
                        float _2985 = _2983 * _2978;
                        float _2986 = _2983 * _2979;
                        float _2994 = exp2(log2(1.0 / ((_2969 * 3.5) + 5.0)) * 0.25);
                        float _2995 = 1.0 - _798;
                        float _3002 = sqrt(1.0 - ((1.0 - (_2995 * _2995)) * (1.0 - (_2994 * _2994))));
                        float _3003 = _3002 * _3002;
                        float _3004 = _3003 * _3003;
                        float _3005 = _2984 + _2949;
                        float _3006 = _2985 + _2950;
                        float _3007 = _2986 + _2951;
                        float _3011 = inversesqrt(dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007)));
                        float _3015 = dot(vec3(_738, _741, _744), vec3(_2984, _2985, _2986));
                        float _4264 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3018 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                        float _3019 = dot(vec3(_738, _741, _744), vec3(_3011 * _3005, _3011 * _3006, _3011 * _3007));
                        float _4275 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                        float _3022 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                        float _3026 = ((_3022 * _3022) * (_3004 + (-1.0))) + 1.0;
                        float _3027 = _2962 * _3003;
                        float _3028 = _3027 * _3027;
                        float _3031 = ((1.0 - _3028) * _2952) + _3028;
                        float _4286 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3032 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                        float _3033 = 1.0 - _3003;
                        float _3043 = (0.5 / (((_3032 * ((_3018 * _3033) + _3003)) + 9.9999999392252902907785028219223e-09) + (((_3032 * _3033) + _3003) * _3018))) * _3032;
                        float _4297 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3054 = (((_3004 * 3.1415927410125732421875) * (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) / ((_3026 * _3026) * ((_2969 * 2.1991131305694580078125) + 3.141590118408203125))) * _2958;
                        _2811 = (_2973 * _2921.x) + _2879;
                        _2812 = (_2973 * _2921.y) + _2880;
                        _2813 = (_2973 * _2921.z) + _2881;
                        _2808 = (_3054 * _2938.x) + _2876;
                        _2809 = (_3054 * _2938.y) + _2877;
                        _2810 = (_3054 * _2938.z) + _2878;
                        if (_2883 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2876 = _2808;
                            _2877 = _2809;
                            _2878 = _2810;
                            _2879 = _2811;
                            _2880 = _2812;
                            _2881 = _2813;
                            _2882 = _2883;
                        }
                    }
                    frontier_phi_61_pred = _2808;
                    frontier_phi_61_pred_1 = _2813;
                    frontier_phi_61_pred_2 = _2812;
                    frontier_phi_61_pred_3 = _2811;
                    frontier_phi_61_pred_4 = _2810;
                    frontier_phi_61_pred_5 = _2809;
                }
                _2608 = frontier_phi_61_pred;
                _2618 = frontier_phi_61_pred_1;
                _2616 = frontier_phi_61_pred_2;
                _2614 = frontier_phi_61_pred_3;
                _2612 = frontier_phi_61_pred_4;
                _2610 = frontier_phi_61_pred_5;
                uint _2759 = _2758 + 1u;
                if (_2759 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2752 = _2608;
                    _2753 = _2610;
                    _2754 = _2612;
                    _2755 = _2614;
                    _2756 = _2616;
                    _2757 = _2618;
                    _2758 = _2759;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2607 = _2608;
            _2609 = _2610;
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
            _2617 = _2618;
        }
        uvec4 _2621 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2622 = _2621.z;
        uint _2624 = (_2622 >> 8u) & 15u;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        if (((4294967295u << _2624) & _2506) == 0u)
        {
            _2720 = _2607;
            _2722 = _2609;
            _2724 = _2611;
            _2726 = _2613;
            _2728 = _2615;
            _2730 = _2617;
        }
        else
        {
            float _2745 = inversesqrt(dot(vec3(_2460, _2461, _2462), vec3(_2460, _2461, _2462)));
            float _2746 = _2745 * _2460;
            float _2747 = _2745 * _2461;
            float _2748 = _2745 * _2462;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2624 < ((_2622 >> 12u) & 15u))
            {
                float _2721;
                float _2723;
                float _2725;
                float _2727;
                float _2729;
                float _2731;
                float _2859 = _2607;
                float _2860 = _2609;
                float _2861 = _2611;
                float _2862 = _2613;
                float _2863 = _2615;
                float _2864 = _2617;
                uint _2865 = _2624;
                uint _2874;
                bool _2875;
                for (;;)
                {
                    _2874 = texelFetch(g_lightClassification, int((((_2500 << 5u) + (_2486 << 9u)) + (_2865 << 2u)) >> 2u)).x;
                    _2875 = _2874 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2875)
                    {
                        frontier_phi_67_pred = _2862;
                        frontier_phi_67_pred_1 = _2863;
                        frontier_phi_67_pred_2 = _2864;
                        frontier_phi_67_pred_3 = _2861;
                        frontier_phi_67_pred_4 = _2860;
                        frontier_phi_67_pred_5 = _2859;
                    }
                    else
                    {
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3072 = _2859;
                        float _3073 = _2860;
                        float _3074 = _2861;
                        float _3075 = _2862;
                        float _3076 = _2863;
                        float _3077 = _2864;
                        uint _3078 = _2874;
                        uint _3079;
                        vec4 _3104;
                        float _3105;
                        vec4 _3120;
                        vec3 _3132;
                        vec4 _3147;
                        vec4 _3162;
                        float _3209;
                        bool _3210;
                        for (;;)
                        {
                            uint _3089 = ((_2865 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3078));
                            _3079 = (_3078 + 4294967295u) & _3078;
                            uint _3091 = _3089 * 40u;
                            _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            _3105 = _3104.w;
                            uint _3107 = (_3089 * 40u) + 4u;
                            _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            uint _3122 = (_3089 * 40u) + 8u;
                            _3132 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x));
                            uint _3134 = (_3089 * 40u) + 16u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3149 = (_3089 * 40u) + 20u;
                            _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            uint _3165 = (_3089 * 40u) + 24u;
                            vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3184 = (_3089 * 40u) + 28u;
                            vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            _3209 = fma(_2462, _3197.z, fma(_2461, _3197.y, _3197.x * _2460)) + _3197.w;
                            _3210 = !((fma(_2462, _3178.z, fma(_2461, _3178.y, _3178.x * _2460)) + _3178.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3210)
                            {
                                float _3237 = _3104.x - _2460;
                                float _3238 = _3104.y - _2461;
                                float _3239 = _3104.z - _2462;
                                float _3240 = dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239));
                                float _3243 = inversesqrt(_3240);
                                float _3244 = _3243 * _3237;
                                float _3245 = _3243 * _3238;
                                float _3246 = _3243 * _3239;
                                float _3250 = 1.0 - (_3240 / (_3105 * _3105));
                                float _4308 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3251 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                                float _3255 = sqrt(_3240) * _3120.w;
                                float _3257 = 1.39999997615814208984375 / (_3255 + 1.39999997615814208984375);
                                float _3258 = _3257 * _3257;
                                float _3261 = ((1.0 - _3258) * dot(vec3(_3244, _3245, _3246), vec3(_738, _741, _744))) + _3258;
                                float _3264 = _3255 * _3255;
                                float _3268 = (fma(_2462, _3147.z, fma(_2461, _3147.y, _3147.x * _2460)) + _3147.w) / _3209;
                                float _3269 = (fma(_2462, _3162.z, fma(_2461, _3162.y, _3162.x * _2460)) + _3162.w) / _3209;
                                float _3273 = 1.0 - dot(vec2(_3268, _3269), vec2(_3268, _3269));
                                float _4324 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3274 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                                float _3275 = _3274 * (((isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0))) * _3251) / ((_3264 * 0.699999988079071044921875) + 1.0));
                                float _3287 = exp2(log2(1.0 / ((_3264 * 3.5) + 5.0)) * 0.25);
                                float _3288 = 1.0 - _798;
                                float _3295 = sqrt(1.0 - ((1.0 - (_3288 * _3288)) * (1.0 - (_3287 * _3287))));
                                float _3296 = _3295 * _3295;
                                float _3297 = _3296 * _3296;
                                float _3298 = _3244 - _2746;
                                float _3299 = _3245 - _2747;
                                float _3300 = _3246 - _2748;
                                float _3304 = inversesqrt(dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300)));
                                float _3308 = dot(vec3(_738, _741, _744), vec3((-0.0) - _2746, (-0.0) - _2747, (-0.0) - _2748));
                                float _4335 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3311 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                                float _3312 = dot(vec3(_738, _741, _744), vec3(_3304 * _3298, _3304 * _3299, _3304 * _3300));
                                float _4346 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3315 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                                float _3319 = ((_3315 * _3315) * (_3297 + (-1.0))) + 1.0;
                                float _3320 = _3257 * _3296;
                                float _3321 = _3320 * _3320;
                                float _3327 = ((1.0 - _3321) * dot(vec3(_738, _741, _744), vec3(_3244, _3245, _3246))) + _3321;
                                float _4357 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3328 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                                float _3329 = 1.0 - _3296;
                                float _3339 = (0.5 / (((_3328 * ((_3311 * _3329) + _3296)) + 9.9999999392252902907785028219223e-09) + (((_3328 * _3329) + _3296) * _3311))) * _3328;
                                float _4368 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3349 = (_3274 * _3251) * (((_3297 * 3.1415927410125732421875) * (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) / ((_3319 * _3319) * ((_3264 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3349 * _3132.x;
                                frontier_phi_73_pred_1 = _3349 * _3132.y;
                                frontier_phi_73_pred_2 = _3275 * _3120.z;
                                frontier_phi_73_pred_3 = _3275 * _3120.y;
                                frontier_phi_73_pred_4 = _3275 * _3120.x;
                                frontier_phi_73_pred_5 = _3349 * _3132.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3353 = frontier_phi_73_pred;
                            _3354 = frontier_phi_73_pred_1;
                            _3358 = frontier_phi_73_pred_2;
                            _3357 = frontier_phi_73_pred_3;
                            _3356 = frontier_phi_73_pred_4;
                            _3355 = frontier_phi_73_pred_5;
                            _3062 = _3356 + _3075;
                            _3063 = _3357 + _3076;
                            _3064 = _3358 + _3077;
                            _3059 = _3353 + _3072;
                            _3060 = _3354 + _3073;
                            _3061 = _3355 + _3074;
                            if (_3079 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3064;
                                _3078 = _3079;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3062;
                        frontier_phi_67_pred_1 = _3063;
                        frontier_phi_67_pred_2 = _3064;
                        frontier_phi_67_pred_3 = _3061;
                        frontier_phi_67_pred_4 = _3060;
                        frontier_phi_67_pred_5 = _3059;
                    }
                    _2727 = frontier_phi_67_pred;
                    _2729 = frontier_phi_67_pred_1;
                    _2731 = frontier_phi_67_pred_2;
                    _2725 = frontier_phi_67_pred_3;
                    _2723 = frontier_phi_67_pred_4;
                    _2721 = frontier_phi_67_pred_5;
                    uint _2866 = _2865 + 1u;
                    if (_2866 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2859 = _2721;
                        _2860 = _2723;
                        _2861 = _2725;
                        _2862 = _2727;
                        _2863 = _2729;
                        _2864 = _2731;
                        _2865 = _2866;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2729;
                frontier_phi_55_56_ladder_1 = _2731;
                frontier_phi_55_56_ladder_2 = _2727;
                frontier_phi_55_56_ladder_3 = _2725;
                frontier_phi_55_56_ladder_4 = _2723;
                frontier_phi_55_56_ladder_5 = _2721;
            }
            else
            {
                frontier_phi_55_56_ladder = _2615;
                frontier_phi_55_56_ladder_1 = _2617;
                frontier_phi_55_56_ladder_2 = _2613;
                frontier_phi_55_56_ladder_3 = _2611;
                frontier_phi_55_56_ladder_4 = _2609;
                frontier_phi_55_56_ladder_5 = _2607;
            }
            _2720 = frontier_phi_55_56_ladder_5;
            _2722 = frontier_phi_55_56_ladder_4;
            _2724 = frontier_phi_55_56_ladder_3;
            _2726 = frontier_phi_55_56_ladder_2;
            _2728 = frontier_phi_55_56_ladder;
            _2730 = frontier_phi_55_56_ladder_1;
        }
        float _2735 = isnan(1.0) ? _782 : (isnan(_782) ? 1.0 : min(_782, 1.0));
        _2519 = (_2735 * _2726) + _1971;
        _2521 = (_2735 * _2728) + _1973;
        _2523 = (_2735 * _2730) + _1975;
        _2525 = ((_2720 * 0.039999999105930328369140625) * _2735) + _2304;
        _2527 = ((_2722 * 0.039999999105930328369140625) * _2735) + _2306;
        _2529 = ((_2724 * 0.039999999105930328369140625) * _2735) + _2308;
    }
    else
    {
        _2519 = _1971;
        _2521 = _1973;
        _2523 = _1975;
        _2525 = _2304;
        _2527 = _2306;
        _2529 = _2308;
    }
    float _4384 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4395 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4406 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    uint _2549 = _757 + 6u;
    float _2557 = _719 / cbSceneParam._m0[86u].x;
    float _2558 = _720 / cbSceneParam._m0[86u].y;
    vec4 _2572 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2557, _2558, (log2((isnan(cbSceneParam._m0[77u].w) ? _653 : (isnan(_653) ? cbSceneParam._m0[77u].w : min(_653, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2574 = _2572.x;
    float _2575 = _2572.y;
    float _2576 = _2572.z;
    float _2577 = _2572.w;
    float _2670;
    float _2672;
    float _2674;
    float _2676;
    if (_653 > cbSceneParam._m0[78u].w)
    {
        float _2632 = isnan(_653) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _653 : min(cbSceneParam._m0[80u].w, _653));
        float _2633 = _2632 / _653;
        float _2644 = _2633 * _704;
        float _2645 = _705 * _2633;
        float _2646 = (-0.0) - _2645;
        float _2648 = _2633 * _706;
        float _2650 = (cbSceneParam._m0[77u].w * _2646) / _2632;
        float _2651 = _2650 + cbSceneParam._m0[79u].w;
        float _2652 = cbSceneParam._m0[79u].w - _2645;
        float _2658 = sqrt(((_2644 * _2644) + (_2645 * _2645)) + (_2648 * _2648));
        float _2661 = (1.0 - (cbSceneParam._m0[77u].w / _2632)) * _2658;
        float _2666 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2668 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2821;
        if (abs((_2646 - _2650) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2821 = ((((_2651 > 0.0) ? exp2(_2666 * _2651) : (2.0 - exp2(_2668 * _2651))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2661;
        }
        else
        {
            float _2781 = 1.0 / cbSceneParam._m0[80u].x;
            float _2782 = isnan(_2652) ? _2651 : (isnan(_2651) ? _2652 : max(_2651, _2652));
            float _2783 = isnan(_2652) ? _2651 : (isnan(_2651) ? _2652 : min(_2651, _2652));
            float _2792 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : min(_2782, 0.0));
            float _2793 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : min(_2783, 0.0));
            _2821 = ((abs(_2658 / _2646) * cbSceneParam._m0[80u].y) * ((((_2792 - _2793) * 2.0) - ((exp2(_2666 * (isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0)))) - exp2(_2666 * (isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0))))) * _2781)) - ((exp2(_2668 * _2792) - exp2(_2668 * _2793)) * _2781))) + (_2661 * cbSceneParam._m0[80u].z);
        }
        vec4 _2823 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2557, _2558, 1.0), 0.0);
        float _2832 = exp2((_2821 * (-1.44269502162933349609375)) * (1.0 - _2823.w));
        float _2833 = log2(_2832);
        float _2849 = log2(_2577);
        _2670 = (exp2(_2849 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2833 * cbSceneParam._m0[78u].x)) * _2823.x) / cbSceneParam._m0[78u].x)) + _2574;
        _2672 = (exp2(_2849 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2833 * cbSceneParam._m0[78u].y)) * _2823.y) / cbSceneParam._m0[78u].y)) + _2575;
        _2674 = (exp2(_2849 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2833 * cbSceneParam._m0[78u].z)) * _2823.z) / cbSceneParam._m0[78u].z)) + _2576;
        _2676 = _2832 * _2577;
    }
    else
    {
        _2670 = _2574;
        _2672 = _2575;
        _2674 = _2576;
        _2676 = _2577;
    }
    float _2688 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2689 = _2688 == 3.0;
    float _2690 = log2(_2676);
    float _2697 = exp2(_2690 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_2519 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _782))) + ((_2525 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1589)) * cbPerFrame._m0[3u].x));
    float _2698 = exp2(_2690 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2521 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _782))) + ((_2527 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1589)) * cbPerFrame._m0[3u].x));
    float _2699 = exp2(_2690 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2523 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _782))) + ((_2529 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1589)) * cbPerFrame._m0[3u].x));
    float _2708 = (_2688 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2708 * (_2689 ? _2697 : (_2697 + (cbSceneParam._m0[72u].w * _2670)));
    SV_Target.y = _2708 * (_2689 ? _2698 : (_2698 + (cbSceneParam._m0[72u].w * _2672)));
    SV_Target.z = _2708 * (_2689 ? _2699 : (_2699 + (cbSceneParam._m0[72u].w * _2674)));
    SV_Target.w = cbInstanceData._m0[_2549].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2549].w;
}


