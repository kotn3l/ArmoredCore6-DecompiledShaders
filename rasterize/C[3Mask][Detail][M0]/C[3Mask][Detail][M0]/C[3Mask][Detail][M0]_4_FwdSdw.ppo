#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1156;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _242 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _248 = _242.x * cbMtdParam._m0[10u].x;
    float _249 = _242.y * cbMtdParam._m0[10u].y;
    float _250 = _242.z * cbMtdParam._m0[10u].z;
    vec4 _269 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _316 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x;
    float _327 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _316)) + 1.0;
    float _3748 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _328 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _335 = (_328 * ((_269.x * cbMtdParam._m0[11u].x) - _248)) + _248;
    float _336 = (_328 * ((_269.y * cbMtdParam._m0[11u].y) - _249)) + _249;
    float _337 = (_328 * ((_269.z * cbMtdParam._m0[11u].z) - _250)) + _250;
    vec4 _356 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _386 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _316)) + 1.0;
    float _3759 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _394 = (_387 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _395 = (_387 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _396 = (_387 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    vec4 _413 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _438 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _316)) + 1.0;
    float _3770 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    vec4 _466 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _474 = ((((_439 * ((_413.x * cbMtdParam._m0[13u].x) - _394)) + _394) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _466.x;
    float _477 = ((((_439 * ((_413.y * cbMtdParam._m0[13u].y) - _395)) + _395) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _466.y;
    float _480 = ((((_439 * ((_413.z * cbMtdParam._m0[13u].z) - _396)) + _396) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _466.z;
    vec4 _492 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _510 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _512 = _510.x;
    float _513 = _510.y;
    float _519 = cbMtdParam._m0[16u].w * _510.z;
    float _522 = (((cbMtdParam._m0[17u].x * _492.z) - _519) * _328) + _519;
    vec4 _535 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _544 = (((cbMtdParam._m0[17u].y * _535.z) - _522) * _387) + _522;
    vec4 _557 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _566 = (((cbMtdParam._m0[17u].z * _557.z) - _544) * _439) + _544;
    vec4 _579 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _592 = ((_492.x - _512) * _328) + _512;
    float _593 = ((_492.y - _513) * _328) + _513;
    float _598 = ((_535.x - _592) * _387) + _592;
    float _599 = ((_535.y - _593) * _387) + _593;
    float _608 = ((((_557.x - _598) * _439) + _598) * 2.0) + (-1.0);
    float _609 = ((((_557.y - _599) * _439) + _599) * 2.0) + (-1.0);
    float _610 = dot(vec2(_608, _609), vec2(_608, _609));
    float _3781 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _615 = sqrt(1.0 - (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))));
    float _618 = (((_579.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _608;
    float _619 = (((_579.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _609;
    float _622 = fma(_615, _212 * NORMAL.x, fma(_619, _219 * TANGENT.x, (_205 * _197) * _618));
    float _625 = fma(_615, _212 * NORMAL.y, fma(_619, _219 * TANGENT.y, (_205 * _198) * _618));
    float _628 = fma(_615, _212 * NORMAL.z, fma(_619, _219 * TANGENT.z, (_205 * _199) * _618));
    float _632 = inversesqrt(dot(vec3(_622, _625, _628), vec3(_622, _625, _628)));
    float _633 = _632 * _622;
    float _634 = _632 * _625;
    float _635 = _632 * _628;
    float _3792 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _636 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _3803 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _3814 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _3825 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _655 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _706 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _696);
    float _707 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _696);
    float _708 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _696);
    float _712 = inversesqrt(dot(vec3(_706, _707, _708), vec3(_706, _707, _708)));
    float _713 = _706 * _712;
    float _714 = _707 * _712;
    float _715 = _708 * _712;
    float _721 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _722 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _740 = fma(_635, cbSceneParam._m0[5u].z, fma(_634, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _633));
    float _743 = fma(_635, cbSceneParam._m0[6u].z, fma(_634, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _633));
    float _746 = fma(_635, cbSceneParam._m0[7u].z, fma(_634, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _633));
    uint _759 = uint(roundEven(NORMAL.w)) * 13u;
    uint _761 = (_759 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _767 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0)))) * cbInstanceData._m0[_761].x;
    float _768 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0)))) * cbInstanceData._m0[_761].y;
    float _769 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * cbInstanceData._m0[_761].z;
    float _3836 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _3847 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _3858 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _772 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    vec4 _781 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _721, cbSceneParam._m0[86u].y * _722));
    float _784 = _781.x * TEXCOORD_5.w;
    float _785 = dot(vec3(_633, _634, _635), vec3(_713, _714, _715));
    float _788 = _785 * 2.0;
    float _792 = (_788 * _633) - _713;
    float _793 = (_788 * _634) - _714;
    float _794 = (_788 * _635) - _715;
    float _798 = abs(dot(vec3(_713, _714, _715), vec3(_633, _634, _635)));
    float _3869 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _800 = sqrt(_636);
    float _813 = exp2((_800 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_800 * 3.0));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1155;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _880 = fma(_853, cbModelParam._m0[26u].z, fma(_849, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _845));
        float _884 = fma(_853, cbModelParam._m0[27u].z, fma(_849, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _845));
        float _888 = fma(_853, cbModelParam._m0[28u].z, fma(_849, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _845));
        float _913 = _845 + _633;
        float _914 = _849 + _634;
        float _915 = _853 + _635;
        float _925 = fma(_915, cbModelParam._m0[26u].z, fma(_914, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _913)) - _880;
        float _926 = fma(_915, cbModelParam._m0[27u].z, fma(_914, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _913)) - _884;
        float _927 = fma(_915, cbModelParam._m0[28u].z, fma(_914, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _913)) - _888;
        float _931 = inversesqrt(dot(vec3(_925, _926, _927), vec3(_925, _926, _927)));
        float _944 = ((_931 * _925) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_880 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_931 * _926) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_884 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_931 * _927) / cbModelParam._m0[34u].z) + ((((((_888 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        float _983 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_949.x + (-0.5));
        float _985 = _983 * (_949.y + (-0.5));
        float _986 = _983 * (_949.z + (-0.5));
        float _993 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_956.x + (-0.5));
        float _995 = _993 * (_956.y + (-0.5));
        float _996 = _993 * (_956.z + (-0.5));
        float _1003 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_963.x + (-0.5));
        float _1005 = _1003 * (_963.y + (-0.5));
        float _1006 = _1003 * (_963.z + (-0.5));
        float _1013 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_970.x + (-0.5));
        float _1015 = _1013 * (_970.y + (-0.5));
        float _1016 = _1013 * (_970.z + (-0.5));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = _984 * 0.5;
        float _1021 = _994 * 0.5;
        float _1022 = _1004 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1037 = (dot(vec3(_633, _634, _635), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1047 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3917 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1049 + 1.0))) + _1054) * _1017;
        float _1064 = _985 * 0.5;
        float _1065 = _995 * 0.5;
        float _1066 = _1005 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_633, _634, _635), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3950 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1091 + 1.0))) + _1096) * _1018;
        float _1106 = _986 * 0.5;
        float _1107 = _996 * 0.5;
        float _1108 = _1006 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_633, _634, _635), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3961 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3972 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3983 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1133 + 1.0))) + _1138) * _1019;
        _1155 = _986;
        _1157 = _985;
        _1158 = _984;
        _1159 = _996;
        _1160 = _995;
        _1161 = _994;
        _1162 = _1006;
        _1163 = _1005;
        _1164 = _1004;
        _1165 = _1019;
        _1166 = _1018;
        _1167 = _1017;
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1170 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
    }
    else
    {
        _1155 = _1156;
        _1157 = _1156;
        _1158 = _1156;
        _1159 = _1156;
        _1160 = _1156;
        _1161 = _1156;
        _1162 = _1156;
        _1163 = _1156;
        _1164 = _1156;
        _1165 = _1156;
        _1166 = _1156;
        _1167 = _1156;
        _1168 = 0.0;
        _1169 = 0.0;
        _1170 = 0.0;
    }
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1196 = fma(_853, cbModelParam._m0[30u].z, fma(_849, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _845));
        float _1200 = fma(_853, cbModelParam._m0[31u].z, fma(_849, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _845));
        float _1204 = fma(_853, cbModelParam._m0[32u].z, fma(_849, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _845));
        float _1227 = _845 + _633;
        float _1228 = _849 + _634;
        float _1229 = _853 + _635;
        float _1239 = fma(_1229, cbModelParam._m0[30u].z, fma(_1228, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1227)) - _1196;
        float _1240 = fma(_1229, cbModelParam._m0[31u].z, fma(_1228, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1227)) - _1200;
        float _1241 = fma(_1229, cbModelParam._m0[32u].z, fma(_1228, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1227)) - _1204;
        float _1245 = inversesqrt(dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241)));
        float _1258 = ((_1245 * _1239) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1196 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1259 = ((_1245 * _1240) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1200 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1260 = ((_1245 * _1241) / cbModelParam._m0[35u].z) + ((((((_1204 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        float _1295 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1262.x + (-0.5));
        float _1297 = _1295 * (_1262.y + (-0.5));
        float _1298 = _1295 * (_1262.z + (-0.5));
        float _1305 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1269.x + (-0.5));
        float _1307 = _1305 * (_1269.y + (-0.5));
        float _1308 = _1305 * (_1269.z + (-0.5));
        float _1315 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1276.x + (-0.5));
        float _1317 = _1315 * (_1276.y + (-0.5));
        float _1318 = _1315 * (_1276.z + (-0.5));
        float _1325 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1283.x + (-0.5));
        float _1327 = _1325 * (_1283.y + (-0.5));
        float _1328 = _1325 * (_1283.z + (-0.5));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = _1296 * 0.5;
        float _1333 = _1306 * 0.5;
        float _1334 = _1316 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_633, _634, _635), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4046 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1359 + 1.0))) + _1364) * _1329;
        float _1374 = _1297 * 0.5;
        float _1375 = _1307 * 0.5;
        float _1376 = _1317 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_633, _634, _635), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _4057 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _4068 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _4079 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1401 + 1.0))) + _1406) * _1330;
        float _1416 = _1298 * 0.5;
        float _1417 = _1308 * 0.5;
        float _1418 = _1318 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_633, _634, _635), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4090 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _4101 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _4112 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1443 + 1.0))) + _1448) * _1331;
        _1465 = _1298;
        _1466 = _1297;
        _1467 = _1296;
        _1468 = _1308;
        _1469 = _1307;
        _1470 = _1306;
        _1471 = _1318;
        _1472 = _1317;
        _1473 = _1316;
        _1474 = _1331;
        _1475 = _1330;
        _1476 = _1329;
        _1477 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
        _1478 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
        _1479 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
    }
    else
    {
        _1465 = _1156;
        _1466 = _1156;
        _1467 = _1156;
        _1468 = _1156;
        _1469 = _1156;
        _1470 = _1156;
        _1471 = _1156;
        _1472 = _1156;
        _1473 = _1156;
        _1474 = _1156;
        _1475 = _1156;
        _1476 = _1156;
        _1477 = 0.0;
        _1478 = 0.0;
        _1479 = 0.0;
    }
    float _1489 = (cbModelParam._m0[1u].x * (_1477 - _1168)) + _1168;
    float _1490 = (cbModelParam._m0[1u].x * (_1478 - _1169)) + _1169;
    float _1491 = (cbModelParam._m0[1u].x * (_1479 - _1170)) + _1170;
    float _1512 = fma(_1491, cbSceneParam._m0[89u].z, fma(_1490, cbSceneParam._m0[89u].y, _1489 * cbSceneParam._m0[89u].x));
    float _1515 = fma(_1491, cbSceneParam._m0[90u].z, fma(_1490, cbSceneParam._m0[90u].y, _1489 * cbSceneParam._m0[90u].x));
    float _1518 = fma(_1491, cbSceneParam._m0[91u].z, fma(_1490, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1489));
    float _1533 = _792 * 0.5;
    float _1534 = _793 * 0.5;
    float _1535 = _794 * 0.5;
    float _1536 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1467, _1470, _1473, _1476));
    float _1539 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1466, _1469, _1472, _1475));
    float _1542 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1465, _1468, _1471, _1474));
    float _1576;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1549 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1155, _1159, _1162, _1165));
        float _1553 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1157, _1160, _1163, _1166));
        float _1557 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1158, _1161, _1164, _1167));
        float _1564 = dot(vec4(cbModelParam._m0[39u]), vec4(_1533, _1534, _1535, 1.0));
        _1576 = dot(vec3(isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1564) ? 0.0 : (isnan(0.0) ? _1564 : max(0.0, _1564))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1576 = 1.0;
    }
    float _1587;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1578 = dot(vec4(cbModelParam._m0[40u]), vec4(_1533, _1534, _1535, 1.0));
        _1587 = dot(vec3(isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1578) ? 0.0 : (isnan(0.0) ? _1578 : max(0.0, _1578))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1587 = 1.0;
    }
    float _1591 = (_1587 * cbModelParam._m0[1u].x) + (_1576 * (1.0 - cbModelParam._m0[1u].x));
    float _1601 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _636);
    float _1602 = isnan(_1601) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1601 : min(cbModelParam._m0[25u].z, _1601));
    float _1683;
    float _1685;
    float _1687;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1650 = fma(_853, cbModelParam._m0[13u].z, fma(_849, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _845)) + cbModelParam._m0[13u].w;
        float _1654 = fma(_853, cbModelParam._m0[14u].z, fma(_849, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _845)) + cbModelParam._m0[14u].w;
        float _1658 = fma(_853, cbModelParam._m0[15u].z, fma(_849, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _845)) + cbModelParam._m0[15u].w;
        float _1661 = fma(_794, cbModelParam._m0[13u].z, fma(_793, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _792));
        float _1664 = fma(_794, cbModelParam._m0[14u].z, fma(_793, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _792));
        float _1667 = fma(_794, cbModelParam._m0[15u].z, fma(_793, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _792));
        float _1695;
        if (_1661 > 0.0)
        {
            _1695 = abs((1.0 - _1650) / _1661);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1650 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1695 = frontier_phi_14_12_ladder;
        }
        float _1866;
        if (_1664 > 0.0)
        {
            _1866 = abs((1.0 - _1654) / _1664);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1654 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1866 = frontier_phi_23_19_ladder;
        }
        float _2161;
        if (_1667 > 0.0)
        {
            _2161 = abs((1.0 - _1658) / _1667);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1658 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2161 = frontier_phi_35_30_ladder;
        }
        float _2163 = isnan(_1866) ? _1695 : (isnan(_1695) ? _1866 : min(_1695, _1866));
        float _2164 = isnan(_2161) ? _2163 : (isnan(_2163) ? _2161 : min(_2163, _2161));
        float _2168 = (_2164 * _1661) + _1650;
        float _2169 = (_2164 * _1664) + _1654;
        float _2170 = (_2164 * _1667) + _1658;
        float _2171 = _2164 * 9.9999997473787516355514526367188e-05;
        float _2173 = (-1.0) - _2171;
        float _2175 = _2171 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2170 > _2175) || ((_2170 < _2173) || ((_2169 > _2175) || ((_2169 < _2173) || ((_2168 < _2173) || (_2168 > _2175))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2315 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2170, cbModelParam._m0[9u].z, fma(_2169, cbModelParam._m0[9u].y, _2168 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2170, cbModelParam._m0[10u].z, fma(_2169, cbModelParam._m0[10u].y, _2168 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2170, cbModelParam._m0[11u].z, fma(_2169, cbModelParam._m0[11u].y, _2168 * cbModelParam._m0[11u].x))), _1602);
            frontier_phi_13_35_ladder = _2315.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2315.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2315.x * cbModelParam._m0[1u].y;
        }
        _1683 = frontier_phi_13_35_ladder_2;
        _1685 = frontier_phi_13_35_ladder_1;
        _1687 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1671 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_792, _793, _794), _1602);
        _1683 = _1671.x * cbModelParam._m0[1u].y;
        _1685 = _1671.y * cbModelParam._m0[1u].y;
        _1687 = _1671.z * cbModelParam._m0[1u].y;
    }
    float _1691 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _636);
    float _1692 = isnan(_1691) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1691 : min(cbModelParam._m0[25u].w, _1691));
    float _1783;
    float _1785;
    float _1787;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1747 = fma(_853, cbModelParam._m0[21u].z, fma(_849, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _845)) + cbModelParam._m0[21u].w;
        float _1751 = fma(_853, cbModelParam._m0[22u].z, fma(_849, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _845)) + cbModelParam._m0[22u].w;
        float _1755 = fma(_853, cbModelParam._m0[23u].z, fma(_849, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _845)) + cbModelParam._m0[23u].w;
        float _1758 = fma(_794, cbModelParam._m0[21u].z, fma(_793, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _792));
        float _1761 = fma(_794, cbModelParam._m0[22u].z, fma(_793, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _792));
        float _1764 = fma(_794, cbModelParam._m0[23u].z, fma(_793, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _792));
        float _1871;
        if (_1758 > 0.0)
        {
            _1871 = abs((1.0 - _1747) / _1758);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1747 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1871 = frontier_phi_25_21_ladder;
        }
        float _2188;
        if (_1761 > 0.0)
        {
            _2188 = abs((1.0 - _1751) / _1761);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1751 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2188 = frontier_phi_37_32_ladder;
        }
        float _2515;
        if (_1764 > 0.0)
        {
            _2515 = abs((1.0 - _1755) / _1764);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1755 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2515 = frontier_phi_47_44_ladder;
        }
        float _2517 = isnan(_2188) ? _1871 : (isnan(_1871) ? _2188 : min(_1871, _2188));
        float _2518 = isnan(_2515) ? _2517 : (isnan(_2517) ? _2515 : min(_2517, _2515));
        float _2522 = (_2518 * _1758) + _1747;
        float _2523 = (_2518 * _1761) + _1751;
        float _2524 = (_2518 * _1764) + _1755;
        float _2525 = _2518 * 9.9999997473787516355514526367188e-05;
        float _2526 = (-1.0) - _2525;
        float _2528 = _2525 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2524 > _2528) || ((_2524 < _2526) || ((_2523 > _2528) || ((_2523 < _2526) || ((_2522 < _2526) || (_2522 > _2528))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2642 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2524, cbModelParam._m0[17u].z, fma(_2523, cbModelParam._m0[17u].y, _2522 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2524, cbModelParam._m0[18u].z, fma(_2523, cbModelParam._m0[18u].y, _2522 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2524, cbModelParam._m0[19u].z, fma(_2523, cbModelParam._m0[19u].y, _2522 * cbModelParam._m0[19u].x))), _1692);
            frontier_phi_22_47_ladder = _2642.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2642.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2642.x * cbModelParam._m0[1u].z;
        }
        _1783 = frontier_phi_22_47_ladder_2;
        _1785 = frontier_phi_22_47_ladder_1;
        _1787 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1767 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_792, _793, _794), _1692);
        _1783 = _1767.x * cbModelParam._m0[1u].z;
        _1785 = _1767.y * cbModelParam._m0[1u].z;
        _1787 = _1767.z * cbModelParam._m0[1u].z;
    }
    float _1799 = ((((1.0 - _813) * ((_800 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_813 * _800)) * _784;
    float _1800 = _1799 * ((cbModelParam._m0[1u].w * (_1783 - _1683)) + _1683);
    float _1801 = _1799 * ((cbModelParam._m0[1u].w * (_1785 - _1685)) + _1685);
    float _1802 = _1799 * ((cbModelParam._m0[1u].w * (_1787 - _1687)) + _1687);
    float _1805 = fma(_1802, cbSceneParam._m0[89u].z, fma(_1801, cbSceneParam._m0[89u].y, _1800 * cbSceneParam._m0[89u].x));
    float _1808 = fma(_1802, cbSceneParam._m0[90u].z, fma(_1801, cbSceneParam._m0[90u].y, _1800 * cbSceneParam._m0[90u].x));
    float _1811 = fma(_1802, cbSceneParam._m0[91u].z, fma(_1801, cbSceneParam._m0[91u].y, _1800 * cbSceneParam._m0[91u].x));
    float _1845 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1849 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1853 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1857 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1858 = _1845 / _1857;
    float _1859 = _1849 / _1857;
    float _1860 = _1853 / _1857;
    float _2007;
    float _2008;
    float _2009;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1887 = ((uint(_1860 > cbSceneParam._m0[59u].y) + uint(_1860 > cbSceneParam._m0[59u].x)) + uint(_1860 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1888 = _1887 + 43u;
        uint _1896 = _1887 + 44u;
        uint _1904 = _1887 + 45u;
        uint _1912 = _1887 + 46u;
        float _1923 = fma(_1857, cbSceneParam._m0[_1888].w, fma(_1853, cbSceneParam._m0[_1888].z, fma(_1849, cbSceneParam._m0[_1888].y, _1845 * cbSceneParam._m0[_1888].x)));
        float _1927 = fma(_1857, cbSceneParam._m0[_1896].w, fma(_1853, cbSceneParam._m0[_1896].z, fma(_1849, cbSceneParam._m0[_1896].y, _1845 * cbSceneParam._m0[_1896].x)));
        float _1935 = fma(_1857, cbSceneParam._m0[_1912].w, fma(_1853, cbSceneParam._m0[_1912].z, fma(_1849, cbSceneParam._m0[_1912].y, _1845 * cbSceneParam._m0[_1912].x)));
        float _1940 = cbSceneParam._m0[33u].z * _1935;
        float _1942 = cbSceneParam._m0[33u].w * _1935;
        float _1945 = fma(_1857, cbSceneParam._m0[_1904].w, fma(_1853, cbSceneParam._m0[_1904].z, fma(_1849, cbSceneParam._m0[_1904].y, _1845 * cbSceneParam._m0[_1904].x))) / _1935;
        float _1993 = (cbSceneParam._m0[33u].x - sqrt(((_1859 * _1859) + (_1858 * _1858)) + (_1860 * _1860))) * cbSceneParam._m0[33u].y;
        float _4238 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _2000 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1940 + _1923) / _1935, (_1942 + _1927) / _1935), _1945), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1942 + _1923) / _1935, (_1927 - _1940) / _1935), _1945), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1923 - _1940) / _1935, (_1927 - _1942) / _1935), _1945), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1923 - _1942) / _1935, (_1940 + _1927) / _1935), _1945), 0.0)).x), vec4(0.25)));
        _2007 = 1.0 - (_2000 * cbSceneParam._m0[34u].x);
        _2008 = 1.0 - (_2000 * cbSceneParam._m0[34u].y);
        _2009 = 1.0 - (_2000 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2007 = 1.0;
        _2008 = 1.0;
        _2009 = 1.0;
    }
    float _2073;
    float _2075;
    float _2077;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2061 = fma(_1857, cbSceneParam._m0[63u].w, fma(_1853, cbSceneParam._m0[63u].z, fma(_1849, cbSceneParam._m0[63u].y, _1845 * cbSceneParam._m0[63u].x)));
        float _2062 = fma(_1857, cbSceneParam._m0[60u].w, fma(_1853, cbSceneParam._m0[60u].z, fma(_1849, cbSceneParam._m0[60u].y, _1845 * cbSceneParam._m0[60u].x))) / _2061;
        float _2063 = fma(_1857, cbSceneParam._m0[61u].w, fma(_1853, cbSceneParam._m0[61u].z, fma(_1849, cbSceneParam._m0[61u].y, _1845 * cbSceneParam._m0[61u].x))) / _2061;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2062 >= cbSceneParam._m0[64u].x) && (_2063 >= cbSceneParam._m0[64u].y)) && (_2062 <= cbSceneParam._m0[64u].z)) && (_2063 <= cbSceneParam._m0[64u].w))
        {
            float _2201 = fma(_1857, cbSceneParam._m0[62u].w, fma(_1853, cbSceneParam._m0[62u].z, fma(_1849, cbSceneParam._m0[62u].y, _1845 * cbSceneParam._m0[62u].x))) / _2061;
            float _2205 = isnan(cbSceneParam._m0[41u].w) ? _2201 : (isnan(_2201) ? cbSceneParam._m0[41u].w : max(_2201, cbSceneParam._m0[41u].w));
            float _2248 = (cbSceneParam._m0[33u].x - sqrt(((_1859 * _1859) + (_1858 * _1858)) + (_1860 * _1860))) * cbSceneParam._m0[33u].y;
            float _4254 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
            float _2255 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2062, cbSceneParam._m0[33u].w + _2063), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2062, _2063 - cbSceneParam._m0[33u].z), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2062 - cbSceneParam._m0[33u].z, _2063 - cbSceneParam._m0[33u].w), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2062 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2063), _2205), 0.0)).x), vec4(0.25)));
            float _2259 = 1.0 - (_2255 * cbSceneParam._m0[34u].x);
            float _2260 = 1.0 - (_2255 * cbSceneParam._m0[34u].y);
            float _2261 = 1.0 - (_2255 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2261) ? _2009 : (isnan(_2009) ? _2261 : min(_2009, _2261));
            frontier_phi_34_33_ladder_1 = isnan(_2260) ? _2008 : (isnan(_2008) ? _2260 : min(_2008, _2260));
            frontier_phi_34_33_ladder_2 = isnan(_2259) ? _2007 : (isnan(_2007) ? _2259 : min(_2007, _2259));
        }
        else
        {
            frontier_phi_34_33_ladder = _2009;
            frontier_phi_34_33_ladder_1 = _2008;
            frontier_phi_34_33_ladder_2 = _2007;
        }
        _2073 = frontier_phi_34_33_ladder_2;
        _2075 = frontier_phi_34_33_ladder_1;
        _2077 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2073 = _2007;
        _2075 = _2008;
        _2077 = _2009;
    }
    uvec4 _2082 = floatBitsToUint(cbInstanceData._m0[_759 + 5u]);
    uint _2084 = _2082.x * 14u;
    uint _2085 = _2084 + 13u;
    float _2092 = _784 + (-1.0);
    float _2097 = (cbLight._m0[_2085].x * _2092) + 1.0;
    float _2098 = (cbLight._m0[_2085].y * _2092) + 1.0;
    float _2099 = (cbLight._m0[_2085].z * _2092) + 1.0;
    float _2100 = (cbLight._m0[_2085].w * _2092) + 1.0;
    uint _2101 = _2084 + 5u;
    float _2107 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
    uint _2111 = _2084 + 4u;
    float _2120 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
    uint _2124 = _2084 | 1u;
    float _2135 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_633, _634, _635));
    float _2138 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_633, _634, _635));
    float _4290 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _4301 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2143 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * 0.3183098733425140380859375;
    float _2145 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * 0.3183098733425140380859375;
    float _2152 = ((cbLight._m0[_2101].x * _2107) * _2145) + (((cbLight._m0[_2111].x * _2073) * _2120) * _2143);
    float _2153 = ((_2107 * cbLight._m0[_2101].y) * _2145) + (((cbLight._m0[_2111].y * _2075) * _2120) * _2143);
    float _2154 = ((_2107 * cbLight._m0[_2101].z) * _2145) + (((cbLight._m0[_2111].z * _2077) * _2120) * _2143);
    uvec4 _2158 = floatBitsToUint(cbLight._m0[_2084 + 12u]);
    bool _2160 = _2158.x == 0u;
    float _2262;
    float _2264;
    float _2266;
    if (_2160)
    {
        _2262 = _2152;
        _2264 = _2153;
        _2266 = _2154;
    }
    else
    {
        uint _2270 = _2084 + 6u;
        float _2286 = (dot(vec3(cbLight._m0[_2084 + 2u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _2287 = _2286 * _2286;
        float _4312 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2288 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2289 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2262 = (((cbLight._m0[_2270].x * 0.3183098733425140380859375) * _2288) * _2289) + _2152;
        _2264 = (((cbLight._m0[_2270].y * 0.3183098733425140380859375) * _2288) * _2289) + _2153;
        _2266 = (((cbLight._m0[_2270].z * 0.3183098733425140380859375) * _2288) * _2289) + _2154;
    }
    bool _2269 = _2158.y == 0u;
    float _2324;
    float _2326;
    float _2328;
    if (_2269)
    {
        _2324 = _2262;
        _2326 = _2264;
        _2328 = _2266;
    }
    else
    {
        uint _2486 = _2084 + 7u;
        float _2502 = (dot(vec3(cbLight._m0[_2084 + 3u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _2503 = _2502 * _2502;
        float _4328 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2504 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _2505 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
        _2324 = (((cbLight._m0[_2486].x * 0.3183098733425140380859375) * _2504) * _2505) + _2262;
        _2326 = (((cbLight._m0[_2486].y * 0.3183098733425140380859375) * _2504) * _2505) + _2264;
        _2328 = (((cbLight._m0[_2486].z * 0.3183098733425140380859375) * _2504) * _2505) + _2266;
    }
    uint _2331 = _2084 + 8u;
    float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _636) * 0.949999988079071044921875);
    float _2345 = _2344 * _2344;
    float _2346 = cbLight._m0[_2084].x + _713;
    float _2347 = cbLight._m0[_2084].y + _714;
    float _2348 = cbLight._m0[_2084].z + _715;
    float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
    float _2353 = _2352 * _2346;
    float _2354 = _2352 * _2347;
    float _2355 = _2352 * _2348;
    float _2356 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2084].xyz));
    float _4344 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _4355 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _2360 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _2361 = dot(vec3(_633, _634, _635), vec3(_2353, _2354, _2355));
    float _4366 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _2365 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2353, _2354, _2355));
    float _4377 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2369 = _2345 * _2345;
    float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
    float _2384 = (exp2(log2(1.0 - (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2385 = 1.0 - _2345;
    float _2396 = (0.5 / (((_2360 * ((_2359 * _2385) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2385) + _2345) * _2359))) * _2359;
    float _4388 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2398 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
    uint _2412 = _2084 + 9u;
    float _2423 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2124].w)) * _636) * 0.949999988079071044921875);
    float _2424 = _2423 * _2423;
    float _2425 = cbLight._m0[_2124].x + _713;
    float _2426 = cbLight._m0[_2124].y + _714;
    float _2427 = cbLight._m0[_2124].z + _715;
    float _2431 = inversesqrt(dot(vec3(_2425, _2426, _2427), vec3(_2425, _2426, _2427)));
    float _2432 = _2431 * _2425;
    float _2433 = _2431 * _2426;
    float _2434 = _2431 * _2427;
    float _2435 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2124].xyz));
    float _4399 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2438 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _2439 = dot(vec3(_633, _634, _635), vec3(_2432, _2433, _2434));
    float _4410 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2442 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2443 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_2432, _2433, _2434));
    float _4421 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2447 = _2424 * _2424;
    float _2451 = ((_2442 * _2442) * (_2447 + (-1.0))) + 1.0;
    float _2460 = (exp2(log2(1.0 - (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2461 = 1.0 - _2424;
    float _2471 = (0.5 / (((_2360 * ((_2438 * _2461) + _2424)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2461) + _2424) * _2438))) * _2438;
    float _4432 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2473 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2447 / ((_2451 * _2451) * 3.141590118408203125));
    float _2483 = (((_2460 * cbLight._m0[_2412].x) * _2473) * _2107) + ((((cbLight._m0[_2331].x * _2073) * _2384) * _2398) * _2120);
    float _2484 = (((_2460 * cbLight._m0[_2412].y) * _2473) * _2107) + ((((cbLight._m0[_2331].y * _2075) * _2384) * _2398) * _2120);
    float _2485 = (((_2460 * cbLight._m0[_2412].z) * _2473) * _2107) + ((((cbLight._m0[_2331].z * _2077) * _2384) * _2398) * _2120);
    float _2541;
    float _2543;
    float _2545;
    if (_2160)
    {
        _2541 = _2483;
        _2543 = _2484;
        _2545 = _2485;
    }
    else
    {
        uint _2547 = _2084 + 2u;
        uint _2551 = _2084 + 10u;
        float _2565 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2547].w)) * _636) * 0.949999988079071044921875);
        float _2566 = _2565 * _2565;
        float _2567 = cbLight._m0[_2547].x + _713;
        float _2568 = cbLight._m0[_2547].y + _714;
        float _2569 = cbLight._m0[_2547].z + _715;
        float _2573 = inversesqrt(dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569)));
        float _2574 = _2573 * _2567;
        float _2575 = _2573 * _2568;
        float _2576 = _2573 * _2569;
        float _2577 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2547].xyz));
        float _4443 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2580 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2581 = dot(vec3(_633, _634, _635), vec3(_2574, _2575, _2576));
        float _4454 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2584 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2585 = dot(vec3(cbLight._m0[_2547].xyz), vec3(_2574, _2575, _2576));
        float _4465 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2589 = _2566 * _2566;
        float _2593 = ((_2584 * _2584) * (_2589 + (-1.0))) + 1.0;
        float _2602 = (exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2603 = 1.0 - _2566;
        float _2613 = (0.5 / (((_2360 * ((_2580 * _2603) + _2566)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2603) + _2566) * _2580))) * _2580;
        float _4476 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2615 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2589 / ((_2593 * _2593) * 3.141590118408203125));
        float _2616 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2541 = (((_2602 * cbLight._m0[_2551].x) * _2615) * _2616) + _2483;
        _2543 = (((_2602 * cbLight._m0[_2551].y) * _2615) * _2616) + _2484;
        _2545 = (((_2602 * cbLight._m0[_2551].z) * _2615) * _2616) + _2485;
    }
    float _2647;
    float _2649;
    float _2651;
    if (_2269)
    {
        _2647 = _2541;
        _2649 = _2543;
        _2651 = _2545;
    }
    else
    {
        uint _2658 = _2084 + 3u;
        uint _2662 = _2084 + 11u;
        float _2676 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2658].w)) * _636) * 0.949999988079071044921875);
        float _2677 = _2676 * _2676;
        float _2678 = cbLight._m0[_2658].x + _713;
        float _2679 = cbLight._m0[_2658].y + _714;
        float _2680 = cbLight._m0[_2658].z + _715;
        float _2684 = inversesqrt(dot(vec3(_2678, _2679, _2680), vec3(_2678, _2679, _2680)));
        float _2685 = _2684 * _2678;
        float _2686 = _2684 * _2679;
        float _2687 = _2684 * _2680;
        float _2688 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2658].xyz));
        float _4492 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2691 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2692 = dot(vec3(_633, _634, _635), vec3(_2685, _2686, _2687));
        float _4503 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2695 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2696 = dot(vec3(cbLight._m0[_2658].xyz), vec3(_2685, _2686, _2687));
        float _4514 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2700 = _2677 * _2677;
        float _2704 = ((_2695 * _2695) * (_2700 + (-1.0))) + 1.0;
        float _2713 = (exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2714 = 1.0 - _2677;
        float _2724 = (0.5 / (((_2360 * ((_2691 * _2714) + _2677)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2714) + _2677) * _2691))) * _2691;
        float _4525 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2726 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2700 / ((_2704 * _2704) * 3.141590118408203125));
        float _2727 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
        _2647 = (((_2713 * cbLight._m0[_2662].x) * _2726) * _2727) + _2541;
        _2649 = (((_2713 * cbLight._m0[_2662].y) * _2726) * _2727) + _2543;
        _2651 = (((_2713 * cbLight._m0[_2662].z) * _2726) * _2727) + _2545;
    }
    float _2793;
    float _2795;
    float _2797;
    float _2799;
    float _2801;
    float _2803;
    if (_2082.y == 0u)
    {
        uvec4 _2748 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2749 = _2748.x;
        uint _2760 = uint((float(_2748.y) * floor(float(uint(cbSceneParam._m0[85u].y * _722) / _2749))) + floor(float(uint(cbSceneParam._m0[85u].x * _721) / _2749)));
        float _2770 = (log2(_1860 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2771 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        uint _2774 = uint(isnan(14.0) ? _2771 : (isnan(_2771) ? 14.0 : min(_2771, 14.0)));
        uvec4 _2779 = texelFetch(g_lightClusterGridBuffer, int(((_2774 << 2u) + (_2760 << 6u)) >> 2u));
        uint _2780 = _2779.x;
        uint _2781 = _2748.z;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        if (((((1u << ((_2781 >> 4u) & 15u)) + 4294967295u) & _2780) == 0u) || ((_2781 & 240u) == 0u))
        {
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
        }
        else
        {
            float _2861;
            float _2863;
            float _2865;
            float _2867;
            float _2869;
            float _2871;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            uint _3011 = 0u;
            uint _3020;
            bool _3021;
            for (;;)
            {
                _3020 = texelFetch(g_lightClassification, int((((_2774 << 5u) + (_2760 << 9u)) + (_3011 << 2u)) >> 2u)).x;
                _3021 = _3020 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3021)
                {
                    frontier_phi_66_pred = _3010;
                    frontier_phi_66_pred_1 = _3009;
                    frontier_phi_66_pred_2 = _3008;
                    frontier_phi_66_pred_3 = _3007;
                    frontier_phi_66_pred_4 = _3006;
                    frontier_phi_66_pred_5 = _3005;
                }
                else
                {
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    uint _3135;
                    _3129 = _3005;
                    _3130 = _3006;
                    _3131 = _3007;
                    _3132 = _3008;
                    _3133 = _3009;
                    _3134 = _3010;
                    _3135 = _3020;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    for (;;)
                    {
                        uint _3139 = uint(findLSB(_3135)) + (_3011 << 5u);
                        uint _3136 = (_3135 + 4294967295u) & _3135;
                        uint _3141 = _3139 * 48u;
                        vec4 _3155 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3141)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 3u)).x));
                        uint _3161 = (_3139 * 48u) + 4u;
                        vec4 _3174 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3161)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 3u)).x));
                        uint _3180 = (_3139 * 48u) + 8u;
                        vec3 _3191 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3180)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 2u)).x));
                        float _3195 = _3155.x - _1858;
                        float _3196 = _3155.y - _1859;
                        float _3197 = _3155.z - _1860;
                        float _3198 = dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197));
                        float _3201 = inversesqrt(_3198);
                        float _3202 = _3201 * _3195;
                        float _3203 = _3201 * _3196;
                        float _3204 = _3201 * _3197;
                        float _3205 = dot(vec3(_740, _743, _746), vec3(_3202, _3203, _3204));
                        float _3210 = 1.0 - (_3198 * _3155.w);
                        float _4551 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3211 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                        float _3212 = sqrt(_3198) * _3174.w;
                        float _3215 = 1.39999997615814208984375 / (_3212 + 1.39999997615814208984375);
                        float _3216 = _3215 * _3215;
                        float _3219 = ((1.0 - _3216) * _3205) + _3216;
                        float _3222 = _3212 * _3212;
                        float _3226 = ((isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0))) * _3211) / ((_3222 * 0.699999988079071044921875) + 1.0);
                        float _3230 = (-0.0) - _1858;
                        float _3231 = (-0.0) - _1859;
                        float _3232 = (-0.0) - _1860;
                        float _3236 = inversesqrt(dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232)));
                        float _3237 = _3236 * _3230;
                        float _3238 = _3236 * _3231;
                        float _3239 = _3236 * _3232;
                        float _3246 = exp2(log2(1.0 / ((_3222 * 3.5) + 5.0)) * 0.25);
                        float _3247 = 1.0 - _800;
                        float _3254 = sqrt(1.0 - ((1.0 - (_3247 * _3247)) * (1.0 - (_3246 * _3246))));
                        float _3255 = _3254 * _3254;
                        float _3256 = _3255 * _3255;
                        float _3257 = _3237 + _3202;
                        float _3258 = _3238 + _3203;
                        float _3259 = _3239 + _3204;
                        float _3263 = inversesqrt(dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259)));
                        float _3267 = dot(vec3(_740, _743, _746), vec3(_3237, _3238, _3239));
                        float _4567 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3270 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                        float _3271 = dot(vec3(_740, _743, _746), vec3(_3263 * _3257, _3263 * _3258, _3263 * _3259));
                        float _4578 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3274 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                        float _3278 = ((_3274 * _3274) * (_3256 + (-1.0))) + 1.0;
                        float _3279 = _3215 * _3255;
                        float _3280 = _3279 * _3279;
                        float _3283 = ((1.0 - _3280) * _3205) + _3280;
                        float _4589 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3284 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                        float _3285 = 1.0 - _3255;
                        float _3295 = (0.5 / (((_3284 * ((_3270 * _3285) + _3255)) + 9.9999999392252902907785028219223e-09) + (((_3284 * _3285) + _3255) * _3270))) * _3284;
                        float _4600 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3306 = (((_3256 * 3.1415927410125732421875) * (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0)))) / ((_3278 * _3278) * ((_3222 * 2.1991131305694580078125) + 3.141590118408203125))) * _3211;
                        _3064 = (_3226 * _3174.x) + _3132;
                        _3065 = (_3226 * _3174.y) + _3133;
                        _3066 = (_3226 * _3174.z) + _3134;
                        _3061 = (_3306 * _3191.x) + _3129;
                        _3062 = (_3306 * _3191.y) + _3130;
                        _3063 = (_3306 * _3191.z) + _3131;
                        if (_3136 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3129 = _3061;
                            _3130 = _3062;
                            _3131 = _3063;
                            _3132 = _3064;
                            _3133 = _3065;
                            _3134 = _3066;
                            _3135 = _3136;
                        }
                    }
                    frontier_phi_66_pred = _3066;
                    frontier_phi_66_pred_1 = _3065;
                    frontier_phi_66_pred_2 = _3064;
                    frontier_phi_66_pred_3 = _3063;
                    frontier_phi_66_pred_4 = _3062;
                    frontier_phi_66_pred_5 = _3061;
                }
                _2871 = frontier_phi_66_pred;
                _2869 = frontier_phi_66_pred_1;
                _2867 = frontier_phi_66_pred_2;
                _2865 = frontier_phi_66_pred_3;
                _2863 = frontier_phi_66_pred_4;
                _2861 = frontier_phi_66_pred_5;
                uint _3012 = _3011 + 1u;
                if (_3012 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3005 = _2861;
                    _3006 = _2863;
                    _3007 = _2865;
                    _3008 = _2867;
                    _3009 = _2869;
                    _3010 = _2871;
                    _3011 = _3012;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
        }
        uvec4 _2874 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2875 = _2874.z;
        uint _2877 = (_2875 >> 8u) & 15u;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        if (((4294967295u << _2877) & _2780) == 0u)
        {
            _2973 = _2860;
            _2975 = _2862;
            _2977 = _2864;
            _2979 = _2866;
            _2981 = _2868;
            _2983 = _2870;
        }
        else
        {
            float _2998 = inversesqrt(dot(vec3(_1858, _1859, _1860), vec3(_1858, _1859, _1860)));
            float _2999 = _2998 * _1858;
            float _3000 = _2998 * _1859;
            float _3001 = _2998 * _1860;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2877 < ((_2875 >> 12u) & 15u))
            {
                float _2974;
                float _2976;
                float _2978;
                float _2980;
                float _2982;
                float _2984;
                float _3112 = _2860;
                float _3113 = _2862;
                float _3114 = _2864;
                float _3115 = _2866;
                float _3116 = _2868;
                float _3117 = _2870;
                uint _3118 = _2877;
                uint _3127;
                bool _3128;
                for (;;)
                {
                    _3127 = texelFetch(g_lightClassification, int((((_2774 << 5u) + (_2760 << 9u)) + (_3118 << 2u)) >> 2u)).x;
                    _3128 = _3127 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3128)
                    {
                        frontier_phi_72_pred = _3117;
                        frontier_phi_72_pred_1 = _3116;
                        frontier_phi_72_pred_2 = _3115;
                        frontier_phi_72_pred_3 = _3114;
                        frontier_phi_72_pred_4 = _3113;
                        frontier_phi_72_pred_5 = _3112;
                    }
                    else
                    {
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3324 = _3112;
                        float _3325 = _3113;
                        float _3326 = _3114;
                        float _3327 = _3115;
                        float _3328 = _3116;
                        float _3329 = _3117;
                        uint _3330 = _3127;
                        uint _3331;
                        vec4 _3356;
                        float _3357;
                        vec4 _3372;
                        vec3 _3384;
                        vec4 _3399;
                        vec4 _3414;
                        float _3461;
                        bool _3462;
                        for (;;)
                        {
                            uint _3341 = ((_3118 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3330));
                            _3331 = (_3330 + 4294967295u) & _3330;
                            uint _3343 = _3341 * 40u;
                            _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            _3357 = _3356.w;
                            uint _3359 = (_3341 * 40u) + 4u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3374 = (_3341 * 40u) + 8u;
                            _3384 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x));
                            uint _3386 = (_3341 * 40u) + 16u;
                            _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            uint _3401 = (_3341 * 40u) + 20u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3417 = (_3341 * 40u) + 24u;
                            vec4 _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3436 = (_3341 * 40u) + 28u;
                            vec4 _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            _3461 = fma(_1860, _3449.z, fma(_1859, _3449.y, _3449.x * _1858)) + _3449.w;
                            _3462 = !((fma(_1860, _3430.z, fma(_1859, _3430.y, _3430.x * _1858)) + _3430.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3462)
                            {
                                float _3489 = _3356.x - _1858;
                                float _3490 = _3356.y - _1859;
                                float _3491 = _3356.z - _1860;
                                float _3492 = dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491));
                                float _3495 = inversesqrt(_3492);
                                float _3496 = _3495 * _3489;
                                float _3497 = _3495 * _3490;
                                float _3498 = _3495 * _3491;
                                float _3502 = 1.0 - (_3492 / (_3357 * _3357));
                                float _4611 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3503 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                                float _3507 = sqrt(_3492) * _3372.w;
                                float _3509 = 1.39999997615814208984375 / (_3507 + 1.39999997615814208984375);
                                float _3510 = _3509 * _3509;
                                float _3513 = ((1.0 - _3510) * dot(vec3(_3496, _3497, _3498), vec3(_740, _743, _746))) + _3510;
                                float _3516 = _3507 * _3507;
                                float _3520 = (fma(_1860, _3399.z, fma(_1859, _3399.y, _3399.x * _1858)) + _3399.w) / _3461;
                                float _3521 = (fma(_1860, _3414.z, fma(_1859, _3414.y, _3414.x * _1858)) + _3414.w) / _3461;
                                float _3525 = 1.0 - dot(vec2(_3520, _3521), vec2(_3520, _3521));
                                float _4627 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3526 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3527 = _3526 * (((isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0))) * _3503) / ((_3516 * 0.699999988079071044921875) + 1.0));
                                float _3539 = exp2(log2(1.0 / ((_3516 * 3.5) + 5.0)) * 0.25);
                                float _3540 = 1.0 - _800;
                                float _3547 = sqrt(1.0 - ((1.0 - (_3540 * _3540)) * (1.0 - (_3539 * _3539))));
                                float _3548 = _3547 * _3547;
                                float _3549 = _3548 * _3548;
                                float _3550 = _3496 - _2999;
                                float _3551 = _3497 - _3000;
                                float _3552 = _3498 - _3001;
                                float _3556 = inversesqrt(dot(vec3(_3550, _3551, _3552), vec3(_3550, _3551, _3552)));
                                float _3560 = dot(vec3(_740, _743, _746), vec3((-0.0) - _2999, (-0.0) - _3000, (-0.0) - _3001));
                                float _4638 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3563 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                                float _3564 = dot(vec3(_740, _743, _746), vec3(_3556 * _3550, _3556 * _3551, _3556 * _3552));
                                float _4649 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3567 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                                float _3571 = ((_3567 * _3567) * (_3549 + (-1.0))) + 1.0;
                                float _3572 = _3509 * _3548;
                                float _3573 = _3572 * _3572;
                                float _3579 = ((1.0 - _3573) * dot(vec3(_740, _743, _746), vec3(_3496, _3497, _3498))) + _3573;
                                float _4660 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3580 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                                float _3581 = 1.0 - _3548;
                                float _3591 = (0.5 / (((_3580 * ((_3563 * _3581) + _3548)) + 9.9999999392252902907785028219223e-09) + (((_3580 * _3581) + _3548) * _3563))) * _3580;
                                float _4671 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3601 = (_3526 * _3503) * (((_3549 * 3.1415927410125732421875) * (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) / ((_3571 * _3571) * ((_3516 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3527 * _3372.y;
                                frontier_phi_78_pred_1 = _3527 * _3372.x;
                                frontier_phi_78_pred_2 = _3601 * _3384.z;
                                frontier_phi_78_pred_3 = _3601 * _3384.y;
                                frontier_phi_78_pred_4 = _3601 * _3384.x;
                                frontier_phi_78_pred_5 = _3527 * _3372.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3609 = frontier_phi_78_pred;
                            _3608 = frontier_phi_78_pred_1;
                            _3607 = frontier_phi_78_pred_2;
                            _3606 = frontier_phi_78_pred_3;
                            _3605 = frontier_phi_78_pred_4;
                            _3610 = frontier_phi_78_pred_5;
                            _3314 = _3608 + _3327;
                            _3315 = _3609 + _3328;
                            _3316 = _3610 + _3329;
                            _3311 = _3605 + _3324;
                            _3312 = _3606 + _3325;
                            _3313 = _3607 + _3326;
                            if (_3331 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3314;
                                _3328 = _3315;
                                _3329 = _3316;
                                _3330 = _3331;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3316;
                        frontier_phi_72_pred_1 = _3315;
                        frontier_phi_72_pred_2 = _3314;
                        frontier_phi_72_pred_3 = _3313;
                        frontier_phi_72_pred_4 = _3312;
                        frontier_phi_72_pred_5 = _3311;
                    }
                    _2984 = frontier_phi_72_pred;
                    _2982 = frontier_phi_72_pred_1;
                    _2980 = frontier_phi_72_pred_2;
                    _2978 = frontier_phi_72_pred_3;
                    _2976 = frontier_phi_72_pred_4;
                    _2974 = frontier_phi_72_pred_5;
                    uint _3119 = _3118 + 1u;
                    if (_3119 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3112 = _2974;
                        _3113 = _2976;
                        _3114 = _2978;
                        _3115 = _2980;
                        _3116 = _2982;
                        _3117 = _2984;
                        _3118 = _3119;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2984;
                frontier_phi_60_61_ladder_1 = _2982;
                frontier_phi_60_61_ladder_2 = _2978;
                frontier_phi_60_61_ladder_3 = _2976;
                frontier_phi_60_61_ladder_4 = _2974;
                frontier_phi_60_61_ladder_5 = _2980;
            }
            else
            {
                frontier_phi_60_61_ladder = _2870;
                frontier_phi_60_61_ladder_1 = _2868;
                frontier_phi_60_61_ladder_2 = _2864;
                frontier_phi_60_61_ladder_3 = _2862;
                frontier_phi_60_61_ladder_4 = _2860;
                frontier_phi_60_61_ladder_5 = _2866;
            }
            _2973 = frontier_phi_60_61_ladder_4;
            _2975 = frontier_phi_60_61_ladder_3;
            _2977 = frontier_phi_60_61_ladder_2;
            _2979 = frontier_phi_60_61_ladder_5;
            _2981 = frontier_phi_60_61_ladder_1;
            _2983 = frontier_phi_60_61_ladder;
        }
        float _2988 = isnan(1.0) ? _784 : (isnan(_784) ? 1.0 : min(_784, 1.0));
        _2793 = (_2988 * _2979) + _2324;
        _2795 = (_2988 * _2981) + _2326;
        _2797 = (_2988 * _2983) + _2328;
        _2799 = ((_2973 * 0.039999999105930328369140625) * _2988) + _2647;
        _2801 = ((_2975 * 0.039999999105930328369140625) * _2988) + _2649;
        _2803 = ((_2977 * 0.039999999105930328369140625) * _2988) + _2651;
    }
    else
    {
        _2793 = _2324;
        _2795 = _2326;
        _2797 = _2328;
        _2799 = _2647;
        _2801 = _2649;
        _2803 = _2651;
    }
    float _4687 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4698 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4709 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    uint _2823 = _759 + 6u;
    float _2831 = _721 / cbSceneParam._m0[86u].x;
    float _2832 = _722 / cbSceneParam._m0[86u].y;
    vec4 _2846 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2831, _2832, (log2((isnan(cbSceneParam._m0[77u].w) ? _655 : (isnan(_655) ? cbSceneParam._m0[77u].w : min(_655, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2848 = _2846.x;
    float _2849 = _2846.y;
    float _2850 = _2846.z;
    float _2851 = _2846.w;
    float _2923;
    float _2925;
    float _2927;
    float _2929;
    if (_655 > cbSceneParam._m0[78u].w)
    {
        float _2885 = isnan(_655) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _655 : min(cbSceneParam._m0[80u].w, _655));
        float _2886 = _2885 / _655;
        float _2897 = _2886 * _706;
        float _2898 = _707 * _2886;
        float _2899 = (-0.0) - _2898;
        float _2901 = _2886 * _708;
        float _2903 = (cbSceneParam._m0[77u].w * _2899) / _2885;
        float _2904 = _2903 + cbSceneParam._m0[79u].w;
        float _2905 = cbSceneParam._m0[79u].w - _2898;
        float _2911 = sqrt(((_2897 * _2897) + (_2898 * _2898)) + (_2901 * _2901));
        float _2914 = (1.0 - (cbSceneParam._m0[77u].w / _2885)) * _2911;
        float _2919 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2921 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3074;
        if (abs((_2899 - _2903) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3074 = ((((_2904 > 0.0) ? exp2(_2919 * _2904) : (2.0 - exp2(_2921 * _2904))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2914;
        }
        else
        {
            float _3034 = 1.0 / cbSceneParam._m0[80u].x;
            float _3035 = isnan(_2905) ? _2904 : (isnan(_2904) ? _2905 : max(_2904, _2905));
            float _3036 = isnan(_2905) ? _2904 : (isnan(_2904) ? _2905 : min(_2904, _2905));
            float _3045 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : min(_3035, 0.0));
            float _3046 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : min(_3036, 0.0));
            _3074 = ((abs(_2911 / _2899) * cbSceneParam._m0[80u].y) * ((((_3045 - _3046) * 2.0) - ((exp2(_2919 * (isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0)))) - exp2(_2919 * (isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0))))) * _3034)) - ((exp2(_2921 * _3045) - exp2(_2921 * _3046)) * _3034))) + (_2914 * cbSceneParam._m0[80u].z);
        }
        vec4 _3076 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2831, _2832, 1.0), 0.0);
        float _3085 = exp2((_3074 * (-1.44269502162933349609375)) * (1.0 - _3076.w));
        float _3086 = log2(_3085);
        float _3102 = log2(_2851);
        _2923 = (exp2(_3102 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3086 * cbSceneParam._m0[78u].x)) * _3076.x) / cbSceneParam._m0[78u].x)) + _2848;
        _2925 = (exp2(_3102 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3086 * cbSceneParam._m0[78u].y)) * _3076.y) / cbSceneParam._m0[78u].y)) + _2849;
        _2927 = (exp2(_3102 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3086 * cbSceneParam._m0[78u].z)) * _3076.z) / cbSceneParam._m0[78u].z)) + _2850;
        _2929 = _3085 * _2851;
    }
    else
    {
        _2923 = _2848;
        _2925 = _2849;
        _2927 = _2850;
        _2929 = _2851;
    }
    float _2941 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2942 = _2941 == 3.0;
    float _2943 = log2(_2929);
    float _2950 = exp2(_2943 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2793 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _784))) + ((_2799 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1591)) * cbPerFrame._m0[3u].x));
    float _2951 = exp2(_2943 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2795 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _784))) + ((_2801 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1591)) * cbPerFrame._m0[3u].x));
    float _2952 = exp2(_2943 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2797 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _784))) + ((_2803 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1591)) * cbPerFrame._m0[3u].x));
    float _2961 = (_2941 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2961 * (_2942 ? _2950 : (_2950 + (cbSceneParam._m0[72u].w * _2923)));
    SV_Target.y = _2961 * (_2942 ? _2951 : (_2951 + (cbSceneParam._m0[72u].w * _2925)));
    SV_Target.z = _2961 * (_2942 ? _2952 : (_2952 + (cbSceneParam._m0[72u].w * _2927)));
    SV_Target.w = cbInstanceData._m0[_2823].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2823].w;
}


