#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1137;
float _3501;
float _3502;
float _3503;
float _3504;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _238 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _244 = _238.x * cbMtdParam._m0[10u].x;
    float _245 = _238.y * cbMtdParam._m0[10u].y;
    float _246 = _238.z * cbMtdParam._m0[10u].z;
    vec4 _265 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _312 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x;
    float _323 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _312)) + 1.0;
    float _3513 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _324 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    float _331 = (_324 * ((_265.x * cbMtdParam._m0[11u].x) - _244)) + _244;
    float _332 = (_324 * ((_265.y * cbMtdParam._m0[11u].y) - _245)) + _245;
    float _333 = (_324 * ((_265.z * cbMtdParam._m0[11u].z) - _246)) + _246;
    vec4 _352 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _382 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _312)) + 1.0;
    float _3524 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _390 = (_383 * ((_352.x * cbMtdParam._m0[12u].x) - _331)) + _331;
    float _391 = (_383 * ((_352.y * cbMtdParam._m0[12u].y) - _332)) + _332;
    float _392 = (_383 * ((_352.z * cbMtdParam._m0[12u].z) - _333)) + _333;
    vec4 _409 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _434 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _312)) + 1.0;
    float _3535 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _442 = (_435 * ((_409.x * cbMtdParam._m0[13u].x) - _390)) + _390;
    float _443 = (_435 * ((_409.y * cbMtdParam._m0[13u].y) - _391)) + _391;
    float _444 = (_435 * ((_409.z * cbMtdParam._m0[13u].z) - _392)) + _392;
    vec4 _456 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _474 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _476 = _474.x;
    float _477 = _474.y;
    float _483 = cbMtdParam._m0[16u].w * _474.z;
    float _486 = (((cbMtdParam._m0[17u].x * _456.z) - _483) * _324) + _483;
    vec4 _499 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _508 = (((cbMtdParam._m0[17u].y * _499.z) - _486) * _383) + _486;
    vec4 _521 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _530 = (((cbMtdParam._m0[17u].z * _521.z) - _508) * _435) + _508;
    float _535 = ((_456.x - _476) * _324) + _476;
    float _536 = ((_456.y - _477) * _324) + _477;
    float _541 = ((_499.x - _535) * _383) + _535;
    float _542 = ((_499.y - _536) * _383) + _536;
    float _551 = ((((_521.x - _541) * _435) + _541) * 2.0) + (-1.0);
    float _553 = ((((_521.y - _542) * _435) + _542) * 2.0) + (-1.0);
    float _554 = dot(vec2(_551, _553), vec2(_551, _553));
    float _3546 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _559 = sqrt(1.0 - (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))));
    float _562 = fma(_559, _208 * NORMAL.x, fma(_553, _215 * TANGENT.x, (_201 * _193) * _551));
    float _565 = fma(_559, _208 * NORMAL.y, fma(_553, _215 * TANGENT.y, (_201 * _194) * _551));
    float _568 = fma(_559, _208 * NORMAL.z, fma(_553, _215 * TANGENT.z, (_201 * _195) * _551));
    float _572 = inversesqrt(dot(vec3(_562, _565, _568), vec3(_562, _565, _568)));
    float _573 = _572 * _562;
    float _574 = _572 * _565;
    float _575 = _572 * _568;
    float _3557 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _576 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _3568 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3579 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3590 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _595 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _636 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _646 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _636);
    float _647 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _636);
    float _648 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _636);
    float _652 = inversesqrt(dot(vec3(_646, _647, _648), vec3(_646, _647, _648)));
    float _653 = _646 * _652;
    float _654 = _647 * _652;
    float _655 = _648 * _652;
    vec4 _660 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _662 = _660.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _816 = sqrt(((_646 * _646) + (_647 * _647)) + (_648 * _648));
        float _822 = (cbMatDynParam._m0[5u].x * _816) + cbMatDynParam._m0[5u].y;
        float _3601 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _827 = (cbMatDynParam._m0[5u].z * _816) + cbMatDynParam._m0[5u].w;
        float _3612 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) - _823)) + _823) < ((_662 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _673 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _674 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _692 = fma(_575, cbSceneParam._m0[5u].z, fma(_574, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _573));
    float _695 = fma(_575, cbSceneParam._m0[6u].z, fma(_574, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _573));
    float _698 = fma(_575, cbSceneParam._m0[7u].z, fma(_574, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _573));
    uint _711 = uint(roundEven(NORMAL.w)) * 13u;
    uint _712 = _711 + 9u;
    uint _713 = _712 + uint(cbMatDynParam._m0[0u].w);
    float _719 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) * cbInstanceData._m0[_713].x;
    float _720 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0)))) * cbInstanceData._m0[_713].y;
    float _721 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0)))) * cbInstanceData._m0[_713].z;
    float _3623 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _722 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _3634 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _3645 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    vec4 _733 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _673, cbSceneParam._m0[86u].y * _674));
    float _736 = _733.x * TEXCOORD_5.w;
    float _737 = dot(vec3(_573, _574, _575), vec3(_653, _654, _655));
    float _740 = _737 * 2.0;
    float _744 = (_740 * _573) - _653;
    float _745 = (_740 * _574) - _654;
    float _746 = (_740 * _575) - _655;
    float _750 = abs(dot(vec3(_653, _654, _655), vec3(_573, _574, _575)));
    float _3656 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _752 = sqrt(_576);
    float _765 = exp2((_752 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_752 * 3.0));
    float _797 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _801 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _805 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1136;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _861 = fma(_805, cbModelParam._m0[26u].z, fma(_801, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _797));
        float _865 = fma(_805, cbModelParam._m0[27u].z, fma(_801, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _797));
        float _869 = fma(_805, cbModelParam._m0[28u].z, fma(_801, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _797));
        float _894 = _797 + _573;
        float _895 = _801 + _574;
        float _896 = _805 + _575;
        float _906 = fma(_896, cbModelParam._m0[26u].z, fma(_895, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _894)) - _861;
        float _907 = fma(_896, cbModelParam._m0[27u].z, fma(_895, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _894)) - _865;
        float _908 = fma(_896, cbModelParam._m0[28u].z, fma(_895, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _894)) - _869;
        float _912 = inversesqrt(dot(vec3(_906, _907, _908), vec3(_906, _907, _908)));
        float _925 = ((_912 * _906) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_861 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _926 = ((_912 * _907) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_865 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _927 = ((_912 * _908) / cbModelParam._m0[34u].z) + ((((((_869 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        float _964 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_930.x + (-0.5));
        float _966 = _964 * (_930.y + (-0.5));
        float _967 = _964 * (_930.z + (-0.5));
        float _974 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_937.x + (-0.5));
        float _976 = _974 * (_937.y + (-0.5));
        float _977 = _974 * (_937.z + (-0.5));
        float _984 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_944.x + (-0.5));
        float _986 = _984 * (_944.y + (-0.5));
        float _987 = _984 * (_944.z + (-0.5));
        float _994 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_951.x + (-0.5));
        float _996 = _994 * (_951.y + (-0.5));
        float _997 = _994 * (_951.z + (-0.5));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1001 = _965 * 0.5;
        float _1002 = _975 * 0.5;
        float _1003 = _985 * 0.5;
        float _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1018 = (dot(vec3(_573, _574, _575), vec3(_1009 * _1001, _1009 * _1002, _1009 * _1003)) + 1.0) * 0.5;
        float _3682 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1028 = sqrt(((_1002 * _1002) + (_1001 * _1001)) + (_1003 * _1003)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _3693 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1030 = _1029 * 2.0;
        float _1034 = (1.0 - _1029) / (_1029 + 1.0);
        float _3704 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1044 = ((((1.0 - _1035) * (_1030 + 2.0)) * exp2(log2(isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (_1030 + 1.0))) + _1035) * _998;
        float _1045 = _966 * 0.5;
        float _1046 = _976 * 0.5;
        float _1047 = _986 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1061 = (dot(vec3(_573, _574, _575), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _3715 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1070 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3726 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _3737 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (_1072 + 1.0))) + _1077) * _999;
        float _1087 = _967 * 0.5;
        float _1088 = _977 * 0.5;
        float _1089 = _987 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_573, _574, _575), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3748 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1000 + 9.9999997473787516355514526367188e-06);
        float _3759 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3770 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_1114 + 1.0))) + _1119) * _1000;
        _1136 = _967;
        _1138 = _966;
        _1139 = _965;
        _1140 = _977;
        _1141 = _976;
        _1142 = _975;
        _1143 = _987;
        _1144 = _986;
        _1145 = _985;
        _1146 = _1000;
        _1147 = _999;
        _1148 = _998;
        _1149 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0)));
        _1150 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
        _1151 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
    }
    else
    {
        _1136 = _1137;
        _1138 = _1137;
        _1139 = _1137;
        _1140 = _1137;
        _1141 = _1137;
        _1142 = _1137;
        _1143 = _1137;
        _1144 = _1137;
        _1145 = _1137;
        _1146 = _1137;
        _1147 = _1137;
        _1148 = _1137;
        _1149 = 0.0;
        _1150 = 0.0;
        _1151 = 0.0;
    }
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1180 = fma(_805, cbModelParam._m0[30u].z, fma(_801, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _797));
        float _1184 = fma(_805, cbModelParam._m0[31u].z, fma(_801, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _797));
        float _1188 = fma(_805, cbModelParam._m0[32u].z, fma(_801, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _797));
        float _1211 = _797 + _573;
        float _1212 = _801 + _574;
        float _1213 = _805 + _575;
        float _1223 = fma(_1213, cbModelParam._m0[30u].z, fma(_1212, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1211)) - _1180;
        float _1224 = fma(_1213, cbModelParam._m0[31u].z, fma(_1212, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1211)) - _1184;
        float _1225 = fma(_1213, cbModelParam._m0[32u].z, fma(_1212, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1211)) - _1188;
        float _1229 = inversesqrt(dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225)));
        float _1242 = ((_1229 * _1223) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1180 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1243 = ((_1229 * _1224) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1184 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1244 = ((_1229 * _1225) / cbModelParam._m0[35u].z) + ((((((_1188 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        float _1279 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1246.x + (-0.5));
        float _1281 = _1279 * (_1246.y + (-0.5));
        float _1282 = _1279 * (_1246.z + (-0.5));
        float _1289 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1253.x + (-0.5));
        float _1291 = _1289 * (_1253.y + (-0.5));
        float _1292 = _1289 * (_1253.z + (-0.5));
        float _1299 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1260.x + (-0.5));
        float _1301 = _1299 * (_1260.y + (-0.5));
        float _1302 = _1299 * (_1260.z + (-0.5));
        float _1309 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1267.x + (-0.5));
        float _1311 = _1309 * (_1267.y + (-0.5));
        float _1312 = _1309 * (_1267.z + (-0.5));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = _1280 * 0.5;
        float _1317 = _1290 * 0.5;
        float _1318 = _1300 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_573, _574, _575), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _3811 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _3822 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _3833 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1343 + 1.0))) + _1348) * _1313;
        float _1358 = _1281 * 0.5;
        float _1359 = _1291 * 0.5;
        float _1360 = _1301 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_573, _574, _575), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _3866 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1385 + 1.0))) + _1390) * _1314;
        float _1400 = _1282 * 0.5;
        float _1401 = _1292 * 0.5;
        float _1402 = _1302 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_573, _574, _575), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _3899 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1427 + 1.0))) + _1432) * _1315;
        _1449 = _1282;
        _1450 = _1281;
        _1451 = _1280;
        _1452 = _1292;
        _1453 = _1291;
        _1454 = _1290;
        _1455 = _1302;
        _1456 = _1301;
        _1457 = _1300;
        _1458 = _1315;
        _1459 = _1314;
        _1460 = _1313;
        _1461 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1462 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
        _1463 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
    }
    else
    {
        _1449 = _1137;
        _1450 = _1137;
        _1451 = _1137;
        _1452 = _1137;
        _1453 = _1137;
        _1454 = _1137;
        _1455 = _1137;
        _1456 = _1137;
        _1457 = _1137;
        _1458 = _1137;
        _1459 = _1137;
        _1460 = _1137;
        _1461 = 0.0;
        _1462 = 0.0;
        _1463 = 0.0;
    }
    float _1473 = (cbModelParam._m0[1u].x * (_1461 - _1149)) + _1149;
    float _1474 = (cbModelParam._m0[1u].x * (_1462 - _1150)) + _1150;
    float _1475 = (cbModelParam._m0[1u].x * (_1463 - _1151)) + _1151;
    float _1496 = fma(_1475, cbSceneParam._m0[89u].z, fma(_1474, cbSceneParam._m0[89u].y, _1473 * cbSceneParam._m0[89u].x));
    float _1499 = fma(_1475, cbSceneParam._m0[90u].z, fma(_1474, cbSceneParam._m0[90u].y, _1473 * cbSceneParam._m0[90u].x));
    float _1502 = fma(_1475, cbSceneParam._m0[91u].z, fma(_1474, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1473));
    float _1517 = _744 * 0.5;
    float _1518 = _745 * 0.5;
    float _1519 = _746 * 0.5;
    float _1520 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1451, _1454, _1457, _1460));
    float _1523 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1450, _1453, _1456, _1459));
    float _1526 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1449, _1452, _1455, _1458));
    float _1560;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1533 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1136, _1140, _1143, _1146));
        float _1537 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1138, _1141, _1144, _1147));
        float _1541 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1139, _1142, _1145, _1148));
        float _1548 = dot(vec4(cbModelParam._m0[39u]), vec4(_1517, _1518, _1519, 1.0));
        _1560 = dot(vec3(isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)), isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)), isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1548) ? 0.0 : (isnan(0.0) ? _1548 : max(0.0, _1548))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1560 = 1.0;
    }
    float _1571;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1562 = dot(vec4(cbModelParam._m0[40u]), vec4(_1517, _1518, _1519, 1.0));
        _1571 = dot(vec3(isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1562) ? 0.0 : (isnan(0.0) ? _1562 : max(0.0, _1562))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1571 = 1.0;
    }
    float _1575 = (_1571 * cbModelParam._m0[1u].x) + (_1560 * (1.0 - cbModelParam._m0[1u].x));
    float _1585 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _576);
    float _1586 = isnan(_1585) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1585 : min(cbModelParam._m0[25u].z, _1585));
    float _1667;
    float _1669;
    float _1671;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1634 = fma(_805, cbModelParam._m0[13u].z, fma(_801, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _797)) + cbModelParam._m0[13u].w;
        float _1638 = fma(_805, cbModelParam._m0[14u].z, fma(_801, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _797)) + cbModelParam._m0[14u].w;
        float _1642 = fma(_805, cbModelParam._m0[15u].z, fma(_801, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _797)) + cbModelParam._m0[15u].w;
        float _1645 = fma(_746, cbModelParam._m0[13u].z, fma(_745, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _744));
        float _1648 = fma(_746, cbModelParam._m0[14u].z, fma(_745, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _744));
        float _1651 = fma(_746, cbModelParam._m0[15u].z, fma(_745, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _744));
        float _1679;
        if (_1645 > 0.0)
        {
            _1679 = abs((1.0 - _1634) / _1645);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1634 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1679 = frontier_phi_17_15_ladder;
        }
        float _1882;
        if (_1648 > 0.0)
        {
            _1882 = abs((1.0 - _1638) / _1648);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1638 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1882 = frontier_phi_26_22_ladder;
        }
        float _2125;
        if (_1651 > 0.0)
        {
            _2125 = abs((1.0 - _1642) / _1651);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1642 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2125 = frontier_phi_38_33_ladder;
        }
        float _2127 = isnan(_1882) ? _1679 : (isnan(_1679) ? _1882 : min(_1679, _1882));
        float _2128 = isnan(_2125) ? _2127 : (isnan(_2127) ? _2125 : min(_2127, _2125));
        float _2132 = (_2128 * _1645) + _1634;
        float _2133 = (_2128 * _1648) + _1638;
        float _2134 = (_2128 * _1651) + _1642;
        float _2135 = _2128 * 9.9999997473787516355514526367188e-05;
        float _2137 = (-1.0) - _2135;
        float _2139 = _2135 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2134 > _2139) || ((_2134 < _2137) || ((_2133 > _2139) || ((_2133 < _2137) || ((_2132 < _2137) || (_2132 > _2139))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2258 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2134, cbModelParam._m0[9u].z, fma(_2133, cbModelParam._m0[9u].y, _2132 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2134, cbModelParam._m0[10u].z, fma(_2133, cbModelParam._m0[10u].y, _2132 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2134, cbModelParam._m0[11u].z, fma(_2133, cbModelParam._m0[11u].y, _2132 * cbModelParam._m0[11u].x))), _1586);
            frontier_phi_16_38_ladder = _2258.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2258.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2258.x * cbModelParam._m0[1u].y;
        }
        _1667 = frontier_phi_16_38_ladder_2;
        _1669 = frontier_phi_16_38_ladder_1;
        _1671 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1655 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_744, _745, _746), _1586);
        _1667 = _1655.x * cbModelParam._m0[1u].y;
        _1669 = _1655.y * cbModelParam._m0[1u].y;
        _1671 = _1655.z * cbModelParam._m0[1u].y;
    }
    float _1675 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _576);
    float _1676 = isnan(_1675) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1675 : min(cbModelParam._m0[25u].w, _1675));
    float _1767;
    float _1769;
    float _1771;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1731 = fma(_805, cbModelParam._m0[21u].z, fma(_801, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _797)) + cbModelParam._m0[21u].w;
        float _1735 = fma(_805, cbModelParam._m0[22u].z, fma(_801, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _797)) + cbModelParam._m0[22u].w;
        float _1739 = fma(_805, cbModelParam._m0[23u].z, fma(_801, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _797)) + cbModelParam._m0[23u].w;
        float _1742 = fma(_746, cbModelParam._m0[21u].z, fma(_745, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _744));
        float _1745 = fma(_746, cbModelParam._m0[22u].z, fma(_745, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _744));
        float _1748 = fma(_746, cbModelParam._m0[23u].z, fma(_745, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _744));
        float _1887;
        if (_1742 > 0.0)
        {
            _1887 = abs((1.0 - _1731) / _1742);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1731 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1887 = frontier_phi_28_24_ladder;
        }
        float _2152;
        if (_1745 > 0.0)
        {
            _2152 = abs((1.0 - _1735) / _1745);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1735 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2152 = frontier_phi_40_35_ladder;
        }
        float _2357;
        if (_1748 > 0.0)
        {
            _2357 = abs((1.0 - _1739) / _1748);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1739 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2357 = frontier_phi_49_46_ladder;
        }
        float _2359 = isnan(_2152) ? _1887 : (isnan(_1887) ? _2152 : min(_1887, _2152));
        float _2360 = isnan(_2357) ? _2359 : (isnan(_2359) ? _2357 : min(_2359, _2357));
        float _2364 = (_2360 * _1742) + _1731;
        float _2365 = (_2360 * _1745) + _1735;
        float _2366 = (_2360 * _1748) + _1739;
        float _2367 = _2360 * 9.9999997473787516355514526367188e-05;
        float _2368 = (-1.0) - _2367;
        float _2370 = _2367 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2366 > _2370) || ((_2366 < _2368) || ((_2365 > _2370) || ((_2365 < _2368) || ((_2364 < _2368) || (_2364 > _2370))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2565 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2366, cbModelParam._m0[17u].z, fma(_2365, cbModelParam._m0[17u].y, _2364 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2366, cbModelParam._m0[18u].z, fma(_2365, cbModelParam._m0[18u].y, _2364 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2366, cbModelParam._m0[19u].z, fma(_2365, cbModelParam._m0[19u].y, _2364 * cbModelParam._m0[19u].x))), _1676);
            frontier_phi_25_49_ladder = _2565.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2565.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2565.x * cbModelParam._m0[1u].z;
        }
        _1767 = frontier_phi_25_49_ladder_2;
        _1769 = frontier_phi_25_49_ladder_1;
        _1771 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1751 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_744, _745, _746), _1676);
        _1767 = _1751.x * cbModelParam._m0[1u].z;
        _1769 = _1751.y * cbModelParam._m0[1u].z;
        _1771 = _1751.z * cbModelParam._m0[1u].z;
    }
    float _1783 = ((((1.0 - _765) * ((_752 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_765 * _752)) * _736;
    float _1784 = _1783 * ((cbModelParam._m0[1u].w * (_1767 - _1667)) + _1667);
    float _1785 = _1783 * ((cbModelParam._m0[1u].w * (_1769 - _1669)) + _1669);
    float _1786 = _1783 * ((cbModelParam._m0[1u].w * (_1771 - _1671)) + _1671);
    float _1789 = fma(_1786, cbSceneParam._m0[89u].z, fma(_1785, cbSceneParam._m0[89u].y, _1784 * cbSceneParam._m0[89u].x));
    float _1792 = fma(_1786, cbSceneParam._m0[90u].z, fma(_1785, cbSceneParam._m0[90u].y, _1784 * cbSceneParam._m0[90u].x));
    float _1795 = fma(_1786, cbSceneParam._m0[91u].z, fma(_1785, cbSceneParam._m0[91u].y, _1784 * cbSceneParam._m0[91u].x));
    uvec4 _1805 = floatBitsToUint(cbInstanceData._m0[_711 + 5u]);
    uint _1807 = _1805.x * 14u;
    uint _1808 = _1807 + 13u;
    float _1815 = _736 + (-1.0);
    float _1820 = (cbLight._m0[_1808].x * _1815) + 1.0;
    float _1821 = (cbLight._m0[_1808].y * _1815) + 1.0;
    float _1822 = (cbLight._m0[_1808].z * _1815) + 1.0;
    float _1823 = (cbLight._m0[_1808].w * _1815) + 1.0;
    uint _1824 = _1807 + 5u;
    float _1830 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
    uint _1834 = _1807 + 4u;
    float _1841 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
    uint _1845 = _1807 | 1u;
    float _1856 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_573, _574, _575));
    float _1859 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_573, _574, _575));
    float _4035 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _4046 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
    float _1864 = (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * 0.3183098733425140380859375;
    float _1866 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * 0.3183098733425140380859375;
    float _1873 = ((cbLight._m0[_1824].x * _1830) * _1866) + ((cbLight._m0[_1834].x * _1841) * _1864);
    float _1874 = ((_1830 * cbLight._m0[_1824].y) * _1866) + ((_1841 * cbLight._m0[_1834].y) * _1864);
    float _1875 = ((_1830 * cbLight._m0[_1824].z) * _1866) + ((_1841 * cbLight._m0[_1834].z) * _1864);
    uvec4 _1879 = floatBitsToUint(cbLight._m0[_1807 + 12u]);
    bool _1881 = _1879.x == 0u;
    float _1892;
    float _1894;
    float _1896;
    if (_1881)
    {
        _1892 = _1873;
        _1894 = _1874;
        _1896 = _1875;
    }
    else
    {
        uint _1900 = _1807 + 6u;
        float _1916 = (dot(vec3(cbLight._m0[_1807 + 2u].xyz), vec3(_573, _574, _575)) * 0.5) + 0.5;
        float _1917 = _1916 * _1916;
        float _4057 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1918 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1919 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
        _1892 = (((cbLight._m0[_1900].x * 0.3183098733425140380859375) * _1918) * _1919) + _1873;
        _1894 = (((cbLight._m0[_1900].y * 0.3183098733425140380859375) * _1918) * _1919) + _1874;
        _1896 = (((cbLight._m0[_1900].z * 0.3183098733425140380859375) * _1918) * _1919) + _1875;
    }
    bool _1899 = _1879.y == 0u;
    float _1937;
    float _1939;
    float _1941;
    if (_1899)
    {
        _1937 = _1892;
        _1939 = _1894;
        _1941 = _1896;
    }
    else
    {
        uint _2096 = _1807 + 7u;
        float _2112 = (dot(vec3(cbLight._m0[_1807 + 3u].xyz), vec3(_573, _574, _575)) * 0.5) + 0.5;
        float _2113 = _2112 * _2112;
        float _4073 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2114 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2115 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
        _1937 = (((cbLight._m0[_2096].x * 0.3183098733425140380859375) * _2114) * _2115) + _1892;
        _1939 = (((cbLight._m0[_2096].y * 0.3183098733425140380859375) * _2114) * _2115) + _1894;
        _1941 = (((cbLight._m0[_2096].z * 0.3183098733425140380859375) * _2114) * _2115) + _1896;
    }
    uint _1944 = _1807 + 8u;
    float _1957 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1807].w)) * _576) * 0.949999988079071044921875);
    float _1958 = _1957 * _1957;
    float _1959 = cbLight._m0[_1807].x + _653;
    float _1960 = cbLight._m0[_1807].y + _654;
    float _1961 = cbLight._m0[_1807].z + _655;
    float _1965 = inversesqrt(dot(vec3(_1959, _1960, _1961), vec3(_1959, _1960, _1961)));
    float _1966 = _1965 * _1959;
    float _1967 = _1965 * _1960;
    float _1968 = _1965 * _1961;
    float _1969 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_1807].xyz));
    float _4089 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1972 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _4100 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _1973 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _1974 = dot(vec3(_573, _574, _575), vec3(_1966, _1967, _1968));
    float _4111 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1977 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _1978 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_1966, _1967, _1968));
    float _4122 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1982 = _1958 * _1958;
    float _1986 = ((_1977 * _1977) * (_1982 + (-1.0))) + 1.0;
    float _1997 = (exp2(log2(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1998 = 1.0 - _1958;
    float _2009 = (0.5 / (((_1973 * ((_1972 * _1998) + _1958)) + 9.9999999392252902907785028219223e-09) + (((_1973 * _1998) + _1958) * _1972))) * _1972;
    float _4133 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2011 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1982 / ((_1986 * _1986) * 3.141590118408203125));
    uint _2022 = _1807 + 9u;
    float _2033 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1845].w)) * _576) * 0.949999988079071044921875);
    float _2034 = _2033 * _2033;
    float _2035 = cbLight._m0[_1845].x + _653;
    float _2036 = cbLight._m0[_1845].y + _654;
    float _2037 = cbLight._m0[_1845].z + _655;
    float _2041 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
    float _2042 = _2041 * _2035;
    float _2043 = _2041 * _2036;
    float _2044 = _2041 * _2037;
    float _2045 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_1845].xyz));
    float _4144 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2048 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _2049 = dot(vec3(_573, _574, _575), vec3(_2042, _2043, _2044));
    float _4155 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2052 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _2053 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_2042, _2043, _2044));
    float _4166 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2057 = _2034 * _2034;
    float _2061 = ((_2052 * _2052) * (_2057 + (-1.0))) + 1.0;
    float _2070 = (exp2(log2(1.0 - (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2071 = 1.0 - _2034;
    float _2081 = (0.5 / (((_1973 * ((_2048 * _2071) + _2034)) + 9.9999999392252902907785028219223e-09) + (((_1973 * _2071) + _2034) * _2048))) * _2048;
    float _4177 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2083 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_2057 / ((_2061 * _2061) * 3.141590118408203125));
    float _2093 = (((_2070 * cbLight._m0[_2022].x) * _2083) * _1830) + (((_1997 * cbLight._m0[_1944].x) * _2011) * _1841);
    float _2094 = (((_2070 * cbLight._m0[_2022].y) * _2083) * _1830) + (((_1997 * cbLight._m0[_1944].y) * _2011) * _1841);
    float _2095 = (((_2070 * cbLight._m0[_2022].z) * _2083) * _1830) + (((_1997 * cbLight._m0[_1944].z) * _2011) * _1841);
    float _2157;
    float _2159;
    float _2161;
    if (_1881)
    {
        _2157 = _2093;
        _2159 = _2094;
        _2161 = _2095;
    }
    else
    {
        uint _2163 = _1807 + 2u;
        uint _2167 = _1807 + 10u;
        float _2181 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2163].w)) * _576) * 0.949999988079071044921875);
        float _2182 = _2181 * _2181;
        float _2183 = cbLight._m0[_2163].x + _653;
        float _2184 = cbLight._m0[_2163].y + _654;
        float _2185 = cbLight._m0[_2163].z + _655;
        float _2189 = inversesqrt(dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185)));
        float _2190 = _2189 * _2183;
        float _2191 = _2189 * _2184;
        float _2192 = _2189 * _2185;
        float _2193 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_2163].xyz));
        float _4188 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2196 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2197 = dot(vec3(_573, _574, _575), vec3(_2190, _2191, _2192));
        float _4199 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2200 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2201 = dot(vec3(cbLight._m0[_2163].xyz), vec3(_2190, _2191, _2192));
        float _4210 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2205 = _2182 * _2182;
        float _2209 = ((_2200 * _2200) * (_2205 + (-1.0))) + 1.0;
        float _2218 = (exp2(log2(1.0 - (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2219 = 1.0 - _2182;
        float _2229 = (0.5 / (((_1973 * ((_2196 * _2219) + _2182)) + 9.9999999392252902907785028219223e-09) + (((_1973 * _2219) + _2182) * _2196))) * _2196;
        float _4221 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2231 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2205 / ((_2209 * _2209) * 3.141590118408203125));
        float _2232 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
        _2157 = (((_2218 * cbLight._m0[_2167].x) * _2231) * _2232) + _2093;
        _2159 = (((_2218 * cbLight._m0[_2167].y) * _2231) * _2232) + _2094;
        _2161 = (((_2218 * cbLight._m0[_2167].z) * _2231) * _2232) + _2095;
    }
    float _2267;
    float _2269;
    float _2271;
    if (_1899)
    {
        _2267 = _2157;
        _2269 = _2159;
        _2271 = _2161;
    }
    else
    {
        uint _2278 = _1807 + 3u;
        uint _2282 = _1807 + 11u;
        float _2296 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2278].w)) * _576) * 0.949999988079071044921875);
        float _2297 = _2296 * _2296;
        float _2298 = cbLight._m0[_2278].x + _653;
        float _2299 = cbLight._m0[_2278].y + _654;
        float _2300 = cbLight._m0[_2278].z + _655;
        float _2304 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
        float _2305 = _2304 * _2298;
        float _2306 = _2304 * _2299;
        float _2307 = _2304 * _2300;
        float _2308 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_2278].xyz));
        float _4237 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2312 = dot(vec3(_573, _574, _575), vec3(_2305, _2306, _2307));
        float _4248 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2315 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2316 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_2305, _2306, _2307));
        float _4259 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2320 = _2297 * _2297;
        float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
        float _2333 = (exp2(log2(1.0 - (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2334 = 1.0 - _2297;
        float _2344 = (0.5 / (((_1973 * ((_2311 * _2334) + _2297)) + 9.9999999392252902907785028219223e-09) + (((_1973 * _2334) + _2297) * _2311))) * _2311;
        float _4270 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2346 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
        float _2347 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
        _2267 = (((_2333 * cbLight._m0[_2282].x) * _2346) * _2347) + _2157;
        _2269 = (((_2333 * cbLight._m0[_2282].y) * _2346) * _2347) + _2159;
        _2271 = (((_2333 * cbLight._m0[_2282].z) * _2346) * _2347) + _2161;
    }
    float _2482;
    float _2484;
    float _2486;
    float _2488;
    float _2490;
    float _2492;
    if (_1805.y == 0u)
    {
        float _2422 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2423 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2422;
        float _2424 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2422;
        float _2425 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2422;
        uvec4 _2437 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2438 = _2437.x;
        uint _2449 = uint((float(_2437.y) * floor(float(uint(cbSceneParam._m0[85u].y * _674) / _2438))) + floor(float(uint(cbSceneParam._m0[85u].x * _673) / _2438)));
        float _2459 = (log2(_2425 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2460 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        uint _2463 = uint(isnan(14.0) ? _2460 : (isnan(_2460) ? 14.0 : min(_2460, 14.0)));
        uvec4 _2468 = texelFetch(g_lightClusterGridBuffer, int(((_2463 << 2u) + (_2449 << 6u)) >> 2u));
        uint _2469 = _2468.x;
        uint _2470 = _2437.z;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        if (((((1u << ((_2470 >> 4u) & 15u)) + 4294967295u) & _2469) == 0u) || ((_2470 & 240u) == 0u))
        {
            _2570 = 0.0;
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
        }
        else
        {
            float _2571;
            float _2573;
            float _2575;
            float _2577;
            float _2579;
            float _2581;
            float _2723 = 0.0;
            float _2724 = 0.0;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            uint _2729 = 0u;
            uint _2738;
            bool _2739;
            for (;;)
            {
                _2738 = texelFetch(g_lightClassification, int((((_2463 << 5u) + (_2449 << 9u)) + (_2729 << 2u)) >> 2u)).x;
                _2739 = _2738 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2739)
                {
                    frontier_phi_66_pred = _2723;
                    frontier_phi_66_pred_1 = _2728;
                    frontier_phi_66_pred_2 = _2727;
                    frontier_phi_66_pred_3 = _2726;
                    frontier_phi_66_pred_4 = _2725;
                    frontier_phi_66_pred_5 = _2724;
                }
                else
                {
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    uint _2874;
                    _2868 = _2723;
                    _2869 = _2724;
                    _2870 = _2725;
                    _2871 = _2726;
                    _2872 = _2727;
                    _2873 = _2728;
                    _2874 = _2738;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    for (;;)
                    {
                        uint _2878 = uint(findLSB(_2874)) + (_2729 << 5u);
                        uint _2875 = (_2874 + 4294967295u) & _2874;
                        uint _2880 = _2878 * 48u;
                        vec4 _2894 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2880)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 3u)).x));
                        uint _2900 = (_2878 * 48u) + 4u;
                        vec4 _2913 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2900)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 3u)).x));
                        uint _2919 = (_2878 * 48u) + 8u;
                        vec3 _2930 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2919)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 2u)).x));
                        float _2934 = _2894.x - _2423;
                        float _2935 = _2894.y - _2424;
                        float _2936 = _2894.z - _2425;
                        float _2937 = dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936));
                        float _2940 = inversesqrt(_2937);
                        float _2941 = _2940 * _2934;
                        float _2942 = _2940 * _2935;
                        float _2943 = _2940 * _2936;
                        float _2944 = dot(vec3(_692, _695, _698), vec3(_2941, _2942, _2943));
                        float _2949 = 1.0 - (_2937 * _2894.w);
                        float _4296 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2950 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                        float _2951 = sqrt(_2937) * _2913.w;
                        float _2954 = 1.39999997615814208984375 / (_2951 + 1.39999997615814208984375);
                        float _2955 = _2954 * _2954;
                        float _2958 = ((1.0 - _2955) * _2944) + _2955;
                        float _2961 = _2951 * _2951;
                        float _2965 = ((isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0))) * _2950) / ((_2961 * 0.699999988079071044921875) + 1.0);
                        float _2969 = (-0.0) - _2423;
                        float _2970 = (-0.0) - _2424;
                        float _2971 = (-0.0) - _2425;
                        float _2975 = inversesqrt(dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971)));
                        float _2976 = _2975 * _2969;
                        float _2977 = _2975 * _2970;
                        float _2978 = _2975 * _2971;
                        float _2986 = exp2(log2(1.0 / ((_2961 * 3.5) + 5.0)) * 0.25);
                        float _2987 = 1.0 - _752;
                        float _2994 = sqrt(1.0 - ((1.0 - (_2987 * _2987)) * (1.0 - (_2986 * _2986))));
                        float _2995 = _2994 * _2994;
                        float _2996 = _2995 * _2995;
                        float _2997 = _2976 + _2941;
                        float _2998 = _2977 + _2942;
                        float _2999 = _2978 + _2943;
                        float _3003 = inversesqrt(dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999)));
                        float _3007 = dot(vec3(_692, _695, _698), vec3(_2976, _2977, _2978));
                        float _4312 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3010 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                        float _3011 = dot(vec3(_692, _695, _698), vec3(_3003 * _2997, _3003 * _2998, _3003 * _2999));
                        float _4323 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3014 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                        float _3018 = ((_3014 * _3014) * (_2996 + (-1.0))) + 1.0;
                        float _3019 = _2954 * _2995;
                        float _3020 = _3019 * _3019;
                        float _3023 = ((1.0 - _3020) * _2944) + _3020;
                        float _4334 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3024 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3025 = 1.0 - _2995;
                        float _3035 = (0.5 / (((_3024 * ((_3010 * _3025) + _2995)) + 9.9999999392252902907785028219223e-09) + (((_3024 * _3025) + _2995) * _3010))) * _3024;
                        float _4345 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3046 = (((_2996 * 3.1415927410125732421875) * (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0)))) / ((_3018 * _3018) * ((_2961 * 2.1991131305694580078125) + 3.141590118408203125))) * _2950;
                        _2798 = (_2965 * _2913.x) + _2871;
                        _2799 = (_2965 * _2913.y) + _2872;
                        _2800 = (_2965 * _2913.z) + _2873;
                        _2795 = (_3046 * _2930.x) + _2868;
                        _2796 = (_3046 * _2930.y) + _2869;
                        _2797 = (_3046 * _2930.z) + _2870;
                        if (_2875 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2868 = _2795;
                            _2869 = _2796;
                            _2870 = _2797;
                            _2871 = _2798;
                            _2872 = _2799;
                            _2873 = _2800;
                            _2874 = _2875;
                        }
                    }
                    frontier_phi_66_pred = _2795;
                    frontier_phi_66_pred_1 = _2800;
                    frontier_phi_66_pred_2 = _2799;
                    frontier_phi_66_pred_3 = _2798;
                    frontier_phi_66_pred_4 = _2797;
                    frontier_phi_66_pred_5 = _2796;
                }
                _2571 = frontier_phi_66_pred;
                _2581 = frontier_phi_66_pred_1;
                _2579 = frontier_phi_66_pred_2;
                _2577 = frontier_phi_66_pred_3;
                _2575 = frontier_phi_66_pred_4;
                _2573 = frontier_phi_66_pred_5;
                uint _2730 = _2729 + 1u;
                if (_2730 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2723 = _2571;
                    _2724 = _2573;
                    _2725 = _2575;
                    _2726 = _2577;
                    _2727 = _2579;
                    _2728 = _2581;
                    _2729 = _2730;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2570 = _2571;
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
        }
        uvec4 _2584 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2585 = _2584.z;
        uint _2587 = (_2585 >> 8u) & 15u;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        if (((4294967295u << _2587) & _2469) == 0u)
        {
            _2691 = _2570;
            _2693 = _2572;
            _2695 = _2574;
            _2697 = _2576;
            _2699 = _2578;
            _2701 = _2580;
        }
        else
        {
            float _2716 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
            float _2717 = _2716 * _2423;
            float _2718 = _2716 * _2424;
            float _2719 = _2716 * _2425;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2587 < ((_2585 >> 12u) & 15u))
            {
                float _2692;
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2851 = _2570;
                float _2852 = _2572;
                float _2853 = _2574;
                float _2854 = _2576;
                float _2855 = _2578;
                float _2856 = _2580;
                uint _2857 = _2587;
                uint _2866;
                bool _2867;
                for (;;)
                {
                    _2866 = texelFetch(g_lightClassification, int((((_2463 << 5u) + (_2449 << 9u)) + (_2857 << 2u)) >> 2u)).x;
                    _2867 = _2866 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2867)
                    {
                        frontier_phi_77_pred = _2856;
                        frontier_phi_77_pred_1 = _2855;
                        frontier_phi_77_pred_2 = _2854;
                        frontier_phi_77_pred_3 = _2853;
                        frontier_phi_77_pred_4 = _2852;
                        frontier_phi_77_pred_5 = _2851;
                    }
                    else
                    {
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3073 = _2851;
                        float _3074 = _2852;
                        float _3075 = _2853;
                        float _3076 = _2854;
                        float _3077 = _2855;
                        float _3078 = _2856;
                        uint _3079 = _2866;
                        uint _3080;
                        vec4 _3105;
                        float _3106;
                        vec4 _3121;
                        vec3 _3133;
                        vec4 _3148;
                        vec4 _3163;
                        float _3210;
                        bool _3211;
                        for (;;)
                        {
                            uint _3090 = ((_2857 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3079));
                            _3080 = (_3079 + 4294967295u) & _3079;
                            uint _3092 = _3090 * 40u;
                            _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            _3106 = _3105.w;
                            uint _3108 = (_3090 * 40u) + 4u;
                            _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            uint _3123 = (_3090 * 40u) + 8u;
                            _3133 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x));
                            uint _3135 = (_3090 * 40u) + 16u;
                            _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            uint _3150 = (_3090 * 40u) + 20u;
                            _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            uint _3166 = (_3090 * 40u) + 24u;
                            vec4 _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            uint _3185 = (_3090 * 40u) + 28u;
                            vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            _3210 = fma(_2425, _3198.z, fma(_2424, _3198.y, _3198.x * _2423)) + _3198.w;
                            _3211 = !((fma(_2425, _3179.z, fma(_2424, _3179.y, _3179.x * _2423)) + _3179.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3211)
                            {
                                float _3238 = _3105.x - _2423;
                                float _3239 = _3105.y - _2424;
                                float _3240 = _3105.z - _2425;
                                float _3241 = dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240));
                                float _3244 = inversesqrt(_3241);
                                float _3245 = _3244 * _3238;
                                float _3246 = _3244 * _3239;
                                float _3247 = _3244 * _3240;
                                float _3251 = 1.0 - (_3241 / (_3106 * _3106));
                                float _4356 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3252 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                                float _3256 = sqrt(_3241) * _3121.w;
                                float _3258 = 1.39999997615814208984375 / (_3256 + 1.39999997615814208984375);
                                float _3259 = _3258 * _3258;
                                float _3262 = ((1.0 - _3259) * dot(vec3(_3245, _3246, _3247), vec3(_692, _695, _698))) + _3259;
                                float _3265 = _3256 * _3256;
                                float _3269 = (fma(_2425, _3148.z, fma(_2424, _3148.y, _3148.x * _2423)) + _3148.w) / _3210;
                                float _3270 = (fma(_2425, _3163.z, fma(_2424, _3163.y, _3163.x * _2423)) + _3163.w) / _3210;
                                float _3274 = 1.0 - dot(vec2(_3269, _3270), vec2(_3269, _3270));
                                float _4372 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3275 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                                float _3276 = _3275 * (((isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0))) * _3252) / ((_3265 * 0.699999988079071044921875) + 1.0));
                                float _3288 = exp2(log2(1.0 / ((_3265 * 3.5) + 5.0)) * 0.25);
                                float _3289 = 1.0 - _752;
                                float _3296 = sqrt(1.0 - ((1.0 - (_3289 * _3289)) * (1.0 - (_3288 * _3288))));
                                float _3297 = _3296 * _3296;
                                float _3298 = _3297 * _3297;
                                float _3299 = _3245 - _2717;
                                float _3300 = _3246 - _2718;
                                float _3301 = _3247 - _2719;
                                float _3305 = inversesqrt(dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301)));
                                float _3309 = dot(vec3(_692, _695, _698), vec3((-0.0) - _2717, (-0.0) - _2718, (-0.0) - _2719));
                                float _4383 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3312 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3313 = dot(vec3(_692, _695, _698), vec3(_3305 * _3299, _3305 * _3300, _3305 * _3301));
                                float _4394 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3316 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3320 = ((_3316 * _3316) * (_3298 + (-1.0))) + 1.0;
                                float _3321 = _3258 * _3297;
                                float _3322 = _3321 * _3321;
                                float _3328 = ((1.0 - _3322) * dot(vec3(_692, _695, _698), vec3(_3245, _3246, _3247))) + _3322;
                                float _4405 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3329 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3330 = 1.0 - _3297;
                                float _3340 = (0.5 / (((_3329 * ((_3312 * _3330) + _3297)) + 9.9999999392252902907785028219223e-09) + (((_3329 * _3330) + _3297) * _3312))) * _3329;
                                float _4416 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3350 = (_3275 * _3252) * (((_3298 * 3.1415927410125732421875) * (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) / ((_3320 * _3320) * ((_3265 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3276 * _3121.y;
                                frontier_phi_83_pred_1 = _3276 * _3121.x;
                                frontier_phi_83_pred_2 = _3350 * _3133.z;
                                frontier_phi_83_pred_3 = _3350 * _3133.y;
                                frontier_phi_83_pred_4 = _3350 * _3133.x;
                                frontier_phi_83_pred_5 = _3276 * _3121.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3358 = frontier_phi_83_pred;
                            _3357 = frontier_phi_83_pred_1;
                            _3356 = frontier_phi_83_pred_2;
                            _3355 = frontier_phi_83_pred_3;
                            _3354 = frontier_phi_83_pred_4;
                            _3359 = frontier_phi_83_pred_5;
                            _3063 = _3357 + _3076;
                            _3064 = _3358 + _3077;
                            _3065 = _3359 + _3078;
                            _3060 = _3354 + _3073;
                            _3061 = _3355 + _3074;
                            _3062 = _3356 + _3075;
                            if (_3080 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3080;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3065;
                        frontier_phi_77_pred_1 = _3064;
                        frontier_phi_77_pred_2 = _3063;
                        frontier_phi_77_pred_3 = _3062;
                        frontier_phi_77_pred_4 = _3061;
                        frontier_phi_77_pred_5 = _3060;
                    }
                    _2702 = frontier_phi_77_pred;
                    _2700 = frontier_phi_77_pred_1;
                    _2698 = frontier_phi_77_pred_2;
                    _2696 = frontier_phi_77_pred_3;
                    _2694 = frontier_phi_77_pred_4;
                    _2692 = frontier_phi_77_pred_5;
                    uint _2858 = _2857 + 1u;
                    if (_2858 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2851 = _2692;
                        _2852 = _2694;
                        _2853 = _2696;
                        _2854 = _2698;
                        _2855 = _2700;
                        _2856 = _2702;
                        _2857 = _2858;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2696;
                frontier_phi_58_59_ladder_1 = _2702;
                frontier_phi_58_59_ladder_2 = _2700;
                frontier_phi_58_59_ladder_3 = _2698;
                frontier_phi_58_59_ladder_4 = _2694;
                frontier_phi_58_59_ladder_5 = _2692;
            }
            else
            {
                frontier_phi_58_59_ladder = _2574;
                frontier_phi_58_59_ladder_1 = _2580;
                frontier_phi_58_59_ladder_2 = _2578;
                frontier_phi_58_59_ladder_3 = _2576;
                frontier_phi_58_59_ladder_4 = _2572;
                frontier_phi_58_59_ladder_5 = _2570;
            }
            _2691 = frontier_phi_58_59_ladder_5;
            _2693 = frontier_phi_58_59_ladder_4;
            _2695 = frontier_phi_58_59_ladder;
            _2697 = frontier_phi_58_59_ladder_3;
            _2699 = frontier_phi_58_59_ladder_2;
            _2701 = frontier_phi_58_59_ladder_1;
        }
        float _2706 = isnan(1.0) ? _736 : (isnan(_736) ? 1.0 : min(_736, 1.0));
        _2482 = (_2706 * _2697) + _1937;
        _2484 = (_2706 * _2699) + _1939;
        _2486 = (_2706 * _2701) + _1941;
        _2488 = ((_2691 * 0.039999999105930328369140625) * _2706) + _2267;
        _2490 = ((_2693 * 0.039999999105930328369140625) * _2706) + _2269;
        _2492 = ((_2695 * 0.039999999105930328369140625) * _2706) + _2271;
    }
    else
    {
        _2482 = _1937;
        _2484 = _1939;
        _2486 = _1941;
        _2488 = _2267;
        _2490 = _2269;
        _2492 = _2271;
    }
    float _4432 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4443 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4454 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _2509 = ((isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2482 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _736))) + ((_2488 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1575)) * cbPerFrame._m0[3u].x);
    float _2510 = ((isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2484 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _736))) + ((_2490 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1575)) * cbPerFrame._m0[3u].x);
    float _2511 = ((isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2486 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _736))) + ((_2492 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1575)) * cbPerFrame._m0[3u].x);
    uint _2512 = _711 + 6u;
    float _2520 = _673 / cbSceneParam._m0[86u].x;
    float _2521 = _674 / cbSceneParam._m0[86u].y;
    vec4 _2535 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2520, _2521, (log2((isnan(cbSceneParam._m0[77u].w) ? _595 : (isnan(_595) ? cbSceneParam._m0[77u].w : min(_595, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2537 = _2535.x;
    float _2538 = _2535.y;
    float _2539 = _2535.z;
    float _2540 = _2535.w;
    float _2633;
    float _2635;
    float _2637;
    float _2639;
    if (_595 > cbSceneParam._m0[78u].w)
    {
        float _2595 = isnan(_595) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _595 : min(cbSceneParam._m0[80u].w, _595));
        float _2596 = _2595 / _595;
        float _2607 = _2596 * _646;
        float _2608 = _647 * _2596;
        float _2609 = (-0.0) - _2608;
        float _2611 = _2596 * _648;
        float _2613 = (cbSceneParam._m0[77u].w * _2609) / _2595;
        float _2614 = _2613 + cbSceneParam._m0[79u].w;
        float _2615 = cbSceneParam._m0[79u].w - _2608;
        float _2621 = sqrt(((_2607 * _2607) + (_2608 * _2608)) + (_2611 * _2611));
        float _2624 = (1.0 - (cbSceneParam._m0[77u].w / _2595)) * _2621;
        float _2629 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2631 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2808;
        if (abs((_2609 - _2613) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2808 = ((((_2614 > 0.0) ? exp2(_2629 * _2614) : (2.0 - exp2(_2631 * _2614))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2624;
        }
        else
        {
            float _2752 = 1.0 / cbSceneParam._m0[80u].x;
            float _2753 = isnan(_2615) ? _2614 : (isnan(_2614) ? _2615 : max(_2614, _2615));
            float _2754 = isnan(_2615) ? _2614 : (isnan(_2614) ? _2615 : min(_2614, _2615));
            float _2763 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : min(_2753, 0.0));
            float _2764 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : min(_2754, 0.0));
            _2808 = ((abs(_2621 / _2609) * cbSceneParam._m0[80u].y) * ((((_2763 - _2764) * 2.0) - ((exp2(_2629 * (isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0)))) - exp2(_2629 * (isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0))))) * _2752)) - ((exp2(_2631 * _2763) - exp2(_2631 * _2764)) * _2752))) + (_2624 * cbSceneParam._m0[80u].z);
        }
        vec4 _2810 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2520, _2521, 1.0), 0.0);
        float _2819 = exp2((_2808 * (-1.44269502162933349609375)) * (1.0 - _2810.w));
        float _2820 = log2(_2819);
        float _2836 = log2(_2540);
        _2633 = (exp2(_2836 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2820 * cbSceneParam._m0[78u].x)) * _2810.x) / cbSceneParam._m0[78u].x)) + _2537;
        _2635 = (exp2(_2836 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2820 * cbSceneParam._m0[78u].y)) * _2810.y) / cbSceneParam._m0[78u].y)) + _2538;
        _2637 = (exp2(_2836 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2820 * cbSceneParam._m0[78u].z)) * _2810.z) / cbSceneParam._m0[78u].z)) + _2539;
        _2639 = _2819 * _2540;
    }
    else
    {
        _2633 = _2537;
        _2635 = _2538;
        _2637 = _2539;
        _2639 = _2540;
    }
    bool _2846;
    vec4 _2649;
    vec4 _2671;
    float _2673;
    float _2677;
    float _2678;
    float _2679;
    float _2680;
    bool _2690;
    for (;;)
    {
        _2649 = cbMatDynParam._m0[0u];
        float _2651 = roundEven(_2649.y);
        bool _2652 = _2651 == 3.0;
        float _2653 = log2(_2639);
        float _2660 = exp2(_2653 * cbSceneParam._m0[78u].x) * _2509;
        float _2661 = exp2(_2653 * cbSceneParam._m0[78u].y) * _2510;
        float _2662 = exp2(_2653 * cbSceneParam._m0[78u].z) * _2511;
        float _2669 = _662 + (-0.5);
        _2671 = cbMtdParam._m0[1u];
        _2673 = _2671.y * _2669;
        float _2676 = (_2651 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2677 = _2676 * (_2652 ? _2660 : (_2660 + (cbSceneParam._m0[72u].w * _2633)));
        _2678 = _2676 * (_2652 ? _2661 : (_2661 + (cbSceneParam._m0[72u].w * _2635)));
        _2679 = _2676 * (_2652 ? _2662 : (_2662 + (cbSceneParam._m0[72u].w * _2637)));
        _2680 = _2669 * 0.999000012874603271484375;
        _2690 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2690)
        {
            if ((cbInstanceData._m0[_711 + 7u].x + _2680) < 0.5)
            {
                _2846 = true;
                break;
            }
        }
        uint _2787 = _712 + uint(_2649.w);
        if ((cbInstanceData._m0[_2787].w < 1.0) && ((cbInstanceData._m0[_2787].w + _2680) < 0.5))
        {
            _2846 = true;
            break;
        }
        if ((_2673 + 1.0) < _2671.x)
        {
            _2846 = true;
            break;
        }
        _2846 = false;
        break;
    }
    float _3051;
    if (_2846)
    {
        discard_state = true;
        _3051 = 0.0;
    }
    else
    {
        _3051 = cbInstanceData._m0[_2512].w;
    }
    SV_Target.x = _2677;
    SV_Target.y = _2678;
    SV_Target.z = _2679;
    SV_Target.w = _3051;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2512].w;
    discard_exit();
}


