#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1227;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _252 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _258 = _252.x * cbMtdParam._m0[10u].x;
    float _259 = _252.y * cbMtdParam._m0[10u].y;
    float _260 = _252.z * cbMtdParam._m0[10u].z;
    vec4 _279 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _326 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x;
    float _337 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _326)) + 1.0;
    float _3560 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _338 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _345 = (_338 * ((_279.x * cbMtdParam._m0[11u].x) - _258)) + _258;
    float _346 = (_338 * ((_279.y * cbMtdParam._m0[11u].y) - _259)) + _259;
    float _347 = (_338 * ((_279.z * cbMtdParam._m0[11u].z) - _260)) + _260;
    vec4 _366 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _396 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _326)) + 1.0;
    float _3571 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _404 = (_397 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _405 = (_397 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _406 = (_397 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    vec4 _423 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _448 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _326)) + 1.0;
    float _3582 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _456 = (_449 * ((_423.x * cbMtdParam._m0[13u].x) - _404)) + _404;
    float _457 = (_449 * ((_423.y * cbMtdParam._m0[13u].y) - _405)) + _405;
    float _458 = (_449 * ((_423.z * cbMtdParam._m0[13u].z) - _406)) + _406;
    vec4 _479 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _508 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.z) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.w) + cbTextureTilingScale._m0[14u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3593 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _509 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _516 = (_509 * ((_479.x * cbMtdParam._m0[14u].x) - _456)) + _456;
    float _517 = (_509 * ((_479.y * cbMtdParam._m0[14u].y) - _457)) + _457;
    float _518 = (_509 * ((_479.z * cbMtdParam._m0[14u].z) - _458)) + _458;
    vec4 _534 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _556 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _574 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _576 = _574.x;
    float _577 = _574.y;
    float _580 = cbMtdParam._m0[16u].w * _574.z;
    float _583 = (((cbMtdParam._m0[17u].x * _556.z) - _580) * _338) + _580;
    vec4 _596 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _605 = (((cbMtdParam._m0[17u].y * _596.z) - _583) * _397) + _583;
    vec4 _618 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _627 = (((cbMtdParam._m0[17u].z * _618.z) - _605) * _449) + _605;
    float _632 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_534.z * cbMtdParam._m0[16u].z) - _627)) + _627;
    vec4 _645 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _657 = ((_556.x - _576) * _338) + _576;
    float _658 = ((_556.y - _577) * _338) + _577;
    float _663 = ((_596.x - _657) * _397) + _657;
    float _664 = ((_596.y - _658) * _397) + _658;
    float _673 = ((((_618.x - _663) * _449) + _663) * 2.0) + (-1.0);
    float _674 = ((((_618.y - _664) * _449) + _664) * 2.0) + (-1.0);
    float _675 = dot(vec2(_673, _674), vec2(_673, _674));
    float _3604 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _680 = sqrt(1.0 - (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))));
    float _690 = ((((_645.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _673) + ((((_534.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y);
    float _691 = ((((_645.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _674) + ((((_534.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y);
    float _694 = fma(_680, _222 * NORMAL.x, fma(_691, _229 * TANGENT.x, (_215 * _207) * _690));
    float _697 = fma(_680, _222 * NORMAL.y, fma(_691, _229 * TANGENT.y, (_215 * _208) * _690));
    float _700 = fma(_680, _222 * NORMAL.z, fma(_691, _229 * TANGENT.z, (_215 * _209) * _690));
    float _704 = inversesqrt(dot(vec3(_694, _697, _700), vec3(_694, _697, _700)));
    float _705 = _704 * _694;
    float _706 = _704 * _697;
    float _707 = _704 * _700;
    float _3615 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _708 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _3626 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _3637 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _3648 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _727 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _777 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _767);
    float _778 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _767);
    float _779 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _767);
    float _783 = inversesqrt(dot(vec3(_777, _778, _779), vec3(_777, _778, _779)));
    float _784 = _777 * _783;
    float _785 = _778 * _783;
    float _786 = _779 * _783;
    float _792 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _793 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _811 = fma(_707, cbSceneParam._m0[5u].z, fma(_706, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _705));
    float _814 = fma(_707, cbSceneParam._m0[6u].z, fma(_706, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _705));
    float _817 = fma(_707, cbSceneParam._m0[7u].z, fma(_706, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _705));
    uint _830 = uint(roundEven(NORMAL.w)) * 13u;
    uint _832 = (_830 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _838 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0)))) * cbInstanceData._m0[_832].x;
    float _839 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)))) * cbInstanceData._m0[_832].y;
    float _840 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) * cbInstanceData._m0[_832].z;
    float _3659 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _3670 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _842 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _3681 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _843 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    vec4 _852 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _792, cbSceneParam._m0[86u].y * _793));
    float _855 = _852.x * TEXCOORD_5.w;
    float _856 = dot(vec3(_705, _706, _707), vec3(_784, _785, _786));
    float _859 = _856 * 2.0;
    float _863 = (_859 * _705) - _784;
    float _864 = (_859 * _706) - _785;
    float _865 = (_859 * _707) - _786;
    float _869 = abs(dot(vec3(_784, _785, _786), vec3(_705, _706, _707)));
    float _3692 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _871 = sqrt(_708);
    float _884 = exp2((_871 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_871 * 3.0));
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1226;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _951 = fma(_924, cbModelParam._m0[26u].z, fma(_920, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _916));
        float _955 = fma(_924, cbModelParam._m0[27u].z, fma(_920, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _916));
        float _959 = fma(_924, cbModelParam._m0[28u].z, fma(_920, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _916));
        float _984 = _916 + _705;
        float _985 = _920 + _706;
        float _986 = _924 + _707;
        float _996 = fma(_986, cbModelParam._m0[26u].z, fma(_985, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _984)) - _951;
        float _997 = fma(_986, cbModelParam._m0[27u].z, fma(_985, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _984)) - _955;
        float _998 = fma(_986, cbModelParam._m0[28u].z, fma(_985, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _984)) - _959;
        float _1002 = inversesqrt(dot(vec3(_996, _997, _998), vec3(_996, _997, _998)));
        float _1015 = ((_1002 * _996) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_951 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1002 * _997) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_955 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1002 * _998) / cbModelParam._m0[34u].z) + ((((((_959 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        float _1054 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1020.x + (-0.5));
        float _1056 = _1054 * (_1020.y + (-0.5));
        float _1057 = _1054 * (_1020.z + (-0.5));
        float _1064 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1027.x + (-0.5));
        float _1066 = _1064 * (_1027.y + (-0.5));
        float _1067 = _1064 * (_1027.z + (-0.5));
        float _1074 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1034.x + (-0.5));
        float _1076 = _1074 * (_1034.y + (-0.5));
        float _1077 = _1074 * (_1034.z + (-0.5));
        float _1084 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1041.x + (-0.5));
        float _1086 = _1084 * (_1041.y + (-0.5));
        float _1087 = _1084 * (_1041.z + (-0.5));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = _1055 * 0.5;
        float _1092 = _1065 * 0.5;
        float _1093 = _1075 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1108 = (dot(vec3(_705, _706, _707), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1118 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1120 = _1119 * 2.0;
        float _1124 = (1.0 - _1119) / (_1119 + 1.0);
        float _3740 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1134 = ((((1.0 - _1125) * (_1120 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_1120 + 1.0))) + _1125) * _1088;
        float _1135 = _1056 * 0.5;
        float _1136 = _1066 * 0.5;
        float _1137 = _1076 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1151 = (dot(vec3(_705, _706, _707), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1160 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _3773 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1162 + 1.0))) + _1167) * _1089;
        float _1177 = _1057 * 0.5;
        float _1178 = _1067 * 0.5;
        float _1179 = _1077 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_705, _706, _707), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3806 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1204 + 1.0))) + _1209) * _1090;
        _1226 = _1057;
        _1228 = _1056;
        _1229 = _1055;
        _1230 = _1067;
        _1231 = _1066;
        _1232 = _1065;
        _1233 = _1077;
        _1234 = _1076;
        _1235 = _1075;
        _1236 = _1090;
        _1237 = _1089;
        _1238 = _1088;
        _1239 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)));
        _1240 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
        _1241 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
    }
    else
    {
        _1226 = _1227;
        _1228 = _1227;
        _1229 = _1227;
        _1230 = _1227;
        _1231 = _1227;
        _1232 = _1227;
        _1233 = _1227;
        _1234 = _1227;
        _1235 = _1227;
        _1236 = _1227;
        _1237 = _1227;
        _1238 = _1227;
        _1239 = 0.0;
        _1240 = 0.0;
        _1241 = 0.0;
    }
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1267 = fma(_924, cbModelParam._m0[30u].z, fma(_920, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _916));
        float _1271 = fma(_924, cbModelParam._m0[31u].z, fma(_920, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _916));
        float _1275 = fma(_924, cbModelParam._m0[32u].z, fma(_920, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _916));
        float _1298 = _916 + _705;
        float _1299 = _920 + _706;
        float _1300 = _924 + _707;
        float _1310 = fma(_1300, cbModelParam._m0[30u].z, fma(_1299, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1298)) - _1267;
        float _1311 = fma(_1300, cbModelParam._m0[31u].z, fma(_1299, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1298)) - _1271;
        float _1312 = fma(_1300, cbModelParam._m0[32u].z, fma(_1299, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1298)) - _1275;
        float _1316 = inversesqrt(dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312)));
        float _1329 = ((_1316 * _1310) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1267 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1330 = ((_1316 * _1311) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1271 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1331 = ((_1316 * _1312) / cbModelParam._m0[35u].z) + ((((((_1275 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        float _1366 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1333.x + (-0.5));
        float _1368 = _1366 * (_1333.y + (-0.5));
        float _1369 = _1366 * (_1333.z + (-0.5));
        float _1376 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1340.x + (-0.5));
        float _1378 = _1376 * (_1340.y + (-0.5));
        float _1379 = _1376 * (_1340.z + (-0.5));
        float _1386 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1347.x + (-0.5));
        float _1388 = _1386 * (_1347.y + (-0.5));
        float _1389 = _1386 * (_1347.z + (-0.5));
        float _1396 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1354.x + (-0.5));
        float _1398 = _1396 * (_1354.y + (-0.5));
        float _1399 = _1396 * (_1354.z + (-0.5));
        float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1401 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1402 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1403 = _1367 * 0.5;
        float _1404 = _1377 * 0.5;
        float _1405 = _1387 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_705, _706, _707), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _3847 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1400 + 9.9999997473787516355514526367188e-06);
        float _3858 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _3869 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * (_1430 + 1.0))) + _1435) * _1400;
        float _1445 = _1368 * 0.5;
        float _1446 = _1378 * 0.5;
        float _1447 = _1388 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_705, _706, _707), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1401 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _3902 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1472 + 1.0))) + _1477) * _1401;
        float _1487 = _1369 * 0.5;
        float _1488 = _1379 * 0.5;
        float _1489 = _1389 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1503 = (dot(vec3(_705, _706, _707), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1512 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1402 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _3935 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1514 + 1.0))) + _1519) * _1402;
        _1536 = _1369;
        _1537 = _1368;
        _1538 = _1367;
        _1539 = _1379;
        _1540 = _1378;
        _1541 = _1377;
        _1542 = _1389;
        _1543 = _1388;
        _1544 = _1387;
        _1545 = _1402;
        _1546 = _1401;
        _1547 = _1400;
        _1548 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
        _1549 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
        _1550 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
    }
    else
    {
        _1536 = _1227;
        _1537 = _1227;
        _1538 = _1227;
        _1539 = _1227;
        _1540 = _1227;
        _1541 = _1227;
        _1542 = _1227;
        _1543 = _1227;
        _1544 = _1227;
        _1545 = _1227;
        _1546 = _1227;
        _1547 = _1227;
        _1548 = 0.0;
        _1549 = 0.0;
        _1550 = 0.0;
    }
    float _1560 = (cbModelParam._m0[1u].x * (_1548 - _1239)) + _1239;
    float _1561 = (cbModelParam._m0[1u].x * (_1549 - _1240)) + _1240;
    float _1562 = (cbModelParam._m0[1u].x * (_1550 - _1241)) + _1241;
    float _1583 = fma(_1562, cbSceneParam._m0[89u].z, fma(_1561, cbSceneParam._m0[89u].y, _1560 * cbSceneParam._m0[89u].x));
    float _1586 = fma(_1562, cbSceneParam._m0[90u].z, fma(_1561, cbSceneParam._m0[90u].y, _1560 * cbSceneParam._m0[90u].x));
    float _1589 = fma(_1562, cbSceneParam._m0[91u].z, fma(_1561, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1560));
    float _1604 = _863 * 0.5;
    float _1605 = _864 * 0.5;
    float _1606 = _865 * 0.5;
    float _1607 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1538, _1541, _1544, _1547));
    float _1610 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1537, _1540, _1543, _1546));
    float _1613 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1536, _1539, _1542, _1545));
    float _1647;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1620 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1226, _1230, _1233, _1236));
        float _1624 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1228, _1231, _1234, _1237));
        float _1628 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1229, _1232, _1235, _1238));
        float _1635 = dot(vec4(cbModelParam._m0[39u]), vec4(_1604, _1605, _1606, 1.0));
        _1647 = dot(vec3(isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1635) ? 0.0 : (isnan(0.0) ? _1635 : max(0.0, _1635))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1647 = 1.0;
    }
    float _1658;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1649 = dot(vec4(cbModelParam._m0[40u]), vec4(_1604, _1605, _1606, 1.0));
        _1658 = dot(vec3(isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1649) ? 0.0 : (isnan(0.0) ? _1649 : max(0.0, _1649))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1658 = 1.0;
    }
    float _1662 = (_1658 * cbModelParam._m0[1u].x) + (_1647 * (1.0 - cbModelParam._m0[1u].x));
    float _1672 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _708);
    float _1673 = isnan(_1672) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1672 : min(cbModelParam._m0[25u].z, _1672));
    float _1753;
    float _1755;
    float _1757;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1720 = fma(_924, cbModelParam._m0[13u].z, fma(_920, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _916)) + cbModelParam._m0[13u].w;
        float _1724 = fma(_924, cbModelParam._m0[14u].z, fma(_920, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _916)) + cbModelParam._m0[14u].w;
        float _1728 = fma(_924, cbModelParam._m0[15u].z, fma(_920, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _916)) + cbModelParam._m0[15u].w;
        float _1731 = fma(_865, cbModelParam._m0[13u].z, fma(_864, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _863));
        float _1734 = fma(_865, cbModelParam._m0[14u].z, fma(_864, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _863));
        float _1737 = fma(_865, cbModelParam._m0[15u].z, fma(_864, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _863));
        float _1765;
        if (_1731 > 0.0)
        {
            _1765 = abs((1.0 - _1720) / _1731);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1720 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1765 = frontier_phi_14_12_ladder;
        }
        float _1989;
        if (_1734 > 0.0)
        {
            _1989 = abs((1.0 - _1724) / _1734);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1724 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1989 = frontier_phi_23_19_ladder;
        }
        float _2235;
        if (_1737 > 0.0)
        {
            _2235 = abs((1.0 - _1728) / _1737);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1728 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2235 = frontier_phi_35_30_ladder;
        }
        float _2237 = isnan(_1989) ? _1765 : (isnan(_1765) ? _1989 : min(_1765, _1989));
        float _2238 = isnan(_2235) ? _2237 : (isnan(_2237) ? _2235 : min(_2237, _2235));
        float _2242 = (_2238 * _1731) + _1720;
        float _2243 = (_2238 * _1734) + _1724;
        float _2244 = (_2238 * _1737) + _1728;
        float _2245 = _2238 * 9.9999997473787516355514526367188e-05;
        float _2247 = (-1.0) - _2245;
        float _2249 = _2245 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2244 > _2249) || ((_2244 < _2247) || ((_2243 > _2249) || ((_2243 < _2247) || ((_2242 < _2247) || (_2242 > _2249))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2368 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2244, cbModelParam._m0[9u].z, fma(_2243, cbModelParam._m0[9u].y, _2242 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2244, cbModelParam._m0[10u].z, fma(_2243, cbModelParam._m0[10u].y, _2242 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2244, cbModelParam._m0[11u].z, fma(_2243, cbModelParam._m0[11u].y, _2242 * cbModelParam._m0[11u].x))), _1673);
            frontier_phi_13_35_ladder = _2368.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2368.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2368.x * cbModelParam._m0[1u].y;
        }
        _1753 = frontier_phi_13_35_ladder_2;
        _1755 = frontier_phi_13_35_ladder_1;
        _1757 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1741 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_863, _864, _865), _1673);
        _1753 = _1741.x * cbModelParam._m0[1u].y;
        _1755 = _1741.y * cbModelParam._m0[1u].y;
        _1757 = _1741.z * cbModelParam._m0[1u].y;
    }
    float _1761 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _708);
    float _1762 = isnan(_1761) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1761 : min(cbModelParam._m0[25u].w, _1761));
    float _1853;
    float _1855;
    float _1857;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1817 = fma(_924, cbModelParam._m0[21u].z, fma(_920, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _916)) + cbModelParam._m0[21u].w;
        float _1821 = fma(_924, cbModelParam._m0[22u].z, fma(_920, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _916)) + cbModelParam._m0[22u].w;
        float _1825 = fma(_924, cbModelParam._m0[23u].z, fma(_920, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _916)) + cbModelParam._m0[23u].w;
        float _1828 = fma(_865, cbModelParam._m0[21u].z, fma(_864, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _863));
        float _1831 = fma(_865, cbModelParam._m0[22u].z, fma(_864, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _863));
        float _1834 = fma(_865, cbModelParam._m0[23u].z, fma(_864, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _863));
        float _1994;
        if (_1828 > 0.0)
        {
            _1994 = abs((1.0 - _1817) / _1828);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1817 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1994 = frontier_phi_25_21_ladder;
        }
        float _2262;
        if (_1831 > 0.0)
        {
            _2262 = abs((1.0 - _1821) / _1831);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1821 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2262 = frontier_phi_37_32_ladder;
        }
        float _2467;
        if (_1834 > 0.0)
        {
            _2467 = abs((1.0 - _1825) / _1834);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1825 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2467 = frontier_phi_46_43_ladder;
        }
        float _2469 = isnan(_2262) ? _1994 : (isnan(_1994) ? _2262 : min(_1994, _2262));
        float _2470 = isnan(_2467) ? _2469 : (isnan(_2469) ? _2467 : min(_2469, _2467));
        float _2474 = (_2470 * _1828) + _1817;
        float _2475 = (_2470 * _1831) + _1821;
        float _2476 = (_2470 * _1834) + _1825;
        float _2477 = _2470 * 9.9999997473787516355514526367188e-05;
        float _2478 = (-1.0) - _2477;
        float _2480 = _2477 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2476 > _2480) || ((_2476 < _2478) || ((_2475 > _2480) || ((_2475 < _2478) || ((_2474 < _2478) || (_2474 > _2480))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2675 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2476, cbModelParam._m0[17u].z, fma(_2475, cbModelParam._m0[17u].y, _2474 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2476, cbModelParam._m0[18u].z, fma(_2475, cbModelParam._m0[18u].y, _2474 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2476, cbModelParam._m0[19u].z, fma(_2475, cbModelParam._m0[19u].y, _2474 * cbModelParam._m0[19u].x))), _1762);
            frontier_phi_22_46_ladder = _2675.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2675.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2675.x * cbModelParam._m0[1u].z;
        }
        _1853 = frontier_phi_22_46_ladder_2;
        _1855 = frontier_phi_22_46_ladder_1;
        _1857 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1837 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_863, _864, _865), _1762);
        _1853 = _1837.x * cbModelParam._m0[1u].z;
        _1855 = _1837.y * cbModelParam._m0[1u].z;
        _1857 = _1837.z * cbModelParam._m0[1u].z;
    }
    float _1869 = ((((1.0 - _884) * ((_871 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_884 * _871)) * _855;
    float _1870 = _1869 * ((cbModelParam._m0[1u].w * (_1853 - _1753)) + _1753);
    float _1871 = _1869 * ((cbModelParam._m0[1u].w * (_1855 - _1755)) + _1755);
    float _1872 = _1869 * ((cbModelParam._m0[1u].w * (_1857 - _1757)) + _1757);
    float _1875 = fma(_1872, cbSceneParam._m0[89u].z, fma(_1871, cbSceneParam._m0[89u].y, _1870 * cbSceneParam._m0[89u].x));
    float _1878 = fma(_1872, cbSceneParam._m0[90u].z, fma(_1871, cbSceneParam._m0[90u].y, _1870 * cbSceneParam._m0[90u].x));
    float _1881 = fma(_1872, cbSceneParam._m0[91u].z, fma(_1871, cbSceneParam._m0[91u].y, _1870 * cbSceneParam._m0[91u].x));
    vec4 _1889 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_792, _793));
    float _1891 = _1889.w;
    float _1903 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1891);
    float _1904 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1891);
    float _1905 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1891);
    uvec4 _1909 = floatBitsToUint(cbInstanceData._m0[_830 + 5u]);
    uint _1911 = _1909.x * 14u;
    uint _1912 = _1911 + 13u;
    float _1919 = _855 + (-1.0);
    float _1924 = (cbLight._m0[_1912].x * _1919) + 1.0;
    float _1925 = (cbLight._m0[_1912].y * _1919) + 1.0;
    float _1926 = (cbLight._m0[_1912].z * _1919) + 1.0;
    float _1927 = (cbLight._m0[_1912].w * _1919) + 1.0;
    uint _1928 = _1911 + 5u;
    float _1934 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
    uint _1938 = _1911 + 4u;
    float _1948 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
    uint _1952 = _1911 | 1u;
    float _1963 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_705, _706, _707));
    float _1966 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_705, _706, _707));
    float _4071 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _4082 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1971 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * 0.3183098733425140380859375;
    float _1973 = (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * 0.3183098733425140380859375;
    float _1980 = ((cbLight._m0[_1928].x * _1934) * _1973) + (((cbLight._m0[_1938].x * _1903) * _1948) * _1971);
    float _1981 = ((_1934 * cbLight._m0[_1928].y) * _1973) + (((cbLight._m0[_1938].y * _1904) * _1948) * _1971);
    float _1982 = ((_1934 * cbLight._m0[_1928].z) * _1973) + (((cbLight._m0[_1938].z * _1905) * _1948) * _1971);
    uvec4 _1986 = floatBitsToUint(cbLight._m0[_1911 + 12u]);
    bool _1988 = _1986.x == 0u;
    float _1999;
    float _2001;
    float _2003;
    if (_1988)
    {
        _1999 = _1980;
        _2001 = _1981;
        _2003 = _1982;
    }
    else
    {
        uint _2007 = _1911 + 6u;
        float _2023 = (dot(vec3(cbLight._m0[_1911 + 2u].xyz), vec3(_705, _706, _707)) * 0.5) + 0.5;
        float _2024 = _2023 * _2023;
        float _4093 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2025 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _2026 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
        _1999 = (((cbLight._m0[_2007].x * 0.3183098733425140380859375) * _2025) * _2026) + _1980;
        _2001 = (((cbLight._m0[_2007].y * 0.3183098733425140380859375) * _2025) * _2026) + _1981;
        _2003 = (((cbLight._m0[_2007].z * 0.3183098733425140380859375) * _2025) * _2026) + _1982;
    }
    bool _2006 = _1986.y == 0u;
    float _2044;
    float _2046;
    float _2048;
    if (_2006)
    {
        _2044 = _1999;
        _2046 = _2001;
        _2048 = _2003;
    }
    else
    {
        uint _2206 = _1911 + 7u;
        float _2222 = (dot(vec3(cbLight._m0[_1911 + 3u].xyz), vec3(_705, _706, _707)) * 0.5) + 0.5;
        float _2223 = _2222 * _2222;
        float _4109 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2224 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _2225 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
        _2044 = (((cbLight._m0[_2206].x * 0.3183098733425140380859375) * _2224) * _2225) + _1999;
        _2046 = (((cbLight._m0[_2206].y * 0.3183098733425140380859375) * _2224) * _2225) + _2001;
        _2048 = (((cbLight._m0[_2206].z * 0.3183098733425140380859375) * _2224) * _2225) + _2003;
    }
    uint _2051 = _1911 + 8u;
    float _2064 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1911].w)) * _708) * 0.949999988079071044921875);
    float _2065 = _2064 * _2064;
    float _2066 = cbLight._m0[_1911].x + _784;
    float _2067 = cbLight._m0[_1911].y + _785;
    float _2068 = cbLight._m0[_1911].z + _786;
    float _2072 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
    float _2073 = _2072 * _2066;
    float _2074 = _2072 * _2067;
    float _2075 = _2072 * _2068;
    float _2076 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_1911].xyz));
    float _4125 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _4136 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _2080 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _2081 = dot(vec3(_705, _706, _707), vec3(_2073, _2074, _2075));
    float _4147 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2084 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _2085 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_2073, _2074, _2075));
    float _4158 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2089 = _2065 * _2065;
    float _2093 = ((_2084 * _2084) * (_2089 + (-1.0))) + 1.0;
    float _2104 = (exp2(log2(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2105 = 1.0 - _2065;
    float _2116 = (0.5 / (((_2080 * ((_2079 * _2105) + _2065)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2105) + _2065) * _2079))) * _2079;
    float _4169 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2118 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_2089 / ((_2093 * _2093) * 3.141590118408203125));
    uint _2132 = _1911 + 9u;
    float _2143 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1952].w)) * _708) * 0.949999988079071044921875);
    float _2144 = _2143 * _2143;
    float _2145 = cbLight._m0[_1952].x + _784;
    float _2146 = cbLight._m0[_1952].y + _785;
    float _2147 = cbLight._m0[_1952].z + _786;
    float _2151 = inversesqrt(dot(vec3(_2145, _2146, _2147), vec3(_2145, _2146, _2147)));
    float _2152 = _2151 * _2145;
    float _2153 = _2151 * _2146;
    float _2154 = _2151 * _2147;
    float _2155 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_1952].xyz));
    float _4180 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2158 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _2159 = dot(vec3(_705, _706, _707), vec3(_2152, _2153, _2154));
    float _4191 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2162 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _2163 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_2152, _2153, _2154));
    float _4202 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2167 = _2144 * _2144;
    float _2171 = ((_2162 * _2162) * (_2167 + (-1.0))) + 1.0;
    float _2180 = (exp2(log2(1.0 - (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2181 = 1.0 - _2144;
    float _2191 = (0.5 / (((_2080 * ((_2158 * _2181) + _2144)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2181) + _2144) * _2158))) * _2158;
    float _4213 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2193 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2167 / ((_2171 * _2171) * 3.141590118408203125));
    float _2203 = (((_2180 * cbLight._m0[_2132].x) * _2193) * _1934) + ((((cbLight._m0[_2051].x * _1903) * _2104) * _2118) * _1948);
    float _2204 = (((_2180 * cbLight._m0[_2132].y) * _2193) * _1934) + ((((cbLight._m0[_2051].y * _1904) * _2104) * _2118) * _1948);
    float _2205 = (((_2180 * cbLight._m0[_2132].z) * _2193) * _1934) + ((((cbLight._m0[_2051].z * _1905) * _2104) * _2118) * _1948);
    float _2267;
    float _2269;
    float _2271;
    if (_1988)
    {
        _2267 = _2203;
        _2269 = _2204;
        _2271 = _2205;
    }
    else
    {
        uint _2273 = _1911 + 2u;
        uint _2277 = _1911 + 10u;
        float _2291 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2273].w)) * _708) * 0.949999988079071044921875);
        float _2292 = _2291 * _2291;
        float _2293 = cbLight._m0[_2273].x + _784;
        float _2294 = cbLight._m0[_2273].y + _785;
        float _2295 = cbLight._m0[_2273].z + _786;
        float _2299 = inversesqrt(dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295)));
        float _2300 = _2299 * _2293;
        float _2301 = _2299 * _2294;
        float _2302 = _2299 * _2295;
        float _2303 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_2273].xyz));
        float _4224 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2306 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2307 = dot(vec3(_705, _706, _707), vec3(_2300, _2301, _2302));
        float _4235 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2310 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2311 = dot(vec3(cbLight._m0[_2273].xyz), vec3(_2300, _2301, _2302));
        float _4246 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2315 = _2292 * _2292;
        float _2319 = ((_2310 * _2310) * (_2315 + (-1.0))) + 1.0;
        float _2328 = (exp2(log2(1.0 - (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2329 = 1.0 - _2292;
        float _2339 = (0.5 / (((_2080 * ((_2306 * _2329) + _2292)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2329) + _2292) * _2306))) * _2306;
        float _4257 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2341 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2315 / ((_2319 * _2319) * 3.141590118408203125));
        float _2342 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
        _2267 = (((_2328 * cbLight._m0[_2277].x) * _2341) * _2342) + _2203;
        _2269 = (((_2328 * cbLight._m0[_2277].y) * _2341) * _2342) + _2204;
        _2271 = (((_2328 * cbLight._m0[_2277].z) * _2341) * _2342) + _2205;
    }
    float _2377;
    float _2379;
    float _2381;
    if (_2006)
    {
        _2377 = _2267;
        _2379 = _2269;
        _2381 = _2271;
    }
    else
    {
        uint _2388 = _1911 + 3u;
        uint _2392 = _1911 + 11u;
        float _2406 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2388].w)) * _708) * 0.949999988079071044921875);
        float _2407 = _2406 * _2406;
        float _2408 = cbLight._m0[_2388].x + _784;
        float _2409 = cbLight._m0[_2388].y + _785;
        float _2410 = cbLight._m0[_2388].z + _786;
        float _2414 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
        float _2415 = _2414 * _2408;
        float _2416 = _2414 * _2409;
        float _2417 = _2414 * _2410;
        float _2418 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_2388].xyz));
        float _4273 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2421 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2422 = dot(vec3(_705, _706, _707), vec3(_2415, _2416, _2417));
        float _4284 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2425 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _2426 = dot(vec3(cbLight._m0[_2388].xyz), vec3(_2415, _2416, _2417));
        float _4295 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2430 = _2407 * _2407;
        float _2434 = ((_2425 * _2425) * (_2430 + (-1.0))) + 1.0;
        float _2443 = (exp2(log2(1.0 - (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2444 = 1.0 - _2407;
        float _2454 = (0.5 / (((_2080 * ((_2421 * _2444) + _2407)) + 9.9999999392252902907785028219223e-09) + (((_2080 * _2444) + _2407) * _2421))) * _2421;
        float _4306 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2456 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2430 / ((_2434 * _2434) * 3.141590118408203125));
        float _2457 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
        _2377 = (((_2443 * cbLight._m0[_2392].x) * _2456) * _2457) + _2267;
        _2379 = (((_2443 * cbLight._m0[_2392].y) * _2456) * _2457) + _2269;
        _2381 = (((_2443 * cbLight._m0[_2392].z) * _2456) * _2457) + _2271;
    }
    float _2592;
    float _2594;
    float _2596;
    float _2598;
    float _2600;
    float _2602;
    if (_1909.y == 0u)
    {
        float _2532 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2533 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2532;
        float _2534 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2532;
        float _2535 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2532;
        uvec4 _2547 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2548 = _2547.x;
        uint _2559 = uint((float(_2547.y) * floor(float(uint(cbSceneParam._m0[85u].y * _793) / _2548))) + floor(float(uint(cbSceneParam._m0[85u].x * _792) / _2548)));
        float _2569 = (log2(_2535 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2570 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        uint _2573 = uint(isnan(14.0) ? _2570 : (isnan(_2570) ? 14.0 : min(_2570, 14.0)));
        uvec4 _2578 = texelFetch(g_lightClusterGridBuffer, int(((_2573 << 2u) + (_2559 << 6u)) >> 2u));
        uint _2579 = _2578.x;
        uint _2580 = _2547.z;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        if (((((1u << ((_2580 >> 4u) & 15u)) + 4294967295u) & _2579) == 0u) || ((_2580 & 240u) == 0u))
        {
            _2680 = 0.0;
            _2682 = 0.0;
            _2684 = 0.0;
            _2686 = 0.0;
            _2688 = 0.0;
            _2690 = 0.0;
        }
        else
        {
            float _2681;
            float _2683;
            float _2685;
            float _2687;
            float _2689;
            float _2691;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            uint _2831 = 0u;
            uint _2840;
            bool _2841;
            for (;;)
            {
                _2840 = texelFetch(g_lightClassification, int((((_2573 << 5u) + (_2559 << 9u)) + (_2831 << 2u)) >> 2u)).x;
                _2841 = _2840 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2841)
                {
                    frontier_phi_61_pred = _2825;
                    frontier_phi_61_pred_1 = _2830;
                    frontier_phi_61_pred_2 = _2829;
                    frontier_phi_61_pred_3 = _2828;
                    frontier_phi_61_pred_4 = _2827;
                    frontier_phi_61_pred_5 = _2826;
                }
                else
                {
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    uint _2955;
                    _2949 = _2825;
                    _2950 = _2826;
                    _2951 = _2827;
                    _2952 = _2828;
                    _2953 = _2829;
                    _2954 = _2830;
                    _2955 = _2840;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    for (;;)
                    {
                        uint _2959 = uint(findLSB(_2955)) + (_2831 << 5u);
                        uint _2956 = (_2955 + 4294967295u) & _2955;
                        uint _2961 = _2959 * 48u;
                        vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2961)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 3u)).x));
                        uint _2981 = (_2959 * 48u) + 4u;
                        vec4 _2994 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2981)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 3u)).x));
                        uint _3000 = (_2959 * 48u) + 8u;
                        vec3 _3011 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3000)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 2u)).x));
                        float _3015 = _2975.x - _2533;
                        float _3016 = _2975.y - _2534;
                        float _3017 = _2975.z - _2535;
                        float _3018 = dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017));
                        float _3021 = inversesqrt(_3018);
                        float _3022 = _3021 * _3015;
                        float _3023 = _3021 * _3016;
                        float _3024 = _3021 * _3017;
                        float _3025 = dot(vec3(_811, _814, _817), vec3(_3022, _3023, _3024));
                        float _3030 = 1.0 - (_3018 * _2975.w);
                        float _4332 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3031 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                        float _3032 = sqrt(_3018) * _2994.w;
                        float _3035 = 1.39999997615814208984375 / (_3032 + 1.39999997615814208984375);
                        float _3036 = _3035 * _3035;
                        float _3039 = ((1.0 - _3036) * _3025) + _3036;
                        float _3042 = _3032 * _3032;
                        float _3046 = ((isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0))) * _3031) / ((_3042 * 0.699999988079071044921875) + 1.0);
                        float _3050 = (-0.0) - _2533;
                        float _3051 = (-0.0) - _2534;
                        float _3052 = (-0.0) - _2535;
                        float _3056 = inversesqrt(dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052)));
                        float _3057 = _3056 * _3050;
                        float _3058 = _3056 * _3051;
                        float _3059 = _3056 * _3052;
                        float _3067 = exp2(log2(1.0 / ((_3042 * 3.5) + 5.0)) * 0.25);
                        float _3068 = 1.0 - _871;
                        float _3075 = sqrt(1.0 - ((1.0 - (_3068 * _3068)) * (1.0 - (_3067 * _3067))));
                        float _3076 = _3075 * _3075;
                        float _3077 = _3076 * _3076;
                        float _3078 = _3057 + _3022;
                        float _3079 = _3058 + _3023;
                        float _3080 = _3059 + _3024;
                        float _3084 = inversesqrt(dot(vec3(_3078, _3079, _3080), vec3(_3078, _3079, _3080)));
                        float _3088 = dot(vec3(_811, _814, _817), vec3(_3057, _3058, _3059));
                        float _4348 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3091 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _3092 = dot(vec3(_811, _814, _817), vec3(_3084 * _3078, _3084 * _3079, _3084 * _3080));
                        float _4359 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3095 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                        float _3099 = ((_3095 * _3095) * (_3077 + (-1.0))) + 1.0;
                        float _3100 = _3035 * _3076;
                        float _3101 = _3100 * _3100;
                        float _3104 = ((1.0 - _3101) * _3025) + _3101;
                        float _4370 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3105 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                        float _3106 = 1.0 - _3076;
                        float _3116 = (0.5 / (((_3105 * ((_3091 * _3106) + _3076)) + 9.9999999392252902907785028219223e-09) + (((_3105 * _3106) + _3076) * _3091))) * _3105;
                        float _4381 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3127 = (((_3077 * 3.1415927410125732421875) * (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) / ((_3099 * _3099) * ((_3042 * 2.1991131305694580078125) + 3.141590118408203125))) * _3031;
                        _2884 = (_3046 * _2994.x) + _2952;
                        _2885 = (_3046 * _2994.y) + _2953;
                        _2886 = (_3046 * _2994.z) + _2954;
                        _2881 = (_3127 * _3011.x) + _2949;
                        _2882 = (_3127 * _3011.y) + _2950;
                        _2883 = (_3127 * _3011.z) + _2951;
                        if (_2956 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2949 = _2881;
                            _2950 = _2882;
                            _2951 = _2883;
                            _2952 = _2884;
                            _2953 = _2885;
                            _2954 = _2886;
                            _2955 = _2956;
                        }
                    }
                    frontier_phi_61_pred = _2881;
                    frontier_phi_61_pred_1 = _2886;
                    frontier_phi_61_pred_2 = _2885;
                    frontier_phi_61_pred_3 = _2884;
                    frontier_phi_61_pred_4 = _2883;
                    frontier_phi_61_pred_5 = _2882;
                }
                _2681 = frontier_phi_61_pred;
                _2691 = frontier_phi_61_pred_1;
                _2689 = frontier_phi_61_pred_2;
                _2687 = frontier_phi_61_pred_3;
                _2685 = frontier_phi_61_pred_4;
                _2683 = frontier_phi_61_pred_5;
                uint _2832 = _2831 + 1u;
                if (_2832 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2825 = _2681;
                    _2826 = _2683;
                    _2827 = _2685;
                    _2828 = _2687;
                    _2829 = _2689;
                    _2830 = _2691;
                    _2831 = _2832;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2680 = _2681;
            _2682 = _2683;
            _2684 = _2685;
            _2686 = _2687;
            _2688 = _2689;
            _2690 = _2691;
        }
        uvec4 _2694 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2695 = _2694.z;
        uint _2697 = (_2695 >> 8u) & 15u;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        if (((4294967295u << _2697) & _2579) == 0u)
        {
            _2793 = _2680;
            _2795 = _2682;
            _2797 = _2684;
            _2799 = _2686;
            _2801 = _2688;
            _2803 = _2690;
        }
        else
        {
            float _2818 = inversesqrt(dot(vec3(_2533, _2534, _2535), vec3(_2533, _2534, _2535)));
            float _2819 = _2818 * _2533;
            float _2820 = _2818 * _2534;
            float _2821 = _2818 * _2535;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2697 < ((_2695 >> 12u) & 15u))
            {
                float _2794;
                float _2796;
                float _2798;
                float _2800;
                float _2802;
                float _2804;
                float _2932 = _2680;
                float _2933 = _2682;
                float _2934 = _2684;
                float _2935 = _2686;
                float _2936 = _2688;
                float _2937 = _2690;
                uint _2938 = _2697;
                uint _2947;
                bool _2948;
                for (;;)
                {
                    _2947 = texelFetch(g_lightClassification, int((((_2573 << 5u) + (_2559 << 9u)) + (_2938 << 2u)) >> 2u)).x;
                    _2948 = _2947 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2948)
                    {
                        frontier_phi_67_pred = _2935;
                        frontier_phi_67_pred_1 = _2936;
                        frontier_phi_67_pred_2 = _2937;
                        frontier_phi_67_pred_3 = _2934;
                        frontier_phi_67_pred_4 = _2933;
                        frontier_phi_67_pred_5 = _2932;
                    }
                    else
                    {
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3145 = _2932;
                        float _3146 = _2933;
                        float _3147 = _2934;
                        float _3148 = _2935;
                        float _3149 = _2936;
                        float _3150 = _2937;
                        uint _3151 = _2947;
                        uint _3152;
                        vec4 _3177;
                        float _3178;
                        vec4 _3193;
                        vec3 _3205;
                        vec4 _3220;
                        vec4 _3235;
                        float _3282;
                        bool _3283;
                        for (;;)
                        {
                            uint _3162 = ((_2938 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3151));
                            _3152 = (_3151 + 4294967295u) & _3151;
                            uint _3164 = _3162 * 40u;
                            _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            _3178 = _3177.w;
                            uint _3180 = (_3162 * 40u) + 4u;
                            _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            uint _3195 = (_3162 * 40u) + 8u;
                            _3205 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x));
                            uint _3207 = (_3162 * 40u) + 16u;
                            _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            uint _3222 = (_3162 * 40u) + 20u;
                            _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            uint _3238 = (_3162 * 40u) + 24u;
                            vec4 _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3257 = (_3162 * 40u) + 28u;
                            vec4 _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            _3282 = fma(_2535, _3270.z, fma(_2534, _3270.y, _3270.x * _2533)) + _3270.w;
                            _3283 = !((fma(_2535, _3251.z, fma(_2534, _3251.y, _3251.x * _2533)) + _3251.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3283)
                            {
                                float _3310 = _3177.x - _2533;
                                float _3311 = _3177.y - _2534;
                                float _3312 = _3177.z - _2535;
                                float _3313 = dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312));
                                float _3316 = inversesqrt(_3313);
                                float _3317 = _3316 * _3310;
                                float _3318 = _3316 * _3311;
                                float _3319 = _3316 * _3312;
                                float _3323 = 1.0 - (_3313 / (_3178 * _3178));
                                float _4392 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3324 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                                float _3328 = sqrt(_3313) * _3193.w;
                                float _3330 = 1.39999997615814208984375 / (_3328 + 1.39999997615814208984375);
                                float _3331 = _3330 * _3330;
                                float _3334 = ((1.0 - _3331) * dot(vec3(_3317, _3318, _3319), vec3(_811, _814, _817))) + _3331;
                                float _3337 = _3328 * _3328;
                                float _3341 = (fma(_2535, _3220.z, fma(_2534, _3220.y, _3220.x * _2533)) + _3220.w) / _3282;
                                float _3342 = (fma(_2535, _3235.z, fma(_2534, _3235.y, _3235.x * _2533)) + _3235.w) / _3282;
                                float _3346 = 1.0 - dot(vec2(_3341, _3342), vec2(_3341, _3342));
                                float _4408 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3347 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3348 = _3347 * (((isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0))) * _3324) / ((_3337 * 0.699999988079071044921875) + 1.0));
                                float _3360 = exp2(log2(1.0 / ((_3337 * 3.5) + 5.0)) * 0.25);
                                float _3361 = 1.0 - _871;
                                float _3368 = sqrt(1.0 - ((1.0 - (_3361 * _3361)) * (1.0 - (_3360 * _3360))));
                                float _3369 = _3368 * _3368;
                                float _3370 = _3369 * _3369;
                                float _3371 = _3317 - _2819;
                                float _3372 = _3318 - _2820;
                                float _3373 = _3319 - _2821;
                                float _3377 = inversesqrt(dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373)));
                                float _3381 = dot(vec3(_811, _814, _817), vec3((-0.0) - _2819, (-0.0) - _2820, (-0.0) - _2821));
                                float _4419 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3384 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3385 = dot(vec3(_811, _814, _817), vec3(_3377 * _3371, _3377 * _3372, _3377 * _3373));
                                float _4430 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3388 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3392 = ((_3388 * _3388) * (_3370 + (-1.0))) + 1.0;
                                float _3393 = _3330 * _3369;
                                float _3394 = _3393 * _3393;
                                float _3400 = ((1.0 - _3394) * dot(vec3(_811, _814, _817), vec3(_3317, _3318, _3319))) + _3394;
                                float _4441 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3401 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                                float _3402 = 1.0 - _3369;
                                float _3412 = (0.5 / (((_3401 * ((_3384 * _3402) + _3369)) + 9.9999999392252902907785028219223e-09) + (((_3401 * _3402) + _3369) * _3384))) * _3401;
                                float _4452 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3422 = (_3347 * _3324) * (((_3370 * 3.1415927410125732421875) * (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0)))) / ((_3392 * _3392) * ((_3337 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3422 * _3205.x;
                                frontier_phi_73_pred_1 = _3422 * _3205.y;
                                frontier_phi_73_pred_2 = _3348 * _3193.z;
                                frontier_phi_73_pred_3 = _3348 * _3193.y;
                                frontier_phi_73_pred_4 = _3348 * _3193.x;
                                frontier_phi_73_pred_5 = _3422 * _3205.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3426 = frontier_phi_73_pred;
                            _3427 = frontier_phi_73_pred_1;
                            _3431 = frontier_phi_73_pred_2;
                            _3430 = frontier_phi_73_pred_3;
                            _3429 = frontier_phi_73_pred_4;
                            _3428 = frontier_phi_73_pred_5;
                            _3135 = _3429 + _3148;
                            _3136 = _3430 + _3149;
                            _3137 = _3431 + _3150;
                            _3132 = _3426 + _3145;
                            _3133 = _3427 + _3146;
                            _3134 = _3428 + _3147;
                            if (_3152 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3145 = _3132;
                                _3146 = _3133;
                                _3147 = _3134;
                                _3148 = _3135;
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3152;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3135;
                        frontier_phi_67_pred_1 = _3136;
                        frontier_phi_67_pred_2 = _3137;
                        frontier_phi_67_pred_3 = _3134;
                        frontier_phi_67_pred_4 = _3133;
                        frontier_phi_67_pred_5 = _3132;
                    }
                    _2800 = frontier_phi_67_pred;
                    _2802 = frontier_phi_67_pred_1;
                    _2804 = frontier_phi_67_pred_2;
                    _2798 = frontier_phi_67_pred_3;
                    _2796 = frontier_phi_67_pred_4;
                    _2794 = frontier_phi_67_pred_5;
                    uint _2939 = _2938 + 1u;
                    if (_2939 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2932 = _2794;
                        _2933 = _2796;
                        _2934 = _2798;
                        _2935 = _2800;
                        _2936 = _2802;
                        _2937 = _2804;
                        _2938 = _2939;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2802;
                frontier_phi_55_56_ladder_1 = _2804;
                frontier_phi_55_56_ladder_2 = _2800;
                frontier_phi_55_56_ladder_3 = _2798;
                frontier_phi_55_56_ladder_4 = _2796;
                frontier_phi_55_56_ladder_5 = _2794;
            }
            else
            {
                frontier_phi_55_56_ladder = _2688;
                frontier_phi_55_56_ladder_1 = _2690;
                frontier_phi_55_56_ladder_2 = _2686;
                frontier_phi_55_56_ladder_3 = _2684;
                frontier_phi_55_56_ladder_4 = _2682;
                frontier_phi_55_56_ladder_5 = _2680;
            }
            _2793 = frontier_phi_55_56_ladder_5;
            _2795 = frontier_phi_55_56_ladder_4;
            _2797 = frontier_phi_55_56_ladder_3;
            _2799 = frontier_phi_55_56_ladder_2;
            _2801 = frontier_phi_55_56_ladder;
            _2803 = frontier_phi_55_56_ladder_1;
        }
        float _2808 = isnan(1.0) ? _855 : (isnan(_855) ? 1.0 : min(_855, 1.0));
        _2592 = (_2808 * _2799) + _2044;
        _2594 = (_2808 * _2801) + _2046;
        _2596 = (_2808 * _2803) + _2048;
        _2598 = ((_2793 * 0.039999999105930328369140625) * _2808) + _2377;
        _2600 = ((_2795 * 0.039999999105930328369140625) * _2808) + _2379;
        _2602 = ((_2797 * 0.039999999105930328369140625) * _2808) + _2381;
    }
    else
    {
        _2592 = _2044;
        _2594 = _2046;
        _2596 = _2048;
        _2598 = _2377;
        _2600 = _2379;
        _2602 = _2381;
    }
    float _4468 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4479 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4490 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    uint _2622 = _830 + 6u;
    float _2630 = _792 / cbSceneParam._m0[86u].x;
    float _2631 = _793 / cbSceneParam._m0[86u].y;
    vec4 _2645 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2630, _2631, (log2((isnan(cbSceneParam._m0[77u].w) ? _727 : (isnan(_727) ? cbSceneParam._m0[77u].w : min(_727, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2647 = _2645.x;
    float _2648 = _2645.y;
    float _2649 = _2645.z;
    float _2650 = _2645.w;
    float _2743;
    float _2745;
    float _2747;
    float _2749;
    if (_727 > cbSceneParam._m0[78u].w)
    {
        float _2705 = isnan(_727) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _727 : min(cbSceneParam._m0[80u].w, _727));
        float _2706 = _2705 / _727;
        float _2717 = _2706 * _777;
        float _2718 = _778 * _2706;
        float _2719 = (-0.0) - _2718;
        float _2721 = _2706 * _779;
        float _2723 = (cbSceneParam._m0[77u].w * _2719) / _2705;
        float _2724 = _2723 + cbSceneParam._m0[79u].w;
        float _2725 = cbSceneParam._m0[79u].w - _2718;
        float _2731 = sqrt(((_2717 * _2717) + (_2718 * _2718)) + (_2721 * _2721));
        float _2734 = (1.0 - (cbSceneParam._m0[77u].w / _2705)) * _2731;
        float _2739 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2741 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2894;
        if (abs((_2719 - _2723) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2894 = ((((_2724 > 0.0) ? exp2(_2739 * _2724) : (2.0 - exp2(_2741 * _2724))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2734;
        }
        else
        {
            float _2854 = 1.0 / cbSceneParam._m0[80u].x;
            float _2855 = isnan(_2725) ? _2724 : (isnan(_2724) ? _2725 : max(_2724, _2725));
            float _2856 = isnan(_2725) ? _2724 : (isnan(_2724) ? _2725 : min(_2724, _2725));
            float _2865 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : min(_2855, 0.0));
            float _2866 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : min(_2856, 0.0));
            _2894 = ((abs(_2731 / _2719) * cbSceneParam._m0[80u].y) * ((((_2865 - _2866) * 2.0) - ((exp2(_2739 * (isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0)))) - exp2(_2739 * (isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0))))) * _2854)) - ((exp2(_2741 * _2865) - exp2(_2741 * _2866)) * _2854))) + (_2734 * cbSceneParam._m0[80u].z);
        }
        vec4 _2896 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2630, _2631, 1.0), 0.0);
        float _2905 = exp2((_2894 * (-1.44269502162933349609375)) * (1.0 - _2896.w));
        float _2906 = log2(_2905);
        float _2922 = log2(_2650);
        _2743 = (exp2(_2922 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2906 * cbSceneParam._m0[78u].x)) * _2896.x) / cbSceneParam._m0[78u].x)) + _2647;
        _2745 = (exp2(_2922 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2906 * cbSceneParam._m0[78u].y)) * _2896.y) / cbSceneParam._m0[78u].y)) + _2648;
        _2747 = (exp2(_2922 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2906 * cbSceneParam._m0[78u].z)) * _2896.z) / cbSceneParam._m0[78u].z)) + _2649;
        _2749 = _2905 * _2650;
    }
    else
    {
        _2743 = _2647;
        _2745 = _2648;
        _2747 = _2649;
        _2749 = _2650;
    }
    float _2761 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2762 = _2761 == 3.0;
    float _2763 = log2(_2749);
    float _2770 = exp2(_2763 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2592 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _855))) + ((_2598 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1662)) * cbPerFrame._m0[3u].x));
    float _2771 = exp2(_2763 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2594 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _855))) + ((_2600 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1662)) * cbPerFrame._m0[3u].x));
    float _2772 = exp2(_2763 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2596 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _855))) + ((_2602 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1662)) * cbPerFrame._m0[3u].x));
    float _2781 = (_2761 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2781 * (_2762 ? _2770 : (_2770 + (cbSceneParam._m0[72u].w * _2743)));
    SV_Target.y = _2781 * (_2762 ? _2771 : (_2771 + (cbSceneParam._m0[72u].w * _2745)));
    SV_Target.z = _2781 * (_2762 ? _2772 : (_2772 + (cbSceneParam._m0[72u].w * _2747)));
    SV_Target.w = cbInstanceData._m0[_2622].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2622].w;
}


