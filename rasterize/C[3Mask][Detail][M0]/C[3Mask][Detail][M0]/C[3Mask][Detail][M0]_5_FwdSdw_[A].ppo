#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1167;
float _3814;
float _3815;
float _3816;
float _3817;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _244 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _250 = _244.x * cbMtdParam._m0[10u].x;
    float _251 = _244.y * cbMtdParam._m0[10u].y;
    float _252 = _244.z * cbMtdParam._m0[10u].z;
    vec4 _271 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _318 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x;
    float _329 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _318)) + 1.0;
    float _3826 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _330 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _337 = (_330 * ((_271.x * cbMtdParam._m0[11u].x) - _250)) + _250;
    float _338 = (_330 * ((_271.y * cbMtdParam._m0[11u].y) - _251)) + _251;
    float _339 = (_330 * ((_271.z * cbMtdParam._m0[11u].z) - _252)) + _252;
    vec4 _358 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _388 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _318)) + 1.0;
    float _3837 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _389 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _396 = (_389 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _397 = (_389 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _398 = (_389 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    vec4 _415 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _440 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _318)) + 1.0;
    float _3848 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _448 = (_441 * ((_415.x * cbMtdParam._m0[13u].x) - _396)) + _396;
    float _449 = (_441 * ((_415.y * cbMtdParam._m0[13u].y) - _397)) + _397;
    float _450 = (_441 * ((_415.z * cbMtdParam._m0[13u].z) - _398)) + _398;
    vec4 _462 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _480 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _482 = _480.x;
    float _483 = _480.y;
    float _489 = cbMtdParam._m0[16u].w * _480.z;
    float _492 = (((cbMtdParam._m0[17u].x * _462.z) - _489) * _330) + _489;
    vec4 _505 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _514 = (((cbMtdParam._m0[17u].y * _505.z) - _492) * _389) + _492;
    vec4 _527 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _536 = (((cbMtdParam._m0[17u].z * _527.z) - _514) * _441) + _514;
    vec4 _549 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _562 = ((_462.x - _482) * _330) + _482;
    float _563 = ((_462.y - _483) * _330) + _483;
    float _568 = ((_505.x - _562) * _389) + _562;
    float _569 = ((_505.y - _563) * _389) + _563;
    float _578 = ((((_527.x - _568) * _441) + _568) * 2.0) + (-1.0);
    float _579 = ((((_527.y - _569) * _441) + _569) * 2.0) + (-1.0);
    float _580 = dot(vec2(_578, _579), vec2(_578, _579));
    float _3859 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _585 = sqrt(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))));
    float _588 = (((_549.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _578;
    float _589 = (((_549.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _579;
    float _592 = fma(_585, _214 * NORMAL.x, fma(_589, _221 * TANGENT.x, (_207 * _199) * _588));
    float _595 = fma(_585, _214 * NORMAL.y, fma(_589, _221 * TANGENT.y, (_207 * _200) * _588));
    float _598 = fma(_585, _214 * NORMAL.z, fma(_589, _221 * TANGENT.z, (_207 * _201) * _588));
    float _602 = inversesqrt(dot(vec3(_592, _595, _598), vec3(_592, _595, _598)));
    float _603 = _602 * _592;
    float _604 = _602 * _595;
    float _605 = _602 * _598;
    float _3870 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _606 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _3881 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3892 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3903 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _625 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _676 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _666);
    float _677 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _666);
    float _678 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _666);
    float _682 = inversesqrt(dot(vec3(_676, _677, _678), vec3(_676, _677, _678)));
    float _683 = _676 * _682;
    float _684 = _677 * _682;
    float _685 = _678 * _682;
    vec4 _690 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _692 = _690.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _846 = sqrt(((_676 * _676) + (_677 * _677)) + (_678 * _678));
        float _852 = (cbMatDynParam._m0[5u].x * _846) + cbMatDynParam._m0[5u].y;
        float _3914 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _857 = (cbMatDynParam._m0[5u].z * _846) + cbMatDynParam._m0[5u].w;
        float _3925 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) - _853)) + _853) < ((_692 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _703 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _704 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _722 = fma(_605, cbSceneParam._m0[5u].z, fma(_604, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _603));
    float _725 = fma(_605, cbSceneParam._m0[6u].z, fma(_604, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _603));
    float _728 = fma(_605, cbSceneParam._m0[7u].z, fma(_604, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _603));
    uint _741 = uint(roundEven(NORMAL.w)) * 13u;
    uint _742 = _741 + 9u;
    uint _743 = _742 + uint(cbMatDynParam._m0[0u].w);
    float _749 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * cbInstanceData._m0[_743].x;
    float _750 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * cbInstanceData._m0[_743].y;
    float _751 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * cbInstanceData._m0[_743].z;
    float _3936 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _753 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _3958 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    vec4 _763 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _703, cbSceneParam._m0[86u].y * _704));
    float _766 = _763.x * TEXCOORD_5.w;
    float _767 = dot(vec3(_603, _604, _605), vec3(_683, _684, _685));
    float _770 = _767 * 2.0;
    float _774 = (_770 * _603) - _683;
    float _775 = (_770 * _604) - _684;
    float _776 = (_770 * _605) - _685;
    float _780 = abs(dot(vec3(_683, _684, _685), vec3(_603, _604, _605)));
    float _3969 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _782 = sqrt(_606);
    float _795 = exp2((_782 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_782 * 3.0));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1166;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _891 = fma(_835, cbModelParam._m0[26u].z, fma(_831, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _827));
        float _895 = fma(_835, cbModelParam._m0[27u].z, fma(_831, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _827));
        float _899 = fma(_835, cbModelParam._m0[28u].z, fma(_831, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _827));
        float _924 = _827 + _603;
        float _925 = _831 + _604;
        float _926 = _835 + _605;
        float _936 = fma(_926, cbModelParam._m0[26u].z, fma(_925, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _924)) - _891;
        float _937 = fma(_926, cbModelParam._m0[27u].z, fma(_925, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _924)) - _895;
        float _938 = fma(_926, cbModelParam._m0[28u].z, fma(_925, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _924)) - _899;
        float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
        float _955 = ((_942 * _936) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_891 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_942 * _937) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_895 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_942 * _938) / cbModelParam._m0[34u].z) + ((((((_899 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        float _994 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_960.x + (-0.5));
        float _996 = _994 * (_960.y + (-0.5));
        float _997 = _994 * (_960.z + (-0.5));
        float _1004 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_967.x + (-0.5));
        float _1006 = _1004 * (_967.y + (-0.5));
        float _1007 = _1004 * (_967.z + (-0.5));
        float _1014 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_974.x + (-0.5));
        float _1016 = _1014 * (_974.y + (-0.5));
        float _1017 = _1014 * (_974.z + (-0.5));
        float _1024 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_981.x + (-0.5));
        float _1026 = _1024 * (_981.y + (-0.5));
        float _1027 = _1024 * (_981.z + (-0.5));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = _995 * 0.5;
        float _1032 = _1005 * 0.5;
        float _1033 = _1015 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1048 = (dot(vec3(_603, _604, _605), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1058 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _4017 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1060 + 1.0))) + _1065) * _1028;
        float _1075 = _996 * 0.5;
        float _1076 = _1006 * 0.5;
        float _1077 = _1016 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_603, _604, _605), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _4050 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1102 + 1.0))) + _1107) * _1029;
        float _1117 = _997 * 0.5;
        float _1118 = _1007 * 0.5;
        float _1119 = _1017 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_603, _604, _605), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _4083 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1144 + 1.0))) + _1149) * _1030;
        _1166 = _997;
        _1168 = _996;
        _1169 = _995;
        _1170 = _1007;
        _1171 = _1006;
        _1172 = _1005;
        _1173 = _1017;
        _1174 = _1016;
        _1175 = _1015;
        _1176 = _1030;
        _1177 = _1029;
        _1178 = _1028;
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
    }
    else
    {
        _1166 = _1167;
        _1168 = _1167;
        _1169 = _1167;
        _1170 = _1167;
        _1171 = _1167;
        _1172 = _1167;
        _1173 = _1167;
        _1174 = _1167;
        _1175 = _1167;
        _1176 = _1167;
        _1177 = _1167;
        _1178 = _1167;
        _1179 = 0.0;
        _1180 = 0.0;
        _1181 = 0.0;
    }
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1210 = fma(_835, cbModelParam._m0[30u].z, fma(_831, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _827));
        float _1214 = fma(_835, cbModelParam._m0[31u].z, fma(_831, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _827));
        float _1218 = fma(_835, cbModelParam._m0[32u].z, fma(_831, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _827));
        float _1241 = _827 + _603;
        float _1242 = _831 + _604;
        float _1243 = _835 + _605;
        float _1253 = fma(_1243, cbModelParam._m0[30u].z, fma(_1242, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1241)) - _1210;
        float _1254 = fma(_1243, cbModelParam._m0[31u].z, fma(_1242, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1241)) - _1214;
        float _1255 = fma(_1243, cbModelParam._m0[32u].z, fma(_1242, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1241)) - _1218;
        float _1259 = inversesqrt(dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255)));
        float _1272 = ((_1259 * _1253) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1210 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1259 * _1254) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1214 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1259 * _1255) / cbModelParam._m0[35u].z) + ((((((_1218 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        float _1309 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1276.x + (-0.5));
        float _1311 = _1309 * (_1276.y + (-0.5));
        float _1312 = _1309 * (_1276.z + (-0.5));
        float _1319 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1283.x + (-0.5));
        float _1321 = _1319 * (_1283.y + (-0.5));
        float _1322 = _1319 * (_1283.z + (-0.5));
        float _1329 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1290.x + (-0.5));
        float _1331 = _1329 * (_1290.y + (-0.5));
        float _1332 = _1329 * (_1290.z + (-0.5));
        float _1339 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1297.x + (-0.5));
        float _1341 = _1339 * (_1297.y + (-0.5));
        float _1342 = _1339 * (_1297.z + (-0.5));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = _1310 * 0.5;
        float _1347 = _1320 * 0.5;
        float _1348 = _1330 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_603, _604, _605), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4146 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1373 + 1.0))) + _1378) * _1343;
        float _1388 = _1311 * 0.5;
        float _1389 = _1321 * 0.5;
        float _1390 = _1331 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_603, _604, _605), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4179 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1415 + 1.0))) + _1420) * _1344;
        float _1430 = _1312 * 0.5;
        float _1431 = _1322 * 0.5;
        float _1432 = _1332 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_603, _604, _605), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _4212 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1457 + 1.0))) + _1462) * _1345;
        _1479 = _1312;
        _1480 = _1311;
        _1481 = _1310;
        _1482 = _1322;
        _1483 = _1321;
        _1484 = _1320;
        _1485 = _1332;
        _1486 = _1331;
        _1487 = _1330;
        _1488 = _1345;
        _1489 = _1344;
        _1490 = _1343;
        _1491 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1492 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
    }
    else
    {
        _1479 = _1167;
        _1480 = _1167;
        _1481 = _1167;
        _1482 = _1167;
        _1483 = _1167;
        _1484 = _1167;
        _1485 = _1167;
        _1486 = _1167;
        _1487 = _1167;
        _1488 = _1167;
        _1489 = _1167;
        _1490 = _1167;
        _1491 = 0.0;
        _1492 = 0.0;
        _1493 = 0.0;
    }
    float _1503 = (cbModelParam._m0[1u].x * (_1491 - _1179)) + _1179;
    float _1504 = (cbModelParam._m0[1u].x * (_1492 - _1180)) + _1180;
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1181)) + _1181;
    float _1526 = fma(_1505, cbSceneParam._m0[89u].z, fma(_1504, cbSceneParam._m0[89u].y, _1503 * cbSceneParam._m0[89u].x));
    float _1529 = fma(_1505, cbSceneParam._m0[90u].z, fma(_1504, cbSceneParam._m0[90u].y, _1503 * cbSceneParam._m0[90u].x));
    float _1532 = fma(_1505, cbSceneParam._m0[91u].z, fma(_1504, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1503));
    float _1547 = _774 * 0.5;
    float _1548 = _775 * 0.5;
    float _1549 = _776 * 0.5;
    float _1550 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1553 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1480, _1483, _1486, _1489));
    float _1556 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1479, _1482, _1485, _1488));
    float _1590;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1563 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1166, _1170, _1173, _1176));
        float _1567 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1168, _1171, _1174, _1177));
        float _1571 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1169, _1172, _1175, _1178));
        float _1578 = dot(vec4(cbModelParam._m0[39u]), vec4(_1547, _1548, _1549, 1.0));
        _1590 = dot(vec3(isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1578) ? 0.0 : (isnan(0.0) ? _1578 : max(0.0, _1578))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1590 = 1.0;
    }
    float _1601;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1592 = dot(vec4(cbModelParam._m0[40u]), vec4(_1547, _1548, _1549, 1.0));
        _1601 = dot(vec3(isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1592) ? 0.0 : (isnan(0.0) ? _1592 : max(0.0, _1592))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1601 = 1.0;
    }
    float _1605 = (_1601 * cbModelParam._m0[1u].x) + (_1590 * (1.0 - cbModelParam._m0[1u].x));
    float _1615 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _606);
    float _1616 = isnan(_1615) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1615 : min(cbModelParam._m0[25u].z, _1615));
    float _1697;
    float _1699;
    float _1701;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1664 = fma(_835, cbModelParam._m0[13u].z, fma(_831, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _827)) + cbModelParam._m0[13u].w;
        float _1668 = fma(_835, cbModelParam._m0[14u].z, fma(_831, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _827)) + cbModelParam._m0[14u].w;
        float _1672 = fma(_835, cbModelParam._m0[15u].z, fma(_831, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _827)) + cbModelParam._m0[15u].w;
        float _1675 = fma(_776, cbModelParam._m0[13u].z, fma(_775, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _774));
        float _1678 = fma(_776, cbModelParam._m0[14u].z, fma(_775, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _774));
        float _1681 = fma(_776, cbModelParam._m0[15u].z, fma(_775, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _774));
        float _1709;
        if (_1675 > 0.0)
        {
            _1709 = abs((1.0 - _1664) / _1675);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1664 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1709 = frontier_phi_17_15_ladder;
        }
        float _1880;
        if (_1678 > 0.0)
        {
            _1880 = abs((1.0 - _1668) / _1678);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1668 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1880 = frontier_phi_26_22_ladder;
        }
        float _2176;
        if (_1681 > 0.0)
        {
            _2176 = abs((1.0 - _1672) / _1681);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1672 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2176 = frontier_phi_38_33_ladder;
        }
        float _2178 = isnan(_1880) ? _1709 : (isnan(_1709) ? _1880 : min(_1709, _1880));
        float _2179 = isnan(_2176) ? _2178 : (isnan(_2178) ? _2176 : min(_2178, _2176));
        float _2183 = (_2179 * _1675) + _1664;
        float _2184 = (_2179 * _1678) + _1668;
        float _2185 = (_2179 * _1681) + _1672;
        float _2186 = _2179 * 9.9999997473787516355514526367188e-05;
        float _2188 = (-1.0) - _2186;
        float _2190 = _2186 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2185 > _2190) || ((_2185 < _2188) || ((_2184 > _2190) || ((_2184 < _2188) || ((_2183 < _2188) || (_2183 > _2190))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2330 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2185, cbModelParam._m0[9u].z, fma(_2184, cbModelParam._m0[9u].y, _2183 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2185, cbModelParam._m0[10u].z, fma(_2184, cbModelParam._m0[10u].y, _2183 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2185, cbModelParam._m0[11u].z, fma(_2184, cbModelParam._m0[11u].y, _2183 * cbModelParam._m0[11u].x))), _1616);
            frontier_phi_16_38_ladder = _2330.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2330.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2330.x * cbModelParam._m0[1u].y;
        }
        _1697 = frontier_phi_16_38_ladder_2;
        _1699 = frontier_phi_16_38_ladder_1;
        _1701 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1685 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_774, _775, _776), _1616);
        _1697 = _1685.x * cbModelParam._m0[1u].y;
        _1699 = _1685.y * cbModelParam._m0[1u].y;
        _1701 = _1685.z * cbModelParam._m0[1u].y;
    }
    float _1705 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _606);
    float _1706 = isnan(_1705) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1705 : min(cbModelParam._m0[25u].w, _1705));
    float _1797;
    float _1799;
    float _1801;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1761 = fma(_835, cbModelParam._m0[21u].z, fma(_831, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _827)) + cbModelParam._m0[21u].w;
        float _1765 = fma(_835, cbModelParam._m0[22u].z, fma(_831, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _827)) + cbModelParam._m0[22u].w;
        float _1769 = fma(_835, cbModelParam._m0[23u].z, fma(_831, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _827)) + cbModelParam._m0[23u].w;
        float _1772 = fma(_776, cbModelParam._m0[21u].z, fma(_775, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _774));
        float _1775 = fma(_776, cbModelParam._m0[22u].z, fma(_775, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _774));
        float _1778 = fma(_776, cbModelParam._m0[23u].z, fma(_775, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _774));
        float _1885;
        if (_1772 > 0.0)
        {
            _1885 = abs((1.0 - _1761) / _1772);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1761 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1885 = frontier_phi_28_24_ladder;
        }
        float _2203;
        if (_1775 > 0.0)
        {
            _2203 = abs((1.0 - _1765) / _1775);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1765 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2203 = frontier_phi_40_35_ladder;
        }
        float _2530;
        if (_1778 > 0.0)
        {
            _2530 = abs((1.0 - _1769) / _1778);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1769 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2530 = frontier_phi_50_47_ladder;
        }
        float _2532 = isnan(_2203) ? _1885 : (isnan(_1885) ? _2203 : min(_1885, _2203));
        float _2533 = isnan(_2530) ? _2532 : (isnan(_2532) ? _2530 : min(_2532, _2530));
        float _2537 = (_2533 * _1772) + _1761;
        float _2538 = (_2533 * _1775) + _1765;
        float _2539 = (_2533 * _1778) + _1769;
        float _2540 = _2533 * 9.9999997473787516355514526367188e-05;
        float _2541 = (-1.0) - _2540;
        float _2543 = _2540 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2539 > _2543) || ((_2539 < _2541) || ((_2538 > _2543) || ((_2538 < _2541) || ((_2537 < _2541) || (_2537 > _2543))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2657 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2539, cbModelParam._m0[17u].z, fma(_2538, cbModelParam._m0[17u].y, _2537 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2539, cbModelParam._m0[18u].z, fma(_2538, cbModelParam._m0[18u].y, _2537 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2539, cbModelParam._m0[19u].z, fma(_2538, cbModelParam._m0[19u].y, _2537 * cbModelParam._m0[19u].x))), _1706);
            frontier_phi_25_50_ladder = _2657.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2657.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2657.x * cbModelParam._m0[1u].z;
        }
        _1797 = frontier_phi_25_50_ladder_2;
        _1799 = frontier_phi_25_50_ladder_1;
        _1801 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1781 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_774, _775, _776), _1706);
        _1797 = _1781.x * cbModelParam._m0[1u].z;
        _1799 = _1781.y * cbModelParam._m0[1u].z;
        _1801 = _1781.z * cbModelParam._m0[1u].z;
    }
    float _1813 = ((((1.0 - _795) * ((_782 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_795 * _782)) * _766;
    float _1814 = _1813 * ((cbModelParam._m0[1u].w * (_1797 - _1697)) + _1697);
    float _1815 = _1813 * ((cbModelParam._m0[1u].w * (_1799 - _1699)) + _1699);
    float _1816 = _1813 * ((cbModelParam._m0[1u].w * (_1801 - _1701)) + _1701);
    float _1819 = fma(_1816, cbSceneParam._m0[89u].z, fma(_1815, cbSceneParam._m0[89u].y, _1814 * cbSceneParam._m0[89u].x));
    float _1822 = fma(_1816, cbSceneParam._m0[90u].z, fma(_1815, cbSceneParam._m0[90u].y, _1814 * cbSceneParam._m0[90u].x));
    float _1825 = fma(_1816, cbSceneParam._m0[91u].z, fma(_1815, cbSceneParam._m0[91u].y, _1814 * cbSceneParam._m0[91u].x));
    float _1859 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1863 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1867 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1871 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1872 = _1859 / _1871;
    float _1873 = _1863 / _1871;
    float _1874 = _1867 / _1871;
    float _2021;
    float _2022;
    float _2023;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1901 = ((uint(_1874 > cbSceneParam._m0[59u].y) + uint(_1874 > cbSceneParam._m0[59u].x)) + uint(_1874 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1902 = _1901 + 43u;
        uint _1910 = _1901 + 44u;
        uint _1918 = _1901 + 45u;
        uint _1926 = _1901 + 46u;
        float _1937 = fma(_1871, cbSceneParam._m0[_1902].w, fma(_1867, cbSceneParam._m0[_1902].z, fma(_1863, cbSceneParam._m0[_1902].y, _1859 * cbSceneParam._m0[_1902].x)));
        float _1941 = fma(_1871, cbSceneParam._m0[_1910].w, fma(_1867, cbSceneParam._m0[_1910].z, fma(_1863, cbSceneParam._m0[_1910].y, _1859 * cbSceneParam._m0[_1910].x)));
        float _1949 = fma(_1871, cbSceneParam._m0[_1926].w, fma(_1867, cbSceneParam._m0[_1926].z, fma(_1863, cbSceneParam._m0[_1926].y, _1859 * cbSceneParam._m0[_1926].x)));
        float _1954 = cbSceneParam._m0[33u].z * _1949;
        float _1956 = cbSceneParam._m0[33u].w * _1949;
        float _1959 = fma(_1871, cbSceneParam._m0[_1918].w, fma(_1867, cbSceneParam._m0[_1918].z, fma(_1863, cbSceneParam._m0[_1918].y, _1859 * cbSceneParam._m0[_1918].x))) / _1949;
        float _2007 = (cbSceneParam._m0[33u].x - sqrt(((_1873 * _1873) + (_1872 * _1872)) + (_1874 * _1874))) * cbSceneParam._m0[33u].y;
        float _4338 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2014 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1954 + _1937) / _1949, (_1956 + _1941) / _1949), _1959), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1956 + _1937) / _1949, (_1941 - _1954) / _1949), _1959), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1937 - _1954) / _1949, (_1941 - _1956) / _1949), _1959), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1937 - _1956) / _1949, (_1954 + _1941) / _1949), _1959), 0.0)).x), vec4(0.25)));
        _2021 = 1.0 - (_2014 * cbSceneParam._m0[34u].x);
        _2022 = 1.0 - (_2014 * cbSceneParam._m0[34u].y);
        _2023 = 1.0 - (_2014 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2021 = 1.0;
        _2022 = 1.0;
        _2023 = 1.0;
    }
    float _2087;
    float _2089;
    float _2091;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2075 = fma(_1871, cbSceneParam._m0[63u].w, fma(_1867, cbSceneParam._m0[63u].z, fma(_1863, cbSceneParam._m0[63u].y, _1859 * cbSceneParam._m0[63u].x)));
        float _2076 = fma(_1871, cbSceneParam._m0[60u].w, fma(_1867, cbSceneParam._m0[60u].z, fma(_1863, cbSceneParam._m0[60u].y, _1859 * cbSceneParam._m0[60u].x))) / _2075;
        float _2077 = fma(_1871, cbSceneParam._m0[61u].w, fma(_1867, cbSceneParam._m0[61u].z, fma(_1863, cbSceneParam._m0[61u].y, _1859 * cbSceneParam._m0[61u].x))) / _2075;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2076 >= cbSceneParam._m0[64u].x) && (_2077 >= cbSceneParam._m0[64u].y)) && (_2076 <= cbSceneParam._m0[64u].z)) && (_2077 <= cbSceneParam._m0[64u].w))
        {
            float _2216 = fma(_1871, cbSceneParam._m0[62u].w, fma(_1867, cbSceneParam._m0[62u].z, fma(_1863, cbSceneParam._m0[62u].y, _1859 * cbSceneParam._m0[62u].x))) / _2075;
            float _2220 = isnan(cbSceneParam._m0[41u].w) ? _2216 : (isnan(_2216) ? cbSceneParam._m0[41u].w : max(_2216, cbSceneParam._m0[41u].w));
            float _2263 = (cbSceneParam._m0[33u].x - sqrt(((_1873 * _1873) + (_1872 * _1872)) + (_1874 * _1874))) * cbSceneParam._m0[33u].y;
            float _4354 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
            float _2270 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2076, cbSceneParam._m0[33u].w + _2077), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2076, _2077 - cbSceneParam._m0[33u].z), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2076 - cbSceneParam._m0[33u].z, _2077 - cbSceneParam._m0[33u].w), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2076 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2077), _2220), 0.0)).x), vec4(0.25)));
            float _2274 = 1.0 - (_2270 * cbSceneParam._m0[34u].x);
            float _2275 = 1.0 - (_2270 * cbSceneParam._m0[34u].y);
            float _2276 = 1.0 - (_2270 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2276) ? _2023 : (isnan(_2023) ? _2276 : min(_2023, _2276));
            frontier_phi_37_36_ladder_1 = isnan(_2275) ? _2022 : (isnan(_2022) ? _2275 : min(_2022, _2275));
            frontier_phi_37_36_ladder_2 = isnan(_2274) ? _2021 : (isnan(_2021) ? _2274 : min(_2021, _2274));
        }
        else
        {
            frontier_phi_37_36_ladder = _2023;
            frontier_phi_37_36_ladder_1 = _2022;
            frontier_phi_37_36_ladder_2 = _2021;
        }
        _2087 = frontier_phi_37_36_ladder_2;
        _2089 = frontier_phi_37_36_ladder_1;
        _2091 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2087 = _2021;
        _2089 = _2022;
        _2091 = _2023;
    }
    uvec4 _2096 = floatBitsToUint(cbInstanceData._m0[_741 + 5u]);
    uint _2098 = _2096.x * 14u;
    uint _2099 = _2098 + 13u;
    float _2106 = _766 + (-1.0);
    float _2111 = (cbLight._m0[_2099].x * _2106) + 1.0;
    float _2112 = (cbLight._m0[_2099].y * _2106) + 1.0;
    float _2113 = (cbLight._m0[_2099].z * _2106) + 1.0;
    float _2114 = (cbLight._m0[_2099].w * _2106) + 1.0;
    uint _2115 = _2098 + 5u;
    float _2121 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
    uint _2125 = _2098 + 4u;
    float _2135 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
    uint _2139 = _2098 | 1u;
    float _2150 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_603, _604, _605));
    float _2153 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_603, _604, _605));
    float _4390 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _4401 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2158 = (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * 0.3183098733425140380859375;
    float _2160 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * 0.3183098733425140380859375;
    float _2167 = ((cbLight._m0[_2115].x * _2121) * _2160) + (((cbLight._m0[_2125].x * _2087) * _2135) * _2158);
    float _2168 = ((_2121 * cbLight._m0[_2115].y) * _2160) + (((cbLight._m0[_2125].y * _2089) * _2135) * _2158);
    float _2169 = ((_2121 * cbLight._m0[_2115].z) * _2160) + (((cbLight._m0[_2125].z * _2091) * _2135) * _2158);
    uvec4 _2173 = floatBitsToUint(cbLight._m0[_2098 + 12u]);
    bool _2175 = _2173.x == 0u;
    float _2277;
    float _2279;
    float _2281;
    if (_2175)
    {
        _2277 = _2167;
        _2279 = _2168;
        _2281 = _2169;
    }
    else
    {
        uint _2285 = _2098 + 6u;
        float _2301 = (dot(vec3(cbLight._m0[_2098 + 2u].xyz), vec3(_603, _604, _605)) * 0.5) + 0.5;
        float _2302 = _2301 * _2301;
        float _4412 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2303 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2304 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2277 = (((cbLight._m0[_2285].x * 0.3183098733425140380859375) * _2303) * _2304) + _2167;
        _2279 = (((cbLight._m0[_2285].y * 0.3183098733425140380859375) * _2303) * _2304) + _2168;
        _2281 = (((cbLight._m0[_2285].z * 0.3183098733425140380859375) * _2303) * _2304) + _2169;
    }
    bool _2284 = _2173.y == 0u;
    float _2339;
    float _2341;
    float _2343;
    if (_2284)
    {
        _2339 = _2277;
        _2341 = _2279;
        _2343 = _2281;
    }
    else
    {
        uint _2501 = _2098 + 7u;
        float _2517 = (dot(vec3(cbLight._m0[_2098 + 3u].xyz), vec3(_603, _604, _605)) * 0.5) + 0.5;
        float _2518 = _2517 * _2517;
        float _4428 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2519 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2520 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2339 = (((cbLight._m0[_2501].x * 0.3183098733425140380859375) * _2519) * _2520) + _2277;
        _2341 = (((cbLight._m0[_2501].y * 0.3183098733425140380859375) * _2519) * _2520) + _2279;
        _2343 = (((cbLight._m0[_2501].z * 0.3183098733425140380859375) * _2519) * _2520) + _2281;
    }
    uint _2346 = _2098 + 8u;
    float _2359 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _606) * 0.949999988079071044921875);
    float _2360 = _2359 * _2359;
    float _2361 = cbLight._m0[_2098].x + _683;
    float _2362 = cbLight._m0[_2098].y + _684;
    float _2363 = cbLight._m0[_2098].z + _685;
    float _2367 = inversesqrt(dot(vec3(_2361, _2362, _2363), vec3(_2361, _2362, _2363)));
    float _2368 = _2367 * _2361;
    float _2369 = _2367 * _2362;
    float _2370 = _2367 * _2363;
    float _2371 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_2098].xyz));
    float _4444 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2374 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _4455 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _2375 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2376 = dot(vec3(_603, _604, _605), vec3(_2368, _2369, _2370));
    float _4466 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2380 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2368, _2369, _2370));
    float _4477 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2384 = _2360 * _2360;
    float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
    float _2399 = (exp2(log2(1.0 - (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2400 = 1.0 - _2360;
    float _2411 = (0.5 / (((_2375 * ((_2374 * _2400) + _2360)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2400) + _2360) * _2374))) * _2374;
    float _4488 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2413 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
    uint _2427 = _2098 + 9u;
    float _2438 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _606) * 0.949999988079071044921875);
    float _2439 = _2438 * _2438;
    float _2440 = cbLight._m0[_2139].x + _683;
    float _2441 = cbLight._m0[_2139].y + _684;
    float _2442 = cbLight._m0[_2139].z + _685;
    float _2446 = inversesqrt(dot(vec3(_2440, _2441, _2442), vec3(_2440, _2441, _2442)));
    float _2447 = _2446 * _2440;
    float _2448 = _2446 * _2441;
    float _2449 = _2446 * _2442;
    float _2450 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_2139].xyz));
    float _4499 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2453 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _2454 = dot(vec3(_603, _604, _605), vec3(_2447, _2448, _2449));
    float _4510 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2457 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _2458 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2447, _2448, _2449));
    float _4521 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2462 = _2439 * _2439;
    float _2466 = ((_2457 * _2457) * (_2462 + (-1.0))) + 1.0;
    float _2475 = (exp2(log2(1.0 - (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2476 = 1.0 - _2439;
    float _2486 = (0.5 / (((_2375 * ((_2453 * _2476) + _2439)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2476) + _2439) * _2453))) * _2453;
    float _4532 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2488 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2462 / ((_2466 * _2466) * 3.141590118408203125));
    float _2498 = (((_2475 * cbLight._m0[_2427].x) * _2488) * _2121) + ((((cbLight._m0[_2346].x * _2087) * _2399) * _2413) * _2135);
    float _2499 = (((_2475 * cbLight._m0[_2427].y) * _2488) * _2121) + ((((cbLight._m0[_2346].y * _2089) * _2399) * _2413) * _2135);
    float _2500 = (((_2475 * cbLight._m0[_2427].z) * _2488) * _2121) + ((((cbLight._m0[_2346].z * _2091) * _2399) * _2413) * _2135);
    float _2556;
    float _2558;
    float _2560;
    if (_2175)
    {
        _2556 = _2498;
        _2558 = _2499;
        _2560 = _2500;
    }
    else
    {
        uint _2562 = _2098 + 2u;
        uint _2566 = _2098 + 10u;
        float _2580 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2562].w)) * _606) * 0.949999988079071044921875);
        float _2581 = _2580 * _2580;
        float _2582 = cbLight._m0[_2562].x + _683;
        float _2583 = cbLight._m0[_2562].y + _684;
        float _2584 = cbLight._m0[_2562].z + _685;
        float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
        float _2589 = _2588 * _2582;
        float _2590 = _2588 * _2583;
        float _2591 = _2588 * _2584;
        float _2592 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_2562].xyz));
        float _4543 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2596 = dot(vec3(_603, _604, _605), vec3(_2589, _2590, _2591));
        float _4554 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2599 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2600 = dot(vec3(cbLight._m0[_2562].xyz), vec3(_2589, _2590, _2591));
        float _4565 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2604 = _2581 * _2581;
        float _2608 = ((_2599 * _2599) * (_2604 + (-1.0))) + 1.0;
        float _2617 = (exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2618 = 1.0 - _2581;
        float _2628 = (0.5 / (((_2375 * ((_2595 * _2618) + _2581)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2618) + _2581) * _2595))) * _2595;
        float _4576 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2630 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2604 / ((_2608 * _2608) * 3.141590118408203125));
        float _2631 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2556 = (((_2617 * cbLight._m0[_2566].x) * _2630) * _2631) + _2498;
        _2558 = (((_2617 * cbLight._m0[_2566].y) * _2630) * _2631) + _2499;
        _2560 = (((_2617 * cbLight._m0[_2566].z) * _2630) * _2631) + _2500;
    }
    float _2662;
    float _2664;
    float _2666;
    if (_2284)
    {
        _2662 = _2556;
        _2664 = _2558;
        _2666 = _2560;
    }
    else
    {
        uint _2673 = _2098 + 3u;
        uint _2677 = _2098 + 11u;
        float _2691 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2673].w)) * _606) * 0.949999988079071044921875);
        float _2692 = _2691 * _2691;
        float _2693 = cbLight._m0[_2673].x + _683;
        float _2694 = cbLight._m0[_2673].y + _684;
        float _2695 = cbLight._m0[_2673].z + _685;
        float _2699 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
        float _2700 = _2699 * _2693;
        float _2701 = _2699 * _2694;
        float _2702 = _2699 * _2695;
        float _2703 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_2673].xyz));
        float _4592 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2707 = dot(vec3(_603, _604, _605), vec3(_2700, _2701, _2702));
        float _4603 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2711 = dot(vec3(cbLight._m0[_2673].xyz), vec3(_2700, _2701, _2702));
        float _4614 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2715 = _2692 * _2692;
        float _2719 = ((_2710 * _2710) * (_2715 + (-1.0))) + 1.0;
        float _2728 = (exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2729 = 1.0 - _2692;
        float _2739 = (0.5 / (((_2375 * ((_2706 * _2729) + _2692)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2729) + _2692) * _2706))) * _2706;
        float _4625 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2741 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2715 / ((_2719 * _2719) * 3.141590118408203125));
        float _2742 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2662 = (((_2728 * cbLight._m0[_2677].x) * _2741) * _2742) + _2556;
        _2664 = (((_2728 * cbLight._m0[_2677].y) * _2741) * _2742) + _2558;
        _2666 = (((_2728 * cbLight._m0[_2677].z) * _2741) * _2742) + _2560;
    }
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    if (_2096.y == 0u)
    {
        uvec4 _2763 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2764 = _2763.x;
        uint _2775 = uint((float(_2763.y) * floor(float(uint(cbSceneParam._m0[85u].y * _704) / _2764))) + floor(float(uint(cbSceneParam._m0[85u].x * _703) / _2764)));
        float _2785 = (log2(_1874 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2786 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        uint _2789 = uint(isnan(14.0) ? _2786 : (isnan(_2786) ? 14.0 : min(_2786, 14.0)));
        uvec4 _2794 = texelFetch(g_lightClusterGridBuffer, int(((_2789 << 2u) + (_2775 << 6u)) >> 2u));
        uint _2795 = _2794.x;
        uint _2796 = _2763.z;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        if (((((1u << ((_2796 >> 4u) & 15u)) + 4294967295u) & _2795) == 0u) || ((_2796 & 240u) == 0u))
        {
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
        }
        else
        {
            float _2876;
            float _2878;
            float _2880;
            float _2882;
            float _2884;
            float _2886;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            uint _3034 = 0u;
            uint _3043;
            bool _3044;
            for (;;)
            {
                _3043 = texelFetch(g_lightClassification, int((((_2789 << 5u) + (_2775 << 9u)) + (_3034 << 2u)) >> 2u)).x;
                _3044 = _3043 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3044)
                {
                    frontier_phi_71_pred = _3033;
                    frontier_phi_71_pred_1 = _3032;
                    frontier_phi_71_pred_2 = _3031;
                    frontier_phi_71_pred_3 = _3030;
                    frontier_phi_71_pred_4 = _3029;
                    frontier_phi_71_pred_5 = _3028;
                }
                else
                {
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    uint _3179;
                    _3173 = _3028;
                    _3174 = _3029;
                    _3175 = _3030;
                    _3176 = _3031;
                    _3177 = _3032;
                    _3178 = _3033;
                    _3179 = _3043;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    for (;;)
                    {
                        uint _3183 = uint(findLSB(_3179)) + (_3034 << 5u);
                        uint _3180 = (_3179 + 4294967295u) & _3179;
                        uint _3185 = _3183 * 48u;
                        vec4 _3199 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3185)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 3u)).x));
                        uint _3205 = (_3183 * 48u) + 4u;
                        vec4 _3218 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3205)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 3u)).x));
                        uint _3224 = (_3183 * 48u) + 8u;
                        vec3 _3235 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3224)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 2u)).x));
                        float _3239 = _3199.x - _1872;
                        float _3240 = _3199.y - _1873;
                        float _3241 = _3199.z - _1874;
                        float _3242 = dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241));
                        float _3245 = inversesqrt(_3242);
                        float _3246 = _3245 * _3239;
                        float _3247 = _3245 * _3240;
                        float _3248 = _3245 * _3241;
                        float _3249 = dot(vec3(_722, _725, _728), vec3(_3246, _3247, _3248));
                        float _3254 = 1.0 - (_3242 * _3199.w);
                        float _4651 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3255 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3256 = sqrt(_3242) * _3218.w;
                        float _3259 = 1.39999997615814208984375 / (_3256 + 1.39999997615814208984375);
                        float _3260 = _3259 * _3259;
                        float _3263 = ((1.0 - _3260) * _3249) + _3260;
                        float _3266 = _3256 * _3256;
                        float _3270 = ((isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0))) * _3255) / ((_3266 * 0.699999988079071044921875) + 1.0);
                        float _3274 = (-0.0) - _1872;
                        float _3275 = (-0.0) - _1873;
                        float _3276 = (-0.0) - _1874;
                        float _3280 = inversesqrt(dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276)));
                        float _3281 = _3280 * _3274;
                        float _3282 = _3280 * _3275;
                        float _3283 = _3280 * _3276;
                        float _3290 = exp2(log2(1.0 / ((_3266 * 3.5) + 5.0)) * 0.25);
                        float _3291 = 1.0 - _782;
                        float _3298 = sqrt(1.0 - ((1.0 - (_3291 * _3291)) * (1.0 - (_3290 * _3290))));
                        float _3299 = _3298 * _3298;
                        float _3300 = _3299 * _3299;
                        float _3301 = _3281 + _3246;
                        float _3302 = _3282 + _3247;
                        float _3303 = _3283 + _3248;
                        float _3307 = inversesqrt(dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303)));
                        float _3311 = dot(vec3(_722, _725, _728), vec3(_3281, _3282, _3283));
                        float _4667 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3314 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                        float _3315 = dot(vec3(_722, _725, _728), vec3(_3307 * _3301, _3307 * _3302, _3307 * _3303));
                        float _4678 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                        float _3318 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3322 = ((_3318 * _3318) * (_3300 + (-1.0))) + 1.0;
                        float _3323 = _3259 * _3299;
                        float _3324 = _3323 * _3323;
                        float _3327 = ((1.0 - _3324) * _3249) + _3324;
                        float _4689 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3328 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                        float _3329 = 1.0 - _3299;
                        float _3339 = (0.5 / (((_3328 * ((_3314 * _3329) + _3299)) + 9.9999999392252902907785028219223e-09) + (((_3328 * _3329) + _3299) * _3314))) * _3328;
                        float _4700 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3350 = (((_3300 * 3.1415927410125732421875) * (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) / ((_3322 * _3322) * ((_3266 * 2.1991131305694580078125) + 3.141590118408203125))) * _3255;
                        _3103 = (_3270 * _3218.x) + _3176;
                        _3104 = (_3270 * _3218.y) + _3177;
                        _3105 = (_3270 * _3218.z) + _3178;
                        _3100 = (_3350 * _3235.x) + _3173;
                        _3101 = (_3350 * _3235.y) + _3174;
                        _3102 = (_3350 * _3235.z) + _3175;
                        if (_3180 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3173 = _3100;
                            _3174 = _3101;
                            _3175 = _3102;
                            _3176 = _3103;
                            _3177 = _3104;
                            _3178 = _3105;
                            _3179 = _3180;
                        }
                    }
                    frontier_phi_71_pred = _3105;
                    frontier_phi_71_pred_1 = _3104;
                    frontier_phi_71_pred_2 = _3103;
                    frontier_phi_71_pred_3 = _3102;
                    frontier_phi_71_pred_4 = _3101;
                    frontier_phi_71_pred_5 = _3100;
                }
                _2886 = frontier_phi_71_pred;
                _2884 = frontier_phi_71_pred_1;
                _2882 = frontier_phi_71_pred_2;
                _2880 = frontier_phi_71_pred_3;
                _2878 = frontier_phi_71_pred_4;
                _2876 = frontier_phi_71_pred_5;
                uint _3035 = _3034 + 1u;
                if (_3035 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3028 = _2876;
                    _3029 = _2878;
                    _3030 = _2880;
                    _3031 = _2882;
                    _3032 = _2884;
                    _3033 = _2886;
                    _3034 = _3035;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
        }
        uvec4 _2889 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2890 = _2889.z;
        uint _2892 = (_2890 >> 8u) & 15u;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        if (((4294967295u << _2892) & _2795) == 0u)
        {
            _2996 = _2875;
            _2998 = _2877;
            _3000 = _2879;
            _3002 = _2881;
            _3004 = _2883;
            _3006 = _2885;
        }
        else
        {
            float _3021 = inversesqrt(dot(vec3(_1872, _1873, _1874), vec3(_1872, _1873, _1874)));
            float _3022 = _3021 * _1872;
            float _3023 = _3021 * _1873;
            float _3024 = _3021 * _1874;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2892 < ((_2890 >> 12u) & 15u))
            {
                float _2997;
                float _2999;
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3156 = _2875;
                float _3157 = _2877;
                float _3158 = _2879;
                float _3159 = _2881;
                float _3160 = _2883;
                float _3161 = _2885;
                uint _3162 = _2892;
                uint _3171;
                bool _3172;
                for (;;)
                {
                    _3171 = texelFetch(g_lightClassification, int((((_2789 << 5u) + (_2775 << 9u)) + (_3162 << 2u)) >> 2u)).x;
                    _3172 = _3171 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3172)
                    {
                        frontier_phi_82_pred = _3161;
                        frontier_phi_82_pred_1 = _3160;
                        frontier_phi_82_pred_2 = _3159;
                        frontier_phi_82_pred_3 = _3158;
                        frontier_phi_82_pred_4 = _3157;
                        frontier_phi_82_pred_5 = _3156;
                    }
                    else
                    {
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3377 = _3156;
                        float _3378 = _3157;
                        float _3379 = _3158;
                        float _3380 = _3159;
                        float _3381 = _3160;
                        float _3382 = _3161;
                        uint _3383 = _3171;
                        uint _3384;
                        vec4 _3409;
                        float _3410;
                        vec4 _3425;
                        vec3 _3437;
                        vec4 _3452;
                        vec4 _3467;
                        float _3514;
                        bool _3515;
                        for (;;)
                        {
                            uint _3394 = ((_3162 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3383));
                            _3384 = (_3383 + 4294967295u) & _3383;
                            uint _3396 = _3394 * 40u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            _3410 = _3409.w;
                            uint _3412 = (_3394 * 40u) + 4u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3427 = (_3394 * 40u) + 8u;
                            _3437 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x));
                            uint _3439 = (_3394 * 40u) + 16u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3454 = (_3394 * 40u) + 20u;
                            _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3470 = (_3394 * 40u) + 24u;
                            vec4 _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            uint _3489 = (_3394 * 40u) + 28u;
                            vec4 _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            _3514 = fma(_1874, _3502.z, fma(_1873, _3502.y, _3502.x * _1872)) + _3502.w;
                            _3515 = !((fma(_1874, _3483.z, fma(_1873, _3483.y, _3483.x * _1872)) + _3483.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3515)
                            {
                                float _3542 = _3409.x - _1872;
                                float _3543 = _3409.y - _1873;
                                float _3544 = _3409.z - _1874;
                                float _3545 = dot(vec3(_3542, _3543, _3544), vec3(_3542, _3543, _3544));
                                float _3548 = inversesqrt(_3545);
                                float _3549 = _3548 * _3542;
                                float _3550 = _3548 * _3543;
                                float _3551 = _3548 * _3544;
                                float _3555 = 1.0 - (_3545 / (_3410 * _3410));
                                float _4711 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3556 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3560 = sqrt(_3545) * _3425.w;
                                float _3562 = 1.39999997615814208984375 / (_3560 + 1.39999997615814208984375);
                                float _3563 = _3562 * _3562;
                                float _3566 = ((1.0 - _3563) * dot(vec3(_3549, _3550, _3551), vec3(_722, _725, _728))) + _3563;
                                float _3569 = _3560 * _3560;
                                float _3573 = (fma(_1874, _3452.z, fma(_1873, _3452.y, _3452.x * _1872)) + _3452.w) / _3514;
                                float _3574 = (fma(_1874, _3467.z, fma(_1873, _3467.y, _3467.x * _1872)) + _3467.w) / _3514;
                                float _3578 = 1.0 - dot(vec2(_3573, _3574), vec2(_3573, _3574));
                                float _4727 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3579 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3580 = _3579 * (((isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0))) * _3556) / ((_3569 * 0.699999988079071044921875) + 1.0));
                                float _3592 = exp2(log2(1.0 / ((_3569 * 3.5) + 5.0)) * 0.25);
                                float _3593 = 1.0 - _782;
                                float _3600 = sqrt(1.0 - ((1.0 - (_3593 * _3593)) * (1.0 - (_3592 * _3592))));
                                float _3601 = _3600 * _3600;
                                float _3602 = _3601 * _3601;
                                float _3603 = _3549 - _3022;
                                float _3604 = _3550 - _3023;
                                float _3605 = _3551 - _3024;
                                float _3609 = inversesqrt(dot(vec3(_3603, _3604, _3605), vec3(_3603, _3604, _3605)));
                                float _3613 = dot(vec3(_722, _725, _728), vec3((-0.0) - _3022, (-0.0) - _3023, (-0.0) - _3024));
                                float _4738 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3616 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3617 = dot(vec3(_722, _725, _728), vec3(_3609 * _3603, _3609 * _3604, _3609 * _3605));
                                float _4749 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3620 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                                float _3624 = ((_3620 * _3620) * (_3602 + (-1.0))) + 1.0;
                                float _3625 = _3562 * _3601;
                                float _3626 = _3625 * _3625;
                                float _3632 = ((1.0 - _3626) * dot(vec3(_722, _725, _728), vec3(_3549, _3550, _3551))) + _3626;
                                float _4760 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3633 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3634 = 1.0 - _3601;
                                float _3644 = (0.5 / (((_3633 * ((_3616 * _3634) + _3601)) + 9.9999999392252902907785028219223e-09) + (((_3633 * _3634) + _3601) * _3616))) * _3633;
                                float _4771 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3654 = (_3579 * _3556) * (((_3602 * 3.1415927410125732421875) * (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) / ((_3624 * _3624) * ((_3569 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3580 * _3425.z;
                                frontier_phi_88_pred_1 = _3580 * _3425.y;
                                frontier_phi_88_pred_2 = _3580 * _3425.x;
                                frontier_phi_88_pred_3 = _3654 * _3437.z;
                                frontier_phi_88_pred_4 = _3654 * _3437.y;
                                frontier_phi_88_pred_5 = _3654 * _3437.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3663 = frontier_phi_88_pred;
                            _3662 = frontier_phi_88_pred_1;
                            _3661 = frontier_phi_88_pred_2;
                            _3660 = frontier_phi_88_pred_3;
                            _3659 = frontier_phi_88_pred_4;
                            _3658 = frontier_phi_88_pred_5;
                            _3367 = _3661 + _3380;
                            _3368 = _3662 + _3381;
                            _3369 = _3663 + _3382;
                            _3364 = _3658 + _3377;
                            _3365 = _3659 + _3378;
                            _3366 = _3660 + _3379;
                            if (_3384 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3384;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3369;
                        frontier_phi_82_pred_1 = _3368;
                        frontier_phi_82_pred_2 = _3367;
                        frontier_phi_82_pred_3 = _3366;
                        frontier_phi_82_pred_4 = _3365;
                        frontier_phi_82_pred_5 = _3364;
                    }
                    _3007 = frontier_phi_82_pred;
                    _3005 = frontier_phi_82_pred_1;
                    _3003 = frontier_phi_82_pred_2;
                    _3001 = frontier_phi_82_pred_3;
                    _2999 = frontier_phi_82_pred_4;
                    _2997 = frontier_phi_82_pred_5;
                    uint _3163 = _3162 + 1u;
                    if (_3163 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3156 = _2997;
                        _3157 = _2999;
                        _3158 = _3001;
                        _3159 = _3003;
                        _3160 = _3005;
                        _3161 = _3007;
                        _3162 = _3163;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3003;
                frontier_phi_63_64_ladder_1 = _3007;
                frontier_phi_63_64_ladder_2 = _3005;
                frontier_phi_63_64_ladder_3 = _3001;
                frontier_phi_63_64_ladder_4 = _2999;
                frontier_phi_63_64_ladder_5 = _2997;
            }
            else
            {
                frontier_phi_63_64_ladder = _2881;
                frontier_phi_63_64_ladder_1 = _2885;
                frontier_phi_63_64_ladder_2 = _2883;
                frontier_phi_63_64_ladder_3 = _2879;
                frontier_phi_63_64_ladder_4 = _2877;
                frontier_phi_63_64_ladder_5 = _2875;
            }
            _2996 = frontier_phi_63_64_ladder_5;
            _2998 = frontier_phi_63_64_ladder_4;
            _3000 = frontier_phi_63_64_ladder_3;
            _3002 = frontier_phi_63_64_ladder;
            _3004 = frontier_phi_63_64_ladder_2;
            _3006 = frontier_phi_63_64_ladder_1;
        }
        float _3011 = isnan(1.0) ? _766 : (isnan(_766) ? 1.0 : min(_766, 1.0));
        _2808 = (_3011 * _3002) + _2339;
        _2810 = (_3011 * _3004) + _2341;
        _2812 = (_3011 * _3006) + _2343;
        _2814 = ((_2996 * 0.039999999105930328369140625) * _3011) + _2662;
        _2816 = ((_2998 * 0.039999999105930328369140625) * _3011) + _2664;
        _2818 = ((_3000 * 0.039999999105930328369140625) * _3011) + _2666;
    }
    else
    {
        _2808 = _2339;
        _2810 = _2341;
        _2812 = _2343;
        _2814 = _2662;
        _2816 = _2664;
        _2818 = _2666;
    }
    float _4787 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _4798 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4809 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _2835 = ((isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2808 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _766))) + ((_2814 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1605)) * cbPerFrame._m0[3u].x);
    float _2836 = ((isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2810 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _766))) + ((_2816 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1605)) * cbPerFrame._m0[3u].x);
    float _2837 = ((isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2812 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _766))) + ((_2818 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1605)) * cbPerFrame._m0[3u].x);
    uint _2838 = _741 + 6u;
    float _2846 = _703 / cbSceneParam._m0[86u].x;
    float _2847 = _704 / cbSceneParam._m0[86u].y;
    vec4 _2861 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2846, _2847, (log2((isnan(cbSceneParam._m0[77u].w) ? _625 : (isnan(_625) ? cbSceneParam._m0[77u].w : min(_625, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2863 = _2861.x;
    float _2864 = _2861.y;
    float _2865 = _2861.z;
    float _2866 = _2861.w;
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    if (_625 > cbSceneParam._m0[78u].w)
    {
        float _2900 = isnan(_625) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _625 : min(cbSceneParam._m0[80u].w, _625));
        float _2901 = _2900 / _625;
        float _2912 = _2901 * _676;
        float _2913 = _677 * _2901;
        float _2914 = (-0.0) - _2913;
        float _2916 = _2901 * _678;
        float _2918 = (cbSceneParam._m0[77u].w * _2914) / _2900;
        float _2919 = _2918 + cbSceneParam._m0[79u].w;
        float _2920 = cbSceneParam._m0[79u].w - _2913;
        float _2926 = sqrt(((_2912 * _2912) + (_2913 * _2913)) + (_2916 * _2916));
        float _2929 = (1.0 - (cbSceneParam._m0[77u].w / _2900)) * _2926;
        float _2934 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2936 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3113;
        if (abs((_2914 - _2918) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3113 = ((((_2919 > 0.0) ? exp2(_2934 * _2919) : (2.0 - exp2(_2936 * _2919))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2929;
        }
        else
        {
            float _3057 = 1.0 / cbSceneParam._m0[80u].x;
            float _3058 = isnan(_2920) ? _2919 : (isnan(_2919) ? _2920 : max(_2919, _2920));
            float _3059 = isnan(_2920) ? _2919 : (isnan(_2919) ? _2920 : min(_2919, _2920));
            float _3068 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : min(_3058, 0.0));
            float _3069 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : min(_3059, 0.0));
            _3113 = ((abs(_2926 / _2914) * cbSceneParam._m0[80u].y) * ((((_3068 - _3069) * 2.0) - ((exp2(_2934 * (isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0)))) - exp2(_2934 * (isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0))))) * _3057)) - ((exp2(_2936 * _3068) - exp2(_2936 * _3069)) * _3057))) + (_2929 * cbSceneParam._m0[80u].z);
        }
        vec4 _3115 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2846, _2847, 1.0), 0.0);
        float _3124 = exp2((_3113 * (-1.44269502162933349609375)) * (1.0 - _3115.w));
        float _3125 = log2(_3124);
        float _3141 = log2(_2866);
        _2938 = (exp2(_3141 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3125 * cbSceneParam._m0[78u].x)) * _3115.x) / cbSceneParam._m0[78u].x)) + _2863;
        _2940 = (exp2(_3141 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3125 * cbSceneParam._m0[78u].y)) * _3115.y) / cbSceneParam._m0[78u].y)) + _2864;
        _2942 = (exp2(_3141 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3125 * cbSceneParam._m0[78u].z)) * _3115.z) / cbSceneParam._m0[78u].z)) + _2865;
        _2944 = _3124 * _2866;
    }
    else
    {
        _2938 = _2863;
        _2940 = _2864;
        _2942 = _2865;
        _2944 = _2866;
    }
    bool _3151;
    vec4 _2954;
    vec4 _2976;
    float _2978;
    float _2982;
    float _2983;
    float _2984;
    float _2985;
    bool _2995;
    for (;;)
    {
        _2954 = cbMatDynParam._m0[0u];
        float _2956 = roundEven(_2954.y);
        bool _2957 = _2956 == 3.0;
        float _2958 = log2(_2944);
        float _2965 = exp2(_2958 * cbSceneParam._m0[78u].x) * _2835;
        float _2966 = exp2(_2958 * cbSceneParam._m0[78u].y) * _2836;
        float _2967 = exp2(_2958 * cbSceneParam._m0[78u].z) * _2837;
        float _2974 = _692 + (-0.5);
        _2976 = cbMtdParam._m0[1u];
        _2978 = _2976.y * _2974;
        float _2981 = (_2956 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2982 = _2981 * (_2957 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2938)));
        _2983 = _2981 * (_2957 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2940)));
        _2984 = _2981 * (_2957 ? _2967 : (_2967 + (cbSceneParam._m0[72u].w * _2942)));
        _2985 = _2974 * 0.999000012874603271484375;
        _2995 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2995)
        {
            if ((cbInstanceData._m0[_741 + 7u].x + _2985) < 0.5)
            {
                _3151 = true;
                break;
            }
        }
        uint _3092 = _742 + uint(_2954.w);
        if ((cbInstanceData._m0[_3092].w < 1.0) && ((cbInstanceData._m0[_3092].w + _2985) < 0.5))
        {
            _3151 = true;
            break;
        }
        if ((_2978 + 1.0) < _2976.x)
        {
            _3151 = true;
            break;
        }
        _3151 = false;
        break;
    }
    float _3355;
    if (_3151)
    {
        discard_state = true;
        _3355 = 0.0;
    }
    else
    {
        _3355 = cbInstanceData._m0[_2838].w;
    }
    SV_Target.x = _2982;
    SV_Target.y = _2983;
    SV_Target.z = _2984;
    SV_Target.w = _3355;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2838].w;
    discard_exit();
}


