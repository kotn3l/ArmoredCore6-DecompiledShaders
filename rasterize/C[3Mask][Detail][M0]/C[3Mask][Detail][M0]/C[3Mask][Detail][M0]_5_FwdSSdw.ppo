#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1120;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _238 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _244 = _238.x * cbMtdParam._m0[10u].x;
    float _245 = _238.y * cbMtdParam._m0[10u].y;
    float _246 = _238.z * cbMtdParam._m0[10u].z;
    vec4 _265 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _312 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x;
    float _323 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _312)) + 1.0;
    float _3454 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _324 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    float _331 = (_324 * ((_265.x * cbMtdParam._m0[11u].x) - _244)) + _244;
    float _332 = (_324 * ((_265.y * cbMtdParam._m0[11u].y) - _245)) + _245;
    float _333 = (_324 * ((_265.z * cbMtdParam._m0[11u].z) - _246)) + _246;
    vec4 _352 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _382 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _312)) + 1.0;
    float _3465 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _390 = (_383 * ((_352.x * cbMtdParam._m0[12u].x) - _331)) + _331;
    float _391 = (_383 * ((_352.y * cbMtdParam._m0[12u].y) - _332)) + _332;
    float _392 = (_383 * ((_352.z * cbMtdParam._m0[12u].z) - _333)) + _333;
    vec4 _409 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _434 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _312)) + 1.0;
    float _3476 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _442 = (_435 * ((_409.x * cbMtdParam._m0[13u].x) - _390)) + _390;
    float _443 = (_435 * ((_409.y * cbMtdParam._m0[13u].y) - _391)) + _391;
    float _444 = (_435 * ((_409.z * cbMtdParam._m0[13u].z) - _392)) + _392;
    vec4 _456 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _474 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _476 = _474.x;
    float _477 = _474.y;
    float _483 = cbMtdParam._m0[16u].w * _474.z;
    float _486 = (((cbMtdParam._m0[17u].x * _456.z) - _483) * _324) + _483;
    vec4 _499 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _508 = (((cbMtdParam._m0[17u].y * _499.z) - _486) * _383) + _486;
    vec4 _521 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _530 = (((cbMtdParam._m0[17u].z * _521.z) - _508) * _435) + _508;
    vec4 _543 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _556 = ((_456.x - _476) * _324) + _476;
    float _557 = ((_456.y - _477) * _324) + _477;
    float _562 = ((_499.x - _556) * _383) + _556;
    float _563 = ((_499.y - _557) * _383) + _557;
    float _572 = ((((_521.x - _562) * _435) + _562) * 2.0) + (-1.0);
    float _573 = ((((_521.y - _563) * _435) + _563) * 2.0) + (-1.0);
    float _574 = dot(vec2(_572, _573), vec2(_572, _573));
    float _3487 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _579 = sqrt(1.0 - (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))));
    float _582 = (((_543.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _572;
    float _583 = (((_543.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _573;
    float _586 = fma(_579, _208 * NORMAL.x, fma(_583, _215 * TANGENT.x, (_201 * _193) * _582));
    float _589 = fma(_579, _208 * NORMAL.y, fma(_583, _215 * TANGENT.y, (_201 * _194) * _582));
    float _592 = fma(_579, _208 * NORMAL.z, fma(_583, _215 * TANGENT.z, (_201 * _195) * _582));
    float _596 = inversesqrt(dot(vec3(_586, _589, _592), vec3(_586, _589, _592)));
    float _597 = _596 * _586;
    float _598 = _596 * _589;
    float _599 = _596 * _592;
    float _3498 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _600 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _3509 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3520 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3531 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _619 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _660 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _670 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _660);
    float _671 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _660);
    float _672 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _660);
    float _676 = inversesqrt(dot(vec3(_670, _671, _672), vec3(_670, _671, _672)));
    float _677 = _670 * _676;
    float _678 = _671 * _676;
    float _679 = _672 * _676;
    float _685 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _686 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _704 = fma(_599, cbSceneParam._m0[5u].z, fma(_598, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _597));
    float _707 = fma(_599, cbSceneParam._m0[6u].z, fma(_598, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _597));
    float _710 = fma(_599, cbSceneParam._m0[7u].z, fma(_598, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _597));
    uint _723 = uint(roundEven(NORMAL.w)) * 13u;
    uint _725 = (_723 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _731 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0)))) * cbInstanceData._m0[_725].x;
    float _732 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0)))) * cbInstanceData._m0[_725].y;
    float _733 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0)))) * cbInstanceData._m0[_725].z;
    float _3542 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _3553 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _735 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _3564 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _736 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    vec4 _745 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _685, cbSceneParam._m0[86u].y * _686));
    float _748 = _745.x * TEXCOORD_5.w;
    float _749 = dot(vec3(_597, _598, _599), vec3(_677, _678, _679));
    float _752 = _749 * 2.0;
    float _756 = (_752 * _597) - _677;
    float _757 = (_752 * _598) - _678;
    float _758 = (_752 * _599) - _679;
    float _762 = abs(dot(vec3(_677, _678, _679), vec3(_597, _598, _599)));
    float _3575 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _764 = sqrt(_600);
    float _777 = exp2((_764 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_764 * 3.0));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1119;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _844 = fma(_817, cbModelParam._m0[26u].z, fma(_813, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _809));
        float _848 = fma(_817, cbModelParam._m0[27u].z, fma(_813, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _809));
        float _852 = fma(_817, cbModelParam._m0[28u].z, fma(_813, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _809));
        float _877 = _809 + _597;
        float _878 = _813 + _598;
        float _879 = _817 + _599;
        float _889 = fma(_879, cbModelParam._m0[26u].z, fma(_878, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _877)) - _844;
        float _890 = fma(_879, cbModelParam._m0[27u].z, fma(_878, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _877)) - _848;
        float _891 = fma(_879, cbModelParam._m0[28u].z, fma(_878, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _877)) - _852;
        float _895 = inversesqrt(dot(vec3(_889, _890, _891), vec3(_889, _890, _891)));
        float _908 = ((_895 * _889) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_844 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _909 = ((_895 * _890) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_848 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _910 = ((_895 * _891) / cbModelParam._m0[34u].z) + ((((((_852 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        float _947 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_913.x + (-0.5));
        float _949 = _947 * (_913.y + (-0.5));
        float _950 = _947 * (_913.z + (-0.5));
        float _957 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_920.x + (-0.5));
        float _959 = _957 * (_920.y + (-0.5));
        float _960 = _957 * (_920.z + (-0.5));
        float _967 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_927.x + (-0.5));
        float _969 = _967 * (_927.y + (-0.5));
        float _970 = _967 * (_927.z + (-0.5));
        float _977 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_934.x + (-0.5));
        float _979 = _977 * (_934.y + (-0.5));
        float _980 = _977 * (_934.z + (-0.5));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = _948 * 0.5;
        float _985 = _958 * 0.5;
        float _986 = _968 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1001 = (dot(vec3(_597, _598, _599), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1011 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3623 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_1013 + 1.0))) + _1018) * _981;
        float _1028 = _949 * 0.5;
        float _1029 = _959 * 0.5;
        float _1030 = _969 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_597, _598, _599), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3656 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_1055 + 1.0))) + _1060) * _982;
        float _1070 = _950 * 0.5;
        float _1071 = _960 * 0.5;
        float _1072 = _970 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_597, _598, _599), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3689 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1097 + 1.0))) + _1102) * _983;
        _1119 = _950;
        _1121 = _949;
        _1122 = _948;
        _1123 = _960;
        _1124 = _959;
        _1125 = _958;
        _1126 = _970;
        _1127 = _969;
        _1128 = _968;
        _1129 = _983;
        _1130 = _982;
        _1131 = _981;
        _1132 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
        _1133 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
        _1134 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
    }
    else
    {
        _1119 = _1120;
        _1121 = _1120;
        _1122 = _1120;
        _1123 = _1120;
        _1124 = _1120;
        _1125 = _1120;
        _1126 = _1120;
        _1127 = _1120;
        _1128 = _1120;
        _1129 = _1120;
        _1130 = _1120;
        _1131 = _1120;
        _1132 = 0.0;
        _1133 = 0.0;
        _1134 = 0.0;
    }
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1160 = fma(_817, cbModelParam._m0[30u].z, fma(_813, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _809));
        float _1164 = fma(_817, cbModelParam._m0[31u].z, fma(_813, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _809));
        float _1168 = fma(_817, cbModelParam._m0[32u].z, fma(_813, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _809));
        float _1191 = _809 + _597;
        float _1192 = _813 + _598;
        float _1193 = _817 + _599;
        float _1203 = fma(_1193, cbModelParam._m0[30u].z, fma(_1192, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1191)) - _1160;
        float _1204 = fma(_1193, cbModelParam._m0[31u].z, fma(_1192, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1191)) - _1164;
        float _1205 = fma(_1193, cbModelParam._m0[32u].z, fma(_1192, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1191)) - _1168;
        float _1209 = inversesqrt(dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205)));
        float _1222 = ((_1209 * _1203) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1160 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1209 * _1204) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1164 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1209 * _1205) / cbModelParam._m0[35u].z) + ((((((_1168 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        float _1259 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1226.x + (-0.5));
        float _1261 = _1259 * (_1226.y + (-0.5));
        float _1262 = _1259 * (_1226.z + (-0.5));
        float _1269 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1233.x + (-0.5));
        float _1271 = _1269 * (_1233.y + (-0.5));
        float _1272 = _1269 * (_1233.z + (-0.5));
        float _1279 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1240.x + (-0.5));
        float _1281 = _1279 * (_1240.y + (-0.5));
        float _1282 = _1279 * (_1240.z + (-0.5));
        float _1289 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1247.x + (-0.5));
        float _1291 = _1289 * (_1247.y + (-0.5));
        float _1292 = _1289 * (_1247.z + (-0.5));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = _1260 * 0.5;
        float _1297 = _1270 * 0.5;
        float _1298 = _1280 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_597, _598, _599), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _3752 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1323 + 1.0))) + _1328) * _1293;
        float _1338 = _1261 * 0.5;
        float _1339 = _1271 * 0.5;
        float _1340 = _1281 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_597, _598, _599), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _3785 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1365 + 1.0))) + _1370) * _1294;
        float _1380 = _1262 * 0.5;
        float _1381 = _1272 * 0.5;
        float _1382 = _1282 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_597, _598, _599), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _3818 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1407 + 1.0))) + _1412) * _1295;
        _1429 = _1262;
        _1430 = _1261;
        _1431 = _1260;
        _1432 = _1272;
        _1433 = _1271;
        _1434 = _1270;
        _1435 = _1282;
        _1436 = _1281;
        _1437 = _1280;
        _1438 = _1295;
        _1439 = _1294;
        _1440 = _1293;
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1442 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
    }
    else
    {
        _1429 = _1120;
        _1430 = _1120;
        _1431 = _1120;
        _1432 = _1120;
        _1433 = _1120;
        _1434 = _1120;
        _1435 = _1120;
        _1436 = _1120;
        _1437 = _1120;
        _1438 = _1120;
        _1439 = _1120;
        _1440 = _1120;
        _1441 = 0.0;
        _1442 = 0.0;
        _1443 = 0.0;
    }
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1132)) + _1132;
    float _1454 = (cbModelParam._m0[1u].x * (_1442 - _1133)) + _1133;
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1134)) + _1134;
    float _1476 = fma(_1455, cbSceneParam._m0[89u].z, fma(_1454, cbSceneParam._m0[89u].y, _1453 * cbSceneParam._m0[89u].x));
    float _1479 = fma(_1455, cbSceneParam._m0[90u].z, fma(_1454, cbSceneParam._m0[90u].y, _1453 * cbSceneParam._m0[90u].x));
    float _1482 = fma(_1455, cbSceneParam._m0[91u].z, fma(_1454, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1453));
    float _1497 = _756 * 0.5;
    float _1498 = _757 * 0.5;
    float _1499 = _758 * 0.5;
    float _1500 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1503 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1430, _1433, _1436, _1439));
    float _1506 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1540;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1513 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1119, _1123, _1126, _1129));
        float _1517 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1121, _1124, _1127, _1130));
        float _1521 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1122, _1125, _1128, _1131));
        float _1528 = dot(vec4(cbModelParam._m0[39u]), vec4(_1497, _1498, _1499, 1.0));
        _1540 = dot(vec3(isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1528) ? 0.0 : (isnan(0.0) ? _1528 : max(0.0, _1528))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1540 = 1.0;
    }
    float _1551;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1542 = dot(vec4(cbModelParam._m0[40u]), vec4(_1497, _1498, _1499, 1.0));
        _1551 = dot(vec3(isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1542) ? 0.0 : (isnan(0.0) ? _1542 : max(0.0, _1542))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1551 = 1.0;
    }
    float _1555 = (_1551 * cbModelParam._m0[1u].x) + (_1540 * (1.0 - cbModelParam._m0[1u].x));
    float _1565 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _600);
    float _1566 = isnan(_1565) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1565 : min(cbModelParam._m0[25u].z, _1565));
    float _1647;
    float _1649;
    float _1651;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1614 = fma(_817, cbModelParam._m0[13u].z, fma(_813, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _809)) + cbModelParam._m0[13u].w;
        float _1618 = fma(_817, cbModelParam._m0[14u].z, fma(_813, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _809)) + cbModelParam._m0[14u].w;
        float _1622 = fma(_817, cbModelParam._m0[15u].z, fma(_813, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _809)) + cbModelParam._m0[15u].w;
        float _1625 = fma(_758, cbModelParam._m0[13u].z, fma(_757, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _756));
        float _1628 = fma(_758, cbModelParam._m0[14u].z, fma(_757, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _756));
        float _1631 = fma(_758, cbModelParam._m0[15u].z, fma(_757, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _756));
        float _1659;
        if (_1625 > 0.0)
        {
            _1659 = abs((1.0 - _1614) / _1625);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1614 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1659 = frontier_phi_14_12_ladder;
        }
        float _1883;
        if (_1628 > 0.0)
        {
            _1883 = abs((1.0 - _1618) / _1628);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1618 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1883 = frontier_phi_23_19_ladder;
        }
        float _2129;
        if (_1631 > 0.0)
        {
            _2129 = abs((1.0 - _1622) / _1631);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1622 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2129 = frontier_phi_35_30_ladder;
        }
        float _2131 = isnan(_1883) ? _1659 : (isnan(_1659) ? _1883 : min(_1659, _1883));
        float _2132 = isnan(_2129) ? _2131 : (isnan(_2131) ? _2129 : min(_2131, _2129));
        float _2136 = (_2132 * _1625) + _1614;
        float _2137 = (_2132 * _1628) + _1618;
        float _2138 = (_2132 * _1631) + _1622;
        float _2139 = _2132 * 9.9999997473787516355514526367188e-05;
        float _2141 = (-1.0) - _2139;
        float _2143 = _2139 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2138 > _2143) || ((_2138 < _2141) || ((_2137 > _2143) || ((_2137 < _2141) || ((_2136 < _2141) || (_2136 > _2143))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2262 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2138, cbModelParam._m0[9u].z, fma(_2137, cbModelParam._m0[9u].y, _2136 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2138, cbModelParam._m0[10u].z, fma(_2137, cbModelParam._m0[10u].y, _2136 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2138, cbModelParam._m0[11u].z, fma(_2137, cbModelParam._m0[11u].y, _2136 * cbModelParam._m0[11u].x))), _1566);
            frontier_phi_13_35_ladder = _2262.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2262.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2262.x * cbModelParam._m0[1u].y;
        }
        _1647 = frontier_phi_13_35_ladder_2;
        _1649 = frontier_phi_13_35_ladder_1;
        _1651 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1635 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_756, _757, _758), _1566);
        _1647 = _1635.x * cbModelParam._m0[1u].y;
        _1649 = _1635.y * cbModelParam._m0[1u].y;
        _1651 = _1635.z * cbModelParam._m0[1u].y;
    }
    float _1655 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _600);
    float _1656 = isnan(_1655) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1655 : min(cbModelParam._m0[25u].w, _1655));
    float _1747;
    float _1749;
    float _1751;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1711 = fma(_817, cbModelParam._m0[21u].z, fma(_813, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _809)) + cbModelParam._m0[21u].w;
        float _1715 = fma(_817, cbModelParam._m0[22u].z, fma(_813, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _809)) + cbModelParam._m0[22u].w;
        float _1719 = fma(_817, cbModelParam._m0[23u].z, fma(_813, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _809)) + cbModelParam._m0[23u].w;
        float _1722 = fma(_758, cbModelParam._m0[21u].z, fma(_757, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _756));
        float _1725 = fma(_758, cbModelParam._m0[22u].z, fma(_757, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _756));
        float _1728 = fma(_758, cbModelParam._m0[23u].z, fma(_757, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _756));
        float _1888;
        if (_1722 > 0.0)
        {
            _1888 = abs((1.0 - _1711) / _1722);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1711 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1888 = frontier_phi_25_21_ladder;
        }
        float _2156;
        if (_1725 > 0.0)
        {
            _2156 = abs((1.0 - _1715) / _1725);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1715 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2156 = frontier_phi_37_32_ladder;
        }
        float _2361;
        if (_1728 > 0.0)
        {
            _2361 = abs((1.0 - _1719) / _1728);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1719 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2361 = frontier_phi_46_43_ladder;
        }
        float _2363 = isnan(_2156) ? _1888 : (isnan(_1888) ? _2156 : min(_1888, _2156));
        float _2364 = isnan(_2361) ? _2363 : (isnan(_2363) ? _2361 : min(_2363, _2361));
        float _2368 = (_2364 * _1722) + _1711;
        float _2369 = (_2364 * _1725) + _1715;
        float _2370 = (_2364 * _1728) + _1719;
        float _2371 = _2364 * 9.9999997473787516355514526367188e-05;
        float _2372 = (-1.0) - _2371;
        float _2374 = _2371 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2370 > _2374) || ((_2370 < _2372) || ((_2369 > _2374) || ((_2369 < _2372) || ((_2368 < _2372) || (_2368 > _2374))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2569 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2370, cbModelParam._m0[17u].z, fma(_2369, cbModelParam._m0[17u].y, _2368 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2370, cbModelParam._m0[18u].z, fma(_2369, cbModelParam._m0[18u].y, _2368 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2370, cbModelParam._m0[19u].z, fma(_2369, cbModelParam._m0[19u].y, _2368 * cbModelParam._m0[19u].x))), _1656);
            frontier_phi_22_46_ladder = _2569.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2569.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2569.x * cbModelParam._m0[1u].z;
        }
        _1747 = frontier_phi_22_46_ladder_2;
        _1749 = frontier_phi_22_46_ladder_1;
        _1751 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1731 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_756, _757, _758), _1656);
        _1747 = _1731.x * cbModelParam._m0[1u].z;
        _1749 = _1731.y * cbModelParam._m0[1u].z;
        _1751 = _1731.z * cbModelParam._m0[1u].z;
    }
    float _1763 = ((((1.0 - _777) * ((_764 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_777 * _764)) * _748;
    float _1764 = _1763 * ((cbModelParam._m0[1u].w * (_1747 - _1647)) + _1647);
    float _1765 = _1763 * ((cbModelParam._m0[1u].w * (_1749 - _1649)) + _1649);
    float _1766 = _1763 * ((cbModelParam._m0[1u].w * (_1751 - _1651)) + _1651);
    float _1769 = fma(_1766, cbSceneParam._m0[89u].z, fma(_1765, cbSceneParam._m0[89u].y, _1764 * cbSceneParam._m0[89u].x));
    float _1772 = fma(_1766, cbSceneParam._m0[90u].z, fma(_1765, cbSceneParam._m0[90u].y, _1764 * cbSceneParam._m0[90u].x));
    float _1775 = fma(_1766, cbSceneParam._m0[91u].z, fma(_1765, cbSceneParam._m0[91u].y, _1764 * cbSceneParam._m0[91u].x));
    vec4 _1783 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_685, _686));
    float _1785 = _1783.w;
    float _1797 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1785);
    float _1798 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1785);
    float _1799 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1785);
    uvec4 _1803 = floatBitsToUint(cbInstanceData._m0[_723 + 5u]);
    uint _1805 = _1803.x * 14u;
    uint _1806 = _1805 + 13u;
    float _1813 = _748 + (-1.0);
    float _1818 = (cbLight._m0[_1806].x * _1813) + 1.0;
    float _1819 = (cbLight._m0[_1806].y * _1813) + 1.0;
    float _1820 = (cbLight._m0[_1806].z * _1813) + 1.0;
    float _1821 = (cbLight._m0[_1806].w * _1813) + 1.0;
    uint _1822 = _1805 + 5u;
    float _1828 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
    uint _1832 = _1805 + 4u;
    float _1842 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
    uint _1846 = _1805 | 1u;
    float _1857 = dot(vec3(cbLight._m0[_1805].xyz), vec3(_597, _598, _599));
    float _1860 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_597, _598, _599));
    float _3954 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _3965 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1865 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * 0.3183098733425140380859375;
    float _1867 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * 0.3183098733425140380859375;
    float _1874 = ((cbLight._m0[_1822].x * _1828) * _1867) + (((cbLight._m0[_1832].x * _1797) * _1842) * _1865);
    float _1875 = ((_1828 * cbLight._m0[_1822].y) * _1867) + (((cbLight._m0[_1832].y * _1798) * _1842) * _1865);
    float _1876 = ((_1828 * cbLight._m0[_1822].z) * _1867) + (((cbLight._m0[_1832].z * _1799) * _1842) * _1865);
    uvec4 _1880 = floatBitsToUint(cbLight._m0[_1805 + 12u]);
    bool _1882 = _1880.x == 0u;
    float _1893;
    float _1895;
    float _1897;
    if (_1882)
    {
        _1893 = _1874;
        _1895 = _1875;
        _1897 = _1876;
    }
    else
    {
        uint _1901 = _1805 + 6u;
        float _1917 = (dot(vec3(cbLight._m0[_1805 + 2u].xyz), vec3(_597, _598, _599)) * 0.5) + 0.5;
        float _1918 = _1917 * _1917;
        float _3976 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1919 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1920 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
        _1893 = (((cbLight._m0[_1901].x * 0.3183098733425140380859375) * _1919) * _1920) + _1874;
        _1895 = (((cbLight._m0[_1901].y * 0.3183098733425140380859375) * _1919) * _1920) + _1875;
        _1897 = (((cbLight._m0[_1901].z * 0.3183098733425140380859375) * _1919) * _1920) + _1876;
    }
    bool _1900 = _1880.y == 0u;
    float _1938;
    float _1940;
    float _1942;
    if (_1900)
    {
        _1938 = _1893;
        _1940 = _1895;
        _1942 = _1897;
    }
    else
    {
        uint _2100 = _1805 + 7u;
        float _2116 = (dot(vec3(cbLight._m0[_1805 + 3u].xyz), vec3(_597, _598, _599)) * 0.5) + 0.5;
        float _2117 = _2116 * _2116;
        float _3992 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2118 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _2119 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
        _1938 = (((cbLight._m0[_2100].x * 0.3183098733425140380859375) * _2118) * _2119) + _1893;
        _1940 = (((cbLight._m0[_2100].y * 0.3183098733425140380859375) * _2118) * _2119) + _1895;
        _1942 = (((cbLight._m0[_2100].z * 0.3183098733425140380859375) * _2118) * _2119) + _1897;
    }
    uint _1945 = _1805 + 8u;
    float _1958 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1805].w)) * _600) * 0.949999988079071044921875);
    float _1959 = _1958 * _1958;
    float _1960 = cbLight._m0[_1805].x + _677;
    float _1961 = cbLight._m0[_1805].y + _678;
    float _1962 = cbLight._m0[_1805].z + _679;
    float _1966 = inversesqrt(dot(vec3(_1960, _1961, _1962), vec3(_1960, _1961, _1962)));
    float _1967 = _1966 * _1960;
    float _1968 = _1966 * _1961;
    float _1969 = _1966 * _1962;
    float _1970 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_1805].xyz));
    float _4008 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1973 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _4019 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _1974 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _1975 = dot(vec3(_597, _598, _599), vec3(_1967, _1968, _1969));
    float _4030 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _1979 = dot(vec3(cbLight._m0[_1805].xyz), vec3(_1967, _1968, _1969));
    float _4041 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1983 = _1959 * _1959;
    float _1987 = ((_1978 * _1978) * (_1983 + (-1.0))) + 1.0;
    float _1998 = (exp2(log2(1.0 - (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1999 = 1.0 - _1959;
    float _2010 = (0.5 / (((_1974 * ((_1973 * _1999) + _1959)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _1999) + _1959) * _1973))) * _1973;
    float _4052 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2012 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1983 / ((_1987 * _1987) * 3.141590118408203125));
    uint _2026 = _1805 + 9u;
    float _2037 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1846].w)) * _600) * 0.949999988079071044921875);
    float _2038 = _2037 * _2037;
    float _2039 = cbLight._m0[_1846].x + _677;
    float _2040 = cbLight._m0[_1846].y + _678;
    float _2041 = cbLight._m0[_1846].z + _679;
    float _2045 = inversesqrt(dot(vec3(_2039, _2040, _2041), vec3(_2039, _2040, _2041)));
    float _2046 = _2045 * _2039;
    float _2047 = _2045 * _2040;
    float _2048 = _2045 * _2041;
    float _2049 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_1846].xyz));
    float _4063 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2052 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _2053 = dot(vec3(_597, _598, _599), vec3(_2046, _2047, _2048));
    float _4074 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2056 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _2057 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_2046, _2047, _2048));
    float _4085 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2061 = _2038 * _2038;
    float _2065 = ((_2056 * _2056) * (_2061 + (-1.0))) + 1.0;
    float _2074 = (exp2(log2(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2075 = 1.0 - _2038;
    float _2085 = (0.5 / (((_1974 * ((_2052 * _2075) + _2038)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _2075) + _2038) * _2052))) * _2052;
    float _4096 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2087 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_2061 / ((_2065 * _2065) * 3.141590118408203125));
    float _2097 = (((_2074 * cbLight._m0[_2026].x) * _2087) * _1828) + ((((cbLight._m0[_1945].x * _1797) * _1998) * _2012) * _1842);
    float _2098 = (((_2074 * cbLight._m0[_2026].y) * _2087) * _1828) + ((((cbLight._m0[_1945].y * _1798) * _1998) * _2012) * _1842);
    float _2099 = (((_2074 * cbLight._m0[_2026].z) * _2087) * _1828) + ((((cbLight._m0[_1945].z * _1799) * _1998) * _2012) * _1842);
    float _2161;
    float _2163;
    float _2165;
    if (_1882)
    {
        _2161 = _2097;
        _2163 = _2098;
        _2165 = _2099;
    }
    else
    {
        uint _2167 = _1805 + 2u;
        uint _2171 = _1805 + 10u;
        float _2185 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2167].w)) * _600) * 0.949999988079071044921875);
        float _2186 = _2185 * _2185;
        float _2187 = cbLight._m0[_2167].x + _677;
        float _2188 = cbLight._m0[_2167].y + _678;
        float _2189 = cbLight._m0[_2167].z + _679;
        float _2193 = inversesqrt(dot(vec3(_2187, _2188, _2189), vec3(_2187, _2188, _2189)));
        float _2194 = _2193 * _2187;
        float _2195 = _2193 * _2188;
        float _2196 = _2193 * _2189;
        float _2197 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_2167].xyz));
        float _4107 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2200 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _2201 = dot(vec3(_597, _598, _599), vec3(_2194, _2195, _2196));
        float _4118 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2204 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _2205 = dot(vec3(cbLight._m0[_2167].xyz), vec3(_2194, _2195, _2196));
        float _4129 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2209 = _2186 * _2186;
        float _2213 = ((_2204 * _2204) * (_2209 + (-1.0))) + 1.0;
        float _2222 = (exp2(log2(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2223 = 1.0 - _2186;
        float _2233 = (0.5 / (((_1974 * ((_2200 * _2223) + _2186)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _2223) + _2186) * _2200))) * _2200;
        float _4140 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2235 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2209 / ((_2213 * _2213) * 3.141590118408203125));
        float _2236 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
        _2161 = (((_2222 * cbLight._m0[_2171].x) * _2235) * _2236) + _2097;
        _2163 = (((_2222 * cbLight._m0[_2171].y) * _2235) * _2236) + _2098;
        _2165 = (((_2222 * cbLight._m0[_2171].z) * _2235) * _2236) + _2099;
    }
    float _2271;
    float _2273;
    float _2275;
    if (_1900)
    {
        _2271 = _2161;
        _2273 = _2163;
        _2275 = _2165;
    }
    else
    {
        uint _2282 = _1805 + 3u;
        uint _2286 = _1805 + 11u;
        float _2300 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2282].w)) * _600) * 0.949999988079071044921875);
        float _2301 = _2300 * _2300;
        float _2302 = cbLight._m0[_2282].x + _677;
        float _2303 = cbLight._m0[_2282].y + _678;
        float _2304 = cbLight._m0[_2282].z + _679;
        float _2308 = inversesqrt(dot(vec3(_2302, _2303, _2304), vec3(_2302, _2303, _2304)));
        float _2309 = _2308 * _2302;
        float _2310 = _2308 * _2303;
        float _2311 = _2308 * _2304;
        float _2312 = dot(vec3(_597, _598, _599), vec3(cbLight._m0[_2282].xyz));
        float _4156 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2315 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2316 = dot(vec3(_597, _598, _599), vec3(_2309, _2310, _2311));
        float _4167 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2319 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _2320 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_2309, _2310, _2311));
        float _4178 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2324 = _2301 * _2301;
        float _2328 = ((_2319 * _2319) * (_2324 + (-1.0))) + 1.0;
        float _2337 = (exp2(log2(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2338 = 1.0 - _2301;
        float _2348 = (0.5 / (((_1974 * ((_2315 * _2338) + _2301)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _2338) + _2301) * _2315))) * _2315;
        float _4189 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2350 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2324 / ((_2328 * _2328) * 3.141590118408203125));
        float _2351 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
        _2271 = (((_2337 * cbLight._m0[_2286].x) * _2350) * _2351) + _2161;
        _2273 = (((_2337 * cbLight._m0[_2286].y) * _2350) * _2351) + _2163;
        _2275 = (((_2337 * cbLight._m0[_2286].z) * _2350) * _2351) + _2165;
    }
    float _2486;
    float _2488;
    float _2490;
    float _2492;
    float _2494;
    float _2496;
    if (_1803.y == 0u)
    {
        float _2426 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2427 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2426;
        float _2428 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2426;
        float _2429 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2426;
        uvec4 _2441 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2442 = _2441.x;
        uint _2453 = uint((float(_2441.y) * floor(float(uint(cbSceneParam._m0[85u].y * _686) / _2442))) + floor(float(uint(cbSceneParam._m0[85u].x * _685) / _2442)));
        float _2463 = (log2(_2429 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2464 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        uint _2467 = uint(isnan(14.0) ? _2464 : (isnan(_2464) ? 14.0 : min(_2464, 14.0)));
        uvec4 _2472 = texelFetch(g_lightClusterGridBuffer, int(((_2467 << 2u) + (_2453 << 6u)) >> 2u));
        uint _2473 = _2472.x;
        uint _2474 = _2441.z;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        if (((((1u << ((_2474 >> 4u) & 15u)) + 4294967295u) & _2473) == 0u) || ((_2474 & 240u) == 0u))
        {
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
            _2582 = 0.0;
            _2584 = 0.0;
        }
        else
        {
            float _2575;
            float _2577;
            float _2579;
            float _2581;
            float _2583;
            float _2585;
            float _2719 = 0.0;
            float _2720 = 0.0;
            float _2721 = 0.0;
            float _2722 = 0.0;
            float _2723 = 0.0;
            float _2724 = 0.0;
            uint _2725 = 0u;
            uint _2734;
            bool _2735;
            for (;;)
            {
                _2734 = texelFetch(g_lightClassification, int((((_2467 << 5u) + (_2453 << 9u)) + (_2725 << 2u)) >> 2u)).x;
                _2735 = _2734 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2735)
                {
                    frontier_phi_61_pred = _2719;
                    frontier_phi_61_pred_1 = _2724;
                    frontier_phi_61_pred_2 = _2723;
                    frontier_phi_61_pred_3 = _2722;
                    frontier_phi_61_pred_4 = _2721;
                    frontier_phi_61_pred_5 = _2720;
                }
                else
                {
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    uint _2849;
                    _2843 = _2719;
                    _2844 = _2720;
                    _2845 = _2721;
                    _2846 = _2722;
                    _2847 = _2723;
                    _2848 = _2724;
                    _2849 = _2734;
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    for (;;)
                    {
                        uint _2853 = uint(findLSB(_2849)) + (_2725 << 5u);
                        uint _2850 = (_2849 + 4294967295u) & _2849;
                        uint _2855 = _2853 * 48u;
                        vec4 _2869 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2855)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 3u)).x));
                        uint _2875 = (_2853 * 48u) + 4u;
                        vec4 _2888 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2875)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 3u)).x));
                        uint _2894 = (_2853 * 48u) + 8u;
                        vec3 _2905 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2894)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 2u)).x));
                        float _2909 = _2869.x - _2427;
                        float _2910 = _2869.y - _2428;
                        float _2911 = _2869.z - _2429;
                        float _2912 = dot(vec3(_2909, _2910, _2911), vec3(_2909, _2910, _2911));
                        float _2915 = inversesqrt(_2912);
                        float _2916 = _2915 * _2909;
                        float _2917 = _2915 * _2910;
                        float _2918 = _2915 * _2911;
                        float _2919 = dot(vec3(_704, _707, _710), vec3(_2916, _2917, _2918));
                        float _2924 = 1.0 - (_2912 * _2869.w);
                        float _4215 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                        float _2925 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                        float _2926 = sqrt(_2912) * _2888.w;
                        float _2929 = 1.39999997615814208984375 / (_2926 + 1.39999997615814208984375);
                        float _2930 = _2929 * _2929;
                        float _2933 = ((1.0 - _2930) * _2919) + _2930;
                        float _2936 = _2926 * _2926;
                        float _2940 = ((isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0))) * _2925) / ((_2936 * 0.699999988079071044921875) + 1.0);
                        float _2944 = (-0.0) - _2427;
                        float _2945 = (-0.0) - _2428;
                        float _2946 = (-0.0) - _2429;
                        float _2950 = inversesqrt(dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946)));
                        float _2951 = _2950 * _2944;
                        float _2952 = _2950 * _2945;
                        float _2953 = _2950 * _2946;
                        float _2961 = exp2(log2(1.0 / ((_2936 * 3.5) + 5.0)) * 0.25);
                        float _2962 = 1.0 - _764;
                        float _2969 = sqrt(1.0 - ((1.0 - (_2962 * _2962)) * (1.0 - (_2961 * _2961))));
                        float _2970 = _2969 * _2969;
                        float _2971 = _2970 * _2970;
                        float _2972 = _2951 + _2916;
                        float _2973 = _2952 + _2917;
                        float _2974 = _2953 + _2918;
                        float _2978 = inversesqrt(dot(vec3(_2972, _2973, _2974), vec3(_2972, _2973, _2974)));
                        float _2982 = dot(vec3(_704, _707, _710), vec3(_2951, _2952, _2953));
                        float _4231 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                        float _2985 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                        float _2986 = dot(vec3(_704, _707, _710), vec3(_2978 * _2972, _2978 * _2973, _2978 * _2974));
                        float _4242 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                        float _2989 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                        float _2993 = ((_2989 * _2989) * (_2971 + (-1.0))) + 1.0;
                        float _2994 = _2929 * _2970;
                        float _2995 = _2994 * _2994;
                        float _2998 = ((1.0 - _2995) * _2919) + _2995;
                        float _4253 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _2999 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                        float _3000 = 1.0 - _2970;
                        float _3010 = (0.5 / (((_2999 * ((_2985 * _3000) + _2970)) + 9.9999999392252902907785028219223e-09) + (((_2999 * _3000) + _2970) * _2985))) * _2999;
                        float _4264 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                        float _3021 = (((_2971 * 3.1415927410125732421875) * (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) / ((_2993 * _2993) * ((_2936 * 2.1991131305694580078125) + 3.141590118408203125))) * _2925;
                        _2778 = (_2940 * _2888.x) + _2846;
                        _2779 = (_2940 * _2888.y) + _2847;
                        _2780 = (_2940 * _2888.z) + _2848;
                        _2775 = (_3021 * _2905.x) + _2843;
                        _2776 = (_3021 * _2905.y) + _2844;
                        _2777 = (_3021 * _2905.z) + _2845;
                        if (_2850 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2843 = _2775;
                            _2844 = _2776;
                            _2845 = _2777;
                            _2846 = _2778;
                            _2847 = _2779;
                            _2848 = _2780;
                            _2849 = _2850;
                        }
                    }
                    frontier_phi_61_pred = _2775;
                    frontier_phi_61_pred_1 = _2780;
                    frontier_phi_61_pred_2 = _2779;
                    frontier_phi_61_pred_3 = _2778;
                    frontier_phi_61_pred_4 = _2777;
                    frontier_phi_61_pred_5 = _2776;
                }
                _2575 = frontier_phi_61_pred;
                _2585 = frontier_phi_61_pred_1;
                _2583 = frontier_phi_61_pred_2;
                _2581 = frontier_phi_61_pred_3;
                _2579 = frontier_phi_61_pred_4;
                _2577 = frontier_phi_61_pred_5;
                uint _2726 = _2725 + 1u;
                if (_2726 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2719 = _2575;
                    _2720 = _2577;
                    _2721 = _2579;
                    _2722 = _2581;
                    _2723 = _2583;
                    _2724 = _2585;
                    _2725 = _2726;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
            _2582 = _2583;
            _2584 = _2585;
        }
        uvec4 _2588 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2589 = _2588.z;
        uint _2591 = (_2589 >> 8u) & 15u;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        if (((4294967295u << _2591) & _2473) == 0u)
        {
            _2687 = _2574;
            _2689 = _2576;
            _2691 = _2578;
            _2693 = _2580;
            _2695 = _2582;
            _2697 = _2584;
        }
        else
        {
            float _2712 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
            float _2713 = _2712 * _2427;
            float _2714 = _2712 * _2428;
            float _2715 = _2712 * _2429;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2591 < ((_2589 >> 12u) & 15u))
            {
                float _2688;
                float _2690;
                float _2692;
                float _2694;
                float _2696;
                float _2698;
                float _2826 = _2574;
                float _2827 = _2576;
                float _2828 = _2578;
                float _2829 = _2580;
                float _2830 = _2582;
                float _2831 = _2584;
                uint _2832 = _2591;
                uint _2841;
                bool _2842;
                for (;;)
                {
                    _2841 = texelFetch(g_lightClassification, int((((_2467 << 5u) + (_2453 << 9u)) + (_2832 << 2u)) >> 2u)).x;
                    _2842 = _2841 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2842)
                    {
                        frontier_phi_67_pred = _2829;
                        frontier_phi_67_pred_1 = _2830;
                        frontier_phi_67_pred_2 = _2831;
                        frontier_phi_67_pred_3 = _2828;
                        frontier_phi_67_pred_4 = _2827;
                        frontier_phi_67_pred_5 = _2826;
                    }
                    else
                    {
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3039 = _2826;
                        float _3040 = _2827;
                        float _3041 = _2828;
                        float _3042 = _2829;
                        float _3043 = _2830;
                        float _3044 = _2831;
                        uint _3045 = _2841;
                        uint _3046;
                        vec4 _3071;
                        float _3072;
                        vec4 _3087;
                        vec3 _3099;
                        vec4 _3114;
                        vec4 _3129;
                        float _3176;
                        bool _3177;
                        for (;;)
                        {
                            uint _3056 = ((_2832 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3045));
                            _3046 = (_3045 + 4294967295u) & _3045;
                            uint _3058 = _3056 * 40u;
                            _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            _3072 = _3071.w;
                            uint _3074 = (_3056 * 40u) + 4u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            uint _3089 = (_3056 * 40u) + 8u;
                            _3099 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x));
                            uint _3101 = (_3056 * 40u) + 16u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3116 = (_3056 * 40u) + 20u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3132 = (_3056 * 40u) + 24u;
                            vec4 _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            uint _3151 = (_3056 * 40u) + 28u;
                            vec4 _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            _3176 = fma(_2429, _3164.z, fma(_2428, _3164.y, _3164.x * _2427)) + _3164.w;
                            _3177 = !((fma(_2429, _3145.z, fma(_2428, _3145.y, _3145.x * _2427)) + _3145.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3177)
                            {
                                float _3204 = _3071.x - _2427;
                                float _3205 = _3071.y - _2428;
                                float _3206 = _3071.z - _2429;
                                float _3207 = dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206));
                                float _3210 = inversesqrt(_3207);
                                float _3211 = _3210 * _3204;
                                float _3212 = _3210 * _3205;
                                float _3213 = _3210 * _3206;
                                float _3217 = 1.0 - (_3207 / (_3072 * _3072));
                                float _4275 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                                float _3218 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                                float _3222 = sqrt(_3207) * _3087.w;
                                float _3224 = 1.39999997615814208984375 / (_3222 + 1.39999997615814208984375);
                                float _3225 = _3224 * _3224;
                                float _3228 = ((1.0 - _3225) * dot(vec3(_3211, _3212, _3213), vec3(_704, _707, _710))) + _3225;
                                float _3231 = _3222 * _3222;
                                float _3235 = (fma(_2429, _3114.z, fma(_2428, _3114.y, _3114.x * _2427)) + _3114.w) / _3176;
                                float _3236 = (fma(_2429, _3129.z, fma(_2428, _3129.y, _3129.x * _2427)) + _3129.w) / _3176;
                                float _3240 = 1.0 - dot(vec2(_3235, _3236), vec2(_3235, _3236));
                                float _4291 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3241 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                                float _3242 = _3241 * (((isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0))) * _3218) / ((_3231 * 0.699999988079071044921875) + 1.0));
                                float _3254 = exp2(log2(1.0 / ((_3231 * 3.5) + 5.0)) * 0.25);
                                float _3255 = 1.0 - _764;
                                float _3262 = sqrt(1.0 - ((1.0 - (_3255 * _3255)) * (1.0 - (_3254 * _3254))));
                                float _3263 = _3262 * _3262;
                                float _3264 = _3263 * _3263;
                                float _3265 = _3211 - _2713;
                                float _3266 = _3212 - _2714;
                                float _3267 = _3213 - _2715;
                                float _3271 = inversesqrt(dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267)));
                                float _3275 = dot(vec3(_704, _707, _710), vec3((-0.0) - _2713, (-0.0) - _2714, (-0.0) - _2715));
                                float _4302 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3278 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                                float _3279 = dot(vec3(_704, _707, _710), vec3(_3271 * _3265, _3271 * _3266, _3271 * _3267));
                                float _4313 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3282 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                                float _3286 = ((_3282 * _3282) * (_3264 + (-1.0))) + 1.0;
                                float _3287 = _3224 * _3263;
                                float _3288 = _3287 * _3287;
                                float _3294 = ((1.0 - _3288) * dot(vec3(_704, _707, _710), vec3(_3211, _3212, _3213))) + _3288;
                                float _4324 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3295 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                                float _3296 = 1.0 - _3263;
                                float _3306 = (0.5 / (((_3295 * ((_3278 * _3296) + _3263)) + 9.9999999392252902907785028219223e-09) + (((_3295 * _3296) + _3263) * _3278))) * _3295;
                                float _4335 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3316 = (_3241 * _3218) * (((_3264 * 3.1415927410125732421875) * (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) / ((_3286 * _3286) * ((_3231 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3316 * _3099.x;
                                frontier_phi_73_pred_1 = _3316 * _3099.y;
                                frontier_phi_73_pred_2 = _3242 * _3087.z;
                                frontier_phi_73_pred_3 = _3242 * _3087.y;
                                frontier_phi_73_pred_4 = _3242 * _3087.x;
                                frontier_phi_73_pred_5 = _3316 * _3099.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3320 = frontier_phi_73_pred;
                            _3321 = frontier_phi_73_pred_1;
                            _3325 = frontier_phi_73_pred_2;
                            _3324 = frontier_phi_73_pred_3;
                            _3323 = frontier_phi_73_pred_4;
                            _3322 = frontier_phi_73_pred_5;
                            _3029 = _3323 + _3042;
                            _3030 = _3324 + _3043;
                            _3031 = _3325 + _3044;
                            _3026 = _3320 + _3039;
                            _3027 = _3321 + _3040;
                            _3028 = _3322 + _3041;
                            if (_3046 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3046;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3029;
                        frontier_phi_67_pred_1 = _3030;
                        frontier_phi_67_pred_2 = _3031;
                        frontier_phi_67_pred_3 = _3028;
                        frontier_phi_67_pred_4 = _3027;
                        frontier_phi_67_pred_5 = _3026;
                    }
                    _2694 = frontier_phi_67_pred;
                    _2696 = frontier_phi_67_pred_1;
                    _2698 = frontier_phi_67_pred_2;
                    _2692 = frontier_phi_67_pred_3;
                    _2690 = frontier_phi_67_pred_4;
                    _2688 = frontier_phi_67_pred_5;
                    uint _2833 = _2832 + 1u;
                    if (_2833 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2826 = _2688;
                        _2827 = _2690;
                        _2828 = _2692;
                        _2829 = _2694;
                        _2830 = _2696;
                        _2831 = _2698;
                        _2832 = _2833;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2696;
                frontier_phi_55_56_ladder_1 = _2698;
                frontier_phi_55_56_ladder_2 = _2694;
                frontier_phi_55_56_ladder_3 = _2692;
                frontier_phi_55_56_ladder_4 = _2690;
                frontier_phi_55_56_ladder_5 = _2688;
            }
            else
            {
                frontier_phi_55_56_ladder = _2582;
                frontier_phi_55_56_ladder_1 = _2584;
                frontier_phi_55_56_ladder_2 = _2580;
                frontier_phi_55_56_ladder_3 = _2578;
                frontier_phi_55_56_ladder_4 = _2576;
                frontier_phi_55_56_ladder_5 = _2574;
            }
            _2687 = frontier_phi_55_56_ladder_5;
            _2689 = frontier_phi_55_56_ladder_4;
            _2691 = frontier_phi_55_56_ladder_3;
            _2693 = frontier_phi_55_56_ladder_2;
            _2695 = frontier_phi_55_56_ladder;
            _2697 = frontier_phi_55_56_ladder_1;
        }
        float _2702 = isnan(1.0) ? _748 : (isnan(_748) ? 1.0 : min(_748, 1.0));
        _2486 = (_2702 * _2693) + _1938;
        _2488 = (_2702 * _2695) + _1940;
        _2490 = (_2702 * _2697) + _1942;
        _2492 = ((_2687 * 0.039999999105930328369140625) * _2702) + _2271;
        _2494 = ((_2689 * 0.039999999105930328369140625) * _2702) + _2273;
        _2496 = ((_2691 * 0.039999999105930328369140625) * _2702) + _2275;
    }
    else
    {
        _2486 = _1938;
        _2488 = _1940;
        _2490 = _1942;
        _2492 = _2271;
        _2494 = _2273;
        _2496 = _2275;
    }
    float _4351 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _4362 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _4373 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    uint _2516 = _723 + 6u;
    float _2524 = _685 / cbSceneParam._m0[86u].x;
    float _2525 = _686 / cbSceneParam._m0[86u].y;
    vec4 _2539 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2524, _2525, (log2((isnan(cbSceneParam._m0[77u].w) ? _619 : (isnan(_619) ? cbSceneParam._m0[77u].w : min(_619, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2541 = _2539.x;
    float _2542 = _2539.y;
    float _2543 = _2539.z;
    float _2544 = _2539.w;
    float _2637;
    float _2639;
    float _2641;
    float _2643;
    if (_619 > cbSceneParam._m0[78u].w)
    {
        float _2599 = isnan(_619) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _619 : min(cbSceneParam._m0[80u].w, _619));
        float _2600 = _2599 / _619;
        float _2611 = _2600 * _670;
        float _2612 = _671 * _2600;
        float _2613 = (-0.0) - _2612;
        float _2615 = _2600 * _672;
        float _2617 = (cbSceneParam._m0[77u].w * _2613) / _2599;
        float _2618 = _2617 + cbSceneParam._m0[79u].w;
        float _2619 = cbSceneParam._m0[79u].w - _2612;
        float _2625 = sqrt(((_2611 * _2611) + (_2612 * _2612)) + (_2615 * _2615));
        float _2628 = (1.0 - (cbSceneParam._m0[77u].w / _2599)) * _2625;
        float _2633 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2635 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2788;
        if (abs((_2613 - _2617) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2788 = ((((_2618 > 0.0) ? exp2(_2633 * _2618) : (2.0 - exp2(_2635 * _2618))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2628;
        }
        else
        {
            float _2748 = 1.0 / cbSceneParam._m0[80u].x;
            float _2749 = isnan(_2619) ? _2618 : (isnan(_2618) ? _2619 : max(_2618, _2619));
            float _2750 = isnan(_2619) ? _2618 : (isnan(_2618) ? _2619 : min(_2618, _2619));
            float _2759 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : min(_2749, 0.0));
            float _2760 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : min(_2750, 0.0));
            _2788 = ((abs(_2625 / _2613) * cbSceneParam._m0[80u].y) * ((((_2759 - _2760) * 2.0) - ((exp2(_2633 * (isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0)))) - exp2(_2633 * (isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0))))) * _2748)) - ((exp2(_2635 * _2759) - exp2(_2635 * _2760)) * _2748))) + (_2628 * cbSceneParam._m0[80u].z);
        }
        vec4 _2790 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2524, _2525, 1.0), 0.0);
        float _2799 = exp2((_2788 * (-1.44269502162933349609375)) * (1.0 - _2790.w));
        float _2800 = log2(_2799);
        float _2816 = log2(_2544);
        _2637 = (exp2(_2816 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2800 * cbSceneParam._m0[78u].x)) * _2790.x) / cbSceneParam._m0[78u].x)) + _2541;
        _2639 = (exp2(_2816 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2800 * cbSceneParam._m0[78u].y)) * _2790.y) / cbSceneParam._m0[78u].y)) + _2542;
        _2641 = (exp2(_2816 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2800 * cbSceneParam._m0[78u].z)) * _2790.z) / cbSceneParam._m0[78u].z)) + _2543;
        _2643 = _2799 * _2544;
    }
    else
    {
        _2637 = _2541;
        _2639 = _2542;
        _2641 = _2543;
        _2643 = _2544;
    }
    float _2655 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2656 = _2655 == 3.0;
    float _2657 = log2(_2643);
    float _2664 = exp2(_2657 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2486 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _748))) + ((_2492 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1555)) * cbPerFrame._m0[3u].x));
    float _2665 = exp2(_2657 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2488 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _748))) + ((_2494 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1555)) * cbPerFrame._m0[3u].x));
    float _2666 = exp2(_2657 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2490 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _748))) + ((_2496 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1555)) * cbPerFrame._m0[3u].x));
    float _2675 = (_2655 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2675 * (_2656 ? _2664 : (_2664 + (cbSceneParam._m0[72u].w * _2637)));
    SV_Target.y = _2675 * (_2656 ? _2665 : (_2665 + (cbSceneParam._m0[72u].w * _2639)));
    SV_Target.z = _2675 * (_2656 ? _2666 : (_2666 + (cbSceneParam._m0[72u].w * _2641)));
    SV_Target.w = cbInstanceData._m0[_2516].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2516].w;
}


