#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1139;
float _3527;
float _3528;
float _3529;
float _3530;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _195 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _196 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _197 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_195, _196, _197), vec3(_195, _196, _197)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _240 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _246 = _240.x * cbMtdParam._m0[10u].x;
    float _247 = _240.y * cbMtdParam._m0[10u].y;
    float _248 = _240.z * cbMtdParam._m0[10u].z;
    vec4 _267 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _314 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x;
    float _325 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _314)) + 1.0;
    float _3539 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _326 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _333 = (_326 * ((_267.x * cbMtdParam._m0[11u].x) - _246)) + _246;
    float _334 = (_326 * ((_267.y * cbMtdParam._m0[11u].y) - _247)) + _247;
    float _335 = (_326 * ((_267.z * cbMtdParam._m0[11u].z) - _248)) + _248;
    vec4 _354 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _384 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _314)) + 1.0;
    float _3550 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _392 = (_385 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _393 = (_385 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _394 = (_385 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    vec4 _411 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _436 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _314)) + 1.0;
    float _3561 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _444 = (_437 * ((_411.x * cbMtdParam._m0[13u].x) - _392)) + _392;
    float _445 = (_437 * ((_411.y * cbMtdParam._m0[13u].y) - _393)) + _393;
    float _446 = (_437 * ((_411.z * cbMtdParam._m0[13u].z) - _394)) + _394;
    vec4 _458 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _476 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _478 = _476.x;
    float _479 = _476.y;
    float _485 = cbMtdParam._m0[16u].w * _476.z;
    float _488 = (((cbMtdParam._m0[17u].x * _458.z) - _485) * _326) + _485;
    vec4 _501 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _510 = (((cbMtdParam._m0[17u].y * _501.z) - _488) * _385) + _488;
    vec4 _523 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _532 = (((cbMtdParam._m0[17u].z * _523.z) - _510) * _437) + _510;
    float _537 = ((_458.x - _478) * _326) + _478;
    float _538 = ((_458.y - _479) * _326) + _479;
    float _543 = ((_501.x - _537) * _385) + _537;
    float _544 = ((_501.y - _538) * _385) + _538;
    float _553 = ((((_523.x - _543) * _437) + _543) * 2.0) + (-1.0);
    float _555 = ((((_523.y - _544) * _437) + _544) * 2.0) + (-1.0);
    float _556 = dot(vec2(_553, _555), vec2(_553, _555));
    float _3572 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _561 = sqrt(1.0 - (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))));
    float _564 = fma(_561, _210 * NORMAL.x, fma(_555, _217 * TANGENT.x, (_203 * _195) * _553));
    float _567 = fma(_561, _210 * NORMAL.y, fma(_555, _217 * TANGENT.y, (_203 * _196) * _553));
    float _570 = fma(_561, _210 * NORMAL.z, fma(_555, _217 * TANGENT.z, (_203 * _197) * _553));
    float _574 = inversesqrt(dot(vec3(_564, _567, _570), vec3(_564, _567, _570)));
    float _575 = _574 * _564;
    float _576 = _574 * _567;
    float _577 = _574 * _570;
    float _3583 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _578 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _3594 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3605 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3616 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _597 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _638 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _648 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _638);
    float _649 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _638);
    float _650 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _638);
    float _654 = inversesqrt(dot(vec3(_648, _649, _650), vec3(_648, _649, _650)));
    float _655 = _648 * _654;
    float _656 = _649 * _654;
    float _657 = _650 * _654;
    vec4 _662 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _664 = _662.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _818 = sqrt(((_648 * _648) + (_649 * _649)) + (_650 * _650));
        float _824 = (cbMatDynParam._m0[5u].x * _818) + cbMatDynParam._m0[5u].y;
        float _3627 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _829 = (cbMatDynParam._m0[5u].z * _818) + cbMatDynParam._m0[5u].w;
        float _3638 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) - _825)) + _825) < ((_664 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _675 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _676 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _694 = fma(_577, cbSceneParam._m0[5u].z, fma(_576, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _575));
    float _697 = fma(_577, cbSceneParam._m0[6u].z, fma(_576, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _575));
    float _700 = fma(_577, cbSceneParam._m0[7u].z, fma(_576, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _575));
    uint _713 = uint(roundEven(NORMAL.w)) * 13u;
    uint _714 = _713 + 9u;
    uint _715 = _714 + uint(cbMatDynParam._m0[0u].w);
    float _721 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)))) * cbInstanceData._m0[_715].x;
    float _722 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * cbInstanceData._m0[_715].y;
    float _723 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0)))) * cbInstanceData._m0[_715].z;
    float _3649 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _3660 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _3671 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    vec4 _735 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _675, cbSceneParam._m0[86u].y * _676));
    float _738 = _735.x * TEXCOORD_5.w;
    float _739 = dot(vec3(_575, _576, _577), vec3(_655, _656, _657));
    float _742 = _739 * 2.0;
    float _746 = (_742 * _575) - _655;
    float _747 = (_742 * _576) - _656;
    float _748 = (_742 * _577) - _657;
    float _752 = abs(dot(vec3(_655, _656, _657), vec3(_575, _576, _577)));
    float _3682 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _754 = sqrt(_578);
    float _767 = exp2((_754 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_754 * 3.0));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1138;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _863 = fma(_807, cbModelParam._m0[26u].z, fma(_803, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _799));
        float _867 = fma(_807, cbModelParam._m0[27u].z, fma(_803, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _799));
        float _871 = fma(_807, cbModelParam._m0[28u].z, fma(_803, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _799));
        float _896 = _799 + _575;
        float _897 = _803 + _576;
        float _898 = _807 + _577;
        float _908 = fma(_898, cbModelParam._m0[26u].z, fma(_897, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _896)) - _863;
        float _909 = fma(_898, cbModelParam._m0[27u].z, fma(_897, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _896)) - _867;
        float _910 = fma(_898, cbModelParam._m0[28u].z, fma(_897, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _896)) - _871;
        float _914 = inversesqrt(dot(vec3(_908, _909, _910), vec3(_908, _909, _910)));
        float _927 = ((_914 * _908) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_863 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _928 = ((_914 * _909) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_867 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _929 = ((_914 * _910) / cbModelParam._m0[34u].z) + ((((((_871 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        float _966 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_932.x + (-0.5));
        float _968 = _966 * (_932.y + (-0.5));
        float _969 = _966 * (_932.z + (-0.5));
        float _976 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_939.x + (-0.5));
        float _978 = _976 * (_939.y + (-0.5));
        float _979 = _976 * (_939.z + (-0.5));
        float _986 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_946.x + (-0.5));
        float _988 = _986 * (_946.y + (-0.5));
        float _989 = _986 * (_946.z + (-0.5));
        float _996 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_953.x + (-0.5));
        float _998 = _996 * (_953.y + (-0.5));
        float _999 = _996 * (_953.z + (-0.5));
        float _1000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = _967 * 0.5;
        float _1004 = _977 * 0.5;
        float _1005 = _987 * 0.5;
        float _1006 = dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005));
        float _1011 = (_1006 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1006);
        float _1020 = (dot(vec3(_575, _576, _577), vec3(_1011 * _1003, _1011 * _1004, _1011 * _1005)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1030 = sqrt(((_1004 * _1004) + (_1003 * _1003)) + (_1005 * _1005)) / (_1000 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1032 = _1031 * 2.0;
        float _1036 = (1.0 - _1031) / (_1031 + 1.0);
        float _3730 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1046 = ((((1.0 - _1037) * (_1032 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1032 + 1.0))) + _1037) * _1000;
        float _1047 = _968 * 0.5;
        float _1048 = _978 * 0.5;
        float _1049 = _988 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1063 = (dot(vec3(_575, _576, _577), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _3741 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1072 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3752 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _3763 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1074 + 1.0))) + _1079) * _1001;
        float _1089 = _969 * 0.5;
        float _1090 = _979 * 0.5;
        float _1091 = _989 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_575, _576, _577), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3774 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _3785 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3796 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1116 + 1.0))) + _1121) * _1002;
        _1138 = _969;
        _1140 = _968;
        _1141 = _967;
        _1142 = _979;
        _1143 = _978;
        _1144 = _977;
        _1145 = _989;
        _1146 = _988;
        _1147 = _987;
        _1148 = _1002;
        _1149 = _1001;
        _1150 = _1000;
        _1151 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)));
        _1152 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
        _1153 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
    }
    else
    {
        _1138 = _1139;
        _1140 = _1139;
        _1141 = _1139;
        _1142 = _1139;
        _1143 = _1139;
        _1144 = _1139;
        _1145 = _1139;
        _1146 = _1139;
        _1147 = _1139;
        _1148 = _1139;
        _1149 = _1139;
        _1150 = _1139;
        _1151 = 0.0;
        _1152 = 0.0;
        _1153 = 0.0;
    }
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1182 = fma(_807, cbModelParam._m0[30u].z, fma(_803, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _799));
        float _1186 = fma(_807, cbModelParam._m0[31u].z, fma(_803, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _799));
        float _1190 = fma(_807, cbModelParam._m0[32u].z, fma(_803, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _799));
        float _1213 = _799 + _575;
        float _1214 = _803 + _576;
        float _1215 = _807 + _577;
        float _1225 = fma(_1215, cbModelParam._m0[30u].z, fma(_1214, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1213)) - _1182;
        float _1226 = fma(_1215, cbModelParam._m0[31u].z, fma(_1214, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1213)) - _1186;
        float _1227 = fma(_1215, cbModelParam._m0[32u].z, fma(_1214, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1213)) - _1190;
        float _1231 = inversesqrt(dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227)));
        float _1244 = ((_1231 * _1225) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1182 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1245 = ((_1231 * _1226) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1186 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1231 * _1227) / cbModelParam._m0[35u].z) + ((((((_1190 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        float _1281 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1248.x + (-0.5));
        float _1283 = _1281 * (_1248.y + (-0.5));
        float _1284 = _1281 * (_1248.z + (-0.5));
        float _1291 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1255.x + (-0.5));
        float _1293 = _1291 * (_1255.y + (-0.5));
        float _1294 = _1291 * (_1255.z + (-0.5));
        float _1301 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1262.x + (-0.5));
        float _1303 = _1301 * (_1262.y + (-0.5));
        float _1304 = _1301 * (_1262.z + (-0.5));
        float _1311 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1269.x + (-0.5));
        float _1313 = _1311 * (_1269.y + (-0.5));
        float _1314 = _1311 * (_1269.z + (-0.5));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = _1282 * 0.5;
        float _1319 = _1292 * 0.5;
        float _1320 = _1302 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_575, _576, _577), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _3859 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1345 + 1.0))) + _1350) * _1315;
        float _1360 = _1283 * 0.5;
        float _1361 = _1293 * 0.5;
        float _1362 = _1303 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_575, _576, _577), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _3892 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1387 + 1.0))) + _1392) * _1316;
        float _1402 = _1284 * 0.5;
        float _1403 = _1294 * 0.5;
        float _1404 = _1304 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_575, _576, _577), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _3925 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1429 + 1.0))) + _1434) * _1317;
        _1451 = _1284;
        _1452 = _1283;
        _1453 = _1282;
        _1454 = _1294;
        _1455 = _1293;
        _1456 = _1292;
        _1457 = _1304;
        _1458 = _1303;
        _1459 = _1302;
        _1460 = _1317;
        _1461 = _1316;
        _1462 = _1315;
        _1463 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1464 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
        _1465 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
    }
    else
    {
        _1451 = _1139;
        _1452 = _1139;
        _1453 = _1139;
        _1454 = _1139;
        _1455 = _1139;
        _1456 = _1139;
        _1457 = _1139;
        _1458 = _1139;
        _1459 = _1139;
        _1460 = _1139;
        _1461 = _1139;
        _1462 = _1139;
        _1463 = 0.0;
        _1464 = 0.0;
        _1465 = 0.0;
    }
    float _1475 = (cbModelParam._m0[1u].x * (_1463 - _1151)) + _1151;
    float _1476 = (cbModelParam._m0[1u].x * (_1464 - _1152)) + _1152;
    float _1477 = (cbModelParam._m0[1u].x * (_1465 - _1153)) + _1153;
    float _1498 = fma(_1477, cbSceneParam._m0[89u].z, fma(_1476, cbSceneParam._m0[89u].y, _1475 * cbSceneParam._m0[89u].x));
    float _1501 = fma(_1477, cbSceneParam._m0[90u].z, fma(_1476, cbSceneParam._m0[90u].y, _1475 * cbSceneParam._m0[90u].x));
    float _1504 = fma(_1477, cbSceneParam._m0[91u].z, fma(_1476, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1475));
    float _1519 = _746 * 0.5;
    float _1520 = _747 * 0.5;
    float _1521 = _748 * 0.5;
    float _1522 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1453, _1456, _1459, _1462));
    float _1525 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1452, _1455, _1458, _1461));
    float _1528 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1451, _1454, _1457, _1460));
    float _1562;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1535 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1138, _1142, _1145, _1148));
        float _1539 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1140, _1143, _1146, _1149));
        float _1543 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1141, _1144, _1147, _1150));
        float _1550 = dot(vec4(cbModelParam._m0[39u]), vec4(_1519, _1520, _1521, 1.0));
        _1562 = dot(vec3(isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1550) ? 0.0 : (isnan(0.0) ? _1550 : max(0.0, _1550))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1562 = 1.0;
    }
    float _1573;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1564 = dot(vec4(cbModelParam._m0[40u]), vec4(_1519, _1520, _1521, 1.0));
        _1573 = dot(vec3(isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1564) ? 0.0 : (isnan(0.0) ? _1564 : max(0.0, _1564))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1573 = 1.0;
    }
    float _1577 = (_1573 * cbModelParam._m0[1u].x) + (_1562 * (1.0 - cbModelParam._m0[1u].x));
    float _1587 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _578);
    float _1588 = isnan(_1587) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1587 : min(cbModelParam._m0[25u].z, _1587));
    float _1669;
    float _1671;
    float _1673;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1636 = fma(_807, cbModelParam._m0[13u].z, fma(_803, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _799)) + cbModelParam._m0[13u].w;
        float _1640 = fma(_807, cbModelParam._m0[14u].z, fma(_803, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _799)) + cbModelParam._m0[14u].w;
        float _1644 = fma(_807, cbModelParam._m0[15u].z, fma(_803, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _799)) + cbModelParam._m0[15u].w;
        float _1647 = fma(_748, cbModelParam._m0[13u].z, fma(_747, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _746));
        float _1650 = fma(_748, cbModelParam._m0[14u].z, fma(_747, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _746));
        float _1653 = fma(_748, cbModelParam._m0[15u].z, fma(_747, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _746));
        float _1681;
        if (_1647 > 0.0)
        {
            _1681 = abs((1.0 - _1636) / _1647);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1636 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1681 = frontier_phi_17_15_ladder;
        }
        float _1905;
        if (_1650 > 0.0)
        {
            _1905 = abs((1.0 - _1640) / _1650);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1640 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1905 = frontier_phi_26_22_ladder;
        }
        float _2151;
        if (_1653 > 0.0)
        {
            _2151 = abs((1.0 - _1644) / _1653);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1644 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2151 = frontier_phi_38_33_ladder;
        }
        float _2153 = isnan(_1905) ? _1681 : (isnan(_1681) ? _1905 : min(_1681, _1905));
        float _2154 = isnan(_2151) ? _2153 : (isnan(_2153) ? _2151 : min(_2153, _2151));
        float _2158 = (_2154 * _1647) + _1636;
        float _2159 = (_2154 * _1650) + _1640;
        float _2160 = (_2154 * _1653) + _1644;
        float _2161 = _2154 * 9.9999997473787516355514526367188e-05;
        float _2163 = (-1.0) - _2161;
        float _2165 = _2161 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2160 > _2165) || ((_2160 < _2163) || ((_2159 > _2165) || ((_2159 < _2163) || ((_2158 < _2163) || (_2158 > _2165))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2284 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2160, cbModelParam._m0[9u].z, fma(_2159, cbModelParam._m0[9u].y, _2158 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2160, cbModelParam._m0[10u].z, fma(_2159, cbModelParam._m0[10u].y, _2158 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2160, cbModelParam._m0[11u].z, fma(_2159, cbModelParam._m0[11u].y, _2158 * cbModelParam._m0[11u].x))), _1588);
            frontier_phi_16_38_ladder = _2284.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2284.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2284.x * cbModelParam._m0[1u].y;
        }
        _1669 = frontier_phi_16_38_ladder_2;
        _1671 = frontier_phi_16_38_ladder_1;
        _1673 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1657 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_746, _747, _748), _1588);
        _1669 = _1657.x * cbModelParam._m0[1u].y;
        _1671 = _1657.y * cbModelParam._m0[1u].y;
        _1673 = _1657.z * cbModelParam._m0[1u].y;
    }
    float _1677 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _578);
    float _1678 = isnan(_1677) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1677 : min(cbModelParam._m0[25u].w, _1677));
    float _1769;
    float _1771;
    float _1773;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1733 = fma(_807, cbModelParam._m0[21u].z, fma(_803, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _799)) + cbModelParam._m0[21u].w;
        float _1737 = fma(_807, cbModelParam._m0[22u].z, fma(_803, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _799)) + cbModelParam._m0[22u].w;
        float _1741 = fma(_807, cbModelParam._m0[23u].z, fma(_803, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _799)) + cbModelParam._m0[23u].w;
        float _1744 = fma(_748, cbModelParam._m0[21u].z, fma(_747, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _746));
        float _1747 = fma(_748, cbModelParam._m0[22u].z, fma(_747, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _746));
        float _1750 = fma(_748, cbModelParam._m0[23u].z, fma(_747, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _746));
        float _1910;
        if (_1744 > 0.0)
        {
            _1910 = abs((1.0 - _1733) / _1744);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1733 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1910 = frontier_phi_28_24_ladder;
        }
        float _2178;
        if (_1747 > 0.0)
        {
            _2178 = abs((1.0 - _1737) / _1747);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1737 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2178 = frontier_phi_40_35_ladder;
        }
        float _2383;
        if (_1750 > 0.0)
        {
            _2383 = abs((1.0 - _1741) / _1750);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1741 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2383 = frontier_phi_49_46_ladder;
        }
        float _2385 = isnan(_2178) ? _1910 : (isnan(_1910) ? _2178 : min(_1910, _2178));
        float _2386 = isnan(_2383) ? _2385 : (isnan(_2385) ? _2383 : min(_2385, _2383));
        float _2390 = (_2386 * _1744) + _1733;
        float _2391 = (_2386 * _1747) + _1737;
        float _2392 = (_2386 * _1750) + _1741;
        float _2393 = _2386 * 9.9999997473787516355514526367188e-05;
        float _2394 = (-1.0) - _2393;
        float _2396 = _2393 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2392 > _2396) || ((_2392 < _2394) || ((_2391 > _2396) || ((_2391 < _2394) || ((_2390 < _2394) || (_2390 > _2396))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2591 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2392, cbModelParam._m0[17u].z, fma(_2391, cbModelParam._m0[17u].y, _2390 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2392, cbModelParam._m0[18u].z, fma(_2391, cbModelParam._m0[18u].y, _2390 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2392, cbModelParam._m0[19u].z, fma(_2391, cbModelParam._m0[19u].y, _2390 * cbModelParam._m0[19u].x))), _1678);
            frontier_phi_25_49_ladder = _2591.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2591.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2591.x * cbModelParam._m0[1u].z;
        }
        _1769 = frontier_phi_25_49_ladder_2;
        _1771 = frontier_phi_25_49_ladder_1;
        _1773 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1753 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_746, _747, _748), _1678);
        _1769 = _1753.x * cbModelParam._m0[1u].z;
        _1771 = _1753.y * cbModelParam._m0[1u].z;
        _1773 = _1753.z * cbModelParam._m0[1u].z;
    }
    float _1785 = ((((1.0 - _767) * ((_754 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_767 * _754)) * _738;
    float _1786 = _1785 * ((cbModelParam._m0[1u].w * (_1769 - _1669)) + _1669);
    float _1787 = _1785 * ((cbModelParam._m0[1u].w * (_1771 - _1671)) + _1671);
    float _1788 = _1785 * ((cbModelParam._m0[1u].w * (_1773 - _1673)) + _1673);
    float _1791 = fma(_1788, cbSceneParam._m0[89u].z, fma(_1787, cbSceneParam._m0[89u].y, _1786 * cbSceneParam._m0[89u].x));
    float _1794 = fma(_1788, cbSceneParam._m0[90u].z, fma(_1787, cbSceneParam._m0[90u].y, _1786 * cbSceneParam._m0[90u].x));
    float _1797 = fma(_1788, cbSceneParam._m0[91u].z, fma(_1787, cbSceneParam._m0[91u].y, _1786 * cbSceneParam._m0[91u].x));
    vec4 _1805 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_675, _676));
    float _1807 = _1805.w;
    float _1819 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1807);
    float _1820 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1807);
    float _1821 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1807);
    uvec4 _1825 = floatBitsToUint(cbInstanceData._m0[_713 + 5u]);
    uint _1827 = _1825.x * 14u;
    uint _1828 = _1827 + 13u;
    float _1835 = _738 + (-1.0);
    float _1840 = (cbLight._m0[_1828].x * _1835) + 1.0;
    float _1841 = (cbLight._m0[_1828].y * _1835) + 1.0;
    float _1842 = (cbLight._m0[_1828].z * _1835) + 1.0;
    float _1843 = (cbLight._m0[_1828].w * _1835) + 1.0;
    uint _1844 = _1827 + 5u;
    float _1850 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
    uint _1854 = _1827 + 4u;
    float _1864 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
    uint _1868 = _1827 | 1u;
    float _1879 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_575, _576, _577));
    float _1882 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_575, _576, _577));
    float _4061 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _4072 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1887 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * 0.3183098733425140380859375;
    float _1889 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * 0.3183098733425140380859375;
    float _1896 = ((cbLight._m0[_1844].x * _1850) * _1889) + (((cbLight._m0[_1854].x * _1819) * _1864) * _1887);
    float _1897 = ((_1850 * cbLight._m0[_1844].y) * _1889) + (((cbLight._m0[_1854].y * _1820) * _1864) * _1887);
    float _1898 = ((_1850 * cbLight._m0[_1844].z) * _1889) + (((cbLight._m0[_1854].z * _1821) * _1864) * _1887);
    uvec4 _1902 = floatBitsToUint(cbLight._m0[_1827 + 12u]);
    bool _1904 = _1902.x == 0u;
    float _1915;
    float _1917;
    float _1919;
    if (_1904)
    {
        _1915 = _1896;
        _1917 = _1897;
        _1919 = _1898;
    }
    else
    {
        uint _1923 = _1827 + 6u;
        float _1939 = (dot(vec3(cbLight._m0[_1827 + 2u].xyz), vec3(_575, _576, _577)) * 0.5) + 0.5;
        float _1940 = _1939 * _1939;
        float _4083 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1941 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1942 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
        _1915 = (((cbLight._m0[_1923].x * 0.3183098733425140380859375) * _1941) * _1942) + _1896;
        _1917 = (((cbLight._m0[_1923].y * 0.3183098733425140380859375) * _1941) * _1942) + _1897;
        _1919 = (((cbLight._m0[_1923].z * 0.3183098733425140380859375) * _1941) * _1942) + _1898;
    }
    bool _1922 = _1902.y == 0u;
    float _1960;
    float _1962;
    float _1964;
    if (_1922)
    {
        _1960 = _1915;
        _1962 = _1917;
        _1964 = _1919;
    }
    else
    {
        uint _2122 = _1827 + 7u;
        float _2138 = (dot(vec3(cbLight._m0[_1827 + 3u].xyz), vec3(_575, _576, _577)) * 0.5) + 0.5;
        float _2139 = _2138 * _2138;
        float _4099 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2140 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2141 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
        _1960 = (((cbLight._m0[_2122].x * 0.3183098733425140380859375) * _2140) * _2141) + _1915;
        _1962 = (((cbLight._m0[_2122].y * 0.3183098733425140380859375) * _2140) * _2141) + _1917;
        _1964 = (((cbLight._m0[_2122].z * 0.3183098733425140380859375) * _2140) * _2141) + _1919;
    }
    uint _1967 = _1827 + 8u;
    float _1980 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1827].w)) * _578) * 0.949999988079071044921875);
    float _1981 = _1980 * _1980;
    float _1982 = cbLight._m0[_1827].x + _655;
    float _1983 = cbLight._m0[_1827].y + _656;
    float _1984 = cbLight._m0[_1827].z + _657;
    float _1988 = inversesqrt(dot(vec3(_1982, _1983, _1984), vec3(_1982, _1983, _1984)));
    float _1989 = _1988 * _1982;
    float _1990 = _1988 * _1983;
    float _1991 = _1988 * _1984;
    float _1992 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_1827].xyz));
    float _4115 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1995 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _4126 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _1996 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _1997 = dot(vec3(_575, _576, _577), vec3(_1989, _1990, _1991));
    float _4137 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2000 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _2001 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_1989, _1990, _1991));
    float _4148 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2005 = _1981 * _1981;
    float _2009 = ((_2000 * _2000) * (_2005 + (-1.0))) + 1.0;
    float _2020 = (exp2(log2(1.0 - (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2021 = 1.0 - _1981;
    float _2032 = (0.5 / (((_1996 * ((_1995 * _2021) + _1981)) + 9.9999999392252902907785028219223e-09) + (((_1996 * _2021) + _1981) * _1995))) * _1995;
    float _4159 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2034 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_2005 / ((_2009 * _2009) * 3.141590118408203125));
    uint _2048 = _1827 + 9u;
    float _2059 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1868].w)) * _578) * 0.949999988079071044921875);
    float _2060 = _2059 * _2059;
    float _2061 = cbLight._m0[_1868].x + _655;
    float _2062 = cbLight._m0[_1868].y + _656;
    float _2063 = cbLight._m0[_1868].z + _657;
    float _2067 = inversesqrt(dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063)));
    float _2068 = _2067 * _2061;
    float _2069 = _2067 * _2062;
    float _2070 = _2067 * _2063;
    float _2071 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_1868].xyz));
    float _4170 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _2075 = dot(vec3(_575, _576, _577), vec3(_2068, _2069, _2070));
    float _4181 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2078 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _2079 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_2068, _2069, _2070));
    float _4192 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2083 = _2060 * _2060;
    float _2087 = ((_2078 * _2078) * (_2083 + (-1.0))) + 1.0;
    float _2096 = (exp2(log2(1.0 - (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2097 = 1.0 - _2060;
    float _2107 = (0.5 / (((_1996 * ((_2074 * _2097) + _2060)) + 9.9999999392252902907785028219223e-09) + (((_1996 * _2097) + _2060) * _2074))) * _2074;
    float _4203 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2109 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2083 / ((_2087 * _2087) * 3.141590118408203125));
    float _2119 = (((_2096 * cbLight._m0[_2048].x) * _2109) * _1850) + ((((cbLight._m0[_1967].x * _1819) * _2020) * _2034) * _1864);
    float _2120 = (((_2096 * cbLight._m0[_2048].y) * _2109) * _1850) + ((((cbLight._m0[_1967].y * _1820) * _2020) * _2034) * _1864);
    float _2121 = (((_2096 * cbLight._m0[_2048].z) * _2109) * _1850) + ((((cbLight._m0[_1967].z * _1821) * _2020) * _2034) * _1864);
    float _2183;
    float _2185;
    float _2187;
    if (_1904)
    {
        _2183 = _2119;
        _2185 = _2120;
        _2187 = _2121;
    }
    else
    {
        uint _2189 = _1827 + 2u;
        uint _2193 = _1827 + 10u;
        float _2207 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2189].w)) * _578) * 0.949999988079071044921875);
        float _2208 = _2207 * _2207;
        float _2209 = cbLight._m0[_2189].x + _655;
        float _2210 = cbLight._m0[_2189].y + _656;
        float _2211 = cbLight._m0[_2189].z + _657;
        float _2215 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
        float _2216 = _2215 * _2209;
        float _2217 = _2215 * _2210;
        float _2218 = _2215 * _2211;
        float _2219 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_2189].xyz));
        float _4214 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2222 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2223 = dot(vec3(_575, _576, _577), vec3(_2216, _2217, _2218));
        float _4225 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2226 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2227 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_2216, _2217, _2218));
        float _4236 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2231 = _2208 * _2208;
        float _2235 = ((_2226 * _2226) * (_2231 + (-1.0))) + 1.0;
        float _2244 = (exp2(log2(1.0 - (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2245 = 1.0 - _2208;
        float _2255 = (0.5 / (((_1996 * ((_2222 * _2245) + _2208)) + 9.9999999392252902907785028219223e-09) + (((_1996 * _2245) + _2208) * _2222))) * _2222;
        float _4247 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2257 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2231 / ((_2235 * _2235) * 3.141590118408203125));
        float _2258 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
        _2183 = (((_2244 * cbLight._m0[_2193].x) * _2257) * _2258) + _2119;
        _2185 = (((_2244 * cbLight._m0[_2193].y) * _2257) * _2258) + _2120;
        _2187 = (((_2244 * cbLight._m0[_2193].z) * _2257) * _2258) + _2121;
    }
    float _2293;
    float _2295;
    float _2297;
    if (_1922)
    {
        _2293 = _2183;
        _2295 = _2185;
        _2297 = _2187;
    }
    else
    {
        uint _2304 = _1827 + 3u;
        uint _2308 = _1827 + 11u;
        float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2304].w)) * _578) * 0.949999988079071044921875);
        float _2323 = _2322 * _2322;
        float _2324 = cbLight._m0[_2304].x + _655;
        float _2325 = cbLight._m0[_2304].y + _656;
        float _2326 = cbLight._m0[_2304].z + _657;
        float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
        float _2331 = _2330 * _2324;
        float _2332 = _2330 * _2325;
        float _2333 = _2330 * _2326;
        float _2334 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_2304].xyz));
        float _4263 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2338 = dot(vec3(_575, _576, _577), vec3(_2331, _2332, _2333));
        float _4274 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2342 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_2331, _2332, _2333));
        float _4285 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2346 = _2323 * _2323;
        float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
        float _2359 = (exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2360 = 1.0 - _2323;
        float _2370 = (0.5 / (((_1996 * ((_2337 * _2360) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_1996 * _2360) + _2323) * _2337))) * _2337;
        float _4296 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2372 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
        float _2373 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
        _2293 = (((_2359 * cbLight._m0[_2308].x) * _2372) * _2373) + _2183;
        _2295 = (((_2359 * cbLight._m0[_2308].y) * _2372) * _2373) + _2185;
        _2297 = (((_2359 * cbLight._m0[_2308].z) * _2372) * _2373) + _2187;
    }
    float _2508;
    float _2510;
    float _2512;
    float _2514;
    float _2516;
    float _2518;
    if (_1825.y == 0u)
    {
        float _2448 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2449 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2448;
        float _2450 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2448;
        float _2451 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2448;
        uvec4 _2463 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2464 = _2463.x;
        uint _2475 = uint((float(_2463.y) * floor(float(uint(cbSceneParam._m0[85u].y * _676) / _2464))) + floor(float(uint(cbSceneParam._m0[85u].x * _675) / _2464)));
        float _2485 = (log2(_2451 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2486 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        uint _2489 = uint(isnan(14.0) ? _2486 : (isnan(_2486) ? 14.0 : min(_2486, 14.0)));
        uvec4 _2494 = texelFetch(g_lightClusterGridBuffer, int(((_2489 << 2u) + (_2475 << 6u)) >> 2u));
        uint _2495 = _2494.x;
        uint _2496 = _2463.z;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        float _2604;
        float _2606;
        if (((((1u << ((_2496 >> 4u) & 15u)) + 4294967295u) & _2495) == 0u) || ((_2496 & 240u) == 0u))
        {
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
            _2602 = 0.0;
            _2604 = 0.0;
            _2606 = 0.0;
        }
        else
        {
            float _2597;
            float _2599;
            float _2601;
            float _2603;
            float _2605;
            float _2607;
            float _2749 = 0.0;
            float _2750 = 0.0;
            float _2751 = 0.0;
            float _2752 = 0.0;
            float _2753 = 0.0;
            float _2754 = 0.0;
            uint _2755 = 0u;
            uint _2764;
            bool _2765;
            for (;;)
            {
                _2764 = texelFetch(g_lightClassification, int((((_2489 << 5u) + (_2475 << 9u)) + (_2755 << 2u)) >> 2u)).x;
                _2765 = _2764 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2765)
                {
                    frontier_phi_66_pred = _2749;
                    frontier_phi_66_pred_1 = _2754;
                    frontier_phi_66_pred_2 = _2753;
                    frontier_phi_66_pred_3 = _2752;
                    frontier_phi_66_pred_4 = _2751;
                    frontier_phi_66_pred_5 = _2750;
                }
                else
                {
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    uint _2900;
                    _2894 = _2749;
                    _2895 = _2750;
                    _2896 = _2751;
                    _2897 = _2752;
                    _2898 = _2753;
                    _2899 = _2754;
                    _2900 = _2764;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    for (;;)
                    {
                        uint _2904 = uint(findLSB(_2900)) + (_2755 << 5u);
                        uint _2901 = (_2900 + 4294967295u) & _2900;
                        uint _2906 = _2904 * 48u;
                        vec4 _2920 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2906)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 3u)).x));
                        uint _2926 = (_2904 * 48u) + 4u;
                        vec4 _2939 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2926)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 3u)).x));
                        uint _2945 = (_2904 * 48u) + 8u;
                        vec3 _2956 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x));
                        float _2960 = _2920.x - _2449;
                        float _2961 = _2920.y - _2450;
                        float _2962 = _2920.z - _2451;
                        float _2963 = dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962));
                        float _2966 = inversesqrt(_2963);
                        float _2967 = _2966 * _2960;
                        float _2968 = _2966 * _2961;
                        float _2969 = _2966 * _2962;
                        float _2970 = dot(vec3(_694, _697, _700), vec3(_2967, _2968, _2969));
                        float _2975 = 1.0 - (_2963 * _2920.w);
                        float _4322 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2976 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _2977 = sqrt(_2963) * _2939.w;
                        float _2980 = 1.39999997615814208984375 / (_2977 + 1.39999997615814208984375);
                        float _2981 = _2980 * _2980;
                        float _2984 = ((1.0 - _2981) * _2970) + _2981;
                        float _2987 = _2977 * _2977;
                        float _2991 = ((isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0))) * _2976) / ((_2987 * 0.699999988079071044921875) + 1.0);
                        float _2995 = (-0.0) - _2449;
                        float _2996 = (-0.0) - _2450;
                        float _2997 = (-0.0) - _2451;
                        float _3001 = inversesqrt(dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997)));
                        float _3002 = _3001 * _2995;
                        float _3003 = _3001 * _2996;
                        float _3004 = _3001 * _2997;
                        float _3012 = exp2(log2(1.0 / ((_2987 * 3.5) + 5.0)) * 0.25);
                        float _3013 = 1.0 - _754;
                        float _3020 = sqrt(1.0 - ((1.0 - (_3013 * _3013)) * (1.0 - (_3012 * _3012))));
                        float _3021 = _3020 * _3020;
                        float _3022 = _3021 * _3021;
                        float _3023 = _3002 + _2967;
                        float _3024 = _3003 + _2968;
                        float _3025 = _3004 + _2969;
                        float _3029 = inversesqrt(dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025)));
                        float _3033 = dot(vec3(_694, _697, _700), vec3(_3002, _3003, _3004));
                        float _4338 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3036 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                        float _3037 = dot(vec3(_694, _697, _700), vec3(_3029 * _3023, _3029 * _3024, _3029 * _3025));
                        float _4349 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3040 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                        float _3044 = ((_3040 * _3040) * (_3022 + (-1.0))) + 1.0;
                        float _3045 = _2980 * _3021;
                        float _3046 = _3045 * _3045;
                        float _3049 = ((1.0 - _3046) * _2970) + _3046;
                        float _4360 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3050 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                        float _3051 = 1.0 - _3021;
                        float _3061 = (0.5 / (((_3050 * ((_3036 * _3051) + _3021)) + 9.9999999392252902907785028219223e-09) + (((_3050 * _3051) + _3021) * _3036))) * _3050;
                        float _4371 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                        float _3072 = (((_3022 * 3.1415927410125732421875) * (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) / ((_3044 * _3044) * ((_2987 * 2.1991131305694580078125) + 3.141590118408203125))) * _2976;
                        _2824 = (_2991 * _2939.x) + _2897;
                        _2825 = (_2991 * _2939.y) + _2898;
                        _2826 = (_2991 * _2939.z) + _2899;
                        _2821 = (_3072 * _2956.x) + _2894;
                        _2822 = (_3072 * _2956.y) + _2895;
                        _2823 = (_3072 * _2956.z) + _2896;
                        if (_2901 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2894 = _2821;
                            _2895 = _2822;
                            _2896 = _2823;
                            _2897 = _2824;
                            _2898 = _2825;
                            _2899 = _2826;
                            _2900 = _2901;
                        }
                    }
                    frontier_phi_66_pred = _2821;
                    frontier_phi_66_pred_1 = _2826;
                    frontier_phi_66_pred_2 = _2825;
                    frontier_phi_66_pred_3 = _2824;
                    frontier_phi_66_pred_4 = _2823;
                    frontier_phi_66_pred_5 = _2822;
                }
                _2597 = frontier_phi_66_pred;
                _2607 = frontier_phi_66_pred_1;
                _2605 = frontier_phi_66_pred_2;
                _2603 = frontier_phi_66_pred_3;
                _2601 = frontier_phi_66_pred_4;
                _2599 = frontier_phi_66_pred_5;
                uint _2756 = _2755 + 1u;
                if (_2756 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2749 = _2597;
                    _2750 = _2599;
                    _2751 = _2601;
                    _2752 = _2603;
                    _2753 = _2605;
                    _2754 = _2607;
                    _2755 = _2756;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
            _2602 = _2603;
            _2604 = _2605;
            _2606 = _2607;
        }
        uvec4 _2610 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2611 = _2610.z;
        uint _2613 = (_2611 >> 8u) & 15u;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        if (((4294967295u << _2613) & _2495) == 0u)
        {
            _2717 = _2596;
            _2719 = _2598;
            _2721 = _2600;
            _2723 = _2602;
            _2725 = _2604;
            _2727 = _2606;
        }
        else
        {
            float _2742 = inversesqrt(dot(vec3(_2449, _2450, _2451), vec3(_2449, _2450, _2451)));
            float _2743 = _2742 * _2449;
            float _2744 = _2742 * _2450;
            float _2745 = _2742 * _2451;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2613 < ((_2611 >> 12u) & 15u))
            {
                float _2718;
                float _2720;
                float _2722;
                float _2724;
                float _2726;
                float _2728;
                float _2877 = _2596;
                float _2878 = _2598;
                float _2879 = _2600;
                float _2880 = _2602;
                float _2881 = _2604;
                float _2882 = _2606;
                uint _2883 = _2613;
                uint _2892;
                bool _2893;
                for (;;)
                {
                    _2892 = texelFetch(g_lightClassification, int((((_2489 << 5u) + (_2475 << 9u)) + (_2883 << 2u)) >> 2u)).x;
                    _2893 = _2892 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2893)
                    {
                        frontier_phi_77_pred = _2882;
                        frontier_phi_77_pred_1 = _2881;
                        frontier_phi_77_pred_2 = _2880;
                        frontier_phi_77_pred_3 = _2879;
                        frontier_phi_77_pred_4 = _2878;
                        frontier_phi_77_pred_5 = _2877;
                    }
                    else
                    {
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3099 = _2877;
                        float _3100 = _2878;
                        float _3101 = _2879;
                        float _3102 = _2880;
                        float _3103 = _2881;
                        float _3104 = _2882;
                        uint _3105 = _2892;
                        uint _3106;
                        vec4 _3131;
                        float _3132;
                        vec4 _3147;
                        vec3 _3159;
                        vec4 _3174;
                        vec4 _3189;
                        float _3236;
                        bool _3237;
                        for (;;)
                        {
                            uint _3116 = ((_2883 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3105));
                            _3106 = (_3105 + 4294967295u) & _3105;
                            uint _3118 = _3116 * 40u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            _3132 = _3131.w;
                            uint _3134 = (_3116 * 40u) + 4u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3149 = (_3116 * 40u) + 8u;
                            _3159 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x));
                            uint _3161 = (_3116 * 40u) + 16u;
                            _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            uint _3176 = (_3116 * 40u) + 20u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3192 = (_3116 * 40u) + 24u;
                            vec4 _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            uint _3211 = (_3116 * 40u) + 28u;
                            vec4 _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            _3236 = fma(_2451, _3224.z, fma(_2450, _3224.y, _3224.x * _2449)) + _3224.w;
                            _3237 = !((fma(_2451, _3205.z, fma(_2450, _3205.y, _3205.x * _2449)) + _3205.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3237)
                            {
                                float _3264 = _3131.x - _2449;
                                float _3265 = _3131.y - _2450;
                                float _3266 = _3131.z - _2451;
                                float _3267 = dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266));
                                float _3270 = inversesqrt(_3267);
                                float _3271 = _3270 * _3264;
                                float _3272 = _3270 * _3265;
                                float _3273 = _3270 * _3266;
                                float _3277 = 1.0 - (_3267 / (_3132 * _3132));
                                float _4382 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3278 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3282 = sqrt(_3267) * _3147.w;
                                float _3284 = 1.39999997615814208984375 / (_3282 + 1.39999997615814208984375);
                                float _3285 = _3284 * _3284;
                                float _3288 = ((1.0 - _3285) * dot(vec3(_3271, _3272, _3273), vec3(_694, _697, _700))) + _3285;
                                float _3291 = _3282 * _3282;
                                float _3295 = (fma(_2451, _3174.z, fma(_2450, _3174.y, _3174.x * _2449)) + _3174.w) / _3236;
                                float _3296 = (fma(_2451, _3189.z, fma(_2450, _3189.y, _3189.x * _2449)) + _3189.w) / _3236;
                                float _3300 = 1.0 - dot(vec2(_3295, _3296), vec2(_3295, _3296));
                                float _4398 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3301 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3302 = _3301 * (((isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0))) * _3278) / ((_3291 * 0.699999988079071044921875) + 1.0));
                                float _3314 = exp2(log2(1.0 / ((_3291 * 3.5) + 5.0)) * 0.25);
                                float _3315 = 1.0 - _754;
                                float _3322 = sqrt(1.0 - ((1.0 - (_3315 * _3315)) * (1.0 - (_3314 * _3314))));
                                float _3323 = _3322 * _3322;
                                float _3324 = _3323 * _3323;
                                float _3325 = _3271 - _2743;
                                float _3326 = _3272 - _2744;
                                float _3327 = _3273 - _2745;
                                float _3331 = inversesqrt(dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327)));
                                float _3335 = dot(vec3(_694, _697, _700), vec3((-0.0) - _2743, (-0.0) - _2744, (-0.0) - _2745));
                                float _4409 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3338 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                                float _3339 = dot(vec3(_694, _697, _700), vec3(_3331 * _3325, _3331 * _3326, _3331 * _3327));
                                float _4420 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3342 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                                float _3346 = ((_3342 * _3342) * (_3324 + (-1.0))) + 1.0;
                                float _3347 = _3284 * _3323;
                                float _3348 = _3347 * _3347;
                                float _3354 = ((1.0 - _3348) * dot(vec3(_694, _697, _700), vec3(_3271, _3272, _3273))) + _3348;
                                float _4431 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3355 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3356 = 1.0 - _3323;
                                float _3366 = (0.5 / (((_3355 * ((_3338 * _3356) + _3323)) + 9.9999999392252902907785028219223e-09) + (((_3355 * _3356) + _3323) * _3338))) * _3355;
                                float _4442 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3376 = (_3301 * _3278) * (((_3324 * 3.1415927410125732421875) * (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) / ((_3346 * _3346) * ((_3291 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3302 * _3147.y;
                                frontier_phi_83_pred_1 = _3302 * _3147.x;
                                frontier_phi_83_pred_2 = _3376 * _3159.z;
                                frontier_phi_83_pred_3 = _3376 * _3159.y;
                                frontier_phi_83_pred_4 = _3376 * _3159.x;
                                frontier_phi_83_pred_5 = _3302 * _3147.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3384 = frontier_phi_83_pred;
                            _3383 = frontier_phi_83_pred_1;
                            _3382 = frontier_phi_83_pred_2;
                            _3381 = frontier_phi_83_pred_3;
                            _3380 = frontier_phi_83_pred_4;
                            _3385 = frontier_phi_83_pred_5;
                            _3089 = _3383 + _3102;
                            _3090 = _3384 + _3103;
                            _3091 = _3385 + _3104;
                            _3086 = _3380 + _3099;
                            _3087 = _3381 + _3100;
                            _3088 = _3382 + _3101;
                            if (_3106 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3106;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3091;
                        frontier_phi_77_pred_1 = _3090;
                        frontier_phi_77_pred_2 = _3089;
                        frontier_phi_77_pred_3 = _3088;
                        frontier_phi_77_pred_4 = _3087;
                        frontier_phi_77_pred_5 = _3086;
                    }
                    _2728 = frontier_phi_77_pred;
                    _2726 = frontier_phi_77_pred_1;
                    _2724 = frontier_phi_77_pred_2;
                    _2722 = frontier_phi_77_pred_3;
                    _2720 = frontier_phi_77_pred_4;
                    _2718 = frontier_phi_77_pred_5;
                    uint _2884 = _2883 + 1u;
                    if (_2884 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2877 = _2718;
                        _2878 = _2720;
                        _2879 = _2722;
                        _2880 = _2724;
                        _2881 = _2726;
                        _2882 = _2728;
                        _2883 = _2884;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2722;
                frontier_phi_58_59_ladder_1 = _2728;
                frontier_phi_58_59_ladder_2 = _2726;
                frontier_phi_58_59_ladder_3 = _2724;
                frontier_phi_58_59_ladder_4 = _2720;
                frontier_phi_58_59_ladder_5 = _2718;
            }
            else
            {
                frontier_phi_58_59_ladder = _2600;
                frontier_phi_58_59_ladder_1 = _2606;
                frontier_phi_58_59_ladder_2 = _2604;
                frontier_phi_58_59_ladder_3 = _2602;
                frontier_phi_58_59_ladder_4 = _2598;
                frontier_phi_58_59_ladder_5 = _2596;
            }
            _2717 = frontier_phi_58_59_ladder_5;
            _2719 = frontier_phi_58_59_ladder_4;
            _2721 = frontier_phi_58_59_ladder;
            _2723 = frontier_phi_58_59_ladder_3;
            _2725 = frontier_phi_58_59_ladder_2;
            _2727 = frontier_phi_58_59_ladder_1;
        }
        float _2732 = isnan(1.0) ? _738 : (isnan(_738) ? 1.0 : min(_738, 1.0));
        _2508 = (_2732 * _2723) + _1960;
        _2510 = (_2732 * _2725) + _1962;
        _2512 = (_2732 * _2727) + _1964;
        _2514 = ((_2717 * 0.039999999105930328369140625) * _2732) + _2293;
        _2516 = ((_2719 * 0.039999999105930328369140625) * _2732) + _2295;
        _2518 = ((_2721 * 0.039999999105930328369140625) * _2732) + _2297;
    }
    else
    {
        _2508 = _1960;
        _2510 = _1962;
        _2512 = _1964;
        _2514 = _2293;
        _2516 = _2295;
        _2518 = _2297;
    }
    float _4458 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _4469 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _4480 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _2535 = ((isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2508 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _738))) + ((_2514 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1577)) * cbPerFrame._m0[3u].x);
    float _2536 = ((isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2510 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _738))) + ((_2516 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1577)) * cbPerFrame._m0[3u].x);
    float _2537 = ((isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2512 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _738))) + ((_2518 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1577)) * cbPerFrame._m0[3u].x);
    uint _2538 = _713 + 6u;
    float _2546 = _675 / cbSceneParam._m0[86u].x;
    float _2547 = _676 / cbSceneParam._m0[86u].y;
    vec4 _2561 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2546, _2547, (log2((isnan(cbSceneParam._m0[77u].w) ? _597 : (isnan(_597) ? cbSceneParam._m0[77u].w : min(_597, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2563 = _2561.x;
    float _2564 = _2561.y;
    float _2565 = _2561.z;
    float _2566 = _2561.w;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    if (_597 > cbSceneParam._m0[78u].w)
    {
        float _2621 = isnan(_597) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _597 : min(cbSceneParam._m0[80u].w, _597));
        float _2622 = _2621 / _597;
        float _2633 = _2622 * _648;
        float _2634 = _649 * _2622;
        float _2635 = (-0.0) - _2634;
        float _2637 = _2622 * _650;
        float _2639 = (cbSceneParam._m0[77u].w * _2635) / _2621;
        float _2640 = _2639 + cbSceneParam._m0[79u].w;
        float _2641 = cbSceneParam._m0[79u].w - _2634;
        float _2647 = sqrt(((_2633 * _2633) + (_2634 * _2634)) + (_2637 * _2637));
        float _2650 = (1.0 - (cbSceneParam._m0[77u].w / _2621)) * _2647;
        float _2655 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2657 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2834;
        if (abs((_2635 - _2639) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2834 = ((((_2640 > 0.0) ? exp2(_2655 * _2640) : (2.0 - exp2(_2657 * _2640))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2650;
        }
        else
        {
            float _2778 = 1.0 / cbSceneParam._m0[80u].x;
            float _2779 = isnan(_2641) ? _2640 : (isnan(_2640) ? _2641 : max(_2640, _2641));
            float _2780 = isnan(_2641) ? _2640 : (isnan(_2640) ? _2641 : min(_2640, _2641));
            float _2789 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : min(_2779, 0.0));
            float _2790 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : min(_2780, 0.0));
            _2834 = ((abs(_2647 / _2635) * cbSceneParam._m0[80u].y) * ((((_2789 - _2790) * 2.0) - ((exp2(_2655 * (isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0)))) - exp2(_2655 * (isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0))))) * _2778)) - ((exp2(_2657 * _2789) - exp2(_2657 * _2790)) * _2778))) + (_2650 * cbSceneParam._m0[80u].z);
        }
        vec4 _2836 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2546, _2547, 1.0), 0.0);
        float _2845 = exp2((_2834 * (-1.44269502162933349609375)) * (1.0 - _2836.w));
        float _2846 = log2(_2845);
        float _2862 = log2(_2566);
        _2659 = (exp2(_2862 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2846 * cbSceneParam._m0[78u].x)) * _2836.x) / cbSceneParam._m0[78u].x)) + _2563;
        _2661 = (exp2(_2862 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2846 * cbSceneParam._m0[78u].y)) * _2836.y) / cbSceneParam._m0[78u].y)) + _2564;
        _2663 = (exp2(_2862 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2846 * cbSceneParam._m0[78u].z)) * _2836.z) / cbSceneParam._m0[78u].z)) + _2565;
        _2665 = _2845 * _2566;
    }
    else
    {
        _2659 = _2563;
        _2661 = _2564;
        _2663 = _2565;
        _2665 = _2566;
    }
    bool _2872;
    vec4 _2675;
    vec4 _2697;
    float _2699;
    float _2703;
    float _2704;
    float _2705;
    float _2706;
    bool _2716;
    for (;;)
    {
        _2675 = cbMatDynParam._m0[0u];
        float _2677 = roundEven(_2675.y);
        bool _2678 = _2677 == 3.0;
        float _2679 = log2(_2665);
        float _2686 = exp2(_2679 * cbSceneParam._m0[78u].x) * _2535;
        float _2687 = exp2(_2679 * cbSceneParam._m0[78u].y) * _2536;
        float _2688 = exp2(_2679 * cbSceneParam._m0[78u].z) * _2537;
        float _2695 = _664 + (-0.5);
        _2697 = cbMtdParam._m0[1u];
        _2699 = _2697.y * _2695;
        float _2702 = (_2677 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2703 = _2702 * (_2678 ? _2686 : (_2686 + (cbSceneParam._m0[72u].w * _2659)));
        _2704 = _2702 * (_2678 ? _2687 : (_2687 + (cbSceneParam._m0[72u].w * _2661)));
        _2705 = _2702 * (_2678 ? _2688 : (_2688 + (cbSceneParam._m0[72u].w * _2663)));
        _2706 = _2695 * 0.999000012874603271484375;
        _2716 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2716)
        {
            if ((cbInstanceData._m0[_713 + 7u].x + _2706) < 0.5)
            {
                _2872 = true;
                break;
            }
        }
        uint _2813 = _714 + uint(_2675.w);
        if ((cbInstanceData._m0[_2813].w < 1.0) && ((cbInstanceData._m0[_2813].w + _2706) < 0.5))
        {
            _2872 = true;
            break;
        }
        if ((_2699 + 1.0) < _2697.x)
        {
            _2872 = true;
            break;
        }
        _2872 = false;
        break;
    }
    float _3077;
    if (_2872)
    {
        discard_state = true;
        _3077 = 0.0;
    }
    else
    {
        _3077 = cbInstanceData._m0[_2538].w;
    }
    SV_Target.x = _2703;
    SV_Target.y = _2704;
    SV_Target.z = _2705;
    SV_Target.w = _3077;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2538].w;
    discard_exit();
}


