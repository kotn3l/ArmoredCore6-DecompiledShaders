#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1128;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _238 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _244 = _238.x * cbMtdParam._m0[10u].x;
    float _245 = _238.y * cbMtdParam._m0[10u].y;
    float _246 = _238.z * cbMtdParam._m0[10u].z;
    vec4 _265 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _312 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x;
    float _323 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _312)) + 1.0;
    float _3461 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _324 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    float _331 = (_324 * ((_265.x * cbMtdParam._m0[11u].x) - _244)) + _244;
    float _332 = (_324 * ((_265.y * cbMtdParam._m0[11u].y) - _245)) + _245;
    float _333 = (_324 * ((_265.z * cbMtdParam._m0[11u].z) - _246)) + _246;
    vec4 _352 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _382 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _312)) + 1.0;
    float _3472 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _390 = (_383 * ((_352.x * cbMtdParam._m0[12u].x) - _331)) + _331;
    float _391 = (_383 * ((_352.y * cbMtdParam._m0[12u].y) - _332)) + _332;
    float _392 = (_383 * ((_352.z * cbMtdParam._m0[12u].z) - _333)) + _333;
    vec4 _409 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _434 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _312)) + 1.0;
    float _3483 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    vec4 _462 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _470 = ((((_435 * ((_409.x * cbMtdParam._m0[13u].x) - _390)) + _390) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _462.x;
    float _473 = ((((_435 * ((_409.y * cbMtdParam._m0[13u].y) - _391)) + _391) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _462.y;
    float _476 = ((((_435 * ((_409.z * cbMtdParam._m0[13u].z) - _392)) + _392) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _462.z;
    vec4 _488 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    vec4 _506 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _508 = _506.x;
    float _509 = _506.y;
    float _515 = cbMtdParam._m0[16u].w * _506.z;
    float _518 = (((cbMtdParam._m0[17u].x * _488.z) - _515) * _324) + _515;
    vec4 _531 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _540 = (((cbMtdParam._m0[17u].y * _531.z) - _518) * _383) + _518;
    vec4 _553 = texture(sampler2D(C_3Mask_Detail_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _562 = (((cbMtdParam._m0[17u].z * _553.z) - _540) * _435) + _540;
    float _567 = ((_488.x - _508) * _324) + _508;
    float _568 = ((_488.y - _509) * _324) + _509;
    float _573 = ((_531.x - _567) * _383) + _567;
    float _574 = ((_531.y - _568) * _383) + _568;
    float _583 = ((((_553.x - _573) * _435) + _573) * 2.0) + (-1.0);
    float _585 = ((((_553.y - _574) * _435) + _574) * 2.0) + (-1.0);
    float _586 = dot(vec2(_583, _585), vec2(_583, _585));
    float _3494 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _591 = sqrt(1.0 - (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))));
    float _594 = fma(_591, _208 * NORMAL.x, fma(_585, _215 * TANGENT.x, (_201 * _193) * _583));
    float _597 = fma(_591, _208 * NORMAL.y, fma(_585, _215 * TANGENT.y, (_201 * _194) * _583));
    float _600 = fma(_591, _208 * NORMAL.z, fma(_585, _215 * TANGENT.z, (_201 * _195) * _583));
    float _604 = inversesqrt(dot(vec3(_594, _597, _600), vec3(_594, _597, _600)));
    float _605 = _604 * _594;
    float _606 = _604 * _597;
    float _607 = _604 * _600;
    float _3505 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _608 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
    float _3516 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _3527 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _3538 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _627 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _678 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _668);
    float _679 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _668);
    float _680 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _668);
    float _684 = inversesqrt(dot(vec3(_678, _679, _680), vec3(_678, _679, _680)));
    float _685 = _678 * _684;
    float _686 = _679 * _684;
    float _687 = _680 * _684;
    float _693 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _694 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _712 = fma(_607, cbSceneParam._m0[5u].z, fma(_606, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _605));
    float _715 = fma(_607, cbSceneParam._m0[6u].z, fma(_606, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _605));
    float _718 = fma(_607, cbSceneParam._m0[7u].z, fma(_606, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _605));
    uint _731 = uint(roundEven(NORMAL.w)) * 13u;
    uint _733 = (_731 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _739 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0)))) * cbInstanceData._m0[_733].x;
    float _740 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0)))) * cbInstanceData._m0[_733].y;
    float _741 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0)))) * cbInstanceData._m0[_733].z;
    float _3549 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _3560 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _3571 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    vec4 _753 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _693, cbSceneParam._m0[86u].y * _694));
    float _756 = _753.x * TEXCOORD_5.w;
    float _757 = dot(vec3(_605, _606, _607), vec3(_685, _686, _687));
    float _760 = _757 * 2.0;
    float _764 = (_760 * _605) - _685;
    float _765 = (_760 * _606) - _686;
    float _766 = (_760 * _607) - _687;
    float _770 = abs(dot(vec3(_685, _686, _687), vec3(_605, _606, _607)));
    float _3582 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _772 = sqrt(_608);
    float _785 = exp2((_772 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_772 * 3.0));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1127;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _852 = fma(_825, cbModelParam._m0[26u].z, fma(_821, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _817));
        float _856 = fma(_825, cbModelParam._m0[27u].z, fma(_821, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _817));
        float _860 = fma(_825, cbModelParam._m0[28u].z, fma(_821, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _817));
        float _885 = _817 + _605;
        float _886 = _821 + _606;
        float _887 = _825 + _607;
        float _897 = fma(_887, cbModelParam._m0[26u].z, fma(_886, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _885)) - _852;
        float _898 = fma(_887, cbModelParam._m0[27u].z, fma(_886, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _885)) - _856;
        float _899 = fma(_887, cbModelParam._m0[28u].z, fma(_886, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _885)) - _860;
        float _903 = inversesqrt(dot(vec3(_897, _898, _899), vec3(_897, _898, _899)));
        float _916 = ((_903 * _897) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_852 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _917 = ((_903 * _898) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_856 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _918 = ((_903 * _899) / cbModelParam._m0[34u].z) + ((((((_860 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        float _955 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_921.x + (-0.5));
        float _957 = _955 * (_921.y + (-0.5));
        float _958 = _955 * (_921.z + (-0.5));
        float _965 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_928.x + (-0.5));
        float _967 = _965 * (_928.y + (-0.5));
        float _968 = _965 * (_928.z + (-0.5));
        float _975 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_935.x + (-0.5));
        float _977 = _975 * (_935.y + (-0.5));
        float _978 = _975 * (_935.z + (-0.5));
        float _985 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_942.x + (-0.5));
        float _987 = _985 * (_942.y + (-0.5));
        float _988 = _985 * (_942.z + (-0.5));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = _956 * 0.5;
        float _993 = _966 * 0.5;
        float _994 = _976 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1009 = (dot(vec3(_605, _606, _607), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3608 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1019 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3619 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3630 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * (_1021 + 1.0))) + _1026) * _989;
        float _1036 = _957 * 0.5;
        float _1037 = _967 * 0.5;
        float _1038 = _977 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_605, _606, _607), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3641 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3652 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3663 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * (_1063 + 1.0))) + _1068) * _990;
        float _1078 = _958 * 0.5;
        float _1079 = _968 * 0.5;
        float _1080 = _978 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_605, _606, _607), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3674 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3685 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3696 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * (_1105 + 1.0))) + _1110) * _991;
        _1127 = _958;
        _1129 = _957;
        _1130 = _956;
        _1131 = _968;
        _1132 = _967;
        _1133 = _966;
        _1134 = _978;
        _1135 = _977;
        _1136 = _976;
        _1137 = _991;
        _1138 = _990;
        _1139 = _989;
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
    }
    else
    {
        _1127 = _1128;
        _1129 = _1128;
        _1130 = _1128;
        _1131 = _1128;
        _1132 = _1128;
        _1133 = _1128;
        _1134 = _1128;
        _1135 = _1128;
        _1136 = _1128;
        _1137 = _1128;
        _1138 = _1128;
        _1139 = _1128;
        _1140 = 0.0;
        _1141 = 0.0;
        _1142 = 0.0;
    }
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1168 = fma(_825, cbModelParam._m0[30u].z, fma(_821, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _817));
        float _1172 = fma(_825, cbModelParam._m0[31u].z, fma(_821, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _817));
        float _1176 = fma(_825, cbModelParam._m0[32u].z, fma(_821, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _817));
        float _1199 = _817 + _605;
        float _1200 = _821 + _606;
        float _1201 = _825 + _607;
        float _1211 = fma(_1201, cbModelParam._m0[30u].z, fma(_1200, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1199)) - _1168;
        float _1212 = fma(_1201, cbModelParam._m0[31u].z, fma(_1200, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1199)) - _1172;
        float _1213 = fma(_1201, cbModelParam._m0[32u].z, fma(_1200, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1199)) - _1176;
        float _1217 = inversesqrt(dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213)));
        float _1230 = ((_1217 * _1211) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1168 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1217 * _1212) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1172 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1217 * _1213) / cbModelParam._m0[35u].z) + ((((((_1176 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        float _1267 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1234.x + (-0.5));
        float _1269 = _1267 * (_1234.y + (-0.5));
        float _1270 = _1267 * (_1234.z + (-0.5));
        float _1277 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1241.x + (-0.5));
        float _1279 = _1277 * (_1241.y + (-0.5));
        float _1280 = _1277 * (_1241.z + (-0.5));
        float _1287 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1248.x + (-0.5));
        float _1289 = _1287 * (_1248.y + (-0.5));
        float _1290 = _1287 * (_1248.z + (-0.5));
        float _1297 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1255.x + (-0.5));
        float _1299 = _1297 * (_1255.y + (-0.5));
        float _1300 = _1297 * (_1255.z + (-0.5));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = _1268 * 0.5;
        float _1305 = _1278 * 0.5;
        float _1306 = _1288 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_605, _606, _607), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _3737 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3748 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _3759 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1331 + 1.0))) + _1336) * _1301;
        float _1346 = _1269 * 0.5;
        float _1347 = _1279 * 0.5;
        float _1348 = _1289 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_605, _606, _607), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _3792 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1373 + 1.0))) + _1378) * _1302;
        float _1388 = _1270 * 0.5;
        float _1389 = _1280 * 0.5;
        float _1390 = _1290 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_605, _606, _607), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _3803 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _3814 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _3825 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1415 + 1.0))) + _1420) * _1303;
        _1437 = _1270;
        _1438 = _1269;
        _1439 = _1268;
        _1440 = _1280;
        _1441 = _1279;
        _1442 = _1278;
        _1443 = _1290;
        _1444 = _1289;
        _1445 = _1288;
        _1446 = _1303;
        _1447 = _1302;
        _1448 = _1301;
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
    }
    else
    {
        _1437 = _1128;
        _1438 = _1128;
        _1439 = _1128;
        _1440 = _1128;
        _1441 = _1128;
        _1442 = _1128;
        _1443 = _1128;
        _1444 = _1128;
        _1445 = _1128;
        _1446 = _1128;
        _1447 = _1128;
        _1448 = _1128;
        _1449 = 0.0;
        _1450 = 0.0;
        _1451 = 0.0;
    }
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1140)) + _1140;
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1141)) + _1141;
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1142)) + _1142;
    float _1484 = fma(_1463, cbSceneParam._m0[89u].z, fma(_1462, cbSceneParam._m0[89u].y, _1461 * cbSceneParam._m0[89u].x));
    float _1487 = fma(_1463, cbSceneParam._m0[90u].z, fma(_1462, cbSceneParam._m0[90u].y, _1461 * cbSceneParam._m0[90u].x));
    float _1490 = fma(_1463, cbSceneParam._m0[91u].z, fma(_1462, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1461));
    float _1505 = _764 * 0.5;
    float _1506 = _765 * 0.5;
    float _1507 = _766 * 0.5;
    float _1508 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1511 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1514 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1548;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1521 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1127, _1131, _1134, _1137));
        float _1525 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1129, _1132, _1135, _1138));
        float _1529 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1130, _1133, _1136, _1139));
        float _1536 = dot(vec4(cbModelParam._m0[39u]), vec4(_1505, _1506, _1507, 1.0));
        _1548 = dot(vec3(isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1536) ? 0.0 : (isnan(0.0) ? _1536 : max(0.0, _1536))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1548 = 1.0;
    }
    float _1559;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1550 = dot(vec4(cbModelParam._m0[40u]), vec4(_1505, _1506, _1507, 1.0));
        _1559 = dot(vec3(isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1550) ? 0.0 : (isnan(0.0) ? _1550 : max(0.0, _1550))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1559 = 1.0;
    }
    float _1563 = (_1559 * cbModelParam._m0[1u].x) + (_1548 * (1.0 - cbModelParam._m0[1u].x));
    float _1573 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _608);
    float _1574 = isnan(_1573) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1573 : min(cbModelParam._m0[25u].z, _1573));
    float _1655;
    float _1657;
    float _1659;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1622 = fma(_825, cbModelParam._m0[13u].z, fma(_821, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _817)) + cbModelParam._m0[13u].w;
        float _1626 = fma(_825, cbModelParam._m0[14u].z, fma(_821, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _817)) + cbModelParam._m0[14u].w;
        float _1630 = fma(_825, cbModelParam._m0[15u].z, fma(_821, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _817)) + cbModelParam._m0[15u].w;
        float _1633 = fma(_766, cbModelParam._m0[13u].z, fma(_765, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _764));
        float _1636 = fma(_766, cbModelParam._m0[14u].z, fma(_765, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _764));
        float _1639 = fma(_766, cbModelParam._m0[15u].z, fma(_765, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _764));
        float _1667;
        if (_1633 > 0.0)
        {
            _1667 = abs((1.0 - _1622) / _1633);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1622 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1667 = frontier_phi_14_12_ladder;
        }
        float _1890;
        if (_1636 > 0.0)
        {
            _1890 = abs((1.0 - _1626) / _1636);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1626 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1890 = frontier_phi_23_19_ladder;
        }
        float _2136;
        if (_1639 > 0.0)
        {
            _2136 = abs((1.0 - _1630) / _1639);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1630 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2136 = frontier_phi_35_30_ladder;
        }
        float _2138 = isnan(_1890) ? _1667 : (isnan(_1667) ? _1890 : min(_1667, _1890));
        float _2139 = isnan(_2136) ? _2138 : (isnan(_2138) ? _2136 : min(_2138, _2136));
        float _2143 = (_2139 * _1633) + _1622;
        float _2144 = (_2139 * _1636) + _1626;
        float _2145 = (_2139 * _1639) + _1630;
        float _2146 = _2139 * 9.9999997473787516355514526367188e-05;
        float _2148 = (-1.0) - _2146;
        float _2150 = _2146 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2145 > _2150) || ((_2145 < _2148) || ((_2144 > _2150) || ((_2144 < _2148) || ((_2143 < _2148) || (_2143 > _2150))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2269 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2145, cbModelParam._m0[9u].z, fma(_2144, cbModelParam._m0[9u].y, _2143 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2145, cbModelParam._m0[10u].z, fma(_2144, cbModelParam._m0[10u].y, _2143 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2145, cbModelParam._m0[11u].z, fma(_2144, cbModelParam._m0[11u].y, _2143 * cbModelParam._m0[11u].x))), _1574);
            frontier_phi_13_35_ladder = _2269.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2269.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2269.x * cbModelParam._m0[1u].y;
        }
        _1655 = frontier_phi_13_35_ladder_2;
        _1657 = frontier_phi_13_35_ladder_1;
        _1659 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1643 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_764, _765, _766), _1574);
        _1655 = _1643.x * cbModelParam._m0[1u].y;
        _1657 = _1643.y * cbModelParam._m0[1u].y;
        _1659 = _1643.z * cbModelParam._m0[1u].y;
    }
    float _1663 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _608);
    float _1664 = isnan(_1663) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1663 : min(cbModelParam._m0[25u].w, _1663));
    float _1755;
    float _1757;
    float _1759;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1719 = fma(_825, cbModelParam._m0[21u].z, fma(_821, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _817)) + cbModelParam._m0[21u].w;
        float _1723 = fma(_825, cbModelParam._m0[22u].z, fma(_821, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _817)) + cbModelParam._m0[22u].w;
        float _1727 = fma(_825, cbModelParam._m0[23u].z, fma(_821, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _817)) + cbModelParam._m0[23u].w;
        float _1730 = fma(_766, cbModelParam._m0[21u].z, fma(_765, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _764));
        float _1733 = fma(_766, cbModelParam._m0[22u].z, fma(_765, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _764));
        float _1736 = fma(_766, cbModelParam._m0[23u].z, fma(_765, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _764));
        float _1895;
        if (_1730 > 0.0)
        {
            _1895 = abs((1.0 - _1719) / _1730);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1719 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1895 = frontier_phi_25_21_ladder;
        }
        float _2163;
        if (_1733 > 0.0)
        {
            _2163 = abs((1.0 - _1723) / _1733);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1723 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2163 = frontier_phi_37_32_ladder;
        }
        float _2368;
        if (_1736 > 0.0)
        {
            _2368 = abs((1.0 - _1727) / _1736);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1727 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2368 = frontier_phi_46_43_ladder;
        }
        float _2370 = isnan(_2163) ? _1895 : (isnan(_1895) ? _2163 : min(_1895, _2163));
        float _2371 = isnan(_2368) ? _2370 : (isnan(_2370) ? _2368 : min(_2370, _2368));
        float _2375 = (_2371 * _1730) + _1719;
        float _2376 = (_2371 * _1733) + _1723;
        float _2377 = (_2371 * _1736) + _1727;
        float _2378 = _2371 * 9.9999997473787516355514526367188e-05;
        float _2379 = (-1.0) - _2378;
        float _2381 = _2378 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2377 > _2381) || ((_2377 < _2379) || ((_2376 > _2381) || ((_2376 < _2379) || ((_2375 < _2379) || (_2375 > _2381))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2576 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2377, cbModelParam._m0[17u].z, fma(_2376, cbModelParam._m0[17u].y, _2375 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2377, cbModelParam._m0[18u].z, fma(_2376, cbModelParam._m0[18u].y, _2375 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2377, cbModelParam._m0[19u].z, fma(_2376, cbModelParam._m0[19u].y, _2375 * cbModelParam._m0[19u].x))), _1664);
            frontier_phi_22_46_ladder = _2576.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2576.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2576.x * cbModelParam._m0[1u].z;
        }
        _1755 = frontier_phi_22_46_ladder_2;
        _1757 = frontier_phi_22_46_ladder_1;
        _1759 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1739 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_764, _765, _766), _1664);
        _1755 = _1739.x * cbModelParam._m0[1u].z;
        _1757 = _1739.y * cbModelParam._m0[1u].z;
        _1759 = _1739.z * cbModelParam._m0[1u].z;
    }
    float _1771 = ((((1.0 - _785) * ((_772 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_785 * _772)) * _756;
    float _1772 = _1771 * ((cbModelParam._m0[1u].w * (_1755 - _1655)) + _1655);
    float _1773 = _1771 * ((cbModelParam._m0[1u].w * (_1757 - _1657)) + _1657);
    float _1774 = _1771 * ((cbModelParam._m0[1u].w * (_1759 - _1659)) + _1659);
    float _1777 = fma(_1774, cbSceneParam._m0[89u].z, fma(_1773, cbSceneParam._m0[89u].y, _1772 * cbSceneParam._m0[89u].x));
    float _1780 = fma(_1774, cbSceneParam._m0[90u].z, fma(_1773, cbSceneParam._m0[90u].y, _1772 * cbSceneParam._m0[90u].x));
    float _1783 = fma(_1774, cbSceneParam._m0[91u].z, fma(_1773, cbSceneParam._m0[91u].y, _1772 * cbSceneParam._m0[91u].x));
    vec4 _1791 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_693, _694));
    float _1793 = _1791.w;
    float _1805 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1793);
    float _1806 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1793);
    float _1807 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1793);
    uvec4 _1811 = floatBitsToUint(cbInstanceData._m0[_731 + 5u]);
    uint _1813 = _1811.x * 14u;
    uint _1814 = _1813 + 13u;
    float _1821 = _756 + (-1.0);
    float _1826 = (cbLight._m0[_1814].x * _1821) + 1.0;
    float _1827 = (cbLight._m0[_1814].y * _1821) + 1.0;
    float _1828 = (cbLight._m0[_1814].z * _1821) + 1.0;
    float _1829 = (cbLight._m0[_1814].w * _1821) + 1.0;
    uint _1830 = _1813 + 5u;
    float _1836 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
    uint _1840 = _1813 + 4u;
    float _1849 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
    uint _1853 = _1813 | 1u;
    float _1864 = dot(vec3(cbLight._m0[_1813].xyz), vec3(_605, _606, _607));
    float _1867 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_605, _606, _607));
    float _3961 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _3972 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1872 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * 0.3183098733425140380859375;
    float _1874 = (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * 0.3183098733425140380859375;
    float _1881 = ((cbLight._m0[_1830].x * _1836) * _1874) + (((cbLight._m0[_1840].x * _1805) * _1849) * _1872);
    float _1882 = ((_1836 * cbLight._m0[_1830].y) * _1874) + (((cbLight._m0[_1840].y * _1806) * _1849) * _1872);
    float _1883 = ((_1836 * cbLight._m0[_1830].z) * _1874) + (((cbLight._m0[_1840].z * _1807) * _1849) * _1872);
    uvec4 _1887 = floatBitsToUint(cbLight._m0[_1813 + 12u]);
    bool _1889 = _1887.x == 0u;
    float _1900;
    float _1902;
    float _1904;
    if (_1889)
    {
        _1900 = _1881;
        _1902 = _1882;
        _1904 = _1883;
    }
    else
    {
        uint _1908 = _1813 + 6u;
        float _1924 = (dot(vec3(cbLight._m0[_1813 + 2u].xyz), vec3(_605, _606, _607)) * 0.5) + 0.5;
        float _1925 = _1924 * _1924;
        float _3983 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1926 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1927 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _1900 = (((cbLight._m0[_1908].x * 0.3183098733425140380859375) * _1926) * _1927) + _1881;
        _1902 = (((cbLight._m0[_1908].y * 0.3183098733425140380859375) * _1926) * _1927) + _1882;
        _1904 = (((cbLight._m0[_1908].z * 0.3183098733425140380859375) * _1926) * _1927) + _1883;
    }
    bool _1907 = _1887.y == 0u;
    float _1945;
    float _1947;
    float _1949;
    if (_1907)
    {
        _1945 = _1900;
        _1947 = _1902;
        _1949 = _1904;
    }
    else
    {
        uint _2107 = _1813 + 7u;
        float _2123 = (dot(vec3(cbLight._m0[_1813 + 3u].xyz), vec3(_605, _606, _607)) * 0.5) + 0.5;
        float _2124 = _2123 * _2123;
        float _3999 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2125 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _2126 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
        _1945 = (((cbLight._m0[_2107].x * 0.3183098733425140380859375) * _2125) * _2126) + _1900;
        _1947 = (((cbLight._m0[_2107].y * 0.3183098733425140380859375) * _2125) * _2126) + _1902;
        _1949 = (((cbLight._m0[_2107].z * 0.3183098733425140380859375) * _2125) * _2126) + _1904;
    }
    uint _1952 = _1813 + 8u;
    float _1965 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1813].w)) * _608) * 0.949999988079071044921875);
    float _1966 = _1965 * _1965;
    float _1967 = cbLight._m0[_1813].x + _685;
    float _1968 = cbLight._m0[_1813].y + _686;
    float _1969 = cbLight._m0[_1813].z + _687;
    float _1973 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
    float _1974 = _1973 * _1967;
    float _1975 = _1973 * _1968;
    float _1976 = _1973 * _1969;
    float _1977 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_1813].xyz));
    float _4015 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _4026 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _1981 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _1982 = dot(vec3(_605, _606, _607), vec3(_1974, _1975, _1976));
    float _4037 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1985 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _1986 = dot(vec3(cbLight._m0[_1813].xyz), vec3(_1974, _1975, _1976));
    float _4048 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1990 = _1966 * _1966;
    float _1994 = ((_1985 * _1985) * (_1990 + (-1.0))) + 1.0;
    float _2005 = (exp2(log2(1.0 - (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2006 = 1.0 - _1966;
    float _2017 = (0.5 / (((_1981 * ((_1980 * _2006) + _1966)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2006) + _1966) * _1980))) * _1980;
    float _4059 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2019 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1990 / ((_1994 * _1994) * 3.141590118408203125));
    uint _2033 = _1813 + 9u;
    float _2044 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1853].w)) * _608) * 0.949999988079071044921875);
    float _2045 = _2044 * _2044;
    float _2046 = cbLight._m0[_1853].x + _685;
    float _2047 = cbLight._m0[_1853].y + _686;
    float _2048 = cbLight._m0[_1853].z + _687;
    float _2052 = inversesqrt(dot(vec3(_2046, _2047, _2048), vec3(_2046, _2047, _2048)));
    float _2053 = _2052 * _2046;
    float _2054 = _2052 * _2047;
    float _2055 = _2052 * _2048;
    float _2056 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_1853].xyz));
    float _4070 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2059 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _2060 = dot(vec3(_605, _606, _607), vec3(_2053, _2054, _2055));
    float _4081 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _2064 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_2053, _2054, _2055));
    float _4092 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2068 = _2045 * _2045;
    float _2072 = ((_2063 * _2063) * (_2068 + (-1.0))) + 1.0;
    float _2081 = (exp2(log2(1.0 - (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2082 = 1.0 - _2045;
    float _2092 = (0.5 / (((_1981 * ((_2059 * _2082) + _2045)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2082) + _2045) * _2059))) * _2059;
    float _4103 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2094 = (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_2068 / ((_2072 * _2072) * 3.141590118408203125));
    float _2104 = (((_2081 * cbLight._m0[_2033].x) * _2094) * _1836) + ((((cbLight._m0[_1952].x * _1805) * _2005) * _2019) * _1849);
    float _2105 = (((_2081 * cbLight._m0[_2033].y) * _2094) * _1836) + ((((cbLight._m0[_1952].y * _1806) * _2005) * _2019) * _1849);
    float _2106 = (((_2081 * cbLight._m0[_2033].z) * _2094) * _1836) + ((((cbLight._m0[_1952].z * _1807) * _2005) * _2019) * _1849);
    float _2168;
    float _2170;
    float _2172;
    if (_1889)
    {
        _2168 = _2104;
        _2170 = _2105;
        _2172 = _2106;
    }
    else
    {
        uint _2174 = _1813 + 2u;
        uint _2178 = _1813 + 10u;
        float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2174].w)) * _608) * 0.949999988079071044921875);
        float _2193 = _2192 * _2192;
        float _2194 = cbLight._m0[_2174].x + _685;
        float _2195 = cbLight._m0[_2174].y + _686;
        float _2196 = cbLight._m0[_2174].z + _687;
        float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
        float _2201 = _2200 * _2194;
        float _2202 = _2200 * _2195;
        float _2203 = _2200 * _2196;
        float _2204 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_2174].xyz));
        float _4114 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2207 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _2208 = dot(vec3(_605, _606, _607), vec3(_2201, _2202, _2203));
        float _4125 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2211 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _2212 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_2201, _2202, _2203));
        float _4136 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2216 = _2193 * _2193;
        float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
        float _2229 = (exp2(log2(1.0 - (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2230 = 1.0 - _2193;
        float _2240 = (0.5 / (((_1981 * ((_2207 * _2230) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2230) + _2193) * _2207))) * _2207;
        float _4147 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2242 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
        float _2243 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _2168 = (((_2229 * cbLight._m0[_2178].x) * _2242) * _2243) + _2104;
        _2170 = (((_2229 * cbLight._m0[_2178].y) * _2242) * _2243) + _2105;
        _2172 = (((_2229 * cbLight._m0[_2178].z) * _2242) * _2243) + _2106;
    }
    float _2278;
    float _2280;
    float _2282;
    if (_1907)
    {
        _2278 = _2168;
        _2280 = _2170;
        _2282 = _2172;
    }
    else
    {
        uint _2289 = _1813 + 3u;
        uint _2293 = _1813 + 11u;
        float _2307 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2289].w)) * _608) * 0.949999988079071044921875);
        float _2308 = _2307 * _2307;
        float _2309 = cbLight._m0[_2289].x + _685;
        float _2310 = cbLight._m0[_2289].y + _686;
        float _2311 = cbLight._m0[_2289].z + _687;
        float _2315 = inversesqrt(dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311)));
        float _2316 = _2315 * _2309;
        float _2317 = _2315 * _2310;
        float _2318 = _2315 * _2311;
        float _2319 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_2289].xyz));
        float _4163 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2322 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _2323 = dot(vec3(_605, _606, _607), vec3(_2316, _2317, _2318));
        float _4174 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2326 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _2327 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_2316, _2317, _2318));
        float _4185 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2331 = _2308 * _2308;
        float _2335 = ((_2326 * _2326) * (_2331 + (-1.0))) + 1.0;
        float _2344 = (exp2(log2(1.0 - (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2345 = 1.0 - _2308;
        float _2355 = (0.5 / (((_1981 * ((_2322 * _2345) + _2308)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2345) + _2308) * _2322))) * _2322;
        float _4196 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2357 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_2331 / ((_2335 * _2335) * 3.141590118408203125));
        float _2358 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
        _2278 = (((_2344 * cbLight._m0[_2293].x) * _2357) * _2358) + _2168;
        _2280 = (((_2344 * cbLight._m0[_2293].y) * _2357) * _2358) + _2170;
        _2282 = (((_2344 * cbLight._m0[_2293].z) * _2357) * _2358) + _2172;
    }
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    if (_1811.y == 0u)
    {
        float _2433 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2434 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2433;
        float _2435 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2433;
        float _2436 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2433;
        uvec4 _2448 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2449 = _2448.x;
        uint _2460 = uint((float(_2448.y) * floor(float(uint(cbSceneParam._m0[85u].y * _694) / _2449))) + floor(float(uint(cbSceneParam._m0[85u].x * _693) / _2449)));
        float _2470 = (log2(_2436 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2471 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        uint _2474 = uint(isnan(14.0) ? _2471 : (isnan(_2471) ? 14.0 : min(_2471, 14.0)));
        uvec4 _2479 = texelFetch(g_lightClusterGridBuffer, int(((_2474 << 2u) + (_2460 << 6u)) >> 2u));
        uint _2480 = _2479.x;
        uint _2481 = _2448.z;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        if (((((1u << ((_2481 >> 4u) & 15u)) + 4294967295u) & _2480) == 0u) || ((_2481 & 240u) == 0u))
        {
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
            _2591 = 0.0;
        }
        else
        {
            float _2582;
            float _2584;
            float _2586;
            float _2588;
            float _2590;
            float _2592;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            float _2731 = 0.0;
            uint _2732 = 0u;
            uint _2741;
            bool _2742;
            for (;;)
            {
                _2741 = texelFetch(g_lightClassification, int((((_2474 << 5u) + (_2460 << 9u)) + (_2732 << 2u)) >> 2u)).x;
                _2742 = _2741 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2742)
                {
                    frontier_phi_61_pred = _2726;
                    frontier_phi_61_pred_1 = _2731;
                    frontier_phi_61_pred_2 = _2730;
                    frontier_phi_61_pred_3 = _2729;
                    frontier_phi_61_pred_4 = _2728;
                    frontier_phi_61_pred_5 = _2727;
                }
                else
                {
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    uint _2856;
                    _2850 = _2726;
                    _2851 = _2727;
                    _2852 = _2728;
                    _2853 = _2729;
                    _2854 = _2730;
                    _2855 = _2731;
                    _2856 = _2741;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    for (;;)
                    {
                        uint _2860 = uint(findLSB(_2856)) + (_2732 << 5u);
                        uint _2857 = (_2856 + 4294967295u) & _2856;
                        uint _2862 = _2860 * 48u;
                        vec4 _2876 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2862)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 3u)).x));
                        uint _2882 = (_2860 * 48u) + 4u;
                        vec4 _2895 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2882)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 3u)).x));
                        uint _2901 = (_2860 * 48u) + 8u;
                        vec3 _2912 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2901)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2901 + 2u)).x));
                        float _2916 = _2876.x - _2434;
                        float _2917 = _2876.y - _2435;
                        float _2918 = _2876.z - _2436;
                        float _2919 = dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918));
                        float _2922 = inversesqrt(_2919);
                        float _2923 = _2922 * _2916;
                        float _2924 = _2922 * _2917;
                        float _2925 = _2922 * _2918;
                        float _2926 = dot(vec3(_712, _715, _718), vec3(_2923, _2924, _2925));
                        float _2931 = 1.0 - (_2919 * _2876.w);
                        float _4222 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                        float _2932 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                        float _2933 = sqrt(_2919) * _2895.w;
                        float _2936 = 1.39999997615814208984375 / (_2933 + 1.39999997615814208984375);
                        float _2937 = _2936 * _2936;
                        float _2940 = ((1.0 - _2937) * _2926) + _2937;
                        float _2943 = _2933 * _2933;
                        float _2947 = ((isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0))) * _2932) / ((_2943 * 0.699999988079071044921875) + 1.0);
                        float _2951 = (-0.0) - _2434;
                        float _2952 = (-0.0) - _2435;
                        float _2953 = (-0.0) - _2436;
                        float _2957 = inversesqrt(dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953)));
                        float _2958 = _2957 * _2951;
                        float _2959 = _2957 * _2952;
                        float _2960 = _2957 * _2953;
                        float _2968 = exp2(log2(1.0 / ((_2943 * 3.5) + 5.0)) * 0.25);
                        float _2969 = 1.0 - _772;
                        float _2976 = sqrt(1.0 - ((1.0 - (_2969 * _2969)) * (1.0 - (_2968 * _2968))));
                        float _2977 = _2976 * _2976;
                        float _2978 = _2977 * _2977;
                        float _2979 = _2958 + _2923;
                        float _2980 = _2959 + _2924;
                        float _2981 = _2960 + _2925;
                        float _2985 = inversesqrt(dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981)));
                        float _2989 = dot(vec3(_712, _715, _718), vec3(_2958, _2959, _2960));
                        float _4238 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2992 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                        float _2993 = dot(vec3(_712, _715, _718), vec3(_2985 * _2979, _2985 * _2980, _2985 * _2981));
                        float _4249 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2996 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                        float _3000 = ((_2996 * _2996) * (_2978 + (-1.0))) + 1.0;
                        float _3001 = _2936 * _2977;
                        float _3002 = _3001 * _3001;
                        float _3005 = ((1.0 - _3002) * _2926) + _3002;
                        float _4260 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3006 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                        float _3007 = 1.0 - _2977;
                        float _3017 = (0.5 / (((_3006 * ((_2992 * _3007) + _2977)) + 9.9999999392252902907785028219223e-09) + (((_3006 * _3007) + _2977) * _2992))) * _3006;
                        float _4271 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3028 = (((_2978 * 3.1415927410125732421875) * (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) / ((_3000 * _3000) * ((_2943 * 2.1991131305694580078125) + 3.141590118408203125))) * _2932;
                        _2785 = (_2947 * _2895.x) + _2853;
                        _2786 = (_2947 * _2895.y) + _2854;
                        _2787 = (_2947 * _2895.z) + _2855;
                        _2782 = (_3028 * _2912.x) + _2850;
                        _2783 = (_3028 * _2912.y) + _2851;
                        _2784 = (_3028 * _2912.z) + _2852;
                        if (_2857 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2850 = _2782;
                            _2851 = _2783;
                            _2852 = _2784;
                            _2853 = _2785;
                            _2854 = _2786;
                            _2855 = _2787;
                            _2856 = _2857;
                        }
                    }
                    frontier_phi_61_pred = _2782;
                    frontier_phi_61_pred_1 = _2787;
                    frontier_phi_61_pred_2 = _2786;
                    frontier_phi_61_pred_3 = _2785;
                    frontier_phi_61_pred_4 = _2784;
                    frontier_phi_61_pred_5 = _2783;
                }
                _2582 = frontier_phi_61_pred;
                _2592 = frontier_phi_61_pred_1;
                _2590 = frontier_phi_61_pred_2;
                _2588 = frontier_phi_61_pred_3;
                _2586 = frontier_phi_61_pred_4;
                _2584 = frontier_phi_61_pred_5;
                uint _2733 = _2732 + 1u;
                if (_2733 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2726 = _2582;
                    _2727 = _2584;
                    _2728 = _2586;
                    _2729 = _2588;
                    _2730 = _2590;
                    _2731 = _2592;
                    _2732 = _2733;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
            _2591 = _2592;
        }
        uvec4 _2595 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2596 = _2595.z;
        uint _2598 = (_2596 >> 8u) & 15u;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        float _2704;
        if (((4294967295u << _2598) & _2480) == 0u)
        {
            _2694 = _2581;
            _2696 = _2583;
            _2698 = _2585;
            _2700 = _2587;
            _2702 = _2589;
            _2704 = _2591;
        }
        else
        {
            float _2719 = inversesqrt(dot(vec3(_2434, _2435, _2436), vec3(_2434, _2435, _2436)));
            float _2720 = _2719 * _2434;
            float _2721 = _2719 * _2435;
            float _2722 = _2719 * _2436;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2598 < ((_2596 >> 12u) & 15u))
            {
                float _2695;
                float _2697;
                float _2699;
                float _2701;
                float _2703;
                float _2705;
                float _2833 = _2581;
                float _2834 = _2583;
                float _2835 = _2585;
                float _2836 = _2587;
                float _2837 = _2589;
                float _2838 = _2591;
                uint _2839 = _2598;
                uint _2848;
                bool _2849;
                for (;;)
                {
                    _2848 = texelFetch(g_lightClassification, int((((_2474 << 5u) + (_2460 << 9u)) + (_2839 << 2u)) >> 2u)).x;
                    _2849 = _2848 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2849)
                    {
                        frontier_phi_67_pred = _2836;
                        frontier_phi_67_pred_1 = _2837;
                        frontier_phi_67_pred_2 = _2838;
                        frontier_phi_67_pred_3 = _2835;
                        frontier_phi_67_pred_4 = _2834;
                        frontier_phi_67_pred_5 = _2833;
                    }
                    else
                    {
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3046 = _2833;
                        float _3047 = _2834;
                        float _3048 = _2835;
                        float _3049 = _2836;
                        float _3050 = _2837;
                        float _3051 = _2838;
                        uint _3052 = _2848;
                        uint _3053;
                        vec4 _3078;
                        float _3079;
                        vec4 _3094;
                        vec3 _3106;
                        vec4 _3121;
                        vec4 _3136;
                        float _3183;
                        bool _3184;
                        for (;;)
                        {
                            uint _3063 = ((_2839 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3052));
                            _3053 = (_3052 + 4294967295u) & _3052;
                            uint _3065 = _3063 * 40u;
                            _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            _3079 = _3078.w;
                            uint _3081 = (_3063 * 40u) + 4u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            uint _3096 = (_3063 * 40u) + 8u;
                            _3106 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x));
                            uint _3108 = (_3063 * 40u) + 16u;
                            _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            uint _3123 = (_3063 * 40u) + 20u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            uint _3139 = (_3063 * 40u) + 24u;
                            vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3158 = (_3063 * 40u) + 28u;
                            vec4 _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            _3183 = fma(_2436, _3171.z, fma(_2435, _3171.y, _3171.x * _2434)) + _3171.w;
                            _3184 = !((fma(_2436, _3152.z, fma(_2435, _3152.y, _3152.x * _2434)) + _3152.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3184)
                            {
                                float _3211 = _3078.x - _2434;
                                float _3212 = _3078.y - _2435;
                                float _3213 = _3078.z - _2436;
                                float _3214 = dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213));
                                float _3217 = inversesqrt(_3214);
                                float _3218 = _3217 * _3211;
                                float _3219 = _3217 * _3212;
                                float _3220 = _3217 * _3213;
                                float _3224 = 1.0 - (_3214 / (_3079 * _3079));
                                float _4282 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3225 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                                float _3229 = sqrt(_3214) * _3094.w;
                                float _3231 = 1.39999997615814208984375 / (_3229 + 1.39999997615814208984375);
                                float _3232 = _3231 * _3231;
                                float _3235 = ((1.0 - _3232) * dot(vec3(_3218, _3219, _3220), vec3(_712, _715, _718))) + _3232;
                                float _3238 = _3229 * _3229;
                                float _3242 = (fma(_2436, _3121.z, fma(_2435, _3121.y, _3121.x * _2434)) + _3121.w) / _3183;
                                float _3243 = (fma(_2436, _3136.z, fma(_2435, _3136.y, _3136.x * _2434)) + _3136.w) / _3183;
                                float _3247 = 1.0 - dot(vec2(_3242, _3243), vec2(_3242, _3243));
                                float _4298 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3248 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                                float _3249 = _3248 * (((isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0))) * _3225) / ((_3238 * 0.699999988079071044921875) + 1.0));
                                float _3261 = exp2(log2(1.0 / ((_3238 * 3.5) + 5.0)) * 0.25);
                                float _3262 = 1.0 - _772;
                                float _3269 = sqrt(1.0 - ((1.0 - (_3262 * _3262)) * (1.0 - (_3261 * _3261))));
                                float _3270 = _3269 * _3269;
                                float _3271 = _3270 * _3270;
                                float _3272 = _3218 - _2720;
                                float _3273 = _3219 - _2721;
                                float _3274 = _3220 - _2722;
                                float _3278 = inversesqrt(dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274)));
                                float _3282 = dot(vec3(_712, _715, _718), vec3((-0.0) - _2720, (-0.0) - _2721, (-0.0) - _2722));
                                float _4309 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3285 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                                float _3286 = dot(vec3(_712, _715, _718), vec3(_3278 * _3272, _3278 * _3273, _3278 * _3274));
                                float _4320 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3289 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                                float _3293 = ((_3289 * _3289) * (_3271 + (-1.0))) + 1.0;
                                float _3294 = _3231 * _3270;
                                float _3295 = _3294 * _3294;
                                float _3301 = ((1.0 - _3295) * dot(vec3(_712, _715, _718), vec3(_3218, _3219, _3220))) + _3295;
                                float _4331 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3302 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                                float _3303 = 1.0 - _3270;
                                float _3313 = (0.5 / (((_3302 * ((_3285 * _3303) + _3270)) + 9.9999999392252902907785028219223e-09) + (((_3302 * _3303) + _3270) * _3285))) * _3302;
                                float _4342 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3323 = (_3248 * _3225) * (((_3271 * 3.1415927410125732421875) * (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) / ((_3293 * _3293) * ((_3238 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3323 * _3106.x;
                                frontier_phi_73_pred_1 = _3323 * _3106.y;
                                frontier_phi_73_pred_2 = _3249 * _3094.z;
                                frontier_phi_73_pred_3 = _3249 * _3094.y;
                                frontier_phi_73_pred_4 = _3249 * _3094.x;
                                frontier_phi_73_pred_5 = _3323 * _3106.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3327 = frontier_phi_73_pred;
                            _3328 = frontier_phi_73_pred_1;
                            _3332 = frontier_phi_73_pred_2;
                            _3331 = frontier_phi_73_pred_3;
                            _3330 = frontier_phi_73_pred_4;
                            _3329 = frontier_phi_73_pred_5;
                            _3036 = _3330 + _3049;
                            _3037 = _3331 + _3050;
                            _3038 = _3332 + _3051;
                            _3033 = _3327 + _3046;
                            _3034 = _3328 + _3047;
                            _3035 = _3329 + _3048;
                            if (_3053 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3053;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3036;
                        frontier_phi_67_pred_1 = _3037;
                        frontier_phi_67_pred_2 = _3038;
                        frontier_phi_67_pred_3 = _3035;
                        frontier_phi_67_pred_4 = _3034;
                        frontier_phi_67_pred_5 = _3033;
                    }
                    _2701 = frontier_phi_67_pred;
                    _2703 = frontier_phi_67_pred_1;
                    _2705 = frontier_phi_67_pred_2;
                    _2699 = frontier_phi_67_pred_3;
                    _2697 = frontier_phi_67_pred_4;
                    _2695 = frontier_phi_67_pred_5;
                    uint _2840 = _2839 + 1u;
                    if (_2840 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2833 = _2695;
                        _2834 = _2697;
                        _2835 = _2699;
                        _2836 = _2701;
                        _2837 = _2703;
                        _2838 = _2705;
                        _2839 = _2840;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2703;
                frontier_phi_55_56_ladder_1 = _2705;
                frontier_phi_55_56_ladder_2 = _2701;
                frontier_phi_55_56_ladder_3 = _2699;
                frontier_phi_55_56_ladder_4 = _2697;
                frontier_phi_55_56_ladder_5 = _2695;
            }
            else
            {
                frontier_phi_55_56_ladder = _2589;
                frontier_phi_55_56_ladder_1 = _2591;
                frontier_phi_55_56_ladder_2 = _2587;
                frontier_phi_55_56_ladder_3 = _2585;
                frontier_phi_55_56_ladder_4 = _2583;
                frontier_phi_55_56_ladder_5 = _2581;
            }
            _2694 = frontier_phi_55_56_ladder_5;
            _2696 = frontier_phi_55_56_ladder_4;
            _2698 = frontier_phi_55_56_ladder_3;
            _2700 = frontier_phi_55_56_ladder_2;
            _2702 = frontier_phi_55_56_ladder;
            _2704 = frontier_phi_55_56_ladder_1;
        }
        float _2709 = isnan(1.0) ? _756 : (isnan(_756) ? 1.0 : min(_756, 1.0));
        _2493 = (_2709 * _2700) + _1945;
        _2495 = (_2709 * _2702) + _1947;
        _2497 = (_2709 * _2704) + _1949;
        _2499 = ((_2694 * 0.039999999105930328369140625) * _2709) + _2278;
        _2501 = ((_2696 * 0.039999999105930328369140625) * _2709) + _2280;
        _2503 = ((_2698 * 0.039999999105930328369140625) * _2709) + _2282;
    }
    else
    {
        _2493 = _1945;
        _2495 = _1947;
        _2497 = _1949;
        _2499 = _2278;
        _2501 = _2280;
        _2503 = _2282;
    }
    float _4358 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4369 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4380 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    uint _2523 = _731 + 6u;
    float _2531 = _693 / cbSceneParam._m0[86u].x;
    float _2532 = _694 / cbSceneParam._m0[86u].y;
    vec4 _2546 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2531, _2532, (log2((isnan(cbSceneParam._m0[77u].w) ? _627 : (isnan(_627) ? cbSceneParam._m0[77u].w : min(_627, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2548 = _2546.x;
    float _2549 = _2546.y;
    float _2550 = _2546.z;
    float _2551 = _2546.w;
    float _2644;
    float _2646;
    float _2648;
    float _2650;
    if (_627 > cbSceneParam._m0[78u].w)
    {
        float _2606 = isnan(_627) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _627 : min(cbSceneParam._m0[80u].w, _627));
        float _2607 = _2606 / _627;
        float _2618 = _2607 * _678;
        float _2619 = _679 * _2607;
        float _2620 = (-0.0) - _2619;
        float _2622 = _2607 * _680;
        float _2624 = (cbSceneParam._m0[77u].w * _2620) / _2606;
        float _2625 = _2624 + cbSceneParam._m0[79u].w;
        float _2626 = cbSceneParam._m0[79u].w - _2619;
        float _2632 = sqrt(((_2618 * _2618) + (_2619 * _2619)) + (_2622 * _2622));
        float _2635 = (1.0 - (cbSceneParam._m0[77u].w / _2606)) * _2632;
        float _2640 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2642 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2795;
        if (abs((_2620 - _2624) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2795 = ((((_2625 > 0.0) ? exp2(_2640 * _2625) : (2.0 - exp2(_2642 * _2625))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2635;
        }
        else
        {
            float _2755 = 1.0 / cbSceneParam._m0[80u].x;
            float _2756 = isnan(_2626) ? _2625 : (isnan(_2625) ? _2626 : max(_2625, _2626));
            float _2757 = isnan(_2626) ? _2625 : (isnan(_2625) ? _2626 : min(_2625, _2626));
            float _2766 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : min(_2756, 0.0));
            float _2767 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : min(_2757, 0.0));
            _2795 = ((abs(_2632 / _2620) * cbSceneParam._m0[80u].y) * ((((_2766 - _2767) * 2.0) - ((exp2(_2640 * (isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0)))) - exp2(_2640 * (isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0))))) * _2755)) - ((exp2(_2642 * _2766) - exp2(_2642 * _2767)) * _2755))) + (_2635 * cbSceneParam._m0[80u].z);
        }
        vec4 _2797 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2531, _2532, 1.0), 0.0);
        float _2806 = exp2((_2795 * (-1.44269502162933349609375)) * (1.0 - _2797.w));
        float _2807 = log2(_2806);
        float _2823 = log2(_2551);
        _2644 = (exp2(_2823 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2807 * cbSceneParam._m0[78u].x)) * _2797.x) / cbSceneParam._m0[78u].x)) + _2548;
        _2646 = (exp2(_2823 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2807 * cbSceneParam._m0[78u].y)) * _2797.y) / cbSceneParam._m0[78u].y)) + _2549;
        _2648 = (exp2(_2823 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2807 * cbSceneParam._m0[78u].z)) * _2797.z) / cbSceneParam._m0[78u].z)) + _2550;
        _2650 = _2806 * _2551;
    }
    else
    {
        _2644 = _2548;
        _2646 = _2549;
        _2648 = _2550;
        _2650 = _2551;
    }
    float _2662 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2663 = _2662 == 3.0;
    float _2664 = log2(_2650);
    float _2671 = exp2(_2664 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2493 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _756))) + ((_2499 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1563)) * cbPerFrame._m0[3u].x));
    float _2672 = exp2(_2664 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_2495 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _756))) + ((_2501 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1563)) * cbPerFrame._m0[3u].x));
    float _2673 = exp2(_2664 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2497 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _756))) + ((_2503 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1563)) * cbPerFrame._m0[3u].x));
    float _2682 = (_2662 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2682 * (_2663 ? _2671 : (_2671 + (cbSceneParam._m0[72u].w * _2644)));
    SV_Target.y = _2682 * (_2663 ? _2672 : (_2672 + (cbSceneParam._m0[72u].w * _2646)));
    SV_Target.z = _2682 * (_2663 ? _2673 : (_2673 + (cbSceneParam._m0[72u].w * _2648)));
    SV_Target.w = cbInstanceData._m0[_2523].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2523].w;
}


