#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 0) uniform texture2D M_VirtualMonitor_Item_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in vec2 TEXCOORD_9;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    vec4 _104 = texture(sampler2D(M_VirtualMonitor_Item_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _106 = _104.w;
    uint _109 = uint(roundEven(NORMAL.w));
    if (!(!(cbMtdParam._m0[15u].x <= 0.0)))
    {
        discard_state = true;
    }
    float _154 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _164 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _154);
    float _165 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _154);
    float _166 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _154);
    vec4 _171 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _173 = _171.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _209 = sqrt(((_164 * _164) + (_165 * _165)) + (_166 * _166));
        float _216 = (cbMatDynParam._m0[5u].x * _209) + cbMatDynParam._m0[5u].y;
        float _286 = isnan(0.0) ? _216 : (isnan(_216) ? 0.0 : max(_216, 0.0));
        float _218 = isnan(1.0) ? _286 : (isnan(_286) ? 1.0 : min(_286, 1.0));
        float _222 = (cbMatDynParam._m0[5u].z * _209) + cbMatDynParam._m0[5u].w;
        float _297 = isnan(0.0) ? _222 : (isnan(_222) ? 0.0 : max(_222, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _297 : (isnan(_297) ? 1.0 : min(_297, 1.0))) - _218)) + _218) < ((_173 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    bool _256;
    vec4 _187;
    float _189;
    float _190;
    bool _201;
    uint _202;
    for (;;)
    {
        float _184 = _173 + (-0.5);
        _187 = cbMtdParam._m0[1u];
        _189 = _187.y * _184;
        _190 = _184 * 0.999000012874603271484375;
        _201 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        _202 = _109 * 13u;
        if (_201)
        {
            if ((cbInstanceData._m0[_202 + 7u].x + _190) < 0.5)
            {
                _256 = true;
                break;
            }
        }
        uint _248 = (_202 + 9u) + uint(cbMatDynParam._m0[0u].w);
        if ((cbInstanceData._m0[_248].w < 1.0) && ((cbInstanceData._m0[_248].w + _190) < 0.5))
        {
            _256 = true;
            break;
        }
        if ((_189 + _106) < _187.x)
        {
            _256 = true;
            break;
        }
        _256 = false;
        break;
    }
    if (_256)
    {
        discard_state = true;
    }
    discard_exit();
}


