#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec4 TEXCOORD;
layout(location = 7) in vec4 TEXCOORD_1;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec4 TEXCOORD_2;
layout(location = 5) out vec4 TEXCOORD_5;
layout(location = 6) out vec2 TEXCOORD_9;

void main()
{
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_2.w = 0.0;
    TEXCOORD_5.x = 0.0;
    TEXCOORD_5.y = 0.0;
    TEXCOORD_5.z = 0.0;
    TEXCOORD_5.w = 0.0;
    TEXCOORD_9.x = 0.0;
    TEXCOORD_9.y = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _200 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _202 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _203 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _212 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _213 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _214 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _224 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + (uint(gl_InstanceIndex) - uint(gl_BaseInstance));
    uvec4 _226 = texelFetch(g_InstanceIndexBuffer, int(_224));
    uint _227 = _226.x;
    precise float _228 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _233 = isnan(_228) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _228 : max(0.001000000047497451305389404296875, _228));
    precise float _235 = BLENDWEIGHT.x / _233;
    precise float _236 = BLENDWEIGHT.y / _233;
    precise float _237 = BLENDWEIGHT.z / _233;
    precise float _238 = BLENDWEIGHT.w / _233;
    uint _240 = _227 * 13u;
    uvec4 _245 = floatBitsToUint(cbInstanceData._m0[_240 + 4u]);
    uint _246 = _245.x;
    uint _248 = (_246 + uint(float(BLENDINDICES.x))) * 3u;
    uint _255 = _248 + 1u;
    uint _262 = _248 + 2u;
    precise float _269 = _235 * cbObjMatrix._m0[_248].x;
    precise float _270 = _235 * cbObjMatrix._m0[_255].x;
    precise float _271 = _235 * cbObjMatrix._m0[_262].x;
    precise float _272 = _235 * cbObjMatrix._m0[_248].y;
    precise float _273 = _235 * cbObjMatrix._m0[_255].y;
    precise float _274 = _235 * cbObjMatrix._m0[_262].y;
    precise float _275 = _235 * cbObjMatrix._m0[_248].z;
    precise float _276 = _235 * cbObjMatrix._m0[_255].z;
    precise float _277 = _235 * cbObjMatrix._m0[_262].z;
    precise float _278 = _235 * cbObjMatrix._m0[_248].w;
    precise float _279 = _235 * cbObjMatrix._m0[_255].w;
    precise float _280 = _235 * cbObjMatrix._m0[_262].w;
    uint _283 = (_246 + uint(float(BLENDINDICES.y))) * 3u;
    uint _290 = _283 + 1u;
    uint _297 = _283 + 2u;
    precise float _304 = _236 * cbObjMatrix._m0[_283].x;
    precise float _305 = _236 * cbObjMatrix._m0[_290].x;
    precise float _306 = _236 * cbObjMatrix._m0[_297].x;
    precise float _307 = _236 * cbObjMatrix._m0[_283].y;
    precise float _308 = _236 * cbObjMatrix._m0[_290].y;
    precise float _309 = _236 * cbObjMatrix._m0[_297].y;
    precise float _310 = _236 * cbObjMatrix._m0[_283].z;
    precise float _311 = _236 * cbObjMatrix._m0[_290].z;
    precise float _312 = _236 * cbObjMatrix._m0[_297].z;
    precise float _313 = _236 * cbObjMatrix._m0[_283].w;
    precise float _314 = _236 * cbObjMatrix._m0[_290].w;
    precise float _315 = _236 * cbObjMatrix._m0[_297].w;
    precise float _316 = _269 + _304;
    precise float _317 = _270 + _305;
    precise float _318 = _271 + _306;
    precise float _319 = _272 + _307;
    precise float _320 = _273 + _308;
    precise float _321 = _274 + _309;
    precise float _322 = _275 + _310;
    precise float _323 = _276 + _311;
    precise float _324 = _277 + _312;
    precise float _325 = _278 + _313;
    precise float _326 = _279 + _314;
    precise float _327 = _280 + _315;
    uint _330 = (_246 + uint(float(BLENDINDICES.z))) * 3u;
    uint _337 = _330 + 1u;
    uint _344 = _330 + 2u;
    precise float _351 = _237 * cbObjMatrix._m0[_330].x;
    precise float _352 = _237 * cbObjMatrix._m0[_337].x;
    precise float _353 = _237 * cbObjMatrix._m0[_344].x;
    precise float _354 = _237 * cbObjMatrix._m0[_330].y;
    precise float _355 = _237 * cbObjMatrix._m0[_337].y;
    precise float _356 = _237 * cbObjMatrix._m0[_344].y;
    precise float _357 = _237 * cbObjMatrix._m0[_330].z;
    precise float _358 = _237 * cbObjMatrix._m0[_337].z;
    precise float _359 = _237 * cbObjMatrix._m0[_344].z;
    precise float _360 = _237 * cbObjMatrix._m0[_330].w;
    precise float _361 = _237 * cbObjMatrix._m0[_337].w;
    precise float _362 = _237 * cbObjMatrix._m0[_344].w;
    precise float _363 = _316 + _351;
    precise float _364 = _317 + _352;
    precise float _365 = _318 + _353;
    precise float _366 = _319 + _354;
    precise float _367 = _320 + _355;
    precise float _368 = _321 + _356;
    precise float _369 = _322 + _357;
    precise float _370 = _323 + _358;
    precise float _371 = _324 + _359;
    precise float _372 = _325 + _360;
    precise float _373 = _326 + _361;
    precise float _374 = _327 + _362;
    uint _377 = (_246 + uint(float(BLENDINDICES.w))) * 3u;
    uint _384 = _377 + 1u;
    uint _391 = _377 + 2u;
    precise float _398 = _238 * cbObjMatrix._m0[_377].x;
    precise float _399 = _238 * cbObjMatrix._m0[_384].x;
    precise float _400 = _238 * cbObjMatrix._m0[_391].x;
    precise float _401 = _238 * cbObjMatrix._m0[_377].y;
    precise float _402 = _238 * cbObjMatrix._m0[_384].y;
    precise float _403 = _238 * cbObjMatrix._m0[_391].y;
    precise float _404 = _238 * cbObjMatrix._m0[_377].z;
    precise float _405 = _238 * cbObjMatrix._m0[_384].z;
    precise float _406 = _238 * cbObjMatrix._m0[_391].z;
    precise float _407 = _238 * cbObjMatrix._m0[_377].w;
    precise float _408 = _238 * cbObjMatrix._m0[_384].w;
    precise float _409 = _238 * cbObjMatrix._m0[_391].w;
    precise float _410 = _363 + _398;
    precise float _411 = _364 + _399;
    precise float _412 = _365 + _400;
    precise float _413 = _366 + _401;
    precise float _414 = _367 + _402;
    precise float _415 = _368 + _403;
    precise float _416 = _369 + _404;
    precise float _417 = _370 + _405;
    precise float _418 = _371 + _406;
    precise float _419 = _372 + _407;
    precise float _420 = _373 + _408;
    precise float _421 = _374 + _409;
    precise float _422 = POSITION.x * _410;
    precise float _423 = POSITION.y * _413;
    precise float _424 = _423 + _422;
    precise float _425 = POSITION.z * _416;
    precise float _426 = _425 + _424;
    precise float _427 = 1.0 * _419;
    precise float _428 = _427 + _426;
    precise float _429 = POSITION.x * _411;
    precise float _430 = POSITION.y * _414;
    precise float _431 = _430 + _429;
    precise float _432 = POSITION.z * _417;
    precise float _433 = _432 + _431;
    precise float _434 = 1.0 * _420;
    precise float _435 = _434 + _433;
    precise float _436 = POSITION.x * _412;
    precise float _437 = POSITION.y * _415;
    precise float _438 = _437 + _436;
    precise float _439 = POSITION.z * _418;
    precise float _440 = _439 + _438;
    precise float _441 = 1.0 * _421;
    precise float _442 = _441 + _440;
    precise float _467 = _428 - cbSceneParam._m0[3u].x;
    precise float _468 = _435 - cbSceneParam._m0[3u].y;
    precise float _469 = _442 - cbSceneParam._m0[3u].z;
    precise float _497 = _467 * cbSceneParam._m0[24u].x;
    precise float _498 = _468 * cbSceneParam._m0[24u].y;
    precise float _499 = _498 + _497;
    precise float _500 = _469 * cbSceneParam._m0[24u].z;
    precise float _501 = _500 + _499;
    precise float _502 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _503 = _502 + _501;
    precise float _504 = _467 * cbSceneParam._m0[25u].x;
    precise float _505 = _468 * cbSceneParam._m0[25u].y;
    precise float _506 = _505 + _504;
    precise float _507 = _469 * cbSceneParam._m0[25u].z;
    precise float _508 = _507 + _506;
    precise float _509 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _510 = _509 + _508;
    precise float _511 = _467 * cbSceneParam._m0[26u].x;
    precise float _512 = _468 * cbSceneParam._m0[26u].y;
    precise float _513 = _512 + _511;
    precise float _514 = _469 * cbSceneParam._m0[26u].z;
    precise float _515 = _514 + _513;
    precise float _516 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _517 = _516 + _515;
    precise float _518 = _467 * cbSceneParam._m0[27u].x;
    precise float _519 = _468 * cbSceneParam._m0[27u].y;
    precise float _520 = _519 + _518;
    precise float _521 = _469 * cbSceneParam._m0[27u].z;
    precise float _522 = _521 + _520;
    precise float _523 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _524 = _523 + _522;
    gl_Position.x = _503;
    gl_Position.y = _510;
    gl_Position.z = _517;
    gl_Position.w = _524;
    POSITION_1.x = _503;
    POSITION_1.y = _510;
    POSITION_1.z = _517;
    POSITION_1.w = _524;
    NORMAL_1.x = fma(_203, _416, fma(_202, _413, _410 * _200));
    NORMAL_1.y = fma(_203, _417, fma(_202, _414, _411 * _200));
    NORMAL_1.z = fma(_203, _418, fma(_202, _415, _412 * _200));
    NORMAL_1.w = float(_227);
    TANGENT_1.x = fma(_214, _416, fma(_213, _413, _410 * _212));
    TANGENT_1.y = fma(_214, _417, fma(_213, _414, _411 * _212));
    TANGENT_1.z = fma(_214, _418, fma(_213, _415, _412 * _212));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = ((float(int(uint(TEXCOORD.z))) * 0.00048828125) * cbTexScroll._m0[1u].x) + cbTexScroll._m0[1u].z;
    TEXCOORD_2.w = ((float(int(uint(TEXCOORD.w))) * 0.00048828125) * cbTexScroll._m0[1u].y) + cbTexScroll._m0[1u].w;
    TEXCOORD_5.x = TEXCOORD_1.x;
    TEXCOORD_5.y = TEXCOORD_1.y;
    TEXCOORD_5.z = TEXCOORD_1.z;
    TEXCOORD_5.w = COLOR_1.x;
    TEXCOORD_9.x = _517;
    TEXCOORD_9.y = _524;
    gl_ClipDistance[0u] = dot(vec4(_503, _510, _517, _524), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_503, _510, _517, _524), vec4(cbInstanceData._m0[_240 + 3u]));
}


