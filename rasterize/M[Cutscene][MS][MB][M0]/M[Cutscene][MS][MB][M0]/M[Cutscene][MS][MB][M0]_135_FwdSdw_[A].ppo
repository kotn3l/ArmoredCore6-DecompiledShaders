#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[33];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1366;
float _4058;
float _4059;
float _4060;
float _4061;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _299 = _296.w;
    vec4 _318 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _323 = _318.x * cbMtdParam._m0[11u].x;
    float _324 = _318.y * cbMtdParam._m0[11u].y;
    float _325 = _318.z * cbMtdParam._m0[11u].z;
    vec4 _344 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _379 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[28u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[28u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _381 = _379.x;
    float _394 = dot(vec4(_381, _379.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _411 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_381 - _394) * cbMtdParam._m0[24u].x) + _394) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4070 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _412 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _419 = (_412 * ((_344.x * cbMtdParam._m0[12u].x) - _323)) + _323;
    float _420 = (_412 * ((_344.y * cbMtdParam._m0[12u].y) - _324)) + _324;
    float _421 = (_412 * ((_344.z * cbMtdParam._m0[12u].z) - _325)) + _325;
    vec4 _440 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _282) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _283) + cbTextureTilingScale._m0[14u].w));
    vec4 _460 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _282) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _283) + cbTextureTilingScale._m0[20u].w));
    vec4 _485 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _487 = _485.x;
    float _488 = _485.y;
    float _493 = cbMtdParam._m0[25u].w * _485.z;
    float _4081 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _494 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    vec4 _507 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    float _515 = cbMtdParam._m0[26u].x * _507.z;
    float _4092 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _525 = (((isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) - _494) * _412) + _494;
    float _528 = ((((_507.x - _487) * _412) + _487) * 2.0) + (-1.0);
    float _529 = ((((_507.y - _488) * _412) + _488) * 2.0) + (-1.0);
    float _530 = dot(vec2(_528, _529), vec2(_528, _529));
    float _4103 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _535 = sqrt(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))));
    vec4 _552 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _559 = cbMtdParam._m0[25u].z * _552.z;
    float _4114 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    vec4 _580 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _582 = _580.x;
    float _583 = 1.0 - _582;
    float _589 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _592 = ((isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : min(_589, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _601 = (_592 - ((((((_582 - _583) * cbMtdParam._m0[24u].z) + _583) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _592))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4135 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _602 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _609 = (_602 * ((_440.x * cbMtdParam._m0[18u].x) - _419)) + _419;
    float _610 = (_602 * ((_440.y * cbMtdParam._m0[18u].y) - _420)) + _420;
    float _611 = (_602 * ((_440.z * cbMtdParam._m0[18u].z) - _421)) + _421;
    vec4 _623 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _625 = _623.x;
    float _626 = 1.0 - _625;
    float _653 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_625 - _626) * cbMtdParam._m0[24u].w) + _626) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4146 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _654 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _662 = ((((cbMtdParam._m0[10u].x - _609) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _654) + _609;
    float _663 = ((((cbMtdParam._m0[10u].y - _610) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _654) + _610;
    float _664 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _611)) * _654) + _611;
    float _669 = (((_460.z - _525) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _525;
    float _673 = (((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) - _669) * cbMtdParam._m0[19u].w) + _669;
    vec4 _687 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _694 = (_687.x * 2.0) + (-1.0);
    float _695 = (_687.y * 2.0) + (-1.0);
    float _696 = dot(vec2(_694, _695), vec2(_694, _695));
    float _4157 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _704 = (_602 * (_687.z - _673)) + _673;
    float _707 = ((cbMtdParam._m0[23u].y - _704) * _654) + _704;
    float _711 = ((1.0 - _707) * cbMtdParam._m0[26u].y) + _707;
    float _4168 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _712 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    vec4 _734 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[28u].w * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[29u].x * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _740 = (_734.x * 2.0) + (-1.0);
    float _741 = (_734.y * 2.0) + (-1.0);
    float _742 = dot(vec2(_740, _741), vec2(_740, _741));
    float _4179 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _756 = (_528 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_460.x * 2.0) + (-1.0)))) + (((_552.x * 2.0) + (-1.0)) * cbMtdParam._m0[27u].x);
    float _757 = (_529 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_460.y * 2.0) + (-1.0)))) + (((_552.y * 2.0) + (-1.0)) * cbMtdParam._m0[27u].x);
    float _769 = (((_694 - _756) + (cbMtdParam._m0[21u].x * _756)) * _602) + _756;
    float _770 = (((_695 - _757) + (cbMtdParam._m0[21u].x * _757)) * _602) + _757;
    float _771 = (_602 * (sqrt(1.0 - (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) - _535)) + _535;
    float _782 = (((_740 - _769) + (_769 * cbMtdParam._m0[22u].z)) * _654) + _769;
    float _783 = (((_741 - _770) + (_770 * cbMtdParam._m0[22u].z)) * _654) + _770;
    float _784 = ((sqrt(1.0 - (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) - _771) * _654) + _771;
    float _786 = cbMtdParam._m0[22u].x + _552.w;
    float _791 = fma(_784, _250 * NORMAL.x, fma(_783, _257 * TANGENT.x, (_243 * _235) * _782));
    float _794 = fma(_784, _250 * NORMAL.y, fma(_783, _257 * TANGENT.y, (_243 * _236) * _782));
    float _797 = fma(_784, _250 * NORMAL.z, fma(_783, _257 * TANGENT.z, (_243 * _237) * _782));
    float _801 = inversesqrt(dot(vec3(_791, _794, _797), vec3(_791, _794, _797)));
    float _802 = _801 * _791;
    float _803 = _801 * _794;
    float _804 = _801 * _797;
    float _4190 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _805 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _4201 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4212 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _4223 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _4234 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _823 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _874 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _864);
    float _875 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _864);
    float _876 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _864);
    float _880 = inversesqrt(dot(vec3(_874, _875, _876), vec3(_874, _875, _876)));
    float _881 = _874 * _880;
    float _882 = _875 * _880;
    float _883 = _876 * _880;
    vec4 _888 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _890 = _888.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1047 = sqrt(((_874 * _874) + (_875 * _875)) + (_876 * _876));
        float _1053 = (cbMatDynParam._m0[5u].x * _1047) + cbMatDynParam._m0[5u].y;
        float _4245 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1058 = (cbMatDynParam._m0[5u].z * _1047) + cbMatDynParam._m0[5u].w;
        float _4256 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) - _1054)) + _1054) < ((_890 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _901 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _902 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _920 = fma(_804, cbSceneParam._m0[5u].z, fma(_803, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _802));
    float _923 = fma(_804, cbSceneParam._m0[6u].z, fma(_803, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _802));
    float _926 = fma(_804, cbSceneParam._m0[7u].z, fma(_803, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _802));
    uint _939 = _263 + 9u;
    uint _940 = _939 + uint(cbMatDynParam._m0[0u].w);
    float _946 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * cbInstanceData._m0[_940].x;
    float _947 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) * cbInstanceData._m0[_940].y;
    float _948 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) * cbInstanceData._m0[_940].z;
    float _4267 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _949 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _4278 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _950 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _4289 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    vec4 _960 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _901, cbSceneParam._m0[86u].y * _902));
    float _964 = ((isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * TEXCOORD_5.w) * _960.x;
    float _965 = dot(vec3(_802, _803, _804), vec3(_881, _882, _883));
    float _968 = _965 * 2.0;
    float _972 = (_968 * _802) - _881;
    float _973 = (_968 * _803) - _882;
    float _974 = (_968 * _804) - _883;
    float _981 = abs(dot(vec3(_881, _882, _883), vec3(_802, _803, _804)));
    float _4300 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _983 = sqrt(_805);
    float _996 = exp2((_983 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_983 * 3.0));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1365;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1090 = fma(_1036, cbModelParam._m0[26u].z, fma(_1032, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1028));
        float _1094 = fma(_1036, cbModelParam._m0[27u].z, fma(_1032, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1028));
        float _1098 = fma(_1036, cbModelParam._m0[28u].z, fma(_1032, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1028));
        float _1123 = _1028 + _802;
        float _1124 = _1032 + _803;
        float _1125 = _1036 + _804;
        float _1135 = fma(_1125, cbModelParam._m0[26u].z, fma(_1124, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1123)) - _1090;
        float _1136 = fma(_1125, cbModelParam._m0[27u].z, fma(_1124, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1123)) - _1094;
        float _1137 = fma(_1125, cbModelParam._m0[28u].z, fma(_1124, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1123)) - _1098;
        float _1141 = inversesqrt(dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137)));
        float _1154 = ((_1141 * _1135) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1090 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1141 * _1136) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1094 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1141 * _1137) / cbModelParam._m0[34u].z) + ((((((_1098 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        float _1193 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1159.x + (-0.5));
        float _1195 = _1193 * (_1159.y + (-0.5));
        float _1196 = _1193 * (_1159.z + (-0.5));
        float _1203 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1166.x + (-0.5));
        float _1205 = _1203 * (_1166.y + (-0.5));
        float _1206 = _1203 * (_1166.z + (-0.5));
        float _1213 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1173.x + (-0.5));
        float _1215 = _1213 * (_1173.y + (-0.5));
        float _1216 = _1213 * (_1173.z + (-0.5));
        float _1223 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1180.x + (-0.5));
        float _1225 = _1223 * (_1180.y + (-0.5));
        float _1226 = _1223 * (_1180.z + (-0.5));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = _1194 * 0.5;
        float _1231 = _1204 * 0.5;
        float _1232 = _1214 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1247 = (dot(vec3(_802, _803, _804), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _4326 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1257 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _4337 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _4348 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_1259 + 1.0))) + _1264) * _1227;
        float _1274 = _1195 * 0.5;
        float _1275 = _1205 * 0.5;
        float _1276 = _1215 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_802, _803, _804), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _4359 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _4370 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _4381 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_1301 + 1.0))) + _1306) * _1228;
        float _1316 = _1196 * 0.5;
        float _1317 = _1206 * 0.5;
        float _1318 = _1216 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_802, _803, _804), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _4392 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _4403 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4414 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_1343 + 1.0))) + _1348) * _1229;
        _1365 = _1196;
        _1367 = _1195;
        _1368 = _1194;
        _1369 = _1206;
        _1370 = _1205;
        _1371 = _1204;
        _1372 = _1216;
        _1373 = _1215;
        _1374 = _1214;
        _1375 = _1229;
        _1376 = _1228;
        _1377 = _1227;
        _1378 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
    }
    else
    {
        _1365 = _1366;
        _1367 = _1366;
        _1368 = _1366;
        _1369 = _1366;
        _1370 = _1366;
        _1371 = _1366;
        _1372 = _1366;
        _1373 = _1366;
        _1374 = _1366;
        _1375 = _1366;
        _1376 = _1366;
        _1377 = _1366;
        _1378 = 0.0;
        _1379 = 0.0;
        _1380 = 0.0;
    }
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1407 = fma(_1036, cbModelParam._m0[30u].z, fma(_1032, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1028));
        float _1411 = fma(_1036, cbModelParam._m0[31u].z, fma(_1032, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1028));
        float _1415 = fma(_1036, cbModelParam._m0[32u].z, fma(_1032, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1028));
        float _1438 = _1028 + _802;
        float _1439 = _1032 + _803;
        float _1440 = _1036 + _804;
        float _1450 = fma(_1440, cbModelParam._m0[30u].z, fma(_1439, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1438)) - _1407;
        float _1451 = fma(_1440, cbModelParam._m0[31u].z, fma(_1439, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1438)) - _1411;
        float _1452 = fma(_1440, cbModelParam._m0[32u].z, fma(_1439, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1438)) - _1415;
        float _1456 = inversesqrt(dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452)));
        float _1469 = ((_1456 * _1450) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1407 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1470 = ((_1456 * _1451) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1411 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1471 = ((_1456 * _1452) / cbModelParam._m0[35u].z) + ((((((_1415 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1469, _1470, _1471), 0.0);
        float _1506 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1473.x + (-0.5));
        float _1508 = _1506 * (_1473.y + (-0.5));
        float _1509 = _1506 * (_1473.z + (-0.5));
        float _1516 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1480.x + (-0.5));
        float _1518 = _1516 * (_1480.y + (-0.5));
        float _1519 = _1516 * (_1480.z + (-0.5));
        float _1526 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1487.x + (-0.5));
        float _1528 = _1526 * (_1487.y + (-0.5));
        float _1529 = _1526 * (_1487.z + (-0.5));
        float _1536 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1494.x + (-0.5));
        float _1538 = _1536 * (_1494.y + (-0.5));
        float _1539 = _1536 * (_1494.z + (-0.5));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1542 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1543 = _1507 * 0.5;
        float _1544 = _1517 * 0.5;
        float _1545 = _1527 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_802, _803, _804), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _4455 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4466 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4477 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_1570 + 1.0))) + _1575) * _1540;
        float _1585 = _1508 * 0.5;
        float _1586 = _1518 * 0.5;
        float _1587 = _1528 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_802, _803, _804), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4488 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1541 + 9.9999997473787516355514526367188e-06);
        float _4499 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4510 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_1612 + 1.0))) + _1617) * _1541;
        float _1627 = _1509 * 0.5;
        float _1628 = _1519 * 0.5;
        float _1629 = _1529 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_802, _803, _804), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4521 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1542 + 9.9999997473787516355514526367188e-06);
        float _4532 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4543 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_1654 + 1.0))) + _1659) * _1542;
        _1676 = _1509;
        _1677 = _1508;
        _1678 = _1507;
        _1679 = _1519;
        _1680 = _1518;
        _1681 = _1517;
        _1682 = _1529;
        _1683 = _1528;
        _1684 = _1527;
        _1685 = _1542;
        _1686 = _1541;
        _1687 = _1540;
        _1688 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
        _1689 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
        _1690 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
    }
    else
    {
        _1676 = _1366;
        _1677 = _1366;
        _1678 = _1366;
        _1679 = _1366;
        _1680 = _1366;
        _1681 = _1366;
        _1682 = _1366;
        _1683 = _1366;
        _1684 = _1366;
        _1685 = _1366;
        _1686 = _1366;
        _1687 = _1366;
        _1688 = 0.0;
        _1689 = 0.0;
        _1690 = 0.0;
    }
    float _1700 = (cbModelParam._m0[1u].x * (_1688 - _1378)) + _1378;
    float _1701 = (cbModelParam._m0[1u].x * (_1689 - _1379)) + _1379;
    float _1702 = (cbModelParam._m0[1u].x * (_1690 - _1380)) + _1380;
    float _1723 = fma(_1702, cbSceneParam._m0[89u].z, fma(_1701, cbSceneParam._m0[89u].y, _1700 * cbSceneParam._m0[89u].x));
    float _1726 = fma(_1702, cbSceneParam._m0[90u].z, fma(_1701, cbSceneParam._m0[90u].y, _1700 * cbSceneParam._m0[90u].x));
    float _1729 = fma(_1702, cbSceneParam._m0[91u].z, fma(_1701, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1700));
    float _1744 = _972 * 0.5;
    float _1745 = _973 * 0.5;
    float _1746 = _974 * 0.5;
    float _1747 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1678, _1681, _1684, _1687));
    float _1750 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1677, _1680, _1683, _1686));
    float _1753 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1676, _1679, _1682, _1685));
    float _1787;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1760 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1365, _1369, _1372, _1375));
        float _1764 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1367, _1370, _1373, _1376));
        float _1768 = dot(vec4(_1744, _1745, _1746, 1.0), vec4(_1368, _1371, _1374, _1377));
        float _1775 = dot(vec4(cbModelParam._m0[39u]), vec4(_1744, _1745, _1746, 1.0));
        _1787 = dot(vec3(isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1775) ? 0.0 : (isnan(0.0) ? _1775 : max(0.0, _1775))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1787 = 1.0;
    }
    float _1798;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1789 = dot(vec4(cbModelParam._m0[40u]), vec4(_1744, _1745, _1746, 1.0));
        _1798 = dot(vec3(isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1789) ? 0.0 : (isnan(0.0) ? _1789 : max(0.0, _1789))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1798 = 1.0;
    }
    float _1802 = (_1798 * cbModelParam._m0[1u].x) + (_1787 * (1.0 - cbModelParam._m0[1u].x));
    float _1812 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _805);
    float _1813 = isnan(_1812) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1812 : min(cbModelParam._m0[25u].z, _1812));
    float _1893;
    float _1895;
    float _1897;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1860 = fma(_1036, cbModelParam._m0[13u].z, fma(_1032, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1028)) + cbModelParam._m0[13u].w;
        float _1864 = fma(_1036, cbModelParam._m0[14u].z, fma(_1032, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1028)) + cbModelParam._m0[14u].w;
        float _1868 = fma(_1036, cbModelParam._m0[15u].z, fma(_1032, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1028)) + cbModelParam._m0[15u].w;
        float _1871 = fma(_974, cbModelParam._m0[13u].z, fma(_973, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _972));
        float _1874 = fma(_974, cbModelParam._m0[14u].z, fma(_973, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _972));
        float _1877 = fma(_974, cbModelParam._m0[15u].z, fma(_973, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _972));
        float _1905;
        if (_1871 > 0.0)
        {
            _1905 = abs((1.0 - _1860) / _1871);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1860 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1905 = frontier_phi_17_15_ladder;
        }
        float _2131;
        if (_1874 > 0.0)
        {
            _2131 = abs((1.0 - _1864) / _1874);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1864 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2131 = frontier_phi_26_22_ladder;
        }
        float _2428;
        if (_1877 > 0.0)
        {
            _2428 = abs((1.0 - _1868) / _1877);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1868 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2428 = frontier_phi_38_33_ladder;
        }
        float _2430 = isnan(_2131) ? _1905 : (isnan(_1905) ? _2131 : min(_1905, _2131));
        float _2431 = isnan(_2428) ? _2430 : (isnan(_2430) ? _2428 : min(_2430, _2428));
        float _2435 = (_2431 * _1871) + _1860;
        float _2436 = (_2431 * _1874) + _1864;
        float _2437 = (_2431 * _1877) + _1868;
        float _2438 = _2431 * 9.9999997473787516355514526367188e-05;
        float _2440 = (-1.0) - _2438;
        float _2442 = _2438 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2437 > _2442) || ((_2437 < _2440) || ((_2436 > _2442) || ((_2436 < _2440) || ((_2435 < _2440) || (_2435 > _2442))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2582 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2437, cbModelParam._m0[9u].z, fma(_2436, cbModelParam._m0[9u].y, _2435 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2437, cbModelParam._m0[10u].z, fma(_2436, cbModelParam._m0[10u].y, _2435 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2437, cbModelParam._m0[11u].z, fma(_2436, cbModelParam._m0[11u].y, _2435 * cbModelParam._m0[11u].x))), _1813);
            frontier_phi_16_38_ladder = _2582.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2582.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2582.x * cbModelParam._m0[1u].y;
        }
        _1893 = frontier_phi_16_38_ladder_2;
        _1895 = frontier_phi_16_38_ladder_1;
        _1897 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1881 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_972, _973, _974), _1813);
        _1893 = _1881.x * cbModelParam._m0[1u].y;
        _1895 = _1881.y * cbModelParam._m0[1u].y;
        _1897 = _1881.z * cbModelParam._m0[1u].y;
    }
    float _1901 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _805);
    float _1902 = isnan(_1901) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1901 : min(cbModelParam._m0[25u].w, _1901));
    float _1991;
    float _1993;
    float _1995;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1955 = fma(_1036, cbModelParam._m0[21u].z, fma(_1032, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1028)) + cbModelParam._m0[21u].w;
        float _1959 = fma(_1036, cbModelParam._m0[22u].z, fma(_1032, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1028)) + cbModelParam._m0[22u].w;
        float _1963 = fma(_1036, cbModelParam._m0[23u].z, fma(_1032, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1028)) + cbModelParam._m0[23u].w;
        float _1966 = fma(_974, cbModelParam._m0[21u].z, fma(_973, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _972));
        float _1969 = fma(_974, cbModelParam._m0[22u].z, fma(_973, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _972));
        float _1972 = fma(_974, cbModelParam._m0[23u].z, fma(_973, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _972));
        float _2136;
        if (_1966 > 0.0)
        {
            _2136 = abs((1.0 - _1955) / _1966);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1955 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2136 = frontier_phi_28_24_ladder;
        }
        float _2455;
        if (_1969 > 0.0)
        {
            _2455 = abs((1.0 - _1959) / _1969);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1959 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2455 = frontier_phi_40_35_ladder;
        }
        float _2782;
        if (_1972 > 0.0)
        {
            _2782 = abs((1.0 - _1963) / _1972);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1963 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2782 = frontier_phi_50_47_ladder;
        }
        float _2784 = isnan(_2455) ? _2136 : (isnan(_2136) ? _2455 : min(_2136, _2455));
        float _2785 = isnan(_2782) ? _2784 : (isnan(_2784) ? _2782 : min(_2784, _2782));
        float _2789 = (_2785 * _1966) + _1955;
        float _2790 = (_2785 * _1969) + _1959;
        float _2791 = (_2785 * _1972) + _1963;
        float _2792 = _2785 * 9.9999997473787516355514526367188e-05;
        float _2793 = (-1.0) - _2792;
        float _2795 = _2792 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2791 > _2795) || ((_2791 < _2793) || ((_2790 > _2795) || ((_2790 < _2793) || ((_2789 < _2793) || (_2789 > _2795))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2909 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2791, cbModelParam._m0[17u].z, fma(_2790, cbModelParam._m0[17u].y, _2789 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2791, cbModelParam._m0[18u].z, fma(_2790, cbModelParam._m0[18u].y, _2789 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2791, cbModelParam._m0[19u].z, fma(_2790, cbModelParam._m0[19u].y, _2789 * cbModelParam._m0[19u].x))), _1902);
            frontier_phi_25_50_ladder = _2909.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2909.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2909.x * cbModelParam._m0[1u].z;
        }
        _1991 = frontier_phi_25_50_ladder_2;
        _1993 = frontier_phi_25_50_ladder_1;
        _1995 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1975 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_972, _973, _974), _1902);
        _1991 = _1975.x * cbModelParam._m0[1u].z;
        _1993 = _1975.y * cbModelParam._m0[1u].z;
        _1995 = _1975.z * cbModelParam._m0[1u].z;
    }
    float _2007 = ((((1.0 - _996) * ((_983 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_996 * _983)) * _964;
    float _2008 = _2007 * ((cbModelParam._m0[1u].w * (_1991 - _1893)) + _1893);
    float _2009 = _2007 * ((cbModelParam._m0[1u].w * (_1993 - _1895)) + _1895);
    float _2010 = _2007 * ((cbModelParam._m0[1u].w * (_1995 - _1897)) + _1897);
    float _2013 = fma(_2010, cbSceneParam._m0[89u].z, fma(_2009, cbSceneParam._m0[89u].y, _2008 * cbSceneParam._m0[89u].x));
    float _2016 = fma(_2010, cbSceneParam._m0[90u].z, fma(_2009, cbSceneParam._m0[90u].y, _2008 * cbSceneParam._m0[90u].x));
    float _2019 = fma(_2010, cbSceneParam._m0[91u].z, fma(_2009, cbSceneParam._m0[91u].y, _2008 * cbSceneParam._m0[91u].x));
    float _2030 = _901 / cbSceneParam._m0[86u].x;
    float _2031 = _902 / cbSceneParam._m0[86u].y;
    float _2038 = (cbSceneParam._m0[88u].y * (1.0 - cbMtdParam._m0[25u].y)) + cbSceneParam._m0[88u].z;
    float _4669 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2040 = (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * 5.0;
    float _2045 = ((10.0 / (_823 + 10.0)) * cbMtdParam._m0[25u].x) * dot(vec3(_802, _803, _804), vec3(1.0, 0.0, 0.0));
    vec4 _2055 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_2045 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_2045 + _2030) * cbSceneParam._m0[86u].x, _902), _2040).w) + _2030) * cbSceneParam._m0[86u].x, _902), _2040);
    float _2061 = isnan(0.5) ? _2055.w : (isnan(_2055.w) ? 0.5 : max(_2055.w, 0.5));
    float _2076 = 1.0 - (_2055.w / _2061);
    float _2110 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2114 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2118 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2122 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2123 = _2110 / _2122;
    float _2124 = _2114 / _2122;
    float _2125 = _2118 / _2122;
    float _2271;
    float _2272;
    float _2273;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2152 = ((uint(_2125 > cbSceneParam._m0[59u].y) + uint(_2125 > cbSceneParam._m0[59u].x)) + uint(_2125 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2153 = _2152 + 43u;
        uint _2161 = _2152 + 44u;
        uint _2169 = _2152 + 45u;
        uint _2177 = _2152 + 46u;
        float _2188 = fma(_2122, cbSceneParam._m0[_2153].w, fma(_2118, cbSceneParam._m0[_2153].z, fma(_2114, cbSceneParam._m0[_2153].y, _2110 * cbSceneParam._m0[_2153].x)));
        float _2192 = fma(_2122, cbSceneParam._m0[_2161].w, fma(_2118, cbSceneParam._m0[_2161].z, fma(_2114, cbSceneParam._m0[_2161].y, _2110 * cbSceneParam._m0[_2161].x)));
        float _2200 = fma(_2122, cbSceneParam._m0[_2177].w, fma(_2118, cbSceneParam._m0[_2177].z, fma(_2114, cbSceneParam._m0[_2177].y, _2110 * cbSceneParam._m0[_2177].x)));
        float _2204 = cbSceneParam._m0[33u].z * _2200;
        float _2206 = cbSceneParam._m0[33u].w * _2200;
        float _2209 = fma(_2122, cbSceneParam._m0[_2169].w, fma(_2118, cbSceneParam._m0[_2169].z, fma(_2114, cbSceneParam._m0[_2169].y, _2110 * cbSceneParam._m0[_2169].x))) / _2200;
        float _2257 = (cbSceneParam._m0[33u].x - sqrt(((_2124 * _2124) + (_2123 * _2123)) + (_2125 * _2125))) * cbSceneParam._m0[33u].y;
        float _4685 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2264 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2204 + _2188) / _2200, (_2206 + _2192) / _2200), _2209), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2206 + _2188) / _2200, (_2192 - _2204) / _2200), _2209), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2188 - _2204) / _2200, (_2192 - _2206) / _2200), _2209), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2188 - _2206) / _2200, (_2204 + _2192) / _2200), _2209), 0.0)).x), vec4(0.25)));
        _2271 = 1.0 - (_2264 * cbSceneParam._m0[34u].x);
        _2272 = 1.0 - (_2264 * cbSceneParam._m0[34u].y);
        _2273 = 1.0 - (_2264 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2271 = 1.0;
        _2272 = 1.0;
        _2273 = 1.0;
    }
    float _2337;
    float _2339;
    float _2341;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2325 = fma(_2122, cbSceneParam._m0[63u].w, fma(_2118, cbSceneParam._m0[63u].z, fma(_2114, cbSceneParam._m0[63u].y, _2110 * cbSceneParam._m0[63u].x)));
        float _2326 = fma(_2122, cbSceneParam._m0[60u].w, fma(_2118, cbSceneParam._m0[60u].z, fma(_2114, cbSceneParam._m0[60u].y, _2110 * cbSceneParam._m0[60u].x))) / _2325;
        float _2327 = fma(_2122, cbSceneParam._m0[61u].w, fma(_2118, cbSceneParam._m0[61u].z, fma(_2114, cbSceneParam._m0[61u].y, _2110 * cbSceneParam._m0[61u].x))) / _2325;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2326 >= cbSceneParam._m0[64u].x) && (_2327 >= cbSceneParam._m0[64u].y)) && (_2326 <= cbSceneParam._m0[64u].z)) && (_2327 <= cbSceneParam._m0[64u].w))
        {
            float _2468 = fma(_2122, cbSceneParam._m0[62u].w, fma(_2118, cbSceneParam._m0[62u].z, fma(_2114, cbSceneParam._m0[62u].y, _2110 * cbSceneParam._m0[62u].x))) / _2325;
            float _2472 = isnan(cbSceneParam._m0[41u].w) ? _2468 : (isnan(_2468) ? cbSceneParam._m0[41u].w : max(_2468, cbSceneParam._m0[41u].w));
            float _2515 = (cbSceneParam._m0[33u].x - sqrt(((_2124 * _2124) + (_2123 * _2123)) + (_2125 * _2125))) * cbSceneParam._m0[33u].y;
            float _4701 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
            float _2522 = (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2326, cbSceneParam._m0[33u].w + _2327), _2472), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2326, _2327 - cbSceneParam._m0[33u].z), _2472), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2326 - cbSceneParam._m0[33u].z, _2327 - cbSceneParam._m0[33u].w), _2472), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2326 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2327), _2472), 0.0)).x), vec4(0.25)));
            float _2526 = 1.0 - (_2522 * cbSceneParam._m0[34u].x);
            float _2527 = 1.0 - (_2522 * cbSceneParam._m0[34u].y);
            float _2528 = 1.0 - (_2522 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2528) ? _2273 : (isnan(_2273) ? _2528 : min(_2273, _2528));
            frontier_phi_37_36_ladder_1 = isnan(_2527) ? _2272 : (isnan(_2272) ? _2527 : min(_2272, _2527));
            frontier_phi_37_36_ladder_2 = isnan(_2526) ? _2271 : (isnan(_2271) ? _2526 : min(_2271, _2526));
        }
        else
        {
            frontier_phi_37_36_ladder = _2273;
            frontier_phi_37_36_ladder_1 = _2272;
            frontier_phi_37_36_ladder_2 = _2271;
        }
        _2337 = frontier_phi_37_36_ladder_2;
        _2339 = frontier_phi_37_36_ladder_1;
        _2341 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2337 = _2271;
        _2339 = _2272;
        _2341 = _2273;
    }
    float _4727 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2343 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
    float _4738 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2344 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
    float _4749 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2345 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
    uvec4 _2349 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2351 = _2349.x * 14u;
    uint _2352 = _2351 + 13u;
    float _2359 = _964 + (-1.0);
    float _2364 = (cbLight._m0[_2352].x * _2359) + 1.0;
    float _2365 = (cbLight._m0[_2352].y * _2359) + 1.0;
    float _2366 = (cbLight._m0[_2352].z * _2359) + 1.0;
    float _2367 = (cbLight._m0[_2352].w * _2359) + 1.0;
    uint _2368 = _2351 + 5u;
    float _2374 = isnan(1.0) ? _2365 : (isnan(_2365) ? 1.0 : min(_2365, 1.0));
    uint _2378 = _2351 + 4u;
    float _2387 = isnan(1.0) ? _2364 : (isnan(_2364) ? 1.0 : min(_2364, 1.0));
    uint _2391 = _2351 | 1u;
    float _2402 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_802, _803, _804));
    float _2405 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_802, _803, _804));
    float _4770 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _4781 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2410 = (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * 0.3183098733425140380859375;
    float _2412 = (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * 0.3183098733425140380859375;
    float _2419 = ((cbLight._m0[_2368].x * _2374) * _2412) + (((cbLight._m0[_2378].x * _2343) * _2387) * _2410);
    float _2420 = ((_2374 * cbLight._m0[_2368].y) * _2412) + (((cbLight._m0[_2378].y * _2344) * _2387) * _2410);
    float _2421 = ((_2374 * cbLight._m0[_2368].z) * _2412) + (((cbLight._m0[_2378].z * _2345) * _2387) * _2410);
    uvec4 _2425 = floatBitsToUint(cbLight._m0[_2351 + 12u]);
    bool _2427 = _2425.x == 0u;
    float _2529;
    float _2531;
    float _2533;
    if (_2427)
    {
        _2529 = _2419;
        _2531 = _2420;
        _2533 = _2421;
    }
    else
    {
        uint _2537 = _2351 + 6u;
        float _2553 = (dot(vec3(cbLight._m0[_2351 + 2u].xyz), vec3(_802, _803, _804)) * 0.5) + 0.5;
        float _2554 = _2553 * _2553;
        float _4792 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2555 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
        float _2556 = isnan(1.0) ? _2366 : (isnan(_2366) ? 1.0 : min(_2366, 1.0));
        _2529 = (((cbLight._m0[_2537].x * 0.3183098733425140380859375) * _2555) * _2556) + _2419;
        _2531 = (((cbLight._m0[_2537].y * 0.3183098733425140380859375) * _2555) * _2556) + _2420;
        _2533 = (((cbLight._m0[_2537].z * 0.3183098733425140380859375) * _2555) * _2556) + _2421;
    }
    bool _2536 = _2425.y == 0u;
    float _2591;
    float _2593;
    float _2595;
    if (_2536)
    {
        _2591 = _2529;
        _2593 = _2531;
        _2595 = _2533;
    }
    else
    {
        uint _2753 = _2351 + 7u;
        float _2769 = (dot(vec3(cbLight._m0[_2351 + 3u].xyz), vec3(_802, _803, _804)) * 0.5) + 0.5;
        float _2770 = _2769 * _2769;
        float _4808 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2771 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
        float _2772 = isnan(1.0) ? _2367 : (isnan(_2367) ? 1.0 : min(_2367, 1.0));
        _2591 = (((cbLight._m0[_2753].x * 0.3183098733425140380859375) * _2771) * _2772) + _2529;
        _2593 = (((cbLight._m0[_2753].y * 0.3183098733425140380859375) * _2771) * _2772) + _2531;
        _2595 = (((cbLight._m0[_2753].z * 0.3183098733425140380859375) * _2771) * _2772) + _2533;
    }
    uint _2598 = _2351 + 8u;
    float _2611 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2351].w)) * _805) * 0.949999988079071044921875);
    float _2612 = _2611 * _2611;
    float _2613 = cbLight._m0[_2351].x + _881;
    float _2614 = cbLight._m0[_2351].y + _882;
    float _2615 = cbLight._m0[_2351].z + _883;
    float _2619 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
    float _2620 = _2619 * _2613;
    float _2621 = _2619 * _2614;
    float _2622 = _2619 * _2615;
    float _2623 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2351].xyz));
    float _4824 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2626 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
    float _4835 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _2627 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
    float _2628 = dot(vec3(_802, _803, _804), vec3(_2620, _2621, _2622));
    float _4846 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2631 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
    float _2632 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_2620, _2621, _2622));
    float _4857 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
    float _2636 = _2612 * _2612;
    float _2640 = ((_2631 * _2631) * (_2636 + (-1.0))) + 1.0;
    float _2651 = (exp2(log2(1.0 - (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2652 = 1.0 - _2612;
    float _2663 = (0.5 / (((_2627 * ((_2626 * _2652) + _2612)) + 9.9999999392252902907785028219223e-09) + (((_2627 * _2652) + _2612) * _2626))) * _2626;
    float _4868 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2665 = (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2636 / ((_2640 * _2640) * 3.141590118408203125));
    uint _2679 = _2351 + 9u;
    float _2690 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2391].w)) * _805) * 0.949999988079071044921875);
    float _2691 = _2690 * _2690;
    float _2692 = cbLight._m0[_2391].x + _881;
    float _2693 = cbLight._m0[_2391].y + _882;
    float _2694 = cbLight._m0[_2391].z + _883;
    float _2698 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
    float _2699 = _2698 * _2692;
    float _2700 = _2698 * _2693;
    float _2701 = _2698 * _2694;
    float _2702 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2391].xyz));
    float _4879 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
    float _2705 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
    float _2706 = dot(vec3(_802, _803, _804), vec3(_2699, _2700, _2701));
    float _4890 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2709 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
    float _2710 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_2699, _2700, _2701));
    float _4901 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2714 = _2691 * _2691;
    float _2718 = ((_2709 * _2709) * (_2714 + (-1.0))) + 1.0;
    float _2727 = (exp2(log2(1.0 - (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2728 = 1.0 - _2691;
    float _2738 = (0.5 / (((_2627 * ((_2705 * _2728) + _2691)) + 9.9999999392252902907785028219223e-09) + (((_2627 * _2728) + _2691) * _2705))) * _2705;
    float _4912 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
    float _2740 = (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2714 / ((_2718 * _2718) * 3.141590118408203125));
    float _2750 = (((_2727 * cbLight._m0[_2679].x) * _2740) * _2374) + ((((cbLight._m0[_2598].x * _2343) * _2651) * _2665) * _2387);
    float _2751 = (((_2727 * cbLight._m0[_2679].y) * _2740) * _2374) + ((((cbLight._m0[_2598].y * _2344) * _2651) * _2665) * _2387);
    float _2752 = (((_2727 * cbLight._m0[_2679].z) * _2740) * _2374) + ((((cbLight._m0[_2598].z * _2345) * _2651) * _2665) * _2387);
    float _2808;
    float _2810;
    float _2812;
    if (_2427)
    {
        _2808 = _2750;
        _2810 = _2751;
        _2812 = _2752;
    }
    else
    {
        uint _2814 = _2351 + 2u;
        uint _2818 = _2351 + 10u;
        float _2832 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2814].w)) * _805) * 0.949999988079071044921875);
        float _2833 = _2832 * _2832;
        float _2834 = cbLight._m0[_2814].x + _881;
        float _2835 = cbLight._m0[_2814].y + _882;
        float _2836 = cbLight._m0[_2814].z + _883;
        float _2840 = inversesqrt(dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836)));
        float _2841 = _2840 * _2834;
        float _2842 = _2840 * _2835;
        float _2843 = _2840 * _2836;
        float _2844 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2814].xyz));
        float _4923 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2847 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
        float _2848 = dot(vec3(_802, _803, _804), vec3(_2841, _2842, _2843));
        float _4934 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2851 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
        float _2852 = dot(vec3(cbLight._m0[_2814].xyz), vec3(_2841, _2842, _2843));
        float _4945 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2856 = _2833 * _2833;
        float _2860 = ((_2851 * _2851) * (_2856 + (-1.0))) + 1.0;
        float _2869 = (exp2(log2(1.0 - (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2870 = 1.0 - _2833;
        float _2880 = (0.5 / (((_2627 * ((_2847 * _2870) + _2833)) + 9.9999999392252902907785028219223e-09) + (((_2627 * _2870) + _2833) * _2847))) * _2847;
        float _4956 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        float _2882 = (isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0))) * (_2856 / ((_2860 * _2860) * 3.141590118408203125));
        float _2883 = isnan(1.0) ? _2366 : (isnan(_2366) ? 1.0 : min(_2366, 1.0));
        _2808 = (((_2869 * cbLight._m0[_2818].x) * _2882) * _2883) + _2750;
        _2810 = (((_2869 * cbLight._m0[_2818].y) * _2882) * _2883) + _2751;
        _2812 = (((_2869 * cbLight._m0[_2818].z) * _2882) * _2883) + _2752;
    }
    float _2914;
    float _2916;
    float _2918;
    if (_2536)
    {
        _2914 = _2808;
        _2916 = _2810;
        _2918 = _2812;
    }
    else
    {
        uint _2925 = _2351 + 3u;
        uint _2929 = _2351 + 11u;
        float _2943 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2925].w)) * _805) * 0.949999988079071044921875);
        float _2944 = _2943 * _2943;
        float _2945 = cbLight._m0[_2925].x + _881;
        float _2946 = cbLight._m0[_2925].y + _882;
        float _2947 = cbLight._m0[_2925].z + _883;
        float _2951 = inversesqrt(dot(vec3(_2945, _2946, _2947), vec3(_2945, _2946, _2947)));
        float _2952 = _2951 * _2945;
        float _2953 = _2951 * _2946;
        float _2954 = _2951 * _2947;
        float _2955 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2925].xyz));
        float _4972 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        float _2958 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
        float _2959 = dot(vec3(_802, _803, _804), vec3(_2952, _2953, _2954));
        float _4983 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
        float _2962 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
        float _2963 = dot(vec3(cbLight._m0[_2925].xyz), vec3(_2952, _2953, _2954));
        float _4994 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
        float _2967 = _2944 * _2944;
        float _2971 = ((_2962 * _2962) * (_2967 + (-1.0))) + 1.0;
        float _2980 = (exp2(log2(1.0 - (isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2981 = 1.0 - _2944;
        float _2991 = (0.5 / (((_2627 * ((_2958 * _2981) + _2944)) + 9.9999999392252902907785028219223e-09) + (((_2627 * _2981) + _2944) * _2958))) * _2958;
        float _5005 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
        float _2993 = (isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0))) * (_2967 / ((_2971 * _2971) * 3.141590118408203125));
        float _2994 = isnan(1.0) ? _2367 : (isnan(_2367) ? 1.0 : min(_2367, 1.0));
        _2914 = (((_2980 * cbLight._m0[_2929].x) * _2993) * _2994) + _2808;
        _2916 = (((_2980 * cbLight._m0[_2929].y) * _2993) * _2994) + _2810;
        _2918 = (((_2980 * cbLight._m0[_2929].z) * _2993) * _2994) + _2812;
    }
    float _3060;
    float _3062;
    float _3064;
    float _3066;
    float _3068;
    float _3070;
    if (_2349.y == 0u)
    {
        uvec4 _3015 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3016 = _3015.x;
        uint _3027 = uint((float(_3015.y) * floor(float(uint(cbSceneParam._m0[85u].y * _902) / _3016))) + floor(float(uint(cbSceneParam._m0[85u].x * _901) / _3016)));
        float _3037 = (log2(_2125 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3038 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
        uint _3041 = uint(isnan(14.0) ? _3038 : (isnan(_3038) ? 14.0 : min(_3038, 14.0)));
        uvec4 _3046 = texelFetch(g_lightClusterGridBuffer, int(((_3041 << 2u) + (_3027 << 6u)) >> 2u));
        uint _3047 = _3046.x;
        uint _3048 = _3015.z;
        float _3121;
        float _3123;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        if (((((1u << ((_3048 >> 4u) & 15u)) + 4294967295u) & _3047) == 0u) || ((_3048 & 240u) == 0u))
        {
            _3121 = 0.0;
            _3123 = 0.0;
            _3125 = 0.0;
            _3127 = 0.0;
            _3129 = 0.0;
            _3131 = 0.0;
        }
        else
        {
            float _3122;
            float _3124;
            float _3126;
            float _3128;
            float _3130;
            float _3132;
            float _3273 = 0.0;
            float _3274 = 0.0;
            float _3275 = 0.0;
            float _3276 = 0.0;
            float _3277 = 0.0;
            float _3278 = 0.0;
            uint _3279 = 0u;
            uint _3288;
            bool _3289;
            for (;;)
            {
                _3288 = texelFetch(g_lightClassification, int((((_3041 << 5u) + (_3027 << 9u)) + (_3279 << 2u)) >> 2u)).x;
                _3289 = _3288 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3289)
                {
                    frontier_phi_71_pred = _3278;
                    frontier_phi_71_pred_1 = _3277;
                    frontier_phi_71_pred_2 = _3276;
                    frontier_phi_71_pred_3 = _3275;
                    frontier_phi_71_pred_4 = _3274;
                    frontier_phi_71_pred_5 = _3273;
                }
                else
                {
                    float _3418;
                    float _3419;
                    float _3420;
                    float _3421;
                    float _3422;
                    float _3423;
                    uint _3424;
                    _3418 = _3273;
                    _3419 = _3274;
                    _3420 = _3275;
                    _3421 = _3276;
                    _3422 = _3277;
                    _3423 = _3278;
                    _3424 = _3288;
                    float _3345;
                    float _3346;
                    float _3347;
                    float _3348;
                    float _3349;
                    float _3350;
                    for (;;)
                    {
                        uint _3428 = uint(findLSB(_3424)) + (_3279 << 5u);
                        uint _3425 = (_3424 + 4294967295u) & _3424;
                        uint _3430 = _3428 * 48u;
                        vec4 _3444 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3430)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 3u)).x));
                        uint _3450 = (_3428 * 48u) + 4u;
                        vec4 _3463 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3450)).x, texelFetch(g_PointLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3450 + 3u)).x));
                        uint _3469 = (_3428 * 48u) + 8u;
                        vec3 _3480 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3469)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 2u)).x));
                        float _3484 = _3444.x - _2123;
                        float _3485 = _3444.y - _2124;
                        float _3486 = _3444.z - _2125;
                        float _3487 = dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486));
                        float _3490 = inversesqrt(_3487);
                        float _3491 = _3490 * _3484;
                        float _3492 = _3490 * _3485;
                        float _3493 = _3490 * _3486;
                        float _3494 = dot(vec3(_920, _923, _926), vec3(_3491, _3492, _3493));
                        float _3499 = 1.0 - (_3487 * _3444.w);
                        float _5031 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3500 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
                        float _3501 = sqrt(_3487) * _3463.w;
                        float _3504 = 1.39999997615814208984375 / (_3501 + 1.39999997615814208984375);
                        float _3505 = _3504 * _3504;
                        float _3508 = ((1.0 - _3505) * _3494) + _3505;
                        float _3511 = _3501 * _3501;
                        float _3515 = ((isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0))) * _3500) / ((_3511 * 0.699999988079071044921875) + 1.0);
                        float _3519 = (-0.0) - _2123;
                        float _3520 = (-0.0) - _2124;
                        float _3521 = (-0.0) - _2125;
                        float _3525 = inversesqrt(dot(vec3(_3519, _3520, _3521), vec3(_3519, _3520, _3521)));
                        float _3526 = _3525 * _3519;
                        float _3527 = _3525 * _3520;
                        float _3528 = _3525 * _3521;
                        float _3535 = exp2(log2(1.0 / ((_3511 * 3.5) + 5.0)) * 0.25);
                        float _3536 = 1.0 - _983;
                        float _3543 = sqrt(1.0 - ((1.0 - (_3536 * _3536)) * (1.0 - (_3535 * _3535))));
                        float _3544 = _3543 * _3543;
                        float _3545 = _3544 * _3544;
                        float _3546 = _3526 + _3491;
                        float _3547 = _3527 + _3492;
                        float _3548 = _3528 + _3493;
                        float _3552 = inversesqrt(dot(vec3(_3546, _3547, _3548), vec3(_3546, _3547, _3548)));
                        float _3556 = dot(vec3(_920, _923, _926), vec3(_3526, _3527, _3528));
                        float _5047 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                        float _3559 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
                        float _3560 = dot(vec3(_920, _923, _926), vec3(_3552 * _3546, _3552 * _3547, _3552 * _3548));
                        float _5058 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                        float _3563 = isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0));
                        float _3567 = ((_3563 * _3563) * (_3545 + (-1.0))) + 1.0;
                        float _3568 = _3504 * _3544;
                        float _3569 = _3568 * _3568;
                        float _3572 = ((1.0 - _3569) * _3494) + _3569;
                        float _5069 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                        float _3573 = isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0));
                        float _3574 = 1.0 - _3544;
                        float _3584 = (0.5 / (((_3573 * ((_3559 * _3574) + _3544)) + 9.9999999392252902907785028219223e-09) + (((_3573 * _3574) + _3544) * _3559))) * _3573;
                        float _5080 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                        float _3595 = (((_3545 * 3.1415927410125732421875) * (isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0)))) / ((_3567 * _3567) * ((_3511 * 2.1991131305694580078125) + 3.141590118408203125))) * _3500;
                        _3348 = (_3515 * _3463.x) + _3421;
                        _3349 = (_3515 * _3463.y) + _3422;
                        _3350 = (_3515 * _3463.z) + _3423;
                        _3345 = (_3595 * _3480.x) + _3418;
                        _3346 = (_3595 * _3480.y) + _3419;
                        _3347 = (_3595 * _3480.z) + _3420;
                        if (_3425 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3418 = _3345;
                            _3419 = _3346;
                            _3420 = _3347;
                            _3421 = _3348;
                            _3422 = _3349;
                            _3423 = _3350;
                            _3424 = _3425;
                        }
                    }
                    frontier_phi_71_pred = _3350;
                    frontier_phi_71_pred_1 = _3349;
                    frontier_phi_71_pred_2 = _3348;
                    frontier_phi_71_pred_3 = _3347;
                    frontier_phi_71_pred_4 = _3346;
                    frontier_phi_71_pred_5 = _3345;
                }
                _3132 = frontier_phi_71_pred;
                _3130 = frontier_phi_71_pred_1;
                _3128 = frontier_phi_71_pred_2;
                _3126 = frontier_phi_71_pred_3;
                _3124 = frontier_phi_71_pred_4;
                _3122 = frontier_phi_71_pred_5;
                uint _3280 = _3279 + 1u;
                if (_3280 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3273 = _3122;
                    _3274 = _3124;
                    _3275 = _3126;
                    _3276 = _3128;
                    _3277 = _3130;
                    _3278 = _3132;
                    _3279 = _3280;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3121 = _3122;
            _3123 = _3124;
            _3125 = _3126;
            _3127 = _3128;
            _3129 = _3130;
            _3131 = _3132;
        }
        uvec4 _3135 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3136 = _3135.z;
        uint _3138 = (_3136 >> 8u) & 15u;
        float _3241;
        float _3243;
        float _3245;
        float _3247;
        float _3249;
        float _3251;
        if (((4294967295u << _3138) & _3047) == 0u)
        {
            _3241 = _3121;
            _3243 = _3123;
            _3245 = _3125;
            _3247 = _3127;
            _3249 = _3129;
            _3251 = _3131;
        }
        else
        {
            float _3266 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
            float _3267 = _3266 * _2123;
            float _3268 = _3266 * _2124;
            float _3269 = _3266 * _2125;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3138 < ((_3136 >> 12u) & 15u))
            {
                float _3242;
                float _3244;
                float _3246;
                float _3248;
                float _3250;
                float _3252;
                float _3401 = _3121;
                float _3402 = _3123;
                float _3403 = _3125;
                float _3404 = _3127;
                float _3405 = _3129;
                float _3406 = _3131;
                uint _3407 = _3138;
                uint _3416;
                bool _3417;
                for (;;)
                {
                    _3416 = texelFetch(g_lightClassification, int((((_3041 << 5u) + (_3027 << 9u)) + (_3407 << 2u)) >> 2u)).x;
                    _3417 = _3416 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3417)
                    {
                        frontier_phi_82_pred = _3406;
                        frontier_phi_82_pred_1 = _3405;
                        frontier_phi_82_pred_2 = _3404;
                        frontier_phi_82_pred_3 = _3403;
                        frontier_phi_82_pred_4 = _3402;
                        frontier_phi_82_pred_5 = _3401;
                    }
                    else
                    {
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3902;
                        float _3903;
                        float _3904;
                        float _3905;
                        float _3906;
                        float _3907;
                        float _3622 = _3401;
                        float _3623 = _3402;
                        float _3624 = _3403;
                        float _3625 = _3404;
                        float _3626 = _3405;
                        float _3627 = _3406;
                        uint _3628 = _3416;
                        uint _3629;
                        vec4 _3654;
                        float _3655;
                        vec4 _3670;
                        vec3 _3682;
                        vec4 _3697;
                        vec4 _3712;
                        float _3758;
                        bool _3759;
                        for (;;)
                        {
                            uint _3639 = ((_3407 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3628));
                            _3629 = (_3628 + 4294967295u) & _3628;
                            uint _3641 = _3639 * 40u;
                            _3654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 3u)).x));
                            _3655 = _3654.w;
                            uint _3657 = (_3639 * 40u) + 4u;
                            _3670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 3u)).x));
                            uint _3672 = (_3639 * 40u) + 8u;
                            _3682 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x));
                            uint _3684 = (_3639 * 40u) + 16u;
                            _3697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 3u)).x));
                            uint _3699 = (_3639 * 40u) + 20u;
                            _3712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 3u)).x));
                            uint _3714 = (_3639 * 40u) + 24u;
                            vec4 _3727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 3u)).x));
                            uint _3733 = (_3639 * 40u) + 28u;
                            vec4 _3746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 3u)).x));
                            _3758 = fma(_2125, _3746.z, fma(_2124, _3746.y, _3746.x * _2123)) + _3746.w;
                            _3759 = !((fma(_2125, _3727.z, fma(_2124, _3727.y, _3727.x * _2123)) + _3727.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3759)
                            {
                                float _3786 = _3654.x - _2123;
                                float _3787 = _3654.y - _2124;
                                float _3788 = _3654.z - _2125;
                                float _3789 = dot(vec3(_3786, _3787, _3788), vec3(_3786, _3787, _3788));
                                float _3792 = inversesqrt(_3789);
                                float _3793 = _3792 * _3786;
                                float _3794 = _3792 * _3787;
                                float _3795 = _3792 * _3788;
                                float _3799 = 1.0 - (_3789 / (_3655 * _3655));
                                float _5091 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                                float _3800 = isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0));
                                float _3804 = sqrt(_3789) * _3670.w;
                                float _3806 = 1.39999997615814208984375 / (_3804 + 1.39999997615814208984375);
                                float _3807 = _3806 * _3806;
                                float _3810 = ((1.0 - _3807) * dot(vec3(_3793, _3794, _3795), vec3(_920, _923, _926))) + _3807;
                                float _3813 = _3804 * _3804;
                                float _3817 = (fma(_2125, _3697.z, fma(_2124, _3697.y, _3697.x * _2123)) + _3697.w) / _3758;
                                float _3818 = (fma(_2125, _3712.z, fma(_2124, _3712.y, _3712.x * _2123)) + _3712.w) / _3758;
                                float _3822 = 1.0 - dot(vec2(_3817, _3818), vec2(_3817, _3818));
                                float _5107 = isnan(0.0) ? _3822 : (isnan(_3822) ? 0.0 : max(_3822, 0.0));
                                float _3823 = isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0));
                                float _3824 = _3823 * (((isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0))) * _3800) / ((_3813 * 0.699999988079071044921875) + 1.0));
                                float _3836 = exp2(log2(1.0 / ((_3813 * 3.5) + 5.0)) * 0.25);
                                float _3837 = 1.0 - _983;
                                float _3844 = sqrt(1.0 - ((1.0 - (_3837 * _3837)) * (1.0 - (_3836 * _3836))));
                                float _3845 = _3844 * _3844;
                                float _3846 = _3845 * _3845;
                                float _3847 = _3793 - _3267;
                                float _3848 = _3794 - _3268;
                                float _3849 = _3795 - _3269;
                                float _3853 = inversesqrt(dot(vec3(_3847, _3848, _3849), vec3(_3847, _3848, _3849)));
                                float _3857 = dot(vec3(_920, _923, _926), vec3((-0.0) - _3267, (-0.0) - _3268, (-0.0) - _3269));
                                float _5118 = isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0));
                                float _3860 = isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0));
                                float _3861 = dot(vec3(_920, _923, _926), vec3(_3853 * _3847, _3853 * _3848, _3853 * _3849));
                                float _5129 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3864 = isnan(1.0) ? _5129 : (isnan(_5129) ? 1.0 : min(_5129, 1.0));
                                float _3868 = ((_3864 * _3864) * (_3846 + (-1.0))) + 1.0;
                                float _3869 = _3806 * _3845;
                                float _3870 = _3869 * _3869;
                                float _3876 = ((1.0 - _3870) * dot(vec3(_920, _923, _926), vec3(_3793, _3794, _3795))) + _3870;
                                float _5140 = isnan(0.0) ? _3876 : (isnan(_3876) ? 0.0 : max(_3876, 0.0));
                                float _3877 = isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0));
                                float _3878 = 1.0 - _3845;
                                float _3888 = (0.5 / (((_3877 * ((_3860 * _3878) + _3845)) + 9.9999999392252902907785028219223e-09) + (((_3877 * _3878) + _3845) * _3860))) * _3877;
                                float _5151 = isnan(0.0) ? _3888 : (isnan(_3888) ? 0.0 : max(_3888, 0.0));
                                float _3898 = (_3823 * _3800) * (((_3846 * 3.1415927410125732421875) * (isnan(1.0) ? _5151 : (isnan(_5151) ? 1.0 : min(_5151, 1.0)))) / ((_3868 * _3868) * ((_3813 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3824 * _3670.z;
                                frontier_phi_88_pred_1 = _3824 * _3670.y;
                                frontier_phi_88_pred_2 = _3824 * _3670.x;
                                frontier_phi_88_pred_3 = _3898 * _3682.z;
                                frontier_phi_88_pred_4 = _3898 * _3682.y;
                                frontier_phi_88_pred_5 = _3898 * _3682.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3907 = frontier_phi_88_pred;
                            _3906 = frontier_phi_88_pred_1;
                            _3905 = frontier_phi_88_pred_2;
                            _3904 = frontier_phi_88_pred_3;
                            _3903 = frontier_phi_88_pred_4;
                            _3902 = frontier_phi_88_pred_5;
                            _3612 = _3905 + _3625;
                            _3613 = _3906 + _3626;
                            _3614 = _3907 + _3627;
                            _3609 = _3902 + _3622;
                            _3610 = _3903 + _3623;
                            _3611 = _3904 + _3624;
                            if (_3629 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3622 = _3609;
                                _3623 = _3610;
                                _3624 = _3611;
                                _3625 = _3612;
                                _3626 = _3613;
                                _3627 = _3614;
                                _3628 = _3629;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3614;
                        frontier_phi_82_pred_1 = _3613;
                        frontier_phi_82_pred_2 = _3612;
                        frontier_phi_82_pred_3 = _3611;
                        frontier_phi_82_pred_4 = _3610;
                        frontier_phi_82_pred_5 = _3609;
                    }
                    _3252 = frontier_phi_82_pred;
                    _3250 = frontier_phi_82_pred_1;
                    _3248 = frontier_phi_82_pred_2;
                    _3246 = frontier_phi_82_pred_3;
                    _3244 = frontier_phi_82_pred_4;
                    _3242 = frontier_phi_82_pred_5;
                    uint _3408 = _3407 + 1u;
                    if (_3408 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3401 = _3242;
                        _3402 = _3244;
                        _3403 = _3246;
                        _3404 = _3248;
                        _3405 = _3250;
                        _3406 = _3252;
                        _3407 = _3408;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3248;
                frontier_phi_63_64_ladder_1 = _3252;
                frontier_phi_63_64_ladder_2 = _3250;
                frontier_phi_63_64_ladder_3 = _3246;
                frontier_phi_63_64_ladder_4 = _3244;
                frontier_phi_63_64_ladder_5 = _3242;
            }
            else
            {
                frontier_phi_63_64_ladder = _3127;
                frontier_phi_63_64_ladder_1 = _3131;
                frontier_phi_63_64_ladder_2 = _3129;
                frontier_phi_63_64_ladder_3 = _3125;
                frontier_phi_63_64_ladder_4 = _3123;
                frontier_phi_63_64_ladder_5 = _3121;
            }
            _3241 = frontier_phi_63_64_ladder_5;
            _3243 = frontier_phi_63_64_ladder_4;
            _3245 = frontier_phi_63_64_ladder_3;
            _3247 = frontier_phi_63_64_ladder;
            _3249 = frontier_phi_63_64_ladder_2;
            _3251 = frontier_phi_63_64_ladder_1;
        }
        float _3256 = isnan(1.0) ? _964 : (isnan(_964) ? 1.0 : min(_964, 1.0));
        _3060 = (_3256 * _3247) + _2591;
        _3062 = (_3256 * _3249) + _2593;
        _3064 = (_3256 * _3251) + _2595;
        _3066 = ((_3241 * 0.039999999105930328369140625) * _3256) + _2914;
        _3068 = ((_3243 * 0.039999999105930328369140625) * _3256) + _2916;
        _3070 = ((_3245 * 0.039999999105930328369140625) * _3256) + _2918;
    }
    else
    {
        _3060 = _2591;
        _3062 = _2593;
        _3064 = _2595;
        _3066 = _2914;
        _3068 = _2916;
        _3070 = _2918;
    }
    float _5167 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _5178 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _5189 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _3087 = ((isnan(1.0) ? _5167 : (isnan(_5167) ? 1.0 : min(_5167, 1.0))) * (_3060 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _964))) + (((((_2007 * (_2055.x / _2061)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1802) * _2076)) + _3066) * cbPerFrame._m0[3u].x);
    float _3088 = ((isnan(1.0) ? _5178 : (isnan(_5178) ? 1.0 : min(_5178, 1.0))) * (_3062 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _964))) + (((((_2007 * (_2055.y / _2061)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1802) * _2076)) + _3068) * cbPerFrame._m0[3u].x);
    float _3089 = ((isnan(1.0) ? _5189 : (isnan(_5189) ? 1.0 : min(_5189, 1.0))) * (_3064 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _964))) + (((((_2007 * (_2055.z / _2061)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1802) * _2076)) + _3070) * cbPerFrame._m0[3u].x);
    uint _3090 = _263 + 6u;
    vec4 _3107 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2030, _2031, (log2((isnan(cbSceneParam._m0[77u].w) ? _823 : (isnan(_823) ? cbSceneParam._m0[77u].w : min(_823, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3109 = _3107.x;
    float _3110 = _3107.y;
    float _3111 = _3107.z;
    float _3112 = _3107.w;
    float _3184;
    float _3186;
    float _3188;
    float _3190;
    if (_823 > cbSceneParam._m0[78u].w)
    {
        float _3146 = isnan(_823) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _823 : min(cbSceneParam._m0[80u].w, _823));
        float _3147 = _3146 / _823;
        float _3158 = _3147 * _874;
        float _3159 = _875 * _3147;
        float _3160 = (-0.0) - _3159;
        float _3162 = _3147 * _876;
        float _3164 = (cbSceneParam._m0[77u].w * _3160) / _3146;
        float _3165 = _3164 + cbSceneParam._m0[79u].w;
        float _3166 = cbSceneParam._m0[79u].w - _3159;
        float _3172 = sqrt(((_3158 * _3158) + (_3159 * _3159)) + (_3162 * _3162));
        float _3175 = (1.0 - (cbSceneParam._m0[77u].w / _3146)) * _3172;
        float _3180 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3182 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3358;
        if (abs((_3160 - _3164) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3358 = ((((_3165 > 0.0) ? exp2(_3180 * _3165) : (2.0 - exp2(_3182 * _3165))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3175;
        }
        else
        {
            float _3302 = 1.0 / cbSceneParam._m0[80u].x;
            float _3303 = isnan(_3166) ? _3165 : (isnan(_3165) ? _3166 : max(_3165, _3166));
            float _3304 = isnan(_3166) ? _3165 : (isnan(_3165) ? _3166 : min(_3165, _3166));
            float _3313 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : min(_3303, 0.0));
            float _3314 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : min(_3304, 0.0));
            _3358 = ((abs(_3172 / _3160) * cbSceneParam._m0[80u].y) * ((((_3313 - _3314) * 2.0) - ((exp2(_3180 * (isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0)))) - exp2(_3180 * (isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0))))) * _3302)) - ((exp2(_3182 * _3313) - exp2(_3182 * _3314)) * _3302))) + (_3175 * cbSceneParam._m0[80u].z);
        }
        vec4 _3360 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2030, _2031, 1.0), 0.0);
        float _3369 = exp2((_3358 * (-1.44269502162933349609375)) * (1.0 - _3360.w));
        float _3370 = log2(_3369);
        float _3386 = log2(_3112);
        _3184 = (exp2(_3386 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3370 * cbSceneParam._m0[78u].x)) * _3360.x) / cbSceneParam._m0[78u].x)) + _3109;
        _3186 = (exp2(_3386 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3370 * cbSceneParam._m0[78u].y)) * _3360.y) / cbSceneParam._m0[78u].y)) + _3110;
        _3188 = (exp2(_3386 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3370 * cbSceneParam._m0[78u].z)) * _3360.z) / cbSceneParam._m0[78u].z)) + _3111;
        _3190 = _3369 * _3112;
    }
    else
    {
        _3184 = _3109;
        _3186 = _3110;
        _3188 = _3111;
        _3190 = _3112;
    }
    bool _3396;
    vec4 _3199;
    vec4 _3221;
    float _3223;
    float _3227;
    float _3228;
    float _3229;
    float _3230;
    bool _3240;
    for (;;)
    {
        _3199 = cbMatDynParam._m0[0u];
        float _3201 = roundEven(_3199.y);
        bool _3202 = _3201 == 3.0;
        float _3203 = log2(_3190);
        float _3210 = exp2(_3203 * cbSceneParam._m0[78u].x) * _3087;
        float _3211 = exp2(_3203 * cbSceneParam._m0[78u].y) * _3088;
        float _3212 = exp2(_3203 * cbSceneParam._m0[78u].z) * _3089;
        float _3219 = _890 + (-0.5);
        _3221 = cbMtdParam._m0[1u];
        _3223 = _3221.y * _3219;
        float _3226 = (_3201 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3227 = _3226 * (_3202 ? _3210 : (_3210 + (cbSceneParam._m0[72u].w * _3184)));
        _3228 = _3226 * (_3202 ? _3211 : (_3211 + (cbSceneParam._m0[72u].w * _3186)));
        _3229 = _3226 * (_3202 ? _3212 : (_3212 + (cbSceneParam._m0[72u].w * _3188)));
        _3230 = _3219 * 0.999000012874603271484375;
        _3240 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3240)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3230) < 0.5)
            {
                _3396 = true;
                break;
            }
        }
        uint _3337 = _939 + uint(_3199.w);
        if ((cbInstanceData._m0[_3337].w < 1.0) && ((cbInstanceData._m0[_3337].w + _3230) < 0.5))
        {
            _3396 = true;
            break;
        }
        if ((_3223 + _299) < _3221.x)
        {
            _3396 = true;
            break;
        }
        _3396 = false;
        break;
    }
    float _3600;
    if (_3396)
    {
        discard_state = true;
        _3600 = 0.0;
    }
    else
    {
        _3600 = cbInstanceData._m0[_3090].w;
    }
    SV_Target.x = _3227;
    SV_Target.y = _3228;
    SV_Target.z = _3229;
    SV_Target.w = _3600;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3090].w;
    discard_exit();
}


