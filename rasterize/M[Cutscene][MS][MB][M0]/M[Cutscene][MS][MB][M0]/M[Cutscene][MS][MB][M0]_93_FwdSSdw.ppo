#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[33];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1281;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _355 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[28u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[28u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _357 = _355.x;
    float _370 = dot(vec4(_357, _355.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_357 - _370) * cbMtdParam._m0[24u].x) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3669 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _395 = (_388 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _396 = (_388 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _397 = (_388 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _415 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _272) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _273) + cbTextureTilingScale._m0[20u].w));
    vec4 _440 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _442 = _440.x;
    float _443 = _440.y;
    float _448 = cbMtdParam._m0[25u].w * _440.z;
    float _3680 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    vec4 _462 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    float _470 = cbMtdParam._m0[26u].x * _462.z;
    float _3691 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _480 = (((isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) - _449) * _388) + _449;
    float _483 = ((((_462.x - _442) * _388) + _442) * 2.0) + (-1.0);
    float _484 = ((((_462.y - _443) * _388) + _443) * 2.0) + (-1.0);
    float _485 = dot(vec2(_483, _484), vec2(_483, _484));
    float _3702 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _490 = sqrt(1.0 - (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))));
    vec4 _507 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _514 = cbMtdParam._m0[25u].z * _507.z;
    float _3713 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    vec4 _535 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _537 = _535.x;
    float _538 = 1.0 - _537;
    float _544 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _547 = ((isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : min(_544, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _556 = (_547 - ((((((_537 - _538) * cbMtdParam._m0[24u].z) + _538) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _547))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3734 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _564 = (_557 * (cbMtdParam._m0[17u].x - _395)) + _395;
    float _565 = (_557 * (cbMtdParam._m0[17u].y - _396)) + _396;
    float _566 = (_557 * (cbMtdParam._m0[17u].z - _397)) + _397;
    vec4 _578 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _580 = _578.x;
    float _581 = 1.0 - _580;
    float _608 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_580 - _581) * cbMtdParam._m0[24u].w) + _581) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3745 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _609 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _617 = ((((cbMtdParam._m0[10u].x - _564) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _609) + _564;
    float _618 = ((((cbMtdParam._m0[10u].y - _565) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _609) + _565;
    float _619 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _566)) * _609) + _566;
    float _624 = (((_415.z - _480) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _480;
    float _628 = (((isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) - _624) * cbMtdParam._m0[19u].w) + _624;
    vec4 _642 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _649 = (_642.x * 2.0) + (-1.0);
    float _650 = (_642.y * 2.0) + (-1.0);
    float _651 = dot(vec2(_649, _650), vec2(_649, _650));
    float _3756 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _659 = (_557 * (_642.z - _628)) + _628;
    float _662 = ((cbMtdParam._m0[23u].y - _659) * _609) + _659;
    float _666 = ((1.0 - _662) * cbMtdParam._m0[26u].y) + _662;
    float _3767 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _667 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    vec4 _689 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[28u].w * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[29u].x * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _695 = (_689.x * 2.0) + (-1.0);
    float _696 = (_689.y * 2.0) + (-1.0);
    float _697 = dot(vec2(_695, _696), vec2(_695, _696));
    float _3778 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _711 = (_483 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_415.x * 2.0) + (-1.0)))) + (((_507.x * 2.0) + (-1.0)) * cbMtdParam._m0[27u].x);
    float _712 = (_484 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_415.y * 2.0) + (-1.0)))) + (((_507.y * 2.0) + (-1.0)) * cbMtdParam._m0[27u].x);
    float _724 = (((_649 - _711) + (cbMtdParam._m0[21u].x * _711)) * _557) + _711;
    float _725 = (((_650 - _712) + (cbMtdParam._m0[21u].x * _712)) * _557) + _712;
    float _726 = (_557 * (sqrt(1.0 - (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) - _490)) + _490;
    float _737 = (((_695 - _724) + (_724 * cbMtdParam._m0[22u].z)) * _609) + _724;
    float _738 = (((_696 - _725) + (_725 * cbMtdParam._m0[22u].z)) * _609) + _725;
    float _739 = ((sqrt(1.0 - (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) - _726) * _609) + _726;
    float _741 = cbMtdParam._m0[22u].x + _507.w;
    float _746 = fma(_739, _240 * NORMAL.x, fma(_738, _247 * TANGENT.x, (_233 * _225) * _737));
    float _749 = fma(_739, _240 * NORMAL.y, fma(_738, _247 * TANGENT.y, (_233 * _226) * _737));
    float _752 = fma(_739, _240 * NORMAL.z, fma(_738, _247 * TANGENT.z, (_233 * _227) * _737));
    float _756 = inversesqrt(dot(vec3(_746, _749, _752), vec3(_746, _749, _752)));
    float _757 = _756 * _746;
    float _758 = _756 * _749;
    float _759 = _756 * _752;
    float _3789 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _760 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _3800 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _3811 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3822 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3833 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _778 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _829 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _819);
    float _830 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _819);
    float _831 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _819);
    float _835 = inversesqrt(dot(vec3(_829, _830, _831), vec3(_829, _830, _831)));
    float _836 = _829 * _835;
    float _837 = _830 * _835;
    float _838 = _831 * _835;
    float _844 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _845 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _863 = fma(_759, cbSceneParam._m0[5u].z, fma(_758, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _757));
    float _866 = fma(_759, cbSceneParam._m0[6u].z, fma(_758, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _757));
    float _869 = fma(_759, cbSceneParam._m0[7u].z, fma(_758, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _757));
    uint _883 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _889 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * cbInstanceData._m0[_883].x;
    float _890 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * cbInstanceData._m0[_883].y;
    float _891 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * cbInstanceData._m0[_883].z;
    float _3844 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _3855 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _3866 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    vec4 _903 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _844, cbSceneParam._m0[86u].y * _845));
    float _907 = ((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * TEXCOORD_5.w) * _903.x;
    float _908 = dot(vec3(_757, _758, _759), vec3(_836, _837, _838));
    float _911 = _908 * 2.0;
    float _915 = (_911 * _757) - _836;
    float _916 = (_911 * _758) - _837;
    float _917 = (_911 * _759) - _838;
    float _924 = abs(dot(vec3(_836, _837, _838), vec3(_757, _758, _759)));
    float _3877 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _926 = sqrt(_760);
    float _939 = exp2((_926 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_926 * 3.0));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1280;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1005 = fma(_979, cbModelParam._m0[26u].z, fma(_975, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _971));
        float _1009 = fma(_979, cbModelParam._m0[27u].z, fma(_975, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _971));
        float _1013 = fma(_979, cbModelParam._m0[28u].z, fma(_975, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _971));
        float _1038 = _971 + _757;
        float _1039 = _975 + _758;
        float _1040 = _979 + _759;
        float _1050 = fma(_1040, cbModelParam._m0[26u].z, fma(_1039, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1038)) - _1005;
        float _1051 = fma(_1040, cbModelParam._m0[27u].z, fma(_1039, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1038)) - _1009;
        float _1052 = fma(_1040, cbModelParam._m0[28u].z, fma(_1039, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1038)) - _1013;
        float _1056 = inversesqrt(dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052)));
        float _1069 = ((_1056 * _1050) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1005 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1070 = ((_1056 * _1051) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1009 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1071 = ((_1056 * _1052) / cbModelParam._m0[34u].z) + ((((((_1013 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        float _1108 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1074.x + (-0.5));
        float _1110 = _1108 * (_1074.y + (-0.5));
        float _1111 = _1108 * (_1074.z + (-0.5));
        float _1118 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1081.x + (-0.5));
        float _1120 = _1118 * (_1081.y + (-0.5));
        float _1121 = _1118 * (_1081.z + (-0.5));
        float _1128 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1088.x + (-0.5));
        float _1130 = _1128 * (_1088.y + (-0.5));
        float _1131 = _1128 * (_1088.z + (-0.5));
        float _1138 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1095.x + (-0.5));
        float _1140 = _1138 * (_1095.y + (-0.5));
        float _1141 = _1138 * (_1095.z + (-0.5));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = _1109 * 0.5;
        float _1146 = _1119 * 0.5;
        float _1147 = _1129 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1162 = (dot(vec3(_757, _758, _759), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1172 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3925 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1174 + 1.0))) + _1179) * _1142;
        float _1189 = _1110 * 0.5;
        float _1190 = _1120 * 0.5;
        float _1191 = _1130 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_757, _758, _759), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3958 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1216 + 1.0))) + _1221) * _1143;
        float _1231 = _1111 * 0.5;
        float _1232 = _1121 * 0.5;
        float _1233 = _1131 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_757, _758, _759), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3991 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1258 + 1.0))) + _1263) * _1144;
        _1280 = _1111;
        _1282 = _1110;
        _1283 = _1109;
        _1284 = _1121;
        _1285 = _1120;
        _1286 = _1119;
        _1287 = _1131;
        _1288 = _1130;
        _1289 = _1129;
        _1290 = _1144;
        _1291 = _1143;
        _1292 = _1142;
        _1293 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1295 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
    }
    else
    {
        _1280 = _1281;
        _1282 = _1281;
        _1283 = _1281;
        _1284 = _1281;
        _1285 = _1281;
        _1286 = _1281;
        _1287 = _1281;
        _1288 = _1281;
        _1289 = _1281;
        _1290 = _1281;
        _1291 = _1281;
        _1292 = _1281;
        _1293 = 0.0;
        _1294 = 0.0;
        _1295 = 0.0;
    }
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1319 = fma(_979, cbModelParam._m0[30u].z, fma(_975, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _971));
        float _1323 = fma(_979, cbModelParam._m0[31u].z, fma(_975, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _971));
        float _1327 = fma(_979, cbModelParam._m0[32u].z, fma(_975, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _971));
        float _1350 = _971 + _757;
        float _1351 = _975 + _758;
        float _1352 = _979 + _759;
        float _1362 = fma(_1352, cbModelParam._m0[30u].z, fma(_1351, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1350)) - _1319;
        float _1363 = fma(_1352, cbModelParam._m0[31u].z, fma(_1351, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1350)) - _1323;
        float _1364 = fma(_1352, cbModelParam._m0[32u].z, fma(_1351, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1350)) - _1327;
        float _1368 = inversesqrt(dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364)));
        float _1381 = ((_1368 * _1362) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1319 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1382 = ((_1368 * _1363) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1323 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1383 = ((_1368 * _1364) / cbModelParam._m0[35u].z) + ((((((_1327 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        float _1418 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1385.x + (-0.5));
        float _1420 = _1418 * (_1385.y + (-0.5));
        float _1421 = _1418 * (_1385.z + (-0.5));
        float _1428 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1392.x + (-0.5));
        float _1430 = _1428 * (_1392.y + (-0.5));
        float _1431 = _1428 * (_1392.z + (-0.5));
        float _1438 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1399.x + (-0.5));
        float _1440 = _1438 * (_1399.y + (-0.5));
        float _1441 = _1438 * (_1399.z + (-0.5));
        float _1448 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1406.x + (-0.5));
        float _1450 = _1448 * (_1406.y + (-0.5));
        float _1451 = _1448 * (_1406.z + (-0.5));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1455 = _1419 * 0.5;
        float _1456 = _1429 * 0.5;
        float _1457 = _1439 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_757, _758, _759), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _4054 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1482 + 1.0))) + _1487) * _1452;
        float _1497 = _1420 * 0.5;
        float _1498 = _1430 * 0.5;
        float _1499 = _1440 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_757, _758, _759), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4087 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1524 + 1.0))) + _1529) * _1453;
        float _1539 = _1421 * 0.5;
        float _1540 = _1431 * 0.5;
        float _1541 = _1441 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_757, _758, _759), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1454 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4120 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1566 + 1.0))) + _1571) * _1454;
        _1588 = _1421;
        _1589 = _1420;
        _1590 = _1419;
        _1591 = _1431;
        _1592 = _1430;
        _1593 = _1429;
        _1594 = _1441;
        _1595 = _1440;
        _1596 = _1439;
        _1597 = _1454;
        _1598 = _1453;
        _1599 = _1452;
        _1600 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
        _1601 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
        _1602 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
    }
    else
    {
        _1588 = _1281;
        _1589 = _1281;
        _1590 = _1281;
        _1591 = _1281;
        _1592 = _1281;
        _1593 = _1281;
        _1594 = _1281;
        _1595 = _1281;
        _1596 = _1281;
        _1597 = _1281;
        _1598 = _1281;
        _1599 = _1281;
        _1600 = 0.0;
        _1601 = 0.0;
        _1602 = 0.0;
    }
    float _1612 = (cbModelParam._m0[1u].x * (_1600 - _1293)) + _1293;
    float _1613 = (cbModelParam._m0[1u].x * (_1601 - _1294)) + _1294;
    float _1614 = (cbModelParam._m0[1u].x * (_1602 - _1295)) + _1295;
    float _1635 = fma(_1614, cbSceneParam._m0[89u].z, fma(_1613, cbSceneParam._m0[89u].y, _1612 * cbSceneParam._m0[89u].x));
    float _1638 = fma(_1614, cbSceneParam._m0[90u].z, fma(_1613, cbSceneParam._m0[90u].y, _1612 * cbSceneParam._m0[90u].x));
    float _1641 = fma(_1614, cbSceneParam._m0[91u].z, fma(_1613, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1612));
    float _1656 = _915 * 0.5;
    float _1657 = _916 * 0.5;
    float _1658 = _917 * 0.5;
    float _1659 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1590, _1593, _1596, _1599));
    float _1662 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1589, _1592, _1595, _1598));
    float _1665 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1588, _1591, _1594, _1597));
    float _1699;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1672 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1280, _1284, _1287, _1290));
        float _1676 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1282, _1285, _1288, _1291));
        float _1680 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1283, _1286, _1289, _1292));
        float _1687 = dot(vec4(cbModelParam._m0[39u]), vec4(_1656, _1657, _1658, 1.0));
        _1699 = dot(vec3(isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1687) ? 0.0 : (isnan(0.0) ? _1687 : max(0.0, _1687))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1699 = 1.0;
    }
    float _1710;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1701 = dot(vec4(cbModelParam._m0[40u]), vec4(_1656, _1657, _1658, 1.0));
        _1710 = dot(vec3(isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1701) ? 0.0 : (isnan(0.0) ? _1701 : max(0.0, _1701))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1710 = 1.0;
    }
    float _1714 = (_1710 * cbModelParam._m0[1u].x) + (_1699 * (1.0 - cbModelParam._m0[1u].x));
    float _1724 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _760);
    float _1725 = isnan(_1724) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1724 : min(cbModelParam._m0[25u].z, _1724));
    float _1806;
    float _1808;
    float _1810;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1773 = fma(_979, cbModelParam._m0[13u].z, fma(_975, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _971)) + cbModelParam._m0[13u].w;
        float _1777 = fma(_979, cbModelParam._m0[14u].z, fma(_975, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _971)) + cbModelParam._m0[14u].w;
        float _1781 = fma(_979, cbModelParam._m0[15u].z, fma(_975, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _971)) + cbModelParam._m0[15u].w;
        float _1784 = fma(_917, cbModelParam._m0[13u].z, fma(_916, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _915));
        float _1787 = fma(_917, cbModelParam._m0[14u].z, fma(_916, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _915));
        float _1790 = fma(_917, cbModelParam._m0[15u].z, fma(_916, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _915));
        float _1818;
        if (_1784 > 0.0)
        {
            _1818 = abs((1.0 - _1773) / _1784);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1773 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1818 = frontier_phi_14_12_ladder;
        }
        float _2100;
        if (_1787 > 0.0)
        {
            _2100 = abs((1.0 - _1777) / _1787);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1777 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2100 = frontier_phi_23_19_ladder;
        }
        float _2346;
        if (_1790 > 0.0)
        {
            _2346 = abs((1.0 - _1781) / _1790);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1781 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2346 = frontier_phi_35_30_ladder;
        }
        float _2348 = isnan(_2100) ? _1818 : (isnan(_1818) ? _2100 : min(_1818, _2100));
        float _2349 = isnan(_2346) ? _2348 : (isnan(_2348) ? _2346 : min(_2348, _2346));
        float _2353 = (_2349 * _1784) + _1773;
        float _2354 = (_2349 * _1787) + _1777;
        float _2355 = (_2349 * _1790) + _1781;
        float _2356 = _2349 * 9.9999997473787516355514526367188e-05;
        float _2358 = (-1.0) - _2356;
        float _2360 = _2356 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2355 > _2360) || ((_2355 < _2358) || ((_2354 > _2360) || ((_2354 < _2358) || ((_2353 < _2358) || (_2353 > _2360))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2479 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2355, cbModelParam._m0[9u].z, fma(_2354, cbModelParam._m0[9u].y, _2353 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2355, cbModelParam._m0[10u].z, fma(_2354, cbModelParam._m0[10u].y, _2353 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2355, cbModelParam._m0[11u].z, fma(_2354, cbModelParam._m0[11u].y, _2353 * cbModelParam._m0[11u].x))), _1725);
            frontier_phi_13_35_ladder = _2479.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2479.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2479.x * cbModelParam._m0[1u].y;
        }
        _1806 = frontier_phi_13_35_ladder_2;
        _1808 = frontier_phi_13_35_ladder_1;
        _1810 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1794 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_915, _916, _917), _1725);
        _1806 = _1794.x * cbModelParam._m0[1u].y;
        _1808 = _1794.y * cbModelParam._m0[1u].y;
        _1810 = _1794.z * cbModelParam._m0[1u].y;
    }
    float _1814 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _760);
    float _1815 = isnan(_1814) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1814 : min(cbModelParam._m0[25u].w, _1814));
    float _1905;
    float _1907;
    float _1909;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1869 = fma(_979, cbModelParam._m0[21u].z, fma(_975, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _971)) + cbModelParam._m0[21u].w;
        float _1873 = fma(_979, cbModelParam._m0[22u].z, fma(_975, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _971)) + cbModelParam._m0[22u].w;
        float _1877 = fma(_979, cbModelParam._m0[23u].z, fma(_975, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _971)) + cbModelParam._m0[23u].w;
        float _1880 = fma(_917, cbModelParam._m0[21u].z, fma(_916, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _915));
        float _1883 = fma(_917, cbModelParam._m0[22u].z, fma(_916, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _915));
        float _1886 = fma(_917, cbModelParam._m0[23u].z, fma(_916, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _915));
        float _2105;
        if (_1880 > 0.0)
        {
            _2105 = abs((1.0 - _1869) / _1880);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1869 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2105 = frontier_phi_25_21_ladder;
        }
        float _2373;
        if (_1883 > 0.0)
        {
            _2373 = abs((1.0 - _1873) / _1883);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1873 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2373 = frontier_phi_37_32_ladder;
        }
        float _2578;
        if (_1886 > 0.0)
        {
            _2578 = abs((1.0 - _1877) / _1886);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1877 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2578 = frontier_phi_46_43_ladder;
        }
        float _2580 = isnan(_2373) ? _2105 : (isnan(_2105) ? _2373 : min(_2105, _2373));
        float _2581 = isnan(_2578) ? _2580 : (isnan(_2580) ? _2578 : min(_2580, _2578));
        float _2585 = (_2581 * _1880) + _1869;
        float _2586 = (_2581 * _1883) + _1873;
        float _2587 = (_2581 * _1886) + _1877;
        float _2588 = _2581 * 9.9999997473787516355514526367188e-05;
        float _2589 = (-1.0) - _2588;
        float _2591 = _2588 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2587 > _2591) || ((_2587 < _2589) || ((_2586 > _2591) || ((_2586 < _2589) || ((_2585 < _2589) || (_2585 > _2591))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2786 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2587, cbModelParam._m0[17u].z, fma(_2586, cbModelParam._m0[17u].y, _2585 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2587, cbModelParam._m0[18u].z, fma(_2586, cbModelParam._m0[18u].y, _2585 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2587, cbModelParam._m0[19u].z, fma(_2586, cbModelParam._m0[19u].y, _2585 * cbModelParam._m0[19u].x))), _1815);
            frontier_phi_22_46_ladder = _2786.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2786.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2786.x * cbModelParam._m0[1u].z;
        }
        _1905 = frontier_phi_22_46_ladder_2;
        _1907 = frontier_phi_22_46_ladder_1;
        _1909 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1889 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_915, _916, _917), _1815);
        _1905 = _1889.x * cbModelParam._m0[1u].z;
        _1907 = _1889.y * cbModelParam._m0[1u].z;
        _1909 = _1889.z * cbModelParam._m0[1u].z;
    }
    float _1921 = ((((1.0 - _939) * ((_926 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_939 * _926)) * _907;
    float _1922 = _1921 * ((cbModelParam._m0[1u].w * (_1905 - _1806)) + _1806);
    float _1923 = _1921 * ((cbModelParam._m0[1u].w * (_1907 - _1808)) + _1808);
    float _1924 = _1921 * ((cbModelParam._m0[1u].w * (_1909 - _1810)) + _1810);
    float _1927 = fma(_1924, cbSceneParam._m0[89u].z, fma(_1923, cbSceneParam._m0[89u].y, _1922 * cbSceneParam._m0[89u].x));
    float _1930 = fma(_1924, cbSceneParam._m0[90u].z, fma(_1923, cbSceneParam._m0[90u].y, _1922 * cbSceneParam._m0[90u].x));
    float _1933 = fma(_1924, cbSceneParam._m0[91u].z, fma(_1923, cbSceneParam._m0[91u].y, _1922 * cbSceneParam._m0[91u].x));
    float _1944 = _844 / cbSceneParam._m0[86u].x;
    float _1952 = (cbSceneParam._m0[88u].y * (1.0 - cbMtdParam._m0[25u].y)) + cbSceneParam._m0[88u].z;
    float _4246 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1954 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * 5.0;
    float _1959 = ((10.0 / (_778 + 10.0)) * cbMtdParam._m0[25u].x) * dot(vec3(_757, _758, _759), vec3(1.0, 0.0, 0.0));
    vec4 _1969 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1959 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1959 + _1944) * cbSceneParam._m0[86u].x, _845), _1954).w) + _1944) * cbSceneParam._m0[86u].x, _845), _1954);
    float _1975 = isnan(0.5) ? _1969.w : (isnan(_1969.w) ? 0.5 : max(_1969.w, 0.5));
    float _1990 = 1.0 - (_1969.w / _1975);
    vec4 _1998 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_844, _845));
    float _2000 = _1998.w;
    float _2012 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2000);
    float _2013 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2000);
    float _2014 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2000);
    float _4262 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _4273 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2016 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _4284 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2017 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    uvec4 _2021 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2023 = _2021.x * 14u;
    uint _2024 = _2023 + 13u;
    float _2031 = _907 + (-1.0);
    float _2036 = (cbLight._m0[_2024].x * _2031) + 1.0;
    float _2037 = (cbLight._m0[_2024].y * _2031) + 1.0;
    float _2038 = (cbLight._m0[_2024].z * _2031) + 1.0;
    float _2039 = (cbLight._m0[_2024].w * _2031) + 1.0;
    uint _2040 = _2023 + 5u;
    float _2046 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
    uint _2050 = _2023 + 4u;
    float _2059 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
    uint _2063 = _2023 | 1u;
    float _2074 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_757, _758, _759));
    float _2077 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_757, _758, _759));
    float _4305 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _4316 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2082 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * 0.3183098733425140380859375;
    float _2084 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * 0.3183098733425140380859375;
    float _2091 = ((cbLight._m0[_2040].x * _2046) * _2084) + (((cbLight._m0[_2050].x * _2015) * _2059) * _2082);
    float _2092 = ((_2046 * cbLight._m0[_2040].y) * _2084) + (((cbLight._m0[_2050].y * _2016) * _2059) * _2082);
    float _2093 = ((_2046 * cbLight._m0[_2040].z) * _2084) + (((cbLight._m0[_2050].z * _2017) * _2059) * _2082);
    uvec4 _2097 = floatBitsToUint(cbLight._m0[_2023 + 12u]);
    bool _2099 = _2097.x == 0u;
    float _2110;
    float _2112;
    float _2114;
    if (_2099)
    {
        _2110 = _2091;
        _2112 = _2092;
        _2114 = _2093;
    }
    else
    {
        uint _2118 = _2023 + 6u;
        float _2134 = (dot(vec3(cbLight._m0[_2023 + 2u].xyz), vec3(_757, _758, _759)) * 0.5) + 0.5;
        float _2135 = _2134 * _2134;
        float _4327 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2136 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2137 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
        _2110 = (((cbLight._m0[_2118].x * 0.3183098733425140380859375) * _2136) * _2137) + _2091;
        _2112 = (((cbLight._m0[_2118].y * 0.3183098733425140380859375) * _2136) * _2137) + _2092;
        _2114 = (((cbLight._m0[_2118].z * 0.3183098733425140380859375) * _2136) * _2137) + _2093;
    }
    bool _2117 = _2097.y == 0u;
    float _2155;
    float _2157;
    float _2159;
    if (_2117)
    {
        _2155 = _2110;
        _2157 = _2112;
        _2159 = _2114;
    }
    else
    {
        uint _2317 = _2023 + 7u;
        float _2333 = (dot(vec3(cbLight._m0[_2023 + 3u].xyz), vec3(_757, _758, _759)) * 0.5) + 0.5;
        float _2334 = _2333 * _2333;
        float _4343 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2335 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2336 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
        _2155 = (((cbLight._m0[_2317].x * 0.3183098733425140380859375) * _2335) * _2336) + _2110;
        _2157 = (((cbLight._m0[_2317].y * 0.3183098733425140380859375) * _2335) * _2336) + _2112;
        _2159 = (((cbLight._m0[_2317].z * 0.3183098733425140380859375) * _2335) * _2336) + _2114;
    }
    uint _2162 = _2023 + 8u;
    float _2175 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2023].w)) * _760) * 0.949999988079071044921875);
    float _2176 = _2175 * _2175;
    float _2177 = cbLight._m0[_2023].x + _836;
    float _2178 = cbLight._m0[_2023].y + _837;
    float _2179 = cbLight._m0[_2023].z + _838;
    float _2183 = inversesqrt(dot(vec3(_2177, _2178, _2179), vec3(_2177, _2178, _2179)));
    float _2184 = _2183 * _2177;
    float _2185 = _2183 * _2178;
    float _2186 = _2183 * _2179;
    float _2187 = dot(vec3(_757, _758, _759), vec3(cbLight._m0[_2023].xyz));
    float _4359 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2190 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _4370 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _2191 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _2192 = dot(vec3(_757, _758, _759), vec3(_2184, _2185, _2186));
    float _4381 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2195 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _2196 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_2184, _2185, _2186));
    float _4392 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2200 = _2176 * _2176;
    float _2204 = ((_2195 * _2195) * (_2200 + (-1.0))) + 1.0;
    float _2215 = (exp2(log2(1.0 - (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2216 = 1.0 - _2176;
    float _2227 = (0.5 / (((_2191 * ((_2190 * _2216) + _2176)) + 9.9999999392252902907785028219223e-09) + (((_2191 * _2216) + _2176) * _2190))) * _2190;
    float _4403 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2229 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2200 / ((_2204 * _2204) * 3.141590118408203125));
    uint _2243 = _2023 + 9u;
    float _2254 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2063].w)) * _760) * 0.949999988079071044921875);
    float _2255 = _2254 * _2254;
    float _2256 = cbLight._m0[_2063].x + _836;
    float _2257 = cbLight._m0[_2063].y + _837;
    float _2258 = cbLight._m0[_2063].z + _838;
    float _2262 = inversesqrt(dot(vec3(_2256, _2257, _2258), vec3(_2256, _2257, _2258)));
    float _2263 = _2262 * _2256;
    float _2264 = _2262 * _2257;
    float _2265 = _2262 * _2258;
    float _2266 = dot(vec3(_757, _758, _759), vec3(cbLight._m0[_2063].xyz));
    float _4414 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2269 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2270 = dot(vec3(_757, _758, _759), vec3(_2263, _2264, _2265));
    float _4425 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2273 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _2274 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_2263, _2264, _2265));
    float _4436 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2278 = _2255 * _2255;
    float _2282 = ((_2273 * _2273) * (_2278 + (-1.0))) + 1.0;
    float _2291 = (exp2(log2(1.0 - (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2292 = 1.0 - _2255;
    float _2302 = (0.5 / (((_2191 * ((_2269 * _2292) + _2255)) + 9.9999999392252902907785028219223e-09) + (((_2191 * _2292) + _2255) * _2269))) * _2269;
    float _4447 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2304 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2278 / ((_2282 * _2282) * 3.141590118408203125));
    float _2314 = (((_2291 * cbLight._m0[_2243].x) * _2304) * _2046) + ((((cbLight._m0[_2162].x * _2015) * _2215) * _2229) * _2059);
    float _2315 = (((_2291 * cbLight._m0[_2243].y) * _2304) * _2046) + ((((cbLight._m0[_2162].y * _2016) * _2215) * _2229) * _2059);
    float _2316 = (((_2291 * cbLight._m0[_2243].z) * _2304) * _2046) + ((((cbLight._m0[_2162].z * _2017) * _2215) * _2229) * _2059);
    float _2378;
    float _2380;
    float _2382;
    if (_2099)
    {
        _2378 = _2314;
        _2380 = _2315;
        _2382 = _2316;
    }
    else
    {
        uint _2384 = _2023 + 2u;
        uint _2388 = _2023 + 10u;
        float _2402 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2384].w)) * _760) * 0.949999988079071044921875);
        float _2403 = _2402 * _2402;
        float _2404 = cbLight._m0[_2384].x + _836;
        float _2405 = cbLight._m0[_2384].y + _837;
        float _2406 = cbLight._m0[_2384].z + _838;
        float _2410 = inversesqrt(dot(vec3(_2404, _2405, _2406), vec3(_2404, _2405, _2406)));
        float _2411 = _2410 * _2404;
        float _2412 = _2410 * _2405;
        float _2413 = _2410 * _2406;
        float _2414 = dot(vec3(_757, _758, _759), vec3(cbLight._m0[_2384].xyz));
        float _4458 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2417 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _2418 = dot(vec3(_757, _758, _759), vec3(_2411, _2412, _2413));
        float _4469 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2421 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _2422 = dot(vec3(cbLight._m0[_2384].xyz), vec3(_2411, _2412, _2413));
        float _4480 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2426 = _2403 * _2403;
        float _2430 = ((_2421 * _2421) * (_2426 + (-1.0))) + 1.0;
        float _2439 = (exp2(log2(1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2440 = 1.0 - _2403;
        float _2450 = (0.5 / (((_2191 * ((_2417 * _2440) + _2403)) + 9.9999999392252902907785028219223e-09) + (((_2191 * _2440) + _2403) * _2417))) * _2417;
        float _4491 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2452 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2426 / ((_2430 * _2430) * 3.141590118408203125));
        float _2453 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
        _2378 = (((_2439 * cbLight._m0[_2388].x) * _2452) * _2453) + _2314;
        _2380 = (((_2439 * cbLight._m0[_2388].y) * _2452) * _2453) + _2315;
        _2382 = (((_2439 * cbLight._m0[_2388].z) * _2452) * _2453) + _2316;
    }
    float _2488;
    float _2490;
    float _2492;
    if (_2117)
    {
        _2488 = _2378;
        _2490 = _2380;
        _2492 = _2382;
    }
    else
    {
        uint _2499 = _2023 + 3u;
        uint _2503 = _2023 + 11u;
        float _2517 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2499].w)) * _760) * 0.949999988079071044921875);
        float _2518 = _2517 * _2517;
        float _2519 = cbLight._m0[_2499].x + _836;
        float _2520 = cbLight._m0[_2499].y + _837;
        float _2521 = cbLight._m0[_2499].z + _838;
        float _2525 = inversesqrt(dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521)));
        float _2526 = _2525 * _2519;
        float _2527 = _2525 * _2520;
        float _2528 = _2525 * _2521;
        float _2529 = dot(vec3(_757, _758, _759), vec3(cbLight._m0[_2499].xyz));
        float _4507 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2532 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _2533 = dot(vec3(_757, _758, _759), vec3(_2526, _2527, _2528));
        float _4518 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _2537 = dot(vec3(cbLight._m0[_2499].xyz), vec3(_2526, _2527, _2528));
        float _4529 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2541 = _2518 * _2518;
        float _2545 = ((_2536 * _2536) * (_2541 + (-1.0))) + 1.0;
        float _2554 = (exp2(log2(1.0 - (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2555 = 1.0 - _2518;
        float _2565 = (0.5 / (((_2191 * ((_2532 * _2555) + _2518)) + 9.9999999392252902907785028219223e-09) + (((_2191 * _2555) + _2518) * _2532))) * _2532;
        float _4540 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2567 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2541 / ((_2545 * _2545) * 3.141590118408203125));
        float _2568 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
        _2488 = (((_2554 * cbLight._m0[_2503].x) * _2567) * _2568) + _2378;
        _2490 = (((_2554 * cbLight._m0[_2503].y) * _2567) * _2568) + _2380;
        _2492 = (((_2554 * cbLight._m0[_2503].z) * _2567) * _2568) + _2382;
    }
    float _2703;
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    if (_2021.y == 0u)
    {
        float _2643 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2644 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2643;
        float _2645 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2643;
        float _2646 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2643;
        uvec4 _2658 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2659 = _2658.x;
        uint _2670 = uint((float(_2658.y) * floor(float(uint(cbSceneParam._m0[85u].y * _845) / _2659))) + floor(float(uint(cbSceneParam._m0[85u].x * _844) / _2659)));
        float _2680 = (log2(_2646 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2681 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        uint _2684 = uint(isnan(14.0) ? _2681 : (isnan(_2681) ? 14.0 : min(_2681, 14.0)));
        uvec4 _2689 = texelFetch(g_lightClusterGridBuffer, int(((_2684 << 2u) + (_2670 << 6u)) >> 2u));
        uint _2690 = _2689.x;
        uint _2691 = _2658.z;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        if (((((1u << ((_2691 >> 4u) & 15u)) + 4294967295u) & _2690) == 0u) || ((_2691 & 240u) == 0u))
        {
            _2791 = 0.0;
            _2793 = 0.0;
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
        }
        else
        {
            float _2792;
            float _2794;
            float _2796;
            float _2798;
            float _2800;
            float _2802;
            float _2935 = 0.0;
            float _2936 = 0.0;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            float _2940 = 0.0;
            uint _2941 = 0u;
            uint _2950;
            bool _2951;
            for (;;)
            {
                _2950 = texelFetch(g_lightClassification, int((((_2684 << 5u) + (_2670 << 9u)) + (_2941 << 2u)) >> 2u)).x;
                _2951 = _2950 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2951)
                {
                    frontier_phi_61_pred = _2935;
                    frontier_phi_61_pred_1 = _2940;
                    frontier_phi_61_pred_2 = _2939;
                    frontier_phi_61_pred_3 = _2938;
                    frontier_phi_61_pred_4 = _2937;
                    frontier_phi_61_pred_5 = _2936;
                }
                else
                {
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    uint _3065;
                    _3059 = _2935;
                    _3060 = _2936;
                    _3061 = _2937;
                    _3062 = _2938;
                    _3063 = _2939;
                    _3064 = _2940;
                    _3065 = _2950;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    for (;;)
                    {
                        uint _3069 = uint(findLSB(_3065)) + (_2941 << 5u);
                        uint _3066 = (_3065 + 4294967295u) & _3065;
                        uint _3071 = _3069 * 48u;
                        vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3071)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 3u)).x));
                        uint _3091 = (_3069 * 48u) + 4u;
                        vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3091)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 3u)).x));
                        uint _3110 = (_3069 * 48u) + 8u;
                        vec3 _3121 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3110)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 2u)).x));
                        float _3125 = _3085.x - _2644;
                        float _3126 = _3085.y - _2645;
                        float _3127 = _3085.z - _2646;
                        float _3128 = dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127));
                        float _3131 = inversesqrt(_3128);
                        float _3132 = _3131 * _3125;
                        float _3133 = _3131 * _3126;
                        float _3134 = _3131 * _3127;
                        float _3135 = dot(vec3(_863, _866, _869), vec3(_3132, _3133, _3134));
                        float _3140 = 1.0 - (_3128 * _3085.w);
                        float _4566 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3141 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3142 = sqrt(_3128) * _3104.w;
                        float _3145 = 1.39999997615814208984375 / (_3142 + 1.39999997615814208984375);
                        float _3146 = _3145 * _3145;
                        float _3149 = ((1.0 - _3146) * _3135) + _3146;
                        float _3152 = _3142 * _3142;
                        float _3156 = ((isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0))) * _3141) / ((_3152 * 0.699999988079071044921875) + 1.0);
                        float _3160 = (-0.0) - _2644;
                        float _3161 = (-0.0) - _2645;
                        float _3162 = (-0.0) - _2646;
                        float _3166 = inversesqrt(dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162)));
                        float _3167 = _3166 * _3160;
                        float _3168 = _3166 * _3161;
                        float _3169 = _3166 * _3162;
                        float _3177 = exp2(log2(1.0 / ((_3152 * 3.5) + 5.0)) * 0.25);
                        float _3178 = 1.0 - _926;
                        float _3185 = sqrt(1.0 - ((1.0 - (_3178 * _3178)) * (1.0 - (_3177 * _3177))));
                        float _3186 = _3185 * _3185;
                        float _3187 = _3186 * _3186;
                        float _3188 = _3167 + _3132;
                        float _3189 = _3168 + _3133;
                        float _3190 = _3169 + _3134;
                        float _3194 = inversesqrt(dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190)));
                        float _3198 = dot(vec3(_863, _866, _869), vec3(_3167, _3168, _3169));
                        float _4582 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                        float _3201 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                        float _3202 = dot(vec3(_863, _866, _869), vec3(_3194 * _3188, _3194 * _3189, _3194 * _3190));
                        float _4593 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                        float _3205 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                        float _3209 = ((_3205 * _3205) * (_3187 + (-1.0))) + 1.0;
                        float _3210 = _3145 * _3186;
                        float _3211 = _3210 * _3210;
                        float _3214 = ((1.0 - _3211) * _3135) + _3211;
                        float _4604 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3215 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                        float _3216 = 1.0 - _3186;
                        float _3226 = (0.5 / (((_3215 * ((_3201 * _3216) + _3186)) + 9.9999999392252902907785028219223e-09) + (((_3215 * _3216) + _3186) * _3201))) * _3215;
                        float _4615 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3237 = (((_3187 * 3.1415927410125732421875) * (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) / ((_3209 * _3209) * ((_3152 * 2.1991131305694580078125) + 3.141590118408203125))) * _3141;
                        _2994 = (_3156 * _3104.x) + _3062;
                        _2995 = (_3156 * _3104.y) + _3063;
                        _2996 = (_3156 * _3104.z) + _3064;
                        _2991 = (_3237 * _3121.x) + _3059;
                        _2992 = (_3237 * _3121.y) + _3060;
                        _2993 = (_3237 * _3121.z) + _3061;
                        if (_3066 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3059 = _2991;
                            _3060 = _2992;
                            _3061 = _2993;
                            _3062 = _2994;
                            _3063 = _2995;
                            _3064 = _2996;
                            _3065 = _3066;
                        }
                    }
                    frontier_phi_61_pred = _2991;
                    frontier_phi_61_pred_1 = _2996;
                    frontier_phi_61_pred_2 = _2995;
                    frontier_phi_61_pred_3 = _2994;
                    frontier_phi_61_pred_4 = _2993;
                    frontier_phi_61_pred_5 = _2992;
                }
                _2792 = frontier_phi_61_pred;
                _2802 = frontier_phi_61_pred_1;
                _2800 = frontier_phi_61_pred_2;
                _2798 = frontier_phi_61_pred_3;
                _2796 = frontier_phi_61_pred_4;
                _2794 = frontier_phi_61_pred_5;
                uint _2942 = _2941 + 1u;
                if (_2942 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2935 = _2792;
                    _2936 = _2794;
                    _2937 = _2796;
                    _2938 = _2798;
                    _2939 = _2800;
                    _2940 = _2802;
                    _2941 = _2942;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2791 = _2792;
            _2793 = _2794;
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
        }
        uvec4 _2805 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2806 = _2805.z;
        uint _2808 = (_2806 >> 8u) & 15u;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        if (((4294967295u << _2808) & _2690) == 0u)
        {
            _2903 = _2791;
            _2905 = _2793;
            _2907 = _2795;
            _2909 = _2797;
            _2911 = _2799;
            _2913 = _2801;
        }
        else
        {
            float _2928 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
            float _2929 = _2928 * _2644;
            float _2930 = _2928 * _2645;
            float _2931 = _2928 * _2646;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2808 < ((_2806 >> 12u) & 15u))
            {
                float _2904;
                float _2906;
                float _2908;
                float _2910;
                float _2912;
                float _2914;
                float _3042 = _2791;
                float _3043 = _2793;
                float _3044 = _2795;
                float _3045 = _2797;
                float _3046 = _2799;
                float _3047 = _2801;
                uint _3048 = _2808;
                uint _3057;
                bool _3058;
                for (;;)
                {
                    _3057 = texelFetch(g_lightClassification, int((((_2684 << 5u) + (_2670 << 9u)) + (_3048 << 2u)) >> 2u)).x;
                    _3058 = _3057 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3058)
                    {
                        frontier_phi_67_pred = _3045;
                        frontier_phi_67_pred_1 = _3046;
                        frontier_phi_67_pred_2 = _3047;
                        frontier_phi_67_pred_3 = _3044;
                        frontier_phi_67_pred_4 = _3043;
                        frontier_phi_67_pred_5 = _3042;
                    }
                    else
                    {
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3255 = _3042;
                        float _3256 = _3043;
                        float _3257 = _3044;
                        float _3258 = _3045;
                        float _3259 = _3046;
                        float _3260 = _3047;
                        uint _3261 = _3057;
                        uint _3262;
                        vec4 _3287;
                        float _3288;
                        vec4 _3303;
                        vec3 _3315;
                        vec4 _3330;
                        vec4 _3345;
                        float _3391;
                        bool _3392;
                        for (;;)
                        {
                            uint _3272 = ((_3048 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3261));
                            _3262 = (_3261 + 4294967295u) & _3261;
                            uint _3274 = _3272 * 40u;
                            _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            _3288 = _3287.w;
                            uint _3290 = (_3272 * 40u) + 4u;
                            _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            uint _3305 = (_3272 * 40u) + 8u;
                            _3315 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x));
                            uint _3317 = (_3272 * 40u) + 16u;
                            _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            uint _3332 = (_3272 * 40u) + 20u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3347 = (_3272 * 40u) + 24u;
                            vec4 _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3366 = (_3272 * 40u) + 28u;
                            vec4 _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            _3391 = fma(_2646, _3379.z, fma(_2645, _3379.y, _3379.x * _2644)) + _3379.w;
                            _3392 = !((fma(_2646, _3360.z, fma(_2645, _3360.y, _3360.x * _2644)) + _3360.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3392)
                            {
                                float _3419 = _3287.x - _2644;
                                float _3420 = _3287.y - _2645;
                                float _3421 = _3287.z - _2646;
                                float _3422 = dot(vec3(_3419, _3420, _3421), vec3(_3419, _3420, _3421));
                                float _3425 = inversesqrt(_3422);
                                float _3426 = _3425 * _3419;
                                float _3427 = _3425 * _3420;
                                float _3428 = _3425 * _3421;
                                float _3432 = 1.0 - (_3422 / (_3288 * _3288));
                                float _4626 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3437 = sqrt(_3422) * _3303.w;
                                float _3439 = 1.39999997615814208984375 / (_3437 + 1.39999997615814208984375);
                                float _3440 = _3439 * _3439;
                                float _3443 = ((1.0 - _3440) * dot(vec3(_3426, _3427, _3428), vec3(_863, _866, _869))) + _3440;
                                float _3446 = _3437 * _3437;
                                float _3450 = (fma(_2646, _3330.z, fma(_2645, _3330.y, _3330.x * _2644)) + _3330.w) / _3391;
                                float _3451 = (fma(_2646, _3345.z, fma(_2645, _3345.y, _3345.x * _2644)) + _3345.w) / _3391;
                                float _3455 = 1.0 - dot(vec2(_3450, _3451), vec2(_3450, _3451));
                                float _4642 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3456 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3457 = _3456 * (((isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0))) * _3433) / ((_3446 * 0.699999988079071044921875) + 1.0));
                                float _3469 = exp2(log2(1.0 / ((_3446 * 3.5) + 5.0)) * 0.25);
                                float _3470 = 1.0 - _926;
                                float _3477 = sqrt(1.0 - ((1.0 - (_3470 * _3470)) * (1.0 - (_3469 * _3469))));
                                float _3478 = _3477 * _3477;
                                float _3479 = _3478 * _3478;
                                float _3480 = _3426 - _2929;
                                float _3481 = _3427 - _2930;
                                float _3482 = _3428 - _2931;
                                float _3486 = inversesqrt(dot(vec3(_3480, _3481, _3482), vec3(_3480, _3481, _3482)));
                                float _3490 = dot(vec3(_863, _866, _869), vec3((-0.0) - _2929, (-0.0) - _2930, (-0.0) - _2931));
                                float _4653 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3493 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                                float _3494 = dot(vec3(_863, _866, _869), vec3(_3486 * _3480, _3486 * _3481, _3486 * _3482));
                                float _4664 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3497 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                                float _3501 = ((_3497 * _3497) * (_3479 + (-1.0))) + 1.0;
                                float _3502 = _3439 * _3478;
                                float _3503 = _3502 * _3502;
                                float _3509 = ((1.0 - _3503) * dot(vec3(_863, _866, _869), vec3(_3426, _3427, _3428))) + _3503;
                                float _4675 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3510 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                                float _3511 = 1.0 - _3478;
                                float _3521 = (0.5 / (((_3510 * ((_3493 * _3511) + _3478)) + 9.9999999392252902907785028219223e-09) + (((_3510 * _3511) + _3478) * _3493))) * _3510;
                                float _4686 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3531 = (_3456 * _3433) * (((_3479 * 3.1415927410125732421875) * (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0)))) / ((_3501 * _3501) * ((_3446 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3531 * _3315.x;
                                frontier_phi_73_pred_1 = _3531 * _3315.y;
                                frontier_phi_73_pred_2 = _3457 * _3303.z;
                                frontier_phi_73_pred_3 = _3457 * _3303.y;
                                frontier_phi_73_pred_4 = _3457 * _3303.x;
                                frontier_phi_73_pred_5 = _3531 * _3315.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3535 = frontier_phi_73_pred;
                            _3536 = frontier_phi_73_pred_1;
                            _3540 = frontier_phi_73_pred_2;
                            _3539 = frontier_phi_73_pred_3;
                            _3538 = frontier_phi_73_pred_4;
                            _3537 = frontier_phi_73_pred_5;
                            _3245 = _3538 + _3258;
                            _3246 = _3539 + _3259;
                            _3247 = _3540 + _3260;
                            _3242 = _3535 + _3255;
                            _3243 = _3536 + _3256;
                            _3244 = _3537 + _3257;
                            if (_3262 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3262;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3245;
                        frontier_phi_67_pred_1 = _3246;
                        frontier_phi_67_pred_2 = _3247;
                        frontier_phi_67_pred_3 = _3244;
                        frontier_phi_67_pred_4 = _3243;
                        frontier_phi_67_pred_5 = _3242;
                    }
                    _2910 = frontier_phi_67_pred;
                    _2912 = frontier_phi_67_pred_1;
                    _2914 = frontier_phi_67_pred_2;
                    _2908 = frontier_phi_67_pred_3;
                    _2906 = frontier_phi_67_pred_4;
                    _2904 = frontier_phi_67_pred_5;
                    uint _3049 = _3048 + 1u;
                    if (_3049 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3042 = _2904;
                        _3043 = _2906;
                        _3044 = _2908;
                        _3045 = _2910;
                        _3046 = _2912;
                        _3047 = _2914;
                        _3048 = _3049;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2912;
                frontier_phi_55_56_ladder_1 = _2914;
                frontier_phi_55_56_ladder_2 = _2910;
                frontier_phi_55_56_ladder_3 = _2908;
                frontier_phi_55_56_ladder_4 = _2906;
                frontier_phi_55_56_ladder_5 = _2904;
            }
            else
            {
                frontier_phi_55_56_ladder = _2799;
                frontier_phi_55_56_ladder_1 = _2801;
                frontier_phi_55_56_ladder_2 = _2797;
                frontier_phi_55_56_ladder_3 = _2795;
                frontier_phi_55_56_ladder_4 = _2793;
                frontier_phi_55_56_ladder_5 = _2791;
            }
            _2903 = frontier_phi_55_56_ladder_5;
            _2905 = frontier_phi_55_56_ladder_4;
            _2907 = frontier_phi_55_56_ladder_3;
            _2909 = frontier_phi_55_56_ladder_2;
            _2911 = frontier_phi_55_56_ladder;
            _2913 = frontier_phi_55_56_ladder_1;
        }
        float _2918 = isnan(1.0) ? _907 : (isnan(_907) ? 1.0 : min(_907, 1.0));
        _2703 = (_2918 * _2909) + _2155;
        _2705 = (_2918 * _2911) + _2157;
        _2707 = (_2918 * _2913) + _2159;
        _2709 = ((_2903 * 0.039999999105930328369140625) * _2918) + _2488;
        _2711 = ((_2905 * 0.039999999105930328369140625) * _2918) + _2490;
        _2713 = ((_2907 * 0.039999999105930328369140625) * _2918) + _2492;
    }
    else
    {
        _2703 = _2155;
        _2705 = _2157;
        _2707 = _2159;
        _2709 = _2488;
        _2711 = _2490;
        _2713 = _2492;
    }
    float _4702 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _4713 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _4724 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    uint _2733 = _253 + 6u;
    float _2741 = _844 / cbSceneParam._m0[86u].x;
    float _2742 = _845 / cbSceneParam._m0[86u].y;
    vec4 _2756 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2741, _2742, (log2((isnan(cbSceneParam._m0[77u].w) ? _778 : (isnan(_778) ? cbSceneParam._m0[77u].w : min(_778, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2758 = _2756.x;
    float _2759 = _2756.y;
    float _2760 = _2756.z;
    float _2761 = _2756.w;
    float _2854;
    float _2856;
    float _2858;
    float _2860;
    if (_778 > cbSceneParam._m0[78u].w)
    {
        float _2816 = isnan(_778) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _778 : min(cbSceneParam._m0[80u].w, _778));
        float _2817 = _2816 / _778;
        float _2828 = _2817 * _829;
        float _2829 = _830 * _2817;
        float _2830 = (-0.0) - _2829;
        float _2832 = _2817 * _831;
        float _2834 = (cbSceneParam._m0[77u].w * _2830) / _2816;
        float _2835 = _2834 + cbSceneParam._m0[79u].w;
        float _2836 = cbSceneParam._m0[79u].w - _2829;
        float _2842 = sqrt(((_2828 * _2828) + (_2829 * _2829)) + (_2832 * _2832));
        float _2845 = (1.0 - (cbSceneParam._m0[77u].w / _2816)) * _2842;
        float _2850 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2852 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3004;
        if (abs((_2830 - _2834) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3004 = ((((_2835 > 0.0) ? exp2(_2850 * _2835) : (2.0 - exp2(_2852 * _2835))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2845;
        }
        else
        {
            float _2964 = 1.0 / cbSceneParam._m0[80u].x;
            float _2965 = isnan(_2836) ? _2835 : (isnan(_2835) ? _2836 : max(_2835, _2836));
            float _2966 = isnan(_2836) ? _2835 : (isnan(_2835) ? _2836 : min(_2835, _2836));
            float _2975 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : min(_2965, 0.0));
            float _2976 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : min(_2966, 0.0));
            _3004 = ((abs(_2842 / _2830) * cbSceneParam._m0[80u].y) * ((((_2975 - _2976) * 2.0) - ((exp2(_2850 * (isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0)))) - exp2(_2850 * (isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0))))) * _2964)) - ((exp2(_2852 * _2975) - exp2(_2852 * _2976)) * _2964))) + (_2845 * cbSceneParam._m0[80u].z);
        }
        vec4 _3006 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2741, _2742, 1.0), 0.0);
        float _3015 = exp2((_3004 * (-1.44269502162933349609375)) * (1.0 - _3006.w));
        float _3016 = log2(_3015);
        float _3032 = log2(_2761);
        _2854 = (exp2(_3032 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3016 * cbSceneParam._m0[78u].x)) * _3006.x) / cbSceneParam._m0[78u].x)) + _2758;
        _2856 = (exp2(_3032 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3016 * cbSceneParam._m0[78u].y)) * _3006.y) / cbSceneParam._m0[78u].y)) + _2759;
        _2858 = (exp2(_3032 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3016 * cbSceneParam._m0[78u].z)) * _3006.z) / cbSceneParam._m0[78u].z)) + _2760;
        _2860 = _3015 * _2761;
    }
    else
    {
        _2854 = _2758;
        _2856 = _2759;
        _2858 = _2760;
        _2860 = _2761;
    }
    float _2871 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2872 = _2871 == 3.0;
    float _2873 = log2(_2860);
    float _2880 = exp2(_2873 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2703 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _907))) + (((((_1921 * (_1969.x / _1975)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1714) * _1990)) + _2709) * cbPerFrame._m0[3u].x));
    float _2881 = exp2(_2873 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2705 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _907))) + (((((_1921 * (_1969.y / _1975)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1714) * _1990)) + _2711) * cbPerFrame._m0[3u].x));
    float _2882 = exp2(_2873 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2707 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _907))) + (((((_1921 * (_1969.z / _1975)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1714) * _1990)) + _2713) * cbPerFrame._m0[3u].x));
    float _2891 = (_2871 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2891 * (_2872 ? _2880 : (_2880 + (cbSceneParam._m0[72u].w * _2854)));
    SV_Target.y = _2891 * (_2872 ? _2881 : (_2881 + (cbSceneParam._m0[72u].w * _2856)));
    SV_Target.z = _2891 * (_2872 ? _2882 : (_2882 + (cbSceneParam._m0[72u].w * _2858)));
    SV_Target.w = cbInstanceData._m0[_2733].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2733].w;
}


