#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[33];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _97 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _98 = _97 * NORMAL.x;
    float _99 = _97 * NORMAL.y;
    float _100 = _97 * NORMAL.z;
    float _119 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _163 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _173 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _163);
    float _174 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _163);
    float _175 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _163);
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _208 = sqrt(((_173 * _173) + (_174 * _174)) + (_175 * _175));
        float _215 = (cbMatDynParam._m0[5u].x * _208) + cbMatDynParam._m0[5u].y;
        float _771 = isnan(0.0) ? _215 : (isnan(_215) ? 0.0 : max(_215, 0.0));
        float _217 = isnan(1.0) ? _771 : (isnan(_771) ? 1.0 : min(_771, 1.0));
        float _221 = (cbMatDynParam._m0[5u].z * _208) + cbMatDynParam._m0[5u].w;
        float _782 = isnan(0.0) ? _221 : (isnan(_221) ? 0.0 : max(_221, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _782 : (isnan(_782) ? 1.0 : min(_782, 1.0))) - _217)) + _217) < ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _185 = POSITION_1.x / POSITION_1.w;
    float _186 = POSITION_1.y / POSITION_1.w;
    float _190 = (_185 * 0.5) + 0.5;
    float _191 = 0.5 - (_186 * 0.5);
    float _234;
    float _236;
    float _238;
    float _240;
    if (cbMtdParam._m0[25u].y < cbPerScene._m0[22u].z)
    {
        _234 = 0.0;
        _236 = 0.0;
        _238 = 0.0;
        _240 = 0.0;
    }
    else
    {
        float _246 = 1.0 / _119;
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        float frontier_phi_3_4_ladder_2;
        float frontier_phi_3_4_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _246))
        {
            float _272 = fma(_100, cbPerScene._m0[8u].z, fma(_99, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _98));
            float _275 = fma(_100, cbPerScene._m0[9u].z, fma(_99, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _98));
            float _278 = fma(_100, cbPerScene._m0[10u].z, fma(_99, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _98));
            float _285 = (_185 * _119) * cbPerScene._m0[28u].x;
            float _287 = (_186 * _119) * cbPerScene._m0[28u].y;
            float _291 = inversesqrt(dot(vec3(_285, _287, _119), vec3(_285, _287, _119)));
            float _292 = _285 * _291;
            float _293 = _287 * _291;
            float _294 = _291 * _119;
            float _298 = dot(vec3(_292, _293, _294), vec3(_272, _275, _278)) * 2.0;
            float _303 = _292 - (_298 * _272);
            float _304 = _293 - (_298 * _275);
            float _305 = _294 - (_298 * _278);
            float _309 = inversesqrt(dot(vec3(_303, _304, _305), vec3(_303, _304, _305)));
            float _312 = _305 * _309;
            float frontier_phi_3_4_ladder_6_ladder;
            float frontier_phi_3_4_ladder_6_ladder_1;
            float frontier_phi_3_4_ladder_6_ladder_2;
            float frontier_phi_3_4_ladder_6_ladder_3;
            if (_312 < cbPerScene._m0[16u].x)
            {
                frontier_phi_3_4_ladder_6_ladder = 0.0;
                frontier_phi_3_4_ladder_6_ladder_1 = 0.0;
                frontier_phi_3_4_ladder_6_ladder_2 = 0.0;
                frontier_phi_3_4_ladder_6_ladder_3 = 0.0;
            }
            else
            {
                float _325 = abs(dot(vec3((-0.0) - _292, (-0.0) - _293, (-0.0) - _294), vec3(_272, _275, _278)));
                float _793 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
                float _336 = (((cbMtdParam._m0[25u].y * cbMtdParam._m0[25u].y) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _793 : (isnan(_793) ? 1.0 : min(_793, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _345 = (cbPerScene._m0[29u].x * (1.0 - cbMtdParam._m0[25u].y)) + cbPerScene._m0[29u].y;
                float _804 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
                float _354 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _804 : (isnan(_804) ? 1.0 : min(_804, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_1;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_2;
                float frontier_phi_3_4_ladder_6_ladder_7_ladder_3;
                if (_336 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_3_4_ladder_6_ladder_7_ladder = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_1 = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_2 = 0.0;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_3 = 0.0;
                }
                else
                {
                    float _357 = _312 - cbPerScene._m0[16u].x;
                    float _815 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
                    float _358 = isnan(1.0) ? _815 : (isnan(_815) ? 1.0 : min(_815, 1.0));
                    float _359 = _358 * _358;
                    float _361 = (_336 - cbPerScene._m0[22u].x) * 10.0;
                    float _826 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
                    float _363 = isnan(1.0) ? _826 : (isnan(_826) ? 1.0 : min(_826, 1.0));
                    float _364 = isnan(_363) ? _359 : (isnan(_359) ? _363 : min(_359, _363));
                    float _368 = (cbPerScene._m0[21u].x - _119) * cbPerScene._m0[21u].z;
                    float _842 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
                    float _369 = isnan(1.0) ? _842 : (isnan(_842) ? 1.0 : min(_842, 1.0));
                    float _370 = isnan(_369) ? _364 : (isnan(_364) ? _369 : min(_364, _369));
                    float _371 = (_303 * _309) + _285;
                    float _372 = (_304 * _309) + _287;
                    float _373 = _312 + _119;
                    float _405 = fma(_373, cbPerScene._m0[7u].z, fma(_372, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _371)) + cbPerScene._m0[7u].w;
                    float _409 = ((fma(_373, cbPerScene._m0[4u].z, fma(_372, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _371)) + cbPerScene._m0[4u].w) / _405) - _190;
                    float _410 = ((fma(_373, cbPerScene._m0[5u].z, fma(_372, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _371)) + cbPerScene._m0[5u].w) / _405) - _191;
                    float _417 = cbPerScene._m0[18u].x * _409;
                    float _418 = cbPerScene._m0[18u].y * _410;
                    float _423 = sqrt((_417 * _417) + (_418 * _418)) + 9.9999997473787516355514526367188e-06;
                    float _428 = (_409 / _423) * _354;
                    float _429 = (_410 / _423) * _354;
                    float _430 = (((1.0 / _373) - _246) / _423) * _354;
                    float _459 = abs(float(_428 > 0.0) - _190) / (abs(_428) + 1.0000000116860974230803549289703e-07);
                    float _460 = abs(float(_429 > 0.0) - _191) / (abs(_429) + 1.0000000116860974230803549289703e-07);
                    float _462 = (abs(((_430 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _246) / (abs(_430) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _463 = isnan(_460) ? _459 : (isnan(_459) ? _460 : min(_459, _460));
                    float _464 = isnan(_462) ? _463 : (isnan(_463) ? _462 : min(_463, _462));
                    uint _467 = uint(int(isnan(cbPerScene._m0[23u].y) ? _464 : (isnan(_464) ? cbPerScene._m0[23u].y : min(_464, cbPerScene._m0[23u].y))));
                    float _241;
                    float _472;
                    float _474;
                    float _476;
                    if (int(_467) > int(0u))
                    {
                        float _469 = _430 + _246;
                        float _470 = _429 + _191;
                        float _471 = _428 + _190;
                        float _473;
                        float _475;
                        float _477;
                        float _478;
                        uint _489;
                        float _491;
                        float _493;
                        float _495;
                        float _497;
                        float _499;
                        float _501;
                        float _503;
                        uint _505;
                        float _507;
                        float _509;
                        float _511;
                        float _484 = 0.0;
                        float _485 = 0.0;
                        float _486 = 0.0;
                        float _487 = 0.0;
                        uint _488 = 0u;
                        float _490 = _246;
                        float _492 = _471;
                        float _494 = _470;
                        float _496 = _469;
                        float _498 = _190;
                        float _500 = _191;
                        float _502 = _246;
                        uint _504 = 1u;
                        float _506 = 0.0;
                        float _508 = 0.0;
                        float _510 = 0.0;
                        float _522;
                        float _529;
                        float _530;
                        float _531;
                        float _532;
                        float _533;
                        float _534;
                        uint _535;
                        float _536;
                        bool _543;
                        for (;;)
                        {
                            _522 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _492, cbSceneParam._m0[86u].y * _494), 0.0).x;
                            bool _528 = _488 == (_467 + 4294967295u);
                            _529 = _528 ? _506 : _492;
                            _530 = _528 ? _508 : _494;
                            _531 = _528 ? _510 : _496;
                            _532 = _528 ? _506 : _498;
                            _533 = _528 ? _508 : _500;
                            _534 = _528 ? _510 : _502;
                            _535 = _528 ? 1u : _504;
                            _536 = _528 ? (-1.0) : (_496 - _522);
                            _543 = (_535 != 0u) && ((_536 <= 0.0) && ((_528 ? (-1.0) : (_522 - (_490 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_17_pred;
                            float frontier_phi_17_pred_1;
                            float frontier_phi_17_pred_2;
                            uint frontier_phi_17_pred_3;
                            float frontier_phi_17_pred_4;
                            float frontier_phi_17_pred_5;
                            float frontier_phi_17_pred_6;
                            float frontier_phi_17_pred_7;
                            float frontier_phi_17_pred_8;
                            float frontier_phi_17_pred_9;
                            float frontier_phi_17_pred_10;
                            float frontier_phi_17_pred_11;
                            float frontier_phi_17_pred_12;
                            float frontier_phi_17_pred_13;
                            float frontier_phi_17_pred_14;
                            uint frontier_phi_17_pred_15;
                            if (_543)
                            {
                                uint _553 = uint(int(log2(_354) + 0.999000012874603271484375));
                                float _564;
                                float _566;
                                float _568;
                                float _570;
                                float _572;
                                float _574;
                                float _576;
                                if (int(_553) > int(0u))
                                {
                                    uint _674;
                                    float _676;
                                    float _677;
                                    float _678;
                                    float _679;
                                    float _680;
                                    float _681;
                                    float _682;
                                    _674 = 0u;
                                    _676 = _529;
                                    _677 = _530;
                                    _678 = _531;
                                    _679 = _532;
                                    _680 = _533;
                                    _681 = _534;
                                    _682 = _522;
                                    float _565;
                                    float _567;
                                    float _569;
                                    float _571;
                                    float _573;
                                    float _575;
                                    float _577;
                                    for (;;)
                                    {
                                        float _686 = (_679 + _676) * 0.5;
                                        float _687 = (_680 + _677) * 0.5;
                                        float _688 = (_681 + _678) * 0.5;
                                        vec4 _696 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _686, cbSceneParam._m0[86u].y * _687), 0.0);
                                        float _698 = _696.x;
                                        bool _700 = (_688 - _698) < 0.0;
                                        _565 = _700 ? _686 : _676;
                                        _567 = _700 ? _687 : _677;
                                        _569 = _700 ? _688 : _678;
                                        _571 = _700 ? _679 : _686;
                                        _573 = _700 ? _680 : _687;
                                        _575 = _700 ? _681 : _688;
                                        _577 = _700 ? _698 : _682;
                                        uint _675 = _674 + 1u;
                                        if (_675 == _553)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _674 = _675;
                                            _676 = _565;
                                            _677 = _567;
                                            _678 = _569;
                                            _679 = _571;
                                            _680 = _573;
                                            _681 = _575;
                                            _682 = _577;
                                        }
                                    }
                                    _564 = _565;
                                    _566 = _567;
                                    _568 = _569;
                                    _570 = _571;
                                    _572 = _573;
                                    _574 = _575;
                                    _576 = _577;
                                }
                                else
                                {
                                    _564 = _529;
                                    _566 = _530;
                                    _568 = _531;
                                    _570 = _532;
                                    _572 = _533;
                                    _574 = _534;
                                    _576 = _522;
                                }
                                float _586 = cbPerScene._m0[28u].x * ((_564 * 2.0) + (-1.0));
                                float _587 = cbPerScene._m0[28u].y * (1.0 - (_566 * 2.0));
                                float _619 = fma(_576, cbPerScene._m0[27u].w, fma(_587, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _586) + cbPerScene._m0[27u].z);
                                float _620 = fma(_576, cbPerScene._m0[24u].w, fma(_587, cbPerScene._m0[24u].y, _586 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _619;
                                float _621 = fma(_576, cbPerScene._m0[25u].w, fma(_587, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _586) + cbPerScene._m0[25u].z) / _619;
                                vec4 _630 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _620, cbSceneParam._m0[87u].w * _621), 0.0);
                                float _635 = isnan(_370) ? 1.0 : (isnan(1.0) ? _370 : min(1.0, _370));
                                float _636 = 0.5 - _620;
                                float _637 = 0.5 - _621;
                                float _638 = _636 * 2.0;
                                float _639 = _637 * 2.0;
                                float _640 = _638 * _638;
                                float _641 = _639 * _639;
                                float _878 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
                                float _889 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
                                float _650 = inversesqrt(dot(vec2(_428, _429), vec2(_428, _429)));
                                float _656 = inversesqrt(dot(vec2(_638, _639), vec2(_638, _639)));
                                float _662 = dot(vec2((_636 * (-2.0)) * _656, (_637 * (-2.0)) * _656), vec2(_650 * _428, _650 * _429));
                                float _900 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
                                float _669 = ((1.0 - (isnan(1.0) ? _889 : (isnan(_889) ? 1.0 : min(_889, 1.0)))) * (1.0 - (isnan(1.0) ? _878 : (isnan(_878) ? 1.0 : min(_878, 1.0))))) * (4.0 - ((isnan(1.0) ? _900 : (isnan(_900) ? 1.0 : min(_900, 1.0))) * 2.0));
                                float _911 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
                                float _670 = isnan(1.0) ? _911 : (isnan(_911) ? 1.0 : min(_911, 1.0));
                                float _671 = _670 * _670;
                                frontier_phi_17_pred = _510;
                                frontier_phi_17_pred_1 = _508;
                                frontier_phi_17_pred_2 = _506;
                                frontier_phi_17_pred_3 = _535;
                                frontier_phi_17_pred_4 = _574;
                                frontier_phi_17_pred_5 = _572;
                                frontier_phi_17_pred_6 = _570;
                                frontier_phi_17_pred_7 = _568;
                                frontier_phi_17_pred_8 = _566;
                                frontier_phi_17_pred_9 = _564;
                                frontier_phi_17_pred_10 = _490;
                                frontier_phi_17_pred_11 = isnan(_671) ? _635 : (isnan(_635) ? _671 : min(_635, _671));
                                frontier_phi_17_pred_12 = _630.z;
                                frontier_phi_17_pred_13 = _630.y;
                                frontier_phi_17_pred_14 = _630.x;
                                frontier_phi_17_pred_15 = _467;
                            }
                            else
                            {
                                bool _555 = _536 > 0.0;
                                frontier_phi_17_pred = _555 ? _531 : _510;
                                frontier_phi_17_pred_1 = _555 ? _530 : _508;
                                frontier_phi_17_pred_2 = _555 ? _529 : _506;
                                frontier_phi_17_pred_3 = uint(_555);
                                frontier_phi_17_pred_4 = _531;
                                frontier_phi_17_pred_5 = _530;
                                frontier_phi_17_pred_6 = _529;
                                frontier_phi_17_pred_7 = _531 + _430;
                                frontier_phi_17_pred_8 = _530 + _429;
                                frontier_phi_17_pred_9 = _529 + _428;
                                frontier_phi_17_pred_10 = _522;
                                frontier_phi_17_pred_11 = _487;
                                frontier_phi_17_pred_12 = _486;
                                frontier_phi_17_pred_13 = _485;
                                frontier_phi_17_pred_14 = _484;
                                frontier_phi_17_pred_15 = _488 + 1u;
                            }
                            _511 = frontier_phi_17_pred;
                            _509 = frontier_phi_17_pred_1;
                            _507 = frontier_phi_17_pred_2;
                            _505 = frontier_phi_17_pred_3;
                            _503 = frontier_phi_17_pred_4;
                            _501 = frontier_phi_17_pred_5;
                            _499 = frontier_phi_17_pred_6;
                            _497 = frontier_phi_17_pred_7;
                            _495 = frontier_phi_17_pred_8;
                            _493 = frontier_phi_17_pred_9;
                            _491 = frontier_phi_17_pred_10;
                            _478 = frontier_phi_17_pred_11;
                            _477 = frontier_phi_17_pred_12;
                            _475 = frontier_phi_17_pred_13;
                            _473 = frontier_phi_17_pred_14;
                            _489 = frontier_phi_17_pred_15;
                            if (int(_489) < int(_467))
                            {
                                _484 = _473;
                                _485 = _475;
                                _486 = _477;
                                _487 = _478;
                                _488 = _489;
                                _490 = _491;
                                _492 = _493;
                                _494 = _495;
                                _496 = _497;
                                _498 = _499;
                                _500 = _501;
                                _502 = _503;
                                _504 = _505;
                                _506 = _507;
                                _508 = _509;
                                _510 = _511;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _472 = _473;
                        _474 = _475;
                        _476 = _477;
                        _241 = _478;
                    }
                    else
                    {
                        _472 = 0.0;
                        _474 = 0.0;
                        _476 = 0.0;
                        _241 = 0.0;
                    }
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2;
                    float frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3;
                    if ((isnan(_472) || isnan(_474)) || isnan(_476))
                    {
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1 = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2 = 0.0;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder = (_241 * _472) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1 = _241;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2 = (_241 * _476) * cbPerScene._m0[28u].w;
                        frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3 = (_241 * _474) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_3_4_ladder_6_ladder_7_ladder = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_1 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_1;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_2 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_2;
                    frontier_phi_3_4_ladder_6_ladder_7_ladder_3 = frontier_phi_3_4_ladder_6_ladder_7_ladder_10_ladder_3;
                }
                frontier_phi_3_4_ladder_6_ladder = frontier_phi_3_4_ladder_6_ladder_7_ladder;
                frontier_phi_3_4_ladder_6_ladder_1 = frontier_phi_3_4_ladder_6_ladder_7_ladder_1;
                frontier_phi_3_4_ladder_6_ladder_2 = frontier_phi_3_4_ladder_6_ladder_7_ladder_2;
                frontier_phi_3_4_ladder_6_ladder_3 = frontier_phi_3_4_ladder_6_ladder_7_ladder_3;
            }
            frontier_phi_3_4_ladder = frontier_phi_3_4_ladder_6_ladder;
            frontier_phi_3_4_ladder_1 = frontier_phi_3_4_ladder_6_ladder_1;
            frontier_phi_3_4_ladder_2 = frontier_phi_3_4_ladder_6_ladder_2;
            frontier_phi_3_4_ladder_3 = frontier_phi_3_4_ladder_6_ladder_3;
        }
        else
        {
            frontier_phi_3_4_ladder = 0.0;
            frontier_phi_3_4_ladder_1 = 0.0;
            frontier_phi_3_4_ladder_2 = 0.0;
            frontier_phi_3_4_ladder_3 = 0.0;
        }
        _234 = frontier_phi_3_4_ladder;
        _236 = frontier_phi_3_4_ladder_3;
        _238 = frontier_phi_3_4_ladder_2;
        _240 = frontier_phi_3_4_ladder_1;
    }
    SV_Target.x = _234;
    SV_Target.y = _236;
    SV_Target.z = _238;
    SV_Target.w = _240;
    discard_exit();
}


