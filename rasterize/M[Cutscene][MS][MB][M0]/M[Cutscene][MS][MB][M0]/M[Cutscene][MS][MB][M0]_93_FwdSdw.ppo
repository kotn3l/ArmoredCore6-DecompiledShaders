#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[33];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1283;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _357 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[28u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[28u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _359 = _357.x;
    float _372 = dot(vec4(_359, _357.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_359 - _372) * cbMtdParam._m0[24u].x) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3923 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _397 = (_390 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _398 = (_390 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _399 = (_390 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _417 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _442 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _444 = _442.x;
    float _445 = _442.y;
    float _450 = cbMtdParam._m0[25u].w * _442.z;
    float _3934 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    vec4 _464 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    float _472 = cbMtdParam._m0[26u].x * _464.z;
    float _3945 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _482 = (((isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) - _451) * _390) + _451;
    float _485 = ((((_464.x - _444) * _390) + _444) * 2.0) + (-1.0);
    float _486 = ((((_464.y - _445) * _390) + _445) * 2.0) + (-1.0);
    float _487 = dot(vec2(_485, _486), vec2(_485, _486));
    float _3956 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _492 = sqrt(1.0 - (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))));
    vec4 _509 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _516 = cbMtdParam._m0[25u].z * _509.z;
    float _3967 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    vec4 _537 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _539 = _537.x;
    float _540 = 1.0 - _539;
    float _546 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _549 = ((isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : min(_546, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _558 = (_549 - ((((((_539 - _540) * cbMtdParam._m0[24u].z) + _540) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _549))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3988 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _566 = (_559 * (cbMtdParam._m0[17u].x - _397)) + _397;
    float _567 = (_559 * (cbMtdParam._m0[17u].y - _398)) + _398;
    float _568 = (_559 * (cbMtdParam._m0[17u].z - _399)) + _399;
    vec4 _580 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _582 = _580.x;
    float _583 = 1.0 - _582;
    float _610 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_582 - _583) * cbMtdParam._m0[24u].w) + _583) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3999 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _611 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _619 = ((((cbMtdParam._m0[10u].x - _566) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _611) + _566;
    float _620 = ((((cbMtdParam._m0[10u].y - _567) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _611) + _567;
    float _621 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _568)) * _611) + _568;
    float _626 = (((_417.z - _482) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _482;
    float _630 = (((isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) - _626) * cbMtdParam._m0[19u].w) + _626;
    vec4 _644 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _651 = (_644.x * 2.0) + (-1.0);
    float _652 = (_644.y * 2.0) + (-1.0);
    float _653 = dot(vec2(_651, _652), vec2(_651, _652));
    float _4010 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _661 = (_559 * (_644.z - _630)) + _630;
    float _664 = ((cbMtdParam._m0[23u].y - _661) * _611) + _661;
    float _668 = ((1.0 - _664) * cbMtdParam._m0[26u].y) + _664;
    float _4021 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _669 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    vec4 _691 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[28u].w * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[29u].x * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _697 = (_691.x * 2.0) + (-1.0);
    float _698 = (_691.y * 2.0) + (-1.0);
    float _699 = dot(vec2(_697, _698), vec2(_697, _698));
    float _4032 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _713 = (_485 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_417.x * 2.0) + (-1.0)))) + (((_509.x * 2.0) + (-1.0)) * cbMtdParam._m0[27u].x);
    float _714 = (_486 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_417.y * 2.0) + (-1.0)))) + (((_509.y * 2.0) + (-1.0)) * cbMtdParam._m0[27u].x);
    float _726 = (((_651 - _713) + (cbMtdParam._m0[21u].x * _713)) * _559) + _713;
    float _727 = (((_652 - _714) + (cbMtdParam._m0[21u].x * _714)) * _559) + _714;
    float _728 = (_559 * (sqrt(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) - _492)) + _492;
    float _739 = (((_697 - _726) + (_726 * cbMtdParam._m0[22u].z)) * _611) + _726;
    float _740 = (((_698 - _727) + (_727 * cbMtdParam._m0[22u].z)) * _611) + _727;
    float _741 = ((sqrt(1.0 - (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) - _728) * _611) + _728;
    float _743 = cbMtdParam._m0[22u].x + _509.w;
    float _748 = fma(_741, _242 * NORMAL.x, fma(_740, _249 * TANGENT.x, (_235 * _227) * _739));
    float _751 = fma(_741, _242 * NORMAL.y, fma(_740, _249 * TANGENT.y, (_235 * _228) * _739));
    float _754 = fma(_741, _242 * NORMAL.z, fma(_740, _249 * TANGENT.z, (_235 * _229) * _739));
    float _758 = inversesqrt(dot(vec3(_748, _751, _754), vec3(_748, _751, _754)));
    float _759 = _758 * _748;
    float _760 = _758 * _751;
    float _761 = _758 * _754;
    float _4043 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _762 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _4054 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4065 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _4076 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _4087 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _780 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _831 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _821);
    float _832 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _821);
    float _833 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _821);
    float _837 = inversesqrt(dot(vec3(_831, _832, _833), vec3(_831, _832, _833)));
    float _838 = _831 * _837;
    float _839 = _832 * _837;
    float _840 = _833 * _837;
    float _846 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _847 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _865 = fma(_761, cbSceneParam._m0[5u].z, fma(_760, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _759));
    float _868 = fma(_761, cbSceneParam._m0[6u].z, fma(_760, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _759));
    float _871 = fma(_761, cbSceneParam._m0[7u].z, fma(_760, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _759));
    uint _885 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _891 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) * cbInstanceData._m0[_885].x;
    float _892 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) * cbInstanceData._m0[_885].y;
    float _893 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * cbInstanceData._m0[_885].z;
    float _4098 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _4109 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _4120 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _896 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    vec4 _905 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _846, cbSceneParam._m0[86u].y * _847));
    float _909 = ((isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * TEXCOORD_5.w) * _905.x;
    float _910 = dot(vec3(_759, _760, _761), vec3(_838, _839, _840));
    float _913 = _910 * 2.0;
    float _917 = (_913 * _759) - _838;
    float _918 = (_913 * _760) - _839;
    float _919 = (_913 * _761) - _840;
    float _926 = abs(dot(vec3(_838, _839, _840), vec3(_759, _760, _761)));
    float _4131 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _928 = sqrt(_762);
    float _941 = exp2((_928 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_928 * 3.0));
    float _973 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _977 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1282;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1007 = fma(_981, cbModelParam._m0[26u].z, fma(_977, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _973));
        float _1011 = fma(_981, cbModelParam._m0[27u].z, fma(_977, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _973));
        float _1015 = fma(_981, cbModelParam._m0[28u].z, fma(_977, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _973));
        float _1040 = _973 + _759;
        float _1041 = _977 + _760;
        float _1042 = _981 + _761;
        float _1052 = fma(_1042, cbModelParam._m0[26u].z, fma(_1041, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1040)) - _1007;
        float _1053 = fma(_1042, cbModelParam._m0[27u].z, fma(_1041, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1040)) - _1011;
        float _1054 = fma(_1042, cbModelParam._m0[28u].z, fma(_1041, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1040)) - _1015;
        float _1058 = inversesqrt(dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054)));
        float _1071 = ((_1058 * _1052) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1007 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1058 * _1053) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1011 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1058 * _1054) / cbModelParam._m0[34u].z) + ((((((_1015 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        float _1110 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1076.x + (-0.5));
        float _1112 = _1110 * (_1076.y + (-0.5));
        float _1113 = _1110 * (_1076.z + (-0.5));
        float _1120 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1083.x + (-0.5));
        float _1122 = _1120 * (_1083.y + (-0.5));
        float _1123 = _1120 * (_1083.z + (-0.5));
        float _1130 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1090.x + (-0.5));
        float _1132 = _1130 * (_1090.y + (-0.5));
        float _1133 = _1130 * (_1090.z + (-0.5));
        float _1140 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1097.x + (-0.5));
        float _1142 = _1140 * (_1097.y + (-0.5));
        float _1143 = _1140 * (_1097.z + (-0.5));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = _1111 * 0.5;
        float _1148 = _1121 * 0.5;
        float _1149 = _1131 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1164 = (dot(vec3(_759, _760, _761), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1174 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _4179 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1176 + 1.0))) + _1181) * _1144;
        float _1191 = _1112 * 0.5;
        float _1192 = _1122 * 0.5;
        float _1193 = _1132 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_759, _760, _761), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _4212 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1218 + 1.0))) + _1223) * _1145;
        float _1233 = _1113 * 0.5;
        float _1234 = _1123 * 0.5;
        float _1235 = _1133 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_759, _760, _761), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _4245 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1260 + 1.0))) + _1265) * _1146;
        _1282 = _1113;
        _1284 = _1112;
        _1285 = _1111;
        _1286 = _1123;
        _1287 = _1122;
        _1288 = _1121;
        _1289 = _1133;
        _1290 = _1132;
        _1291 = _1131;
        _1292 = _1146;
        _1293 = _1145;
        _1294 = _1144;
        _1295 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
    }
    else
    {
        _1282 = _1283;
        _1284 = _1283;
        _1285 = _1283;
        _1286 = _1283;
        _1287 = _1283;
        _1288 = _1283;
        _1289 = _1283;
        _1290 = _1283;
        _1291 = _1283;
        _1292 = _1283;
        _1293 = _1283;
        _1294 = _1283;
        _1295 = 0.0;
        _1296 = 0.0;
        _1297 = 0.0;
    }
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1321 = fma(_981, cbModelParam._m0[30u].z, fma(_977, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _973));
        float _1325 = fma(_981, cbModelParam._m0[31u].z, fma(_977, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _973));
        float _1329 = fma(_981, cbModelParam._m0[32u].z, fma(_977, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _973));
        float _1352 = _973 + _759;
        float _1353 = _977 + _760;
        float _1354 = _981 + _761;
        float _1364 = fma(_1354, cbModelParam._m0[30u].z, fma(_1353, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1352)) - _1321;
        float _1365 = fma(_1354, cbModelParam._m0[31u].z, fma(_1353, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1352)) - _1325;
        float _1366 = fma(_1354, cbModelParam._m0[32u].z, fma(_1353, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1352)) - _1329;
        float _1370 = inversesqrt(dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366)));
        float _1383 = ((_1370 * _1364) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1321 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1384 = ((_1370 * _1365) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1325 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1385 = ((_1370 * _1366) / cbModelParam._m0[35u].z) + ((((((_1329 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1383, _1384, _1385), 0.0);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1383, _1384, _1385), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1383, _1384, _1385), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1383, _1384, _1385), 0.0);
        float _1420 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1387.x + (-0.5));
        float _1422 = _1420 * (_1387.y + (-0.5));
        float _1423 = _1420 * (_1387.z + (-0.5));
        float _1430 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1394.x + (-0.5));
        float _1432 = _1430 * (_1394.y + (-0.5));
        float _1433 = _1430 * (_1394.z + (-0.5));
        float _1440 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1401.x + (-0.5));
        float _1442 = _1440 * (_1401.y + (-0.5));
        float _1443 = _1440 * (_1401.z + (-0.5));
        float _1450 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1408.x + (-0.5));
        float _1452 = _1450 * (_1408.y + (-0.5));
        float _1453 = _1450 * (_1408.z + (-0.5));
        float _1454 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = _1421 * 0.5;
        float _1458 = _1431 * 0.5;
        float _1459 = _1441 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_759, _760, _761), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1454 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4308 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1484 + 1.0))) + _1489) * _1454;
        float _1499 = _1422 * 0.5;
        float _1500 = _1432 * 0.5;
        float _1501 = _1442 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_759, _760, _761), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _4341 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1526 + 1.0))) + _1531) * _1455;
        float _1541 = _1423 * 0.5;
        float _1542 = _1433 * 0.5;
        float _1543 = _1443 * 0.5;
        float _1544 = dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543));
        float _1549 = (_1544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1544);
        float _1557 = (dot(vec3(_759, _760, _761), vec3(_1549 * _1541, _1549 * _1542, _1549 * _1543)) + 1.0) * 0.5;
        float _4352 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1566 = sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _4363 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _4374 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_1568 + 1.0))) + _1573) * _1456;
        _1590 = _1423;
        _1591 = _1422;
        _1592 = _1421;
        _1593 = _1433;
        _1594 = _1432;
        _1595 = _1431;
        _1596 = _1443;
        _1597 = _1442;
        _1598 = _1441;
        _1599 = _1456;
        _1600 = _1455;
        _1601 = _1454;
        _1602 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
        _1603 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
        _1604 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
    }
    else
    {
        _1590 = _1283;
        _1591 = _1283;
        _1592 = _1283;
        _1593 = _1283;
        _1594 = _1283;
        _1595 = _1283;
        _1596 = _1283;
        _1597 = _1283;
        _1598 = _1283;
        _1599 = _1283;
        _1600 = _1283;
        _1601 = _1283;
        _1602 = 0.0;
        _1603 = 0.0;
        _1604 = 0.0;
    }
    float _1614 = (cbModelParam._m0[1u].x * (_1602 - _1295)) + _1295;
    float _1615 = (cbModelParam._m0[1u].x * (_1603 - _1296)) + _1296;
    float _1616 = (cbModelParam._m0[1u].x * (_1604 - _1297)) + _1297;
    float _1637 = fma(_1616, cbSceneParam._m0[89u].z, fma(_1615, cbSceneParam._m0[89u].y, _1614 * cbSceneParam._m0[89u].x));
    float _1640 = fma(_1616, cbSceneParam._m0[90u].z, fma(_1615, cbSceneParam._m0[90u].y, _1614 * cbSceneParam._m0[90u].x));
    float _1643 = fma(_1616, cbSceneParam._m0[91u].z, fma(_1615, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1614));
    float _1658 = _917 * 0.5;
    float _1659 = _918 * 0.5;
    float _1660 = _919 * 0.5;
    float _1661 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1592, _1595, _1598, _1601));
    float _1664 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1591, _1594, _1597, _1600));
    float _1667 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1590, _1593, _1596, _1599));
    float _1701;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1674 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1282, _1286, _1289, _1292));
        float _1678 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1284, _1287, _1290, _1293));
        float _1682 = dot(vec4(_1658, _1659, _1660, 1.0), vec4(_1285, _1288, _1291, _1294));
        float _1689 = dot(vec4(cbModelParam._m0[39u]), vec4(_1658, _1659, _1660, 1.0));
        _1701 = dot(vec3(isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1689) ? 0.0 : (isnan(0.0) ? _1689 : max(0.0, _1689))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1701 = 1.0;
    }
    float _1712;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1703 = dot(vec4(cbModelParam._m0[40u]), vec4(_1658, _1659, _1660, 1.0));
        _1712 = dot(vec3(isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1703) ? 0.0 : (isnan(0.0) ? _1703 : max(0.0, _1703))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1712 = 1.0;
    }
    float _1716 = (_1712 * cbModelParam._m0[1u].x) + (_1701 * (1.0 - cbModelParam._m0[1u].x));
    float _1726 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _762);
    float _1727 = isnan(_1726) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1726 : min(cbModelParam._m0[25u].z, _1726));
    float _1808;
    float _1810;
    float _1812;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1775 = fma(_981, cbModelParam._m0[13u].z, fma(_977, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _973)) + cbModelParam._m0[13u].w;
        float _1779 = fma(_981, cbModelParam._m0[14u].z, fma(_977, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _973)) + cbModelParam._m0[14u].w;
        float _1783 = fma(_981, cbModelParam._m0[15u].z, fma(_977, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _973)) + cbModelParam._m0[15u].w;
        float _1786 = fma(_919, cbModelParam._m0[13u].z, fma(_918, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _917));
        float _1789 = fma(_919, cbModelParam._m0[14u].z, fma(_918, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _917));
        float _1792 = fma(_919, cbModelParam._m0[15u].z, fma(_918, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _917));
        float _1820;
        if (_1786 > 0.0)
        {
            _1820 = abs((1.0 - _1775) / _1786);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1775 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1820 = frontier_phi_14_12_ladder;
        }
        float _2047;
        if (_1789 > 0.0)
        {
            _2047 = abs((1.0 - _1779) / _1789);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1779 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2047 = frontier_phi_23_19_ladder;
        }
        float _2344;
        if (_1792 > 0.0)
        {
            _2344 = abs((1.0 - _1783) / _1792);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1783 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2344 = frontier_phi_35_30_ladder;
        }
        float _2346 = isnan(_2047) ? _1820 : (isnan(_1820) ? _2047 : min(_1820, _2047));
        float _2347 = isnan(_2344) ? _2346 : (isnan(_2346) ? _2344 : min(_2346, _2344));
        float _2351 = (_2347 * _1786) + _1775;
        float _2352 = (_2347 * _1789) + _1779;
        float _2353 = (_2347 * _1792) + _1783;
        float _2354 = _2347 * 9.9999997473787516355514526367188e-05;
        float _2356 = (-1.0) - _2354;
        float _2358 = _2354 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2353 > _2358) || ((_2353 < _2356) || ((_2352 > _2358) || ((_2352 < _2356) || ((_2351 < _2356) || (_2351 > _2358))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2498 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2353, cbModelParam._m0[9u].z, fma(_2352, cbModelParam._m0[9u].y, _2351 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2353, cbModelParam._m0[10u].z, fma(_2352, cbModelParam._m0[10u].y, _2351 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2353, cbModelParam._m0[11u].z, fma(_2352, cbModelParam._m0[11u].y, _2351 * cbModelParam._m0[11u].x))), _1727);
            frontier_phi_13_35_ladder = _2498.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2498.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2498.x * cbModelParam._m0[1u].y;
        }
        _1808 = frontier_phi_13_35_ladder_2;
        _1810 = frontier_phi_13_35_ladder_1;
        _1812 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1796 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_917, _918, _919), _1727);
        _1808 = _1796.x * cbModelParam._m0[1u].y;
        _1810 = _1796.y * cbModelParam._m0[1u].y;
        _1812 = _1796.z * cbModelParam._m0[1u].y;
    }
    float _1816 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _762);
    float _1817 = isnan(_1816) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1816 : min(cbModelParam._m0[25u].w, _1816));
    float _1907;
    float _1909;
    float _1911;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1871 = fma(_981, cbModelParam._m0[21u].z, fma(_977, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _973)) + cbModelParam._m0[21u].w;
        float _1875 = fma(_981, cbModelParam._m0[22u].z, fma(_977, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _973)) + cbModelParam._m0[22u].w;
        float _1879 = fma(_981, cbModelParam._m0[23u].z, fma(_977, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _973)) + cbModelParam._m0[23u].w;
        float _1882 = fma(_919, cbModelParam._m0[21u].z, fma(_918, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _917));
        float _1885 = fma(_919, cbModelParam._m0[22u].z, fma(_918, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _917));
        float _1888 = fma(_919, cbModelParam._m0[23u].z, fma(_918, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _917));
        float _2052;
        if (_1882 > 0.0)
        {
            _2052 = abs((1.0 - _1871) / _1882);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1871 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2052 = frontier_phi_25_21_ladder;
        }
        float _2371;
        if (_1885 > 0.0)
        {
            _2371 = abs((1.0 - _1875) / _1885);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1875 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2371 = frontier_phi_37_32_ladder;
        }
        float _2698;
        if (_1888 > 0.0)
        {
            _2698 = abs((1.0 - _1879) / _1888);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1879 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2698 = frontier_phi_47_44_ladder;
        }
        float _2700 = isnan(_2371) ? _2052 : (isnan(_2052) ? _2371 : min(_2052, _2371));
        float _2701 = isnan(_2698) ? _2700 : (isnan(_2700) ? _2698 : min(_2700, _2698));
        float _2705 = (_2701 * _1882) + _1871;
        float _2706 = (_2701 * _1885) + _1875;
        float _2707 = (_2701 * _1888) + _1879;
        float _2708 = _2701 * 9.9999997473787516355514526367188e-05;
        float _2709 = (-1.0) - _2708;
        float _2711 = _2708 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2707 > _2711) || ((_2707 < _2709) || ((_2706 > _2711) || ((_2706 < _2709) || ((_2705 < _2709) || (_2705 > _2711))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2825 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2707, cbModelParam._m0[17u].z, fma(_2706, cbModelParam._m0[17u].y, _2705 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2707, cbModelParam._m0[18u].z, fma(_2706, cbModelParam._m0[18u].y, _2705 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2707, cbModelParam._m0[19u].z, fma(_2706, cbModelParam._m0[19u].y, _2705 * cbModelParam._m0[19u].x))), _1817);
            frontier_phi_22_47_ladder = _2825.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2825.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2825.x * cbModelParam._m0[1u].z;
        }
        _1907 = frontier_phi_22_47_ladder_2;
        _1909 = frontier_phi_22_47_ladder_1;
        _1911 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1891 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_917, _918, _919), _1817);
        _1907 = _1891.x * cbModelParam._m0[1u].z;
        _1909 = _1891.y * cbModelParam._m0[1u].z;
        _1911 = _1891.z * cbModelParam._m0[1u].z;
    }
    float _1923 = ((((1.0 - _941) * ((_928 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_941 * _928)) * _909;
    float _1924 = _1923 * ((cbModelParam._m0[1u].w * (_1907 - _1808)) + _1808);
    float _1925 = _1923 * ((cbModelParam._m0[1u].w * (_1909 - _1810)) + _1810);
    float _1926 = _1923 * ((cbModelParam._m0[1u].w * (_1911 - _1812)) + _1812);
    float _1929 = fma(_1926, cbSceneParam._m0[89u].z, fma(_1925, cbSceneParam._m0[89u].y, _1924 * cbSceneParam._m0[89u].x));
    float _1932 = fma(_1926, cbSceneParam._m0[90u].z, fma(_1925, cbSceneParam._m0[90u].y, _1924 * cbSceneParam._m0[90u].x));
    float _1935 = fma(_1926, cbSceneParam._m0[91u].z, fma(_1925, cbSceneParam._m0[91u].y, _1924 * cbSceneParam._m0[91u].x));
    float _1946 = _846 / cbSceneParam._m0[86u].x;
    float _1947 = _847 / cbSceneParam._m0[86u].y;
    float _1954 = (cbSceneParam._m0[88u].y * (1.0 - cbMtdParam._m0[25u].y)) + cbSceneParam._m0[88u].z;
    float _4500 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1956 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * 5.0;
    float _1961 = ((10.0 / (_780 + 10.0)) * cbMtdParam._m0[25u].x) * dot(vec3(_759, _760, _761), vec3(1.0, 0.0, 0.0));
    vec4 _1971 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1961 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1961 + _1946) * cbSceneParam._m0[86u].x, _847), _1956).w) + _1946) * cbSceneParam._m0[86u].x, _847), _1956);
    float _1977 = isnan(0.5) ? _1971.w : (isnan(_1971.w) ? 0.5 : max(_1971.w, 0.5));
    float _1992 = 1.0 - (_1971.w / _1977);
    float _2026 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2030 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2034 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2038 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2039 = _2026 / _2038;
    float _2040 = _2030 / _2038;
    float _2041 = _2034 / _2038;
    float _2187;
    float _2188;
    float _2189;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2068 = ((uint(_2041 > cbSceneParam._m0[59u].y) + uint(_2041 > cbSceneParam._m0[59u].x)) + uint(_2041 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2069 = _2068 + 43u;
        uint _2077 = _2068 + 44u;
        uint _2085 = _2068 + 45u;
        uint _2093 = _2068 + 46u;
        float _2104 = fma(_2038, cbSceneParam._m0[_2069].w, fma(_2034, cbSceneParam._m0[_2069].z, fma(_2030, cbSceneParam._m0[_2069].y, _2026 * cbSceneParam._m0[_2069].x)));
        float _2108 = fma(_2038, cbSceneParam._m0[_2077].w, fma(_2034, cbSceneParam._m0[_2077].z, fma(_2030, cbSceneParam._m0[_2077].y, _2026 * cbSceneParam._m0[_2077].x)));
        float _2116 = fma(_2038, cbSceneParam._m0[_2093].w, fma(_2034, cbSceneParam._m0[_2093].z, fma(_2030, cbSceneParam._m0[_2093].y, _2026 * cbSceneParam._m0[_2093].x)));
        float _2120 = cbSceneParam._m0[33u].z * _2116;
        float _2122 = cbSceneParam._m0[33u].w * _2116;
        float _2125 = fma(_2038, cbSceneParam._m0[_2085].w, fma(_2034, cbSceneParam._m0[_2085].z, fma(_2030, cbSceneParam._m0[_2085].y, _2026 * cbSceneParam._m0[_2085].x))) / _2116;
        float _2173 = (cbSceneParam._m0[33u].x - sqrt(((_2040 * _2040) + (_2039 * _2039)) + (_2041 * _2041))) * cbSceneParam._m0[33u].y;
        float _4516 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2180 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2120 + _2104) / _2116, (_2122 + _2108) / _2116), _2125), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2122 + _2104) / _2116, (_2108 - _2120) / _2116), _2125), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2104 - _2120) / _2116, (_2108 - _2122) / _2116), _2125), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2104 - _2122) / _2116, (_2120 + _2108) / _2116), _2125), 0.0)).x), vec4(0.25)));
        _2187 = 1.0 - (_2180 * cbSceneParam._m0[34u].x);
        _2188 = 1.0 - (_2180 * cbSceneParam._m0[34u].y);
        _2189 = 1.0 - (_2180 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2187 = 1.0;
        _2188 = 1.0;
        _2189 = 1.0;
    }
    float _2253;
    float _2255;
    float _2257;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2241 = fma(_2038, cbSceneParam._m0[63u].w, fma(_2034, cbSceneParam._m0[63u].z, fma(_2030, cbSceneParam._m0[63u].y, _2026 * cbSceneParam._m0[63u].x)));
        float _2242 = fma(_2038, cbSceneParam._m0[60u].w, fma(_2034, cbSceneParam._m0[60u].z, fma(_2030, cbSceneParam._m0[60u].y, _2026 * cbSceneParam._m0[60u].x))) / _2241;
        float _2243 = fma(_2038, cbSceneParam._m0[61u].w, fma(_2034, cbSceneParam._m0[61u].z, fma(_2030, cbSceneParam._m0[61u].y, _2026 * cbSceneParam._m0[61u].x))) / _2241;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2242 >= cbSceneParam._m0[64u].x) && (_2243 >= cbSceneParam._m0[64u].y)) && (_2242 <= cbSceneParam._m0[64u].z)) && (_2243 <= cbSceneParam._m0[64u].w))
        {
            float _2384 = fma(_2038, cbSceneParam._m0[62u].w, fma(_2034, cbSceneParam._m0[62u].z, fma(_2030, cbSceneParam._m0[62u].y, _2026 * cbSceneParam._m0[62u].x))) / _2241;
            float _2388 = isnan(cbSceneParam._m0[41u].w) ? _2384 : (isnan(_2384) ? cbSceneParam._m0[41u].w : max(_2384, cbSceneParam._m0[41u].w));
            float _2431 = (cbSceneParam._m0[33u].x - sqrt(((_2040 * _2040) + (_2039 * _2039)) + (_2041 * _2041))) * cbSceneParam._m0[33u].y;
            float _4532 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
            float _2438 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2242, cbSceneParam._m0[33u].w + _2243), _2388), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2242, _2243 - cbSceneParam._m0[33u].z), _2388), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2242 - cbSceneParam._m0[33u].z, _2243 - cbSceneParam._m0[33u].w), _2388), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2242 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2243), _2388), 0.0)).x), vec4(0.25)));
            float _2442 = 1.0 - (_2438 * cbSceneParam._m0[34u].x);
            float _2443 = 1.0 - (_2438 * cbSceneParam._m0[34u].y);
            float _2444 = 1.0 - (_2438 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2444) ? _2189 : (isnan(_2189) ? _2444 : min(_2189, _2444));
            frontier_phi_34_33_ladder_1 = isnan(_2443) ? _2188 : (isnan(_2188) ? _2443 : min(_2188, _2443));
            frontier_phi_34_33_ladder_2 = isnan(_2442) ? _2187 : (isnan(_2187) ? _2442 : min(_2187, _2442));
        }
        else
        {
            frontier_phi_34_33_ladder = _2189;
            frontier_phi_34_33_ladder_1 = _2188;
            frontier_phi_34_33_ladder_2 = _2187;
        }
        _2253 = frontier_phi_34_33_ladder_2;
        _2255 = frontier_phi_34_33_ladder_1;
        _2257 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2253 = _2187;
        _2255 = _2188;
        _2257 = _2189;
    }
    float _4558 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2259 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _4569 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2260 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _4580 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2261 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    uvec4 _2265 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2267 = _2265.x * 14u;
    uint _2268 = _2267 + 13u;
    float _2275 = _909 + (-1.0);
    float _2280 = (cbLight._m0[_2268].x * _2275) + 1.0;
    float _2281 = (cbLight._m0[_2268].y * _2275) + 1.0;
    float _2282 = (cbLight._m0[_2268].z * _2275) + 1.0;
    float _2283 = (cbLight._m0[_2268].w * _2275) + 1.0;
    uint _2284 = _2267 + 5u;
    float _2290 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
    uint _2294 = _2267 + 4u;
    float _2303 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
    uint _2307 = _2267 | 1u;
    float _2318 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_759, _760, _761));
    float _2321 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_759, _760, _761));
    float _4601 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _4612 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2326 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * 0.3183098733425140380859375;
    float _2328 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * 0.3183098733425140380859375;
    float _2335 = ((cbLight._m0[_2284].x * _2290) * _2328) + (((cbLight._m0[_2294].x * _2259) * _2303) * _2326);
    float _2336 = ((_2290 * cbLight._m0[_2284].y) * _2328) + (((cbLight._m0[_2294].y * _2260) * _2303) * _2326);
    float _2337 = ((_2290 * cbLight._m0[_2284].z) * _2328) + (((cbLight._m0[_2294].z * _2261) * _2303) * _2326);
    uvec4 _2341 = floatBitsToUint(cbLight._m0[_2267 + 12u]);
    bool _2343 = _2341.x == 0u;
    float _2445;
    float _2447;
    float _2449;
    if (_2343)
    {
        _2445 = _2335;
        _2447 = _2336;
        _2449 = _2337;
    }
    else
    {
        uint _2453 = _2267 + 6u;
        float _2469 = (dot(vec3(cbLight._m0[_2267 + 2u].xyz), vec3(_759, _760, _761)) * 0.5) + 0.5;
        float _2470 = _2469 * _2469;
        float _4623 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2471 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _2472 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
        _2445 = (((cbLight._m0[_2453].x * 0.3183098733425140380859375) * _2471) * _2472) + _2335;
        _2447 = (((cbLight._m0[_2453].y * 0.3183098733425140380859375) * _2471) * _2472) + _2336;
        _2449 = (((cbLight._m0[_2453].z * 0.3183098733425140380859375) * _2471) * _2472) + _2337;
    }
    bool _2452 = _2341.y == 0u;
    float _2507;
    float _2509;
    float _2511;
    if (_2452)
    {
        _2507 = _2445;
        _2509 = _2447;
        _2511 = _2449;
    }
    else
    {
        uint _2669 = _2267 + 7u;
        float _2685 = (dot(vec3(cbLight._m0[_2267 + 3u].xyz), vec3(_759, _760, _761)) * 0.5) + 0.5;
        float _2686 = _2685 * _2685;
        float _4639 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2687 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2688 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
        _2507 = (((cbLight._m0[_2669].x * 0.3183098733425140380859375) * _2687) * _2688) + _2445;
        _2509 = (((cbLight._m0[_2669].y * 0.3183098733425140380859375) * _2687) * _2688) + _2447;
        _2511 = (((cbLight._m0[_2669].z * 0.3183098733425140380859375) * _2687) * _2688) + _2449;
    }
    uint _2514 = _2267 + 8u;
    float _2527 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2267].w)) * _762) * 0.949999988079071044921875);
    float _2528 = _2527 * _2527;
    float _2529 = cbLight._m0[_2267].x + _838;
    float _2530 = cbLight._m0[_2267].y + _839;
    float _2531 = cbLight._m0[_2267].z + _840;
    float _2535 = inversesqrt(dot(vec3(_2529, _2530, _2531), vec3(_2529, _2530, _2531)));
    float _2536 = _2535 * _2529;
    float _2537 = _2535 * _2530;
    float _2538 = _2535 * _2531;
    float _2539 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2267].xyz));
    float _4655 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2542 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
    float _4666 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _2543 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
    float _2544 = dot(vec3(_759, _760, _761), vec3(_2536, _2537, _2538));
    float _4677 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2547 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
    float _2548 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2536, _2537, _2538));
    float _4688 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2552 = _2528 * _2528;
    float _2556 = ((_2547 * _2547) * (_2552 + (-1.0))) + 1.0;
    float _2567 = (exp2(log2(1.0 - (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2568 = 1.0 - _2528;
    float _2579 = (0.5 / (((_2543 * ((_2542 * _2568) + _2528)) + 9.9999999392252902907785028219223e-09) + (((_2543 * _2568) + _2528) * _2542))) * _2542;
    float _4699 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2581 = (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * (_2552 / ((_2556 * _2556) * 3.141590118408203125));
    uint _2595 = _2267 + 9u;
    float _2606 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2307].w)) * _762) * 0.949999988079071044921875);
    float _2607 = _2606 * _2606;
    float _2608 = cbLight._m0[_2307].x + _838;
    float _2609 = cbLight._m0[_2307].y + _839;
    float _2610 = cbLight._m0[_2307].z + _840;
    float _2614 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
    float _2615 = _2614 * _2608;
    float _2616 = _2614 * _2609;
    float _2617 = _2614 * _2610;
    float _2618 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2307].xyz));
    float _4710 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2621 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
    float _2622 = dot(vec3(_759, _760, _761), vec3(_2615, _2616, _2617));
    float _4721 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2625 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _2626 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_2615, _2616, _2617));
    float _4732 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2630 = _2607 * _2607;
    float _2634 = ((_2625 * _2625) * (_2630 + (-1.0))) + 1.0;
    float _2643 = (exp2(log2(1.0 - (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2644 = 1.0 - _2607;
    float _2654 = (0.5 / (((_2543 * ((_2621 * _2644) + _2607)) + 9.9999999392252902907785028219223e-09) + (((_2543 * _2644) + _2607) * _2621))) * _2621;
    float _4743 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2656 = (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2630 / ((_2634 * _2634) * 3.141590118408203125));
    float _2666 = (((_2643 * cbLight._m0[_2595].x) * _2656) * _2290) + ((((cbLight._m0[_2514].x * _2259) * _2567) * _2581) * _2303);
    float _2667 = (((_2643 * cbLight._m0[_2595].y) * _2656) * _2290) + ((((cbLight._m0[_2514].y * _2260) * _2567) * _2581) * _2303);
    float _2668 = (((_2643 * cbLight._m0[_2595].z) * _2656) * _2290) + ((((cbLight._m0[_2514].z * _2261) * _2567) * _2581) * _2303);
    float _2724;
    float _2726;
    float _2728;
    if (_2343)
    {
        _2724 = _2666;
        _2726 = _2667;
        _2728 = _2668;
    }
    else
    {
        uint _2730 = _2267 + 2u;
        uint _2734 = _2267 + 10u;
        float _2748 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2730].w)) * _762) * 0.949999988079071044921875);
        float _2749 = _2748 * _2748;
        float _2750 = cbLight._m0[_2730].x + _838;
        float _2751 = cbLight._m0[_2730].y + _839;
        float _2752 = cbLight._m0[_2730].z + _840;
        float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
        float _2757 = _2756 * _2750;
        float _2758 = _2756 * _2751;
        float _2759 = _2756 * _2752;
        float _2760 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2730].xyz));
        float _4754 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2763 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
        float _2764 = dot(vec3(_759, _760, _761), vec3(_2757, _2758, _2759));
        float _4765 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2767 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
        float _2768 = dot(vec3(cbLight._m0[_2730].xyz), vec3(_2757, _2758, _2759));
        float _4776 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2772 = _2749 * _2749;
        float _2776 = ((_2767 * _2767) * (_2772 + (-1.0))) + 1.0;
        float _2785 = (exp2(log2(1.0 - (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2786 = 1.0 - _2749;
        float _2796 = (0.5 / (((_2543 * ((_2763 * _2786) + _2749)) + 9.9999999392252902907785028219223e-09) + (((_2543 * _2786) + _2749) * _2763))) * _2763;
        float _4787 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2798 = (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2772 / ((_2776 * _2776) * 3.141590118408203125));
        float _2799 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
        _2724 = (((_2785 * cbLight._m0[_2734].x) * _2798) * _2799) + _2666;
        _2726 = (((_2785 * cbLight._m0[_2734].y) * _2798) * _2799) + _2667;
        _2728 = (((_2785 * cbLight._m0[_2734].z) * _2798) * _2799) + _2668;
    }
    float _2830;
    float _2832;
    float _2834;
    if (_2452)
    {
        _2830 = _2724;
        _2832 = _2726;
        _2834 = _2728;
    }
    else
    {
        uint _2841 = _2267 + 3u;
        uint _2845 = _2267 + 11u;
        float _2859 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2841].w)) * _762) * 0.949999988079071044921875);
        float _2860 = _2859 * _2859;
        float _2861 = cbLight._m0[_2841].x + _838;
        float _2862 = cbLight._m0[_2841].y + _839;
        float _2863 = cbLight._m0[_2841].z + _840;
        float _2867 = inversesqrt(dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863)));
        float _2868 = _2867 * _2861;
        float _2869 = _2867 * _2862;
        float _2870 = _2867 * _2863;
        float _2871 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2841].xyz));
        float _4803 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        float _2874 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
        float _2875 = dot(vec3(_759, _760, _761), vec3(_2868, _2869, _2870));
        float _4814 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        float _2878 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
        float _2879 = dot(vec3(cbLight._m0[_2841].xyz), vec3(_2868, _2869, _2870));
        float _4825 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
        float _2883 = _2860 * _2860;
        float _2887 = ((_2878 * _2878) * (_2883 + (-1.0))) + 1.0;
        float _2896 = (exp2(log2(1.0 - (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2897 = 1.0 - _2860;
        float _2907 = (0.5 / (((_2543 * ((_2874 * _2897) + _2860)) + 9.9999999392252902907785028219223e-09) + (((_2543 * _2897) + _2860) * _2874))) * _2874;
        float _4836 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
        float _2909 = (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2883 / ((_2887 * _2887) * 3.141590118408203125));
        float _2910 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
        _2830 = (((_2896 * cbLight._m0[_2845].x) * _2909) * _2910) + _2724;
        _2832 = (((_2896 * cbLight._m0[_2845].y) * _2909) * _2910) + _2726;
        _2834 = (((_2896 * cbLight._m0[_2845].z) * _2909) * _2910) + _2728;
    }
    float _2976;
    float _2978;
    float _2980;
    float _2982;
    float _2984;
    float _2986;
    if (_2265.y == 0u)
    {
        uvec4 _2931 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2932 = _2931.x;
        uint _2943 = uint((float(_2931.y) * floor(float(uint(cbSceneParam._m0[85u].y * _847) / _2932))) + floor(float(uint(cbSceneParam._m0[85u].x * _846) / _2932)));
        float _2953 = (log2(_2041 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2954 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        uint _2957 = uint(isnan(14.0) ? _2954 : (isnan(_2954) ? 14.0 : min(_2954, 14.0)));
        uvec4 _2962 = texelFetch(g_lightClusterGridBuffer, int(((_2957 << 2u) + (_2943 << 6u)) >> 2u));
        uint _2963 = _2962.x;
        uint _2964 = _2931.z;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        if (((((1u << ((_2964 >> 4u) & 15u)) + 4294967295u) & _2963) == 0u) || ((_2964 & 240u) == 0u))
        {
            _3037 = 0.0;
            _3039 = 0.0;
            _3041 = 0.0;
            _3043 = 0.0;
            _3045 = 0.0;
            _3047 = 0.0;
        }
        else
        {
            float _3038;
            float _3040;
            float _3042;
            float _3044;
            float _3046;
            float _3048;
            float _3181 = 0.0;
            float _3182 = 0.0;
            float _3183 = 0.0;
            float _3184 = 0.0;
            float _3185 = 0.0;
            float _3186 = 0.0;
            uint _3187 = 0u;
            uint _3196;
            bool _3197;
            for (;;)
            {
                _3196 = texelFetch(g_lightClassification, int((((_2957 << 5u) + (_2943 << 9u)) + (_3187 << 2u)) >> 2u)).x;
                _3197 = _3196 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3197)
                {
                    frontier_phi_66_pred = _3186;
                    frontier_phi_66_pred_1 = _3185;
                    frontier_phi_66_pred_2 = _3184;
                    frontier_phi_66_pred_3 = _3183;
                    frontier_phi_66_pred_4 = _3182;
                    frontier_phi_66_pred_5 = _3181;
                }
                else
                {
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    uint _3311;
                    _3305 = _3181;
                    _3306 = _3182;
                    _3307 = _3183;
                    _3308 = _3184;
                    _3309 = _3185;
                    _3310 = _3186;
                    _3311 = _3196;
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    float _3242;
                    for (;;)
                    {
                        uint _3315 = uint(findLSB(_3311)) + (_3187 << 5u);
                        uint _3312 = (_3311 + 4294967295u) & _3311;
                        uint _3317 = _3315 * 48u;
                        vec4 _3331 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3317)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 3u)).x));
                        uint _3337 = (_3315 * 48u) + 4u;
                        vec4 _3350 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3337)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 3u)).x));
                        uint _3356 = (_3315 * 48u) + 8u;
                        vec3 _3367 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3356)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 2u)).x));
                        float _3371 = _3331.x - _2039;
                        float _3372 = _3331.y - _2040;
                        float _3373 = _3331.z - _2041;
                        float _3374 = dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373));
                        float _3377 = inversesqrt(_3374);
                        float _3378 = _3377 * _3371;
                        float _3379 = _3377 * _3372;
                        float _3380 = _3377 * _3373;
                        float _3381 = dot(vec3(_865, _868, _871), vec3(_3378, _3379, _3380));
                        float _3386 = 1.0 - (_3374 * _3331.w);
                        float _4862 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3387 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                        float _3388 = sqrt(_3374) * _3350.w;
                        float _3391 = 1.39999997615814208984375 / (_3388 + 1.39999997615814208984375);
                        float _3392 = _3391 * _3391;
                        float _3395 = ((1.0 - _3392) * _3381) + _3392;
                        float _3398 = _3388 * _3388;
                        float _3402 = ((isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0))) * _3387) / ((_3398 * 0.699999988079071044921875) + 1.0);
                        float _3406 = (-0.0) - _2039;
                        float _3407 = (-0.0) - _2040;
                        float _3408 = (-0.0) - _2041;
                        float _3412 = inversesqrt(dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408)));
                        float _3413 = _3412 * _3406;
                        float _3414 = _3412 * _3407;
                        float _3415 = _3412 * _3408;
                        float _3422 = exp2(log2(1.0 / ((_3398 * 3.5) + 5.0)) * 0.25);
                        float _3423 = 1.0 - _928;
                        float _3430 = sqrt(1.0 - ((1.0 - (_3423 * _3423)) * (1.0 - (_3422 * _3422))));
                        float _3431 = _3430 * _3430;
                        float _3432 = _3431 * _3431;
                        float _3433 = _3413 + _3378;
                        float _3434 = _3414 + _3379;
                        float _3435 = _3415 + _3380;
                        float _3439 = inversesqrt(dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435)));
                        float _3443 = dot(vec3(_865, _868, _871), vec3(_3413, _3414, _3415));
                        float _4878 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3446 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                        float _3447 = dot(vec3(_865, _868, _871), vec3(_3439 * _3433, _3439 * _3434, _3439 * _3435));
                        float _4889 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                        float _3450 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                        float _3454 = ((_3450 * _3450) * (_3432 + (-1.0))) + 1.0;
                        float _3455 = _3391 * _3431;
                        float _3456 = _3455 * _3455;
                        float _3459 = ((1.0 - _3456) * _3381) + _3456;
                        float _4900 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                        float _3460 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                        float _3461 = 1.0 - _3431;
                        float _3471 = (0.5 / (((_3460 * ((_3446 * _3461) + _3431)) + 9.9999999392252902907785028219223e-09) + (((_3460 * _3461) + _3431) * _3446))) * _3460;
                        float _4911 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3482 = (((_3432 * 3.1415927410125732421875) * (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0)))) / ((_3454 * _3454) * ((_3398 * 2.1991131305694580078125) + 3.141590118408203125))) * _3387;
                        _3240 = (_3402 * _3350.x) + _3308;
                        _3241 = (_3402 * _3350.y) + _3309;
                        _3242 = (_3402 * _3350.z) + _3310;
                        _3237 = (_3482 * _3367.x) + _3305;
                        _3238 = (_3482 * _3367.y) + _3306;
                        _3239 = (_3482 * _3367.z) + _3307;
                        if (_3312 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3305 = _3237;
                            _3306 = _3238;
                            _3307 = _3239;
                            _3308 = _3240;
                            _3309 = _3241;
                            _3310 = _3242;
                            _3311 = _3312;
                        }
                    }
                    frontier_phi_66_pred = _3242;
                    frontier_phi_66_pred_1 = _3241;
                    frontier_phi_66_pred_2 = _3240;
                    frontier_phi_66_pred_3 = _3239;
                    frontier_phi_66_pred_4 = _3238;
                    frontier_phi_66_pred_5 = _3237;
                }
                _3048 = frontier_phi_66_pred;
                _3046 = frontier_phi_66_pred_1;
                _3044 = frontier_phi_66_pred_2;
                _3042 = frontier_phi_66_pred_3;
                _3040 = frontier_phi_66_pred_4;
                _3038 = frontier_phi_66_pred_5;
                uint _3188 = _3187 + 1u;
                if (_3188 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3181 = _3038;
                    _3182 = _3040;
                    _3183 = _3042;
                    _3184 = _3044;
                    _3185 = _3046;
                    _3186 = _3048;
                    _3187 = _3188;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3037 = _3038;
            _3039 = _3040;
            _3041 = _3042;
            _3043 = _3044;
            _3045 = _3046;
            _3047 = _3048;
        }
        uvec4 _3051 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3052 = _3051.z;
        uint _3054 = (_3052 >> 8u) & 15u;
        float _3149;
        float _3151;
        float _3153;
        float _3155;
        float _3157;
        float _3159;
        if (((4294967295u << _3054) & _2963) == 0u)
        {
            _3149 = _3037;
            _3151 = _3039;
            _3153 = _3041;
            _3155 = _3043;
            _3157 = _3045;
            _3159 = _3047;
        }
        else
        {
            float _3174 = inversesqrt(dot(vec3(_2039, _2040, _2041), vec3(_2039, _2040, _2041)));
            float _3175 = _3174 * _2039;
            float _3176 = _3174 * _2040;
            float _3177 = _3174 * _2041;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3054 < ((_3052 >> 12u) & 15u))
            {
                float _3150;
                float _3152;
                float _3154;
                float _3156;
                float _3158;
                float _3160;
                float _3288 = _3037;
                float _3289 = _3039;
                float _3290 = _3041;
                float _3291 = _3043;
                float _3292 = _3045;
                float _3293 = _3047;
                uint _3294 = _3054;
                uint _3303;
                bool _3304;
                for (;;)
                {
                    _3303 = texelFetch(g_lightClassification, int((((_2957 << 5u) + (_2943 << 9u)) + (_3294 << 2u)) >> 2u)).x;
                    _3304 = _3303 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3304)
                    {
                        frontier_phi_72_pred = _3293;
                        frontier_phi_72_pred_1 = _3292;
                        frontier_phi_72_pred_2 = _3291;
                        frontier_phi_72_pred_3 = _3290;
                        frontier_phi_72_pred_4 = _3289;
                        frontier_phi_72_pred_5 = _3288;
                    }
                    else
                    {
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3780;
                        float _3781;
                        float _3782;
                        float _3783;
                        float _3784;
                        float _3785;
                        float _3500 = _3288;
                        float _3501 = _3289;
                        float _3502 = _3290;
                        float _3503 = _3291;
                        float _3504 = _3292;
                        float _3505 = _3293;
                        uint _3506 = _3303;
                        uint _3507;
                        vec4 _3532;
                        float _3533;
                        vec4 _3548;
                        vec3 _3560;
                        vec4 _3575;
                        vec4 _3590;
                        float _3636;
                        bool _3637;
                        for (;;)
                        {
                            uint _3517 = ((_3294 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3506));
                            _3507 = (_3506 + 4294967295u) & _3506;
                            uint _3519 = _3517 * 40u;
                            _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            _3533 = _3532.w;
                            uint _3535 = (_3517 * 40u) + 4u;
                            _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            uint _3550 = (_3517 * 40u) + 8u;
                            _3560 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x));
                            uint _3562 = (_3517 * 40u) + 16u;
                            _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            uint _3577 = (_3517 * 40u) + 20u;
                            _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            uint _3592 = (_3517 * 40u) + 24u;
                            vec4 _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            uint _3611 = (_3517 * 40u) + 28u;
                            vec4 _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            _3636 = fma(_2041, _3624.z, fma(_2040, _3624.y, _3624.x * _2039)) + _3624.w;
                            _3637 = !((fma(_2041, _3605.z, fma(_2040, _3605.y, _3605.x * _2039)) + _3605.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3637)
                            {
                                float _3664 = _3532.x - _2039;
                                float _3665 = _3532.y - _2040;
                                float _3666 = _3532.z - _2041;
                                float _3667 = dot(vec3(_3664, _3665, _3666), vec3(_3664, _3665, _3666));
                                float _3670 = inversesqrt(_3667);
                                float _3671 = _3670 * _3664;
                                float _3672 = _3670 * _3665;
                                float _3673 = _3670 * _3666;
                                float _3677 = 1.0 - (_3667 / (_3533 * _3533));
                                float _4922 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3678 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
                                float _3682 = sqrt(_3667) * _3548.w;
                                float _3684 = 1.39999997615814208984375 / (_3682 + 1.39999997615814208984375);
                                float _3685 = _3684 * _3684;
                                float _3688 = ((1.0 - _3685) * dot(vec3(_3671, _3672, _3673), vec3(_865, _868, _871))) + _3685;
                                float _3691 = _3682 * _3682;
                                float _3695 = (fma(_2041, _3575.z, fma(_2040, _3575.y, _3575.x * _2039)) + _3575.w) / _3636;
                                float _3696 = (fma(_2041, _3590.z, fma(_2040, _3590.y, _3590.x * _2039)) + _3590.w) / _3636;
                                float _3700 = 1.0 - dot(vec2(_3695, _3696), vec2(_3695, _3696));
                                float _4938 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3701 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                                float _3702 = _3701 * (((isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0))) * _3678) / ((_3691 * 0.699999988079071044921875) + 1.0));
                                float _3714 = exp2(log2(1.0 / ((_3691 * 3.5) + 5.0)) * 0.25);
                                float _3715 = 1.0 - _928;
                                float _3722 = sqrt(1.0 - ((1.0 - (_3715 * _3715)) * (1.0 - (_3714 * _3714))));
                                float _3723 = _3722 * _3722;
                                float _3724 = _3723 * _3723;
                                float _3725 = _3671 - _3175;
                                float _3726 = _3672 - _3176;
                                float _3727 = _3673 - _3177;
                                float _3731 = inversesqrt(dot(vec3(_3725, _3726, _3727), vec3(_3725, _3726, _3727)));
                                float _3735 = dot(vec3(_865, _868, _871), vec3((-0.0) - _3175, (-0.0) - _3176, (-0.0) - _3177));
                                float _4949 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3738 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                                float _3739 = dot(vec3(_865, _868, _871), vec3(_3731 * _3725, _3731 * _3726, _3731 * _3727));
                                float _4960 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                                float _3742 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                                float _3746 = ((_3742 * _3742) * (_3724 + (-1.0))) + 1.0;
                                float _3747 = _3684 * _3723;
                                float _3748 = _3747 * _3747;
                                float _3754 = ((1.0 - _3748) * dot(vec3(_865, _868, _871), vec3(_3671, _3672, _3673))) + _3748;
                                float _4971 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3755 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                                float _3756 = 1.0 - _3723;
                                float _3766 = (0.5 / (((_3755 * ((_3738 * _3756) + _3723)) + 9.9999999392252902907785028219223e-09) + (((_3755 * _3756) + _3723) * _3738))) * _3755;
                                float _4982 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3776 = (_3701 * _3678) * (((_3724 * 3.1415927410125732421875) * (isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0)))) / ((_3746 * _3746) * ((_3691 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3702 * _3548.y;
                                frontier_phi_78_pred_1 = _3702 * _3548.x;
                                frontier_phi_78_pred_2 = _3776 * _3560.z;
                                frontier_phi_78_pred_3 = _3776 * _3560.y;
                                frontier_phi_78_pred_4 = _3776 * _3560.x;
                                frontier_phi_78_pred_5 = _3702 * _3548.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3784 = frontier_phi_78_pred;
                            _3783 = frontier_phi_78_pred_1;
                            _3782 = frontier_phi_78_pred_2;
                            _3781 = frontier_phi_78_pred_3;
                            _3780 = frontier_phi_78_pred_4;
                            _3785 = frontier_phi_78_pred_5;
                            _3490 = _3783 + _3503;
                            _3491 = _3784 + _3504;
                            _3492 = _3785 + _3505;
                            _3487 = _3780 + _3500;
                            _3488 = _3781 + _3501;
                            _3489 = _3782 + _3502;
                            if (_3507 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3500 = _3487;
                                _3501 = _3488;
                                _3502 = _3489;
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3507;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3492;
                        frontier_phi_72_pred_1 = _3491;
                        frontier_phi_72_pred_2 = _3490;
                        frontier_phi_72_pred_3 = _3489;
                        frontier_phi_72_pred_4 = _3488;
                        frontier_phi_72_pred_5 = _3487;
                    }
                    _3160 = frontier_phi_72_pred;
                    _3158 = frontier_phi_72_pred_1;
                    _3156 = frontier_phi_72_pred_2;
                    _3154 = frontier_phi_72_pred_3;
                    _3152 = frontier_phi_72_pred_4;
                    _3150 = frontier_phi_72_pred_5;
                    uint _3295 = _3294 + 1u;
                    if (_3295 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3288 = _3150;
                        _3289 = _3152;
                        _3290 = _3154;
                        _3291 = _3156;
                        _3292 = _3158;
                        _3293 = _3160;
                        _3294 = _3295;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3160;
                frontier_phi_60_61_ladder_1 = _3158;
                frontier_phi_60_61_ladder_2 = _3154;
                frontier_phi_60_61_ladder_3 = _3152;
                frontier_phi_60_61_ladder_4 = _3150;
                frontier_phi_60_61_ladder_5 = _3156;
            }
            else
            {
                frontier_phi_60_61_ladder = _3047;
                frontier_phi_60_61_ladder_1 = _3045;
                frontier_phi_60_61_ladder_2 = _3041;
                frontier_phi_60_61_ladder_3 = _3039;
                frontier_phi_60_61_ladder_4 = _3037;
                frontier_phi_60_61_ladder_5 = _3043;
            }
            _3149 = frontier_phi_60_61_ladder_4;
            _3151 = frontier_phi_60_61_ladder_3;
            _3153 = frontier_phi_60_61_ladder_2;
            _3155 = frontier_phi_60_61_ladder_5;
            _3157 = frontier_phi_60_61_ladder_1;
            _3159 = frontier_phi_60_61_ladder;
        }
        float _3164 = isnan(1.0) ? _909 : (isnan(_909) ? 1.0 : min(_909, 1.0));
        _2976 = (_3164 * _3155) + _2507;
        _2978 = (_3164 * _3157) + _2509;
        _2980 = (_3164 * _3159) + _2511;
        _2982 = ((_3149 * 0.039999999105930328369140625) * _3164) + _2830;
        _2984 = ((_3151 * 0.039999999105930328369140625) * _3164) + _2832;
        _2986 = ((_3153 * 0.039999999105930328369140625) * _3164) + _2834;
    }
    else
    {
        _2976 = _2507;
        _2978 = _2509;
        _2980 = _2511;
        _2982 = _2830;
        _2984 = _2832;
        _2986 = _2834;
    }
    float _4998 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _5009 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _5020 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    uint _3006 = _255 + 6u;
    vec4 _3023 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1946, _1947, (log2((isnan(cbSceneParam._m0[77u].w) ? _780 : (isnan(_780) ? cbSceneParam._m0[77u].w : min(_780, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3025 = _3023.x;
    float _3026 = _3023.y;
    float _3027 = _3023.z;
    float _3028 = _3023.w;
    float _3100;
    float _3102;
    float _3104;
    float _3106;
    if (_780 > cbSceneParam._m0[78u].w)
    {
        float _3062 = isnan(_780) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _780 : min(cbSceneParam._m0[80u].w, _780));
        float _3063 = _3062 / _780;
        float _3074 = _3063 * _831;
        float _3075 = _832 * _3063;
        float _3076 = (-0.0) - _3075;
        float _3078 = _3063 * _833;
        float _3080 = (cbSceneParam._m0[77u].w * _3076) / _3062;
        float _3081 = _3080 + cbSceneParam._m0[79u].w;
        float _3082 = cbSceneParam._m0[79u].w - _3075;
        float _3088 = sqrt(((_3074 * _3074) + (_3075 * _3075)) + (_3078 * _3078));
        float _3091 = (1.0 - (cbSceneParam._m0[77u].w / _3062)) * _3088;
        float _3096 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3098 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3250;
        if (abs((_3076 - _3080) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3250 = ((((_3081 > 0.0) ? exp2(_3096 * _3081) : (2.0 - exp2(_3098 * _3081))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3091;
        }
        else
        {
            float _3210 = 1.0 / cbSceneParam._m0[80u].x;
            float _3211 = isnan(_3082) ? _3081 : (isnan(_3081) ? _3082 : max(_3081, _3082));
            float _3212 = isnan(_3082) ? _3081 : (isnan(_3081) ? _3082 : min(_3081, _3082));
            float _3221 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : min(_3211, 0.0));
            float _3222 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : min(_3212, 0.0));
            _3250 = ((abs(_3088 / _3076) * cbSceneParam._m0[80u].y) * ((((_3221 - _3222) * 2.0) - ((exp2(_3096 * (isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0)))) - exp2(_3096 * (isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0))))) * _3210)) - ((exp2(_3098 * _3221) - exp2(_3098 * _3222)) * _3210))) + (_3091 * cbSceneParam._m0[80u].z);
        }
        vec4 _3252 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1946, _1947, 1.0), 0.0);
        float _3261 = exp2((_3250 * (-1.44269502162933349609375)) * (1.0 - _3252.w));
        float _3262 = log2(_3261);
        float _3278 = log2(_3028);
        _3100 = (exp2(_3278 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3262 * cbSceneParam._m0[78u].x)) * _3252.x) / cbSceneParam._m0[78u].x)) + _3025;
        _3102 = (exp2(_3278 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3262 * cbSceneParam._m0[78u].y)) * _3252.y) / cbSceneParam._m0[78u].y)) + _3026;
        _3104 = (exp2(_3278 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3262 * cbSceneParam._m0[78u].z)) * _3252.z) / cbSceneParam._m0[78u].z)) + _3027;
        _3106 = _3261 * _3028;
    }
    else
    {
        _3100 = _3025;
        _3102 = _3026;
        _3104 = _3027;
        _3106 = _3028;
    }
    float _3117 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3118 = _3117 == 3.0;
    float _3119 = log2(_3106);
    float _3126 = exp2(_3119 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0))) * (_2976 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _909))) + (((((_1923 * (_1971.x / _1977)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))) * _1716) * _1992)) + _2982) * cbPerFrame._m0[3u].x));
    float _3127 = exp2(_3119 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0))) * (_2978 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _909))) + (((((_1923 * (_1971.y / _1977)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1716) * _1992)) + _2984) * cbPerFrame._m0[3u].x));
    float _3128 = exp2(_3119 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0))) * (_2980 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _909))) + (((((_1923 * (_1971.z / _1977)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1716) * _1992)) + _2986) * cbPerFrame._m0[3u].x));
    float _3137 = (_3117 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3137 * (_3118 ? _3126 : (_3126 + (cbSceneParam._m0[72u].w * _3100)));
    SV_Target.y = _3137 * (_3118 ? _3127 : (_3127 + (cbSceneParam._m0[72u].w * _3102)));
    SV_Target.z = _3137 * (_3118 ? _3128 : (_3128 + (cbSceneParam._m0[72u].w * _3104)));
    SV_Target.w = cbInstanceData._m0[_3006].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3006].w;
}


