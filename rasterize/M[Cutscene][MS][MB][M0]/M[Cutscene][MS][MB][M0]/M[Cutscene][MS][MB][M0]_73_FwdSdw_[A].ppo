#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[33];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1297;
float _3993;
float _3994;
float _3995;
float _3996;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4005 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _4016 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _4027 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _331 = _329.w;
    vec4 _350 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _355 = _350.x * cbMtdParam._m0[11u].x;
    float _356 = _350.y * cbMtdParam._m0[11u].y;
    float _357 = _350.z * cbMtdParam._m0[11u].z;
    vec4 _376 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _409 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[28u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[28u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _424 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _441 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_411 - _424) * cbMtdParam._m0[24u].x) + _424) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4038 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _442 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _449 = (_442 * ((_376.x * cbMtdParam._m0[12u].x) - _355)) + _355;
    float _450 = (_442 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356;
    float _451 = (_442 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357;
    float _455 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _449;
    float _458 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _450;
    float _461 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _451;
    float _468 = ((_449 - _455) * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) + _455;
    float _469 = ((_450 - _458) * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) + _458;
    float _470 = ((_451 - _461) * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) + _461;
    vec4 _483 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _508 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _510 = _508.x;
    float _511 = _508.y;
    float _516 = cbMtdParam._m0[25u].w * _508.z;
    float _4049 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _517 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    vec4 _530 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    float _538 = cbMtdParam._m0[26u].x * _530.z;
    float _4060 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _548 = (((isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) - _517) * _442) + _517;
    float _551 = ((((_530.x - _510) * _442) + _510) * 2.0) + (-1.0);
    float _552 = ((((_530.y - _511) * _442) + _511) * 2.0) + (-1.0);
    float _553 = dot(vec2(_551, _552), vec2(_551, _552));
    float _4071 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _558 = sqrt(1.0 - (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))));
    vec4 _581 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _588 = cbMtdParam._m0[25u].z * _581.z;
    float _4082 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _596 = (_551 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_483.x * 2.0) + (-1.0)))) + (((_581.x * 2.0) + (-1.0)) * cbMtdParam._m0[27u].x);
    float _597 = (_552 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_483.y * 2.0) + (-1.0)))) + (((_581.y * 2.0) + (-1.0)) * cbMtdParam._m0[27u].x);
    vec4 _609 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _611 = _609.x;
    float _612 = 1.0 - _611;
    float _638 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_611 - _612) * cbMtdParam._m0[24u].w) + _612) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4093 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _639 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _647 = ((((cbMtdParam._m0[10u].x - _468) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _639) + _468;
    float _648 = ((((cbMtdParam._m0[10u].y - _469) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _639) + _469;
    float _649 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _470)) * _639) + _470;
    float _654 = (((_483.z - _548) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _548;
    float _658 = (((isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) - _654) * cbMtdParam._m0[19u].w) + _654;
    float _662 = ((cbMtdParam._m0[23u].y - _658) * _639) + _658;
    float _666 = ((1.0 - _662) * cbMtdParam._m0[26u].y) + _662;
    float _4104 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _667 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    vec4 _689 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[28u].w * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[29u].x * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _695 = (_689.x * 2.0) + (-1.0);
    float _696 = (_689.y * 2.0) + (-1.0);
    float _697 = dot(vec2(_695, _696), vec2(_695, _696));
    float _4115 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _713 = (_639 * (((cbMtdParam._m0[22u].z * _596) - _596) + _695)) + _596;
    float _714 = (_639 * (((cbMtdParam._m0[22u].z * _597) - _597) + _696)) + _597;
    float _715 = (_639 * (sqrt(1.0 - (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) - _558)) + _558;
    float _717 = cbMtdParam._m0[22u].x + _581.w;
    float _722 = fma(_715, _247 * NORMAL.x, fma(_714, _254 * TANGENT.x, (_240 * _232) * _713));
    float _725 = fma(_715, _247 * NORMAL.y, fma(_714, _254 * TANGENT.y, (_240 * _233) * _713));
    float _728 = fma(_715, _247 * NORMAL.z, fma(_714, _254 * TANGENT.z, (_240 * _234) * _713));
    float _732 = inversesqrt(dot(vec3(_722, _725, _728), vec3(_722, _725, _728)));
    float _733 = _732 * _722;
    float _734 = _732 * _725;
    float _735 = _732 * _728;
    float _4126 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _736 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _4137 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _4148 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _4159 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4170 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _754 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _795 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _805 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _795);
    float _806 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _795);
    float _807 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _795);
    float _811 = inversesqrt(dot(vec3(_805, _806, _807), vec3(_805, _806, _807)));
    float _812 = _805 * _811;
    float _813 = _806 * _811;
    float _814 = _807 * _811;
    vec4 _819 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _821 = _819.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _978 = sqrt(((_805 * _805) + (_806 * _806)) + (_807 * _807));
        float _984 = (cbMatDynParam._m0[5u].x * _978) + cbMatDynParam._m0[5u].y;
        float _4181 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _989 = (cbMatDynParam._m0[5u].z * _978) + cbMatDynParam._m0[5u].w;
        float _4192 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) - _985)) + _985) < ((_821 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _832 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _833 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _851 = fma(_735, cbSceneParam._m0[5u].z, fma(_734, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _733));
    float _854 = fma(_735, cbSceneParam._m0[6u].z, fma(_734, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _733));
    float _857 = fma(_735, cbSceneParam._m0[7u].z, fma(_734, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _733));
    uint _870 = _279 + 9u;
    uint _871 = _870 + uint(cbMatDynParam._m0[0u].w);
    float _877 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) * cbInstanceData._m0[_871].x;
    float _878 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) * cbInstanceData._m0[_871].y;
    float _879 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * cbInstanceData._m0[_871].z;
    float _4203 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _880 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _4214 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _881 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _4225 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _882 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    vec4 _891 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _832, cbSceneParam._m0[86u].y * _833));
    float _895 = ((isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * TEXCOORD_5.w) * _891.x;
    float _896 = dot(vec3(_733, _734, _735), vec3(_812, _813, _814));
    float _899 = _896 * 2.0;
    float _903 = (_899 * _733) - _812;
    float _904 = (_899 * _734) - _813;
    float _905 = (_899 * _735) - _814;
    float _912 = abs(dot(vec3(_812, _813, _814), vec3(_733, _734, _735)));
    float _4236 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _914 = sqrt(_736);
    float _927 = exp2((_914 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_914 * 3.0));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1296;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1021 = fma(_967, cbModelParam._m0[26u].z, fma(_963, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _959));
        float _1025 = fma(_967, cbModelParam._m0[27u].z, fma(_963, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _959));
        float _1029 = fma(_967, cbModelParam._m0[28u].z, fma(_963, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _959));
        float _1054 = _959 + _733;
        float _1055 = _963 + _734;
        float _1056 = _967 + _735;
        float _1066 = fma(_1056, cbModelParam._m0[26u].z, fma(_1055, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1054)) - _1021;
        float _1067 = fma(_1056, cbModelParam._m0[27u].z, fma(_1055, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1054)) - _1025;
        float _1068 = fma(_1056, cbModelParam._m0[28u].z, fma(_1055, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1054)) - _1029;
        float _1072 = inversesqrt(dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068)));
        float _1085 = ((_1072 * _1066) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1021 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1086 = ((_1072 * _1067) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1025 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1072 * _1068) / cbModelParam._m0[34u].z) + ((((((_1029 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        float _1124 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1090.x + (-0.5));
        float _1126 = _1124 * (_1090.y + (-0.5));
        float _1127 = _1124 * (_1090.z + (-0.5));
        float _1134 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1097.x + (-0.5));
        float _1136 = _1134 * (_1097.y + (-0.5));
        float _1137 = _1134 * (_1097.z + (-0.5));
        float _1144 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1104.x + (-0.5));
        float _1146 = _1144 * (_1104.y + (-0.5));
        float _1147 = _1144 * (_1104.z + (-0.5));
        float _1154 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1111.x + (-0.5));
        float _1156 = _1154 * (_1111.y + (-0.5));
        float _1157 = _1154 * (_1111.z + (-0.5));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = _1125 * 0.5;
        float _1162 = _1135 * 0.5;
        float _1163 = _1145 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1178 = (dot(vec3(_733, _734, _735), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1188 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _4284 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1190 + 1.0))) + _1195) * _1158;
        float _1205 = _1126 * 0.5;
        float _1206 = _1136 * 0.5;
        float _1207 = _1146 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(_733, _734, _735), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _4317 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1232 + 1.0))) + _1237) * _1159;
        float _1247 = _1127 * 0.5;
        float _1248 = _1137 * 0.5;
        float _1249 = _1147 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_733, _734, _735), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _4328 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _4339 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _4350 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_1274 + 1.0))) + _1279) * _1160;
        _1296 = _1127;
        _1298 = _1126;
        _1299 = _1125;
        _1300 = _1137;
        _1301 = _1136;
        _1302 = _1135;
        _1303 = _1147;
        _1304 = _1146;
        _1305 = _1145;
        _1306 = _1160;
        _1307 = _1159;
        _1308 = _1158;
        _1309 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
        _1310 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
    }
    else
    {
        _1296 = _1297;
        _1298 = _1297;
        _1299 = _1297;
        _1300 = _1297;
        _1301 = _1297;
        _1302 = _1297;
        _1303 = _1297;
        _1304 = _1297;
        _1305 = _1297;
        _1306 = _1297;
        _1307 = _1297;
        _1308 = _1297;
        _1309 = 0.0;
        _1310 = 0.0;
        _1311 = 0.0;
    }
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1338 = fma(_967, cbModelParam._m0[30u].z, fma(_963, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _959));
        float _1342 = fma(_967, cbModelParam._m0[31u].z, fma(_963, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _959));
        float _1346 = fma(_967, cbModelParam._m0[32u].z, fma(_963, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _959));
        float _1369 = _959 + _733;
        float _1370 = _963 + _734;
        float _1371 = _967 + _735;
        float _1381 = fma(_1371, cbModelParam._m0[30u].z, fma(_1370, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1369)) - _1338;
        float _1382 = fma(_1371, cbModelParam._m0[31u].z, fma(_1370, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1369)) - _1342;
        float _1383 = fma(_1371, cbModelParam._m0[32u].z, fma(_1370, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1369)) - _1346;
        float _1387 = inversesqrt(dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383)));
        float _1400 = ((_1387 * _1381) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1338 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1401 = ((_1387 * _1382) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1342 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1402 = ((_1387 * _1383) / cbModelParam._m0[35u].z) + ((((((_1346 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        float _1437 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1404.x + (-0.5));
        float _1439 = _1437 * (_1404.y + (-0.5));
        float _1440 = _1437 * (_1404.z + (-0.5));
        float _1447 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1411.x + (-0.5));
        float _1449 = _1447 * (_1411.y + (-0.5));
        float _1450 = _1447 * (_1411.z + (-0.5));
        float _1457 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1418.x + (-0.5));
        float _1459 = _1457 * (_1418.y + (-0.5));
        float _1460 = _1457 * (_1418.z + (-0.5));
        float _1467 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1425.x + (-0.5));
        float _1469 = _1467 * (_1425.y + (-0.5));
        float _1470 = _1467 * (_1425.z + (-0.5));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = _1438 * 0.5;
        float _1475 = _1448 * 0.5;
        float _1476 = _1458 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_733, _734, _735), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4391 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4402 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4413 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_1501 + 1.0))) + _1506) * _1471;
        float _1516 = _1439 * 0.5;
        float _1517 = _1449 * 0.5;
        float _1518 = _1459 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_733, _734, _735), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4424 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4435 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4446 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_1543 + 1.0))) + _1548) * _1472;
        float _1558 = _1440 * 0.5;
        float _1559 = _1450 * 0.5;
        float _1560 = _1460 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_733, _734, _735), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4457 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _4468 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4479 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_1585 + 1.0))) + _1590) * _1473;
        _1607 = _1440;
        _1608 = _1439;
        _1609 = _1438;
        _1610 = _1450;
        _1611 = _1449;
        _1612 = _1448;
        _1613 = _1460;
        _1614 = _1459;
        _1615 = _1458;
        _1616 = _1473;
        _1617 = _1472;
        _1618 = _1471;
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
        _1621 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
    }
    else
    {
        _1607 = _1297;
        _1608 = _1297;
        _1609 = _1297;
        _1610 = _1297;
        _1611 = _1297;
        _1612 = _1297;
        _1613 = _1297;
        _1614 = _1297;
        _1615 = _1297;
        _1616 = _1297;
        _1617 = _1297;
        _1618 = _1297;
        _1619 = 0.0;
        _1620 = 0.0;
        _1621 = 0.0;
    }
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1309)) + _1309;
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1310)) + _1310;
    float _1633 = (cbModelParam._m0[1u].x * (_1621 - _1311)) + _1311;
    float _1654 = fma(_1633, cbSceneParam._m0[89u].z, fma(_1632, cbSceneParam._m0[89u].y, _1631 * cbSceneParam._m0[89u].x));
    float _1657 = fma(_1633, cbSceneParam._m0[90u].z, fma(_1632, cbSceneParam._m0[90u].y, _1631 * cbSceneParam._m0[90u].x));
    float _1660 = fma(_1633, cbSceneParam._m0[91u].z, fma(_1632, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1631));
    float _1675 = _903 * 0.5;
    float _1676 = _904 * 0.5;
    float _1677 = _905 * 0.5;
    float _1678 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1609, _1612, _1615, _1618));
    float _1681 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1684 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1718;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1691 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1296, _1300, _1303, _1306));
        float _1695 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1298, _1301, _1304, _1307));
        float _1699 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1299, _1302, _1305, _1308));
        float _1706 = dot(vec4(cbModelParam._m0[39u]), vec4(_1675, _1676, _1677, 1.0));
        _1718 = dot(vec3(isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1706) ? 0.0 : (isnan(0.0) ? _1706 : max(0.0, _1706))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1718 = 1.0;
    }
    float _1729;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1720 = dot(vec4(cbModelParam._m0[40u]), vec4(_1675, _1676, _1677, 1.0));
        _1729 = dot(vec3(isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1720) ? 0.0 : (isnan(0.0) ? _1720 : max(0.0, _1720))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1729 = 1.0;
    }
    float _1733 = (_1729 * cbModelParam._m0[1u].x) + (_1718 * (1.0 - cbModelParam._m0[1u].x));
    float _1743 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _736);
    float _1744 = isnan(_1743) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1743 : min(cbModelParam._m0[25u].z, _1743));
    float _1826;
    float _1828;
    float _1830;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1793 = fma(_967, cbModelParam._m0[13u].z, fma(_963, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _959)) + cbModelParam._m0[13u].w;
        float _1797 = fma(_967, cbModelParam._m0[14u].z, fma(_963, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _959)) + cbModelParam._m0[14u].w;
        float _1801 = fma(_967, cbModelParam._m0[15u].z, fma(_963, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _959)) + cbModelParam._m0[15u].w;
        float _1804 = fma(_905, cbModelParam._m0[13u].z, fma(_904, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _903));
        float _1807 = fma(_905, cbModelParam._m0[14u].z, fma(_904, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _903));
        float _1810 = fma(_905, cbModelParam._m0[15u].z, fma(_904, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _903));
        float _1838;
        if (_1804 > 0.0)
        {
            _1838 = abs((1.0 - _1793) / _1804);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1793 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1838 = frontier_phi_17_15_ladder;
        }
        float _2066;
        if (_1807 > 0.0)
        {
            _2066 = abs((1.0 - _1797) / _1807);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1797 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2066 = frontier_phi_26_22_ladder;
        }
        float _2363;
        if (_1810 > 0.0)
        {
            _2363 = abs((1.0 - _1801) / _1810);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1801 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2363 = frontier_phi_38_33_ladder;
        }
        float _2365 = isnan(_2066) ? _1838 : (isnan(_1838) ? _2066 : min(_1838, _2066));
        float _2366 = isnan(_2363) ? _2365 : (isnan(_2365) ? _2363 : min(_2365, _2363));
        float _2370 = (_2366 * _1804) + _1793;
        float _2371 = (_2366 * _1807) + _1797;
        float _2372 = (_2366 * _1810) + _1801;
        float _2373 = _2366 * 9.9999997473787516355514526367188e-05;
        float _2375 = (-1.0) - _2373;
        float _2377 = _2373 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2372 > _2377) || ((_2372 < _2375) || ((_2371 > _2377) || ((_2371 < _2375) || ((_2370 < _2375) || (_2370 > _2377))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2517 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2372, cbModelParam._m0[9u].z, fma(_2371, cbModelParam._m0[9u].y, _2370 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2372, cbModelParam._m0[10u].z, fma(_2371, cbModelParam._m0[10u].y, _2370 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2372, cbModelParam._m0[11u].z, fma(_2371, cbModelParam._m0[11u].y, _2370 * cbModelParam._m0[11u].x))), _1744);
            frontier_phi_16_38_ladder = _2517.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2517.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2517.x * cbModelParam._m0[1u].y;
        }
        _1826 = frontier_phi_16_38_ladder_2;
        _1828 = frontier_phi_16_38_ladder_1;
        _1830 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1814 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_903, _904, _905), _1744);
        _1826 = _1814.x * cbModelParam._m0[1u].y;
        _1828 = _1814.y * cbModelParam._m0[1u].y;
        _1830 = _1814.z * cbModelParam._m0[1u].y;
    }
    float _1834 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _736);
    float _1835 = isnan(_1834) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1834 : min(cbModelParam._m0[25u].w, _1834));
    float _1926;
    float _1928;
    float _1930;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1890 = fma(_967, cbModelParam._m0[21u].z, fma(_963, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _959)) + cbModelParam._m0[21u].w;
        float _1894 = fma(_967, cbModelParam._m0[22u].z, fma(_963, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _959)) + cbModelParam._m0[22u].w;
        float _1898 = fma(_967, cbModelParam._m0[23u].z, fma(_963, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _959)) + cbModelParam._m0[23u].w;
        float _1901 = fma(_905, cbModelParam._m0[21u].z, fma(_904, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _903));
        float _1904 = fma(_905, cbModelParam._m0[22u].z, fma(_904, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _903));
        float _1907 = fma(_905, cbModelParam._m0[23u].z, fma(_904, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _903));
        float _2071;
        if (_1901 > 0.0)
        {
            _2071 = abs((1.0 - _1890) / _1901);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1890 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2071 = frontier_phi_28_24_ladder;
        }
        float _2390;
        if (_1904 > 0.0)
        {
            _2390 = abs((1.0 - _1894) / _1904);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1894 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2390 = frontier_phi_40_35_ladder;
        }
        float _2717;
        if (_1907 > 0.0)
        {
            _2717 = abs((1.0 - _1898) / _1907);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1898 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2717 = frontier_phi_50_47_ladder;
        }
        float _2719 = isnan(_2390) ? _2071 : (isnan(_2071) ? _2390 : min(_2071, _2390));
        float _2720 = isnan(_2717) ? _2719 : (isnan(_2719) ? _2717 : min(_2719, _2717));
        float _2724 = (_2720 * _1901) + _1890;
        float _2725 = (_2720 * _1904) + _1894;
        float _2726 = (_2720 * _1907) + _1898;
        float _2727 = _2720 * 9.9999997473787516355514526367188e-05;
        float _2728 = (-1.0) - _2727;
        float _2730 = _2727 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2726 > _2730) || ((_2726 < _2728) || ((_2725 > _2730) || ((_2725 < _2728) || ((_2724 < _2728) || (_2724 > _2730))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2844 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2726, cbModelParam._m0[17u].z, fma(_2725, cbModelParam._m0[17u].y, _2724 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2726, cbModelParam._m0[18u].z, fma(_2725, cbModelParam._m0[18u].y, _2724 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2726, cbModelParam._m0[19u].z, fma(_2725, cbModelParam._m0[19u].y, _2724 * cbModelParam._m0[19u].x))), _1835);
            frontier_phi_25_50_ladder = _2844.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2844.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2844.x * cbModelParam._m0[1u].z;
        }
        _1926 = frontier_phi_25_50_ladder_2;
        _1928 = frontier_phi_25_50_ladder_1;
        _1930 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1910 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_903, _904, _905), _1835);
        _1926 = _1910.x * cbModelParam._m0[1u].z;
        _1928 = _1910.y * cbModelParam._m0[1u].z;
        _1930 = _1910.z * cbModelParam._m0[1u].z;
    }
    float _1942 = ((((1.0 - _927) * ((_914 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_927 * _914)) * _895;
    float _1943 = _1942 * ((cbModelParam._m0[1u].w * (_1926 - _1826)) + _1826);
    float _1944 = _1942 * ((cbModelParam._m0[1u].w * (_1928 - _1828)) + _1828);
    float _1945 = _1942 * ((cbModelParam._m0[1u].w * (_1930 - _1830)) + _1830);
    float _1948 = fma(_1945, cbSceneParam._m0[89u].z, fma(_1944, cbSceneParam._m0[89u].y, _1943 * cbSceneParam._m0[89u].x));
    float _1951 = fma(_1945, cbSceneParam._m0[90u].z, fma(_1944, cbSceneParam._m0[90u].y, _1943 * cbSceneParam._m0[90u].x));
    float _1954 = fma(_1945, cbSceneParam._m0[91u].z, fma(_1944, cbSceneParam._m0[91u].y, _1943 * cbSceneParam._m0[91u].x));
    float _1965 = _832 / cbSceneParam._m0[86u].x;
    float _1966 = _833 / cbSceneParam._m0[86u].y;
    float _1973 = (cbSceneParam._m0[88u].y * (1.0 - cbMtdParam._m0[25u].y)) + cbSceneParam._m0[88u].z;
    float _4605 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1975 = (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * 5.0;
    float _1980 = ((10.0 / (_754 + 10.0)) * cbMtdParam._m0[25u].x) * dot(vec3(_733, _734, _735), vec3(1.0, 0.0, 0.0));
    vec4 _1990 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1980 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1980 + _1965) * cbSceneParam._m0[86u].x, _833), _1975).w) + _1965) * cbSceneParam._m0[86u].x, _833), _1975);
    float _1996 = isnan(0.5) ? _1990.w : (isnan(_1990.w) ? 0.5 : max(_1990.w, 0.5));
    float _2011 = 1.0 - (_1990.w / _1996);
    float _2045 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2049 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2053 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2057 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2058 = _2045 / _2057;
    float _2059 = _2049 / _2057;
    float _2060 = _2053 / _2057;
    float _2206;
    float _2207;
    float _2208;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2087 = ((uint(_2060 > cbSceneParam._m0[59u].y) + uint(_2060 > cbSceneParam._m0[59u].x)) + uint(_2060 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2088 = _2087 + 43u;
        uint _2096 = _2087 + 44u;
        uint _2104 = _2087 + 45u;
        uint _2112 = _2087 + 46u;
        float _2123 = fma(_2057, cbSceneParam._m0[_2088].w, fma(_2053, cbSceneParam._m0[_2088].z, fma(_2049, cbSceneParam._m0[_2088].y, _2045 * cbSceneParam._m0[_2088].x)));
        float _2127 = fma(_2057, cbSceneParam._m0[_2096].w, fma(_2053, cbSceneParam._m0[_2096].z, fma(_2049, cbSceneParam._m0[_2096].y, _2045 * cbSceneParam._m0[_2096].x)));
        float _2135 = fma(_2057, cbSceneParam._m0[_2112].w, fma(_2053, cbSceneParam._m0[_2112].z, fma(_2049, cbSceneParam._m0[_2112].y, _2045 * cbSceneParam._m0[_2112].x)));
        float _2139 = cbSceneParam._m0[33u].z * _2135;
        float _2141 = cbSceneParam._m0[33u].w * _2135;
        float _2144 = fma(_2057, cbSceneParam._m0[_2104].w, fma(_2053, cbSceneParam._m0[_2104].z, fma(_2049, cbSceneParam._m0[_2104].y, _2045 * cbSceneParam._m0[_2104].x))) / _2135;
        float _2192 = (cbSceneParam._m0[33u].x - sqrt(((_2059 * _2059) + (_2058 * _2058)) + (_2060 * _2060))) * cbSceneParam._m0[33u].y;
        float _4621 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2199 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2139 + _2123) / _2135, (_2141 + _2127) / _2135), _2144), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2141 + _2123) / _2135, (_2127 - _2139) / _2135), _2144), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2123 - _2139) / _2135, (_2127 - _2141) / _2135), _2144), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2123 - _2141) / _2135, (_2139 + _2127) / _2135), _2144), 0.0)).x), vec4(0.25)));
        _2206 = 1.0 - (_2199 * cbSceneParam._m0[34u].x);
        _2207 = 1.0 - (_2199 * cbSceneParam._m0[34u].y);
        _2208 = 1.0 - (_2199 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2206 = 1.0;
        _2207 = 1.0;
        _2208 = 1.0;
    }
    float _2272;
    float _2274;
    float _2276;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2260 = fma(_2057, cbSceneParam._m0[63u].w, fma(_2053, cbSceneParam._m0[63u].z, fma(_2049, cbSceneParam._m0[63u].y, _2045 * cbSceneParam._m0[63u].x)));
        float _2261 = fma(_2057, cbSceneParam._m0[60u].w, fma(_2053, cbSceneParam._m0[60u].z, fma(_2049, cbSceneParam._m0[60u].y, _2045 * cbSceneParam._m0[60u].x))) / _2260;
        float _2262 = fma(_2057, cbSceneParam._m0[61u].w, fma(_2053, cbSceneParam._m0[61u].z, fma(_2049, cbSceneParam._m0[61u].y, _2045 * cbSceneParam._m0[61u].x))) / _2260;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2261 >= cbSceneParam._m0[64u].x) && (_2262 >= cbSceneParam._m0[64u].y)) && (_2261 <= cbSceneParam._m0[64u].z)) && (_2262 <= cbSceneParam._m0[64u].w))
        {
            float _2403 = fma(_2057, cbSceneParam._m0[62u].w, fma(_2053, cbSceneParam._m0[62u].z, fma(_2049, cbSceneParam._m0[62u].y, _2045 * cbSceneParam._m0[62u].x))) / _2260;
            float _2407 = isnan(cbSceneParam._m0[41u].w) ? _2403 : (isnan(_2403) ? cbSceneParam._m0[41u].w : max(_2403, cbSceneParam._m0[41u].w));
            float _2450 = (cbSceneParam._m0[33u].x - sqrt(((_2059 * _2059) + (_2058 * _2058)) + (_2060 * _2060))) * cbSceneParam._m0[33u].y;
            float _4637 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
            float _2457 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2261, cbSceneParam._m0[33u].w + _2262), _2407), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2261, _2262 - cbSceneParam._m0[33u].z), _2407), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2261 - cbSceneParam._m0[33u].z, _2262 - cbSceneParam._m0[33u].w), _2407), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2261 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2262), _2407), 0.0)).x), vec4(0.25)));
            float _2461 = 1.0 - (_2457 * cbSceneParam._m0[34u].x);
            float _2462 = 1.0 - (_2457 * cbSceneParam._m0[34u].y);
            float _2463 = 1.0 - (_2457 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2463) ? _2208 : (isnan(_2208) ? _2463 : min(_2208, _2463));
            frontier_phi_37_36_ladder_1 = isnan(_2462) ? _2207 : (isnan(_2207) ? _2462 : min(_2207, _2462));
            frontier_phi_37_36_ladder_2 = isnan(_2461) ? _2206 : (isnan(_2206) ? _2461 : min(_2206, _2461));
        }
        else
        {
            frontier_phi_37_36_ladder = _2208;
            frontier_phi_37_36_ladder_1 = _2207;
            frontier_phi_37_36_ladder_2 = _2206;
        }
        _2272 = frontier_phi_37_36_ladder_2;
        _2274 = frontier_phi_37_36_ladder_1;
        _2276 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2272 = _2206;
        _2274 = _2207;
        _2276 = _2208;
    }
    float _4663 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2278 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
    float _4674 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2279 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
    float _4685 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2280 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
    uvec4 _2284 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2286 = _2284.x * 14u;
    uint _2287 = _2286 + 13u;
    float _2294 = _895 + (-1.0);
    float _2299 = (cbLight._m0[_2287].x * _2294) + 1.0;
    float _2300 = (cbLight._m0[_2287].y * _2294) + 1.0;
    float _2301 = (cbLight._m0[_2287].z * _2294) + 1.0;
    float _2302 = (cbLight._m0[_2287].w * _2294) + 1.0;
    uint _2303 = _2286 + 5u;
    float _2309 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
    uint _2313 = _2286 + 4u;
    float _2322 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
    uint _2326 = _2286 | 1u;
    float _2337 = dot(vec3(cbLight._m0[_2286].xyz), vec3(_733, _734, _735));
    float _2340 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_733, _734, _735));
    float _4706 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _4717 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2345 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * 0.3183098733425140380859375;
    float _2347 = (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * 0.3183098733425140380859375;
    float _2354 = ((cbLight._m0[_2303].x * _2309) * _2347) + (((cbLight._m0[_2313].x * _2278) * _2322) * _2345);
    float _2355 = ((_2309 * cbLight._m0[_2303].y) * _2347) + (((cbLight._m0[_2313].y * _2279) * _2322) * _2345);
    float _2356 = ((_2309 * cbLight._m0[_2303].z) * _2347) + (((cbLight._m0[_2313].z * _2280) * _2322) * _2345);
    uvec4 _2360 = floatBitsToUint(cbLight._m0[_2286 + 12u]);
    bool _2362 = _2360.x == 0u;
    float _2464;
    float _2466;
    float _2468;
    if (_2362)
    {
        _2464 = _2354;
        _2466 = _2355;
        _2468 = _2356;
    }
    else
    {
        uint _2472 = _2286 + 6u;
        float _2488 = (dot(vec3(cbLight._m0[_2286 + 2u].xyz), vec3(_733, _734, _735)) * 0.5) + 0.5;
        float _2489 = _2488 * _2488;
        float _4728 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2490 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _2491 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
        _2464 = (((cbLight._m0[_2472].x * 0.3183098733425140380859375) * _2490) * _2491) + _2354;
        _2466 = (((cbLight._m0[_2472].y * 0.3183098733425140380859375) * _2490) * _2491) + _2355;
        _2468 = (((cbLight._m0[_2472].z * 0.3183098733425140380859375) * _2490) * _2491) + _2356;
    }
    bool _2471 = _2360.y == 0u;
    float _2526;
    float _2528;
    float _2530;
    if (_2471)
    {
        _2526 = _2464;
        _2528 = _2466;
        _2530 = _2468;
    }
    else
    {
        uint _2688 = _2286 + 7u;
        float _2704 = (dot(vec3(cbLight._m0[_2286 + 3u].xyz), vec3(_733, _734, _735)) * 0.5) + 0.5;
        float _2705 = _2704 * _2704;
        float _4744 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2706 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _2707 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        _2526 = (((cbLight._m0[_2688].x * 0.3183098733425140380859375) * _2706) * _2707) + _2464;
        _2528 = (((cbLight._m0[_2688].y * 0.3183098733425140380859375) * _2706) * _2707) + _2466;
        _2530 = (((cbLight._m0[_2688].z * 0.3183098733425140380859375) * _2706) * _2707) + _2468;
    }
    uint _2533 = _2286 + 8u;
    float _2546 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2286].w)) * _736) * 0.949999988079071044921875);
    float _2547 = _2546 * _2546;
    float _2548 = cbLight._m0[_2286].x + _812;
    float _2549 = cbLight._m0[_2286].y + _813;
    float _2550 = cbLight._m0[_2286].z + _814;
    float _2554 = inversesqrt(dot(vec3(_2548, _2549, _2550), vec3(_2548, _2549, _2550)));
    float _2555 = _2554 * _2548;
    float _2556 = _2554 * _2549;
    float _2557 = _2554 * _2550;
    float _2558 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_2286].xyz));
    float _4760 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2561 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
    float _4771 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _2562 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
    float _2563 = dot(vec3(_733, _734, _735), vec3(_2555, _2556, _2557));
    float _4782 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2566 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
    float _2567 = dot(vec3(cbLight._m0[_2286].xyz), vec3(_2555, _2556, _2557));
    float _4793 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2571 = _2547 * _2547;
    float _2575 = ((_2566 * _2566) * (_2571 + (-1.0))) + 1.0;
    float _2586 = (exp2(log2(1.0 - (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2587 = 1.0 - _2547;
    float _2598 = (0.5 / (((_2562 * ((_2561 * _2587) + _2547)) + 9.9999999392252902907785028219223e-09) + (((_2562 * _2587) + _2547) * _2561))) * _2561;
    float _4804 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
    float _2600 = (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * (_2571 / ((_2575 * _2575) * 3.141590118408203125));
    uint _2614 = _2286 + 9u;
    float _2625 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2326].w)) * _736) * 0.949999988079071044921875);
    float _2626 = _2625 * _2625;
    float _2627 = cbLight._m0[_2326].x + _812;
    float _2628 = cbLight._m0[_2326].y + _813;
    float _2629 = cbLight._m0[_2326].z + _814;
    float _2633 = inversesqrt(dot(vec3(_2627, _2628, _2629), vec3(_2627, _2628, _2629)));
    float _2634 = _2633 * _2627;
    float _2635 = _2633 * _2628;
    float _2636 = _2633 * _2629;
    float _2637 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_2326].xyz));
    float _4815 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2640 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
    float _2641 = dot(vec3(_733, _734, _735), vec3(_2634, _2635, _2636));
    float _4826 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2644 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
    float _2645 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_2634, _2635, _2636));
    float _4837 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2649 = _2626 * _2626;
    float _2653 = ((_2644 * _2644) * (_2649 + (-1.0))) + 1.0;
    float _2662 = (exp2(log2(1.0 - (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2663 = 1.0 - _2626;
    float _2673 = (0.5 / (((_2562 * ((_2640 * _2663) + _2626)) + 9.9999999392252902907785028219223e-09) + (((_2562 * _2663) + _2626) * _2640))) * _2640;
    float _4848 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2675 = (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * (_2649 / ((_2653 * _2653) * 3.141590118408203125));
    float _2685 = (((_2662 * cbLight._m0[_2614].x) * _2675) * _2309) + ((((cbLight._m0[_2533].x * _2278) * _2586) * _2600) * _2322);
    float _2686 = (((_2662 * cbLight._m0[_2614].y) * _2675) * _2309) + ((((cbLight._m0[_2533].y * _2279) * _2586) * _2600) * _2322);
    float _2687 = (((_2662 * cbLight._m0[_2614].z) * _2675) * _2309) + ((((cbLight._m0[_2533].z * _2280) * _2586) * _2600) * _2322);
    float _2743;
    float _2745;
    float _2747;
    if (_2362)
    {
        _2743 = _2685;
        _2745 = _2686;
        _2747 = _2687;
    }
    else
    {
        uint _2749 = _2286 + 2u;
        uint _2753 = _2286 + 10u;
        float _2767 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2749].w)) * _736) * 0.949999988079071044921875);
        float _2768 = _2767 * _2767;
        float _2769 = cbLight._m0[_2749].x + _812;
        float _2770 = cbLight._m0[_2749].y + _813;
        float _2771 = cbLight._m0[_2749].z + _814;
        float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
        float _2776 = _2775 * _2769;
        float _2777 = _2775 * _2770;
        float _2778 = _2775 * _2771;
        float _2779 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_2749].xyz));
        float _4859 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2782 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
        float _2783 = dot(vec3(_733, _734, _735), vec3(_2776, _2777, _2778));
        float _4870 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2786 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
        float _2787 = dot(vec3(cbLight._m0[_2749].xyz), vec3(_2776, _2777, _2778));
        float _4881 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2791 = _2768 * _2768;
        float _2795 = ((_2786 * _2786) * (_2791 + (-1.0))) + 1.0;
        float _2804 = (exp2(log2(1.0 - (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2805 = 1.0 - _2768;
        float _2815 = (0.5 / (((_2562 * ((_2782 * _2805) + _2768)) + 9.9999999392252902907785028219223e-09) + (((_2562 * _2805) + _2768) * _2782))) * _2782;
        float _4892 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2817 = (isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2791 / ((_2795 * _2795) * 3.141590118408203125));
        float _2818 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
        _2743 = (((_2804 * cbLight._m0[_2753].x) * _2817) * _2818) + _2685;
        _2745 = (((_2804 * cbLight._m0[_2753].y) * _2817) * _2818) + _2686;
        _2747 = (((_2804 * cbLight._m0[_2753].z) * _2817) * _2818) + _2687;
    }
    float _2849;
    float _2851;
    float _2853;
    if (_2471)
    {
        _2849 = _2743;
        _2851 = _2745;
        _2853 = _2747;
    }
    else
    {
        uint _2860 = _2286 + 3u;
        uint _2864 = _2286 + 11u;
        float _2878 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2860].w)) * _736) * 0.949999988079071044921875);
        float _2879 = _2878 * _2878;
        float _2880 = cbLight._m0[_2860].x + _812;
        float _2881 = cbLight._m0[_2860].y + _813;
        float _2882 = cbLight._m0[_2860].z + _814;
        float _2886 = inversesqrt(dot(vec3(_2880, _2881, _2882), vec3(_2880, _2881, _2882)));
        float _2887 = _2886 * _2880;
        float _2888 = _2886 * _2881;
        float _2889 = _2886 * _2882;
        float _2890 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_2860].xyz));
        float _4908 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        float _2893 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
        float _2894 = dot(vec3(_733, _734, _735), vec3(_2887, _2888, _2889));
        float _4919 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2897 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
        float _2898 = dot(vec3(cbLight._m0[_2860].xyz), vec3(_2887, _2888, _2889));
        float _4930 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2902 = _2879 * _2879;
        float _2906 = ((_2897 * _2897) * (_2902 + (-1.0))) + 1.0;
        float _2915 = (exp2(log2(1.0 - (isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2916 = 1.0 - _2879;
        float _2926 = (0.5 / (((_2562 * ((_2893 * _2916) + _2879)) + 9.9999999392252902907785028219223e-09) + (((_2562 * _2916) + _2879) * _2893))) * _2893;
        float _4941 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2928 = (isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0))) * (_2902 / ((_2906 * _2906) * 3.141590118408203125));
        float _2929 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        _2849 = (((_2915 * cbLight._m0[_2864].x) * _2928) * _2929) + _2743;
        _2851 = (((_2915 * cbLight._m0[_2864].y) * _2928) * _2929) + _2745;
        _2853 = (((_2915 * cbLight._m0[_2864].z) * _2928) * _2929) + _2747;
    }
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    float _3003;
    float _3005;
    if (_2284.y == 0u)
    {
        uvec4 _2950 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2951 = _2950.x;
        uint _2962 = uint((float(_2950.y) * floor(float(uint(cbSceneParam._m0[85u].y * _833) / _2951))) + floor(float(uint(cbSceneParam._m0[85u].x * _832) / _2951)));
        float _2972 = (log2(_2060 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2973 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
        uint _2976 = uint(isnan(14.0) ? _2973 : (isnan(_2973) ? 14.0 : min(_2973, 14.0)));
        uvec4 _2981 = texelFetch(g_lightClusterGridBuffer, int(((_2976 << 2u) + (_2962 << 6u)) >> 2u));
        uint _2982 = _2981.x;
        uint _2983 = _2950.z;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        if (((((1u << ((_2983 >> 4u) & 15u)) + 4294967295u) & _2982) == 0u) || ((_2983 & 240u) == 0u))
        {
            _3056 = 0.0;
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
            _3064 = 0.0;
            _3066 = 0.0;
        }
        else
        {
            float _3057;
            float _3059;
            float _3061;
            float _3063;
            float _3065;
            float _3067;
            float _3208 = 0.0;
            float _3209 = 0.0;
            float _3210 = 0.0;
            float _3211 = 0.0;
            float _3212 = 0.0;
            float _3213 = 0.0;
            uint _3214 = 0u;
            uint _3223;
            bool _3224;
            for (;;)
            {
                _3223 = texelFetch(g_lightClassification, int((((_2976 << 5u) + (_2962 << 9u)) + (_3214 << 2u)) >> 2u)).x;
                _3224 = _3223 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3224)
                {
                    frontier_phi_71_pred = _3213;
                    frontier_phi_71_pred_1 = _3212;
                    frontier_phi_71_pred_2 = _3211;
                    frontier_phi_71_pred_3 = _3210;
                    frontier_phi_71_pred_4 = _3209;
                    frontier_phi_71_pred_5 = _3208;
                }
                else
                {
                    float _3353;
                    float _3354;
                    float _3355;
                    float _3356;
                    float _3357;
                    float _3358;
                    uint _3359;
                    _3353 = _3208;
                    _3354 = _3209;
                    _3355 = _3210;
                    _3356 = _3211;
                    _3357 = _3212;
                    _3358 = _3213;
                    _3359 = _3223;
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    for (;;)
                    {
                        uint _3363 = uint(findLSB(_3359)) + (_3214 << 5u);
                        uint _3360 = (_3359 + 4294967295u) & _3359;
                        uint _3365 = _3363 * 48u;
                        vec4 _3379 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3365)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 3u)).x));
                        uint _3385 = (_3363 * 48u) + 4u;
                        vec4 _3398 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3385)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 3u)).x));
                        uint _3404 = (_3363 * 48u) + 8u;
                        vec3 _3415 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3404)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 2u)).x));
                        float _3419 = _3379.x - _2058;
                        float _3420 = _3379.y - _2059;
                        float _3421 = _3379.z - _2060;
                        float _3422 = dot(vec3(_3419, _3420, _3421), vec3(_3419, _3420, _3421));
                        float _3425 = inversesqrt(_3422);
                        float _3426 = _3425 * _3419;
                        float _3427 = _3425 * _3420;
                        float _3428 = _3425 * _3421;
                        float _3429 = dot(vec3(_851, _854, _857), vec3(_3426, _3427, _3428));
                        float _3434 = 1.0 - (_3422 * _3379.w);
                        float _4967 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3435 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
                        float _3436 = sqrt(_3422) * _3398.w;
                        float _3439 = 1.39999997615814208984375 / (_3436 + 1.39999997615814208984375);
                        float _3440 = _3439 * _3439;
                        float _3443 = ((1.0 - _3440) * _3429) + _3440;
                        float _3446 = _3436 * _3436;
                        float _3450 = ((isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0))) * _3435) / ((_3446 * 0.699999988079071044921875) + 1.0);
                        float _3454 = (-0.0) - _2058;
                        float _3455 = (-0.0) - _2059;
                        float _3456 = (-0.0) - _2060;
                        float _3460 = inversesqrt(dot(vec3(_3454, _3455, _3456), vec3(_3454, _3455, _3456)));
                        float _3461 = _3460 * _3454;
                        float _3462 = _3460 * _3455;
                        float _3463 = _3460 * _3456;
                        float _3470 = exp2(log2(1.0 / ((_3446 * 3.5) + 5.0)) * 0.25);
                        float _3471 = 1.0 - _914;
                        float _3478 = sqrt(1.0 - ((1.0 - (_3471 * _3471)) * (1.0 - (_3470 * _3470))));
                        float _3479 = _3478 * _3478;
                        float _3480 = _3479 * _3479;
                        float _3481 = _3461 + _3426;
                        float _3482 = _3462 + _3427;
                        float _3483 = _3463 + _3428;
                        float _3487 = inversesqrt(dot(vec3(_3481, _3482, _3483), vec3(_3481, _3482, _3483)));
                        float _3491 = dot(vec3(_851, _854, _857), vec3(_3461, _3462, _3463));
                        float _4983 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                        float _3494 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                        float _3495 = dot(vec3(_851, _854, _857), vec3(_3487 * _3481, _3487 * _3482, _3487 * _3483));
                        float _4994 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                        float _3498 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
                        float _3502 = ((_3498 * _3498) * (_3480 + (-1.0))) + 1.0;
                        float _3503 = _3439 * _3479;
                        float _3504 = _3503 * _3503;
                        float _3507 = ((1.0 - _3504) * _3429) + _3504;
                        float _5005 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                        float _3508 = isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0));
                        float _3509 = 1.0 - _3479;
                        float _3519 = (0.5 / (((_3508 * ((_3494 * _3509) + _3479)) + 9.9999999392252902907785028219223e-09) + (((_3508 * _3509) + _3479) * _3494))) * _3508;
                        float _5016 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                        float _3530 = (((_3480 * 3.1415927410125732421875) * (isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0)))) / ((_3502 * _3502) * ((_3446 * 2.1991131305694580078125) + 3.141590118408203125))) * _3435;
                        _3283 = (_3450 * _3398.x) + _3356;
                        _3284 = (_3450 * _3398.y) + _3357;
                        _3285 = (_3450 * _3398.z) + _3358;
                        _3280 = (_3530 * _3415.x) + _3353;
                        _3281 = (_3530 * _3415.y) + _3354;
                        _3282 = (_3530 * _3415.z) + _3355;
                        if (_3360 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3353 = _3280;
                            _3354 = _3281;
                            _3355 = _3282;
                            _3356 = _3283;
                            _3357 = _3284;
                            _3358 = _3285;
                            _3359 = _3360;
                        }
                    }
                    frontier_phi_71_pred = _3285;
                    frontier_phi_71_pred_1 = _3284;
                    frontier_phi_71_pred_2 = _3283;
                    frontier_phi_71_pred_3 = _3282;
                    frontier_phi_71_pred_4 = _3281;
                    frontier_phi_71_pred_5 = _3280;
                }
                _3067 = frontier_phi_71_pred;
                _3065 = frontier_phi_71_pred_1;
                _3063 = frontier_phi_71_pred_2;
                _3061 = frontier_phi_71_pred_3;
                _3059 = frontier_phi_71_pred_4;
                _3057 = frontier_phi_71_pred_5;
                uint _3215 = _3214 + 1u;
                if (_3215 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3208 = _3057;
                    _3209 = _3059;
                    _3210 = _3061;
                    _3211 = _3063;
                    _3212 = _3065;
                    _3213 = _3067;
                    _3214 = _3215;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3056 = _3057;
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
            _3064 = _3065;
            _3066 = _3067;
        }
        uvec4 _3070 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3071 = _3070.z;
        uint _3073 = (_3071 >> 8u) & 15u;
        float _3176;
        float _3178;
        float _3180;
        float _3182;
        float _3184;
        float _3186;
        if (((4294967295u << _3073) & _2982) == 0u)
        {
            _3176 = _3056;
            _3178 = _3058;
            _3180 = _3060;
            _3182 = _3062;
            _3184 = _3064;
            _3186 = _3066;
        }
        else
        {
            float _3201 = inversesqrt(dot(vec3(_2058, _2059, _2060), vec3(_2058, _2059, _2060)));
            float _3202 = _3201 * _2058;
            float _3203 = _3201 * _2059;
            float _3204 = _3201 * _2060;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3073 < ((_3071 >> 12u) & 15u))
            {
                float _3177;
                float _3179;
                float _3181;
                float _3183;
                float _3185;
                float _3187;
                float _3336 = _3056;
                float _3337 = _3058;
                float _3338 = _3060;
                float _3339 = _3062;
                float _3340 = _3064;
                float _3341 = _3066;
                uint _3342 = _3073;
                uint _3351;
                bool _3352;
                for (;;)
                {
                    _3351 = texelFetch(g_lightClassification, int((((_2976 << 5u) + (_2962 << 9u)) + (_3342 << 2u)) >> 2u)).x;
                    _3352 = _3351 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3352)
                    {
                        frontier_phi_82_pred = _3341;
                        frontier_phi_82_pred_1 = _3340;
                        frontier_phi_82_pred_2 = _3339;
                        frontier_phi_82_pred_3 = _3338;
                        frontier_phi_82_pred_4 = _3337;
                        frontier_phi_82_pred_5 = _3336;
                    }
                    else
                    {
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3837;
                        float _3838;
                        float _3839;
                        float _3840;
                        float _3841;
                        float _3842;
                        float _3557 = _3336;
                        float _3558 = _3337;
                        float _3559 = _3338;
                        float _3560 = _3339;
                        float _3561 = _3340;
                        float _3562 = _3341;
                        uint _3563 = _3351;
                        uint _3564;
                        vec4 _3589;
                        float _3590;
                        vec4 _3605;
                        vec3 _3617;
                        vec4 _3632;
                        vec4 _3647;
                        float _3693;
                        bool _3694;
                        for (;;)
                        {
                            uint _3574 = ((_3342 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3563));
                            _3564 = (_3563 + 4294967295u) & _3563;
                            uint _3576 = _3574 * 40u;
                            _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            _3590 = _3589.w;
                            uint _3592 = (_3574 * 40u) + 4u;
                            _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            uint _3607 = (_3574 * 40u) + 8u;
                            _3617 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x));
                            uint _3619 = (_3574 * 40u) + 16u;
                            _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            uint _3634 = (_3574 * 40u) + 20u;
                            _3647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 3u)).x));
                            uint _3649 = (_3574 * 40u) + 24u;
                            vec4 _3662 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 3u)).x));
                            uint _3668 = (_3574 * 40u) + 28u;
                            vec4 _3681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 3u)).x));
                            _3693 = fma(_2060, _3681.z, fma(_2059, _3681.y, _3681.x * _2058)) + _3681.w;
                            _3694 = !((fma(_2060, _3662.z, fma(_2059, _3662.y, _3662.x * _2058)) + _3662.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3694)
                            {
                                float _3721 = _3589.x - _2058;
                                float _3722 = _3589.y - _2059;
                                float _3723 = _3589.z - _2060;
                                float _3724 = dot(vec3(_3721, _3722, _3723), vec3(_3721, _3722, _3723));
                                float _3727 = inversesqrt(_3724);
                                float _3728 = _3727 * _3721;
                                float _3729 = _3727 * _3722;
                                float _3730 = _3727 * _3723;
                                float _3734 = 1.0 - (_3724 / (_3590 * _3590));
                                float _5027 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3735 = isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0));
                                float _3739 = sqrt(_3724) * _3605.w;
                                float _3741 = 1.39999997615814208984375 / (_3739 + 1.39999997615814208984375);
                                float _3742 = _3741 * _3741;
                                float _3745 = ((1.0 - _3742) * dot(vec3(_3728, _3729, _3730), vec3(_851, _854, _857))) + _3742;
                                float _3748 = _3739 * _3739;
                                float _3752 = (fma(_2060, _3632.z, fma(_2059, _3632.y, _3632.x * _2058)) + _3632.w) / _3693;
                                float _3753 = (fma(_2060, _3647.z, fma(_2059, _3647.y, _3647.x * _2058)) + _3647.w) / _3693;
                                float _3757 = 1.0 - dot(vec2(_3752, _3753), vec2(_3752, _3753));
                                float _5043 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3758 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
                                float _3759 = _3758 * (((isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0))) * _3735) / ((_3748 * 0.699999988079071044921875) + 1.0));
                                float _3771 = exp2(log2(1.0 / ((_3748 * 3.5) + 5.0)) * 0.25);
                                float _3772 = 1.0 - _914;
                                float _3779 = sqrt(1.0 - ((1.0 - (_3772 * _3772)) * (1.0 - (_3771 * _3771))));
                                float _3780 = _3779 * _3779;
                                float _3781 = _3780 * _3780;
                                float _3782 = _3728 - _3202;
                                float _3783 = _3729 - _3203;
                                float _3784 = _3730 - _3204;
                                float _3788 = inversesqrt(dot(vec3(_3782, _3783, _3784), vec3(_3782, _3783, _3784)));
                                float _3792 = dot(vec3(_851, _854, _857), vec3((-0.0) - _3202, (-0.0) - _3203, (-0.0) - _3204));
                                float _5054 = isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0));
                                float _3795 = isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0));
                                float _3796 = dot(vec3(_851, _854, _857), vec3(_3788 * _3782, _3788 * _3783, _3788 * _3784));
                                float _5065 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3799 = isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0));
                                float _3803 = ((_3799 * _3799) * (_3781 + (-1.0))) + 1.0;
                                float _3804 = _3741 * _3780;
                                float _3805 = _3804 * _3804;
                                float _3811 = ((1.0 - _3805) * dot(vec3(_851, _854, _857), vec3(_3728, _3729, _3730))) + _3805;
                                float _5076 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3812 = isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0));
                                float _3813 = 1.0 - _3780;
                                float _3823 = (0.5 / (((_3812 * ((_3795 * _3813) + _3780)) + 9.9999999392252902907785028219223e-09) + (((_3812 * _3813) + _3780) * _3795))) * _3812;
                                float _5087 = isnan(0.0) ? _3823 : (isnan(_3823) ? 0.0 : max(_3823, 0.0));
                                float _3833 = (_3758 * _3735) * (((_3781 * 3.1415927410125732421875) * (isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0)))) / ((_3803 * _3803) * ((_3748 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3759 * _3605.z;
                                frontier_phi_88_pred_1 = _3759 * _3605.y;
                                frontier_phi_88_pred_2 = _3759 * _3605.x;
                                frontier_phi_88_pred_3 = _3833 * _3617.z;
                                frontier_phi_88_pred_4 = _3833 * _3617.y;
                                frontier_phi_88_pred_5 = _3833 * _3617.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3842 = frontier_phi_88_pred;
                            _3841 = frontier_phi_88_pred_1;
                            _3840 = frontier_phi_88_pred_2;
                            _3839 = frontier_phi_88_pred_3;
                            _3838 = frontier_phi_88_pred_4;
                            _3837 = frontier_phi_88_pred_5;
                            _3547 = _3840 + _3560;
                            _3548 = _3841 + _3561;
                            _3549 = _3842 + _3562;
                            _3544 = _3837 + _3557;
                            _3545 = _3838 + _3558;
                            _3546 = _3839 + _3559;
                            if (_3564 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3557 = _3544;
                                _3558 = _3545;
                                _3559 = _3546;
                                _3560 = _3547;
                                _3561 = _3548;
                                _3562 = _3549;
                                _3563 = _3564;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3549;
                        frontier_phi_82_pred_1 = _3548;
                        frontier_phi_82_pred_2 = _3547;
                        frontier_phi_82_pred_3 = _3546;
                        frontier_phi_82_pred_4 = _3545;
                        frontier_phi_82_pred_5 = _3544;
                    }
                    _3187 = frontier_phi_82_pred;
                    _3185 = frontier_phi_82_pred_1;
                    _3183 = frontier_phi_82_pred_2;
                    _3181 = frontier_phi_82_pred_3;
                    _3179 = frontier_phi_82_pred_4;
                    _3177 = frontier_phi_82_pred_5;
                    uint _3343 = _3342 + 1u;
                    if (_3343 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3336 = _3177;
                        _3337 = _3179;
                        _3338 = _3181;
                        _3339 = _3183;
                        _3340 = _3185;
                        _3341 = _3187;
                        _3342 = _3343;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3183;
                frontier_phi_63_64_ladder_1 = _3187;
                frontier_phi_63_64_ladder_2 = _3185;
                frontier_phi_63_64_ladder_3 = _3181;
                frontier_phi_63_64_ladder_4 = _3179;
                frontier_phi_63_64_ladder_5 = _3177;
            }
            else
            {
                frontier_phi_63_64_ladder = _3062;
                frontier_phi_63_64_ladder_1 = _3066;
                frontier_phi_63_64_ladder_2 = _3064;
                frontier_phi_63_64_ladder_3 = _3060;
                frontier_phi_63_64_ladder_4 = _3058;
                frontier_phi_63_64_ladder_5 = _3056;
            }
            _3176 = frontier_phi_63_64_ladder_5;
            _3178 = frontier_phi_63_64_ladder_4;
            _3180 = frontier_phi_63_64_ladder_3;
            _3182 = frontier_phi_63_64_ladder;
            _3184 = frontier_phi_63_64_ladder_2;
            _3186 = frontier_phi_63_64_ladder_1;
        }
        float _3191 = isnan(1.0) ? _895 : (isnan(_895) ? 1.0 : min(_895, 1.0));
        _2995 = (_3191 * _3182) + _2526;
        _2997 = (_3191 * _3184) + _2528;
        _2999 = (_3191 * _3186) + _2530;
        _3001 = ((_3176 * 0.039999999105930328369140625) * _3191) + _2849;
        _3003 = ((_3178 * 0.039999999105930328369140625) * _3191) + _2851;
        _3005 = ((_3180 * 0.039999999105930328369140625) * _3191) + _2853;
    }
    else
    {
        _2995 = _2526;
        _2997 = _2528;
        _2999 = _2530;
        _3001 = _2849;
        _3003 = _2851;
        _3005 = _2853;
    }
    float _5103 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _5114 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _5125 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _3022 = ((isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0))) * (_2995 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _895))) + (((((_1942 * (_1990.x / _1996)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1733) * _2011)) + _3001) * cbPerFrame._m0[3u].x);
    float _3023 = ((isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0))) * (_2997 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _895))) + (((((_1942 * (_1990.y / _1996)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1733) * _2011)) + _3003) * cbPerFrame._m0[3u].x);
    float _3024 = ((isnan(1.0) ? _5125 : (isnan(_5125) ? 1.0 : min(_5125, 1.0))) * (_2999 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _895))) + (((((_1942 * (_1990.z / _1996)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1733) * _2011)) + _3005) * cbPerFrame._m0[3u].x);
    uint _3025 = _279 + 6u;
    vec4 _3042 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1965, _1966, (log2((isnan(cbSceneParam._m0[77u].w) ? _754 : (isnan(_754) ? cbSceneParam._m0[77u].w : min(_754, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3044 = _3042.x;
    float _3045 = _3042.y;
    float _3046 = _3042.z;
    float _3047 = _3042.w;
    float _3119;
    float _3121;
    float _3123;
    float _3125;
    if (_754 > cbSceneParam._m0[78u].w)
    {
        float _3081 = isnan(_754) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _754 : min(cbSceneParam._m0[80u].w, _754));
        float _3082 = _3081 / _754;
        float _3093 = _3082 * _805;
        float _3094 = _806 * _3082;
        float _3095 = (-0.0) - _3094;
        float _3097 = _3082 * _807;
        float _3099 = (cbSceneParam._m0[77u].w * _3095) / _3081;
        float _3100 = _3099 + cbSceneParam._m0[79u].w;
        float _3101 = cbSceneParam._m0[79u].w - _3094;
        float _3107 = sqrt(((_3093 * _3093) + (_3094 * _3094)) + (_3097 * _3097));
        float _3110 = (1.0 - (cbSceneParam._m0[77u].w / _3081)) * _3107;
        float _3115 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3117 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3293;
        if (abs((_3095 - _3099) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3293 = ((((_3100 > 0.0) ? exp2(_3115 * _3100) : (2.0 - exp2(_3117 * _3100))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3110;
        }
        else
        {
            float _3237 = 1.0 / cbSceneParam._m0[80u].x;
            float _3238 = isnan(_3101) ? _3100 : (isnan(_3100) ? _3101 : max(_3100, _3101));
            float _3239 = isnan(_3101) ? _3100 : (isnan(_3100) ? _3101 : min(_3100, _3101));
            float _3248 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : min(_3238, 0.0));
            float _3249 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : min(_3239, 0.0));
            _3293 = ((abs(_3107 / _3095) * cbSceneParam._m0[80u].y) * ((((_3248 - _3249) * 2.0) - ((exp2(_3115 * (isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0)))) - exp2(_3115 * (isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0))))) * _3237)) - ((exp2(_3117 * _3248) - exp2(_3117 * _3249)) * _3237))) + (_3110 * cbSceneParam._m0[80u].z);
        }
        vec4 _3295 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1965, _1966, 1.0), 0.0);
        float _3304 = exp2((_3293 * (-1.44269502162933349609375)) * (1.0 - _3295.w));
        float _3305 = log2(_3304);
        float _3321 = log2(_3047);
        _3119 = (exp2(_3321 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3305 * cbSceneParam._m0[78u].x)) * _3295.x) / cbSceneParam._m0[78u].x)) + _3044;
        _3121 = (exp2(_3321 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3305 * cbSceneParam._m0[78u].y)) * _3295.y) / cbSceneParam._m0[78u].y)) + _3045;
        _3123 = (exp2(_3321 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3305 * cbSceneParam._m0[78u].z)) * _3295.z) / cbSceneParam._m0[78u].z)) + _3046;
        _3125 = _3304 * _3047;
    }
    else
    {
        _3119 = _3044;
        _3121 = _3045;
        _3123 = _3046;
        _3125 = _3047;
    }
    bool _3331;
    vec4 _3134;
    vec4 _3156;
    float _3158;
    float _3162;
    float _3163;
    float _3164;
    float _3165;
    bool _3175;
    for (;;)
    {
        _3134 = cbMatDynParam._m0[0u];
        float _3136 = roundEven(_3134.y);
        bool _3137 = _3136 == 3.0;
        float _3138 = log2(_3125);
        float _3145 = exp2(_3138 * cbSceneParam._m0[78u].x) * _3022;
        float _3146 = exp2(_3138 * cbSceneParam._m0[78u].y) * _3023;
        float _3147 = exp2(_3138 * cbSceneParam._m0[78u].z) * _3024;
        float _3154 = _821 + (-0.5);
        _3156 = cbMtdParam._m0[1u];
        _3158 = _3156.y * _3154;
        float _3161 = (_3136 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3162 = _3161 * (_3137 ? _3145 : (_3145 + (cbSceneParam._m0[72u].w * _3119)));
        _3163 = _3161 * (_3137 ? _3146 : (_3146 + (cbSceneParam._m0[72u].w * _3121)));
        _3164 = _3161 * (_3137 ? _3147 : (_3147 + (cbSceneParam._m0[72u].w * _3123)));
        _3165 = _3154 * 0.999000012874603271484375;
        _3175 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3175)
        {
            if ((cbInstanceData._m0[_279 + 7u].x + _3165) < 0.5)
            {
                _3331 = true;
                break;
            }
        }
        uint _3272 = _870 + uint(_3134.w);
        if ((cbInstanceData._m0[_3272].w < 1.0) && ((cbInstanceData._m0[_3272].w + _3165) < 0.5))
        {
            _3331 = true;
            break;
        }
        if ((_3158 + _331) < _3156.x)
        {
            _3331 = true;
            break;
        }
        _3331 = false;
        break;
    }
    float _3535;
    if (_3331)
    {
        discard_state = true;
        _3535 = 0.0;
    }
    else
    {
        _3535 = cbInstanceData._m0[_3025].w;
    }
    SV_Target.x = _3162;
    SV_Target.y = _3163;
    SV_Target.z = _3164;
    SV_Target.w = _3535;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3025].w;
    discard_exit();
}


