#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[33];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _882;
float _3586;
float _3587;
float _3588;
float _3589;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _235 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.w;
    float _242 = _235.x * cbMtdParam._m0[9u].x;
    float _243 = _235.y * cbMtdParam._m0[9u].y;
    float _244 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _257 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _266 = cbMtdParam._m0[25u].z * _257.z;
    float _3598 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _268 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    float _272 = (_257.x * 2.0) + (-1.0);
    float _274 = (_257.y * 2.0) + (-1.0);
    float _275 = dot(vec2(_272, _274), vec2(_272, _274));
    float _3609 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _280 = sqrt(1.0 - (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))));
    float _286 = (cbMtdParam._m0[26u].y * (1.0 - _268)) + _268;
    float _3620 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _287 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _292 = cbMtdParam._m0[22u].x + _257.w;
    float _297 = fma(_280, _205 * NORMAL.x, fma(_274, _212 * TANGENT.x, (_198 * _190) * _272));
    float _300 = fma(_280, _205 * NORMAL.y, fma(_274, _212 * TANGENT.y, (_198 * _191) * _272));
    float _303 = fma(_280, _205 * NORMAL.z, fma(_274, _212 * TANGENT.z, (_198 * _192) * _272));
    float _307 = inversesqrt(dot(vec3(_297, _300, _303), vec3(_297, _300, _303)));
    float _308 = _307 * _297;
    float _309 = _307 * _300;
    float _310 = _307 * _303;
    float _3631 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _311 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _3642 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _3653 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3664 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3675 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _331 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _373 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _383 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _373);
    float _384 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _373);
    float _385 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _373);
    float _389 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _390 = _383 * _389;
    float _391 = _384 * _389;
    float _392 = _385 * _389;
    vec4 _397 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _399 = _397.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _561 = sqrt(((_383 * _383) + (_384 * _384)) + (_385 * _385));
        float _567 = (cbMatDynParam._m0[5u].x * _561) + cbMatDynParam._m0[5u].y;
        float _3686 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
        float _568 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _572 = (cbMatDynParam._m0[5u].z * _561) + cbMatDynParam._m0[5u].w;
        float _3697 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) - _568)) + _568) < ((_399 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _411 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _412 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _432 = fma(_310, cbSceneParam._m0[5u].z, fma(_309, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _308));
    float _435 = fma(_310, cbSceneParam._m0[6u].z, fma(_309, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _308));
    float _438 = fma(_310, cbSceneParam._m0[7u].z, fma(_309, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _308));
    uint _451 = uint(roundEven(NORMAL.w)) * 13u;
    uint _453 = _451 + 9u;
    uint _454 = _453 + uint(cbMatDynParam._m0[0u].w);
    float _460 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0)))) * cbInstanceData._m0[_454].x;
    float _461 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0)))) * cbInstanceData._m0[_454].y;
    float _462 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0)))) * cbInstanceData._m0[_454].z;
    float _3708 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _3719 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _464 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _3730 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _465 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    vec4 _474 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _411, cbSceneParam._m0[86u].y * _412));
    float _478 = ((isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * TEXCOORD_5.w) * _474.x;
    float _479 = dot(vec3(_308, _309, _310), vec3(_390, _391, _392));
    float _482 = _479 * 2.0;
    float _486 = (_482 * _308) - _390;
    float _487 = (_482 * _309) - _391;
    float _488 = (_482 * _310) - _392;
    float _495 = abs(dot(vec3(_390, _391, _392), vec3(_308, _309, _310)));
    float _3741 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _497 = sqrt(_311);
    float _510 = exp2((_497 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_497 * 3.0));
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _550 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _881;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _606 = fma(_550, cbModelParam._m0[26u].z, fma(_546, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _542));
        float _610 = fma(_550, cbModelParam._m0[27u].z, fma(_546, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _542));
        float _614 = fma(_550, cbModelParam._m0[28u].z, fma(_546, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _542));
        float _639 = _542 + _308;
        float _640 = _546 + _309;
        float _641 = _550 + _310;
        float _651 = fma(_641, cbModelParam._m0[26u].z, fma(_640, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _639)) - _606;
        float _652 = fma(_641, cbModelParam._m0[27u].z, fma(_640, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _639)) - _610;
        float _653 = fma(_641, cbModelParam._m0[28u].z, fma(_640, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _639)) - _614;
        float _657 = inversesqrt(dot(vec3(_651, _652, _653), vec3(_651, _652, _653)));
        float _670 = ((_657 * _651) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_606 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _671 = ((_657 * _652) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_610 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _672 = ((_657 * _653) / cbModelParam._m0[34u].z) + ((((((_614 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_670, _671, _672), 0.0);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_670, _671, _672), 0.0);
        vec4 _689 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_670, _671, _672), 0.0);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_670, _671, _672), 0.0);
        float _709 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _710 = _709 * (_675.x + (-0.5));
        float _711 = _709 * (_675.y + (-0.5));
        float _712 = _709 * (_675.z + (-0.5));
        float _719 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _720 = _719 * (_682.x + (-0.5));
        float _721 = _719 * (_682.y + (-0.5));
        float _722 = _719 * (_682.z + (-0.5));
        float _729 = exp2((_689.w + (-0.5)) * 20.0) * 2.0;
        float _730 = _729 * (_689.x + (-0.5));
        float _731 = _729 * (_689.y + (-0.5));
        float _732 = _729 * (_689.z + (-0.5));
        float _739 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _740 = _739 * (_696.x + (-0.5));
        float _741 = _739 * (_696.y + (-0.5));
        float _742 = _739 * (_696.z + (-0.5));
        float _743 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _744 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _746 = _710 * 0.5;
        float _747 = _720 * 0.5;
        float _748 = _730 * 0.5;
        float _749 = dot(vec3(_746, _747, _748), vec3(_746, _747, _748));
        float _754 = (_749 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_749);
        float _763 = (dot(vec3(_308, _309, _310), vec3(_754 * _746, _754 * _747, _754 * _748)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _773 = sqrt(((_747 * _747) + (_746 * _746)) + (_748 * _748)) / (_743 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _775 = _774 * 2.0;
        float _779 = (1.0 - _774) / (_774 + 1.0);
        float _3789 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _789 = ((((1.0 - _780) * (_775 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_775 + 1.0))) + _780) * _743;
        float _790 = _711 * 0.5;
        float _791 = _721 * 0.5;
        float _792 = _731 * 0.5;
        float _793 = dot(vec3(_790, _791, _792), vec3(_790, _791, _792));
        float _798 = (_793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_793);
        float _806 = (dot(vec3(_308, _309, _310), vec3(_798 * _790, _798 * _791, _798 * _792)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _815 = sqrt(((_791 * _791) + (_790 * _790)) + (_792 * _792)) / (_744 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _817 = _816 * 2.0;
        float _821 = (1.0 - _816) / (_816 + 1.0);
        float _3822 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _831 = ((((1.0 - _822) * (_817 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_817 + 1.0))) + _822) * _744;
        float _832 = _712 * 0.5;
        float _833 = _722 * 0.5;
        float _834 = _732 * 0.5;
        float _835 = dot(vec3(_832, _833, _834), vec3(_832, _833, _834));
        float _840 = (_835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_835);
        float _848 = (dot(vec3(_308, _309, _310), vec3(_840 * _832, _840 * _833, _840 * _834)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _857 = sqrt(((_833 * _833) + (_832 * _832)) + (_834 * _834)) / (_745 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _859 = _858 * 2.0;
        float _863 = (1.0 - _858) / (_858 + 1.0);
        float _3855 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _873 = ((((1.0 - _864) * (_859 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_859 + 1.0))) + _864) * _745;
        _881 = _712;
        _883 = _711;
        _884 = _710;
        _885 = _722;
        _886 = _721;
        _887 = _720;
        _888 = _732;
        _889 = _731;
        _890 = _730;
        _891 = _745;
        _892 = _744;
        _893 = _743;
        _894 = cbModelParam._m0[36u].z * (isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0)));
        _895 = cbModelParam._m0[36u].z * (isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0)));
        _896 = cbModelParam._m0[36u].z * (isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0)));
    }
    else
    {
        _881 = _882;
        _883 = _882;
        _884 = _882;
        _885 = _882;
        _886 = _882;
        _887 = _882;
        _888 = _882;
        _889 = _882;
        _890 = _882;
        _891 = _882;
        _892 = _882;
        _893 = _882;
        _894 = 0.0;
        _895 = 0.0;
        _896 = 0.0;
    }
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _925 = fma(_550, cbModelParam._m0[30u].z, fma(_546, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _542));
        float _929 = fma(_550, cbModelParam._m0[31u].z, fma(_546, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _542));
        float _933 = fma(_550, cbModelParam._m0[32u].z, fma(_546, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _542));
        float _956 = _542 + _308;
        float _957 = _546 + _309;
        float _958 = _550 + _310;
        float _968 = fma(_958, cbModelParam._m0[30u].z, fma(_957, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _956)) - _925;
        float _969 = fma(_958, cbModelParam._m0[31u].z, fma(_957, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _956)) - _929;
        float _970 = fma(_958, cbModelParam._m0[32u].z, fma(_957, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _956)) - _933;
        float _974 = inversesqrt(dot(vec3(_968, _969, _970), vec3(_968, _969, _970)));
        float _987 = ((_974 * _968) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_925 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_974 * _969) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_929 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _989 = ((_974 * _970) / cbModelParam._m0[35u].z) + ((((((_933 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        float _1024 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_991.x + (-0.5));
        float _1026 = _1024 * (_991.y + (-0.5));
        float _1027 = _1024 * (_991.z + (-0.5));
        float _1034 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_998.x + (-0.5));
        float _1036 = _1034 * (_998.y + (-0.5));
        float _1037 = _1034 * (_998.z + (-0.5));
        float _1044 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1005.x + (-0.5));
        float _1046 = _1044 * (_1005.y + (-0.5));
        float _1047 = _1044 * (_1005.z + (-0.5));
        float _1054 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1012.x + (-0.5));
        float _1056 = _1054 * (_1012.y + (-0.5));
        float _1057 = _1054 * (_1012.z + (-0.5));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = _1025 * 0.5;
        float _1062 = _1035 * 0.5;
        float _1063 = _1045 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_308, _309, _310), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3896 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3907 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3918 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1088 + 1.0))) + _1093) * _1058;
        float _1103 = _1026 * 0.5;
        float _1104 = _1036 * 0.5;
        float _1105 = _1046 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_308, _309, _310), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3951 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1130 + 1.0))) + _1135) * _1059;
        float _1145 = _1027 * 0.5;
        float _1146 = _1037 * 0.5;
        float _1147 = _1047 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_308, _309, _310), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3984 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1172 + 1.0))) + _1177) * _1060;
        _1194 = _1027;
        _1195 = _1026;
        _1196 = _1025;
        _1197 = _1037;
        _1198 = _1036;
        _1199 = _1035;
        _1200 = _1047;
        _1201 = _1046;
        _1202 = _1045;
        _1203 = _1060;
        _1204 = _1059;
        _1205 = _1058;
        _1206 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
        _1207 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1208 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
    }
    else
    {
        _1194 = _882;
        _1195 = _882;
        _1196 = _882;
        _1197 = _882;
        _1198 = _882;
        _1199 = _882;
        _1200 = _882;
        _1201 = _882;
        _1202 = _882;
        _1203 = _882;
        _1204 = _882;
        _1205 = _882;
        _1206 = 0.0;
        _1207 = 0.0;
        _1208 = 0.0;
    }
    float _1218 = (cbModelParam._m0[1u].x * (_1206 - _894)) + _894;
    float _1219 = (cbModelParam._m0[1u].x * (_1207 - _895)) + _895;
    float _1220 = (cbModelParam._m0[1u].x * (_1208 - _896)) + _896;
    float _1241 = fma(_1220, cbSceneParam._m0[89u].z, fma(_1219, cbSceneParam._m0[89u].y, _1218 * cbSceneParam._m0[89u].x));
    float _1244 = fma(_1220, cbSceneParam._m0[90u].z, fma(_1219, cbSceneParam._m0[90u].y, _1218 * cbSceneParam._m0[90u].x));
    float _1247 = fma(_1220, cbSceneParam._m0[91u].z, fma(_1219, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1218));
    float _1262 = _486 * 0.5;
    float _1263 = _487 * 0.5;
    float _1264 = _488 * 0.5;
    float _1265 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_1196, _1199, _1202, _1205));
    float _1268 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_1195, _1198, _1201, _1204));
    float _1271 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_1194, _1197, _1200, _1203));
    float _1305;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1278 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_881, _885, _888, _891));
        float _1282 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_883, _886, _889, _892));
        float _1286 = dot(vec4(_1262, _1263, _1264, 1.0), vec4(_884, _887, _890, _893));
        float _1293 = dot(vec4(cbModelParam._m0[39u]), vec4(_1262, _1263, _1264, 1.0));
        _1305 = dot(vec3(isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1293) ? 0.0 : (isnan(0.0) ? _1293 : max(0.0, _1293))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1305 = 1.0;
    }
    float _1316;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1307 = dot(vec4(cbModelParam._m0[40u]), vec4(_1262, _1263, _1264, 1.0));
        _1316 = dot(vec3(isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)), isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1307) ? 0.0 : (isnan(0.0) ? _1307 : max(0.0, _1307))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1316 = 1.0;
    }
    float _1320 = (_1316 * cbModelParam._m0[1u].x) + (_1305 * (1.0 - cbModelParam._m0[1u].x));
    float _1330 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _311);
    float _1331 = isnan(_1330) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1330 : min(cbModelParam._m0[25u].z, _1330));
    float _1413;
    float _1415;
    float _1417;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1380 = fma(_550, cbModelParam._m0[13u].z, fma(_546, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _542)) + cbModelParam._m0[13u].w;
        float _1384 = fma(_550, cbModelParam._m0[14u].z, fma(_546, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _542)) + cbModelParam._m0[14u].w;
        float _1388 = fma(_550, cbModelParam._m0[15u].z, fma(_546, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _542)) + cbModelParam._m0[15u].w;
        float _1391 = fma(_488, cbModelParam._m0[13u].z, fma(_487, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _486));
        float _1394 = fma(_488, cbModelParam._m0[14u].z, fma(_487, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _486));
        float _1397 = fma(_488, cbModelParam._m0[15u].z, fma(_487, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _486));
        float _1425;
        if (_1391 > 0.0)
        {
            _1425 = abs((1.0 - _1380) / _1391);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1380 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1425 = frontier_phi_17_15_ladder;
        }
        float _1655;
        if (_1394 > 0.0)
        {
            _1655 = abs((1.0 - _1384) / _1394);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1394 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1384 + 1.0) / _1394);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1655 = frontier_phi_26_22_ladder;
        }
        float _1953;
        if (_1397 > 0.0)
        {
            _1953 = abs((1.0 - _1388) / _1397);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1397 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1388 + 1.0) / _1397);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1953 = frontier_phi_38_33_ladder;
        }
        float _1955 = isnan(_1655) ? _1425 : (isnan(_1425) ? _1655 : min(_1425, _1655));
        float _1956 = isnan(_1953) ? _1955 : (isnan(_1955) ? _1953 : min(_1955, _1953));
        float _1960 = (_1956 * _1391) + _1380;
        float _1961 = (_1956 * _1394) + _1384;
        float _1962 = (_1956 * _1397) + _1388;
        float _1963 = _1956 * 9.9999997473787516355514526367188e-05;
        float _1965 = (-1.0) - _1963;
        float _1967 = _1963 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1962 > _1967) || ((_1962 < _1965) || ((_1961 > _1967) || ((_1961 < _1965) || ((_1960 < _1965) || (_1960 > _1967))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2107 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1962, cbModelParam._m0[9u].z, fma(_1961, cbModelParam._m0[9u].y, _1960 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1962, cbModelParam._m0[10u].z, fma(_1961, cbModelParam._m0[10u].y, _1960 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1962, cbModelParam._m0[11u].z, fma(_1961, cbModelParam._m0[11u].y, _1960 * cbModelParam._m0[11u].x))), _1331);
            frontier_phi_16_38_ladder = _2107.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2107.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2107.x * cbModelParam._m0[1u].y;
        }
        _1413 = frontier_phi_16_38_ladder_2;
        _1415 = frontier_phi_16_38_ladder_1;
        _1417 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1401 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_486, _487, _488), _1331);
        _1413 = _1401.x * cbModelParam._m0[1u].y;
        _1415 = _1401.y * cbModelParam._m0[1u].y;
        _1417 = _1401.z * cbModelParam._m0[1u].y;
    }
    float _1421 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _311);
    float _1422 = isnan(_1421) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1421 : min(cbModelParam._m0[25u].w, _1421));
    float _1514;
    float _1516;
    float _1518;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1478 = fma(_550, cbModelParam._m0[21u].z, fma(_546, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _542)) + cbModelParam._m0[21u].w;
        float _1482 = fma(_550, cbModelParam._m0[22u].z, fma(_546, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _542)) + cbModelParam._m0[22u].w;
        float _1486 = fma(_550, cbModelParam._m0[23u].z, fma(_546, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _542)) + cbModelParam._m0[23u].w;
        float _1489 = fma(_488, cbModelParam._m0[21u].z, fma(_487, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _486));
        float _1492 = fma(_488, cbModelParam._m0[22u].z, fma(_487, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _486));
        float _1495 = fma(_488, cbModelParam._m0[23u].z, fma(_487, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _486));
        float _1660;
        if (_1489 > 0.0)
        {
            _1660 = abs((1.0 - _1478) / _1489);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1478 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1660 = frontier_phi_28_24_ladder;
        }
        float _1980;
        if (_1492 > 0.0)
        {
            _1980 = abs((1.0 - _1482) / _1492);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1482 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1980 = frontier_phi_40_35_ladder;
        }
        float _2307;
        if (_1495 > 0.0)
        {
            _2307 = abs((1.0 - _1486) / _1495);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1486 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2307 = frontier_phi_50_47_ladder;
        }
        float _2309 = isnan(_1980) ? _1660 : (isnan(_1660) ? _1980 : min(_1660, _1980));
        float _2310 = isnan(_2307) ? _2309 : (isnan(_2309) ? _2307 : min(_2309, _2307));
        float _2314 = (_2310 * _1489) + _1478;
        float _2315 = (_2310 * _1492) + _1482;
        float _2316 = (_2310 * _1495) + _1486;
        float _2317 = _2310 * 9.9999997473787516355514526367188e-05;
        float _2318 = (-1.0) - _2317;
        float _2320 = _2317 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2316 > _2320) || ((_2316 < _2318) || ((_2315 > _2320) || ((_2315 < _2318) || ((_2314 < _2318) || (_2314 > _2320))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2434 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2316, cbModelParam._m0[17u].z, fma(_2315, cbModelParam._m0[17u].y, _2314 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2316, cbModelParam._m0[18u].z, fma(_2315, cbModelParam._m0[18u].y, _2314 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2316, cbModelParam._m0[19u].z, fma(_2315, cbModelParam._m0[19u].y, _2314 * cbModelParam._m0[19u].x))), _1422);
            frontier_phi_25_50_ladder = _2434.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2434.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2434.x * cbModelParam._m0[1u].z;
        }
        _1514 = frontier_phi_25_50_ladder_2;
        _1516 = frontier_phi_25_50_ladder_1;
        _1518 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1498 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_486, _487, _488), _1422);
        _1514 = _1498.x * cbModelParam._m0[1u].z;
        _1516 = _1498.y * cbModelParam._m0[1u].z;
        _1518 = _1498.z * cbModelParam._m0[1u].z;
    }
    float _1530 = ((((1.0 - _510) * ((_497 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_510 * _497)) * _478;
    float _1531 = _1530 * ((cbModelParam._m0[1u].w * (_1514 - _1413)) + _1413);
    float _1532 = _1530 * ((cbModelParam._m0[1u].w * (_1516 - _1415)) + _1415);
    float _1533 = _1530 * ((cbModelParam._m0[1u].w * (_1518 - _1417)) + _1417);
    float _1536 = fma(_1533, cbSceneParam._m0[89u].z, fma(_1532, cbSceneParam._m0[89u].y, _1531 * cbSceneParam._m0[89u].x));
    float _1539 = fma(_1533, cbSceneParam._m0[90u].z, fma(_1532, cbSceneParam._m0[90u].y, _1531 * cbSceneParam._m0[90u].x));
    float _1542 = fma(_1533, cbSceneParam._m0[91u].z, fma(_1532, cbSceneParam._m0[91u].y, _1531 * cbSceneParam._m0[91u].x));
    float _1553 = _411 / cbSceneParam._m0[86u].x;
    float _1554 = _412 / cbSceneParam._m0[86u].y;
    float _1561 = (cbSceneParam._m0[88u].y * (1.0 - cbMtdParam._m0[25u].y)) + cbSceneParam._m0[88u].z;
    float _4110 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
    float _1563 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * 5.0;
    float _1568 = ((10.0 / (_331 + 10.0)) * cbMtdParam._m0[25u].x) * dot(vec3(_308, _309, _310), vec3(1.0, 0.0, 0.0));
    vec4 _1578 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1568 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1568 + _1553) * cbSceneParam._m0[86u].x, _412), _1563).w) + _1553) * cbSceneParam._m0[86u].x, _412), _1563);
    float _1584 = isnan(0.5) ? _1578.w : (isnan(_1578.w) ? 0.5 : max(_1578.w, 0.5));
    float _1599 = 1.0 - (_1578.w / _1584);
    float _1634 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1638 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1642 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1646 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1647 = _1634 / _1646;
    float _1648 = _1638 / _1646;
    float _1649 = _1642 / _1646;
    float _1795;
    float _1796;
    float _1797;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1676 = ((uint(_1649 > cbSceneParam._m0[59u].y) + uint(_1649 > cbSceneParam._m0[59u].x)) + uint(_1649 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1677 = _1676 + 43u;
        uint _1685 = _1676 + 44u;
        uint _1693 = _1676 + 45u;
        uint _1701 = _1676 + 46u;
        float _1712 = fma(_1646, cbSceneParam._m0[_1677].w, fma(_1642, cbSceneParam._m0[_1677].z, fma(_1638, cbSceneParam._m0[_1677].y, _1634 * cbSceneParam._m0[_1677].x)));
        float _1716 = fma(_1646, cbSceneParam._m0[_1685].w, fma(_1642, cbSceneParam._m0[_1685].z, fma(_1638, cbSceneParam._m0[_1685].y, _1634 * cbSceneParam._m0[_1685].x)));
        float _1724 = fma(_1646, cbSceneParam._m0[_1701].w, fma(_1642, cbSceneParam._m0[_1701].z, fma(_1638, cbSceneParam._m0[_1701].y, _1634 * cbSceneParam._m0[_1701].x)));
        float _1728 = cbSceneParam._m0[33u].z * _1724;
        float _1730 = cbSceneParam._m0[33u].w * _1724;
        float _1733 = fma(_1646, cbSceneParam._m0[_1693].w, fma(_1642, cbSceneParam._m0[_1693].z, fma(_1638, cbSceneParam._m0[_1693].y, _1634 * cbSceneParam._m0[_1693].x))) / _1724;
        float _1781 = (cbSceneParam._m0[33u].x - sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649))) * cbSceneParam._m0[33u].y;
        float _4126 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1788 = (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1728 + _1712) / _1724, (_1730 + _1716) / _1724), _1733), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1730 + _1712) / _1724, (_1716 - _1728) / _1724), _1733), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1712 - _1728) / _1724, (_1716 - _1730) / _1724), _1733), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1712 - _1730) / _1724, (_1728 + _1716) / _1724), _1733), 0.0)).x), vec4(0.25)));
        _1795 = 1.0 - (_1788 * cbSceneParam._m0[34u].x);
        _1796 = 1.0 - (_1788 * cbSceneParam._m0[34u].y);
        _1797 = 1.0 - (_1788 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1795 = 1.0;
        _1796 = 1.0;
        _1797 = 1.0;
    }
    float _1861;
    float _1863;
    float _1865;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1849 = fma(_1646, cbSceneParam._m0[63u].w, fma(_1642, cbSceneParam._m0[63u].z, fma(_1638, cbSceneParam._m0[63u].y, _1634 * cbSceneParam._m0[63u].x)));
        float _1850 = fma(_1646, cbSceneParam._m0[60u].w, fma(_1642, cbSceneParam._m0[60u].z, fma(_1638, cbSceneParam._m0[60u].y, _1634 * cbSceneParam._m0[60u].x))) / _1849;
        float _1851 = fma(_1646, cbSceneParam._m0[61u].w, fma(_1642, cbSceneParam._m0[61u].z, fma(_1638, cbSceneParam._m0[61u].y, _1634 * cbSceneParam._m0[61u].x))) / _1849;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1850 >= cbSceneParam._m0[64u].x) && (_1851 >= cbSceneParam._m0[64u].y)) && (_1850 <= cbSceneParam._m0[64u].z)) && (_1851 <= cbSceneParam._m0[64u].w))
        {
            float _1993 = fma(_1646, cbSceneParam._m0[62u].w, fma(_1642, cbSceneParam._m0[62u].z, fma(_1638, cbSceneParam._m0[62u].y, _1634 * cbSceneParam._m0[62u].x))) / _1849;
            float _1997 = isnan(cbSceneParam._m0[41u].w) ? _1993 : (isnan(_1993) ? cbSceneParam._m0[41u].w : max(_1993, cbSceneParam._m0[41u].w));
            float _2040 = (cbSceneParam._m0[33u].x - sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649))) * cbSceneParam._m0[33u].y;
            float _4142 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
            float _2047 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1850, cbSceneParam._m0[33u].w + _1851), _1997), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1850, _1851 - cbSceneParam._m0[33u].z), _1997), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1850 - cbSceneParam._m0[33u].z, _1851 - cbSceneParam._m0[33u].w), _1997), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1850 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1851), _1997), 0.0)).x), vec4(0.25)));
            float _2051 = 1.0 - (_2047 * cbSceneParam._m0[34u].x);
            float _2052 = 1.0 - (_2047 * cbSceneParam._m0[34u].y);
            float _2053 = 1.0 - (_2047 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2053) ? _1797 : (isnan(_1797) ? _2053 : min(_1797, _2053));
            frontier_phi_37_36_ladder_1 = isnan(_2052) ? _1796 : (isnan(_1796) ? _2052 : min(_1796, _2052));
            frontier_phi_37_36_ladder_2 = isnan(_2051) ? _1795 : (isnan(_1795) ? _2051 : min(_1795, _2051));
        }
        else
        {
            frontier_phi_37_36_ladder = _1797;
            frontier_phi_37_36_ladder_1 = _1796;
            frontier_phi_37_36_ladder_2 = _1795;
        }
        _1861 = frontier_phi_37_36_ladder_2;
        _1863 = frontier_phi_37_36_ladder_1;
        _1865 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1861 = _1795;
        _1863 = _1796;
        _1865 = _1797;
    }
    float _4168 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1867 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _4179 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1868 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _4190 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1869 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    uvec4 _1873 = floatBitsToUint(cbInstanceData._m0[_451 + 5u]);
    uint _1875 = _1873.x * 14u;
    uint _1876 = _1875 + 13u;
    float _1883 = _478 + (-1.0);
    float _1888 = (cbLight._m0[_1876].x * _1883) + 1.0;
    float _1889 = (cbLight._m0[_1876].y * _1883) + 1.0;
    float _1890 = (cbLight._m0[_1876].z * _1883) + 1.0;
    float _1891 = (cbLight._m0[_1876].w * _1883) + 1.0;
    uint _1892 = _1875 + 5u;
    float _1898 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
    uint _1902 = _1875 + 4u;
    float _1912 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
    uint _1916 = _1875 | 1u;
    float _1927 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_308, _309, _310));
    float _1930 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_308, _309, _310));
    float _4211 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _4222 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1935 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * 0.3183098733425140380859375;
    float _1937 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * 0.3183098733425140380859375;
    float _1944 = ((cbLight._m0[_1892].x * _1898) * _1937) + (((cbLight._m0[_1902].x * _1867) * _1912) * _1935);
    float _1945 = ((_1898 * cbLight._m0[_1892].y) * _1937) + (((cbLight._m0[_1902].y * _1868) * _1912) * _1935);
    float _1946 = ((_1898 * cbLight._m0[_1892].z) * _1937) + (((cbLight._m0[_1902].z * _1869) * _1912) * _1935);
    uvec4 _1950 = floatBitsToUint(cbLight._m0[_1875 + 12u]);
    bool _1952 = _1950.x == 0u;
    float _2054;
    float _2056;
    float _2058;
    if (_1952)
    {
        _2054 = _1944;
        _2056 = _1945;
        _2058 = _1946;
    }
    else
    {
        uint _2062 = _1875 + 6u;
        float _2078 = (dot(vec3(cbLight._m0[_1875 + 2u].xyz), vec3(_308, _309, _310)) * 0.5) + 0.5;
        float _2079 = _2078 * _2078;
        float _4233 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2080 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2081 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2054 = (((cbLight._m0[_2062].x * 0.3183098733425140380859375) * _2080) * _2081) + _1944;
        _2056 = (((cbLight._m0[_2062].y * 0.3183098733425140380859375) * _2080) * _2081) + _1945;
        _2058 = (((cbLight._m0[_2062].z * 0.3183098733425140380859375) * _2080) * _2081) + _1946;
    }
    bool _2061 = _1950.y == 0u;
    float _2116;
    float _2118;
    float _2120;
    if (_2061)
    {
        _2116 = _2054;
        _2118 = _2056;
        _2120 = _2058;
    }
    else
    {
        uint _2278 = _1875 + 7u;
        float _2294 = (dot(vec3(cbLight._m0[_1875 + 3u].xyz), vec3(_308, _309, _310)) * 0.5) + 0.5;
        float _2295 = _2294 * _2294;
        float _4249 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2296 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _2297 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _2116 = (((cbLight._m0[_2278].x * 0.3183098733425140380859375) * _2296) * _2297) + _2054;
        _2118 = (((cbLight._m0[_2278].y * 0.3183098733425140380859375) * _2296) * _2297) + _2056;
        _2120 = (((cbLight._m0[_2278].z * 0.3183098733425140380859375) * _2296) * _2297) + _2058;
    }
    uint _2123 = _1875 + 8u;
    float _2136 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1875].w)) * _311) * 0.949999988079071044921875);
    float _2137 = _2136 * _2136;
    float _2138 = cbLight._m0[_1875].x + _390;
    float _2139 = cbLight._m0[_1875].y + _391;
    float _2140 = cbLight._m0[_1875].z + _392;
    float _2144 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
    float _2145 = _2144 * _2138;
    float _2146 = _2144 * _2139;
    float _2147 = _2144 * _2140;
    float _2148 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_1875].xyz));
    float _4265 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _4276 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _2152 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _2153 = dot(vec3(_308, _309, _310), vec3(_2145, _2146, _2147));
    float _4287 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _2157 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_2145, _2146, _2147));
    float _4298 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2161 = _2137 * _2137;
    float _2165 = ((_2156 * _2156) * (_2161 + (-1.0))) + 1.0;
    float _2176 = (exp2(log2(1.0 - (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2177 = 1.0 - _2137;
    float _2188 = (0.5 / (((_2152 * ((_2151 * _2177) + _2137)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2177) + _2137) * _2151))) * _2151;
    float _4309 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2190 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2161 / ((_2165 * _2165) * 3.141590118408203125));
    uint _2204 = _1875 + 9u;
    float _2215 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1916].w)) * _311) * 0.949999988079071044921875);
    float _2216 = _2215 * _2215;
    float _2217 = cbLight._m0[_1916].x + _390;
    float _2218 = cbLight._m0[_1916].y + _391;
    float _2219 = cbLight._m0[_1916].z + _392;
    float _2223 = inversesqrt(dot(vec3(_2217, _2218, _2219), vec3(_2217, _2218, _2219)));
    float _2224 = _2223 * _2217;
    float _2225 = _2223 * _2218;
    float _2226 = _2223 * _2219;
    float _2227 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_1916].xyz));
    float _4320 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2231 = dot(vec3(_308, _309, _310), vec3(_2224, _2225, _2226));
    float _4331 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2234 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _2235 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_2224, _2225, _2226));
    float _4342 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2239 = _2216 * _2216;
    float _2243 = ((_2234 * _2234) * (_2239 + (-1.0))) + 1.0;
    float _2252 = (exp2(log2(1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2253 = 1.0 - _2216;
    float _2263 = (0.5 / (((_2152 * ((_2230 * _2253) + _2216)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2253) + _2216) * _2230))) * _2230;
    float _4353 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2265 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2239 / ((_2243 * _2243) * 3.141590118408203125));
    float _2275 = (((_2252 * cbLight._m0[_2204].x) * _2265) * _1898) + ((((cbLight._m0[_2123].x * _1867) * _2176) * _2190) * _1912);
    float _2276 = (((_2252 * cbLight._m0[_2204].y) * _2265) * _1898) + ((((cbLight._m0[_2123].y * _1868) * _2176) * _2190) * _1912);
    float _2277 = (((_2252 * cbLight._m0[_2204].z) * _2265) * _1898) + ((((cbLight._m0[_2123].z * _1869) * _2176) * _2190) * _1912);
    float _2333;
    float _2335;
    float _2337;
    if (_1952)
    {
        _2333 = _2275;
        _2335 = _2276;
        _2337 = _2277;
    }
    else
    {
        uint _2339 = _1875 + 2u;
        uint _2343 = _1875 + 10u;
        float _2357 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2339].w)) * _311) * 0.949999988079071044921875);
        float _2358 = _2357 * _2357;
        float _2359 = cbLight._m0[_2339].x + _390;
        float _2360 = cbLight._m0[_2339].y + _391;
        float _2361 = cbLight._m0[_2339].z + _392;
        float _2365 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
        float _2366 = _2365 * _2359;
        float _2367 = _2365 * _2360;
        float _2368 = _2365 * _2361;
        float _2369 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_2339].xyz));
        float _4364 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2372 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2373 = dot(vec3(_308, _309, _310), vec3(_2366, _2367, _2368));
        float _4375 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2376 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _2377 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_2366, _2367, _2368));
        float _4386 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2381 = _2358 * _2358;
        float _2385 = ((_2376 * _2376) * (_2381 + (-1.0))) + 1.0;
        float _2394 = (exp2(log2(1.0 - (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2395 = 1.0 - _2358;
        float _2405 = (0.5 / (((_2152 * ((_2372 * _2395) + _2358)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2395) + _2358) * _2372))) * _2372;
        float _4397 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2407 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2381 / ((_2385 * _2385) * 3.141590118408203125));
        float _2408 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
        _2333 = (((_2394 * cbLight._m0[_2343].x) * _2407) * _2408) + _2275;
        _2335 = (((_2394 * cbLight._m0[_2343].y) * _2407) * _2408) + _2276;
        _2337 = (((_2394 * cbLight._m0[_2343].z) * _2407) * _2408) + _2277;
    }
    float _2439;
    float _2441;
    float _2443;
    if (_2061)
    {
        _2439 = _2333;
        _2441 = _2335;
        _2443 = _2337;
    }
    else
    {
        uint _2450 = _1875 + 3u;
        uint _2454 = _1875 + 11u;
        float _2468 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2450].w)) * _311) * 0.949999988079071044921875);
        float _2469 = _2468 * _2468;
        float _2470 = cbLight._m0[_2450].x + _390;
        float _2471 = cbLight._m0[_2450].y + _391;
        float _2472 = cbLight._m0[_2450].z + _392;
        float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
        float _2477 = _2476 * _2470;
        float _2478 = _2476 * _2471;
        float _2479 = _2476 * _2472;
        float _2480 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_2450].xyz));
        float _4413 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2484 = dot(vec3(_308, _309, _310), vec3(_2477, _2478, _2479));
        float _4424 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2487 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2488 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_2477, _2478, _2479));
        float _4435 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2492 = _2469 * _2469;
        float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
        float _2505 = (exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2506 = 1.0 - _2469;
        float _2516 = (0.5 / (((_2152 * ((_2483 * _2506) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2506) + _2469) * _2483))) * _2483;
        float _4446 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2518 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
        float _2519 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _2439 = (((_2505 * cbLight._m0[_2454].x) * _2518) * _2519) + _2333;
        _2441 = (((_2505 * cbLight._m0[_2454].y) * _2518) * _2519) + _2335;
        _2443 = (((_2505 * cbLight._m0[_2454].z) * _2518) * _2519) + _2337;
    }
    float _2585;
    float _2587;
    float _2589;
    float _2591;
    float _2593;
    float _2595;
    if (_1873.y == 0u)
    {
        uvec4 _2540 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2541 = _2540.x;
        uint _2552 = uint((float(_2540.y) * floor(float(uint(cbSceneParam._m0[85u].y * _412) / _2541))) + floor(float(uint(cbSceneParam._m0[85u].x * _411) / _2541)));
        float _2562 = (log2(_1649 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2563 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        uint _2566 = uint(isnan(14.0) ? _2563 : (isnan(_2563) ? 14.0 : min(_2563, 14.0)));
        uvec4 _2571 = texelFetch(g_lightClusterGridBuffer, int(((_2566 << 2u) + (_2552 << 6u)) >> 2u));
        uint _2572 = _2571.x;
        uint _2573 = _2540.z;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        float _2656;
        if (((((1u << ((_2573 >> 4u) & 15u)) + 4294967295u) & _2572) == 0u) || ((_2573 & 240u) == 0u))
        {
            _2646 = 0.0;
            _2648 = 0.0;
            _2650 = 0.0;
            _2652 = 0.0;
            _2654 = 0.0;
            _2656 = 0.0;
        }
        else
        {
            float _2647;
            float _2649;
            float _2651;
            float _2653;
            float _2655;
            float _2657;
            float _2798 = 0.0;
            float _2799 = 0.0;
            float _2800 = 0.0;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            uint _2804 = 0u;
            uint _2813;
            bool _2814;
            for (;;)
            {
                _2813 = texelFetch(g_lightClassification, int((((_2566 << 5u) + (_2552 << 9u)) + (_2804 << 2u)) >> 2u)).x;
                _2814 = _2813 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2814)
                {
                    frontier_phi_71_pred = _2803;
                    frontier_phi_71_pred_1 = _2802;
                    frontier_phi_71_pred_2 = _2801;
                    frontier_phi_71_pred_3 = _2800;
                    frontier_phi_71_pred_4 = _2799;
                    frontier_phi_71_pred_5 = _2798;
                }
                else
                {
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    uint _2949;
                    _2943 = _2798;
                    _2944 = _2799;
                    _2945 = _2800;
                    _2946 = _2801;
                    _2947 = _2802;
                    _2948 = _2803;
                    _2949 = _2813;
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    for (;;)
                    {
                        uint _2953 = uint(findLSB(_2949)) + (_2804 << 5u);
                        uint _2950 = (_2949 + 4294967295u) & _2949;
                        uint _2955 = _2953 * 48u;
                        vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2955)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 3u)).x));
                        uint _2975 = (_2953 * 48u) + 4u;
                        vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2975)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 3u)).x));
                        uint _2994 = (_2953 * 48u) + 8u;
                        vec3 _3005 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2994)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 2u)).x));
                        float _3009 = _2969.x - _1647;
                        float _3010 = _2969.y - _1648;
                        float _3011 = _2969.z - _1649;
                        float _3012 = dot(vec3(_3009, _3010, _3011), vec3(_3009, _3010, _3011));
                        float _3015 = inversesqrt(_3012);
                        float _3016 = _3015 * _3009;
                        float _3017 = _3015 * _3010;
                        float _3018 = _3015 * _3011;
                        float _3019 = dot(vec3(_432, _435, _438), vec3(_3016, _3017, _3018));
                        float _3024 = 1.0 - (_3012 * _2969.w);
                        float _4472 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3025 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                        float _3026 = sqrt(_3012) * _2988.w;
                        float _3029 = 1.39999997615814208984375 / (_3026 + 1.39999997615814208984375);
                        float _3030 = _3029 * _3029;
                        float _3033 = ((1.0 - _3030) * _3019) + _3030;
                        float _3036 = _3026 * _3026;
                        float _3040 = ((isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0))) * _3025) / ((_3036 * 0.699999988079071044921875) + 1.0);
                        float _3044 = (-0.0) - _1647;
                        float _3045 = (-0.0) - _1648;
                        float _3046 = (-0.0) - _1649;
                        float _3050 = inversesqrt(dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046)));
                        float _3051 = _3050 * _3044;
                        float _3052 = _3050 * _3045;
                        float _3053 = _3050 * _3046;
                        float _3060 = exp2(log2(1.0 / ((_3036 * 3.5) + 5.0)) * 0.25);
                        float _3061 = 1.0 - _497;
                        float _3068 = sqrt(1.0 - ((1.0 - (_3061 * _3061)) * (1.0 - (_3060 * _3060))));
                        float _3069 = _3068 * _3068;
                        float _3070 = _3069 * _3069;
                        float _3071 = _3051 + _3016;
                        float _3072 = _3052 + _3017;
                        float _3073 = _3053 + _3018;
                        float _3077 = inversesqrt(dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073)));
                        float _3081 = dot(vec3(_432, _435, _438), vec3(_3051, _3052, _3053));
                        float _4488 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                        float _3084 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                        float _3085 = dot(vec3(_432, _435, _438), vec3(_3077 * _3071, _3077 * _3072, _3077 * _3073));
                        float _4499 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3088 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                        float _3092 = ((_3088 * _3088) * (_3070 + (-1.0))) + 1.0;
                        float _3093 = _3029 * _3069;
                        float _3094 = _3093 * _3093;
                        float _3097 = ((1.0 - _3094) * _3019) + _3094;
                        float _4510 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3098 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                        float _3099 = 1.0 - _3069;
                        float _3109 = (0.5 / (((_3098 * ((_3084 * _3099) + _3069)) + 9.9999999392252902907785028219223e-09) + (((_3098 * _3099) + _3069) * _3084))) * _3098;
                        float _4521 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3120 = (((_3070 * 3.1415927410125732421875) * (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) / ((_3092 * _3092) * ((_3036 * 2.1991131305694580078125) + 3.141590118408203125))) * _3025;
                        _2873 = (_3040 * _2988.x) + _2946;
                        _2874 = (_3040 * _2988.y) + _2947;
                        _2875 = (_3040 * _2988.z) + _2948;
                        _2870 = (_3120 * _3005.x) + _2943;
                        _2871 = (_3120 * _3005.y) + _2944;
                        _2872 = (_3120 * _3005.z) + _2945;
                        if (_2950 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2943 = _2870;
                            _2944 = _2871;
                            _2945 = _2872;
                            _2946 = _2873;
                            _2947 = _2874;
                            _2948 = _2875;
                            _2949 = _2950;
                        }
                    }
                    frontier_phi_71_pred = _2875;
                    frontier_phi_71_pred_1 = _2874;
                    frontier_phi_71_pred_2 = _2873;
                    frontier_phi_71_pred_3 = _2872;
                    frontier_phi_71_pred_4 = _2871;
                    frontier_phi_71_pred_5 = _2870;
                }
                _2657 = frontier_phi_71_pred;
                _2655 = frontier_phi_71_pred_1;
                _2653 = frontier_phi_71_pred_2;
                _2651 = frontier_phi_71_pred_3;
                _2649 = frontier_phi_71_pred_4;
                _2647 = frontier_phi_71_pred_5;
                uint _2805 = _2804 + 1u;
                if (_2805 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2798 = _2647;
                    _2799 = _2649;
                    _2800 = _2651;
                    _2801 = _2653;
                    _2802 = _2655;
                    _2803 = _2657;
                    _2804 = _2805;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2646 = _2647;
            _2648 = _2649;
            _2650 = _2651;
            _2652 = _2653;
            _2654 = _2655;
            _2656 = _2657;
        }
        uvec4 _2660 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2661 = _2660.z;
        uint _2663 = (_2661 >> 8u) & 15u;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        if (((4294967295u << _2663) & _2572) == 0u)
        {
            _2766 = _2646;
            _2768 = _2648;
            _2770 = _2650;
            _2772 = _2652;
            _2774 = _2654;
            _2776 = _2656;
        }
        else
        {
            float _2791 = inversesqrt(dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649)));
            float _2792 = _2791 * _1647;
            float _2793 = _2791 * _1648;
            float _2794 = _2791 * _1649;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2663 < ((_2661 >> 12u) & 15u))
            {
                float _2767;
                float _2769;
                float _2771;
                float _2773;
                float _2775;
                float _2777;
                float _2926 = _2646;
                float _2927 = _2648;
                float _2928 = _2650;
                float _2929 = _2652;
                float _2930 = _2654;
                float _2931 = _2656;
                uint _2932 = _2663;
                uint _2941;
                bool _2942;
                for (;;)
                {
                    _2941 = texelFetch(g_lightClassification, int((((_2566 << 5u) + (_2552 << 9u)) + (_2932 << 2u)) >> 2u)).x;
                    _2942 = _2941 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2942)
                    {
                        frontier_phi_82_pred = _2931;
                        frontier_phi_82_pred_1 = _2930;
                        frontier_phi_82_pred_2 = _2929;
                        frontier_phi_82_pred_3 = _2928;
                        frontier_phi_82_pred_4 = _2927;
                        frontier_phi_82_pred_5 = _2926;
                    }
                    else
                    {
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3147 = _2926;
                        float _3148 = _2927;
                        float _3149 = _2928;
                        float _3150 = _2929;
                        float _3151 = _2930;
                        float _3152 = _2931;
                        uint _3153 = _2941;
                        uint _3154;
                        vec4 _3179;
                        float _3180;
                        vec4 _3195;
                        vec3 _3207;
                        vec4 _3223;
                        vec4 _3239;
                        float _3286;
                        bool _3287;
                        for (;;)
                        {
                            uint _3164 = ((_2932 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3153));
                            _3154 = (_3153 + 4294967295u) & _3153;
                            uint _3166 = _3164 * 40u;
                            _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            _3180 = _3179.w;
                            uint _3182 = (_3164 * 40u) + 4u;
                            _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            uint _3197 = (_3164 * 40u) + 8u;
                            _3207 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x));
                            uint _3210 = (_3164 * 40u) + 16u;
                            _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            uint _3226 = (_3164 * 40u) + 20u;
                            _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            uint _3242 = (_3164 * 40u) + 24u;
                            vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3261 = (_3164 * 40u) + 28u;
                            vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            _3286 = fma(_1649, _3274.z, fma(_1648, _3274.y, _3274.x * _1647)) + _3274.w;
                            _3287 = !((fma(_1649, _3255.z, fma(_1648, _3255.y, _3255.x * _1647)) + _3255.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3287)
                            {
                                float _3314 = _3179.x - _1647;
                                float _3315 = _3179.y - _1648;
                                float _3316 = _3179.z - _1649;
                                float _3317 = dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316));
                                float _3320 = inversesqrt(_3317);
                                float _3321 = _3320 * _3314;
                                float _3322 = _3320 * _3315;
                                float _3323 = _3320 * _3316;
                                float _3327 = 1.0 - (_3317 / (_3180 * _3180));
                                float _4532 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3328 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                                float _3332 = sqrt(_3317) * _3195.w;
                                float _3334 = 1.39999997615814208984375 / (_3332 + 1.39999997615814208984375);
                                float _3335 = _3334 * _3334;
                                float _3338 = ((1.0 - _3335) * dot(vec3(_3321, _3322, _3323), vec3(_432, _435, _438))) + _3335;
                                float _3341 = _3332 * _3332;
                                float _3345 = (fma(_1649, _3223.z, fma(_1648, _3223.y, _3223.x * _1647)) + _3223.w) / _3286;
                                float _3346 = (fma(_1649, _3239.z, fma(_1648, _3239.y, _3239.x * _1647)) + _3239.w) / _3286;
                                float _3350 = 1.0 - dot(vec2(_3345, _3346), vec2(_3345, _3346));
                                float _4548 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3351 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                                float _3352 = _3351 * (((isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0))) * _3328) / ((_3341 * 0.699999988079071044921875) + 1.0));
                                float _3364 = exp2(log2(1.0 / ((_3341 * 3.5) + 5.0)) * 0.25);
                                float _3365 = 1.0 - _497;
                                float _3372 = sqrt(1.0 - ((1.0 - (_3365 * _3365)) * (1.0 - (_3364 * _3364))));
                                float _3373 = _3372 * _3372;
                                float _3374 = _3373 * _3373;
                                float _3375 = _3321 - _2792;
                                float _3376 = _3322 - _2793;
                                float _3377 = _3323 - _2794;
                                float _3381 = inversesqrt(dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377)));
                                float _3385 = dot(vec3(_432, _435, _438), vec3((-0.0) - _2792, (-0.0) - _2793, (-0.0) - _2794));
                                float _4559 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3388 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                                float _3389 = dot(vec3(_432, _435, _438), vec3(_3381 * _3375, _3381 * _3376, _3381 * _3377));
                                float _4570 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3392 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                                float _3396 = ((_3392 * _3392) * (_3374 + (-1.0))) + 1.0;
                                float _3397 = _3334 * _3373;
                                float _3398 = _3397 * _3397;
                                float _3404 = ((1.0 - _3398) * dot(vec3(_432, _435, _438), vec3(_3321, _3322, _3323))) + _3398;
                                float _4581 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3405 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3406 = 1.0 - _3373;
                                float _3416 = (0.5 / (((_3405 * ((_3388 * _3406) + _3373)) + 9.9999999392252902907785028219223e-09) + (((_3405 * _3406) + _3373) * _3388))) * _3405;
                                float _4592 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3426 = (_3351 * _3328) * (((_3374 * 3.1415927410125732421875) * (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) / ((_3396 * _3396) * ((_3341 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3352 * _3195.z;
                                frontier_phi_88_pred_1 = _3352 * _3195.y;
                                frontier_phi_88_pred_2 = _3352 * _3195.x;
                                frontier_phi_88_pred_3 = _3426 * _3207.z;
                                frontier_phi_88_pred_4 = _3426 * _3207.y;
                                frontier_phi_88_pred_5 = _3426 * _3207.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3435 = frontier_phi_88_pred;
                            _3434 = frontier_phi_88_pred_1;
                            _3433 = frontier_phi_88_pred_2;
                            _3432 = frontier_phi_88_pred_3;
                            _3431 = frontier_phi_88_pred_4;
                            _3430 = frontier_phi_88_pred_5;
                            _3137 = _3433 + _3150;
                            _3138 = _3434 + _3151;
                            _3139 = _3435 + _3152;
                            _3134 = _3430 + _3147;
                            _3135 = _3431 + _3148;
                            _3136 = _3432 + _3149;
                            if (_3154 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3147 = _3134;
                                _3148 = _3135;
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3154;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3139;
                        frontier_phi_82_pred_1 = _3138;
                        frontier_phi_82_pred_2 = _3137;
                        frontier_phi_82_pred_3 = _3136;
                        frontier_phi_82_pred_4 = _3135;
                        frontier_phi_82_pred_5 = _3134;
                    }
                    _2777 = frontier_phi_82_pred;
                    _2775 = frontier_phi_82_pred_1;
                    _2773 = frontier_phi_82_pred_2;
                    _2771 = frontier_phi_82_pred_3;
                    _2769 = frontier_phi_82_pred_4;
                    _2767 = frontier_phi_82_pred_5;
                    uint _2933 = _2932 + 1u;
                    if (_2933 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2926 = _2767;
                        _2927 = _2769;
                        _2928 = _2771;
                        _2929 = _2773;
                        _2930 = _2775;
                        _2931 = _2777;
                        _2932 = _2933;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2773;
                frontier_phi_63_64_ladder_1 = _2777;
                frontier_phi_63_64_ladder_2 = _2775;
                frontier_phi_63_64_ladder_3 = _2771;
                frontier_phi_63_64_ladder_4 = _2769;
                frontier_phi_63_64_ladder_5 = _2767;
            }
            else
            {
                frontier_phi_63_64_ladder = _2652;
                frontier_phi_63_64_ladder_1 = _2656;
                frontier_phi_63_64_ladder_2 = _2654;
                frontier_phi_63_64_ladder_3 = _2650;
                frontier_phi_63_64_ladder_4 = _2648;
                frontier_phi_63_64_ladder_5 = _2646;
            }
            _2766 = frontier_phi_63_64_ladder_5;
            _2768 = frontier_phi_63_64_ladder_4;
            _2770 = frontier_phi_63_64_ladder_3;
            _2772 = frontier_phi_63_64_ladder;
            _2774 = frontier_phi_63_64_ladder_2;
            _2776 = frontier_phi_63_64_ladder_1;
        }
        float _2781 = isnan(1.0) ? _478 : (isnan(_478) ? 1.0 : min(_478, 1.0));
        _2585 = (_2781 * _2772) + _2116;
        _2587 = (_2781 * _2774) + _2118;
        _2589 = (_2781 * _2776) + _2120;
        _2591 = ((_2766 * 0.039999999105930328369140625) * _2781) + _2439;
        _2593 = ((_2768 * 0.039999999105930328369140625) * _2781) + _2441;
        _2595 = ((_2770 * 0.039999999105930328369140625) * _2781) + _2443;
    }
    else
    {
        _2585 = _2116;
        _2587 = _2118;
        _2589 = _2120;
        _2591 = _2439;
        _2593 = _2441;
        _2595 = _2443;
    }
    float _4608 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _4619 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _4630 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _2612 = ((isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2585 + ((isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))) * _478))) + (((((_1530 * (_1578.x / _1584)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _1320) * _1599)) + _2591) * cbPerFrame._m0[3u].x);
    float _2613 = ((isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2587 + ((isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))) * _478))) + (((((_1530 * (_1578.y / _1584)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _1320) * _1599)) + _2593) * cbPerFrame._m0[3u].x);
    float _2614 = ((isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2589 + ((isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))) * _478))) + (((((_1530 * (_1578.z / _1584)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _1320) * _1599)) + _2595) * cbPerFrame._m0[3u].x);
    uint _2615 = _451 + 6u;
    vec4 _2632 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1553, _1554, (log2((isnan(cbSceneParam._m0[77u].w) ? _331 : (isnan(_331) ? cbSceneParam._m0[77u].w : min(_331, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2634 = _2632.x;
    float _2635 = _2632.y;
    float _2636 = _2632.z;
    float _2637 = _2632.w;
    float _2709;
    float _2711;
    float _2713;
    float _2715;
    if (_331 > cbSceneParam._m0[78u].w)
    {
        float _2671 = isnan(_331) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _331 : min(cbSceneParam._m0[80u].w, _331));
        float _2672 = _2671 / _331;
        float _2683 = _2672 * _383;
        float _2684 = _384 * _2672;
        float _2685 = (-0.0) - _2684;
        float _2687 = _2672 * _385;
        float _2689 = (cbSceneParam._m0[77u].w * _2685) / _2671;
        float _2690 = _2689 + cbSceneParam._m0[79u].w;
        float _2691 = cbSceneParam._m0[79u].w - _2684;
        float _2697 = sqrt(((_2683 * _2683) + (_2684 * _2684)) + (_2687 * _2687));
        float _2700 = (1.0 - (cbSceneParam._m0[77u].w / _2671)) * _2697;
        float _2705 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2707 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2883;
        if (abs((_2685 - _2689) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2883 = ((((_2690 > 0.0) ? exp2(_2705 * _2690) : (2.0 - exp2(_2707 * _2690))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2700;
        }
        else
        {
            float _2827 = 1.0 / cbSceneParam._m0[80u].x;
            float _2828 = isnan(_2691) ? _2690 : (isnan(_2690) ? _2691 : max(_2690, _2691));
            float _2829 = isnan(_2691) ? _2690 : (isnan(_2690) ? _2691 : min(_2690, _2691));
            float _2838 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : min(_2828, 0.0));
            float _2839 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : min(_2829, 0.0));
            _2883 = ((abs(_2697 / _2685) * cbSceneParam._m0[80u].y) * ((((_2838 - _2839) * 2.0) - ((exp2(_2705 * (isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0)))) - exp2(_2705 * (isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0))))) * _2827)) - ((exp2(_2707 * _2838) - exp2(_2707 * _2839)) * _2827))) + (_2700 * cbSceneParam._m0[80u].z);
        }
        vec4 _2885 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1553, _1554, 1.0), 0.0);
        float _2894 = exp2((_2883 * (-1.44269502162933349609375)) * (1.0 - _2885.w));
        float _2895 = log2(_2894);
        float _2911 = log2(_2637);
        _2709 = (exp2(_2911 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2895 * cbSceneParam._m0[78u].x)) * _2885.x) / cbSceneParam._m0[78u].x)) + _2634;
        _2711 = (exp2(_2911 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2895 * cbSceneParam._m0[78u].y)) * _2885.y) / cbSceneParam._m0[78u].y)) + _2635;
        _2713 = (exp2(_2911 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2895 * cbSceneParam._m0[78u].z)) * _2885.z) / cbSceneParam._m0[78u].z)) + _2636;
        _2715 = _2894 * _2637;
    }
    else
    {
        _2709 = _2634;
        _2711 = _2635;
        _2713 = _2636;
        _2715 = _2637;
    }
    bool _2921;
    vec4 _2724;
    vec4 _2746;
    float _2748;
    float _2752;
    float _2753;
    float _2754;
    float _2755;
    bool _2765;
    for (;;)
    {
        _2724 = cbMatDynParam._m0[0u];
        float _2726 = roundEven(_2724.y);
        bool _2727 = _2726 == 3.0;
        float _2728 = log2(_2715);
        float _2735 = exp2(_2728 * cbSceneParam._m0[78u].x) * _2612;
        float _2736 = exp2(_2728 * cbSceneParam._m0[78u].y) * _2613;
        float _2737 = exp2(_2728 * cbSceneParam._m0[78u].z) * _2614;
        float _2744 = _399 + (-0.5);
        _2746 = cbMtdParam._m0[1u];
        _2748 = _2746.y * _2744;
        float _2751 = (_2726 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2752 = _2751 * (_2727 ? _2735 : (_2735 + (cbSceneParam._m0[72u].w * _2709)));
        _2753 = _2751 * (_2727 ? _2736 : (_2736 + (cbSceneParam._m0[72u].w * _2711)));
        _2754 = _2751 * (_2727 ? _2737 : (_2737 + (cbSceneParam._m0[72u].w * _2713)));
        _2755 = _2744 * 0.999000012874603271484375;
        _2765 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2765)
        {
            if ((cbInstanceData._m0[_451 + 7u].x + _2755) < 0.5)
            {
                _2921 = true;
                break;
            }
        }
        uint _2862 = _453 + uint(_2724.w);
        if ((cbInstanceData._m0[_2862].w < 1.0) && ((cbInstanceData._m0[_2862].w + _2755) < 0.5))
        {
            _2921 = true;
            break;
        }
        if ((_2748 + _241) < _2746.x)
        {
            _2921 = true;
            break;
        }
        _2921 = false;
        break;
    }
    float _3125;
    if (_2921)
    {
        discard_state = true;
        _3125 = 0.0;
    }
    else
    {
        _3125 = cbInstanceData._m0[_2615].w;
    }
    SV_Target.x = _2752;
    SV_Target.y = _2753;
    SV_Target.z = _2754;
    SV_Target.w = _3125;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2615].w;
    discard_exit();
}


