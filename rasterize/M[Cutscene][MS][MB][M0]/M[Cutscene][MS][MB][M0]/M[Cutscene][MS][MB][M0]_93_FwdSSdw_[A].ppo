#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[33];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1341;
float _3783;
float _3784;
float _3785;
float _3786;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _292 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _295 = _292.w;
    vec4 _314 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _319 = _314.x * cbMtdParam._m0[11u].x;
    float _320 = _314.y * cbMtdParam._m0[11u].y;
    float _321 = _314.z * cbMtdParam._m0[11u].z;
    vec4 _340 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _375 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[28u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[28u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _377 = _375.x;
    float _390 = dot(vec4(_377, _375.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _407 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_377 - _390) * cbMtdParam._m0[24u].x) + _390) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3795 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _408 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _415 = (_408 * ((_340.x * cbMtdParam._m0[12u].x) - _319)) + _319;
    float _416 = (_408 * ((_340.y * cbMtdParam._m0[12u].y) - _320)) + _320;
    float _417 = (_408 * ((_340.z * cbMtdParam._m0[12u].z) - _321)) + _321;
    vec4 _435 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _460 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _462 = _460.x;
    float _463 = _460.y;
    float _468 = cbMtdParam._m0[25u].w * _460.z;
    float _3806 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _469 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    vec4 _482 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    float _490 = cbMtdParam._m0[26u].x * _482.z;
    float _3817 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _500 = (((isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) - _469) * _408) + _469;
    float _503 = ((((_482.x - _462) * _408) + _462) * 2.0) + (-1.0);
    float _504 = ((((_482.y - _463) * _408) + _463) * 2.0) + (-1.0);
    float _505 = dot(vec2(_503, _504), vec2(_503, _504));
    float _3828 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _510 = sqrt(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))));
    vec4 _527 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _534 = cbMtdParam._m0[25u].z * _527.z;
    float _3839 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    vec4 _555 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _557 = _555.x;
    float _558 = 1.0 - _557;
    float _564 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _567 = ((isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : min(_564, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _576 = (_567 - ((((((_557 - _558) * cbMtdParam._m0[24u].z) + _558) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _567))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3860 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _577 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _584 = (_577 * (cbMtdParam._m0[17u].x - _415)) + _415;
    float _585 = (_577 * (cbMtdParam._m0[17u].y - _416)) + _416;
    float _586 = (_577 * (cbMtdParam._m0[17u].z - _417)) + _417;
    vec4 _598 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _600 = _598.x;
    float _601 = 1.0 - _600;
    float _628 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_600 - _601) * cbMtdParam._m0[24u].w) + _601) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3871 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _629 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _637 = ((((cbMtdParam._m0[10u].x - _584) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _629) + _584;
    float _638 = ((((cbMtdParam._m0[10u].y - _585) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _629) + _585;
    float _639 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _586)) * _629) + _586;
    float _644 = (((_435.z - _500) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _500;
    float _648 = (((isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) - _644) * cbMtdParam._m0[19u].w) + _644;
    vec4 _662 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _669 = (_662.x * 2.0) + (-1.0);
    float _670 = (_662.y * 2.0) + (-1.0);
    float _671 = dot(vec2(_669, _670), vec2(_669, _670));
    float _3882 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _679 = (_577 * (_662.z - _648)) + _648;
    float _682 = ((cbMtdParam._m0[23u].y - _679) * _629) + _679;
    float _686 = ((1.0 - _682) * cbMtdParam._m0[26u].y) + _682;
    float _3893 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _687 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    vec4 _709 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[28u].w * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[29u].x * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _715 = (_709.x * 2.0) + (-1.0);
    float _716 = (_709.y * 2.0) + (-1.0);
    float _717 = dot(vec2(_715, _716), vec2(_715, _716));
    float _3904 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _731 = (_503 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_435.x * 2.0) + (-1.0)))) + (((_527.x * 2.0) + (-1.0)) * cbMtdParam._m0[27u].x);
    float _732 = (_504 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_435.y * 2.0) + (-1.0)))) + (((_527.y * 2.0) + (-1.0)) * cbMtdParam._m0[27u].x);
    float _744 = (((_669 - _731) + (cbMtdParam._m0[21u].x * _731)) * _577) + _731;
    float _745 = (((_670 - _732) + (cbMtdParam._m0[21u].x * _732)) * _577) + _732;
    float _746 = (_577 * (sqrt(1.0 - (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) - _510)) + _510;
    float _757 = (((_715 - _744) + (_744 * cbMtdParam._m0[22u].z)) * _629) + _744;
    float _758 = (((_716 - _745) + (_745 * cbMtdParam._m0[22u].z)) * _629) + _745;
    float _759 = ((sqrt(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) - _746) * _629) + _746;
    float _761 = cbMtdParam._m0[22u].x + _527.w;
    float _766 = fma(_759, _246 * NORMAL.x, fma(_758, _253 * TANGENT.x, (_239 * _231) * _757));
    float _769 = fma(_759, _246 * NORMAL.y, fma(_758, _253 * TANGENT.y, (_239 * _232) * _757));
    float _772 = fma(_759, _246 * NORMAL.z, fma(_758, _253 * TANGENT.z, (_239 * _233) * _757));
    float _776 = inversesqrt(dot(vec3(_766, _769, _772), vec3(_766, _769, _772)));
    float _777 = _776 * _766;
    float _778 = _776 * _769;
    float _779 = _776 * _772;
    float _3915 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _780 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _3926 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _3937 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _3948 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _3959 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _798 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _849 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _839);
    float _850 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _839);
    float _851 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _839);
    float _855 = inversesqrt(dot(vec3(_849, _850, _851), vec3(_849, _850, _851)));
    float _856 = _849 * _855;
    float _857 = _850 * _855;
    float _858 = _851 * _855;
    vec4 _863 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _865 = _863.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1022 = sqrt(((_849 * _849) + (_850 * _850)) + (_851 * _851));
        float _1028 = (cbMatDynParam._m0[5u].x * _1022) + cbMatDynParam._m0[5u].y;
        float _3970 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1033 = (cbMatDynParam._m0[5u].z * _1022) + cbMatDynParam._m0[5u].w;
        float _3981 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) - _1029)) + _1029) < ((_865 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _876 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _877 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _895 = fma(_779, cbSceneParam._m0[5u].z, fma(_778, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _777));
    float _898 = fma(_779, cbSceneParam._m0[6u].z, fma(_778, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _777));
    float _901 = fma(_779, cbSceneParam._m0[7u].z, fma(_778, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _777));
    uint _914 = _259 + 9u;
    uint _915 = _914 + uint(cbMatDynParam._m0[0u].w);
    float _921 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) * cbInstanceData._m0[_915].x;
    float _922 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * cbInstanceData._m0[_915].y;
    float _923 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) * cbInstanceData._m0[_915].z;
    float _3992 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _924 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _4003 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _925 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _4014 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _926 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    vec4 _935 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _876, cbSceneParam._m0[86u].y * _877));
    float _939 = ((isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * TEXCOORD_5.w) * _935.x;
    float _940 = dot(vec3(_777, _778, _779), vec3(_856, _857, _858));
    float _943 = _940 * 2.0;
    float _947 = (_943 * _777) - _856;
    float _948 = (_943 * _778) - _857;
    float _949 = (_943 * _779) - _858;
    float _956 = abs(dot(vec3(_856, _857, _858), vec3(_777, _778, _779)));
    float _4025 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _958 = sqrt(_780);
    float _971 = exp2((_958 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_958 * 3.0));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1340;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1065 = fma(_1011, cbModelParam._m0[26u].z, fma(_1007, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1003));
        float _1069 = fma(_1011, cbModelParam._m0[27u].z, fma(_1007, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1003));
        float _1073 = fma(_1011, cbModelParam._m0[28u].z, fma(_1007, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1003));
        float _1098 = _1003 + _777;
        float _1099 = _1007 + _778;
        float _1100 = _1011 + _779;
        float _1110 = fma(_1100, cbModelParam._m0[26u].z, fma(_1099, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1098)) - _1065;
        float _1111 = fma(_1100, cbModelParam._m0[27u].z, fma(_1099, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1098)) - _1069;
        float _1112 = fma(_1100, cbModelParam._m0[28u].z, fma(_1099, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1098)) - _1073;
        float _1116 = inversesqrt(dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112)));
        float _1129 = ((_1116 * _1110) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1065 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1116 * _1111) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1069 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1116 * _1112) / cbModelParam._m0[34u].z) + ((((((_1073 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        float _1168 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1134.x + (-0.5));
        float _1170 = _1168 * (_1134.y + (-0.5));
        float _1171 = _1168 * (_1134.z + (-0.5));
        float _1178 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1141.x + (-0.5));
        float _1180 = _1178 * (_1141.y + (-0.5));
        float _1181 = _1178 * (_1141.z + (-0.5));
        float _1188 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1148.x + (-0.5));
        float _1190 = _1188 * (_1148.y + (-0.5));
        float _1191 = _1188 * (_1148.z + (-0.5));
        float _1198 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1155.x + (-0.5));
        float _1200 = _1198 * (_1155.y + (-0.5));
        float _1201 = _1198 * (_1155.z + (-0.5));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = _1169 * 0.5;
        float _1206 = _1179 * 0.5;
        float _1207 = _1189 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1222 = (dot(vec3(_777, _778, _779), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1232 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _4073 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1234 + 1.0))) + _1239) * _1202;
        float _1249 = _1170 * 0.5;
        float _1250 = _1180 * 0.5;
        float _1251 = _1190 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_777, _778, _779), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _4106 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1276 + 1.0))) + _1281) * _1203;
        float _1291 = _1171 * 0.5;
        float _1292 = _1181 * 0.5;
        float _1293 = _1191 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_777, _778, _779), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _4139 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1318 + 1.0))) + _1323) * _1204;
        _1340 = _1171;
        _1342 = _1170;
        _1343 = _1169;
        _1344 = _1181;
        _1345 = _1180;
        _1346 = _1179;
        _1347 = _1191;
        _1348 = _1190;
        _1349 = _1189;
        _1350 = _1204;
        _1351 = _1203;
        _1352 = _1202;
        _1353 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1354 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1355 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
    }
    else
    {
        _1340 = _1341;
        _1342 = _1341;
        _1343 = _1341;
        _1344 = _1341;
        _1345 = _1341;
        _1346 = _1341;
        _1347 = _1341;
        _1348 = _1341;
        _1349 = _1341;
        _1350 = _1341;
        _1351 = _1341;
        _1352 = _1341;
        _1353 = 0.0;
        _1354 = 0.0;
        _1355 = 0.0;
    }
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1382 = fma(_1011, cbModelParam._m0[30u].z, fma(_1007, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1003));
        float _1386 = fma(_1011, cbModelParam._m0[31u].z, fma(_1007, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1003));
        float _1390 = fma(_1011, cbModelParam._m0[32u].z, fma(_1007, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1003));
        float _1413 = _1003 + _777;
        float _1414 = _1007 + _778;
        float _1415 = _1011 + _779;
        float _1425 = fma(_1415, cbModelParam._m0[30u].z, fma(_1414, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1413)) - _1382;
        float _1426 = fma(_1415, cbModelParam._m0[31u].z, fma(_1414, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1413)) - _1386;
        float _1427 = fma(_1415, cbModelParam._m0[32u].z, fma(_1414, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1413)) - _1390;
        float _1431 = inversesqrt(dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427)));
        float _1444 = ((_1431 * _1425) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1382 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1445 = ((_1431 * _1426) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1386 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1446 = ((_1431 * _1427) / cbModelParam._m0[35u].z) + ((((((_1390 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1444, _1445, _1446), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1444, _1445, _1446), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1444, _1445, _1446), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1444, _1445, _1446), 0.0);
        float _1481 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1448.x + (-0.5));
        float _1483 = _1481 * (_1448.y + (-0.5));
        float _1484 = _1481 * (_1448.z + (-0.5));
        float _1491 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1455.x + (-0.5));
        float _1493 = _1491 * (_1455.y + (-0.5));
        float _1494 = _1491 * (_1455.z + (-0.5));
        float _1501 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1462.x + (-0.5));
        float _1503 = _1501 * (_1462.y + (-0.5));
        float _1504 = _1501 * (_1462.z + (-0.5));
        float _1511 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1469.x + (-0.5));
        float _1513 = _1511 * (_1469.y + (-0.5));
        float _1514 = _1511 * (_1469.z + (-0.5));
        float _1515 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1516 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1517 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1518 = _1482 * 0.5;
        float _1519 = _1492 * 0.5;
        float _1520 = _1502 * 0.5;
        float _1521 = dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520));
        float _1526 = (_1521 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1521);
        float _1534 = (dot(vec3(_777, _778, _779), vec3(_1526 * _1518, _1526 * _1519, _1526 * _1520)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1543 = sqrt(((_1519 * _1519) + (_1518 * _1518)) + (_1520 * _1520)) / (_1515 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1545 = _1544 * 2.0;
        float _1549 = (1.0 - _1544) / (_1544 + 1.0);
        float _4202 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1559 = ((((1.0 - _1550) * (_1545 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1545 + 1.0))) + _1550) * _1515;
        float _1560 = _1483 * 0.5;
        float _1561 = _1493 * 0.5;
        float _1562 = _1503 * 0.5;
        float _1563 = dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562));
        float _1568 = (_1563 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1563);
        float _1576 = (dot(vec3(_777, _778, _779), vec3(_1568 * _1560, _1568 * _1561, _1568 * _1562)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1585 = sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562)) / (_1516 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1587 = _1586 * 2.0;
        float _1591 = (1.0 - _1586) / (_1586 + 1.0);
        float _4235 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1601 = ((((1.0 - _1592) * (_1587 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1587 + 1.0))) + _1592) * _1516;
        float _1602 = _1484 * 0.5;
        float _1603 = _1494 * 0.5;
        float _1604 = _1504 * 0.5;
        float _1605 = dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604));
        float _1610 = (_1605 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1605);
        float _1618 = (dot(vec3(_777, _778, _779), vec3(_1610 * _1602, _1610 * _1603, _1610 * _1604)) + 1.0) * 0.5;
        float _4246 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1627 = sqrt(((_1603 * _1603) + (_1602 * _1602)) + (_1604 * _1604)) / (_1517 + 9.9999997473787516355514526367188e-06);
        float _4257 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1629 = _1628 * 2.0;
        float _1633 = (1.0 - _1628) / (_1628 + 1.0);
        float _4268 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1643 = ((((1.0 - _1634) * (_1629 + 2.0)) * exp2(log2(isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1629 + 1.0))) + _1634) * _1517;
        _1651 = _1484;
        _1652 = _1483;
        _1653 = _1482;
        _1654 = _1494;
        _1655 = _1493;
        _1656 = _1492;
        _1657 = _1504;
        _1658 = _1503;
        _1659 = _1502;
        _1660 = _1517;
        _1661 = _1516;
        _1662 = _1515;
        _1663 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)));
        _1664 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)));
        _1665 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)));
    }
    else
    {
        _1651 = _1341;
        _1652 = _1341;
        _1653 = _1341;
        _1654 = _1341;
        _1655 = _1341;
        _1656 = _1341;
        _1657 = _1341;
        _1658 = _1341;
        _1659 = _1341;
        _1660 = _1341;
        _1661 = _1341;
        _1662 = _1341;
        _1663 = 0.0;
        _1664 = 0.0;
        _1665 = 0.0;
    }
    float _1675 = (cbModelParam._m0[1u].x * (_1663 - _1353)) + _1353;
    float _1676 = (cbModelParam._m0[1u].x * (_1664 - _1354)) + _1354;
    float _1677 = (cbModelParam._m0[1u].x * (_1665 - _1355)) + _1355;
    float _1698 = fma(_1677, cbSceneParam._m0[89u].z, fma(_1676, cbSceneParam._m0[89u].y, _1675 * cbSceneParam._m0[89u].x));
    float _1701 = fma(_1677, cbSceneParam._m0[90u].z, fma(_1676, cbSceneParam._m0[90u].y, _1675 * cbSceneParam._m0[90u].x));
    float _1704 = fma(_1677, cbSceneParam._m0[91u].z, fma(_1676, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1675));
    float _1719 = _947 * 0.5;
    float _1720 = _948 * 0.5;
    float _1721 = _949 * 0.5;
    float _1722 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1653, _1656, _1659, _1662));
    float _1725 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1652, _1655, _1658, _1661));
    float _1728 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1651, _1654, _1657, _1660));
    float _1762;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1735 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1340, _1344, _1347, _1350));
        float _1739 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1342, _1345, _1348, _1351));
        float _1743 = dot(vec4(_1719, _1720, _1721, 1.0), vec4(_1343, _1346, _1349, _1352));
        float _1750 = dot(vec4(cbModelParam._m0[39u]), vec4(_1719, _1720, _1721, 1.0));
        _1762 = dot(vec3(isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1750) ? 0.0 : (isnan(0.0) ? _1750 : max(0.0, _1750))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1762 = 1.0;
    }
    float _1773;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1764 = dot(vec4(cbModelParam._m0[40u]), vec4(_1719, _1720, _1721, 1.0));
        _1773 = dot(vec3(isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1764) ? 0.0 : (isnan(0.0) ? _1764 : max(0.0, _1764))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1773 = 1.0;
    }
    float _1777 = (_1773 * cbModelParam._m0[1u].x) + (_1762 * (1.0 - cbModelParam._m0[1u].x));
    float _1787 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _780);
    float _1788 = isnan(_1787) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1787 : min(cbModelParam._m0[25u].z, _1787));
    float _1869;
    float _1871;
    float _1873;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1836 = fma(_1011, cbModelParam._m0[13u].z, fma(_1007, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1003)) + cbModelParam._m0[13u].w;
        float _1840 = fma(_1011, cbModelParam._m0[14u].z, fma(_1007, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1003)) + cbModelParam._m0[14u].w;
        float _1844 = fma(_1011, cbModelParam._m0[15u].z, fma(_1007, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1003)) + cbModelParam._m0[15u].w;
        float _1847 = fma(_949, cbModelParam._m0[13u].z, fma(_948, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _947));
        float _1850 = fma(_949, cbModelParam._m0[14u].z, fma(_948, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _947));
        float _1853 = fma(_949, cbModelParam._m0[15u].z, fma(_948, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _947));
        float _1881;
        if (_1847 > 0.0)
        {
            _1881 = abs((1.0 - _1836) / _1847);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1836 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1881 = frontier_phi_17_15_ladder;
        }
        float _2163;
        if (_1850 > 0.0)
        {
            _2163 = abs((1.0 - _1840) / _1850);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1840 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2163 = frontier_phi_26_22_ladder;
        }
        float _2409;
        if (_1853 > 0.0)
        {
            _2409 = abs((1.0 - _1844) / _1853);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1844 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2409 = frontier_phi_38_33_ladder;
        }
        float _2411 = isnan(_2163) ? _1881 : (isnan(_1881) ? _2163 : min(_1881, _2163));
        float _2412 = isnan(_2409) ? _2411 : (isnan(_2411) ? _2409 : min(_2411, _2409));
        float _2416 = (_2412 * _1847) + _1836;
        float _2417 = (_2412 * _1850) + _1840;
        float _2418 = (_2412 * _1853) + _1844;
        float _2419 = _2412 * 9.9999997473787516355514526367188e-05;
        float _2421 = (-1.0) - _2419;
        float _2423 = _2419 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2418 > _2423) || ((_2418 < _2421) || ((_2417 > _2423) || ((_2417 < _2421) || ((_2416 < _2421) || (_2416 > _2423))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2542 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2418, cbModelParam._m0[9u].z, fma(_2417, cbModelParam._m0[9u].y, _2416 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2418, cbModelParam._m0[10u].z, fma(_2417, cbModelParam._m0[10u].y, _2416 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2418, cbModelParam._m0[11u].z, fma(_2417, cbModelParam._m0[11u].y, _2416 * cbModelParam._m0[11u].x))), _1788);
            frontier_phi_16_38_ladder = _2542.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2542.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2542.x * cbModelParam._m0[1u].y;
        }
        _1869 = frontier_phi_16_38_ladder_2;
        _1871 = frontier_phi_16_38_ladder_1;
        _1873 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1857 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_947, _948, _949), _1788);
        _1869 = _1857.x * cbModelParam._m0[1u].y;
        _1871 = _1857.y * cbModelParam._m0[1u].y;
        _1873 = _1857.z * cbModelParam._m0[1u].y;
    }
    float _1877 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _780);
    float _1878 = isnan(_1877) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1877 : min(cbModelParam._m0[25u].w, _1877));
    float _1968;
    float _1970;
    float _1972;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1932 = fma(_1011, cbModelParam._m0[21u].z, fma(_1007, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1003)) + cbModelParam._m0[21u].w;
        float _1936 = fma(_1011, cbModelParam._m0[22u].z, fma(_1007, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1003)) + cbModelParam._m0[22u].w;
        float _1940 = fma(_1011, cbModelParam._m0[23u].z, fma(_1007, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1003)) + cbModelParam._m0[23u].w;
        float _1943 = fma(_949, cbModelParam._m0[21u].z, fma(_948, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _947));
        float _1946 = fma(_949, cbModelParam._m0[22u].z, fma(_948, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _947));
        float _1949 = fma(_949, cbModelParam._m0[23u].z, fma(_948, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _947));
        float _2168;
        if (_1943 > 0.0)
        {
            _2168 = abs((1.0 - _1932) / _1943);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1932 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2168 = frontier_phi_28_24_ladder;
        }
        float _2436;
        if (_1946 > 0.0)
        {
            _2436 = abs((1.0 - _1936) / _1946);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1936 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2436 = frontier_phi_40_35_ladder;
        }
        float _2641;
        if (_1949 > 0.0)
        {
            _2641 = abs((1.0 - _1940) / _1949);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1940 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2641 = frontier_phi_49_46_ladder;
        }
        float _2643 = isnan(_2436) ? _2168 : (isnan(_2168) ? _2436 : min(_2168, _2436));
        float _2644 = isnan(_2641) ? _2643 : (isnan(_2643) ? _2641 : min(_2643, _2641));
        float _2648 = (_2644 * _1943) + _1932;
        float _2649 = (_2644 * _1946) + _1936;
        float _2650 = (_2644 * _1949) + _1940;
        float _2651 = _2644 * 9.9999997473787516355514526367188e-05;
        float _2652 = (-1.0) - _2651;
        float _2654 = _2651 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2650 > _2654) || ((_2650 < _2652) || ((_2649 > _2654) || ((_2649 < _2652) || ((_2648 < _2652) || (_2648 > _2654))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2849 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2650, cbModelParam._m0[17u].z, fma(_2649, cbModelParam._m0[17u].y, _2648 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2650, cbModelParam._m0[18u].z, fma(_2649, cbModelParam._m0[18u].y, _2648 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2650, cbModelParam._m0[19u].z, fma(_2649, cbModelParam._m0[19u].y, _2648 * cbModelParam._m0[19u].x))), _1878);
            frontier_phi_25_49_ladder = _2849.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2849.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2849.x * cbModelParam._m0[1u].z;
        }
        _1968 = frontier_phi_25_49_ladder_2;
        _1970 = frontier_phi_25_49_ladder_1;
        _1972 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1952 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_947, _948, _949), _1878);
        _1968 = _1952.x * cbModelParam._m0[1u].z;
        _1970 = _1952.y * cbModelParam._m0[1u].z;
        _1972 = _1952.z * cbModelParam._m0[1u].z;
    }
    float _1984 = ((((1.0 - _971) * ((_958 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_971 * _958)) * _939;
    float _1985 = _1984 * ((cbModelParam._m0[1u].w * (_1968 - _1869)) + _1869);
    float _1986 = _1984 * ((cbModelParam._m0[1u].w * (_1970 - _1871)) + _1871);
    float _1987 = _1984 * ((cbModelParam._m0[1u].w * (_1972 - _1873)) + _1873);
    float _1990 = fma(_1987, cbSceneParam._m0[89u].z, fma(_1986, cbSceneParam._m0[89u].y, _1985 * cbSceneParam._m0[89u].x));
    float _1993 = fma(_1987, cbSceneParam._m0[90u].z, fma(_1986, cbSceneParam._m0[90u].y, _1985 * cbSceneParam._m0[90u].x));
    float _1996 = fma(_1987, cbSceneParam._m0[91u].z, fma(_1986, cbSceneParam._m0[91u].y, _1985 * cbSceneParam._m0[91u].x));
    float _2007 = _876 / cbSceneParam._m0[86u].x;
    float _2015 = (cbSceneParam._m0[88u].y * (1.0 - cbMtdParam._m0[25u].y)) + cbSceneParam._m0[88u].z;
    float _4394 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2017 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * 5.0;
    float _2022 = ((10.0 / (_798 + 10.0)) * cbMtdParam._m0[25u].x) * dot(vec3(_777, _778, _779), vec3(1.0, 0.0, 0.0));
    vec4 _2032 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_2022 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_2022 + _2007) * cbSceneParam._m0[86u].x, _877), _2017).w) + _2007) * cbSceneParam._m0[86u].x, _877), _2017);
    float _2038 = isnan(0.5) ? _2032.w : (isnan(_2032.w) ? 0.5 : max(_2032.w, 0.5));
    float _2053 = 1.0 - (_2032.w / _2038);
    vec4 _2061 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_876, _877));
    float _2063 = _2061.w;
    float _2075 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2063);
    float _2076 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2063);
    float _2077 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2063);
    float _4410 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2078 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _4421 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _4432 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2080 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    uvec4 _2084 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2086 = _2084.x * 14u;
    uint _2087 = _2086 + 13u;
    float _2094 = _939 + (-1.0);
    float _2099 = (cbLight._m0[_2087].x * _2094) + 1.0;
    float _2100 = (cbLight._m0[_2087].y * _2094) + 1.0;
    float _2101 = (cbLight._m0[_2087].z * _2094) + 1.0;
    float _2102 = (cbLight._m0[_2087].w * _2094) + 1.0;
    uint _2103 = _2086 + 5u;
    float _2109 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
    uint _2113 = _2086 + 4u;
    float _2122 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
    uint _2126 = _2086 | 1u;
    float _2137 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_777, _778, _779));
    float _2140 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_777, _778, _779));
    float _4453 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _4464 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2145 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * 0.3183098733425140380859375;
    float _2147 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * 0.3183098733425140380859375;
    float _2154 = ((cbLight._m0[_2103].x * _2109) * _2147) + (((cbLight._m0[_2113].x * _2078) * _2122) * _2145);
    float _2155 = ((_2109 * cbLight._m0[_2103].y) * _2147) + (((cbLight._m0[_2113].y * _2079) * _2122) * _2145);
    float _2156 = ((_2109 * cbLight._m0[_2103].z) * _2147) + (((cbLight._m0[_2113].z * _2080) * _2122) * _2145);
    uvec4 _2160 = floatBitsToUint(cbLight._m0[_2086 + 12u]);
    bool _2162 = _2160.x == 0u;
    float _2173;
    float _2175;
    float _2177;
    if (_2162)
    {
        _2173 = _2154;
        _2175 = _2155;
        _2177 = _2156;
    }
    else
    {
        uint _2181 = _2086 + 6u;
        float _2197 = (dot(vec3(cbLight._m0[_2086 + 2u].xyz), vec3(_777, _778, _779)) * 0.5) + 0.5;
        float _2198 = _2197 * _2197;
        float _4475 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2199 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2200 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2173 = (((cbLight._m0[_2181].x * 0.3183098733425140380859375) * _2199) * _2200) + _2154;
        _2175 = (((cbLight._m0[_2181].y * 0.3183098733425140380859375) * _2199) * _2200) + _2155;
        _2177 = (((cbLight._m0[_2181].z * 0.3183098733425140380859375) * _2199) * _2200) + _2156;
    }
    bool _2180 = _2160.y == 0u;
    float _2218;
    float _2220;
    float _2222;
    if (_2180)
    {
        _2218 = _2173;
        _2220 = _2175;
        _2222 = _2177;
    }
    else
    {
        uint _2380 = _2086 + 7u;
        float _2396 = (dot(vec3(cbLight._m0[_2086 + 3u].xyz), vec3(_777, _778, _779)) * 0.5) + 0.5;
        float _2397 = _2396 * _2396;
        float _4491 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2398 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2399 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2218 = (((cbLight._m0[_2380].x * 0.3183098733425140380859375) * _2398) * _2399) + _2173;
        _2220 = (((cbLight._m0[_2380].y * 0.3183098733425140380859375) * _2398) * _2399) + _2175;
        _2222 = (((cbLight._m0[_2380].z * 0.3183098733425140380859375) * _2398) * _2399) + _2177;
    }
    uint _2225 = _2086 + 8u;
    float _2238 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _780) * 0.949999988079071044921875);
    float _2239 = _2238 * _2238;
    float _2240 = cbLight._m0[_2086].x + _856;
    float _2241 = cbLight._m0[_2086].y + _857;
    float _2242 = cbLight._m0[_2086].z + _858;
    float _2246 = inversesqrt(dot(vec3(_2240, _2241, _2242), vec3(_2240, _2241, _2242)));
    float _2247 = _2246 * _2240;
    float _2248 = _2246 * _2241;
    float _2249 = _2246 * _2242;
    float _2250 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2086].xyz));
    float _4507 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _4518 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _2254 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _2255 = dot(vec3(_777, _778, _779), vec3(_2247, _2248, _2249));
    float _4529 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _2259 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2247, _2248, _2249));
    float _4540 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2263 = _2239 * _2239;
    float _2267 = ((_2258 * _2258) * (_2263 + (-1.0))) + 1.0;
    float _2278 = (exp2(log2(1.0 - (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2279 = 1.0 - _2239;
    float _2290 = (0.5 / (((_2254 * ((_2253 * _2279) + _2239)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2279) + _2239) * _2253))) * _2253;
    float _4551 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2292 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2263 / ((_2267 * _2267) * 3.141590118408203125));
    uint _2306 = _2086 + 9u;
    float _2317 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2126].w)) * _780) * 0.949999988079071044921875);
    float _2318 = _2317 * _2317;
    float _2319 = cbLight._m0[_2126].x + _856;
    float _2320 = cbLight._m0[_2126].y + _857;
    float _2321 = cbLight._m0[_2126].z + _858;
    float _2325 = inversesqrt(dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321)));
    float _2326 = _2325 * _2319;
    float _2327 = _2325 * _2320;
    float _2328 = _2325 * _2321;
    float _2329 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2126].xyz));
    float _4562 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _2333 = dot(vec3(_777, _778, _779), vec3(_2326, _2327, _2328));
    float _4573 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2336 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2337 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_2326, _2327, _2328));
    float _4584 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2341 = _2318 * _2318;
    float _2345 = ((_2336 * _2336) * (_2341 + (-1.0))) + 1.0;
    float _2354 = (exp2(log2(1.0 - (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2355 = 1.0 - _2318;
    float _2365 = (0.5 / (((_2254 * ((_2332 * _2355) + _2318)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2355) + _2318) * _2332))) * _2332;
    float _4595 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2367 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2341 / ((_2345 * _2345) * 3.141590118408203125));
    float _2377 = (((_2354 * cbLight._m0[_2306].x) * _2367) * _2109) + ((((cbLight._m0[_2225].x * _2078) * _2278) * _2292) * _2122);
    float _2378 = (((_2354 * cbLight._m0[_2306].y) * _2367) * _2109) + ((((cbLight._m0[_2225].y * _2079) * _2278) * _2292) * _2122);
    float _2379 = (((_2354 * cbLight._m0[_2306].z) * _2367) * _2109) + ((((cbLight._m0[_2225].z * _2080) * _2278) * _2292) * _2122);
    float _2441;
    float _2443;
    float _2445;
    if (_2162)
    {
        _2441 = _2377;
        _2443 = _2378;
        _2445 = _2379;
    }
    else
    {
        uint _2447 = _2086 + 2u;
        uint _2451 = _2086 + 10u;
        float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2447].w)) * _780) * 0.949999988079071044921875);
        float _2466 = _2465 * _2465;
        float _2467 = cbLight._m0[_2447].x + _856;
        float _2468 = cbLight._m0[_2447].y + _857;
        float _2469 = cbLight._m0[_2447].z + _858;
        float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
        float _2474 = _2473 * _2467;
        float _2475 = _2473 * _2468;
        float _2476 = _2473 * _2469;
        float _2477 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2447].xyz));
        float _4606 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2480 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2481 = dot(vec3(_777, _778, _779), vec3(_2474, _2475, _2476));
        float _4617 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2485 = dot(vec3(cbLight._m0[_2447].xyz), vec3(_2474, _2475, _2476));
        float _4628 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2489 = _2466 * _2466;
        float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
        float _2502 = (exp2(log2(1.0 - (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2503 = 1.0 - _2466;
        float _2513 = (0.5 / (((_2254 * ((_2480 * _2503) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2503) + _2466) * _2480))) * _2480;
        float _4639 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2515 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
        float _2516 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2441 = (((_2502 * cbLight._m0[_2451].x) * _2515) * _2516) + _2377;
        _2443 = (((_2502 * cbLight._m0[_2451].y) * _2515) * _2516) + _2378;
        _2445 = (((_2502 * cbLight._m0[_2451].z) * _2515) * _2516) + _2379;
    }
    float _2551;
    float _2553;
    float _2555;
    if (_2180)
    {
        _2551 = _2441;
        _2553 = _2443;
        _2555 = _2445;
    }
    else
    {
        uint _2562 = _2086 + 3u;
        uint _2566 = _2086 + 11u;
        float _2580 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2562].w)) * _780) * 0.949999988079071044921875);
        float _2581 = _2580 * _2580;
        float _2582 = cbLight._m0[_2562].x + _856;
        float _2583 = cbLight._m0[_2562].y + _857;
        float _2584 = cbLight._m0[_2562].z + _858;
        float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
        float _2589 = _2588 * _2582;
        float _2590 = _2588 * _2583;
        float _2591 = _2588 * _2584;
        float _2592 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2562].xyz));
        float _4655 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2596 = dot(vec3(_777, _778, _779), vec3(_2589, _2590, _2591));
        float _4666 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2599 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2600 = dot(vec3(cbLight._m0[_2562].xyz), vec3(_2589, _2590, _2591));
        float _4677 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2604 = _2581 * _2581;
        float _2608 = ((_2599 * _2599) * (_2604 + (-1.0))) + 1.0;
        float _2617 = (exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2618 = 1.0 - _2581;
        float _2628 = (0.5 / (((_2254 * ((_2595 * _2618) + _2581)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2618) + _2581) * _2595))) * _2595;
        float _4688 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2630 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2604 / ((_2608 * _2608) * 3.141590118408203125));
        float _2631 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2551 = (((_2617 * cbLight._m0[_2566].x) * _2630) * _2631) + _2441;
        _2553 = (((_2617 * cbLight._m0[_2566].y) * _2630) * _2631) + _2443;
        _2555 = (((_2617 * cbLight._m0[_2566].z) * _2630) * _2631) + _2445;
    }
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    float _2774;
    float _2776;
    if (_2084.y == 0u)
    {
        float _2706 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2707 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2706;
        float _2708 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2706;
        float _2709 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2706;
        uvec4 _2721 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2722 = _2721.x;
        uint _2733 = uint((float(_2721.y) * floor(float(uint(cbSceneParam._m0[85u].y * _877) / _2722))) + floor(float(uint(cbSceneParam._m0[85u].x * _876) / _2722)));
        float _2743 = (log2(_2709 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2744 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        uint _2747 = uint(isnan(14.0) ? _2744 : (isnan(_2744) ? 14.0 : min(_2744, 14.0)));
        uvec4 _2752 = texelFetch(g_lightClusterGridBuffer, int(((_2747 << 2u) + (_2733 << 6u)) >> 2u));
        uint _2753 = _2752.x;
        uint _2754 = _2721.z;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        if (((((1u << ((_2754 >> 4u) & 15u)) + 4294967295u) & _2753) == 0u) || ((_2754 & 240u) == 0u))
        {
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
        }
        else
        {
            float _2855;
            float _2857;
            float _2859;
            float _2861;
            float _2863;
            float _2865;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            float _3011 = 0.0;
            uint _3012 = 0u;
            uint _3021;
            bool _3022;
            for (;;)
            {
                _3021 = texelFetch(g_lightClassification, int((((_2747 << 5u) + (_2733 << 9u)) + (_3012 << 2u)) >> 2u)).x;
                _3022 = _3021 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3022)
                {
                    frontier_phi_66_pred = _3006;
                    frontier_phi_66_pred_1 = _3011;
                    frontier_phi_66_pred_2 = _3010;
                    frontier_phi_66_pred_3 = _3009;
                    frontier_phi_66_pred_4 = _3008;
                    frontier_phi_66_pred_5 = _3007;
                }
                else
                {
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    uint _3157;
                    _3151 = _3006;
                    _3152 = _3007;
                    _3153 = _3008;
                    _3154 = _3009;
                    _3155 = _3010;
                    _3156 = _3011;
                    _3157 = _3021;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    for (;;)
                    {
                        uint _3161 = uint(findLSB(_3157)) + (_3012 << 5u);
                        uint _3158 = (_3157 + 4294967295u) & _3157;
                        uint _3163 = _3161 * 48u;
                        vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3163)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 3u)).x));
                        uint _3183 = (_3161 * 48u) + 4u;
                        vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3183)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 3u)).x));
                        uint _3202 = (_3161 * 48u) + 8u;
                        vec3 _3213 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3202)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 2u)).x));
                        float _3217 = _3177.x - _2707;
                        float _3218 = _3177.y - _2708;
                        float _3219 = _3177.z - _2709;
                        float _3220 = dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219));
                        float _3223 = inversesqrt(_3220);
                        float _3224 = _3223 * _3217;
                        float _3225 = _3223 * _3218;
                        float _3226 = _3223 * _3219;
                        float _3227 = dot(vec3(_895, _898, _901), vec3(_3224, _3225, _3226));
                        float _3232 = 1.0 - (_3220 * _3177.w);
                        float _4714 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3233 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                        float _3234 = sqrt(_3220) * _3196.w;
                        float _3237 = 1.39999997615814208984375 / (_3234 + 1.39999997615814208984375);
                        float _3238 = _3237 * _3237;
                        float _3241 = ((1.0 - _3238) * _3227) + _3238;
                        float _3244 = _3234 * _3234;
                        float _3248 = ((isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0))) * _3233) / ((_3244 * 0.699999988079071044921875) + 1.0);
                        float _3252 = (-0.0) - _2707;
                        float _3253 = (-0.0) - _2708;
                        float _3254 = (-0.0) - _2709;
                        float _3258 = inversesqrt(dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254)));
                        float _3259 = _3258 * _3252;
                        float _3260 = _3258 * _3253;
                        float _3261 = _3258 * _3254;
                        float _3269 = exp2(log2(1.0 / ((_3244 * 3.5) + 5.0)) * 0.25);
                        float _3270 = 1.0 - _958;
                        float _3277 = sqrt(1.0 - ((1.0 - (_3270 * _3270)) * (1.0 - (_3269 * _3269))));
                        float _3278 = _3277 * _3277;
                        float _3279 = _3278 * _3278;
                        float _3280 = _3259 + _3224;
                        float _3281 = _3260 + _3225;
                        float _3282 = _3261 + _3226;
                        float _3286 = inversesqrt(dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282)));
                        float _3290 = dot(vec3(_895, _898, _901), vec3(_3259, _3260, _3261));
                        float _4730 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3293 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                        float _3294 = dot(vec3(_895, _898, _901), vec3(_3286 * _3280, _3286 * _3281, _3286 * _3282));
                        float _4741 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3297 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                        float _3301 = ((_3297 * _3297) * (_3279 + (-1.0))) + 1.0;
                        float _3302 = _3237 * _3278;
                        float _3303 = _3302 * _3302;
                        float _3306 = ((1.0 - _3303) * _3227) + _3303;
                        float _4752 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3307 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3308 = 1.0 - _3278;
                        float _3318 = (0.5 / (((_3307 * ((_3293 * _3308) + _3278)) + 9.9999999392252902907785028219223e-09) + (((_3307 * _3308) + _3278) * _3293))) * _3307;
                        float _4763 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3329 = (((_3279 * 3.1415927410125732421875) * (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) / ((_3301 * _3301) * ((_3244 * 2.1991131305694580078125) + 3.141590118408203125))) * _3233;
                        _3081 = (_3248 * _3196.x) + _3154;
                        _3082 = (_3248 * _3196.y) + _3155;
                        _3083 = (_3248 * _3196.z) + _3156;
                        _3078 = (_3329 * _3213.x) + _3151;
                        _3079 = (_3329 * _3213.y) + _3152;
                        _3080 = (_3329 * _3213.z) + _3153;
                        if (_3158 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3151 = _3078;
                            _3152 = _3079;
                            _3153 = _3080;
                            _3154 = _3081;
                            _3155 = _3082;
                            _3156 = _3083;
                            _3157 = _3158;
                        }
                    }
                    frontier_phi_66_pred = _3078;
                    frontier_phi_66_pred_1 = _3083;
                    frontier_phi_66_pred_2 = _3082;
                    frontier_phi_66_pred_3 = _3081;
                    frontier_phi_66_pred_4 = _3080;
                    frontier_phi_66_pred_5 = _3079;
                }
                _2855 = frontier_phi_66_pred;
                _2865 = frontier_phi_66_pred_1;
                _2863 = frontier_phi_66_pred_2;
                _2861 = frontier_phi_66_pred_3;
                _2859 = frontier_phi_66_pred_4;
                _2857 = frontier_phi_66_pred_5;
                uint _3013 = _3012 + 1u;
                if (_3013 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3006 = _2855;
                    _3007 = _2857;
                    _3008 = _2859;
                    _3009 = _2861;
                    _3010 = _2863;
                    _3011 = _2865;
                    _3012 = _3013;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
        }
        uvec4 _2868 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2869 = _2868.z;
        uint _2871 = (_2869 >> 8u) & 15u;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        if (((4294967295u << _2871) & _2753) == 0u)
        {
            _2974 = _2854;
            _2976 = _2856;
            _2978 = _2858;
            _2980 = _2860;
            _2982 = _2862;
            _2984 = _2864;
        }
        else
        {
            float _2999 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
            float _3000 = _2999 * _2707;
            float _3001 = _2999 * _2708;
            float _3002 = _2999 * _2709;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2871 < ((_2869 >> 12u) & 15u))
            {
                float _2975;
                float _2977;
                float _2979;
                float _2981;
                float _2983;
                float _2985;
                float _3134 = _2854;
                float _3135 = _2856;
                float _3136 = _2858;
                float _3137 = _2860;
                float _3138 = _2862;
                float _3139 = _2864;
                uint _3140 = _2871;
                uint _3149;
                bool _3150;
                for (;;)
                {
                    _3149 = texelFetch(g_lightClassification, int((((_2747 << 5u) + (_2733 << 9u)) + (_3140 << 2u)) >> 2u)).x;
                    _3150 = _3149 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3150)
                    {
                        frontier_phi_77_pred = _3139;
                        frontier_phi_77_pred_1 = _3138;
                        frontier_phi_77_pred_2 = _3137;
                        frontier_phi_77_pred_3 = _3136;
                        frontier_phi_77_pred_4 = _3135;
                        frontier_phi_77_pred_5 = _3134;
                    }
                    else
                    {
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3356 = _3134;
                        float _3357 = _3135;
                        float _3358 = _3136;
                        float _3359 = _3137;
                        float _3360 = _3138;
                        float _3361 = _3139;
                        uint _3362 = _3149;
                        uint _3363;
                        vec4 _3388;
                        float _3389;
                        vec4 _3404;
                        vec3 _3416;
                        vec4 _3431;
                        vec4 _3446;
                        float _3492;
                        bool _3493;
                        for (;;)
                        {
                            uint _3373 = ((_3140 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3362));
                            _3363 = (_3362 + 4294967295u) & _3362;
                            uint _3375 = _3373 * 40u;
                            _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            _3389 = _3388.w;
                            uint _3391 = (_3373 * 40u) + 4u;
                            _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3406 = (_3373 * 40u) + 8u;
                            _3416 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x));
                            uint _3418 = (_3373 * 40u) + 16u;
                            _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            uint _3433 = (_3373 * 40u) + 20u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3448 = (_3373 * 40u) + 24u;
                            vec4 _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            uint _3467 = (_3373 * 40u) + 28u;
                            vec4 _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            _3492 = fma(_2709, _3480.z, fma(_2708, _3480.y, _3480.x * _2707)) + _3480.w;
                            _3493 = !((fma(_2709, _3461.z, fma(_2708, _3461.y, _3461.x * _2707)) + _3461.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3493)
                            {
                                float _3520 = _3388.x - _2707;
                                float _3521 = _3388.y - _2708;
                                float _3522 = _3388.z - _2709;
                                float _3523 = dot(vec3(_3520, _3521, _3522), vec3(_3520, _3521, _3522));
                                float _3526 = inversesqrt(_3523);
                                float _3527 = _3526 * _3520;
                                float _3528 = _3526 * _3521;
                                float _3529 = _3526 * _3522;
                                float _3533 = 1.0 - (_3523 / (_3389 * _3389));
                                float _4774 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3534 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                                float _3538 = sqrt(_3523) * _3404.w;
                                float _3540 = 1.39999997615814208984375 / (_3538 + 1.39999997615814208984375);
                                float _3541 = _3540 * _3540;
                                float _3544 = ((1.0 - _3541) * dot(vec3(_3527, _3528, _3529), vec3(_895, _898, _901))) + _3541;
                                float _3547 = _3538 * _3538;
                                float _3551 = (fma(_2709, _3431.z, fma(_2708, _3431.y, _3431.x * _2707)) + _3431.w) / _3492;
                                float _3552 = (fma(_2709, _3446.z, fma(_2708, _3446.y, _3446.x * _2707)) + _3446.w) / _3492;
                                float _3556 = 1.0 - dot(vec2(_3551, _3552), vec2(_3551, _3552));
                                float _4790 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3557 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3558 = _3557 * (((isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0))) * _3534) / ((_3547 * 0.699999988079071044921875) + 1.0));
                                float _3570 = exp2(log2(1.0 / ((_3547 * 3.5) + 5.0)) * 0.25);
                                float _3571 = 1.0 - _958;
                                float _3578 = sqrt(1.0 - ((1.0 - (_3571 * _3571)) * (1.0 - (_3570 * _3570))));
                                float _3579 = _3578 * _3578;
                                float _3580 = _3579 * _3579;
                                float _3581 = _3527 - _3000;
                                float _3582 = _3528 - _3001;
                                float _3583 = _3529 - _3002;
                                float _3587 = inversesqrt(dot(vec3(_3581, _3582, _3583), vec3(_3581, _3582, _3583)));
                                float _3591 = dot(vec3(_895, _898, _901), vec3((-0.0) - _3000, (-0.0) - _3001, (-0.0) - _3002));
                                float _4801 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3594 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3595 = dot(vec3(_895, _898, _901), vec3(_3587 * _3581, _3587 * _3582, _3587 * _3583));
                                float _4812 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3598 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3602 = ((_3598 * _3598) * (_3580 + (-1.0))) + 1.0;
                                float _3603 = _3540 * _3579;
                                float _3604 = _3603 * _3603;
                                float _3610 = ((1.0 - _3604) * dot(vec3(_895, _898, _901), vec3(_3527, _3528, _3529))) + _3604;
                                float _4823 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3611 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3612 = 1.0 - _3579;
                                float _3622 = (0.5 / (((_3611 * ((_3594 * _3612) + _3579)) + 9.9999999392252902907785028219223e-09) + (((_3611 * _3612) + _3579) * _3594))) * _3611;
                                float _4834 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3632 = (_3557 * _3534) * (((_3580 * 3.1415927410125732421875) * (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) / ((_3602 * _3602) * ((_3547 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3558 * _3404.y;
                                frontier_phi_83_pred_1 = _3558 * _3404.x;
                                frontier_phi_83_pred_2 = _3632 * _3416.z;
                                frontier_phi_83_pred_3 = _3632 * _3416.y;
                                frontier_phi_83_pred_4 = _3632 * _3416.x;
                                frontier_phi_83_pred_5 = _3558 * _3404.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3640 = frontier_phi_83_pred;
                            _3639 = frontier_phi_83_pred_1;
                            _3638 = frontier_phi_83_pred_2;
                            _3637 = frontier_phi_83_pred_3;
                            _3636 = frontier_phi_83_pred_4;
                            _3641 = frontier_phi_83_pred_5;
                            _3346 = _3639 + _3359;
                            _3347 = _3640 + _3360;
                            _3348 = _3641 + _3361;
                            _3343 = _3636 + _3356;
                            _3344 = _3637 + _3357;
                            _3345 = _3638 + _3358;
                            if (_3363 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3363;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3348;
                        frontier_phi_77_pred_1 = _3347;
                        frontier_phi_77_pred_2 = _3346;
                        frontier_phi_77_pred_3 = _3345;
                        frontier_phi_77_pred_4 = _3344;
                        frontier_phi_77_pred_5 = _3343;
                    }
                    _2985 = frontier_phi_77_pred;
                    _2983 = frontier_phi_77_pred_1;
                    _2981 = frontier_phi_77_pred_2;
                    _2979 = frontier_phi_77_pred_3;
                    _2977 = frontier_phi_77_pred_4;
                    _2975 = frontier_phi_77_pred_5;
                    uint _3141 = _3140 + 1u;
                    if (_3141 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3134 = _2975;
                        _3135 = _2977;
                        _3136 = _2979;
                        _3137 = _2981;
                        _3138 = _2983;
                        _3139 = _2985;
                        _3140 = _3141;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2979;
                frontier_phi_58_59_ladder_1 = _2985;
                frontier_phi_58_59_ladder_2 = _2983;
                frontier_phi_58_59_ladder_3 = _2981;
                frontier_phi_58_59_ladder_4 = _2977;
                frontier_phi_58_59_ladder_5 = _2975;
            }
            else
            {
                frontier_phi_58_59_ladder = _2858;
                frontier_phi_58_59_ladder_1 = _2864;
                frontier_phi_58_59_ladder_2 = _2862;
                frontier_phi_58_59_ladder_3 = _2860;
                frontier_phi_58_59_ladder_4 = _2856;
                frontier_phi_58_59_ladder_5 = _2854;
            }
            _2974 = frontier_phi_58_59_ladder_5;
            _2976 = frontier_phi_58_59_ladder_4;
            _2978 = frontier_phi_58_59_ladder;
            _2980 = frontier_phi_58_59_ladder_3;
            _2982 = frontier_phi_58_59_ladder_2;
            _2984 = frontier_phi_58_59_ladder_1;
        }
        float _2989 = isnan(1.0) ? _939 : (isnan(_939) ? 1.0 : min(_939, 1.0));
        _2766 = (_2989 * _2980) + _2218;
        _2768 = (_2989 * _2982) + _2220;
        _2770 = (_2989 * _2984) + _2222;
        _2772 = ((_2974 * 0.039999999105930328369140625) * _2989) + _2551;
        _2774 = ((_2976 * 0.039999999105930328369140625) * _2989) + _2553;
        _2776 = ((_2978 * 0.039999999105930328369140625) * _2989) + _2555;
    }
    else
    {
        _2766 = _2218;
        _2768 = _2220;
        _2770 = _2222;
        _2772 = _2551;
        _2774 = _2553;
        _2776 = _2555;
    }
    float _4850 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _4861 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _4872 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _2793 = ((isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_2766 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _939))) + (((((_1984 * (_2032.x / _2038)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1777) * _2053)) + _2772) * cbPerFrame._m0[3u].x);
    float _2794 = ((isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2768 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _939))) + (((((_1984 * (_2032.y / _2038)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1777) * _2053)) + _2774) * cbPerFrame._m0[3u].x);
    float _2795 = ((isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2770 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _939))) + (((((_1984 * (_2032.z / _2038)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1777) * _2053)) + _2776) * cbPerFrame._m0[3u].x);
    uint _2796 = _259 + 6u;
    float _2804 = _876 / cbSceneParam._m0[86u].x;
    float _2805 = _877 / cbSceneParam._m0[86u].y;
    vec4 _2819 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2804, _2805, (log2((isnan(cbSceneParam._m0[77u].w) ? _798 : (isnan(_798) ? cbSceneParam._m0[77u].w : min(_798, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2821 = _2819.x;
    float _2822 = _2819.y;
    float _2823 = _2819.z;
    float _2824 = _2819.w;
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    if (_798 > cbSceneParam._m0[78u].w)
    {
        float _2879 = isnan(_798) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _798 : min(cbSceneParam._m0[80u].w, _798));
        float _2880 = _2879 / _798;
        float _2891 = _2880 * _849;
        float _2892 = _850 * _2880;
        float _2893 = (-0.0) - _2892;
        float _2895 = _2880 * _851;
        float _2897 = (cbSceneParam._m0[77u].w * _2893) / _2879;
        float _2898 = _2897 + cbSceneParam._m0[79u].w;
        float _2899 = cbSceneParam._m0[79u].w - _2892;
        float _2905 = sqrt(((_2891 * _2891) + (_2892 * _2892)) + (_2895 * _2895));
        float _2908 = (1.0 - (cbSceneParam._m0[77u].w / _2879)) * _2905;
        float _2913 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2915 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3091;
        if (abs((_2893 - _2897) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3091 = ((((_2898 > 0.0) ? exp2(_2913 * _2898) : (2.0 - exp2(_2915 * _2898))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2908;
        }
        else
        {
            float _3035 = 1.0 / cbSceneParam._m0[80u].x;
            float _3036 = isnan(_2899) ? _2898 : (isnan(_2898) ? _2899 : max(_2898, _2899));
            float _3037 = isnan(_2899) ? _2898 : (isnan(_2898) ? _2899 : min(_2898, _2899));
            float _3046 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : min(_3036, 0.0));
            float _3047 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : min(_3037, 0.0));
            _3091 = ((abs(_2905 / _2893) * cbSceneParam._m0[80u].y) * ((((_3046 - _3047) * 2.0) - ((exp2(_2913 * (isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0)))) - exp2(_2913 * (isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0))))) * _3035)) - ((exp2(_2915 * _3046) - exp2(_2915 * _3047)) * _3035))) + (_2908 * cbSceneParam._m0[80u].z);
        }
        vec4 _3093 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2804, _2805, 1.0), 0.0);
        float _3102 = exp2((_3091 * (-1.44269502162933349609375)) * (1.0 - _3093.w));
        float _3103 = log2(_3102);
        float _3119 = log2(_2824);
        _2917 = (exp2(_3119 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3103 * cbSceneParam._m0[78u].x)) * _3093.x) / cbSceneParam._m0[78u].x)) + _2821;
        _2919 = (exp2(_3119 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3103 * cbSceneParam._m0[78u].y)) * _3093.y) / cbSceneParam._m0[78u].y)) + _2822;
        _2921 = (exp2(_3119 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3103 * cbSceneParam._m0[78u].z)) * _3093.z) / cbSceneParam._m0[78u].z)) + _2823;
        _2923 = _3102 * _2824;
    }
    else
    {
        _2917 = _2821;
        _2919 = _2822;
        _2921 = _2823;
        _2923 = _2824;
    }
    bool _3129;
    vec4 _2932;
    vec4 _2954;
    float _2956;
    float _2960;
    float _2961;
    float _2962;
    float _2963;
    bool _2973;
    for (;;)
    {
        _2932 = cbMatDynParam._m0[0u];
        float _2934 = roundEven(_2932.y);
        bool _2935 = _2934 == 3.0;
        float _2936 = log2(_2923);
        float _2943 = exp2(_2936 * cbSceneParam._m0[78u].x) * _2793;
        float _2944 = exp2(_2936 * cbSceneParam._m0[78u].y) * _2794;
        float _2945 = exp2(_2936 * cbSceneParam._m0[78u].z) * _2795;
        float _2952 = _865 + (-0.5);
        _2954 = cbMtdParam._m0[1u];
        _2956 = _2954.y * _2952;
        float _2959 = (_2934 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2960 = _2959 * (_2935 ? _2943 : (_2943 + (cbSceneParam._m0[72u].w * _2917)));
        _2961 = _2959 * (_2935 ? _2944 : (_2944 + (cbSceneParam._m0[72u].w * _2919)));
        _2962 = _2959 * (_2935 ? _2945 : (_2945 + (cbSceneParam._m0[72u].w * _2921)));
        _2963 = _2952 * 0.999000012874603271484375;
        _2973 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2973)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _2963) < 0.5)
            {
                _3129 = true;
                break;
            }
        }
        uint _3070 = _914 + uint(_2932.w);
        if ((cbInstanceData._m0[_3070].w < 1.0) && ((cbInstanceData._m0[_3070].w + _2963) < 0.5))
        {
            _3129 = true;
            break;
        }
        if ((_2956 + _295) < _2954.x)
        {
            _3129 = true;
            break;
        }
        _3129 = false;
        break;
    }
    float _3334;
    if (_3129)
    {
        discard_state = true;
        _3334 = 0.0;
    }
    else
    {
        _3334 = cbInstanceData._m0[_2796].w;
    }
    SV_Target.x = _2960;
    SV_Target.y = _2961;
    SV_Target.z = _2962;
    SV_Target.w = _3334;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2796].w;
    discard_exit();
}


