#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[33];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _832;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _227 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _233 = _227.x * cbMtdParam._m0[9u].x;
    float _234 = _227.y * cbMtdParam._m0[9u].y;
    float _235 = _227.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _257 = cbMtdParam._m0[25u].z * _248.z;
    float _3197 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _259 = isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0));
    float _263 = (_248.x * 2.0) + (-1.0);
    float _265 = (_248.y * 2.0) + (-1.0);
    float _266 = dot(vec2(_263, _265), vec2(_263, _265));
    float _3208 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _271 = sqrt(1.0 - (isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0))));
    float _277 = (cbMtdParam._m0[26u].y * (1.0 - _259)) + _259;
    float _3219 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _278 = isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0));
    float _283 = cbMtdParam._m0[22u].x + _248.w;
    float _288 = fma(_271, _197 * NORMAL.x, fma(_265, _204 * TANGENT.x, (_190 * _182) * _263));
    float _291 = fma(_271, _197 * NORMAL.y, fma(_265, _204 * TANGENT.y, (_190 * _183) * _263));
    float _294 = fma(_271, _197 * NORMAL.z, fma(_265, _204 * TANGENT.z, (_190 * _184) * _263));
    float _298 = inversesqrt(dot(vec3(_288, _291, _294), vec3(_288, _291, _294)));
    float _299 = _298 * _288;
    float _300 = _298 * _291;
    float _301 = _298 * _294;
    float _3230 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _302 = isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0));
    float _3241 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _3252 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3263 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3274 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _322 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _364 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _374 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _364);
    float _375 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _364);
    float _376 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _364);
    float _380 = inversesqrt(dot(vec3(_374, _375, _376), vec3(_374, _375, _376)));
    float _381 = _374 * _380;
    float _382 = _375 * _380;
    float _383 = _376 * _380;
    float _389 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _390 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _411 = fma(_301, cbSceneParam._m0[5u].z, fma(_300, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _299));
    float _414 = fma(_301, cbSceneParam._m0[6u].z, fma(_300, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _299));
    float _417 = fma(_301, cbSceneParam._m0[7u].z, fma(_300, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _299));
    uint _430 = uint(roundEven(NORMAL.w)) * 13u;
    uint _433 = (_430 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _439 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0)))) * cbInstanceData._m0[_433].x;
    float _440 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0)))) * cbInstanceData._m0[_433].y;
    float _441 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0)))) * cbInstanceData._m0[_433].z;
    float _3285 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
    float _3296 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
    float _3307 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
    vec4 _453 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _389, cbSceneParam._m0[86u].y * _390));
    float _457 = ((isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0))) * TEXCOORD_5.w) * _453.x;
    float _458 = dot(vec3(_299, _300, _301), vec3(_381, _382, _383));
    float _461 = _458 * 2.0;
    float _465 = (_461 * _299) - _381;
    float _466 = (_461 * _300) - _382;
    float _467 = (_461 * _301) - _383;
    float _474 = abs(dot(vec3(_381, _382, _383), vec3(_299, _300, _301)));
    float _3318 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _476 = sqrt(_302);
    float _489 = exp2((_476 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_476 * 3.0));
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _831;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _556 = fma(_529, cbModelParam._m0[26u].z, fma(_525, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _521));
        float _560 = fma(_529, cbModelParam._m0[27u].z, fma(_525, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _521));
        float _564 = fma(_529, cbModelParam._m0[28u].z, fma(_525, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _521));
        float _589 = _521 + _299;
        float _590 = _525 + _300;
        float _591 = _529 + _301;
        float _601 = fma(_591, cbModelParam._m0[26u].z, fma(_590, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _589)) - _556;
        float _602 = fma(_591, cbModelParam._m0[27u].z, fma(_590, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _589)) - _560;
        float _603 = fma(_591, cbModelParam._m0[28u].z, fma(_590, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _589)) - _564;
        float _607 = inversesqrt(dot(vec3(_601, _602, _603), vec3(_601, _602, _603)));
        float _620 = ((_607 * _601) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_556 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _621 = ((_607 * _602) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_560 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _622 = ((_607 * _603) / cbModelParam._m0[34u].z) + ((((((_564 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _625 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        vec4 _632 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        vec4 _639 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_620, _621, _622), 0.0);
        float _659 = exp2((_625.w + (-0.5)) * 20.0) * 2.0;
        float _660 = _659 * (_625.x + (-0.5));
        float _661 = _659 * (_625.y + (-0.5));
        float _662 = _659 * (_625.z + (-0.5));
        float _669 = exp2((_632.w + (-0.5)) * 20.0) * 2.0;
        float _670 = _669 * (_632.x + (-0.5));
        float _671 = _669 * (_632.y + (-0.5));
        float _672 = _669 * (_632.z + (-0.5));
        float _679 = exp2((_639.w + (-0.5)) * 20.0) * 2.0;
        float _680 = _679 * (_639.x + (-0.5));
        float _681 = _679 * (_639.y + (-0.5));
        float _682 = _679 * (_639.z + (-0.5));
        float _689 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _690 = _689 * (_646.x + (-0.5));
        float _691 = _689 * (_646.y + (-0.5));
        float _692 = _689 * (_646.z + (-0.5));
        float _693 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _694 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _695 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _696 = _660 * 0.5;
        float _697 = _670 * 0.5;
        float _698 = _680 * 0.5;
        float _699 = dot(vec3(_696, _697, _698), vec3(_696, _697, _698));
        float _704 = (_699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_699);
        float _713 = (dot(vec3(_299, _300, _301), vec3(_704 * _696, _704 * _697, _704 * _698)) + 1.0) * 0.5;
        float _3344 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _723 = sqrt(((_697 * _697) + (_696 * _696)) + (_698 * _698)) / (_693 + 9.9999997473787516355514526367188e-06);
        float _3355 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _724 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
        float _725 = _724 * 2.0;
        float _729 = (1.0 - _724) / (_724 + 1.0);
        float _3366 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _730 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _739 = ((((1.0 - _730) * (_725 + 2.0)) * exp2(log2(isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))) * (_725 + 1.0))) + _730) * _693;
        float _740 = _661 * 0.5;
        float _741 = _671 * 0.5;
        float _742 = _681 * 0.5;
        float _743 = dot(vec3(_740, _741, _742), vec3(_740, _741, _742));
        float _748 = (_743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_743);
        float _756 = (dot(vec3(_299, _300, _301), vec3(_748 * _740, _748 * _741, _748 * _742)) + 1.0) * 0.5;
        float _3377 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _765 = sqrt(((_741 * _741) + (_740 * _740)) + (_742 * _742)) / (_694 + 9.9999997473787516355514526367188e-06);
        float _3388 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _767 = _766 * 2.0;
        float _771 = (1.0 - _766) / (_766 + 1.0);
        float _3399 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _772 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _781 = ((((1.0 - _772) * (_767 + 2.0)) * exp2(log2(isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * (_767 + 1.0))) + _772) * _694;
        float _782 = _662 * 0.5;
        float _783 = _672 * 0.5;
        float _784 = _682 * 0.5;
        float _785 = dot(vec3(_782, _783, _784), vec3(_782, _783, _784));
        float _790 = (_785 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_785);
        float _798 = (dot(vec3(_299, _300, _301), vec3(_790 * _782, _790 * _783, _790 * _784)) + 1.0) * 0.5;
        float _3410 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _807 = sqrt(((_783 * _783) + (_782 * _782)) + (_784 * _784)) / (_695 + 9.9999997473787516355514526367188e-06);
        float _3421 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _809 = _808 * 2.0;
        float _813 = (1.0 - _808) / (_808 + 1.0);
        float _3432 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _823 = ((((1.0 - _814) * (_809 + 2.0)) * exp2(log2(isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * (_809 + 1.0))) + _814) * _695;
        _831 = _662;
        _833 = _661;
        _834 = _660;
        _835 = _672;
        _836 = _671;
        _837 = _670;
        _838 = _682;
        _839 = _681;
        _840 = _680;
        _841 = _695;
        _842 = _694;
        _843 = _693;
        _844 = cbModelParam._m0[36u].z * (isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0)));
        _845 = cbModelParam._m0[36u].z * (isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0)));
        _846 = cbModelParam._m0[36u].z * (isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0)));
    }
    else
    {
        _831 = _832;
        _833 = _832;
        _834 = _832;
        _835 = _832;
        _836 = _832;
        _837 = _832;
        _838 = _832;
        _839 = _832;
        _840 = _832;
        _841 = _832;
        _842 = _832;
        _843 = _832;
        _844 = 0.0;
        _845 = 0.0;
        _846 = 0.0;
    }
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _872 = fma(_529, cbModelParam._m0[30u].z, fma(_525, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _521));
        float _876 = fma(_529, cbModelParam._m0[31u].z, fma(_525, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _521));
        float _880 = fma(_529, cbModelParam._m0[32u].z, fma(_525, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _521));
        float _903 = _521 + _299;
        float _904 = _525 + _300;
        float _905 = _529 + _301;
        float _915 = fma(_905, cbModelParam._m0[30u].z, fma(_904, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _903)) - _872;
        float _916 = fma(_905, cbModelParam._m0[31u].z, fma(_904, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _903)) - _876;
        float _917 = fma(_905, cbModelParam._m0[32u].z, fma(_904, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _903)) - _880;
        float _921 = inversesqrt(dot(vec3(_915, _916, _917), vec3(_915, _916, _917)));
        float _934 = ((_921 * _915) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_872 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _935 = ((_921 * _916) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_876 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _936 = ((_921 * _917) / cbModelParam._m0[35u].z) + ((((((_880 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        float _971 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_938.x + (-0.5));
        float _973 = _971 * (_938.y + (-0.5));
        float _974 = _971 * (_938.z + (-0.5));
        float _981 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_945.x + (-0.5));
        float _983 = _981 * (_945.y + (-0.5));
        float _984 = _981 * (_945.z + (-0.5));
        float _991 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_952.x + (-0.5));
        float _993 = _991 * (_952.y + (-0.5));
        float _994 = _991 * (_952.z + (-0.5));
        float _1001 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_959.x + (-0.5));
        float _1003 = _1001 * (_959.y + (-0.5));
        float _1004 = _1001 * (_959.z + (-0.5));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = _972 * 0.5;
        float _1009 = _982 * 0.5;
        float _1010 = _992 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(_299, _300, _301), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3473 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _3484 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3495 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * (_1035 + 1.0))) + _1040) * _1005;
        float _1050 = _973 * 0.5;
        float _1051 = _983 * 0.5;
        float _1052 = _993 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_299, _300, _301), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3506 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _3517 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3528 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * (_1077 + 1.0))) + _1082) * _1006;
        float _1092 = _974 * 0.5;
        float _1093 = _984 * 0.5;
        float _1094 = _994 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_299, _300, _301), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3561 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_1119 + 1.0))) + _1124) * _1007;
        _1141 = _974;
        _1142 = _973;
        _1143 = _972;
        _1144 = _984;
        _1145 = _983;
        _1146 = _982;
        _1147 = _994;
        _1148 = _993;
        _1149 = _992;
        _1150 = _1007;
        _1151 = _1006;
        _1152 = _1005;
        _1153 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
        _1154 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1155 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
    }
    else
    {
        _1141 = _832;
        _1142 = _832;
        _1143 = _832;
        _1144 = _832;
        _1145 = _832;
        _1146 = _832;
        _1147 = _832;
        _1148 = _832;
        _1149 = _832;
        _1150 = _832;
        _1151 = _832;
        _1152 = _832;
        _1153 = 0.0;
        _1154 = 0.0;
        _1155 = 0.0;
    }
    float _1165 = (cbModelParam._m0[1u].x * (_1153 - _844)) + _844;
    float _1166 = (cbModelParam._m0[1u].x * (_1154 - _845)) + _845;
    float _1167 = (cbModelParam._m0[1u].x * (_1155 - _846)) + _846;
    float _1188 = fma(_1167, cbSceneParam._m0[89u].z, fma(_1166, cbSceneParam._m0[89u].y, _1165 * cbSceneParam._m0[89u].x));
    float _1191 = fma(_1167, cbSceneParam._m0[90u].z, fma(_1166, cbSceneParam._m0[90u].y, _1165 * cbSceneParam._m0[90u].x));
    float _1194 = fma(_1167, cbSceneParam._m0[91u].z, fma(_1166, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1165));
    float _1209 = _465 * 0.5;
    float _1210 = _466 * 0.5;
    float _1211 = _467 * 0.5;
    float _1212 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_1143, _1146, _1149, _1152));
    float _1215 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_1142, _1145, _1148, _1151));
    float _1218 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_1141, _1144, _1147, _1150));
    float _1252;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1225 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_831, _835, _838, _841));
        float _1229 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_833, _836, _839, _842));
        float _1233 = dot(vec4(_1209, _1210, _1211, 1.0), vec4(_834, _837, _840, _843));
        float _1240 = dot(vec4(cbModelParam._m0[39u]), vec4(_1209, _1210, _1211, 1.0));
        _1252 = dot(vec3(isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1240) ? 0.0 : (isnan(0.0) ? _1240 : max(0.0, _1240))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1252 = 1.0;
    }
    float _1263;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1254 = dot(vec4(cbModelParam._m0[40u]), vec4(_1209, _1210, _1211, 1.0));
        _1263 = dot(vec3(isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)), isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)), isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1254) ? 0.0 : (isnan(0.0) ? _1254 : max(0.0, _1254))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1263 = 1.0;
    }
    float _1267 = (_1263 * cbModelParam._m0[1u].x) + (_1252 * (1.0 - cbModelParam._m0[1u].x));
    float _1277 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _302);
    float _1278 = isnan(_1277) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1277 : min(cbModelParam._m0[25u].z, _1277));
    float _1360;
    float _1362;
    float _1364;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1327 = fma(_529, cbModelParam._m0[13u].z, fma(_525, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _521)) + cbModelParam._m0[13u].w;
        float _1331 = fma(_529, cbModelParam._m0[14u].z, fma(_525, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _521)) + cbModelParam._m0[14u].w;
        float _1335 = fma(_529, cbModelParam._m0[15u].z, fma(_525, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _521)) + cbModelParam._m0[15u].w;
        float _1338 = fma(_467, cbModelParam._m0[13u].z, fma(_466, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _465));
        float _1341 = fma(_467, cbModelParam._m0[14u].z, fma(_466, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _465));
        float _1344 = fma(_467, cbModelParam._m0[15u].z, fma(_466, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _465));
        float _1372;
        if (_1338 > 0.0)
        {
            _1372 = abs((1.0 - _1327) / _1338);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1338 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1327 + 1.0) / _1338);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1372 = frontier_phi_14_12_ladder;
        }
        float _1634;
        if (_1341 > 0.0)
        {
            _1634 = abs((1.0 - _1331) / _1341);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1341 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1331 + 1.0) / _1341);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1634 = frontier_phi_23_19_ladder;
        }
        float _1877;
        if (_1344 > 0.0)
        {
            _1877 = abs((1.0 - _1335) / _1344);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1344 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1335 + 1.0) / _1344);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1877 = frontier_phi_35_30_ladder;
        }
        float _1879 = isnan(_1634) ? _1372 : (isnan(_1372) ? _1634 : min(_1372, _1634));
        float _1880 = isnan(_1877) ? _1879 : (isnan(_1879) ? _1877 : min(_1879, _1877));
        float _1884 = (_1880 * _1338) + _1327;
        float _1885 = (_1880 * _1341) + _1331;
        float _1886 = (_1880 * _1344) + _1335;
        float _1887 = _1880 * 9.9999997473787516355514526367188e-05;
        float _1889 = (-1.0) - _1887;
        float _1891 = _1887 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1886 > _1891) || ((_1886 < _1889) || ((_1885 > _1891) || ((_1885 < _1889) || ((_1884 < _1889) || (_1884 > _1891))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2010 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1886, cbModelParam._m0[9u].z, fma(_1885, cbModelParam._m0[9u].y, _1884 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1886, cbModelParam._m0[10u].z, fma(_1885, cbModelParam._m0[10u].y, _1884 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1886, cbModelParam._m0[11u].z, fma(_1885, cbModelParam._m0[11u].y, _1884 * cbModelParam._m0[11u].x))), _1278);
            frontier_phi_13_35_ladder = _2010.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2010.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2010.x * cbModelParam._m0[1u].y;
        }
        _1360 = frontier_phi_13_35_ladder_2;
        _1362 = frontier_phi_13_35_ladder_1;
        _1364 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1348 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_465, _466, _467), _1278);
        _1360 = _1348.x * cbModelParam._m0[1u].y;
        _1362 = _1348.y * cbModelParam._m0[1u].y;
        _1364 = _1348.z * cbModelParam._m0[1u].y;
    }
    float _1368 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _302);
    float _1369 = isnan(_1368) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1368 : min(cbModelParam._m0[25u].w, _1368));
    float _1461;
    float _1463;
    float _1465;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1425 = fma(_529, cbModelParam._m0[21u].z, fma(_525, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _521)) + cbModelParam._m0[21u].w;
        float _1429 = fma(_529, cbModelParam._m0[22u].z, fma(_525, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _521)) + cbModelParam._m0[22u].w;
        float _1433 = fma(_529, cbModelParam._m0[23u].z, fma(_525, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _521)) + cbModelParam._m0[23u].w;
        float _1436 = fma(_467, cbModelParam._m0[21u].z, fma(_466, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _465));
        float _1439 = fma(_467, cbModelParam._m0[22u].z, fma(_466, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _465));
        float _1442 = fma(_467, cbModelParam._m0[23u].z, fma(_466, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _465));
        float _1639;
        if (_1436 > 0.0)
        {
            _1639 = abs((1.0 - _1425) / _1436);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1436 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1425 + 1.0) / _1436);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1639 = frontier_phi_25_21_ladder;
        }
        float _1904;
        if (_1439 > 0.0)
        {
            _1904 = abs((1.0 - _1429) / _1439);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1429 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1904 = frontier_phi_37_32_ladder;
        }
        float _2109;
        if (_1442 > 0.0)
        {
            _2109 = abs((1.0 - _1433) / _1442);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1433 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2109 = frontier_phi_46_43_ladder;
        }
        float _2111 = isnan(_1904) ? _1639 : (isnan(_1639) ? _1904 : min(_1639, _1904));
        float _2112 = isnan(_2109) ? _2111 : (isnan(_2111) ? _2109 : min(_2111, _2109));
        float _2116 = (_2112 * _1436) + _1425;
        float _2117 = (_2112 * _1439) + _1429;
        float _2118 = (_2112 * _1442) + _1433;
        float _2119 = _2112 * 9.9999997473787516355514526367188e-05;
        float _2120 = (-1.0) - _2119;
        float _2122 = _2119 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2118 > _2122) || ((_2118 < _2120) || ((_2117 > _2122) || ((_2117 < _2120) || ((_2116 < _2120) || (_2116 > _2122))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2311 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2118, cbModelParam._m0[17u].z, fma(_2117, cbModelParam._m0[17u].y, _2116 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2118, cbModelParam._m0[18u].z, fma(_2117, cbModelParam._m0[18u].y, _2116 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2118, cbModelParam._m0[19u].z, fma(_2117, cbModelParam._m0[19u].y, _2116 * cbModelParam._m0[19u].x))), _1369);
            frontier_phi_22_46_ladder = _2311.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2311.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2311.x * cbModelParam._m0[1u].z;
        }
        _1461 = frontier_phi_22_46_ladder_2;
        _1463 = frontier_phi_22_46_ladder_1;
        _1465 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1445 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_465, _466, _467), _1369);
        _1461 = _1445.x * cbModelParam._m0[1u].z;
        _1463 = _1445.y * cbModelParam._m0[1u].z;
        _1465 = _1445.z * cbModelParam._m0[1u].z;
    }
    float _1477 = ((((1.0 - _489) * ((_476 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_489 * _476)) * _457;
    float _1478 = _1477 * ((cbModelParam._m0[1u].w * (_1461 - _1360)) + _1360);
    float _1479 = _1477 * ((cbModelParam._m0[1u].w * (_1463 - _1362)) + _1362);
    float _1480 = _1477 * ((cbModelParam._m0[1u].w * (_1465 - _1364)) + _1364);
    float _1483 = fma(_1480, cbSceneParam._m0[89u].z, fma(_1479, cbSceneParam._m0[89u].y, _1478 * cbSceneParam._m0[89u].x));
    float _1486 = fma(_1480, cbSceneParam._m0[90u].z, fma(_1479, cbSceneParam._m0[90u].y, _1478 * cbSceneParam._m0[90u].x));
    float _1489 = fma(_1480, cbSceneParam._m0[91u].z, fma(_1479, cbSceneParam._m0[91u].y, _1478 * cbSceneParam._m0[91u].x));
    float _1500 = _389 / cbSceneParam._m0[86u].x;
    float _1501 = _390 / cbSceneParam._m0[86u].y;
    float _1508 = (cbSceneParam._m0[88u].y * (1.0 - cbMtdParam._m0[25u].y)) + cbSceneParam._m0[88u].z;
    float _3687 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
    float _1510 = (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * 5.0;
    float _1515 = ((10.0 / (_322 + 10.0)) * cbMtdParam._m0[25u].x) * dot(vec3(_299, _300, _301), vec3(1.0, 0.0, 0.0));
    vec4 _1525 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1515 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1515 + _1500) * cbSceneParam._m0[86u].x, _390), _1510).w) + _1500) * cbSceneParam._m0[86u].x, _390), _1510);
    float _1531 = isnan(0.5) ? _1525.w : (isnan(_1525.w) ? 0.5 : max(_1525.w, 0.5));
    float _1546 = 1.0 - (_1525.w / _1531);
    uvec4 _1556 = floatBitsToUint(cbInstanceData._m0[_430 + 5u]);
    uint _1558 = _1556.x * 14u;
    uint _1559 = _1558 + 13u;
    float _1566 = _457 + (-1.0);
    float _1571 = (cbLight._m0[_1559].x * _1566) + 1.0;
    float _1572 = (cbLight._m0[_1559].y * _1566) + 1.0;
    float _1573 = (cbLight._m0[_1559].z * _1566) + 1.0;
    float _1574 = (cbLight._m0[_1559].w * _1566) + 1.0;
    uint _1575 = _1558 + 5u;
    float _1581 = isnan(1.0) ? _1572 : (isnan(_1572) ? 1.0 : min(_1572, 1.0));
    uint _1585 = _1558 + 4u;
    float _1592 = isnan(1.0) ? _1571 : (isnan(_1571) ? 1.0 : min(_1571, 1.0));
    uint _1596 = _1558 | 1u;
    float _1607 = dot(vec3(cbLight._m0[_1558].xyz), vec3(_299, _300, _301));
    float _1610 = dot(vec3(cbLight._m0[_1596].xyz), vec3(_299, _300, _301));
    float _3713 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
    float _3724 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
    float _1615 = (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * 0.3183098733425140380859375;
    float _1617 = (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * 0.3183098733425140380859375;
    float _1624 = ((cbLight._m0[_1575].x * _1581) * _1617) + ((cbLight._m0[_1585].x * _1592) * _1615);
    float _1625 = ((_1581 * cbLight._m0[_1575].y) * _1617) + ((_1592 * cbLight._m0[_1585].y) * _1615);
    float _1626 = ((_1581 * cbLight._m0[_1575].z) * _1617) + ((_1592 * cbLight._m0[_1585].z) * _1615);
    uvec4 _1631 = floatBitsToUint(cbLight._m0[_1558 + 12u]);
    bool _1633 = _1631.x == 0u;
    float _1644;
    float _1646;
    float _1648;
    if (_1633)
    {
        _1644 = _1624;
        _1646 = _1625;
        _1648 = _1626;
    }
    else
    {
        uint _1652 = _1558 + 6u;
        float _1668 = (dot(vec3(cbLight._m0[_1558 + 2u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _1669 = _1668 * _1668;
        float _3735 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1671 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
        _1644 = (((cbLight._m0[_1652].x * 0.3183098733425140380859375) * _1670) * _1671) + _1624;
        _1646 = (((cbLight._m0[_1652].y * 0.3183098733425140380859375) * _1670) * _1671) + _1625;
        _1648 = (((cbLight._m0[_1652].z * 0.3183098733425140380859375) * _1670) * _1671) + _1626;
    }
    bool _1651 = _1631.y == 0u;
    float _1689;
    float _1691;
    float _1693;
    if (_1651)
    {
        _1689 = _1644;
        _1691 = _1646;
        _1693 = _1648;
    }
    else
    {
        uint _1848 = _1558 + 7u;
        float _1864 = (dot(vec3(cbLight._m0[_1558 + 3u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _1865 = _1864 * _1864;
        float _3751 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1866 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1867 = isnan(1.0) ? _1574 : (isnan(_1574) ? 1.0 : min(_1574, 1.0));
        _1689 = (((cbLight._m0[_1848].x * 0.3183098733425140380859375) * _1866) * _1867) + _1644;
        _1691 = (((cbLight._m0[_1848].y * 0.3183098733425140380859375) * _1866) * _1867) + _1646;
        _1693 = (((cbLight._m0[_1848].z * 0.3183098733425140380859375) * _1866) * _1867) + _1648;
    }
    uint _1696 = _1558 + 8u;
    float _1709 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1558].w)) * _302) * 0.949999988079071044921875);
    float _1710 = _1709 * _1709;
    float _1711 = cbLight._m0[_1558].x + _381;
    float _1712 = cbLight._m0[_1558].y + _382;
    float _1713 = cbLight._m0[_1558].z + _383;
    float _1717 = inversesqrt(dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713)));
    float _1718 = _1717 * _1711;
    float _1719 = _1717 * _1712;
    float _1720 = _1717 * _1713;
    float _1721 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1558].xyz));
    float _3767 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1724 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _3778 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _1725 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _1726 = dot(vec3(_299, _300, _301), vec3(_1718, _1719, _1720));
    float _3789 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
    float _1729 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _1730 = dot(vec3(cbLight._m0[_1558].xyz), vec3(_1718, _1719, _1720));
    float _3800 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
    float _1734 = _1710 * _1710;
    float _1738 = ((_1729 * _1729) * (_1734 + (-1.0))) + 1.0;
    float _1749 = (exp2(log2(1.0 - (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1750 = 1.0 - _1710;
    float _1761 = (0.5 / (((_1725 * ((_1724 * _1750) + _1710)) + 9.9999999392252902907785028219223e-09) + (((_1725 * _1750) + _1710) * _1724))) * _1724;
    float _3811 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1763 = (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1734 / ((_1738 * _1738) * 3.141590118408203125));
    uint _1774 = _1558 + 9u;
    float _1785 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1596].w)) * _302) * 0.949999988079071044921875);
    float _1786 = _1785 * _1785;
    float _1787 = cbLight._m0[_1596].x + _381;
    float _1788 = cbLight._m0[_1596].y + _382;
    float _1789 = cbLight._m0[_1596].z + _383;
    float _1793 = inversesqrt(dot(vec3(_1787, _1788, _1789), vec3(_1787, _1788, _1789)));
    float _1794 = _1793 * _1787;
    float _1795 = _1793 * _1788;
    float _1796 = _1793 * _1789;
    float _1797 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1596].xyz));
    float _3822 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1800 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _1801 = dot(vec3(_299, _300, _301), vec3(_1794, _1795, _1796));
    float _3833 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1804 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _1805 = dot(vec3(cbLight._m0[_1596].xyz), vec3(_1794, _1795, _1796));
    float _3844 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1809 = _1786 * _1786;
    float _1813 = ((_1804 * _1804) * (_1809 + (-1.0))) + 1.0;
    float _1822 = (exp2(log2(1.0 - (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1823 = 1.0 - _1786;
    float _1833 = (0.5 / (((_1725 * ((_1800 * _1823) + _1786)) + 9.9999999392252902907785028219223e-09) + (((_1725 * _1823) + _1786) * _1800))) * _1800;
    float _3855 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1835 = (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1809 / ((_1813 * _1813) * 3.141590118408203125));
    float _1845 = (((_1822 * cbLight._m0[_1774].x) * _1835) * _1581) + (((_1749 * cbLight._m0[_1696].x) * _1763) * _1592);
    float _1846 = (((_1822 * cbLight._m0[_1774].y) * _1835) * _1581) + (((_1749 * cbLight._m0[_1696].y) * _1763) * _1592);
    float _1847 = (((_1822 * cbLight._m0[_1774].z) * _1835) * _1581) + (((_1749 * cbLight._m0[_1696].z) * _1763) * _1592);
    float _1909;
    float _1911;
    float _1913;
    if (_1633)
    {
        _1909 = _1845;
        _1911 = _1846;
        _1913 = _1847;
    }
    else
    {
        uint _1915 = _1558 + 2u;
        uint _1919 = _1558 + 10u;
        float _1933 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1915].w)) * _302) * 0.949999988079071044921875);
        float _1934 = _1933 * _1933;
        float _1935 = cbLight._m0[_1915].x + _381;
        float _1936 = cbLight._m0[_1915].y + _382;
        float _1937 = cbLight._m0[_1915].z + _383;
        float _1941 = inversesqrt(dot(vec3(_1935, _1936, _1937), vec3(_1935, _1936, _1937)));
        float _1942 = _1941 * _1935;
        float _1943 = _1941 * _1936;
        float _1944 = _1941 * _1937;
        float _1945 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1915].xyz));
        float _3866 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1948 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1949 = dot(vec3(_299, _300, _301), vec3(_1942, _1943, _1944));
        float _3877 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1952 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1953 = dot(vec3(cbLight._m0[_1915].xyz), vec3(_1942, _1943, _1944));
        float _3888 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1957 = _1934 * _1934;
        float _1961 = ((_1952 * _1952) * (_1957 + (-1.0))) + 1.0;
        float _1970 = (exp2(log2(1.0 - (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1971 = 1.0 - _1934;
        float _1981 = (0.5 / (((_1725 * ((_1948 * _1971) + _1934)) + 9.9999999392252902907785028219223e-09) + (((_1725 * _1971) + _1934) * _1948))) * _1948;
        float _3899 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1983 = (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1957 / ((_1961 * _1961) * 3.141590118408203125));
        float _1984 = isnan(1.0) ? _1573 : (isnan(_1573) ? 1.0 : min(_1573, 1.0));
        _1909 = (((_1970 * cbLight._m0[_1919].x) * _1983) * _1984) + _1845;
        _1911 = (((_1970 * cbLight._m0[_1919].y) * _1983) * _1984) + _1846;
        _1913 = (((_1970 * cbLight._m0[_1919].z) * _1983) * _1984) + _1847;
    }
    float _2019;
    float _2021;
    float _2023;
    if (_1651)
    {
        _2019 = _1909;
        _2021 = _1911;
        _2023 = _1913;
    }
    else
    {
        uint _2030 = _1558 + 3u;
        uint _2034 = _1558 + 11u;
        float _2048 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2030].w)) * _302) * 0.949999988079071044921875);
        float _2049 = _2048 * _2048;
        float _2050 = cbLight._m0[_2030].x + _381;
        float _2051 = cbLight._m0[_2030].y + _382;
        float _2052 = cbLight._m0[_2030].z + _383;
        float _2056 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
        float _2057 = _2056 * _2050;
        float _2058 = _2056 * _2051;
        float _2059 = _2056 * _2052;
        float _2060 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_2030].xyz));
        float _3915 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2063 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _2064 = dot(vec3(_299, _300, _301), vec3(_2057, _2058, _2059));
        float _3926 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2067 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _2068 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_2057, _2058, _2059));
        float _3937 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2072 = _2049 * _2049;
        float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
        float _2085 = (exp2(log2(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2086 = 1.0 - _2049;
        float _2096 = (0.5 / (((_1725 * ((_2063 * _2086) + _2049)) + 9.9999999392252902907785028219223e-09) + (((_1725 * _2086) + _2049) * _2063))) * _2063;
        float _3948 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2098 = (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
        float _2099 = isnan(1.0) ? _1574 : (isnan(_1574) ? 1.0 : min(_1574, 1.0));
        _2019 = (((_2085 * cbLight._m0[_2034].x) * _2098) * _2099) + _1909;
        _2021 = (((_2085 * cbLight._m0[_2034].y) * _2098) * _2099) + _1911;
        _2023 = (((_2085 * cbLight._m0[_2034].z) * _2098) * _2099) + _1913;
    }
    float _2234;
    float _2236;
    float _2238;
    float _2240;
    float _2242;
    float _2244;
    if (_1556.y == 0u)
    {
        float _2174 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2175 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2174;
        float _2176 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2174;
        float _2177 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2174;
        uvec4 _2189 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2190 = _2189.x;
        uint _2201 = uint((float(_2189.y) * floor(float(uint(cbSceneParam._m0[85u].y * _390) / _2190))) + floor(float(uint(cbSceneParam._m0[85u].x * _389) / _2190)));
        float _2211 = (log2(_2177 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2212 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        uint _2215 = uint(isnan(14.0) ? _2212 : (isnan(_2212) ? 14.0 : min(_2212, 14.0)));
        uvec4 _2220 = texelFetch(g_lightClusterGridBuffer, int(((_2215 << 2u) + (_2201 << 6u)) >> 2u));
        uint _2221 = _2220.x;
        uint _2222 = _2189.z;
        float _2316;
        float _2318;
        float _2320;
        float _2322;
        float _2324;
        float _2326;
        if (((((1u << ((_2222 >> 4u) & 15u)) + 4294967295u) & _2221) == 0u) || ((_2222 & 240u) == 0u))
        {
            _2316 = 0.0;
            _2318 = 0.0;
            _2320 = 0.0;
            _2322 = 0.0;
            _2324 = 0.0;
            _2326 = 0.0;
        }
        else
        {
            float _2317;
            float _2319;
            float _2321;
            float _2323;
            float _2325;
            float _2327;
            float _2460 = 0.0;
            float _2461 = 0.0;
            float _2462 = 0.0;
            float _2463 = 0.0;
            float _2464 = 0.0;
            float _2465 = 0.0;
            uint _2466 = 0u;
            uint _2475;
            bool _2476;
            for (;;)
            {
                _2475 = texelFetch(g_lightClassification, int((((_2215 << 5u) + (_2201 << 9u)) + (_2466 << 2u)) >> 2u)).x;
                _2476 = _2475 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2476)
                {
                    frontier_phi_61_pred = _2460;
                    frontier_phi_61_pred_1 = _2465;
                    frontier_phi_61_pred_2 = _2464;
                    frontier_phi_61_pred_3 = _2463;
                    frontier_phi_61_pred_4 = _2462;
                    frontier_phi_61_pred_5 = _2461;
                }
                else
                {
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    uint _2590;
                    _2584 = _2460;
                    _2585 = _2461;
                    _2586 = _2462;
                    _2587 = _2463;
                    _2588 = _2464;
                    _2589 = _2465;
                    _2590 = _2475;
                    float _2516;
                    float _2517;
                    float _2518;
                    float _2519;
                    float _2520;
                    float _2521;
                    for (;;)
                    {
                        uint _2594 = uint(findLSB(_2590)) + (_2466 << 5u);
                        uint _2591 = (_2590 + 4294967295u) & _2590;
                        uint _2596 = _2594 * 48u;
                        vec4 _2610 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2596)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 3u)).x));
                        uint _2616 = (_2594 * 48u) + 4u;
                        vec4 _2629 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2616)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 3u)).x));
                        uint _2635 = (_2594 * 48u) + 8u;
                        vec3 _2646 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2635)).x, texelFetch(g_PointLightRenderingBuffer, int(_2635 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2635 + 2u)).x));
                        float _2650 = _2610.x - _2175;
                        float _2651 = _2610.y - _2176;
                        float _2652 = _2610.z - _2177;
                        float _2653 = dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652));
                        float _2656 = inversesqrt(_2653);
                        float _2657 = _2656 * _2650;
                        float _2658 = _2656 * _2651;
                        float _2659 = _2656 * _2652;
                        float _2660 = dot(vec3(_411, _414, _417), vec3(_2657, _2658, _2659));
                        float _2665 = 1.0 - (_2653 * _2610.w);
                        float _3974 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
                        float _2666 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
                        float _2667 = sqrt(_2653) * _2629.w;
                        float _2670 = 1.39999997615814208984375 / (_2667 + 1.39999997615814208984375);
                        float _2671 = _2670 * _2670;
                        float _2674 = ((1.0 - _2671) * _2660) + _2671;
                        float _2677 = _2667 * _2667;
                        float _2681 = ((isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0))) * _2666) / ((_2677 * 0.699999988079071044921875) + 1.0);
                        float _2685 = (-0.0) - _2175;
                        float _2686 = (-0.0) - _2176;
                        float _2687 = (-0.0) - _2177;
                        float _2691 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
                        float _2692 = _2691 * _2685;
                        float _2693 = _2691 * _2686;
                        float _2694 = _2691 * _2687;
                        float _2702 = exp2(log2(1.0 / ((_2677 * 3.5) + 5.0)) * 0.25);
                        float _2703 = 1.0 - _476;
                        float _2710 = sqrt(1.0 - ((1.0 - (_2703 * _2703)) * (1.0 - (_2702 * _2702))));
                        float _2711 = _2710 * _2710;
                        float _2712 = _2711 * _2711;
                        float _2713 = _2692 + _2657;
                        float _2714 = _2693 + _2658;
                        float _2715 = _2694 + _2659;
                        float _2719 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
                        float _2723 = dot(vec3(_411, _414, _417), vec3(_2692, _2693, _2694));
                        float _3990 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                        float _2726 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
                        float _2727 = dot(vec3(_411, _414, _417), vec3(_2719 * _2713, _2719 * _2714, _2719 * _2715));
                        float _4001 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                        float _2730 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
                        float _2734 = ((_2730 * _2730) * (_2712 + (-1.0))) + 1.0;
                        float _2735 = _2670 * _2711;
                        float _2736 = _2735 * _2735;
                        float _2739 = ((1.0 - _2736) * _2660) + _2736;
                        float _4012 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                        float _2740 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
                        float _2741 = 1.0 - _2711;
                        float _2751 = (0.5 / (((_2740 * ((_2726 * _2741) + _2711)) + 9.9999999392252902907785028219223e-09) + (((_2740 * _2741) + _2711) * _2726))) * _2740;
                        float _4023 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2762 = (((_2712 * 3.1415927410125732421875) * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) / ((_2734 * _2734) * ((_2677 * 2.1991131305694580078125) + 3.141590118408203125))) * _2666;
                        _2519 = (_2681 * _2629.x) + _2587;
                        _2520 = (_2681 * _2629.y) + _2588;
                        _2521 = (_2681 * _2629.z) + _2589;
                        _2516 = (_2762 * _2646.x) + _2584;
                        _2517 = (_2762 * _2646.y) + _2585;
                        _2518 = (_2762 * _2646.z) + _2586;
                        if (_2591 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2584 = _2516;
                            _2585 = _2517;
                            _2586 = _2518;
                            _2587 = _2519;
                            _2588 = _2520;
                            _2589 = _2521;
                            _2590 = _2591;
                        }
                    }
                    frontier_phi_61_pred = _2516;
                    frontier_phi_61_pred_1 = _2521;
                    frontier_phi_61_pred_2 = _2520;
                    frontier_phi_61_pred_3 = _2519;
                    frontier_phi_61_pred_4 = _2518;
                    frontier_phi_61_pred_5 = _2517;
                }
                _2317 = frontier_phi_61_pred;
                _2327 = frontier_phi_61_pred_1;
                _2325 = frontier_phi_61_pred_2;
                _2323 = frontier_phi_61_pred_3;
                _2321 = frontier_phi_61_pred_4;
                _2319 = frontier_phi_61_pred_5;
                uint _2467 = _2466 + 1u;
                if (_2467 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2460 = _2317;
                    _2461 = _2319;
                    _2462 = _2321;
                    _2463 = _2323;
                    _2464 = _2325;
                    _2465 = _2327;
                    _2466 = _2467;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2316 = _2317;
            _2318 = _2319;
            _2320 = _2321;
            _2322 = _2323;
            _2324 = _2325;
            _2326 = _2327;
        }
        uvec4 _2330 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2331 = _2330.z;
        uint _2333 = (_2331 >> 8u) & 15u;
        float _2428;
        float _2430;
        float _2432;
        float _2434;
        float _2436;
        float _2438;
        if (((4294967295u << _2333) & _2221) == 0u)
        {
            _2428 = _2316;
            _2430 = _2318;
            _2432 = _2320;
            _2434 = _2322;
            _2436 = _2324;
            _2438 = _2326;
        }
        else
        {
            float _2453 = inversesqrt(dot(vec3(_2175, _2176, _2177), vec3(_2175, _2176, _2177)));
            float _2454 = _2453 * _2175;
            float _2455 = _2453 * _2176;
            float _2456 = _2453 * _2177;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2333 < ((_2331 >> 12u) & 15u))
            {
                float _2429;
                float _2431;
                float _2433;
                float _2435;
                float _2437;
                float _2439;
                float _2567 = _2316;
                float _2568 = _2318;
                float _2569 = _2320;
                float _2570 = _2322;
                float _2571 = _2324;
                float _2572 = _2326;
                uint _2573 = _2333;
                uint _2582;
                bool _2583;
                for (;;)
                {
                    _2582 = texelFetch(g_lightClassification, int((((_2215 << 5u) + (_2201 << 9u)) + (_2573 << 2u)) >> 2u)).x;
                    _2583 = _2582 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2583)
                    {
                        frontier_phi_67_pred = _2570;
                        frontier_phi_67_pred_1 = _2571;
                        frontier_phi_67_pred_2 = _2572;
                        frontier_phi_67_pred_3 = _2569;
                        frontier_phi_67_pred_4 = _2568;
                        frontier_phi_67_pred_5 = _2567;
                    }
                    else
                    {
                        float _2767;
                        float _2768;
                        float _2769;
                        float _2770;
                        float _2771;
                        float _2772;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _2780 = _2567;
                        float _2781 = _2568;
                        float _2782 = _2569;
                        float _2783 = _2570;
                        float _2784 = _2571;
                        float _2785 = _2572;
                        uint _2786 = _2582;
                        uint _2787;
                        vec4 _2812;
                        float _2813;
                        vec4 _2828;
                        vec3 _2840;
                        vec4 _2856;
                        vec4 _2872;
                        float _2919;
                        bool _2920;
                        for (;;)
                        {
                            uint _2797 = ((_2573 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2786));
                            _2787 = (_2786 + 4294967295u) & _2786;
                            uint _2799 = _2797 * 40u;
                            _2812 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2799)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 3u)).x));
                            _2813 = _2812.w;
                            uint _2815 = (_2797 * 40u) + 4u;
                            _2828 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 3u)).x));
                            uint _2830 = (_2797 * 40u) + 8u;
                            _2840 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 2u)).x));
                            uint _2843 = (_2797 * 40u) + 16u;
                            _2856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 3u)).x));
                            uint _2859 = (_2797 * 40u) + 20u;
                            _2872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 3u)).x));
                            uint _2875 = (_2797 * 40u) + 24u;
                            vec4 _2888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 3u)).x));
                            uint _2894 = (_2797 * 40u) + 28u;
                            vec4 _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            _2919 = fma(_2177, _2907.z, fma(_2176, _2907.y, _2907.x * _2175)) + _2907.w;
                            _2920 = !((fma(_2177, _2888.z, fma(_2176, _2888.y, _2888.x * _2175)) + _2888.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2920)
                            {
                                float _2947 = _2812.x - _2175;
                                float _2948 = _2812.y - _2176;
                                float _2949 = _2812.z - _2177;
                                float _2950 = dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949));
                                float _2953 = inversesqrt(_2950);
                                float _2954 = _2953 * _2947;
                                float _2955 = _2953 * _2948;
                                float _2956 = _2953 * _2949;
                                float _2960 = 1.0 - (_2950 / (_2813 * _2813));
                                float _4034 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                                float _2961 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                                float _2965 = sqrt(_2950) * _2828.w;
                                float _2967 = 1.39999997615814208984375 / (_2965 + 1.39999997615814208984375);
                                float _2968 = _2967 * _2967;
                                float _2971 = ((1.0 - _2968) * dot(vec3(_2954, _2955, _2956), vec3(_411, _414, _417))) + _2968;
                                float _2974 = _2965 * _2965;
                                float _2978 = (fma(_2177, _2856.z, fma(_2176, _2856.y, _2856.x * _2175)) + _2856.w) / _2919;
                                float _2979 = (fma(_2177, _2872.z, fma(_2176, _2872.y, _2872.x * _2175)) + _2872.w) / _2919;
                                float _2983 = 1.0 - dot(vec2(_2978, _2979), vec2(_2978, _2979));
                                float _4050 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                                float _2984 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                                float _2985 = _2984 * (((isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0))) * _2961) / ((_2974 * 0.699999988079071044921875) + 1.0));
                                float _2997 = exp2(log2(1.0 / ((_2974 * 3.5) + 5.0)) * 0.25);
                                float _2998 = 1.0 - _476;
                                float _3005 = sqrt(1.0 - ((1.0 - (_2998 * _2998)) * (1.0 - (_2997 * _2997))));
                                float _3006 = _3005 * _3005;
                                float _3007 = _3006 * _3006;
                                float _3008 = _2954 - _2454;
                                float _3009 = _2955 - _2455;
                                float _3010 = _2956 - _2456;
                                float _3014 = inversesqrt(dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010)));
                                float _3018 = dot(vec3(_411, _414, _417), vec3((-0.0) - _2454, (-0.0) - _2455, (-0.0) - _2456));
                                float _4061 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3021 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                                float _3022 = dot(vec3(_411, _414, _417), vec3(_3014 * _3008, _3014 * _3009, _3014 * _3010));
                                float _4072 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                                float _3025 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                                float _3029 = ((_3025 * _3025) * (_3007 + (-1.0))) + 1.0;
                                float _3030 = _2967 * _3006;
                                float _3031 = _3030 * _3030;
                                float _3037 = ((1.0 - _3031) * dot(vec3(_411, _414, _417), vec3(_2954, _2955, _2956))) + _3031;
                                float _4083 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                                float _3038 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                                float _3039 = 1.0 - _3006;
                                float _3049 = (0.5 / (((_3038 * ((_3021 * _3039) + _3006)) + 9.9999999392252902907785028219223e-09) + (((_3038 * _3039) + _3006) * _3021))) * _3038;
                                float _4094 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3059 = (_2984 * _2961) * (((_3007 * 3.1415927410125732421875) * (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) / ((_3029 * _3029) * ((_2974 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3059 * _2840.x;
                                frontier_phi_73_pred_1 = _3059 * _2840.y;
                                frontier_phi_73_pred_2 = _2985 * _2828.z;
                                frontier_phi_73_pred_3 = _2985 * _2828.y;
                                frontier_phi_73_pred_4 = _2985 * _2828.x;
                                frontier_phi_73_pred_5 = _3059 * _2840.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3063 = frontier_phi_73_pred;
                            _3064 = frontier_phi_73_pred_1;
                            _3068 = frontier_phi_73_pred_2;
                            _3067 = frontier_phi_73_pred_3;
                            _3066 = frontier_phi_73_pred_4;
                            _3065 = frontier_phi_73_pred_5;
                            _2770 = _3066 + _2783;
                            _2771 = _3067 + _2784;
                            _2772 = _3068 + _2785;
                            _2767 = _3063 + _2780;
                            _2768 = _3064 + _2781;
                            _2769 = _3065 + _2782;
                            if (_2787 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2780 = _2767;
                                _2781 = _2768;
                                _2782 = _2769;
                                _2783 = _2770;
                                _2784 = _2771;
                                _2785 = _2772;
                                _2786 = _2787;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2770;
                        frontier_phi_67_pred_1 = _2771;
                        frontier_phi_67_pred_2 = _2772;
                        frontier_phi_67_pred_3 = _2769;
                        frontier_phi_67_pred_4 = _2768;
                        frontier_phi_67_pred_5 = _2767;
                    }
                    _2435 = frontier_phi_67_pred;
                    _2437 = frontier_phi_67_pred_1;
                    _2439 = frontier_phi_67_pred_2;
                    _2433 = frontier_phi_67_pred_3;
                    _2431 = frontier_phi_67_pred_4;
                    _2429 = frontier_phi_67_pred_5;
                    uint _2574 = _2573 + 1u;
                    if (_2574 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2567 = _2429;
                        _2568 = _2431;
                        _2569 = _2433;
                        _2570 = _2435;
                        _2571 = _2437;
                        _2572 = _2439;
                        _2573 = _2574;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2437;
                frontier_phi_55_56_ladder_1 = _2439;
                frontier_phi_55_56_ladder_2 = _2435;
                frontier_phi_55_56_ladder_3 = _2433;
                frontier_phi_55_56_ladder_4 = _2431;
                frontier_phi_55_56_ladder_5 = _2429;
            }
            else
            {
                frontier_phi_55_56_ladder = _2324;
                frontier_phi_55_56_ladder_1 = _2326;
                frontier_phi_55_56_ladder_2 = _2322;
                frontier_phi_55_56_ladder_3 = _2320;
                frontier_phi_55_56_ladder_4 = _2318;
                frontier_phi_55_56_ladder_5 = _2316;
            }
            _2428 = frontier_phi_55_56_ladder_5;
            _2430 = frontier_phi_55_56_ladder_4;
            _2432 = frontier_phi_55_56_ladder_3;
            _2434 = frontier_phi_55_56_ladder_2;
            _2436 = frontier_phi_55_56_ladder;
            _2438 = frontier_phi_55_56_ladder_1;
        }
        float _2443 = isnan(1.0) ? _457 : (isnan(_457) ? 1.0 : min(_457, 1.0));
        _2234 = (_2443 * _2434) + _1689;
        _2236 = (_2443 * _2436) + _1691;
        _2238 = (_2443 * _2438) + _1693;
        _2240 = ((_2428 * 0.039999999105930328369140625) * _2443) + _2019;
        _2242 = ((_2430 * 0.039999999105930328369140625) * _2443) + _2021;
        _2244 = ((_2432 * 0.039999999105930328369140625) * _2443) + _2023;
    }
    else
    {
        _2234 = _1689;
        _2236 = _1691;
        _2238 = _1693;
        _2240 = _2019;
        _2242 = _2021;
        _2244 = _2023;
    }
    float _4110 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _4121 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _4132 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    uint _2264 = _430 + 6u;
    vec4 _2281 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1500, _1501, (log2((isnan(cbSceneParam._m0[77u].w) ? _322 : (isnan(_322) ? cbSceneParam._m0[77u].w : min(_322, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2283 = _2281.x;
    float _2284 = _2281.y;
    float _2285 = _2281.z;
    float _2286 = _2281.w;
    float _2379;
    float _2381;
    float _2383;
    float _2385;
    if (_322 > cbSceneParam._m0[78u].w)
    {
        float _2341 = isnan(_322) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _322 : min(cbSceneParam._m0[80u].w, _322));
        float _2342 = _2341 / _322;
        float _2353 = _2342 * _374;
        float _2354 = _375 * _2342;
        float _2355 = (-0.0) - _2354;
        float _2357 = _2342 * _376;
        float _2359 = (cbSceneParam._m0[77u].w * _2355) / _2341;
        float _2360 = _2359 + cbSceneParam._m0[79u].w;
        float _2361 = cbSceneParam._m0[79u].w - _2354;
        float _2367 = sqrt(((_2353 * _2353) + (_2354 * _2354)) + (_2357 * _2357));
        float _2370 = (1.0 - (cbSceneParam._m0[77u].w / _2341)) * _2367;
        float _2375 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2377 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2529;
        if (abs((_2355 - _2359) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2529 = ((((_2360 > 0.0) ? exp2(_2375 * _2360) : (2.0 - exp2(_2377 * _2360))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2370;
        }
        else
        {
            float _2489 = 1.0 / cbSceneParam._m0[80u].x;
            float _2490 = isnan(_2361) ? _2360 : (isnan(_2360) ? _2361 : max(_2360, _2361));
            float _2491 = isnan(_2361) ? _2360 : (isnan(_2360) ? _2361 : min(_2360, _2361));
            float _2500 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : min(_2490, 0.0));
            float _2501 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : min(_2491, 0.0));
            _2529 = ((abs(_2367 / _2355) * cbSceneParam._m0[80u].y) * ((((_2500 - _2501) * 2.0) - ((exp2(_2375 * (isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0)))) - exp2(_2375 * (isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0))))) * _2489)) - ((exp2(_2377 * _2500) - exp2(_2377 * _2501)) * _2489))) + (_2370 * cbSceneParam._m0[80u].z);
        }
        vec4 _2531 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1500, _1501, 1.0), 0.0);
        float _2540 = exp2((_2529 * (-1.44269502162933349609375)) * (1.0 - _2531.w));
        float _2541 = log2(_2540);
        float _2557 = log2(_2286);
        _2379 = (exp2(_2557 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2541 * cbSceneParam._m0[78u].x)) * _2531.x) / cbSceneParam._m0[78u].x)) + _2283;
        _2381 = (exp2(_2557 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2541 * cbSceneParam._m0[78u].y)) * _2531.y) / cbSceneParam._m0[78u].y)) + _2284;
        _2383 = (exp2(_2557 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2541 * cbSceneParam._m0[78u].z)) * _2531.z) / cbSceneParam._m0[78u].z)) + _2285;
        _2385 = _2540 * _2286;
    }
    else
    {
        _2379 = _2283;
        _2381 = _2284;
        _2383 = _2285;
        _2385 = _2286;
    }
    float _2396 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2397 = _2396 == 3.0;
    float _2398 = log2(_2385);
    float _2405 = exp2(_2398 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_2234 + ((isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0))) * _457))) + (((((_1477 * (_1525.x / _1531)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _1267) * _1546)) + _2240) * cbPerFrame._m0[3u].x));
    float _2406 = exp2(_2398 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2236 + ((isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0))) * _457))) + (((((_1477 * (_1525.y / _1531)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _1267) * _1546)) + _2242) * cbPerFrame._m0[3u].x));
    float _2407 = exp2(_2398 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2238 + ((isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0))) * _457))) + (((((_1477 * (_1525.z / _1531)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _1267) * _1546)) + _2244) * cbPerFrame._m0[3u].x));
    float _2416 = (_2396 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2416 * (_2397 ? _2405 : (_2405 + (cbSceneParam._m0[72u].w * _2379)));
    SV_Target.y = _2416 * (_2397 ? _2406 : (_2406 + (cbSceneParam._m0[72u].w * _2381)));
    SV_Target.z = _2416 * (_2397 ? _2407 : (_2407 + (cbSceneParam._m0[72u].w * _2383)));
    SV_Target.w = cbInstanceData._m0[_2264].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2264].w;
}


