#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[33];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _836;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _231 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _231.x * cbMtdParam._m0[9u].x;
    float _238 = _231.y * cbMtdParam._m0[9u].y;
    float _239 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _252 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _261 = cbMtdParam._m0[25u].z * _252.z;
    float _3486 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _263 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _267 = (_252.x * 2.0) + (-1.0);
    float _269 = (_252.y * 2.0) + (-1.0);
    float _270 = dot(vec2(_267, _269), vec2(_267, _269));
    float _3497 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _275 = sqrt(1.0 - (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))));
    float _281 = (cbMtdParam._m0[26u].y * (1.0 - _263)) + _263;
    float _3508 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _282 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _287 = cbMtdParam._m0[22u].x + _252.w;
    float _292 = fma(_275, _201 * NORMAL.x, fma(_269, _208 * TANGENT.x, (_194 * _186) * _267));
    float _295 = fma(_275, _201 * NORMAL.y, fma(_269, _208 * TANGENT.y, (_194 * _187) * _267));
    float _298 = fma(_275, _201 * NORMAL.z, fma(_269, _208 * TANGENT.z, (_194 * _188) * _267));
    float _302 = inversesqrt(dot(vec3(_292, _295, _298), vec3(_292, _295, _298)));
    float _303 = _302 * _292;
    float _304 = _302 * _295;
    float _305 = _302 * _298;
    float _3519 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _306 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _3530 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _3541 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3552 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3563 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _326 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _368 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _378 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _368);
    float _379 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _368);
    float _380 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _368);
    float _384 = inversesqrt(dot(vec3(_378, _379, _380), vec3(_378, _379, _380)));
    float _385 = _378 * _384;
    float _386 = _379 * _384;
    float _387 = _380 * _384;
    float _393 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _394 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _415 = fma(_305, cbSceneParam._m0[5u].z, fma(_304, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _303));
    float _418 = fma(_305, cbSceneParam._m0[6u].z, fma(_304, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _303));
    float _421 = fma(_305, cbSceneParam._m0[7u].z, fma(_304, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _303));
    uint _434 = uint(roundEven(NORMAL.w)) * 13u;
    uint _437 = (_434 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _443 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) * cbInstanceData._m0[_437].x;
    float _444 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) * cbInstanceData._m0[_437].y;
    float _445 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0)))) * cbInstanceData._m0[_437].z;
    float _3574 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _3585 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _3596 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    vec4 _457 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _393, cbSceneParam._m0[86u].y * _394));
    float _461 = ((isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * TEXCOORD_5.w) * _457.x;
    float _462 = dot(vec3(_303, _304, _305), vec3(_385, _386, _387));
    float _465 = _462 * 2.0;
    float _469 = (_465 * _303) - _385;
    float _470 = (_465 * _304) - _386;
    float _471 = (_465 * _305) - _387;
    float _478 = abs(dot(vec3(_385, _386, _387), vec3(_303, _304, _305)));
    float _3607 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _480 = sqrt(_306);
    float _493 = exp2((_480 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_480 * 3.0));
    float _525 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _835;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _560 = fma(_533, cbModelParam._m0[26u].z, fma(_529, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _525));
        float _564 = fma(_533, cbModelParam._m0[27u].z, fma(_529, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _525));
        float _568 = fma(_533, cbModelParam._m0[28u].z, fma(_529, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _525));
        float _593 = _525 + _303;
        float _594 = _529 + _304;
        float _595 = _533 + _305;
        float _605 = fma(_595, cbModelParam._m0[26u].z, fma(_594, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _593)) - _560;
        float _606 = fma(_595, cbModelParam._m0[27u].z, fma(_594, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _593)) - _564;
        float _607 = fma(_595, cbModelParam._m0[28u].z, fma(_594, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _593)) - _568;
        float _611 = inversesqrt(dot(vec3(_605, _606, _607), vec3(_605, _606, _607)));
        float _624 = ((_611 * _605) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_560 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _625 = ((_611 * _606) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_564 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _626 = ((_611 * _607) / cbModelParam._m0[34u].z) + ((((((_568 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _629 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_624, _625, _626), 0.0);
        vec4 _636 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_624, _625, _626), 0.0);
        vec4 _643 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_624, _625, _626), 0.0);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_624, _625, _626), 0.0);
        float _663 = exp2((_629.w + (-0.5)) * 20.0) * 2.0;
        float _664 = _663 * (_629.x + (-0.5));
        float _665 = _663 * (_629.y + (-0.5));
        float _666 = _663 * (_629.z + (-0.5));
        float _673 = exp2((_636.w + (-0.5)) * 20.0) * 2.0;
        float _674 = _673 * (_636.x + (-0.5));
        float _675 = _673 * (_636.y + (-0.5));
        float _676 = _673 * (_636.z + (-0.5));
        float _683 = exp2((_643.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_643.x + (-0.5));
        float _685 = _683 * (_643.y + (-0.5));
        float _686 = _683 * (_643.z + (-0.5));
        float _693 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_650.x + (-0.5));
        float _695 = _693 * (_650.y + (-0.5));
        float _696 = _693 * (_650.z + (-0.5));
        float _697 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _698 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _699 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _700 = _664 * 0.5;
        float _701 = _674 * 0.5;
        float _702 = _684 * 0.5;
        float _703 = dot(vec3(_700, _701, _702), vec3(_700, _701, _702));
        float _708 = (_703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_703);
        float _717 = (dot(vec3(_303, _304, _305), vec3(_708 * _700, _708 * _701, _708 * _702)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _727 = sqrt(((_701 * _701) + (_700 * _700)) + (_702 * _702)) / (_697 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _728 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _729 = _728 * 2.0;
        float _733 = (1.0 - _728) / (_728 + 1.0);
        float _3655 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _743 = ((((1.0 - _734) * (_729 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_729 + 1.0))) + _734) * _697;
        float _744 = _665 * 0.5;
        float _745 = _675 * 0.5;
        float _746 = _685 * 0.5;
        float _747 = dot(vec3(_744, _745, _746), vec3(_744, _745, _746));
        float _752 = (_747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_747);
        float _760 = (dot(vec3(_303, _304, _305), vec3(_752 * _744, _752 * _745, _752 * _746)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _769 = sqrt(((_745 * _745) + (_744 * _744)) + (_746 * _746)) / (_698 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _771 = _770 * 2.0;
        float _775 = (1.0 - _770) / (_770 + 1.0);
        float _3688 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _785 = ((((1.0 - _776) * (_771 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_771 + 1.0))) + _776) * _698;
        float _786 = _666 * 0.5;
        float _787 = _676 * 0.5;
        float _788 = _686 * 0.5;
        float _789 = dot(vec3(_786, _787, _788), vec3(_786, _787, _788));
        float _794 = (_789 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_789);
        float _802 = (dot(vec3(_303, _304, _305), vec3(_794 * _786, _794 * _787, _794 * _788)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _811 = sqrt(((_787 * _787) + (_786 * _786)) + (_788 * _788)) / (_699 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _813 = _812 * 2.0;
        float _817 = (1.0 - _812) / (_812 + 1.0);
        float _3721 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _827 = ((((1.0 - _818) * (_813 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_813 + 1.0))) + _818) * _699;
        _835 = _666;
        _837 = _665;
        _838 = _664;
        _839 = _676;
        _840 = _675;
        _841 = _674;
        _842 = _686;
        _843 = _685;
        _844 = _684;
        _845 = _699;
        _846 = _698;
        _847 = _697;
        _848 = cbModelParam._m0[36u].z * (isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0)));
        _849 = cbModelParam._m0[36u].z * (isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0)));
        _850 = cbModelParam._m0[36u].z * (isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0)));
    }
    else
    {
        _835 = _836;
        _837 = _836;
        _838 = _836;
        _839 = _836;
        _840 = _836;
        _841 = _836;
        _842 = _836;
        _843 = _836;
        _844 = _836;
        _845 = _836;
        _846 = _836;
        _847 = _836;
        _848 = 0.0;
        _849 = 0.0;
        _850 = 0.0;
    }
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _876 = fma(_533, cbModelParam._m0[30u].z, fma(_529, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _525));
        float _880 = fma(_533, cbModelParam._m0[31u].z, fma(_529, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _525));
        float _884 = fma(_533, cbModelParam._m0[32u].z, fma(_529, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _525));
        float _907 = _525 + _303;
        float _908 = _529 + _304;
        float _909 = _533 + _305;
        float _919 = fma(_909, cbModelParam._m0[30u].z, fma(_908, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _907)) - _876;
        float _920 = fma(_909, cbModelParam._m0[31u].z, fma(_908, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _907)) - _880;
        float _921 = fma(_909, cbModelParam._m0[32u].z, fma(_908, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _907)) - _884;
        float _925 = inversesqrt(dot(vec3(_919, _920, _921), vec3(_919, _920, _921)));
        float _938 = ((_925 * _919) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_876 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _939 = ((_925 * _920) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_880 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _940 = ((_925 * _921) / cbModelParam._m0[35u].z) + ((((((_884 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        float _975 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_942.x + (-0.5));
        float _977 = _975 * (_942.y + (-0.5));
        float _978 = _975 * (_942.z + (-0.5));
        float _985 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_949.x + (-0.5));
        float _987 = _985 * (_949.y + (-0.5));
        float _988 = _985 * (_949.z + (-0.5));
        float _995 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_956.x + (-0.5));
        float _997 = _995 * (_956.y + (-0.5));
        float _998 = _995 * (_956.z + (-0.5));
        float _1005 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_963.x + (-0.5));
        float _1007 = _1005 * (_963.y + (-0.5));
        float _1008 = _1005 * (_963.z + (-0.5));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = _976 * 0.5;
        float _1013 = _986 * 0.5;
        float _1014 = _996 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_303, _304, _305), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3784 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1039 + 1.0))) + _1044) * _1009;
        float _1054 = _977 * 0.5;
        float _1055 = _987 * 0.5;
        float _1056 = _997 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(_303, _304, _305), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_1010 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _3817 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1081 + 1.0))) + _1086) * _1010;
        float _1096 = _978 * 0.5;
        float _1097 = _988 * 0.5;
        float _1098 = _998 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1112 = (dot(vec3(_303, _304, _305), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1121 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3850 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1123 + 1.0))) + _1128) * _1011;
        _1145 = _978;
        _1146 = _977;
        _1147 = _976;
        _1148 = _988;
        _1149 = _987;
        _1150 = _986;
        _1151 = _998;
        _1152 = _997;
        _1153 = _996;
        _1154 = _1011;
        _1155 = _1010;
        _1156 = _1009;
        _1157 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
        _1158 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
        _1159 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
    }
    else
    {
        _1145 = _836;
        _1146 = _836;
        _1147 = _836;
        _1148 = _836;
        _1149 = _836;
        _1150 = _836;
        _1151 = _836;
        _1152 = _836;
        _1153 = _836;
        _1154 = _836;
        _1155 = _836;
        _1156 = _836;
        _1157 = 0.0;
        _1158 = 0.0;
        _1159 = 0.0;
    }
    float _1169 = (cbModelParam._m0[1u].x * (_1157 - _848)) + _848;
    float _1170 = (cbModelParam._m0[1u].x * (_1158 - _849)) + _849;
    float _1171 = (cbModelParam._m0[1u].x * (_1159 - _850)) + _850;
    float _1192 = fma(_1171, cbSceneParam._m0[89u].z, fma(_1170, cbSceneParam._m0[89u].y, _1169 * cbSceneParam._m0[89u].x));
    float _1195 = fma(_1171, cbSceneParam._m0[90u].z, fma(_1170, cbSceneParam._m0[90u].y, _1169 * cbSceneParam._m0[90u].x));
    float _1198 = fma(_1171, cbSceneParam._m0[91u].z, fma(_1170, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1169));
    float _1213 = _469 * 0.5;
    float _1214 = _470 * 0.5;
    float _1215 = _471 * 0.5;
    float _1216 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_1147, _1150, _1153, _1156));
    float _1219 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_1146, _1149, _1152, _1155));
    float _1222 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_1145, _1148, _1151, _1154));
    float _1256;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1229 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_835, _839, _842, _845));
        float _1233 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_837, _840, _843, _846));
        float _1237 = dot(vec4(_1213, _1214, _1215, 1.0), vec4(_838, _841, _844, _847));
        float _1244 = dot(vec4(cbModelParam._m0[39u]), vec4(_1213, _1214, _1215, 1.0));
        _1256 = dot(vec3(isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1244) ? 0.0 : (isnan(0.0) ? _1244 : max(0.0, _1244))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1256 = 1.0;
    }
    float _1267;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1258 = dot(vec4(cbModelParam._m0[40u]), vec4(_1213, _1214, _1215, 1.0));
        _1267 = dot(vec3(isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)), isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)), isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1258) ? 0.0 : (isnan(0.0) ? _1258 : max(0.0, _1258))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1267 = 1.0;
    }
    float _1271 = (_1267 * cbModelParam._m0[1u].x) + (_1256 * (1.0 - cbModelParam._m0[1u].x));
    float _1281 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _306);
    float _1282 = isnan(_1281) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1281 : min(cbModelParam._m0[25u].z, _1281));
    float _1364;
    float _1366;
    float _1368;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1331 = fma(_533, cbModelParam._m0[13u].z, fma(_529, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _525)) + cbModelParam._m0[13u].w;
        float _1335 = fma(_533, cbModelParam._m0[14u].z, fma(_529, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _525)) + cbModelParam._m0[14u].w;
        float _1339 = fma(_533, cbModelParam._m0[15u].z, fma(_529, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _525)) + cbModelParam._m0[15u].w;
        float _1342 = fma(_471, cbModelParam._m0[13u].z, fma(_470, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _469));
        float _1345 = fma(_471, cbModelParam._m0[14u].z, fma(_470, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _469));
        float _1348 = fma(_471, cbModelParam._m0[15u].z, fma(_470, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _469));
        float _1376;
        if (_1342 > 0.0)
        {
            _1376 = abs((1.0 - _1331) / _1342);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1342 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1331 + 1.0) / _1342);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1376 = frontier_phi_14_12_ladder;
        }
        float _1606;
        if (_1345 > 0.0)
        {
            _1606 = abs((1.0 - _1335) / _1345);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1345 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1335 + 1.0) / _1345);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1606 = frontier_phi_23_19_ladder;
        }
        float _1904;
        if (_1348 > 0.0)
        {
            _1904 = abs((1.0 - _1339) / _1348);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1348 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1339 + 1.0) / _1348);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1904 = frontier_phi_35_30_ladder;
        }
        float _1906 = isnan(_1606) ? _1376 : (isnan(_1376) ? _1606 : min(_1376, _1606));
        float _1907 = isnan(_1904) ? _1906 : (isnan(_1906) ? _1904 : min(_1906, _1904));
        float _1911 = (_1907 * _1342) + _1331;
        float _1912 = (_1907 * _1345) + _1335;
        float _1913 = (_1907 * _1348) + _1339;
        float _1914 = _1907 * 9.9999997473787516355514526367188e-05;
        float _1916 = (-1.0) - _1914;
        float _1918 = _1914 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1913 > _1918) || ((_1913 < _1916) || ((_1912 > _1918) || ((_1912 < _1916) || ((_1911 < _1916) || (_1911 > _1918))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2058 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1913, cbModelParam._m0[9u].z, fma(_1912, cbModelParam._m0[9u].y, _1911 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1913, cbModelParam._m0[10u].z, fma(_1912, cbModelParam._m0[10u].y, _1911 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1913, cbModelParam._m0[11u].z, fma(_1912, cbModelParam._m0[11u].y, _1911 * cbModelParam._m0[11u].x))), _1282);
            frontier_phi_13_35_ladder = _2058.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2058.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2058.x * cbModelParam._m0[1u].y;
        }
        _1364 = frontier_phi_13_35_ladder_2;
        _1366 = frontier_phi_13_35_ladder_1;
        _1368 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1352 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_469, _470, _471), _1282);
        _1364 = _1352.x * cbModelParam._m0[1u].y;
        _1366 = _1352.y * cbModelParam._m0[1u].y;
        _1368 = _1352.z * cbModelParam._m0[1u].y;
    }
    float _1372 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _306);
    float _1373 = isnan(_1372) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1372 : min(cbModelParam._m0[25u].w, _1372));
    float _1465;
    float _1467;
    float _1469;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1429 = fma(_533, cbModelParam._m0[21u].z, fma(_529, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _525)) + cbModelParam._m0[21u].w;
        float _1433 = fma(_533, cbModelParam._m0[22u].z, fma(_529, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _525)) + cbModelParam._m0[22u].w;
        float _1437 = fma(_533, cbModelParam._m0[23u].z, fma(_529, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _525)) + cbModelParam._m0[23u].w;
        float _1440 = fma(_471, cbModelParam._m0[21u].z, fma(_470, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _469));
        float _1443 = fma(_471, cbModelParam._m0[22u].z, fma(_470, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _469));
        float _1446 = fma(_471, cbModelParam._m0[23u].z, fma(_470, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _469));
        float _1611;
        if (_1440 > 0.0)
        {
            _1611 = abs((1.0 - _1429) / _1440);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1429 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1611 = frontier_phi_25_21_ladder;
        }
        float _1931;
        if (_1443 > 0.0)
        {
            _1931 = abs((1.0 - _1433) / _1443);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1433 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1931 = frontier_phi_37_32_ladder;
        }
        float _2258;
        if (_1446 > 0.0)
        {
            _2258 = abs((1.0 - _1437) / _1446);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1437 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2258 = frontier_phi_47_44_ladder;
        }
        float _2260 = isnan(_1931) ? _1611 : (isnan(_1611) ? _1931 : min(_1611, _1931));
        float _2261 = isnan(_2258) ? _2260 : (isnan(_2260) ? _2258 : min(_2260, _2258));
        float _2265 = (_2261 * _1440) + _1429;
        float _2266 = (_2261 * _1443) + _1433;
        float _2267 = (_2261 * _1446) + _1437;
        float _2268 = _2261 * 9.9999997473787516355514526367188e-05;
        float _2269 = (-1.0) - _2268;
        float _2271 = _2268 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2267 > _2271) || ((_2267 < _2269) || ((_2266 > _2271) || ((_2266 < _2269) || ((_2265 < _2269) || (_2265 > _2271))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2385 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2267, cbModelParam._m0[17u].z, fma(_2266, cbModelParam._m0[17u].y, _2265 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2267, cbModelParam._m0[18u].z, fma(_2266, cbModelParam._m0[18u].y, _2265 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2267, cbModelParam._m0[19u].z, fma(_2266, cbModelParam._m0[19u].y, _2265 * cbModelParam._m0[19u].x))), _1373);
            frontier_phi_22_47_ladder = _2385.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2385.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2385.x * cbModelParam._m0[1u].z;
        }
        _1465 = frontier_phi_22_47_ladder_2;
        _1467 = frontier_phi_22_47_ladder_1;
        _1469 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1449 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_469, _470, _471), _1373);
        _1465 = _1449.x * cbModelParam._m0[1u].z;
        _1467 = _1449.y * cbModelParam._m0[1u].z;
        _1469 = _1449.z * cbModelParam._m0[1u].z;
    }
    float _1481 = ((((1.0 - _493) * ((_480 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_493 * _480)) * _461;
    float _1482 = _1481 * ((cbModelParam._m0[1u].w * (_1465 - _1364)) + _1364);
    float _1483 = _1481 * ((cbModelParam._m0[1u].w * (_1467 - _1366)) + _1366);
    float _1484 = _1481 * ((cbModelParam._m0[1u].w * (_1469 - _1368)) + _1368);
    float _1487 = fma(_1484, cbSceneParam._m0[89u].z, fma(_1483, cbSceneParam._m0[89u].y, _1482 * cbSceneParam._m0[89u].x));
    float _1490 = fma(_1484, cbSceneParam._m0[90u].z, fma(_1483, cbSceneParam._m0[90u].y, _1482 * cbSceneParam._m0[90u].x));
    float _1493 = fma(_1484, cbSceneParam._m0[91u].z, fma(_1483, cbSceneParam._m0[91u].y, _1482 * cbSceneParam._m0[91u].x));
    float _1504 = _393 / cbSceneParam._m0[86u].x;
    float _1505 = _394 / cbSceneParam._m0[86u].y;
    float _1512 = (cbSceneParam._m0[88u].y * (1.0 - cbMtdParam._m0[25u].y)) + cbSceneParam._m0[88u].z;
    float _3976 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
    float _1514 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * 5.0;
    float _1519 = ((10.0 / (_326 + 10.0)) * cbMtdParam._m0[25u].x) * dot(vec3(_303, _304, _305), vec3(1.0, 0.0, 0.0));
    vec4 _1529 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1519 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1519 + _1504) * cbSceneParam._m0[86u].x, _394), _1514).w) + _1504) * cbSceneParam._m0[86u].x, _394), _1514);
    float _1535 = isnan(0.5) ? _1529.w : (isnan(_1529.w) ? 0.5 : max(_1529.w, 0.5));
    float _1550 = 1.0 - (_1529.w / _1535);
    float _1585 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1589 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1593 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1597 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1598 = _1585 / _1597;
    float _1599 = _1589 / _1597;
    float _1600 = _1593 / _1597;
    float _1746;
    float _1747;
    float _1748;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1627 = ((uint(_1600 > cbSceneParam._m0[59u].y) + uint(_1600 > cbSceneParam._m0[59u].x)) + uint(_1600 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1628 = _1627 + 43u;
        uint _1636 = _1627 + 44u;
        uint _1644 = _1627 + 45u;
        uint _1652 = _1627 + 46u;
        float _1663 = fma(_1597, cbSceneParam._m0[_1628].w, fma(_1593, cbSceneParam._m0[_1628].z, fma(_1589, cbSceneParam._m0[_1628].y, _1585 * cbSceneParam._m0[_1628].x)));
        float _1667 = fma(_1597, cbSceneParam._m0[_1636].w, fma(_1593, cbSceneParam._m0[_1636].z, fma(_1589, cbSceneParam._m0[_1636].y, _1585 * cbSceneParam._m0[_1636].x)));
        float _1675 = fma(_1597, cbSceneParam._m0[_1652].w, fma(_1593, cbSceneParam._m0[_1652].z, fma(_1589, cbSceneParam._m0[_1652].y, _1585 * cbSceneParam._m0[_1652].x)));
        float _1679 = cbSceneParam._m0[33u].z * _1675;
        float _1681 = cbSceneParam._m0[33u].w * _1675;
        float _1684 = fma(_1597, cbSceneParam._m0[_1644].w, fma(_1593, cbSceneParam._m0[_1644].z, fma(_1589, cbSceneParam._m0[_1644].y, _1585 * cbSceneParam._m0[_1644].x))) / _1675;
        float _1732 = (cbSceneParam._m0[33u].x - sqrt(((_1599 * _1599) + (_1598 * _1598)) + (_1600 * _1600))) * cbSceneParam._m0[33u].y;
        float _3992 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1739 = (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1679 + _1663) / _1675, (_1681 + _1667) / _1675), _1684), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1681 + _1663) / _1675, (_1667 - _1679) / _1675), _1684), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1663 - _1679) / _1675, (_1667 - _1681) / _1675), _1684), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1663 - _1681) / _1675, (_1679 + _1667) / _1675), _1684), 0.0)).x), vec4(0.25)));
        _1746 = 1.0 - (_1739 * cbSceneParam._m0[34u].x);
        _1747 = 1.0 - (_1739 * cbSceneParam._m0[34u].y);
        _1748 = 1.0 - (_1739 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1746 = 1.0;
        _1747 = 1.0;
        _1748 = 1.0;
    }
    float _1812;
    float _1814;
    float _1816;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1800 = fma(_1597, cbSceneParam._m0[63u].w, fma(_1593, cbSceneParam._m0[63u].z, fma(_1589, cbSceneParam._m0[63u].y, _1585 * cbSceneParam._m0[63u].x)));
        float _1801 = fma(_1597, cbSceneParam._m0[60u].w, fma(_1593, cbSceneParam._m0[60u].z, fma(_1589, cbSceneParam._m0[60u].y, _1585 * cbSceneParam._m0[60u].x))) / _1800;
        float _1802 = fma(_1597, cbSceneParam._m0[61u].w, fma(_1593, cbSceneParam._m0[61u].z, fma(_1589, cbSceneParam._m0[61u].y, _1585 * cbSceneParam._m0[61u].x))) / _1800;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1801 >= cbSceneParam._m0[64u].x) && (_1802 >= cbSceneParam._m0[64u].y)) && (_1801 <= cbSceneParam._m0[64u].z)) && (_1802 <= cbSceneParam._m0[64u].w))
        {
            float _1944 = fma(_1597, cbSceneParam._m0[62u].w, fma(_1593, cbSceneParam._m0[62u].z, fma(_1589, cbSceneParam._m0[62u].y, _1585 * cbSceneParam._m0[62u].x))) / _1800;
            float _1948 = isnan(cbSceneParam._m0[41u].w) ? _1944 : (isnan(_1944) ? cbSceneParam._m0[41u].w : max(_1944, cbSceneParam._m0[41u].w));
            float _1991 = (cbSceneParam._m0[33u].x - sqrt(((_1599 * _1599) + (_1598 * _1598)) + (_1600 * _1600))) * cbSceneParam._m0[33u].y;
            float _4008 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
            float _1998 = (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1801, cbSceneParam._m0[33u].w + _1802), _1948), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1801, _1802 - cbSceneParam._m0[33u].z), _1948), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1801 - cbSceneParam._m0[33u].z, _1802 - cbSceneParam._m0[33u].w), _1948), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1801 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1802), _1948), 0.0)).x), vec4(0.25)));
            float _2002 = 1.0 - (_1998 * cbSceneParam._m0[34u].x);
            float _2003 = 1.0 - (_1998 * cbSceneParam._m0[34u].y);
            float _2004 = 1.0 - (_1998 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2004) ? _1748 : (isnan(_1748) ? _2004 : min(_1748, _2004));
            frontier_phi_34_33_ladder_1 = isnan(_2003) ? _1747 : (isnan(_1747) ? _2003 : min(_1747, _2003));
            frontier_phi_34_33_ladder_2 = isnan(_2002) ? _1746 : (isnan(_1746) ? _2002 : min(_1746, _2002));
        }
        else
        {
            frontier_phi_34_33_ladder = _1748;
            frontier_phi_34_33_ladder_1 = _1747;
            frontier_phi_34_33_ladder_2 = _1746;
        }
        _1812 = frontier_phi_34_33_ladder_2;
        _1814 = frontier_phi_34_33_ladder_1;
        _1816 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1812 = _1746;
        _1814 = _1747;
        _1816 = _1748;
    }
    float _4034 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1818 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _4045 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1819 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1820 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    uvec4 _1824 = floatBitsToUint(cbInstanceData._m0[_434 + 5u]);
    uint _1826 = _1824.x * 14u;
    uint _1827 = _1826 + 13u;
    float _1834 = _461 + (-1.0);
    float _1839 = (cbLight._m0[_1827].x * _1834) + 1.0;
    float _1840 = (cbLight._m0[_1827].y * _1834) + 1.0;
    float _1841 = (cbLight._m0[_1827].z * _1834) + 1.0;
    float _1842 = (cbLight._m0[_1827].w * _1834) + 1.0;
    uint _1843 = _1826 + 5u;
    float _1849 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
    uint _1853 = _1826 + 4u;
    float _1863 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
    uint _1867 = _1826 | 1u;
    float _1878 = dot(vec3(cbLight._m0[_1826].xyz), vec3(_303, _304, _305));
    float _1881 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_303, _304, _305));
    float _4077 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _4088 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1886 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * 0.3183098733425140380859375;
    float _1888 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * 0.3183098733425140380859375;
    float _1895 = ((cbLight._m0[_1843].x * _1849) * _1888) + (((cbLight._m0[_1853].x * _1818) * _1863) * _1886);
    float _1896 = ((_1849 * cbLight._m0[_1843].y) * _1888) + (((cbLight._m0[_1853].y * _1819) * _1863) * _1886);
    float _1897 = ((_1849 * cbLight._m0[_1843].z) * _1888) + (((cbLight._m0[_1853].z * _1820) * _1863) * _1886);
    uvec4 _1901 = floatBitsToUint(cbLight._m0[_1826 + 12u]);
    bool _1903 = _1901.x == 0u;
    float _2005;
    float _2007;
    float _2009;
    if (_1903)
    {
        _2005 = _1895;
        _2007 = _1896;
        _2009 = _1897;
    }
    else
    {
        uint _2013 = _1826 + 6u;
        float _2029 = (dot(vec3(cbLight._m0[_1826 + 2u].xyz), vec3(_303, _304, _305)) * 0.5) + 0.5;
        float _2030 = _2029 * _2029;
        float _4099 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2031 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2032 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
        _2005 = (((cbLight._m0[_2013].x * 0.3183098733425140380859375) * _2031) * _2032) + _1895;
        _2007 = (((cbLight._m0[_2013].y * 0.3183098733425140380859375) * _2031) * _2032) + _1896;
        _2009 = (((cbLight._m0[_2013].z * 0.3183098733425140380859375) * _2031) * _2032) + _1897;
    }
    bool _2012 = _1901.y == 0u;
    float _2067;
    float _2069;
    float _2071;
    if (_2012)
    {
        _2067 = _2005;
        _2069 = _2007;
        _2071 = _2009;
    }
    else
    {
        uint _2229 = _1826 + 7u;
        float _2245 = (dot(vec3(cbLight._m0[_1826 + 3u].xyz), vec3(_303, _304, _305)) * 0.5) + 0.5;
        float _2246 = _2245 * _2245;
        float _4115 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2247 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2248 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
        _2067 = (((cbLight._m0[_2229].x * 0.3183098733425140380859375) * _2247) * _2248) + _2005;
        _2069 = (((cbLight._m0[_2229].y * 0.3183098733425140380859375) * _2247) * _2248) + _2007;
        _2071 = (((cbLight._m0[_2229].z * 0.3183098733425140380859375) * _2247) * _2248) + _2009;
    }
    uint _2074 = _1826 + 8u;
    float _2087 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1826].w)) * _306) * 0.949999988079071044921875);
    float _2088 = _2087 * _2087;
    float _2089 = cbLight._m0[_1826].x + _385;
    float _2090 = cbLight._m0[_1826].y + _386;
    float _2091 = cbLight._m0[_1826].z + _387;
    float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
    float _2096 = _2095 * _2089;
    float _2097 = _2095 * _2090;
    float _2098 = _2095 * _2091;
    float _2099 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1826].xyz));
    float _4131 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _4142 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _2103 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _2104 = dot(vec3(_303, _304, _305), vec3(_2096, _2097, _2098));
    float _4153 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2107 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _2108 = dot(vec3(cbLight._m0[_1826].xyz), vec3(_2096, _2097, _2098));
    float _4164 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2112 = _2088 * _2088;
    float _2116 = ((_2107 * _2107) * (_2112 + (-1.0))) + 1.0;
    float _2127 = (exp2(log2(1.0 - (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2128 = 1.0 - _2088;
    float _2139 = (0.5 / (((_2103 * ((_2102 * _2128) + _2088)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2128) + _2088) * _2102))) * _2102;
    float _4175 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2141 = (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_2112 / ((_2116 * _2116) * 3.141590118408203125));
    uint _2155 = _1826 + 9u;
    float _2166 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1867].w)) * _306) * 0.949999988079071044921875);
    float _2167 = _2166 * _2166;
    float _2168 = cbLight._m0[_1867].x + _385;
    float _2169 = cbLight._m0[_1867].y + _386;
    float _2170 = cbLight._m0[_1867].z + _387;
    float _2174 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
    float _2175 = _2174 * _2168;
    float _2176 = _2174 * _2169;
    float _2177 = _2174 * _2170;
    float _2178 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1867].xyz));
    float _4186 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _2182 = dot(vec3(_303, _304, _305), vec3(_2175, _2176, _2177));
    float _4197 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _2186 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_2175, _2176, _2177));
    float _4208 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2190 = _2167 * _2167;
    float _2194 = ((_2185 * _2185) * (_2190 + (-1.0))) + 1.0;
    float _2203 = (exp2(log2(1.0 - (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2204 = 1.0 - _2167;
    float _2214 = (0.5 / (((_2103 * ((_2181 * _2204) + _2167)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2204) + _2167) * _2181))) * _2181;
    float _4219 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2216 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_2190 / ((_2194 * _2194) * 3.141590118408203125));
    float _2226 = (((_2203 * cbLight._m0[_2155].x) * _2216) * _1849) + ((((cbLight._m0[_2074].x * _1818) * _2127) * _2141) * _1863);
    float _2227 = (((_2203 * cbLight._m0[_2155].y) * _2216) * _1849) + ((((cbLight._m0[_2074].y * _1819) * _2127) * _2141) * _1863);
    float _2228 = (((_2203 * cbLight._m0[_2155].z) * _2216) * _1849) + ((((cbLight._m0[_2074].z * _1820) * _2127) * _2141) * _1863);
    float _2284;
    float _2286;
    float _2288;
    if (_1903)
    {
        _2284 = _2226;
        _2286 = _2227;
        _2288 = _2228;
    }
    else
    {
        uint _2290 = _1826 + 2u;
        uint _2294 = _1826 + 10u;
        float _2308 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2290].w)) * _306) * 0.949999988079071044921875);
        float _2309 = _2308 * _2308;
        float _2310 = cbLight._m0[_2290].x + _385;
        float _2311 = cbLight._m0[_2290].y + _386;
        float _2312 = cbLight._m0[_2290].z + _387;
        float _2316 = inversesqrt(dot(vec3(_2310, _2311, _2312), vec3(_2310, _2311, _2312)));
        float _2317 = _2316 * _2310;
        float _2318 = _2316 * _2311;
        float _2319 = _2316 * _2312;
        float _2320 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_2290].xyz));
        float _4230 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2323 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2324 = dot(vec3(_303, _304, _305), vec3(_2317, _2318, _2319));
        float _4241 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2327 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _2328 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_2317, _2318, _2319));
        float _4252 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2332 = _2309 * _2309;
        float _2336 = ((_2327 * _2327) * (_2332 + (-1.0))) + 1.0;
        float _2345 = (exp2(log2(1.0 - (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2346 = 1.0 - _2309;
        float _2356 = (0.5 / (((_2103 * ((_2323 * _2346) + _2309)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2346) + _2309) * _2323))) * _2323;
        float _4263 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2358 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2332 / ((_2336 * _2336) * 3.141590118408203125));
        float _2359 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
        _2284 = (((_2345 * cbLight._m0[_2294].x) * _2358) * _2359) + _2226;
        _2286 = (((_2345 * cbLight._m0[_2294].y) * _2358) * _2359) + _2227;
        _2288 = (((_2345 * cbLight._m0[_2294].z) * _2358) * _2359) + _2228;
    }
    float _2390;
    float _2392;
    float _2394;
    if (_2012)
    {
        _2390 = _2284;
        _2392 = _2286;
        _2394 = _2288;
    }
    else
    {
        uint _2401 = _1826 + 3u;
        uint _2405 = _1826 + 11u;
        float _2419 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2401].w)) * _306) * 0.949999988079071044921875);
        float _2420 = _2419 * _2419;
        float _2421 = cbLight._m0[_2401].x + _385;
        float _2422 = cbLight._m0[_2401].y + _386;
        float _2423 = cbLight._m0[_2401].z + _387;
        float _2427 = inversesqrt(dot(vec3(_2421, _2422, _2423), vec3(_2421, _2422, _2423)));
        float _2428 = _2427 * _2421;
        float _2429 = _2427 * _2422;
        float _2430 = _2427 * _2423;
        float _2431 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_2401].xyz));
        float _4279 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2434 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2435 = dot(vec3(_303, _304, _305), vec3(_2428, _2429, _2430));
        float _4290 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2438 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _2439 = dot(vec3(cbLight._m0[_2401].xyz), vec3(_2428, _2429, _2430));
        float _4301 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2443 = _2420 * _2420;
        float _2447 = ((_2438 * _2438) * (_2443 + (-1.0))) + 1.0;
        float _2456 = (exp2(log2(1.0 - (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2457 = 1.0 - _2420;
        float _2467 = (0.5 / (((_2103 * ((_2434 * _2457) + _2420)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2457) + _2420) * _2434))) * _2434;
        float _4312 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2469 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2443 / ((_2447 * _2447) * 3.141590118408203125));
        float _2470 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
        _2390 = (((_2456 * cbLight._m0[_2405].x) * _2469) * _2470) + _2284;
        _2392 = (((_2456 * cbLight._m0[_2405].y) * _2469) * _2470) + _2286;
        _2394 = (((_2456 * cbLight._m0[_2405].z) * _2469) * _2470) + _2288;
    }
    float _2536;
    float _2538;
    float _2540;
    float _2542;
    float _2544;
    float _2546;
    if (_1824.y == 0u)
    {
        uvec4 _2491 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2492 = _2491.x;
        uint _2503 = uint((float(_2491.y) * floor(float(uint(cbSceneParam._m0[85u].y * _394) / _2492))) + floor(float(uint(cbSceneParam._m0[85u].x * _393) / _2492)));
        float _2513 = (log2(_1600 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2514 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        uint _2517 = uint(isnan(14.0) ? _2514 : (isnan(_2514) ? 14.0 : min(_2514, 14.0)));
        uvec4 _2522 = texelFetch(g_lightClusterGridBuffer, int(((_2517 << 2u) + (_2503 << 6u)) >> 2u));
        uint _2523 = _2522.x;
        uint _2524 = _2491.z;
        float _2597;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        if (((((1u << ((_2524 >> 4u) & 15u)) + 4294967295u) & _2523) == 0u) || ((_2524 & 240u) == 0u))
        {
            _2597 = 0.0;
            _2599 = 0.0;
            _2601 = 0.0;
            _2603 = 0.0;
            _2605 = 0.0;
            _2607 = 0.0;
        }
        else
        {
            float _2598;
            float _2600;
            float _2602;
            float _2604;
            float _2606;
            float _2608;
            float _2741 = 0.0;
            float _2742 = 0.0;
            float _2743 = 0.0;
            float _2744 = 0.0;
            float _2745 = 0.0;
            float _2746 = 0.0;
            uint _2747 = 0u;
            uint _2756;
            bool _2757;
            for (;;)
            {
                _2756 = texelFetch(g_lightClassification, int((((_2517 << 5u) + (_2503 << 9u)) + (_2747 << 2u)) >> 2u)).x;
                _2757 = _2756 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2757)
                {
                    frontier_phi_66_pred = _2746;
                    frontier_phi_66_pred_1 = _2745;
                    frontier_phi_66_pred_2 = _2744;
                    frontier_phi_66_pred_3 = _2743;
                    frontier_phi_66_pred_4 = _2742;
                    frontier_phi_66_pred_5 = _2741;
                }
                else
                {
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    uint _2871;
                    _2865 = _2741;
                    _2866 = _2742;
                    _2867 = _2743;
                    _2868 = _2744;
                    _2869 = _2745;
                    _2870 = _2746;
                    _2871 = _2756;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    for (;;)
                    {
                        uint _2875 = uint(findLSB(_2871)) + (_2747 << 5u);
                        uint _2872 = (_2871 + 4294967295u) & _2871;
                        uint _2877 = _2875 * 48u;
                        vec4 _2891 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2877)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 3u)).x));
                        uint _2897 = (_2875 * 48u) + 4u;
                        vec4 _2910 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2897)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 3u)).x));
                        uint _2916 = (_2875 * 48u) + 8u;
                        vec3 _2927 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2916)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 2u)).x));
                        float _2931 = _2891.x - _1598;
                        float _2932 = _2891.y - _1599;
                        float _2933 = _2891.z - _1600;
                        float _2934 = dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933));
                        float _2937 = inversesqrt(_2934);
                        float _2938 = _2937 * _2931;
                        float _2939 = _2937 * _2932;
                        float _2940 = _2937 * _2933;
                        float _2941 = dot(vec3(_415, _418, _421), vec3(_2938, _2939, _2940));
                        float _2946 = 1.0 - (_2934 * _2891.w);
                        float _4338 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2947 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                        float _2948 = sqrt(_2934) * _2910.w;
                        float _2951 = 1.39999997615814208984375 / (_2948 + 1.39999997615814208984375);
                        float _2952 = _2951 * _2951;
                        float _2955 = ((1.0 - _2952) * _2941) + _2952;
                        float _2958 = _2948 * _2948;
                        float _2962 = ((isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0))) * _2947) / ((_2958 * 0.699999988079071044921875) + 1.0);
                        float _2966 = (-0.0) - _1598;
                        float _2967 = (-0.0) - _1599;
                        float _2968 = (-0.0) - _1600;
                        float _2972 = inversesqrt(dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968)));
                        float _2973 = _2972 * _2966;
                        float _2974 = _2972 * _2967;
                        float _2975 = _2972 * _2968;
                        float _2982 = exp2(log2(1.0 / ((_2958 * 3.5) + 5.0)) * 0.25);
                        float _2983 = 1.0 - _480;
                        float _2990 = sqrt(1.0 - ((1.0 - (_2983 * _2983)) * (1.0 - (_2982 * _2982))));
                        float _2991 = _2990 * _2990;
                        float _2992 = _2991 * _2991;
                        float _2993 = _2973 + _2938;
                        float _2994 = _2974 + _2939;
                        float _2995 = _2975 + _2940;
                        float _2999 = inversesqrt(dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995)));
                        float _3003 = dot(vec3(_415, _418, _421), vec3(_2973, _2974, _2975));
                        float _4354 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3006 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                        float _3007 = dot(vec3(_415, _418, _421), vec3(_2999 * _2993, _2999 * _2994, _2999 * _2995));
                        float _4365 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3010 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                        float _3014 = ((_3010 * _3010) * (_2992 + (-1.0))) + 1.0;
                        float _3015 = _2951 * _2991;
                        float _3016 = _3015 * _3015;
                        float _3019 = ((1.0 - _3016) * _2941) + _3016;
                        float _4376 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                        float _3020 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                        float _3021 = 1.0 - _2991;
                        float _3031 = (0.5 / (((_3020 * ((_3006 * _3021) + _2991)) + 9.9999999392252902907785028219223e-09) + (((_3020 * _3021) + _2991) * _3006))) * _3020;
                        float _4387 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3042 = (((_2992 * 3.1415927410125732421875) * (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) / ((_3014 * _3014) * ((_2958 * 2.1991131305694580078125) + 3.141590118408203125))) * _2947;
                        _2800 = (_2962 * _2910.x) + _2868;
                        _2801 = (_2962 * _2910.y) + _2869;
                        _2802 = (_2962 * _2910.z) + _2870;
                        _2797 = (_3042 * _2927.x) + _2865;
                        _2798 = (_3042 * _2927.y) + _2866;
                        _2799 = (_3042 * _2927.z) + _2867;
                        if (_2872 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2865 = _2797;
                            _2866 = _2798;
                            _2867 = _2799;
                            _2868 = _2800;
                            _2869 = _2801;
                            _2870 = _2802;
                            _2871 = _2872;
                        }
                    }
                    frontier_phi_66_pred = _2802;
                    frontier_phi_66_pred_1 = _2801;
                    frontier_phi_66_pred_2 = _2800;
                    frontier_phi_66_pred_3 = _2799;
                    frontier_phi_66_pred_4 = _2798;
                    frontier_phi_66_pred_5 = _2797;
                }
                _2608 = frontier_phi_66_pred;
                _2606 = frontier_phi_66_pred_1;
                _2604 = frontier_phi_66_pred_2;
                _2602 = frontier_phi_66_pred_3;
                _2600 = frontier_phi_66_pred_4;
                _2598 = frontier_phi_66_pred_5;
                uint _2748 = _2747 + 1u;
                if (_2748 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2741 = _2598;
                    _2742 = _2600;
                    _2743 = _2602;
                    _2744 = _2604;
                    _2745 = _2606;
                    _2746 = _2608;
                    _2747 = _2748;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2597 = _2598;
            _2599 = _2600;
            _2601 = _2602;
            _2603 = _2604;
            _2605 = _2606;
            _2607 = _2608;
        }
        uvec4 _2611 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2612 = _2611.z;
        uint _2614 = (_2612 >> 8u) & 15u;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        if (((4294967295u << _2614) & _2523) == 0u)
        {
            _2709 = _2597;
            _2711 = _2599;
            _2713 = _2601;
            _2715 = _2603;
            _2717 = _2605;
            _2719 = _2607;
        }
        else
        {
            float _2734 = inversesqrt(dot(vec3(_1598, _1599, _1600), vec3(_1598, _1599, _1600)));
            float _2735 = _2734 * _1598;
            float _2736 = _2734 * _1599;
            float _2737 = _2734 * _1600;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2614 < ((_2612 >> 12u) & 15u))
            {
                float _2710;
                float _2712;
                float _2714;
                float _2716;
                float _2718;
                float _2720;
                float _2848 = _2597;
                float _2849 = _2599;
                float _2850 = _2601;
                float _2851 = _2603;
                float _2852 = _2605;
                float _2853 = _2607;
                uint _2854 = _2614;
                uint _2863;
                bool _2864;
                for (;;)
                {
                    _2863 = texelFetch(g_lightClassification, int((((_2517 << 5u) + (_2503 << 9u)) + (_2854 << 2u)) >> 2u)).x;
                    _2864 = _2863 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2864)
                    {
                        frontier_phi_72_pred = _2853;
                        frontier_phi_72_pred_1 = _2852;
                        frontier_phi_72_pred_2 = _2851;
                        frontier_phi_72_pred_3 = _2850;
                        frontier_phi_72_pred_4 = _2849;
                        frontier_phi_72_pred_5 = _2848;
                    }
                    else
                    {
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3060 = _2848;
                        float _3061 = _2849;
                        float _3062 = _2850;
                        float _3063 = _2851;
                        float _3064 = _2852;
                        float _3065 = _2853;
                        uint _3066 = _2863;
                        uint _3067;
                        vec4 _3092;
                        float _3093;
                        vec4 _3108;
                        vec3 _3120;
                        vec4 _3136;
                        vec4 _3152;
                        float _3199;
                        bool _3200;
                        for (;;)
                        {
                            uint _3077 = ((_2854 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3066));
                            _3067 = (_3066 + 4294967295u) & _3066;
                            uint _3079 = _3077 * 40u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            _3093 = _3092.w;
                            uint _3095 = (_3077 * 40u) + 4u;
                            _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            uint _3110 = (_3077 * 40u) + 8u;
                            _3120 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x));
                            uint _3123 = (_3077 * 40u) + 16u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            uint _3139 = (_3077 * 40u) + 20u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3155 = (_3077 * 40u) + 24u;
                            vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            uint _3174 = (_3077 * 40u) + 28u;
                            vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            _3199 = fma(_1600, _3187.z, fma(_1599, _3187.y, _3187.x * _1598)) + _3187.w;
                            _3200 = !((fma(_1600, _3168.z, fma(_1599, _3168.y, _3168.x * _1598)) + _3168.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3200)
                            {
                                float _3227 = _3092.x - _1598;
                                float _3228 = _3092.y - _1599;
                                float _3229 = _3092.z - _1600;
                                float _3230 = dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229));
                                float _3233 = inversesqrt(_3230);
                                float _3234 = _3233 * _3227;
                                float _3235 = _3233 * _3228;
                                float _3236 = _3233 * _3229;
                                float _3240 = 1.0 - (_3230 / (_3093 * _3093));
                                float _4398 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3241 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3245 = sqrt(_3230) * _3108.w;
                                float _3247 = 1.39999997615814208984375 / (_3245 + 1.39999997615814208984375);
                                float _3248 = _3247 * _3247;
                                float _3251 = ((1.0 - _3248) * dot(vec3(_3234, _3235, _3236), vec3(_415, _418, _421))) + _3248;
                                float _3254 = _3245 * _3245;
                                float _3258 = (fma(_1600, _3136.z, fma(_1599, _3136.y, _3136.x * _1598)) + _3136.w) / _3199;
                                float _3259 = (fma(_1600, _3152.z, fma(_1599, _3152.y, _3152.x * _1598)) + _3152.w) / _3199;
                                float _3263 = 1.0 - dot(vec2(_3258, _3259), vec2(_3258, _3259));
                                float _4414 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3264 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3265 = _3264 * (((isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0))) * _3241) / ((_3254 * 0.699999988079071044921875) + 1.0));
                                float _3277 = exp2(log2(1.0 / ((_3254 * 3.5) + 5.0)) * 0.25);
                                float _3278 = 1.0 - _480;
                                float _3285 = sqrt(1.0 - ((1.0 - (_3278 * _3278)) * (1.0 - (_3277 * _3277))));
                                float _3286 = _3285 * _3285;
                                float _3287 = _3286 * _3286;
                                float _3288 = _3234 - _2735;
                                float _3289 = _3235 - _2736;
                                float _3290 = _3236 - _2737;
                                float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
                                float _3298 = dot(vec3(_415, _418, _421), vec3((-0.0) - _2735, (-0.0) - _2736, (-0.0) - _2737));
                                float _4425 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3301 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3302 = dot(vec3(_415, _418, _421), vec3(_3294 * _3288, _3294 * _3289, _3294 * _3290));
                                float _4436 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3305 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                                float _3309 = ((_3305 * _3305) * (_3287 + (-1.0))) + 1.0;
                                float _3310 = _3247 * _3286;
                                float _3311 = _3310 * _3310;
                                float _3317 = ((1.0 - _3311) * dot(vec3(_415, _418, _421), vec3(_3234, _3235, _3236))) + _3311;
                                float _4447 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3318 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                                float _3319 = 1.0 - _3286;
                                float _3329 = (0.5 / (((_3318 * ((_3301 * _3319) + _3286)) + 9.9999999392252902907785028219223e-09) + (((_3318 * _3319) + _3286) * _3301))) * _3318;
                                float _4458 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3339 = (_3264 * _3241) * (((_3287 * 3.1415927410125732421875) * (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) / ((_3309 * _3309) * ((_3254 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3265 * _3108.y;
                                frontier_phi_78_pred_1 = _3265 * _3108.x;
                                frontier_phi_78_pred_2 = _3339 * _3120.z;
                                frontier_phi_78_pred_3 = _3339 * _3120.y;
                                frontier_phi_78_pred_4 = _3339 * _3120.x;
                                frontier_phi_78_pred_5 = _3265 * _3108.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3347 = frontier_phi_78_pred;
                            _3346 = frontier_phi_78_pred_1;
                            _3345 = frontier_phi_78_pred_2;
                            _3344 = frontier_phi_78_pred_3;
                            _3343 = frontier_phi_78_pred_4;
                            _3348 = frontier_phi_78_pred_5;
                            _3050 = _3346 + _3063;
                            _3051 = _3347 + _3064;
                            _3052 = _3348 + _3065;
                            _3047 = _3343 + _3060;
                            _3048 = _3344 + _3061;
                            _3049 = _3345 + _3062;
                            if (_3067 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3060 = _3047;
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3067;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3052;
                        frontier_phi_72_pred_1 = _3051;
                        frontier_phi_72_pred_2 = _3050;
                        frontier_phi_72_pred_3 = _3049;
                        frontier_phi_72_pred_4 = _3048;
                        frontier_phi_72_pred_5 = _3047;
                    }
                    _2720 = frontier_phi_72_pred;
                    _2718 = frontier_phi_72_pred_1;
                    _2716 = frontier_phi_72_pred_2;
                    _2714 = frontier_phi_72_pred_3;
                    _2712 = frontier_phi_72_pred_4;
                    _2710 = frontier_phi_72_pred_5;
                    uint _2855 = _2854 + 1u;
                    if (_2855 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2848 = _2710;
                        _2849 = _2712;
                        _2850 = _2714;
                        _2851 = _2716;
                        _2852 = _2718;
                        _2853 = _2720;
                        _2854 = _2855;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2720;
                frontier_phi_60_61_ladder_1 = _2718;
                frontier_phi_60_61_ladder_2 = _2714;
                frontier_phi_60_61_ladder_3 = _2712;
                frontier_phi_60_61_ladder_4 = _2710;
                frontier_phi_60_61_ladder_5 = _2716;
            }
            else
            {
                frontier_phi_60_61_ladder = _2607;
                frontier_phi_60_61_ladder_1 = _2605;
                frontier_phi_60_61_ladder_2 = _2601;
                frontier_phi_60_61_ladder_3 = _2599;
                frontier_phi_60_61_ladder_4 = _2597;
                frontier_phi_60_61_ladder_5 = _2603;
            }
            _2709 = frontier_phi_60_61_ladder_4;
            _2711 = frontier_phi_60_61_ladder_3;
            _2713 = frontier_phi_60_61_ladder_2;
            _2715 = frontier_phi_60_61_ladder_5;
            _2717 = frontier_phi_60_61_ladder_1;
            _2719 = frontier_phi_60_61_ladder;
        }
        float _2724 = isnan(1.0) ? _461 : (isnan(_461) ? 1.0 : min(_461, 1.0));
        _2536 = (_2724 * _2715) + _2067;
        _2538 = (_2724 * _2717) + _2069;
        _2540 = (_2724 * _2719) + _2071;
        _2542 = ((_2709 * 0.039999999105930328369140625) * _2724) + _2390;
        _2544 = ((_2711 * 0.039999999105930328369140625) * _2724) + _2392;
        _2546 = ((_2713 * 0.039999999105930328369140625) * _2724) + _2394;
    }
    else
    {
        _2536 = _2067;
        _2538 = _2069;
        _2540 = _2071;
        _2542 = _2390;
        _2544 = _2392;
        _2546 = _2394;
    }
    float _4474 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _4485 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _4496 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    uint _2566 = _434 + 6u;
    vec4 _2583 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1504, _1505, (log2((isnan(cbSceneParam._m0[77u].w) ? _326 : (isnan(_326) ? cbSceneParam._m0[77u].w : min(_326, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2585 = _2583.x;
    float _2586 = _2583.y;
    float _2587 = _2583.z;
    float _2588 = _2583.w;
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    if (_326 > cbSceneParam._m0[78u].w)
    {
        float _2622 = isnan(_326) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _326 : min(cbSceneParam._m0[80u].w, _326));
        float _2623 = _2622 / _326;
        float _2634 = _2623 * _378;
        float _2635 = _379 * _2623;
        float _2636 = (-0.0) - _2635;
        float _2638 = _2623 * _380;
        float _2640 = (cbSceneParam._m0[77u].w * _2636) / _2622;
        float _2641 = _2640 + cbSceneParam._m0[79u].w;
        float _2642 = cbSceneParam._m0[79u].w - _2635;
        float _2648 = sqrt(((_2634 * _2634) + (_2635 * _2635)) + (_2638 * _2638));
        float _2651 = (1.0 - (cbSceneParam._m0[77u].w / _2622)) * _2648;
        float _2656 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2658 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2810;
        if (abs((_2636 - _2640) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2810 = ((((_2641 > 0.0) ? exp2(_2656 * _2641) : (2.0 - exp2(_2658 * _2641))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2651;
        }
        else
        {
            float _2770 = 1.0 / cbSceneParam._m0[80u].x;
            float _2771 = isnan(_2642) ? _2641 : (isnan(_2641) ? _2642 : max(_2641, _2642));
            float _2772 = isnan(_2642) ? _2641 : (isnan(_2641) ? _2642 : min(_2641, _2642));
            float _2781 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : min(_2771, 0.0));
            float _2782 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : min(_2772, 0.0));
            _2810 = ((abs(_2648 / _2636) * cbSceneParam._m0[80u].y) * ((((_2781 - _2782) * 2.0) - ((exp2(_2656 * (isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0)))) - exp2(_2656 * (isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0))))) * _2770)) - ((exp2(_2658 * _2781) - exp2(_2658 * _2782)) * _2770))) + (_2651 * cbSceneParam._m0[80u].z);
        }
        vec4 _2812 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1504, _1505, 1.0), 0.0);
        float _2821 = exp2((_2810 * (-1.44269502162933349609375)) * (1.0 - _2812.w));
        float _2822 = log2(_2821);
        float _2838 = log2(_2588);
        _2660 = (exp2(_2838 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2822 * cbSceneParam._m0[78u].x)) * _2812.x) / cbSceneParam._m0[78u].x)) + _2585;
        _2662 = (exp2(_2838 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2822 * cbSceneParam._m0[78u].y)) * _2812.y) / cbSceneParam._m0[78u].y)) + _2586;
        _2664 = (exp2(_2838 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2822 * cbSceneParam._m0[78u].z)) * _2812.z) / cbSceneParam._m0[78u].z)) + _2587;
        _2666 = _2821 * _2588;
    }
    else
    {
        _2660 = _2585;
        _2662 = _2586;
        _2664 = _2587;
        _2666 = _2588;
    }
    float _2677 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2678 = _2677 == 3.0;
    float _2679 = log2(_2666);
    float _2686 = exp2(_2679 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2536 + ((isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0))) * _461))) + (((((_1481 * (_1529.x / _1535)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _1271) * _1550)) + _2542) * cbPerFrame._m0[3u].x));
    float _2687 = exp2(_2679 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2538 + ((isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0))) * _461))) + (((((_1481 * (_1529.y / _1535)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _1271) * _1550)) + _2544) * cbPerFrame._m0[3u].x));
    float _2688 = exp2(_2679 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2540 + ((isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0))) * _461))) + (((((_1481 * (_1529.z / _1535)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _1271) * _1550)) + _2546) * cbPerFrame._m0[3u].x));
    float _2697 = (_2677 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2697 * (_2678 ? _2686 : (_2686 + (cbSceneParam._m0[72u].w * _2660)));
    SV_Target.y = _2697 * (_2678 ? _2687 : (_2687 + (cbSceneParam._m0[72u].w * _2662)));
    SV_Target.z = _2697 * (_2678 ? _2688 : (_2688 + (cbSceneParam._m0[72u].w * _2664)));
    SV_Target.w = cbInstanceData._m0[_2566].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2566].w;
}


