#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[33];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _880;
float _3332;
float _3333;
float _3334;
float _3335;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _233 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.w;
    float _240 = _233.x * cbMtdParam._m0[9u].x;
    float _241 = _233.y * cbMtdParam._m0[9u].y;
    float _242 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _255 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _264 = cbMtdParam._m0[25u].z * _255.z;
    float _3344 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _266 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
    float _270 = (_255.x * 2.0) + (-1.0);
    float _272 = (_255.y * 2.0) + (-1.0);
    float _273 = dot(vec2(_270, _272), vec2(_270, _272));
    float _3355 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _278 = sqrt(1.0 - (isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0))));
    float _284 = (cbMtdParam._m0[26u].y * (1.0 - _266)) + _266;
    float _3366 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _285 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
    float _290 = cbMtdParam._m0[22u].x + _255.w;
    float _295 = fma(_278, _203 * NORMAL.x, fma(_272, _210 * TANGENT.x, (_196 * _188) * _270));
    float _298 = fma(_278, _203 * NORMAL.y, fma(_272, _210 * TANGENT.y, (_196 * _189) * _270));
    float _301 = fma(_278, _203 * NORMAL.z, fma(_272, _210 * TANGENT.z, (_196 * _190) * _270));
    float _305 = inversesqrt(dot(vec3(_295, _298, _301), vec3(_295, _298, _301)));
    float _306 = _305 * _295;
    float _307 = _305 * _298;
    float _308 = _305 * _301;
    float _3377 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _309 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
    float _3388 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _3399 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3410 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3421 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _329 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _371 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _381 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _371);
    float _382 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _371);
    float _383 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _371);
    float _387 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _388 = _381 * _387;
    float _389 = _382 * _387;
    float _390 = _383 * _387;
    vec4 _395 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _397 = _395.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _559 = sqrt(((_381 * _381) + (_382 * _382)) + (_383 * _383));
        float _565 = (cbMatDynParam._m0[5u].x * _559) + cbMatDynParam._m0[5u].y;
        float _3432 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
        float _566 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _570 = (cbMatDynParam._m0[5u].z * _559) + cbMatDynParam._m0[5u].w;
        float _3443 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) - _566)) + _566) < ((_397 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _409 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _410 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _430 = fma(_308, cbSceneParam._m0[5u].z, fma(_307, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _306));
    float _433 = fma(_308, cbSceneParam._m0[6u].z, fma(_307, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _306));
    float _436 = fma(_308, cbSceneParam._m0[7u].z, fma(_307, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _306));
    uint _449 = uint(roundEven(NORMAL.w)) * 13u;
    uint _451 = _449 + 9u;
    uint _452 = _451 + uint(cbMatDynParam._m0[0u].w);
    float _458 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0)))) * cbInstanceData._m0[_452].x;
    float _459 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0)))) * cbInstanceData._m0[_452].y;
    float _460 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0)))) * cbInstanceData._m0[_452].z;
    float _3454 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    float _3465 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _3476 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _463 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    vec4 _472 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _409, cbSceneParam._m0[86u].y * _410));
    float _476 = ((isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0))) * TEXCOORD_5.w) * _472.x;
    float _477 = dot(vec3(_306, _307, _308), vec3(_388, _389, _390));
    float _480 = _477 * 2.0;
    float _484 = (_480 * _306) - _388;
    float _485 = (_480 * _307) - _389;
    float _486 = (_480 * _308) - _390;
    float _493 = abs(dot(vec3(_388, _389, _390), vec3(_306, _307, _308)));
    float _3487 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _495 = sqrt(_309);
    float _508 = exp2((_495 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_495 * 3.0));
    float _540 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _544 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _548 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _879;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _604 = fma(_548, cbModelParam._m0[26u].z, fma(_544, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _540));
        float _608 = fma(_548, cbModelParam._m0[27u].z, fma(_544, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _540));
        float _612 = fma(_548, cbModelParam._m0[28u].z, fma(_544, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _540));
        float _637 = _540 + _306;
        float _638 = _544 + _307;
        float _639 = _548 + _308;
        float _649 = fma(_639, cbModelParam._m0[26u].z, fma(_638, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _637)) - _604;
        float _650 = fma(_639, cbModelParam._m0[27u].z, fma(_638, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _637)) - _608;
        float _651 = fma(_639, cbModelParam._m0[28u].z, fma(_638, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _637)) - _612;
        float _655 = inversesqrt(dot(vec3(_649, _650, _651), vec3(_649, _650, _651)));
        float _668 = ((_655 * _649) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_604 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _669 = ((_655 * _650) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_608 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _670 = ((_655 * _651) / cbModelParam._m0[34u].z) + ((((((_612 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_668, _669, _670), 0.0);
        vec4 _680 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_668, _669, _670), 0.0);
        vec4 _687 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_668, _669, _670), 0.0);
        vec4 _694 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_668, _669, _670), 0.0);
        float _707 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _708 = _707 * (_673.x + (-0.5));
        float _709 = _707 * (_673.y + (-0.5));
        float _710 = _707 * (_673.z + (-0.5));
        float _717 = exp2((_680.w + (-0.5)) * 20.0) * 2.0;
        float _718 = _717 * (_680.x + (-0.5));
        float _719 = _717 * (_680.y + (-0.5));
        float _720 = _717 * (_680.z + (-0.5));
        float _727 = exp2((_687.w + (-0.5)) * 20.0) * 2.0;
        float _728 = _727 * (_687.x + (-0.5));
        float _729 = _727 * (_687.y + (-0.5));
        float _730 = _727 * (_687.z + (-0.5));
        float _737 = exp2((_694.w + (-0.5)) * 20.0) * 2.0;
        float _738 = _737 * (_694.x + (-0.5));
        float _739 = _737 * (_694.y + (-0.5));
        float _740 = _737 * (_694.z + (-0.5));
        float _741 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _743 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _744 = _708 * 0.5;
        float _745 = _718 * 0.5;
        float _746 = _728 * 0.5;
        float _747 = dot(vec3(_744, _745, _746), vec3(_744, _745, _746));
        float _752 = (_747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_747);
        float _761 = (dot(vec3(_306, _307, _308), vec3(_752 * _744, _752 * _745, _752 * _746)) + 1.0) * 0.5;
        float _3513 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _771 = sqrt(((_745 * _745) + (_744 * _744)) + (_746 * _746)) / (_741 + 9.9999997473787516355514526367188e-06);
        float _3524 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _772 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _773 = _772 * 2.0;
        float _777 = (1.0 - _772) / (_772 + 1.0);
        float _3535 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _787 = ((((1.0 - _778) * (_773 + 2.0)) * exp2(log2(isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_773 + 1.0))) + _778) * _741;
        float _788 = _709 * 0.5;
        float _789 = _719 * 0.5;
        float _790 = _729 * 0.5;
        float _791 = dot(vec3(_788, _789, _790), vec3(_788, _789, _790));
        float _796 = (_791 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_791);
        float _804 = (dot(vec3(_306, _307, _308), vec3(_796 * _788, _796 * _789, _796 * _790)) + 1.0) * 0.5;
        float _3546 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _813 = sqrt(((_789 * _789) + (_788 * _788)) + (_790 * _790)) / (_742 + 9.9999997473787516355514526367188e-06);
        float _3557 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _815 = _814 * 2.0;
        float _819 = (1.0 - _814) / (_814 + 1.0);
        float _3568 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _829 = ((((1.0 - _820) * (_815 + 2.0)) * exp2(log2(isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * (_815 + 1.0))) + _820) * _742;
        float _830 = _710 * 0.5;
        float _831 = _720 * 0.5;
        float _832 = _730 * 0.5;
        float _833 = dot(vec3(_830, _831, _832), vec3(_830, _831, _832));
        float _838 = (_833 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_833);
        float _846 = (dot(vec3(_306, _307, _308), vec3(_838 * _830, _838 * _831, _838 * _832)) + 1.0) * 0.5;
        float _3579 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _855 = sqrt(((_831 * _831) + (_830 * _830)) + (_832 * _832)) / (_743 + 9.9999997473787516355514526367188e-06);
        float _3590 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _857 = _856 * 2.0;
        float _861 = (1.0 - _856) / (_856 + 1.0);
        float _3601 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _871 = ((((1.0 - _862) * (_857 + 2.0)) * exp2(log2(isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_857 + 1.0))) + _862) * _743;
        _879 = _710;
        _881 = _709;
        _882 = _708;
        _883 = _720;
        _884 = _719;
        _885 = _718;
        _886 = _730;
        _887 = _729;
        _888 = _728;
        _889 = _743;
        _890 = _742;
        _891 = _741;
        _892 = cbModelParam._m0[36u].z * (isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0)));
        _893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0)));
        _894 = cbModelParam._m0[36u].z * (isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0)));
    }
    else
    {
        _879 = _880;
        _881 = _880;
        _882 = _880;
        _883 = _880;
        _884 = _880;
        _885 = _880;
        _886 = _880;
        _887 = _880;
        _888 = _880;
        _889 = _880;
        _890 = _880;
        _891 = _880;
        _892 = 0.0;
        _893 = 0.0;
        _894 = 0.0;
    }
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _923 = fma(_548, cbModelParam._m0[30u].z, fma(_544, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _540));
        float _927 = fma(_548, cbModelParam._m0[31u].z, fma(_544, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _540));
        float _931 = fma(_548, cbModelParam._m0[32u].z, fma(_544, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _540));
        float _954 = _540 + _306;
        float _955 = _544 + _307;
        float _956 = _548 + _308;
        float _966 = fma(_956, cbModelParam._m0[30u].z, fma(_955, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _954)) - _923;
        float _967 = fma(_956, cbModelParam._m0[31u].z, fma(_955, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _954)) - _927;
        float _968 = fma(_956, cbModelParam._m0[32u].z, fma(_955, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _954)) - _931;
        float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
        float _985 = ((_972 * _966) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_923 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_972 * _967) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_927 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_972 * _968) / cbModelParam._m0[35u].z) + ((((((_931 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_985, _986, _987), 0.0);
        float _1022 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_989.x + (-0.5));
        float _1024 = _1022 * (_989.y + (-0.5));
        float _1025 = _1022 * (_989.z + (-0.5));
        float _1032 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_996.x + (-0.5));
        float _1034 = _1032 * (_996.y + (-0.5));
        float _1035 = _1032 * (_996.z + (-0.5));
        float _1042 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1003.x + (-0.5));
        float _1044 = _1042 * (_1003.y + (-0.5));
        float _1045 = _1042 * (_1003.z + (-0.5));
        float _1052 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1010.x + (-0.5));
        float _1054 = _1052 * (_1010.y + (-0.5));
        float _1055 = _1052 * (_1010.z + (-0.5));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = _1023 * 0.5;
        float _1060 = _1033 * 0.5;
        float _1061 = _1043 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_306, _307, _308), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3664 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1086 + 1.0))) + _1091) * _1056;
        float _1101 = _1024 * 0.5;
        float _1102 = _1034 * 0.5;
        float _1103 = _1044 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_306, _307, _308), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3697 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1128 + 1.0))) + _1133) * _1057;
        float _1143 = _1025 * 0.5;
        float _1144 = _1035 * 0.5;
        float _1145 = _1045 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_306, _307, _308), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3730 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1170 + 1.0))) + _1175) * _1058;
        _1192 = _1025;
        _1193 = _1024;
        _1194 = _1023;
        _1195 = _1035;
        _1196 = _1034;
        _1197 = _1033;
        _1198 = _1045;
        _1199 = _1044;
        _1200 = _1043;
        _1201 = _1058;
        _1202 = _1057;
        _1203 = _1056;
        _1204 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
        _1205 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1206 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
    }
    else
    {
        _1192 = _880;
        _1193 = _880;
        _1194 = _880;
        _1195 = _880;
        _1196 = _880;
        _1197 = _880;
        _1198 = _880;
        _1199 = _880;
        _1200 = _880;
        _1201 = _880;
        _1202 = _880;
        _1203 = _880;
        _1204 = 0.0;
        _1205 = 0.0;
        _1206 = 0.0;
    }
    float _1216 = (cbModelParam._m0[1u].x * (_1204 - _892)) + _892;
    float _1217 = (cbModelParam._m0[1u].x * (_1205 - _893)) + _893;
    float _1218 = (cbModelParam._m0[1u].x * (_1206 - _894)) + _894;
    float _1239 = fma(_1218, cbSceneParam._m0[89u].z, fma(_1217, cbSceneParam._m0[89u].y, _1216 * cbSceneParam._m0[89u].x));
    float _1242 = fma(_1218, cbSceneParam._m0[90u].z, fma(_1217, cbSceneParam._m0[90u].y, _1216 * cbSceneParam._m0[90u].x));
    float _1245 = fma(_1218, cbSceneParam._m0[91u].z, fma(_1217, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1216));
    float _1260 = _484 * 0.5;
    float _1261 = _485 * 0.5;
    float _1262 = _486 * 0.5;
    float _1263 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_1194, _1197, _1200, _1203));
    float _1266 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_1193, _1196, _1199, _1202));
    float _1269 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_1192, _1195, _1198, _1201));
    float _1303;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1276 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_879, _883, _886, _889));
        float _1280 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_881, _884, _887, _890));
        float _1284 = dot(vec4(_1260, _1261, _1262, 1.0), vec4(_882, _885, _888, _891));
        float _1291 = dot(vec4(cbModelParam._m0[39u]), vec4(_1260, _1261, _1262, 1.0));
        _1303 = dot(vec3(isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)), isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)), isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1291) ? 0.0 : (isnan(0.0) ? _1291 : max(0.0, _1291))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1303 = 1.0;
    }
    float _1314;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1305 = dot(vec4(cbModelParam._m0[40u]), vec4(_1260, _1261, _1262, 1.0));
        _1314 = dot(vec3(isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)), isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1305) ? 0.0 : (isnan(0.0) ? _1305 : max(0.0, _1305))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1314 = 1.0;
    }
    float _1318 = (_1314 * cbModelParam._m0[1u].x) + (_1303 * (1.0 - cbModelParam._m0[1u].x));
    float _1328 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _309);
    float _1329 = isnan(_1328) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1328 : min(cbModelParam._m0[25u].z, _1328));
    float _1411;
    float _1413;
    float _1415;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1378 = fma(_548, cbModelParam._m0[13u].z, fma(_544, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _540)) + cbModelParam._m0[13u].w;
        float _1382 = fma(_548, cbModelParam._m0[14u].z, fma(_544, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _540)) + cbModelParam._m0[14u].w;
        float _1386 = fma(_548, cbModelParam._m0[15u].z, fma(_544, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _540)) + cbModelParam._m0[15u].w;
        float _1389 = fma(_486, cbModelParam._m0[13u].z, fma(_485, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _484));
        float _1392 = fma(_486, cbModelParam._m0[14u].z, fma(_485, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _484));
        float _1395 = fma(_486, cbModelParam._m0[15u].z, fma(_485, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _484));
        float _1423;
        if (_1389 > 0.0)
        {
            _1423 = abs((1.0 - _1378) / _1389);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1389 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1378 + 1.0) / _1389);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1423 = frontier_phi_17_15_ladder;
        }
        float _1709;
        if (_1392 > 0.0)
        {
            _1709 = abs((1.0 - _1382) / _1392);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1382 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1709 = frontier_phi_26_22_ladder;
        }
        float _1955;
        if (_1395 > 0.0)
        {
            _1955 = abs((1.0 - _1386) / _1395);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1386 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1955 = frontier_phi_38_33_ladder;
        }
        float _1957 = isnan(_1709) ? _1423 : (isnan(_1423) ? _1709 : min(_1423, _1709));
        float _1958 = isnan(_1955) ? _1957 : (isnan(_1957) ? _1955 : min(_1957, _1955));
        float _1962 = (_1958 * _1389) + _1378;
        float _1963 = (_1958 * _1392) + _1382;
        float _1964 = (_1958 * _1395) + _1386;
        float _1965 = _1958 * 9.9999997473787516355514526367188e-05;
        float _1967 = (-1.0) - _1965;
        float _1969 = _1965 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1964 > _1969) || ((_1964 < _1967) || ((_1963 > _1969) || ((_1963 < _1967) || ((_1962 < _1967) || (_1962 > _1969))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2088 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1964, cbModelParam._m0[9u].z, fma(_1963, cbModelParam._m0[9u].y, _1962 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1964, cbModelParam._m0[10u].z, fma(_1963, cbModelParam._m0[10u].y, _1962 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1964, cbModelParam._m0[11u].z, fma(_1963, cbModelParam._m0[11u].y, _1962 * cbModelParam._m0[11u].x))), _1329);
            frontier_phi_16_38_ladder = _2088.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2088.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2088.x * cbModelParam._m0[1u].y;
        }
        _1411 = frontier_phi_16_38_ladder_2;
        _1413 = frontier_phi_16_38_ladder_1;
        _1415 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1399 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_484, _485, _486), _1329);
        _1411 = _1399.x * cbModelParam._m0[1u].y;
        _1413 = _1399.y * cbModelParam._m0[1u].y;
        _1415 = _1399.z * cbModelParam._m0[1u].y;
    }
    float _1419 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _309);
    float _1420 = isnan(_1419) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1419 : min(cbModelParam._m0[25u].w, _1419));
    float _1512;
    float _1514;
    float _1516;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1476 = fma(_548, cbModelParam._m0[21u].z, fma(_544, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _540)) + cbModelParam._m0[21u].w;
        float _1480 = fma(_548, cbModelParam._m0[22u].z, fma(_544, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _540)) + cbModelParam._m0[22u].w;
        float _1484 = fma(_548, cbModelParam._m0[23u].z, fma(_544, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _540)) + cbModelParam._m0[23u].w;
        float _1487 = fma(_486, cbModelParam._m0[21u].z, fma(_485, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _484));
        float _1490 = fma(_486, cbModelParam._m0[22u].z, fma(_485, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _484));
        float _1493 = fma(_486, cbModelParam._m0[23u].z, fma(_485, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _484));
        float _1714;
        if (_1487 > 0.0)
        {
            _1714 = abs((1.0 - _1476) / _1487);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1476 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1714 = frontier_phi_28_24_ladder;
        }
        float _1982;
        if (_1490 > 0.0)
        {
            _1982 = abs((1.0 - _1480) / _1490);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1480 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1982 = frontier_phi_40_35_ladder;
        }
        float _2187;
        if (_1493 > 0.0)
        {
            _2187 = abs((1.0 - _1484) / _1493);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1484 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2187 = frontier_phi_49_46_ladder;
        }
        float _2189 = isnan(_1982) ? _1714 : (isnan(_1714) ? _1982 : min(_1714, _1982));
        float _2190 = isnan(_2187) ? _2189 : (isnan(_2189) ? _2187 : min(_2189, _2187));
        float _2194 = (_2190 * _1487) + _1476;
        float _2195 = (_2190 * _1490) + _1480;
        float _2196 = (_2190 * _1493) + _1484;
        float _2197 = _2190 * 9.9999997473787516355514526367188e-05;
        float _2198 = (-1.0) - _2197;
        float _2200 = _2197 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2196 > _2200) || ((_2196 < _2198) || ((_2195 > _2200) || ((_2195 < _2198) || ((_2194 < _2198) || (_2194 > _2200))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2395 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2196, cbModelParam._m0[17u].z, fma(_2195, cbModelParam._m0[17u].y, _2194 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2196, cbModelParam._m0[18u].z, fma(_2195, cbModelParam._m0[18u].y, _2194 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2196, cbModelParam._m0[19u].z, fma(_2195, cbModelParam._m0[19u].y, _2194 * cbModelParam._m0[19u].x))), _1420);
            frontier_phi_25_49_ladder = _2395.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2395.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2395.x * cbModelParam._m0[1u].z;
        }
        _1512 = frontier_phi_25_49_ladder_2;
        _1514 = frontier_phi_25_49_ladder_1;
        _1516 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1496 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_484, _485, _486), _1420);
        _1512 = _1496.x * cbModelParam._m0[1u].z;
        _1514 = _1496.y * cbModelParam._m0[1u].z;
        _1516 = _1496.z * cbModelParam._m0[1u].z;
    }
    float _1528 = ((((1.0 - _508) * ((_495 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_508 * _495)) * _476;
    float _1529 = _1528 * ((cbModelParam._m0[1u].w * (_1512 - _1411)) + _1411);
    float _1530 = _1528 * ((cbModelParam._m0[1u].w * (_1514 - _1413)) + _1413);
    float _1531 = _1528 * ((cbModelParam._m0[1u].w * (_1516 - _1415)) + _1415);
    float _1534 = fma(_1531, cbSceneParam._m0[89u].z, fma(_1530, cbSceneParam._m0[89u].y, _1529 * cbSceneParam._m0[89u].x));
    float _1537 = fma(_1531, cbSceneParam._m0[90u].z, fma(_1530, cbSceneParam._m0[90u].y, _1529 * cbSceneParam._m0[90u].x));
    float _1540 = fma(_1531, cbSceneParam._m0[91u].z, fma(_1530, cbSceneParam._m0[91u].y, _1529 * cbSceneParam._m0[91u].x));
    float _1551 = _409 / cbSceneParam._m0[86u].x;
    float _1559 = (cbSceneParam._m0[88u].y * (1.0 - cbMtdParam._m0[25u].y)) + cbSceneParam._m0[88u].z;
    float _3856 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
    float _1561 = (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * 5.0;
    float _1566 = ((10.0 / (_329 + 10.0)) * cbMtdParam._m0[25u].x) * dot(vec3(_306, _307, _308), vec3(1.0, 0.0, 0.0));
    vec4 _1576 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1566 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1566 + _1551) * cbSceneParam._m0[86u].x, _410), _1561).w) + _1551) * cbSceneParam._m0[86u].x, _410), _1561);
    float _1582 = isnan(0.5) ? _1576.w : (isnan(_1576.w) ? 0.5 : max(_1576.w, 0.5));
    float _1597 = 1.0 - (_1576.w / _1582);
    vec4 _1605 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_409, _410));
    float _1607 = _1605.w;
    float _1619 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1607);
    float _1620 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1607);
    float _1621 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1607);
    float _3872 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
    float _1622 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _3883 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
    float _1623 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _3894 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
    float _1624 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    uvec4 _1628 = floatBitsToUint(cbInstanceData._m0[_449 + 5u]);
    uint _1630 = _1628.x * 14u;
    uint _1631 = _1630 + 13u;
    float _1638 = _476 + (-1.0);
    float _1643 = (cbLight._m0[_1631].x * _1638) + 1.0;
    float _1644 = (cbLight._m0[_1631].y * _1638) + 1.0;
    float _1645 = (cbLight._m0[_1631].z * _1638) + 1.0;
    float _1646 = (cbLight._m0[_1631].w * _1638) + 1.0;
    uint _1647 = _1630 + 5u;
    float _1653 = isnan(1.0) ? _1644 : (isnan(_1644) ? 1.0 : min(_1644, 1.0));
    uint _1657 = _1630 + 4u;
    float _1667 = isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0));
    uint _1671 = _1630 | 1u;
    float _1682 = dot(vec3(cbLight._m0[_1630].xyz), vec3(_306, _307, _308));
    float _1685 = dot(vec3(cbLight._m0[_1671].xyz), vec3(_306, _307, _308));
    float _3915 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
    float _3926 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _1690 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * 0.3183098733425140380859375;
    float _1692 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 0.3183098733425140380859375;
    float _1699 = ((cbLight._m0[_1647].x * _1653) * _1692) + (((cbLight._m0[_1657].x * _1622) * _1667) * _1690);
    float _1700 = ((_1653 * cbLight._m0[_1647].y) * _1692) + (((cbLight._m0[_1657].y * _1623) * _1667) * _1690);
    float _1701 = ((_1653 * cbLight._m0[_1647].z) * _1692) + (((cbLight._m0[_1657].z * _1624) * _1667) * _1690);
    uvec4 _1706 = floatBitsToUint(cbLight._m0[_1630 + 12u]);
    bool _1708 = _1706.x == 0u;
    float _1719;
    float _1721;
    float _1723;
    if (_1708)
    {
        _1719 = _1699;
        _1721 = _1700;
        _1723 = _1701;
    }
    else
    {
        uint _1727 = _1630 + 6u;
        float _1743 = (dot(vec3(cbLight._m0[_1630 + 2u].xyz), vec3(_306, _307, _308)) * 0.5) + 0.5;
        float _1744 = _1743 * _1743;
        float _3937 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1746 = isnan(1.0) ? _1645 : (isnan(_1645) ? 1.0 : min(_1645, 1.0));
        _1719 = (((cbLight._m0[_1727].x * 0.3183098733425140380859375) * _1745) * _1746) + _1699;
        _1721 = (((cbLight._m0[_1727].y * 0.3183098733425140380859375) * _1745) * _1746) + _1700;
        _1723 = (((cbLight._m0[_1727].z * 0.3183098733425140380859375) * _1745) * _1746) + _1701;
    }
    bool _1726 = _1706.y == 0u;
    float _1764;
    float _1766;
    float _1768;
    if (_1726)
    {
        _1764 = _1719;
        _1766 = _1721;
        _1768 = _1723;
    }
    else
    {
        uint _1926 = _1630 + 7u;
        float _1942 = (dot(vec3(cbLight._m0[_1630 + 3u].xyz), vec3(_306, _307, _308)) * 0.5) + 0.5;
        float _1943 = _1942 * _1942;
        float _3953 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1944 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1945 = isnan(1.0) ? _1646 : (isnan(_1646) ? 1.0 : min(_1646, 1.0));
        _1764 = (((cbLight._m0[_1926].x * 0.3183098733425140380859375) * _1944) * _1945) + _1719;
        _1766 = (((cbLight._m0[_1926].y * 0.3183098733425140380859375) * _1944) * _1945) + _1721;
        _1768 = (((cbLight._m0[_1926].z * 0.3183098733425140380859375) * _1944) * _1945) + _1723;
    }
    uint _1771 = _1630 + 8u;
    float _1784 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1630].w)) * _309) * 0.949999988079071044921875);
    float _1785 = _1784 * _1784;
    float _1786 = cbLight._m0[_1630].x + _388;
    float _1787 = cbLight._m0[_1630].y + _389;
    float _1788 = cbLight._m0[_1630].z + _390;
    float _1792 = inversesqrt(dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788)));
    float _1793 = _1792 * _1786;
    float _1794 = _1792 * _1787;
    float _1795 = _1792 * _1788;
    float _1796 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1630].xyz));
    float _3969 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1799 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _3980 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _1800 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _1801 = dot(vec3(_306, _307, _308), vec3(_1793, _1794, _1795));
    float _3991 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1804 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _1805 = dot(vec3(cbLight._m0[_1630].xyz), vec3(_1793, _1794, _1795));
    float _4002 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1809 = _1785 * _1785;
    float _1813 = ((_1804 * _1804) * (_1809 + (-1.0))) + 1.0;
    float _1824 = (exp2(log2(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1825 = 1.0 - _1785;
    float _1836 = (0.5 / (((_1800 * ((_1799 * _1825) + _1785)) + 9.9999999392252902907785028219223e-09) + (((_1800 * _1825) + _1785) * _1799))) * _1799;
    float _4013 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1838 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1809 / ((_1813 * _1813) * 3.141590118408203125));
    uint _1852 = _1630 + 9u;
    float _1863 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1671].w)) * _309) * 0.949999988079071044921875);
    float _1864 = _1863 * _1863;
    float _1865 = cbLight._m0[_1671].x + _388;
    float _1866 = cbLight._m0[_1671].y + _389;
    float _1867 = cbLight._m0[_1671].z + _390;
    float _1871 = inversesqrt(dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867)));
    float _1872 = _1871 * _1865;
    float _1873 = _1871 * _1866;
    float _1874 = _1871 * _1867;
    float _1875 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1671].xyz));
    float _4024 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _1879 = dot(vec3(_306, _307, _308), vec3(_1872, _1873, _1874));
    float _4035 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _1883 = dot(vec3(cbLight._m0[_1671].xyz), vec3(_1872, _1873, _1874));
    float _4046 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1887 = _1864 * _1864;
    float _1891 = ((_1882 * _1882) * (_1887 + (-1.0))) + 1.0;
    float _1900 = (exp2(log2(1.0 - (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1901 = 1.0 - _1864;
    float _1911 = (0.5 / (((_1800 * ((_1878 * _1901) + _1864)) + 9.9999999392252902907785028219223e-09) + (((_1800 * _1901) + _1864) * _1878))) * _1878;
    float _4057 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1913 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1887 / ((_1891 * _1891) * 3.141590118408203125));
    float _1923 = (((_1900 * cbLight._m0[_1852].x) * _1913) * _1653) + ((((cbLight._m0[_1771].x * _1622) * _1824) * _1838) * _1667);
    float _1924 = (((_1900 * cbLight._m0[_1852].y) * _1913) * _1653) + ((((cbLight._m0[_1771].y * _1623) * _1824) * _1838) * _1667);
    float _1925 = (((_1900 * cbLight._m0[_1852].z) * _1913) * _1653) + ((((cbLight._m0[_1771].z * _1624) * _1824) * _1838) * _1667);
    float _1987;
    float _1989;
    float _1991;
    if (_1708)
    {
        _1987 = _1923;
        _1989 = _1924;
        _1991 = _1925;
    }
    else
    {
        uint _1993 = _1630 + 2u;
        uint _1997 = _1630 + 10u;
        float _2011 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _309) * 0.949999988079071044921875);
        float _2012 = _2011 * _2011;
        float _2013 = cbLight._m0[_1993].x + _388;
        float _2014 = cbLight._m0[_1993].y + _389;
        float _2015 = cbLight._m0[_1993].z + _390;
        float _2019 = inversesqrt(dot(vec3(_2013, _2014, _2015), vec3(_2013, _2014, _2015)));
        float _2020 = _2019 * _2013;
        float _2021 = _2019 * _2014;
        float _2022 = _2019 * _2015;
        float _2023 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1993].xyz));
        float _4068 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2026 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _2027 = dot(vec3(_306, _307, _308), vec3(_2020, _2021, _2022));
        float _4079 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2030 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2031 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2020, _2021, _2022));
        float _4090 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2035 = _2012 * _2012;
        float _2039 = ((_2030 * _2030) * (_2035 + (-1.0))) + 1.0;
        float _2048 = (exp2(log2(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2049 = 1.0 - _2012;
        float _2059 = (0.5 / (((_1800 * ((_2026 * _2049) + _2012)) + 9.9999999392252902907785028219223e-09) + (((_1800 * _2049) + _2012) * _2026))) * _2026;
        float _4101 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2061 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_2035 / ((_2039 * _2039) * 3.141590118408203125));
        float _2062 = isnan(1.0) ? _1645 : (isnan(_1645) ? 1.0 : min(_1645, 1.0));
        _1987 = (((_2048 * cbLight._m0[_1997].x) * _2061) * _2062) + _1923;
        _1989 = (((_2048 * cbLight._m0[_1997].y) * _2061) * _2062) + _1924;
        _1991 = (((_2048 * cbLight._m0[_1997].z) * _2061) * _2062) + _1925;
    }
    float _2097;
    float _2099;
    float _2101;
    if (_1726)
    {
        _2097 = _1987;
        _2099 = _1989;
        _2101 = _1991;
    }
    else
    {
        uint _2108 = _1630 + 3u;
        uint _2112 = _1630 + 11u;
        float _2126 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2108].w)) * _309) * 0.949999988079071044921875);
        float _2127 = _2126 * _2126;
        float _2128 = cbLight._m0[_2108].x + _388;
        float _2129 = cbLight._m0[_2108].y + _389;
        float _2130 = cbLight._m0[_2108].z + _390;
        float _2134 = inversesqrt(dot(vec3(_2128, _2129, _2130), vec3(_2128, _2129, _2130)));
        float _2135 = _2134 * _2128;
        float _2136 = _2134 * _2129;
        float _2137 = _2134 * _2130;
        float _2138 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_2108].xyz));
        float _4117 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2141 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2142 = dot(vec3(_306, _307, _308), vec3(_2135, _2136, _2137));
        float _4128 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2145 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _2146 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_2135, _2136, _2137));
        float _4139 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2150 = _2127 * _2127;
        float _2154 = ((_2145 * _2145) * (_2150 + (-1.0))) + 1.0;
        float _2163 = (exp2(log2(1.0 - (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2164 = 1.0 - _2127;
        float _2174 = (0.5 / (((_1800 * ((_2141 * _2164) + _2127)) + 9.9999999392252902907785028219223e-09) + (((_1800 * _2164) + _2127) * _2141))) * _2141;
        float _4150 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2176 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_2150 / ((_2154 * _2154) * 3.141590118408203125));
        float _2177 = isnan(1.0) ? _1646 : (isnan(_1646) ? 1.0 : min(_1646, 1.0));
        _2097 = (((_2163 * cbLight._m0[_2112].x) * _2176) * _2177) + _1987;
        _2099 = (((_2163 * cbLight._m0[_2112].y) * _2176) * _2177) + _1989;
        _2101 = (((_2163 * cbLight._m0[_2112].z) * _2176) * _2177) + _1991;
    }
    float _2312;
    float _2314;
    float _2316;
    float _2318;
    float _2320;
    float _2322;
    if (_1628.y == 0u)
    {
        float _2252 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2253 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2252;
        float _2254 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2252;
        float _2255 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2252;
        uvec4 _2267 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2268 = _2267.x;
        uint _2279 = uint((float(_2267.y) * floor(float(uint(cbSceneParam._m0[85u].y * _410) / _2268))) + floor(float(uint(cbSceneParam._m0[85u].x * _409) / _2268)));
        float _2289 = (log2(_2255 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2290 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        uint _2293 = uint(isnan(14.0) ? _2290 : (isnan(_2290) ? 14.0 : min(_2290, 14.0)));
        uvec4 _2298 = texelFetch(g_lightClusterGridBuffer, int(((_2293 << 2u) + (_2279 << 6u)) >> 2u));
        uint _2299 = _2298.x;
        uint _2300 = _2267.z;
        float _2400;
        float _2402;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        if (((((1u << ((_2300 >> 4u) & 15u)) + 4294967295u) & _2299) == 0u) || ((_2300 & 240u) == 0u))
        {
            _2400 = 0.0;
            _2402 = 0.0;
            _2404 = 0.0;
            _2406 = 0.0;
            _2408 = 0.0;
            _2410 = 0.0;
        }
        else
        {
            float _2401;
            float _2403;
            float _2405;
            float _2407;
            float _2409;
            float _2411;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            float _2555 = 0.0;
            float _2556 = 0.0;
            float _2557 = 0.0;
            uint _2558 = 0u;
            uint _2567;
            bool _2568;
            for (;;)
            {
                _2567 = texelFetch(g_lightClassification, int((((_2293 << 5u) + (_2279 << 9u)) + (_2558 << 2u)) >> 2u)).x;
                _2568 = _2567 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2568)
                {
                    frontier_phi_66_pred = _2552;
                    frontier_phi_66_pred_1 = _2557;
                    frontier_phi_66_pred_2 = _2556;
                    frontier_phi_66_pred_3 = _2555;
                    frontier_phi_66_pred_4 = _2554;
                    frontier_phi_66_pred_5 = _2553;
                }
                else
                {
                    float _2697;
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    float _2702;
                    uint _2703;
                    _2697 = _2552;
                    _2698 = _2553;
                    _2699 = _2554;
                    _2700 = _2555;
                    _2701 = _2556;
                    _2702 = _2557;
                    _2703 = _2567;
                    float _2624;
                    float _2625;
                    float _2626;
                    float _2627;
                    float _2628;
                    float _2629;
                    for (;;)
                    {
                        uint _2707 = uint(findLSB(_2703)) + (_2558 << 5u);
                        uint _2704 = (_2703 + 4294967295u) & _2703;
                        uint _2709 = _2707 * 48u;
                        vec4 _2723 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2709)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 3u)).x));
                        uint _2729 = (_2707 * 48u) + 4u;
                        vec4 _2742 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2729)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 3u)).x));
                        uint _2748 = (_2707 * 48u) + 8u;
                        vec3 _2759 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2748)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 2u)).x));
                        float _2763 = _2723.x - _2253;
                        float _2764 = _2723.y - _2254;
                        float _2765 = _2723.z - _2255;
                        float _2766 = dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765));
                        float _2769 = inversesqrt(_2766);
                        float _2770 = _2769 * _2763;
                        float _2771 = _2769 * _2764;
                        float _2772 = _2769 * _2765;
                        float _2773 = dot(vec3(_430, _433, _436), vec3(_2770, _2771, _2772));
                        float _2778 = 1.0 - (_2766 * _2723.w);
                        float _4176 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                        float _2779 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                        float _2780 = sqrt(_2766) * _2742.w;
                        float _2783 = 1.39999997615814208984375 / (_2780 + 1.39999997615814208984375);
                        float _2784 = _2783 * _2783;
                        float _2787 = ((1.0 - _2784) * _2773) + _2784;
                        float _2790 = _2780 * _2780;
                        float _2794 = ((isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0))) * _2779) / ((_2790 * 0.699999988079071044921875) + 1.0);
                        float _2798 = (-0.0) - _2253;
                        float _2799 = (-0.0) - _2254;
                        float _2800 = (-0.0) - _2255;
                        float _2804 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
                        float _2805 = _2804 * _2798;
                        float _2806 = _2804 * _2799;
                        float _2807 = _2804 * _2800;
                        float _2815 = exp2(log2(1.0 / ((_2790 * 3.5) + 5.0)) * 0.25);
                        float _2816 = 1.0 - _495;
                        float _2823 = sqrt(1.0 - ((1.0 - (_2816 * _2816)) * (1.0 - (_2815 * _2815))));
                        float _2824 = _2823 * _2823;
                        float _2825 = _2824 * _2824;
                        float _2826 = _2805 + _2770;
                        float _2827 = _2806 + _2771;
                        float _2828 = _2807 + _2772;
                        float _2832 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
                        float _2836 = dot(vec3(_430, _433, _436), vec3(_2805, _2806, _2807));
                        float _4192 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2839 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                        float _2840 = dot(vec3(_430, _433, _436), vec3(_2832 * _2826, _2832 * _2827, _2832 * _2828));
                        float _4203 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2843 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                        float _2847 = ((_2843 * _2843) * (_2825 + (-1.0))) + 1.0;
                        float _2848 = _2783 * _2824;
                        float _2849 = _2848 * _2848;
                        float _2852 = ((1.0 - _2849) * _2773) + _2849;
                        float _4214 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2853 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2854 = 1.0 - _2824;
                        float _2864 = (0.5 / (((_2853 * ((_2839 * _2854) + _2824)) + 9.9999999392252902907785028219223e-09) + (((_2853 * _2854) + _2824) * _2839))) * _2853;
                        float _4225 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                        float _2875 = (((_2825 * 3.1415927410125732421875) * (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) / ((_2847 * _2847) * ((_2790 * 2.1991131305694580078125) + 3.141590118408203125))) * _2779;
                        _2627 = (_2794 * _2742.x) + _2700;
                        _2628 = (_2794 * _2742.y) + _2701;
                        _2629 = (_2794 * _2742.z) + _2702;
                        _2624 = (_2875 * _2759.x) + _2697;
                        _2625 = (_2875 * _2759.y) + _2698;
                        _2626 = (_2875 * _2759.z) + _2699;
                        if (_2704 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2697 = _2624;
                            _2698 = _2625;
                            _2699 = _2626;
                            _2700 = _2627;
                            _2701 = _2628;
                            _2702 = _2629;
                            _2703 = _2704;
                        }
                    }
                    frontier_phi_66_pred = _2624;
                    frontier_phi_66_pred_1 = _2629;
                    frontier_phi_66_pred_2 = _2628;
                    frontier_phi_66_pred_3 = _2627;
                    frontier_phi_66_pred_4 = _2626;
                    frontier_phi_66_pred_5 = _2625;
                }
                _2401 = frontier_phi_66_pred;
                _2411 = frontier_phi_66_pred_1;
                _2409 = frontier_phi_66_pred_2;
                _2407 = frontier_phi_66_pred_3;
                _2405 = frontier_phi_66_pred_4;
                _2403 = frontier_phi_66_pred_5;
                uint _2559 = _2558 + 1u;
                if (_2559 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2552 = _2401;
                    _2553 = _2403;
                    _2554 = _2405;
                    _2555 = _2407;
                    _2556 = _2409;
                    _2557 = _2411;
                    _2558 = _2559;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2400 = _2401;
            _2402 = _2403;
            _2404 = _2405;
            _2406 = _2407;
            _2408 = _2409;
            _2410 = _2411;
        }
        uvec4 _2414 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2415 = _2414.z;
        uint _2417 = (_2415 >> 8u) & 15u;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        if (((4294967295u << _2417) & _2299) == 0u)
        {
            _2520 = _2400;
            _2522 = _2402;
            _2524 = _2404;
            _2526 = _2406;
            _2528 = _2408;
            _2530 = _2410;
        }
        else
        {
            float _2545 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
            float _2546 = _2545 * _2253;
            float _2547 = _2545 * _2254;
            float _2548 = _2545 * _2255;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2417 < ((_2415 >> 12u) & 15u))
            {
                float _2521;
                float _2523;
                float _2525;
                float _2527;
                float _2529;
                float _2531;
                float _2680 = _2400;
                float _2681 = _2402;
                float _2682 = _2404;
                float _2683 = _2406;
                float _2684 = _2408;
                float _2685 = _2410;
                uint _2686 = _2417;
                uint _2695;
                bool _2696;
                for (;;)
                {
                    _2695 = texelFetch(g_lightClassification, int((((_2293 << 5u) + (_2279 << 9u)) + (_2686 << 2u)) >> 2u)).x;
                    _2696 = _2695 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2696)
                    {
                        frontier_phi_77_pred = _2685;
                        frontier_phi_77_pred_1 = _2684;
                        frontier_phi_77_pred_2 = _2683;
                        frontier_phi_77_pred_3 = _2682;
                        frontier_phi_77_pred_4 = _2681;
                        frontier_phi_77_pred_5 = _2680;
                    }
                    else
                    {
                        float _2889;
                        float _2890;
                        float _2891;
                        float _2892;
                        float _2893;
                        float _2894;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _2902 = _2680;
                        float _2903 = _2681;
                        float _2904 = _2682;
                        float _2905 = _2683;
                        float _2906 = _2684;
                        float _2907 = _2685;
                        uint _2908 = _2695;
                        uint _2909;
                        vec4 _2934;
                        float _2935;
                        vec4 _2950;
                        vec3 _2962;
                        vec4 _2978;
                        vec4 _2994;
                        float _3041;
                        bool _3042;
                        for (;;)
                        {
                            uint _2919 = ((_2686 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2908));
                            _2909 = (_2908 + 4294967295u) & _2908;
                            uint _2921 = _2919 * 40u;
                            _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            _2935 = _2934.w;
                            uint _2937 = (_2919 * 40u) + 4u;
                            _2950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 3u)).x));
                            uint _2952 = (_2919 * 40u) + 8u;
                            _2962 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x));
                            uint _2965 = (_2919 * 40u) + 16u;
                            _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            uint _2981 = (_2919 * 40u) + 20u;
                            _2994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 3u)).x));
                            uint _2997 = (_2919 * 40u) + 24u;
                            vec4 _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            uint _3016 = (_2919 * 40u) + 28u;
                            vec4 _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            _3041 = fma(_2255, _3029.z, fma(_2254, _3029.y, _3029.x * _2253)) + _3029.w;
                            _3042 = !((fma(_2255, _3010.z, fma(_2254, _3010.y, _3010.x * _2253)) + _3010.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3042)
                            {
                                float _3069 = _2934.x - _2253;
                                float _3070 = _2934.y - _2254;
                                float _3071 = _2934.z - _2255;
                                float _3072 = dot(vec3(_3069, _3070, _3071), vec3(_3069, _3070, _3071));
                                float _3075 = inversesqrt(_3072);
                                float _3076 = _3075 * _3069;
                                float _3077 = _3075 * _3070;
                                float _3078 = _3075 * _3071;
                                float _3082 = 1.0 - (_3072 / (_2935 * _2935));
                                float _4236 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                                float _3083 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                                float _3087 = sqrt(_3072) * _2950.w;
                                float _3089 = 1.39999997615814208984375 / (_3087 + 1.39999997615814208984375);
                                float _3090 = _3089 * _3089;
                                float _3093 = ((1.0 - _3090) * dot(vec3(_3076, _3077, _3078), vec3(_430, _433, _436))) + _3090;
                                float _3096 = _3087 * _3087;
                                float _3100 = (fma(_2255, _2978.z, fma(_2254, _2978.y, _2978.x * _2253)) + _2978.w) / _3041;
                                float _3101 = (fma(_2255, _2994.z, fma(_2254, _2994.y, _2994.x * _2253)) + _2994.w) / _3041;
                                float _3105 = 1.0 - dot(vec2(_3100, _3101), vec2(_3100, _3101));
                                float _4252 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3106 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                                float _3107 = _3106 * (((isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0))) * _3083) / ((_3096 * 0.699999988079071044921875) + 1.0));
                                float _3119 = exp2(log2(1.0 / ((_3096 * 3.5) + 5.0)) * 0.25);
                                float _3120 = 1.0 - _495;
                                float _3127 = sqrt(1.0 - ((1.0 - (_3120 * _3120)) * (1.0 - (_3119 * _3119))));
                                float _3128 = _3127 * _3127;
                                float _3129 = _3128 * _3128;
                                float _3130 = _3076 - _2546;
                                float _3131 = _3077 - _2547;
                                float _3132 = _3078 - _2548;
                                float _3136 = inversesqrt(dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132)));
                                float _3140 = dot(vec3(_430, _433, _436), vec3((-0.0) - _2546, (-0.0) - _2547, (-0.0) - _2548));
                                float _4263 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                                float _3143 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                                float _3144 = dot(vec3(_430, _433, _436), vec3(_3136 * _3130, _3136 * _3131, _3136 * _3132));
                                float _4274 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                                float _3147 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3151 = ((_3147 * _3147) * (_3129 + (-1.0))) + 1.0;
                                float _3152 = _3089 * _3128;
                                float _3153 = _3152 * _3152;
                                float _3159 = ((1.0 - _3153) * dot(vec3(_430, _433, _436), vec3(_3076, _3077, _3078))) + _3153;
                                float _4285 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                                float _3160 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                                float _3161 = 1.0 - _3128;
                                float _3171 = (0.5 / (((_3160 * ((_3143 * _3161) + _3128)) + 9.9999999392252902907785028219223e-09) + (((_3160 * _3161) + _3128) * _3143))) * _3160;
                                float _4296 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3181 = (_3106 * _3083) * (((_3129 * 3.1415927410125732421875) * (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) / ((_3151 * _3151) * ((_3096 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3107 * _2950.y;
                                frontier_phi_83_pred_1 = _3107 * _2950.x;
                                frontier_phi_83_pred_2 = _3181 * _2962.z;
                                frontier_phi_83_pred_3 = _3181 * _2962.y;
                                frontier_phi_83_pred_4 = _3181 * _2962.x;
                                frontier_phi_83_pred_5 = _3107 * _2950.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3189 = frontier_phi_83_pred;
                            _3188 = frontier_phi_83_pred_1;
                            _3187 = frontier_phi_83_pred_2;
                            _3186 = frontier_phi_83_pred_3;
                            _3185 = frontier_phi_83_pred_4;
                            _3190 = frontier_phi_83_pred_5;
                            _2892 = _3188 + _2905;
                            _2893 = _3189 + _2906;
                            _2894 = _3190 + _2907;
                            _2889 = _3185 + _2902;
                            _2890 = _3186 + _2903;
                            _2891 = _3187 + _2904;
                            if (_2909 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2902 = _2889;
                                _2903 = _2890;
                                _2904 = _2891;
                                _2905 = _2892;
                                _2906 = _2893;
                                _2907 = _2894;
                                _2908 = _2909;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2894;
                        frontier_phi_77_pred_1 = _2893;
                        frontier_phi_77_pred_2 = _2892;
                        frontier_phi_77_pred_3 = _2891;
                        frontier_phi_77_pred_4 = _2890;
                        frontier_phi_77_pred_5 = _2889;
                    }
                    _2531 = frontier_phi_77_pred;
                    _2529 = frontier_phi_77_pred_1;
                    _2527 = frontier_phi_77_pred_2;
                    _2525 = frontier_phi_77_pred_3;
                    _2523 = frontier_phi_77_pred_4;
                    _2521 = frontier_phi_77_pred_5;
                    uint _2687 = _2686 + 1u;
                    if (_2687 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2680 = _2521;
                        _2681 = _2523;
                        _2682 = _2525;
                        _2683 = _2527;
                        _2684 = _2529;
                        _2685 = _2531;
                        _2686 = _2687;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2525;
                frontier_phi_58_59_ladder_1 = _2531;
                frontier_phi_58_59_ladder_2 = _2529;
                frontier_phi_58_59_ladder_3 = _2527;
                frontier_phi_58_59_ladder_4 = _2523;
                frontier_phi_58_59_ladder_5 = _2521;
            }
            else
            {
                frontier_phi_58_59_ladder = _2404;
                frontier_phi_58_59_ladder_1 = _2410;
                frontier_phi_58_59_ladder_2 = _2408;
                frontier_phi_58_59_ladder_3 = _2406;
                frontier_phi_58_59_ladder_4 = _2402;
                frontier_phi_58_59_ladder_5 = _2400;
            }
            _2520 = frontier_phi_58_59_ladder_5;
            _2522 = frontier_phi_58_59_ladder_4;
            _2524 = frontier_phi_58_59_ladder;
            _2526 = frontier_phi_58_59_ladder_3;
            _2528 = frontier_phi_58_59_ladder_2;
            _2530 = frontier_phi_58_59_ladder_1;
        }
        float _2535 = isnan(1.0) ? _476 : (isnan(_476) ? 1.0 : min(_476, 1.0));
        _2312 = (_2535 * _2526) + _1764;
        _2314 = (_2535 * _2528) + _1766;
        _2316 = (_2535 * _2530) + _1768;
        _2318 = ((_2520 * 0.039999999105930328369140625) * _2535) + _2097;
        _2320 = ((_2522 * 0.039999999105930328369140625) * _2535) + _2099;
        _2322 = ((_2524 * 0.039999999105930328369140625) * _2535) + _2101;
    }
    else
    {
        _2312 = _1764;
        _2314 = _1766;
        _2316 = _1768;
        _2318 = _2097;
        _2320 = _2099;
        _2322 = _2101;
    }
    float _4312 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4323 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _4334 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _2339 = ((isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2312 + ((isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))) * _476))) + (((((_1528 * (_1576.x / _1582)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _1318) * _1597)) + _2318) * cbPerFrame._m0[3u].x);
    float _2340 = ((isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2314 + ((isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))) * _476))) + (((((_1528 * (_1576.y / _1582)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _1318) * _1597)) + _2320) * cbPerFrame._m0[3u].x);
    float _2341 = ((isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2316 + ((isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))) * _476))) + (((((_1528 * (_1576.z / _1582)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _1318) * _1597)) + _2322) * cbPerFrame._m0[3u].x);
    uint _2342 = _449 + 6u;
    float _2350 = _409 / cbSceneParam._m0[86u].x;
    float _2351 = _410 / cbSceneParam._m0[86u].y;
    vec4 _2365 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2350, _2351, (log2((isnan(cbSceneParam._m0[77u].w) ? _329 : (isnan(_329) ? cbSceneParam._m0[77u].w : min(_329, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2367 = _2365.x;
    float _2368 = _2365.y;
    float _2369 = _2365.z;
    float _2370 = _2365.w;
    float _2463;
    float _2465;
    float _2467;
    float _2469;
    if (_329 > cbSceneParam._m0[78u].w)
    {
        float _2425 = isnan(_329) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _329 : min(cbSceneParam._m0[80u].w, _329));
        float _2426 = _2425 / _329;
        float _2437 = _2426 * _381;
        float _2438 = _382 * _2426;
        float _2439 = (-0.0) - _2438;
        float _2441 = _2426 * _383;
        float _2443 = (cbSceneParam._m0[77u].w * _2439) / _2425;
        float _2444 = _2443 + cbSceneParam._m0[79u].w;
        float _2445 = cbSceneParam._m0[79u].w - _2438;
        float _2451 = sqrt(((_2437 * _2437) + (_2438 * _2438)) + (_2441 * _2441));
        float _2454 = (1.0 - (cbSceneParam._m0[77u].w / _2425)) * _2451;
        float _2459 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2461 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2637;
        if (abs((_2439 - _2443) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2637 = ((((_2444 > 0.0) ? exp2(_2459 * _2444) : (2.0 - exp2(_2461 * _2444))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2454;
        }
        else
        {
            float _2581 = 1.0 / cbSceneParam._m0[80u].x;
            float _2582 = isnan(_2445) ? _2444 : (isnan(_2444) ? _2445 : max(_2444, _2445));
            float _2583 = isnan(_2445) ? _2444 : (isnan(_2444) ? _2445 : min(_2444, _2445));
            float _2592 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : min(_2582, 0.0));
            float _2593 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : min(_2583, 0.0));
            _2637 = ((abs(_2451 / _2439) * cbSceneParam._m0[80u].y) * ((((_2592 - _2593) * 2.0) - ((exp2(_2459 * (isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0)))) - exp2(_2459 * (isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0))))) * _2581)) - ((exp2(_2461 * _2592) - exp2(_2461 * _2593)) * _2581))) + (_2454 * cbSceneParam._m0[80u].z);
        }
        vec4 _2639 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2350, _2351, 1.0), 0.0);
        float _2648 = exp2((_2637 * (-1.44269502162933349609375)) * (1.0 - _2639.w));
        float _2649 = log2(_2648);
        float _2665 = log2(_2370);
        _2463 = (exp2(_2665 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2649 * cbSceneParam._m0[78u].x)) * _2639.x) / cbSceneParam._m0[78u].x)) + _2367;
        _2465 = (exp2(_2665 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2649 * cbSceneParam._m0[78u].y)) * _2639.y) / cbSceneParam._m0[78u].y)) + _2368;
        _2467 = (exp2(_2665 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2649 * cbSceneParam._m0[78u].z)) * _2639.z) / cbSceneParam._m0[78u].z)) + _2369;
        _2469 = _2648 * _2370;
    }
    else
    {
        _2463 = _2367;
        _2465 = _2368;
        _2467 = _2369;
        _2469 = _2370;
    }
    bool _2675;
    vec4 _2478;
    vec4 _2500;
    float _2502;
    float _2506;
    float _2507;
    float _2508;
    float _2509;
    bool _2519;
    for (;;)
    {
        _2478 = cbMatDynParam._m0[0u];
        float _2480 = roundEven(_2478.y);
        bool _2481 = _2480 == 3.0;
        float _2482 = log2(_2469);
        float _2489 = exp2(_2482 * cbSceneParam._m0[78u].x) * _2339;
        float _2490 = exp2(_2482 * cbSceneParam._m0[78u].y) * _2340;
        float _2491 = exp2(_2482 * cbSceneParam._m0[78u].z) * _2341;
        float _2498 = _397 + (-0.5);
        _2500 = cbMtdParam._m0[1u];
        _2502 = _2500.y * _2498;
        float _2505 = (_2480 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2506 = _2505 * (_2481 ? _2489 : (_2489 + (cbSceneParam._m0[72u].w * _2463)));
        _2507 = _2505 * (_2481 ? _2490 : (_2490 + (cbSceneParam._m0[72u].w * _2465)));
        _2508 = _2505 * (_2481 ? _2491 : (_2491 + (cbSceneParam._m0[72u].w * _2467)));
        _2509 = _2498 * 0.999000012874603271484375;
        _2519 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2519)
        {
            if ((cbInstanceData._m0[_449 + 7u].x + _2509) < 0.5)
            {
                _2675 = true;
                break;
            }
        }
        uint _2616 = _451 + uint(_2478.w);
        if ((cbInstanceData._m0[_2616].w < 1.0) && ((cbInstanceData._m0[_2616].w + _2509) < 0.5))
        {
            _2675 = true;
            break;
        }
        if ((_2502 + _239) < _2500.x)
        {
            _2675 = true;
            break;
        }
        _2675 = false;
        break;
    }
    float _2880;
    if (_2675)
    {
        discard_state = true;
        _2880 = 0.0;
    }
    else
    {
        _2880 = cbInstanceData._m0[_2342].w;
    }
    SV_Target.x = _2506;
    SV_Target.y = _2507;
    SV_Target.z = _2508;
    SV_Target.w = _2880;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2342].w;
    discard_exit();
}


