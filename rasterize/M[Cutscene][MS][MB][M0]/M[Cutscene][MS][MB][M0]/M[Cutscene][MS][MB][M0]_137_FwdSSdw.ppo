#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[33];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _834;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _229 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _235 = _229.x * cbMtdParam._m0[9u].x;
    float _236 = _229.y * cbMtdParam._m0[9u].y;
    float _237 = _229.z * cbMtdParam._m0[9u].z;
    vec4 _250 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _259 = cbMtdParam._m0[25u].z * _250.z;
    float _3232 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _261 = isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0));
    float _265 = (_250.x * 2.0) + (-1.0);
    float _267 = (_250.y * 2.0) + (-1.0);
    float _268 = dot(vec2(_265, _267), vec2(_265, _267));
    float _3243 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _273 = sqrt(1.0 - (isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0))));
    float _279 = (cbMtdParam._m0[26u].y * (1.0 - _261)) + _261;
    float _3254 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _280 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
    float _285 = cbMtdParam._m0[22u].x + _250.w;
    float _290 = fma(_273, _199 * NORMAL.x, fma(_267, _206 * TANGENT.x, (_192 * _184) * _265));
    float _293 = fma(_273, _199 * NORMAL.y, fma(_267, _206 * TANGENT.y, (_192 * _185) * _265));
    float _296 = fma(_273, _199 * NORMAL.z, fma(_267, _206 * TANGENT.z, (_192 * _186) * _265));
    float _300 = inversesqrt(dot(vec3(_290, _293, _296), vec3(_290, _293, _296)));
    float _301 = _300 * _290;
    float _302 = _300 * _293;
    float _303 = _300 * _296;
    float _3265 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _304 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
    float _3276 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _3287 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3298 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3309 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _324 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _366 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _376 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _366);
    float _377 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _366);
    float _378 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _366);
    float _382 = inversesqrt(dot(vec3(_376, _377, _378), vec3(_376, _377, _378)));
    float _383 = _376 * _382;
    float _384 = _377 * _382;
    float _385 = _378 * _382;
    float _391 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _392 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _413 = fma(_303, cbSceneParam._m0[5u].z, fma(_302, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _301));
    float _416 = fma(_303, cbSceneParam._m0[6u].z, fma(_302, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _301));
    float _419 = fma(_303, cbSceneParam._m0[7u].z, fma(_302, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _301));
    uint _432 = uint(roundEven(NORMAL.w)) * 13u;
    uint _435 = (_432 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _441 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0)))) * cbInstanceData._m0[_435].x;
    float _442 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0)))) * cbInstanceData._m0[_435].y;
    float _443 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0)))) * cbInstanceData._m0[_435].z;
    float _3320 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
    float _3331 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _3342 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    vec4 _455 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _391, cbSceneParam._m0[86u].y * _392));
    float _459 = ((isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0))) * TEXCOORD_5.w) * _455.x;
    float _460 = dot(vec3(_301, _302, _303), vec3(_383, _384, _385));
    float _463 = _460 * 2.0;
    float _467 = (_463 * _301) - _383;
    float _468 = (_463 * _302) - _384;
    float _469 = (_463 * _303) - _385;
    float _476 = abs(dot(vec3(_383, _384, _385), vec3(_301, _302, _303)));
    float _3353 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _478 = sqrt(_304);
    float _491 = exp2((_478 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_478 * 3.0));
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _531 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _833;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _558 = fma(_531, cbModelParam._m0[26u].z, fma(_527, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _523));
        float _562 = fma(_531, cbModelParam._m0[27u].z, fma(_527, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _523));
        float _566 = fma(_531, cbModelParam._m0[28u].z, fma(_527, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _523));
        float _591 = _523 + _301;
        float _592 = _527 + _302;
        float _593 = _531 + _303;
        float _603 = fma(_593, cbModelParam._m0[26u].z, fma(_592, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _591)) - _558;
        float _604 = fma(_593, cbModelParam._m0[27u].z, fma(_592, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _591)) - _562;
        float _605 = fma(_593, cbModelParam._m0[28u].z, fma(_592, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _591)) - _566;
        float _609 = inversesqrt(dot(vec3(_603, _604, _605), vec3(_603, _604, _605)));
        float _622 = ((_609 * _603) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_558 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _623 = ((_609 * _604) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_562 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _624 = ((_609 * _605) / cbModelParam._m0[34u].z) + ((((((_566 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _627 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        vec4 _634 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        vec4 _641 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_622, _623, _624), 0.0);
        float _661 = exp2((_627.w + (-0.5)) * 20.0) * 2.0;
        float _662 = _661 * (_627.x + (-0.5));
        float _663 = _661 * (_627.y + (-0.5));
        float _664 = _661 * (_627.z + (-0.5));
        float _671 = exp2((_634.w + (-0.5)) * 20.0) * 2.0;
        float _672 = _671 * (_634.x + (-0.5));
        float _673 = _671 * (_634.y + (-0.5));
        float _674 = _671 * (_634.z + (-0.5));
        float _681 = exp2((_641.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_641.x + (-0.5));
        float _683 = _681 * (_641.y + (-0.5));
        float _684 = _681 * (_641.z + (-0.5));
        float _691 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_648.x + (-0.5));
        float _693 = _691 * (_648.y + (-0.5));
        float _694 = _691 * (_648.z + (-0.5));
        float _695 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _696 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _697 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _698 = _662 * 0.5;
        float _699 = _672 * 0.5;
        float _700 = _682 * 0.5;
        float _701 = dot(vec3(_698, _699, _700), vec3(_698, _699, _700));
        float _706 = (_701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_701);
        float _715 = (dot(vec3(_301, _302, _303), vec3(_706 * _698, _706 * _699, _706 * _700)) + 1.0) * 0.5;
        float _3379 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _725 = sqrt(((_699 * _699) + (_698 * _698)) + (_700 * _700)) / (_695 + 9.9999997473787516355514526367188e-06);
        float _3390 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _726 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _727 = _726 * 2.0;
        float _731 = (1.0 - _726) / (_726 + 1.0);
        float _3401 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _732 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _741 = ((((1.0 - _732) * (_727 + 2.0)) * exp2(log2(isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))) * (_727 + 1.0))) + _732) * _695;
        float _742 = _663 * 0.5;
        float _743 = _673 * 0.5;
        float _744 = _683 * 0.5;
        float _745 = dot(vec3(_742, _743, _744), vec3(_742, _743, _744));
        float _750 = (_745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_745);
        float _758 = (dot(vec3(_301, _302, _303), vec3(_750 * _742, _750 * _743, _750 * _744)) + 1.0) * 0.5;
        float _3412 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _767 = sqrt(((_743 * _743) + (_742 * _742)) + (_744 * _744)) / (_696 + 9.9999997473787516355514526367188e-06);
        float _3423 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _768 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _769 = _768 * 2.0;
        float _773 = (1.0 - _768) / (_768 + 1.0);
        float _3434 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _783 = ((((1.0 - _774) * (_769 + 2.0)) * exp2(log2(isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))) * (_769 + 1.0))) + _774) * _696;
        float _784 = _664 * 0.5;
        float _785 = _674 * 0.5;
        float _786 = _684 * 0.5;
        float _787 = dot(vec3(_784, _785, _786), vec3(_784, _785, _786));
        float _792 = (_787 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_787);
        float _800 = (dot(vec3(_301, _302, _303), vec3(_792 * _784, _792 * _785, _792 * _786)) + 1.0) * 0.5;
        float _3445 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _809 = sqrt(((_785 * _785) + (_784 * _784)) + (_786 * _786)) / (_697 + 9.9999997473787516355514526367188e-06);
        float _3456 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _811 = _810 * 2.0;
        float _815 = (1.0 - _810) / (_810 + 1.0);
        float _3467 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _825 = ((((1.0 - _816) * (_811 + 2.0)) * exp2(log2(isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) * (_811 + 1.0))) + _816) * _697;
        _833 = _664;
        _835 = _663;
        _836 = _662;
        _837 = _674;
        _838 = _673;
        _839 = _672;
        _840 = _684;
        _841 = _683;
        _842 = _682;
        _843 = _697;
        _844 = _696;
        _845 = _695;
        _846 = cbModelParam._m0[36u].z * (isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0)));
        _847 = cbModelParam._m0[36u].z * (isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0)));
        _848 = cbModelParam._m0[36u].z * (isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0)));
    }
    else
    {
        _833 = _834;
        _835 = _834;
        _836 = _834;
        _837 = _834;
        _838 = _834;
        _839 = _834;
        _840 = _834;
        _841 = _834;
        _842 = _834;
        _843 = _834;
        _844 = _834;
        _845 = _834;
        _846 = 0.0;
        _847 = 0.0;
        _848 = 0.0;
    }
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _874 = fma(_531, cbModelParam._m0[30u].z, fma(_527, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _523));
        float _878 = fma(_531, cbModelParam._m0[31u].z, fma(_527, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _523));
        float _882 = fma(_531, cbModelParam._m0[32u].z, fma(_527, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _523));
        float _905 = _523 + _301;
        float _906 = _527 + _302;
        float _907 = _531 + _303;
        float _917 = fma(_907, cbModelParam._m0[30u].z, fma(_906, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _905)) - _874;
        float _918 = fma(_907, cbModelParam._m0[31u].z, fma(_906, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _905)) - _878;
        float _919 = fma(_907, cbModelParam._m0[32u].z, fma(_906, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _905)) - _882;
        float _923 = inversesqrt(dot(vec3(_917, _918, _919), vec3(_917, _918, _919)));
        float _936 = ((_923 * _917) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_874 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _937 = ((_923 * _918) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_878 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _938 = ((_923 * _919) / cbModelParam._m0[35u].z) + ((((((_882 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_936, _937, _938), 0.0);
        float _973 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_940.x + (-0.5));
        float _975 = _973 * (_940.y + (-0.5));
        float _976 = _973 * (_940.z + (-0.5));
        float _983 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_947.x + (-0.5));
        float _985 = _983 * (_947.y + (-0.5));
        float _986 = _983 * (_947.z + (-0.5));
        float _993 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_954.x + (-0.5));
        float _995 = _993 * (_954.y + (-0.5));
        float _996 = _993 * (_954.z + (-0.5));
        float _1003 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_961.x + (-0.5));
        float _1005 = _1003 * (_961.y + (-0.5));
        float _1006 = _1003 * (_961.z + (-0.5));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = _974 * 0.5;
        float _1011 = _984 * 0.5;
        float _1012 = _994 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_301, _302, _303), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3530 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_1037 + 1.0))) + _1042) * _1007;
        float _1052 = _975 * 0.5;
        float _1053 = _985 * 0.5;
        float _1054 = _995 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_301, _302, _303), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3541 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _3552 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3563 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * (_1079 + 1.0))) + _1084) * _1008;
        float _1094 = _976 * 0.5;
        float _1095 = _986 * 0.5;
        float _1096 = _996 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1110 = (dot(vec3(_301, _302, _303), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3574 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1119 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3585 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3596 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (_1121 + 1.0))) + _1126) * _1009;
        _1143 = _976;
        _1144 = _975;
        _1145 = _974;
        _1146 = _986;
        _1147 = _985;
        _1148 = _984;
        _1149 = _996;
        _1150 = _995;
        _1151 = _994;
        _1152 = _1009;
        _1153 = _1008;
        _1154 = _1007;
        _1155 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1156 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
        _1157 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
    }
    else
    {
        _1143 = _834;
        _1144 = _834;
        _1145 = _834;
        _1146 = _834;
        _1147 = _834;
        _1148 = _834;
        _1149 = _834;
        _1150 = _834;
        _1151 = _834;
        _1152 = _834;
        _1153 = _834;
        _1154 = _834;
        _1155 = 0.0;
        _1156 = 0.0;
        _1157 = 0.0;
    }
    float _1167 = (cbModelParam._m0[1u].x * (_1155 - _846)) + _846;
    float _1168 = (cbModelParam._m0[1u].x * (_1156 - _847)) + _847;
    float _1169 = (cbModelParam._m0[1u].x * (_1157 - _848)) + _848;
    float _1190 = fma(_1169, cbSceneParam._m0[89u].z, fma(_1168, cbSceneParam._m0[89u].y, _1167 * cbSceneParam._m0[89u].x));
    float _1193 = fma(_1169, cbSceneParam._m0[90u].z, fma(_1168, cbSceneParam._m0[90u].y, _1167 * cbSceneParam._m0[90u].x));
    float _1196 = fma(_1169, cbSceneParam._m0[91u].z, fma(_1168, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1167));
    float _1211 = _467 * 0.5;
    float _1212 = _468 * 0.5;
    float _1213 = _469 * 0.5;
    float _1214 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_1145, _1148, _1151, _1154));
    float _1217 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_1144, _1147, _1150, _1153));
    float _1220 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_1143, _1146, _1149, _1152));
    float _1254;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1227 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_833, _837, _840, _843));
        float _1231 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_835, _838, _841, _844));
        float _1235 = dot(vec4(_1211, _1212, _1213, 1.0), vec4(_836, _839, _842, _845));
        float _1242 = dot(vec4(cbModelParam._m0[39u]), vec4(_1211, _1212, _1213, 1.0));
        _1254 = dot(vec3(isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1242) ? 0.0 : (isnan(0.0) ? _1242 : max(0.0, _1242))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1254 = 1.0;
    }
    float _1265;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1256 = dot(vec4(cbModelParam._m0[40u]), vec4(_1211, _1212, _1213, 1.0));
        _1265 = dot(vec3(isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)), isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)), isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1256) ? 0.0 : (isnan(0.0) ? _1256 : max(0.0, _1256))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1265 = 1.0;
    }
    float _1269 = (_1265 * cbModelParam._m0[1u].x) + (_1254 * (1.0 - cbModelParam._m0[1u].x));
    float _1279 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _304);
    float _1280 = isnan(_1279) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1279 : min(cbModelParam._m0[25u].z, _1279));
    float _1362;
    float _1364;
    float _1366;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1329 = fma(_531, cbModelParam._m0[13u].z, fma(_527, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _523)) + cbModelParam._m0[13u].w;
        float _1333 = fma(_531, cbModelParam._m0[14u].z, fma(_527, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _523)) + cbModelParam._m0[14u].w;
        float _1337 = fma(_531, cbModelParam._m0[15u].z, fma(_527, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _523)) + cbModelParam._m0[15u].w;
        float _1340 = fma(_469, cbModelParam._m0[13u].z, fma(_468, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _467));
        float _1343 = fma(_469, cbModelParam._m0[14u].z, fma(_468, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _467));
        float _1346 = fma(_469, cbModelParam._m0[15u].z, fma(_468, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _467));
        float _1374;
        if (_1340 > 0.0)
        {
            _1374 = abs((1.0 - _1329) / _1340);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1340 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1329 + 1.0) / _1340);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1374 = frontier_phi_14_12_ladder;
        }
        float _1660;
        if (_1343 > 0.0)
        {
            _1660 = abs((1.0 - _1333) / _1343);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1343 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1333 + 1.0) / _1343);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1660 = frontier_phi_23_19_ladder;
        }
        float _1906;
        if (_1346 > 0.0)
        {
            _1906 = abs((1.0 - _1337) / _1346);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1346 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1337 + 1.0) / _1346);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1906 = frontier_phi_35_30_ladder;
        }
        float _1908 = isnan(_1660) ? _1374 : (isnan(_1374) ? _1660 : min(_1374, _1660));
        float _1909 = isnan(_1906) ? _1908 : (isnan(_1908) ? _1906 : min(_1908, _1906));
        float _1913 = (_1909 * _1340) + _1329;
        float _1914 = (_1909 * _1343) + _1333;
        float _1915 = (_1909 * _1346) + _1337;
        float _1916 = _1909 * 9.9999997473787516355514526367188e-05;
        float _1918 = (-1.0) - _1916;
        float _1920 = _1916 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1915 > _1920) || ((_1915 < _1918) || ((_1914 > _1920) || ((_1914 < _1918) || ((_1913 < _1918) || (_1913 > _1920))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2039 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1915, cbModelParam._m0[9u].z, fma(_1914, cbModelParam._m0[9u].y, _1913 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1915, cbModelParam._m0[10u].z, fma(_1914, cbModelParam._m0[10u].y, _1913 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1915, cbModelParam._m0[11u].z, fma(_1914, cbModelParam._m0[11u].y, _1913 * cbModelParam._m0[11u].x))), _1280);
            frontier_phi_13_35_ladder = _2039.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2039.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2039.x * cbModelParam._m0[1u].y;
        }
        _1362 = frontier_phi_13_35_ladder_2;
        _1364 = frontier_phi_13_35_ladder_1;
        _1366 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1350 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_467, _468, _469), _1280);
        _1362 = _1350.x * cbModelParam._m0[1u].y;
        _1364 = _1350.y * cbModelParam._m0[1u].y;
        _1366 = _1350.z * cbModelParam._m0[1u].y;
    }
    float _1370 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _304);
    float _1371 = isnan(_1370) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1370 : min(cbModelParam._m0[25u].w, _1370));
    float _1463;
    float _1465;
    float _1467;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1427 = fma(_531, cbModelParam._m0[21u].z, fma(_527, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _523)) + cbModelParam._m0[21u].w;
        float _1431 = fma(_531, cbModelParam._m0[22u].z, fma(_527, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _523)) + cbModelParam._m0[22u].w;
        float _1435 = fma(_531, cbModelParam._m0[23u].z, fma(_527, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _523)) + cbModelParam._m0[23u].w;
        float _1438 = fma(_469, cbModelParam._m0[21u].z, fma(_468, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _467));
        float _1441 = fma(_469, cbModelParam._m0[22u].z, fma(_468, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _467));
        float _1444 = fma(_469, cbModelParam._m0[23u].z, fma(_468, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _467));
        float _1665;
        if (_1438 > 0.0)
        {
            _1665 = abs((1.0 - _1427) / _1438);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1427 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1665 = frontier_phi_25_21_ladder;
        }
        float _1933;
        if (_1441 > 0.0)
        {
            _1933 = abs((1.0 - _1431) / _1441);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1431 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1933 = frontier_phi_37_32_ladder;
        }
        float _2138;
        if (_1444 > 0.0)
        {
            _2138 = abs((1.0 - _1435) / _1444);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1435 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2138 = frontier_phi_46_43_ladder;
        }
        float _2140 = isnan(_1933) ? _1665 : (isnan(_1665) ? _1933 : min(_1665, _1933));
        float _2141 = isnan(_2138) ? _2140 : (isnan(_2140) ? _2138 : min(_2140, _2138));
        float _2145 = (_2141 * _1438) + _1427;
        float _2146 = (_2141 * _1441) + _1431;
        float _2147 = (_2141 * _1444) + _1435;
        float _2148 = _2141 * 9.9999997473787516355514526367188e-05;
        float _2149 = (-1.0) - _2148;
        float _2151 = _2148 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2147 > _2151) || ((_2147 < _2149) || ((_2146 > _2151) || ((_2146 < _2149) || ((_2145 < _2149) || (_2145 > _2151))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2346 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2147, cbModelParam._m0[17u].z, fma(_2146, cbModelParam._m0[17u].y, _2145 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2147, cbModelParam._m0[18u].z, fma(_2146, cbModelParam._m0[18u].y, _2145 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2147, cbModelParam._m0[19u].z, fma(_2146, cbModelParam._m0[19u].y, _2145 * cbModelParam._m0[19u].x))), _1371);
            frontier_phi_22_46_ladder = _2346.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2346.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2346.x * cbModelParam._m0[1u].z;
        }
        _1463 = frontier_phi_22_46_ladder_2;
        _1465 = frontier_phi_22_46_ladder_1;
        _1467 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1447 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_467, _468, _469), _1371);
        _1463 = _1447.x * cbModelParam._m0[1u].z;
        _1465 = _1447.y * cbModelParam._m0[1u].z;
        _1467 = _1447.z * cbModelParam._m0[1u].z;
    }
    float _1479 = ((((1.0 - _491) * ((_478 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_491 * _478)) * _459;
    float _1480 = _1479 * ((cbModelParam._m0[1u].w * (_1463 - _1362)) + _1362);
    float _1481 = _1479 * ((cbModelParam._m0[1u].w * (_1465 - _1364)) + _1364);
    float _1482 = _1479 * ((cbModelParam._m0[1u].w * (_1467 - _1366)) + _1366);
    float _1485 = fma(_1482, cbSceneParam._m0[89u].z, fma(_1481, cbSceneParam._m0[89u].y, _1480 * cbSceneParam._m0[89u].x));
    float _1488 = fma(_1482, cbSceneParam._m0[90u].z, fma(_1481, cbSceneParam._m0[90u].y, _1480 * cbSceneParam._m0[90u].x));
    float _1491 = fma(_1482, cbSceneParam._m0[91u].z, fma(_1481, cbSceneParam._m0[91u].y, _1480 * cbSceneParam._m0[91u].x));
    float _1502 = _391 / cbSceneParam._m0[86u].x;
    float _1510 = (cbSceneParam._m0[88u].y * (1.0 - cbMtdParam._m0[25u].y)) + cbSceneParam._m0[88u].z;
    float _3722 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
    float _1512 = (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * 5.0;
    float _1517 = ((10.0 / (_324 + 10.0)) * cbMtdParam._m0[25u].x) * dot(vec3(_301, _302, _303), vec3(1.0, 0.0, 0.0));
    vec4 _1527 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1517 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1517 + _1502) * cbSceneParam._m0[86u].x, _392), _1512).w) + _1502) * cbSceneParam._m0[86u].x, _392), _1512);
    float _1533 = isnan(0.5) ? _1527.w : (isnan(_1527.w) ? 0.5 : max(_1527.w, 0.5));
    float _1548 = 1.0 - (_1527.w / _1533);
    vec4 _1556 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_391, _392));
    float _1558 = _1556.w;
    float _1570 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1558);
    float _1571 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1558);
    float _1572 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1558);
    float _3738 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
    float _1573 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _3749 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
    float _1574 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _3760 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
    float _1575 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    uvec4 _1579 = floatBitsToUint(cbInstanceData._m0[_432 + 5u]);
    uint _1581 = _1579.x * 14u;
    uint _1582 = _1581 + 13u;
    float _1589 = _459 + (-1.0);
    float _1594 = (cbLight._m0[_1582].x * _1589) + 1.0;
    float _1595 = (cbLight._m0[_1582].y * _1589) + 1.0;
    float _1596 = (cbLight._m0[_1582].z * _1589) + 1.0;
    float _1597 = (cbLight._m0[_1582].w * _1589) + 1.0;
    uint _1598 = _1581 + 5u;
    float _1604 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
    uint _1608 = _1581 + 4u;
    float _1618 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
    uint _1622 = _1581 | 1u;
    float _1633 = dot(vec3(cbLight._m0[_1581].xyz), vec3(_301, _302, _303));
    float _1636 = dot(vec3(cbLight._m0[_1622].xyz), vec3(_301, _302, _303));
    float _3781 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
    float _3792 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
    float _1641 = (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * 0.3183098733425140380859375;
    float _1643 = (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * 0.3183098733425140380859375;
    float _1650 = ((cbLight._m0[_1598].x * _1604) * _1643) + (((cbLight._m0[_1608].x * _1573) * _1618) * _1641);
    float _1651 = ((_1604 * cbLight._m0[_1598].y) * _1643) + (((cbLight._m0[_1608].y * _1574) * _1618) * _1641);
    float _1652 = ((_1604 * cbLight._m0[_1598].z) * _1643) + (((cbLight._m0[_1608].z * _1575) * _1618) * _1641);
    uvec4 _1657 = floatBitsToUint(cbLight._m0[_1581 + 12u]);
    bool _1659 = _1657.x == 0u;
    float _1670;
    float _1672;
    float _1674;
    if (_1659)
    {
        _1670 = _1650;
        _1672 = _1651;
        _1674 = _1652;
    }
    else
    {
        uint _1678 = _1581 + 6u;
        float _1694 = (dot(vec3(cbLight._m0[_1581 + 2u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _1695 = _1694 * _1694;
        float _3803 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1697 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
        _1670 = (((cbLight._m0[_1678].x * 0.3183098733425140380859375) * _1696) * _1697) + _1650;
        _1672 = (((cbLight._m0[_1678].y * 0.3183098733425140380859375) * _1696) * _1697) + _1651;
        _1674 = (((cbLight._m0[_1678].z * 0.3183098733425140380859375) * _1696) * _1697) + _1652;
    }
    bool _1677 = _1657.y == 0u;
    float _1715;
    float _1717;
    float _1719;
    if (_1677)
    {
        _1715 = _1670;
        _1717 = _1672;
        _1719 = _1674;
    }
    else
    {
        uint _1877 = _1581 + 7u;
        float _1893 = (dot(vec3(cbLight._m0[_1581 + 3u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _1894 = _1893 * _1893;
        float _3819 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1895 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1896 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
        _1715 = (((cbLight._m0[_1877].x * 0.3183098733425140380859375) * _1895) * _1896) + _1670;
        _1717 = (((cbLight._m0[_1877].y * 0.3183098733425140380859375) * _1895) * _1896) + _1672;
        _1719 = (((cbLight._m0[_1877].z * 0.3183098733425140380859375) * _1895) * _1896) + _1674;
    }
    uint _1722 = _1581 + 8u;
    float _1735 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1581].w)) * _304) * 0.949999988079071044921875);
    float _1736 = _1735 * _1735;
    float _1737 = cbLight._m0[_1581].x + _383;
    float _1738 = cbLight._m0[_1581].y + _384;
    float _1739 = cbLight._m0[_1581].z + _385;
    float _1743 = inversesqrt(dot(vec3(_1737, _1738, _1739), vec3(_1737, _1738, _1739)));
    float _1744 = _1743 * _1737;
    float _1745 = _1743 * _1738;
    float _1746 = _1743 * _1739;
    float _1747 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1581].xyz));
    float _3835 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1750 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _1751 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _1752 = dot(vec3(_301, _302, _303), vec3(_1744, _1745, _1746));
    float _3857 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1755 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _1756 = dot(vec3(cbLight._m0[_1581].xyz), vec3(_1744, _1745, _1746));
    float _3868 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1760 = _1736 * _1736;
    float _1764 = ((_1755 * _1755) * (_1760 + (-1.0))) + 1.0;
    float _1775 = (exp2(log2(1.0 - (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1776 = 1.0 - _1736;
    float _1787 = (0.5 / (((_1751 * ((_1750 * _1776) + _1736)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _1776) + _1736) * _1750))) * _1750;
    float _3879 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1789 = (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1760 / ((_1764 * _1764) * 3.141590118408203125));
    uint _1803 = _1581 + 9u;
    float _1814 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1622].w)) * _304) * 0.949999988079071044921875);
    float _1815 = _1814 * _1814;
    float _1816 = cbLight._m0[_1622].x + _383;
    float _1817 = cbLight._m0[_1622].y + _384;
    float _1818 = cbLight._m0[_1622].z + _385;
    float _1822 = inversesqrt(dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818)));
    float _1823 = _1822 * _1816;
    float _1824 = _1822 * _1817;
    float _1825 = _1822 * _1818;
    float _1826 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1622].xyz));
    float _3890 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1829 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _1830 = dot(vec3(_301, _302, _303), vec3(_1823, _1824, _1825));
    float _3901 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1833 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _1834 = dot(vec3(cbLight._m0[_1622].xyz), vec3(_1823, _1824, _1825));
    float _3912 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1838 = _1815 * _1815;
    float _1842 = ((_1833 * _1833) * (_1838 + (-1.0))) + 1.0;
    float _1851 = (exp2(log2(1.0 - (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1852 = 1.0 - _1815;
    float _1862 = (0.5 / (((_1751 * ((_1829 * _1852) + _1815)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _1852) + _1815) * _1829))) * _1829;
    float _3923 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1864 = (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1838 / ((_1842 * _1842) * 3.141590118408203125));
    float _1874 = (((_1851 * cbLight._m0[_1803].x) * _1864) * _1604) + ((((cbLight._m0[_1722].x * _1573) * _1775) * _1789) * _1618);
    float _1875 = (((_1851 * cbLight._m0[_1803].y) * _1864) * _1604) + ((((cbLight._m0[_1722].y * _1574) * _1775) * _1789) * _1618);
    float _1876 = (((_1851 * cbLight._m0[_1803].z) * _1864) * _1604) + ((((cbLight._m0[_1722].z * _1575) * _1775) * _1789) * _1618);
    float _1938;
    float _1940;
    float _1942;
    if (_1659)
    {
        _1938 = _1874;
        _1940 = _1875;
        _1942 = _1876;
    }
    else
    {
        uint _1944 = _1581 + 2u;
        uint _1948 = _1581 + 10u;
        float _1962 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1944].w)) * _304) * 0.949999988079071044921875);
        float _1963 = _1962 * _1962;
        float _1964 = cbLight._m0[_1944].x + _383;
        float _1965 = cbLight._m0[_1944].y + _384;
        float _1966 = cbLight._m0[_1944].z + _385;
        float _1970 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
        float _1971 = _1970 * _1964;
        float _1972 = _1970 * _1965;
        float _1973 = _1970 * _1966;
        float _1974 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1944].xyz));
        float _3934 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1977 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1978 = dot(vec3(_301, _302, _303), vec3(_1971, _1972, _1973));
        float _3945 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1981 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1982 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_1971, _1972, _1973));
        float _3956 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1986 = _1963 * _1963;
        float _1990 = ((_1981 * _1981) * (_1986 + (-1.0))) + 1.0;
        float _1999 = (exp2(log2(1.0 - (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2000 = 1.0 - _1963;
        float _2010 = (0.5 / (((_1751 * ((_1977 * _2000) + _1963)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _2000) + _1963) * _1977))) * _1977;
        float _3967 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2012 = (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1986 / ((_1990 * _1990) * 3.141590118408203125));
        float _2013 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
        _1938 = (((_1999 * cbLight._m0[_1948].x) * _2012) * _2013) + _1874;
        _1940 = (((_1999 * cbLight._m0[_1948].y) * _2012) * _2013) + _1875;
        _1942 = (((_1999 * cbLight._m0[_1948].z) * _2012) * _2013) + _1876;
    }
    float _2048;
    float _2050;
    float _2052;
    if (_1677)
    {
        _2048 = _1938;
        _2050 = _1940;
        _2052 = _1942;
    }
    else
    {
        uint _2059 = _1581 + 3u;
        uint _2063 = _1581 + 11u;
        float _2077 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2059].w)) * _304) * 0.949999988079071044921875);
        float _2078 = _2077 * _2077;
        float _2079 = cbLight._m0[_2059].x + _383;
        float _2080 = cbLight._m0[_2059].y + _384;
        float _2081 = cbLight._m0[_2059].z + _385;
        float _2085 = inversesqrt(dot(vec3(_2079, _2080, _2081), vec3(_2079, _2080, _2081)));
        float _2086 = _2085 * _2079;
        float _2087 = _2085 * _2080;
        float _2088 = _2085 * _2081;
        float _2089 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_2059].xyz));
        float _3983 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2092 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _2093 = dot(vec3(_301, _302, _303), vec3(_2086, _2087, _2088));
        float _3994 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2096 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _2097 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_2086, _2087, _2088));
        float _4005 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2101 = _2078 * _2078;
        float _2105 = ((_2096 * _2096) * (_2101 + (-1.0))) + 1.0;
        float _2114 = (exp2(log2(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2115 = 1.0 - _2078;
        float _2125 = (0.5 / (((_1751 * ((_2092 * _2115) + _2078)) + 9.9999999392252902907785028219223e-09) + (((_1751 * _2115) + _2078) * _2092))) * _2092;
        float _4016 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2127 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_2101 / ((_2105 * _2105) * 3.141590118408203125));
        float _2128 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
        _2048 = (((_2114 * cbLight._m0[_2063].x) * _2127) * _2128) + _1938;
        _2050 = (((_2114 * cbLight._m0[_2063].y) * _2127) * _2128) + _1940;
        _2052 = (((_2114 * cbLight._m0[_2063].z) * _2127) * _2128) + _1942;
    }
    float _2263;
    float _2265;
    float _2267;
    float _2269;
    float _2271;
    float _2273;
    if (_1579.y == 0u)
    {
        float _2203 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2204 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2203;
        float _2205 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2203;
        float _2206 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2203;
        uvec4 _2218 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2219 = _2218.x;
        uint _2230 = uint((float(_2218.y) * floor(float(uint(cbSceneParam._m0[85u].y * _392) / _2219))) + floor(float(uint(cbSceneParam._m0[85u].x * _391) / _2219)));
        float _2240 = (log2(_2206 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2241 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        uint _2244 = uint(isnan(14.0) ? _2241 : (isnan(_2241) ? 14.0 : min(_2241, 14.0)));
        uvec4 _2249 = texelFetch(g_lightClusterGridBuffer, int(((_2244 << 2u) + (_2230 << 6u)) >> 2u));
        uint _2250 = _2249.x;
        uint _2251 = _2218.z;
        float _2351;
        float _2353;
        float _2355;
        float _2357;
        float _2359;
        float _2361;
        if (((((1u << ((_2251 >> 4u) & 15u)) + 4294967295u) & _2250) == 0u) || ((_2251 & 240u) == 0u))
        {
            _2351 = 0.0;
            _2353 = 0.0;
            _2355 = 0.0;
            _2357 = 0.0;
            _2359 = 0.0;
            _2361 = 0.0;
        }
        else
        {
            float _2352;
            float _2354;
            float _2356;
            float _2358;
            float _2360;
            float _2362;
            float _2495 = 0.0;
            float _2496 = 0.0;
            float _2497 = 0.0;
            float _2498 = 0.0;
            float _2499 = 0.0;
            float _2500 = 0.0;
            uint _2501 = 0u;
            uint _2510;
            bool _2511;
            for (;;)
            {
                _2510 = texelFetch(g_lightClassification, int((((_2244 << 5u) + (_2230 << 9u)) + (_2501 << 2u)) >> 2u)).x;
                _2511 = _2510 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2511)
                {
                    frontier_phi_61_pred = _2495;
                    frontier_phi_61_pred_1 = _2500;
                    frontier_phi_61_pred_2 = _2499;
                    frontier_phi_61_pred_3 = _2498;
                    frontier_phi_61_pred_4 = _2497;
                    frontier_phi_61_pred_5 = _2496;
                }
                else
                {
                    float _2619;
                    float _2620;
                    float _2621;
                    float _2622;
                    float _2623;
                    float _2624;
                    uint _2625;
                    _2619 = _2495;
                    _2620 = _2496;
                    _2621 = _2497;
                    _2622 = _2498;
                    _2623 = _2499;
                    _2624 = _2500;
                    _2625 = _2510;
                    float _2551;
                    float _2552;
                    float _2553;
                    float _2554;
                    float _2555;
                    float _2556;
                    for (;;)
                    {
                        uint _2629 = uint(findLSB(_2625)) + (_2501 << 5u);
                        uint _2626 = (_2625 + 4294967295u) & _2625;
                        uint _2631 = _2629 * 48u;
                        vec4 _2645 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2631)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 3u)).x));
                        uint _2651 = (_2629 * 48u) + 4u;
                        vec4 _2664 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2651)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2651 + 3u)).x));
                        uint _2670 = (_2629 * 48u) + 8u;
                        vec3 _2681 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2670)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 2u)).x));
                        float _2685 = _2645.x - _2204;
                        float _2686 = _2645.y - _2205;
                        float _2687 = _2645.z - _2206;
                        float _2688 = dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687));
                        float _2691 = inversesqrt(_2688);
                        float _2692 = _2691 * _2685;
                        float _2693 = _2691 * _2686;
                        float _2694 = _2691 * _2687;
                        float _2695 = dot(vec3(_413, _416, _419), vec3(_2692, _2693, _2694));
                        float _2700 = 1.0 - (_2688 * _2645.w);
                        float _4042 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
                        float _2701 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                        float _2702 = sqrt(_2688) * _2664.w;
                        float _2705 = 1.39999997615814208984375 / (_2702 + 1.39999997615814208984375);
                        float _2706 = _2705 * _2705;
                        float _2709 = ((1.0 - _2706) * _2695) + _2706;
                        float _2712 = _2702 * _2702;
                        float _2716 = ((isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0))) * _2701) / ((_2712 * 0.699999988079071044921875) + 1.0);
                        float _2720 = (-0.0) - _2204;
                        float _2721 = (-0.0) - _2205;
                        float _2722 = (-0.0) - _2206;
                        float _2726 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
                        float _2727 = _2726 * _2720;
                        float _2728 = _2726 * _2721;
                        float _2729 = _2726 * _2722;
                        float _2737 = exp2(log2(1.0 / ((_2712 * 3.5) + 5.0)) * 0.25);
                        float _2738 = 1.0 - _478;
                        float _2745 = sqrt(1.0 - ((1.0 - (_2738 * _2738)) * (1.0 - (_2737 * _2737))));
                        float _2746 = _2745 * _2745;
                        float _2747 = _2746 * _2746;
                        float _2748 = _2727 + _2692;
                        float _2749 = _2728 + _2693;
                        float _2750 = _2729 + _2694;
                        float _2754 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
                        float _2758 = dot(vec3(_413, _416, _419), vec3(_2727, _2728, _2729));
                        float _4058 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                        float _2761 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                        float _2762 = dot(vec3(_413, _416, _419), vec3(_2754 * _2748, _2754 * _2749, _2754 * _2750));
                        float _4069 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                        float _2765 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                        float _2769 = ((_2765 * _2765) * (_2747 + (-1.0))) + 1.0;
                        float _2770 = _2705 * _2746;
                        float _2771 = _2770 * _2770;
                        float _2774 = ((1.0 - _2771) * _2695) + _2771;
                        float _4080 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
                        float _2775 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                        float _2776 = 1.0 - _2746;
                        float _2786 = (0.5 / (((_2775 * ((_2761 * _2776) + _2746)) + 9.9999999392252902907785028219223e-09) + (((_2775 * _2776) + _2746) * _2761))) * _2775;
                        float _4091 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                        float _2797 = (((_2747 * 3.1415927410125732421875) * (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) / ((_2769 * _2769) * ((_2712 * 2.1991131305694580078125) + 3.141590118408203125))) * _2701;
                        _2554 = (_2716 * _2664.x) + _2622;
                        _2555 = (_2716 * _2664.y) + _2623;
                        _2556 = (_2716 * _2664.z) + _2624;
                        _2551 = (_2797 * _2681.x) + _2619;
                        _2552 = (_2797 * _2681.y) + _2620;
                        _2553 = (_2797 * _2681.z) + _2621;
                        if (_2626 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2619 = _2551;
                            _2620 = _2552;
                            _2621 = _2553;
                            _2622 = _2554;
                            _2623 = _2555;
                            _2624 = _2556;
                            _2625 = _2626;
                        }
                    }
                    frontier_phi_61_pred = _2551;
                    frontier_phi_61_pred_1 = _2556;
                    frontier_phi_61_pred_2 = _2555;
                    frontier_phi_61_pred_3 = _2554;
                    frontier_phi_61_pred_4 = _2553;
                    frontier_phi_61_pred_5 = _2552;
                }
                _2352 = frontier_phi_61_pred;
                _2362 = frontier_phi_61_pred_1;
                _2360 = frontier_phi_61_pred_2;
                _2358 = frontier_phi_61_pred_3;
                _2356 = frontier_phi_61_pred_4;
                _2354 = frontier_phi_61_pred_5;
                uint _2502 = _2501 + 1u;
                if (_2502 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2495 = _2352;
                    _2496 = _2354;
                    _2497 = _2356;
                    _2498 = _2358;
                    _2499 = _2360;
                    _2500 = _2362;
                    _2501 = _2502;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2351 = _2352;
            _2353 = _2354;
            _2355 = _2356;
            _2357 = _2358;
            _2359 = _2360;
            _2361 = _2362;
        }
        uvec4 _2365 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2366 = _2365.z;
        uint _2368 = (_2366 >> 8u) & 15u;
        float _2463;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        float _2473;
        if (((4294967295u << _2368) & _2250) == 0u)
        {
            _2463 = _2351;
            _2465 = _2353;
            _2467 = _2355;
            _2469 = _2357;
            _2471 = _2359;
            _2473 = _2361;
        }
        else
        {
            float _2488 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
            float _2489 = _2488 * _2204;
            float _2490 = _2488 * _2205;
            float _2491 = _2488 * _2206;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2368 < ((_2366 >> 12u) & 15u))
            {
                float _2464;
                float _2466;
                float _2468;
                float _2470;
                float _2472;
                float _2474;
                float _2602 = _2351;
                float _2603 = _2353;
                float _2604 = _2355;
                float _2605 = _2357;
                float _2606 = _2359;
                float _2607 = _2361;
                uint _2608 = _2368;
                uint _2617;
                bool _2618;
                for (;;)
                {
                    _2617 = texelFetch(g_lightClassification, int((((_2244 << 5u) + (_2230 << 9u)) + (_2608 << 2u)) >> 2u)).x;
                    _2618 = _2617 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2618)
                    {
                        frontier_phi_67_pred = _2605;
                        frontier_phi_67_pred_1 = _2606;
                        frontier_phi_67_pred_2 = _2607;
                        frontier_phi_67_pred_3 = _2604;
                        frontier_phi_67_pred_4 = _2603;
                        frontier_phi_67_pred_5 = _2602;
                    }
                    else
                    {
                        float _2802;
                        float _2803;
                        float _2804;
                        float _2805;
                        float _2806;
                        float _2807;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _2815 = _2602;
                        float _2816 = _2603;
                        float _2817 = _2604;
                        float _2818 = _2605;
                        float _2819 = _2606;
                        float _2820 = _2607;
                        uint _2821 = _2617;
                        uint _2822;
                        vec4 _2847;
                        float _2848;
                        vec4 _2863;
                        vec3 _2875;
                        vec4 _2891;
                        vec4 _2907;
                        float _2954;
                        bool _2955;
                        for (;;)
                        {
                            uint _2832 = ((_2608 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2821));
                            _2822 = (_2821 + 4294967295u) & _2821;
                            uint _2834 = _2832 * 40u;
                            _2847 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 3u)).x));
                            _2848 = _2847.w;
                            uint _2850 = (_2832 * 40u) + 4u;
                            _2863 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 3u)).x));
                            uint _2865 = (_2832 * 40u) + 8u;
                            _2875 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x));
                            uint _2878 = (_2832 * 40u) + 16u;
                            _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            uint _2894 = (_2832 * 40u) + 20u;
                            _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            uint _2910 = (_2832 * 40u) + 24u;
                            vec4 _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            uint _2929 = (_2832 * 40u) + 28u;
                            vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            _2954 = fma(_2206, _2942.z, fma(_2205, _2942.y, _2942.x * _2204)) + _2942.w;
                            _2955 = !((fma(_2206, _2923.z, fma(_2205, _2923.y, _2923.x * _2204)) + _2923.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2955)
                            {
                                float _2982 = _2847.x - _2204;
                                float _2983 = _2847.y - _2205;
                                float _2984 = _2847.z - _2206;
                                float _2985 = dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984));
                                float _2988 = inversesqrt(_2985);
                                float _2989 = _2988 * _2982;
                                float _2990 = _2988 * _2983;
                                float _2991 = _2988 * _2984;
                                float _2995 = 1.0 - (_2985 / (_2848 * _2848));
                                float _4102 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2996 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                                float _3000 = sqrt(_2985) * _2863.w;
                                float _3002 = 1.39999997615814208984375 / (_3000 + 1.39999997615814208984375);
                                float _3003 = _3002 * _3002;
                                float _3006 = ((1.0 - _3003) * dot(vec3(_2989, _2990, _2991), vec3(_413, _416, _419))) + _3003;
                                float _3009 = _3000 * _3000;
                                float _3013 = (fma(_2206, _2891.z, fma(_2205, _2891.y, _2891.x * _2204)) + _2891.w) / _2954;
                                float _3014 = (fma(_2206, _2907.z, fma(_2205, _2907.y, _2907.x * _2204)) + _2907.w) / _2954;
                                float _3018 = 1.0 - dot(vec2(_3013, _3014), vec2(_3013, _3014));
                                float _4118 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3019 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                                float _3020 = _3019 * (((isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0))) * _2996) / ((_3009 * 0.699999988079071044921875) + 1.0));
                                float _3032 = exp2(log2(1.0 / ((_3009 * 3.5) + 5.0)) * 0.25);
                                float _3033 = 1.0 - _478;
                                float _3040 = sqrt(1.0 - ((1.0 - (_3033 * _3033)) * (1.0 - (_3032 * _3032))));
                                float _3041 = _3040 * _3040;
                                float _3042 = _3041 * _3041;
                                float _3043 = _2989 - _2489;
                                float _3044 = _2990 - _2490;
                                float _3045 = _2991 - _2491;
                                float _3049 = inversesqrt(dot(vec3(_3043, _3044, _3045), vec3(_3043, _3044, _3045)));
                                float _3053 = dot(vec3(_413, _416, _419), vec3((-0.0) - _2489, (-0.0) - _2490, (-0.0) - _2491));
                                float _4129 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                                float _3056 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                                float _3057 = dot(vec3(_413, _416, _419), vec3(_3049 * _3043, _3049 * _3044, _3049 * _3045));
                                float _4140 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                                float _3060 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                                float _3064 = ((_3060 * _3060) * (_3042 + (-1.0))) + 1.0;
                                float _3065 = _3002 * _3041;
                                float _3066 = _3065 * _3065;
                                float _3072 = ((1.0 - _3066) * dot(vec3(_413, _416, _419), vec3(_2989, _2990, _2991))) + _3066;
                                float _4151 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3073 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                                float _3074 = 1.0 - _3041;
                                float _3084 = (0.5 / (((_3073 * ((_3056 * _3074) + _3041)) + 9.9999999392252902907785028219223e-09) + (((_3073 * _3074) + _3041) * _3056))) * _3073;
                                float _4162 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                                float _3094 = (_3019 * _2996) * (((_3042 * 3.1415927410125732421875) * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) / ((_3064 * _3064) * ((_3009 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3094 * _2875.x;
                                frontier_phi_73_pred_1 = _3094 * _2875.y;
                                frontier_phi_73_pred_2 = _3020 * _2863.z;
                                frontier_phi_73_pred_3 = _3020 * _2863.y;
                                frontier_phi_73_pred_4 = _3020 * _2863.x;
                                frontier_phi_73_pred_5 = _3094 * _2875.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3098 = frontier_phi_73_pred;
                            _3099 = frontier_phi_73_pred_1;
                            _3103 = frontier_phi_73_pred_2;
                            _3102 = frontier_phi_73_pred_3;
                            _3101 = frontier_phi_73_pred_4;
                            _3100 = frontier_phi_73_pred_5;
                            _2805 = _3101 + _2818;
                            _2806 = _3102 + _2819;
                            _2807 = _3103 + _2820;
                            _2802 = _3098 + _2815;
                            _2803 = _3099 + _2816;
                            _2804 = _3100 + _2817;
                            if (_2822 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2815 = _2802;
                                _2816 = _2803;
                                _2817 = _2804;
                                _2818 = _2805;
                                _2819 = _2806;
                                _2820 = _2807;
                                _2821 = _2822;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2805;
                        frontier_phi_67_pred_1 = _2806;
                        frontier_phi_67_pred_2 = _2807;
                        frontier_phi_67_pred_3 = _2804;
                        frontier_phi_67_pred_4 = _2803;
                        frontier_phi_67_pred_5 = _2802;
                    }
                    _2470 = frontier_phi_67_pred;
                    _2472 = frontier_phi_67_pred_1;
                    _2474 = frontier_phi_67_pred_2;
                    _2468 = frontier_phi_67_pred_3;
                    _2466 = frontier_phi_67_pred_4;
                    _2464 = frontier_phi_67_pred_5;
                    uint _2609 = _2608 + 1u;
                    if (_2609 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2602 = _2464;
                        _2603 = _2466;
                        _2604 = _2468;
                        _2605 = _2470;
                        _2606 = _2472;
                        _2607 = _2474;
                        _2608 = _2609;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2472;
                frontier_phi_55_56_ladder_1 = _2474;
                frontier_phi_55_56_ladder_2 = _2470;
                frontier_phi_55_56_ladder_3 = _2468;
                frontier_phi_55_56_ladder_4 = _2466;
                frontier_phi_55_56_ladder_5 = _2464;
            }
            else
            {
                frontier_phi_55_56_ladder = _2359;
                frontier_phi_55_56_ladder_1 = _2361;
                frontier_phi_55_56_ladder_2 = _2357;
                frontier_phi_55_56_ladder_3 = _2355;
                frontier_phi_55_56_ladder_4 = _2353;
                frontier_phi_55_56_ladder_5 = _2351;
            }
            _2463 = frontier_phi_55_56_ladder_5;
            _2465 = frontier_phi_55_56_ladder_4;
            _2467 = frontier_phi_55_56_ladder_3;
            _2469 = frontier_phi_55_56_ladder_2;
            _2471 = frontier_phi_55_56_ladder;
            _2473 = frontier_phi_55_56_ladder_1;
        }
        float _2478 = isnan(1.0) ? _459 : (isnan(_459) ? 1.0 : min(_459, 1.0));
        _2263 = (_2478 * _2469) + _1715;
        _2265 = (_2478 * _2471) + _1717;
        _2267 = (_2478 * _2473) + _1719;
        _2269 = ((_2463 * 0.039999999105930328369140625) * _2478) + _2048;
        _2271 = ((_2465 * 0.039999999105930328369140625) * _2478) + _2050;
        _2273 = ((_2467 * 0.039999999105930328369140625) * _2478) + _2052;
    }
    else
    {
        _2263 = _1715;
        _2265 = _1717;
        _2267 = _1719;
        _2269 = _2048;
        _2271 = _2050;
        _2273 = _2052;
    }
    float _4178 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _4189 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _4200 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    uint _2293 = _432 + 6u;
    float _2301 = _391 / cbSceneParam._m0[86u].x;
    float _2302 = _392 / cbSceneParam._m0[86u].y;
    vec4 _2316 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2301, _2302, (log2((isnan(cbSceneParam._m0[77u].w) ? _324 : (isnan(_324) ? cbSceneParam._m0[77u].w : min(_324, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2318 = _2316.x;
    float _2319 = _2316.y;
    float _2320 = _2316.z;
    float _2321 = _2316.w;
    float _2414;
    float _2416;
    float _2418;
    float _2420;
    if (_324 > cbSceneParam._m0[78u].w)
    {
        float _2376 = isnan(_324) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _324 : min(cbSceneParam._m0[80u].w, _324));
        float _2377 = _2376 / _324;
        float _2388 = _2377 * _376;
        float _2389 = _377 * _2377;
        float _2390 = (-0.0) - _2389;
        float _2392 = _2377 * _378;
        float _2394 = (cbSceneParam._m0[77u].w * _2390) / _2376;
        float _2395 = _2394 + cbSceneParam._m0[79u].w;
        float _2396 = cbSceneParam._m0[79u].w - _2389;
        float _2402 = sqrt(((_2388 * _2388) + (_2389 * _2389)) + (_2392 * _2392));
        float _2405 = (1.0 - (cbSceneParam._m0[77u].w / _2376)) * _2402;
        float _2410 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2412 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2564;
        if (abs((_2390 - _2394) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2564 = ((((_2395 > 0.0) ? exp2(_2410 * _2395) : (2.0 - exp2(_2412 * _2395))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2405;
        }
        else
        {
            float _2524 = 1.0 / cbSceneParam._m0[80u].x;
            float _2525 = isnan(_2396) ? _2395 : (isnan(_2395) ? _2396 : max(_2395, _2396));
            float _2526 = isnan(_2396) ? _2395 : (isnan(_2395) ? _2396 : min(_2395, _2396));
            float _2535 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : min(_2525, 0.0));
            float _2536 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : min(_2526, 0.0));
            _2564 = ((abs(_2402 / _2390) * cbSceneParam._m0[80u].y) * ((((_2535 - _2536) * 2.0) - ((exp2(_2410 * (isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0)))) - exp2(_2410 * (isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0))))) * _2524)) - ((exp2(_2412 * _2535) - exp2(_2412 * _2536)) * _2524))) + (_2405 * cbSceneParam._m0[80u].z);
        }
        vec4 _2566 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2301, _2302, 1.0), 0.0);
        float _2575 = exp2((_2564 * (-1.44269502162933349609375)) * (1.0 - _2566.w));
        float _2576 = log2(_2575);
        float _2592 = log2(_2321);
        _2414 = (exp2(_2592 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2576 * cbSceneParam._m0[78u].x)) * _2566.x) / cbSceneParam._m0[78u].x)) + _2318;
        _2416 = (exp2(_2592 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2576 * cbSceneParam._m0[78u].y)) * _2566.y) / cbSceneParam._m0[78u].y)) + _2319;
        _2418 = (exp2(_2592 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2576 * cbSceneParam._m0[78u].z)) * _2566.z) / cbSceneParam._m0[78u].z)) + _2320;
        _2420 = _2575 * _2321;
    }
    else
    {
        _2414 = _2318;
        _2416 = _2319;
        _2418 = _2320;
        _2420 = _2321;
    }
    float _2431 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2432 = _2431 == 3.0;
    float _2433 = log2(_2420);
    float _2440 = exp2(_2433 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_2263 + ((isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0))) * _459))) + (((((_1479 * (_1527.x / _1533)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _1269) * _1548)) + _2269) * cbPerFrame._m0[3u].x));
    float _2441 = exp2(_2433 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2265 + ((isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0))) * _459))) + (((((_1479 * (_1527.y / _1533)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _1269) * _1548)) + _2271) * cbPerFrame._m0[3u].x));
    float _2442 = exp2(_2433 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_2267 + ((isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0))) * _459))) + (((((_1479 * (_1527.z / _1533)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _1269) * _1548)) + _2273) * cbPerFrame._m0[3u].x));
    float _2451 = (_2431 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2451 * (_2432 ? _2440 : (_2440 + (cbSceneParam._m0[72u].w * _2414)));
    SV_Target.y = _2451 * (_2432 ? _2441 : (_2441 + (cbSceneParam._m0[72u].w * _2416)));
    SV_Target.z = _2451 * (_2432 ? _2442 : (_2442 + (cbSceneParam._m0[72u].w * _2418)));
    SV_Target.w = cbInstanceData._m0[_2293].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2293].w;
}


