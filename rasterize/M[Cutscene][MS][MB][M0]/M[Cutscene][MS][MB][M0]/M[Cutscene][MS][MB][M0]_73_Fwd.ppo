#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[33];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1233;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3590 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3601 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3612 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _288) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _289) + cbTextureTilingScale._m0[13u].w));
    vec4 _326 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _331 = _326.x * cbMtdParam._m0[11u].x;
    float _332 = _326.y * cbMtdParam._m0[11u].y;
    float _333 = _326.z * cbMtdParam._m0[11u].z;
    vec4 _352 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _288) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _289) + cbTextureTilingScale._m0[5u].w));
    vec4 _385 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[28u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[28u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _400 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _417 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_387 - _400) * cbMtdParam._m0[24u].x) + _400) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3623 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _425 = (_418 * ((_352.x * cbMtdParam._m0[12u].x) - _331)) + _331;
    float _426 = (_418 * ((_352.y * cbMtdParam._m0[12u].y) - _332)) + _332;
    float _427 = (_418 * ((_352.z * cbMtdParam._m0[12u].z) - _333)) + _333;
    float _431 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _302.x) * _425;
    float _434 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _302.y) * _426;
    float _437 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _302.z) * _427;
    float _444 = ((_425 - _431) * (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0)))) + _431;
    float _445 = ((_426 - _434) * (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0)))) + _434;
    float _446 = ((_427 - _437) * (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0)))) + _437;
    vec4 _459 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _288) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _289) + cbTextureTilingScale._m0[20u].w));
    vec4 _484 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _486 = _484.x;
    float _487 = _484.y;
    float _492 = cbMtdParam._m0[25u].w * _484.z;
    float _3634 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _493 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    vec4 _506 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _288) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _289) + cbTextureTilingScale._m0[4u].w));
    float _514 = cbMtdParam._m0[26u].x * _506.z;
    float _3645 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _524 = (((isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) - _493) * _418) + _493;
    float _527 = ((((_506.x - _486) * _418) + _486) * 2.0) + (-1.0);
    float _528 = ((((_506.y - _487) * _418) + _487) * 2.0) + (-1.0);
    float _529 = dot(vec2(_527, _528), vec2(_527, _528));
    float _3656 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _534 = sqrt(1.0 - (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))));
    vec4 _557 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _564 = cbMtdParam._m0[25u].z * _557.z;
    float _3667 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _572 = (_527 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_459.x * 2.0) + (-1.0)))) + (((_557.x * 2.0) + (-1.0)) * cbMtdParam._m0[27u].x);
    float _573 = (_528 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_459.y * 2.0) + (-1.0)))) + (((_557.y * 2.0) + (-1.0)) * cbMtdParam._m0[27u].x);
    vec4 _585 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _587 = _585.x;
    float _588 = 1.0 - _587;
    float _614 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_587 - _588) * cbMtdParam._m0[24u].w) + _588) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3678 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _615 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _623 = ((((cbMtdParam._m0[10u].x - _444) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _615) + _444;
    float _624 = ((((cbMtdParam._m0[10u].y - _445) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _615) + _445;
    float _625 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _446)) * _615) + _446;
    float _630 = (((_459.z - _524) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _524;
    float _634 = (((isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) - _630) * cbMtdParam._m0[19u].w) + _630;
    float _638 = ((cbMtdParam._m0[23u].y - _634) * _615) + _634;
    float _642 = ((1.0 - _638) * cbMtdParam._m0[26u].y) + _638;
    float _3689 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _643 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    vec4 _665 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[28u].w * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[29u].x * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _671 = (_665.x * 2.0) + (-1.0);
    float _672 = (_665.y * 2.0) + (-1.0);
    float _673 = dot(vec2(_671, _672), vec2(_671, _672));
    float _3700 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _689 = (_615 * (((cbMtdParam._m0[22u].z * _572) - _572) + _671)) + _572;
    float _690 = (_615 * (((cbMtdParam._m0[22u].z * _573) - _573) + _672)) + _573;
    float _691 = (_615 * (sqrt(1.0 - (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0)))) - _534)) + _534;
    float _693 = cbMtdParam._m0[22u].x + _557.w;
    float _698 = fma(_691, _237 * NORMAL.x, fma(_690, _244 * TANGENT.x, (_230 * _222) * _689));
    float _701 = fma(_691, _237 * NORMAL.y, fma(_690, _244 * TANGENT.y, (_230 * _223) * _689));
    float _704 = fma(_691, _237 * NORMAL.z, fma(_690, _244 * TANGENT.z, (_230 * _224) * _689));
    float _708 = inversesqrt(dot(vec3(_698, _701, _704), vec3(_698, _701, _704)));
    float _709 = _708 * _698;
    float _710 = _708 * _701;
    float _711 = _708 * _704;
    float _3711 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _712 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _3722 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _3733 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3744 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _3755 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _730 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _781 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _771);
    float _782 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _771);
    float _783 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _771);
    float _787 = inversesqrt(dot(vec3(_781, _782, _783), vec3(_781, _782, _783)));
    float _788 = _781 * _787;
    float _789 = _782 * _787;
    float _790 = _783 * _787;
    float _796 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _797 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _815 = fma(_711, cbSceneParam._m0[5u].z, fma(_710, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _709));
    float _818 = fma(_711, cbSceneParam._m0[6u].z, fma(_710, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _709));
    float _821 = fma(_711, cbSceneParam._m0[7u].z, fma(_710, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _709));
    uint _835 = (_269 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _841 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0)))) * cbInstanceData._m0[_835].x;
    float _842 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0)))) * cbInstanceData._m0[_835].y;
    float _843 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)))) * cbInstanceData._m0[_835].z;
    float _3766 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _844 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _3777 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _3788 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _846 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    vec4 _855 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _796, cbSceneParam._m0[86u].y * _797));
    float _859 = ((isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * TEXCOORD_5.w) * _855.x;
    float _860 = dot(vec3(_709, _710, _711), vec3(_788, _789, _790));
    float _863 = _860 * 2.0;
    float _867 = (_863 * _709) - _788;
    float _868 = (_863 * _710) - _789;
    float _869 = (_863 * _711) - _790;
    float _876 = abs(dot(vec3(_788, _789, _790), vec3(_709, _710, _711)));
    float _3799 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _878 = sqrt(_712);
    float _891 = exp2((_878 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_878 * 3.0));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1232;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _957 = fma(_931, cbModelParam._m0[26u].z, fma(_927, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _923));
        float _961 = fma(_931, cbModelParam._m0[27u].z, fma(_927, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _923));
        float _965 = fma(_931, cbModelParam._m0[28u].z, fma(_927, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _923));
        float _990 = _923 + _709;
        float _991 = _927 + _710;
        float _992 = _931 + _711;
        float _1002 = fma(_992, cbModelParam._m0[26u].z, fma(_991, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _990)) - _957;
        float _1003 = fma(_992, cbModelParam._m0[27u].z, fma(_991, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _990)) - _961;
        float _1004 = fma(_992, cbModelParam._m0[28u].z, fma(_991, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _990)) - _965;
        float _1008 = inversesqrt(dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004)));
        float _1021 = ((_1008 * _1002) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_957 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1022 = ((_1008 * _1003) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_961 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1023 = ((_1008 * _1004) / cbModelParam._m0[34u].z) + ((((((_965 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        float _1060 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1026.x + (-0.5));
        float _1062 = _1060 * (_1026.y + (-0.5));
        float _1063 = _1060 * (_1026.z + (-0.5));
        float _1070 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1033.x + (-0.5));
        float _1072 = _1070 * (_1033.y + (-0.5));
        float _1073 = _1070 * (_1033.z + (-0.5));
        float _1080 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1040.x + (-0.5));
        float _1082 = _1080 * (_1040.y + (-0.5));
        float _1083 = _1080 * (_1040.z + (-0.5));
        float _1090 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1047.x + (-0.5));
        float _1092 = _1090 * (_1047.y + (-0.5));
        float _1093 = _1090 * (_1047.z + (-0.5));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = _1061 * 0.5;
        float _1098 = _1071 * 0.5;
        float _1099 = _1081 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1114 = (dot(vec3(_709, _710, _711), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1124 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3847 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1126 + 1.0))) + _1131) * _1094;
        float _1141 = _1062 * 0.5;
        float _1142 = _1072 * 0.5;
        float _1143 = _1082 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_709, _710, _711), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3880 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1168 + 1.0))) + _1173) * _1095;
        float _1183 = _1063 * 0.5;
        float _1184 = _1073 * 0.5;
        float _1185 = _1083 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_709, _710, _711), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3913 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1210 + 1.0))) + _1215) * _1096;
        _1232 = _1063;
        _1234 = _1062;
        _1235 = _1061;
        _1236 = _1073;
        _1237 = _1072;
        _1238 = _1071;
        _1239 = _1083;
        _1240 = _1082;
        _1241 = _1081;
        _1242 = _1096;
        _1243 = _1095;
        _1244 = _1094;
        _1245 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1246 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
        _1247 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
    }
    else
    {
        _1232 = _1233;
        _1234 = _1233;
        _1235 = _1233;
        _1236 = _1233;
        _1237 = _1233;
        _1238 = _1233;
        _1239 = _1233;
        _1240 = _1233;
        _1241 = _1233;
        _1242 = _1233;
        _1243 = _1233;
        _1244 = _1233;
        _1245 = 0.0;
        _1246 = 0.0;
        _1247 = 0.0;
    }
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1271 = fma(_931, cbModelParam._m0[30u].z, fma(_927, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _923));
        float _1275 = fma(_931, cbModelParam._m0[31u].z, fma(_927, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _923));
        float _1279 = fma(_931, cbModelParam._m0[32u].z, fma(_927, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _923));
        float _1302 = _923 + _709;
        float _1303 = _927 + _710;
        float _1304 = _931 + _711;
        float _1314 = fma(_1304, cbModelParam._m0[30u].z, fma(_1303, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1302)) - _1271;
        float _1315 = fma(_1304, cbModelParam._m0[31u].z, fma(_1303, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1302)) - _1275;
        float _1316 = fma(_1304, cbModelParam._m0[32u].z, fma(_1303, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1302)) - _1279;
        float _1320 = inversesqrt(dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316)));
        float _1333 = ((_1320 * _1314) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1271 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1334 = ((_1320 * _1315) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1275 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1335 = ((_1320 * _1316) / cbModelParam._m0[35u].z) + ((((((_1279 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        float _1370 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1337.x + (-0.5));
        float _1372 = _1370 * (_1337.y + (-0.5));
        float _1373 = _1370 * (_1337.z + (-0.5));
        float _1380 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1344.x + (-0.5));
        float _1382 = _1380 * (_1344.y + (-0.5));
        float _1383 = _1380 * (_1344.z + (-0.5));
        float _1390 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1351.x + (-0.5));
        float _1392 = _1390 * (_1351.y + (-0.5));
        float _1393 = _1390 * (_1351.z + (-0.5));
        float _1400 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1358.x + (-0.5));
        float _1402 = _1400 * (_1358.y + (-0.5));
        float _1403 = _1400 * (_1358.z + (-0.5));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = _1371 * 0.5;
        float _1408 = _1381 * 0.5;
        float _1409 = _1391 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_709, _710, _711), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _3976 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1434 + 1.0))) + _1439) * _1404;
        float _1449 = _1372 * 0.5;
        float _1450 = _1382 * 0.5;
        float _1451 = _1392 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_709, _710, _711), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _4009 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1476 + 1.0))) + _1481) * _1405;
        float _1491 = _1373 * 0.5;
        float _1492 = _1383 * 0.5;
        float _1493 = _1393 * 0.5;
        float _1494 = dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493));
        float _1499 = (_1494 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1494);
        float _1507 = (dot(vec3(_709, _710, _711), vec3(_1499 * _1491, _1499 * _1492, _1499 * _1493)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1516 = sqrt(((_1492 * _1492) + (_1491 * _1491)) + (_1493 * _1493)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1518 = _1517 * 2.0;
        float _1522 = (1.0 - _1517) / (_1517 + 1.0);
        float _4042 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1532 = ((((1.0 - _1523) * (_1518 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1518 + 1.0))) + _1523) * _1406;
        _1540 = _1373;
        _1541 = _1372;
        _1542 = _1371;
        _1543 = _1383;
        _1544 = _1382;
        _1545 = _1381;
        _1546 = _1393;
        _1547 = _1392;
        _1548 = _1391;
        _1549 = _1406;
        _1550 = _1405;
        _1551 = _1404;
        _1552 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
        _1553 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
        _1554 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)));
    }
    else
    {
        _1540 = _1233;
        _1541 = _1233;
        _1542 = _1233;
        _1543 = _1233;
        _1544 = _1233;
        _1545 = _1233;
        _1546 = _1233;
        _1547 = _1233;
        _1548 = _1233;
        _1549 = _1233;
        _1550 = _1233;
        _1551 = _1233;
        _1552 = 0.0;
        _1553 = 0.0;
        _1554 = 0.0;
    }
    float _1564 = (cbModelParam._m0[1u].x * (_1552 - _1245)) + _1245;
    float _1565 = (cbModelParam._m0[1u].x * (_1553 - _1246)) + _1246;
    float _1566 = (cbModelParam._m0[1u].x * (_1554 - _1247)) + _1247;
    float _1587 = fma(_1566, cbSceneParam._m0[89u].z, fma(_1565, cbSceneParam._m0[89u].y, _1564 * cbSceneParam._m0[89u].x));
    float _1590 = fma(_1566, cbSceneParam._m0[90u].z, fma(_1565, cbSceneParam._m0[90u].y, _1564 * cbSceneParam._m0[90u].x));
    float _1593 = fma(_1566, cbSceneParam._m0[91u].z, fma(_1565, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1564));
    float _1608 = _867 * 0.5;
    float _1609 = _868 * 0.5;
    float _1610 = _869 * 0.5;
    float _1611 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1542, _1545, _1548, _1551));
    float _1614 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1541, _1544, _1547, _1550));
    float _1617 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1540, _1543, _1546, _1549));
    float _1651;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1624 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1232, _1236, _1239, _1242));
        float _1628 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1234, _1237, _1240, _1243));
        float _1632 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1235, _1238, _1241, _1244));
        float _1639 = dot(vec4(cbModelParam._m0[39u]), vec4(_1608, _1609, _1610, 1.0));
        _1651 = dot(vec3(isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1639) ? 0.0 : (isnan(0.0) ? _1639 : max(0.0, _1639))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1651 = 1.0;
    }
    float _1662;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1653 = dot(vec4(cbModelParam._m0[40u]), vec4(_1608, _1609, _1610, 1.0));
        _1662 = dot(vec3(isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1653) ? 0.0 : (isnan(0.0) ? _1653 : max(0.0, _1653))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1662 = 1.0;
    }
    float _1666 = (_1662 * cbModelParam._m0[1u].x) + (_1651 * (1.0 - cbModelParam._m0[1u].x));
    float _1676 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _712);
    float _1677 = isnan(_1676) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1676 : min(cbModelParam._m0[25u].z, _1676));
    float _1759;
    float _1761;
    float _1763;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1726 = fma(_931, cbModelParam._m0[13u].z, fma(_927, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _923)) + cbModelParam._m0[13u].w;
        float _1730 = fma(_931, cbModelParam._m0[14u].z, fma(_927, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _923)) + cbModelParam._m0[14u].w;
        float _1734 = fma(_931, cbModelParam._m0[15u].z, fma(_927, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _923)) + cbModelParam._m0[15u].w;
        float _1737 = fma(_869, cbModelParam._m0[13u].z, fma(_868, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _867));
        float _1740 = fma(_869, cbModelParam._m0[14u].z, fma(_868, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _867));
        float _1743 = fma(_869, cbModelParam._m0[15u].z, fma(_868, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _867));
        float _1771;
        if (_1737 > 0.0)
        {
            _1771 = abs((1.0 - _1726) / _1737);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1726 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1771 = frontier_phi_14_12_ladder;
        }
        float _2030;
        if (_1740 > 0.0)
        {
            _2030 = abs((1.0 - _1730) / _1740);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1730 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2030 = frontier_phi_23_19_ladder;
        }
        float _2273;
        if (_1743 > 0.0)
        {
            _2273 = abs((1.0 - _1734) / _1743);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1734 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2273 = frontier_phi_35_30_ladder;
        }
        float _2275 = isnan(_2030) ? _1771 : (isnan(_1771) ? _2030 : min(_1771, _2030));
        float _2276 = isnan(_2273) ? _2275 : (isnan(_2275) ? _2273 : min(_2275, _2273));
        float _2280 = (_2276 * _1737) + _1726;
        float _2281 = (_2276 * _1740) + _1730;
        float _2282 = (_2276 * _1743) + _1734;
        float _2283 = _2276 * 9.9999997473787516355514526367188e-05;
        float _2285 = (-1.0) - _2283;
        float _2287 = _2283 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2282 > _2287) || ((_2282 < _2285) || ((_2281 > _2287) || ((_2281 < _2285) || ((_2280 < _2285) || (_2280 > _2287))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2406 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2282, cbModelParam._m0[9u].z, fma(_2281, cbModelParam._m0[9u].y, _2280 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2282, cbModelParam._m0[10u].z, fma(_2281, cbModelParam._m0[10u].y, _2280 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2282, cbModelParam._m0[11u].z, fma(_2281, cbModelParam._m0[11u].y, _2280 * cbModelParam._m0[11u].x))), _1677);
            frontier_phi_13_35_ladder = _2406.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2406.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2406.x * cbModelParam._m0[1u].y;
        }
        _1759 = frontier_phi_13_35_ladder_2;
        _1761 = frontier_phi_13_35_ladder_1;
        _1763 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1747 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_867, _868, _869), _1677);
        _1759 = _1747.x * cbModelParam._m0[1u].y;
        _1761 = _1747.y * cbModelParam._m0[1u].y;
        _1763 = _1747.z * cbModelParam._m0[1u].y;
    }
    float _1767 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _712);
    float _1768 = isnan(_1767) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1767 : min(cbModelParam._m0[25u].w, _1767));
    float _1859;
    float _1861;
    float _1863;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1823 = fma(_931, cbModelParam._m0[21u].z, fma(_927, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _923)) + cbModelParam._m0[21u].w;
        float _1827 = fma(_931, cbModelParam._m0[22u].z, fma(_927, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _923)) + cbModelParam._m0[22u].w;
        float _1831 = fma(_931, cbModelParam._m0[23u].z, fma(_927, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _923)) + cbModelParam._m0[23u].w;
        float _1834 = fma(_869, cbModelParam._m0[21u].z, fma(_868, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _867));
        float _1837 = fma(_869, cbModelParam._m0[22u].z, fma(_868, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _867));
        float _1840 = fma(_869, cbModelParam._m0[23u].z, fma(_868, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _867));
        float _2035;
        if (_1834 > 0.0)
        {
            _2035 = abs((1.0 - _1823) / _1834);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1823 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2035 = frontier_phi_25_21_ladder;
        }
        float _2300;
        if (_1837 > 0.0)
        {
            _2300 = abs((1.0 - _1827) / _1837);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1827 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2300 = frontier_phi_37_32_ladder;
        }
        float _2505;
        if (_1840 > 0.0)
        {
            _2505 = abs((1.0 - _1831) / _1840);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1831 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2505 = frontier_phi_46_43_ladder;
        }
        float _2507 = isnan(_2300) ? _2035 : (isnan(_2035) ? _2300 : min(_2035, _2300));
        float _2508 = isnan(_2505) ? _2507 : (isnan(_2507) ? _2505 : min(_2507, _2505));
        float _2512 = (_2508 * _1834) + _1823;
        float _2513 = (_2508 * _1837) + _1827;
        float _2514 = (_2508 * _1840) + _1831;
        float _2515 = _2508 * 9.9999997473787516355514526367188e-05;
        float _2516 = (-1.0) - _2515;
        float _2518 = _2515 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2514 > _2518) || ((_2514 < _2516) || ((_2513 > _2518) || ((_2513 < _2516) || ((_2512 < _2516) || (_2512 > _2518))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2707 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2514, cbModelParam._m0[17u].z, fma(_2513, cbModelParam._m0[17u].y, _2512 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2514, cbModelParam._m0[18u].z, fma(_2513, cbModelParam._m0[18u].y, _2512 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2514, cbModelParam._m0[19u].z, fma(_2513, cbModelParam._m0[19u].y, _2512 * cbModelParam._m0[19u].x))), _1768);
            frontier_phi_22_46_ladder = _2707.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2707.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2707.x * cbModelParam._m0[1u].z;
        }
        _1859 = frontier_phi_22_46_ladder_2;
        _1861 = frontier_phi_22_46_ladder_1;
        _1863 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1843 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_867, _868, _869), _1768);
        _1859 = _1843.x * cbModelParam._m0[1u].z;
        _1861 = _1843.y * cbModelParam._m0[1u].z;
        _1863 = _1843.z * cbModelParam._m0[1u].z;
    }
    float _1875 = ((((1.0 - _891) * ((_878 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_891 * _878)) * _859;
    float _1876 = _1875 * ((cbModelParam._m0[1u].w * (_1859 - _1759)) + _1759);
    float _1877 = _1875 * ((cbModelParam._m0[1u].w * (_1861 - _1761)) + _1761);
    float _1878 = _1875 * ((cbModelParam._m0[1u].w * (_1863 - _1763)) + _1763);
    float _1881 = fma(_1878, cbSceneParam._m0[89u].z, fma(_1877, cbSceneParam._m0[89u].y, _1876 * cbSceneParam._m0[89u].x));
    float _1884 = fma(_1878, cbSceneParam._m0[90u].z, fma(_1877, cbSceneParam._m0[90u].y, _1876 * cbSceneParam._m0[90u].x));
    float _1887 = fma(_1878, cbSceneParam._m0[91u].z, fma(_1877, cbSceneParam._m0[91u].y, _1876 * cbSceneParam._m0[91u].x));
    float _1898 = _796 / cbSceneParam._m0[86u].x;
    float _1899 = _797 / cbSceneParam._m0[86u].y;
    float _1906 = (cbSceneParam._m0[88u].y * (1.0 - cbMtdParam._m0[25u].y)) + cbSceneParam._m0[88u].z;
    float _4168 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1908 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * 5.0;
    float _1913 = ((10.0 / (_730 + 10.0)) * cbMtdParam._m0[25u].x) * dot(vec3(_709, _710, _711), vec3(1.0, 0.0, 0.0));
    vec4 _1923 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1913 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1913 + _1898) * cbSceneParam._m0[86u].x, _797), _1908).w) + _1898) * cbSceneParam._m0[86u].x, _797), _1908);
    float _1929 = isnan(0.5) ? _1923.w : (isnan(_1923.w) ? 0.5 : max(_1923.w, 0.5));
    float _1944 = 1.0 - (_1923.w / _1929);
    uvec4 _1954 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _1956 = _1954.x * 14u;
    uint _1957 = _1956 + 13u;
    float _1964 = _859 + (-1.0);
    float _1969 = (cbLight._m0[_1957].x * _1964) + 1.0;
    float _1970 = (cbLight._m0[_1957].y * _1964) + 1.0;
    float _1971 = (cbLight._m0[_1957].z * _1964) + 1.0;
    float _1972 = (cbLight._m0[_1957].w * _1964) + 1.0;
    uint _1973 = _1956 + 5u;
    float _1979 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
    uint _1983 = _1956 + 4u;
    float _1989 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
    uint _1993 = _1956 | 1u;
    float _2004 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_709, _710, _711));
    float _2007 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_709, _710, _711));
    float _4194 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _4205 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2012 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * 0.3183098733425140380859375;
    float _2014 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * 0.3183098733425140380859375;
    float _2021 = ((cbLight._m0[_1973].x * _1979) * _2014) + ((cbLight._m0[_1983].x * _1989) * _2012);
    float _2022 = ((_1979 * cbLight._m0[_1973].y) * _2014) + ((_1989 * cbLight._m0[_1983].y) * _2012);
    float _2023 = ((_1979 * cbLight._m0[_1973].z) * _2014) + ((_1989 * cbLight._m0[_1983].z) * _2012);
    uvec4 _2027 = floatBitsToUint(cbLight._m0[_1956 + 12u]);
    bool _2029 = _2027.x == 0u;
    float _2040;
    float _2042;
    float _2044;
    if (_2029)
    {
        _2040 = _2021;
        _2042 = _2022;
        _2044 = _2023;
    }
    else
    {
        uint _2048 = _1956 + 6u;
        float _2064 = (dot(vec3(cbLight._m0[_1956 + 2u].xyz), vec3(_709, _710, _711)) * 0.5) + 0.5;
        float _2065 = _2064 * _2064;
        float _4216 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2066 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2067 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2040 = (((cbLight._m0[_2048].x * 0.3183098733425140380859375) * _2066) * _2067) + _2021;
        _2042 = (((cbLight._m0[_2048].y * 0.3183098733425140380859375) * _2066) * _2067) + _2022;
        _2044 = (((cbLight._m0[_2048].z * 0.3183098733425140380859375) * _2066) * _2067) + _2023;
    }
    bool _2047 = _2027.y == 0u;
    float _2085;
    float _2087;
    float _2089;
    if (_2047)
    {
        _2085 = _2040;
        _2087 = _2042;
        _2089 = _2044;
    }
    else
    {
        uint _2244 = _1956 + 7u;
        float _2260 = (dot(vec3(cbLight._m0[_1956 + 3u].xyz), vec3(_709, _710, _711)) * 0.5) + 0.5;
        float _2261 = _2260 * _2260;
        float _4232 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2262 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2263 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
        _2085 = (((cbLight._m0[_2244].x * 0.3183098733425140380859375) * _2262) * _2263) + _2040;
        _2087 = (((cbLight._m0[_2244].y * 0.3183098733425140380859375) * _2262) * _2263) + _2042;
        _2089 = (((cbLight._m0[_2244].z * 0.3183098733425140380859375) * _2262) * _2263) + _2044;
    }
    uint _2092 = _1956 + 8u;
    float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1956].w)) * _712) * 0.949999988079071044921875);
    float _2106 = _2105 * _2105;
    float _2107 = cbLight._m0[_1956].x + _788;
    float _2108 = cbLight._m0[_1956].y + _789;
    float _2109 = cbLight._m0[_1956].z + _790;
    float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
    float _2114 = _2113 * _2107;
    float _2115 = _2113 * _2108;
    float _2116 = _2113 * _2109;
    float _2117 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_1956].xyz));
    float _4248 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _4259 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _2121 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _2122 = dot(vec3(_709, _710, _711), vec3(_2114, _2115, _2116));
    float _4270 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2125 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _2126 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_2114, _2115, _2116));
    float _4281 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2130 = _2106 * _2106;
    float _2134 = ((_2125 * _2125) * (_2130 + (-1.0))) + 1.0;
    float _2145 = (exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2146 = 1.0 - _2106;
    float _2157 = (0.5 / (((_2121 * ((_2120 * _2146) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2146) + _2106) * _2120))) * _2120;
    float _4292 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2159 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2130 / ((_2134 * _2134) * 3.141590118408203125));
    uint _2170 = _1956 + 9u;
    float _2181 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _712) * 0.949999988079071044921875);
    float _2182 = _2181 * _2181;
    float _2183 = cbLight._m0[_1993].x + _788;
    float _2184 = cbLight._m0[_1993].y + _789;
    float _2185 = cbLight._m0[_1993].z + _790;
    float _2189 = inversesqrt(dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185)));
    float _2190 = _2189 * _2183;
    float _2191 = _2189 * _2184;
    float _2192 = _2189 * _2185;
    float _2193 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_1993].xyz));
    float _4303 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _2197 = dot(vec3(_709, _710, _711), vec3(_2190, _2191, _2192));
    float _4314 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2200 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _2201 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2190, _2191, _2192));
    float _4325 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2205 = _2182 * _2182;
    float _2209 = ((_2200 * _2200) * (_2205 + (-1.0))) + 1.0;
    float _2218 = (exp2(log2(1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2219 = 1.0 - _2182;
    float _2229 = (0.5 / (((_2121 * ((_2196 * _2219) + _2182)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2219) + _2182) * _2196))) * _2196;
    float _4336 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2231 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2205 / ((_2209 * _2209) * 3.141590118408203125));
    float _2241 = (((_2218 * cbLight._m0[_2170].x) * _2231) * _1979) + (((_2145 * cbLight._m0[_2092].x) * _2159) * _1989);
    float _2242 = (((_2218 * cbLight._m0[_2170].y) * _2231) * _1979) + (((_2145 * cbLight._m0[_2092].y) * _2159) * _1989);
    float _2243 = (((_2218 * cbLight._m0[_2170].z) * _2231) * _1979) + (((_2145 * cbLight._m0[_2092].z) * _2159) * _1989);
    float _2305;
    float _2307;
    float _2309;
    if (_2029)
    {
        _2305 = _2241;
        _2307 = _2242;
        _2309 = _2243;
    }
    else
    {
        uint _2311 = _1956 + 2u;
        uint _2315 = _1956 + 10u;
        float _2329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2311].w)) * _712) * 0.949999988079071044921875);
        float _2330 = _2329 * _2329;
        float _2331 = cbLight._m0[_2311].x + _788;
        float _2332 = cbLight._m0[_2311].y + _789;
        float _2333 = cbLight._m0[_2311].z + _790;
        float _2337 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
        float _2338 = _2337 * _2331;
        float _2339 = _2337 * _2332;
        float _2340 = _2337 * _2333;
        float _2341 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2311].xyz));
        float _4347 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2344 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _2345 = dot(vec3(_709, _710, _711), vec3(_2338, _2339, _2340));
        float _4358 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2348 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _2349 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_2338, _2339, _2340));
        float _4369 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2353 = _2330 * _2330;
        float _2357 = ((_2348 * _2348) * (_2353 + (-1.0))) + 1.0;
        float _2366 = (exp2(log2(1.0 - (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2367 = 1.0 - _2330;
        float _2377 = (0.5 / (((_2121 * ((_2344 * _2367) + _2330)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2367) + _2330) * _2344))) * _2344;
        float _4380 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2379 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2353 / ((_2357 * _2357) * 3.141590118408203125));
        float _2380 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2305 = (((_2366 * cbLight._m0[_2315].x) * _2379) * _2380) + _2241;
        _2307 = (((_2366 * cbLight._m0[_2315].y) * _2379) * _2380) + _2242;
        _2309 = (((_2366 * cbLight._m0[_2315].z) * _2379) * _2380) + _2243;
    }
    float _2415;
    float _2417;
    float _2419;
    if (_2047)
    {
        _2415 = _2305;
        _2417 = _2307;
        _2419 = _2309;
    }
    else
    {
        uint _2426 = _1956 + 3u;
        uint _2430 = _1956 + 11u;
        float _2444 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2426].w)) * _712) * 0.949999988079071044921875);
        float _2445 = _2444 * _2444;
        float _2446 = cbLight._m0[_2426].x + _788;
        float _2447 = cbLight._m0[_2426].y + _789;
        float _2448 = cbLight._m0[_2426].z + _790;
        float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
        float _2453 = _2452 * _2446;
        float _2454 = _2452 * _2447;
        float _2455 = _2452 * _2448;
        float _2456 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2426].xyz));
        float _4396 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2459 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2460 = dot(vec3(_709, _710, _711), vec3(_2453, _2454, _2455));
        float _4407 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2464 = dot(vec3(cbLight._m0[_2426].xyz), vec3(_2453, _2454, _2455));
        float _4418 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2468 = _2445 * _2445;
        float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
        float _2481 = (exp2(log2(1.0 - (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2482 = 1.0 - _2445;
        float _2492 = (0.5 / (((_2121 * ((_2459 * _2482) + _2445)) + 9.9999999392252902907785028219223e-09) + (((_2121 * _2482) + _2445) * _2459))) * _2459;
        float _4429 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2494 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
        float _2495 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
        _2415 = (((_2481 * cbLight._m0[_2430].x) * _2494) * _2495) + _2305;
        _2417 = (((_2481 * cbLight._m0[_2430].y) * _2494) * _2495) + _2307;
        _2419 = (((_2481 * cbLight._m0[_2430].z) * _2494) * _2495) + _2309;
    }
    float _2630;
    float _2632;
    float _2634;
    float _2636;
    float _2638;
    float _2640;
    if (_1954.y == 0u)
    {
        float _2570 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2571 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2570;
        float _2572 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2570;
        float _2573 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2570;
        uvec4 _2585 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2586 = _2585.x;
        uint _2597 = uint((float(_2585.y) * floor(float(uint(cbSceneParam._m0[85u].y * _797) / _2586))) + floor(float(uint(cbSceneParam._m0[85u].x * _796) / _2586)));
        float _2607 = (log2(_2573 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2608 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        uint _2611 = uint(isnan(14.0) ? _2608 : (isnan(_2608) ? 14.0 : min(_2608, 14.0)));
        uvec4 _2616 = texelFetch(g_lightClusterGridBuffer, int(((_2611 << 2u) + (_2597 << 6u)) >> 2u));
        uint _2617 = _2616.x;
        uint _2618 = _2585.z;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        if (((((1u << ((_2618 >> 4u) & 15u)) + 4294967295u) & _2617) == 0u) || ((_2618 & 240u) == 0u))
        {
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
        }
        else
        {
            float _2713;
            float _2715;
            float _2717;
            float _2719;
            float _2721;
            float _2723;
            float _2856 = 0.0;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            uint _2862 = 0u;
            uint _2871;
            bool _2872;
            for (;;)
            {
                _2871 = texelFetch(g_lightClassification, int((((_2611 << 5u) + (_2597 << 9u)) + (_2862 << 2u)) >> 2u)).x;
                _2872 = _2871 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2872)
                {
                    frontier_phi_61_pred = _2856;
                    frontier_phi_61_pred_1 = _2861;
                    frontier_phi_61_pred_2 = _2860;
                    frontier_phi_61_pred_3 = _2859;
                    frontier_phi_61_pred_4 = _2858;
                    frontier_phi_61_pred_5 = _2857;
                }
                else
                {
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    uint _2986;
                    _2980 = _2856;
                    _2981 = _2857;
                    _2982 = _2858;
                    _2983 = _2859;
                    _2984 = _2860;
                    _2985 = _2861;
                    _2986 = _2871;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    for (;;)
                    {
                        uint _2990 = uint(findLSB(_2986)) + (_2862 << 5u);
                        uint _2987 = (_2986 + 4294967295u) & _2986;
                        uint _2992 = _2990 * 48u;
                        vec4 _3006 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2992)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 3u)).x));
                        uint _3012 = (_2990 * 48u) + 4u;
                        vec4 _3025 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3012)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 3u)).x));
                        uint _3031 = (_2990 * 48u) + 8u;
                        vec3 _3042 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3031)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 2u)).x));
                        float _3046 = _3006.x - _2571;
                        float _3047 = _3006.y - _2572;
                        float _3048 = _3006.z - _2573;
                        float _3049 = dot(vec3(_3046, _3047, _3048), vec3(_3046, _3047, _3048));
                        float _3052 = inversesqrt(_3049);
                        float _3053 = _3052 * _3046;
                        float _3054 = _3052 * _3047;
                        float _3055 = _3052 * _3048;
                        float _3056 = dot(vec3(_815, _818, _821), vec3(_3053, _3054, _3055));
                        float _3061 = 1.0 - (_3049 * _3006.w);
                        float _4455 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                        float _3062 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                        float _3063 = sqrt(_3049) * _3025.w;
                        float _3066 = 1.39999997615814208984375 / (_3063 + 1.39999997615814208984375);
                        float _3067 = _3066 * _3066;
                        float _3070 = ((1.0 - _3067) * _3056) + _3067;
                        float _3073 = _3063 * _3063;
                        float _3077 = ((isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0))) * _3062) / ((_3073 * 0.699999988079071044921875) + 1.0);
                        float _3081 = (-0.0) - _2571;
                        float _3082 = (-0.0) - _2572;
                        float _3083 = (-0.0) - _2573;
                        float _3087 = inversesqrt(dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083)));
                        float _3088 = _3087 * _3081;
                        float _3089 = _3087 * _3082;
                        float _3090 = _3087 * _3083;
                        float _3098 = exp2(log2(1.0 / ((_3073 * 3.5) + 5.0)) * 0.25);
                        float _3099 = 1.0 - _878;
                        float _3106 = sqrt(1.0 - ((1.0 - (_3099 * _3099)) * (1.0 - (_3098 * _3098))));
                        float _3107 = _3106 * _3106;
                        float _3108 = _3107 * _3107;
                        float _3109 = _3088 + _3053;
                        float _3110 = _3089 + _3054;
                        float _3111 = _3090 + _3055;
                        float _3115 = inversesqrt(dot(vec3(_3109, _3110, _3111), vec3(_3109, _3110, _3111)));
                        float _3119 = dot(vec3(_815, _818, _821), vec3(_3088, _3089, _3090));
                        float _4471 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                        float _3122 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                        float _3123 = dot(vec3(_815, _818, _821), vec3(_3115 * _3109, _3115 * _3110, _3115 * _3111));
                        float _4482 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3126 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                        float _3130 = ((_3126 * _3126) * (_3108 + (-1.0))) + 1.0;
                        float _3131 = _3066 * _3107;
                        float _3132 = _3131 * _3131;
                        float _3135 = ((1.0 - _3132) * _3056) + _3132;
                        float _4493 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3136 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                        float _3137 = 1.0 - _3107;
                        float _3147 = (0.5 / (((_3136 * ((_3122 * _3137) + _3107)) + 9.9999999392252902907785028219223e-09) + (((_3136 * _3137) + _3107) * _3122))) * _3136;
                        float _4504 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3158 = (((_3108 * 3.1415927410125732421875) * (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) / ((_3130 * _3130) * ((_3073 * 2.1991131305694580078125) + 3.141590118408203125))) * _3062;
                        _2915 = (_3077 * _3025.x) + _2983;
                        _2916 = (_3077 * _3025.y) + _2984;
                        _2917 = (_3077 * _3025.z) + _2985;
                        _2912 = (_3158 * _3042.x) + _2980;
                        _2913 = (_3158 * _3042.y) + _2981;
                        _2914 = (_3158 * _3042.z) + _2982;
                        if (_2987 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2980 = _2912;
                            _2981 = _2913;
                            _2982 = _2914;
                            _2983 = _2915;
                            _2984 = _2916;
                            _2985 = _2917;
                            _2986 = _2987;
                        }
                    }
                    frontier_phi_61_pred = _2912;
                    frontier_phi_61_pred_1 = _2917;
                    frontier_phi_61_pred_2 = _2916;
                    frontier_phi_61_pred_3 = _2915;
                    frontier_phi_61_pred_4 = _2914;
                    frontier_phi_61_pred_5 = _2913;
                }
                _2713 = frontier_phi_61_pred;
                _2723 = frontier_phi_61_pred_1;
                _2721 = frontier_phi_61_pred_2;
                _2719 = frontier_phi_61_pred_3;
                _2717 = frontier_phi_61_pred_4;
                _2715 = frontier_phi_61_pred_5;
                uint _2863 = _2862 + 1u;
                if (_2863 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2856 = _2713;
                    _2857 = _2715;
                    _2858 = _2717;
                    _2859 = _2719;
                    _2860 = _2721;
                    _2861 = _2723;
                    _2862 = _2863;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
        }
        uvec4 _2726 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2727 = _2726.z;
        uint _2729 = (_2727 >> 8u) & 15u;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        if (((4294967295u << _2729) & _2617) == 0u)
        {
            _2824 = _2712;
            _2826 = _2714;
            _2828 = _2716;
            _2830 = _2718;
            _2832 = _2720;
            _2834 = _2722;
        }
        else
        {
            float _2849 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
            float _2850 = _2849 * _2571;
            float _2851 = _2849 * _2572;
            float _2852 = _2849 * _2573;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2729 < ((_2727 >> 12u) & 15u))
            {
                float _2825;
                float _2827;
                float _2829;
                float _2831;
                float _2833;
                float _2835;
                float _2963 = _2712;
                float _2964 = _2714;
                float _2965 = _2716;
                float _2966 = _2718;
                float _2967 = _2720;
                float _2968 = _2722;
                uint _2969 = _2729;
                uint _2978;
                bool _2979;
                for (;;)
                {
                    _2978 = texelFetch(g_lightClassification, int((((_2611 << 5u) + (_2597 << 9u)) + (_2969 << 2u)) >> 2u)).x;
                    _2979 = _2978 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2979)
                    {
                        frontier_phi_67_pred = _2966;
                        frontier_phi_67_pred_1 = _2967;
                        frontier_phi_67_pred_2 = _2968;
                        frontier_phi_67_pred_3 = _2965;
                        frontier_phi_67_pred_4 = _2964;
                        frontier_phi_67_pred_5 = _2963;
                    }
                    else
                    {
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3176 = _2963;
                        float _3177 = _2964;
                        float _3178 = _2965;
                        float _3179 = _2966;
                        float _3180 = _2967;
                        float _3181 = _2968;
                        uint _3182 = _2978;
                        uint _3183;
                        vec4 _3208;
                        float _3209;
                        vec4 _3224;
                        vec3 _3236;
                        vec4 _3251;
                        vec4 _3266;
                        float _3312;
                        bool _3313;
                        for (;;)
                        {
                            uint _3193 = ((_2969 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3182));
                            _3183 = (_3182 + 4294967295u) & _3182;
                            uint _3195 = _3193 * 40u;
                            _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            _3209 = _3208.w;
                            uint _3211 = (_3193 * 40u) + 4u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            uint _3226 = (_3193 * 40u) + 8u;
                            _3236 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x));
                            uint _3238 = (_3193 * 40u) + 16u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3253 = (_3193 * 40u) + 20u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3268 = (_3193 * 40u) + 24u;
                            vec4 _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            uint _3287 = (_3193 * 40u) + 28u;
                            vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            _3312 = fma(_2573, _3300.z, fma(_2572, _3300.y, _3300.x * _2571)) + _3300.w;
                            _3313 = !((fma(_2573, _3281.z, fma(_2572, _3281.y, _3281.x * _2571)) + _3281.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3313)
                            {
                                float _3340 = _3208.x - _2571;
                                float _3341 = _3208.y - _2572;
                                float _3342 = _3208.z - _2573;
                                float _3343 = dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342));
                                float _3346 = inversesqrt(_3343);
                                float _3347 = _3346 * _3340;
                                float _3348 = _3346 * _3341;
                                float _3349 = _3346 * _3342;
                                float _3353 = 1.0 - (_3343 / (_3209 * _3209));
                                float _4515 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3354 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                                float _3358 = sqrt(_3343) * _3224.w;
                                float _3360 = 1.39999997615814208984375 / (_3358 + 1.39999997615814208984375);
                                float _3361 = _3360 * _3360;
                                float _3364 = ((1.0 - _3361) * dot(vec3(_3347, _3348, _3349), vec3(_815, _818, _821))) + _3361;
                                float _3367 = _3358 * _3358;
                                float _3371 = (fma(_2573, _3251.z, fma(_2572, _3251.y, _3251.x * _2571)) + _3251.w) / _3312;
                                float _3372 = (fma(_2573, _3266.z, fma(_2572, _3266.y, _3266.x * _2571)) + _3266.w) / _3312;
                                float _3376 = 1.0 - dot(vec2(_3371, _3372), vec2(_3371, _3372));
                                float _4531 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3377 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3378 = _3377 * (((isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0))) * _3354) / ((_3367 * 0.699999988079071044921875) + 1.0));
                                float _3390 = exp2(log2(1.0 / ((_3367 * 3.5) + 5.0)) * 0.25);
                                float _3391 = 1.0 - _878;
                                float _3398 = sqrt(1.0 - ((1.0 - (_3391 * _3391)) * (1.0 - (_3390 * _3390))));
                                float _3399 = _3398 * _3398;
                                float _3400 = _3399 * _3399;
                                float _3401 = _3347 - _2850;
                                float _3402 = _3348 - _2851;
                                float _3403 = _3349 - _2852;
                                float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                                float _3411 = dot(vec3(_815, _818, _821), vec3((-0.0) - _2850, (-0.0) - _2851, (-0.0) - _2852));
                                float _4542 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3414 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                                float _3415 = dot(vec3(_815, _818, _821), vec3(_3407 * _3401, _3407 * _3402, _3407 * _3403));
                                float _4553 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3418 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3422 = ((_3418 * _3418) * (_3400 + (-1.0))) + 1.0;
                                float _3423 = _3360 * _3399;
                                float _3424 = _3423 * _3423;
                                float _3430 = ((1.0 - _3424) * dot(vec3(_815, _818, _821), vec3(_3347, _3348, _3349))) + _3424;
                                float _4564 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3431 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3432 = 1.0 - _3399;
                                float _3442 = (0.5 / (((_3431 * ((_3414 * _3432) + _3399)) + 9.9999999392252902907785028219223e-09) + (((_3431 * _3432) + _3399) * _3414))) * _3431;
                                float _4575 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3452 = (_3377 * _3354) * (((_3400 * 3.1415927410125732421875) * (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) / ((_3422 * _3422) * ((_3367 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3452 * _3236.x;
                                frontier_phi_73_pred_1 = _3452 * _3236.y;
                                frontier_phi_73_pred_2 = _3378 * _3224.z;
                                frontier_phi_73_pred_3 = _3378 * _3224.y;
                                frontier_phi_73_pred_4 = _3378 * _3224.x;
                                frontier_phi_73_pred_5 = _3452 * _3236.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3456 = frontier_phi_73_pred;
                            _3457 = frontier_phi_73_pred_1;
                            _3461 = frontier_phi_73_pred_2;
                            _3460 = frontier_phi_73_pred_3;
                            _3459 = frontier_phi_73_pred_4;
                            _3458 = frontier_phi_73_pred_5;
                            _3166 = _3459 + _3179;
                            _3167 = _3460 + _3180;
                            _3168 = _3461 + _3181;
                            _3163 = _3456 + _3176;
                            _3164 = _3457 + _3177;
                            _3165 = _3458 + _3178;
                            if (_3183 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3183;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3166;
                        frontier_phi_67_pred_1 = _3167;
                        frontier_phi_67_pred_2 = _3168;
                        frontier_phi_67_pred_3 = _3165;
                        frontier_phi_67_pred_4 = _3164;
                        frontier_phi_67_pred_5 = _3163;
                    }
                    _2831 = frontier_phi_67_pred;
                    _2833 = frontier_phi_67_pred_1;
                    _2835 = frontier_phi_67_pred_2;
                    _2829 = frontier_phi_67_pred_3;
                    _2827 = frontier_phi_67_pred_4;
                    _2825 = frontier_phi_67_pred_5;
                    uint _2970 = _2969 + 1u;
                    if (_2970 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2963 = _2825;
                        _2964 = _2827;
                        _2965 = _2829;
                        _2966 = _2831;
                        _2967 = _2833;
                        _2968 = _2835;
                        _2969 = _2970;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2833;
                frontier_phi_55_56_ladder_1 = _2835;
                frontier_phi_55_56_ladder_2 = _2831;
                frontier_phi_55_56_ladder_3 = _2829;
                frontier_phi_55_56_ladder_4 = _2827;
                frontier_phi_55_56_ladder_5 = _2825;
            }
            else
            {
                frontier_phi_55_56_ladder = _2720;
                frontier_phi_55_56_ladder_1 = _2722;
                frontier_phi_55_56_ladder_2 = _2718;
                frontier_phi_55_56_ladder_3 = _2716;
                frontier_phi_55_56_ladder_4 = _2714;
                frontier_phi_55_56_ladder_5 = _2712;
            }
            _2824 = frontier_phi_55_56_ladder_5;
            _2826 = frontier_phi_55_56_ladder_4;
            _2828 = frontier_phi_55_56_ladder_3;
            _2830 = frontier_phi_55_56_ladder_2;
            _2832 = frontier_phi_55_56_ladder;
            _2834 = frontier_phi_55_56_ladder_1;
        }
        float _2839 = isnan(1.0) ? _859 : (isnan(_859) ? 1.0 : min(_859, 1.0));
        _2630 = (_2839 * _2830) + _2085;
        _2632 = (_2839 * _2832) + _2087;
        _2634 = (_2839 * _2834) + _2089;
        _2636 = ((_2824 * 0.039999999105930328369140625) * _2839) + _2415;
        _2638 = ((_2826 * 0.039999999105930328369140625) * _2839) + _2417;
        _2640 = ((_2828 * 0.039999999105930328369140625) * _2839) + _2419;
    }
    else
    {
        _2630 = _2085;
        _2632 = _2087;
        _2634 = _2089;
        _2636 = _2415;
        _2638 = _2417;
        _2640 = _2419;
    }
    float _4591 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4602 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4613 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    uint _2660 = _269 + 6u;
    vec4 _2677 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1898, _1899, (log2((isnan(cbSceneParam._m0[77u].w) ? _730 : (isnan(_730) ? cbSceneParam._m0[77u].w : min(_730, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2679 = _2677.x;
    float _2680 = _2677.y;
    float _2681 = _2677.z;
    float _2682 = _2677.w;
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    if (_730 > cbSceneParam._m0[78u].w)
    {
        float _2737 = isnan(_730) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _730 : min(cbSceneParam._m0[80u].w, _730));
        float _2738 = _2737 / _730;
        float _2749 = _2738 * _781;
        float _2750 = _782 * _2738;
        float _2751 = (-0.0) - _2750;
        float _2753 = _2738 * _783;
        float _2755 = (cbSceneParam._m0[77u].w * _2751) / _2737;
        float _2756 = _2755 + cbSceneParam._m0[79u].w;
        float _2757 = cbSceneParam._m0[79u].w - _2750;
        float _2763 = sqrt(((_2749 * _2749) + (_2750 * _2750)) + (_2753 * _2753));
        float _2766 = (1.0 - (cbSceneParam._m0[77u].w / _2737)) * _2763;
        float _2771 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2773 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2925;
        if (abs((_2751 - _2755) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2925 = ((((_2756 > 0.0) ? exp2(_2771 * _2756) : (2.0 - exp2(_2773 * _2756))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2766;
        }
        else
        {
            float _2885 = 1.0 / cbSceneParam._m0[80u].x;
            float _2886 = isnan(_2757) ? _2756 : (isnan(_2756) ? _2757 : max(_2756, _2757));
            float _2887 = isnan(_2757) ? _2756 : (isnan(_2756) ? _2757 : min(_2756, _2757));
            float _2896 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : min(_2886, 0.0));
            float _2897 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : min(_2887, 0.0));
            _2925 = ((abs(_2763 / _2751) * cbSceneParam._m0[80u].y) * ((((_2896 - _2897) * 2.0) - ((exp2(_2771 * (isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0)))) - exp2(_2771 * (isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0))))) * _2885)) - ((exp2(_2773 * _2896) - exp2(_2773 * _2897)) * _2885))) + (_2766 * cbSceneParam._m0[80u].z);
        }
        vec4 _2927 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1898, _1899, 1.0), 0.0);
        float _2936 = exp2((_2925 * (-1.44269502162933349609375)) * (1.0 - _2927.w));
        float _2937 = log2(_2936);
        float _2953 = log2(_2682);
        _2775 = (exp2(_2953 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2937 * cbSceneParam._m0[78u].x)) * _2927.x) / cbSceneParam._m0[78u].x)) + _2679;
        _2777 = (exp2(_2953 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2937 * cbSceneParam._m0[78u].y)) * _2927.y) / cbSceneParam._m0[78u].y)) + _2680;
        _2779 = (exp2(_2953 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2937 * cbSceneParam._m0[78u].z)) * _2927.z) / cbSceneParam._m0[78u].z)) + _2681;
        _2781 = _2936 * _2682;
    }
    else
    {
        _2775 = _2679;
        _2777 = _2680;
        _2779 = _2681;
        _2781 = _2682;
    }
    float _2792 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2793 = _2792 == 3.0;
    float _2794 = log2(_2781);
    float _2801 = exp2(_2794 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2630 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _859))) + (((((_1875 * (_1923.x / _1929)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1666) * _1944)) + _2636) * cbPerFrame._m0[3u].x));
    float _2802 = exp2(_2794 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2632 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _859))) + (((((_1875 * (_1923.y / _1929)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1666) * _1944)) + _2638) * cbPerFrame._m0[3u].x));
    float _2803 = exp2(_2794 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2634 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _859))) + (((((_1875 * (_1923.z / _1929)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1666) * _1944)) + _2640) * cbPerFrame._m0[3u].x));
    float _2812 = (_2792 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2812 * (_2793 ? _2801 : (_2801 + (cbSceneParam._m0[72u].w * _2775)));
    SV_Target.y = _2812 * (_2793 ? _2802 : (_2802 + (cbSceneParam._m0[72u].w * _2777)));
    SV_Target.z = _2812 * (_2793 ? _2803 : (_2803 + (cbSceneParam._m0[72u].w * _2779)));
    SV_Target.w = cbInstanceData._m0[_2660].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2660].w;
}


