#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[33];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1235;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3625 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3636 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3647 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _290) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _291) + cbTextureTilingScale._m0[13u].w));
    vec4 _328 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _333 = _328.x * cbMtdParam._m0[11u].x;
    float _334 = _328.y * cbMtdParam._m0[11u].y;
    float _335 = _328.z * cbMtdParam._m0[11u].z;
    vec4 _354 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _290) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _291) + cbTextureTilingScale._m0[5u].w));
    vec4 _387 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[28u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[28u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _402 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _419 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_389 - _402) * cbMtdParam._m0[24u].x) + _402) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3658 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _427 = (_420 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _428 = (_420 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _429 = (_420 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    float _433 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _304.x) * _427;
    float _436 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _304.y) * _428;
    float _439 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _304.z) * _429;
    float _446 = ((_427 - _433) * (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) + _433;
    float _447 = ((_428 - _436) * (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) + _436;
    float _448 = ((_429 - _439) * (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) + _439;
    vec4 _461 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _290) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _291) + cbTextureTilingScale._m0[20u].w));
    vec4 _486 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _488 = _486.x;
    float _489 = _486.y;
    float _494 = cbMtdParam._m0[25u].w * _486.z;
    float _3669 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _495 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    vec4 _508 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    float _516 = cbMtdParam._m0[26u].x * _508.z;
    float _3680 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _526 = (((isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) - _495) * _420) + _495;
    float _529 = ((((_508.x - _488) * _420) + _488) * 2.0) + (-1.0);
    float _530 = ((((_508.y - _489) * _420) + _489) * 2.0) + (-1.0);
    float _531 = dot(vec2(_529, _530), vec2(_529, _530));
    float _3691 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _536 = sqrt(1.0 - (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))));
    vec4 _559 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _566 = cbMtdParam._m0[25u].z * _559.z;
    float _3702 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _574 = (_529 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_461.x * 2.0) + (-1.0)))) + (((_559.x * 2.0) + (-1.0)) * cbMtdParam._m0[27u].x);
    float _575 = (_530 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_461.y * 2.0) + (-1.0)))) + (((_559.y * 2.0) + (-1.0)) * cbMtdParam._m0[27u].x);
    vec4 _587 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _589 = _587.x;
    float _590 = 1.0 - _589;
    float _616 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_589 - _590) * cbMtdParam._m0[24u].w) + _590) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3713 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _617 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _625 = ((((cbMtdParam._m0[10u].x - _446) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _617) + _446;
    float _626 = ((((cbMtdParam._m0[10u].y - _447) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _617) + _447;
    float _627 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _448)) * _617) + _448;
    float _632 = (((_461.z - _526) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _526;
    float _636 = (((isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) - _632) * cbMtdParam._m0[19u].w) + _632;
    float _640 = ((cbMtdParam._m0[23u].y - _636) * _617) + _636;
    float _644 = ((1.0 - _640) * cbMtdParam._m0[26u].y) + _640;
    float _3724 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _645 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    vec4 _667 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[28u].w * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[29u].x * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _673 = (_667.x * 2.0) + (-1.0);
    float _674 = (_667.y * 2.0) + (-1.0);
    float _675 = dot(vec2(_673, _674), vec2(_673, _674));
    float _3735 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _691 = (_617 * (((cbMtdParam._m0[22u].z * _574) - _574) + _673)) + _574;
    float _692 = (_617 * (((cbMtdParam._m0[22u].z * _575) - _575) + _674)) + _575;
    float _693 = (_617 * (sqrt(1.0 - (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) - _536)) + _536;
    float _695 = cbMtdParam._m0[22u].x + _559.w;
    float _700 = fma(_693, _239 * NORMAL.x, fma(_692, _246 * TANGENT.x, (_232 * _224) * _691));
    float _703 = fma(_693, _239 * NORMAL.y, fma(_692, _246 * TANGENT.y, (_232 * _225) * _691));
    float _706 = fma(_693, _239 * NORMAL.z, fma(_692, _246 * TANGENT.z, (_232 * _226) * _691));
    float _710 = inversesqrt(dot(vec3(_700, _703, _706), vec3(_700, _703, _706)));
    float _711 = _710 * _700;
    float _712 = _710 * _703;
    float _713 = _710 * _706;
    float _3746 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _714 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _3768 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _3779 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _3790 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _732 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _773 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _783 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _773);
    float _784 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _773);
    float _785 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _773);
    float _789 = inversesqrt(dot(vec3(_783, _784, _785), vec3(_783, _784, _785)));
    float _790 = _783 * _789;
    float _791 = _784 * _789;
    float _792 = _785 * _789;
    float _798 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _799 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _817 = fma(_713, cbSceneParam._m0[5u].z, fma(_712, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _711));
    float _820 = fma(_713, cbSceneParam._m0[6u].z, fma(_712, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _711));
    float _823 = fma(_713, cbSceneParam._m0[7u].z, fma(_712, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _711));
    uint _837 = (_271 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _843 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * cbInstanceData._m0[_837].x;
    float _844 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) * cbInstanceData._m0[_837].y;
    float _845 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_837].z;
    float _3801 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _846 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _847 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _848 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    vec4 _857 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _798, cbSceneParam._m0[86u].y * _799));
    float _861 = ((isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * TEXCOORD_5.w) * _857.x;
    float _862 = dot(vec3(_711, _712, _713), vec3(_790, _791, _792));
    float _865 = _862 * 2.0;
    float _869 = (_865 * _711) - _790;
    float _870 = (_865 * _712) - _791;
    float _871 = (_865 * _713) - _792;
    float _878 = abs(dot(vec3(_790, _791, _792), vec3(_711, _712, _713)));
    float _3834 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _880 = sqrt(_714);
    float _893 = exp2((_880 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_880 * 3.0));
    float _925 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _933 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1234;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _959 = fma(_933, cbModelParam._m0[26u].z, fma(_929, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _925));
        float _963 = fma(_933, cbModelParam._m0[27u].z, fma(_929, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _925));
        float _967 = fma(_933, cbModelParam._m0[28u].z, fma(_929, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _925));
        float _992 = _925 + _711;
        float _993 = _929 + _712;
        float _994 = _933 + _713;
        float _1004 = fma(_994, cbModelParam._m0[26u].z, fma(_993, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _992)) - _959;
        float _1005 = fma(_994, cbModelParam._m0[27u].z, fma(_993, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _992)) - _963;
        float _1006 = fma(_994, cbModelParam._m0[28u].z, fma(_993, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _992)) - _967;
        float _1010 = inversesqrt(dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006)));
        float _1023 = ((_1010 * _1004) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_959 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1010 * _1005) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_963 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1010 * _1006) / cbModelParam._m0[34u].z) + ((((((_967 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        float _1062 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1028.x + (-0.5));
        float _1064 = _1062 * (_1028.y + (-0.5));
        float _1065 = _1062 * (_1028.z + (-0.5));
        float _1072 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1035.x + (-0.5));
        float _1074 = _1072 * (_1035.y + (-0.5));
        float _1075 = _1072 * (_1035.z + (-0.5));
        float _1082 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1042.x + (-0.5));
        float _1084 = _1082 * (_1042.y + (-0.5));
        float _1085 = _1082 * (_1042.z + (-0.5));
        float _1092 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1049.x + (-0.5));
        float _1094 = _1092 * (_1049.y + (-0.5));
        float _1095 = _1092 * (_1049.z + (-0.5));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = _1063 * 0.5;
        float _1100 = _1073 * 0.5;
        float _1101 = _1083 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1116 = (dot(vec3(_711, _712, _713), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1126 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3882 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1128 + 1.0))) + _1133) * _1096;
        float _1143 = _1064 * 0.5;
        float _1144 = _1074 * 0.5;
        float _1145 = _1084 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_711, _712, _713), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3915 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1170 + 1.0))) + _1175) * _1097;
        float _1185 = _1065 * 0.5;
        float _1186 = _1075 * 0.5;
        float _1187 = _1085 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_711, _712, _713), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3948 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1212 + 1.0))) + _1217) * _1098;
        _1234 = _1065;
        _1236 = _1064;
        _1237 = _1063;
        _1238 = _1075;
        _1239 = _1074;
        _1240 = _1073;
        _1241 = _1085;
        _1242 = _1084;
        _1243 = _1083;
        _1244 = _1098;
        _1245 = _1097;
        _1246 = _1096;
        _1247 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
    }
    else
    {
        _1234 = _1235;
        _1236 = _1235;
        _1237 = _1235;
        _1238 = _1235;
        _1239 = _1235;
        _1240 = _1235;
        _1241 = _1235;
        _1242 = _1235;
        _1243 = _1235;
        _1244 = _1235;
        _1245 = _1235;
        _1246 = _1235;
        _1247 = 0.0;
        _1248 = 0.0;
        _1249 = 0.0;
    }
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1273 = fma(_933, cbModelParam._m0[30u].z, fma(_929, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _925));
        float _1277 = fma(_933, cbModelParam._m0[31u].z, fma(_929, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _925));
        float _1281 = fma(_933, cbModelParam._m0[32u].z, fma(_929, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _925));
        float _1304 = _925 + _711;
        float _1305 = _929 + _712;
        float _1306 = _933 + _713;
        float _1316 = fma(_1306, cbModelParam._m0[30u].z, fma(_1305, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1304)) - _1273;
        float _1317 = fma(_1306, cbModelParam._m0[31u].z, fma(_1305, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1304)) - _1277;
        float _1318 = fma(_1306, cbModelParam._m0[32u].z, fma(_1305, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1304)) - _1281;
        float _1322 = inversesqrt(dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318)));
        float _1335 = ((_1322 * _1316) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1273 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1336 = ((_1322 * _1317) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1277 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1337 = ((_1322 * _1318) / cbModelParam._m0[35u].z) + ((((((_1281 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        float _1372 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1339.x + (-0.5));
        float _1374 = _1372 * (_1339.y + (-0.5));
        float _1375 = _1372 * (_1339.z + (-0.5));
        float _1382 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1346.x + (-0.5));
        float _1384 = _1382 * (_1346.y + (-0.5));
        float _1385 = _1382 * (_1346.z + (-0.5));
        float _1392 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1353.x + (-0.5));
        float _1394 = _1392 * (_1353.y + (-0.5));
        float _1395 = _1392 * (_1353.z + (-0.5));
        float _1402 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1360.x + (-0.5));
        float _1404 = _1402 * (_1360.y + (-0.5));
        float _1405 = _1402 * (_1360.z + (-0.5));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = _1373 * 0.5;
        float _1410 = _1383 * 0.5;
        float _1411 = _1393 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_711, _712, _713), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _4011 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1436 + 1.0))) + _1441) * _1406;
        float _1451 = _1374 * 0.5;
        float _1452 = _1384 * 0.5;
        float _1453 = _1394 * 0.5;
        float _1454 = dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453));
        float _1459 = (_1454 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1454);
        float _1467 = (dot(vec3(_711, _712, _713), vec3(_1459 * _1451, _1459 * _1452, _1459 * _1453)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1476 = sqrt(((_1452 * _1452) + (_1451 * _1451)) + (_1453 * _1453)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1478 = _1477 * 2.0;
        float _1482 = (1.0 - _1477) / (_1477 + 1.0);
        float _4044 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1492 = ((((1.0 - _1483) * (_1478 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1478 + 1.0))) + _1483) * _1407;
        float _1493 = _1375 * 0.5;
        float _1494 = _1385 * 0.5;
        float _1495 = _1395 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_711, _712, _713), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _4077 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1520 + 1.0))) + _1525) * _1408;
        _1542 = _1375;
        _1543 = _1374;
        _1544 = _1373;
        _1545 = _1385;
        _1546 = _1384;
        _1547 = _1383;
        _1548 = _1395;
        _1549 = _1394;
        _1550 = _1393;
        _1551 = _1408;
        _1552 = _1407;
        _1553 = _1406;
        _1554 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
        _1555 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)));
        _1556 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
    }
    else
    {
        _1542 = _1235;
        _1543 = _1235;
        _1544 = _1235;
        _1545 = _1235;
        _1546 = _1235;
        _1547 = _1235;
        _1548 = _1235;
        _1549 = _1235;
        _1550 = _1235;
        _1551 = _1235;
        _1552 = _1235;
        _1553 = _1235;
        _1554 = 0.0;
        _1555 = 0.0;
        _1556 = 0.0;
    }
    float _1566 = (cbModelParam._m0[1u].x * (_1554 - _1247)) + _1247;
    float _1567 = (cbModelParam._m0[1u].x * (_1555 - _1248)) + _1248;
    float _1568 = (cbModelParam._m0[1u].x * (_1556 - _1249)) + _1249;
    float _1589 = fma(_1568, cbSceneParam._m0[89u].z, fma(_1567, cbSceneParam._m0[89u].y, _1566 * cbSceneParam._m0[89u].x));
    float _1592 = fma(_1568, cbSceneParam._m0[90u].z, fma(_1567, cbSceneParam._m0[90u].y, _1566 * cbSceneParam._m0[90u].x));
    float _1595 = fma(_1568, cbSceneParam._m0[91u].z, fma(_1567, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1566));
    float _1610 = _869 * 0.5;
    float _1611 = _870 * 0.5;
    float _1612 = _871 * 0.5;
    float _1613 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1544, _1547, _1550, _1553));
    float _1616 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1543, _1546, _1549, _1552));
    float _1619 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1542, _1545, _1548, _1551));
    float _1653;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1626 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1234, _1238, _1241, _1244));
        float _1630 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1236, _1239, _1242, _1245));
        float _1634 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1237, _1240, _1243, _1246));
        float _1641 = dot(vec4(cbModelParam._m0[39u]), vec4(_1610, _1611, _1612, 1.0));
        _1653 = dot(vec3(isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1641) ? 0.0 : (isnan(0.0) ? _1641 : max(0.0, _1641))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1653 = 1.0;
    }
    float _1664;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1655 = dot(vec4(cbModelParam._m0[40u]), vec4(_1610, _1611, _1612, 1.0));
        _1664 = dot(vec3(isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1655) ? 0.0 : (isnan(0.0) ? _1655 : max(0.0, _1655))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1664 = 1.0;
    }
    float _1668 = (_1664 * cbModelParam._m0[1u].x) + (_1653 * (1.0 - cbModelParam._m0[1u].x));
    float _1678 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _714);
    float _1679 = isnan(_1678) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1678 : min(cbModelParam._m0[25u].z, _1678));
    float _1761;
    float _1763;
    float _1765;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1728 = fma(_933, cbModelParam._m0[13u].z, fma(_929, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _925)) + cbModelParam._m0[13u].w;
        float _1732 = fma(_933, cbModelParam._m0[14u].z, fma(_929, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _925)) + cbModelParam._m0[14u].w;
        float _1736 = fma(_933, cbModelParam._m0[15u].z, fma(_929, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _925)) + cbModelParam._m0[15u].w;
        float _1739 = fma(_871, cbModelParam._m0[13u].z, fma(_870, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _869));
        float _1742 = fma(_871, cbModelParam._m0[14u].z, fma(_870, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _869));
        float _1745 = fma(_871, cbModelParam._m0[15u].z, fma(_870, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _869));
        float _1773;
        if (_1739 > 0.0)
        {
            _1773 = abs((1.0 - _1728) / _1739);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1728 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1773 = frontier_phi_14_12_ladder;
        }
        float _2056;
        if (_1742 > 0.0)
        {
            _2056 = abs((1.0 - _1732) / _1742);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1732 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2056 = frontier_phi_23_19_ladder;
        }
        float _2302;
        if (_1745 > 0.0)
        {
            _2302 = abs((1.0 - _1736) / _1745);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1736 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2302 = frontier_phi_35_30_ladder;
        }
        float _2304 = isnan(_2056) ? _1773 : (isnan(_1773) ? _2056 : min(_1773, _2056));
        float _2305 = isnan(_2302) ? _2304 : (isnan(_2304) ? _2302 : min(_2304, _2302));
        float _2309 = (_2305 * _1739) + _1728;
        float _2310 = (_2305 * _1742) + _1732;
        float _2311 = (_2305 * _1745) + _1736;
        float _2312 = _2305 * 9.9999997473787516355514526367188e-05;
        float _2314 = (-1.0) - _2312;
        float _2316 = _2312 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2311 > _2316) || ((_2311 < _2314) || ((_2310 > _2316) || ((_2310 < _2314) || ((_2309 < _2314) || (_2309 > _2316))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2435 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2311, cbModelParam._m0[9u].z, fma(_2310, cbModelParam._m0[9u].y, _2309 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2311, cbModelParam._m0[10u].z, fma(_2310, cbModelParam._m0[10u].y, _2309 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2311, cbModelParam._m0[11u].z, fma(_2310, cbModelParam._m0[11u].y, _2309 * cbModelParam._m0[11u].x))), _1679);
            frontier_phi_13_35_ladder = _2435.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2435.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2435.x * cbModelParam._m0[1u].y;
        }
        _1761 = frontier_phi_13_35_ladder_2;
        _1763 = frontier_phi_13_35_ladder_1;
        _1765 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1749 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_869, _870, _871), _1679);
        _1761 = _1749.x * cbModelParam._m0[1u].y;
        _1763 = _1749.y * cbModelParam._m0[1u].y;
        _1765 = _1749.z * cbModelParam._m0[1u].y;
    }
    float _1769 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _714);
    float _1770 = isnan(_1769) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1769 : min(cbModelParam._m0[25u].w, _1769));
    float _1861;
    float _1863;
    float _1865;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1825 = fma(_933, cbModelParam._m0[21u].z, fma(_929, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _925)) + cbModelParam._m0[21u].w;
        float _1829 = fma(_933, cbModelParam._m0[22u].z, fma(_929, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _925)) + cbModelParam._m0[22u].w;
        float _1833 = fma(_933, cbModelParam._m0[23u].z, fma(_929, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _925)) + cbModelParam._m0[23u].w;
        float _1836 = fma(_871, cbModelParam._m0[21u].z, fma(_870, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _869));
        float _1839 = fma(_871, cbModelParam._m0[22u].z, fma(_870, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _869));
        float _1842 = fma(_871, cbModelParam._m0[23u].z, fma(_870, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _869));
        float _2061;
        if (_1836 > 0.0)
        {
            _2061 = abs((1.0 - _1825) / _1836);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1825 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2061 = frontier_phi_25_21_ladder;
        }
        float _2329;
        if (_1839 > 0.0)
        {
            _2329 = abs((1.0 - _1829) / _1839);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1829 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2329 = frontier_phi_37_32_ladder;
        }
        float _2534;
        if (_1842 > 0.0)
        {
            _2534 = abs((1.0 - _1833) / _1842);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1833 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2534 = frontier_phi_46_43_ladder;
        }
        float _2536 = isnan(_2329) ? _2061 : (isnan(_2061) ? _2329 : min(_2061, _2329));
        float _2537 = isnan(_2534) ? _2536 : (isnan(_2536) ? _2534 : min(_2536, _2534));
        float _2541 = (_2537 * _1836) + _1825;
        float _2542 = (_2537 * _1839) + _1829;
        float _2543 = (_2537 * _1842) + _1833;
        float _2544 = _2537 * 9.9999997473787516355514526367188e-05;
        float _2545 = (-1.0) - _2544;
        float _2547 = _2544 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2543 > _2547) || ((_2543 < _2545) || ((_2542 > _2547) || ((_2542 < _2545) || ((_2541 < _2545) || (_2541 > _2547))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2742 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2543, cbModelParam._m0[17u].z, fma(_2542, cbModelParam._m0[17u].y, _2541 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2543, cbModelParam._m0[18u].z, fma(_2542, cbModelParam._m0[18u].y, _2541 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2543, cbModelParam._m0[19u].z, fma(_2542, cbModelParam._m0[19u].y, _2541 * cbModelParam._m0[19u].x))), _1770);
            frontier_phi_22_46_ladder = _2742.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2742.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2742.x * cbModelParam._m0[1u].z;
        }
        _1861 = frontier_phi_22_46_ladder_2;
        _1863 = frontier_phi_22_46_ladder_1;
        _1865 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1845 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_869, _870, _871), _1770);
        _1861 = _1845.x * cbModelParam._m0[1u].z;
        _1863 = _1845.y * cbModelParam._m0[1u].z;
        _1865 = _1845.z * cbModelParam._m0[1u].z;
    }
    float _1877 = ((((1.0 - _893) * ((_880 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_893 * _880)) * _861;
    float _1878 = _1877 * ((cbModelParam._m0[1u].w * (_1861 - _1761)) + _1761);
    float _1879 = _1877 * ((cbModelParam._m0[1u].w * (_1863 - _1763)) + _1763);
    float _1880 = _1877 * ((cbModelParam._m0[1u].w * (_1865 - _1765)) + _1765);
    float _1883 = fma(_1880, cbSceneParam._m0[89u].z, fma(_1879, cbSceneParam._m0[89u].y, _1878 * cbSceneParam._m0[89u].x));
    float _1886 = fma(_1880, cbSceneParam._m0[90u].z, fma(_1879, cbSceneParam._m0[90u].y, _1878 * cbSceneParam._m0[90u].x));
    float _1889 = fma(_1880, cbSceneParam._m0[91u].z, fma(_1879, cbSceneParam._m0[91u].y, _1878 * cbSceneParam._m0[91u].x));
    float _1900 = _798 / cbSceneParam._m0[86u].x;
    float _1908 = (cbSceneParam._m0[88u].y * (1.0 - cbMtdParam._m0[25u].y)) + cbSceneParam._m0[88u].z;
    float _4203 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1910 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * 5.0;
    float _1915 = ((10.0 / (_732 + 10.0)) * cbMtdParam._m0[25u].x) * dot(vec3(_711, _712, _713), vec3(1.0, 0.0, 0.0));
    vec4 _1925 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1915 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1915 + _1900) * cbSceneParam._m0[86u].x, _799), _1910).w) + _1900) * cbSceneParam._m0[86u].x, _799), _1910);
    float _1931 = isnan(0.5) ? _1925.w : (isnan(_1925.w) ? 0.5 : max(_1925.w, 0.5));
    float _1946 = 1.0 - (_1925.w / _1931);
    vec4 _1954 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_798, _799));
    float _1956 = _1954.w;
    float _1968 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1956);
    float _1969 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1956);
    float _1970 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1956);
    float _4219 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1971 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _4230 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1972 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _4241 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1973 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    uvec4 _1977 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _1979 = _1977.x * 14u;
    uint _1980 = _1979 + 13u;
    float _1987 = _861 + (-1.0);
    float _1992 = (cbLight._m0[_1980].x * _1987) + 1.0;
    float _1993 = (cbLight._m0[_1980].y * _1987) + 1.0;
    float _1994 = (cbLight._m0[_1980].z * _1987) + 1.0;
    float _1995 = (cbLight._m0[_1980].w * _1987) + 1.0;
    uint _1996 = _1979 + 5u;
    float _2002 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
    uint _2006 = _1979 + 4u;
    float _2015 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
    uint _2019 = _1979 | 1u;
    float _2030 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_711, _712, _713));
    float _2033 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_711, _712, _713));
    float _4262 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _4273 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2038 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * 0.3183098733425140380859375;
    float _2040 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * 0.3183098733425140380859375;
    float _2047 = ((cbLight._m0[_1996].x * _2002) * _2040) + (((cbLight._m0[_2006].x * _1971) * _2015) * _2038);
    float _2048 = ((_2002 * cbLight._m0[_1996].y) * _2040) + (((cbLight._m0[_2006].y * _1972) * _2015) * _2038);
    float _2049 = ((_2002 * cbLight._m0[_1996].z) * _2040) + (((cbLight._m0[_2006].z * _1973) * _2015) * _2038);
    uvec4 _2053 = floatBitsToUint(cbLight._m0[_1979 + 12u]);
    bool _2055 = _2053.x == 0u;
    float _2066;
    float _2068;
    float _2070;
    if (_2055)
    {
        _2066 = _2047;
        _2068 = _2048;
        _2070 = _2049;
    }
    else
    {
        uint _2074 = _1979 + 6u;
        float _2090 = (dot(vec3(cbLight._m0[_1979 + 2u].xyz), vec3(_711, _712, _713)) * 0.5) + 0.5;
        float _2091 = _2090 * _2090;
        float _4284 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2092 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _2093 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2066 = (((cbLight._m0[_2074].x * 0.3183098733425140380859375) * _2092) * _2093) + _2047;
        _2068 = (((cbLight._m0[_2074].y * 0.3183098733425140380859375) * _2092) * _2093) + _2048;
        _2070 = (((cbLight._m0[_2074].z * 0.3183098733425140380859375) * _2092) * _2093) + _2049;
    }
    bool _2073 = _2053.y == 0u;
    float _2111;
    float _2113;
    float _2115;
    if (_2073)
    {
        _2111 = _2066;
        _2113 = _2068;
        _2115 = _2070;
    }
    else
    {
        uint _2273 = _1979 + 7u;
        float _2289 = (dot(vec3(cbLight._m0[_1979 + 3u].xyz), vec3(_711, _712, _713)) * 0.5) + 0.5;
        float _2290 = _2289 * _2289;
        float _4300 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2291 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2292 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
        _2111 = (((cbLight._m0[_2273].x * 0.3183098733425140380859375) * _2291) * _2292) + _2066;
        _2113 = (((cbLight._m0[_2273].y * 0.3183098733425140380859375) * _2291) * _2292) + _2068;
        _2115 = (((cbLight._m0[_2273].z * 0.3183098733425140380859375) * _2291) * _2292) + _2070;
    }
    uint _2118 = _1979 + 8u;
    float _2131 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1979].w)) * _714) * 0.949999988079071044921875);
    float _2132 = _2131 * _2131;
    float _2133 = cbLight._m0[_1979].x + _790;
    float _2134 = cbLight._m0[_1979].y + _791;
    float _2135 = cbLight._m0[_1979].z + _792;
    float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
    float _2140 = _2139 * _2133;
    float _2141 = _2139 * _2134;
    float _2142 = _2139 * _2135;
    float _2143 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_1979].xyz));
    float _4316 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2146 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _4327 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _2147 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2148 = dot(vec3(_711, _712, _713), vec3(_2140, _2141, _2142));
    float _4338 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2152 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_2140, _2141, _2142));
    float _4349 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2156 = _2132 * _2132;
    float _2160 = ((_2151 * _2151) * (_2156 + (-1.0))) + 1.0;
    float _2171 = (exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2172 = 1.0 - _2132;
    float _2183 = (0.5 / (((_2147 * ((_2146 * _2172) + _2132)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2172) + _2132) * _2146))) * _2146;
    float _4360 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2185 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2156 / ((_2160 * _2160) * 3.141590118408203125));
    uint _2199 = _1979 + 9u;
    float _2210 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2019].w)) * _714) * 0.949999988079071044921875);
    float _2211 = _2210 * _2210;
    float _2212 = cbLight._m0[_2019].x + _790;
    float _2213 = cbLight._m0[_2019].y + _791;
    float _2214 = cbLight._m0[_2019].z + _792;
    float _2218 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
    float _2219 = _2218 * _2212;
    float _2220 = _2218 * _2213;
    float _2221 = _2218 * _2214;
    float _2222 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_2019].xyz));
    float _4371 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2225 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _2226 = dot(vec3(_711, _712, _713), vec3(_2219, _2220, _2221));
    float _4382 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
    float _2230 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_2219, _2220, _2221));
    float _4393 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2234 = _2211 * _2211;
    float _2238 = ((_2229 * _2229) * (_2234 + (-1.0))) + 1.0;
    float _2247 = (exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2248 = 1.0 - _2211;
    float _2258 = (0.5 / (((_2147 * ((_2225 * _2248) + _2211)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2248) + _2211) * _2225))) * _2225;
    float _4404 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2260 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2234 / ((_2238 * _2238) * 3.141590118408203125));
    float _2270 = (((_2247 * cbLight._m0[_2199].x) * _2260) * _2002) + ((((cbLight._m0[_2118].x * _1971) * _2171) * _2185) * _2015);
    float _2271 = (((_2247 * cbLight._m0[_2199].y) * _2260) * _2002) + ((((cbLight._m0[_2118].y * _1972) * _2171) * _2185) * _2015);
    float _2272 = (((_2247 * cbLight._m0[_2199].z) * _2260) * _2002) + ((((cbLight._m0[_2118].z * _1973) * _2171) * _2185) * _2015);
    float _2334;
    float _2336;
    float _2338;
    if (_2055)
    {
        _2334 = _2270;
        _2336 = _2271;
        _2338 = _2272;
    }
    else
    {
        uint _2340 = _1979 + 2u;
        uint _2344 = _1979 + 10u;
        float _2358 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2340].w)) * _714) * 0.949999988079071044921875);
        float _2359 = _2358 * _2358;
        float _2360 = cbLight._m0[_2340].x + _790;
        float _2361 = cbLight._m0[_2340].y + _791;
        float _2362 = cbLight._m0[_2340].z + _792;
        float _2366 = inversesqrt(dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362)));
        float _2367 = _2366 * _2360;
        float _2368 = _2366 * _2361;
        float _2369 = _2366 * _2362;
        float _2370 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_2340].xyz));
        float _4415 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2373 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2374 = dot(vec3(_711, _712, _713), vec3(_2367, _2368, _2369));
        float _4426 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2377 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2378 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_2367, _2368, _2369));
        float _4437 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2382 = _2359 * _2359;
        float _2386 = ((_2377 * _2377) * (_2382 + (-1.0))) + 1.0;
        float _2395 = (exp2(log2(1.0 - (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2396 = 1.0 - _2359;
        float _2406 = (0.5 / (((_2147 * ((_2373 * _2396) + _2359)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2396) + _2359) * _2373))) * _2373;
        float _4448 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2408 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2382 / ((_2386 * _2386) * 3.141590118408203125));
        float _2409 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2334 = (((_2395 * cbLight._m0[_2344].x) * _2408) * _2409) + _2270;
        _2336 = (((_2395 * cbLight._m0[_2344].y) * _2408) * _2409) + _2271;
        _2338 = (((_2395 * cbLight._m0[_2344].z) * _2408) * _2409) + _2272;
    }
    float _2444;
    float _2446;
    float _2448;
    if (_2073)
    {
        _2444 = _2334;
        _2446 = _2336;
        _2448 = _2338;
    }
    else
    {
        uint _2455 = _1979 + 3u;
        uint _2459 = _1979 + 11u;
        float _2473 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2455].w)) * _714) * 0.949999988079071044921875);
        float _2474 = _2473 * _2473;
        float _2475 = cbLight._m0[_2455].x + _790;
        float _2476 = cbLight._m0[_2455].y + _791;
        float _2477 = cbLight._m0[_2455].z + _792;
        float _2481 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
        float _2482 = _2481 * _2475;
        float _2483 = _2481 * _2476;
        float _2484 = _2481 * _2477;
        float _2485 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_2455].xyz));
        float _4464 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2488 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _2489 = dot(vec3(_711, _712, _713), vec3(_2482, _2483, _2484));
        float _4475 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2492 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2493 = dot(vec3(cbLight._m0[_2455].xyz), vec3(_2482, _2483, _2484));
        float _4486 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2497 = _2474 * _2474;
        float _2501 = ((_2492 * _2492) * (_2497 + (-1.0))) + 1.0;
        float _2510 = (exp2(log2(1.0 - (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2511 = 1.0 - _2474;
        float _2521 = (0.5 / (((_2147 * ((_2488 * _2511) + _2474)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2511) + _2474) * _2488))) * _2488;
        float _4497 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2523 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2497 / ((_2501 * _2501) * 3.141590118408203125));
        float _2524 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
        _2444 = (((_2510 * cbLight._m0[_2459].x) * _2523) * _2524) + _2334;
        _2446 = (((_2510 * cbLight._m0[_2459].y) * _2523) * _2524) + _2336;
        _2448 = (((_2510 * cbLight._m0[_2459].z) * _2523) * _2524) + _2338;
    }
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    float _2667;
    float _2669;
    if (_1977.y == 0u)
    {
        float _2599 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2600 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2599;
        float _2601 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2599;
        float _2602 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2599;
        uvec4 _2614 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2615 = _2614.x;
        uint _2626 = uint((float(_2614.y) * floor(float(uint(cbSceneParam._m0[85u].y * _799) / _2615))) + floor(float(uint(cbSceneParam._m0[85u].x * _798) / _2615)));
        float _2636 = (log2(_2602 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2637 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        uint _2640 = uint(isnan(14.0) ? _2637 : (isnan(_2637) ? 14.0 : min(_2637, 14.0)));
        uvec4 _2645 = texelFetch(g_lightClusterGridBuffer, int(((_2640 << 2u) + (_2626 << 6u)) >> 2u));
        uint _2646 = _2645.x;
        uint _2647 = _2614.z;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        if (((((1u << ((_2647 >> 4u) & 15u)) + 4294967295u) & _2646) == 0u) || ((_2647 & 240u) == 0u))
        {
            _2747 = 0.0;
            _2749 = 0.0;
            _2751 = 0.0;
            _2753 = 0.0;
            _2755 = 0.0;
            _2757 = 0.0;
        }
        else
        {
            float _2748;
            float _2750;
            float _2752;
            float _2754;
            float _2756;
            float _2758;
            float _2891 = 0.0;
            float _2892 = 0.0;
            float _2893 = 0.0;
            float _2894 = 0.0;
            float _2895 = 0.0;
            float _2896 = 0.0;
            uint _2897 = 0u;
            uint _2906;
            bool _2907;
            for (;;)
            {
                _2906 = texelFetch(g_lightClassification, int((((_2640 << 5u) + (_2626 << 9u)) + (_2897 << 2u)) >> 2u)).x;
                _2907 = _2906 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2907)
                {
                    frontier_phi_61_pred = _2891;
                    frontier_phi_61_pred_1 = _2896;
                    frontier_phi_61_pred_2 = _2895;
                    frontier_phi_61_pred_3 = _2894;
                    frontier_phi_61_pred_4 = _2893;
                    frontier_phi_61_pred_5 = _2892;
                }
                else
                {
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    uint _3021;
                    _3015 = _2891;
                    _3016 = _2892;
                    _3017 = _2893;
                    _3018 = _2894;
                    _3019 = _2895;
                    _3020 = _2896;
                    _3021 = _2906;
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    for (;;)
                    {
                        uint _3025 = uint(findLSB(_3021)) + (_2897 << 5u);
                        uint _3022 = (_3021 + 4294967295u) & _3021;
                        uint _3027 = _3025 * 48u;
                        vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3027)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 3u)).x));
                        uint _3047 = (_3025 * 48u) + 4u;
                        vec4 _3060 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3047)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 3u)).x));
                        uint _3066 = (_3025 * 48u) + 8u;
                        vec3 _3077 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3066)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 2u)).x));
                        float _3081 = _3041.x - _2600;
                        float _3082 = _3041.y - _2601;
                        float _3083 = _3041.z - _2602;
                        float _3084 = dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083));
                        float _3087 = inversesqrt(_3084);
                        float _3088 = _3087 * _3081;
                        float _3089 = _3087 * _3082;
                        float _3090 = _3087 * _3083;
                        float _3091 = dot(vec3(_817, _820, _823), vec3(_3088, _3089, _3090));
                        float _3096 = 1.0 - (_3084 * _3041.w);
                        float _4523 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                        float _3097 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3098 = sqrt(_3084) * _3060.w;
                        float _3101 = 1.39999997615814208984375 / (_3098 + 1.39999997615814208984375);
                        float _3102 = _3101 * _3101;
                        float _3105 = ((1.0 - _3102) * _3091) + _3102;
                        float _3108 = _3098 * _3098;
                        float _3112 = ((isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0))) * _3097) / ((_3108 * 0.699999988079071044921875) + 1.0);
                        float _3116 = (-0.0) - _2600;
                        float _3117 = (-0.0) - _2601;
                        float _3118 = (-0.0) - _2602;
                        float _3122 = inversesqrt(dot(vec3(_3116, _3117, _3118), vec3(_3116, _3117, _3118)));
                        float _3123 = _3122 * _3116;
                        float _3124 = _3122 * _3117;
                        float _3125 = _3122 * _3118;
                        float _3133 = exp2(log2(1.0 / ((_3108 * 3.5) + 5.0)) * 0.25);
                        float _3134 = 1.0 - _880;
                        float _3141 = sqrt(1.0 - ((1.0 - (_3134 * _3134)) * (1.0 - (_3133 * _3133))));
                        float _3142 = _3141 * _3141;
                        float _3143 = _3142 * _3142;
                        float _3144 = _3123 + _3088;
                        float _3145 = _3124 + _3089;
                        float _3146 = _3125 + _3090;
                        float _3150 = inversesqrt(dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146)));
                        float _3154 = dot(vec3(_817, _820, _823), vec3(_3123, _3124, _3125));
                        float _4539 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3157 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3158 = dot(vec3(_817, _820, _823), vec3(_3150 * _3144, _3150 * _3145, _3150 * _3146));
                        float _4550 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3161 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                        float _3165 = ((_3161 * _3161) * (_3143 + (-1.0))) + 1.0;
                        float _3166 = _3101 * _3142;
                        float _3167 = _3166 * _3166;
                        float _3170 = ((1.0 - _3167) * _3091) + _3167;
                        float _4561 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                        float _3171 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                        float _3172 = 1.0 - _3142;
                        float _3182 = (0.5 / (((_3171 * ((_3157 * _3172) + _3142)) + 9.9999999392252902907785028219223e-09) + (((_3171 * _3172) + _3142) * _3157))) * _3171;
                        float _4572 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3193 = (((_3143 * 3.1415927410125732421875) * (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) / ((_3165 * _3165) * ((_3108 * 2.1991131305694580078125) + 3.141590118408203125))) * _3097;
                        _2950 = (_3112 * _3060.x) + _3018;
                        _2951 = (_3112 * _3060.y) + _3019;
                        _2952 = (_3112 * _3060.z) + _3020;
                        _2947 = (_3193 * _3077.x) + _3015;
                        _2948 = (_3193 * _3077.y) + _3016;
                        _2949 = (_3193 * _3077.z) + _3017;
                        if (_3022 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3015 = _2947;
                            _3016 = _2948;
                            _3017 = _2949;
                            _3018 = _2950;
                            _3019 = _2951;
                            _3020 = _2952;
                            _3021 = _3022;
                        }
                    }
                    frontier_phi_61_pred = _2947;
                    frontier_phi_61_pred_1 = _2952;
                    frontier_phi_61_pred_2 = _2951;
                    frontier_phi_61_pred_3 = _2950;
                    frontier_phi_61_pred_4 = _2949;
                    frontier_phi_61_pred_5 = _2948;
                }
                _2748 = frontier_phi_61_pred;
                _2758 = frontier_phi_61_pred_1;
                _2756 = frontier_phi_61_pred_2;
                _2754 = frontier_phi_61_pred_3;
                _2752 = frontier_phi_61_pred_4;
                _2750 = frontier_phi_61_pred_5;
                uint _2898 = _2897 + 1u;
                if (_2898 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2891 = _2748;
                    _2892 = _2750;
                    _2893 = _2752;
                    _2894 = _2754;
                    _2895 = _2756;
                    _2896 = _2758;
                    _2897 = _2898;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2747 = _2748;
            _2749 = _2750;
            _2751 = _2752;
            _2753 = _2754;
            _2755 = _2756;
            _2757 = _2758;
        }
        uvec4 _2761 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2762 = _2761.z;
        uint _2764 = (_2762 >> 8u) & 15u;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        if (((4294967295u << _2764) & _2646) == 0u)
        {
            _2859 = _2747;
            _2861 = _2749;
            _2863 = _2751;
            _2865 = _2753;
            _2867 = _2755;
            _2869 = _2757;
        }
        else
        {
            float _2884 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
            float _2885 = _2884 * _2600;
            float _2886 = _2884 * _2601;
            float _2887 = _2884 * _2602;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2764 < ((_2762 >> 12u) & 15u))
            {
                float _2860;
                float _2862;
                float _2864;
                float _2866;
                float _2868;
                float _2870;
                float _2998 = _2747;
                float _2999 = _2749;
                float _3000 = _2751;
                float _3001 = _2753;
                float _3002 = _2755;
                float _3003 = _2757;
                uint _3004 = _2764;
                uint _3013;
                bool _3014;
                for (;;)
                {
                    _3013 = texelFetch(g_lightClassification, int((((_2640 << 5u) + (_2626 << 9u)) + (_3004 << 2u)) >> 2u)).x;
                    _3014 = _3013 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3014)
                    {
                        frontier_phi_67_pred = _3001;
                        frontier_phi_67_pred_1 = _3002;
                        frontier_phi_67_pred_2 = _3003;
                        frontier_phi_67_pred_3 = _3000;
                        frontier_phi_67_pred_4 = _2999;
                        frontier_phi_67_pred_5 = _2998;
                    }
                    else
                    {
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3211 = _2998;
                        float _3212 = _2999;
                        float _3213 = _3000;
                        float _3214 = _3001;
                        float _3215 = _3002;
                        float _3216 = _3003;
                        uint _3217 = _3013;
                        uint _3218;
                        vec4 _3243;
                        float _3244;
                        vec4 _3259;
                        vec3 _3271;
                        vec4 _3286;
                        vec4 _3301;
                        float _3347;
                        bool _3348;
                        for (;;)
                        {
                            uint _3228 = ((_3004 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3217));
                            _3218 = (_3217 + 4294967295u) & _3217;
                            uint _3230 = _3228 * 40u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            _3244 = _3243.w;
                            uint _3246 = (_3228 * 40u) + 4u;
                            _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3261 = (_3228 * 40u) + 8u;
                            _3271 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x));
                            uint _3273 = (_3228 * 40u) + 16u;
                            _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            uint _3288 = (_3228 * 40u) + 20u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3303 = (_3228 * 40u) + 24u;
                            vec4 _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            uint _3322 = (_3228 * 40u) + 28u;
                            vec4 _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            _3347 = fma(_2602, _3335.z, fma(_2601, _3335.y, _3335.x * _2600)) + _3335.w;
                            _3348 = !((fma(_2602, _3316.z, fma(_2601, _3316.y, _3316.x * _2600)) + _3316.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3348)
                            {
                                float _3375 = _3243.x - _2600;
                                float _3376 = _3243.y - _2601;
                                float _3377 = _3243.z - _2602;
                                float _3378 = dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377));
                                float _3381 = inversesqrt(_3378);
                                float _3382 = _3381 * _3375;
                                float _3383 = _3381 * _3376;
                                float _3384 = _3381 * _3377;
                                float _3388 = 1.0 - (_3378 / (_3244 * _3244));
                                float _4583 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3389 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3393 = sqrt(_3378) * _3259.w;
                                float _3395 = 1.39999997615814208984375 / (_3393 + 1.39999997615814208984375);
                                float _3396 = _3395 * _3395;
                                float _3399 = ((1.0 - _3396) * dot(vec3(_3382, _3383, _3384), vec3(_817, _820, _823))) + _3396;
                                float _3402 = _3393 * _3393;
                                float _3406 = (fma(_2602, _3286.z, fma(_2601, _3286.y, _3286.x * _2600)) + _3286.w) / _3347;
                                float _3407 = (fma(_2602, _3301.z, fma(_2601, _3301.y, _3301.x * _2600)) + _3301.w) / _3347;
                                float _3411 = 1.0 - dot(vec2(_3406, _3407), vec2(_3406, _3407));
                                float _4599 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3412 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3413 = _3412 * (((isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0))) * _3389) / ((_3402 * 0.699999988079071044921875) + 1.0));
                                float _3425 = exp2(log2(1.0 / ((_3402 * 3.5) + 5.0)) * 0.25);
                                float _3426 = 1.0 - _880;
                                float _3433 = sqrt(1.0 - ((1.0 - (_3426 * _3426)) * (1.0 - (_3425 * _3425))));
                                float _3434 = _3433 * _3433;
                                float _3435 = _3434 * _3434;
                                float _3436 = _3382 - _2885;
                                float _3437 = _3383 - _2886;
                                float _3438 = _3384 - _2887;
                                float _3442 = inversesqrt(dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438)));
                                float _3446 = dot(vec3(_817, _820, _823), vec3((-0.0) - _2885, (-0.0) - _2886, (-0.0) - _2887));
                                float _4610 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3449 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3450 = dot(vec3(_817, _820, _823), vec3(_3442 * _3436, _3442 * _3437, _3442 * _3438));
                                float _4621 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3453 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                                float _3457 = ((_3453 * _3453) * (_3435 + (-1.0))) + 1.0;
                                float _3458 = _3395 * _3434;
                                float _3459 = _3458 * _3458;
                                float _3465 = ((1.0 - _3459) * dot(vec3(_817, _820, _823), vec3(_3382, _3383, _3384))) + _3459;
                                float _4632 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3466 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                                float _3467 = 1.0 - _3434;
                                float _3477 = (0.5 / (((_3466 * ((_3449 * _3467) + _3434)) + 9.9999999392252902907785028219223e-09) + (((_3466 * _3467) + _3434) * _3449))) * _3466;
                                float _4643 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3487 = (_3412 * _3389) * (((_3435 * 3.1415927410125732421875) * (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0)))) / ((_3457 * _3457) * ((_3402 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3487 * _3271.x;
                                frontier_phi_73_pred_1 = _3487 * _3271.y;
                                frontier_phi_73_pred_2 = _3413 * _3259.z;
                                frontier_phi_73_pred_3 = _3413 * _3259.y;
                                frontier_phi_73_pred_4 = _3413 * _3259.x;
                                frontier_phi_73_pred_5 = _3487 * _3271.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3491 = frontier_phi_73_pred;
                            _3492 = frontier_phi_73_pred_1;
                            _3496 = frontier_phi_73_pred_2;
                            _3495 = frontier_phi_73_pred_3;
                            _3494 = frontier_phi_73_pred_4;
                            _3493 = frontier_phi_73_pred_5;
                            _3201 = _3494 + _3214;
                            _3202 = _3495 + _3215;
                            _3203 = _3496 + _3216;
                            _3198 = _3491 + _3211;
                            _3199 = _3492 + _3212;
                            _3200 = _3493 + _3213;
                            if (_3218 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3218;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3201;
                        frontier_phi_67_pred_1 = _3202;
                        frontier_phi_67_pred_2 = _3203;
                        frontier_phi_67_pred_3 = _3200;
                        frontier_phi_67_pred_4 = _3199;
                        frontier_phi_67_pred_5 = _3198;
                    }
                    _2866 = frontier_phi_67_pred;
                    _2868 = frontier_phi_67_pred_1;
                    _2870 = frontier_phi_67_pred_2;
                    _2864 = frontier_phi_67_pred_3;
                    _2862 = frontier_phi_67_pred_4;
                    _2860 = frontier_phi_67_pred_5;
                    uint _3005 = _3004 + 1u;
                    if (_3005 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2998 = _2860;
                        _2999 = _2862;
                        _3000 = _2864;
                        _3001 = _2866;
                        _3002 = _2868;
                        _3003 = _2870;
                        _3004 = _3005;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2868;
                frontier_phi_55_56_ladder_1 = _2870;
                frontier_phi_55_56_ladder_2 = _2866;
                frontier_phi_55_56_ladder_3 = _2864;
                frontier_phi_55_56_ladder_4 = _2862;
                frontier_phi_55_56_ladder_5 = _2860;
            }
            else
            {
                frontier_phi_55_56_ladder = _2755;
                frontier_phi_55_56_ladder_1 = _2757;
                frontier_phi_55_56_ladder_2 = _2753;
                frontier_phi_55_56_ladder_3 = _2751;
                frontier_phi_55_56_ladder_4 = _2749;
                frontier_phi_55_56_ladder_5 = _2747;
            }
            _2859 = frontier_phi_55_56_ladder_5;
            _2861 = frontier_phi_55_56_ladder_4;
            _2863 = frontier_phi_55_56_ladder_3;
            _2865 = frontier_phi_55_56_ladder_2;
            _2867 = frontier_phi_55_56_ladder;
            _2869 = frontier_phi_55_56_ladder_1;
        }
        float _2874 = isnan(1.0) ? _861 : (isnan(_861) ? 1.0 : min(_861, 1.0));
        _2659 = (_2874 * _2865) + _2111;
        _2661 = (_2874 * _2867) + _2113;
        _2663 = (_2874 * _2869) + _2115;
        _2665 = ((_2859 * 0.039999999105930328369140625) * _2874) + _2444;
        _2667 = ((_2861 * 0.039999999105930328369140625) * _2874) + _2446;
        _2669 = ((_2863 * 0.039999999105930328369140625) * _2874) + _2448;
    }
    else
    {
        _2659 = _2111;
        _2661 = _2113;
        _2663 = _2115;
        _2665 = _2444;
        _2667 = _2446;
        _2669 = _2448;
    }
    float _4659 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4670 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4681 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    uint _2689 = _271 + 6u;
    float _2697 = _798 / cbSceneParam._m0[86u].x;
    float _2698 = _799 / cbSceneParam._m0[86u].y;
    vec4 _2712 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2697, _2698, (log2((isnan(cbSceneParam._m0[77u].w) ? _732 : (isnan(_732) ? cbSceneParam._m0[77u].w : min(_732, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2714 = _2712.x;
    float _2715 = _2712.y;
    float _2716 = _2712.z;
    float _2717 = _2712.w;
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    if (_732 > cbSceneParam._m0[78u].w)
    {
        float _2772 = isnan(_732) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _732 : min(cbSceneParam._m0[80u].w, _732));
        float _2773 = _2772 / _732;
        float _2784 = _2773 * _783;
        float _2785 = _784 * _2773;
        float _2786 = (-0.0) - _2785;
        float _2788 = _2773 * _785;
        float _2790 = (cbSceneParam._m0[77u].w * _2786) / _2772;
        float _2791 = _2790 + cbSceneParam._m0[79u].w;
        float _2792 = cbSceneParam._m0[79u].w - _2785;
        float _2798 = sqrt(((_2784 * _2784) + (_2785 * _2785)) + (_2788 * _2788));
        float _2801 = (1.0 - (cbSceneParam._m0[77u].w / _2772)) * _2798;
        float _2806 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2808 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2960;
        if (abs((_2786 - _2790) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2960 = ((((_2791 > 0.0) ? exp2(_2806 * _2791) : (2.0 - exp2(_2808 * _2791))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2801;
        }
        else
        {
            float _2920 = 1.0 / cbSceneParam._m0[80u].x;
            float _2921 = isnan(_2792) ? _2791 : (isnan(_2791) ? _2792 : max(_2791, _2792));
            float _2922 = isnan(_2792) ? _2791 : (isnan(_2791) ? _2792 : min(_2791, _2792));
            float _2931 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : min(_2921, 0.0));
            float _2932 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : min(_2922, 0.0));
            _2960 = ((abs(_2798 / _2786) * cbSceneParam._m0[80u].y) * ((((_2931 - _2932) * 2.0) - ((exp2(_2806 * (isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0)))) - exp2(_2806 * (isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0))))) * _2920)) - ((exp2(_2808 * _2931) - exp2(_2808 * _2932)) * _2920))) + (_2801 * cbSceneParam._m0[80u].z);
        }
        vec4 _2962 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2697, _2698, 1.0), 0.0);
        float _2971 = exp2((_2960 * (-1.44269502162933349609375)) * (1.0 - _2962.w));
        float _2972 = log2(_2971);
        float _2988 = log2(_2717);
        _2810 = (exp2(_2988 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2972 * cbSceneParam._m0[78u].x)) * _2962.x) / cbSceneParam._m0[78u].x)) + _2714;
        _2812 = (exp2(_2988 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2972 * cbSceneParam._m0[78u].y)) * _2962.y) / cbSceneParam._m0[78u].y)) + _2715;
        _2814 = (exp2(_2988 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2972 * cbSceneParam._m0[78u].z)) * _2962.z) / cbSceneParam._m0[78u].z)) + _2716;
        _2816 = _2971 * _2717;
    }
    else
    {
        _2810 = _2714;
        _2812 = _2715;
        _2814 = _2716;
        _2816 = _2717;
    }
    float _2827 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2828 = _2827 == 3.0;
    float _2829 = log2(_2816);
    float _2836 = exp2(_2829 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2659 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _861))) + (((((_1877 * (_1925.x / _1931)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1668) * _1946)) + _2665) * cbPerFrame._m0[3u].x));
    float _2837 = exp2(_2829 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2661 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _861))) + (((((_1877 * (_1925.y / _1931)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1668) * _1946)) + _2667) * cbPerFrame._m0[3u].x));
    float _2838 = exp2(_2829 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2663 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _861))) + (((((_1877 * (_1925.z / _1931)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1668) * _1946)) + _2669) * cbPerFrame._m0[3u].x));
    float _2847 = (_2827 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2847 * (_2828 ? _2836 : (_2836 + (cbSceneParam._m0[72u].w * _2810)));
    SV_Target.y = _2847 * (_2828 ? _2837 : (_2837 + (cbSceneParam._m0[72u].w * _2812)));
    SV_Target.z = _2847 * (_2828 ? _2838 : (_2838 + (cbSceneParam._m0[72u].w * _2814)));
    SV_Target.w = cbInstanceData._m0[_2689].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2689].w;
}


