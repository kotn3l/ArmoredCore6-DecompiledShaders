#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[33];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1339;
float _3748;
float _3749;
float _3750;
float _3751;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _290 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _293 = _290.w;
    vec4 _312 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _317 = _312.x * cbMtdParam._m0[11u].x;
    float _318 = _312.y * cbMtdParam._m0[11u].y;
    float _319 = _312.z * cbMtdParam._m0[11u].z;
    vec4 _338 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _373 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[28u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[28u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _375 = _373.x;
    float _388 = dot(vec4(_375, _373.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _405 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_375 - _388) * cbMtdParam._m0[24u].x) + _388) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3760 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _413 = (_406 * ((_338.x * cbMtdParam._m0[12u].x) - _317)) + _317;
    float _414 = (_406 * ((_338.y * cbMtdParam._m0[12u].y) - _318)) + _318;
    float _415 = (_406 * ((_338.z * cbMtdParam._m0[12u].z) - _319)) + _319;
    vec4 _433 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _458 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _460 = _458.x;
    float _461 = _458.y;
    float _466 = cbMtdParam._m0[25u].w * _458.z;
    float _3771 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _467 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    vec4 _480 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    float _488 = cbMtdParam._m0[26u].x * _480.z;
    float _3782 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _498 = (((isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) - _467) * _406) + _467;
    float _501 = ((((_480.x - _460) * _406) + _460) * 2.0) + (-1.0);
    float _502 = ((((_480.y - _461) * _406) + _461) * 2.0) + (-1.0);
    float _503 = dot(vec2(_501, _502), vec2(_501, _502));
    float _3793 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _508 = sqrt(1.0 - (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))));
    vec4 _525 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _532 = cbMtdParam._m0[25u].z * _525.z;
    float _3804 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    vec4 _553 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _555 = _553.x;
    float _556 = 1.0 - _555;
    float _562 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _565 = ((isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : min(_562, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _574 = (_565 - ((((((_555 - _556) * cbMtdParam._m0[24u].z) + _556) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _565))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3825 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _575 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _582 = (_575 * (cbMtdParam._m0[17u].x - _413)) + _413;
    float _583 = (_575 * (cbMtdParam._m0[17u].y - _414)) + _414;
    float _584 = (_575 * (cbMtdParam._m0[17u].z - _415)) + _415;
    vec4 _596 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _598 = _596.x;
    float _599 = 1.0 - _598;
    float _626 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_598 - _599) * cbMtdParam._m0[24u].w) + _599) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3836 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _627 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _635 = ((((cbMtdParam._m0[10u].x - _582) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _627) + _582;
    float _636 = ((((cbMtdParam._m0[10u].y - _583) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _627) + _583;
    float _637 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _584)) * _627) + _584;
    float _642 = (((_433.z - _498) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _498;
    float _646 = (((isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) - _642) * cbMtdParam._m0[19u].w) + _642;
    vec4 _660 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _667 = (_660.x * 2.0) + (-1.0);
    float _668 = (_660.y * 2.0) + (-1.0);
    float _669 = dot(vec2(_667, _668), vec2(_667, _668));
    float _3847 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _677 = (_575 * (_660.z - _646)) + _646;
    float _680 = ((cbMtdParam._m0[23u].y - _677) * _627) + _677;
    float _684 = ((1.0 - _680) * cbMtdParam._m0[26u].y) + _680;
    float _3858 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _685 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    vec4 _707 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[28u].w * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[29u].x * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _713 = (_707.x * 2.0) + (-1.0);
    float _714 = (_707.y * 2.0) + (-1.0);
    float _715 = dot(vec2(_713, _714), vec2(_713, _714));
    float _3869 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _729 = (_501 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_433.x * 2.0) + (-1.0)))) + (((_525.x * 2.0) + (-1.0)) * cbMtdParam._m0[27u].x);
    float _730 = (_502 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_433.y * 2.0) + (-1.0)))) + (((_525.y * 2.0) + (-1.0)) * cbMtdParam._m0[27u].x);
    float _742 = (((_667 - _729) + (cbMtdParam._m0[21u].x * _729)) * _575) + _729;
    float _743 = (((_668 - _730) + (cbMtdParam._m0[21u].x * _730)) * _575) + _730;
    float _744 = (_575 * (sqrt(1.0 - (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) - _508)) + _508;
    float _755 = (((_713 - _742) + (_742 * cbMtdParam._m0[22u].z)) * _627) + _742;
    float _756 = (((_714 - _743) + (_743 * cbMtdParam._m0[22u].z)) * _627) + _743;
    float _757 = ((sqrt(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) - _744) * _627) + _744;
    float _759 = cbMtdParam._m0[22u].x + _525.w;
    float _764 = fma(_757, _244 * NORMAL.x, fma(_756, _251 * TANGENT.x, (_237 * _229) * _755));
    float _767 = fma(_757, _244 * NORMAL.y, fma(_756, _251 * TANGENT.y, (_237 * _230) * _755));
    float _770 = fma(_757, _244 * NORMAL.z, fma(_756, _251 * TANGENT.z, (_237 * _231) * _755));
    float _774 = inversesqrt(dot(vec3(_764, _767, _770), vec3(_764, _767, _770)));
    float _775 = _774 * _764;
    float _776 = _774 * _767;
    float _777 = _774 * _770;
    float _3880 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _778 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _3891 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _3902 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _3913 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _3924 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _796 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _847 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _837);
    float _848 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _837);
    float _849 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _837);
    float _853 = inversesqrt(dot(vec3(_847, _848, _849), vec3(_847, _848, _849)));
    float _854 = _847 * _853;
    float _855 = _848 * _853;
    float _856 = _849 * _853;
    vec4 _861 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _863 = _861.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1020 = sqrt(((_847 * _847) + (_848 * _848)) + (_849 * _849));
        float _1026 = (cbMatDynParam._m0[5u].x * _1020) + cbMatDynParam._m0[5u].y;
        float _3935 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1031 = (cbMatDynParam._m0[5u].z * _1020) + cbMatDynParam._m0[5u].w;
        float _3946 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) - _1027)) + _1027) < ((_863 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _874 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _875 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _893 = fma(_777, cbSceneParam._m0[5u].z, fma(_776, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _775));
    float _896 = fma(_777, cbSceneParam._m0[6u].z, fma(_776, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _775));
    float _899 = fma(_777, cbSceneParam._m0[7u].z, fma(_776, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _775));
    uint _912 = _257 + 9u;
    uint _913 = _912 + uint(cbMatDynParam._m0[0u].w);
    float _919 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * cbInstanceData._m0[_913].x;
    float _920 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * cbInstanceData._m0[_913].y;
    float _921 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * cbInstanceData._m0[_913].z;
    float _3957 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _922 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _3968 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _923 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _3979 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _924 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    vec4 _933 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _874, cbSceneParam._m0[86u].y * _875));
    float _937 = ((isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * TEXCOORD_5.w) * _933.x;
    float _938 = dot(vec3(_775, _776, _777), vec3(_854, _855, _856));
    float _941 = _938 * 2.0;
    float _945 = (_941 * _775) - _854;
    float _946 = (_941 * _776) - _855;
    float _947 = (_941 * _777) - _856;
    float _954 = abs(dot(vec3(_854, _855, _856), vec3(_775, _776, _777)));
    float _3990 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _956 = sqrt(_778);
    float _969 = exp2((_956 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_956 * 3.0));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1338;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1063 = fma(_1009, cbModelParam._m0[26u].z, fma(_1005, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1001));
        float _1067 = fma(_1009, cbModelParam._m0[27u].z, fma(_1005, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1001));
        float _1071 = fma(_1009, cbModelParam._m0[28u].z, fma(_1005, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1001));
        float _1096 = _1001 + _775;
        float _1097 = _1005 + _776;
        float _1098 = _1009 + _777;
        float _1108 = fma(_1098, cbModelParam._m0[26u].z, fma(_1097, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1096)) - _1063;
        float _1109 = fma(_1098, cbModelParam._m0[27u].z, fma(_1097, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1096)) - _1067;
        float _1110 = fma(_1098, cbModelParam._m0[28u].z, fma(_1097, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1096)) - _1071;
        float _1114 = inversesqrt(dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110)));
        float _1127 = ((_1114 * _1108) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1063 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1128 = ((_1114 * _1109) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1067 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1129 = ((_1114 * _1110) / cbModelParam._m0[34u].z) + ((((((_1071 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        float _1166 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1132.x + (-0.5));
        float _1168 = _1166 * (_1132.y + (-0.5));
        float _1169 = _1166 * (_1132.z + (-0.5));
        float _1176 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1139.x + (-0.5));
        float _1178 = _1176 * (_1139.y + (-0.5));
        float _1179 = _1176 * (_1139.z + (-0.5));
        float _1186 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1146.x + (-0.5));
        float _1188 = _1186 * (_1146.y + (-0.5));
        float _1189 = _1186 * (_1146.z + (-0.5));
        float _1196 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1153.x + (-0.5));
        float _1198 = _1196 * (_1153.y + (-0.5));
        float _1199 = _1196 * (_1153.z + (-0.5));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = _1167 * 0.5;
        float _1204 = _1177 * 0.5;
        float _1205 = _1187 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1220 = (dot(vec3(_775, _776, _777), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1230 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _4038 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1232 + 1.0))) + _1237) * _1200;
        float _1247 = _1168 * 0.5;
        float _1248 = _1178 * 0.5;
        float _1249 = _1188 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_775, _776, _777), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _4071 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1274 + 1.0))) + _1279) * _1201;
        float _1289 = _1169 * 0.5;
        float _1290 = _1179 * 0.5;
        float _1291 = _1189 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_775, _776, _777), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _4104 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1316 + 1.0))) + _1321) * _1202;
        _1338 = _1169;
        _1340 = _1168;
        _1341 = _1167;
        _1342 = _1179;
        _1343 = _1178;
        _1344 = _1177;
        _1345 = _1189;
        _1346 = _1188;
        _1347 = _1187;
        _1348 = _1202;
        _1349 = _1201;
        _1350 = _1200;
        _1351 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
        _1352 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
        _1353 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
    }
    else
    {
        _1338 = _1339;
        _1340 = _1339;
        _1341 = _1339;
        _1342 = _1339;
        _1343 = _1339;
        _1344 = _1339;
        _1345 = _1339;
        _1346 = _1339;
        _1347 = _1339;
        _1348 = _1339;
        _1349 = _1339;
        _1350 = _1339;
        _1351 = 0.0;
        _1352 = 0.0;
        _1353 = 0.0;
    }
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1380 = fma(_1009, cbModelParam._m0[30u].z, fma(_1005, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1001));
        float _1384 = fma(_1009, cbModelParam._m0[31u].z, fma(_1005, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1001));
        float _1388 = fma(_1009, cbModelParam._m0[32u].z, fma(_1005, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1001));
        float _1411 = _1001 + _775;
        float _1412 = _1005 + _776;
        float _1413 = _1009 + _777;
        float _1423 = fma(_1413, cbModelParam._m0[30u].z, fma(_1412, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1411)) - _1380;
        float _1424 = fma(_1413, cbModelParam._m0[31u].z, fma(_1412, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1411)) - _1384;
        float _1425 = fma(_1413, cbModelParam._m0[32u].z, fma(_1412, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1411)) - _1388;
        float _1429 = inversesqrt(dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425)));
        float _1442 = ((_1429 * _1423) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1380 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1443 = ((_1429 * _1424) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1384 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1444 = ((_1429 * _1425) / cbModelParam._m0[35u].z) + ((((((_1388 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1442, _1443, _1444), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1442, _1443, _1444), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1442, _1443, _1444), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1442, _1443, _1444), 0.0);
        float _1479 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1446.x + (-0.5));
        float _1481 = _1479 * (_1446.y + (-0.5));
        float _1482 = _1479 * (_1446.z + (-0.5));
        float _1489 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1453.x + (-0.5));
        float _1491 = _1489 * (_1453.y + (-0.5));
        float _1492 = _1489 * (_1453.z + (-0.5));
        float _1499 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1460.x + (-0.5));
        float _1501 = _1499 * (_1460.y + (-0.5));
        float _1502 = _1499 * (_1460.z + (-0.5));
        float _1509 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1467.x + (-0.5));
        float _1511 = _1509 * (_1467.y + (-0.5));
        float _1512 = _1509 * (_1467.z + (-0.5));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1516 = _1480 * 0.5;
        float _1517 = _1490 * 0.5;
        float _1518 = _1500 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_775, _776, _777), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4167 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1543 + 1.0))) + _1548) * _1513;
        float _1558 = _1481 * 0.5;
        float _1559 = _1491 * 0.5;
        float _1560 = _1501 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_775, _776, _777), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4200 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1585 + 1.0))) + _1590) * _1514;
        float _1600 = _1482 * 0.5;
        float _1601 = _1492 * 0.5;
        float _1602 = _1502 * 0.5;
        float _1603 = dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602));
        float _1608 = (_1603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1603);
        float _1616 = (dot(vec3(_775, _776, _777), vec3(_1608 * _1600, _1608 * _1601, _1608 * _1602)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1625 = sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602)) / (_1515 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1627 = _1626 * 2.0;
        float _1631 = (1.0 - _1626) / (_1626 + 1.0);
        float _4233 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1641 = ((((1.0 - _1632) * (_1627 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1627 + 1.0))) + _1632) * _1515;
        _1649 = _1482;
        _1650 = _1481;
        _1651 = _1480;
        _1652 = _1492;
        _1653 = _1491;
        _1654 = _1490;
        _1655 = _1502;
        _1656 = _1501;
        _1657 = _1500;
        _1658 = _1515;
        _1659 = _1514;
        _1660 = _1513;
        _1661 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
        _1662 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
        _1663 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)));
    }
    else
    {
        _1649 = _1339;
        _1650 = _1339;
        _1651 = _1339;
        _1652 = _1339;
        _1653 = _1339;
        _1654 = _1339;
        _1655 = _1339;
        _1656 = _1339;
        _1657 = _1339;
        _1658 = _1339;
        _1659 = _1339;
        _1660 = _1339;
        _1661 = 0.0;
        _1662 = 0.0;
        _1663 = 0.0;
    }
    float _1673 = (cbModelParam._m0[1u].x * (_1661 - _1351)) + _1351;
    float _1674 = (cbModelParam._m0[1u].x * (_1662 - _1352)) + _1352;
    float _1675 = (cbModelParam._m0[1u].x * (_1663 - _1353)) + _1353;
    float _1696 = fma(_1675, cbSceneParam._m0[89u].z, fma(_1674, cbSceneParam._m0[89u].y, _1673 * cbSceneParam._m0[89u].x));
    float _1699 = fma(_1675, cbSceneParam._m0[90u].z, fma(_1674, cbSceneParam._m0[90u].y, _1673 * cbSceneParam._m0[90u].x));
    float _1702 = fma(_1675, cbSceneParam._m0[91u].z, fma(_1674, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1673));
    float _1717 = _945 * 0.5;
    float _1718 = _946 * 0.5;
    float _1719 = _947 * 0.5;
    float _1720 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1651, _1654, _1657, _1660));
    float _1723 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1650, _1653, _1656, _1659));
    float _1726 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1649, _1652, _1655, _1658));
    float _1760;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1733 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1338, _1342, _1345, _1348));
        float _1737 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1340, _1343, _1346, _1349));
        float _1741 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1341, _1344, _1347, _1350));
        float _1748 = dot(vec4(cbModelParam._m0[39u]), vec4(_1717, _1718, _1719, 1.0));
        _1760 = dot(vec3(isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1748) ? 0.0 : (isnan(0.0) ? _1748 : max(0.0, _1748))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1760 = 1.0;
    }
    float _1771;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1762 = dot(vec4(cbModelParam._m0[40u]), vec4(_1717, _1718, _1719, 1.0));
        _1771 = dot(vec3(isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1762) ? 0.0 : (isnan(0.0) ? _1762 : max(0.0, _1762))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1771 = 1.0;
    }
    float _1775 = (_1771 * cbModelParam._m0[1u].x) + (_1760 * (1.0 - cbModelParam._m0[1u].x));
    float _1785 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _778);
    float _1786 = isnan(_1785) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1785 : min(cbModelParam._m0[25u].z, _1785));
    float _1867;
    float _1869;
    float _1871;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1834 = fma(_1009, cbModelParam._m0[13u].z, fma(_1005, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1001)) + cbModelParam._m0[13u].w;
        float _1838 = fma(_1009, cbModelParam._m0[14u].z, fma(_1005, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1001)) + cbModelParam._m0[14u].w;
        float _1842 = fma(_1009, cbModelParam._m0[15u].z, fma(_1005, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1001)) + cbModelParam._m0[15u].w;
        float _1845 = fma(_947, cbModelParam._m0[13u].z, fma(_946, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _945));
        float _1848 = fma(_947, cbModelParam._m0[14u].z, fma(_946, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _945));
        float _1851 = fma(_947, cbModelParam._m0[15u].z, fma(_946, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _945));
        float _1879;
        if (_1845 > 0.0)
        {
            _1879 = abs((1.0 - _1834) / _1845);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1834 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1879 = frontier_phi_17_15_ladder;
        }
        float _2137;
        if (_1848 > 0.0)
        {
            _2137 = abs((1.0 - _1838) / _1848);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1838 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2137 = frontier_phi_26_22_ladder;
        }
        float _2380;
        if (_1851 > 0.0)
        {
            _2380 = abs((1.0 - _1842) / _1851);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1842 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2380 = frontier_phi_38_33_ladder;
        }
        float _2382 = isnan(_2137) ? _1879 : (isnan(_1879) ? _2137 : min(_1879, _2137));
        float _2383 = isnan(_2380) ? _2382 : (isnan(_2382) ? _2380 : min(_2382, _2380));
        float _2387 = (_2383 * _1845) + _1834;
        float _2388 = (_2383 * _1848) + _1838;
        float _2389 = (_2383 * _1851) + _1842;
        float _2390 = _2383 * 9.9999997473787516355514526367188e-05;
        float _2392 = (-1.0) - _2390;
        float _2394 = _2390 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2389 > _2394) || ((_2389 < _2392) || ((_2388 > _2394) || ((_2388 < _2392) || ((_2387 < _2392) || (_2387 > _2394))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2513 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2389, cbModelParam._m0[9u].z, fma(_2388, cbModelParam._m0[9u].y, _2387 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2389, cbModelParam._m0[10u].z, fma(_2388, cbModelParam._m0[10u].y, _2387 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2389, cbModelParam._m0[11u].z, fma(_2388, cbModelParam._m0[11u].y, _2387 * cbModelParam._m0[11u].x))), _1786);
            frontier_phi_16_38_ladder = _2513.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2513.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2513.x * cbModelParam._m0[1u].y;
        }
        _1867 = frontier_phi_16_38_ladder_2;
        _1869 = frontier_phi_16_38_ladder_1;
        _1871 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1855 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_945, _946, _947), _1786);
        _1867 = _1855.x * cbModelParam._m0[1u].y;
        _1869 = _1855.y * cbModelParam._m0[1u].y;
        _1871 = _1855.z * cbModelParam._m0[1u].y;
    }
    float _1875 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _778);
    float _1876 = isnan(_1875) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1875 : min(cbModelParam._m0[25u].w, _1875));
    float _1966;
    float _1968;
    float _1970;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1930 = fma(_1009, cbModelParam._m0[21u].z, fma(_1005, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1001)) + cbModelParam._m0[21u].w;
        float _1934 = fma(_1009, cbModelParam._m0[22u].z, fma(_1005, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1001)) + cbModelParam._m0[22u].w;
        float _1938 = fma(_1009, cbModelParam._m0[23u].z, fma(_1005, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1001)) + cbModelParam._m0[23u].w;
        float _1941 = fma(_947, cbModelParam._m0[21u].z, fma(_946, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _945));
        float _1944 = fma(_947, cbModelParam._m0[22u].z, fma(_946, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _945));
        float _1947 = fma(_947, cbModelParam._m0[23u].z, fma(_946, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _945));
        float _2142;
        if (_1941 > 0.0)
        {
            _2142 = abs((1.0 - _1930) / _1941);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1930 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2142 = frontier_phi_28_24_ladder;
        }
        float _2407;
        if (_1944 > 0.0)
        {
            _2407 = abs((1.0 - _1934) / _1944);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1934 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2407 = frontier_phi_40_35_ladder;
        }
        float _2612;
        if (_1947 > 0.0)
        {
            _2612 = abs((1.0 - _1938) / _1947);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1938 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2612 = frontier_phi_49_46_ladder;
        }
        float _2614 = isnan(_2407) ? _2142 : (isnan(_2142) ? _2407 : min(_2142, _2407));
        float _2615 = isnan(_2612) ? _2614 : (isnan(_2614) ? _2612 : min(_2614, _2612));
        float _2619 = (_2615 * _1941) + _1930;
        float _2620 = (_2615 * _1944) + _1934;
        float _2621 = (_2615 * _1947) + _1938;
        float _2622 = _2615 * 9.9999997473787516355514526367188e-05;
        float _2623 = (-1.0) - _2622;
        float _2625 = _2622 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2621 > _2625) || ((_2621 < _2623) || ((_2620 > _2625) || ((_2620 < _2623) || ((_2619 < _2623) || (_2619 > _2625))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2814 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2621, cbModelParam._m0[17u].z, fma(_2620, cbModelParam._m0[17u].y, _2619 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2621, cbModelParam._m0[18u].z, fma(_2620, cbModelParam._m0[18u].y, _2619 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2621, cbModelParam._m0[19u].z, fma(_2620, cbModelParam._m0[19u].y, _2619 * cbModelParam._m0[19u].x))), _1876);
            frontier_phi_25_49_ladder = _2814.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2814.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2814.x * cbModelParam._m0[1u].z;
        }
        _1966 = frontier_phi_25_49_ladder_2;
        _1968 = frontier_phi_25_49_ladder_1;
        _1970 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1950 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_945, _946, _947), _1876);
        _1966 = _1950.x * cbModelParam._m0[1u].z;
        _1968 = _1950.y * cbModelParam._m0[1u].z;
        _1970 = _1950.z * cbModelParam._m0[1u].z;
    }
    float _1982 = ((((1.0 - _969) * ((_956 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_969 * _956)) * _937;
    float _1983 = _1982 * ((cbModelParam._m0[1u].w * (_1966 - _1867)) + _1867);
    float _1984 = _1982 * ((cbModelParam._m0[1u].w * (_1968 - _1869)) + _1869);
    float _1985 = _1982 * ((cbModelParam._m0[1u].w * (_1970 - _1871)) + _1871);
    float _1988 = fma(_1985, cbSceneParam._m0[89u].z, fma(_1984, cbSceneParam._m0[89u].y, _1983 * cbSceneParam._m0[89u].x));
    float _1991 = fma(_1985, cbSceneParam._m0[90u].z, fma(_1984, cbSceneParam._m0[90u].y, _1983 * cbSceneParam._m0[90u].x));
    float _1994 = fma(_1985, cbSceneParam._m0[91u].z, fma(_1984, cbSceneParam._m0[91u].y, _1983 * cbSceneParam._m0[91u].x));
    float _2005 = _874 / cbSceneParam._m0[86u].x;
    float _2006 = _875 / cbSceneParam._m0[86u].y;
    float _2013 = (cbSceneParam._m0[88u].y * (1.0 - cbMtdParam._m0[25u].y)) + cbSceneParam._m0[88u].z;
    float _4359 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2015 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * 5.0;
    float _2020 = ((10.0 / (_796 + 10.0)) * cbMtdParam._m0[25u].x) * dot(vec3(_775, _776, _777), vec3(1.0, 0.0, 0.0));
    vec4 _2030 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_2020 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_2020 + _2005) * cbSceneParam._m0[86u].x, _875), _2015).w) + _2005) * cbSceneParam._m0[86u].x, _875), _2015);
    float _2036 = isnan(0.5) ? _2030.w : (isnan(_2030.w) ? 0.5 : max(_2030.w, 0.5));
    float _2051 = 1.0 - (_2030.w / _2036);
    uvec4 _2061 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2063 = _2061.x * 14u;
    uint _2064 = _2063 + 13u;
    float _2071 = _937 + (-1.0);
    float _2076 = (cbLight._m0[_2064].x * _2071) + 1.0;
    float _2077 = (cbLight._m0[_2064].y * _2071) + 1.0;
    float _2078 = (cbLight._m0[_2064].z * _2071) + 1.0;
    float _2079 = (cbLight._m0[_2064].w * _2071) + 1.0;
    uint _2080 = _2063 + 5u;
    float _2086 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
    uint _2090 = _2063 + 4u;
    float _2096 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
    uint _2100 = _2063 | 1u;
    float _2111 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_775, _776, _777));
    float _2114 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_775, _776, _777));
    float _4385 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _4396 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2119 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * 0.3183098733425140380859375;
    float _2121 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * 0.3183098733425140380859375;
    float _2128 = ((cbLight._m0[_2080].x * _2086) * _2121) + ((cbLight._m0[_2090].x * _2096) * _2119);
    float _2129 = ((_2086 * cbLight._m0[_2080].y) * _2121) + ((_2096 * cbLight._m0[_2090].y) * _2119);
    float _2130 = ((_2086 * cbLight._m0[_2080].z) * _2121) + ((_2096 * cbLight._m0[_2090].z) * _2119);
    uvec4 _2134 = floatBitsToUint(cbLight._m0[_2063 + 12u]);
    bool _2136 = _2134.x == 0u;
    float _2147;
    float _2149;
    float _2151;
    if (_2136)
    {
        _2147 = _2128;
        _2149 = _2129;
        _2151 = _2130;
    }
    else
    {
        uint _2155 = _2063 + 6u;
        float _2171 = (dot(vec3(cbLight._m0[_2063 + 2u].xyz), vec3(_775, _776, _777)) * 0.5) + 0.5;
        float _2172 = _2171 * _2171;
        float _4407 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2173 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2174 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
        _2147 = (((cbLight._m0[_2155].x * 0.3183098733425140380859375) * _2173) * _2174) + _2128;
        _2149 = (((cbLight._m0[_2155].y * 0.3183098733425140380859375) * _2173) * _2174) + _2129;
        _2151 = (((cbLight._m0[_2155].z * 0.3183098733425140380859375) * _2173) * _2174) + _2130;
    }
    bool _2154 = _2134.y == 0u;
    float _2192;
    float _2194;
    float _2196;
    if (_2154)
    {
        _2192 = _2147;
        _2194 = _2149;
        _2196 = _2151;
    }
    else
    {
        uint _2351 = _2063 + 7u;
        float _2367 = (dot(vec3(cbLight._m0[_2063 + 3u].xyz), vec3(_775, _776, _777)) * 0.5) + 0.5;
        float _2368 = _2367 * _2367;
        float _4423 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2369 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2370 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
        _2192 = (((cbLight._m0[_2351].x * 0.3183098733425140380859375) * _2369) * _2370) + _2147;
        _2194 = (((cbLight._m0[_2351].y * 0.3183098733425140380859375) * _2369) * _2370) + _2149;
        _2196 = (((cbLight._m0[_2351].z * 0.3183098733425140380859375) * _2369) * _2370) + _2151;
    }
    uint _2199 = _2063 + 8u;
    float _2212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2063].w)) * _778) * 0.949999988079071044921875);
    float _2213 = _2212 * _2212;
    float _2214 = cbLight._m0[_2063].x + _854;
    float _2215 = cbLight._m0[_2063].y + _855;
    float _2216 = cbLight._m0[_2063].z + _856;
    float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
    float _2221 = _2220 * _2214;
    float _2222 = _2220 * _2215;
    float _2223 = _2220 * _2216;
    float _2224 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2063].xyz));
    float _4439 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _4450 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _2228 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _2229 = dot(vec3(_775, _776, _777), vec3(_2221, _2222, _2223));
    float _4461 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2232 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _2233 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_2221, _2222, _2223));
    float _4472 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2237 = _2213 * _2213;
    float _2241 = ((_2232 * _2232) * (_2237 + (-1.0))) + 1.0;
    float _2252 = (exp2(log2(1.0 - (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2253 = 1.0 - _2213;
    float _2264 = (0.5 / (((_2228 * ((_2227 * _2253) + _2213)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2253) + _2213) * _2227))) * _2227;
    float _4483 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2266 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2237 / ((_2241 * _2241) * 3.141590118408203125));
    uint _2277 = _2063 + 9u;
    float _2288 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2100].w)) * _778) * 0.949999988079071044921875);
    float _2289 = _2288 * _2288;
    float _2290 = cbLight._m0[_2100].x + _854;
    float _2291 = cbLight._m0[_2100].y + _855;
    float _2292 = cbLight._m0[_2100].z + _856;
    float _2296 = inversesqrt(dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292)));
    float _2297 = _2296 * _2290;
    float _2298 = _2296 * _2291;
    float _2299 = _2296 * _2292;
    float _2300 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2100].xyz));
    float _4494 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2303 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    float _2304 = dot(vec3(_775, _776, _777), vec3(_2297, _2298, _2299));
    float _4505 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
    float _2308 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_2297, _2298, _2299));
    float _4516 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2312 = _2289 * _2289;
    float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
    float _2325 = (exp2(log2(1.0 - (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2326 = 1.0 - _2289;
    float _2336 = (0.5 / (((_2228 * ((_2303 * _2326) + _2289)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2326) + _2289) * _2303))) * _2303;
    float _4527 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2338 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
    float _2348 = (((_2325 * cbLight._m0[_2277].x) * _2338) * _2086) + (((_2252 * cbLight._m0[_2199].x) * _2266) * _2096);
    float _2349 = (((_2325 * cbLight._m0[_2277].y) * _2338) * _2086) + (((_2252 * cbLight._m0[_2199].y) * _2266) * _2096);
    float _2350 = (((_2325 * cbLight._m0[_2277].z) * _2338) * _2086) + (((_2252 * cbLight._m0[_2199].z) * _2266) * _2096);
    float _2412;
    float _2414;
    float _2416;
    if (_2136)
    {
        _2412 = _2348;
        _2414 = _2349;
        _2416 = _2350;
    }
    else
    {
        uint _2418 = _2063 + 2u;
        uint _2422 = _2063 + 10u;
        float _2436 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2418].w)) * _778) * 0.949999988079071044921875);
        float _2437 = _2436 * _2436;
        float _2438 = cbLight._m0[_2418].x + _854;
        float _2439 = cbLight._m0[_2418].y + _855;
        float _2440 = cbLight._m0[_2418].z + _856;
        float _2444 = inversesqrt(dot(vec3(_2438, _2439, _2440), vec3(_2438, _2439, _2440)));
        float _2445 = _2444 * _2438;
        float _2446 = _2444 * _2439;
        float _2447 = _2444 * _2440;
        float _2448 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2418].xyz));
        float _4538 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2451 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2452 = dot(vec3(_775, _776, _777), vec3(_2445, _2446, _2447));
        float _4549 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2455 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2456 = dot(vec3(cbLight._m0[_2418].xyz), vec3(_2445, _2446, _2447));
        float _4560 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2460 = _2437 * _2437;
        float _2464 = ((_2455 * _2455) * (_2460 + (-1.0))) + 1.0;
        float _2473 = (exp2(log2(1.0 - (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2474 = 1.0 - _2437;
        float _2484 = (0.5 / (((_2228 * ((_2451 * _2474) + _2437)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2474) + _2437) * _2451))) * _2451;
        float _4571 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2486 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2460 / ((_2464 * _2464) * 3.141590118408203125));
        float _2487 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
        _2412 = (((_2473 * cbLight._m0[_2422].x) * _2486) * _2487) + _2348;
        _2414 = (((_2473 * cbLight._m0[_2422].y) * _2486) * _2487) + _2349;
        _2416 = (((_2473 * cbLight._m0[_2422].z) * _2486) * _2487) + _2350;
    }
    float _2522;
    float _2524;
    float _2526;
    if (_2154)
    {
        _2522 = _2412;
        _2524 = _2414;
        _2526 = _2416;
    }
    else
    {
        uint _2533 = _2063 + 3u;
        uint _2537 = _2063 + 11u;
        float _2551 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2533].w)) * _778) * 0.949999988079071044921875);
        float _2552 = _2551 * _2551;
        float _2553 = cbLight._m0[_2533].x + _854;
        float _2554 = cbLight._m0[_2533].y + _855;
        float _2555 = cbLight._m0[_2533].z + _856;
        float _2559 = inversesqrt(dot(vec3(_2553, _2554, _2555), vec3(_2553, _2554, _2555)));
        float _2560 = _2559 * _2553;
        float _2561 = _2559 * _2554;
        float _2562 = _2559 * _2555;
        float _2563 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2533].xyz));
        float _4587 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2566 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2567 = dot(vec3(_775, _776, _777), vec3(_2560, _2561, _2562));
        float _4598 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2570 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _2571 = dot(vec3(cbLight._m0[_2533].xyz), vec3(_2560, _2561, _2562));
        float _4609 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2575 = _2552 * _2552;
        float _2579 = ((_2570 * _2570) * (_2575 + (-1.0))) + 1.0;
        float _2588 = (exp2(log2(1.0 - (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2589 = 1.0 - _2552;
        float _2599 = (0.5 / (((_2228 * ((_2566 * _2589) + _2552)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2589) + _2552) * _2566))) * _2566;
        float _4620 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2601 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2575 / ((_2579 * _2579) * 3.141590118408203125));
        float _2602 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
        _2522 = (((_2588 * cbLight._m0[_2537].x) * _2601) * _2602) + _2412;
        _2524 = (((_2588 * cbLight._m0[_2537].y) * _2601) * _2602) + _2414;
        _2526 = (((_2588 * cbLight._m0[_2537].z) * _2601) * _2602) + _2416;
    }
    float _2737;
    float _2739;
    float _2741;
    float _2743;
    float _2745;
    float _2747;
    if (_2061.y == 0u)
    {
        float _2677 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2678 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2677;
        float _2679 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2677;
        float _2680 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2677;
        uvec4 _2692 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2693 = _2692.x;
        uint _2704 = uint((float(_2692.y) * floor(float(uint(cbSceneParam._m0[85u].y * _875) / _2693))) + floor(float(uint(cbSceneParam._m0[85u].x * _874) / _2693)));
        float _2714 = (log2(_2680 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2715 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        uint _2718 = uint(isnan(14.0) ? _2715 : (isnan(_2715) ? 14.0 : min(_2715, 14.0)));
        uvec4 _2723 = texelFetch(g_lightClusterGridBuffer, int(((_2718 << 2u) + (_2704 << 6u)) >> 2u));
        uint _2724 = _2723.x;
        uint _2725 = _2692.z;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        if (((((1u << ((_2725 >> 4u) & 15u)) + 4294967295u) & _2724) == 0u) || ((_2725 & 240u) == 0u))
        {
            _2819 = 0.0;
            _2821 = 0.0;
            _2823 = 0.0;
            _2825 = 0.0;
            _2827 = 0.0;
            _2829 = 0.0;
        }
        else
        {
            float _2820;
            float _2822;
            float _2824;
            float _2826;
            float _2828;
            float _2830;
            float _2971 = 0.0;
            float _2972 = 0.0;
            float _2973 = 0.0;
            float _2974 = 0.0;
            float _2975 = 0.0;
            float _2976 = 0.0;
            uint _2977 = 0u;
            uint _2986;
            bool _2987;
            for (;;)
            {
                _2986 = texelFetch(g_lightClassification, int((((_2718 << 5u) + (_2704 << 9u)) + (_2977 << 2u)) >> 2u)).x;
                _2987 = _2986 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2987)
                {
                    frontier_phi_66_pred = _2971;
                    frontier_phi_66_pred_1 = _2976;
                    frontier_phi_66_pred_2 = _2975;
                    frontier_phi_66_pred_3 = _2974;
                    frontier_phi_66_pred_4 = _2973;
                    frontier_phi_66_pred_5 = _2972;
                }
                else
                {
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    uint _3122;
                    _3116 = _2971;
                    _3117 = _2972;
                    _3118 = _2973;
                    _3119 = _2974;
                    _3120 = _2975;
                    _3121 = _2976;
                    _3122 = _2986;
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    for (;;)
                    {
                        uint _3126 = uint(findLSB(_3122)) + (_2977 << 5u);
                        uint _3123 = (_3122 + 4294967295u) & _3122;
                        uint _3128 = _3126 * 48u;
                        vec4 _3142 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3128)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 3u)).x));
                        uint _3148 = (_3126 * 48u) + 4u;
                        vec4 _3161 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3148)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 3u)).x));
                        uint _3167 = (_3126 * 48u) + 8u;
                        vec3 _3178 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3167)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 2u)).x));
                        float _3182 = _3142.x - _2678;
                        float _3183 = _3142.y - _2679;
                        float _3184 = _3142.z - _2680;
                        float _3185 = dot(vec3(_3182, _3183, _3184), vec3(_3182, _3183, _3184));
                        float _3188 = inversesqrt(_3185);
                        float _3189 = _3188 * _3182;
                        float _3190 = _3188 * _3183;
                        float _3191 = _3188 * _3184;
                        float _3192 = dot(vec3(_893, _896, _899), vec3(_3189, _3190, _3191));
                        float _3197 = 1.0 - (_3185 * _3142.w);
                        float _4646 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3198 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3199 = sqrt(_3185) * _3161.w;
                        float _3202 = 1.39999997615814208984375 / (_3199 + 1.39999997615814208984375);
                        float _3203 = _3202 * _3202;
                        float _3206 = ((1.0 - _3203) * _3192) + _3203;
                        float _3209 = _3199 * _3199;
                        float _3213 = ((isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0))) * _3198) / ((_3209 * 0.699999988079071044921875) + 1.0);
                        float _3217 = (-0.0) - _2678;
                        float _3218 = (-0.0) - _2679;
                        float _3219 = (-0.0) - _2680;
                        float _3223 = inversesqrt(dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219)));
                        float _3224 = _3223 * _3217;
                        float _3225 = _3223 * _3218;
                        float _3226 = _3223 * _3219;
                        float _3234 = exp2(log2(1.0 / ((_3209 * 3.5) + 5.0)) * 0.25);
                        float _3235 = 1.0 - _956;
                        float _3242 = sqrt(1.0 - ((1.0 - (_3235 * _3235)) * (1.0 - (_3234 * _3234))));
                        float _3243 = _3242 * _3242;
                        float _3244 = _3243 * _3243;
                        float _3245 = _3224 + _3189;
                        float _3246 = _3225 + _3190;
                        float _3247 = _3226 + _3191;
                        float _3251 = inversesqrt(dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247)));
                        float _3255 = dot(vec3(_893, _896, _899), vec3(_3224, _3225, _3226));
                        float _4662 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                        float _3258 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3259 = dot(vec3(_893, _896, _899), vec3(_3251 * _3245, _3251 * _3246, _3251 * _3247));
                        float _4673 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3262 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                        float _3266 = ((_3262 * _3262) * (_3244 + (-1.0))) + 1.0;
                        float _3267 = _3202 * _3243;
                        float _3268 = _3267 * _3267;
                        float _3271 = ((1.0 - _3268) * _3192) + _3268;
                        float _4684 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3272 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                        float _3273 = 1.0 - _3243;
                        float _3283 = (0.5 / (((_3272 * ((_3258 * _3273) + _3243)) + 9.9999999392252902907785028219223e-09) + (((_3272 * _3273) + _3243) * _3258))) * _3272;
                        float _4695 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3294 = (((_3244 * 3.1415927410125732421875) * (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0)))) / ((_3266 * _3266) * ((_3209 * 2.1991131305694580078125) + 3.141590118408203125))) * _3198;
                        _3046 = (_3213 * _3161.x) + _3119;
                        _3047 = (_3213 * _3161.y) + _3120;
                        _3048 = (_3213 * _3161.z) + _3121;
                        _3043 = (_3294 * _3178.x) + _3116;
                        _3044 = (_3294 * _3178.y) + _3117;
                        _3045 = (_3294 * _3178.z) + _3118;
                        if (_3123 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3116 = _3043;
                            _3117 = _3044;
                            _3118 = _3045;
                            _3119 = _3046;
                            _3120 = _3047;
                            _3121 = _3048;
                            _3122 = _3123;
                        }
                    }
                    frontier_phi_66_pred = _3043;
                    frontier_phi_66_pred_1 = _3048;
                    frontier_phi_66_pred_2 = _3047;
                    frontier_phi_66_pred_3 = _3046;
                    frontier_phi_66_pred_4 = _3045;
                    frontier_phi_66_pred_5 = _3044;
                }
                _2820 = frontier_phi_66_pred;
                _2830 = frontier_phi_66_pred_1;
                _2828 = frontier_phi_66_pred_2;
                _2826 = frontier_phi_66_pred_3;
                _2824 = frontier_phi_66_pred_4;
                _2822 = frontier_phi_66_pred_5;
                uint _2978 = _2977 + 1u;
                if (_2978 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2971 = _2820;
                    _2972 = _2822;
                    _2973 = _2824;
                    _2974 = _2826;
                    _2975 = _2828;
                    _2976 = _2830;
                    _2977 = _2978;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2819 = _2820;
            _2821 = _2822;
            _2823 = _2824;
            _2825 = _2826;
            _2827 = _2828;
            _2829 = _2830;
        }
        uvec4 _2833 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2834 = _2833.z;
        uint _2836 = (_2834 >> 8u) & 15u;
        float _2939;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        if (((4294967295u << _2836) & _2724) == 0u)
        {
            _2939 = _2819;
            _2941 = _2821;
            _2943 = _2823;
            _2945 = _2825;
            _2947 = _2827;
            _2949 = _2829;
        }
        else
        {
            float _2964 = inversesqrt(dot(vec3(_2678, _2679, _2680), vec3(_2678, _2679, _2680)));
            float _2965 = _2964 * _2678;
            float _2966 = _2964 * _2679;
            float _2967 = _2964 * _2680;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2836 < ((_2834 >> 12u) & 15u))
            {
                float _2940;
                float _2942;
                float _2944;
                float _2946;
                float _2948;
                float _2950;
                float _3099 = _2819;
                float _3100 = _2821;
                float _3101 = _2823;
                float _3102 = _2825;
                float _3103 = _2827;
                float _3104 = _2829;
                uint _3105 = _2836;
                uint _3114;
                bool _3115;
                for (;;)
                {
                    _3114 = texelFetch(g_lightClassification, int((((_2718 << 5u) + (_2704 << 9u)) + (_3105 << 2u)) >> 2u)).x;
                    _3115 = _3114 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3115)
                    {
                        frontier_phi_77_pred = _3104;
                        frontier_phi_77_pred_1 = _3103;
                        frontier_phi_77_pred_2 = _3102;
                        frontier_phi_77_pred_3 = _3101;
                        frontier_phi_77_pred_4 = _3100;
                        frontier_phi_77_pred_5 = _3099;
                    }
                    else
                    {
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3321 = _3099;
                        float _3322 = _3100;
                        float _3323 = _3101;
                        float _3324 = _3102;
                        float _3325 = _3103;
                        float _3326 = _3104;
                        uint _3327 = _3114;
                        uint _3328;
                        vec4 _3353;
                        float _3354;
                        vec4 _3369;
                        vec3 _3381;
                        vec4 _3396;
                        vec4 _3411;
                        float _3457;
                        bool _3458;
                        for (;;)
                        {
                            uint _3338 = ((_3105 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3327));
                            _3328 = (_3327 + 4294967295u) & _3327;
                            uint _3340 = _3338 * 40u;
                            _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            _3354 = _3353.w;
                            uint _3356 = (_3338 * 40u) + 4u;
                            _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            uint _3371 = (_3338 * 40u) + 8u;
                            _3381 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x));
                            uint _3383 = (_3338 * 40u) + 16u;
                            _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3398 = (_3338 * 40u) + 20u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3413 = (_3338 * 40u) + 24u;
                            vec4 _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            uint _3432 = (_3338 * 40u) + 28u;
                            vec4 _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            _3457 = fma(_2680, _3445.z, fma(_2679, _3445.y, _3445.x * _2678)) + _3445.w;
                            _3458 = !((fma(_2680, _3426.z, fma(_2679, _3426.y, _3426.x * _2678)) + _3426.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3458)
                            {
                                float _3485 = _3353.x - _2678;
                                float _3486 = _3353.y - _2679;
                                float _3487 = _3353.z - _2680;
                                float _3488 = dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487));
                                float _3491 = inversesqrt(_3488);
                                float _3492 = _3491 * _3485;
                                float _3493 = _3491 * _3486;
                                float _3494 = _3491 * _3487;
                                float _3498 = 1.0 - (_3488 / (_3354 * _3354));
                                float _4706 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3499 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3503 = sqrt(_3488) * _3369.w;
                                float _3505 = 1.39999997615814208984375 / (_3503 + 1.39999997615814208984375);
                                float _3506 = _3505 * _3505;
                                float _3509 = ((1.0 - _3506) * dot(vec3(_3492, _3493, _3494), vec3(_893, _896, _899))) + _3506;
                                float _3512 = _3503 * _3503;
                                float _3516 = (fma(_2680, _3396.z, fma(_2679, _3396.y, _3396.x * _2678)) + _3396.w) / _3457;
                                float _3517 = (fma(_2680, _3411.z, fma(_2679, _3411.y, _3411.x * _2678)) + _3411.w) / _3457;
                                float _3521 = 1.0 - dot(vec2(_3516, _3517), vec2(_3516, _3517));
                                float _4722 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3522 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3523 = _3522 * (((isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0))) * _3499) / ((_3512 * 0.699999988079071044921875) + 1.0));
                                float _3535 = exp2(log2(1.0 / ((_3512 * 3.5) + 5.0)) * 0.25);
                                float _3536 = 1.0 - _956;
                                float _3543 = sqrt(1.0 - ((1.0 - (_3536 * _3536)) * (1.0 - (_3535 * _3535))));
                                float _3544 = _3543 * _3543;
                                float _3545 = _3544 * _3544;
                                float _3546 = _3492 - _2965;
                                float _3547 = _3493 - _2966;
                                float _3548 = _3494 - _2967;
                                float _3552 = inversesqrt(dot(vec3(_3546, _3547, _3548), vec3(_3546, _3547, _3548)));
                                float _3556 = dot(vec3(_893, _896, _899), vec3((-0.0) - _2965, (-0.0) - _2966, (-0.0) - _2967));
                                float _4733 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3559 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                                float _3560 = dot(vec3(_893, _896, _899), vec3(_3552 * _3546, _3552 * _3547, _3552 * _3548));
                                float _4744 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3563 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                                float _3567 = ((_3563 * _3563) * (_3545 + (-1.0))) + 1.0;
                                float _3568 = _3505 * _3544;
                                float _3569 = _3568 * _3568;
                                float _3575 = ((1.0 - _3569) * dot(vec3(_893, _896, _899), vec3(_3492, _3493, _3494))) + _3569;
                                float _4755 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3576 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                                float _3577 = 1.0 - _3544;
                                float _3587 = (0.5 / (((_3576 * ((_3559 * _3577) + _3544)) + 9.9999999392252902907785028219223e-09) + (((_3576 * _3577) + _3544) * _3559))) * _3576;
                                float _4766 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3597 = (_3522 * _3499) * (((_3545 * 3.1415927410125732421875) * (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0)))) / ((_3567 * _3567) * ((_3512 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3523 * _3369.y;
                                frontier_phi_83_pred_1 = _3523 * _3369.x;
                                frontier_phi_83_pred_2 = _3597 * _3381.z;
                                frontier_phi_83_pred_3 = _3597 * _3381.y;
                                frontier_phi_83_pred_4 = _3597 * _3381.x;
                                frontier_phi_83_pred_5 = _3523 * _3369.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3605 = frontier_phi_83_pred;
                            _3604 = frontier_phi_83_pred_1;
                            _3603 = frontier_phi_83_pred_2;
                            _3602 = frontier_phi_83_pred_3;
                            _3601 = frontier_phi_83_pred_4;
                            _3606 = frontier_phi_83_pred_5;
                            _3311 = _3604 + _3324;
                            _3312 = _3605 + _3325;
                            _3313 = _3606 + _3326;
                            _3308 = _3601 + _3321;
                            _3309 = _3602 + _3322;
                            _3310 = _3603 + _3323;
                            if (_3328 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3321 = _3308;
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3328;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3313;
                        frontier_phi_77_pred_1 = _3312;
                        frontier_phi_77_pred_2 = _3311;
                        frontier_phi_77_pred_3 = _3310;
                        frontier_phi_77_pred_4 = _3309;
                        frontier_phi_77_pred_5 = _3308;
                    }
                    _2950 = frontier_phi_77_pred;
                    _2948 = frontier_phi_77_pred_1;
                    _2946 = frontier_phi_77_pred_2;
                    _2944 = frontier_phi_77_pred_3;
                    _2942 = frontier_phi_77_pred_4;
                    _2940 = frontier_phi_77_pred_5;
                    uint _3106 = _3105 + 1u;
                    if (_3106 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3099 = _2940;
                        _3100 = _2942;
                        _3101 = _2944;
                        _3102 = _2946;
                        _3103 = _2948;
                        _3104 = _2950;
                        _3105 = _3106;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2944;
                frontier_phi_58_59_ladder_1 = _2950;
                frontier_phi_58_59_ladder_2 = _2948;
                frontier_phi_58_59_ladder_3 = _2946;
                frontier_phi_58_59_ladder_4 = _2942;
                frontier_phi_58_59_ladder_5 = _2940;
            }
            else
            {
                frontier_phi_58_59_ladder = _2823;
                frontier_phi_58_59_ladder_1 = _2829;
                frontier_phi_58_59_ladder_2 = _2827;
                frontier_phi_58_59_ladder_3 = _2825;
                frontier_phi_58_59_ladder_4 = _2821;
                frontier_phi_58_59_ladder_5 = _2819;
            }
            _2939 = frontier_phi_58_59_ladder_5;
            _2941 = frontier_phi_58_59_ladder_4;
            _2943 = frontier_phi_58_59_ladder;
            _2945 = frontier_phi_58_59_ladder_3;
            _2947 = frontier_phi_58_59_ladder_2;
            _2949 = frontier_phi_58_59_ladder_1;
        }
        float _2954 = isnan(1.0) ? _937 : (isnan(_937) ? 1.0 : min(_937, 1.0));
        _2737 = (_2954 * _2945) + _2192;
        _2739 = (_2954 * _2947) + _2194;
        _2741 = (_2954 * _2949) + _2196;
        _2743 = ((_2939 * 0.039999999105930328369140625) * _2954) + _2522;
        _2745 = ((_2941 * 0.039999999105930328369140625) * _2954) + _2524;
        _2747 = ((_2943 * 0.039999999105930328369140625) * _2954) + _2526;
    }
    else
    {
        _2737 = _2192;
        _2739 = _2194;
        _2741 = _2196;
        _2743 = _2522;
        _2745 = _2524;
        _2747 = _2526;
    }
    float _4782 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _4793 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _4804 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _2764 = ((isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2737 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _937))) + (((((_1982 * (_2030.x / _2036)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1775) * _2051)) + _2743) * cbPerFrame._m0[3u].x);
    float _2765 = ((isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2739 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _937))) + (((((_1982 * (_2030.y / _2036)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))) * _1775) * _2051)) + _2745) * cbPerFrame._m0[3u].x);
    float _2766 = ((isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * (_2741 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _937))) + (((((_1982 * (_2030.z / _2036)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1775) * _2051)) + _2747) * cbPerFrame._m0[3u].x);
    uint _2767 = _257 + 6u;
    vec4 _2784 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2005, _2006, (log2((isnan(cbSceneParam._m0[77u].w) ? _796 : (isnan(_796) ? cbSceneParam._m0[77u].w : min(_796, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2786 = _2784.x;
    float _2787 = _2784.y;
    float _2788 = _2784.z;
    float _2789 = _2784.w;
    float _2882;
    float _2884;
    float _2886;
    float _2888;
    if (_796 > cbSceneParam._m0[78u].w)
    {
        float _2844 = isnan(_796) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _796 : min(cbSceneParam._m0[80u].w, _796));
        float _2845 = _2844 / _796;
        float _2856 = _2845 * _847;
        float _2857 = _848 * _2845;
        float _2858 = (-0.0) - _2857;
        float _2860 = _2845 * _849;
        float _2862 = (cbSceneParam._m0[77u].w * _2858) / _2844;
        float _2863 = _2862 + cbSceneParam._m0[79u].w;
        float _2864 = cbSceneParam._m0[79u].w - _2857;
        float _2870 = sqrt(((_2856 * _2856) + (_2857 * _2857)) + (_2860 * _2860));
        float _2873 = (1.0 - (cbSceneParam._m0[77u].w / _2844)) * _2870;
        float _2878 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2880 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3056;
        if (abs((_2858 - _2862) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3056 = ((((_2863 > 0.0) ? exp2(_2878 * _2863) : (2.0 - exp2(_2880 * _2863))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2873;
        }
        else
        {
            float _3000 = 1.0 / cbSceneParam._m0[80u].x;
            float _3001 = isnan(_2864) ? _2863 : (isnan(_2863) ? _2864 : max(_2863, _2864));
            float _3002 = isnan(_2864) ? _2863 : (isnan(_2863) ? _2864 : min(_2863, _2864));
            float _3011 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : min(_3001, 0.0));
            float _3012 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : min(_3002, 0.0));
            _3056 = ((abs(_2870 / _2858) * cbSceneParam._m0[80u].y) * ((((_3011 - _3012) * 2.0) - ((exp2(_2878 * (isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0)))) - exp2(_2878 * (isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0))))) * _3000)) - ((exp2(_2880 * _3011) - exp2(_2880 * _3012)) * _3000))) + (_2873 * cbSceneParam._m0[80u].z);
        }
        vec4 _3058 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2005, _2006, 1.0), 0.0);
        float _3067 = exp2((_3056 * (-1.44269502162933349609375)) * (1.0 - _3058.w));
        float _3068 = log2(_3067);
        float _3084 = log2(_2789);
        _2882 = (exp2(_3084 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].x)) * _3058.x) / cbSceneParam._m0[78u].x)) + _2786;
        _2884 = (exp2(_3084 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].y)) * _3058.y) / cbSceneParam._m0[78u].y)) + _2787;
        _2886 = (exp2(_3084 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].z)) * _3058.z) / cbSceneParam._m0[78u].z)) + _2788;
        _2888 = _3067 * _2789;
    }
    else
    {
        _2882 = _2786;
        _2884 = _2787;
        _2886 = _2788;
        _2888 = _2789;
    }
    bool _3094;
    vec4 _2897;
    vec4 _2919;
    float _2921;
    float _2925;
    float _2926;
    float _2927;
    float _2928;
    bool _2938;
    for (;;)
    {
        _2897 = cbMatDynParam._m0[0u];
        float _2899 = roundEven(_2897.y);
        bool _2900 = _2899 == 3.0;
        float _2901 = log2(_2888);
        float _2908 = exp2(_2901 * cbSceneParam._m0[78u].x) * _2764;
        float _2909 = exp2(_2901 * cbSceneParam._m0[78u].y) * _2765;
        float _2910 = exp2(_2901 * cbSceneParam._m0[78u].z) * _2766;
        float _2917 = _863 + (-0.5);
        _2919 = cbMtdParam._m0[1u];
        _2921 = _2919.y * _2917;
        float _2924 = (_2899 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2925 = _2924 * (_2900 ? _2908 : (_2908 + (cbSceneParam._m0[72u].w * _2882)));
        _2926 = _2924 * (_2900 ? _2909 : (_2909 + (cbSceneParam._m0[72u].w * _2884)));
        _2927 = _2924 * (_2900 ? _2910 : (_2910 + (cbSceneParam._m0[72u].w * _2886)));
        _2928 = _2917 * 0.999000012874603271484375;
        _2938 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2938)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _2928) < 0.5)
            {
                _3094 = true;
                break;
            }
        }
        uint _3035 = _912 + uint(_2897.w);
        if ((cbInstanceData._m0[_3035].w < 1.0) && ((cbInstanceData._m0[_3035].w + _2928) < 0.5))
        {
            _3094 = true;
            break;
        }
        if ((_2921 + _293) < _2919.x)
        {
            _3094 = true;
            break;
        }
        _3094 = false;
        break;
    }
    float _3299;
    if (_3094)
    {
        discard_state = true;
        _3299 = 0.0;
    }
    else
    {
        _3299 = cbInstanceData._m0[_2767].w;
    }
    SV_Target.x = _2925;
    SV_Target.y = _2926;
    SV_Target.z = _2927;
    SV_Target.w = _3299;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2767].w;
    discard_exit();
}


