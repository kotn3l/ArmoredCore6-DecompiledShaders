#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[33];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _878;
float _3297;
float _3298;
float _3299;
float _3300;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _194 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _201 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _231 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _231.w;
    float _238 = _231.x * cbMtdParam._m0[9u].x;
    float _239 = _231.y * cbMtdParam._m0[9u].y;
    float _240 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _253 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _262 = cbMtdParam._m0[25u].z * _253.z;
    float _3309 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _264 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
    float _268 = (_253.x * 2.0) + (-1.0);
    float _270 = (_253.y * 2.0) + (-1.0);
    float _271 = dot(vec2(_268, _270), vec2(_268, _270));
    float _3320 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _276 = sqrt(1.0 - (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0))));
    float _282 = (cbMtdParam._m0[26u].y * (1.0 - _264)) + _264;
    float _3331 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _283 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _288 = cbMtdParam._m0[22u].x + _253.w;
    float _293 = fma(_276, _201 * NORMAL.x, fma(_270, _208 * TANGENT.x, (_194 * _186) * _268));
    float _296 = fma(_276, _201 * NORMAL.y, fma(_270, _208 * TANGENT.y, (_194 * _187) * _268));
    float _299 = fma(_276, _201 * NORMAL.z, fma(_270, _208 * TANGENT.z, (_194 * _188) * _268));
    float _303 = inversesqrt(dot(vec3(_293, _296, _299), vec3(_293, _296, _299)));
    float _304 = _303 * _293;
    float _305 = _303 * _296;
    float _306 = _303 * _299;
    float _3342 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _307 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    float _3353 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _3364 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3375 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3386 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _327 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _369 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _379 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _369);
    float _380 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _369);
    float _381 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _369);
    float _385 = inversesqrt(dot(vec3(_379, _380, _381), vec3(_379, _380, _381)));
    float _386 = _379 * _385;
    float _387 = _380 * _385;
    float _388 = _381 * _385;
    vec4 _393 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _395 = _393.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _557 = sqrt(((_379 * _379) + (_380 * _380)) + (_381 * _381));
        float _563 = (cbMatDynParam._m0[5u].x * _557) + cbMatDynParam._m0[5u].y;
        float _3397 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
        float _564 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _568 = (cbMatDynParam._m0[5u].z * _557) + cbMatDynParam._m0[5u].w;
        float _3408 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) - _564)) + _564) < ((_395 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _407 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _408 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _428 = fma(_306, cbSceneParam._m0[5u].z, fma(_305, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _304));
    float _431 = fma(_306, cbSceneParam._m0[6u].z, fma(_305, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _304));
    float _434 = fma(_306, cbSceneParam._m0[7u].z, fma(_305, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _304));
    uint _447 = uint(roundEven(NORMAL.w)) * 13u;
    uint _449 = _447 + 9u;
    uint _450 = _449 + uint(cbMatDynParam._m0[0u].w);
    float _456 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) * cbInstanceData._m0[_450].x;
    float _457 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0)))) * cbInstanceData._m0[_450].y;
    float _458 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0)))) * cbInstanceData._m0[_450].z;
    float _3419 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _3430 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _3441 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    vec4 _470 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _407, cbSceneParam._m0[86u].y * _408));
    float _474 = ((isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0))) * TEXCOORD_5.w) * _470.x;
    float _475 = dot(vec3(_304, _305, _306), vec3(_386, _387, _388));
    float _478 = _475 * 2.0;
    float _482 = (_478 * _304) - _386;
    float _483 = (_478 * _305) - _387;
    float _484 = (_478 * _306) - _388;
    float _491 = abs(dot(vec3(_386, _387, _388), vec3(_304, _305, _306)));
    float _3452 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _493 = sqrt(_307);
    float _506 = exp2((_493 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_493 * 3.0));
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _877;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _602 = fma(_546, cbModelParam._m0[26u].z, fma(_542, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _538));
        float _606 = fma(_546, cbModelParam._m0[27u].z, fma(_542, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _538));
        float _610 = fma(_546, cbModelParam._m0[28u].z, fma(_542, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _538));
        float _635 = _538 + _304;
        float _636 = _542 + _305;
        float _637 = _546 + _306;
        float _647 = fma(_637, cbModelParam._m0[26u].z, fma(_636, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _635)) - _602;
        float _648 = fma(_637, cbModelParam._m0[27u].z, fma(_636, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _635)) - _606;
        float _649 = fma(_637, cbModelParam._m0[28u].z, fma(_636, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _635)) - _610;
        float _653 = inversesqrt(dot(vec3(_647, _648, _649), vec3(_647, _648, _649)));
        float _666 = ((_653 * _647) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_602 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _667 = ((_653 * _648) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_606 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _668 = ((_653 * _649) / cbModelParam._m0[34u].z) + ((((((_610 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_666, _667, _668), 0.0);
        vec4 _678 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_666, _667, _668), 0.0);
        vec4 _685 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_666, _667, _668), 0.0);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_666, _667, _668), 0.0);
        float _705 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_671.x + (-0.5));
        float _707 = _705 * (_671.y + (-0.5));
        float _708 = _705 * (_671.z + (-0.5));
        float _715 = exp2((_678.w + (-0.5)) * 20.0) * 2.0;
        float _716 = _715 * (_678.x + (-0.5));
        float _717 = _715 * (_678.y + (-0.5));
        float _718 = _715 * (_678.z + (-0.5));
        float _725 = exp2((_685.w + (-0.5)) * 20.0) * 2.0;
        float _726 = _725 * (_685.x + (-0.5));
        float _727 = _725 * (_685.y + (-0.5));
        float _728 = _725 * (_685.z + (-0.5));
        float _735 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _736 = _735 * (_692.x + (-0.5));
        float _737 = _735 * (_692.y + (-0.5));
        float _738 = _735 * (_692.z + (-0.5));
        float _739 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _740 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _741 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _742 = _706 * 0.5;
        float _743 = _716 * 0.5;
        float _744 = _726 * 0.5;
        float _745 = dot(vec3(_742, _743, _744), vec3(_742, _743, _744));
        float _750 = (_745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_745);
        float _759 = (dot(vec3(_304, _305, _306), vec3(_750 * _742, _750 * _743, _750 * _744)) + 1.0) * 0.5;
        float _3478 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _769 = sqrt(((_743 * _743) + (_742 * _742)) + (_744 * _744)) / (_739 + 9.9999997473787516355514526367188e-06);
        float _3489 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _771 = _770 * 2.0;
        float _775 = (1.0 - _770) / (_770 + 1.0);
        float _3500 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _776 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _785 = ((((1.0 - _776) * (_771 + 2.0)) * exp2(log2(isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * (_771 + 1.0))) + _776) * _739;
        float _786 = _707 * 0.5;
        float _787 = _717 * 0.5;
        float _788 = _727 * 0.5;
        float _789 = dot(vec3(_786, _787, _788), vec3(_786, _787, _788));
        float _794 = (_789 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_789);
        float _802 = (dot(vec3(_304, _305, _306), vec3(_794 * _786, _794 * _787, _794 * _788)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _811 = sqrt(((_787 * _787) + (_786 * _786)) + (_788 * _788)) / (_740 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _813 = _812 * 2.0;
        float _817 = (1.0 - _812) / (_812 + 1.0);
        float _3533 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _827 = ((((1.0 - _818) * (_813 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_813 + 1.0))) + _818) * _740;
        float _828 = _708 * 0.5;
        float _829 = _718 * 0.5;
        float _830 = _728 * 0.5;
        float _831 = dot(vec3(_828, _829, _830), vec3(_828, _829, _830));
        float _836 = (_831 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_831);
        float _844 = (dot(vec3(_304, _305, _306), vec3(_836 * _828, _836 * _829, _836 * _830)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _853 = sqrt(((_829 * _829) + (_828 * _828)) + (_830 * _830)) / (_741 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _855 = _854 * 2.0;
        float _859 = (1.0 - _854) / (_854 + 1.0);
        float _3566 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _869 = ((((1.0 - _860) * (_855 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_855 + 1.0))) + _860) * _741;
        _877 = _708;
        _879 = _707;
        _880 = _706;
        _881 = _718;
        _882 = _717;
        _883 = _716;
        _884 = _728;
        _885 = _727;
        _886 = _726;
        _887 = _741;
        _888 = _740;
        _889 = _739;
        _890 = cbModelParam._m0[36u].z * (isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0)));
        _891 = cbModelParam._m0[36u].z * (isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0)));
        _892 = cbModelParam._m0[36u].z * (isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0)));
    }
    else
    {
        _877 = _878;
        _879 = _878;
        _880 = _878;
        _881 = _878;
        _882 = _878;
        _883 = _878;
        _884 = _878;
        _885 = _878;
        _886 = _878;
        _887 = _878;
        _888 = _878;
        _889 = _878;
        _890 = 0.0;
        _891 = 0.0;
        _892 = 0.0;
    }
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _921 = fma(_546, cbModelParam._m0[30u].z, fma(_542, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _538));
        float _925 = fma(_546, cbModelParam._m0[31u].z, fma(_542, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _538));
        float _929 = fma(_546, cbModelParam._m0[32u].z, fma(_542, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _538));
        float _952 = _538 + _304;
        float _953 = _542 + _305;
        float _954 = _546 + _306;
        float _964 = fma(_954, cbModelParam._m0[30u].z, fma(_953, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _952)) - _921;
        float _965 = fma(_954, cbModelParam._m0[31u].z, fma(_953, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _952)) - _925;
        float _966 = fma(_954, cbModelParam._m0[32u].z, fma(_953, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _952)) - _929;
        float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
        float _983 = ((_970 * _964) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_921 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_970 * _965) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_925 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_970 * _966) / cbModelParam._m0[35u].z) + ((((((_929 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        float _1020 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_987.x + (-0.5));
        float _1022 = _1020 * (_987.y + (-0.5));
        float _1023 = _1020 * (_987.z + (-0.5));
        float _1030 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_994.x + (-0.5));
        float _1032 = _1030 * (_994.y + (-0.5));
        float _1033 = _1030 * (_994.z + (-0.5));
        float _1040 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1001.x + (-0.5));
        float _1042 = _1040 * (_1001.y + (-0.5));
        float _1043 = _1040 * (_1001.z + (-0.5));
        float _1050 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1008.x + (-0.5));
        float _1052 = _1050 * (_1008.y + (-0.5));
        float _1053 = _1050 * (_1008.z + (-0.5));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = _1021 * 0.5;
        float _1058 = _1031 * 0.5;
        float _1059 = _1041 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1073 = (dot(vec3(_304, _305, _306), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1082 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3629 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_1084 + 1.0))) + _1089) * _1054;
        float _1099 = _1022 * 0.5;
        float _1100 = _1032 * 0.5;
        float _1101 = _1042 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_304, _305, _306), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3662 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_1126 + 1.0))) + _1131) * _1055;
        float _1141 = _1023 * 0.5;
        float _1142 = _1033 * 0.5;
        float _1143 = _1043 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_304, _305, _306), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3695 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1168 + 1.0))) + _1173) * _1056;
        _1190 = _1023;
        _1191 = _1022;
        _1192 = _1021;
        _1193 = _1033;
        _1194 = _1032;
        _1195 = _1031;
        _1196 = _1043;
        _1197 = _1042;
        _1198 = _1041;
        _1199 = _1056;
        _1200 = _1055;
        _1201 = _1054;
        _1202 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
        _1203 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1204 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
    }
    else
    {
        _1190 = _878;
        _1191 = _878;
        _1192 = _878;
        _1193 = _878;
        _1194 = _878;
        _1195 = _878;
        _1196 = _878;
        _1197 = _878;
        _1198 = _878;
        _1199 = _878;
        _1200 = _878;
        _1201 = _878;
        _1202 = 0.0;
        _1203 = 0.0;
        _1204 = 0.0;
    }
    float _1214 = (cbModelParam._m0[1u].x * (_1202 - _890)) + _890;
    float _1215 = (cbModelParam._m0[1u].x * (_1203 - _891)) + _891;
    float _1216 = (cbModelParam._m0[1u].x * (_1204 - _892)) + _892;
    float _1237 = fma(_1216, cbSceneParam._m0[89u].z, fma(_1215, cbSceneParam._m0[89u].y, _1214 * cbSceneParam._m0[89u].x));
    float _1240 = fma(_1216, cbSceneParam._m0[90u].z, fma(_1215, cbSceneParam._m0[90u].y, _1214 * cbSceneParam._m0[90u].x));
    float _1243 = fma(_1216, cbSceneParam._m0[91u].z, fma(_1215, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1214));
    float _1258 = _482 * 0.5;
    float _1259 = _483 * 0.5;
    float _1260 = _484 * 0.5;
    float _1261 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1192, _1195, _1198, _1201));
    float _1264 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1191, _1194, _1197, _1200));
    float _1267 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_1190, _1193, _1196, _1199));
    float _1301;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1274 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_877, _881, _884, _887));
        float _1278 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_879, _882, _885, _888));
        float _1282 = dot(vec4(_1258, _1259, _1260, 1.0), vec4(_880, _883, _886, _889));
        float _1289 = dot(vec4(cbModelParam._m0[39u]), vec4(_1258, _1259, _1260, 1.0));
        _1301 = dot(vec3(isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)), isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1289) ? 0.0 : (isnan(0.0) ? _1289 : max(0.0, _1289))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1301 = 1.0;
    }
    float _1312;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1303 = dot(vec4(cbModelParam._m0[40u]), vec4(_1258, _1259, _1260, 1.0));
        _1312 = dot(vec3(isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1303) ? 0.0 : (isnan(0.0) ? _1303 : max(0.0, _1303))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1312 = 1.0;
    }
    float _1316 = (_1312 * cbModelParam._m0[1u].x) + (_1301 * (1.0 - cbModelParam._m0[1u].x));
    float _1326 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _307);
    float _1327 = isnan(_1326) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1326 : min(cbModelParam._m0[25u].z, _1326));
    float _1409;
    float _1411;
    float _1413;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1376 = fma(_546, cbModelParam._m0[13u].z, fma(_542, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _538)) + cbModelParam._m0[13u].w;
        float _1380 = fma(_546, cbModelParam._m0[14u].z, fma(_542, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _538)) + cbModelParam._m0[14u].w;
        float _1384 = fma(_546, cbModelParam._m0[15u].z, fma(_542, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _538)) + cbModelParam._m0[15u].w;
        float _1387 = fma(_484, cbModelParam._m0[13u].z, fma(_483, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _482));
        float _1390 = fma(_484, cbModelParam._m0[14u].z, fma(_483, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _482));
        float _1393 = fma(_484, cbModelParam._m0[15u].z, fma(_483, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _482));
        float _1421;
        if (_1387 > 0.0)
        {
            _1421 = abs((1.0 - _1376) / _1387);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1376 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1421 = frontier_phi_17_15_ladder;
        }
        float _1683;
        if (_1390 > 0.0)
        {
            _1683 = abs((1.0 - _1380) / _1390);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1380 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1683 = frontier_phi_26_22_ladder;
        }
        float _1926;
        if (_1393 > 0.0)
        {
            _1926 = abs((1.0 - _1384) / _1393);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1384 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1926 = frontier_phi_38_33_ladder;
        }
        float _1928 = isnan(_1683) ? _1421 : (isnan(_1421) ? _1683 : min(_1421, _1683));
        float _1929 = isnan(_1926) ? _1928 : (isnan(_1928) ? _1926 : min(_1928, _1926));
        float _1933 = (_1929 * _1387) + _1376;
        float _1934 = (_1929 * _1390) + _1380;
        float _1935 = (_1929 * _1393) + _1384;
        float _1936 = _1929 * 9.9999997473787516355514526367188e-05;
        float _1938 = (-1.0) - _1936;
        float _1940 = _1936 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1935 > _1940) || ((_1935 < _1938) || ((_1934 > _1940) || ((_1934 < _1938) || ((_1933 < _1938) || (_1933 > _1940))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2059 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1935, cbModelParam._m0[9u].z, fma(_1934, cbModelParam._m0[9u].y, _1933 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1935, cbModelParam._m0[10u].z, fma(_1934, cbModelParam._m0[10u].y, _1933 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1935, cbModelParam._m0[11u].z, fma(_1934, cbModelParam._m0[11u].y, _1933 * cbModelParam._m0[11u].x))), _1327);
            frontier_phi_16_38_ladder = _2059.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2059.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2059.x * cbModelParam._m0[1u].y;
        }
        _1409 = frontier_phi_16_38_ladder_2;
        _1411 = frontier_phi_16_38_ladder_1;
        _1413 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1397 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_482, _483, _484), _1327);
        _1409 = _1397.x * cbModelParam._m0[1u].y;
        _1411 = _1397.y * cbModelParam._m0[1u].y;
        _1413 = _1397.z * cbModelParam._m0[1u].y;
    }
    float _1417 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _307);
    float _1418 = isnan(_1417) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1417 : min(cbModelParam._m0[25u].w, _1417));
    float _1510;
    float _1512;
    float _1514;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1474 = fma(_546, cbModelParam._m0[21u].z, fma(_542, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _538)) + cbModelParam._m0[21u].w;
        float _1478 = fma(_546, cbModelParam._m0[22u].z, fma(_542, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _538)) + cbModelParam._m0[22u].w;
        float _1482 = fma(_546, cbModelParam._m0[23u].z, fma(_542, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _538)) + cbModelParam._m0[23u].w;
        float _1485 = fma(_484, cbModelParam._m0[21u].z, fma(_483, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _482));
        float _1488 = fma(_484, cbModelParam._m0[22u].z, fma(_483, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _482));
        float _1491 = fma(_484, cbModelParam._m0[23u].z, fma(_483, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _482));
        float _1688;
        if (_1485 > 0.0)
        {
            _1688 = abs((1.0 - _1474) / _1485);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1474 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1688 = frontier_phi_28_24_ladder;
        }
        float _1953;
        if (_1488 > 0.0)
        {
            _1953 = abs((1.0 - _1478) / _1488);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1478 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1953 = frontier_phi_40_35_ladder;
        }
        float _2158;
        if (_1491 > 0.0)
        {
            _2158 = abs((1.0 - _1482) / _1491);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1482 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2158 = frontier_phi_49_46_ladder;
        }
        float _2160 = isnan(_1953) ? _1688 : (isnan(_1688) ? _1953 : min(_1688, _1953));
        float _2161 = isnan(_2158) ? _2160 : (isnan(_2160) ? _2158 : min(_2160, _2158));
        float _2165 = (_2161 * _1485) + _1474;
        float _2166 = (_2161 * _1488) + _1478;
        float _2167 = (_2161 * _1491) + _1482;
        float _2168 = _2161 * 9.9999997473787516355514526367188e-05;
        float _2169 = (-1.0) - _2168;
        float _2171 = _2168 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2167 > _2171) || ((_2167 < _2169) || ((_2166 > _2171) || ((_2166 < _2169) || ((_2165 < _2169) || (_2165 > _2171))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2360 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2167, cbModelParam._m0[17u].z, fma(_2166, cbModelParam._m0[17u].y, _2165 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2167, cbModelParam._m0[18u].z, fma(_2166, cbModelParam._m0[18u].y, _2165 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2167, cbModelParam._m0[19u].z, fma(_2166, cbModelParam._m0[19u].y, _2165 * cbModelParam._m0[19u].x))), _1418);
            frontier_phi_25_49_ladder = _2360.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2360.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2360.x * cbModelParam._m0[1u].z;
        }
        _1510 = frontier_phi_25_49_ladder_2;
        _1512 = frontier_phi_25_49_ladder_1;
        _1514 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1494 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_482, _483, _484), _1418);
        _1510 = _1494.x * cbModelParam._m0[1u].z;
        _1512 = _1494.y * cbModelParam._m0[1u].z;
        _1514 = _1494.z * cbModelParam._m0[1u].z;
    }
    float _1526 = ((((1.0 - _506) * ((_493 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_506 * _493)) * _474;
    float _1527 = _1526 * ((cbModelParam._m0[1u].w * (_1510 - _1409)) + _1409);
    float _1528 = _1526 * ((cbModelParam._m0[1u].w * (_1512 - _1411)) + _1411);
    float _1529 = _1526 * ((cbModelParam._m0[1u].w * (_1514 - _1413)) + _1413);
    float _1532 = fma(_1529, cbSceneParam._m0[89u].z, fma(_1528, cbSceneParam._m0[89u].y, _1527 * cbSceneParam._m0[89u].x));
    float _1535 = fma(_1529, cbSceneParam._m0[90u].z, fma(_1528, cbSceneParam._m0[90u].y, _1527 * cbSceneParam._m0[90u].x));
    float _1538 = fma(_1529, cbSceneParam._m0[91u].z, fma(_1528, cbSceneParam._m0[91u].y, _1527 * cbSceneParam._m0[91u].x));
    float _1549 = _407 / cbSceneParam._m0[86u].x;
    float _1550 = _408 / cbSceneParam._m0[86u].y;
    float _1557 = (cbSceneParam._m0[88u].y * (1.0 - cbMtdParam._m0[25u].y)) + cbSceneParam._m0[88u].z;
    float _3821 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
    float _1559 = (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * 5.0;
    float _1564 = ((10.0 / (_327 + 10.0)) * cbMtdParam._m0[25u].x) * dot(vec3(_304, _305, _306), vec3(1.0, 0.0, 0.0));
    vec4 _1574 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1564 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1564 + _1549) * cbSceneParam._m0[86u].x, _408), _1559).w) + _1549) * cbSceneParam._m0[86u].x, _408), _1559);
    float _1580 = isnan(0.5) ? _1574.w : (isnan(_1574.w) ? 0.5 : max(_1574.w, 0.5));
    float _1595 = 1.0 - (_1574.w / _1580);
    uvec4 _1605 = floatBitsToUint(cbInstanceData._m0[_447 + 5u]);
    uint _1607 = _1605.x * 14u;
    uint _1608 = _1607 + 13u;
    float _1615 = _474 + (-1.0);
    float _1620 = (cbLight._m0[_1608].x * _1615) + 1.0;
    float _1621 = (cbLight._m0[_1608].y * _1615) + 1.0;
    float _1622 = (cbLight._m0[_1608].z * _1615) + 1.0;
    float _1623 = (cbLight._m0[_1608].w * _1615) + 1.0;
    uint _1624 = _1607 + 5u;
    float _1630 = isnan(1.0) ? _1621 : (isnan(_1621) ? 1.0 : min(_1621, 1.0));
    uint _1634 = _1607 + 4u;
    float _1641 = isnan(1.0) ? _1620 : (isnan(_1620) ? 1.0 : min(_1620, 1.0));
    uint _1645 = _1607 | 1u;
    float _1656 = dot(vec3(cbLight._m0[_1607].xyz), vec3(_304, _305, _306));
    float _1659 = dot(vec3(cbLight._m0[_1645].xyz), vec3(_304, _305, _306));
    float _3847 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
    float _3858 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
    float _1664 = (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * 0.3183098733425140380859375;
    float _1666 = (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * 0.3183098733425140380859375;
    float _1673 = ((cbLight._m0[_1624].x * _1630) * _1666) + ((cbLight._m0[_1634].x * _1641) * _1664);
    float _1674 = ((_1630 * cbLight._m0[_1624].y) * _1666) + ((_1641 * cbLight._m0[_1634].y) * _1664);
    float _1675 = ((_1630 * cbLight._m0[_1624].z) * _1666) + ((_1641 * cbLight._m0[_1634].z) * _1664);
    uvec4 _1680 = floatBitsToUint(cbLight._m0[_1607 + 12u]);
    bool _1682 = _1680.x == 0u;
    float _1693;
    float _1695;
    float _1697;
    if (_1682)
    {
        _1693 = _1673;
        _1695 = _1674;
        _1697 = _1675;
    }
    else
    {
        uint _1701 = _1607 + 6u;
        float _1717 = (dot(vec3(cbLight._m0[_1607 + 2u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _1718 = _1717 * _1717;
        float _3869 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1720 = isnan(1.0) ? _1622 : (isnan(_1622) ? 1.0 : min(_1622, 1.0));
        _1693 = (((cbLight._m0[_1701].x * 0.3183098733425140380859375) * _1719) * _1720) + _1673;
        _1695 = (((cbLight._m0[_1701].y * 0.3183098733425140380859375) * _1719) * _1720) + _1674;
        _1697 = (((cbLight._m0[_1701].z * 0.3183098733425140380859375) * _1719) * _1720) + _1675;
    }
    bool _1700 = _1680.y == 0u;
    float _1738;
    float _1740;
    float _1742;
    if (_1700)
    {
        _1738 = _1693;
        _1740 = _1695;
        _1742 = _1697;
    }
    else
    {
        uint _1897 = _1607 + 7u;
        float _1913 = (dot(vec3(cbLight._m0[_1607 + 3u].xyz), vec3(_304, _305, _306)) * 0.5) + 0.5;
        float _1914 = _1913 * _1913;
        float _3885 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1915 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1916 = isnan(1.0) ? _1623 : (isnan(_1623) ? 1.0 : min(_1623, 1.0));
        _1738 = (((cbLight._m0[_1897].x * 0.3183098733425140380859375) * _1915) * _1916) + _1693;
        _1740 = (((cbLight._m0[_1897].y * 0.3183098733425140380859375) * _1915) * _1916) + _1695;
        _1742 = (((cbLight._m0[_1897].z * 0.3183098733425140380859375) * _1915) * _1916) + _1697;
    }
    uint _1745 = _1607 + 8u;
    float _1758 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1607].w)) * _307) * 0.949999988079071044921875);
    float _1759 = _1758 * _1758;
    float _1760 = cbLight._m0[_1607].x + _386;
    float _1761 = cbLight._m0[_1607].y + _387;
    float _1762 = cbLight._m0[_1607].z + _388;
    float _1766 = inversesqrt(dot(vec3(_1760, _1761, _1762), vec3(_1760, _1761, _1762)));
    float _1767 = _1766 * _1760;
    float _1768 = _1766 * _1761;
    float _1769 = _1766 * _1762;
    float _1770 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1607].xyz));
    float _3901 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1773 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _3912 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _1774 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _1775 = dot(vec3(_304, _305, _306), vec3(_1767, _1768, _1769));
    float _3923 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1778 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _1779 = dot(vec3(cbLight._m0[_1607].xyz), vec3(_1767, _1768, _1769));
    float _3934 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1783 = _1759 * _1759;
    float _1787 = ((_1778 * _1778) * (_1783 + (-1.0))) + 1.0;
    float _1798 = (exp2(log2(1.0 - (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1799 = 1.0 - _1759;
    float _1810 = (0.5 / (((_1774 * ((_1773 * _1799) + _1759)) + 9.9999999392252902907785028219223e-09) + (((_1774 * _1799) + _1759) * _1773))) * _1773;
    float _3945 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1812 = (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1783 / ((_1787 * _1787) * 3.141590118408203125));
    uint _1823 = _1607 + 9u;
    float _1834 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1645].w)) * _307) * 0.949999988079071044921875);
    float _1835 = _1834 * _1834;
    float _1836 = cbLight._m0[_1645].x + _386;
    float _1837 = cbLight._m0[_1645].y + _387;
    float _1838 = cbLight._m0[_1645].z + _388;
    float _1842 = inversesqrt(dot(vec3(_1836, _1837, _1838), vec3(_1836, _1837, _1838)));
    float _1843 = _1842 * _1836;
    float _1844 = _1842 * _1837;
    float _1845 = _1842 * _1838;
    float _1846 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1645].xyz));
    float _3956 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1849 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _1850 = dot(vec3(_304, _305, _306), vec3(_1843, _1844, _1845));
    float _3967 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1853 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _1854 = dot(vec3(cbLight._m0[_1645].xyz), vec3(_1843, _1844, _1845));
    float _3978 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1858 = _1835 * _1835;
    float _1862 = ((_1853 * _1853) * (_1858 + (-1.0))) + 1.0;
    float _1871 = (exp2(log2(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1872 = 1.0 - _1835;
    float _1882 = (0.5 / (((_1774 * ((_1849 * _1872) + _1835)) + 9.9999999392252902907785028219223e-09) + (((_1774 * _1872) + _1835) * _1849))) * _1849;
    float _3989 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1884 = (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1858 / ((_1862 * _1862) * 3.141590118408203125));
    float _1894 = (((_1871 * cbLight._m0[_1823].x) * _1884) * _1630) + (((_1798 * cbLight._m0[_1745].x) * _1812) * _1641);
    float _1895 = (((_1871 * cbLight._m0[_1823].y) * _1884) * _1630) + (((_1798 * cbLight._m0[_1745].y) * _1812) * _1641);
    float _1896 = (((_1871 * cbLight._m0[_1823].z) * _1884) * _1630) + (((_1798 * cbLight._m0[_1745].z) * _1812) * _1641);
    float _1958;
    float _1960;
    float _1962;
    if (_1682)
    {
        _1958 = _1894;
        _1960 = _1895;
        _1962 = _1896;
    }
    else
    {
        uint _1964 = _1607 + 2u;
        uint _1968 = _1607 + 10u;
        float _1982 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1964].w)) * _307) * 0.949999988079071044921875);
        float _1983 = _1982 * _1982;
        float _1984 = cbLight._m0[_1964].x + _386;
        float _1985 = cbLight._m0[_1964].y + _387;
        float _1986 = cbLight._m0[_1964].z + _388;
        float _1990 = inversesqrt(dot(vec3(_1984, _1985, _1986), vec3(_1984, _1985, _1986)));
        float _1991 = _1990 * _1984;
        float _1992 = _1990 * _1985;
        float _1993 = _1990 * _1986;
        float _1994 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_1964].xyz));
        float _4000 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
        float _1997 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1998 = dot(vec3(_304, _305, _306), vec3(_1991, _1992, _1993));
        float _4011 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _2001 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _2002 = dot(vec3(cbLight._m0[_1964].xyz), vec3(_1991, _1992, _1993));
        float _4022 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2006 = _1983 * _1983;
        float _2010 = ((_2001 * _2001) * (_2006 + (-1.0))) + 1.0;
        float _2019 = (exp2(log2(1.0 - (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2020 = 1.0 - _1983;
        float _2030 = (0.5 / (((_1774 * ((_1997 * _2020) + _1983)) + 9.9999999392252902907785028219223e-09) + (((_1774 * _2020) + _1983) * _1997))) * _1997;
        float _4033 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2032 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_2006 / ((_2010 * _2010) * 3.141590118408203125));
        float _2033 = isnan(1.0) ? _1622 : (isnan(_1622) ? 1.0 : min(_1622, 1.0));
        _1958 = (((_2019 * cbLight._m0[_1968].x) * _2032) * _2033) + _1894;
        _1960 = (((_2019 * cbLight._m0[_1968].y) * _2032) * _2033) + _1895;
        _1962 = (((_2019 * cbLight._m0[_1968].z) * _2032) * _2033) + _1896;
    }
    float _2068;
    float _2070;
    float _2072;
    if (_1700)
    {
        _2068 = _1958;
        _2070 = _1960;
        _2072 = _1962;
    }
    else
    {
        uint _2079 = _1607 + 3u;
        uint _2083 = _1607 + 11u;
        float _2097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2079].w)) * _307) * 0.949999988079071044921875);
        float _2098 = _2097 * _2097;
        float _2099 = cbLight._m0[_2079].x + _386;
        float _2100 = cbLight._m0[_2079].y + _387;
        float _2101 = cbLight._m0[_2079].z + _388;
        float _2105 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
        float _2106 = _2105 * _2099;
        float _2107 = _2105 * _2100;
        float _2108 = _2105 * _2101;
        float _2109 = dot(vec3(_304, _305, _306), vec3(cbLight._m0[_2079].xyz));
        float _4049 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2112 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _2113 = dot(vec3(_304, _305, _306), vec3(_2106, _2107, _2108));
        float _4060 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2116 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _2117 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_2106, _2107, _2108));
        float _4071 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2121 = _2098 * _2098;
        float _2125 = ((_2116 * _2116) * (_2121 + (-1.0))) + 1.0;
        float _2134 = (exp2(log2(1.0 - (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2135 = 1.0 - _2098;
        float _2145 = (0.5 / (((_1774 * ((_2112 * _2135) + _2098)) + 9.9999999392252902907785028219223e-09) + (((_1774 * _2135) + _2098) * _2112))) * _2112;
        float _4082 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2147 = (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_2121 / ((_2125 * _2125) * 3.141590118408203125));
        float _2148 = isnan(1.0) ? _1623 : (isnan(_1623) ? 1.0 : min(_1623, 1.0));
        _2068 = (((_2134 * cbLight._m0[_2083].x) * _2147) * _2148) + _1958;
        _2070 = (((_2134 * cbLight._m0[_2083].y) * _2147) * _2148) + _1960;
        _2072 = (((_2134 * cbLight._m0[_2083].z) * _2147) * _2148) + _1962;
    }
    float _2283;
    float _2285;
    float _2287;
    float _2289;
    float _2291;
    float _2293;
    if (_1605.y == 0u)
    {
        float _2223 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2224 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2223;
        float _2225 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2223;
        float _2226 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2223;
        uvec4 _2238 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2239 = _2238.x;
        uint _2250 = uint((float(_2238.y) * floor(float(uint(cbSceneParam._m0[85u].y * _408) / _2239))) + floor(float(uint(cbSceneParam._m0[85u].x * _407) / _2239)));
        float _2260 = (log2(_2226 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2261 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        uint _2264 = uint(isnan(14.0) ? _2261 : (isnan(_2261) ? 14.0 : min(_2261, 14.0)));
        uvec4 _2269 = texelFetch(g_lightClusterGridBuffer, int(((_2264 << 2u) + (_2250 << 6u)) >> 2u));
        uint _2270 = _2269.x;
        uint _2271 = _2238.z;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        if (((((1u << ((_2271 >> 4u) & 15u)) + 4294967295u) & _2270) == 0u) || ((_2271 & 240u) == 0u))
        {
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
        }
        else
        {
            float _2366;
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2376;
            float _2517 = 0.0;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            float _2521 = 0.0;
            float _2522 = 0.0;
            uint _2523 = 0u;
            uint _2532;
            bool _2533;
            for (;;)
            {
                _2532 = texelFetch(g_lightClassification, int((((_2264 << 5u) + (_2250 << 9u)) + (_2523 << 2u)) >> 2u)).x;
                _2533 = _2532 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2533)
                {
                    frontier_phi_66_pred = _2517;
                    frontier_phi_66_pred_1 = _2522;
                    frontier_phi_66_pred_2 = _2521;
                    frontier_phi_66_pred_3 = _2520;
                    frontier_phi_66_pred_4 = _2519;
                    frontier_phi_66_pred_5 = _2518;
                }
                else
                {
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    uint _2668;
                    _2662 = _2517;
                    _2663 = _2518;
                    _2664 = _2519;
                    _2665 = _2520;
                    _2666 = _2521;
                    _2667 = _2522;
                    _2668 = _2532;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    float _2594;
                    for (;;)
                    {
                        uint _2672 = uint(findLSB(_2668)) + (_2523 << 5u);
                        uint _2669 = (_2668 + 4294967295u) & _2668;
                        uint _2674 = _2672 * 48u;
                        vec4 _2688 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2674)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 3u)).x));
                        uint _2694 = (_2672 * 48u) + 4u;
                        vec4 _2707 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2694)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 3u)).x));
                        uint _2713 = (_2672 * 48u) + 8u;
                        vec3 _2724 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2713)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 2u)).x));
                        float _2728 = _2688.x - _2224;
                        float _2729 = _2688.y - _2225;
                        float _2730 = _2688.z - _2226;
                        float _2731 = dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730));
                        float _2734 = inversesqrt(_2731);
                        float _2735 = _2734 * _2728;
                        float _2736 = _2734 * _2729;
                        float _2737 = _2734 * _2730;
                        float _2738 = dot(vec3(_428, _431, _434), vec3(_2735, _2736, _2737));
                        float _2743 = 1.0 - (_2731 * _2688.w);
                        float _4108 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
                        float _2744 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                        float _2745 = sqrt(_2731) * _2707.w;
                        float _2748 = 1.39999997615814208984375 / (_2745 + 1.39999997615814208984375);
                        float _2749 = _2748 * _2748;
                        float _2752 = ((1.0 - _2749) * _2738) + _2749;
                        float _2755 = _2745 * _2745;
                        float _2759 = ((isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0))) * _2744) / ((_2755 * 0.699999988079071044921875) + 1.0);
                        float _2763 = (-0.0) - _2224;
                        float _2764 = (-0.0) - _2225;
                        float _2765 = (-0.0) - _2226;
                        float _2769 = inversesqrt(dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765)));
                        float _2770 = _2769 * _2763;
                        float _2771 = _2769 * _2764;
                        float _2772 = _2769 * _2765;
                        float _2780 = exp2(log2(1.0 / ((_2755 * 3.5) + 5.0)) * 0.25);
                        float _2781 = 1.0 - _493;
                        float _2788 = sqrt(1.0 - ((1.0 - (_2781 * _2781)) * (1.0 - (_2780 * _2780))));
                        float _2789 = _2788 * _2788;
                        float _2790 = _2789 * _2789;
                        float _2791 = _2770 + _2735;
                        float _2792 = _2771 + _2736;
                        float _2793 = _2772 + _2737;
                        float _2797 = inversesqrt(dot(vec3(_2791, _2792, _2793), vec3(_2791, _2792, _2793)));
                        float _2801 = dot(vec3(_428, _431, _434), vec3(_2770, _2771, _2772));
                        float _4124 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2804 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                        float _2805 = dot(vec3(_428, _431, _434), vec3(_2797 * _2791, _2797 * _2792, _2797 * _2793));
                        float _4135 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
                        float _2808 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                        float _2812 = ((_2808 * _2808) * (_2790 + (-1.0))) + 1.0;
                        float _2813 = _2748 * _2789;
                        float _2814 = _2813 * _2813;
                        float _2817 = ((1.0 - _2814) * _2738) + _2814;
                        float _4146 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
                        float _2818 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                        float _2819 = 1.0 - _2789;
                        float _2829 = (0.5 / (((_2818 * ((_2804 * _2819) + _2789)) + 9.9999999392252902907785028219223e-09) + (((_2818 * _2819) + _2789) * _2804))) * _2818;
                        float _4157 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
                        float _2840 = (((_2790 * 3.1415927410125732421875) * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) / ((_2812 * _2812) * ((_2755 * 2.1991131305694580078125) + 3.141590118408203125))) * _2744;
                        _2592 = (_2759 * _2707.x) + _2665;
                        _2593 = (_2759 * _2707.y) + _2666;
                        _2594 = (_2759 * _2707.z) + _2667;
                        _2589 = (_2840 * _2724.x) + _2662;
                        _2590 = (_2840 * _2724.y) + _2663;
                        _2591 = (_2840 * _2724.z) + _2664;
                        if (_2669 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2662 = _2589;
                            _2663 = _2590;
                            _2664 = _2591;
                            _2665 = _2592;
                            _2666 = _2593;
                            _2667 = _2594;
                            _2668 = _2669;
                        }
                    }
                    frontier_phi_66_pred = _2589;
                    frontier_phi_66_pred_1 = _2594;
                    frontier_phi_66_pred_2 = _2593;
                    frontier_phi_66_pred_3 = _2592;
                    frontier_phi_66_pred_4 = _2591;
                    frontier_phi_66_pred_5 = _2590;
                }
                _2366 = frontier_phi_66_pred;
                _2376 = frontier_phi_66_pred_1;
                _2374 = frontier_phi_66_pred_2;
                _2372 = frontier_phi_66_pred_3;
                _2370 = frontier_phi_66_pred_4;
                _2368 = frontier_phi_66_pred_5;
                uint _2524 = _2523 + 1u;
                if (_2524 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2517 = _2366;
                    _2518 = _2368;
                    _2519 = _2370;
                    _2520 = _2372;
                    _2521 = _2374;
                    _2522 = _2376;
                    _2523 = _2524;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
        }
        uvec4 _2379 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2380 = _2379.z;
        uint _2382 = (_2380 >> 8u) & 15u;
        float _2485;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        if (((4294967295u << _2382) & _2270) == 0u)
        {
            _2485 = _2365;
            _2487 = _2367;
            _2489 = _2369;
            _2491 = _2371;
            _2493 = _2373;
            _2495 = _2375;
        }
        else
        {
            float _2510 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
            float _2511 = _2510 * _2224;
            float _2512 = _2510 * _2225;
            float _2513 = _2510 * _2226;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2382 < ((_2380 >> 12u) & 15u))
            {
                float _2486;
                float _2488;
                float _2490;
                float _2492;
                float _2494;
                float _2496;
                float _2645 = _2365;
                float _2646 = _2367;
                float _2647 = _2369;
                float _2648 = _2371;
                float _2649 = _2373;
                float _2650 = _2375;
                uint _2651 = _2382;
                uint _2660;
                bool _2661;
                for (;;)
                {
                    _2660 = texelFetch(g_lightClassification, int((((_2264 << 5u) + (_2250 << 9u)) + (_2651 << 2u)) >> 2u)).x;
                    _2661 = _2660 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2661)
                    {
                        frontier_phi_77_pred = _2650;
                        frontier_phi_77_pred_1 = _2649;
                        frontier_phi_77_pred_2 = _2648;
                        frontier_phi_77_pred_3 = _2647;
                        frontier_phi_77_pred_4 = _2646;
                        frontier_phi_77_pred_5 = _2645;
                    }
                    else
                    {
                        float _2854;
                        float _2855;
                        float _2856;
                        float _2857;
                        float _2858;
                        float _2859;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _2867 = _2645;
                        float _2868 = _2646;
                        float _2869 = _2647;
                        float _2870 = _2648;
                        float _2871 = _2649;
                        float _2872 = _2650;
                        uint _2873 = _2660;
                        uint _2874;
                        vec4 _2899;
                        float _2900;
                        vec4 _2915;
                        vec3 _2927;
                        vec4 _2943;
                        vec4 _2959;
                        float _3006;
                        bool _3007;
                        for (;;)
                        {
                            uint _2884 = ((_2651 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2873));
                            _2874 = (_2873 + 4294967295u) & _2873;
                            uint _2886 = _2884 * 40u;
                            _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            _2900 = _2899.w;
                            uint _2902 = (_2884 * 40u) + 4u;
                            _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            uint _2917 = (_2884 * 40u) + 8u;
                            _2927 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x));
                            uint _2930 = (_2884 * 40u) + 16u;
                            _2943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 3u)).x));
                            uint _2946 = (_2884 * 40u) + 20u;
                            _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            uint _2962 = (_2884 * 40u) + 24u;
                            vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            uint _2981 = (_2884 * 40u) + 28u;
                            vec4 _2994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 3u)).x));
                            _3006 = fma(_2226, _2994.z, fma(_2225, _2994.y, _2994.x * _2224)) + _2994.w;
                            _3007 = !((fma(_2226, _2975.z, fma(_2225, _2975.y, _2975.x * _2224)) + _2975.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3007)
                            {
                                float _3034 = _2899.x - _2224;
                                float _3035 = _2899.y - _2225;
                                float _3036 = _2899.z - _2226;
                                float _3037 = dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036));
                                float _3040 = inversesqrt(_3037);
                                float _3041 = _3040 * _3034;
                                float _3042 = _3040 * _3035;
                                float _3043 = _3040 * _3036;
                                float _3047 = 1.0 - (_3037 / (_2900 * _2900));
                                float _4168 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                                float _3048 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3052 = sqrt(_3037) * _2915.w;
                                float _3054 = 1.39999997615814208984375 / (_3052 + 1.39999997615814208984375);
                                float _3055 = _3054 * _3054;
                                float _3058 = ((1.0 - _3055) * dot(vec3(_3041, _3042, _3043), vec3(_428, _431, _434))) + _3055;
                                float _3061 = _3052 * _3052;
                                float _3065 = (fma(_2226, _2943.z, fma(_2225, _2943.y, _2943.x * _2224)) + _2943.w) / _3006;
                                float _3066 = (fma(_2226, _2959.z, fma(_2225, _2959.y, _2959.x * _2224)) + _2959.w) / _3006;
                                float _3070 = 1.0 - dot(vec2(_3065, _3066), vec2(_3065, _3066));
                                float _4184 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3071 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                                float _3072 = _3071 * (((isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0))) * _3048) / ((_3061 * 0.699999988079071044921875) + 1.0));
                                float _3084 = exp2(log2(1.0 / ((_3061 * 3.5) + 5.0)) * 0.25);
                                float _3085 = 1.0 - _493;
                                float _3092 = sqrt(1.0 - ((1.0 - (_3085 * _3085)) * (1.0 - (_3084 * _3084))));
                                float _3093 = _3092 * _3092;
                                float _3094 = _3093 * _3093;
                                float _3095 = _3041 - _2511;
                                float _3096 = _3042 - _2512;
                                float _3097 = _3043 - _2513;
                                float _3101 = inversesqrt(dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097)));
                                float _3105 = dot(vec3(_428, _431, _434), vec3((-0.0) - _2511, (-0.0) - _2512, (-0.0) - _2513));
                                float _4195 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3108 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                                float _3109 = dot(vec3(_428, _431, _434), vec3(_3101 * _3095, _3101 * _3096, _3101 * _3097));
                                float _4206 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3112 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                                float _3116 = ((_3112 * _3112) * (_3094 + (-1.0))) + 1.0;
                                float _3117 = _3054 * _3093;
                                float _3118 = _3117 * _3117;
                                float _3124 = ((1.0 - _3118) * dot(vec3(_428, _431, _434), vec3(_3041, _3042, _3043))) + _3118;
                                float _4217 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                                float _3125 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                                float _3126 = 1.0 - _3093;
                                float _3136 = (0.5 / (((_3125 * ((_3108 * _3126) + _3093)) + 9.9999999392252902907785028219223e-09) + (((_3125 * _3126) + _3093) * _3108))) * _3125;
                                float _4228 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3146 = (_3071 * _3048) * (((_3094 * 3.1415927410125732421875) * (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) / ((_3116 * _3116) * ((_3061 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3072 * _2915.y;
                                frontier_phi_83_pred_1 = _3072 * _2915.x;
                                frontier_phi_83_pred_2 = _3146 * _2927.z;
                                frontier_phi_83_pred_3 = _3146 * _2927.y;
                                frontier_phi_83_pred_4 = _3146 * _2927.x;
                                frontier_phi_83_pred_5 = _3072 * _2915.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3154 = frontier_phi_83_pred;
                            _3153 = frontier_phi_83_pred_1;
                            _3152 = frontier_phi_83_pred_2;
                            _3151 = frontier_phi_83_pred_3;
                            _3150 = frontier_phi_83_pred_4;
                            _3155 = frontier_phi_83_pred_5;
                            _2857 = _3153 + _2870;
                            _2858 = _3154 + _2871;
                            _2859 = _3155 + _2872;
                            _2854 = _3150 + _2867;
                            _2855 = _3151 + _2868;
                            _2856 = _3152 + _2869;
                            if (_2874 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2874;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2859;
                        frontier_phi_77_pred_1 = _2858;
                        frontier_phi_77_pred_2 = _2857;
                        frontier_phi_77_pred_3 = _2856;
                        frontier_phi_77_pred_4 = _2855;
                        frontier_phi_77_pred_5 = _2854;
                    }
                    _2496 = frontier_phi_77_pred;
                    _2494 = frontier_phi_77_pred_1;
                    _2492 = frontier_phi_77_pred_2;
                    _2490 = frontier_phi_77_pred_3;
                    _2488 = frontier_phi_77_pred_4;
                    _2486 = frontier_phi_77_pred_5;
                    uint _2652 = _2651 + 1u;
                    if (_2652 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2645 = _2486;
                        _2646 = _2488;
                        _2647 = _2490;
                        _2648 = _2492;
                        _2649 = _2494;
                        _2650 = _2496;
                        _2651 = _2652;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2490;
                frontier_phi_58_59_ladder_1 = _2496;
                frontier_phi_58_59_ladder_2 = _2494;
                frontier_phi_58_59_ladder_3 = _2492;
                frontier_phi_58_59_ladder_4 = _2488;
                frontier_phi_58_59_ladder_5 = _2486;
            }
            else
            {
                frontier_phi_58_59_ladder = _2369;
                frontier_phi_58_59_ladder_1 = _2375;
                frontier_phi_58_59_ladder_2 = _2373;
                frontier_phi_58_59_ladder_3 = _2371;
                frontier_phi_58_59_ladder_4 = _2367;
                frontier_phi_58_59_ladder_5 = _2365;
            }
            _2485 = frontier_phi_58_59_ladder_5;
            _2487 = frontier_phi_58_59_ladder_4;
            _2489 = frontier_phi_58_59_ladder;
            _2491 = frontier_phi_58_59_ladder_3;
            _2493 = frontier_phi_58_59_ladder_2;
            _2495 = frontier_phi_58_59_ladder_1;
        }
        float _2500 = isnan(1.0) ? _474 : (isnan(_474) ? 1.0 : min(_474, 1.0));
        _2283 = (_2500 * _2491) + _1738;
        _2285 = (_2500 * _2493) + _1740;
        _2287 = (_2500 * _2495) + _1742;
        _2289 = ((_2485 * 0.039999999105930328369140625) * _2500) + _2068;
        _2291 = ((_2487 * 0.039999999105930328369140625) * _2500) + _2070;
        _2293 = ((_2489 * 0.039999999105930328369140625) * _2500) + _2072;
    }
    else
    {
        _2283 = _1738;
        _2285 = _1740;
        _2287 = _1742;
        _2289 = _2068;
        _2291 = _2070;
        _2293 = _2072;
    }
    float _4244 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _4255 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _4266 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _2310 = ((isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2283 + ((isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))) * _474))) + (((((_1526 * (_1574.x / _1580)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _1316) * _1595)) + _2289) * cbPerFrame._m0[3u].x);
    float _2311 = ((isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2285 + ((isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))) * _474))) + (((((_1526 * (_1574.y / _1580)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _1316) * _1595)) + _2291) * cbPerFrame._m0[3u].x);
    float _2312 = ((isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2287 + ((isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))) * _474))) + (((((_1526 * (_1574.z / _1580)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _1316) * _1595)) + _2293) * cbPerFrame._m0[3u].x);
    uint _2313 = _447 + 6u;
    vec4 _2330 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1549, _1550, (log2((isnan(cbSceneParam._m0[77u].w) ? _327 : (isnan(_327) ? cbSceneParam._m0[77u].w : min(_327, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2332 = _2330.x;
    float _2333 = _2330.y;
    float _2334 = _2330.z;
    float _2335 = _2330.w;
    float _2428;
    float _2430;
    float _2432;
    float _2434;
    if (_327 > cbSceneParam._m0[78u].w)
    {
        float _2390 = isnan(_327) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _327 : min(cbSceneParam._m0[80u].w, _327));
        float _2391 = _2390 / _327;
        float _2402 = _2391 * _379;
        float _2403 = _380 * _2391;
        float _2404 = (-0.0) - _2403;
        float _2406 = _2391 * _381;
        float _2408 = (cbSceneParam._m0[77u].w * _2404) / _2390;
        float _2409 = _2408 + cbSceneParam._m0[79u].w;
        float _2410 = cbSceneParam._m0[79u].w - _2403;
        float _2416 = sqrt(((_2402 * _2402) + (_2403 * _2403)) + (_2406 * _2406));
        float _2419 = (1.0 - (cbSceneParam._m0[77u].w / _2390)) * _2416;
        float _2424 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2426 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2602;
        if (abs((_2404 - _2408) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2602 = ((((_2409 > 0.0) ? exp2(_2424 * _2409) : (2.0 - exp2(_2426 * _2409))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2419;
        }
        else
        {
            float _2546 = 1.0 / cbSceneParam._m0[80u].x;
            float _2547 = isnan(_2410) ? _2409 : (isnan(_2409) ? _2410 : max(_2409, _2410));
            float _2548 = isnan(_2410) ? _2409 : (isnan(_2409) ? _2410 : min(_2409, _2410));
            float _2557 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : min(_2547, 0.0));
            float _2558 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : min(_2548, 0.0));
            _2602 = ((abs(_2416 / _2404) * cbSceneParam._m0[80u].y) * ((((_2557 - _2558) * 2.0) - ((exp2(_2424 * (isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0)))) - exp2(_2424 * (isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0))))) * _2546)) - ((exp2(_2426 * _2557) - exp2(_2426 * _2558)) * _2546))) + (_2419 * cbSceneParam._m0[80u].z);
        }
        vec4 _2604 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1549, _1550, 1.0), 0.0);
        float _2613 = exp2((_2602 * (-1.44269502162933349609375)) * (1.0 - _2604.w));
        float _2614 = log2(_2613);
        float _2630 = log2(_2335);
        _2428 = (exp2(_2630 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2614 * cbSceneParam._m0[78u].x)) * _2604.x) / cbSceneParam._m0[78u].x)) + _2332;
        _2430 = (exp2(_2630 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2614 * cbSceneParam._m0[78u].y)) * _2604.y) / cbSceneParam._m0[78u].y)) + _2333;
        _2432 = (exp2(_2630 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2614 * cbSceneParam._m0[78u].z)) * _2604.z) / cbSceneParam._m0[78u].z)) + _2334;
        _2434 = _2613 * _2335;
    }
    else
    {
        _2428 = _2332;
        _2430 = _2333;
        _2432 = _2334;
        _2434 = _2335;
    }
    bool _2640;
    vec4 _2443;
    vec4 _2465;
    float _2467;
    float _2471;
    float _2472;
    float _2473;
    float _2474;
    bool _2484;
    for (;;)
    {
        _2443 = cbMatDynParam._m0[0u];
        float _2445 = roundEven(_2443.y);
        bool _2446 = _2445 == 3.0;
        float _2447 = log2(_2434);
        float _2454 = exp2(_2447 * cbSceneParam._m0[78u].x) * _2310;
        float _2455 = exp2(_2447 * cbSceneParam._m0[78u].y) * _2311;
        float _2456 = exp2(_2447 * cbSceneParam._m0[78u].z) * _2312;
        float _2463 = _395 + (-0.5);
        _2465 = cbMtdParam._m0[1u];
        _2467 = _2465.y * _2463;
        float _2470 = (_2445 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2471 = _2470 * (_2446 ? _2454 : (_2454 + (cbSceneParam._m0[72u].w * _2428)));
        _2472 = _2470 * (_2446 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2430)));
        _2473 = _2470 * (_2446 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2432)));
        _2474 = _2463 * 0.999000012874603271484375;
        _2484 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2484)
        {
            if ((cbInstanceData._m0[_447 + 7u].x + _2474) < 0.5)
            {
                _2640 = true;
                break;
            }
        }
        uint _2581 = _449 + uint(_2443.w);
        if ((cbInstanceData._m0[_2581].w < 1.0) && ((cbInstanceData._m0[_2581].w + _2474) < 0.5))
        {
            _2640 = true;
            break;
        }
        if ((_2467 + _237) < _2465.x)
        {
            _2640 = true;
            break;
        }
        _2640 = false;
        break;
    }
    float _2845;
    if (_2640)
    {
        discard_state = true;
        _2845 = 0.0;
    }
    else
    {
        _2845 = cbInstanceData._m0[_2313].w;
    }
    SV_Target.x = _2471;
    SV_Target.y = _2472;
    SV_Target.z = _2473;
    SV_Target.w = _2845;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2313].w;
    discard_exit();
}


