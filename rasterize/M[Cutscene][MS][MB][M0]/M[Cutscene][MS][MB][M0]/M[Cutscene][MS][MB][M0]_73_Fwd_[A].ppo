#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[33];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1293;
float _3704;
float _3705;
float _3706;
float _3707;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3716 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3727 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3738 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _294) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _295) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _327 = _325.w;
    vec4 _346 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _405 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[28u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[28u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _407 = _405.x;
    float _420 = dot(vec4(_407, _405.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _437 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_407 - _420) * cbMtdParam._m0[24u].x) + _420) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3749 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _438 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _445 = (_438 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _446 = (_438 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _447 = (_438 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    float _451 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _308.x) * _445;
    float _454 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _308.y) * _446;
    float _457 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _308.z) * _447;
    float _464 = ((_445 - _451) * (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0)))) + _451;
    float _465 = ((_446 - _454) * (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0)))) + _454;
    float _466 = ((_447 - _457) * (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) + _457;
    vec4 _479 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _294) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _295) + cbTextureTilingScale._m0[20u].w));
    vec4 _504 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _506 = _504.x;
    float _507 = _504.y;
    float _512 = cbMtdParam._m0[25u].w * _504.z;
    float _3760 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _513 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    vec4 _526 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    float _534 = cbMtdParam._m0[26u].x * _526.z;
    float _3771 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _544 = (((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) - _513) * _438) + _513;
    float _547 = ((((_526.x - _506) * _438) + _506) * 2.0) + (-1.0);
    float _548 = ((((_526.y - _507) * _438) + _507) * 2.0) + (-1.0);
    float _549 = dot(vec2(_547, _548), vec2(_547, _548));
    float _3782 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _554 = sqrt(1.0 - (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))));
    vec4 _577 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _584 = cbMtdParam._m0[25u].z * _577.z;
    float _3793 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _592 = (_547 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_479.x * 2.0) + (-1.0)))) + (((_577.x * 2.0) + (-1.0)) * cbMtdParam._m0[27u].x);
    float _593 = (_548 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_479.y * 2.0) + (-1.0)))) + (((_577.y * 2.0) + (-1.0)) * cbMtdParam._m0[27u].x);
    vec4 _605 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _607 = _605.x;
    float _608 = 1.0 - _607;
    float _634 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_607 - _608) * cbMtdParam._m0[24u].w) + _608) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3804 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _635 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _643 = ((((cbMtdParam._m0[10u].x - _464) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _635) + _464;
    float _644 = ((((cbMtdParam._m0[10u].y - _465) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _635) + _465;
    float _645 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _466)) * _635) + _466;
    float _650 = (((_479.z - _544) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _544;
    float _654 = (((isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) - _650) * cbMtdParam._m0[19u].w) + _650;
    float _658 = ((cbMtdParam._m0[23u].y - _654) * _635) + _654;
    float _662 = ((1.0 - _658) * cbMtdParam._m0[26u].y) + _658;
    float _3815 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _663 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    vec4 _685 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[28u].w * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[29u].x * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _691 = (_685.x * 2.0) + (-1.0);
    float _692 = (_685.y * 2.0) + (-1.0);
    float _693 = dot(vec2(_691, _692), vec2(_691, _692));
    float _3826 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _709 = (_635 * (((cbMtdParam._m0[22u].z * _592) - _592) + _691)) + _592;
    float _710 = (_635 * (((cbMtdParam._m0[22u].z * _593) - _593) + _692)) + _593;
    float _711 = (_635 * (sqrt(1.0 - (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) - _554)) + _554;
    float _713 = cbMtdParam._m0[22u].x + _577.w;
    float _718 = fma(_711, _243 * NORMAL.x, fma(_710, _250 * TANGENT.x, (_236 * _228) * _709));
    float _721 = fma(_711, _243 * NORMAL.y, fma(_710, _250 * TANGENT.y, (_236 * _229) * _709));
    float _724 = fma(_711, _243 * NORMAL.z, fma(_710, _250 * TANGENT.z, (_236 * _230) * _709));
    float _728 = inversesqrt(dot(vec3(_718, _721, _724), vec3(_718, _721, _724)));
    float _729 = _728 * _718;
    float _730 = _728 * _721;
    float _731 = _728 * _724;
    float _3837 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _732 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _3848 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _3859 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _3870 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _3881 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _750 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _801 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _791);
    float _802 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _791);
    float _803 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _791);
    float _807 = inversesqrt(dot(vec3(_801, _802, _803), vec3(_801, _802, _803)));
    float _808 = _801 * _807;
    float _809 = _802 * _807;
    float _810 = _803 * _807;
    vec4 _815 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _817 = _815.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _974 = sqrt(((_801 * _801) + (_802 * _802)) + (_803 * _803));
        float _980 = (cbMatDynParam._m0[5u].x * _974) + cbMatDynParam._m0[5u].y;
        float _3892 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _985 = (cbMatDynParam._m0[5u].z * _974) + cbMatDynParam._m0[5u].w;
        float _3903 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) - _981)) + _981) < ((_817 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _828 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _829 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _847 = fma(_731, cbSceneParam._m0[5u].z, fma(_730, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _729));
    float _850 = fma(_731, cbSceneParam._m0[6u].z, fma(_730, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _729));
    float _853 = fma(_731, cbSceneParam._m0[7u].z, fma(_730, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _729));
    uint _866 = _275 + 9u;
    uint _867 = _866 + uint(cbMatDynParam._m0[0u].w);
    float _873 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * cbInstanceData._m0[_867].x;
    float _874 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * cbInstanceData._m0[_867].y;
    float _875 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * cbInstanceData._m0[_867].z;
    float _3914 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _876 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _3925 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _877 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _3936 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _878 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    vec4 _887 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _828, cbSceneParam._m0[86u].y * _829));
    float _891 = ((isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * TEXCOORD_5.w) * _887.x;
    float _892 = dot(vec3(_729, _730, _731), vec3(_808, _809, _810));
    float _895 = _892 * 2.0;
    float _899 = (_895 * _729) - _808;
    float _900 = (_895 * _730) - _809;
    float _901 = (_895 * _731) - _810;
    float _908 = abs(dot(vec3(_808, _809, _810), vec3(_729, _730, _731)));
    float _3947 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _910 = sqrt(_732);
    float _923 = exp2((_910 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_910 * 3.0));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1292;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1017 = fma(_963, cbModelParam._m0[26u].z, fma(_959, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _955));
        float _1021 = fma(_963, cbModelParam._m0[27u].z, fma(_959, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _955));
        float _1025 = fma(_963, cbModelParam._m0[28u].z, fma(_959, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _955));
        float _1050 = _955 + _729;
        float _1051 = _959 + _730;
        float _1052 = _963 + _731;
        float _1062 = fma(_1052, cbModelParam._m0[26u].z, fma(_1051, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1050)) - _1017;
        float _1063 = fma(_1052, cbModelParam._m0[27u].z, fma(_1051, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1050)) - _1021;
        float _1064 = fma(_1052, cbModelParam._m0[28u].z, fma(_1051, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1050)) - _1025;
        float _1068 = inversesqrt(dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064)));
        float _1081 = ((_1068 * _1062) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1017 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1082 = ((_1068 * _1063) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1021 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1068 * _1064) / cbModelParam._m0[34u].z) + ((((((_1025 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        float _1120 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1086.x + (-0.5));
        float _1122 = _1120 * (_1086.y + (-0.5));
        float _1123 = _1120 * (_1086.z + (-0.5));
        float _1130 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1093.x + (-0.5));
        float _1132 = _1130 * (_1093.y + (-0.5));
        float _1133 = _1130 * (_1093.z + (-0.5));
        float _1140 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1100.x + (-0.5));
        float _1142 = _1140 * (_1100.y + (-0.5));
        float _1143 = _1140 * (_1100.z + (-0.5));
        float _1150 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1107.x + (-0.5));
        float _1152 = _1150 * (_1107.y + (-0.5));
        float _1153 = _1150 * (_1107.z + (-0.5));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = _1121 * 0.5;
        float _1158 = _1131 * 0.5;
        float _1159 = _1141 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1174 = (dot(vec3(_729, _730, _731), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1184 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _3995 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1186 + 1.0))) + _1191) * _1154;
        float _1201 = _1122 * 0.5;
        float _1202 = _1132 * 0.5;
        float _1203 = _1142 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1217 = (dot(vec3(_729, _730, _731), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1226 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _4028 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1228 + 1.0))) + _1233) * _1155;
        float _1243 = _1123 * 0.5;
        float _1244 = _1133 * 0.5;
        float _1245 = _1143 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_729, _730, _731), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _4061 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1270 + 1.0))) + _1275) * _1156;
        _1292 = _1123;
        _1294 = _1122;
        _1295 = _1121;
        _1296 = _1133;
        _1297 = _1132;
        _1298 = _1131;
        _1299 = _1143;
        _1300 = _1142;
        _1301 = _1141;
        _1302 = _1156;
        _1303 = _1155;
        _1304 = _1154;
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
        _1306 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
        _1307 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
    }
    else
    {
        _1292 = _1293;
        _1294 = _1293;
        _1295 = _1293;
        _1296 = _1293;
        _1297 = _1293;
        _1298 = _1293;
        _1299 = _1293;
        _1300 = _1293;
        _1301 = _1293;
        _1302 = _1293;
        _1303 = _1293;
        _1304 = _1293;
        _1305 = 0.0;
        _1306 = 0.0;
        _1307 = 0.0;
    }
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1334 = fma(_963, cbModelParam._m0[30u].z, fma(_959, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _955));
        float _1338 = fma(_963, cbModelParam._m0[31u].z, fma(_959, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _955));
        float _1342 = fma(_963, cbModelParam._m0[32u].z, fma(_959, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _955));
        float _1365 = _955 + _729;
        float _1366 = _959 + _730;
        float _1367 = _963 + _731;
        float _1377 = fma(_1367, cbModelParam._m0[30u].z, fma(_1366, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1365)) - _1334;
        float _1378 = fma(_1367, cbModelParam._m0[31u].z, fma(_1366, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1365)) - _1338;
        float _1379 = fma(_1367, cbModelParam._m0[32u].z, fma(_1366, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1365)) - _1342;
        float _1383 = inversesqrt(dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379)));
        float _1396 = ((_1383 * _1377) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1334 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1383 * _1378) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1338 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1398 = ((_1383 * _1379) / cbModelParam._m0[35u].z) + ((((((_1342 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        float _1433 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1400.x + (-0.5));
        float _1435 = _1433 * (_1400.y + (-0.5));
        float _1436 = _1433 * (_1400.z + (-0.5));
        float _1443 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1407.x + (-0.5));
        float _1445 = _1443 * (_1407.y + (-0.5));
        float _1446 = _1443 * (_1407.z + (-0.5));
        float _1453 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1414.x + (-0.5));
        float _1455 = _1453 * (_1414.y + (-0.5));
        float _1456 = _1453 * (_1414.z + (-0.5));
        float _1463 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1421.x + (-0.5));
        float _1465 = _1463 * (_1421.y + (-0.5));
        float _1466 = _1463 * (_1421.z + (-0.5));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = _1434 * 0.5;
        float _1471 = _1444 * 0.5;
        float _1472 = _1454 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_729, _730, _731), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4124 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1497 + 1.0))) + _1502) * _1467;
        float _1512 = _1435 * 0.5;
        float _1513 = _1445 * 0.5;
        float _1514 = _1455 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_729, _730, _731), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4157 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1539 + 1.0))) + _1544) * _1468;
        float _1554 = _1436 * 0.5;
        float _1555 = _1446 * 0.5;
        float _1556 = _1456 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_729, _730, _731), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4168 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4179 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4190 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1581 + 1.0))) + _1586) * _1469;
        _1603 = _1436;
        _1604 = _1435;
        _1605 = _1434;
        _1606 = _1446;
        _1607 = _1445;
        _1608 = _1444;
        _1609 = _1456;
        _1610 = _1455;
        _1611 = _1454;
        _1612 = _1469;
        _1613 = _1468;
        _1614 = _1467;
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
        _1617 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
    }
    else
    {
        _1603 = _1293;
        _1604 = _1293;
        _1605 = _1293;
        _1606 = _1293;
        _1607 = _1293;
        _1608 = _1293;
        _1609 = _1293;
        _1610 = _1293;
        _1611 = _1293;
        _1612 = _1293;
        _1613 = _1293;
        _1614 = _1293;
        _1615 = 0.0;
        _1616 = 0.0;
        _1617 = 0.0;
    }
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1305)) + _1305;
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1306)) + _1306;
    float _1629 = (cbModelParam._m0[1u].x * (_1617 - _1307)) + _1307;
    float _1650 = fma(_1629, cbSceneParam._m0[89u].z, fma(_1628, cbSceneParam._m0[89u].y, _1627 * cbSceneParam._m0[89u].x));
    float _1653 = fma(_1629, cbSceneParam._m0[90u].z, fma(_1628, cbSceneParam._m0[90u].y, _1627 * cbSceneParam._m0[90u].x));
    float _1656 = fma(_1629, cbSceneParam._m0[91u].z, fma(_1628, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1627));
    float _1671 = _899 * 0.5;
    float _1672 = _900 * 0.5;
    float _1673 = _901 * 0.5;
    float _1674 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1605, _1608, _1611, _1614));
    float _1677 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1680 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1714;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1687 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1292, _1296, _1299, _1302));
        float _1691 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1294, _1297, _1300, _1303));
        float _1695 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1295, _1298, _1301, _1304));
        float _1702 = dot(vec4(cbModelParam._m0[39u]), vec4(_1671, _1672, _1673, 1.0));
        _1714 = dot(vec3(isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1702) ? 0.0 : (isnan(0.0) ? _1702 : max(0.0, _1702))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1714 = 1.0;
    }
    float _1725;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1716 = dot(vec4(cbModelParam._m0[40u]), vec4(_1671, _1672, _1673, 1.0));
        _1725 = dot(vec3(isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1716) ? 0.0 : (isnan(0.0) ? _1716 : max(0.0, _1716))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1725 = 1.0;
    }
    float _1729 = (_1725 * cbModelParam._m0[1u].x) + (_1714 * (1.0 - cbModelParam._m0[1u].x));
    float _1739 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _732);
    float _1740 = isnan(_1739) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1739 : min(cbModelParam._m0[25u].z, _1739));
    float _1822;
    float _1824;
    float _1826;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1789 = fma(_963, cbModelParam._m0[13u].z, fma(_959, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _955)) + cbModelParam._m0[13u].w;
        float _1793 = fma(_963, cbModelParam._m0[14u].z, fma(_959, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _955)) + cbModelParam._m0[14u].w;
        float _1797 = fma(_963, cbModelParam._m0[15u].z, fma(_959, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _955)) + cbModelParam._m0[15u].w;
        float _1800 = fma(_901, cbModelParam._m0[13u].z, fma(_900, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _899));
        float _1803 = fma(_901, cbModelParam._m0[14u].z, fma(_900, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _899));
        float _1806 = fma(_901, cbModelParam._m0[15u].z, fma(_900, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _899));
        float _1834;
        if (_1800 > 0.0)
        {
            _1834 = abs((1.0 - _1789) / _1800);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1789 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1834 = frontier_phi_17_15_ladder;
        }
        float _2093;
        if (_1803 > 0.0)
        {
            _2093 = abs((1.0 - _1793) / _1803);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1793 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2093 = frontier_phi_26_22_ladder;
        }
        float _2336;
        if (_1806 > 0.0)
        {
            _2336 = abs((1.0 - _1797) / _1806);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1797 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2336 = frontier_phi_38_33_ladder;
        }
        float _2338 = isnan(_2093) ? _1834 : (isnan(_1834) ? _2093 : min(_1834, _2093));
        float _2339 = isnan(_2336) ? _2338 : (isnan(_2338) ? _2336 : min(_2338, _2336));
        float _2343 = (_2339 * _1800) + _1789;
        float _2344 = (_2339 * _1803) + _1793;
        float _2345 = (_2339 * _1806) + _1797;
        float _2346 = _2339 * 9.9999997473787516355514526367188e-05;
        float _2348 = (-1.0) - _2346;
        float _2350 = _2346 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2345 > _2350) || ((_2345 < _2348) || ((_2344 > _2350) || ((_2344 < _2348) || ((_2343 < _2348) || (_2343 > _2350))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2469 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2345, cbModelParam._m0[9u].z, fma(_2344, cbModelParam._m0[9u].y, _2343 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2345, cbModelParam._m0[10u].z, fma(_2344, cbModelParam._m0[10u].y, _2343 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2345, cbModelParam._m0[11u].z, fma(_2344, cbModelParam._m0[11u].y, _2343 * cbModelParam._m0[11u].x))), _1740);
            frontier_phi_16_38_ladder = _2469.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2469.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2469.x * cbModelParam._m0[1u].y;
        }
        _1822 = frontier_phi_16_38_ladder_2;
        _1824 = frontier_phi_16_38_ladder_1;
        _1826 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1810 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_899, _900, _901), _1740);
        _1822 = _1810.x * cbModelParam._m0[1u].y;
        _1824 = _1810.y * cbModelParam._m0[1u].y;
        _1826 = _1810.z * cbModelParam._m0[1u].y;
    }
    float _1830 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _732);
    float _1831 = isnan(_1830) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1830 : min(cbModelParam._m0[25u].w, _1830));
    float _1922;
    float _1924;
    float _1926;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1886 = fma(_963, cbModelParam._m0[21u].z, fma(_959, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _955)) + cbModelParam._m0[21u].w;
        float _1890 = fma(_963, cbModelParam._m0[22u].z, fma(_959, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _955)) + cbModelParam._m0[22u].w;
        float _1894 = fma(_963, cbModelParam._m0[23u].z, fma(_959, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _955)) + cbModelParam._m0[23u].w;
        float _1897 = fma(_901, cbModelParam._m0[21u].z, fma(_900, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _899));
        float _1900 = fma(_901, cbModelParam._m0[22u].z, fma(_900, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _899));
        float _1903 = fma(_901, cbModelParam._m0[23u].z, fma(_900, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _899));
        float _2098;
        if (_1897 > 0.0)
        {
            _2098 = abs((1.0 - _1886) / _1897);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1886 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2098 = frontier_phi_28_24_ladder;
        }
        float _2363;
        if (_1900 > 0.0)
        {
            _2363 = abs((1.0 - _1890) / _1900);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1890 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2363 = frontier_phi_40_35_ladder;
        }
        float _2568;
        if (_1903 > 0.0)
        {
            _2568 = abs((1.0 - _1894) / _1903);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1894 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2568 = frontier_phi_49_46_ladder;
        }
        float _2570 = isnan(_2363) ? _2098 : (isnan(_2098) ? _2363 : min(_2098, _2363));
        float _2571 = isnan(_2568) ? _2570 : (isnan(_2570) ? _2568 : min(_2570, _2568));
        float _2575 = (_2571 * _1897) + _1886;
        float _2576 = (_2571 * _1900) + _1890;
        float _2577 = (_2571 * _1903) + _1894;
        float _2578 = _2571 * 9.9999997473787516355514526367188e-05;
        float _2579 = (-1.0) - _2578;
        float _2581 = _2578 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2577 > _2581) || ((_2577 < _2579) || ((_2576 > _2581) || ((_2576 < _2579) || ((_2575 < _2579) || (_2575 > _2581))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2770 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2577, cbModelParam._m0[17u].z, fma(_2576, cbModelParam._m0[17u].y, _2575 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2577, cbModelParam._m0[18u].z, fma(_2576, cbModelParam._m0[18u].y, _2575 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2577, cbModelParam._m0[19u].z, fma(_2576, cbModelParam._m0[19u].y, _2575 * cbModelParam._m0[19u].x))), _1831);
            frontier_phi_25_49_ladder = _2770.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2770.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2770.x * cbModelParam._m0[1u].z;
        }
        _1922 = frontier_phi_25_49_ladder_2;
        _1924 = frontier_phi_25_49_ladder_1;
        _1926 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1906 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_899, _900, _901), _1831);
        _1922 = _1906.x * cbModelParam._m0[1u].z;
        _1924 = _1906.y * cbModelParam._m0[1u].z;
        _1926 = _1906.z * cbModelParam._m0[1u].z;
    }
    float _1938 = ((((1.0 - _923) * ((_910 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_923 * _910)) * _891;
    float _1939 = _1938 * ((cbModelParam._m0[1u].w * (_1922 - _1822)) + _1822);
    float _1940 = _1938 * ((cbModelParam._m0[1u].w * (_1924 - _1824)) + _1824);
    float _1941 = _1938 * ((cbModelParam._m0[1u].w * (_1926 - _1826)) + _1826);
    float _1944 = fma(_1941, cbSceneParam._m0[89u].z, fma(_1940, cbSceneParam._m0[89u].y, _1939 * cbSceneParam._m0[89u].x));
    float _1947 = fma(_1941, cbSceneParam._m0[90u].z, fma(_1940, cbSceneParam._m0[90u].y, _1939 * cbSceneParam._m0[90u].x));
    float _1950 = fma(_1941, cbSceneParam._m0[91u].z, fma(_1940, cbSceneParam._m0[91u].y, _1939 * cbSceneParam._m0[91u].x));
    float _1961 = _828 / cbSceneParam._m0[86u].x;
    float _1962 = _829 / cbSceneParam._m0[86u].y;
    float _1969 = (cbSceneParam._m0[88u].y * (1.0 - cbMtdParam._m0[25u].y)) + cbSceneParam._m0[88u].z;
    float _4316 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1971 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * 5.0;
    float _1976 = ((10.0 / (_750 + 10.0)) * cbMtdParam._m0[25u].x) * dot(vec3(_729, _730, _731), vec3(1.0, 0.0, 0.0));
    vec4 _1986 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_1976 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_1976 + _1961) * cbSceneParam._m0[86u].x, _829), _1971).w) + _1961) * cbSceneParam._m0[86u].x, _829), _1971);
    float _1992 = isnan(0.5) ? _1986.w : (isnan(_1986.w) ? 0.5 : max(_1986.w, 0.5));
    float _2007 = 1.0 - (_1986.w / _1992);
    uvec4 _2017 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _2019 = _2017.x * 14u;
    uint _2020 = _2019 + 13u;
    float _2027 = _891 + (-1.0);
    float _2032 = (cbLight._m0[_2020].x * _2027) + 1.0;
    float _2033 = (cbLight._m0[_2020].y * _2027) + 1.0;
    float _2034 = (cbLight._m0[_2020].z * _2027) + 1.0;
    float _2035 = (cbLight._m0[_2020].w * _2027) + 1.0;
    uint _2036 = _2019 + 5u;
    float _2042 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
    uint _2046 = _2019 + 4u;
    float _2052 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
    uint _2056 = _2019 | 1u;
    float _2067 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_729, _730, _731));
    float _2070 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_729, _730, _731));
    float _4342 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _4353 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2075 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * 0.3183098733425140380859375;
    float _2077 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * 0.3183098733425140380859375;
    float _2084 = ((cbLight._m0[_2036].x * _2042) * _2077) + ((cbLight._m0[_2046].x * _2052) * _2075);
    float _2085 = ((_2042 * cbLight._m0[_2036].y) * _2077) + ((_2052 * cbLight._m0[_2046].y) * _2075);
    float _2086 = ((_2042 * cbLight._m0[_2036].z) * _2077) + ((_2052 * cbLight._m0[_2046].z) * _2075);
    uvec4 _2090 = floatBitsToUint(cbLight._m0[_2019 + 12u]);
    bool _2092 = _2090.x == 0u;
    float _2103;
    float _2105;
    float _2107;
    if (_2092)
    {
        _2103 = _2084;
        _2105 = _2085;
        _2107 = _2086;
    }
    else
    {
        uint _2111 = _2019 + 6u;
        float _2127 = (dot(vec3(cbLight._m0[_2019 + 2u].xyz), vec3(_729, _730, _731)) * 0.5) + 0.5;
        float _2128 = _2127 * _2127;
        float _4364 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2129 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2130 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2103 = (((cbLight._m0[_2111].x * 0.3183098733425140380859375) * _2129) * _2130) + _2084;
        _2105 = (((cbLight._m0[_2111].y * 0.3183098733425140380859375) * _2129) * _2130) + _2085;
        _2107 = (((cbLight._m0[_2111].z * 0.3183098733425140380859375) * _2129) * _2130) + _2086;
    }
    bool _2110 = _2090.y == 0u;
    float _2148;
    float _2150;
    float _2152;
    if (_2110)
    {
        _2148 = _2103;
        _2150 = _2105;
        _2152 = _2107;
    }
    else
    {
        uint _2307 = _2019 + 7u;
        float _2323 = (dot(vec3(cbLight._m0[_2019 + 3u].xyz), vec3(_729, _730, _731)) * 0.5) + 0.5;
        float _2324 = _2323 * _2323;
        float _4380 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2325 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2326 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2148 = (((cbLight._m0[_2307].x * 0.3183098733425140380859375) * _2325) * _2326) + _2103;
        _2150 = (((cbLight._m0[_2307].y * 0.3183098733425140380859375) * _2325) * _2326) + _2105;
        _2152 = (((cbLight._m0[_2307].z * 0.3183098733425140380859375) * _2325) * _2326) + _2107;
    }
    uint _2155 = _2019 + 8u;
    float _2168 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2019].w)) * _732) * 0.949999988079071044921875);
    float _2169 = _2168 * _2168;
    float _2170 = cbLight._m0[_2019].x + _808;
    float _2171 = cbLight._m0[_2019].y + _809;
    float _2172 = cbLight._m0[_2019].z + _810;
    float _2176 = inversesqrt(dot(vec3(_2170, _2171, _2172), vec3(_2170, _2171, _2172)));
    float _2177 = _2176 * _2170;
    float _2178 = _2176 * _2171;
    float _2179 = _2176 * _2172;
    float _2180 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_2019].xyz));
    float _4396 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2183 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _4407 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _2184 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2185 = dot(vec3(_729, _730, _731), vec3(_2177, _2178, _2179));
    float _4418 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2188 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _2189 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_2177, _2178, _2179));
    float _4429 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2193 = _2169 * _2169;
    float _2197 = ((_2188 * _2188) * (_2193 + (-1.0))) + 1.0;
    float _2208 = (exp2(log2(1.0 - (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2209 = 1.0 - _2169;
    float _2220 = (0.5 / (((_2184 * ((_2183 * _2209) + _2169)) + 9.9999999392252902907785028219223e-09) + (((_2184 * _2209) + _2169) * _2183))) * _2183;
    float _4440 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2222 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2193 / ((_2197 * _2197) * 3.141590118408203125));
    uint _2233 = _2019 + 9u;
    float _2244 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2056].w)) * _732) * 0.949999988079071044921875);
    float _2245 = _2244 * _2244;
    float _2246 = cbLight._m0[_2056].x + _808;
    float _2247 = cbLight._m0[_2056].y + _809;
    float _2248 = cbLight._m0[_2056].z + _810;
    float _2252 = inversesqrt(dot(vec3(_2246, _2247, _2248), vec3(_2246, _2247, _2248)));
    float _2253 = _2252 * _2246;
    float _2254 = _2252 * _2247;
    float _2255 = _2252 * _2248;
    float _2256 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_2056].xyz));
    float _4451 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _2260 = dot(vec3(_729, _730, _731), vec3(_2253, _2254, _2255));
    float _4462 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2263 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _2264 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_2253, _2254, _2255));
    float _4473 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2268 = _2245 * _2245;
    float _2272 = ((_2263 * _2263) * (_2268 + (-1.0))) + 1.0;
    float _2281 = (exp2(log2(1.0 - (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2282 = 1.0 - _2245;
    float _2292 = (0.5 / (((_2184 * ((_2259 * _2282) + _2245)) + 9.9999999392252902907785028219223e-09) + (((_2184 * _2282) + _2245) * _2259))) * _2259;
    float _4484 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2294 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2268 / ((_2272 * _2272) * 3.141590118408203125));
    float _2304 = (((_2281 * cbLight._m0[_2233].x) * _2294) * _2042) + (((_2208 * cbLight._m0[_2155].x) * _2222) * _2052);
    float _2305 = (((_2281 * cbLight._m0[_2233].y) * _2294) * _2042) + (((_2208 * cbLight._m0[_2155].y) * _2222) * _2052);
    float _2306 = (((_2281 * cbLight._m0[_2233].z) * _2294) * _2042) + (((_2208 * cbLight._m0[_2155].z) * _2222) * _2052);
    float _2368;
    float _2370;
    float _2372;
    if (_2092)
    {
        _2368 = _2304;
        _2370 = _2305;
        _2372 = _2306;
    }
    else
    {
        uint _2374 = _2019 + 2u;
        uint _2378 = _2019 + 10u;
        float _2392 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2374].w)) * _732) * 0.949999988079071044921875);
        float _2393 = _2392 * _2392;
        float _2394 = cbLight._m0[_2374].x + _808;
        float _2395 = cbLight._m0[_2374].y + _809;
        float _2396 = cbLight._m0[_2374].z + _810;
        float _2400 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
        float _2401 = _2400 * _2394;
        float _2402 = _2400 * _2395;
        float _2403 = _2400 * _2396;
        float _2404 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_2374].xyz));
        float _4495 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2407 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2408 = dot(vec3(_729, _730, _731), vec3(_2401, _2402, _2403));
        float _4506 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2412 = dot(vec3(cbLight._m0[_2374].xyz), vec3(_2401, _2402, _2403));
        float _4517 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2416 = _2393 * _2393;
        float _2420 = ((_2411 * _2411) * (_2416 + (-1.0))) + 1.0;
        float _2429 = (exp2(log2(1.0 - (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2430 = 1.0 - _2393;
        float _2440 = (0.5 / (((_2184 * ((_2407 * _2430) + _2393)) + 9.9999999392252902907785028219223e-09) + (((_2184 * _2430) + _2393) * _2407))) * _2407;
        float _4528 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2442 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_2416 / ((_2420 * _2420) * 3.141590118408203125));
        float _2443 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2368 = (((_2429 * cbLight._m0[_2378].x) * _2442) * _2443) + _2304;
        _2370 = (((_2429 * cbLight._m0[_2378].y) * _2442) * _2443) + _2305;
        _2372 = (((_2429 * cbLight._m0[_2378].z) * _2442) * _2443) + _2306;
    }
    float _2478;
    float _2480;
    float _2482;
    if (_2110)
    {
        _2478 = _2368;
        _2480 = _2370;
        _2482 = _2372;
    }
    else
    {
        uint _2489 = _2019 + 3u;
        uint _2493 = _2019 + 11u;
        float _2507 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2489].w)) * _732) * 0.949999988079071044921875);
        float _2508 = _2507 * _2507;
        float _2509 = cbLight._m0[_2489].x + _808;
        float _2510 = cbLight._m0[_2489].y + _809;
        float _2511 = cbLight._m0[_2489].z + _810;
        float _2515 = inversesqrt(dot(vec3(_2509, _2510, _2511), vec3(_2509, _2510, _2511)));
        float _2516 = _2515 * _2509;
        float _2517 = _2515 * _2510;
        float _2518 = _2515 * _2511;
        float _2519 = dot(vec3(_729, _730, _731), vec3(cbLight._m0[_2489].xyz));
        float _4544 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2522 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2523 = dot(vec3(_729, _730, _731), vec3(_2516, _2517, _2518));
        float _4555 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2526 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2527 = dot(vec3(cbLight._m0[_2489].xyz), vec3(_2516, _2517, _2518));
        float _4566 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2531 = _2508 * _2508;
        float _2535 = ((_2526 * _2526) * (_2531 + (-1.0))) + 1.0;
        float _2544 = (exp2(log2(1.0 - (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2545 = 1.0 - _2508;
        float _2555 = (0.5 / (((_2184 * ((_2522 * _2545) + _2508)) + 9.9999999392252902907785028219223e-09) + (((_2184 * _2545) + _2508) * _2522))) * _2522;
        float _4577 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2557 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2531 / ((_2535 * _2535) * 3.141590118408203125));
        float _2558 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2478 = (((_2544 * cbLight._m0[_2493].x) * _2557) * _2558) + _2368;
        _2480 = (((_2544 * cbLight._m0[_2493].y) * _2557) * _2558) + _2370;
        _2482 = (((_2544 * cbLight._m0[_2493].z) * _2557) * _2558) + _2372;
    }
    float _2693;
    float _2695;
    float _2697;
    float _2699;
    float _2701;
    float _2703;
    if (_2017.y == 0u)
    {
        float _2633 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2634 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2633;
        float _2635 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2633;
        float _2636 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2633;
        uvec4 _2648 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2649 = _2648.x;
        uint _2660 = uint((float(_2648.y) * floor(float(uint(cbSceneParam._m0[85u].y * _829) / _2649))) + floor(float(uint(cbSceneParam._m0[85u].x * _828) / _2649)));
        float _2670 = (log2(_2636 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2671 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        uint _2674 = uint(isnan(14.0) ? _2671 : (isnan(_2671) ? 14.0 : min(_2671, 14.0)));
        uvec4 _2679 = texelFetch(g_lightClusterGridBuffer, int(((_2674 << 2u) + (_2660 << 6u)) >> 2u));
        uint _2680 = _2679.x;
        uint _2681 = _2648.z;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        if (((((1u << ((_2681 >> 4u) & 15u)) + 4294967295u) & _2680) == 0u) || ((_2681 & 240u) == 0u))
        {
            _2775 = 0.0;
            _2777 = 0.0;
            _2779 = 0.0;
            _2781 = 0.0;
            _2783 = 0.0;
            _2785 = 0.0;
        }
        else
        {
            float _2776;
            float _2778;
            float _2780;
            float _2782;
            float _2784;
            float _2786;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            uint _2933 = 0u;
            uint _2942;
            bool _2943;
            for (;;)
            {
                _2942 = texelFetch(g_lightClassification, int((((_2674 << 5u) + (_2660 << 9u)) + (_2933 << 2u)) >> 2u)).x;
                _2943 = _2942 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2943)
                {
                    frontier_phi_66_pred = _2927;
                    frontier_phi_66_pred_1 = _2932;
                    frontier_phi_66_pred_2 = _2931;
                    frontier_phi_66_pred_3 = _2930;
                    frontier_phi_66_pred_4 = _2929;
                    frontier_phi_66_pred_5 = _2928;
                }
                else
                {
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    uint _3078;
                    _3072 = _2927;
                    _3073 = _2928;
                    _3074 = _2929;
                    _3075 = _2930;
                    _3076 = _2931;
                    _3077 = _2932;
                    _3078 = _2942;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    for (;;)
                    {
                        uint _3082 = uint(findLSB(_3078)) + (_2933 << 5u);
                        uint _3079 = (_3078 + 4294967295u) & _3078;
                        uint _3084 = _3082 * 48u;
                        vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3084)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 3u)).x));
                        uint _3104 = (_3082 * 48u) + 4u;
                        vec4 _3117 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3104)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 3u)).x));
                        uint _3123 = (_3082 * 48u) + 8u;
                        vec3 _3134 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3123)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 2u)).x));
                        float _3138 = _3098.x - _2634;
                        float _3139 = _3098.y - _2635;
                        float _3140 = _3098.z - _2636;
                        float _3141 = dot(vec3(_3138, _3139, _3140), vec3(_3138, _3139, _3140));
                        float _3144 = inversesqrt(_3141);
                        float _3145 = _3144 * _3138;
                        float _3146 = _3144 * _3139;
                        float _3147 = _3144 * _3140;
                        float _3148 = dot(vec3(_847, _850, _853), vec3(_3145, _3146, _3147));
                        float _3153 = 1.0 - (_3141 * _3098.w);
                        float _4603 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3154 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                        float _3155 = sqrt(_3141) * _3117.w;
                        float _3158 = 1.39999997615814208984375 / (_3155 + 1.39999997615814208984375);
                        float _3159 = _3158 * _3158;
                        float _3162 = ((1.0 - _3159) * _3148) + _3159;
                        float _3165 = _3155 * _3155;
                        float _3169 = ((isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0))) * _3154) / ((_3165 * 0.699999988079071044921875) + 1.0);
                        float _3173 = (-0.0) - _2634;
                        float _3174 = (-0.0) - _2635;
                        float _3175 = (-0.0) - _2636;
                        float _3179 = inversesqrt(dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175)));
                        float _3180 = _3179 * _3173;
                        float _3181 = _3179 * _3174;
                        float _3182 = _3179 * _3175;
                        float _3190 = exp2(log2(1.0 / ((_3165 * 3.5) + 5.0)) * 0.25);
                        float _3191 = 1.0 - _910;
                        float _3198 = sqrt(1.0 - ((1.0 - (_3191 * _3191)) * (1.0 - (_3190 * _3190))));
                        float _3199 = _3198 * _3198;
                        float _3200 = _3199 * _3199;
                        float _3201 = _3180 + _3145;
                        float _3202 = _3181 + _3146;
                        float _3203 = _3182 + _3147;
                        float _3207 = inversesqrt(dot(vec3(_3201, _3202, _3203), vec3(_3201, _3202, _3203)));
                        float _3211 = dot(vec3(_847, _850, _853), vec3(_3180, _3181, _3182));
                        float _4619 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3214 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                        float _3215 = dot(vec3(_847, _850, _853), vec3(_3207 * _3201, _3207 * _3202, _3207 * _3203));
                        float _4630 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3218 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3222 = ((_3218 * _3218) * (_3200 + (-1.0))) + 1.0;
                        float _3223 = _3158 * _3199;
                        float _3224 = _3223 * _3223;
                        float _3227 = ((1.0 - _3224) * _3148) + _3224;
                        float _4641 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3228 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                        float _3229 = 1.0 - _3199;
                        float _3239 = (0.5 / (((_3228 * ((_3214 * _3229) + _3199)) + 9.9999999392252902907785028219223e-09) + (((_3228 * _3229) + _3199) * _3214))) * _3228;
                        float _4652 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3250 = (((_3200 * 3.1415927410125732421875) * (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) / ((_3222 * _3222) * ((_3165 * 2.1991131305694580078125) + 3.141590118408203125))) * _3154;
                        _3002 = (_3169 * _3117.x) + _3075;
                        _3003 = (_3169 * _3117.y) + _3076;
                        _3004 = (_3169 * _3117.z) + _3077;
                        _2999 = (_3250 * _3134.x) + _3072;
                        _3000 = (_3250 * _3134.y) + _3073;
                        _3001 = (_3250 * _3134.z) + _3074;
                        if (_3079 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3072 = _2999;
                            _3073 = _3000;
                            _3074 = _3001;
                            _3075 = _3002;
                            _3076 = _3003;
                            _3077 = _3004;
                            _3078 = _3079;
                        }
                    }
                    frontier_phi_66_pred = _2999;
                    frontier_phi_66_pred_1 = _3004;
                    frontier_phi_66_pred_2 = _3003;
                    frontier_phi_66_pred_3 = _3002;
                    frontier_phi_66_pred_4 = _3001;
                    frontier_phi_66_pred_5 = _3000;
                }
                _2776 = frontier_phi_66_pred;
                _2786 = frontier_phi_66_pred_1;
                _2784 = frontier_phi_66_pred_2;
                _2782 = frontier_phi_66_pred_3;
                _2780 = frontier_phi_66_pred_4;
                _2778 = frontier_phi_66_pred_5;
                uint _2934 = _2933 + 1u;
                if (_2934 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2927 = _2776;
                    _2928 = _2778;
                    _2929 = _2780;
                    _2930 = _2782;
                    _2931 = _2784;
                    _2932 = _2786;
                    _2933 = _2934;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2775 = _2776;
            _2777 = _2778;
            _2779 = _2780;
            _2781 = _2782;
            _2783 = _2784;
            _2785 = _2786;
        }
        uvec4 _2789 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2790 = _2789.z;
        uint _2792 = (_2790 >> 8u) & 15u;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        if (((4294967295u << _2792) & _2680) == 0u)
        {
            _2895 = _2775;
            _2897 = _2777;
            _2899 = _2779;
            _2901 = _2781;
            _2903 = _2783;
            _2905 = _2785;
        }
        else
        {
            float _2920 = inversesqrt(dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636)));
            float _2921 = _2920 * _2634;
            float _2922 = _2920 * _2635;
            float _2923 = _2920 * _2636;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2792 < ((_2790 >> 12u) & 15u))
            {
                float _2896;
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _2906;
                float _3055 = _2775;
                float _3056 = _2777;
                float _3057 = _2779;
                float _3058 = _2781;
                float _3059 = _2783;
                float _3060 = _2785;
                uint _3061 = _2792;
                uint _3070;
                bool _3071;
                for (;;)
                {
                    _3070 = texelFetch(g_lightClassification, int((((_2674 << 5u) + (_2660 << 9u)) + (_3061 << 2u)) >> 2u)).x;
                    _3071 = _3070 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3071)
                    {
                        frontier_phi_77_pred = _3060;
                        frontier_phi_77_pred_1 = _3059;
                        frontier_phi_77_pred_2 = _3058;
                        frontier_phi_77_pred_3 = _3057;
                        frontier_phi_77_pred_4 = _3056;
                        frontier_phi_77_pred_5 = _3055;
                    }
                    else
                    {
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3277 = _3055;
                        float _3278 = _3056;
                        float _3279 = _3057;
                        float _3280 = _3058;
                        float _3281 = _3059;
                        float _3282 = _3060;
                        uint _3283 = _3070;
                        uint _3284;
                        vec4 _3309;
                        float _3310;
                        vec4 _3325;
                        vec3 _3337;
                        vec4 _3352;
                        vec4 _3367;
                        float _3413;
                        bool _3414;
                        for (;;)
                        {
                            uint _3294 = ((_3061 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3283));
                            _3284 = (_3283 + 4294967295u) & _3283;
                            uint _3296 = _3294 * 40u;
                            _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            _3310 = _3309.w;
                            uint _3312 = (_3294 * 40u) + 4u;
                            _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            uint _3327 = (_3294 * 40u) + 8u;
                            _3337 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x));
                            uint _3339 = (_3294 * 40u) + 16u;
                            _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3354 = (_3294 * 40u) + 20u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3369 = (_3294 * 40u) + 24u;
                            vec4 _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            uint _3388 = (_3294 * 40u) + 28u;
                            vec4 _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            _3413 = fma(_2636, _3401.z, fma(_2635, _3401.y, _3401.x * _2634)) + _3401.w;
                            _3414 = !((fma(_2636, _3382.z, fma(_2635, _3382.y, _3382.x * _2634)) + _3382.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3414)
                            {
                                float _3441 = _3309.x - _2634;
                                float _3442 = _3309.y - _2635;
                                float _3443 = _3309.z - _2636;
                                float _3444 = dot(vec3(_3441, _3442, _3443), vec3(_3441, _3442, _3443));
                                float _3447 = inversesqrt(_3444);
                                float _3448 = _3447 * _3441;
                                float _3449 = _3447 * _3442;
                                float _3450 = _3447 * _3443;
                                float _3454 = 1.0 - (_3444 / (_3310 * _3310));
                                float _4663 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3455 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3459 = sqrt(_3444) * _3325.w;
                                float _3461 = 1.39999997615814208984375 / (_3459 + 1.39999997615814208984375);
                                float _3462 = _3461 * _3461;
                                float _3465 = ((1.0 - _3462) * dot(vec3(_3448, _3449, _3450), vec3(_847, _850, _853))) + _3462;
                                float _3468 = _3459 * _3459;
                                float _3472 = (fma(_2636, _3352.z, fma(_2635, _3352.y, _3352.x * _2634)) + _3352.w) / _3413;
                                float _3473 = (fma(_2636, _3367.z, fma(_2635, _3367.y, _3367.x * _2634)) + _3367.w) / _3413;
                                float _3477 = 1.0 - dot(vec2(_3472, _3473), vec2(_3472, _3473));
                                float _4679 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3478 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3479 = _3478 * (((isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0))) * _3455) / ((_3468 * 0.699999988079071044921875) + 1.0));
                                float _3491 = exp2(log2(1.0 / ((_3468 * 3.5) + 5.0)) * 0.25);
                                float _3492 = 1.0 - _910;
                                float _3499 = sqrt(1.0 - ((1.0 - (_3492 * _3492)) * (1.0 - (_3491 * _3491))));
                                float _3500 = _3499 * _3499;
                                float _3501 = _3500 * _3500;
                                float _3502 = _3448 - _2921;
                                float _3503 = _3449 - _2922;
                                float _3504 = _3450 - _2923;
                                float _3508 = inversesqrt(dot(vec3(_3502, _3503, _3504), vec3(_3502, _3503, _3504)));
                                float _3512 = dot(vec3(_847, _850, _853), vec3((-0.0) - _2921, (-0.0) - _2922, (-0.0) - _2923));
                                float _4690 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3515 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3516 = dot(vec3(_847, _850, _853), vec3(_3508 * _3502, _3508 * _3503, _3508 * _3504));
                                float _4701 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3519 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3523 = ((_3519 * _3519) * (_3501 + (-1.0))) + 1.0;
                                float _3524 = _3461 * _3500;
                                float _3525 = _3524 * _3524;
                                float _3531 = ((1.0 - _3525) * dot(vec3(_847, _850, _853), vec3(_3448, _3449, _3450))) + _3525;
                                float _4712 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3532 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3533 = 1.0 - _3500;
                                float _3543 = (0.5 / (((_3532 * ((_3515 * _3533) + _3500)) + 9.9999999392252902907785028219223e-09) + (((_3532 * _3533) + _3500) * _3515))) * _3532;
                                float _4723 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3553 = (_3478 * _3455) * (((_3501 * 3.1415927410125732421875) * (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0)))) / ((_3523 * _3523) * ((_3468 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3479 * _3325.y;
                                frontier_phi_83_pred_1 = _3479 * _3325.x;
                                frontier_phi_83_pred_2 = _3553 * _3337.z;
                                frontier_phi_83_pred_3 = _3553 * _3337.y;
                                frontier_phi_83_pred_4 = _3553 * _3337.x;
                                frontier_phi_83_pred_5 = _3479 * _3325.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3561 = frontier_phi_83_pred;
                            _3560 = frontier_phi_83_pred_1;
                            _3559 = frontier_phi_83_pred_2;
                            _3558 = frontier_phi_83_pred_3;
                            _3557 = frontier_phi_83_pred_4;
                            _3562 = frontier_phi_83_pred_5;
                            _3267 = _3560 + _3280;
                            _3268 = _3561 + _3281;
                            _3269 = _3562 + _3282;
                            _3264 = _3557 + _3277;
                            _3265 = _3558 + _3278;
                            _3266 = _3559 + _3279;
                            if (_3284 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3284;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3269;
                        frontier_phi_77_pred_1 = _3268;
                        frontier_phi_77_pred_2 = _3267;
                        frontier_phi_77_pred_3 = _3266;
                        frontier_phi_77_pred_4 = _3265;
                        frontier_phi_77_pred_5 = _3264;
                    }
                    _2906 = frontier_phi_77_pred;
                    _2904 = frontier_phi_77_pred_1;
                    _2902 = frontier_phi_77_pred_2;
                    _2900 = frontier_phi_77_pred_3;
                    _2898 = frontier_phi_77_pred_4;
                    _2896 = frontier_phi_77_pred_5;
                    uint _3062 = _3061 + 1u;
                    if (_3062 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3055 = _2896;
                        _3056 = _2898;
                        _3057 = _2900;
                        _3058 = _2902;
                        _3059 = _2904;
                        _3060 = _2906;
                        _3061 = _3062;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2900;
                frontier_phi_58_59_ladder_1 = _2906;
                frontier_phi_58_59_ladder_2 = _2904;
                frontier_phi_58_59_ladder_3 = _2902;
                frontier_phi_58_59_ladder_4 = _2898;
                frontier_phi_58_59_ladder_5 = _2896;
            }
            else
            {
                frontier_phi_58_59_ladder = _2779;
                frontier_phi_58_59_ladder_1 = _2785;
                frontier_phi_58_59_ladder_2 = _2783;
                frontier_phi_58_59_ladder_3 = _2781;
                frontier_phi_58_59_ladder_4 = _2777;
                frontier_phi_58_59_ladder_5 = _2775;
            }
            _2895 = frontier_phi_58_59_ladder_5;
            _2897 = frontier_phi_58_59_ladder_4;
            _2899 = frontier_phi_58_59_ladder;
            _2901 = frontier_phi_58_59_ladder_3;
            _2903 = frontier_phi_58_59_ladder_2;
            _2905 = frontier_phi_58_59_ladder_1;
        }
        float _2910 = isnan(1.0) ? _891 : (isnan(_891) ? 1.0 : min(_891, 1.0));
        _2693 = (_2910 * _2901) + _2148;
        _2695 = (_2910 * _2903) + _2150;
        _2697 = (_2910 * _2905) + _2152;
        _2699 = ((_2895 * 0.039999999105930328369140625) * _2910) + _2478;
        _2701 = ((_2897 * 0.039999999105930328369140625) * _2910) + _2480;
        _2703 = ((_2899 * 0.039999999105930328369140625) * _2910) + _2482;
    }
    else
    {
        _2693 = _2148;
        _2695 = _2150;
        _2697 = _2152;
        _2699 = _2478;
        _2701 = _2480;
        _2703 = _2482;
    }
    float _4739 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4750 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _4761 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _2720 = ((isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2693 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _891))) + (((((_1938 * (_1986.x / _1992)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1729) * _2007)) + _2699) * cbPerFrame._m0[3u].x);
    float _2721 = ((isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2695 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _891))) + (((((_1938 * (_1986.y / _1992)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1729) * _2007)) + _2701) * cbPerFrame._m0[3u].x);
    float _2722 = ((isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2697 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _891))) + (((((_1938 * (_1986.z / _1992)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1729) * _2007)) + _2703) * cbPerFrame._m0[3u].x);
    uint _2723 = _275 + 6u;
    vec4 _2740 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1961, _1962, (log2((isnan(cbSceneParam._m0[77u].w) ? _750 : (isnan(_750) ? cbSceneParam._m0[77u].w : min(_750, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2742 = _2740.x;
    float _2743 = _2740.y;
    float _2744 = _2740.z;
    float _2745 = _2740.w;
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    if (_750 > cbSceneParam._m0[78u].w)
    {
        float _2800 = isnan(_750) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _750 : min(cbSceneParam._m0[80u].w, _750));
        float _2801 = _2800 / _750;
        float _2812 = _2801 * _801;
        float _2813 = _802 * _2801;
        float _2814 = (-0.0) - _2813;
        float _2816 = _2801 * _803;
        float _2818 = (cbSceneParam._m0[77u].w * _2814) / _2800;
        float _2819 = _2818 + cbSceneParam._m0[79u].w;
        float _2820 = cbSceneParam._m0[79u].w - _2813;
        float _2826 = sqrt(((_2812 * _2812) + (_2813 * _2813)) + (_2816 * _2816));
        float _2829 = (1.0 - (cbSceneParam._m0[77u].w / _2800)) * _2826;
        float _2834 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2836 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3012;
        if (abs((_2814 - _2818) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3012 = ((((_2819 > 0.0) ? exp2(_2834 * _2819) : (2.0 - exp2(_2836 * _2819))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2829;
        }
        else
        {
            float _2956 = 1.0 / cbSceneParam._m0[80u].x;
            float _2957 = isnan(_2820) ? _2819 : (isnan(_2819) ? _2820 : max(_2819, _2820));
            float _2958 = isnan(_2820) ? _2819 : (isnan(_2819) ? _2820 : min(_2819, _2820));
            float _2967 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : min(_2957, 0.0));
            float _2968 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : min(_2958, 0.0));
            _3012 = ((abs(_2826 / _2814) * cbSceneParam._m0[80u].y) * ((((_2967 - _2968) * 2.0) - ((exp2(_2834 * (isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0)))) - exp2(_2834 * (isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0))))) * _2956)) - ((exp2(_2836 * _2967) - exp2(_2836 * _2968)) * _2956))) + (_2829 * cbSceneParam._m0[80u].z);
        }
        vec4 _3014 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1961, _1962, 1.0), 0.0);
        float _3023 = exp2((_3012 * (-1.44269502162933349609375)) * (1.0 - _3014.w));
        float _3024 = log2(_3023);
        float _3040 = log2(_2745);
        _2838 = (exp2(_3040 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].x)) * _3014.x) / cbSceneParam._m0[78u].x)) + _2742;
        _2840 = (exp2(_3040 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].y)) * _3014.y) / cbSceneParam._m0[78u].y)) + _2743;
        _2842 = (exp2(_3040 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].z)) * _3014.z) / cbSceneParam._m0[78u].z)) + _2744;
        _2844 = _3023 * _2745;
    }
    else
    {
        _2838 = _2742;
        _2840 = _2743;
        _2842 = _2744;
        _2844 = _2745;
    }
    bool _3050;
    vec4 _2853;
    vec4 _2875;
    float _2877;
    float _2881;
    float _2882;
    float _2883;
    float _2884;
    bool _2894;
    for (;;)
    {
        _2853 = cbMatDynParam._m0[0u];
        float _2855 = roundEven(_2853.y);
        bool _2856 = _2855 == 3.0;
        float _2857 = log2(_2844);
        float _2864 = exp2(_2857 * cbSceneParam._m0[78u].x) * _2720;
        float _2865 = exp2(_2857 * cbSceneParam._m0[78u].y) * _2721;
        float _2866 = exp2(_2857 * cbSceneParam._m0[78u].z) * _2722;
        float _2873 = _817 + (-0.5);
        _2875 = cbMtdParam._m0[1u];
        _2877 = _2875.y * _2873;
        float _2880 = (_2855 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2881 = _2880 * (_2856 ? _2864 : (_2864 + (cbSceneParam._m0[72u].w * _2838)));
        _2882 = _2880 * (_2856 ? _2865 : (_2865 + (cbSceneParam._m0[72u].w * _2840)));
        _2883 = _2880 * (_2856 ? _2866 : (_2866 + (cbSceneParam._m0[72u].w * _2842)));
        _2884 = _2873 * 0.999000012874603271484375;
        _2894 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2894)
        {
            if ((cbInstanceData._m0[_275 + 7u].x + _2884) < 0.5)
            {
                _3050 = true;
                break;
            }
        }
        uint _2991 = _866 + uint(_2853.w);
        if ((cbInstanceData._m0[_2991].w < 1.0) && ((cbInstanceData._m0[_2991].w + _2884) < 0.5))
        {
            _3050 = true;
            break;
        }
        if ((_2877 + _327) < _2875.x)
        {
            _3050 = true;
            break;
        }
        _3050 = false;
        break;
    }
    float _3255;
    if (_3050)
    {
        discard_state = true;
        _3255 = 0.0;
    }
    else
    {
        _3255 = cbInstanceData._m0[_2723].w;
    }
    SV_Target.x = _2881;
    SV_Target.y = _2882;
    SV_Target.z = _2883;
    SV_Target.w = _3255;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2723].w;
    discard_exit();
}


