#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[33];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1364;
float _3804;
float _3805;
float _3806;
float _3807;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _297 = _294.w;
    vec4 _316 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _321 = _316.x * cbMtdParam._m0[11u].x;
    float _322 = _316.y * cbMtdParam._m0[11u].y;
    float _323 = _316.z * cbMtdParam._m0[11u].z;
    vec4 _342 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _377 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[28u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[28u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _379 = _377.x;
    float _392 = dot(vec4(_379, _377.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _409 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_379 - _392) * cbMtdParam._m0[24u].x) + _392) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3816 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _417 = (_410 * ((_342.x * cbMtdParam._m0[12u].x) - _321)) + _321;
    float _418 = (_410 * ((_342.y * cbMtdParam._m0[12u].y) - _322)) + _322;
    float _419 = (_410 * ((_342.z * cbMtdParam._m0[12u].z) - _323)) + _323;
    vec4 _438 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _280) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    vec4 _458 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _280) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _281) + cbTextureTilingScale._m0[20u].w));
    vec4 _483 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _485 = _483.x;
    float _486 = _483.y;
    float _491 = cbMtdParam._m0[25u].w * _483.z;
    float _3827 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    vec4 _505 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    float _513 = cbMtdParam._m0[26u].x * _505.z;
    float _3838 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _523 = (((isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) - _492) * _410) + _492;
    float _526 = ((((_505.x - _485) * _410) + _485) * 2.0) + (-1.0);
    float _527 = ((((_505.y - _486) * _410) + _486) * 2.0) + (-1.0);
    float _528 = dot(vec2(_526, _527), vec2(_526, _527));
    float _3849 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _533 = sqrt(1.0 - (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))));
    vec4 _550 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _557 = cbMtdParam._m0[25u].z * _550.z;
    float _3860 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    vec4 _578 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _580 = _578.x;
    float _581 = 1.0 - _580;
    float _587 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _590 = ((isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : min(_587, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _599 = (_590 - ((((((_580 - _581) * cbMtdParam._m0[24u].z) + _581) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _590))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3881 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _600 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _607 = (_600 * ((_438.x * cbMtdParam._m0[18u].x) - _417)) + _417;
    float _608 = (_600 * ((_438.y * cbMtdParam._m0[18u].y) - _418)) + _418;
    float _609 = (_600 * ((_438.z * cbMtdParam._m0[18u].z) - _419)) + _419;
    vec4 _621 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _623 = _621.x;
    float _624 = 1.0 - _623;
    float _651 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_623 - _624) * cbMtdParam._m0[24u].w) + _624) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3892 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _652 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _660 = ((((cbMtdParam._m0[10u].x - _607) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _652) + _607;
    float _661 = ((((cbMtdParam._m0[10u].y - _608) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _652) + _608;
    float _662 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _609)) * _652) + _609;
    float _667 = (((_458.z - _523) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _523;
    float _671 = (((isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) - _667) * cbMtdParam._m0[19u].w) + _667;
    vec4 _685 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _692 = (_685.x * 2.0) + (-1.0);
    float _693 = (_685.y * 2.0) + (-1.0);
    float _694 = dot(vec2(_692, _693), vec2(_692, _693));
    float _3903 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _702 = (_600 * (_685.z - _671)) + _671;
    float _705 = ((cbMtdParam._m0[23u].y - _702) * _652) + _702;
    float _709 = ((1.0 - _705) * cbMtdParam._m0[26u].y) + _705;
    float _3914 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _710 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    vec4 _732 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[28u].w * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[29u].x * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _738 = (_732.x * 2.0) + (-1.0);
    float _739 = (_732.y * 2.0) + (-1.0);
    float _740 = dot(vec2(_738, _739), vec2(_738, _739));
    float _3925 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _754 = (_526 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_458.x * 2.0) + (-1.0)))) + (((_550.x * 2.0) + (-1.0)) * cbMtdParam._m0[27u].x);
    float _755 = (_527 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_458.y * 2.0) + (-1.0)))) + (((_550.y * 2.0) + (-1.0)) * cbMtdParam._m0[27u].x);
    float _767 = (((_692 - _754) + (cbMtdParam._m0[21u].x * _754)) * _600) + _754;
    float _768 = (((_693 - _755) + (cbMtdParam._m0[21u].x * _755)) * _600) + _755;
    float _769 = (_600 * (sqrt(1.0 - (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) - _533)) + _533;
    float _780 = (((_738 - _767) + (_767 * cbMtdParam._m0[22u].z)) * _652) + _767;
    float _781 = (((_739 - _768) + (_768 * cbMtdParam._m0[22u].z)) * _652) + _768;
    float _782 = ((sqrt(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) - _769) * _652) + _769;
    float _784 = cbMtdParam._m0[22u].x + _550.w;
    float _789 = fma(_782, _248 * NORMAL.x, fma(_781, _255 * TANGENT.x, (_241 * _233) * _780));
    float _792 = fma(_782, _248 * NORMAL.y, fma(_781, _255 * TANGENT.y, (_241 * _234) * _780));
    float _795 = fma(_782, _248 * NORMAL.z, fma(_781, _255 * TANGENT.z, (_241 * _235) * _780));
    float _799 = inversesqrt(dot(vec3(_789, _792, _795), vec3(_789, _792, _795)));
    float _800 = _799 * _789;
    float _801 = _799 * _792;
    float _802 = _799 * _795;
    float _3936 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _803 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _3958 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _3969 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _3980 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _821 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _872 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _862);
    float _873 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _862);
    float _874 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _862);
    float _878 = inversesqrt(dot(vec3(_872, _873, _874), vec3(_872, _873, _874)));
    float _879 = _872 * _878;
    float _880 = _873 * _878;
    float _881 = _874 * _878;
    vec4 _886 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _888 = _886.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1045 = sqrt(((_872 * _872) + (_873 * _873)) + (_874 * _874));
        float _1051 = (cbMatDynParam._m0[5u].x * _1045) + cbMatDynParam._m0[5u].y;
        float _3991 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1056 = (cbMatDynParam._m0[5u].z * _1045) + cbMatDynParam._m0[5u].w;
        float _4002 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) - _1052)) + _1052) < ((_888 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _899 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _900 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _918 = fma(_802, cbSceneParam._m0[5u].z, fma(_801, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _800));
    float _921 = fma(_802, cbSceneParam._m0[6u].z, fma(_801, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _800));
    float _924 = fma(_802, cbSceneParam._m0[7u].z, fma(_801, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _800));
    uint _937 = _261 + 9u;
    uint _938 = _937 + uint(cbMatDynParam._m0[0u].w);
    float _944 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * cbInstanceData._m0[_938].x;
    float _945 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * cbInstanceData._m0[_938].y;
    float _946 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * cbInstanceData._m0[_938].z;
    float _4013 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _4024 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _948 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _949 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    vec4 _958 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _899, cbSceneParam._m0[86u].y * _900));
    float _962 = ((isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * TEXCOORD_5.w) * _958.x;
    float _963 = dot(vec3(_800, _801, _802), vec3(_879, _880, _881));
    float _966 = _963 * 2.0;
    float _970 = (_966 * _800) - _879;
    float _971 = (_966 * _801) - _880;
    float _972 = (_966 * _802) - _881;
    float _979 = abs(dot(vec3(_879, _880, _881), vec3(_800, _801, _802)));
    float _4046 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _981 = sqrt(_803);
    float _994 = exp2((_981 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_981 * 3.0));
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1363;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1088 = fma(_1034, cbModelParam._m0[26u].z, fma(_1030, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1026));
        float _1092 = fma(_1034, cbModelParam._m0[27u].z, fma(_1030, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1026));
        float _1096 = fma(_1034, cbModelParam._m0[28u].z, fma(_1030, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1026));
        float _1121 = _1026 + _800;
        float _1122 = _1030 + _801;
        float _1123 = _1034 + _802;
        float _1133 = fma(_1123, cbModelParam._m0[26u].z, fma(_1122, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1121)) - _1088;
        float _1134 = fma(_1123, cbModelParam._m0[27u].z, fma(_1122, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1121)) - _1092;
        float _1135 = fma(_1123, cbModelParam._m0[28u].z, fma(_1122, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1121)) - _1096;
        float _1139 = inversesqrt(dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135)));
        float _1152 = ((_1139 * _1133) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1088 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1139 * _1134) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1092 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1139 * _1135) / cbModelParam._m0[34u].z) + ((((((_1096 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        float _1191 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1157.x + (-0.5));
        float _1193 = _1191 * (_1157.y + (-0.5));
        float _1194 = _1191 * (_1157.z + (-0.5));
        float _1201 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1164.x + (-0.5));
        float _1203 = _1201 * (_1164.y + (-0.5));
        float _1204 = _1201 * (_1164.z + (-0.5));
        float _1211 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1171.x + (-0.5));
        float _1213 = _1211 * (_1171.y + (-0.5));
        float _1214 = _1211 * (_1171.z + (-0.5));
        float _1221 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1178.x + (-0.5));
        float _1223 = _1221 * (_1178.y + (-0.5));
        float _1224 = _1221 * (_1178.z + (-0.5));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = _1192 * 0.5;
        float _1229 = _1202 * 0.5;
        float _1230 = _1212 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1245 = (dot(vec3(_800, _801, _802), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _4072 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1255 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _4083 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _4094 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1257 + 1.0))) + _1262) * _1225;
        float _1272 = _1193 * 0.5;
        float _1273 = _1203 * 0.5;
        float _1274 = _1213 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_800, _801, _802), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _4127 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1299 + 1.0))) + _1304) * _1226;
        float _1314 = _1194 * 0.5;
        float _1315 = _1204 * 0.5;
        float _1316 = _1214 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_800, _801, _802), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _4160 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1341 + 1.0))) + _1346) * _1227;
        _1363 = _1194;
        _1365 = _1193;
        _1366 = _1192;
        _1367 = _1204;
        _1368 = _1203;
        _1369 = _1202;
        _1370 = _1214;
        _1371 = _1213;
        _1372 = _1212;
        _1373 = _1227;
        _1374 = _1226;
        _1375 = _1225;
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
        _1377 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1378 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
    }
    else
    {
        _1363 = _1364;
        _1365 = _1364;
        _1366 = _1364;
        _1367 = _1364;
        _1368 = _1364;
        _1369 = _1364;
        _1370 = _1364;
        _1371 = _1364;
        _1372 = _1364;
        _1373 = _1364;
        _1374 = _1364;
        _1375 = _1364;
        _1376 = 0.0;
        _1377 = 0.0;
        _1378 = 0.0;
    }
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1405 = fma(_1034, cbModelParam._m0[30u].z, fma(_1030, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1026));
        float _1409 = fma(_1034, cbModelParam._m0[31u].z, fma(_1030, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1026));
        float _1413 = fma(_1034, cbModelParam._m0[32u].z, fma(_1030, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1026));
        float _1436 = _1026 + _800;
        float _1437 = _1030 + _801;
        float _1438 = _1034 + _802;
        float _1448 = fma(_1438, cbModelParam._m0[30u].z, fma(_1437, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1436)) - _1405;
        float _1449 = fma(_1438, cbModelParam._m0[31u].z, fma(_1437, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1436)) - _1409;
        float _1450 = fma(_1438, cbModelParam._m0[32u].z, fma(_1437, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1436)) - _1413;
        float _1454 = inversesqrt(dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450)));
        float _1467 = ((_1454 * _1448) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1405 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1468 = ((_1454 * _1449) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1409 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1469 = ((_1454 * _1450) / cbModelParam._m0[35u].z) + ((((((_1413 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        float _1504 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1471.x + (-0.5));
        float _1506 = _1504 * (_1471.y + (-0.5));
        float _1507 = _1504 * (_1471.z + (-0.5));
        float _1514 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1478.x + (-0.5));
        float _1516 = _1514 * (_1478.y + (-0.5));
        float _1517 = _1514 * (_1478.z + (-0.5));
        float _1524 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1485.x + (-0.5));
        float _1526 = _1524 * (_1485.y + (-0.5));
        float _1527 = _1524 * (_1485.z + (-0.5));
        float _1534 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1492.x + (-0.5));
        float _1536 = _1534 * (_1492.y + (-0.5));
        float _1537 = _1534 * (_1492.z + (-0.5));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = _1505 * 0.5;
        float _1542 = _1515 * 0.5;
        float _1543 = _1525 * 0.5;
        float _1544 = dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543));
        float _1549 = (_1544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1544);
        float _1557 = (dot(vec3(_800, _801, _802), vec3(_1549 * _1541, _1549 * _1542, _1549 * _1543)) + 1.0) * 0.5;
        float _4201 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1566 = sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4212 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _4223 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1568 + 1.0))) + _1573) * _1538;
        float _1583 = _1506 * 0.5;
        float _1584 = _1516 * 0.5;
        float _1585 = _1526 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_800, _801, _802), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4256 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1610 + 1.0))) + _1615) * _1539;
        float _1625 = _1507 * 0.5;
        float _1626 = _1517 * 0.5;
        float _1627 = _1527 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_800, _801, _802), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4289 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1652 + 1.0))) + _1657) * _1540;
        _1674 = _1507;
        _1675 = _1506;
        _1676 = _1505;
        _1677 = _1517;
        _1678 = _1516;
        _1679 = _1515;
        _1680 = _1527;
        _1681 = _1526;
        _1682 = _1525;
        _1683 = _1540;
        _1684 = _1539;
        _1685 = _1538;
        _1686 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
        _1688 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
    }
    else
    {
        _1674 = _1364;
        _1675 = _1364;
        _1676 = _1364;
        _1677 = _1364;
        _1678 = _1364;
        _1679 = _1364;
        _1680 = _1364;
        _1681 = _1364;
        _1682 = _1364;
        _1683 = _1364;
        _1684 = _1364;
        _1685 = _1364;
        _1686 = 0.0;
        _1687 = 0.0;
        _1688 = 0.0;
    }
    float _1698 = (cbModelParam._m0[1u].x * (_1686 - _1376)) + _1376;
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1377)) + _1377;
    float _1700 = (cbModelParam._m0[1u].x * (_1688 - _1378)) + _1378;
    float _1721 = fma(_1700, cbSceneParam._m0[89u].z, fma(_1699, cbSceneParam._m0[89u].y, _1698 * cbSceneParam._m0[89u].x));
    float _1724 = fma(_1700, cbSceneParam._m0[90u].z, fma(_1699, cbSceneParam._m0[90u].y, _1698 * cbSceneParam._m0[90u].x));
    float _1727 = fma(_1700, cbSceneParam._m0[91u].z, fma(_1699, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1698));
    float _1742 = _970 * 0.5;
    float _1743 = _971 * 0.5;
    float _1744 = _972 * 0.5;
    float _1745 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1676, _1679, _1682, _1685));
    float _1748 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1751 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1674, _1677, _1680, _1683));
    float _1785;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1758 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1363, _1367, _1370, _1373));
        float _1762 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1365, _1368, _1371, _1374));
        float _1766 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1366, _1369, _1372, _1375));
        float _1773 = dot(vec4(cbModelParam._m0[39u]), vec4(_1742, _1743, _1744, 1.0));
        _1785 = dot(vec3(isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1773) ? 0.0 : (isnan(0.0) ? _1773 : max(0.0, _1773))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1785 = 1.0;
    }
    float _1796;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1787 = dot(vec4(cbModelParam._m0[40u]), vec4(_1742, _1743, _1744, 1.0));
        _1796 = dot(vec3(isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1787) ? 0.0 : (isnan(0.0) ? _1787 : max(0.0, _1787))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1796 = 1.0;
    }
    float _1800 = (_1796 * cbModelParam._m0[1u].x) + (_1785 * (1.0 - cbModelParam._m0[1u].x));
    float _1810 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _803);
    float _1811 = isnan(_1810) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1810 : min(cbModelParam._m0[25u].z, _1810));
    float _1891;
    float _1893;
    float _1895;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1858 = fma(_1034, cbModelParam._m0[13u].z, fma(_1030, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1026)) + cbModelParam._m0[13u].w;
        float _1862 = fma(_1034, cbModelParam._m0[14u].z, fma(_1030, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1026)) + cbModelParam._m0[14u].w;
        float _1866 = fma(_1034, cbModelParam._m0[15u].z, fma(_1030, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1026)) + cbModelParam._m0[15u].w;
        float _1869 = fma(_972, cbModelParam._m0[13u].z, fma(_971, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _970));
        float _1872 = fma(_972, cbModelParam._m0[14u].z, fma(_971, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _970));
        float _1875 = fma(_972, cbModelParam._m0[15u].z, fma(_971, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _970));
        float _1903;
        if (_1869 > 0.0)
        {
            _1903 = abs((1.0 - _1858) / _1869);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1858 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1903 = frontier_phi_17_15_ladder;
        }
        float _2184;
        if (_1872 > 0.0)
        {
            _2184 = abs((1.0 - _1862) / _1872);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1862 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2184 = frontier_phi_26_22_ladder;
        }
        float _2430;
        if (_1875 > 0.0)
        {
            _2430 = abs((1.0 - _1866) / _1875);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1866 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2430 = frontier_phi_38_33_ladder;
        }
        float _2432 = isnan(_2184) ? _1903 : (isnan(_1903) ? _2184 : min(_1903, _2184));
        float _2433 = isnan(_2430) ? _2432 : (isnan(_2432) ? _2430 : min(_2432, _2430));
        float _2437 = (_2433 * _1869) + _1858;
        float _2438 = (_2433 * _1872) + _1862;
        float _2439 = (_2433 * _1875) + _1866;
        float _2440 = _2433 * 9.9999997473787516355514526367188e-05;
        float _2442 = (-1.0) - _2440;
        float _2444 = _2440 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2439 > _2444) || ((_2439 < _2442) || ((_2438 > _2444) || ((_2438 < _2442) || ((_2437 < _2442) || (_2437 > _2444))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2563 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2439, cbModelParam._m0[9u].z, fma(_2438, cbModelParam._m0[9u].y, _2437 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2439, cbModelParam._m0[10u].z, fma(_2438, cbModelParam._m0[10u].y, _2437 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2439, cbModelParam._m0[11u].z, fma(_2438, cbModelParam._m0[11u].y, _2437 * cbModelParam._m0[11u].x))), _1811);
            frontier_phi_16_38_ladder = _2563.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2563.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2563.x * cbModelParam._m0[1u].y;
        }
        _1891 = frontier_phi_16_38_ladder_2;
        _1893 = frontier_phi_16_38_ladder_1;
        _1895 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1879 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_970, _971, _972), _1811);
        _1891 = _1879.x * cbModelParam._m0[1u].y;
        _1893 = _1879.y * cbModelParam._m0[1u].y;
        _1895 = _1879.z * cbModelParam._m0[1u].y;
    }
    float _1899 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _803);
    float _1900 = isnan(_1899) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1899 : min(cbModelParam._m0[25u].w, _1899));
    float _1989;
    float _1991;
    float _1993;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1953 = fma(_1034, cbModelParam._m0[21u].z, fma(_1030, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1026)) + cbModelParam._m0[21u].w;
        float _1957 = fma(_1034, cbModelParam._m0[22u].z, fma(_1030, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1026)) + cbModelParam._m0[22u].w;
        float _1961 = fma(_1034, cbModelParam._m0[23u].z, fma(_1030, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1026)) + cbModelParam._m0[23u].w;
        float _1964 = fma(_972, cbModelParam._m0[21u].z, fma(_971, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _970));
        float _1967 = fma(_972, cbModelParam._m0[22u].z, fma(_971, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _970));
        float _1970 = fma(_972, cbModelParam._m0[23u].z, fma(_971, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _970));
        float _2189;
        if (_1964 > 0.0)
        {
            _2189 = abs((1.0 - _1953) / _1964);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1953 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2189 = frontier_phi_28_24_ladder;
        }
        float _2457;
        if (_1967 > 0.0)
        {
            _2457 = abs((1.0 - _1957) / _1967);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1957 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2457 = frontier_phi_40_35_ladder;
        }
        float _2662;
        if (_1970 > 0.0)
        {
            _2662 = abs((1.0 - _1961) / _1970);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1961 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2662 = frontier_phi_49_46_ladder;
        }
        float _2664 = isnan(_2457) ? _2189 : (isnan(_2189) ? _2457 : min(_2189, _2457));
        float _2665 = isnan(_2662) ? _2664 : (isnan(_2664) ? _2662 : min(_2664, _2662));
        float _2669 = (_2665 * _1964) + _1953;
        float _2670 = (_2665 * _1967) + _1957;
        float _2671 = (_2665 * _1970) + _1961;
        float _2672 = _2665 * 9.9999997473787516355514526367188e-05;
        float _2673 = (-1.0) - _2672;
        float _2675 = _2672 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2671 > _2675) || ((_2671 < _2673) || ((_2670 > _2675) || ((_2670 < _2673) || ((_2669 < _2673) || (_2669 > _2675))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2870 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2671, cbModelParam._m0[17u].z, fma(_2670, cbModelParam._m0[17u].y, _2669 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2671, cbModelParam._m0[18u].z, fma(_2670, cbModelParam._m0[18u].y, _2669 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2671, cbModelParam._m0[19u].z, fma(_2670, cbModelParam._m0[19u].y, _2669 * cbModelParam._m0[19u].x))), _1900);
            frontier_phi_25_49_ladder = _2870.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2870.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2870.x * cbModelParam._m0[1u].z;
        }
        _1989 = frontier_phi_25_49_ladder_2;
        _1991 = frontier_phi_25_49_ladder_1;
        _1993 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1973 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_970, _971, _972), _1900);
        _1989 = _1973.x * cbModelParam._m0[1u].z;
        _1991 = _1973.y * cbModelParam._m0[1u].z;
        _1993 = _1973.z * cbModelParam._m0[1u].z;
    }
    float _2005 = ((((1.0 - _994) * ((_981 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_994 * _981)) * _962;
    float _2006 = _2005 * ((cbModelParam._m0[1u].w * (_1989 - _1891)) + _1891);
    float _2007 = _2005 * ((cbModelParam._m0[1u].w * (_1991 - _1893)) + _1893);
    float _2008 = _2005 * ((cbModelParam._m0[1u].w * (_1993 - _1895)) + _1895);
    float _2011 = fma(_2008, cbSceneParam._m0[89u].z, fma(_2007, cbSceneParam._m0[89u].y, _2006 * cbSceneParam._m0[89u].x));
    float _2014 = fma(_2008, cbSceneParam._m0[90u].z, fma(_2007, cbSceneParam._m0[90u].y, _2006 * cbSceneParam._m0[90u].x));
    float _2017 = fma(_2008, cbSceneParam._m0[91u].z, fma(_2007, cbSceneParam._m0[91u].y, _2006 * cbSceneParam._m0[91u].x));
    float _2028 = _899 / cbSceneParam._m0[86u].x;
    float _2036 = (cbSceneParam._m0[88u].y * (1.0 - cbMtdParam._m0[25u].y)) + cbSceneParam._m0[88u].z;
    float _4415 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2038 = (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * 5.0;
    float _2043 = ((10.0 / (_821 + 10.0)) * cbMtdParam._m0[25u].x) * dot(vec3(_800, _801, _802), vec3(1.0, 0.0, 0.0));
    vec4 _2053 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_2043 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_2043 + _2028) * cbSceneParam._m0[86u].x, _900), _2038).w) + _2028) * cbSceneParam._m0[86u].x, _900), _2038);
    float _2059 = isnan(0.5) ? _2053.w : (isnan(_2053.w) ? 0.5 : max(_2053.w, 0.5));
    float _2074 = 1.0 - (_2053.w / _2059);
    vec4 _2082 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_899, _900));
    float _2084 = _2082.w;
    float _2096 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2084);
    float _2097 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2084);
    float _2098 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2084);
    float _4431 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _4442 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _4453 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    uvec4 _2105 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2107 = _2105.x * 14u;
    uint _2108 = _2107 + 13u;
    float _2115 = _962 + (-1.0);
    float _2120 = (cbLight._m0[_2108].x * _2115) + 1.0;
    float _2121 = (cbLight._m0[_2108].y * _2115) + 1.0;
    float _2122 = (cbLight._m0[_2108].z * _2115) + 1.0;
    float _2123 = (cbLight._m0[_2108].w * _2115) + 1.0;
    uint _2124 = _2107 + 5u;
    float _2130 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
    uint _2134 = _2107 + 4u;
    float _2143 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
    uint _2147 = _2107 | 1u;
    float _2158 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_800, _801, _802));
    float _2161 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_800, _801, _802));
    float _4474 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _4485 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2166 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * 0.3183098733425140380859375;
    float _2168 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * 0.3183098733425140380859375;
    float _2175 = ((cbLight._m0[_2124].x * _2130) * _2168) + (((cbLight._m0[_2134].x * _2099) * _2143) * _2166);
    float _2176 = ((_2130 * cbLight._m0[_2124].y) * _2168) + (((cbLight._m0[_2134].y * _2100) * _2143) * _2166);
    float _2177 = ((_2130 * cbLight._m0[_2124].z) * _2168) + (((cbLight._m0[_2134].z * _2101) * _2143) * _2166);
    uvec4 _2181 = floatBitsToUint(cbLight._m0[_2107 + 12u]);
    bool _2183 = _2181.x == 0u;
    float _2194;
    float _2196;
    float _2198;
    if (_2183)
    {
        _2194 = _2175;
        _2196 = _2176;
        _2198 = _2177;
    }
    else
    {
        uint _2202 = _2107 + 6u;
        float _2218 = (dot(vec3(cbLight._m0[_2107 + 2u].xyz), vec3(_800, _801, _802)) * 0.5) + 0.5;
        float _2219 = _2218 * _2218;
        float _4496 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2220 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2221 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2194 = (((cbLight._m0[_2202].x * 0.3183098733425140380859375) * _2220) * _2221) + _2175;
        _2196 = (((cbLight._m0[_2202].y * 0.3183098733425140380859375) * _2220) * _2221) + _2176;
        _2198 = (((cbLight._m0[_2202].z * 0.3183098733425140380859375) * _2220) * _2221) + _2177;
    }
    bool _2201 = _2181.y == 0u;
    float _2239;
    float _2241;
    float _2243;
    if (_2201)
    {
        _2239 = _2194;
        _2241 = _2196;
        _2243 = _2198;
    }
    else
    {
        uint _2401 = _2107 + 7u;
        float _2417 = (dot(vec3(cbLight._m0[_2107 + 3u].xyz), vec3(_800, _801, _802)) * 0.5) + 0.5;
        float _2418 = _2417 * _2417;
        float _4512 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2419 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2420 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2239 = (((cbLight._m0[_2401].x * 0.3183098733425140380859375) * _2419) * _2420) + _2194;
        _2241 = (((cbLight._m0[_2401].y * 0.3183098733425140380859375) * _2419) * _2420) + _2196;
        _2243 = (((cbLight._m0[_2401].z * 0.3183098733425140380859375) * _2419) * _2420) + _2198;
    }
    uint _2246 = _2107 + 8u;
    float _2259 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2107].w)) * _803) * 0.949999988079071044921875);
    float _2260 = _2259 * _2259;
    float _2261 = cbLight._m0[_2107].x + _879;
    float _2262 = cbLight._m0[_2107].y + _880;
    float _2263 = cbLight._m0[_2107].z + _881;
    float _2267 = inversesqrt(dot(vec3(_2261, _2262, _2263), vec3(_2261, _2262, _2263)));
    float _2268 = _2267 * _2261;
    float _2269 = _2267 * _2262;
    float _2270 = _2267 * _2263;
    float _2271 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2107].xyz));
    float _4528 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2274 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
    float _4539 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _2275 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
    float _2276 = dot(vec3(_800, _801, _802), vec3(_2268, _2269, _2270));
    float _4550 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2279 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
    float _2280 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_2268, _2269, _2270));
    float _4561 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2284 = _2260 * _2260;
    float _2288 = ((_2279 * _2279) * (_2284 + (-1.0))) + 1.0;
    float _2299 = (exp2(log2(1.0 - (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2300 = 1.0 - _2260;
    float _2311 = (0.5 / (((_2275 * ((_2274 * _2300) + _2260)) + 9.9999999392252902907785028219223e-09) + (((_2275 * _2300) + _2260) * _2274))) * _2274;
    float _4572 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2313 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2284 / ((_2288 * _2288) * 3.141590118408203125));
    uint _2327 = _2107 + 9u;
    float _2338 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2147].w)) * _803) * 0.949999988079071044921875);
    float _2339 = _2338 * _2338;
    float _2340 = cbLight._m0[_2147].x + _879;
    float _2341 = cbLight._m0[_2147].y + _880;
    float _2342 = cbLight._m0[_2147].z + _881;
    float _2346 = inversesqrt(dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342)));
    float _2347 = _2346 * _2340;
    float _2348 = _2346 * _2341;
    float _2349 = _2346 * _2342;
    float _2350 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2147].xyz));
    float _4583 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2353 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
    float _2354 = dot(vec3(_800, _801, _802), vec3(_2347, _2348, _2349));
    float _4594 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
    float _2358 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_2347, _2348, _2349));
    float _4605 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2362 = _2339 * _2339;
    float _2366 = ((_2357 * _2357) * (_2362 + (-1.0))) + 1.0;
    float _2375 = (exp2(log2(1.0 - (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2376 = 1.0 - _2339;
    float _2386 = (0.5 / (((_2275 * ((_2353 * _2376) + _2339)) + 9.9999999392252902907785028219223e-09) + (((_2275 * _2376) + _2339) * _2353))) * _2353;
    float _4616 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2388 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2362 / ((_2366 * _2366) * 3.141590118408203125));
    float _2398 = (((_2375 * cbLight._m0[_2327].x) * _2388) * _2130) + ((((cbLight._m0[_2246].x * _2099) * _2299) * _2313) * _2143);
    float _2399 = (((_2375 * cbLight._m0[_2327].y) * _2388) * _2130) + ((((cbLight._m0[_2246].y * _2100) * _2299) * _2313) * _2143);
    float _2400 = (((_2375 * cbLight._m0[_2327].z) * _2388) * _2130) + ((((cbLight._m0[_2246].z * _2101) * _2299) * _2313) * _2143);
    float _2462;
    float _2464;
    float _2466;
    if (_2183)
    {
        _2462 = _2398;
        _2464 = _2399;
        _2466 = _2400;
    }
    else
    {
        uint _2468 = _2107 + 2u;
        uint _2472 = _2107 + 10u;
        float _2486 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2468].w)) * _803) * 0.949999988079071044921875);
        float _2487 = _2486 * _2486;
        float _2488 = cbLight._m0[_2468].x + _879;
        float _2489 = cbLight._m0[_2468].y + _880;
        float _2490 = cbLight._m0[_2468].z + _881;
        float _2494 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
        float _2495 = _2494 * _2488;
        float _2496 = _2494 * _2489;
        float _2497 = _2494 * _2490;
        float _2498 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2468].xyz));
        float _4627 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2501 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2502 = dot(vec3(_800, _801, _802), vec3(_2495, _2496, _2497));
        float _4638 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _2506 = dot(vec3(cbLight._m0[_2468].xyz), vec3(_2495, _2496, _2497));
        float _4649 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2510 = _2487 * _2487;
        float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
        float _2523 = (exp2(log2(1.0 - (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2524 = 1.0 - _2487;
        float _2534 = (0.5 / (((_2275 * ((_2501 * _2524) + _2487)) + 9.9999999392252902907785028219223e-09) + (((_2275 * _2524) + _2487) * _2501))) * _2501;
        float _4660 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2536 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
        float _2537 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2462 = (((_2523 * cbLight._m0[_2472].x) * _2536) * _2537) + _2398;
        _2464 = (((_2523 * cbLight._m0[_2472].y) * _2536) * _2537) + _2399;
        _2466 = (((_2523 * cbLight._m0[_2472].z) * _2536) * _2537) + _2400;
    }
    float _2572;
    float _2574;
    float _2576;
    if (_2201)
    {
        _2572 = _2462;
        _2574 = _2464;
        _2576 = _2466;
    }
    else
    {
        uint _2583 = _2107 + 3u;
        uint _2587 = _2107 + 11u;
        float _2601 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2583].w)) * _803) * 0.949999988079071044921875);
        float _2602 = _2601 * _2601;
        float _2603 = cbLight._m0[_2583].x + _879;
        float _2604 = cbLight._m0[_2583].y + _880;
        float _2605 = cbLight._m0[_2583].z + _881;
        float _2609 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
        float _2610 = _2609 * _2603;
        float _2611 = _2609 * _2604;
        float _2612 = _2609 * _2605;
        float _2613 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2583].xyz));
        float _4676 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2617 = dot(vec3(_800, _801, _802), vec3(_2610, _2611, _2612));
        float _4687 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2620 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2621 = dot(vec3(cbLight._m0[_2583].xyz), vec3(_2610, _2611, _2612));
        float _4698 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2625 = _2602 * _2602;
        float _2629 = ((_2620 * _2620) * (_2625 + (-1.0))) + 1.0;
        float _2638 = (exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2639 = 1.0 - _2602;
        float _2649 = (0.5 / (((_2275 * ((_2616 * _2639) + _2602)) + 9.9999999392252902907785028219223e-09) + (((_2275 * _2639) + _2602) * _2616))) * _2616;
        float _4709 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2651 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2625 / ((_2629 * _2629) * 3.141590118408203125));
        float _2652 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2572 = (((_2638 * cbLight._m0[_2587].x) * _2651) * _2652) + _2462;
        _2574 = (((_2638 * cbLight._m0[_2587].y) * _2651) * _2652) + _2464;
        _2576 = (((_2638 * cbLight._m0[_2587].z) * _2651) * _2652) + _2466;
    }
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    if (_2105.y == 0u)
    {
        float _2727 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2728 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2727;
        float _2729 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2727;
        float _2730 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2727;
        uvec4 _2742 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2743 = _2742.x;
        uint _2754 = uint((float(_2742.y) * floor(float(uint(cbSceneParam._m0[85u].y * _900) / _2743))) + floor(float(uint(cbSceneParam._m0[85u].x * _899) / _2743)));
        float _2764 = (log2(_2730 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2765 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        uint _2768 = uint(isnan(14.0) ? _2765 : (isnan(_2765) ? 14.0 : min(_2765, 14.0)));
        uvec4 _2773 = texelFetch(g_lightClusterGridBuffer, int(((_2768 << 2u) + (_2754 << 6u)) >> 2u));
        uint _2774 = _2773.x;
        uint _2775 = _2742.z;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        if (((((1u << ((_2775 >> 4u) & 15u)) + 4294967295u) & _2774) == 0u) || ((_2775 & 240u) == 0u))
        {
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
        }
        else
        {
            float _2876;
            float _2878;
            float _2880;
            float _2882;
            float _2884;
            float _2886;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            uint _3033 = 0u;
            uint _3042;
            bool _3043;
            for (;;)
            {
                _3042 = texelFetch(g_lightClassification, int((((_2768 << 5u) + (_2754 << 9u)) + (_3033 << 2u)) >> 2u)).x;
                _3043 = _3042 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3043)
                {
                    frontier_phi_66_pred = _3027;
                    frontier_phi_66_pred_1 = _3032;
                    frontier_phi_66_pred_2 = _3031;
                    frontier_phi_66_pred_3 = _3030;
                    frontier_phi_66_pred_4 = _3029;
                    frontier_phi_66_pred_5 = _3028;
                }
                else
                {
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    uint _3178;
                    _3172 = _3027;
                    _3173 = _3028;
                    _3174 = _3029;
                    _3175 = _3030;
                    _3176 = _3031;
                    _3177 = _3032;
                    _3178 = _3042;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    for (;;)
                    {
                        uint _3182 = uint(findLSB(_3178)) + (_3033 << 5u);
                        uint _3179 = (_3178 + 4294967295u) & _3178;
                        uint _3184 = _3182 * 48u;
                        vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3184)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 3u)).x));
                        uint _3204 = (_3182 * 48u) + 4u;
                        vec4 _3217 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3204)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 3u)).x));
                        uint _3223 = (_3182 * 48u) + 8u;
                        vec3 _3234 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3223)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3223 + 2u)).x));
                        float _3238 = _3198.x - _2728;
                        float _3239 = _3198.y - _2729;
                        float _3240 = _3198.z - _2730;
                        float _3241 = dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240));
                        float _3244 = inversesqrt(_3241);
                        float _3245 = _3244 * _3238;
                        float _3246 = _3244 * _3239;
                        float _3247 = _3244 * _3240;
                        float _3248 = dot(vec3(_918, _921, _924), vec3(_3245, _3246, _3247));
                        float _3253 = 1.0 - (_3241 * _3198.w);
                        float _4735 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3254 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                        float _3255 = sqrt(_3241) * _3217.w;
                        float _3258 = 1.39999997615814208984375 / (_3255 + 1.39999997615814208984375);
                        float _3259 = _3258 * _3258;
                        float _3262 = ((1.0 - _3259) * _3248) + _3259;
                        float _3265 = _3255 * _3255;
                        float _3269 = ((isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0))) * _3254) / ((_3265 * 0.699999988079071044921875) + 1.0);
                        float _3273 = (-0.0) - _2728;
                        float _3274 = (-0.0) - _2729;
                        float _3275 = (-0.0) - _2730;
                        float _3279 = inversesqrt(dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275)));
                        float _3280 = _3279 * _3273;
                        float _3281 = _3279 * _3274;
                        float _3282 = _3279 * _3275;
                        float _3290 = exp2(log2(1.0 / ((_3265 * 3.5) + 5.0)) * 0.25);
                        float _3291 = 1.0 - _981;
                        float _3298 = sqrt(1.0 - ((1.0 - (_3291 * _3291)) * (1.0 - (_3290 * _3290))));
                        float _3299 = _3298 * _3298;
                        float _3300 = _3299 * _3299;
                        float _3301 = _3280 + _3245;
                        float _3302 = _3281 + _3246;
                        float _3303 = _3282 + _3247;
                        float _3307 = inversesqrt(dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303)));
                        float _3311 = dot(vec3(_918, _921, _924), vec3(_3280, _3281, _3282));
                        float _4751 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3314 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                        float _3315 = dot(vec3(_918, _921, _924), vec3(_3307 * _3301, _3307 * _3302, _3307 * _3303));
                        float _4762 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                        float _3318 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                        float _3322 = ((_3318 * _3318) * (_3300 + (-1.0))) + 1.0;
                        float _3323 = _3258 * _3299;
                        float _3324 = _3323 * _3323;
                        float _3327 = ((1.0 - _3324) * _3248) + _3324;
                        float _4773 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3328 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                        float _3329 = 1.0 - _3299;
                        float _3339 = (0.5 / (((_3328 * ((_3314 * _3329) + _3299)) + 9.9999999392252902907785028219223e-09) + (((_3328 * _3329) + _3299) * _3314))) * _3328;
                        float _4784 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3350 = (((_3300 * 3.1415927410125732421875) * (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) / ((_3322 * _3322) * ((_3265 * 2.1991131305694580078125) + 3.141590118408203125))) * _3254;
                        _3102 = (_3269 * _3217.x) + _3175;
                        _3103 = (_3269 * _3217.y) + _3176;
                        _3104 = (_3269 * _3217.z) + _3177;
                        _3099 = (_3350 * _3234.x) + _3172;
                        _3100 = (_3350 * _3234.y) + _3173;
                        _3101 = (_3350 * _3234.z) + _3174;
                        if (_3179 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3172 = _3099;
                            _3173 = _3100;
                            _3174 = _3101;
                            _3175 = _3102;
                            _3176 = _3103;
                            _3177 = _3104;
                            _3178 = _3179;
                        }
                    }
                    frontier_phi_66_pred = _3099;
                    frontier_phi_66_pred_1 = _3104;
                    frontier_phi_66_pred_2 = _3103;
                    frontier_phi_66_pred_3 = _3102;
                    frontier_phi_66_pred_4 = _3101;
                    frontier_phi_66_pred_5 = _3100;
                }
                _2876 = frontier_phi_66_pred;
                _2886 = frontier_phi_66_pred_1;
                _2884 = frontier_phi_66_pred_2;
                _2882 = frontier_phi_66_pred_3;
                _2880 = frontier_phi_66_pred_4;
                _2878 = frontier_phi_66_pred_5;
                uint _3034 = _3033 + 1u;
                if (_3034 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3027 = _2876;
                    _3028 = _2878;
                    _3029 = _2880;
                    _3030 = _2882;
                    _3031 = _2884;
                    _3032 = _2886;
                    _3033 = _3034;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
        }
        uvec4 _2889 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2890 = _2889.z;
        uint _2892 = (_2890 >> 8u) & 15u;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        if (((4294967295u << _2892) & _2774) == 0u)
        {
            _2995 = _2875;
            _2997 = _2877;
            _2999 = _2879;
            _3001 = _2881;
            _3003 = _2883;
            _3005 = _2885;
        }
        else
        {
            float _3020 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
            float _3021 = _3020 * _2728;
            float _3022 = _3020 * _2729;
            float _3023 = _3020 * _2730;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2892 < ((_2890 >> 12u) & 15u))
            {
                float _2996;
                float _2998;
                float _3000;
                float _3002;
                float _3004;
                float _3006;
                float _3155 = _2875;
                float _3156 = _2877;
                float _3157 = _2879;
                float _3158 = _2881;
                float _3159 = _2883;
                float _3160 = _2885;
                uint _3161 = _2892;
                uint _3170;
                bool _3171;
                for (;;)
                {
                    _3170 = texelFetch(g_lightClassification, int((((_2768 << 5u) + (_2754 << 9u)) + (_3161 << 2u)) >> 2u)).x;
                    _3171 = _3170 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3171)
                    {
                        frontier_phi_77_pred = _3160;
                        frontier_phi_77_pred_1 = _3159;
                        frontier_phi_77_pred_2 = _3158;
                        frontier_phi_77_pred_3 = _3157;
                        frontier_phi_77_pred_4 = _3156;
                        frontier_phi_77_pred_5 = _3155;
                    }
                    else
                    {
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3377 = _3155;
                        float _3378 = _3156;
                        float _3379 = _3157;
                        float _3380 = _3158;
                        float _3381 = _3159;
                        float _3382 = _3160;
                        uint _3383 = _3170;
                        uint _3384;
                        vec4 _3409;
                        float _3410;
                        vec4 _3425;
                        vec3 _3437;
                        vec4 _3452;
                        vec4 _3467;
                        float _3513;
                        bool _3514;
                        for (;;)
                        {
                            uint _3394 = ((_3161 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3383));
                            _3384 = (_3383 + 4294967295u) & _3383;
                            uint _3396 = _3394 * 40u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            _3410 = _3409.w;
                            uint _3412 = (_3394 * 40u) + 4u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3427 = (_3394 * 40u) + 8u;
                            _3437 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x));
                            uint _3439 = (_3394 * 40u) + 16u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3454 = (_3394 * 40u) + 20u;
                            _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3469 = (_3394 * 40u) + 24u;
                            vec4 _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            uint _3488 = (_3394 * 40u) + 28u;
                            vec4 _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            _3513 = fma(_2730, _3501.z, fma(_2729, _3501.y, _3501.x * _2728)) + _3501.w;
                            _3514 = !((fma(_2730, _3482.z, fma(_2729, _3482.y, _3482.x * _2728)) + _3482.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3514)
                            {
                                float _3541 = _3409.x - _2728;
                                float _3542 = _3409.y - _2729;
                                float _3543 = _3409.z - _2730;
                                float _3544 = dot(vec3(_3541, _3542, _3543), vec3(_3541, _3542, _3543));
                                float _3547 = inversesqrt(_3544);
                                float _3548 = _3547 * _3541;
                                float _3549 = _3547 * _3542;
                                float _3550 = _3547 * _3543;
                                float _3554 = 1.0 - (_3544 / (_3410 * _3410));
                                float _4795 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3555 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                                float _3559 = sqrt(_3544) * _3425.w;
                                float _3561 = 1.39999997615814208984375 / (_3559 + 1.39999997615814208984375);
                                float _3562 = _3561 * _3561;
                                float _3565 = ((1.0 - _3562) * dot(vec3(_3548, _3549, _3550), vec3(_918, _921, _924))) + _3562;
                                float _3568 = _3559 * _3559;
                                float _3572 = (fma(_2730, _3452.z, fma(_2729, _3452.y, _3452.x * _2728)) + _3452.w) / _3513;
                                float _3573 = (fma(_2730, _3467.z, fma(_2729, _3467.y, _3467.x * _2728)) + _3467.w) / _3513;
                                float _3577 = 1.0 - dot(vec2(_3572, _3573), vec2(_3572, _3573));
                                float _4811 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3578 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                                float _3579 = _3578 * (((isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0))) * _3555) / ((_3568 * 0.699999988079071044921875) + 1.0));
                                float _3591 = exp2(log2(1.0 / ((_3568 * 3.5) + 5.0)) * 0.25);
                                float _3592 = 1.0 - _981;
                                float _3599 = sqrt(1.0 - ((1.0 - (_3592 * _3592)) * (1.0 - (_3591 * _3591))));
                                float _3600 = _3599 * _3599;
                                float _3601 = _3600 * _3600;
                                float _3602 = _3548 - _3021;
                                float _3603 = _3549 - _3022;
                                float _3604 = _3550 - _3023;
                                float _3608 = inversesqrt(dot(vec3(_3602, _3603, _3604), vec3(_3602, _3603, _3604)));
                                float _3612 = dot(vec3(_918, _921, _924), vec3((-0.0) - _3021, (-0.0) - _3022, (-0.0) - _3023));
                                float _4822 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3615 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                                float _3616 = dot(vec3(_918, _921, _924), vec3(_3608 * _3602, _3608 * _3603, _3608 * _3604));
                                float _4833 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3619 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                                float _3623 = ((_3619 * _3619) * (_3601 + (-1.0))) + 1.0;
                                float _3624 = _3561 * _3600;
                                float _3625 = _3624 * _3624;
                                float _3631 = ((1.0 - _3625) * dot(vec3(_918, _921, _924), vec3(_3548, _3549, _3550))) + _3625;
                                float _4844 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3632 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3633 = 1.0 - _3600;
                                float _3643 = (0.5 / (((_3632 * ((_3615 * _3633) + _3600)) + 9.9999999392252902907785028219223e-09) + (((_3632 * _3633) + _3600) * _3615))) * _3632;
                                float _4855 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                                float _3653 = (_3578 * _3555) * (((_3601 * 3.1415927410125732421875) * (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0)))) / ((_3623 * _3623) * ((_3568 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3579 * _3425.y;
                                frontier_phi_83_pred_1 = _3579 * _3425.x;
                                frontier_phi_83_pred_2 = _3653 * _3437.z;
                                frontier_phi_83_pred_3 = _3653 * _3437.y;
                                frontier_phi_83_pred_4 = _3653 * _3437.x;
                                frontier_phi_83_pred_5 = _3579 * _3425.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3661 = frontier_phi_83_pred;
                            _3660 = frontier_phi_83_pred_1;
                            _3659 = frontier_phi_83_pred_2;
                            _3658 = frontier_phi_83_pred_3;
                            _3657 = frontier_phi_83_pred_4;
                            _3662 = frontier_phi_83_pred_5;
                            _3367 = _3660 + _3380;
                            _3368 = _3661 + _3381;
                            _3369 = _3662 + _3382;
                            _3364 = _3657 + _3377;
                            _3365 = _3658 + _3378;
                            _3366 = _3659 + _3379;
                            if (_3384 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3384;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3369;
                        frontier_phi_77_pred_1 = _3368;
                        frontier_phi_77_pred_2 = _3367;
                        frontier_phi_77_pred_3 = _3366;
                        frontier_phi_77_pred_4 = _3365;
                        frontier_phi_77_pred_5 = _3364;
                    }
                    _3006 = frontier_phi_77_pred;
                    _3004 = frontier_phi_77_pred_1;
                    _3002 = frontier_phi_77_pred_2;
                    _3000 = frontier_phi_77_pred_3;
                    _2998 = frontier_phi_77_pred_4;
                    _2996 = frontier_phi_77_pred_5;
                    uint _3162 = _3161 + 1u;
                    if (_3162 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3155 = _2996;
                        _3156 = _2998;
                        _3157 = _3000;
                        _3158 = _3002;
                        _3159 = _3004;
                        _3160 = _3006;
                        _3161 = _3162;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3000;
                frontier_phi_58_59_ladder_1 = _3006;
                frontier_phi_58_59_ladder_2 = _3004;
                frontier_phi_58_59_ladder_3 = _3002;
                frontier_phi_58_59_ladder_4 = _2998;
                frontier_phi_58_59_ladder_5 = _2996;
            }
            else
            {
                frontier_phi_58_59_ladder = _2879;
                frontier_phi_58_59_ladder_1 = _2885;
                frontier_phi_58_59_ladder_2 = _2883;
                frontier_phi_58_59_ladder_3 = _2881;
                frontier_phi_58_59_ladder_4 = _2877;
                frontier_phi_58_59_ladder_5 = _2875;
            }
            _2995 = frontier_phi_58_59_ladder_5;
            _2997 = frontier_phi_58_59_ladder_4;
            _2999 = frontier_phi_58_59_ladder;
            _3001 = frontier_phi_58_59_ladder_3;
            _3003 = frontier_phi_58_59_ladder_2;
            _3005 = frontier_phi_58_59_ladder_1;
        }
        float _3010 = isnan(1.0) ? _962 : (isnan(_962) ? 1.0 : min(_962, 1.0));
        _2787 = (_3010 * _3001) + _2239;
        _2789 = (_3010 * _3003) + _2241;
        _2791 = (_3010 * _3005) + _2243;
        _2793 = ((_2995 * 0.039999999105930328369140625) * _3010) + _2572;
        _2795 = ((_2997 * 0.039999999105930328369140625) * _3010) + _2574;
        _2797 = ((_2999 * 0.039999999105930328369140625) * _3010) + _2576;
    }
    else
    {
        _2787 = _2239;
        _2789 = _2241;
        _2791 = _2243;
        _2793 = _2572;
        _2795 = _2574;
        _2797 = _2576;
    }
    float _4871 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _4882 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _4893 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _2814 = ((isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0))) * (_2787 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _962))) + (((((_2005 * (_2053.x / _2059)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1800) * _2074)) + _2793) * cbPerFrame._m0[3u].x);
    float _2815 = ((isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (_2789 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _962))) + (((((_2005 * (_2053.y / _2059)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1800) * _2074)) + _2795) * cbPerFrame._m0[3u].x);
    float _2816 = ((isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0))) * (_2791 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _962))) + (((((_2005 * (_2053.z / _2059)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1800) * _2074)) + _2797) * cbPerFrame._m0[3u].x);
    uint _2817 = _261 + 6u;
    float _2825 = _899 / cbSceneParam._m0[86u].x;
    float _2826 = _900 / cbSceneParam._m0[86u].y;
    vec4 _2840 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2825, _2826, (log2((isnan(cbSceneParam._m0[77u].w) ? _821 : (isnan(_821) ? cbSceneParam._m0[77u].w : min(_821, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2842 = _2840.x;
    float _2843 = _2840.y;
    float _2844 = _2840.z;
    float _2845 = _2840.w;
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    if (_821 > cbSceneParam._m0[78u].w)
    {
        float _2900 = isnan(_821) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _821 : min(cbSceneParam._m0[80u].w, _821));
        float _2901 = _2900 / _821;
        float _2912 = _2901 * _872;
        float _2913 = _873 * _2901;
        float _2914 = (-0.0) - _2913;
        float _2916 = _2901 * _874;
        float _2918 = (cbSceneParam._m0[77u].w * _2914) / _2900;
        float _2919 = _2918 + cbSceneParam._m0[79u].w;
        float _2920 = cbSceneParam._m0[79u].w - _2913;
        float _2926 = sqrt(((_2912 * _2912) + (_2913 * _2913)) + (_2916 * _2916));
        float _2929 = (1.0 - (cbSceneParam._m0[77u].w / _2900)) * _2926;
        float _2934 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2936 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3112;
        if (abs((_2914 - _2918) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3112 = ((((_2919 > 0.0) ? exp2(_2934 * _2919) : (2.0 - exp2(_2936 * _2919))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2929;
        }
        else
        {
            float _3056 = 1.0 / cbSceneParam._m0[80u].x;
            float _3057 = isnan(_2920) ? _2919 : (isnan(_2919) ? _2920 : max(_2919, _2920));
            float _3058 = isnan(_2920) ? _2919 : (isnan(_2919) ? _2920 : min(_2919, _2920));
            float _3067 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : min(_3057, 0.0));
            float _3068 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : min(_3058, 0.0));
            _3112 = ((abs(_2926 / _2914) * cbSceneParam._m0[80u].y) * ((((_3067 - _3068) * 2.0) - ((exp2(_2934 * (isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0)))) - exp2(_2934 * (isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0))))) * _3056)) - ((exp2(_2936 * _3067) - exp2(_2936 * _3068)) * _3056))) + (_2929 * cbSceneParam._m0[80u].z);
        }
        vec4 _3114 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2825, _2826, 1.0), 0.0);
        float _3123 = exp2((_3112 * (-1.44269502162933349609375)) * (1.0 - _3114.w));
        float _3124 = log2(_3123);
        float _3140 = log2(_2845);
        _2938 = (exp2(_3140 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3124 * cbSceneParam._m0[78u].x)) * _3114.x) / cbSceneParam._m0[78u].x)) + _2842;
        _2940 = (exp2(_3140 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3124 * cbSceneParam._m0[78u].y)) * _3114.y) / cbSceneParam._m0[78u].y)) + _2843;
        _2942 = (exp2(_3140 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3124 * cbSceneParam._m0[78u].z)) * _3114.z) / cbSceneParam._m0[78u].z)) + _2844;
        _2944 = _3123 * _2845;
    }
    else
    {
        _2938 = _2842;
        _2940 = _2843;
        _2942 = _2844;
        _2944 = _2845;
    }
    bool _3150;
    vec4 _2953;
    vec4 _2975;
    float _2977;
    float _2981;
    float _2982;
    float _2983;
    float _2984;
    bool _2994;
    for (;;)
    {
        _2953 = cbMatDynParam._m0[0u];
        float _2955 = roundEven(_2953.y);
        bool _2956 = _2955 == 3.0;
        float _2957 = log2(_2944);
        float _2964 = exp2(_2957 * cbSceneParam._m0[78u].x) * _2814;
        float _2965 = exp2(_2957 * cbSceneParam._m0[78u].y) * _2815;
        float _2966 = exp2(_2957 * cbSceneParam._m0[78u].z) * _2816;
        float _2973 = _888 + (-0.5);
        _2975 = cbMtdParam._m0[1u];
        _2977 = _2975.y * _2973;
        float _2980 = (_2955 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2981 = _2980 * (_2956 ? _2964 : (_2964 + (cbSceneParam._m0[72u].w * _2938)));
        _2982 = _2980 * (_2956 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2940)));
        _2983 = _2980 * (_2956 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2942)));
        _2984 = _2973 * 0.999000012874603271484375;
        _2994 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2994)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _2984) < 0.5)
            {
                _3150 = true;
                break;
            }
        }
        uint _3091 = _937 + uint(_2953.w);
        if ((cbInstanceData._m0[_3091].w < 1.0) && ((cbInstanceData._m0[_3091].w + _2984) < 0.5))
        {
            _3150 = true;
            break;
        }
        if ((_2977 + _297) < _2975.x)
        {
            _3150 = true;
            break;
        }
        _3150 = false;
        break;
    }
    float _3355;
    if (_3150)
    {
        discard_state = true;
        _3355 = 0.0;
    }
    else
    {
        _3355 = cbInstanceData._m0[_2817].w;
    }
    SV_Target.x = _2981;
    SV_Target.y = _2982;
    SV_Target.z = _2983;
    SV_Target.w = _3355;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2817].w;
    discard_exit();
}


