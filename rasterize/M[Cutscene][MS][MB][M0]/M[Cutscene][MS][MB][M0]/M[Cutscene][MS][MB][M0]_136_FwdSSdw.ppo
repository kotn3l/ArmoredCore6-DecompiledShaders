#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[33];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 44) uniform texture2D g_RLRTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1359;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3745 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3756 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3767 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _395 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[28u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[28u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _397 = _395.x;
    float _410 = dot(vec4(_397, _395.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_397 - _410) * cbMtdParam._m0[24u].x) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3778 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _435 = (_428 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _436 = (_428 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _437 = (_428 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    float _441 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _435;
    float _444 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _436;
    float _447 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _437;
    float _454 = ((_435 - _441) * (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0)))) + _441;
    float _455 = ((_436 - _444) * (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) + _444;
    float _456 = ((_437 - _447) * (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) + _447;
    vec4 _475 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _298) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _299) + cbTextureTilingScale._m0[14u].w));
    vec4 _495 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _520 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _522 = _520.x;
    float _523 = _520.y;
    float _528 = cbMtdParam._m0[25u].w * _520.z;
    float _3789 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _529 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    vec4 _542 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    float _550 = cbMtdParam._m0[26u].x * _542.z;
    float _3800 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _560 = (((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) - _529) * _428) + _529;
    float _563 = ((((_542.x - _522) * _428) + _522) * 2.0) + (-1.0);
    float _564 = ((((_542.y - _523) * _428) + _523) * 2.0) + (-1.0);
    float _565 = dot(vec2(_563, _564), vec2(_563, _564));
    float _3811 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _570 = sqrt(1.0 - (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))));
    vec4 _587 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _594 = cbMtdParam._m0[25u].z * _587.z;
    float _3822 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    vec4 _615 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _298) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _299) + cbTextureTilingScale._m0[11u].w));
    float _617 = _615.x;
    float _618 = 1.0 - _617;
    float _624 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _627 = ((isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : min(_624, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _636 = (_627 - ((((((_617 - _618) * cbMtdParam._m0[24u].z) + _618) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _627))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3843 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _637 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _644 = (_637 * ((_475.x * cbMtdParam._m0[18u].x) - _454)) + _454;
    float _645 = (_637 * ((_475.y * cbMtdParam._m0[18u].y) - _455)) + _455;
    float _646 = (_637 * ((_475.z * cbMtdParam._m0[18u].z) - _456)) + _456;
    vec4 _658 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _660 = _658.x;
    float _661 = 1.0 - _660;
    float _686 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_660 - _661) * cbMtdParam._m0[24u].w) + _661) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3854 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _687 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _695 = ((((cbMtdParam._m0[10u].x - _644) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _687) + _644;
    float _696 = ((((cbMtdParam._m0[10u].y - _645) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _687) + _645;
    float _697 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _646)) * _687) + _646;
    float _702 = (((_495.z - _560) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _560;
    float _706 = (((isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) - _702) * cbMtdParam._m0[19u].w) + _702;
    vec4 _720 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _298) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _299) + cbTextureTilingScale._m0[15u].w));
    float _727 = (_720.x * 2.0) + (-1.0);
    float _728 = (_720.y * 2.0) + (-1.0);
    float _729 = dot(vec2(_727, _728), vec2(_727, _728));
    float _3865 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _737 = (_637 * (_720.z - _706)) + _706;
    float _740 = ((cbMtdParam._m0[23u].y - _737) * _687) + _737;
    float _744 = ((1.0 - _740) * cbMtdParam._m0[26u].y) + _740;
    float _3876 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _745 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    vec4 _767 = texture(sampler2D(M_Cutscene_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[28u].w * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[29u].x * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _773 = (_767.x * 2.0) + (-1.0);
    float _774 = (_767.y * 2.0) + (-1.0);
    float _775 = dot(vec2(_773, _774), vec2(_773, _774));
    float _3887 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _789 = (_563 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_495.x * 2.0) + (-1.0)))) + (((_587.x * 2.0) + (-1.0)) * cbMtdParam._m0[27u].x);
    float _790 = (_564 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_495.y * 2.0) + (-1.0)))) + (((_587.y * 2.0) + (-1.0)) * cbMtdParam._m0[27u].x);
    float _802 = (((_727 - _789) + (cbMtdParam._m0[21u].x * _789)) * _637) + _789;
    float _803 = (((_728 - _790) + (cbMtdParam._m0[21u].x * _790)) * _637) + _790;
    float _804 = (_637 * (sqrt(1.0 - (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) - _570)) + _570;
    float _815 = (((_773 - _802) + (_802 * cbMtdParam._m0[22u].z)) * _687) + _802;
    float _816 = (((_774 - _803) + (_803 * cbMtdParam._m0[22u].z)) * _687) + _803;
    float _817 = ((sqrt(1.0 - (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) - _804) * _687) + _804;
    float _819 = cbMtdParam._m0[22u].x + _587.w;
    float _824 = fma(_817, _247 * NORMAL.x, fma(_816, _254 * TANGENT.x, (_240 * _232) * _815));
    float _827 = fma(_817, _247 * NORMAL.y, fma(_816, _254 * TANGENT.y, (_240 * _233) * _815));
    float _830 = fma(_817, _247 * NORMAL.z, fma(_816, _254 * TANGENT.z, (_240 * _234) * _815));
    float _834 = inversesqrt(dot(vec3(_824, _827, _830), vec3(_824, _827, _830)));
    float _835 = _834 * _824;
    float _836 = _834 * _827;
    float _837 = _834 * _830;
    float _3898 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _838 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _3909 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _3920 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _3931 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _3942 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _856 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _907 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _897);
    float _908 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _897);
    float _909 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _897);
    float _913 = inversesqrt(dot(vec3(_907, _908, _909), vec3(_907, _908, _909)));
    float _914 = _907 * _913;
    float _915 = _908 * _913;
    float _916 = _909 * _913;
    float _922 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _923 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _941 = fma(_837, cbSceneParam._m0[5u].z, fma(_836, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _835));
    float _944 = fma(_837, cbSceneParam._m0[6u].z, fma(_836, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _835));
    float _947 = fma(_837, cbSceneParam._m0[7u].z, fma(_836, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _835));
    uint _961 = (_279 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _967 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) * cbInstanceData._m0[_961].x;
    float _968 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * cbInstanceData._m0[_961].y;
    float _969 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * cbInstanceData._m0[_961].z;
    float _3953 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _970 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _3964 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _971 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _972 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    vec4 _981 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _922, cbSceneParam._m0[86u].y * _923));
    float _985 = ((isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * TEXCOORD_5.w) * _981.x;
    float _986 = dot(vec3(_835, _836, _837), vec3(_914, _915, _916));
    float _989 = _986 * 2.0;
    float _993 = (_989 * _835) - _914;
    float _994 = (_989 * _836) - _915;
    float _995 = (_989 * _837) - _916;
    float _1002 = abs(dot(vec3(_914, _915, _916), vec3(_835, _836, _837)));
    float _3986 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1004 = sqrt(_838);
    float _1017 = exp2((_1004 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1004 * 3.0));
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1358;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1083 = fma(_1057, cbModelParam._m0[26u].z, fma(_1053, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1049));
        float _1087 = fma(_1057, cbModelParam._m0[27u].z, fma(_1053, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1049));
        float _1091 = fma(_1057, cbModelParam._m0[28u].z, fma(_1053, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1049));
        float _1116 = _1049 + _835;
        float _1117 = _1053 + _836;
        float _1118 = _1057 + _837;
        float _1128 = fma(_1118, cbModelParam._m0[26u].z, fma(_1117, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1116)) - _1083;
        float _1129 = fma(_1118, cbModelParam._m0[27u].z, fma(_1117, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1116)) - _1087;
        float _1130 = fma(_1118, cbModelParam._m0[28u].z, fma(_1117, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1116)) - _1091;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1083 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1087 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[34u].z) + ((((((_1091 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1186 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1152.x + (-0.5));
        float _1188 = _1186 * (_1152.y + (-0.5));
        float _1189 = _1186 * (_1152.z + (-0.5));
        float _1196 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1159.x + (-0.5));
        float _1198 = _1196 * (_1159.y + (-0.5));
        float _1199 = _1196 * (_1159.z + (-0.5));
        float _1206 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1166.x + (-0.5));
        float _1208 = _1206 * (_1166.y + (-0.5));
        float _1209 = _1206 * (_1166.z + (-0.5));
        float _1216 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1173.x + (-0.5));
        float _1218 = _1216 * (_1173.y + (-0.5));
        float _1219 = _1216 * (_1173.z + (-0.5));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = _1187 * 0.5;
        float _1224 = _1197 * 0.5;
        float _1225 = _1207 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1240 = (dot(vec3(_835, _836, _837), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1250 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _4034 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1252 + 1.0))) + _1257) * _1220;
        float _1267 = _1188 * 0.5;
        float _1268 = _1198 * 0.5;
        float _1269 = _1208 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_835, _836, _837), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _4067 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1294 + 1.0))) + _1299) * _1221;
        float _1309 = _1189 * 0.5;
        float _1310 = _1199 * 0.5;
        float _1311 = _1209 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_835, _836, _837), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _4100 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1336 + 1.0))) + _1341) * _1222;
        _1358 = _1189;
        _1360 = _1188;
        _1361 = _1187;
        _1362 = _1199;
        _1363 = _1198;
        _1364 = _1197;
        _1365 = _1209;
        _1366 = _1208;
        _1367 = _1207;
        _1368 = _1222;
        _1369 = _1221;
        _1370 = _1220;
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1372 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1373 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
    }
    else
    {
        _1358 = _1359;
        _1360 = _1359;
        _1361 = _1359;
        _1362 = _1359;
        _1363 = _1359;
        _1364 = _1359;
        _1365 = _1359;
        _1366 = _1359;
        _1367 = _1359;
        _1368 = _1359;
        _1369 = _1359;
        _1370 = _1359;
        _1371 = 0.0;
        _1372 = 0.0;
        _1373 = 0.0;
    }
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1397 = fma(_1057, cbModelParam._m0[30u].z, fma(_1053, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1049));
        float _1401 = fma(_1057, cbModelParam._m0[31u].z, fma(_1053, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1049));
        float _1405 = fma(_1057, cbModelParam._m0[32u].z, fma(_1053, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1049));
        float _1428 = _1049 + _835;
        float _1429 = _1053 + _836;
        float _1430 = _1057 + _837;
        float _1440 = fma(_1430, cbModelParam._m0[30u].z, fma(_1429, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1428)) - _1397;
        float _1441 = fma(_1430, cbModelParam._m0[31u].z, fma(_1429, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1428)) - _1401;
        float _1442 = fma(_1430, cbModelParam._m0[32u].z, fma(_1429, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1428)) - _1405;
        float _1446 = inversesqrt(dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442)));
        float _1459 = ((_1446 * _1440) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1397 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1460 = ((_1446 * _1441) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1401 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1461 = ((_1446 * _1442) / cbModelParam._m0[35u].z) + ((((((_1405 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        float _1496 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1463.x + (-0.5));
        float _1498 = _1496 * (_1463.y + (-0.5));
        float _1499 = _1496 * (_1463.z + (-0.5));
        float _1506 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1470.x + (-0.5));
        float _1508 = _1506 * (_1470.y + (-0.5));
        float _1509 = _1506 * (_1470.z + (-0.5));
        float _1516 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1477.x + (-0.5));
        float _1518 = _1516 * (_1477.y + (-0.5));
        float _1519 = _1516 * (_1477.z + (-0.5));
        float _1526 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1484.x + (-0.5));
        float _1528 = _1526 * (_1484.y + (-0.5));
        float _1529 = _1526 * (_1484.z + (-0.5));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = _1497 * 0.5;
        float _1534 = _1507 * 0.5;
        float _1535 = _1517 * 0.5;
        float _1536 = dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535));
        float _1541 = (_1536 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1536);
        float _1549 = (dot(vec3(_835, _836, _837), vec3(_1541 * _1533, _1541 * _1534, _1541 * _1535)) + 1.0) * 0.5;
        float _4141 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1558 = sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4152 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1560 = _1559 * 2.0;
        float _1564 = (1.0 - _1559) / (_1559 + 1.0);
        float _4163 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1574 = ((((1.0 - _1565) * (_1560 + 2.0)) * exp2(log2(isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1560 + 1.0))) + _1565) * _1530;
        float _1575 = _1498 * 0.5;
        float _1576 = _1508 * 0.5;
        float _1577 = _1518 * 0.5;
        float _1578 = dot(vec3(_1575, _1576, _1577), vec3(_1575, _1576, _1577));
        float _1583 = (_1578 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1578);
        float _1591 = (dot(vec3(_835, _836, _837), vec3(_1583 * _1575, _1583 * _1576, _1583 * _1577)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1600 = sqrt(((_1576 * _1576) + (_1575 * _1575)) + (_1577 * _1577)) / (_1531 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1602 = _1601 * 2.0;
        float _1606 = (1.0 - _1601) / (_1601 + 1.0);
        float _4196 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1616 = ((((1.0 - _1607) * (_1602 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1602 + 1.0))) + _1607) * _1531;
        float _1617 = _1499 * 0.5;
        float _1618 = _1509 * 0.5;
        float _1619 = _1519 * 0.5;
        float _1620 = dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619));
        float _1625 = (_1620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1620);
        float _1633 = (dot(vec3(_835, _836, _837), vec3(_1625 * _1617, _1625 * _1618, _1625 * _1619)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1642 = sqrt(((_1618 * _1618) + (_1617 * _1617)) + (_1619 * _1619)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1644 = _1643 * 2.0;
        float _1648 = (1.0 - _1643) / (_1643 + 1.0);
        float _4229 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1658 = ((((1.0 - _1649) * (_1644 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1644 + 1.0))) + _1649) * _1532;
        _1666 = _1499;
        _1667 = _1498;
        _1668 = _1497;
        _1669 = _1509;
        _1670 = _1508;
        _1671 = _1507;
        _1672 = _1519;
        _1673 = _1518;
        _1674 = _1517;
        _1675 = _1532;
        _1676 = _1531;
        _1677 = _1530;
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)));
        _1679 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)));
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)));
    }
    else
    {
        _1666 = _1359;
        _1667 = _1359;
        _1668 = _1359;
        _1669 = _1359;
        _1670 = _1359;
        _1671 = _1359;
        _1672 = _1359;
        _1673 = _1359;
        _1674 = _1359;
        _1675 = _1359;
        _1676 = _1359;
        _1677 = _1359;
        _1678 = 0.0;
        _1679 = 0.0;
        _1680 = 0.0;
    }
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1371)) + _1371;
    float _1691 = (cbModelParam._m0[1u].x * (_1679 - _1372)) + _1372;
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1373)) + _1373;
    float _1713 = fma(_1692, cbSceneParam._m0[89u].z, fma(_1691, cbSceneParam._m0[89u].y, _1690 * cbSceneParam._m0[89u].x));
    float _1716 = fma(_1692, cbSceneParam._m0[90u].z, fma(_1691, cbSceneParam._m0[90u].y, _1690 * cbSceneParam._m0[90u].x));
    float _1719 = fma(_1692, cbSceneParam._m0[91u].z, fma(_1691, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1690));
    float _1734 = _993 * 0.5;
    float _1735 = _994 * 0.5;
    float _1736 = _995 * 0.5;
    float _1737 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1740 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1667, _1670, _1673, _1676));
    float _1743 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1777;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1750 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1358, _1362, _1365, _1368));
        float _1754 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1360, _1363, _1366, _1369));
        float _1758 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1361, _1364, _1367, _1370));
        float _1765 = dot(vec4(cbModelParam._m0[39u]), vec4(_1734, _1735, _1736, 1.0));
        _1777 = dot(vec3(isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1765) ? 0.0 : (isnan(0.0) ? _1765 : max(0.0, _1765))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1777 = 1.0;
    }
    float _1788;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1779 = dot(vec4(cbModelParam._m0[40u]), vec4(_1734, _1735, _1736, 1.0));
        _1788 = dot(vec3(isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1779) ? 0.0 : (isnan(0.0) ? _1779 : max(0.0, _1779))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1788 = 1.0;
    }
    float _1792 = (_1788 * cbModelParam._m0[1u].x) + (_1777 * (1.0 - cbModelParam._m0[1u].x));
    float _1802 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _838);
    float _1803 = isnan(_1802) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1802 : min(cbModelParam._m0[25u].z, _1802));
    float _1883;
    float _1885;
    float _1887;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1850 = fma(_1057, cbModelParam._m0[13u].z, fma(_1053, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1049)) + cbModelParam._m0[13u].w;
        float _1854 = fma(_1057, cbModelParam._m0[14u].z, fma(_1053, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1049)) + cbModelParam._m0[14u].w;
        float _1858 = fma(_1057, cbModelParam._m0[15u].z, fma(_1053, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1049)) + cbModelParam._m0[15u].w;
        float _1861 = fma(_995, cbModelParam._m0[13u].z, fma(_994, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _993));
        float _1864 = fma(_995, cbModelParam._m0[14u].z, fma(_994, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _993));
        float _1867 = fma(_995, cbModelParam._m0[15u].z, fma(_994, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _993));
        float _1895;
        if (_1861 > 0.0)
        {
            _1895 = abs((1.0 - _1850) / _1861);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1850 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1895 = frontier_phi_14_12_ladder;
        }
        float _2176;
        if (_1864 > 0.0)
        {
            _2176 = abs((1.0 - _1854) / _1864);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1854 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2176 = frontier_phi_23_19_ladder;
        }
        float _2422;
        if (_1867 > 0.0)
        {
            _2422 = abs((1.0 - _1858) / _1867);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1858 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2422 = frontier_phi_35_30_ladder;
        }
        float _2424 = isnan(_2176) ? _1895 : (isnan(_1895) ? _2176 : min(_1895, _2176));
        float _2425 = isnan(_2422) ? _2424 : (isnan(_2424) ? _2422 : min(_2424, _2422));
        float _2429 = (_2425 * _1861) + _1850;
        float _2430 = (_2425 * _1864) + _1854;
        float _2431 = (_2425 * _1867) + _1858;
        float _2432 = _2425 * 9.9999997473787516355514526367188e-05;
        float _2434 = (-1.0) - _2432;
        float _2436 = _2432 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2431 > _2436) || ((_2431 < _2434) || ((_2430 > _2436) || ((_2430 < _2434) || ((_2429 < _2434) || (_2429 > _2436))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2555 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2431, cbModelParam._m0[9u].z, fma(_2430, cbModelParam._m0[9u].y, _2429 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2431, cbModelParam._m0[10u].z, fma(_2430, cbModelParam._m0[10u].y, _2429 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2431, cbModelParam._m0[11u].z, fma(_2430, cbModelParam._m0[11u].y, _2429 * cbModelParam._m0[11u].x))), _1803);
            frontier_phi_13_35_ladder = _2555.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2555.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2555.x * cbModelParam._m0[1u].y;
        }
        _1883 = frontier_phi_13_35_ladder_2;
        _1885 = frontier_phi_13_35_ladder_1;
        _1887 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1871 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_993, _994, _995), _1803);
        _1883 = _1871.x * cbModelParam._m0[1u].y;
        _1885 = _1871.y * cbModelParam._m0[1u].y;
        _1887 = _1871.z * cbModelParam._m0[1u].y;
    }
    float _1891 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _838);
    float _1892 = isnan(_1891) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1891 : min(cbModelParam._m0[25u].w, _1891));
    float _1981;
    float _1983;
    float _1985;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1945 = fma(_1057, cbModelParam._m0[21u].z, fma(_1053, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1049)) + cbModelParam._m0[21u].w;
        float _1949 = fma(_1057, cbModelParam._m0[22u].z, fma(_1053, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1049)) + cbModelParam._m0[22u].w;
        float _1953 = fma(_1057, cbModelParam._m0[23u].z, fma(_1053, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1049)) + cbModelParam._m0[23u].w;
        float _1956 = fma(_995, cbModelParam._m0[21u].z, fma(_994, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _993));
        float _1959 = fma(_995, cbModelParam._m0[22u].z, fma(_994, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _993));
        float _1962 = fma(_995, cbModelParam._m0[23u].z, fma(_994, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _993));
        float _2181;
        if (_1956 > 0.0)
        {
            _2181 = abs((1.0 - _1945) / _1956);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1945 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2181 = frontier_phi_25_21_ladder;
        }
        float _2449;
        if (_1959 > 0.0)
        {
            _2449 = abs((1.0 - _1949) / _1959);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1949 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2449 = frontier_phi_37_32_ladder;
        }
        float _2654;
        if (_1962 > 0.0)
        {
            _2654 = abs((1.0 - _1953) / _1962);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1953 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2654 = frontier_phi_46_43_ladder;
        }
        float _2656 = isnan(_2449) ? _2181 : (isnan(_2181) ? _2449 : min(_2181, _2449));
        float _2657 = isnan(_2654) ? _2656 : (isnan(_2656) ? _2654 : min(_2656, _2654));
        float _2661 = (_2657 * _1956) + _1945;
        float _2662 = (_2657 * _1959) + _1949;
        float _2663 = (_2657 * _1962) + _1953;
        float _2664 = _2657 * 9.9999997473787516355514526367188e-05;
        float _2665 = (-1.0) - _2664;
        float _2667 = _2664 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2663 > _2667) || ((_2663 < _2665) || ((_2662 > _2667) || ((_2662 < _2665) || ((_2661 < _2665) || (_2661 > _2667))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2862 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2663, cbModelParam._m0[17u].z, fma(_2662, cbModelParam._m0[17u].y, _2661 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2663, cbModelParam._m0[18u].z, fma(_2662, cbModelParam._m0[18u].y, _2661 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2663, cbModelParam._m0[19u].z, fma(_2662, cbModelParam._m0[19u].y, _2661 * cbModelParam._m0[19u].x))), _1892);
            frontier_phi_22_46_ladder = _2862.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2862.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2862.x * cbModelParam._m0[1u].z;
        }
        _1981 = frontier_phi_22_46_ladder_2;
        _1983 = frontier_phi_22_46_ladder_1;
        _1985 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1965 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_993, _994, _995), _1892);
        _1981 = _1965.x * cbModelParam._m0[1u].z;
        _1983 = _1965.y * cbModelParam._m0[1u].z;
        _1985 = _1965.z * cbModelParam._m0[1u].z;
    }
    float _1997 = ((((1.0 - _1017) * ((_1004 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1017 * _1004)) * _985;
    float _1998 = _1997 * ((cbModelParam._m0[1u].w * (_1981 - _1883)) + _1883);
    float _1999 = _1997 * ((cbModelParam._m0[1u].w * (_1983 - _1885)) + _1885);
    float _2000 = _1997 * ((cbModelParam._m0[1u].w * (_1985 - _1887)) + _1887);
    float _2003 = fma(_2000, cbSceneParam._m0[89u].z, fma(_1999, cbSceneParam._m0[89u].y, _1998 * cbSceneParam._m0[89u].x));
    float _2006 = fma(_2000, cbSceneParam._m0[90u].z, fma(_1999, cbSceneParam._m0[90u].y, _1998 * cbSceneParam._m0[90u].x));
    float _2009 = fma(_2000, cbSceneParam._m0[91u].z, fma(_1999, cbSceneParam._m0[91u].y, _1998 * cbSceneParam._m0[91u].x));
    float _2020 = _922 / cbSceneParam._m0[86u].x;
    float _2028 = (cbSceneParam._m0[88u].y * (1.0 - cbMtdParam._m0[25u].y)) + cbSceneParam._m0[88u].z;
    float _4355 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2030 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * 5.0;
    float _2035 = ((10.0 / (_856 + 10.0)) * cbMtdParam._m0[25u].x) * dot(vec3(_835, _836, _837), vec3(1.0, 0.0, 0.0));
    vec4 _2045 = textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2(((_2035 * textureLod(sampler2D(g_RLRTexture, SS_ClampLinear), vec2((_2035 + _2020) * cbSceneParam._m0[86u].x, _923), _2030).w) + _2020) * cbSceneParam._m0[86u].x, _923), _2030);
    float _2051 = isnan(0.5) ? _2045.w : (isnan(_2045.w) ? 0.5 : max(_2045.w, 0.5));
    float _2066 = 1.0 - (_2045.w / _2051);
    vec4 _2074 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_922, _923));
    float _2076 = _2074.w;
    float _2088 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2076);
    float _2089 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2076);
    float _2090 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2076);
    float _4371 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2091 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _4382 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
    float _4393 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    uvec4 _2097 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2099 = _2097.x * 14u;
    uint _2100 = _2099 + 13u;
    float _2107 = _985 + (-1.0);
    float _2112 = (cbLight._m0[_2100].x * _2107) + 1.0;
    float _2113 = (cbLight._m0[_2100].y * _2107) + 1.0;
    float _2114 = (cbLight._m0[_2100].z * _2107) + 1.0;
    float _2115 = (cbLight._m0[_2100].w * _2107) + 1.0;
    uint _2116 = _2099 + 5u;
    float _2122 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
    uint _2126 = _2099 + 4u;
    float _2135 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
    uint _2139 = _2099 | 1u;
    float _2150 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_835, _836, _837));
    float _2153 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_835, _836, _837));
    float _4414 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _4425 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2158 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * 0.3183098733425140380859375;
    float _2160 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * 0.3183098733425140380859375;
    float _2167 = ((cbLight._m0[_2116].x * _2122) * _2160) + (((cbLight._m0[_2126].x * _2091) * _2135) * _2158);
    float _2168 = ((_2122 * cbLight._m0[_2116].y) * _2160) + (((cbLight._m0[_2126].y * _2092) * _2135) * _2158);
    float _2169 = ((_2122 * cbLight._m0[_2116].z) * _2160) + (((cbLight._m0[_2126].z * _2093) * _2135) * _2158);
    uvec4 _2173 = floatBitsToUint(cbLight._m0[_2099 + 12u]);
    bool _2175 = _2173.x == 0u;
    float _2186;
    float _2188;
    float _2190;
    if (_2175)
    {
        _2186 = _2167;
        _2188 = _2168;
        _2190 = _2169;
    }
    else
    {
        uint _2194 = _2099 + 6u;
        float _2210 = (dot(vec3(cbLight._m0[_2099 + 2u].xyz), vec3(_835, _836, _837)) * 0.5) + 0.5;
        float _2211 = _2210 * _2210;
        float _4436 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2212 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2213 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2186 = (((cbLight._m0[_2194].x * 0.3183098733425140380859375) * _2212) * _2213) + _2167;
        _2188 = (((cbLight._m0[_2194].y * 0.3183098733425140380859375) * _2212) * _2213) + _2168;
        _2190 = (((cbLight._m0[_2194].z * 0.3183098733425140380859375) * _2212) * _2213) + _2169;
    }
    bool _2193 = _2173.y == 0u;
    float _2231;
    float _2233;
    float _2235;
    if (_2193)
    {
        _2231 = _2186;
        _2233 = _2188;
        _2235 = _2190;
    }
    else
    {
        uint _2393 = _2099 + 7u;
        float _2409 = (dot(vec3(cbLight._m0[_2099 + 3u].xyz), vec3(_835, _836, _837)) * 0.5) + 0.5;
        float _2410 = _2409 * _2409;
        float _4452 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2411 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2412 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
        _2231 = (((cbLight._m0[_2393].x * 0.3183098733425140380859375) * _2411) * _2412) + _2186;
        _2233 = (((cbLight._m0[_2393].y * 0.3183098733425140380859375) * _2411) * _2412) + _2188;
        _2235 = (((cbLight._m0[_2393].z * 0.3183098733425140380859375) * _2411) * _2412) + _2190;
    }
    uint _2238 = _2099 + 8u;
    float _2251 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2099].w)) * _838) * 0.949999988079071044921875);
    float _2252 = _2251 * _2251;
    float _2253 = cbLight._m0[_2099].x + _914;
    float _2254 = cbLight._m0[_2099].y + _915;
    float _2255 = cbLight._m0[_2099].z + _916;
    float _2259 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
    float _2260 = _2259 * _2253;
    float _2261 = _2259 * _2254;
    float _2262 = _2259 * _2255;
    float _2263 = dot(vec3(_835, _836, _837), vec3(cbLight._m0[_2099].xyz));
    float _4468 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _4479 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _2267 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _2268 = dot(vec3(_835, _836, _837), vec3(_2260, _2261, _2262));
    float _4490 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2272 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_2260, _2261, _2262));
    float _4501 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2276 = _2252 * _2252;
    float _2280 = ((_2271 * _2271) * (_2276 + (-1.0))) + 1.0;
    float _2291 = (exp2(log2(1.0 - (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2292 = 1.0 - _2252;
    float _2303 = (0.5 / (((_2267 * ((_2266 * _2292) + _2252)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2292) + _2252) * _2266))) * _2266;
    float _4512 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2305 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2276 / ((_2280 * _2280) * 3.141590118408203125));
    uint _2319 = _2099 + 9u;
    float _2330 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _838) * 0.949999988079071044921875);
    float _2331 = _2330 * _2330;
    float _2332 = cbLight._m0[_2139].x + _914;
    float _2333 = cbLight._m0[_2139].y + _915;
    float _2334 = cbLight._m0[_2139].z + _916;
    float _2338 = inversesqrt(dot(vec3(_2332, _2333, _2334), vec3(_2332, _2333, _2334)));
    float _2339 = _2338 * _2332;
    float _2340 = _2338 * _2333;
    float _2341 = _2338 * _2334;
    float _2342 = dot(vec3(_835, _836, _837), vec3(cbLight._m0[_2139].xyz));
    float _4523 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2345 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
    float _2346 = dot(vec3(_835, _836, _837), vec3(_2339, _2340, _2341));
    float _4534 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2349 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _2350 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2339, _2340, _2341));
    float _4545 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2354 = _2331 * _2331;
    float _2358 = ((_2349 * _2349) * (_2354 + (-1.0))) + 1.0;
    float _2367 = (exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2368 = 1.0 - _2331;
    float _2378 = (0.5 / (((_2267 * ((_2345 * _2368) + _2331)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2368) + _2331) * _2345))) * _2345;
    float _4556 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2380 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2354 / ((_2358 * _2358) * 3.141590118408203125));
    float _2390 = (((_2367 * cbLight._m0[_2319].x) * _2380) * _2122) + ((((cbLight._m0[_2238].x * _2091) * _2291) * _2305) * _2135);
    float _2391 = (((_2367 * cbLight._m0[_2319].y) * _2380) * _2122) + ((((cbLight._m0[_2238].y * _2092) * _2291) * _2305) * _2135);
    float _2392 = (((_2367 * cbLight._m0[_2319].z) * _2380) * _2122) + ((((cbLight._m0[_2238].z * _2093) * _2291) * _2305) * _2135);
    float _2454;
    float _2456;
    float _2458;
    if (_2175)
    {
        _2454 = _2390;
        _2456 = _2391;
        _2458 = _2392;
    }
    else
    {
        uint _2460 = _2099 + 2u;
        uint _2464 = _2099 + 10u;
        float _2478 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2460].w)) * _838) * 0.949999988079071044921875);
        float _2479 = _2478 * _2478;
        float _2480 = cbLight._m0[_2460].x + _914;
        float _2481 = cbLight._m0[_2460].y + _915;
        float _2482 = cbLight._m0[_2460].z + _916;
        float _2486 = inversesqrt(dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482)));
        float _2487 = _2486 * _2480;
        float _2488 = _2486 * _2481;
        float _2489 = _2486 * _2482;
        float _2490 = dot(vec3(_835, _836, _837), vec3(cbLight._m0[_2460].xyz));
        float _4567 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _2494 = dot(vec3(_835, _836, _837), vec3(_2487, _2488, _2489));
        float _4578 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2497 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _2498 = dot(vec3(cbLight._m0[_2460].xyz), vec3(_2487, _2488, _2489));
        float _4589 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2502 = _2479 * _2479;
        float _2506 = ((_2497 * _2497) * (_2502 + (-1.0))) + 1.0;
        float _2515 = (exp2(log2(1.0 - (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2516 = 1.0 - _2479;
        float _2526 = (0.5 / (((_2267 * ((_2493 * _2516) + _2479)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2516) + _2479) * _2493))) * _2493;
        float _4600 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2528 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2502 / ((_2506 * _2506) * 3.141590118408203125));
        float _2529 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2454 = (((_2515 * cbLight._m0[_2464].x) * _2528) * _2529) + _2390;
        _2456 = (((_2515 * cbLight._m0[_2464].y) * _2528) * _2529) + _2391;
        _2458 = (((_2515 * cbLight._m0[_2464].z) * _2528) * _2529) + _2392;
    }
    float _2564;
    float _2566;
    float _2568;
    if (_2193)
    {
        _2564 = _2454;
        _2566 = _2456;
        _2568 = _2458;
    }
    else
    {
        uint _2575 = _2099 + 3u;
        uint _2579 = _2099 + 11u;
        float _2593 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2575].w)) * _838) * 0.949999988079071044921875);
        float _2594 = _2593 * _2593;
        float _2595 = cbLight._m0[_2575].x + _914;
        float _2596 = cbLight._m0[_2575].y + _915;
        float _2597 = cbLight._m0[_2575].z + _916;
        float _2601 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
        float _2602 = _2601 * _2595;
        float _2603 = _2601 * _2596;
        float _2604 = _2601 * _2597;
        float _2605 = dot(vec3(_835, _836, _837), vec3(cbLight._m0[_2575].xyz));
        float _4616 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2608 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _2609 = dot(vec3(_835, _836, _837), vec3(_2602, _2603, _2604));
        float _4627 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2613 = dot(vec3(cbLight._m0[_2575].xyz), vec3(_2602, _2603, _2604));
        float _4638 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2617 = _2594 * _2594;
        float _2621 = ((_2612 * _2612) * (_2617 + (-1.0))) + 1.0;
        float _2630 = (exp2(log2(1.0 - (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2631 = 1.0 - _2594;
        float _2641 = (0.5 / (((_2267 * ((_2608 * _2631) + _2594)) + 9.9999999392252902907785028219223e-09) + (((_2267 * _2631) + _2594) * _2608))) * _2608;
        float _4649 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2643 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2617 / ((_2621 * _2621) * 3.141590118408203125));
        float _2644 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
        _2564 = (((_2630 * cbLight._m0[_2579].x) * _2643) * _2644) + _2454;
        _2566 = (((_2630 * cbLight._m0[_2579].y) * _2643) * _2644) + _2456;
        _2568 = (((_2630 * cbLight._m0[_2579].z) * _2643) * _2644) + _2458;
    }
    float _2779;
    float _2781;
    float _2783;
    float _2785;
    float _2787;
    float _2789;
    if (_2097.y == 0u)
    {
        float _2719 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2720 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2719;
        float _2721 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2719;
        float _2722 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2719;
        uvec4 _2734 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2735 = _2734.x;
        uint _2746 = uint((float(_2734.y) * floor(float(uint(cbSceneParam._m0[85u].y * _923) / _2735))) + floor(float(uint(cbSceneParam._m0[85u].x * _922) / _2735)));
        float _2756 = (log2(_2722 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2757 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        uint _2760 = uint(isnan(14.0) ? _2757 : (isnan(_2757) ? 14.0 : min(_2757, 14.0)));
        uvec4 _2765 = texelFetch(g_lightClusterGridBuffer, int(((_2760 << 2u) + (_2746 << 6u)) >> 2u));
        uint _2766 = _2765.x;
        uint _2767 = _2734.z;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        if (((((1u << ((_2767 >> 4u) & 15u)) + 4294967295u) & _2766) == 0u) || ((_2767 & 240u) == 0u))
        {
            _2867 = 0.0;
            _2869 = 0.0;
            _2871 = 0.0;
            _2873 = 0.0;
            _2875 = 0.0;
            _2877 = 0.0;
        }
        else
        {
            float _2868;
            float _2870;
            float _2872;
            float _2874;
            float _2876;
            float _2878;
            float _3011 = 0.0;
            float _3012 = 0.0;
            float _3013 = 0.0;
            float _3014 = 0.0;
            float _3015 = 0.0;
            float _3016 = 0.0;
            uint _3017 = 0u;
            uint _3026;
            bool _3027;
            for (;;)
            {
                _3026 = texelFetch(g_lightClassification, int((((_2760 << 5u) + (_2746 << 9u)) + (_3017 << 2u)) >> 2u)).x;
                _3027 = _3026 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3027)
                {
                    frontier_phi_61_pred = _3011;
                    frontier_phi_61_pred_1 = _3016;
                    frontier_phi_61_pred_2 = _3015;
                    frontier_phi_61_pred_3 = _3014;
                    frontier_phi_61_pred_4 = _3013;
                    frontier_phi_61_pred_5 = _3012;
                }
                else
                {
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    uint _3141;
                    _3135 = _3011;
                    _3136 = _3012;
                    _3137 = _3013;
                    _3138 = _3014;
                    _3139 = _3015;
                    _3140 = _3016;
                    _3141 = _3026;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    for (;;)
                    {
                        uint _3145 = uint(findLSB(_3141)) + (_3017 << 5u);
                        uint _3142 = (_3141 + 4294967295u) & _3141;
                        uint _3147 = _3145 * 48u;
                        vec4 _3161 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3147)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 3u)).x));
                        uint _3167 = (_3145 * 48u) + 4u;
                        vec4 _3180 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3167)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3167 + 3u)).x));
                        uint _3186 = (_3145 * 48u) + 8u;
                        vec3 _3197 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3186)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3186 + 2u)).x));
                        float _3201 = _3161.x - _2720;
                        float _3202 = _3161.y - _2721;
                        float _3203 = _3161.z - _2722;
                        float _3204 = dot(vec3(_3201, _3202, _3203), vec3(_3201, _3202, _3203));
                        float _3207 = inversesqrt(_3204);
                        float _3208 = _3207 * _3201;
                        float _3209 = _3207 * _3202;
                        float _3210 = _3207 * _3203;
                        float _3211 = dot(vec3(_941, _944, _947), vec3(_3208, _3209, _3210));
                        float _3216 = 1.0 - (_3204 * _3161.w);
                        float _4675 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3217 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                        float _3218 = sqrt(_3204) * _3180.w;
                        float _3221 = 1.39999997615814208984375 / (_3218 + 1.39999997615814208984375);
                        float _3222 = _3221 * _3221;
                        float _3225 = ((1.0 - _3222) * _3211) + _3222;
                        float _3228 = _3218 * _3218;
                        float _3232 = ((isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0))) * _3217) / ((_3228 * 0.699999988079071044921875) + 1.0);
                        float _3236 = (-0.0) - _2720;
                        float _3237 = (-0.0) - _2721;
                        float _3238 = (-0.0) - _2722;
                        float _3242 = inversesqrt(dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238)));
                        float _3243 = _3242 * _3236;
                        float _3244 = _3242 * _3237;
                        float _3245 = _3242 * _3238;
                        float _3253 = exp2(log2(1.0 / ((_3228 * 3.5) + 5.0)) * 0.25);
                        float _3254 = 1.0 - _1004;
                        float _3261 = sqrt(1.0 - ((1.0 - (_3254 * _3254)) * (1.0 - (_3253 * _3253))));
                        float _3262 = _3261 * _3261;
                        float _3263 = _3262 * _3262;
                        float _3264 = _3243 + _3208;
                        float _3265 = _3244 + _3209;
                        float _3266 = _3245 + _3210;
                        float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                        float _3274 = dot(vec3(_941, _944, _947), vec3(_3243, _3244, _3245));
                        float _4691 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                        float _3277 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                        float _3278 = dot(vec3(_941, _944, _947), vec3(_3270 * _3264, _3270 * _3265, _3270 * _3266));
                        float _4702 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3281 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                        float _3285 = ((_3281 * _3281) * (_3263 + (-1.0))) + 1.0;
                        float _3286 = _3221 * _3262;
                        float _3287 = _3286 * _3286;
                        float _3290 = ((1.0 - _3287) * _3211) + _3287;
                        float _4713 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3291 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                        float _3292 = 1.0 - _3262;
                        float _3302 = (0.5 / (((_3291 * ((_3277 * _3292) + _3262)) + 9.9999999392252902907785028219223e-09) + (((_3291 * _3292) + _3262) * _3277))) * _3291;
                        float _4724 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3313 = (((_3263 * 3.1415927410125732421875) * (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) / ((_3285 * _3285) * ((_3228 * 2.1991131305694580078125) + 3.141590118408203125))) * _3217;
                        _3070 = (_3232 * _3180.x) + _3138;
                        _3071 = (_3232 * _3180.y) + _3139;
                        _3072 = (_3232 * _3180.z) + _3140;
                        _3067 = (_3313 * _3197.x) + _3135;
                        _3068 = (_3313 * _3197.y) + _3136;
                        _3069 = (_3313 * _3197.z) + _3137;
                        if (_3142 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3135 = _3067;
                            _3136 = _3068;
                            _3137 = _3069;
                            _3138 = _3070;
                            _3139 = _3071;
                            _3140 = _3072;
                            _3141 = _3142;
                        }
                    }
                    frontier_phi_61_pred = _3067;
                    frontier_phi_61_pred_1 = _3072;
                    frontier_phi_61_pred_2 = _3071;
                    frontier_phi_61_pred_3 = _3070;
                    frontier_phi_61_pred_4 = _3069;
                    frontier_phi_61_pred_5 = _3068;
                }
                _2868 = frontier_phi_61_pred;
                _2878 = frontier_phi_61_pred_1;
                _2876 = frontier_phi_61_pred_2;
                _2874 = frontier_phi_61_pred_3;
                _2872 = frontier_phi_61_pred_4;
                _2870 = frontier_phi_61_pred_5;
                uint _3018 = _3017 + 1u;
                if (_3018 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3011 = _2868;
                    _3012 = _2870;
                    _3013 = _2872;
                    _3014 = _2874;
                    _3015 = _2876;
                    _3016 = _2878;
                    _3017 = _3018;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2867 = _2868;
            _2869 = _2870;
            _2871 = _2872;
            _2873 = _2874;
            _2875 = _2876;
            _2877 = _2878;
        }
        uvec4 _2881 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2882 = _2881.z;
        uint _2884 = (_2882 >> 8u) & 15u;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        if (((4294967295u << _2884) & _2766) == 0u)
        {
            _2979 = _2867;
            _2981 = _2869;
            _2983 = _2871;
            _2985 = _2873;
            _2987 = _2875;
            _2989 = _2877;
        }
        else
        {
            float _3004 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
            float _3005 = _3004 * _2720;
            float _3006 = _3004 * _2721;
            float _3007 = _3004 * _2722;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2884 < ((_2882 >> 12u) & 15u))
            {
                float _2980;
                float _2982;
                float _2984;
                float _2986;
                float _2988;
                float _2990;
                float _3118 = _2867;
                float _3119 = _2869;
                float _3120 = _2871;
                float _3121 = _2873;
                float _3122 = _2875;
                float _3123 = _2877;
                uint _3124 = _2884;
                uint _3133;
                bool _3134;
                for (;;)
                {
                    _3133 = texelFetch(g_lightClassification, int((((_2760 << 5u) + (_2746 << 9u)) + (_3124 << 2u)) >> 2u)).x;
                    _3134 = _3133 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3134)
                    {
                        frontier_phi_67_pred = _3121;
                        frontier_phi_67_pred_1 = _3122;
                        frontier_phi_67_pred_2 = _3123;
                        frontier_phi_67_pred_3 = _3120;
                        frontier_phi_67_pred_4 = _3119;
                        frontier_phi_67_pred_5 = _3118;
                    }
                    else
                    {
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3331 = _3118;
                        float _3332 = _3119;
                        float _3333 = _3120;
                        float _3334 = _3121;
                        float _3335 = _3122;
                        float _3336 = _3123;
                        uint _3337 = _3133;
                        uint _3338;
                        vec4 _3363;
                        float _3364;
                        vec4 _3379;
                        vec3 _3391;
                        vec4 _3406;
                        vec4 _3421;
                        float _3467;
                        bool _3468;
                        for (;;)
                        {
                            uint _3348 = ((_3124 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3337));
                            _3338 = (_3337 + 4294967295u) & _3337;
                            uint _3350 = _3348 * 40u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            _3364 = _3363.w;
                            uint _3366 = (_3348 * 40u) + 4u;
                            _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            uint _3381 = (_3348 * 40u) + 8u;
                            _3391 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x));
                            uint _3393 = (_3348 * 40u) + 16u;
                            _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            uint _3408 = (_3348 * 40u) + 20u;
                            _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            uint _3423 = (_3348 * 40u) + 24u;
                            vec4 _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            uint _3442 = (_3348 * 40u) + 28u;
                            vec4 _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            _3467 = fma(_2722, _3455.z, fma(_2721, _3455.y, _3455.x * _2720)) + _3455.w;
                            _3468 = !((fma(_2722, _3436.z, fma(_2721, _3436.y, _3436.x * _2720)) + _3436.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3468)
                            {
                                float _3495 = _3363.x - _2720;
                                float _3496 = _3363.y - _2721;
                                float _3497 = _3363.z - _2722;
                                float _3498 = dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497));
                                float _3501 = inversesqrt(_3498);
                                float _3502 = _3501 * _3495;
                                float _3503 = _3501 * _3496;
                                float _3504 = _3501 * _3497;
                                float _3508 = 1.0 - (_3498 / (_3364 * _3364));
                                float _4735 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3509 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3513 = sqrt(_3498) * _3379.w;
                                float _3515 = 1.39999997615814208984375 / (_3513 + 1.39999997615814208984375);
                                float _3516 = _3515 * _3515;
                                float _3519 = ((1.0 - _3516) * dot(vec3(_3502, _3503, _3504), vec3(_941, _944, _947))) + _3516;
                                float _3522 = _3513 * _3513;
                                float _3526 = (fma(_2722, _3406.z, fma(_2721, _3406.y, _3406.x * _2720)) + _3406.w) / _3467;
                                float _3527 = (fma(_2722, _3421.z, fma(_2721, _3421.y, _3421.x * _2720)) + _3421.w) / _3467;
                                float _3531 = 1.0 - dot(vec2(_3526, _3527), vec2(_3526, _3527));
                                float _4751 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3532 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                                float _3533 = _3532 * (((isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0))) * _3509) / ((_3522 * 0.699999988079071044921875) + 1.0));
                                float _3545 = exp2(log2(1.0 / ((_3522 * 3.5) + 5.0)) * 0.25);
                                float _3546 = 1.0 - _1004;
                                float _3553 = sqrt(1.0 - ((1.0 - (_3546 * _3546)) * (1.0 - (_3545 * _3545))));
                                float _3554 = _3553 * _3553;
                                float _3555 = _3554 * _3554;
                                float _3556 = _3502 - _3005;
                                float _3557 = _3503 - _3006;
                                float _3558 = _3504 - _3007;
                                float _3562 = inversesqrt(dot(vec3(_3556, _3557, _3558), vec3(_3556, _3557, _3558)));
                                float _3566 = dot(vec3(_941, _944, _947), vec3((-0.0) - _3005, (-0.0) - _3006, (-0.0) - _3007));
                                float _4762 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3569 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                                float _3570 = dot(vec3(_941, _944, _947), vec3(_3562 * _3556, _3562 * _3557, _3562 * _3558));
                                float _4773 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3573 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                                float _3577 = ((_3573 * _3573) * (_3555 + (-1.0))) + 1.0;
                                float _3578 = _3515 * _3554;
                                float _3579 = _3578 * _3578;
                                float _3585 = ((1.0 - _3579) * dot(vec3(_941, _944, _947), vec3(_3502, _3503, _3504))) + _3579;
                                float _4784 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3586 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                                float _3587 = 1.0 - _3554;
                                float _3597 = (0.5 / (((_3586 * ((_3569 * _3587) + _3554)) + 9.9999999392252902907785028219223e-09) + (((_3586 * _3587) + _3554) * _3569))) * _3586;
                                float _4795 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3607 = (_3532 * _3509) * (((_3555 * 3.1415927410125732421875) * (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0)))) / ((_3577 * _3577) * ((_3522 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3607 * _3391.x;
                                frontier_phi_73_pred_1 = _3607 * _3391.y;
                                frontier_phi_73_pred_2 = _3533 * _3379.z;
                                frontier_phi_73_pred_3 = _3533 * _3379.y;
                                frontier_phi_73_pred_4 = _3533 * _3379.x;
                                frontier_phi_73_pred_5 = _3607 * _3391.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3611 = frontier_phi_73_pred;
                            _3612 = frontier_phi_73_pred_1;
                            _3616 = frontier_phi_73_pred_2;
                            _3615 = frontier_phi_73_pred_3;
                            _3614 = frontier_phi_73_pred_4;
                            _3613 = frontier_phi_73_pred_5;
                            _3321 = _3614 + _3334;
                            _3322 = _3615 + _3335;
                            _3323 = _3616 + _3336;
                            _3318 = _3611 + _3331;
                            _3319 = _3612 + _3332;
                            _3320 = _3613 + _3333;
                            if (_3338 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3338;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3321;
                        frontier_phi_67_pred_1 = _3322;
                        frontier_phi_67_pred_2 = _3323;
                        frontier_phi_67_pred_3 = _3320;
                        frontier_phi_67_pred_4 = _3319;
                        frontier_phi_67_pred_5 = _3318;
                    }
                    _2986 = frontier_phi_67_pred;
                    _2988 = frontier_phi_67_pred_1;
                    _2990 = frontier_phi_67_pred_2;
                    _2984 = frontier_phi_67_pred_3;
                    _2982 = frontier_phi_67_pred_4;
                    _2980 = frontier_phi_67_pred_5;
                    uint _3125 = _3124 + 1u;
                    if (_3125 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3118 = _2980;
                        _3119 = _2982;
                        _3120 = _2984;
                        _3121 = _2986;
                        _3122 = _2988;
                        _3123 = _2990;
                        _3124 = _3125;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2988;
                frontier_phi_55_56_ladder_1 = _2990;
                frontier_phi_55_56_ladder_2 = _2986;
                frontier_phi_55_56_ladder_3 = _2984;
                frontier_phi_55_56_ladder_4 = _2982;
                frontier_phi_55_56_ladder_5 = _2980;
            }
            else
            {
                frontier_phi_55_56_ladder = _2875;
                frontier_phi_55_56_ladder_1 = _2877;
                frontier_phi_55_56_ladder_2 = _2873;
                frontier_phi_55_56_ladder_3 = _2871;
                frontier_phi_55_56_ladder_4 = _2869;
                frontier_phi_55_56_ladder_5 = _2867;
            }
            _2979 = frontier_phi_55_56_ladder_5;
            _2981 = frontier_phi_55_56_ladder_4;
            _2983 = frontier_phi_55_56_ladder_3;
            _2985 = frontier_phi_55_56_ladder_2;
            _2987 = frontier_phi_55_56_ladder;
            _2989 = frontier_phi_55_56_ladder_1;
        }
        float _2994 = isnan(1.0) ? _985 : (isnan(_985) ? 1.0 : min(_985, 1.0));
        _2779 = (_2994 * _2985) + _2231;
        _2781 = (_2994 * _2987) + _2233;
        _2783 = (_2994 * _2989) + _2235;
        _2785 = ((_2979 * 0.039999999105930328369140625) * _2994) + _2564;
        _2787 = ((_2981 * 0.039999999105930328369140625) * _2994) + _2566;
        _2789 = ((_2983 * 0.039999999105930328369140625) * _2994) + _2568;
    }
    else
    {
        _2779 = _2231;
        _2781 = _2233;
        _2783 = _2235;
        _2785 = _2564;
        _2787 = _2566;
        _2789 = _2568;
    }
    float _4811 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _4822 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _4833 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    uint _2809 = _279 + 6u;
    float _2817 = _922 / cbSceneParam._m0[86u].x;
    float _2818 = _923 / cbSceneParam._m0[86u].y;
    vec4 _2832 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2817, _2818, (log2((isnan(cbSceneParam._m0[77u].w) ? _856 : (isnan(_856) ? cbSceneParam._m0[77u].w : min(_856, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2834 = _2832.x;
    float _2835 = _2832.y;
    float _2836 = _2832.z;
    float _2837 = _2832.w;
    float _2930;
    float _2932;
    float _2934;
    float _2936;
    if (_856 > cbSceneParam._m0[78u].w)
    {
        float _2892 = isnan(_856) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _856 : min(cbSceneParam._m0[80u].w, _856));
        float _2893 = _2892 / _856;
        float _2904 = _2893 * _907;
        float _2905 = _908 * _2893;
        float _2906 = (-0.0) - _2905;
        float _2908 = _2893 * _909;
        float _2910 = (cbSceneParam._m0[77u].w * _2906) / _2892;
        float _2911 = _2910 + cbSceneParam._m0[79u].w;
        float _2912 = cbSceneParam._m0[79u].w - _2905;
        float _2918 = sqrt(((_2904 * _2904) + (_2905 * _2905)) + (_2908 * _2908));
        float _2921 = (1.0 - (cbSceneParam._m0[77u].w / _2892)) * _2918;
        float _2926 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2928 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3080;
        if (abs((_2906 - _2910) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3080 = ((((_2911 > 0.0) ? exp2(_2926 * _2911) : (2.0 - exp2(_2928 * _2911))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2921;
        }
        else
        {
            float _3040 = 1.0 / cbSceneParam._m0[80u].x;
            float _3041 = isnan(_2912) ? _2911 : (isnan(_2911) ? _2912 : max(_2911, _2912));
            float _3042 = isnan(_2912) ? _2911 : (isnan(_2911) ? _2912 : min(_2911, _2912));
            float _3051 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : min(_3041, 0.0));
            float _3052 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : min(_3042, 0.0));
            _3080 = ((abs(_2918 / _2906) * cbSceneParam._m0[80u].y) * ((((_3051 - _3052) * 2.0) - ((exp2(_2926 * (isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0)))) - exp2(_2926 * (isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0))))) * _3040)) - ((exp2(_2928 * _3051) - exp2(_2928 * _3052)) * _3040))) + (_2921 * cbSceneParam._m0[80u].z);
        }
        vec4 _3082 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2817, _2818, 1.0), 0.0);
        float _3091 = exp2((_3080 * (-1.44269502162933349609375)) * (1.0 - _3082.w));
        float _3092 = log2(_3091);
        float _3108 = log2(_2837);
        _2930 = (exp2(_3108 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3092 * cbSceneParam._m0[78u].x)) * _3082.x) / cbSceneParam._m0[78u].x)) + _2834;
        _2932 = (exp2(_3108 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3092 * cbSceneParam._m0[78u].y)) * _3082.y) / cbSceneParam._m0[78u].y)) + _2835;
        _2934 = (exp2(_3108 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3092 * cbSceneParam._m0[78u].z)) * _3082.z) / cbSceneParam._m0[78u].z)) + _2836;
        _2936 = _3091 * _2837;
    }
    else
    {
        _2930 = _2834;
        _2932 = _2835;
        _2934 = _2836;
        _2936 = _2837;
    }
    float _2947 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2948 = _2947 == 3.0;
    float _2949 = log2(_2936);
    float _2956 = exp2(_2949 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * (_2779 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _985))) + (((((_1997 * (_2045.x / _2051)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1792) * _2066)) + _2785) * cbPerFrame._m0[3u].x));
    float _2957 = exp2(_2949 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (_2781 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _985))) + (((((_1997 * (_2045.y / _2051)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1792) * _2066)) + _2787) * cbPerFrame._m0[3u].x));
    float _2958 = exp2(_2949 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * (_2783 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _985))) + (((((_1997 * (_2045.z / _2051)) * cbSceneParam._m0[72u].w) + (((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1792) * _2066)) + _2789) * cbPerFrame._m0[3u].x));
    float _2967 = (_2947 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2967 * (_2948 ? _2956 : (_2956 + (cbSceneParam._m0[72u].w * _2930)));
    SV_Target.y = _2967 * (_2948 ? _2957 : (_2957 + (cbSceneParam._m0[72u].w * _2932)));
    SV_Target.z = _2967 * (_2948 ? _2958 : (_2958 + (cbSceneParam._m0[72u].w * _2934)));
    SV_Target.w = cbInstanceData._m0[_2809].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2809].w;
}


