#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[33];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 0, std140) uniform cbPerSceneUBO
{
    vec4 _m0[39];
} cbPerScene;

layout(set = 0, binding = 26) uniform texture2D g_PrevFrameTexture;
layout(set = 0, binding = 27) uniform texture2D g_ConvertedDepthTexture;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    float _84 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _85 = _84 * NORMAL.x;
    float _86 = _84 * NORMAL.y;
    float _87 = _84 * NORMAL.z;
    float _106 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _107 = POSITION_1.x / POSITION_1.w;
    float _108 = POSITION_1.y / POSITION_1.w;
    float _112 = (_107 * 0.5) + 0.5;
    float _113 = 0.5 - (_108 * 0.5);
    float _119;
    float _121;
    float _123;
    float _125;
    if (cbMtdParam._m0[25u].y < cbPerScene._m0[22u].z)
    {
        _119 = 0.0;
        _121 = 0.0;
        _123 = 0.0;
        _125 = 0.0;
    }
    else
    {
        float _131 = 1.0 / _106;
        float frontier_phi_1_2_ladder;
        float frontier_phi_1_2_ladder_1;
        float frontier_phi_1_2_ladder_2;
        float frontier_phi_1_2_ladder_3;
        if (!(cbPerScene._m0[21u].y >= _131))
        {
            float _158 = fma(_87, cbPerScene._m0[8u].z, fma(_86, cbPerScene._m0[8u].y, cbPerScene._m0[8u].x * _85));
            float _161 = fma(_87, cbPerScene._m0[9u].z, fma(_86, cbPerScene._m0[9u].y, cbPerScene._m0[9u].x * _85));
            float _164 = fma(_87, cbPerScene._m0[10u].z, fma(_86, cbPerScene._m0[10u].y, cbPerScene._m0[10u].x * _85));
            float _171 = (_106 * _107) * cbPerScene._m0[28u].x;
            float _173 = (_106 * _108) * cbPerScene._m0[28u].y;
            float _177 = inversesqrt(dot(vec3(_171, _173, _106), vec3(_171, _173, _106)));
            float _178 = _171 * _177;
            float _179 = _173 * _177;
            float _180 = _177 * _106;
            float _184 = dot(vec3(_178, _179, _180), vec3(_158, _161, _164)) * 2.0;
            float _189 = _178 - (_184 * _158);
            float _190 = _179 - (_184 * _161);
            float _191 = _180 - (_184 * _164);
            float _195 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
            float _198 = _191 * _195;
            float frontier_phi_1_2_ladder_3_ladder;
            float frontier_phi_1_2_ladder_3_ladder_1;
            float frontier_phi_1_2_ladder_3_ladder_2;
            float frontier_phi_1_2_ladder_3_ladder_3;
            if (_198 < cbPerScene._m0[16u].x)
            {
                frontier_phi_1_2_ladder_3_ladder = 0.0;
                frontier_phi_1_2_ladder_3_ladder_1 = 0.0;
                frontier_phi_1_2_ladder_3_ladder_2 = 0.0;
                frontier_phi_1_2_ladder_3_ladder_3 = 0.0;
            }
            else
            {
                float _211 = abs(dot(vec3((-0.0) - _178, (-0.0) - _179, (-0.0) - _180), vec3(_158, _161, _164)));
                float _648 = isnan(0.0) ? _211 : (isnan(_211) ? 0.0 : max(_211, 0.0));
                float _222 = (((cbMtdParam._m0[25u].y * cbMtdParam._m0[25u].y) * 0.959999978542327880859375) * exp2(log2(1.0 - (isnan(1.0) ? _648 : (isnan(_648) ? 1.0 : min(_648, 1.0)))) * 5.0)) + 0.039999999105930328369140625;
                float _231 = (cbPerScene._m0[29u].x * (1.0 - cbMtdParam._m0[25u].y)) + cbPerScene._m0[29u].y;
                float _659 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
                float _240 = ((cbPerScene._m0[23u].w - cbPerScene._m0[23u].z) * (isnan(1.0) ? _659 : (isnan(_659) ? 1.0 : min(_659, 1.0)))) + cbPerScene._m0[23u].z;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder_1;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder_2;
                float frontier_phi_1_2_ladder_3_ladder_4_ladder_3;
                if (_222 < cbPerScene._m0[22u].x)
                {
                    frontier_phi_1_2_ladder_3_ladder_4_ladder = 0.0;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_1 = 0.0;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_2 = 0.0;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_3 = 0.0;
                }
                else
                {
                    float _243 = _198 - cbPerScene._m0[16u].x;
                    float _670 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
                    float _244 = isnan(1.0) ? _670 : (isnan(_670) ? 1.0 : min(_670, 1.0));
                    float _245 = _244 * _244;
                    float _247 = (_222 - cbPerScene._m0[22u].x) * 10.0;
                    float _681 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
                    float _249 = isnan(1.0) ? _681 : (isnan(_681) ? 1.0 : min(_681, 1.0));
                    float _250 = isnan(_249) ? _245 : (isnan(_245) ? _249 : min(_245, _249));
                    float _254 = (cbPerScene._m0[21u].x - _106) * cbPerScene._m0[21u].z;
                    float _697 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
                    float _255 = isnan(1.0) ? _697 : (isnan(_697) ? 1.0 : min(_697, 1.0));
                    float _256 = isnan(_255) ? _250 : (isnan(_250) ? _255 : min(_250, _255));
                    float _257 = (_189 * _195) + _171;
                    float _258 = (_190 * _195) + _173;
                    float _259 = _198 + _106;
                    float _292 = fma(_259, cbPerScene._m0[7u].z, fma(_258, cbPerScene._m0[7u].y, cbPerScene._m0[7u].x * _257)) + cbPerScene._m0[7u].w;
                    float _296 = ((fma(_259, cbPerScene._m0[4u].z, fma(_258, cbPerScene._m0[4u].y, cbPerScene._m0[4u].x * _257)) + cbPerScene._m0[4u].w) / _292) - _112;
                    float _297 = ((fma(_259, cbPerScene._m0[5u].z, fma(_258, cbPerScene._m0[5u].y, cbPerScene._m0[5u].x * _257)) + cbPerScene._m0[5u].w) / _292) - _113;
                    float _304 = cbPerScene._m0[18u].x * _296;
                    float _305 = cbPerScene._m0[18u].y * _297;
                    float _310 = sqrt((_304 * _304) + (_305 * _305)) + 9.9999997473787516355514526367188e-06;
                    float _315 = (_296 / _310) * _240;
                    float _316 = (_297 / _310) * _240;
                    float _317 = (((1.0 / _259) - _131) / _310) * _240;
                    float _346 = abs(float(_315 > 0.0) - _112) / (abs(_315) + 1.0000000116860974230803549289703e-07);
                    float _347 = abs(float(_316 > 0.0) - _113) / (abs(_316) + 1.0000000116860974230803549289703e-07);
                    float _349 = (abs(((_317 > 0.0) ? cbPerScene._m0[20u].x : cbPerScene._m0[20u].y) - _131) / (abs(_317) + 1.0000000116860974230803549289703e-07)) + 2.0;
                    float _350 = isnan(_347) ? _346 : (isnan(_346) ? _347 : min(_346, _347));
                    float _351 = isnan(_349) ? _350 : (isnan(_350) ? _349 : min(_350, _349));
                    uint _354 = uint(int(isnan(cbPerScene._m0[23u].y) ? _351 : (isnan(_351) ? cbPerScene._m0[23u].y : min(_351, cbPerScene._m0[23u].y))));
                    float _126;
                    float _359;
                    float _361;
                    float _363;
                    if (int(_354) > int(0u))
                    {
                        float _356 = _317 + _131;
                        float _357 = _316 + _113;
                        float _358 = _315 + _112;
                        float _360;
                        float _362;
                        float _364;
                        float _365;
                        uint _376;
                        float _378;
                        float _380;
                        float _382;
                        float _384;
                        float _386;
                        float _388;
                        float _390;
                        uint _392;
                        float _394;
                        float _396;
                        float _398;
                        float _371 = 0.0;
                        float _372 = 0.0;
                        float _373 = 0.0;
                        float _374 = 0.0;
                        uint _375 = 0u;
                        float _377 = _131;
                        float _379 = _358;
                        float _381 = _357;
                        float _383 = _356;
                        float _385 = _112;
                        float _387 = _113;
                        float _389 = _131;
                        uint _391 = 1u;
                        float _393 = 0.0;
                        float _395 = 0.0;
                        float _397 = 0.0;
                        float _411;
                        float _418;
                        float _419;
                        float _420;
                        float _421;
                        float _422;
                        float _423;
                        uint _424;
                        float _425;
                        bool _432;
                        for (;;)
                        {
                            _411 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _379, cbSceneParam._m0[86u].y * _381), 0.0).x;
                            bool _417 = _375 == (_354 + 4294967295u);
                            _418 = _417 ? _393 : _379;
                            _419 = _417 ? _395 : _381;
                            _420 = _417 ? _397 : _383;
                            _421 = _417 ? _393 : _385;
                            _422 = _417 ? _395 : _387;
                            _423 = _417 ? _397 : _389;
                            _424 = _417 ? 1u : _391;
                            _425 = _417 ? (-1.0) : (_383 - _411);
                            _432 = (_424 != 0u) && ((_425 <= 0.0) && ((_417 ? (-1.0) : (_411 - (_377 * cbPerScene._m0[19u].y))) < 0.0));
                            float frontier_phi_14_pred;
                            float frontier_phi_14_pred_1;
                            float frontier_phi_14_pred_2;
                            uint frontier_phi_14_pred_3;
                            float frontier_phi_14_pred_4;
                            float frontier_phi_14_pred_5;
                            float frontier_phi_14_pred_6;
                            float frontier_phi_14_pred_7;
                            float frontier_phi_14_pred_8;
                            float frontier_phi_14_pred_9;
                            float frontier_phi_14_pred_10;
                            float frontier_phi_14_pred_11;
                            float frontier_phi_14_pred_12;
                            float frontier_phi_14_pred_13;
                            float frontier_phi_14_pred_14;
                            uint frontier_phi_14_pred_15;
                            if (_432)
                            {
                                uint _442 = uint(int(log2(_240) + 0.999000012874603271484375));
                                float _453;
                                float _455;
                                float _457;
                                float _459;
                                float _461;
                                float _463;
                                float _465;
                                if (int(_442) > int(0u))
                                {
                                    uint _563;
                                    float _565;
                                    float _566;
                                    float _567;
                                    float _568;
                                    float _569;
                                    float _570;
                                    float _571;
                                    _563 = 0u;
                                    _565 = _418;
                                    _566 = _419;
                                    _567 = _420;
                                    _568 = _421;
                                    _569 = _422;
                                    _570 = _423;
                                    _571 = _411;
                                    float _454;
                                    float _456;
                                    float _458;
                                    float _460;
                                    float _462;
                                    float _464;
                                    float _466;
                                    for (;;)
                                    {
                                        float _575 = (_568 + _565) * 0.5;
                                        float _576 = (_569 + _566) * 0.5;
                                        float _577 = (_570 + _567) * 0.5;
                                        vec4 _585 = textureLod(sampler2D(g_ConvertedDepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[86u].x * _575, cbSceneParam._m0[86u].y * _576), 0.0);
                                        float _587 = _585.x;
                                        bool _589 = (_577 - _587) < 0.0;
                                        _454 = _589 ? _575 : _565;
                                        _456 = _589 ? _576 : _566;
                                        _458 = _589 ? _577 : _567;
                                        _460 = _589 ? _568 : _575;
                                        _462 = _589 ? _569 : _576;
                                        _464 = _589 ? _570 : _577;
                                        _466 = _589 ? _587 : _571;
                                        uint _564 = _563 + 1u;
                                        if (_564 == _442)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            _563 = _564;
                                            _565 = _454;
                                            _566 = _456;
                                            _567 = _458;
                                            _568 = _460;
                                            _569 = _462;
                                            _570 = _464;
                                            _571 = _466;
                                        }
                                    }
                                    _453 = _454;
                                    _455 = _456;
                                    _457 = _458;
                                    _459 = _460;
                                    _461 = _462;
                                    _463 = _464;
                                    _465 = _466;
                                }
                                else
                                {
                                    _453 = _418;
                                    _455 = _419;
                                    _457 = _420;
                                    _459 = _421;
                                    _461 = _422;
                                    _463 = _423;
                                    _465 = _411;
                                }
                                float _475 = cbPerScene._m0[28u].x * ((_453 * 2.0) + (-1.0));
                                float _476 = cbPerScene._m0[28u].y * (1.0 - (_455 * 2.0));
                                float _508 = fma(_465, cbPerScene._m0[27u].w, fma(_476, cbPerScene._m0[27u].y, cbPerScene._m0[27u].x * _475) + cbPerScene._m0[27u].z);
                                float _509 = fma(_465, cbPerScene._m0[24u].w, fma(_476, cbPerScene._m0[24u].y, _475 * cbPerScene._m0[24u].x) + cbPerScene._m0[24u].z) / _508;
                                float _510 = fma(_465, cbPerScene._m0[25u].w, fma(_476, cbPerScene._m0[25u].y, cbPerScene._m0[25u].x * _475) + cbPerScene._m0[25u].z) / _508;
                                vec4 _519 = textureLod(sampler2D(g_PrevFrameTexture, SS_ClampLinear), vec2(cbSceneParam._m0[87u].z * _509, cbSceneParam._m0[87u].w * _510), 0.0);
                                float _524 = isnan(_256) ? 1.0 : (isnan(1.0) ? _256 : min(1.0, _256));
                                float _525 = 0.5 - _509;
                                float _526 = 0.5 - _510;
                                float _527 = _525 * 2.0;
                                float _528 = _526 * 2.0;
                                float _529 = _527 * _527;
                                float _530 = _528 * _528;
                                float _733 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
                                float _744 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
                                float _539 = inversesqrt(dot(vec2(_315, _316), vec2(_315, _316)));
                                float _545 = inversesqrt(dot(vec2(_527, _528), vec2(_527, _528)));
                                float _551 = dot(vec2((_525 * (-2.0)) * _545, (_526 * (-2.0)) * _545), vec2(_539 * _315, _539 * _316));
                                float _755 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
                                float _558 = ((1.0 - (isnan(1.0) ? _744 : (isnan(_744) ? 1.0 : min(_744, 1.0)))) * (1.0 - (isnan(1.0) ? _733 : (isnan(_733) ? 1.0 : min(_733, 1.0))))) * (4.0 - ((isnan(1.0) ? _755 : (isnan(_755) ? 1.0 : min(_755, 1.0))) * 2.0));
                                float _766 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
                                float _559 = isnan(1.0) ? _766 : (isnan(_766) ? 1.0 : min(_766, 1.0));
                                float _560 = _559 * _559;
                                frontier_phi_14_pred = _397;
                                frontier_phi_14_pred_1 = _395;
                                frontier_phi_14_pred_2 = _393;
                                frontier_phi_14_pred_3 = _424;
                                frontier_phi_14_pred_4 = _463;
                                frontier_phi_14_pred_5 = _461;
                                frontier_phi_14_pred_6 = _459;
                                frontier_phi_14_pred_7 = _457;
                                frontier_phi_14_pred_8 = _455;
                                frontier_phi_14_pred_9 = _453;
                                frontier_phi_14_pred_10 = _377;
                                frontier_phi_14_pred_11 = isnan(_560) ? _524 : (isnan(_524) ? _560 : min(_524, _560));
                                frontier_phi_14_pred_12 = _519.z;
                                frontier_phi_14_pred_13 = _519.y;
                                frontier_phi_14_pred_14 = _519.x;
                                frontier_phi_14_pred_15 = _354;
                            }
                            else
                            {
                                bool _444 = _425 > 0.0;
                                frontier_phi_14_pred = _444 ? _420 : _397;
                                frontier_phi_14_pred_1 = _444 ? _419 : _395;
                                frontier_phi_14_pred_2 = _444 ? _418 : _393;
                                frontier_phi_14_pred_3 = uint(_444);
                                frontier_phi_14_pred_4 = _420;
                                frontier_phi_14_pred_5 = _419;
                                frontier_phi_14_pred_6 = _418;
                                frontier_phi_14_pred_7 = _420 + _317;
                                frontier_phi_14_pred_8 = _419 + _316;
                                frontier_phi_14_pred_9 = _418 + _315;
                                frontier_phi_14_pred_10 = _411;
                                frontier_phi_14_pred_11 = _374;
                                frontier_phi_14_pred_12 = _373;
                                frontier_phi_14_pred_13 = _372;
                                frontier_phi_14_pred_14 = _371;
                                frontier_phi_14_pred_15 = _375 + 1u;
                            }
                            _398 = frontier_phi_14_pred;
                            _396 = frontier_phi_14_pred_1;
                            _394 = frontier_phi_14_pred_2;
                            _392 = frontier_phi_14_pred_3;
                            _390 = frontier_phi_14_pred_4;
                            _388 = frontier_phi_14_pred_5;
                            _386 = frontier_phi_14_pred_6;
                            _384 = frontier_phi_14_pred_7;
                            _382 = frontier_phi_14_pred_8;
                            _380 = frontier_phi_14_pred_9;
                            _378 = frontier_phi_14_pred_10;
                            _365 = frontier_phi_14_pred_11;
                            _364 = frontier_phi_14_pred_12;
                            _362 = frontier_phi_14_pred_13;
                            _360 = frontier_phi_14_pred_14;
                            _376 = frontier_phi_14_pred_15;
                            if (int(_376) < int(_354))
                            {
                                _371 = _360;
                                _372 = _362;
                                _373 = _364;
                                _374 = _365;
                                _375 = _376;
                                _377 = _378;
                                _379 = _380;
                                _381 = _382;
                                _383 = _384;
                                _385 = _386;
                                _387 = _388;
                                _389 = _390;
                                _391 = _392;
                                _393 = _394;
                                _395 = _396;
                                _397 = _398;
                                continue;
                            }
                            else
                            {
                                break;
                            }
                        }
                        _359 = _360;
                        _361 = _362;
                        _363 = _364;
                        _126 = _365;
                    }
                    else
                    {
                        _359 = 0.0;
                        _361 = 0.0;
                        _363 = 0.0;
                        _126 = 0.0;
                    }
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder;
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1;
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2;
                    float frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3;
                    if ((isnan(_359) || isnan(_361)) || isnan(_363))
                    {
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder = 0.0;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1 = 0.0;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2 = 0.0;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3 = 0.0;
                    }
                    else
                    {
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder = (_126 * _359) * cbPerScene._m0[28u].w;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1 = _126;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2 = (_126 * _363) * cbPerScene._m0[28u].w;
                        frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3 = (_126 * _361) * cbPerScene._m0[28u].w;
                    }
                    frontier_phi_1_2_ladder_3_ladder_4_ladder = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_1 = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_1;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_2 = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_2;
                    frontier_phi_1_2_ladder_3_ladder_4_ladder_3 = frontier_phi_1_2_ladder_3_ladder_4_ladder_7_ladder_3;
                }
                frontier_phi_1_2_ladder_3_ladder = frontier_phi_1_2_ladder_3_ladder_4_ladder;
                frontier_phi_1_2_ladder_3_ladder_1 = frontier_phi_1_2_ladder_3_ladder_4_ladder_1;
                frontier_phi_1_2_ladder_3_ladder_2 = frontier_phi_1_2_ladder_3_ladder_4_ladder_2;
                frontier_phi_1_2_ladder_3_ladder_3 = frontier_phi_1_2_ladder_3_ladder_4_ladder_3;
            }
            frontier_phi_1_2_ladder = frontier_phi_1_2_ladder_3_ladder;
            frontier_phi_1_2_ladder_1 = frontier_phi_1_2_ladder_3_ladder_1;
            frontier_phi_1_2_ladder_2 = frontier_phi_1_2_ladder_3_ladder_2;
            frontier_phi_1_2_ladder_3 = frontier_phi_1_2_ladder_3_ladder_3;
        }
        else
        {
            frontier_phi_1_2_ladder = 0.0;
            frontier_phi_1_2_ladder_1 = 0.0;
            frontier_phi_1_2_ladder_2 = 0.0;
            frontier_phi_1_2_ladder_3 = 0.0;
        }
        _119 = frontier_phi_1_2_ladder;
        _121 = frontier_phi_1_2_ladder_3;
        _123 = frontier_phi_1_2_ladder_2;
        _125 = frontier_phi_1_2_ladder_1;
    }
    SV_Target.x = _119;
    SV_Target.y = _121;
    SV_Target.z = _123;
    SV_Target.w = _125;
}


