#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec4 TEXCOORD;
layout(location = 7) in ivec2 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec4 TEXCOORD_2;
layout(location = 4) out vec3 TEXCOORD_4;
layout(location = 4, component = 3) out float TEXCOORD_12;

void main()
{
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_2.w = 0.0;
    TEXCOORD_4.x = 0.0;
    TEXCOORD_4.y = 0.0;
    TEXCOORD_4.z = 0.0;
    TEXCOORD_12 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _207 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _209 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _210 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _219 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _220 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _221 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _231 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + (uint(gl_InstanceIndex) - uint(gl_BaseInstance));
    uvec4 _233 = texelFetch(g_InstanceIndexBuffer, int(_231));
    uint _234 = _233.x;
    precise float _235 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _240 = isnan(_235) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _235 : max(0.001000000047497451305389404296875, _235));
    precise float _242 = BLENDWEIGHT.x / _240;
    precise float _243 = BLENDWEIGHT.y / _240;
    precise float _244 = BLENDWEIGHT.z / _240;
    precise float _245 = BLENDWEIGHT.w / _240;
    uint _247 = _234 * 13u;
    uvec4 _252 = floatBitsToUint(cbInstanceData._m0[_247 + 4u]);
    uint _253 = _252.x;
    uint _255 = (_253 + uint(float(BLENDINDICES.x))) * 3u;
    uint _262 = _255 + 1u;
    uint _269 = _255 + 2u;
    precise float _276 = _242 * cbObjMatrix._m0[_255].x;
    precise float _277 = _242 * cbObjMatrix._m0[_262].x;
    precise float _278 = _242 * cbObjMatrix._m0[_269].x;
    precise float _279 = _242 * cbObjMatrix._m0[_255].y;
    precise float _280 = _242 * cbObjMatrix._m0[_262].y;
    precise float _281 = _242 * cbObjMatrix._m0[_269].y;
    precise float _282 = _242 * cbObjMatrix._m0[_255].z;
    precise float _283 = _242 * cbObjMatrix._m0[_262].z;
    precise float _284 = _242 * cbObjMatrix._m0[_269].z;
    precise float _285 = _242 * cbObjMatrix._m0[_255].w;
    precise float _286 = _242 * cbObjMatrix._m0[_262].w;
    precise float _287 = _242 * cbObjMatrix._m0[_269].w;
    uint _290 = (_253 + uint(float(BLENDINDICES.y))) * 3u;
    uint _297 = _290 + 1u;
    uint _304 = _290 + 2u;
    precise float _311 = _243 * cbObjMatrix._m0[_290].x;
    precise float _312 = _243 * cbObjMatrix._m0[_297].x;
    precise float _313 = _243 * cbObjMatrix._m0[_304].x;
    precise float _314 = _243 * cbObjMatrix._m0[_290].y;
    precise float _315 = _243 * cbObjMatrix._m0[_297].y;
    precise float _316 = _243 * cbObjMatrix._m0[_304].y;
    precise float _317 = _243 * cbObjMatrix._m0[_290].z;
    precise float _318 = _243 * cbObjMatrix._m0[_297].z;
    precise float _319 = _243 * cbObjMatrix._m0[_304].z;
    precise float _320 = _243 * cbObjMatrix._m0[_290].w;
    precise float _321 = _243 * cbObjMatrix._m0[_297].w;
    precise float _322 = _243 * cbObjMatrix._m0[_304].w;
    precise float _323 = _276 + _311;
    precise float _324 = _277 + _312;
    precise float _325 = _278 + _313;
    precise float _326 = _279 + _314;
    precise float _327 = _280 + _315;
    precise float _328 = _281 + _316;
    precise float _329 = _282 + _317;
    precise float _330 = _283 + _318;
    precise float _331 = _284 + _319;
    precise float _332 = _285 + _320;
    precise float _333 = _286 + _321;
    precise float _334 = _287 + _322;
    uint _337 = (_253 + uint(float(BLENDINDICES.z))) * 3u;
    uint _344 = _337 + 1u;
    uint _351 = _337 + 2u;
    precise float _358 = _244 * cbObjMatrix._m0[_337].x;
    precise float _359 = _244 * cbObjMatrix._m0[_344].x;
    precise float _360 = _244 * cbObjMatrix._m0[_351].x;
    precise float _361 = _244 * cbObjMatrix._m0[_337].y;
    precise float _362 = _244 * cbObjMatrix._m0[_344].y;
    precise float _363 = _244 * cbObjMatrix._m0[_351].y;
    precise float _364 = _244 * cbObjMatrix._m0[_337].z;
    precise float _365 = _244 * cbObjMatrix._m0[_344].z;
    precise float _366 = _244 * cbObjMatrix._m0[_351].z;
    precise float _367 = _244 * cbObjMatrix._m0[_337].w;
    precise float _368 = _244 * cbObjMatrix._m0[_344].w;
    precise float _369 = _244 * cbObjMatrix._m0[_351].w;
    precise float _370 = _323 + _358;
    precise float _371 = _324 + _359;
    precise float _372 = _325 + _360;
    precise float _373 = _326 + _361;
    precise float _374 = _327 + _362;
    precise float _375 = _328 + _363;
    precise float _376 = _329 + _364;
    precise float _377 = _330 + _365;
    precise float _378 = _331 + _366;
    precise float _379 = _332 + _367;
    precise float _380 = _333 + _368;
    precise float _381 = _334 + _369;
    uint _384 = (_253 + uint(float(BLENDINDICES.w))) * 3u;
    uint _391 = _384 + 1u;
    uint _398 = _384 + 2u;
    precise float _405 = _245 * cbObjMatrix._m0[_384].x;
    precise float _406 = _245 * cbObjMatrix._m0[_391].x;
    precise float _407 = _245 * cbObjMatrix._m0[_398].x;
    precise float _408 = _245 * cbObjMatrix._m0[_384].y;
    precise float _409 = _245 * cbObjMatrix._m0[_391].y;
    precise float _410 = _245 * cbObjMatrix._m0[_398].y;
    precise float _411 = _245 * cbObjMatrix._m0[_384].z;
    precise float _412 = _245 * cbObjMatrix._m0[_391].z;
    precise float _413 = _245 * cbObjMatrix._m0[_398].z;
    precise float _414 = _245 * cbObjMatrix._m0[_384].w;
    precise float _415 = _245 * cbObjMatrix._m0[_391].w;
    precise float _416 = _245 * cbObjMatrix._m0[_398].w;
    precise float _417 = _370 + _405;
    precise float _418 = _371 + _406;
    precise float _419 = _372 + _407;
    precise float _420 = _373 + _408;
    precise float _421 = _374 + _409;
    precise float _422 = _375 + _410;
    precise float _423 = _376 + _411;
    precise float _424 = _377 + _412;
    precise float _425 = _378 + _413;
    precise float _426 = _379 + _414;
    precise float _427 = _380 + _415;
    precise float _428 = _381 + _416;
    precise float _429 = POSITION.x * _417;
    precise float _430 = POSITION.y * _420;
    precise float _431 = _430 + _429;
    precise float _432 = POSITION.z * _423;
    precise float _433 = _432 + _431;
    precise float _434 = 1.0 * _426;
    precise float _435 = _434 + _433;
    precise float _436 = POSITION.x * _418;
    precise float _437 = POSITION.y * _421;
    precise float _438 = _437 + _436;
    precise float _439 = POSITION.z * _424;
    precise float _440 = _439 + _438;
    precise float _441 = 1.0 * _427;
    precise float _442 = _441 + _440;
    precise float _443 = POSITION.x * _419;
    precise float _444 = POSITION.y * _422;
    precise float _445 = _444 + _443;
    precise float _446 = POSITION.z * _425;
    precise float _447 = _446 + _445;
    precise float _448 = 1.0 * _428;
    precise float _449 = _448 + _447;
    float _455 = cbSceneParam._m0[3u].x - _435;
    float _456 = cbSceneParam._m0[3u].y - _442;
    float _457 = cbSceneParam._m0[3u].z - _449;
    precise float _483 = _435 - cbSceneParam._m0[3u].x;
    precise float _484 = _442 - cbSceneParam._m0[3u].y;
    precise float _485 = _449 - cbSceneParam._m0[3u].z;
    precise float _513 = _483 * cbSceneParam._m0[24u].x;
    precise float _514 = _484 * cbSceneParam._m0[24u].y;
    precise float _515 = _514 + _513;
    precise float _516 = _485 * cbSceneParam._m0[24u].z;
    precise float _517 = _516 + _515;
    precise float _518 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _519 = _518 + _517;
    precise float _520 = _483 * cbSceneParam._m0[25u].x;
    precise float _521 = _484 * cbSceneParam._m0[25u].y;
    precise float _522 = _521 + _520;
    precise float _523 = _485 * cbSceneParam._m0[25u].z;
    precise float _524 = _523 + _522;
    precise float _525 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _526 = _525 + _524;
    precise float _527 = _483 * cbSceneParam._m0[26u].x;
    precise float _528 = _484 * cbSceneParam._m0[26u].y;
    precise float _529 = _528 + _527;
    precise float _530 = _485 * cbSceneParam._m0[26u].z;
    precise float _531 = _530 + _529;
    precise float _532 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _533 = _532 + _531;
    precise float _534 = _483 * cbSceneParam._m0[27u].x;
    precise float _535 = _484 * cbSceneParam._m0[27u].y;
    precise float _536 = _535 + _534;
    precise float _537 = _485 * cbSceneParam._m0[27u].z;
    precise float _538 = _537 + _536;
    precise float _539 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _540 = _539 + _538;
    gl_Position.x = _519;
    gl_Position.y = _526;
    gl_Position.z = _533;
    gl_Position.w = _540;
    NORMAL_1.x = fma(_210, _423, fma(_209, _420, _417 * _207));
    NORMAL_1.y = fma(_210, _424, fma(_209, _421, _418 * _207));
    NORMAL_1.z = fma(_210, _425, fma(_209, _422, _419 * _207));
    NORMAL_1.w = float(_234);
    TANGENT_1.x = fma(_221, _423, fma(_220, _420, _417 * _219));
    TANGENT_1.y = fma(_221, _424, fma(_220, _421, _418 * _219));
    TANGENT_1.z = fma(_221, _425, fma(_220, _422, _419 * _219));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = ((float(int(uint(TEXCOORD.z))) * 0.00048828125) * cbTexScroll._m0[1u].x) + cbTexScroll._m0[1u].z;
    TEXCOORD_2.w = ((float(int(uint(TEXCOORD.w))) * 0.00048828125) * cbTexScroll._m0[1u].y) + cbTexScroll._m0[1u].w;
    TEXCOORD_4.x = ((float(int(uint(TEXCOORD_1.x))) * 0.00048828125) * cbTexScroll._m0[3u].x) + cbTexScroll._m0[3u].z;
    TEXCOORD_4.y = ((float(int(uint(TEXCOORD_1.y))) * 0.00048828125) * cbTexScroll._m0[3u].y) + cbTexScroll._m0[3u].w;
    TEXCOORD_4.z = COLOR_1.x;
    TEXCOORD_12 = sqrt(((_455 * _455) + (_456 * _456)) + (_457 * _457));
    gl_ClipDistance[0u] = dot(vec4(_519, _526, _533, _540), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_519, _526, _533, _540), vec4(cbInstanceData._m0[_247 + 3u]));
}


