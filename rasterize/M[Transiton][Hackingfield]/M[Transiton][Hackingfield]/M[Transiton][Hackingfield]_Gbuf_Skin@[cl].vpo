#version 460

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec4 TEXCOORD;
layout(location = 7) in ivec2 TEXCOORD_1;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec4 TEXCOORD_2;
layout(location = 4) out vec3 TEXCOORD_4;
layout(location = 4, component = 3) out float TEXCOORD_12;

void main()
{
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_2.x = 0.0;
    TEXCOORD_2.y = 0.0;
    TEXCOORD_2.z = 0.0;
    TEXCOORD_2.w = 0.0;
    TEXCOORD_4.x = 0.0;
    TEXCOORD_4.y = 0.0;
    TEXCOORD_4.z = 0.0;
    TEXCOORD_12 = 0.0;
    float _202 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _204 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _205 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _214 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _215 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _216 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _226 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + (uint(gl_InstanceIndex) - uint(gl_BaseInstance));
    uvec4 _228 = texelFetch(g_InstanceIndexBuffer, int(_226));
    uint _229 = _228.x;
    precise float _230 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _235 = isnan(_230) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _230 : max(0.001000000047497451305389404296875, _230));
    precise float _237 = BLENDWEIGHT.x / _235;
    precise float _238 = BLENDWEIGHT.y / _235;
    precise float _239 = BLENDWEIGHT.z / _235;
    precise float _240 = BLENDWEIGHT.w / _235;
    uvec4 _247 = floatBitsToUint(cbInstanceData._m0[(_229 * 13u) + 4u]);
    uint _248 = _247.x;
    uint _250 = (_248 + uint(float(BLENDINDICES.x))) * 3u;
    uint _257 = _250 + 1u;
    uint _264 = _250 + 2u;
    precise float _271 = _237 * cbObjMatrix._m0[_250].x;
    precise float _272 = _237 * cbObjMatrix._m0[_257].x;
    precise float _273 = _237 * cbObjMatrix._m0[_264].x;
    precise float _274 = _237 * cbObjMatrix._m0[_250].y;
    precise float _275 = _237 * cbObjMatrix._m0[_257].y;
    precise float _276 = _237 * cbObjMatrix._m0[_264].y;
    precise float _277 = _237 * cbObjMatrix._m0[_250].z;
    precise float _278 = _237 * cbObjMatrix._m0[_257].z;
    precise float _279 = _237 * cbObjMatrix._m0[_264].z;
    precise float _280 = _237 * cbObjMatrix._m0[_250].w;
    precise float _281 = _237 * cbObjMatrix._m0[_257].w;
    precise float _282 = _237 * cbObjMatrix._m0[_264].w;
    uint _285 = (_248 + uint(float(BLENDINDICES.y))) * 3u;
    uint _292 = _285 + 1u;
    uint _299 = _285 + 2u;
    precise float _306 = _238 * cbObjMatrix._m0[_285].x;
    precise float _307 = _238 * cbObjMatrix._m0[_292].x;
    precise float _308 = _238 * cbObjMatrix._m0[_299].x;
    precise float _309 = _238 * cbObjMatrix._m0[_285].y;
    precise float _310 = _238 * cbObjMatrix._m0[_292].y;
    precise float _311 = _238 * cbObjMatrix._m0[_299].y;
    precise float _312 = _238 * cbObjMatrix._m0[_285].z;
    precise float _313 = _238 * cbObjMatrix._m0[_292].z;
    precise float _314 = _238 * cbObjMatrix._m0[_299].z;
    precise float _315 = _238 * cbObjMatrix._m0[_285].w;
    precise float _316 = _238 * cbObjMatrix._m0[_292].w;
    precise float _317 = _238 * cbObjMatrix._m0[_299].w;
    precise float _318 = _271 + _306;
    precise float _319 = _272 + _307;
    precise float _320 = _273 + _308;
    precise float _321 = _274 + _309;
    precise float _322 = _275 + _310;
    precise float _323 = _276 + _311;
    precise float _324 = _277 + _312;
    precise float _325 = _278 + _313;
    precise float _326 = _279 + _314;
    precise float _327 = _280 + _315;
    precise float _328 = _281 + _316;
    precise float _329 = _282 + _317;
    uint _332 = (_248 + uint(float(BLENDINDICES.z))) * 3u;
    uint _339 = _332 + 1u;
    uint _346 = _332 + 2u;
    precise float _353 = _239 * cbObjMatrix._m0[_332].x;
    precise float _354 = _239 * cbObjMatrix._m0[_339].x;
    precise float _355 = _239 * cbObjMatrix._m0[_346].x;
    precise float _356 = _239 * cbObjMatrix._m0[_332].y;
    precise float _357 = _239 * cbObjMatrix._m0[_339].y;
    precise float _358 = _239 * cbObjMatrix._m0[_346].y;
    precise float _359 = _239 * cbObjMatrix._m0[_332].z;
    precise float _360 = _239 * cbObjMatrix._m0[_339].z;
    precise float _361 = _239 * cbObjMatrix._m0[_346].z;
    precise float _362 = _239 * cbObjMatrix._m0[_332].w;
    precise float _363 = _239 * cbObjMatrix._m0[_339].w;
    precise float _364 = _239 * cbObjMatrix._m0[_346].w;
    precise float _365 = _318 + _353;
    precise float _366 = _319 + _354;
    precise float _367 = _320 + _355;
    precise float _368 = _321 + _356;
    precise float _369 = _322 + _357;
    precise float _370 = _323 + _358;
    precise float _371 = _324 + _359;
    precise float _372 = _325 + _360;
    precise float _373 = _326 + _361;
    precise float _374 = _327 + _362;
    precise float _375 = _328 + _363;
    precise float _376 = _329 + _364;
    uint _379 = (_248 + uint(float(BLENDINDICES.w))) * 3u;
    uint _386 = _379 + 1u;
    uint _393 = _379 + 2u;
    precise float _400 = _240 * cbObjMatrix._m0[_379].x;
    precise float _401 = _240 * cbObjMatrix._m0[_386].x;
    precise float _402 = _240 * cbObjMatrix._m0[_393].x;
    precise float _403 = _240 * cbObjMatrix._m0[_379].y;
    precise float _404 = _240 * cbObjMatrix._m0[_386].y;
    precise float _405 = _240 * cbObjMatrix._m0[_393].y;
    precise float _406 = _240 * cbObjMatrix._m0[_379].z;
    precise float _407 = _240 * cbObjMatrix._m0[_386].z;
    precise float _408 = _240 * cbObjMatrix._m0[_393].z;
    precise float _409 = _240 * cbObjMatrix._m0[_379].w;
    precise float _410 = _240 * cbObjMatrix._m0[_386].w;
    precise float _411 = _240 * cbObjMatrix._m0[_393].w;
    precise float _412 = _365 + _400;
    precise float _413 = _366 + _401;
    precise float _414 = _367 + _402;
    precise float _415 = _368 + _403;
    precise float _416 = _369 + _404;
    precise float _417 = _370 + _405;
    precise float _418 = _371 + _406;
    precise float _419 = _372 + _407;
    precise float _420 = _373 + _408;
    precise float _421 = _374 + _409;
    precise float _422 = _375 + _410;
    precise float _423 = _376 + _411;
    precise float _424 = POSITION.x * _412;
    precise float _425 = POSITION.y * _415;
    precise float _426 = _425 + _424;
    precise float _427 = POSITION.z * _418;
    precise float _428 = _427 + _426;
    precise float _429 = 1.0 * _421;
    precise float _430 = _429 + _428;
    precise float _431 = POSITION.x * _413;
    precise float _432 = POSITION.y * _416;
    precise float _433 = _432 + _431;
    precise float _434 = POSITION.z * _419;
    precise float _435 = _434 + _433;
    precise float _436 = 1.0 * _422;
    precise float _437 = _436 + _435;
    precise float _438 = POSITION.x * _414;
    precise float _439 = POSITION.y * _417;
    precise float _440 = _439 + _438;
    precise float _441 = POSITION.z * _420;
    precise float _442 = _441 + _440;
    precise float _443 = 1.0 * _423;
    precise float _444 = _443 + _442;
    float _450 = cbSceneParam._m0[3u].x - _430;
    float _451 = cbSceneParam._m0[3u].y - _437;
    float _452 = cbSceneParam._m0[3u].z - _444;
    precise float _478 = _430 - cbSceneParam._m0[3u].x;
    precise float _479 = _437 - cbSceneParam._m0[3u].y;
    precise float _480 = _444 - cbSceneParam._m0[3u].z;
    precise float _508 = _478 * cbSceneParam._m0[24u].x;
    precise float _509 = _479 * cbSceneParam._m0[24u].y;
    precise float _510 = _509 + _508;
    precise float _511 = _480 * cbSceneParam._m0[24u].z;
    precise float _512 = _511 + _510;
    precise float _513 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _514 = _513 + _512;
    precise float _515 = _478 * cbSceneParam._m0[25u].x;
    precise float _516 = _479 * cbSceneParam._m0[25u].y;
    precise float _517 = _516 + _515;
    precise float _518 = _480 * cbSceneParam._m0[25u].z;
    precise float _519 = _518 + _517;
    precise float _520 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _521 = _520 + _519;
    precise float _522 = _478 * cbSceneParam._m0[26u].x;
    precise float _523 = _479 * cbSceneParam._m0[26u].y;
    precise float _524 = _523 + _522;
    precise float _525 = _480 * cbSceneParam._m0[26u].z;
    precise float _526 = _525 + _524;
    precise float _527 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _528 = _527 + _526;
    precise float _529 = _478 * cbSceneParam._m0[27u].x;
    precise float _530 = _479 * cbSceneParam._m0[27u].y;
    precise float _531 = _530 + _529;
    precise float _532 = _480 * cbSceneParam._m0[27u].z;
    precise float _533 = _532 + _531;
    precise float _534 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _535 = _534 + _533;
    gl_Position.x = _514;
    gl_Position.y = _521;
    gl_Position.z = _528;
    gl_Position.w = _535;
    NORMAL_1.x = fma(_205, _418, fma(_204, _415, _412 * _202));
    NORMAL_1.y = fma(_205, _419, fma(_204, _416, _413 * _202));
    NORMAL_1.z = fma(_205, _420, fma(_204, _417, _414 * _202));
    NORMAL_1.w = float(_229);
    TANGENT_1.x = fma(_216, _418, fma(_215, _415, _412 * _214));
    TANGENT_1.y = fma(_216, _419, fma(_215, _416, _413 * _214));
    TANGENT_1.z = fma(_216, _420, fma(_215, _417, _414 * _214));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_2.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_2.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_2.z = ((float(int(uint(TEXCOORD.z))) * 0.00048828125) * cbTexScroll._m0[1u].x) + cbTexScroll._m0[1u].z;
    TEXCOORD_2.w = ((float(int(uint(TEXCOORD.w))) * 0.00048828125) * cbTexScroll._m0[1u].y) + cbTexScroll._m0[1u].w;
    TEXCOORD_4.x = ((float(int(uint(TEXCOORD_1.x))) * 0.00048828125) * cbTexScroll._m0[3u].x) + cbTexScroll._m0[3u].z;
    TEXCOORD_4.y = ((float(int(uint(TEXCOORD_1.y))) * 0.00048828125) * cbTexScroll._m0[3u].y) + cbTexScroll._m0[3u].w;
    TEXCOORD_4.z = COLOR_1.x;
    TEXCOORD_12 = sqrt(((_450 * _450) + (_451 * _451)) + (_452 * _452));
}


