#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _708;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _165 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _166 = _165 * NORMAL.x;
    float _167 = _165 * NORMAL.y;
    float _168 = _165 * NORMAL.z;
    float _173;
    float _174;
    float _175;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _173 = (-0.0) - _166;
        _174 = (-0.0) - _167;
        _175 = (-0.0) - _168;
    }
    else
    {
        _173 = _166;
        _174 = _167;
        _175 = _168;
    }
    vec4 _195 = texture(sampler2D(M_A_M0_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _201 = _195.x * cbMtdParam._m0[9u].x;
    float _202 = _195.y * cbMtdParam._m0[9u].y;
    float _203 = _195.z * cbMtdParam._m0[9u].z;
    float _207 = inversesqrt(dot(vec3(_173, _174, _175), vec3(_173, _174, _175)));
    float _208 = _207 * _173;
    float _209 = _207 * _174;
    float _210 = _207 * _175;
    float _3102 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _3113 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _3124 = isnan(0.0) ? _203 : (isnan(_203) ? 0.0 : max(_203, 0.0));
    float _230 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _272);
    float _283 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _272);
    float _284 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _272);
    float _288 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _289 = _282 * _288;
    float _290 = _283 * _288;
    float _291 = _284 * _288;
    float _297 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _298 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _319 = fma(_210, cbSceneParam._m0[5u].z, fma(_209, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _208));
    float _322 = fma(_210, cbSceneParam._m0[6u].z, fma(_209, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _208));
    float _325 = fma(_210, cbSceneParam._m0[7u].z, fma(_209, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _208));
    uint _338 = uint(roundEven(NORMAL.w)) * 13u;
    uint _341 = (_338 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _347 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3102 : (isnan(_3102) ? 1.0 : min(_3102, 1.0)))) * cbInstanceData._m0[_341].x;
    float _348 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3113 : (isnan(_3113) ? 1.0 : min(_3113, 1.0)))) * cbInstanceData._m0[_341].y;
    float _349 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3124 : (isnan(_3124) ? 1.0 : min(_3124, 1.0)))) * cbInstanceData._m0[_341].z;
    float _3135 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _350 = isnan(1.0) ? _3135 : (isnan(_3135) ? 1.0 : min(_3135, 1.0));
    float _3146 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _351 = isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0));
    float _3157 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _352 = isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0));
    vec4 _361 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _297, cbSceneParam._m0[86u].y * _298));
    float _364 = _361.x * TEXCOORD.z;
    float _365 = dot(vec3(_208, _209, _210), vec3(_289, _290, _291));
    float _368 = _365 * 2.0;
    float _373 = (_368 * _208) - _289;
    float _374 = (_368 * _209) - _290;
    float _375 = (_368 * _210) - _291;
    float _397 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _401 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _405 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _707;
    float _709;
    float _710;
    float _711;
    float _712;
    float _713;
    float _714;
    float _715;
    float _716;
    float _717;
    float _718;
    float _719;
    float _720;
    float _721;
    float _722;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _432 = fma(_405, cbModelParam._m0[26u].z, fma(_401, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _397));
        float _436 = fma(_405, cbModelParam._m0[27u].z, fma(_401, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _397));
        float _440 = fma(_405, cbModelParam._m0[28u].z, fma(_401, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _397));
        float _465 = _397 + _208;
        float _466 = _401 + _209;
        float _467 = _405 + _210;
        float _477 = fma(_467, cbModelParam._m0[26u].z, fma(_466, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _465)) - _432;
        float _478 = fma(_467, cbModelParam._m0[27u].z, fma(_466, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _465)) - _436;
        float _479 = fma(_467, cbModelParam._m0[28u].z, fma(_466, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _465)) - _440;
        float _483 = inversesqrt(dot(vec3(_477, _478, _479), vec3(_477, _478, _479)));
        float _496 = ((_483 * _477) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_432 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _497 = ((_483 * _478) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_436 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _498 = ((_483 * _479) / cbModelParam._m0[34u].z) + ((((((_440 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _501 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_496, _497, _498), 0.0);
        vec4 _508 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_496, _497, _498), 0.0);
        vec4 _515 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_496, _497, _498), 0.0);
        vec4 _522 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_496, _497, _498), 0.0);
        float _535 = exp2((_501.w + (-0.5)) * 20.0) * 2.0;
        float _536 = _535 * (_501.x + (-0.5));
        float _537 = _535 * (_501.y + (-0.5));
        float _538 = _535 * (_501.z + (-0.5));
        float _545 = exp2((_508.w + (-0.5)) * 20.0) * 2.0;
        float _546 = _545 * (_508.x + (-0.5));
        float _547 = _545 * (_508.y + (-0.5));
        float _548 = _545 * (_508.z + (-0.5));
        float _555 = exp2((_515.w + (-0.5)) * 20.0) * 2.0;
        float _556 = _555 * (_515.x + (-0.5));
        float _557 = _555 * (_515.y + (-0.5));
        float _558 = _555 * (_515.z + (-0.5));
        float _565 = exp2((_522.w + (-0.5)) * 20.0) * 2.0;
        float _566 = _565 * (_522.x + (-0.5));
        float _567 = _565 * (_522.y + (-0.5));
        float _568 = _565 * (_522.z + (-0.5));
        float _569 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
        float _570 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
        float _571 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
        float _572 = _536 * 0.5;
        float _573 = _546 * 0.5;
        float _574 = _556 * 0.5;
        float _575 = dot(vec3(_572, _573, _574), vec3(_572, _573, _574));
        float _580 = (_575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_575);
        float _589 = (dot(vec3(_208, _209, _210), vec3(_580 * _572, _580 * _573, _580 * _574)) + 1.0) * 0.5;
        float _3183 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
        float _599 = sqrt(((_573 * _573) + (_572 * _572)) + (_574 * _574)) / (_569 + 9.9999997473787516355514526367188e-06);
        float _3194 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
        float _600 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
        float _601 = _600 * 2.0;
        float _605 = (1.0 - _600) / (_600 + 1.0);
        float _3205 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
        float _606 = isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0));
        float _615 = ((((1.0 - _606) * (_601 + 2.0)) * exp2(log2(isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0))) * (_601 + 1.0))) + _606) * _569;
        float _616 = _537 * 0.5;
        float _617 = _547 * 0.5;
        float _618 = _557 * 0.5;
        float _619 = dot(vec3(_616, _617, _618), vec3(_616, _617, _618));
        float _624 = (_619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_619);
        float _632 = (dot(vec3(_208, _209, _210), vec3(_624 * _616, _624 * _617, _624 * _618)) + 1.0) * 0.5;
        float _3216 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
        float _641 = sqrt(((_617 * _617) + (_616 * _616)) + (_618 * _618)) / (_570 + 9.9999997473787516355514526367188e-06);
        float _3227 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _642 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
        float _643 = _642 * 2.0;
        float _647 = (1.0 - _642) / (_642 + 1.0);
        float _3238 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        float _648 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
        float _657 = ((((1.0 - _648) * (_643 + 2.0)) * exp2(log2(isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0))) * (_643 + 1.0))) + _648) * _570;
        float _658 = _538 * 0.5;
        float _659 = _548 * 0.5;
        float _660 = _558 * 0.5;
        float _661 = dot(vec3(_658, _659, _660), vec3(_658, _659, _660));
        float _666 = (_661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_661);
        float _674 = (dot(vec3(_208, _209, _210), vec3(_666 * _658, _666 * _659, _666 * _660)) + 1.0) * 0.5;
        float _3249 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _683 = sqrt(((_659 * _659) + (_658 * _658)) + (_660 * _660)) / (_571 + 9.9999997473787516355514526367188e-06);
        float _3260 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _684 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
        float _685 = _684 * 2.0;
        float _689 = (1.0 - _684) / (_684 + 1.0);
        float _3271 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _690 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
        float _699 = ((((1.0 - _690) * (_685 + 2.0)) * exp2(log2(isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0))) * (_685 + 1.0))) + _690) * _571;
        _707 = _538;
        _709 = _537;
        _710 = _536;
        _711 = _548;
        _712 = _547;
        _713 = _546;
        _714 = _558;
        _715 = _557;
        _716 = _556;
        _717 = _571;
        _718 = _570;
        _719 = _569;
        _720 = cbModelParam._m0[36u].z * (isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0)));
        _721 = cbModelParam._m0[36u].z * (isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0)));
        _722 = cbModelParam._m0[36u].z * (isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0)));
    }
    else
    {
        _707 = _708;
        _709 = _708;
        _710 = _708;
        _711 = _708;
        _712 = _708;
        _713 = _708;
        _714 = _708;
        _715 = _708;
        _716 = _708;
        _717 = _708;
        _718 = _708;
        _719 = _708;
        _720 = 0.0;
        _721 = 0.0;
        _722 = 0.0;
    }
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _748 = fma(_405, cbModelParam._m0[30u].z, fma(_401, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _397));
        float _752 = fma(_405, cbModelParam._m0[31u].z, fma(_401, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _397));
        float _756 = fma(_405, cbModelParam._m0[32u].z, fma(_401, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _397));
        float _779 = _397 + _208;
        float _780 = _401 + _209;
        float _781 = _405 + _210;
        float _791 = fma(_781, cbModelParam._m0[30u].z, fma(_780, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _779)) - _748;
        float _792 = fma(_781, cbModelParam._m0[31u].z, fma(_780, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _779)) - _752;
        float _793 = fma(_781, cbModelParam._m0[32u].z, fma(_780, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _779)) - _756;
        float _797 = inversesqrt(dot(vec3(_791, _792, _793), vec3(_791, _792, _793)));
        float _810 = ((_797 * _791) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_748 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _811 = ((_797 * _792) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_752 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _812 = ((_797 * _793) / cbModelParam._m0[35u].z) + ((((((_756 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        float _847 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_814.x + (-0.5));
        float _849 = _847 * (_814.y + (-0.5));
        float _850 = _847 * (_814.z + (-0.5));
        float _857 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_821.x + (-0.5));
        float _859 = _857 * (_821.y + (-0.5));
        float _860 = _857 * (_821.z + (-0.5));
        float _867 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_828.x + (-0.5));
        float _869 = _867 * (_828.y + (-0.5));
        float _870 = _867 * (_828.z + (-0.5));
        float _877 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_835.x + (-0.5));
        float _879 = _877 * (_835.y + (-0.5));
        float _880 = _877 * (_835.z + (-0.5));
        float _881 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _882 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = _848 * 0.5;
        float _885 = _858 * 0.5;
        float _886 = _868 * 0.5;
        float _887 = dot(vec3(_884, _885, _886), vec3(_884, _885, _886));
        float _892 = (_887 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_887);
        float _900 = (dot(vec3(_208, _209, _210), vec3(_892 * _884, _892 * _885, _892 * _886)) + 1.0) * 0.5;
        float _3312 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _909 = sqrt(((_885 * _885) + (_884 * _884)) + (_886 * _886)) / (_881 + 9.9999997473787516355514526367188e-06);
        float _3323 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
        float _911 = _910 * 2.0;
        float _915 = (1.0 - _910) / (_910 + 1.0);
        float _3334 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
        float _925 = ((((1.0 - _916) * (_911 + 2.0)) * exp2(log2(isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0))) * (_911 + 1.0))) + _916) * _881;
        float _926 = _849 * 0.5;
        float _927 = _859 * 0.5;
        float _928 = _869 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _942 = (dot(vec3(_208, _209, _210), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3345 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _951 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_882 + 9.9999997473787516355514526367188e-06);
        float _3356 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3367 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0))) * (_953 + 1.0))) + _958) * _882;
        float _968 = _850 * 0.5;
        float _969 = _860 * 0.5;
        float _970 = _870 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_208, _209, _210), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3378 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _3389 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3400 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))) * (_995 + 1.0))) + _1000) * _883;
        _1017 = _850;
        _1018 = _849;
        _1019 = _848;
        _1020 = _860;
        _1021 = _859;
        _1022 = _858;
        _1023 = _870;
        _1024 = _869;
        _1025 = _868;
        _1026 = _883;
        _1027 = _882;
        _1028 = _881;
        _1029 = cbModelParam._m0[36u].w * (isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)));
        _1030 = cbModelParam._m0[36u].w * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1031 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
    }
    else
    {
        _1017 = _708;
        _1018 = _708;
        _1019 = _708;
        _1020 = _708;
        _1021 = _708;
        _1022 = _708;
        _1023 = _708;
        _1024 = _708;
        _1025 = _708;
        _1026 = _708;
        _1027 = _708;
        _1028 = _708;
        _1029 = 0.0;
        _1030 = 0.0;
        _1031 = 0.0;
    }
    float _1041 = (cbModelParam._m0[1u].x * (_1029 - _720)) + _720;
    float _1042 = (cbModelParam._m0[1u].x * (_1030 - _721)) + _721;
    float _1043 = (cbModelParam._m0[1u].x * (_1031 - _722)) + _722;
    float _1064 = fma(_1043, cbSceneParam._m0[89u].z, fma(_1042, cbSceneParam._m0[89u].y, _1041 * cbSceneParam._m0[89u].x));
    float _1067 = fma(_1043, cbSceneParam._m0[90u].z, fma(_1042, cbSceneParam._m0[90u].y, _1041 * cbSceneParam._m0[90u].x));
    float _1070 = fma(_1043, cbSceneParam._m0[91u].z, fma(_1042, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1041));
    float _1085 = _373 * 0.5;
    float _1086 = _374 * 0.5;
    float _1087 = _375 * 0.5;
    float _1088 = dot(vec4(_1085, _1086, _1087, 1.0), vec4(_1019, _1022, _1025, _1028));
    float _1091 = dot(vec4(_1085, _1086, _1087, 1.0), vec4(_1018, _1021, _1024, _1027));
    float _1094 = dot(vec4(_1085, _1086, _1087, 1.0), vec4(_1017, _1020, _1023, _1026));
    float _1128;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1101 = dot(vec4(_1085, _1086, _1087, 1.0), vec4(_707, _711, _714, _717));
        float _1105 = dot(vec4(_1085, _1086, _1087, 1.0), vec4(_709, _712, _715, _718));
        float _1109 = dot(vec4(_1085, _1086, _1087, 1.0), vec4(_710, _713, _716, _719));
        float _1116 = dot(vec4(cbModelParam._m0[39u]), vec4(_1085, _1086, _1087, 1.0));
        _1128 = dot(vec3(isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)), isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)), isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1116) ? 0.0 : (isnan(0.0) ? _1116 : max(0.0, _1116))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1128 = 1.0;
    }
    float _1139;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1130 = dot(vec4(cbModelParam._m0[40u]), vec4(_1085, _1086, _1087, 1.0));
        _1139 = dot(vec3(isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)), isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)), isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1130) ? 0.0 : (isnan(0.0) ? _1130 : max(0.0, _1130))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1139 = 1.0;
    }
    float _1143 = (_1139 * cbModelParam._m0[1u].x) + (_1128 * (1.0 - cbModelParam._m0[1u].x));
    float _1152 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1234;
    float _1236;
    float _1238;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1201 = fma(_405, cbModelParam._m0[13u].z, fma(_401, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _397)) + cbModelParam._m0[13u].w;
        float _1205 = fma(_405, cbModelParam._m0[14u].z, fma(_401, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _397)) + cbModelParam._m0[14u].w;
        float _1209 = fma(_405, cbModelParam._m0[15u].z, fma(_401, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _397)) + cbModelParam._m0[15u].w;
        float _1212 = fma(_375, cbModelParam._m0[13u].z, fma(_374, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _373));
        float _1215 = fma(_375, cbModelParam._m0[14u].z, fma(_374, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _373));
        float _1218 = fma(_375, cbModelParam._m0[15u].z, fma(_374, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _373));
        float _1244;
        if (_1212 > 0.0)
        {
            _1244 = abs((1.0 - _1201) / _1212);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1212 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1201 + 1.0) / _1212);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1244 = frontier_phi_16_14_ladder;
        }
        float _1419;
        if (_1215 > 0.0)
        {
            _1419 = abs((1.0 - _1205) / _1215);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1215 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1205 + 1.0) / _1215);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1419 = frontier_phi_25_21_ladder;
        }
        float _1716;
        if (_1218 > 0.0)
        {
            _1716 = abs((1.0 - _1209) / _1218);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1218 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1209 + 1.0) / _1218);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1716 = frontier_phi_37_32_ladder;
        }
        float _1718 = isnan(_1419) ? _1244 : (isnan(_1244) ? _1419 : min(_1244, _1419));
        float _1719 = isnan(_1716) ? _1718 : (isnan(_1718) ? _1716 : min(_1718, _1716));
        float _1723 = (_1719 * _1212) + _1201;
        float _1724 = (_1719 * _1215) + _1205;
        float _1725 = (_1719 * _1218) + _1209;
        float _1726 = _1719 * 9.9999997473787516355514526367188e-05;
        float _1728 = (-1.0) - _1726;
        float _1730 = _1726 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1725 > _1730) || ((_1725 < _1728) || ((_1724 > _1730) || ((_1724 < _1728) || ((_1723 < _1728) || (_1723 > _1730))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1870 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1725, cbModelParam._m0[9u].z, fma(_1724, cbModelParam._m0[9u].y, _1723 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1725, cbModelParam._m0[10u].z, fma(_1724, cbModelParam._m0[10u].y, _1723 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1725, cbModelParam._m0[11u].z, fma(_1724, cbModelParam._m0[11u].y, _1723 * cbModelParam._m0[11u].x))), _1152);
            frontier_phi_15_37_ladder = _1870.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1870.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1870.z * cbModelParam._m0[1u].y;
        }
        _1234 = frontier_phi_15_37_ladder_1;
        _1236 = frontier_phi_15_37_ladder;
        _1238 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1222 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_373, _374, _375), _1152);
        _1234 = _1222.x * cbModelParam._m0[1u].y;
        _1236 = _1222.y * cbModelParam._m0[1u].y;
        _1238 = _1222.z * cbModelParam._m0[1u].y;
    }
    float _1241 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1334;
    float _1336;
    float _1338;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1298 = fma(_405, cbModelParam._m0[21u].z, fma(_401, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _397)) + cbModelParam._m0[21u].w;
        float _1302 = fma(_405, cbModelParam._m0[22u].z, fma(_401, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _397)) + cbModelParam._m0[22u].w;
        float _1306 = fma(_405, cbModelParam._m0[23u].z, fma(_401, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _397)) + cbModelParam._m0[23u].w;
        float _1309 = fma(_375, cbModelParam._m0[21u].z, fma(_374, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _373));
        float _1312 = fma(_375, cbModelParam._m0[22u].z, fma(_374, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _373));
        float _1315 = fma(_375, cbModelParam._m0[23u].z, fma(_374, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _373));
        float _1424;
        if (_1309 > 0.0)
        {
            _1424 = abs((1.0 - _1298) / _1309);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1309 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1298 + 1.0) / _1309);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1424 = frontier_phi_27_23_ladder;
        }
        float _1743;
        if (_1312 > 0.0)
        {
            _1743 = abs((1.0 - _1302) / _1312);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1312 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1302 + 1.0) / _1312);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1743 = frontier_phi_39_34_ladder;
        }
        float _2016;
        if (_1315 > 0.0)
        {
            _2016 = abs((1.0 - _1306) / _1315);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1315 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1306 + 1.0) / _1315);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2016 = frontier_phi_49_46_ladder;
        }
        float _2018 = isnan(_1743) ? _1424 : (isnan(_1424) ? _1743 : min(_1424, _1743));
        float _2019 = isnan(_2016) ? _2018 : (isnan(_2018) ? _2016 : min(_2018, _2016));
        float _2023 = (_2019 * _1309) + _1298;
        float _2024 = (_2019 * _1312) + _1302;
        float _2025 = (_2019 * _1315) + _1306;
        float _2026 = _2019 * 9.9999997473787516355514526367188e-05;
        float _2027 = (-1.0) - _2026;
        float _2029 = _2026 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2025 > _2029) || ((_2025 < _2027) || ((_2024 > _2029) || ((_2024 < _2027) || ((_2023 < _2027) || (_2023 > _2029))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2116 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2025, cbModelParam._m0[17u].z, fma(_2024, cbModelParam._m0[17u].y, _2023 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2025, cbModelParam._m0[18u].z, fma(_2024, cbModelParam._m0[18u].y, _2023 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2025, cbModelParam._m0[19u].z, fma(_2024, cbModelParam._m0[19u].y, _2023 * cbModelParam._m0[19u].x))), _1241);
            frontier_phi_24_49_ladder = _2116.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2116.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2116.x * cbModelParam._m0[1u].z;
        }
        _1334 = frontier_phi_24_49_ladder_2;
        _1336 = frontier_phi_24_49_ladder_1;
        _1338 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1318 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_373, _374, _375), _1241);
        _1334 = _1318.x * cbModelParam._m0[1u].z;
        _1336 = _1318.y * cbModelParam._m0[1u].z;
        _1338 = _1318.z * cbModelParam._m0[1u].z;
    }
    float _1350 = _364 * 0.01200000010430812835693359375;
    float _1352 = _1350 * ((cbModelParam._m0[1u].w * (_1334 - _1234)) + _1234);
    float _1353 = _1350 * ((cbModelParam._m0[1u].w * (_1336 - _1236)) + _1236);
    float _1354 = _1350 * ((cbModelParam._m0[1u].w * (_1338 - _1238)) + _1238);
    float _1357 = fma(_1354, cbSceneParam._m0[89u].z, fma(_1353, cbSceneParam._m0[89u].y, _1352 * cbSceneParam._m0[89u].x));
    float _1360 = fma(_1354, cbSceneParam._m0[90u].z, fma(_1353, cbSceneParam._m0[90u].y, _1352 * cbSceneParam._m0[90u].x));
    float _1363 = fma(_1354, cbSceneParam._m0[91u].z, fma(_1353, cbSceneParam._m0[91u].y, _1352 * cbSceneParam._m0[91u].x));
    float _1398 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1402 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1406 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1410 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1411 = _1398 / _1410;
    float _1412 = _1402 / _1410;
    float _1413 = _1406 / _1410;
    float _1560;
    float _1561;
    float _1562;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1440 = ((uint(_1413 > cbSceneParam._m0[59u].y) + uint(_1413 > cbSceneParam._m0[59u].x)) + uint(_1413 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1441 = _1440 + 43u;
        uint _1449 = _1440 + 44u;
        uint _1457 = _1440 + 45u;
        uint _1465 = _1440 + 46u;
        float _1476 = fma(_1410, cbSceneParam._m0[_1441].w, fma(_1406, cbSceneParam._m0[_1441].z, fma(_1402, cbSceneParam._m0[_1441].y, _1398 * cbSceneParam._m0[_1441].x)));
        float _1480 = fma(_1410, cbSceneParam._m0[_1449].w, fma(_1406, cbSceneParam._m0[_1449].z, fma(_1402, cbSceneParam._m0[_1449].y, _1398 * cbSceneParam._m0[_1449].x)));
        float _1488 = fma(_1410, cbSceneParam._m0[_1465].w, fma(_1406, cbSceneParam._m0[_1465].z, fma(_1402, cbSceneParam._m0[_1465].y, _1398 * cbSceneParam._m0[_1465].x)));
        float _1493 = cbSceneParam._m0[33u].z * _1488;
        float _1495 = cbSceneParam._m0[33u].w * _1488;
        float _1498 = fma(_1410, cbSceneParam._m0[_1457].w, fma(_1406, cbSceneParam._m0[_1457].z, fma(_1402, cbSceneParam._m0[_1457].y, _1398 * cbSceneParam._m0[_1457].x))) / _1488;
        float _1546 = (cbSceneParam._m0[33u].x - sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413))) * cbSceneParam._m0[33u].y;
        float _3526 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1553 = (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1493 + _1476) / _1488, (_1495 + _1480) / _1488), _1498), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1495 + _1476) / _1488, (_1480 - _1493) / _1488), _1498), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1476 - _1493) / _1488, (_1480 - _1495) / _1488), _1498), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1476 - _1495) / _1488, (_1493 + _1480) / _1488), _1498), 0.0)).x), vec4(0.25)));
        _1560 = 1.0 - (_1553 * cbSceneParam._m0[34u].x);
        _1561 = 1.0 - (_1553 * cbSceneParam._m0[34u].y);
        _1562 = 1.0 - (_1553 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1560 = 1.0;
        _1561 = 1.0;
        _1562 = 1.0;
    }
    float _1626;
    float _1628;
    float _1630;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1614 = fma(_1410, cbSceneParam._m0[63u].w, fma(_1406, cbSceneParam._m0[63u].z, fma(_1402, cbSceneParam._m0[63u].y, _1398 * cbSceneParam._m0[63u].x)));
        float _1615 = fma(_1410, cbSceneParam._m0[60u].w, fma(_1406, cbSceneParam._m0[60u].z, fma(_1402, cbSceneParam._m0[60u].y, _1398 * cbSceneParam._m0[60u].x))) / _1614;
        float _1616 = fma(_1410, cbSceneParam._m0[61u].w, fma(_1406, cbSceneParam._m0[61u].z, fma(_1402, cbSceneParam._m0[61u].y, _1398 * cbSceneParam._m0[61u].x))) / _1614;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1615 >= cbSceneParam._m0[64u].x) && (_1616 >= cbSceneParam._m0[64u].y)) && (_1615 <= cbSceneParam._m0[64u].z)) && (_1616 <= cbSceneParam._m0[64u].w))
        {
            float _1756 = fma(_1410, cbSceneParam._m0[62u].w, fma(_1406, cbSceneParam._m0[62u].z, fma(_1402, cbSceneParam._m0[62u].y, _1398 * cbSceneParam._m0[62u].x))) / _1614;
            float _1760 = isnan(cbSceneParam._m0[41u].w) ? _1756 : (isnan(_1756) ? cbSceneParam._m0[41u].w : max(_1756, cbSceneParam._m0[41u].w));
            float _1803 = (cbSceneParam._m0[33u].x - sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413))) * cbSceneParam._m0[33u].y;
            float _3542 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
            float _1810 = (isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1615, cbSceneParam._m0[33u].w + _1616), _1760), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1615, _1616 - cbSceneParam._m0[33u].z), _1760), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1615 - cbSceneParam._m0[33u].z, _1616 - cbSceneParam._m0[33u].w), _1760), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1615 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1616), _1760), 0.0)).x), vec4(0.25)));
            float _1814 = 1.0 - (_1810 * cbSceneParam._m0[34u].x);
            float _1815 = 1.0 - (_1810 * cbSceneParam._m0[34u].y);
            float _1816 = 1.0 - (_1810 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1815) ? _1561 : (isnan(_1561) ? _1815 : min(_1561, _1815));
            frontier_phi_36_35_ladder_1 = isnan(_1816) ? _1562 : (isnan(_1562) ? _1816 : min(_1562, _1816));
            frontier_phi_36_35_ladder_2 = isnan(_1814) ? _1560 : (isnan(_1560) ? _1814 : min(_1560, _1814));
        }
        else
        {
            frontier_phi_36_35_ladder = _1561;
            frontier_phi_36_35_ladder_1 = _1562;
            frontier_phi_36_35_ladder_2 = _1560;
        }
        _1626 = frontier_phi_36_35_ladder_2;
        _1628 = frontier_phi_36_35_ladder;
        _1630 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1626 = _1560;
        _1628 = _1561;
        _1630 = _1562;
    }
    uvec4 _1635 = floatBitsToUint(cbInstanceData._m0[_338 + 5u]);
    uint _1637 = _1635.x * 14u;
    uint _1638 = _1637 + 13u;
    float _1645 = _364 + (-1.0);
    float _1651 = (cbLight._m0[_1638].x * _1645) + 1.0;
    float _1652 = (cbLight._m0[_1638].y * _1645) + 1.0;
    float _1653 = (cbLight._m0[_1638].z * _1645) + 1.0;
    float _1654 = (cbLight._m0[_1638].w * _1645) + 1.0;
    uint _1655 = _1637 + 5u;
    float _1661 = isnan(1.0) ? _1652 : (isnan(_1652) ? 1.0 : min(_1652, 1.0));
    uint _1665 = _1637 + 4u;
    float _1675 = isnan(1.0) ? _1651 : (isnan(_1651) ? 1.0 : min(_1651, 1.0));
    uint _1679 = _1637 | 1u;
    float _1690 = dot(vec3(cbLight._m0[_1637].xyz), vec3(_208, _209, _210));
    float _1693 = dot(vec3(cbLight._m0[_1679].xyz), vec3(_208, _209, _210));
    float _3578 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
    float _3589 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
    float _1698 = (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * 0.3183098733425140380859375;
    float _1700 = (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * 0.3183098733425140380859375;
    float _1707 = ((cbLight._m0[_1655].x * _1661) * _1700) + (((cbLight._m0[_1665].x * _1626) * _1675) * _1698);
    float _1708 = ((_1661 * cbLight._m0[_1655].y) * _1700) + (((cbLight._m0[_1665].y * _1628) * _1675) * _1698);
    float _1709 = ((_1661 * cbLight._m0[_1655].z) * _1700) + (((cbLight._m0[_1665].z * _1630) * _1675) * _1698);
    uvec4 _1713 = floatBitsToUint(cbLight._m0[_1637 + 12u]);
    bool _1715 = _1713.x == 0u;
    float _1817;
    float _1819;
    float _1821;
    if (_1715)
    {
        _1817 = _1707;
        _1819 = _1708;
        _1821 = _1709;
    }
    else
    {
        uint _1825 = _1637 + 6u;
        float _1841 = (dot(vec3(cbLight._m0[_1637 + 2u].xyz), vec3(_208, _209, _210)) * 0.5) + 0.5;
        float _1842 = _1841 * _1841;
        float _3600 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1843 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1844 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
        _1817 = (((cbLight._m0[_1825].x * 0.3183098733425140380859375) * _1843) * _1844) + _1707;
        _1819 = (((cbLight._m0[_1825].y * 0.3183098733425140380859375) * _1843) * _1844) + _1708;
        _1821 = (((cbLight._m0[_1825].z * 0.3183098733425140380859375) * _1843) * _1844) + _1709;
    }
    bool _1824 = _1713.y == 0u;
    float _1879;
    float _1881;
    float _1883;
    if (_1824)
    {
        _1879 = _1817;
        _1881 = _1819;
        _1883 = _1821;
    }
    else
    {
        uint _1987 = _1637 + 7u;
        float _2003 = (dot(vec3(cbLight._m0[_1637 + 3u].xyz), vec3(_208, _209, _210)) * 0.5) + 0.5;
        float _2004 = _2003 * _2003;
        float _3616 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2005 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _2006 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        _1879 = (((cbLight._m0[_1987].x * 0.3183098733425140380859375) * _2005) * _2006) + _1817;
        _1881 = (((cbLight._m0[_1987].y * 0.3183098733425140380859375) * _2005) * _2006) + _1819;
        _1883 = (((cbLight._m0[_1987].z * 0.3183098733425140380859375) * _2005) * _2006) + _1821;
    }
    uint _1885 = _1637 + 8u;
    float _1891 = cbLight._m0[_1637].x + _289;
    float _1892 = cbLight._m0[_1637].y + _290;
    float _1893 = cbLight._m0[_1637].z + _291;
    float _1897 = inversesqrt(dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893)));
    float _1901 = dot(vec3(_208, _209, _210), vec3(cbLight._m0[_1637].xyz));
    float _3632 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _3643 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _1905 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _1906 = dot(vec3(cbLight._m0[_1637].xyz), vec3(_1891 * _1897, _1892 * _1897, _1893 * _1897));
    float _3654 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1917 = (exp2(log2(1.0 - (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1923 = (0.5 / ((_1904 + 9.9999999392252902907785028219223e-09) + _1905)) * _1904;
    float _3665 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1925 = (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * 0.31831014156341552734375;
    uint _1939 = _1637 + 9u;
    float _1945 = cbLight._m0[_1679].x + _289;
    float _1946 = cbLight._m0[_1679].y + _290;
    float _1947 = cbLight._m0[_1679].z + _291;
    float _1951 = inversesqrt(dot(vec3(_1945, _1946, _1947), vec3(_1945, _1946, _1947)));
    float _1955 = dot(vec3(_208, _209, _210), vec3(cbLight._m0[_1679].xyz));
    float _3676 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1958 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _1959 = dot(vec3(cbLight._m0[_1679].xyz), vec3(_1945 * _1951, _1946 * _1951, _1947 * _1951));
    float _3687 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1968 = (exp2(log2(1.0 - (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1972 = (0.5 / ((_1958 + 9.9999999392252902907785028219223e-09) + _1905)) * _1958;
    float _3698 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1974 = (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * 0.31831014156341552734375;
    float _1984 = (((_1968 * cbLight._m0[_1939].x) * _1974) * _1661) + ((((cbLight._m0[_1885].x * _1626) * _1917) * _1925) * _1675);
    float _1985 = (((_1968 * cbLight._m0[_1939].y) * _1974) * _1661) + ((((cbLight._m0[_1885].y * _1628) * _1917) * _1925) * _1675);
    float _1986 = (((_1968 * cbLight._m0[_1939].z) * _1974) * _1661) + ((((cbLight._m0[_1885].z * _1630) * _1917) * _1925) * _1675);
    float _2042;
    float _2044;
    float _2046;
    if (_1715)
    {
        _2042 = _1984;
        _2044 = _1985;
        _2046 = _1986;
    }
    else
    {
        uint _2048 = _1637 + 10u;
        uint _2054 = _1637 + 2u;
        float _2060 = cbLight._m0[_2054].x + _289;
        float _2061 = cbLight._m0[_2054].y + _290;
        float _2062 = cbLight._m0[_2054].z + _291;
        float _2066 = inversesqrt(dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062)));
        float _2070 = dot(vec3(_208, _209, _210), vec3(cbLight._m0[_2054].xyz));
        float _3709 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2073 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _2074 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_2060 * _2066, _2061 * _2066, _2062 * _2066));
        float _3720 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2083 = (exp2(log2(1.0 - (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2087 = (0.5 / ((_2073 + 9.9999999392252902907785028219223e-09) + _1905)) * _2073;
        float _3731 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2089 = (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * 0.31831014156341552734375;
        float _2090 = isnan(1.0) ? _1653 : (isnan(_1653) ? 1.0 : min(_1653, 1.0));
        _2042 = (((_2083 * cbLight._m0[_2048].x) * _2089) * _2090) + _1984;
        _2044 = (((_2083 * cbLight._m0[_2048].y) * _2089) * _2090) + _1985;
        _2046 = (((_2083 * cbLight._m0[_2048].z) * _2089) * _2090) + _1986;
    }
    float _2121;
    float _2123;
    float _2125;
    if (_1824)
    {
        _2121 = _2042;
        _2123 = _2044;
        _2125 = _2046;
    }
    else
    {
        uint _2132 = _1637 + 11u;
        uint _2138 = _1637 + 3u;
        float _2144 = cbLight._m0[_2138].x + _289;
        float _2145 = cbLight._m0[_2138].y + _290;
        float _2146 = cbLight._m0[_2138].z + _291;
        float _2150 = inversesqrt(dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146)));
        float _2154 = dot(vec3(_208, _209, _210), vec3(cbLight._m0[_2138].xyz));
        float _3747 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2157 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _2158 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_2144 * _2150, _2145 * _2150, _2146 * _2150));
        float _3758 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2167 = (exp2(log2(1.0 - (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2171 = (0.5 / ((_2157 + 9.9999999392252902907785028219223e-09) + _1905)) * _2157;
        float _3769 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2173 = (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * 0.31831014156341552734375;
        float _2174 = isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0));
        _2121 = (((_2167 * cbLight._m0[_2132].x) * _2173) * _2174) + _2042;
        _2123 = (((_2167 * cbLight._m0[_2132].y) * _2173) * _2174) + _2044;
        _2125 = (((_2167 * cbLight._m0[_2132].z) * _2173) * _2174) + _2046;
    }
    float _2239;
    float _2241;
    float _2243;
    float _2245;
    float _2247;
    float _2249;
    if (_1635.y == 0u)
    {
        uvec4 _2195 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2196 = _2195.x;
        uint _2207 = uint((float(_2195.y) * floor(float(uint(cbSceneParam._m0[85u].y * _298) / _2196))) + floor(float(uint(cbSceneParam._m0[85u].x * _297) / _2196)));
        float _2217 = (log2(_1413 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2218 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        uint _2221 = uint(isnan(14.0) ? _2218 : (isnan(_2218) ? 14.0 : min(_2218, 14.0)));
        uvec4 _2226 = texelFetch(g_lightClusterGridBuffer, int(((_2221 << 2u) + (_2207 << 6u)) >> 2u));
        uint _2227 = _2226.x;
        uint _2228 = _2195.z;
        float _2306;
        float _2308;
        float _2310;
        float _2312;
        float _2314;
        float _2316;
        if (((((1u << ((_2228 >> 4u) & 15u)) + 4294967295u) & _2227) == 0u) || ((_2228 & 240u) == 0u))
        {
            _2306 = 0.0;
            _2308 = 0.0;
            _2310 = 0.0;
            _2312 = 0.0;
            _2314 = 0.0;
            _2316 = 0.0;
        }
        else
        {
            float _2307;
            float _2309;
            float _2311;
            float _2313;
            float _2315;
            float _2317;
            float _2448 = 0.0;
            float _2449 = 0.0;
            float _2450 = 0.0;
            float _2451 = 0.0;
            float _2452 = 0.0;
            float _2453 = 0.0;
            uint _2454 = 0u;
            uint _2463;
            bool _2464;
            for (;;)
            {
                _2463 = texelFetch(g_lightClassification, int((((_2221 << 5u) + (_2207 << 9u)) + (_2454 << 2u)) >> 2u)).x;
                _2464 = _2463 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2464)
                {
                    frontier_phi_68_pred = _2453;
                    frontier_phi_68_pred_1 = _2452;
                    frontier_phi_68_pred_2 = _2451;
                    frontier_phi_68_pred_3 = _2449;
                    frontier_phi_68_pred_4 = _2448;
                    frontier_phi_68_pred_5 = _2450;
                }
                else
                {
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    uint _2578;
                    _2572 = _2448;
                    _2573 = _2449;
                    _2574 = _2450;
                    _2575 = _2451;
                    _2576 = _2452;
                    _2577 = _2453;
                    _2578 = _2463;
                    float _2504;
                    float _2505;
                    float _2506;
                    float _2507;
                    float _2508;
                    float _2509;
                    for (;;)
                    {
                        uint _2582 = uint(findLSB(_2578)) + (_2454 << 5u);
                        uint _2579 = (_2578 + 4294967295u) & _2578;
                        uint _2584 = _2582 * 48u;
                        vec4 _2598 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2584)).x, texelFetch(g_PointLightRenderingBuffer, int(_2584 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2584 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2584 + 3u)).x));
                        uint _2604 = (_2582 * 48u) + 4u;
                        vec4 _2617 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2604)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 3u)).x));
                        uint _2623 = (_2582 * 48u) + 8u;
                        vec3 _2634 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2623)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 2u)).x));
                        float _2638 = _2598.x - _1411;
                        float _2639 = _2598.y - _1412;
                        float _2640 = _2598.z - _1413;
                        float _2641 = dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640));
                        float _2644 = inversesqrt(_2641);
                        float _2653 = 1.0 - (_2641 * _2598.w);
                        float _3795 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
                        float _2654 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
                        float _2655 = sqrt(_2641) * _2617.w;
                        float _2658 = 1.39999997615814208984375 / (_2655 + 1.39999997615814208984375);
                        float _2659 = _2658 * _2658;
                        float _2662 = ((1.0 - _2659) * dot(vec3(_319, _322, _325), vec3(_2644 * _2638, _2644 * _2639, _2644 * _2640))) + _2659;
                        float _2665 = _2655 * _2655;
                        float _2669 = ((isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0))) * _2654) / ((_2665 * 0.699999988079071044921875) + 1.0);
                        float _2673 = (-0.0) - _1411;
                        float _2674 = (-0.0) - _1412;
                        float _2675 = (-0.0) - _1413;
                        float _2679 = inversesqrt(dot(vec3(_2673, _2674, _2675), vec3(_2673, _2674, _2675)));
                        float _2683 = dot(vec3(_319, _322, _325), vec3(_2679 * _2673, _2679 * _2674, _2679 * _2675));
                        float _3811 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
                        float _3822 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
                        float _2687 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
                        float _2691 = (0.5 / (((isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) + 9.9999999392252902907785028219223e-09) + _2687)) * _2687;
                        float _3833 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
                        float _2700 = (((isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * 3.1415927410125732421875) / ((_2665 * 2.1991131305694580078125) + 3.141590118408203125)) * _2654;
                        _2507 = (_2669 * _2617.x) + _2575;
                        _2508 = (_2669 * _2617.y) + _2576;
                        _2509 = (_2669 * _2617.z) + _2577;
                        _2504 = (_2700 * _2634.x) + _2572;
                        _2505 = (_2700 * _2634.y) + _2573;
                        _2506 = (_2700 * _2634.z) + _2574;
                        if (_2579 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2572 = _2504;
                            _2573 = _2505;
                            _2574 = _2506;
                            _2575 = _2507;
                            _2576 = _2508;
                            _2577 = _2509;
                            _2578 = _2579;
                        }
                    }
                    frontier_phi_68_pred = _2509;
                    frontier_phi_68_pred_1 = _2508;
                    frontier_phi_68_pred_2 = _2507;
                    frontier_phi_68_pred_3 = _2505;
                    frontier_phi_68_pred_4 = _2504;
                    frontier_phi_68_pred_5 = _2506;
                }
                _2317 = frontier_phi_68_pred;
                _2315 = frontier_phi_68_pred_1;
                _2313 = frontier_phi_68_pred_2;
                _2309 = frontier_phi_68_pred_3;
                _2307 = frontier_phi_68_pred_4;
                _2311 = frontier_phi_68_pred_5;
                uint _2455 = _2454 + 1u;
                if (_2455 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2448 = _2307;
                    _2449 = _2309;
                    _2450 = _2311;
                    _2451 = _2313;
                    _2452 = _2315;
                    _2453 = _2317;
                    _2454 = _2455;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2306 = _2307;
            _2308 = _2309;
            _2310 = _2311;
            _2312 = _2313;
            _2314 = _2315;
            _2316 = _2317;
        }
        uvec4 _2320 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2321 = _2320.z;
        uint _2323 = (_2321 >> 8u) & 15u;
        float _2419;
        float _2421;
        float _2423;
        float _2425;
        float _2427;
        float _2429;
        if (((4294967295u << _2323) & _2227) == 0u)
        {
            _2419 = _2306;
            _2421 = _2308;
            _2423 = _2310;
            _2425 = _2312;
            _2427 = _2314;
            _2429 = _2316;
        }
        else
        {
            float _2444 = inversesqrt(dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413)));
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2323 < ((_2321 >> 12u) & 15u))
            {
                float _2420;
                float _2422;
                float _2424;
                float _2426;
                float _2428;
                float _2430;
                float _2555 = _2306;
                float _2556 = _2308;
                float _2557 = _2310;
                float _2558 = _2312;
                float _2559 = _2314;
                float _2560 = _2316;
                uint _2561 = _2323;
                uint _2570;
                bool _2571;
                for (;;)
                {
                    _2570 = texelFetch(g_lightClassification, int((((_2221 << 5u) + (_2207 << 9u)) + (_2561 << 2u)) >> 2u)).x;
                    _2571 = _2570 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2571)
                    {
                        frontier_phi_74_pred = _2557;
                        frontier_phi_74_pred_1 = _2556;
                        frontier_phi_74_pred_2 = _2555;
                        frontier_phi_74_pred_3 = _2560;
                        frontier_phi_74_pred_4 = _2559;
                        frontier_phi_74_pred_5 = _2558;
                    }
                    else
                    {
                        float _2705;
                        float _2706;
                        float _2707;
                        float _2708;
                        float _2709;
                        float _2710;
                        float _2957;
                        float _2958;
                        float _2959;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _2718 = _2555;
                        float _2719 = _2556;
                        float _2720 = _2557;
                        float _2721 = _2558;
                        float _2722 = _2559;
                        float _2723 = _2560;
                        uint _2724 = _2570;
                        uint _2725;
                        vec4 _2750;
                        float _2751;
                        vec4 _2766;
                        vec3 _2778;
                        vec4 _2794;
                        vec4 _2810;
                        float _2857;
                        bool _2858;
                        for (;;)
                        {
                            uint _2735 = ((_2561 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2724));
                            _2725 = (_2724 + 4294967295u) & _2724;
                            uint _2737 = _2735 * 40u;
                            _2750 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2737 + 3u)).x));
                            _2751 = _2750.w;
                            uint _2753 = (_2735 * 40u) + 4u;
                            _2766 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 3u)).x));
                            uint _2768 = (_2735 * 40u) + 8u;
                            _2778 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2768)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2768 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2768 + 2u)).x));
                            uint _2781 = (_2735 * 40u) + 16u;
                            _2794 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 3u)).x));
                            uint _2797 = (_2735 * 40u) + 20u;
                            _2810 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2797)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 3u)).x));
                            uint _2813 = (_2735 * 40u) + 24u;
                            vec4 _2826 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 3u)).x));
                            uint _2832 = (_2735 * 40u) + 28u;
                            vec4 _2845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 3u)).x));
                            _2857 = fma(_1413, _2845.z, fma(_1412, _2845.y, _2845.x * _1411)) + _2845.w;
                            _2858 = !((fma(_1413, _2826.z, fma(_1412, _2826.y, _2826.x * _1411)) + _2826.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_2858)
                            {
                                float _2885 = _2750.x - _1411;
                                float _2886 = _2750.y - _1412;
                                float _2887 = _2750.z - _1413;
                                float _2888 = dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887));
                                float _2891 = inversesqrt(_2888);
                                float _2892 = _2891 * _2885;
                                float _2893 = _2891 * _2886;
                                float _2894 = _2891 * _2887;
                                float _2898 = 1.0 - (_2888 / (_2751 * _2751));
                                float _3844 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                                float _2899 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
                                float _2903 = sqrt(_2888) * _2766.w;
                                float _2905 = 1.39999997615814208984375 / (_2903 + 1.39999997615814208984375);
                                float _2906 = _2905 * _2905;
                                float _2907 = 1.0 - _2906;
                                float _2909 = (_2907 * dot(vec3(_2892, _2893, _2894), vec3(_319, _322, _325))) + _2906;
                                float _2912 = _2903 * _2903;
                                float _2916 = (fma(_1413, _2794.z, fma(_1412, _2794.y, _2794.x * _1411)) + _2794.w) / _2857;
                                float _2917 = (fma(_1413, _2810.z, fma(_1412, _2810.y, _2810.x * _1411)) + _2810.w) / _2857;
                                float _2921 = 1.0 - dot(vec2(_2916, _2917), vec2(_2916, _2917));
                                float _3860 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                                float _2922 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
                                float _2923 = _2922 * (((isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0))) * _2899) / ((_2912 * 0.699999988079071044921875) + 1.0));
                                float _2933 = dot(vec3(_319, _322, _325), vec3((-0.0) - (_1411 * _2444), (-0.0) - (_1412 * _2444), (-0.0) - (_1413 * _2444)));
                                float _3871 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                                float _2941 = (_2907 * dot(vec3(_319, _322, _325), vec3(_2892, _2893, _2894))) + _2906;
                                float _3882 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                                float _2942 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
                                float _2946 = (0.5 / (((isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) + 9.9999999392252902907785028219223e-09) + _2942)) * _2942;
                                float _3893 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                                float _2953 = (_2922 * _2899) * (((isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * 3.1415927410125732421875) / ((_2912 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_80_pred = _2953 * _2778.z;
                                frontier_phi_80_pred_1 = _2953 * _2778.y;
                                frontier_phi_80_pred_2 = _2953 * _2778.x;
                                frontier_phi_80_pred_3 = _2923 * _2766.z;
                                frontier_phi_80_pred_4 = _2923 * _2766.y;
                                frontier_phi_80_pred_5 = _2923 * _2766.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _2959 = frontier_phi_80_pred;
                            _2958 = frontier_phi_80_pred_1;
                            _2957 = frontier_phi_80_pred_2;
                            _2962 = frontier_phi_80_pred_3;
                            _2961 = frontier_phi_80_pred_4;
                            _2960 = frontier_phi_80_pred_5;
                            _2708 = _2960 + _2721;
                            _2709 = _2961 + _2722;
                            _2710 = _2962 + _2723;
                            _2705 = _2957 + _2718;
                            _2706 = _2958 + _2719;
                            _2707 = _2959 + _2720;
                            if (_2725 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2718 = _2705;
                                _2719 = _2706;
                                _2720 = _2707;
                                _2721 = _2708;
                                _2722 = _2709;
                                _2723 = _2710;
                                _2724 = _2725;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2707;
                        frontier_phi_74_pred_1 = _2706;
                        frontier_phi_74_pred_2 = _2705;
                        frontier_phi_74_pred_3 = _2710;
                        frontier_phi_74_pred_4 = _2709;
                        frontier_phi_74_pred_5 = _2708;
                    }
                    _2424 = frontier_phi_74_pred;
                    _2422 = frontier_phi_74_pred_1;
                    _2420 = frontier_phi_74_pred_2;
                    _2430 = frontier_phi_74_pred_3;
                    _2428 = frontier_phi_74_pred_4;
                    _2426 = frontier_phi_74_pred_5;
                    uint _2562 = _2561 + 1u;
                    if (_2562 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2555 = _2420;
                        _2556 = _2422;
                        _2557 = _2424;
                        _2558 = _2426;
                        _2559 = _2428;
                        _2560 = _2430;
                        _2561 = _2562;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2428;
                frontier_phi_62_63_ladder_1 = _2426;
                frontier_phi_62_63_ladder_2 = _2424;
                frontier_phi_62_63_ladder_3 = _2430;
                frontier_phi_62_63_ladder_4 = _2422;
                frontier_phi_62_63_ladder_5 = _2420;
            }
            else
            {
                frontier_phi_62_63_ladder = _2314;
                frontier_phi_62_63_ladder_1 = _2312;
                frontier_phi_62_63_ladder_2 = _2310;
                frontier_phi_62_63_ladder_3 = _2316;
                frontier_phi_62_63_ladder_4 = _2308;
                frontier_phi_62_63_ladder_5 = _2306;
            }
            _2419 = frontier_phi_62_63_ladder_5;
            _2421 = frontier_phi_62_63_ladder_4;
            _2423 = frontier_phi_62_63_ladder_2;
            _2425 = frontier_phi_62_63_ladder_1;
            _2427 = frontier_phi_62_63_ladder;
            _2429 = frontier_phi_62_63_ladder_3;
        }
        float _2434 = isnan(1.0) ? _364 : (isnan(_364) ? 1.0 : min(_364, 1.0));
        _2239 = (_2434 * _2425) + _1879;
        _2241 = (_2434 * _2427) + _1881;
        _2243 = (_2434 * _2429) + _1883;
        _2245 = ((_2419 * 0.039999999105930328369140625) * _2434) + _2121;
        _2247 = ((_2421 * 0.039999999105930328369140625) * _2434) + _2123;
        _2249 = ((_2423 * 0.039999999105930328369140625) * _2434) + _2125;
    }
    else
    {
        _2239 = _1879;
        _2241 = _1881;
        _2243 = _1883;
        _2245 = _2121;
        _2247 = _2123;
        _2249 = _2125;
    }
    float _3909 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _3920 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _3931 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    uint _2269 = _338 + 6u;
    float _2277 = _297 / cbSceneParam._m0[86u].x;
    float _2278 = _298 / cbSceneParam._m0[86u].y;
    vec4 _2292 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2277, _2278, (log2((isnan(cbSceneParam._m0[77u].w) ? _230 : (isnan(_230) ? cbSceneParam._m0[77u].w : min(_230, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2294 = _2292.x;
    float _2295 = _2292.y;
    float _2296 = _2292.z;
    float _2297 = _2292.w;
    float _2368;
    float _2370;
    float _2372;
    float _2374;
    if (_230 > cbSceneParam._m0[78u].w)
    {
        float _2331 = isnan(_230) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _230 : min(cbSceneParam._m0[80u].w, _230));
        float _2332 = _2331 / _230;
        float _2343 = _2332 * _282;
        float _2344 = _283 * _2332;
        float _2345 = (-0.0) - _2344;
        float _2346 = _2332 * _284;
        float _2348 = (cbSceneParam._m0[77u].w * _2345) / _2331;
        float _2349 = _2348 + cbSceneParam._m0[79u].w;
        float _2350 = cbSceneParam._m0[79u].w - _2344;
        float _2356 = sqrt(((_2343 * _2343) + (_2344 * _2344)) + (_2346 * _2346));
        float _2359 = (1.0 - (cbSceneParam._m0[77u].w / _2331)) * _2356;
        float _2364 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2366 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2517;
        if (abs((_2345 - _2348) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2517 = ((((_2349 > 0.0) ? exp2(_2364 * _2349) : (2.0 - exp2(_2366 * _2349))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2359;
        }
        else
        {
            float _2477 = 1.0 / cbSceneParam._m0[80u].x;
            float _2478 = isnan(_2350) ? _2349 : (isnan(_2349) ? _2350 : max(_2349, _2350));
            float _2479 = isnan(_2350) ? _2349 : (isnan(_2349) ? _2350 : min(_2349, _2350));
            float _2488 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : min(_2478, 0.0));
            float _2489 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : min(_2479, 0.0));
            _2517 = ((abs(_2356 / _2345) * cbSceneParam._m0[80u].y) * ((((_2488 - _2489) * 2.0) - ((exp2(_2364 * (isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0)))) - exp2(_2364 * (isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0))))) * _2477)) - ((exp2(_2366 * _2488) - exp2(_2366 * _2489)) * _2477))) + (_2359 * cbSceneParam._m0[80u].z);
        }
        vec4 _2519 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2277, _2278, 1.0), 0.0);
        float _2528 = exp2((_2517 * (-1.44269502162933349609375)) * (1.0 - _2519.w));
        float _2529 = log2(_2528);
        float _2545 = log2(_2297);
        _2368 = (exp2(_2545 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2529 * cbSceneParam._m0[78u].x)) * _2519.x) / cbSceneParam._m0[78u].x)) + _2294;
        _2370 = (exp2(_2545 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2529 * cbSceneParam._m0[78u].y)) * _2519.y) / cbSceneParam._m0[78u].y)) + _2295;
        _2372 = (exp2(_2545 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2529 * cbSceneParam._m0[78u].z)) * _2519.z) / cbSceneParam._m0[78u].z)) + _2296;
        _2374 = _2528 * _2297;
    }
    else
    {
        _2368 = _2294;
        _2370 = _2295;
        _2372 = _2296;
        _2374 = _2297;
    }
    float _2386 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2387 = _2386 == 3.0;
    float _2389 = log2(_2374);
    float _2396 = exp2(_2389 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_2239 + ((isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0))) * _364))) + ((_2245 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _1143)) * cbPerFrame._m0[3u].x));
    float _2397 = exp2(_2389 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_2241 + ((isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0))) * _364))) + ((_2247 + ((isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))) * _1143)) * cbPerFrame._m0[3u].x));
    float _2398 = exp2(_2389 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_2243 + ((isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0))) * _364))) + ((_2249 + ((isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))) * _1143)) * cbPerFrame._m0[3u].x));
    float _2407 = (_2386 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2407 * (_2387 ? _2396 : (_2396 + (cbSceneParam._m0[72u].w * _2368)));
    SV_Target.y = _2407 * (_2387 ? _2397 : (_2397 + (cbSceneParam._m0[72u].w * _2370)));
    SV_Target.z = _2407 * (_2387 ? _2398 : (_2398 + (cbSceneParam._m0[72u].w * _2372)));
    SV_Target.w = cbInstanceData._m0[_2269].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2269].w;
}


