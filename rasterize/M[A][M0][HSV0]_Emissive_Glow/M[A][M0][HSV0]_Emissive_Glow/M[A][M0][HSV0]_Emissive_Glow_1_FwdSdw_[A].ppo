#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _831;
float _3366;
float _3367;
float _3368;
float _3369;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _171 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _172 = _171 * NORMAL.x;
    float _173 = _171 * NORMAL.y;
    float _174 = _171 * NORMAL.z;
    float _179;
    float _180;
    float _181;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _179 = (-0.0) - _172;
        _180 = (-0.0) - _173;
        _181 = (-0.0) - _174;
    }
    else
    {
        _179 = _172;
        _180 = _173;
        _181 = _174;
    }
    vec4 _201 = texture(sampler2D(M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _207 = _201.x * cbMtdParam._m0[9u].x;
    float _208 = _201.y * cbMtdParam._m0[9u].y;
    float _209 = _201.z * cbMtdParam._m0[9u].z;
    vec4 _230 = texture(sampler2D(M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _232 = _230.x;
    float _233 = _230.y;
    float _234 = _230.z;
    float _235 = cbMtdParam._m0[11u].w * cbMtdParam._m0[12u].x;
    float _236 = _235 * _232;
    float _237 = _235 * _233;
    float _238 = _235 * _234;
    float _239 = isnan(_237) ? _236 : (isnan(_236) ? _237 : max(_236, _237));
    float _240 = isnan(_238) ? _239 : (isnan(_239) ? _238 : max(_239, _238));
    float _243;
    float _245;
    if (_240 < 1.1920928955078125e-07)
    {
        _243 = 0.0;
        _245 = 0.0;
    }
    else
    {
        float _271 = isnan(_237) ? _236 : (isnan(_236) ? _237 : min(_236, _237));
        float _273 = _240 - (isnan(_238) ? _271 : (isnan(_271) ? _238 : min(_271, _238)));
        float _246 = _273 / _240;
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        if (_273 < 1.1920928955078125e-07)
        {
            frontier_phi_3_4_ladder = 0.0;
            frontier_phi_3_4_ladder_1 = _246;
        }
        else
        {
            float _852;
            if (_240 == _236)
            {
                _852 = ((_235 * (_233 - _234)) / _273) * 0.16666667163372039794921875;
            }
            else
            {
                float frontier_phi_17_12_ladder;
                if (_240 == _237)
                {
                    frontier_phi_17_12_ladder = (((_235 * (_234 - _232)) / _273) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
                }
                else
                {
                    frontier_phi_17_12_ladder = (((_235 * (_232 - _233)) / _273) * 0.16666667163372039794921875) + 0.666666686534881591796875;
                }
                _852 = frontier_phi_17_12_ladder;
            }
            float _857 = (_852 < 0.0) ? (_852 + 1.0) : _852;
            frontier_phi_3_4_ladder = _857 - floor(_857);
            frontier_phi_3_4_ladder_1 = _246;
        }
        _243 = frontier_phi_3_4_ladder;
        _245 = frontier_phi_3_4_ladder_1;
    }
    float _247 = _245 + cbMtdParam._m0[11u].y;
    float _251 = fract(cbMtdParam._m0[11u].z + _243) * 6.0;
    uint _254 = uint(int(floor(_251)));
    float _256 = _251 - float(int(_254));
    float _259 = (1.0 - _247) * _240;
    float _262 = (1.0 - (_256 * _247)) * _240;
    float _266 = (1.0 - ((1.0 - _256) * _247)) * _240;
    float _275;
    float _277;
    float _278;
    if ((_254 == 0u) || (_254 == 6u))
    {
        _275 = _240;
        _277 = _266;
        _278 = _259;
    }
    else
    {
        float frontier_phi_5_6_ladder;
        float frontier_phi_5_6_ladder_1;
        float frontier_phi_5_6_ladder_2;
        if (_254 == 1u)
        {
            frontier_phi_5_6_ladder = _259;
            frontier_phi_5_6_ladder_1 = _240;
            frontier_phi_5_6_ladder_2 = _262;
        }
        else
        {
            float frontier_phi_5_6_ladder_10_ladder;
            float frontier_phi_5_6_ladder_10_ladder_1;
            float frontier_phi_5_6_ladder_10_ladder_2;
            if (_254 == 2u)
            {
                frontier_phi_5_6_ladder_10_ladder = _266;
                frontier_phi_5_6_ladder_10_ladder_1 = _240;
                frontier_phi_5_6_ladder_10_ladder_2 = _259;
            }
            else
            {
                float frontier_phi_5_6_ladder_10_ladder_16_ladder;
                float frontier_phi_5_6_ladder_10_ladder_16_ladder_1;
                float frontier_phi_5_6_ladder_10_ladder_16_ladder_2;
                if (_254 == 3u)
                {
                    frontier_phi_5_6_ladder_10_ladder_16_ladder = _240;
                    frontier_phi_5_6_ladder_10_ladder_16_ladder_1 = _262;
                    frontier_phi_5_6_ladder_10_ladder_16_ladder_2 = _259;
                }
                else
                {
                    bool _1245 = _254 == 4u;
                    frontier_phi_5_6_ladder_10_ladder_16_ladder = _1245 ? _240 : _262;
                    frontier_phi_5_6_ladder_10_ladder_16_ladder_1 = _259;
                    frontier_phi_5_6_ladder_10_ladder_16_ladder_2 = _1245 ? _266 : _240;
                }
                frontier_phi_5_6_ladder_10_ladder = frontier_phi_5_6_ladder_10_ladder_16_ladder;
                frontier_phi_5_6_ladder_10_ladder_1 = frontier_phi_5_6_ladder_10_ladder_16_ladder_1;
                frontier_phi_5_6_ladder_10_ladder_2 = frontier_phi_5_6_ladder_10_ladder_16_ladder_2;
            }
            frontier_phi_5_6_ladder = frontier_phi_5_6_ladder_10_ladder;
            frontier_phi_5_6_ladder_1 = frontier_phi_5_6_ladder_10_ladder_1;
            frontier_phi_5_6_ladder_2 = frontier_phi_5_6_ladder_10_ladder_2;
        }
        _275 = frontier_phi_5_6_ladder_2;
        _277 = frontier_phi_5_6_ladder_1;
        _278 = frontier_phi_5_6_ladder;
    }
    float _283 = inversesqrt(dot(vec3(_179, _180, _181), vec3(_179, _180, _181)));
    float _284 = _283 * _179;
    float _285 = _283 * _180;
    float _286 = _283 * _181;
    float _3398 = isnan(0.0) ? _207 : (isnan(_207) ? 0.0 : max(_207, 0.0));
    float _3409 = isnan(0.0) ? _208 : (isnan(_208) ? 0.0 : max(_208, 0.0));
    float _3420 = isnan(0.0) ? _209 : (isnan(_209) ? 0.0 : max(_209, 0.0));
    float _305 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _347 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _357 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _347);
    float _358 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _347);
    float _359 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _347);
    float _363 = inversesqrt(dot(vec3(_357, _358, _359), vec3(_357, _358, _359)));
    float _364 = _357 * _363;
    float _365 = _358 * _363;
    float _366 = _359 * _363;
    vec4 _371 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _373 = _371.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _503 = sqrt(((_357 * _357) + (_358 * _358)) + (_359 * _359));
        float _509 = (cbMatDynParam._m0[5u].x * _503) + cbMatDynParam._m0[5u].y;
        float _3431 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
        float _510 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _514 = (cbMatDynParam._m0[5u].z * _503) + cbMatDynParam._m0[5u].w;
        float _3442 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) - _510)) + _510) < ((_373 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _386 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _387 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _407 = fma(_286, cbSceneParam._m0[5u].z, fma(_285, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _284));
    float _410 = fma(_286, cbSceneParam._m0[6u].z, fma(_285, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _284));
    float _413 = fma(_286, cbSceneParam._m0[7u].z, fma(_285, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _284));
    uint _426 = uint(roundEven(NORMAL.w)) * 13u;
    uint _427 = _426 + 9u;
    uint _428 = _427 + uint(cbMatDynParam._m0[0u].w);
    float _434 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0)))) * cbInstanceData._m0[_428].x;
    float _435 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0)))) * cbInstanceData._m0[_428].y;
    float _436 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0)))) * cbInstanceData._m0[_428].z;
    float _3453 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _437 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
    float _3464 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _3475 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _439 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    vec4 _448 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _386, cbSceneParam._m0[86u].y * _387));
    float _451 = _448.x * TEXCOORD.z;
    float _452 = dot(vec3(_284, _285, _286), vec3(_364, _365, _366));
    float _455 = _452 * 2.0;
    float _460 = (_455 * _284) - _364;
    float _461 = (_455 * _285) - _365;
    float _462 = (_455 * _286) - _366;
    float _484 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _488 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _492 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _830;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _555 = fma(_492, cbModelParam._m0[26u].z, fma(_488, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _484));
        float _559 = fma(_492, cbModelParam._m0[27u].z, fma(_488, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _484));
        float _563 = fma(_492, cbModelParam._m0[28u].z, fma(_488, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _484));
        float _588 = _484 + _284;
        float _589 = _488 + _285;
        float _590 = _492 + _286;
        float _600 = fma(_590, cbModelParam._m0[26u].z, fma(_589, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _588)) - _555;
        float _601 = fma(_590, cbModelParam._m0[27u].z, fma(_589, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _588)) - _559;
        float _602 = fma(_590, cbModelParam._m0[28u].z, fma(_589, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _588)) - _563;
        float _606 = inversesqrt(dot(vec3(_600, _601, _602), vec3(_600, _601, _602)));
        float _619 = ((_606 * _600) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_555 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _620 = ((_606 * _601) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_559 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _621 = ((_606 * _602) / cbModelParam._m0[34u].z) + ((((((_563 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _624 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_619, _620, _621), 0.0);
        vec4 _631 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_619, _620, _621), 0.0);
        vec4 _638 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_619, _620, _621), 0.0);
        vec4 _645 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_619, _620, _621), 0.0);
        float _658 = exp2((_624.w + (-0.5)) * 20.0) * 2.0;
        float _659 = _658 * (_624.x + (-0.5));
        float _660 = _658 * (_624.y + (-0.5));
        float _661 = _658 * (_624.z + (-0.5));
        float _668 = exp2((_631.w + (-0.5)) * 20.0) * 2.0;
        float _669 = _668 * (_631.x + (-0.5));
        float _670 = _668 * (_631.y + (-0.5));
        float _671 = _668 * (_631.z + (-0.5));
        float _678 = exp2((_638.w + (-0.5)) * 20.0) * 2.0;
        float _679 = _678 * (_638.x + (-0.5));
        float _680 = _678 * (_638.y + (-0.5));
        float _681 = _678 * (_638.z + (-0.5));
        float _688 = exp2((_645.w + (-0.5)) * 20.0) * 2.0;
        float _689 = _688 * (_645.x + (-0.5));
        float _690 = _688 * (_645.y + (-0.5));
        float _691 = _688 * (_645.z + (-0.5));
        float _692 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _693 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _694 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _695 = _659 * 0.5;
        float _696 = _669 * 0.5;
        float _697 = _679 * 0.5;
        float _698 = dot(vec3(_695, _696, _697), vec3(_695, _696, _697));
        float _703 = (_698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_698);
        float _712 = (dot(vec3(_284, _285, _286), vec3(_703 * _695, _703 * _696, _703 * _697)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _722 = sqrt(((_696 * _696) + (_695 * _695)) + (_697 * _697)) / (_692 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _723 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _724 = _723 * 2.0;
        float _728 = (1.0 - _723) / (_723 + 1.0);
        float _3523 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _729 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _738 = ((((1.0 - _729) * (_724 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_724 + 1.0))) + _729) * _692;
        float _739 = _660 * 0.5;
        float _740 = _670 * 0.5;
        float _741 = _680 * 0.5;
        float _742 = dot(vec3(_739, _740, _741), vec3(_739, _740, _741));
        float _747 = (_742 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_742);
        float _755 = (dot(vec3(_284, _285, _286), vec3(_747 * _739, _747 * _740, _747 * _741)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _764 = sqrt(((_740 * _740) + (_739 * _739)) + (_741 * _741)) / (_693 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _766 = _765 * 2.0;
        float _770 = (1.0 - _765) / (_765 + 1.0);
        float _3556 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _780 = ((((1.0 - _771) * (_766 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_766 + 1.0))) + _771) * _693;
        float _781 = _661 * 0.5;
        float _782 = _671 * 0.5;
        float _783 = _681 * 0.5;
        float _784 = dot(vec3(_781, _782, _783), vec3(_781, _782, _783));
        float _789 = (_784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_784);
        float _797 = (dot(vec3(_284, _285, _286), vec3(_789 * _781, _789 * _782, _789 * _783)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _806 = sqrt(((_782 * _782) + (_781 * _781)) + (_783 * _783)) / (_694 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _808 = _807 * 2.0;
        float _812 = (1.0 - _807) / (_807 + 1.0);
        float _3589 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _822 = ((((1.0 - _813) * (_808 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_808 + 1.0))) + _813) * _694;
        _830 = _661;
        _832 = _660;
        _833 = _659;
        _834 = _671;
        _835 = _670;
        _836 = _669;
        _837 = _681;
        _838 = _680;
        _839 = _679;
        _840 = _694;
        _841 = _693;
        _842 = _692;
        _843 = cbModelParam._m0[36u].z * (isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0)));
        _844 = cbModelParam._m0[36u].z * (isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0)));
        _845 = cbModelParam._m0[36u].z * (isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0)));
    }
    else
    {
        _830 = _831;
        _832 = _831;
        _833 = _831;
        _834 = _831;
        _835 = _831;
        _836 = _831;
        _837 = _831;
        _838 = _831;
        _839 = _831;
        _840 = _831;
        _841 = _831;
        _842 = _831;
        _843 = 0.0;
        _844 = 0.0;
        _845 = 0.0;
    }
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _892 = fma(_492, cbModelParam._m0[30u].z, fma(_488, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _484));
        float _896 = fma(_492, cbModelParam._m0[31u].z, fma(_488, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _484));
        float _900 = fma(_492, cbModelParam._m0[32u].z, fma(_488, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _484));
        float _923 = _484 + _284;
        float _924 = _488 + _285;
        float _925 = _492 + _286;
        float _935 = fma(_925, cbModelParam._m0[30u].z, fma(_924, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _923)) - _892;
        float _936 = fma(_925, cbModelParam._m0[31u].z, fma(_924, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _923)) - _896;
        float _937 = fma(_925, cbModelParam._m0[32u].z, fma(_924, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _923)) - _900;
        float _941 = inversesqrt(dot(vec3(_935, _936, _937), vec3(_935, _936, _937)));
        float _954 = ((_941 * _935) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_892 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_941 * _936) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_896 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_941 * _937) / cbModelParam._m0[35u].z) + ((((((_900 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        float _991 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_958.x + (-0.5));
        float _993 = _991 * (_958.y + (-0.5));
        float _994 = _991 * (_958.z + (-0.5));
        float _1001 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_965.x + (-0.5));
        float _1003 = _1001 * (_965.y + (-0.5));
        float _1004 = _1001 * (_965.z + (-0.5));
        float _1011 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_972.x + (-0.5));
        float _1013 = _1011 * (_972.y + (-0.5));
        float _1014 = _1011 * (_972.z + (-0.5));
        float _1021 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_979.x + (-0.5));
        float _1023 = _1021 * (_979.y + (-0.5));
        float _1024 = _1021 * (_979.z + (-0.5));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = _992 * 0.5;
        float _1029 = _1002 * 0.5;
        float _1030 = _1012 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_284, _285, _286), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3652 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_1055 + 1.0))) + _1060) * _1025;
        float _1070 = _993 * 0.5;
        float _1071 = _1003 * 0.5;
        float _1072 = _1013 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_284, _285, _286), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3685 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1097 + 1.0))) + _1102) * _1026;
        float _1112 = _994 * 0.5;
        float _1113 = _1004 * 0.5;
        float _1114 = _1014 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_284, _285, _286), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3718 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1139 + 1.0))) + _1144) * _1027;
        _1161 = _994;
        _1162 = _993;
        _1163 = _992;
        _1164 = _1004;
        _1165 = _1003;
        _1166 = _1002;
        _1167 = _1014;
        _1168 = _1013;
        _1169 = _1012;
        _1170 = _1027;
        _1171 = _1026;
        _1172 = _1025;
        _1173 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
        _1174 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
        _1175 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
    }
    else
    {
        _1161 = _831;
        _1162 = _831;
        _1163 = _831;
        _1164 = _831;
        _1165 = _831;
        _1166 = _831;
        _1167 = _831;
        _1168 = _831;
        _1169 = _831;
        _1170 = _831;
        _1171 = _831;
        _1172 = _831;
        _1173 = 0.0;
        _1174 = 0.0;
        _1175 = 0.0;
    }
    float _1185 = (cbModelParam._m0[1u].x * (_1173 - _843)) + _843;
    float _1186 = (cbModelParam._m0[1u].x * (_1174 - _844)) + _844;
    float _1187 = (cbModelParam._m0[1u].x * (_1175 - _845)) + _845;
    float _1208 = fma(_1187, cbSceneParam._m0[89u].z, fma(_1186, cbSceneParam._m0[89u].y, _1185 * cbSceneParam._m0[89u].x));
    float _1211 = fma(_1187, cbSceneParam._m0[90u].z, fma(_1186, cbSceneParam._m0[90u].y, _1185 * cbSceneParam._m0[90u].x));
    float _1214 = fma(_1187, cbSceneParam._m0[91u].z, fma(_1186, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1185));
    float _1229 = _460 * 0.5;
    float _1230 = _461 * 0.5;
    float _1231 = _462 * 0.5;
    float _1232 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_1163, _1166, _1169, _1172));
    float _1235 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_1162, _1165, _1168, _1171));
    float _1238 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_1161, _1164, _1167, _1170));
    float _1274;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1247 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_830, _834, _837, _840));
        float _1251 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_832, _835, _838, _841));
        float _1255 = dot(vec4(_1229, _1230, _1231, 1.0), vec4(_833, _836, _839, _842));
        float _1262 = dot(vec4(cbModelParam._m0[39u]), vec4(_1229, _1230, _1231, 1.0));
        _1274 = dot(vec3(isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)), isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1262) ? 0.0 : (isnan(0.0) ? _1262 : max(0.0, _1262))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1274 = 1.0;
    }
    float _1285;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1276 = dot(vec4(cbModelParam._m0[40u]), vec4(_1229, _1230, _1231, 1.0));
        _1285 = dot(vec3(isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)), isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)), isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1276) ? 0.0 : (isnan(0.0) ? _1276 : max(0.0, _1276))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1285 = 1.0;
    }
    float _1289 = (_1285 * cbModelParam._m0[1u].x) + (_1274 * (1.0 - cbModelParam._m0[1u].x));
    float _1298 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1380;
    float _1382;
    float _1384;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1347 = fma(_492, cbModelParam._m0[13u].z, fma(_488, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _484)) + cbModelParam._m0[13u].w;
        float _1351 = fma(_492, cbModelParam._m0[14u].z, fma(_488, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _484)) + cbModelParam._m0[14u].w;
        float _1355 = fma(_492, cbModelParam._m0[15u].z, fma(_488, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _484)) + cbModelParam._m0[15u].w;
        float _1358 = fma(_462, cbModelParam._m0[13u].z, fma(_461, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _460));
        float _1361 = fma(_462, cbModelParam._m0[14u].z, fma(_461, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _460));
        float _1364 = fma(_462, cbModelParam._m0[15u].z, fma(_461, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _460));
        float _1390;
        if (_1358 > 0.0)
        {
            _1390 = abs((1.0 - _1347) / _1358);
        }
        else
        {
            float frontier_phi_32_30_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_32_30_ladder = abs((_1347 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_32_30_ladder = 5000.0;
            }
            _1390 = frontier_phi_32_30_ladder;
        }
        float _1564;
        if (_1361 > 0.0)
        {
            _1564 = abs((1.0 - _1351) / _1361);
        }
        else
        {
            float frontier_phi_41_37_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_41_37_ladder = abs((_1351 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_41_37_ladder = 5000.0;
            }
            _1564 = frontier_phi_41_37_ladder;
        }
        float _1860;
        if (_1364 > 0.0)
        {
            _1860 = abs((1.0 - _1355) / _1364);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1355 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _1860 = frontier_phi_53_48_ladder;
        }
        float _1862 = isnan(_1564) ? _1390 : (isnan(_1390) ? _1564 : min(_1390, _1564));
        float _1863 = isnan(_1860) ? _1862 : (isnan(_1862) ? _1860 : min(_1862, _1860));
        float _1867 = (_1863 * _1358) + _1347;
        float _1868 = (_1863 * _1361) + _1351;
        float _1869 = (_1863 * _1364) + _1355;
        float _1870 = _1863 * 9.9999997473787516355514526367188e-05;
        float _1872 = (-1.0) - _1870;
        float _1874 = _1870 + 1.0;
        float frontier_phi_31_53_ladder;
        float frontier_phi_31_53_ladder_1;
        float frontier_phi_31_53_ladder_2;
        if ((_1869 > _1874) || ((_1869 < _1872) || ((_1868 > _1874) || ((_1868 < _1872) || ((_1867 < _1872) || (_1867 > _1874))))))
        {
            frontier_phi_31_53_ladder = 0.0;
            frontier_phi_31_53_ladder_1 = 0.0;
            frontier_phi_31_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2014 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1869, cbModelParam._m0[9u].z, fma(_1868, cbModelParam._m0[9u].y, _1867 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1869, cbModelParam._m0[10u].z, fma(_1868, cbModelParam._m0[10u].y, _1867 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1869, cbModelParam._m0[11u].z, fma(_1868, cbModelParam._m0[11u].y, _1867 * cbModelParam._m0[11u].x))), _1298);
            frontier_phi_31_53_ladder = _2014.z * cbModelParam._m0[1u].y;
            frontier_phi_31_53_ladder_1 = _2014.y * cbModelParam._m0[1u].y;
            frontier_phi_31_53_ladder_2 = _2014.x * cbModelParam._m0[1u].y;
        }
        _1380 = frontier_phi_31_53_ladder_2;
        _1382 = frontier_phi_31_53_ladder_1;
        _1384 = frontier_phi_31_53_ladder;
    }
    else
    {
        vec4 _1368 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_460, _461, _462), _1298);
        _1380 = _1368.x * cbModelParam._m0[1u].y;
        _1382 = _1368.y * cbModelParam._m0[1u].y;
        _1384 = _1368.z * cbModelParam._m0[1u].y;
    }
    float _1387 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1480;
    float _1482;
    float _1484;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1444 = fma(_492, cbModelParam._m0[21u].z, fma(_488, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _484)) + cbModelParam._m0[21u].w;
        float _1448 = fma(_492, cbModelParam._m0[22u].z, fma(_488, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _484)) + cbModelParam._m0[22u].w;
        float _1452 = fma(_492, cbModelParam._m0[23u].z, fma(_488, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _484)) + cbModelParam._m0[23u].w;
        float _1455 = fma(_462, cbModelParam._m0[21u].z, fma(_461, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _460));
        float _1458 = fma(_462, cbModelParam._m0[22u].z, fma(_461, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _460));
        float _1461 = fma(_462, cbModelParam._m0[23u].z, fma(_461, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _460));
        float _1569;
        if (_1455 > 0.0)
        {
            _1569 = abs((1.0 - _1444) / _1455);
        }
        else
        {
            float frontier_phi_43_39_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_43_39_ladder = abs((_1444 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_43_39_ladder = 5000.0;
            }
            _1569 = frontier_phi_43_39_ladder;
        }
        float _1887;
        if (_1458 > 0.0)
        {
            _1887 = abs((1.0 - _1448) / _1458);
        }
        else
        {
            float frontier_phi_55_50_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_55_50_ladder = abs((_1448 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_55_50_ladder = 5000.0;
            }
            _1887 = frontier_phi_55_50_ladder;
        }
        float _2160;
        if (_1461 > 0.0)
        {
            _2160 = abs((1.0 - _1452) / _1461);
        }
        else
        {
            float frontier_phi_65_62_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_65_62_ladder = abs((_1452 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_65_62_ladder = 5000.0;
            }
            _2160 = frontier_phi_65_62_ladder;
        }
        float _2162 = isnan(_1887) ? _1569 : (isnan(_1569) ? _1887 : min(_1569, _1887));
        float _2163 = isnan(_2160) ? _2162 : (isnan(_2162) ? _2160 : min(_2162, _2160));
        float _2167 = (_2163 * _1455) + _1444;
        float _2168 = (_2163 * _1458) + _1448;
        float _2169 = (_2163 * _1461) + _1452;
        float _2170 = _2163 * 9.9999997473787516355514526367188e-05;
        float _2171 = (-1.0) - _2170;
        float _2173 = _2170 + 1.0;
        float frontier_phi_40_65_ladder;
        float frontier_phi_40_65_ladder_1;
        float frontier_phi_40_65_ladder_2;
        if ((_2169 > _2173) || ((_2169 < _2171) || ((_2168 > _2173) || ((_2168 < _2171) || ((_2167 < _2171) || (_2167 > _2173))))))
        {
            frontier_phi_40_65_ladder = 0.0;
            frontier_phi_40_65_ladder_1 = 0.0;
            frontier_phi_40_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2260 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2169, cbModelParam._m0[17u].z, fma(_2168, cbModelParam._m0[17u].y, _2167 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2169, cbModelParam._m0[18u].z, fma(_2168, cbModelParam._m0[18u].y, _2167 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2169, cbModelParam._m0[19u].z, fma(_2168, cbModelParam._m0[19u].y, _2167 * cbModelParam._m0[19u].x))), _1387);
            frontier_phi_40_65_ladder = _2260.z * cbModelParam._m0[1u].z;
            frontier_phi_40_65_ladder_1 = _2260.y * cbModelParam._m0[1u].z;
            frontier_phi_40_65_ladder_2 = _2260.x * cbModelParam._m0[1u].z;
        }
        _1480 = frontier_phi_40_65_ladder_2;
        _1482 = frontier_phi_40_65_ladder_1;
        _1484 = frontier_phi_40_65_ladder;
    }
    else
    {
        vec4 _1464 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_460, _461, _462), _1387);
        _1480 = _1464.x * cbModelParam._m0[1u].z;
        _1482 = _1464.y * cbModelParam._m0[1u].z;
        _1484 = _1464.z * cbModelParam._m0[1u].z;
    }
    float _1496 = _451 * 0.01200000010430812835693359375;
    float _1498 = _1496 * ((cbModelParam._m0[1u].w * (_1480 - _1380)) + _1380);
    float _1499 = _1496 * ((cbModelParam._m0[1u].w * (_1482 - _1382)) + _1382);
    float _1500 = _1496 * ((cbModelParam._m0[1u].w * (_1484 - _1384)) + _1384);
    float _1503 = fma(_1500, cbSceneParam._m0[89u].z, fma(_1499, cbSceneParam._m0[89u].y, _1498 * cbSceneParam._m0[89u].x));
    float _1506 = fma(_1500, cbSceneParam._m0[90u].z, fma(_1499, cbSceneParam._m0[90u].y, _1498 * cbSceneParam._m0[90u].x));
    float _1509 = fma(_1500, cbSceneParam._m0[91u].z, fma(_1499, cbSceneParam._m0[91u].y, _1498 * cbSceneParam._m0[91u].x));
    float _1543 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1547 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1551 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1555 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1556 = _1543 / _1555;
    float _1557 = _1547 / _1555;
    float _1558 = _1551 / _1555;
    float _1705;
    float _1706;
    float _1707;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1585 = ((uint(_1558 > cbSceneParam._m0[59u].y) + uint(_1558 > cbSceneParam._m0[59u].x)) + uint(_1558 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1586 = _1585 + 43u;
        uint _1594 = _1585 + 44u;
        uint _1602 = _1585 + 45u;
        uint _1610 = _1585 + 46u;
        float _1621 = fma(_1555, cbSceneParam._m0[_1586].w, fma(_1551, cbSceneParam._m0[_1586].z, fma(_1547, cbSceneParam._m0[_1586].y, _1543 * cbSceneParam._m0[_1586].x)));
        float _1625 = fma(_1555, cbSceneParam._m0[_1594].w, fma(_1551, cbSceneParam._m0[_1594].z, fma(_1547, cbSceneParam._m0[_1594].y, _1543 * cbSceneParam._m0[_1594].x)));
        float _1633 = fma(_1555, cbSceneParam._m0[_1610].w, fma(_1551, cbSceneParam._m0[_1610].z, fma(_1547, cbSceneParam._m0[_1610].y, _1543 * cbSceneParam._m0[_1610].x)));
        float _1638 = cbSceneParam._m0[33u].z * _1633;
        float _1640 = cbSceneParam._m0[33u].w * _1633;
        float _1643 = fma(_1555, cbSceneParam._m0[_1602].w, fma(_1551, cbSceneParam._m0[_1602].z, fma(_1547, cbSceneParam._m0[_1602].y, _1543 * cbSceneParam._m0[_1602].x))) / _1633;
        float _1691 = (cbSceneParam._m0[33u].x - sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558))) * cbSceneParam._m0[33u].y;
        float _3844 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1698 = (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1638 + _1621) / _1633, (_1640 + _1625) / _1633), _1643), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1640 + _1621) / _1633, (_1625 - _1638) / _1633), _1643), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1621 - _1638) / _1633, (_1625 - _1640) / _1633), _1643), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1621 - _1640) / _1633, (_1638 + _1625) / _1633), _1643), 0.0)).x), vec4(0.25)));
        _1705 = 1.0 - (_1698 * cbSceneParam._m0[34u].x);
        _1706 = 1.0 - (_1698 * cbSceneParam._m0[34u].y);
        _1707 = 1.0 - (_1698 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1705 = 1.0;
        _1706 = 1.0;
        _1707 = 1.0;
    }
    float _1771;
    float _1773;
    float _1775;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1759 = fma(_1555, cbSceneParam._m0[63u].w, fma(_1551, cbSceneParam._m0[63u].z, fma(_1547, cbSceneParam._m0[63u].y, _1543 * cbSceneParam._m0[63u].x)));
        float _1760 = fma(_1555, cbSceneParam._m0[60u].w, fma(_1551, cbSceneParam._m0[60u].z, fma(_1547, cbSceneParam._m0[60u].y, _1543 * cbSceneParam._m0[60u].x))) / _1759;
        float _1761 = fma(_1555, cbSceneParam._m0[61u].w, fma(_1551, cbSceneParam._m0[61u].z, fma(_1547, cbSceneParam._m0[61u].y, _1543 * cbSceneParam._m0[61u].x))) / _1759;
        float frontier_phi_52_51_ladder;
        float frontier_phi_52_51_ladder_1;
        float frontier_phi_52_51_ladder_2;
        if ((((_1760 >= cbSceneParam._m0[64u].x) && (_1761 >= cbSceneParam._m0[64u].y)) && (_1760 <= cbSceneParam._m0[64u].z)) && (_1761 <= cbSceneParam._m0[64u].w))
        {
            float _1900 = fma(_1555, cbSceneParam._m0[62u].w, fma(_1551, cbSceneParam._m0[62u].z, fma(_1547, cbSceneParam._m0[62u].y, _1543 * cbSceneParam._m0[62u].x))) / _1759;
            float _1904 = isnan(cbSceneParam._m0[41u].w) ? _1900 : (isnan(_1900) ? cbSceneParam._m0[41u].w : max(_1900, cbSceneParam._m0[41u].w));
            float _1947 = (cbSceneParam._m0[33u].x - sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558))) * cbSceneParam._m0[33u].y;
            float _3860 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
            float _1954 = (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1760, cbSceneParam._m0[33u].w + _1761), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1760, _1761 - cbSceneParam._m0[33u].z), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1760 - cbSceneParam._m0[33u].z, _1761 - cbSceneParam._m0[33u].w), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1760 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1761), _1904), 0.0)).x), vec4(0.25)));
            float _1958 = 1.0 - (_1954 * cbSceneParam._m0[34u].x);
            float _1959 = 1.0 - (_1954 * cbSceneParam._m0[34u].y);
            float _1960 = 1.0 - (_1954 * cbSceneParam._m0[34u].z);
            frontier_phi_52_51_ladder = isnan(_1960) ? _1707 : (isnan(_1707) ? _1960 : min(_1707, _1960));
            frontier_phi_52_51_ladder_1 = isnan(_1959) ? _1706 : (isnan(_1706) ? _1959 : min(_1706, _1959));
            frontier_phi_52_51_ladder_2 = isnan(_1958) ? _1705 : (isnan(_1705) ? _1958 : min(_1705, _1958));
        }
        else
        {
            frontier_phi_52_51_ladder = _1707;
            frontier_phi_52_51_ladder_1 = _1706;
            frontier_phi_52_51_ladder_2 = _1705;
        }
        _1771 = frontier_phi_52_51_ladder_2;
        _1773 = frontier_phi_52_51_ladder_1;
        _1775 = frontier_phi_52_51_ladder;
    }
    else
    {
        _1771 = _1705;
        _1773 = _1706;
        _1775 = _1707;
    }
    uvec4 _1780 = floatBitsToUint(cbInstanceData._m0[_426 + 5u]);
    uint _1782 = _1780.x * 14u;
    uint _1783 = _1782 + 13u;
    float _1790 = _451 + (-1.0);
    float _1796 = (cbLight._m0[_1783].x * _1790) + 1.0;
    float _1797 = (cbLight._m0[_1783].y * _1790) + 1.0;
    float _1798 = (cbLight._m0[_1783].z * _1790) + 1.0;
    float _1799 = (cbLight._m0[_1783].w * _1790) + 1.0;
    uint _1800 = _1782 + 5u;
    float _1806 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
    uint _1810 = _1782 + 4u;
    float _1819 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
    uint _1823 = _1782 | 1u;
    float _1834 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_284, _285, _286));
    float _1837 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_284, _285, _286));
    float _3896 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _3907 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1842 = (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * 0.3183098733425140380859375;
    float _1844 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * 0.3183098733425140380859375;
    float _1851 = ((cbLight._m0[_1800].x * _1806) * _1844) + (((cbLight._m0[_1810].x * _1771) * _1819) * _1842);
    float _1852 = ((_1806 * cbLight._m0[_1800].y) * _1844) + (((cbLight._m0[_1810].y * _1773) * _1819) * _1842);
    float _1853 = ((_1806 * cbLight._m0[_1800].z) * _1844) + (((cbLight._m0[_1810].z * _1775) * _1819) * _1842);
    uvec4 _1857 = floatBitsToUint(cbLight._m0[_1782 + 12u]);
    bool _1859 = _1857.x == 0u;
    float _1961;
    float _1963;
    float _1965;
    if (_1859)
    {
        _1961 = _1851;
        _1963 = _1852;
        _1965 = _1853;
    }
    else
    {
        uint _1969 = _1782 + 6u;
        float _1985 = (dot(vec3(cbLight._m0[_1782 + 2u].xyz), vec3(_284, _285, _286)) * 0.5) + 0.5;
        float _1986 = _1985 * _1985;
        float _3918 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1987 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1988 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _1961 = (((cbLight._m0[_1969].x * 0.3183098733425140380859375) * _1987) * _1988) + _1851;
        _1963 = (((cbLight._m0[_1969].y * 0.3183098733425140380859375) * _1987) * _1988) + _1852;
        _1965 = (((cbLight._m0[_1969].z * 0.3183098733425140380859375) * _1987) * _1988) + _1853;
    }
    bool _1968 = _1857.y == 0u;
    float _2023;
    float _2025;
    float _2027;
    if (_1968)
    {
        _2023 = _1961;
        _2025 = _1963;
        _2027 = _1965;
    }
    else
    {
        uint _2131 = _1782 + 7u;
        float _2147 = (dot(vec3(cbLight._m0[_1782 + 3u].xyz), vec3(_284, _285, _286)) * 0.5) + 0.5;
        float _2148 = _2147 * _2147;
        float _3934 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2149 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _2150 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
        _2023 = (((cbLight._m0[_2131].x * 0.3183098733425140380859375) * _2149) * _2150) + _1961;
        _2025 = (((cbLight._m0[_2131].y * 0.3183098733425140380859375) * _2149) * _2150) + _1963;
        _2027 = (((cbLight._m0[_2131].z * 0.3183098733425140380859375) * _2149) * _2150) + _1965;
    }
    uint _2029 = _1782 + 8u;
    float _2035 = cbLight._m0[_1782].x + _364;
    float _2036 = cbLight._m0[_1782].y + _365;
    float _2037 = cbLight._m0[_1782].z + _366;
    float _2041 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
    float _2045 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1782].xyz));
    float _3950 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2048 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _3961 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _2049 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _2050 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_2035 * _2041, _2036 * _2041, _2037 * _2041));
    float _3972 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2061 = (exp2(log2(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2067 = (0.5 / ((_2048 + 9.9999999392252902907785028219223e-09) + _2049)) * _2048;
    float _3983 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2069 = (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * 0.31831014156341552734375;
    uint _2083 = _1782 + 9u;
    float _2089 = cbLight._m0[_1823].x + _364;
    float _2090 = cbLight._m0[_1823].y + _365;
    float _2091 = cbLight._m0[_1823].z + _366;
    float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
    float _2099 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_1823].xyz));
    float _3994 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _2103 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_2089 * _2095, _2090 * _2095, _2091 * _2095));
    float _4005 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2112 = (exp2(log2(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2116 = (0.5 / ((_2102 + 9.9999999392252902907785028219223e-09) + _2049)) * _2102;
    float _4016 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2118 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * 0.31831014156341552734375;
    float _2128 = (((_2112 * cbLight._m0[_2083].x) * _2118) * _1806) + ((((cbLight._m0[_2029].x * _1771) * _2061) * _2069) * _1819);
    float _2129 = (((_2112 * cbLight._m0[_2083].y) * _2118) * _1806) + ((((cbLight._m0[_2029].y * _1773) * _2061) * _2069) * _1819);
    float _2130 = (((_2112 * cbLight._m0[_2083].z) * _2118) * _1806) + ((((cbLight._m0[_2029].z * _1775) * _2061) * _2069) * _1819);
    float _2186;
    float _2188;
    float _2190;
    if (_1859)
    {
        _2186 = _2128;
        _2188 = _2129;
        _2190 = _2130;
    }
    else
    {
        uint _2192 = _1782 + 10u;
        uint _2198 = _1782 + 2u;
        float _2204 = cbLight._m0[_2198].x + _364;
        float _2205 = cbLight._m0[_2198].y + _365;
        float _2206 = cbLight._m0[_2198].z + _366;
        float _2210 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
        float _2214 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_2198].xyz));
        float _4027 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2217 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _2218 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_2204 * _2210, _2205 * _2210, _2206 * _2210));
        float _4038 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2227 = (exp2(log2(1.0 - (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2231 = (0.5 / ((_2217 + 9.9999999392252902907785028219223e-09) + _2049)) * _2217;
        float _4049 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2233 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * 0.31831014156341552734375;
        float _2234 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
        _2186 = (((_2227 * cbLight._m0[_2192].x) * _2233) * _2234) + _2128;
        _2188 = (((_2227 * cbLight._m0[_2192].y) * _2233) * _2234) + _2129;
        _2190 = (((_2227 * cbLight._m0[_2192].z) * _2233) * _2234) + _2130;
    }
    float _2265;
    float _2267;
    float _2269;
    if (_1968)
    {
        _2265 = _2186;
        _2267 = _2188;
        _2269 = _2190;
    }
    else
    {
        uint _2276 = _1782 + 11u;
        uint _2282 = _1782 + 3u;
        float _2288 = cbLight._m0[_2282].x + _364;
        float _2289 = cbLight._m0[_2282].y + _365;
        float _2290 = cbLight._m0[_2282].z + _366;
        float _2294 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
        float _2298 = dot(vec3(_284, _285, _286), vec3(cbLight._m0[_2282].xyz));
        float _4065 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2301 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _2302 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_2288 * _2294, _2289 * _2294, _2290 * _2294));
        float _4076 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2311 = (exp2(log2(1.0 - (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2315 = (0.5 / ((_2301 + 9.9999999392252902907785028219223e-09) + _2049)) * _2301;
        float _4087 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2317 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * 0.31831014156341552734375;
        float _2318 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
        _2265 = (((_2311 * cbLight._m0[_2276].x) * _2317) * _2318) + _2186;
        _2267 = (((_2311 * cbLight._m0[_2276].y) * _2317) * _2318) + _2188;
        _2269 = (((_2311 * cbLight._m0[_2276].z) * _2317) * _2318) + _2190;
    }
    float _2383;
    float _2385;
    float _2387;
    float _2389;
    float _2391;
    float _2393;
    if (_1780.y == 0u)
    {
        uvec4 _2339 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2340 = _2339.x;
        uint _2351 = uint((float(_2339.y) * floor(float(uint(cbSceneParam._m0[85u].y * _387) / _2340))) + floor(float(uint(cbSceneParam._m0[85u].x * _386) / _2340)));
        float _2361 = (log2(_1558 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2362 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        uint _2365 = uint(isnan(14.0) ? _2362 : (isnan(_2362) ? 14.0 : min(_2362, 14.0)));
        uvec4 _2370 = texelFetch(g_lightClusterGridBuffer, int(((_2365 << 2u) + (_2351 << 6u)) >> 2u));
        uint _2371 = _2370.x;
        uint _2372 = _2339.z;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        if (((((1u << ((_2372 >> 4u) & 15u)) + 4294967295u) & _2371) == 0u) || ((_2372 & 240u) == 0u))
        {
            _2479 = 0.0;
            _2481 = 0.0;
            _2483 = 0.0;
            _2485 = 0.0;
            _2487 = 0.0;
            _2489 = 0.0;
        }
        else
        {
            float _2480;
            float _2482;
            float _2484;
            float _2486;
            float _2488;
            float _2490;
            float _2639 = 0.0;
            float _2640 = 0.0;
            float _2641 = 0.0;
            float _2642 = 0.0;
            float _2643 = 0.0;
            float _2644 = 0.0;
            uint _2645 = 0u;
            uint _2654;
            bool _2655;
            for (;;)
            {
                _2654 = texelFetch(g_lightClassification, int((((_2365 << 5u) + (_2351 << 9u)) + (_2645 << 2u)) >> 2u)).x;
                _2655 = _2654 == 0u;
                float frontier_phi_86_pred;
                float frontier_phi_86_pred_1;
                float frontier_phi_86_pred_2;
                float frontier_phi_86_pred_3;
                float frontier_phi_86_pred_4;
                float frontier_phi_86_pred_5;
                if (_2655)
                {
                    frontier_phi_86_pred = _2642;
                    frontier_phi_86_pred_1 = _2644;
                    frontier_phi_86_pred_2 = _2643;
                    frontier_phi_86_pred_3 = _2641;
                    frontier_phi_86_pred_4 = _2640;
                    frontier_phi_86_pred_5 = _2639;
                }
                else
                {
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    uint _2790;
                    _2784 = _2639;
                    _2785 = _2640;
                    _2786 = _2641;
                    _2787 = _2642;
                    _2788 = _2643;
                    _2789 = _2644;
                    _2790 = _2654;
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    for (;;)
                    {
                        uint _2794 = uint(findLSB(_2790)) + (_2645 << 5u);
                        uint _2791 = (_2790 + 4294967295u) & _2790;
                        uint _2796 = _2794 * 48u;
                        vec4 _2810 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2796)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 3u)).x));
                        uint _2816 = (_2794 * 48u) + 4u;
                        vec4 _2829 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2816)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 3u)).x));
                        uint _2835 = (_2794 * 48u) + 8u;
                        vec3 _2846 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2835)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 2u)).x));
                        float _2850 = _2810.x - _1556;
                        float _2851 = _2810.y - _1557;
                        float _2852 = _2810.z - _1558;
                        float _2853 = dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852));
                        float _2856 = inversesqrt(_2853);
                        float _2865 = 1.0 - (_2853 * _2810.w);
                        float _4113 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                        float _2866 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                        float _2867 = sqrt(_2853) * _2829.w;
                        float _2870 = 1.39999997615814208984375 / (_2867 + 1.39999997615814208984375);
                        float _2871 = _2870 * _2870;
                        float _2874 = ((1.0 - _2871) * dot(vec3(_407, _410, _413), vec3(_2856 * _2850, _2856 * _2851, _2856 * _2852))) + _2871;
                        float _2877 = _2867 * _2867;
                        float _2881 = ((isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0))) * _2866) / ((_2877 * 0.699999988079071044921875) + 1.0);
                        float _2885 = (-0.0) - _1556;
                        float _2886 = (-0.0) - _1557;
                        float _2887 = (-0.0) - _1558;
                        float _2891 = inversesqrt(dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887)));
                        float _2895 = dot(vec3(_407, _410, _413), vec3(_2891 * _2885, _2891 * _2886, _2891 * _2887));
                        float _4129 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _4140 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2899 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                        float _2903 = (0.5 / (((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) + 9.9999999392252902907785028219223e-09) + _2899)) * _2899;
                        float _4151 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                        float _2912 = (((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * 3.1415927410125732421875) / ((_2877 * 2.1991131305694580078125) + 3.141590118408203125)) * _2866;
                        _2714 = (_2881 * _2829.x) + _2787;
                        _2715 = (_2881 * _2829.y) + _2788;
                        _2716 = (_2881 * _2829.z) + _2789;
                        _2711 = (_2912 * _2846.x) + _2784;
                        _2712 = (_2912 * _2846.y) + _2785;
                        _2713 = (_2912 * _2846.z) + _2786;
                        if (_2791 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2784 = _2711;
                            _2785 = _2712;
                            _2786 = _2713;
                            _2787 = _2714;
                            _2788 = _2715;
                            _2789 = _2716;
                            _2790 = _2791;
                        }
                    }
                    frontier_phi_86_pred = _2714;
                    frontier_phi_86_pred_1 = _2716;
                    frontier_phi_86_pred_2 = _2715;
                    frontier_phi_86_pred_3 = _2713;
                    frontier_phi_86_pred_4 = _2712;
                    frontier_phi_86_pred_5 = _2711;
                }
                _2486 = frontier_phi_86_pred;
                _2490 = frontier_phi_86_pred_1;
                _2488 = frontier_phi_86_pred_2;
                _2484 = frontier_phi_86_pred_3;
                _2482 = frontier_phi_86_pred_4;
                _2480 = frontier_phi_86_pred_5;
                uint _2646 = _2645 + 1u;
                if (_2646 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2639 = _2480;
                    _2640 = _2482;
                    _2641 = _2484;
                    _2642 = _2486;
                    _2643 = _2488;
                    _2644 = _2490;
                    _2645 = _2646;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2479 = _2480;
            _2481 = _2482;
            _2483 = _2484;
            _2485 = _2486;
            _2487 = _2488;
            _2489 = _2490;
        }
        uvec4 _2493 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2494 = _2493.z;
        uint _2496 = (_2494 >> 8u) & 15u;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        if (((4294967295u << _2496) & _2371) == 0u)
        {
            _2610 = _2479;
            _2612 = _2481;
            _2614 = _2483;
            _2616 = _2485;
            _2618 = _2487;
            _2620 = _2489;
        }
        else
        {
            float _2635 = inversesqrt(dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558)));
            float frontier_phi_78_79_ladder;
            float frontier_phi_78_79_ladder_1;
            float frontier_phi_78_79_ladder_2;
            float frontier_phi_78_79_ladder_3;
            float frontier_phi_78_79_ladder_4;
            float frontier_phi_78_79_ladder_5;
            if (_2496 < ((_2494 >> 12u) & 15u))
            {
                float _2611;
                float _2613;
                float _2615;
                float _2617;
                float _2619;
                float _2621;
                float _2767 = _2479;
                float _2768 = _2481;
                float _2769 = _2483;
                float _2770 = _2485;
                float _2771 = _2487;
                float _2772 = _2489;
                uint _2773 = _2496;
                uint _2782;
                bool _2783;
                for (;;)
                {
                    _2782 = texelFetch(g_lightClassification, int((((_2365 << 5u) + (_2351 << 9u)) + (_2773 << 2u)) >> 2u)).x;
                    _2783 = _2782 == 0u;
                    float frontier_phi_97_pred;
                    float frontier_phi_97_pred_1;
                    float frontier_phi_97_pred_2;
                    float frontier_phi_97_pred_3;
                    float frontier_phi_97_pred_4;
                    float frontier_phi_97_pred_5;
                    if (_2783)
                    {
                        frontier_phi_97_pred = _2769;
                        frontier_phi_97_pred_1 = _2770;
                        frontier_phi_97_pred_2 = _2772;
                        frontier_phi_97_pred_3 = _2771;
                        frontier_phi_97_pred_4 = _2768;
                        frontier_phi_97_pred_5 = _2767;
                    }
                    else
                    {
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2929;
                        float _2930;
                        float _2931;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _2939 = _2767;
                        float _2940 = _2768;
                        float _2941 = _2769;
                        float _2942 = _2770;
                        float _2943 = _2771;
                        float _2944 = _2772;
                        uint _2945 = _2782;
                        uint _2946;
                        vec4 _2971;
                        float _2972;
                        vec4 _2987;
                        vec3 _2999;
                        vec4 _3015;
                        vec4 _3031;
                        float _3078;
                        bool _3079;
                        for (;;)
                        {
                            uint _2956 = ((_2773 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2945));
                            _2946 = (_2945 + 4294967295u) & _2945;
                            uint _2958 = _2956 * 40u;
                            _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            _2972 = _2971.w;
                            uint _2974 = (_2956 * 40u) + 4u;
                            _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            uint _2989 = (_2956 * 40u) + 8u;
                            _2999 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x));
                            uint _3002 = (_2956 * 40u) + 16u;
                            _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            uint _3018 = (_2956 * 40u) + 20u;
                            _3031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 3u)).x));
                            uint _3034 = (_2956 * 40u) + 24u;
                            vec4 _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            uint _3053 = (_2956 * 40u) + 28u;
                            vec4 _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            _3078 = fma(_1558, _3066.z, fma(_1557, _3066.y, _3066.x * _1556)) + _3066.w;
                            _3079 = !((fma(_1558, _3047.z, fma(_1557, _3047.y, _3047.x * _1556)) + _3047.w) <= 0.0);
                            float frontier_phi_103_pred;
                            float frontier_phi_103_pred_1;
                            float frontier_phi_103_pred_2;
                            float frontier_phi_103_pred_3;
                            float frontier_phi_103_pred_4;
                            float frontier_phi_103_pred_5;
                            if (_3079)
                            {
                                float _3106 = _2971.x - _1556;
                                float _3107 = _2971.y - _1557;
                                float _3108 = _2971.z - _1558;
                                float _3109 = dot(vec3(_3106, _3107, _3108), vec3(_3106, _3107, _3108));
                                float _3112 = inversesqrt(_3109);
                                float _3113 = _3112 * _3106;
                                float _3114 = _3112 * _3107;
                                float _3115 = _3112 * _3108;
                                float _3119 = 1.0 - (_3109 / (_2972 * _2972));
                                float _4162 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                                float _3120 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                                float _3124 = sqrt(_3109) * _2987.w;
                                float _3126 = 1.39999997615814208984375 / (_3124 + 1.39999997615814208984375);
                                float _3127 = _3126 * _3126;
                                float _3128 = 1.0 - _3127;
                                float _3130 = (_3128 * dot(vec3(_3113, _3114, _3115), vec3(_407, _410, _413))) + _3127;
                                float _3133 = _3124 * _3124;
                                float _3137 = (fma(_1558, _3015.z, fma(_1557, _3015.y, _3015.x * _1556)) + _3015.w) / _3078;
                                float _3138 = (fma(_1558, _3031.z, fma(_1557, _3031.y, _3031.x * _1556)) + _3031.w) / _3078;
                                float _3142 = 1.0 - dot(vec2(_3137, _3138), vec2(_3137, _3138));
                                float _4178 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                                float _3143 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                                float _3144 = _3143 * (((isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0))) * _3120) / ((_3133 * 0.699999988079071044921875) + 1.0));
                                float _3154 = dot(vec3(_407, _410, _413), vec3((-0.0) - (_1556 * _2635), (-0.0) - (_1557 * _2635), (-0.0) - (_1558 * _2635)));
                                float _4189 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3162 = (_3128 * dot(vec3(_407, _410, _413), vec3(_3113, _3114, _3115))) + _3127;
                                float _4200 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                                float _3163 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                                float _3167 = (0.5 / (((isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) + 9.9999999392252902907785028219223e-09) + _3163)) * _3163;
                                float _4211 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                                float _3174 = (_3143 * _3120) * (((isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * 3.1415927410125732421875) / ((_3133 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_103_pred = _3144 * _2987.z;
                                frontier_phi_103_pred_1 = _3144 * _2987.y;
                                frontier_phi_103_pred_2 = _3144 * _2987.x;
                                frontier_phi_103_pred_3 = _3174 * _2999.z;
                                frontier_phi_103_pred_4 = _3174 * _2999.y;
                                frontier_phi_103_pred_5 = _3174 * _2999.x;
                            }
                            else
                            {
                                frontier_phi_103_pred = 0.0;
                                frontier_phi_103_pred_1 = 0.0;
                                frontier_phi_103_pred_2 = 0.0;
                                frontier_phi_103_pred_3 = 0.0;
                                frontier_phi_103_pred_4 = 0.0;
                                frontier_phi_103_pred_5 = 0.0;
                            }
                            _3183 = frontier_phi_103_pred;
                            _3182 = frontier_phi_103_pred_1;
                            _3181 = frontier_phi_103_pred_2;
                            _3180 = frontier_phi_103_pred_3;
                            _3179 = frontier_phi_103_pred_4;
                            _3178 = frontier_phi_103_pred_5;
                            _2929 = _3181 + _2942;
                            _2930 = _3182 + _2943;
                            _2931 = _3183 + _2944;
                            _2926 = _3178 + _2939;
                            _2927 = _3179 + _2940;
                            _2928 = _3180 + _2941;
                            if (_2946 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2928;
                                _2942 = _2929;
                                _2943 = _2930;
                                _2944 = _2931;
                                _2945 = _2946;
                                continue;
                            }
                        }
                        frontier_phi_97_pred = _2928;
                        frontier_phi_97_pred_1 = _2929;
                        frontier_phi_97_pred_2 = _2931;
                        frontier_phi_97_pred_3 = _2930;
                        frontier_phi_97_pred_4 = _2927;
                        frontier_phi_97_pred_5 = _2926;
                    }
                    _2615 = frontier_phi_97_pred;
                    _2617 = frontier_phi_97_pred_1;
                    _2621 = frontier_phi_97_pred_2;
                    _2619 = frontier_phi_97_pred_3;
                    _2613 = frontier_phi_97_pred_4;
                    _2611 = frontier_phi_97_pred_5;
                    uint _2774 = _2773 + 1u;
                    if (_2774 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2767 = _2611;
                        _2768 = _2613;
                        _2769 = _2615;
                        _2770 = _2617;
                        _2771 = _2619;
                        _2772 = _2621;
                        _2773 = _2774;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_78_79_ladder = _2619;
                frontier_phi_78_79_ladder_1 = _2621;
                frontier_phi_78_79_ladder_2 = _2617;
                frontier_phi_78_79_ladder_3 = _2615;
                frontier_phi_78_79_ladder_4 = _2613;
                frontier_phi_78_79_ladder_5 = _2611;
            }
            else
            {
                frontier_phi_78_79_ladder = _2487;
                frontier_phi_78_79_ladder_1 = _2489;
                frontier_phi_78_79_ladder_2 = _2485;
                frontier_phi_78_79_ladder_3 = _2483;
                frontier_phi_78_79_ladder_4 = _2481;
                frontier_phi_78_79_ladder_5 = _2479;
            }
            _2610 = frontier_phi_78_79_ladder_5;
            _2612 = frontier_phi_78_79_ladder_4;
            _2614 = frontier_phi_78_79_ladder_3;
            _2616 = frontier_phi_78_79_ladder_2;
            _2618 = frontier_phi_78_79_ladder;
            _2620 = frontier_phi_78_79_ladder_1;
        }
        float _2625 = isnan(1.0) ? _451 : (isnan(_451) ? 1.0 : min(_451, 1.0));
        _2383 = (_2625 * _2616) + _2023;
        _2385 = (_2625 * _2618) + _2025;
        _2387 = (_2625 * _2620) + _2027;
        _2389 = ((_2610 * 0.039999999105930328369140625) * _2625) + _2265;
        _2391 = ((_2612 * 0.039999999105930328369140625) * _2625) + _2267;
        _2393 = ((_2614 * 0.039999999105930328369140625) * _2625) + _2269;
    }
    else
    {
        _2383 = _2023;
        _2385 = _2025;
        _2387 = _2027;
        _2389 = _2265;
        _2391 = _2267;
        _2393 = _2269;
    }
    uint _2399 = _427 + uint(cbMatDynParam._m0[0u].w);
    float _2405 = cbInstanceData._m0[_2399].x * _275;
    float _2406 = cbInstanceData._m0[_2399].y * _277;
    float _2407 = cbInstanceData._m0[_2399].z * _278;
    float _4227 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _4238 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _4249 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _2424 = (((isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2383 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _451))) + ((_2389 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _1289)) * cbPerFrame._m0[3u].x)) + _2405;
    float _2426 = (_2406 + ((_2391 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _1289)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2385 + ((isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))) * _451)));
    float _2428 = (_2407 + ((_2393 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1289)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2387 + ((isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))) * _451)));
    float _2429 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2430 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2431 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2437 = cbMtdParam._m0[2u].x * _2405;
    float _2438 = cbMtdParam._m0[2u].y * _2406;
    float _2439 = cbMtdParam._m0[2u].z * _2407;
    float _4275 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2441 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    uint _2442 = _426 + 6u;
    float _2450 = _386 / cbSceneParam._m0[86u].x;
    float _2451 = _387 / cbSceneParam._m0[86u].y;
    vec4 _2465 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2450, _2451, (log2((isnan(cbSceneParam._m0[77u].w) ? _305 : (isnan(_305) ? cbSceneParam._m0[77u].w : min(_305, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2467 = _2465.x;
    float _2468 = _2465.y;
    float _2469 = _2465.z;
    float _2470 = _2465.w;
    float _2541;
    float _2543;
    float _2545;
    float _2547;
    if (_305 > cbSceneParam._m0[78u].w)
    {
        float _2504 = isnan(_305) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _305 : min(cbSceneParam._m0[80u].w, _305));
        float _2505 = _2504 / _305;
        float _2516 = _2505 * _357;
        float _2517 = _358 * _2505;
        float _2518 = (-0.0) - _2517;
        float _2519 = _2505 * _359;
        float _2521 = (cbSceneParam._m0[77u].w * _2518) / _2504;
        float _2522 = _2521 + cbSceneParam._m0[79u].w;
        float _2523 = cbSceneParam._m0[79u].w - _2517;
        float _2529 = sqrt(((_2516 * _2516) + (_2517 * _2517)) + (_2519 * _2519));
        float _2532 = (1.0 - (cbSceneParam._m0[77u].w / _2504)) * _2529;
        float _2537 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2539 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2724;
        if (abs((_2518 - _2521) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2724 = ((((_2522 > 0.0) ? exp2(_2537 * _2522) : (2.0 - exp2(_2539 * _2522))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2532;
        }
        else
        {
            float _2668 = 1.0 / cbSceneParam._m0[80u].x;
            float _2669 = isnan(_2523) ? _2522 : (isnan(_2522) ? _2523 : max(_2522, _2523));
            float _2670 = isnan(_2523) ? _2522 : (isnan(_2522) ? _2523 : min(_2522, _2523));
            float _2679 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : min(_2669, 0.0));
            float _2680 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : min(_2670, 0.0));
            _2724 = ((abs(_2529 / _2518) * cbSceneParam._m0[80u].y) * ((((_2679 - _2680) * 2.0) - ((exp2(_2537 * (isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0)))) - exp2(_2537 * (isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0))))) * _2668)) - ((exp2(_2539 * _2679) - exp2(_2539 * _2680)) * _2668))) + (_2532 * cbSceneParam._m0[80u].z);
        }
        vec4 _2726 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2450, _2451, 1.0), 0.0);
        float _2735 = exp2((_2724 * (-1.44269502162933349609375)) * (1.0 - _2726.w));
        float _2736 = log2(_2735);
        float _2752 = log2(_2470);
        _2541 = (exp2(_2752 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2736 * cbSceneParam._m0[78u].x)) * _2726.x) / cbSceneParam._m0[78u].x)) + _2467;
        _2543 = (exp2(_2752 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2736 * cbSceneParam._m0[78u].y)) * _2726.y) / cbSceneParam._m0[78u].y)) + _2468;
        _2545 = (exp2(_2752 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2736 * cbSceneParam._m0[78u].z)) * _2726.z) / cbSceneParam._m0[78u].z)) + _2469;
        _2547 = _2735 * _2470;
    }
    else
    {
        _2541 = _2467;
        _2543 = _2468;
        _2545 = _2469;
        _2547 = _2470;
    }
    bool _2762;
    vec4 _2557;
    vec4 _2580;
    float _2582;
    float _2586;
    float _2587;
    float _2588;
    float _2591;
    float _2594;
    float _2597;
    float _2598;
    bool _2609;
    for (;;)
    {
        _2557 = cbMatDynParam._m0[0u];
        float _2559 = roundEven(_2557.y);
        bool _2560 = _2559 == 3.0;
        float _2562 = log2(_2547);
        float _2566 = exp2(_2562 * cbSceneParam._m0[78u].x);
        float _2567 = exp2(_2562 * cbSceneParam._m0[78u].y);
        float _2568 = exp2(_2562 * cbSceneParam._m0[78u].z);
        float _2569 = _2566 * _2429;
        float _2570 = _2567 * _2430;
        float _2571 = _2568 * _2431;
        float _2578 = _373 + (-0.5);
        _2580 = cbMtdParam._m0[1u];
        _2582 = _2580.y * _2578;
        float _2585 = (_2559 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2586 = _2585 * (_2560 ? _2569 : (_2569 + (cbSceneParam._m0[72u].w * _2541)));
        _2587 = _2585 * (_2560 ? _2570 : (_2570 + (cbSceneParam._m0[72u].w * _2543)));
        _2588 = _2585 * (_2560 ? _2571 : (_2571 + (cbSceneParam._m0[72u].w * _2545)));
        _2591 = ((_2437 * _2441) * _2566) * _2585;
        _2594 = ((_2438 * _2441) * _2567) * _2585;
        _2597 = ((_2439 * _2441) * _2568) * _2585;
        _2598 = _2578 * 0.999000012874603271484375;
        _2609 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2609)
        {
            if ((cbInstanceData._m0[_426 + 7u].x + _2598) < 0.5)
            {
                _2762 = true;
                break;
            }
        }
        uint _2703 = _427 + uint(_2557.w);
        if ((cbInstanceData._m0[_2703].w < 1.0) && ((cbInstanceData._m0[_2703].w + _2598) < 0.5))
        {
            _2762 = true;
            break;
        }
        if ((_2582 + 1.0) < _2580.x)
        {
            _2762 = true;
            break;
        }
        _2762 = false;
        break;
    }
    float _2917;
    if (_2762)
    {
        discard_state = true;
        _2917 = 0.0;
    }
    else
    {
        _2917 = cbInstanceData._m0[_2442].w;
    }
    SV_Target.x = _2586;
    SV_Target.y = _2587;
    SV_Target.z = _2588;
    SV_Target.w = _2917;
    SV_Target_1.x = _2591;
    SV_Target_1.y = _2594;
    SV_Target_1.z = _2597;
    SV_Target_1.w = cbInstanceData._m0[_2442].w;
    discard_exit();
}


