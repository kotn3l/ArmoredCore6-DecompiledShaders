#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _777;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _165 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _166 = _165 * NORMAL.x;
    float _167 = _165 * NORMAL.y;
    float _168 = _165 * NORMAL.z;
    float _173;
    float _174;
    float _175;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _173 = (-0.0) - _166;
        _174 = (-0.0) - _167;
        _175 = (-0.0) - _168;
    }
    else
    {
        _173 = _166;
        _174 = _167;
        _175 = _168;
    }
    vec4 _195 = texture(sampler2D(M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _201 = _195.x * cbMtdParam._m0[9u].x;
    float _202 = _195.y * cbMtdParam._m0[9u].y;
    float _203 = _195.z * cbMtdParam._m0[9u].z;
    vec4 _224 = texture(sampler2D(M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _226 = _224.x;
    float _227 = _224.y;
    float _228 = _224.z;
    float _229 = cbMtdParam._m0[11u].w * cbMtdParam._m0[12u].x;
    float _230 = _229 * _226;
    float _231 = _229 * _227;
    float _232 = _229 * _228;
    float _233 = isnan(_231) ? _230 : (isnan(_230) ? _231 : max(_230, _231));
    float _234 = isnan(_232) ? _233 : (isnan(_233) ? _232 : max(_233, _232));
    float _237;
    float _239;
    if (_234 < 1.1920928955078125e-07)
    {
        _237 = 0.0;
        _239 = 0.0;
    }
    else
    {
        float _265 = isnan(_231) ? _230 : (isnan(_230) ? _231 : min(_230, _231));
        float _267 = _234 - (isnan(_232) ? _265 : (isnan(_265) ? _232 : min(_265, _232)));
        float _240 = _267 / _234;
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        if (_267 < 1.1920928955078125e-07)
        {
            frontier_phi_3_4_ladder = _240;
            frontier_phi_3_4_ladder_1 = 0.0;
        }
        else
        {
            float _1178;
            if (_234 == _230)
            {
                _1178 = ((_229 * (_227 - _228)) / _267) * 0.16666667163372039794921875;
            }
            else
            {
                float frontier_phi_16_12_ladder;
                if (_234 == _231)
                {
                    frontier_phi_16_12_ladder = (((_229 * (_228 - _226)) / _267) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
                }
                else
                {
                    frontier_phi_16_12_ladder = (((_229 * (_226 - _227)) / _267) * 0.16666667163372039794921875) + 0.666666686534881591796875;
                }
                _1178 = frontier_phi_16_12_ladder;
            }
            float _1183 = (_1178 < 0.0) ? (_1178 + 1.0) : _1178;
            frontier_phi_3_4_ladder = _240;
            frontier_phi_3_4_ladder_1 = _1183 - floor(_1183);
        }
        _237 = frontier_phi_3_4_ladder_1;
        _239 = frontier_phi_3_4_ladder;
    }
    float _241 = _239 + cbMtdParam._m0[11u].y;
    float _245 = fract(cbMtdParam._m0[11u].z + _237) * 6.0;
    uint _248 = uint(int(floor(_245)));
    float _250 = _245 - float(int(_248));
    float _253 = (1.0 - _241) * _234;
    float _256 = (1.0 - (_250 * _241)) * _234;
    float _260 = (1.0 - ((1.0 - _250) * _241)) * _234;
    float _269;
    float _271;
    float _272;
    if ((_248 == 0u) || (_248 == 6u))
    {
        _269 = _234;
        _271 = _260;
        _272 = _253;
    }
    else
    {
        float frontier_phi_5_6_ladder;
        float frontier_phi_5_6_ladder_1;
        float frontier_phi_5_6_ladder_2;
        if (_248 == 1u)
        {
            frontier_phi_5_6_ladder = _253;
            frontier_phi_5_6_ladder_1 = _234;
            frontier_phi_5_6_ladder_2 = _256;
        }
        else
        {
            float frontier_phi_5_6_ladder_10_ladder;
            float frontier_phi_5_6_ladder_10_ladder_1;
            float frontier_phi_5_6_ladder_10_ladder_2;
            if (_248 == 2u)
            {
                frontier_phi_5_6_ladder_10_ladder = _260;
                frontier_phi_5_6_ladder_10_ladder_1 = _234;
                frontier_phi_5_6_ladder_10_ladder_2 = _253;
            }
            else
            {
                float frontier_phi_5_6_ladder_10_ladder_15_ladder;
                float frontier_phi_5_6_ladder_10_ladder_15_ladder_1;
                float frontier_phi_5_6_ladder_10_ladder_15_ladder_2;
                if (_248 == 3u)
                {
                    frontier_phi_5_6_ladder_10_ladder_15_ladder = _234;
                    frontier_phi_5_6_ladder_10_ladder_15_ladder_1 = _256;
                    frontier_phi_5_6_ladder_10_ladder_15_ladder_2 = _253;
                }
                else
                {
                    bool _1224 = _248 == 4u;
                    frontier_phi_5_6_ladder_10_ladder_15_ladder = _1224 ? _234 : _256;
                    frontier_phi_5_6_ladder_10_ladder_15_ladder_1 = _253;
                    frontier_phi_5_6_ladder_10_ladder_15_ladder_2 = _1224 ? _260 : _234;
                }
                frontier_phi_5_6_ladder_10_ladder = frontier_phi_5_6_ladder_10_ladder_15_ladder;
                frontier_phi_5_6_ladder_10_ladder_1 = frontier_phi_5_6_ladder_10_ladder_15_ladder_1;
                frontier_phi_5_6_ladder_10_ladder_2 = frontier_phi_5_6_ladder_10_ladder_15_ladder_2;
            }
            frontier_phi_5_6_ladder = frontier_phi_5_6_ladder_10_ladder;
            frontier_phi_5_6_ladder_1 = frontier_phi_5_6_ladder_10_ladder_1;
            frontier_phi_5_6_ladder_2 = frontier_phi_5_6_ladder_10_ladder_2;
        }
        _269 = frontier_phi_5_6_ladder_2;
        _271 = frontier_phi_5_6_ladder_1;
        _272 = frontier_phi_5_6_ladder;
    }
    float _277 = inversesqrt(dot(vec3(_173, _174, _175), vec3(_173, _174, _175)));
    float _278 = _277 * _173;
    float _279 = _277 * _174;
    float _280 = _277 * _175;
    float _3024 = isnan(0.0) ? _201 : (isnan(_201) ? 0.0 : max(_201, 0.0));
    float _3035 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    float _3046 = isnan(0.0) ? _203 : (isnan(_203) ? 0.0 : max(_203, 0.0));
    float _299 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _341 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _351 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _341);
    float _352 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _341);
    float _353 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _341);
    float _357 = inversesqrt(dot(vec3(_351, _352, _353), vec3(_351, _352, _353)));
    float _358 = _351 * _357;
    float _359 = _352 * _357;
    float _360 = _353 * _357;
    float _366 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _367 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _387 = fma(_280, cbSceneParam._m0[5u].z, fma(_279, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _278));
    float _390 = fma(_280, cbSceneParam._m0[6u].z, fma(_279, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _278));
    float _393 = fma(_280, cbSceneParam._m0[7u].z, fma(_279, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _278));
    uint _406 = uint(roundEven(NORMAL.w)) * 13u;
    uint _407 = _406 + 9u;
    uint _408 = _407 + uint(cbMatDynParam._m0[0u].w);
    float _414 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3024 : (isnan(_3024) ? 1.0 : min(_3024, 1.0)))) * cbInstanceData._m0[_408].x;
    float _415 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3035 : (isnan(_3035) ? 1.0 : min(_3035, 1.0)))) * cbInstanceData._m0[_408].y;
    float _416 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3046 : (isnan(_3046) ? 1.0 : min(_3046, 1.0)))) * cbInstanceData._m0[_408].z;
    float _3057 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _417 = isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0));
    float _3068 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _418 = isnan(1.0) ? _3068 : (isnan(_3068) ? 1.0 : min(_3068, 1.0));
    float _3079 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _419 = isnan(1.0) ? _3079 : (isnan(_3079) ? 1.0 : min(_3079, 1.0));
    vec4 _428 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _366, cbSceneParam._m0[86u].y * _367));
    float _431 = _428.x * TEXCOORD.z;
    float _432 = dot(vec3(_278, _279, _280), vec3(_358, _359, _360));
    float _435 = _432 * 2.0;
    float _440 = (_435 * _278) - _358;
    float _441 = (_435 * _279) - _359;
    float _442 = (_435 * _280) - _360;
    float _464 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _468 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _472 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _776;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    float _791;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _501 = fma(_472, cbModelParam._m0[26u].z, fma(_468, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _464));
        float _505 = fma(_472, cbModelParam._m0[27u].z, fma(_468, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _464));
        float _509 = fma(_472, cbModelParam._m0[28u].z, fma(_468, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _464));
        float _534 = _464 + _278;
        float _535 = _468 + _279;
        float _536 = _472 + _280;
        float _546 = fma(_536, cbModelParam._m0[26u].z, fma(_535, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _534)) - _501;
        float _547 = fma(_536, cbModelParam._m0[27u].z, fma(_535, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _534)) - _505;
        float _548 = fma(_536, cbModelParam._m0[28u].z, fma(_535, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _534)) - _509;
        float _552 = inversesqrt(dot(vec3(_546, _547, _548), vec3(_546, _547, _548)));
        float _565 = ((_552 * _546) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_501 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _566 = ((_552 * _547) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_505 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _567 = ((_552 * _548) / cbModelParam._m0[34u].z) + ((((((_509 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _570 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_565, _566, _567), 0.0);
        vec4 _577 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_565, _566, _567), 0.0);
        vec4 _584 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_565, _566, _567), 0.0);
        vec4 _591 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_565, _566, _567), 0.0);
        float _604 = exp2((_570.w + (-0.5)) * 20.0) * 2.0;
        float _605 = _604 * (_570.x + (-0.5));
        float _606 = _604 * (_570.y + (-0.5));
        float _607 = _604 * (_570.z + (-0.5));
        float _614 = exp2((_577.w + (-0.5)) * 20.0) * 2.0;
        float _615 = _614 * (_577.x + (-0.5));
        float _616 = _614 * (_577.y + (-0.5));
        float _617 = _614 * (_577.z + (-0.5));
        float _624 = exp2((_584.w + (-0.5)) * 20.0) * 2.0;
        float _625 = _624 * (_584.x + (-0.5));
        float _626 = _624 * (_584.y + (-0.5));
        float _627 = _624 * (_584.z + (-0.5));
        float _634 = exp2((_591.w + (-0.5)) * 20.0) * 2.0;
        float _635 = _634 * (_591.x + (-0.5));
        float _636 = _634 * (_591.y + (-0.5));
        float _637 = _634 * (_591.z + (-0.5));
        float _638 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _639 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
        float _640 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
        float _641 = _605 * 0.5;
        float _642 = _615 * 0.5;
        float _643 = _625 * 0.5;
        float _644 = dot(vec3(_641, _642, _643), vec3(_641, _642, _643));
        float _649 = (_644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_644);
        float _658 = (dot(vec3(_278, _279, _280), vec3(_649 * _641, _649 * _642, _649 * _643)) + 1.0) * 0.5;
        float _3105 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _668 = sqrt(((_642 * _642) + (_641 * _641)) + (_643 * _643)) / (_638 + 9.9999997473787516355514526367188e-06);
        float _3116 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _669 = isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0));
        float _670 = _669 * 2.0;
        float _674 = (1.0 - _669) / (_669 + 1.0);
        float _3127 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _675 = isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0));
        float _684 = ((((1.0 - _675) * (_670 + 2.0)) * exp2(log2(isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0))) * (_670 + 1.0))) + _675) * _638;
        float _685 = _606 * 0.5;
        float _686 = _616 * 0.5;
        float _687 = _626 * 0.5;
        float _688 = dot(vec3(_685, _686, _687), vec3(_685, _686, _687));
        float _693 = (_688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_688);
        float _701 = (dot(vec3(_278, _279, _280), vec3(_693 * _685, _693 * _686, _693 * _687)) + 1.0) * 0.5;
        float _3138 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _710 = sqrt(((_686 * _686) + (_685 * _685)) + (_687 * _687)) / (_639 + 9.9999997473787516355514526367188e-06);
        float _3149 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0));
        float _712 = _711 * 2.0;
        float _716 = (1.0 - _711) / (_711 + 1.0);
        float _3160 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _717 = isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0));
        float _726 = ((((1.0 - _717) * (_712 + 2.0)) * exp2(log2(isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0))) * (_712 + 1.0))) + _717) * _639;
        float _727 = _607 * 0.5;
        float _728 = _617 * 0.5;
        float _729 = _627 * 0.5;
        float _730 = dot(vec3(_727, _728, _729), vec3(_727, _728, _729));
        float _735 = (_730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_730);
        float _743 = (dot(vec3(_278, _279, _280), vec3(_735 * _727, _735 * _728, _735 * _729)) + 1.0) * 0.5;
        float _3171 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _752 = sqrt(((_728 * _728) + (_727 * _727)) + (_729 * _729)) / (_640 + 9.9999997473787516355514526367188e-06);
        float _3182 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0));
        float _754 = _753 * 2.0;
        float _758 = (1.0 - _753) / (_753 + 1.0);
        float _3193 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0));
        float _768 = ((((1.0 - _759) * (_754 + 2.0)) * exp2(log2(isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0))) * (_754 + 1.0))) + _759) * _640;
        _776 = _607;
        _778 = _606;
        _779 = _605;
        _780 = _617;
        _781 = _616;
        _782 = _615;
        _783 = _627;
        _784 = _626;
        _785 = _625;
        _786 = _640;
        _787 = _639;
        _788 = _638;
        _789 = cbModelParam._m0[36u].z * (isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0)));
        _790 = cbModelParam._m0[36u].z * (isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0)));
        _791 = cbModelParam._m0[36u].z * (isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0)));
    }
    else
    {
        _776 = _777;
        _778 = _777;
        _779 = _777;
        _780 = _777;
        _781 = _777;
        _782 = _777;
        _783 = _777;
        _784 = _777;
        _785 = _777;
        _786 = _777;
        _787 = _777;
        _788 = _777;
        _789 = 0.0;
        _790 = 0.0;
        _791 = 0.0;
    }
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _824 = fma(_472, cbModelParam._m0[30u].z, fma(_468, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _464));
        float _828 = fma(_472, cbModelParam._m0[31u].z, fma(_468, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _464));
        float _832 = fma(_472, cbModelParam._m0[32u].z, fma(_468, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _464));
        float _855 = _464 + _278;
        float _856 = _468 + _279;
        float _857 = _472 + _280;
        float _867 = fma(_857, cbModelParam._m0[30u].z, fma(_856, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _855)) - _824;
        float _868 = fma(_857, cbModelParam._m0[31u].z, fma(_856, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _855)) - _828;
        float _869 = fma(_857, cbModelParam._m0[32u].z, fma(_856, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _855)) - _832;
        float _873 = inversesqrt(dot(vec3(_867, _868, _869), vec3(_867, _868, _869)));
        float _886 = ((_873 * _867) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_824 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _887 = ((_873 * _868) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_828 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _888 = ((_873 * _869) / cbModelParam._m0[35u].z) + ((((((_832 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_886, _887, _888), 0.0);
        float _923 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_890.x + (-0.5));
        float _925 = _923 * (_890.y + (-0.5));
        float _926 = _923 * (_890.z + (-0.5));
        float _933 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_897.x + (-0.5));
        float _935 = _933 * (_897.y + (-0.5));
        float _936 = _933 * (_897.z + (-0.5));
        float _943 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_904.x + (-0.5));
        float _945 = _943 * (_904.y + (-0.5));
        float _946 = _943 * (_904.z + (-0.5));
        float _953 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_911.x + (-0.5));
        float _955 = _953 * (_911.y + (-0.5));
        float _956 = _953 * (_911.z + (-0.5));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = _924 * 0.5;
        float _961 = _934 * 0.5;
        float _962 = _944 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _976 = (dot(vec3(_278, _279, _280), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _3234 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _985 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3245 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3256 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0))) * (_987 + 1.0))) + _992) * _957;
        float _1002 = _925 * 0.5;
        float _1003 = _935 * 0.5;
        float _1004 = _945 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_278, _279, _280), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3267 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _3278 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3289 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0))) * (_1029 + 1.0))) + _1034) * _958;
        float _1044 = _926 * 0.5;
        float _1045 = _936 * 0.5;
        float _1046 = _946 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_278, _279, _280), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3300 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3311 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3322 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0))) * (_1071 + 1.0))) + _1076) * _959;
        _1093 = _926;
        _1094 = _925;
        _1095 = _924;
        _1096 = _936;
        _1097 = _935;
        _1098 = _934;
        _1099 = _946;
        _1100 = _945;
        _1101 = _944;
        _1102 = _959;
        _1103 = _958;
        _1104 = _957;
        _1105 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1106 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1107 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
    }
    else
    {
        _1093 = _777;
        _1094 = _777;
        _1095 = _777;
        _1096 = _777;
        _1097 = _777;
        _1098 = _777;
        _1099 = _777;
        _1100 = _777;
        _1101 = _777;
        _1102 = _777;
        _1103 = _777;
        _1104 = _777;
        _1105 = 0.0;
        _1106 = 0.0;
        _1107 = 0.0;
    }
    float _1117 = (cbModelParam._m0[1u].x * (_1105 - _789)) + _789;
    float _1118 = (cbModelParam._m0[1u].x * (_1106 - _790)) + _790;
    float _1119 = (cbModelParam._m0[1u].x * (_1107 - _791)) + _791;
    float _1140 = fma(_1119, cbSceneParam._m0[89u].z, fma(_1118, cbSceneParam._m0[89u].y, _1117 * cbSceneParam._m0[89u].x));
    float _1143 = fma(_1119, cbSceneParam._m0[90u].z, fma(_1118, cbSceneParam._m0[90u].y, _1117 * cbSceneParam._m0[90u].x));
    float _1146 = fma(_1119, cbSceneParam._m0[91u].z, fma(_1118, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1117));
    float _1161 = _440 * 0.5;
    float _1162 = _441 * 0.5;
    float _1163 = _442 * 0.5;
    float _1164 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_1095, _1098, _1101, _1104));
    float _1167 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_1094, _1097, _1100, _1103));
    float _1170 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_1093, _1096, _1099, _1102));
    float _1222;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1195 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_776, _780, _783, _786));
        float _1199 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_778, _781, _784, _787));
        float _1203 = dot(vec4(_1161, _1162, _1163, 1.0), vec4(_779, _782, _785, _788));
        float _1210 = dot(vec4(cbModelParam._m0[39u]), vec4(_1161, _1162, _1163, 1.0));
        _1222 = dot(vec3(isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)), isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)), isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1210) ? 0.0 : (isnan(0.0) ? _1210 : max(0.0, _1210))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1222 = 1.0;
    }
    float _1235;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1226 = dot(vec4(cbModelParam._m0[40u]), vec4(_1161, _1162, _1163, 1.0));
        _1235 = dot(vec3(isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)), isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)), isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1226) ? 0.0 : (isnan(0.0) ? _1226 : max(0.0, _1226))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1235 = 1.0;
    }
    float _1239 = (_1235 * cbModelParam._m0[1u].x) + (_1222 * (1.0 - cbModelParam._m0[1u].x));
    float _1248 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1330;
    float _1332;
    float _1334;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1297 = fma(_472, cbModelParam._m0[13u].z, fma(_468, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _464)) + cbModelParam._m0[13u].w;
        float _1301 = fma(_472, cbModelParam._m0[14u].z, fma(_468, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _464)) + cbModelParam._m0[14u].w;
        float _1305 = fma(_472, cbModelParam._m0[15u].z, fma(_468, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _464)) + cbModelParam._m0[15u].w;
        float _1308 = fma(_442, cbModelParam._m0[13u].z, fma(_441, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _440));
        float _1311 = fma(_442, cbModelParam._m0[14u].z, fma(_441, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _440));
        float _1314 = fma(_442, cbModelParam._m0[15u].z, fma(_441, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _440));
        float _1340;
        if (_1308 > 0.0)
        {
            _1340 = abs((1.0 - _1297) / _1308);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1308 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1297 + 1.0) / _1308);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1340 = frontier_phi_29_27_ladder;
        }
        float _1567;
        if (_1311 > 0.0)
        {
            _1567 = abs((1.0 - _1301) / _1311);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1311 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1301 + 1.0) / _1311);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1567 = frontier_phi_38_34_ladder;
        }
        float _1759;
        if (_1314 > 0.0)
        {
            _1759 = abs((1.0 - _1305) / _1314);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1314 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1305 + 1.0) / _1314);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _1759 = frontier_phi_50_45_ladder;
        }
        float _1761 = isnan(_1567) ? _1340 : (isnan(_1340) ? _1567 : min(_1340, _1567));
        float _1762 = isnan(_1759) ? _1761 : (isnan(_1761) ? _1759 : min(_1761, _1759));
        float _1766 = (_1762 * _1308) + _1297;
        float _1767 = (_1762 * _1311) + _1301;
        float _1768 = (_1762 * _1314) + _1305;
        float _1769 = _1762 * 9.9999997473787516355514526367188e-05;
        float _1771 = (-1.0) - _1769;
        float _1773 = _1769 + 1.0;
        float frontier_phi_28_50_ladder;
        float frontier_phi_28_50_ladder_1;
        float frontier_phi_28_50_ladder_2;
        if ((_1768 > _1773) || ((_1768 < _1771) || ((_1767 > _1773) || ((_1767 < _1771) || ((_1766 < _1771) || (_1766 > _1773))))))
        {
            frontier_phi_28_50_ladder = 0.0;
            frontier_phi_28_50_ladder_1 = 0.0;
            frontier_phi_28_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1865 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1768, cbModelParam._m0[9u].z, fma(_1767, cbModelParam._m0[9u].y, _1766 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1768, cbModelParam._m0[10u].z, fma(_1767, cbModelParam._m0[10u].y, _1766 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1768, cbModelParam._m0[11u].z, fma(_1767, cbModelParam._m0[11u].y, _1766 * cbModelParam._m0[11u].x))), _1248);
            frontier_phi_28_50_ladder = _1865.z * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_1 = _1865.y * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_2 = _1865.x * cbModelParam._m0[1u].y;
        }
        _1330 = frontier_phi_28_50_ladder_2;
        _1332 = frontier_phi_28_50_ladder_1;
        _1334 = frontier_phi_28_50_ladder;
    }
    else
    {
        vec4 _1318 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_440, _441, _442), _1248);
        _1330 = _1318.x * cbModelParam._m0[1u].y;
        _1332 = _1318.y * cbModelParam._m0[1u].y;
        _1334 = _1318.z * cbModelParam._m0[1u].y;
    }
    float _1337 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1430;
    float _1432;
    float _1434;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1394 = fma(_472, cbModelParam._m0[21u].z, fma(_468, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _464)) + cbModelParam._m0[21u].w;
        float _1398 = fma(_472, cbModelParam._m0[22u].z, fma(_468, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _464)) + cbModelParam._m0[22u].w;
        float _1402 = fma(_472, cbModelParam._m0[23u].z, fma(_468, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _464)) + cbModelParam._m0[23u].w;
        float _1405 = fma(_442, cbModelParam._m0[21u].z, fma(_441, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _440));
        float _1408 = fma(_442, cbModelParam._m0[22u].z, fma(_441, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _440));
        float _1411 = fma(_442, cbModelParam._m0[23u].z, fma(_441, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _440));
        float _1572;
        if (_1405 > 0.0)
        {
            _1572 = abs((1.0 - _1394) / _1405);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1394 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1572 = frontier_phi_40_36_ladder;
        }
        float _1786;
        if (_1408 > 0.0)
        {
            _1786 = abs((1.0 - _1398) / _1408);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1398 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _1786 = frontier_phi_52_47_ladder;
        }
        float _1937;
        if (_1411 > 0.0)
        {
            _1937 = abs((1.0 - _1402) / _1411);
        }
        else
        {
            float frontier_phi_61_58_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_61_58_ladder = abs((_1402 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_61_58_ladder = 5000.0;
            }
            _1937 = frontier_phi_61_58_ladder;
        }
        float _1939 = isnan(_1786) ? _1572 : (isnan(_1572) ? _1786 : min(_1572, _1786));
        float _1940 = isnan(_1937) ? _1939 : (isnan(_1939) ? _1937 : min(_1939, _1937));
        float _1944 = (_1940 * _1405) + _1394;
        float _1945 = (_1940 * _1408) + _1398;
        float _1946 = (_1940 * _1411) + _1402;
        float _1947 = _1940 * 9.9999997473787516355514526367188e-05;
        float _1948 = (-1.0) - _1947;
        float _1950 = _1947 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_1946 > _1950) || ((_1946 < _1948) || ((_1945 > _1950) || ((_1945 < _1948) || ((_1944 < _1948) || (_1944 > _1950))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2173 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1946, cbModelParam._m0[17u].z, fma(_1945, cbModelParam._m0[17u].y, _1944 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1946, cbModelParam._m0[18u].z, fma(_1945, cbModelParam._m0[18u].y, _1944 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1946, cbModelParam._m0[19u].z, fma(_1945, cbModelParam._m0[19u].y, _1944 * cbModelParam._m0[19u].x))), _1337);
            frontier_phi_37_61_ladder = _2173.y * cbModelParam._m0[1u].z;
            frontier_phi_37_61_ladder_1 = _2173.z * cbModelParam._m0[1u].z;
            frontier_phi_37_61_ladder_2 = _2173.x * cbModelParam._m0[1u].z;
        }
        _1430 = frontier_phi_37_61_ladder_2;
        _1432 = frontier_phi_37_61_ladder;
        _1434 = frontier_phi_37_61_ladder_1;
    }
    else
    {
        vec4 _1414 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_440, _441, _442), _1337);
        _1430 = _1414.x * cbModelParam._m0[1u].z;
        _1432 = _1414.y * cbModelParam._m0[1u].z;
        _1434 = _1414.z * cbModelParam._m0[1u].z;
    }
    float _1446 = _431 * 0.01200000010430812835693359375;
    float _1448 = _1446 * ((cbModelParam._m0[1u].w * (_1430 - _1330)) + _1330);
    float _1449 = _1446 * ((cbModelParam._m0[1u].w * (_1432 - _1332)) + _1332);
    float _1450 = _1446 * ((cbModelParam._m0[1u].w * (_1434 - _1334)) + _1334);
    float _1453 = fma(_1450, cbSceneParam._m0[89u].z, fma(_1449, cbSceneParam._m0[89u].y, _1448 * cbSceneParam._m0[89u].x));
    float _1456 = fma(_1450, cbSceneParam._m0[90u].z, fma(_1449, cbSceneParam._m0[90u].y, _1448 * cbSceneParam._m0[90u].x));
    float _1459 = fma(_1450, cbSceneParam._m0[91u].z, fma(_1449, cbSceneParam._m0[91u].y, _1448 * cbSceneParam._m0[91u].x));
    vec4 _1467 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_366, _367));
    float _1469 = _1467.w;
    float _1481 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1469);
    float _1482 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1469);
    float _1483 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1469);
    uvec4 _1487 = floatBitsToUint(cbInstanceData._m0[_406 + 5u]);
    uint _1489 = _1487.x * 14u;
    uint _1490 = _1489 + 13u;
    float _1497 = _431 + (-1.0);
    float _1503 = (cbLight._m0[_1490].x * _1497) + 1.0;
    float _1504 = (cbLight._m0[_1490].y * _1497) + 1.0;
    float _1505 = (cbLight._m0[_1490].z * _1497) + 1.0;
    float _1506 = (cbLight._m0[_1490].w * _1497) + 1.0;
    uint _1507 = _1489 + 5u;
    float _1513 = isnan(1.0) ? _1504 : (isnan(_1504) ? 1.0 : min(_1504, 1.0));
    uint _1517 = _1489 + 4u;
    float _1526 = isnan(1.0) ? _1503 : (isnan(_1503) ? 1.0 : min(_1503, 1.0));
    uint _1530 = _1489 | 1u;
    float _1541 = dot(vec3(cbLight._m0[_1489].xyz), vec3(_278, _279, _280));
    float _1544 = dot(vec3(cbLight._m0[_1530].xyz), vec3(_278, _279, _280));
    float _3458 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
    float _3469 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
    float _1549 = (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))) * 0.3183098733425140380859375;
    float _1551 = (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * 0.3183098733425140380859375;
    float _1558 = ((cbLight._m0[_1507].x * _1513) * _1551) + (((cbLight._m0[_1517].x * _1481) * _1526) * _1549);
    float _1559 = ((_1513 * cbLight._m0[_1507].y) * _1551) + (((cbLight._m0[_1517].y * _1482) * _1526) * _1549);
    float _1560 = ((_1513 * cbLight._m0[_1507].z) * _1551) + (((cbLight._m0[_1517].z * _1483) * _1526) * _1549);
    uvec4 _1564 = floatBitsToUint(cbLight._m0[_1489 + 12u]);
    bool _1566 = _1564.x == 0u;
    float _1577;
    float _1579;
    float _1581;
    if (_1566)
    {
        _1577 = _1558;
        _1579 = _1559;
        _1581 = _1560;
    }
    else
    {
        uint _1585 = _1489 + 6u;
        float _1601 = (dot(vec3(cbLight._m0[_1489 + 2u].xyz), vec3(_278, _279, _280)) * 0.5) + 0.5;
        float _1602 = _1601 * _1601;
        float _3480 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _1604 = isnan(1.0) ? _1505 : (isnan(_1505) ? 1.0 : min(_1505, 1.0));
        _1577 = (((cbLight._m0[_1585].x * 0.3183098733425140380859375) * _1603) * _1604) + _1558;
        _1579 = (((cbLight._m0[_1585].y * 0.3183098733425140380859375) * _1603) * _1604) + _1559;
        _1581 = (((cbLight._m0[_1585].z * 0.3183098733425140380859375) * _1603) * _1604) + _1560;
    }
    bool _1584 = _1564.y == 0u;
    float _1622;
    float _1624;
    float _1626;
    if (_1584)
    {
        _1622 = _1577;
        _1624 = _1579;
        _1626 = _1581;
    }
    else
    {
        uint _1730 = _1489 + 7u;
        float _1746 = (dot(vec3(cbLight._m0[_1489 + 3u].xyz), vec3(_278, _279, _280)) * 0.5) + 0.5;
        float _1747 = _1746 * _1746;
        float _3496 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _1749 = isnan(1.0) ? _1506 : (isnan(_1506) ? 1.0 : min(_1506, 1.0));
        _1622 = (((cbLight._m0[_1730].x * 0.3183098733425140380859375) * _1748) * _1749) + _1577;
        _1624 = (((cbLight._m0[_1730].y * 0.3183098733425140380859375) * _1748) * _1749) + _1579;
        _1626 = (((cbLight._m0[_1730].z * 0.3183098733425140380859375) * _1748) * _1749) + _1581;
    }
    uint _1628 = _1489 + 8u;
    float _1634 = cbLight._m0[_1489].x + _358;
    float _1635 = cbLight._m0[_1489].y + _359;
    float _1636 = cbLight._m0[_1489].z + _360;
    float _1640 = inversesqrt(dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636)));
    float _1644 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_1489].xyz));
    float _3512 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
    float _1647 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _3523 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _1648 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _1649 = dot(vec3(cbLight._m0[_1489].xyz), vec3(_1634 * _1640, _1635 * _1640, _1636 * _1640));
    float _3534 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
    float _1660 = (exp2(log2(1.0 - (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1666 = (0.5 / ((_1647 + 9.9999999392252902907785028219223e-09) + _1648)) * _1647;
    float _3545 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
    float _1668 = (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * 0.31831014156341552734375;
    uint _1682 = _1489 + 9u;
    float _1688 = cbLight._m0[_1530].x + _358;
    float _1689 = cbLight._m0[_1530].y + _359;
    float _1690 = cbLight._m0[_1530].z + _360;
    float _1694 = inversesqrt(dot(vec3(_1688, _1689, _1690), vec3(_1688, _1689, _1690)));
    float _1698 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_1530].xyz));
    float _3556 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _1701 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _1702 = dot(vec3(cbLight._m0[_1530].xyz), vec3(_1688 * _1694, _1689 * _1694, _1690 * _1694));
    float _3567 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1711 = (exp2(log2(1.0 - (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1715 = (0.5 / ((_1701 + 9.9999999392252902907785028219223e-09) + _1648)) * _1701;
    float _3578 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1717 = (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * 0.31831014156341552734375;
    float _1727 = (((_1711 * cbLight._m0[_1682].x) * _1717) * _1513) + ((((cbLight._m0[_1628].x * _1481) * _1660) * _1668) * _1526);
    float _1728 = (((_1711 * cbLight._m0[_1682].y) * _1717) * _1513) + ((((cbLight._m0[_1628].y * _1482) * _1660) * _1668) * _1526);
    float _1729 = (((_1711 * cbLight._m0[_1682].z) * _1717) * _1513) + ((((cbLight._m0[_1628].z * _1483) * _1660) * _1668) * _1526);
    float _1791;
    float _1793;
    float _1795;
    if (_1566)
    {
        _1791 = _1727;
        _1793 = _1728;
        _1795 = _1729;
    }
    else
    {
        uint _1797 = _1489 + 10u;
        uint _1803 = _1489 + 2u;
        float _1809 = cbLight._m0[_1803].x + _358;
        float _1810 = cbLight._m0[_1803].y + _359;
        float _1811 = cbLight._m0[_1803].z + _360;
        float _1815 = inversesqrt(dot(vec3(_1809, _1810, _1811), vec3(_1809, _1810, _1811)));
        float _1819 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_1803].xyz));
        float _3589 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1822 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1823 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_1809 * _1815, _1810 * _1815, _1811 * _1815));
        float _3600 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1832 = (exp2(log2(1.0 - (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1836 = (0.5 / ((_1822 + 9.9999999392252902907785028219223e-09) + _1648)) * _1822;
        float _3611 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1838 = (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * 0.31831014156341552734375;
        float _1839 = isnan(1.0) ? _1505 : (isnan(_1505) ? 1.0 : min(_1505, 1.0));
        _1791 = (((_1832 * cbLight._m0[_1797].x) * _1838) * _1839) + _1727;
        _1793 = (((_1832 * cbLight._m0[_1797].y) * _1838) * _1839) + _1728;
        _1795 = (((_1832 * cbLight._m0[_1797].z) * _1838) * _1839) + _1729;
    }
    float _1874;
    float _1876;
    float _1878;
    if (_1584)
    {
        _1874 = _1791;
        _1876 = _1793;
        _1878 = _1795;
    }
    else
    {
        uint _1885 = _1489 + 11u;
        uint _1891 = _1489 + 3u;
        float _1897 = cbLight._m0[_1891].x + _358;
        float _1898 = cbLight._m0[_1891].y + _359;
        float _1899 = cbLight._m0[_1891].z + _360;
        float _1903 = inversesqrt(dot(vec3(_1897, _1898, _1899), vec3(_1897, _1898, _1899)));
        float _1907 = dot(vec3(_278, _279, _280), vec3(cbLight._m0[_1891].xyz));
        float _3627 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1910 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1911 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_1897 * _1903, _1898 * _1903, _1899 * _1903));
        float _3638 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1920 = (exp2(log2(1.0 - (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1924 = (0.5 / ((_1910 + 9.9999999392252902907785028219223e-09) + _1648)) * _1910;
        float _3649 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1926 = (isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * 0.31831014156341552734375;
        float _1927 = isnan(1.0) ? _1506 : (isnan(_1506) ? 1.0 : min(_1506, 1.0));
        _1874 = (((_1920 * cbLight._m0[_1885].x) * _1926) * _1927) + _1791;
        _1876 = (((_1920 * cbLight._m0[_1885].y) * _1926) * _1927) + _1793;
        _1878 = (((_1920 * cbLight._m0[_1885].z) * _1926) * _1927) + _1795;
    }
    float _2061;
    float _2063;
    float _2065;
    float _2067;
    float _2069;
    float _2071;
    if (_1487.y == 0u)
    {
        float _2002 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2003 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2002;
        float _2004 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2002;
        float _2005 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2002;
        uvec4 _2017 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2018 = _2017.x;
        uint _2029 = uint((float(_2017.y) * floor(float(uint(cbSceneParam._m0[85u].y * _367) / _2018))) + floor(float(uint(cbSceneParam._m0[85u].x * _366) / _2018)));
        float _2039 = (log2(_2005 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2040 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        uint _2043 = uint(isnan(14.0) ? _2040 : (isnan(_2040) ? 14.0 : min(_2040, 14.0)));
        uvec4 _2048 = texelFetch(g_lightClusterGridBuffer, int(((_2043 << 2u) + (_2029 << 6u)) >> 2u));
        uint _2049 = _2048.x;
        uint _2050 = _2017.z;
        float _2178;
        float _2180;
        float _2182;
        float _2184;
        float _2186;
        float _2188;
        if (((((1u << ((_2050 >> 4u) & 15u)) + 4294967295u) & _2049) == 0u) || ((_2050 & 240u) == 0u))
        {
            _2178 = 0.0;
            _2180 = 0.0;
            _2182 = 0.0;
            _2184 = 0.0;
            _2186 = 0.0;
            _2188 = 0.0;
        }
        else
        {
            float _2179;
            float _2181;
            float _2183;
            float _2185;
            float _2187;
            float _2189;
            float _2329 = 0.0;
            float _2330 = 0.0;
            float _2331 = 0.0;
            float _2332 = 0.0;
            float _2333 = 0.0;
            float _2334 = 0.0;
            uint _2335 = 0u;
            uint _2344;
            bool _2345;
            for (;;)
            {
                _2344 = texelFetch(g_lightClassification, int((((_2043 << 5u) + (_2029 << 9u)) + (_2335 << 2u)) >> 2u)).x;
                _2345 = _2344 == 0u;
                float frontier_phi_76_pred;
                float frontier_phi_76_pred_1;
                float frontier_phi_76_pred_2;
                float frontier_phi_76_pred_3;
                float frontier_phi_76_pred_4;
                float frontier_phi_76_pred_5;
                if (_2345)
                {
                    frontier_phi_76_pred = _2334;
                    frontier_phi_76_pred_1 = _2333;
                    frontier_phi_76_pred_2 = _2332;
                    frontier_phi_76_pred_3 = _2330;
                    frontier_phi_76_pred_4 = _2329;
                    frontier_phi_76_pred_5 = _2331;
                }
                else
                {
                    float _2453;
                    float _2454;
                    float _2455;
                    float _2456;
                    float _2457;
                    float _2458;
                    uint _2459;
                    _2453 = _2329;
                    _2454 = _2330;
                    _2455 = _2331;
                    _2456 = _2332;
                    _2457 = _2333;
                    _2458 = _2334;
                    _2459 = _2344;
                    float _2385;
                    float _2386;
                    float _2387;
                    float _2388;
                    float _2389;
                    float _2390;
                    for (;;)
                    {
                        uint _2463 = uint(findLSB(_2459)) + (_2335 << 5u);
                        uint _2460 = (_2459 + 4294967295u) & _2459;
                        uint _2465 = _2463 * 48u;
                        vec4 _2479 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2465)).x, texelFetch(g_PointLightRenderingBuffer, int(_2465 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2465 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2465 + 3u)).x));
                        uint _2485 = (_2463 * 48u) + 4u;
                        vec4 _2498 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2485)).x, texelFetch(g_PointLightRenderingBuffer, int(_2485 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2485 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2485 + 3u)).x));
                        uint _2504 = (_2463 * 48u) + 8u;
                        vec3 _2515 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2504)).x, texelFetch(g_PointLightRenderingBuffer, int(_2504 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2504 + 2u)).x));
                        float _2519 = _2479.x - _2003;
                        float _2520 = _2479.y - _2004;
                        float _2521 = _2479.z - _2005;
                        float _2522 = dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521));
                        float _2525 = inversesqrt(_2522);
                        float _2534 = 1.0 - (_2522 * _2479.w);
                        float _3675 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
                        float _2535 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
                        float _2536 = sqrt(_2522) * _2498.w;
                        float _2539 = 1.39999997615814208984375 / (_2536 + 1.39999997615814208984375);
                        float _2540 = _2539 * _2539;
                        float _2543 = ((1.0 - _2540) * dot(vec3(_387, _390, _393), vec3(_2525 * _2519, _2525 * _2520, _2525 * _2521))) + _2540;
                        float _2546 = _2536 * _2536;
                        float _2550 = ((isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0))) * _2535) / ((_2546 * 0.699999988079071044921875) + 1.0);
                        float _2554 = (-0.0) - _2003;
                        float _2555 = (-0.0) - _2004;
                        float _2556 = (-0.0) - _2005;
                        float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
                        float _2564 = dot(vec3(_387, _390, _393), vec3(_2560 * _2554, _2560 * _2555, _2560 * _2556));
                        float _3691 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
                        float _3702 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
                        float _2568 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
                        float _2572 = (0.5 / (((isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) + 9.9999999392252902907785028219223e-09) + _2568)) * _2568;
                        float _3713 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
                        float _2581 = (((isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * 3.1415927410125732421875) / ((_2546 * 2.1991131305694580078125) + 3.141590118408203125)) * _2535;
                        _2388 = (_2550 * _2498.x) + _2456;
                        _2389 = (_2550 * _2498.y) + _2457;
                        _2390 = (_2550 * _2498.z) + _2458;
                        _2385 = (_2581 * _2515.x) + _2453;
                        _2386 = (_2581 * _2515.y) + _2454;
                        _2387 = (_2581 * _2515.z) + _2455;
                        if (_2460 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2453 = _2385;
                            _2454 = _2386;
                            _2455 = _2387;
                            _2456 = _2388;
                            _2457 = _2389;
                            _2458 = _2390;
                            _2459 = _2460;
                        }
                    }
                    frontier_phi_76_pred = _2390;
                    frontier_phi_76_pred_1 = _2389;
                    frontier_phi_76_pred_2 = _2388;
                    frontier_phi_76_pred_3 = _2386;
                    frontier_phi_76_pred_4 = _2385;
                    frontier_phi_76_pred_5 = _2387;
                }
                _2189 = frontier_phi_76_pred;
                _2187 = frontier_phi_76_pred_1;
                _2185 = frontier_phi_76_pred_2;
                _2181 = frontier_phi_76_pred_3;
                _2179 = frontier_phi_76_pred_4;
                _2183 = frontier_phi_76_pred_5;
                uint _2336 = _2335 + 1u;
                if (_2336 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2329 = _2179;
                    _2330 = _2181;
                    _2331 = _2183;
                    _2332 = _2185;
                    _2333 = _2187;
                    _2334 = _2189;
                    _2335 = _2336;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2178 = _2179;
            _2180 = _2181;
            _2182 = _2183;
            _2184 = _2185;
            _2186 = _2187;
            _2188 = _2189;
        }
        uvec4 _2192 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2193 = _2192.z;
        uint _2195 = (_2193 >> 8u) & 15u;
        float _2300;
        float _2302;
        float _2304;
        float _2306;
        float _2308;
        float _2310;
        if (((4294967295u << _2195) & _2049) == 0u)
        {
            _2300 = _2178;
            _2302 = _2180;
            _2304 = _2182;
            _2306 = _2184;
            _2308 = _2186;
            _2310 = _2188;
        }
        else
        {
            float _2325 = inversesqrt(dot(vec3(_2003, _2004, _2005), vec3(_2003, _2004, _2005)));
            float frontier_phi_70_71_ladder;
            float frontier_phi_70_71_ladder_1;
            float frontier_phi_70_71_ladder_2;
            float frontier_phi_70_71_ladder_3;
            float frontier_phi_70_71_ladder_4;
            float frontier_phi_70_71_ladder_5;
            if (_2195 < ((_2193 >> 12u) & 15u))
            {
                float _2301;
                float _2303;
                float _2305;
                float _2307;
                float _2309;
                float _2311;
                float _2436 = _2178;
                float _2437 = _2180;
                float _2438 = _2182;
                float _2439 = _2184;
                float _2440 = _2186;
                float _2441 = _2188;
                uint _2442 = _2195;
                uint _2451;
                bool _2452;
                for (;;)
                {
                    _2451 = texelFetch(g_lightClassification, int((((_2043 << 5u) + (_2029 << 9u)) + (_2442 << 2u)) >> 2u)).x;
                    _2452 = _2451 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2452)
                    {
                        frontier_phi_82_pred = _2438;
                        frontier_phi_82_pred_1 = _2437;
                        frontier_phi_82_pred_2 = _2436;
                        frontier_phi_82_pred_3 = _2441;
                        frontier_phi_82_pred_4 = _2440;
                        frontier_phi_82_pred_5 = _2439;
                    }
                    else
                    {
                        float _2586;
                        float _2587;
                        float _2588;
                        float _2589;
                        float _2590;
                        float _2591;
                        float _2838;
                        float _2839;
                        float _2840;
                        float _2841;
                        float _2842;
                        float _2843;
                        float _2599 = _2436;
                        float _2600 = _2437;
                        float _2601 = _2438;
                        float _2602 = _2439;
                        float _2603 = _2440;
                        float _2604 = _2441;
                        uint _2605 = _2451;
                        uint _2606;
                        vec4 _2631;
                        float _2632;
                        vec4 _2647;
                        vec3 _2659;
                        vec4 _2675;
                        vec4 _2691;
                        float _2738;
                        bool _2739;
                        for (;;)
                        {
                            uint _2616 = ((_2442 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2605));
                            _2606 = (_2605 + 4294967295u) & _2605;
                            uint _2618 = _2616 * 40u;
                            _2631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2618 + 3u)).x));
                            _2632 = _2631.w;
                            uint _2634 = (_2616 * 40u) + 4u;
                            _2647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2634 + 3u)).x));
                            uint _2649 = (_2616 * 40u) + 8u;
                            _2659 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2649 + 2u)).x));
                            uint _2662 = (_2616 * 40u) + 16u;
                            _2675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 3u)).x));
                            uint _2678 = (_2616 * 40u) + 20u;
                            _2691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2678 + 3u)).x));
                            uint _2694 = (_2616 * 40u) + 24u;
                            vec4 _2707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 3u)).x));
                            uint _2713 = (_2616 * 40u) + 28u;
                            vec4 _2726 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2713 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2713 + 3u)).x));
                            _2738 = fma(_2005, _2726.z, fma(_2004, _2726.y, _2726.x * _2003)) + _2726.w;
                            _2739 = !((fma(_2005, _2707.z, fma(_2004, _2707.y, _2707.x * _2003)) + _2707.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_2739)
                            {
                                float _2766 = _2631.x - _2003;
                                float _2767 = _2631.y - _2004;
                                float _2768 = _2631.z - _2005;
                                float _2769 = dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768));
                                float _2772 = inversesqrt(_2769);
                                float _2773 = _2772 * _2766;
                                float _2774 = _2772 * _2767;
                                float _2775 = _2772 * _2768;
                                float _2779 = 1.0 - (_2769 / (_2632 * _2632));
                                float _3724 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
                                float _2780 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
                                float _2784 = sqrt(_2769) * _2647.w;
                                float _2786 = 1.39999997615814208984375 / (_2784 + 1.39999997615814208984375);
                                float _2787 = _2786 * _2786;
                                float _2788 = 1.0 - _2787;
                                float _2790 = (_2788 * dot(vec3(_2773, _2774, _2775), vec3(_387, _390, _393))) + _2787;
                                float _2793 = _2784 * _2784;
                                float _2797 = (fma(_2005, _2675.z, fma(_2004, _2675.y, _2675.x * _2003)) + _2675.w) / _2738;
                                float _2798 = (fma(_2005, _2691.z, fma(_2004, _2691.y, _2691.x * _2003)) + _2691.w) / _2738;
                                float _2802 = 1.0 - dot(vec2(_2797, _2798), vec2(_2797, _2798));
                                float _3740 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                                float _2803 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
                                float _2804 = _2803 * (((isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0))) * _2780) / ((_2793 * 0.699999988079071044921875) + 1.0));
                                float _2814 = dot(vec3(_387, _390, _393), vec3((-0.0) - (_2003 * _2325), (-0.0) - (_2004 * _2325), (-0.0) - (_2005 * _2325)));
                                float _3751 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                                float _2822 = (_2788 * dot(vec3(_387, _390, _393), vec3(_2773, _2774, _2775))) + _2787;
                                float _3762 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                                float _2823 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
                                float _2827 = (0.5 / (((isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) + 9.9999999392252902907785028219223e-09) + _2823)) * _2823;
                                float _3773 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                                float _2834 = (_2803 * _2780) * (((isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * 3.1415927410125732421875) / ((_2793 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _2834 * _2659.z;
                                frontier_phi_88_pred_1 = _2834 * _2659.y;
                                frontier_phi_88_pred_2 = _2834 * _2659.x;
                                frontier_phi_88_pred_3 = _2804 * _2647.z;
                                frontier_phi_88_pred_4 = _2804 * _2647.y;
                                frontier_phi_88_pred_5 = _2804 * _2647.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _2840 = frontier_phi_88_pred;
                            _2839 = frontier_phi_88_pred_1;
                            _2838 = frontier_phi_88_pred_2;
                            _2843 = frontier_phi_88_pred_3;
                            _2842 = frontier_phi_88_pred_4;
                            _2841 = frontier_phi_88_pred_5;
                            _2589 = _2841 + _2602;
                            _2590 = _2842 + _2603;
                            _2591 = _2843 + _2604;
                            _2586 = _2838 + _2599;
                            _2587 = _2839 + _2600;
                            _2588 = _2840 + _2601;
                            if (_2606 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2599 = _2586;
                                _2600 = _2587;
                                _2601 = _2588;
                                _2602 = _2589;
                                _2603 = _2590;
                                _2604 = _2591;
                                _2605 = _2606;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2588;
                        frontier_phi_82_pred_1 = _2587;
                        frontier_phi_82_pred_2 = _2586;
                        frontier_phi_82_pred_3 = _2591;
                        frontier_phi_82_pred_4 = _2590;
                        frontier_phi_82_pred_5 = _2589;
                    }
                    _2305 = frontier_phi_82_pred;
                    _2303 = frontier_phi_82_pred_1;
                    _2301 = frontier_phi_82_pred_2;
                    _2311 = frontier_phi_82_pred_3;
                    _2309 = frontier_phi_82_pred_4;
                    _2307 = frontier_phi_82_pred_5;
                    uint _2443 = _2442 + 1u;
                    if (_2443 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2436 = _2301;
                        _2437 = _2303;
                        _2438 = _2305;
                        _2439 = _2307;
                        _2440 = _2309;
                        _2441 = _2311;
                        _2442 = _2443;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_70_71_ladder = _2309;
                frontier_phi_70_71_ladder_1 = _2307;
                frontier_phi_70_71_ladder_2 = _2305;
                frontier_phi_70_71_ladder_3 = _2311;
                frontier_phi_70_71_ladder_4 = _2303;
                frontier_phi_70_71_ladder_5 = _2301;
            }
            else
            {
                frontier_phi_70_71_ladder = _2186;
                frontier_phi_70_71_ladder_1 = _2184;
                frontier_phi_70_71_ladder_2 = _2182;
                frontier_phi_70_71_ladder_3 = _2188;
                frontier_phi_70_71_ladder_4 = _2180;
                frontier_phi_70_71_ladder_5 = _2178;
            }
            _2300 = frontier_phi_70_71_ladder_5;
            _2302 = frontier_phi_70_71_ladder_4;
            _2304 = frontier_phi_70_71_ladder_2;
            _2306 = frontier_phi_70_71_ladder_1;
            _2308 = frontier_phi_70_71_ladder;
            _2310 = frontier_phi_70_71_ladder_3;
        }
        float _2315 = isnan(1.0) ? _431 : (isnan(_431) ? 1.0 : min(_431, 1.0));
        _2061 = (_2315 * _2306) + _1622;
        _2063 = (_2315 * _2308) + _1624;
        _2065 = (_2315 * _2310) + _1626;
        _2067 = ((_2300 * 0.039999999105930328369140625) * _2315) + _1874;
        _2069 = ((_2302 * 0.039999999105930328369140625) * _2315) + _1876;
        _2071 = ((_2304 * 0.039999999105930328369140625) * _2315) + _1878;
    }
    else
    {
        _2061 = _1622;
        _2063 = _1624;
        _2065 = _1626;
        _2067 = _1874;
        _2069 = _1876;
        _2071 = _1878;
    }
    uint _2077 = _407 + uint(cbMatDynParam._m0[0u].w);
    float _2083 = cbInstanceData._m0[_2077].x * _269;
    float _2084 = cbInstanceData._m0[_2077].y * _271;
    float _2085 = cbInstanceData._m0[_2077].z * _272;
    float _3789 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _3800 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _3811 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _2102 = (((isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_2061 + ((isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0))) * _431))) + ((_2067 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _1239)) * cbPerFrame._m0[3u].x)) + _2083;
    float _2104 = (_2084 + ((_2069 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _1239)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_2063 + ((isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0))) * _431)));
    float _2106 = (_2085 + ((_2071 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _1239)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_2065 + ((isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0))) * _431)));
    float _3837 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2119 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    uint _2120 = _406 + 6u;
    float _2128 = _366 / cbSceneParam._m0[86u].x;
    float _2129 = _367 / cbSceneParam._m0[86u].y;
    vec4 _2143 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2128, _2129, (log2((isnan(cbSceneParam._m0[77u].w) ? _299 : (isnan(_299) ? cbSceneParam._m0[77u].w : min(_299, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2145 = _2143.x;
    float _2146 = _2143.y;
    float _2147 = _2143.z;
    float _2148 = _2143.w;
    float _2240;
    float _2242;
    float _2244;
    float _2246;
    if (_299 > cbSceneParam._m0[78u].w)
    {
        float _2203 = isnan(_299) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _299 : min(cbSceneParam._m0[80u].w, _299));
        float _2204 = _2203 / _299;
        float _2215 = _2204 * _351;
        float _2216 = _352 * _2204;
        float _2217 = (-0.0) - _2216;
        float _2218 = _2204 * _353;
        float _2220 = (cbSceneParam._m0[77u].w * _2217) / _2203;
        float _2221 = _2220 + cbSceneParam._m0[79u].w;
        float _2222 = cbSceneParam._m0[79u].w - _2216;
        float _2228 = sqrt(((_2215 * _2215) + (_2216 * _2216)) + (_2218 * _2218));
        float _2231 = (1.0 - (cbSceneParam._m0[77u].w / _2203)) * _2228;
        float _2236 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2238 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2398;
        if (abs((_2217 - _2220) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2398 = ((((_2221 > 0.0) ? exp2(_2236 * _2221) : (2.0 - exp2(_2238 * _2221))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2231;
        }
        else
        {
            float _2358 = 1.0 / cbSceneParam._m0[80u].x;
            float _2359 = isnan(_2222) ? _2221 : (isnan(_2221) ? _2222 : max(_2221, _2222));
            float _2360 = isnan(_2222) ? _2221 : (isnan(_2221) ? _2222 : min(_2221, _2222));
            float _2369 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : min(_2359, 0.0));
            float _2370 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : min(_2360, 0.0));
            _2398 = ((abs(_2228 / _2217) * cbSceneParam._m0[80u].y) * ((((_2369 - _2370) * 2.0) - ((exp2(_2236 * (isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0)))) - exp2(_2236 * (isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0))))) * _2358)) - ((exp2(_2238 * _2369) - exp2(_2238 * _2370)) * _2358))) + (_2231 * cbSceneParam._m0[80u].z);
        }
        vec4 _2400 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2128, _2129, 1.0), 0.0);
        float _2409 = exp2((_2398 * (-1.44269502162933349609375)) * (1.0 - _2400.w));
        float _2410 = log2(_2409);
        float _2426 = log2(_2148);
        _2240 = (exp2(_2426 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2410 * cbSceneParam._m0[78u].x)) * _2400.x) / cbSceneParam._m0[78u].x)) + _2145;
        _2242 = (exp2(_2426 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2410 * cbSceneParam._m0[78u].y)) * _2400.y) / cbSceneParam._m0[78u].y)) + _2146;
        _2244 = (exp2(_2426 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2410 * cbSceneParam._m0[78u].z)) * _2400.z) / cbSceneParam._m0[78u].z)) + _2147;
        _2246 = _2409 * _2148;
    }
    else
    {
        _2240 = _2145;
        _2242 = _2146;
        _2244 = _2147;
        _2246 = _2148;
    }
    float _2258 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2259 = _2258 == 3.0;
    float _2261 = log2(_2246);
    float _2265 = exp2(_2261 * cbSceneParam._m0[78u].x);
    float _2266 = exp2(_2261 * cbSceneParam._m0[78u].y);
    float _2267 = exp2(_2261 * cbSceneParam._m0[78u].z);
    float _2268 = _2265 * (isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0)));
    float _2269 = _2266 * (isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0)));
    float _2270 = _2267 * (isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0)));
    float _2279 = (_2258 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2279 * (_2259 ? _2268 : (_2268 + (cbSceneParam._m0[72u].w * _2240)));
    SV_Target.y = _2279 * (_2259 ? _2269 : (_2269 + (cbSceneParam._m0[72u].w * _2242)));
    SV_Target.z = _2279 * (_2259 ? _2270 : (_2270 + (cbSceneParam._m0[72u].w * _2244)));
    SV_Target.w = cbInstanceData._m0[_2120].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2083) * _2119) * _2265) * _2279;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2084) * _2119) * _2266) * _2279;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2085) * _2119) * _2267) * _2279;
    SV_Target_1.w = cbInstanceData._m0[_2120].w;
}


