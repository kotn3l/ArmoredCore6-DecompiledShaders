#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _829;
float _3104;
float _3105;
float _3106;
float _3107;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _169 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _170 = _169 * NORMAL.x;
    float _171 = _169 * NORMAL.y;
    float _172 = _169 * NORMAL.z;
    float _177;
    float _178;
    float _179;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _177 = (-0.0) - _170;
        _178 = (-0.0) - _171;
        _179 = (-0.0) - _172;
    }
    else
    {
        _177 = _170;
        _178 = _171;
        _179 = _172;
    }
    vec4 _199 = texture(sampler2D(M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _205 = _199.x * cbMtdParam._m0[9u].x;
    float _206 = _199.y * cbMtdParam._m0[9u].y;
    float _207 = _199.z * cbMtdParam._m0[9u].z;
    vec4 _228 = texture(sampler2D(M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _230 = _228.x;
    float _231 = _228.y;
    float _232 = _228.z;
    float _233 = cbMtdParam._m0[11u].w * cbMtdParam._m0[12u].x;
    float _234 = _233 * _230;
    float _235 = _233 * _231;
    float _236 = _233 * _232;
    float _237 = isnan(_235) ? _234 : (isnan(_234) ? _235 : max(_234, _235));
    float _238 = isnan(_236) ? _237 : (isnan(_237) ? _236 : max(_237, _236));
    float _241;
    float _243;
    if (_238 < 1.1920928955078125e-07)
    {
        _241 = 0.0;
        _243 = 0.0;
    }
    else
    {
        float _269 = isnan(_235) ? _234 : (isnan(_234) ? _235 : min(_234, _235));
        float _271 = _238 - (isnan(_236) ? _269 : (isnan(_269) ? _236 : min(_269, _236)));
        float _244 = _271 / _238;
        float frontier_phi_3_4_ladder;
        float frontier_phi_3_4_ladder_1;
        if (_271 < 1.1920928955078125e-07)
        {
            frontier_phi_3_4_ladder = _244;
            frontier_phi_3_4_ladder_1 = 0.0;
        }
        else
        {
            float _850;
            if (_238 == _234)
            {
                _850 = ((_233 * (_231 - _232)) / _271) * 0.16666667163372039794921875;
            }
            else
            {
                float frontier_phi_17_12_ladder;
                if (_238 == _235)
                {
                    frontier_phi_17_12_ladder = (((_233 * (_232 - _230)) / _271) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
                }
                else
                {
                    frontier_phi_17_12_ladder = (((_233 * (_230 - _231)) / _271) * 0.16666667163372039794921875) + 0.666666686534881591796875;
                }
                _850 = frontier_phi_17_12_ladder;
            }
            float _855 = (_850 < 0.0) ? (_850 + 1.0) : _850;
            frontier_phi_3_4_ladder = _244;
            frontier_phi_3_4_ladder_1 = _855 - floor(_855);
        }
        _241 = frontier_phi_3_4_ladder_1;
        _243 = frontier_phi_3_4_ladder;
    }
    float _245 = _243 + cbMtdParam._m0[11u].y;
    float _249 = fract(cbMtdParam._m0[11u].z + _241) * 6.0;
    uint _252 = uint(int(floor(_249)));
    float _254 = _249 - float(int(_252));
    float _257 = (1.0 - _245) * _238;
    float _260 = (1.0 - (_254 * _245)) * _238;
    float _264 = (1.0 - ((1.0 - _254) * _245)) * _238;
    float _273;
    float _275;
    float _276;
    if ((_252 == 0u) || (_252 == 6u))
    {
        _273 = _238;
        _275 = _264;
        _276 = _257;
    }
    else
    {
        float frontier_phi_5_6_ladder;
        float frontier_phi_5_6_ladder_1;
        float frontier_phi_5_6_ladder_2;
        if (_252 == 1u)
        {
            frontier_phi_5_6_ladder = _257;
            frontier_phi_5_6_ladder_1 = _238;
            frontier_phi_5_6_ladder_2 = _260;
        }
        else
        {
            float frontier_phi_5_6_ladder_10_ladder;
            float frontier_phi_5_6_ladder_10_ladder_1;
            float frontier_phi_5_6_ladder_10_ladder_2;
            if (_252 == 2u)
            {
                frontier_phi_5_6_ladder_10_ladder = _264;
                frontier_phi_5_6_ladder_10_ladder_1 = _238;
                frontier_phi_5_6_ladder_10_ladder_2 = _257;
            }
            else
            {
                float frontier_phi_5_6_ladder_10_ladder_16_ladder;
                float frontier_phi_5_6_ladder_10_ladder_16_ladder_1;
                float frontier_phi_5_6_ladder_10_ladder_16_ladder_2;
                if (_252 == 3u)
                {
                    frontier_phi_5_6_ladder_10_ladder_16_ladder = _238;
                    frontier_phi_5_6_ladder_10_ladder_16_ladder_1 = _260;
                    frontier_phi_5_6_ladder_10_ladder_16_ladder_2 = _257;
                }
                else
                {
                    bool _1243 = _252 == 4u;
                    frontier_phi_5_6_ladder_10_ladder_16_ladder = _1243 ? _238 : _260;
                    frontier_phi_5_6_ladder_10_ladder_16_ladder_1 = _257;
                    frontier_phi_5_6_ladder_10_ladder_16_ladder_2 = _1243 ? _264 : _238;
                }
                frontier_phi_5_6_ladder_10_ladder = frontier_phi_5_6_ladder_10_ladder_16_ladder;
                frontier_phi_5_6_ladder_10_ladder_1 = frontier_phi_5_6_ladder_10_ladder_16_ladder_1;
                frontier_phi_5_6_ladder_10_ladder_2 = frontier_phi_5_6_ladder_10_ladder_16_ladder_2;
            }
            frontier_phi_5_6_ladder = frontier_phi_5_6_ladder_10_ladder;
            frontier_phi_5_6_ladder_1 = frontier_phi_5_6_ladder_10_ladder_1;
            frontier_phi_5_6_ladder_2 = frontier_phi_5_6_ladder_10_ladder_2;
        }
        _273 = frontier_phi_5_6_ladder_2;
        _275 = frontier_phi_5_6_ladder_1;
        _276 = frontier_phi_5_6_ladder;
    }
    float _281 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _282 = _281 * _177;
    float _283 = _281 * _178;
    float _284 = _281 * _179;
    float _3136 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
    float _3147 = isnan(0.0) ? _206 : (isnan(_206) ? 0.0 : max(_206, 0.0));
    float _3158 = isnan(0.0) ? _207 : (isnan(_207) ? 0.0 : max(_207, 0.0));
    float _303 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _345 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _355 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _345);
    float _356 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _345);
    float _357 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _345);
    float _361 = inversesqrt(dot(vec3(_355, _356, _357), vec3(_355, _356, _357)));
    float _362 = _355 * _361;
    float _363 = _356 * _361;
    float _364 = _357 * _361;
    vec4 _369 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _371 = _369.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _501 = sqrt(((_355 * _355) + (_356 * _356)) + (_357 * _357));
        float _507 = (cbMatDynParam._m0[5u].x * _501) + cbMatDynParam._m0[5u].y;
        float _3169 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
        float _508 = isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0));
        float _512 = (cbMatDynParam._m0[5u].z * _501) + cbMatDynParam._m0[5u].w;
        float _3180 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0))) - _508)) + _508) < ((_371 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _384 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _385 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _405 = fma(_284, cbSceneParam._m0[5u].z, fma(_283, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _282));
    float _408 = fma(_284, cbSceneParam._m0[6u].z, fma(_283, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _282));
    float _411 = fma(_284, cbSceneParam._m0[7u].z, fma(_283, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _282));
    uint _424 = uint(roundEven(NORMAL.w)) * 13u;
    uint _425 = _424 + 9u;
    uint _426 = _425 + uint(cbMatDynParam._m0[0u].w);
    float _432 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0)))) * cbInstanceData._m0[_426].x;
    float _433 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0)))) * cbInstanceData._m0[_426].y;
    float _434 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0)))) * cbInstanceData._m0[_426].z;
    float _3191 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _435 = isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0));
    float _3202 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0));
    float _3213 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _437 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
    vec4 _446 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _384, cbSceneParam._m0[86u].y * _385));
    float _449 = _446.x * TEXCOORD.z;
    float _450 = dot(vec3(_282, _283, _284), vec3(_362, _363, _364));
    float _453 = _450 * 2.0;
    float _458 = (_453 * _282) - _362;
    float _459 = (_453 * _283) - _363;
    float _460 = (_453 * _284) - _364;
    float _482 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _486 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _490 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _828;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _553 = fma(_490, cbModelParam._m0[26u].z, fma(_486, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _482));
        float _557 = fma(_490, cbModelParam._m0[27u].z, fma(_486, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _482));
        float _561 = fma(_490, cbModelParam._m0[28u].z, fma(_486, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _482));
        float _586 = _482 + _282;
        float _587 = _486 + _283;
        float _588 = _490 + _284;
        float _598 = fma(_588, cbModelParam._m0[26u].z, fma(_587, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _586)) - _553;
        float _599 = fma(_588, cbModelParam._m0[27u].z, fma(_587, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _586)) - _557;
        float _600 = fma(_588, cbModelParam._m0[28u].z, fma(_587, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _586)) - _561;
        float _604 = inversesqrt(dot(vec3(_598, _599, _600), vec3(_598, _599, _600)));
        float _617 = ((_604 * _598) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_553 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _618 = ((_604 * _599) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_557 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _619 = ((_604 * _600) / cbModelParam._m0[34u].z) + ((((((_561 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _622 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_617, _618, _619), 0.0);
        vec4 _629 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_617, _618, _619), 0.0);
        vec4 _636 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_617, _618, _619), 0.0);
        vec4 _643 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_617, _618, _619), 0.0);
        float _656 = exp2((_622.w + (-0.5)) * 20.0) * 2.0;
        float _657 = _656 * (_622.x + (-0.5));
        float _658 = _656 * (_622.y + (-0.5));
        float _659 = _656 * (_622.z + (-0.5));
        float _666 = exp2((_629.w + (-0.5)) * 20.0) * 2.0;
        float _667 = _666 * (_629.x + (-0.5));
        float _668 = _666 * (_629.y + (-0.5));
        float _669 = _666 * (_629.z + (-0.5));
        float _676 = exp2((_636.w + (-0.5)) * 20.0) * 2.0;
        float _677 = _676 * (_636.x + (-0.5));
        float _678 = _676 * (_636.y + (-0.5));
        float _679 = _676 * (_636.z + (-0.5));
        float _686 = exp2((_643.w + (-0.5)) * 20.0) * 2.0;
        float _687 = _686 * (_643.x + (-0.5));
        float _688 = _686 * (_643.y + (-0.5));
        float _689 = _686 * (_643.z + (-0.5));
        float _690 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _691 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _692 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _693 = _657 * 0.5;
        float _694 = _667 * 0.5;
        float _695 = _677 * 0.5;
        float _696 = dot(vec3(_693, _694, _695), vec3(_693, _694, _695));
        float _701 = (_696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_696);
        float _710 = (dot(vec3(_282, _283, _284), vec3(_701 * _693, _701 * _694, _701 * _695)) + 1.0) * 0.5;
        float _3239 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _720 = sqrt(((_694 * _694) + (_693 * _693)) + (_695 * _695)) / (_690 + 9.9999997473787516355514526367188e-06);
        float _3250 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _721 = isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0));
        float _722 = _721 * 2.0;
        float _726 = (1.0 - _721) / (_721 + 1.0);
        float _3261 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _727 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
        float _736 = ((((1.0 - _727) * (_722 + 2.0)) * exp2(log2(isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0))) * (_722 + 1.0))) + _727) * _690;
        float _737 = _658 * 0.5;
        float _738 = _668 * 0.5;
        float _739 = _678 * 0.5;
        float _740 = dot(vec3(_737, _738, _739), vec3(_737, _738, _739));
        float _745 = (_740 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_740);
        float _753 = (dot(vec3(_282, _283, _284), vec3(_745 * _737, _745 * _738, _745 * _739)) + 1.0) * 0.5;
        float _3272 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _762 = sqrt(((_738 * _738) + (_737 * _737)) + (_739 * _739)) / (_691 + 9.9999997473787516355514526367188e-06);
        float _3283 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
        float _764 = _763 * 2.0;
        float _768 = (1.0 - _763) / (_763 + 1.0);
        float _3294 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
        float _778 = ((((1.0 - _769) * (_764 + 2.0)) * exp2(log2(isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0))) * (_764 + 1.0))) + _769) * _691;
        float _779 = _659 * 0.5;
        float _780 = _669 * 0.5;
        float _781 = _679 * 0.5;
        float _782 = dot(vec3(_779, _780, _781), vec3(_779, _780, _781));
        float _787 = (_782 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_782);
        float _795 = (dot(vec3(_282, _283, _284), vec3(_787 * _779, _787 * _780, _787 * _781)) + 1.0) * 0.5;
        float _3305 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _804 = sqrt(((_780 * _780) + (_779 * _779)) + (_781 * _781)) / (_692 + 9.9999997473787516355514526367188e-06);
        float _3316 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
        float _806 = _805 * 2.0;
        float _810 = (1.0 - _805) / (_805 + 1.0);
        float _3327 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
        float _820 = ((((1.0 - _811) * (_806 + 2.0)) * exp2(log2(isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0))) * (_806 + 1.0))) + _811) * _692;
        _828 = _659;
        _830 = _658;
        _831 = _657;
        _832 = _669;
        _833 = _668;
        _834 = _667;
        _835 = _679;
        _836 = _678;
        _837 = _677;
        _838 = _692;
        _839 = _691;
        _840 = _690;
        _841 = cbModelParam._m0[36u].z * (isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0)));
        _842 = cbModelParam._m0[36u].z * (isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0)));
        _843 = cbModelParam._m0[36u].z * (isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0)));
    }
    else
    {
        _828 = _829;
        _830 = _829;
        _831 = _829;
        _832 = _829;
        _833 = _829;
        _834 = _829;
        _835 = _829;
        _836 = _829;
        _837 = _829;
        _838 = _829;
        _839 = _829;
        _840 = _829;
        _841 = 0.0;
        _842 = 0.0;
        _843 = 0.0;
    }
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _890 = fma(_490, cbModelParam._m0[30u].z, fma(_486, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _482));
        float _894 = fma(_490, cbModelParam._m0[31u].z, fma(_486, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _482));
        float _898 = fma(_490, cbModelParam._m0[32u].z, fma(_486, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _482));
        float _921 = _482 + _282;
        float _922 = _486 + _283;
        float _923 = _490 + _284;
        float _933 = fma(_923, cbModelParam._m0[30u].z, fma(_922, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _921)) - _890;
        float _934 = fma(_923, cbModelParam._m0[31u].z, fma(_922, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _921)) - _894;
        float _935 = fma(_923, cbModelParam._m0[32u].z, fma(_922, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _921)) - _898;
        float _939 = inversesqrt(dot(vec3(_933, _934, _935), vec3(_933, _934, _935)));
        float _952 = ((_939 * _933) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_890 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_939 * _934) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_894 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_939 * _935) / cbModelParam._m0[35u].z) + ((((((_898 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        float _989 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_956.x + (-0.5));
        float _991 = _989 * (_956.y + (-0.5));
        float _992 = _989 * (_956.z + (-0.5));
        float _999 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_963.x + (-0.5));
        float _1001 = _999 * (_963.y + (-0.5));
        float _1002 = _999 * (_963.z + (-0.5));
        float _1009 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_970.x + (-0.5));
        float _1011 = _1009 * (_970.y + (-0.5));
        float _1012 = _1009 * (_970.z + (-0.5));
        float _1019 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_977.x + (-0.5));
        float _1021 = _1019 * (_977.y + (-0.5));
        float _1022 = _1019 * (_977.z + (-0.5));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = _990 * 0.5;
        float _1027 = _1000 * 0.5;
        float _1028 = _1010 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_282, _283, _284), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3368 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3379 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3390 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * (_1053 + 1.0))) + _1058) * _1023;
        float _1068 = _991 * 0.5;
        float _1069 = _1001 * 0.5;
        float _1070 = _1011 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_282, _283, _284), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3401 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3412 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3423 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * (_1095 + 1.0))) + _1100) * _1024;
        float _1110 = _992 * 0.5;
        float _1111 = _1002 * 0.5;
        float _1112 = _1012 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_282, _283, _284), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3434 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3445 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3456 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * (_1137 + 1.0))) + _1142) * _1025;
        _1159 = _992;
        _1160 = _991;
        _1161 = _990;
        _1162 = _1002;
        _1163 = _1001;
        _1164 = _1000;
        _1165 = _1012;
        _1166 = _1011;
        _1167 = _1010;
        _1168 = _1025;
        _1169 = _1024;
        _1170 = _1023;
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
        _1172 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1173 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
    }
    else
    {
        _1159 = _829;
        _1160 = _829;
        _1161 = _829;
        _1162 = _829;
        _1163 = _829;
        _1164 = _829;
        _1165 = _829;
        _1166 = _829;
        _1167 = _829;
        _1168 = _829;
        _1169 = _829;
        _1170 = _829;
        _1171 = 0.0;
        _1172 = 0.0;
        _1173 = 0.0;
    }
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _841)) + _841;
    float _1184 = (cbModelParam._m0[1u].x * (_1172 - _842)) + _842;
    float _1185 = (cbModelParam._m0[1u].x * (_1173 - _843)) + _843;
    float _1206 = fma(_1185, cbSceneParam._m0[89u].z, fma(_1184, cbSceneParam._m0[89u].y, _1183 * cbSceneParam._m0[89u].x));
    float _1209 = fma(_1185, cbSceneParam._m0[90u].z, fma(_1184, cbSceneParam._m0[90u].y, _1183 * cbSceneParam._m0[90u].x));
    float _1212 = fma(_1185, cbSceneParam._m0[91u].z, fma(_1184, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1183));
    float _1227 = _458 * 0.5;
    float _1228 = _459 * 0.5;
    float _1229 = _460 * 0.5;
    float _1230 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_1161, _1164, _1167, _1170));
    float _1233 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_1160, _1163, _1166, _1169));
    float _1236 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1272;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1245 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_828, _832, _835, _838));
        float _1249 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_830, _833, _836, _839));
        float _1253 = dot(vec4(_1227, _1228, _1229, 1.0), vec4(_831, _834, _837, _840));
        float _1260 = dot(vec4(cbModelParam._m0[39u]), vec4(_1227, _1228, _1229, 1.0));
        _1272 = dot(vec3(isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)), isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1260) ? 0.0 : (isnan(0.0) ? _1260 : max(0.0, _1260))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1272 = 1.0;
    }
    float _1283;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1274 = dot(vec4(cbModelParam._m0[40u]), vec4(_1227, _1228, _1229, 1.0));
        _1283 = dot(vec3(isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1274) ? 0.0 : (isnan(0.0) ? _1274 : max(0.0, _1274))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1283 = 1.0;
    }
    float _1287 = (_1283 * cbModelParam._m0[1u].x) + (_1272 * (1.0 - cbModelParam._m0[1u].x));
    float _1296 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1378;
    float _1380;
    float _1382;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1345 = fma(_490, cbModelParam._m0[13u].z, fma(_486, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _482)) + cbModelParam._m0[13u].w;
        float _1349 = fma(_490, cbModelParam._m0[14u].z, fma(_486, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _482)) + cbModelParam._m0[14u].w;
        float _1353 = fma(_490, cbModelParam._m0[15u].z, fma(_486, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _482)) + cbModelParam._m0[15u].w;
        float _1356 = fma(_460, cbModelParam._m0[13u].z, fma(_459, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _458));
        float _1359 = fma(_460, cbModelParam._m0[14u].z, fma(_459, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _458));
        float _1362 = fma(_460, cbModelParam._m0[15u].z, fma(_459, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _458));
        float _1388;
        if (_1356 > 0.0)
        {
            _1388 = abs((1.0 - _1345) / _1356);
        }
        else
        {
            float frontier_phi_32_30_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_32_30_ladder = abs((_1345 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_32_30_ladder = 5000.0;
            }
            _1388 = frontier_phi_32_30_ladder;
        }
        float _1615;
        if (_1359 > 0.0)
        {
            _1615 = abs((1.0 - _1349) / _1359);
        }
        else
        {
            float frontier_phi_41_37_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_41_37_ladder = abs((_1349 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_41_37_ladder = 5000.0;
            }
            _1615 = frontier_phi_41_37_ladder;
        }
        float _1807;
        if (_1362 > 0.0)
        {
            _1807 = abs((1.0 - _1353) / _1362);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1353 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _1807 = frontier_phi_53_48_ladder;
        }
        float _1809 = isnan(_1615) ? _1388 : (isnan(_1388) ? _1615 : min(_1388, _1615));
        float _1810 = isnan(_1807) ? _1809 : (isnan(_1809) ? _1807 : min(_1809, _1807));
        float _1814 = (_1810 * _1356) + _1345;
        float _1815 = (_1810 * _1359) + _1349;
        float _1816 = (_1810 * _1362) + _1353;
        float _1817 = _1810 * 9.9999997473787516355514526367188e-05;
        float _1819 = (-1.0) - _1817;
        float _1821 = _1817 + 1.0;
        float frontier_phi_31_53_ladder;
        float frontier_phi_31_53_ladder_1;
        float frontier_phi_31_53_ladder_2;
        if ((_1816 > _1821) || ((_1816 < _1819) || ((_1815 > _1821) || ((_1815 < _1819) || ((_1814 < _1819) || (_1814 > _1821))))))
        {
            frontier_phi_31_53_ladder = 0.0;
            frontier_phi_31_53_ladder_1 = 0.0;
            frontier_phi_31_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1913 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1816, cbModelParam._m0[9u].z, fma(_1815, cbModelParam._m0[9u].y, _1814 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1816, cbModelParam._m0[10u].z, fma(_1815, cbModelParam._m0[10u].y, _1814 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1816, cbModelParam._m0[11u].z, fma(_1815, cbModelParam._m0[11u].y, _1814 * cbModelParam._m0[11u].x))), _1296);
            frontier_phi_31_53_ladder = _1913.z * cbModelParam._m0[1u].y;
            frontier_phi_31_53_ladder_1 = _1913.y * cbModelParam._m0[1u].y;
            frontier_phi_31_53_ladder_2 = _1913.x * cbModelParam._m0[1u].y;
        }
        _1378 = frontier_phi_31_53_ladder_2;
        _1380 = frontier_phi_31_53_ladder_1;
        _1382 = frontier_phi_31_53_ladder;
    }
    else
    {
        vec4 _1366 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_458, _459, _460), _1296);
        _1378 = _1366.x * cbModelParam._m0[1u].y;
        _1380 = _1366.y * cbModelParam._m0[1u].y;
        _1382 = _1366.z * cbModelParam._m0[1u].y;
    }
    float _1385 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1478;
    float _1480;
    float _1482;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1442 = fma(_490, cbModelParam._m0[21u].z, fma(_486, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _482)) + cbModelParam._m0[21u].w;
        float _1446 = fma(_490, cbModelParam._m0[22u].z, fma(_486, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _482)) + cbModelParam._m0[22u].w;
        float _1450 = fma(_490, cbModelParam._m0[23u].z, fma(_486, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _482)) + cbModelParam._m0[23u].w;
        float _1453 = fma(_460, cbModelParam._m0[21u].z, fma(_459, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _458));
        float _1456 = fma(_460, cbModelParam._m0[22u].z, fma(_459, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _458));
        float _1459 = fma(_460, cbModelParam._m0[23u].z, fma(_459, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _458));
        float _1620;
        if (_1453 > 0.0)
        {
            _1620 = abs((1.0 - _1442) / _1453);
        }
        else
        {
            float frontier_phi_43_39_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_43_39_ladder = abs((_1442 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_43_39_ladder = 5000.0;
            }
            _1620 = frontier_phi_43_39_ladder;
        }
        float _1834;
        if (_1456 > 0.0)
        {
            _1834 = abs((1.0 - _1446) / _1456);
        }
        else
        {
            float frontier_phi_55_50_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_55_50_ladder = abs((_1446 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_55_50_ladder = 5000.0;
            }
            _1834 = frontier_phi_55_50_ladder;
        }
        float _1985;
        if (_1459 > 0.0)
        {
            _1985 = abs((1.0 - _1450) / _1459);
        }
        else
        {
            float frontier_phi_64_61_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_64_61_ladder = abs((_1450 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_64_61_ladder = 5000.0;
            }
            _1985 = frontier_phi_64_61_ladder;
        }
        float _1987 = isnan(_1834) ? _1620 : (isnan(_1620) ? _1834 : min(_1620, _1834));
        float _1988 = isnan(_1985) ? _1987 : (isnan(_1987) ? _1985 : min(_1987, _1985));
        float _1992 = (_1988 * _1453) + _1442;
        float _1993 = (_1988 * _1456) + _1446;
        float _1994 = (_1988 * _1459) + _1450;
        float _1995 = _1988 * 9.9999997473787516355514526367188e-05;
        float _1996 = (-1.0) - _1995;
        float _1998 = _1995 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_1994 > _1998) || ((_1994 < _1996) || ((_1993 > _1998) || ((_1993 < _1996) || ((_1992 < _1996) || (_1992 > _1998))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2221 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1994, cbModelParam._m0[17u].z, fma(_1993, cbModelParam._m0[17u].y, _1992 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1994, cbModelParam._m0[18u].z, fma(_1993, cbModelParam._m0[18u].y, _1992 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1994, cbModelParam._m0[19u].z, fma(_1993, cbModelParam._m0[19u].y, _1992 * cbModelParam._m0[19u].x))), _1385);
            frontier_phi_40_64_ladder = _2221.y * cbModelParam._m0[1u].z;
            frontier_phi_40_64_ladder_1 = _2221.x * cbModelParam._m0[1u].z;
            frontier_phi_40_64_ladder_2 = _2221.z * cbModelParam._m0[1u].z;
        }
        _1478 = frontier_phi_40_64_ladder_1;
        _1480 = frontier_phi_40_64_ladder;
        _1482 = frontier_phi_40_64_ladder_2;
    }
    else
    {
        vec4 _1462 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_458, _459, _460), _1385);
        _1478 = _1462.x * cbModelParam._m0[1u].z;
        _1480 = _1462.y * cbModelParam._m0[1u].z;
        _1482 = _1462.z * cbModelParam._m0[1u].z;
    }
    float _1494 = _449 * 0.01200000010430812835693359375;
    float _1496 = _1494 * ((cbModelParam._m0[1u].w * (_1478 - _1378)) + _1378);
    float _1497 = _1494 * ((cbModelParam._m0[1u].w * (_1480 - _1380)) + _1380);
    float _1498 = _1494 * ((cbModelParam._m0[1u].w * (_1482 - _1382)) + _1382);
    float _1501 = fma(_1498, cbSceneParam._m0[89u].z, fma(_1497, cbSceneParam._m0[89u].y, _1496 * cbSceneParam._m0[89u].x));
    float _1504 = fma(_1498, cbSceneParam._m0[90u].z, fma(_1497, cbSceneParam._m0[90u].y, _1496 * cbSceneParam._m0[90u].x));
    float _1507 = fma(_1498, cbSceneParam._m0[91u].z, fma(_1497, cbSceneParam._m0[91u].y, _1496 * cbSceneParam._m0[91u].x));
    vec4 _1515 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_384, _385));
    float _1517 = _1515.w;
    float _1529 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1517);
    float _1530 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1517);
    float _1531 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1517);
    uvec4 _1535 = floatBitsToUint(cbInstanceData._m0[_424 + 5u]);
    uint _1537 = _1535.x * 14u;
    uint _1538 = _1537 + 13u;
    float _1545 = _449 + (-1.0);
    float _1551 = (cbLight._m0[_1538].x * _1545) + 1.0;
    float _1552 = (cbLight._m0[_1538].y * _1545) + 1.0;
    float _1553 = (cbLight._m0[_1538].z * _1545) + 1.0;
    float _1554 = (cbLight._m0[_1538].w * _1545) + 1.0;
    uint _1555 = _1537 + 5u;
    float _1561 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
    uint _1565 = _1537 + 4u;
    float _1574 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
    uint _1578 = _1537 | 1u;
    float _1589 = dot(vec3(cbLight._m0[_1537].xyz), vec3(_282, _283, _284));
    float _1592 = dot(vec3(cbLight._m0[_1578].xyz), vec3(_282, _283, _284));
    float _3592 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _3603 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
    float _1597 = (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * 0.3183098733425140380859375;
    float _1599 = (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * 0.3183098733425140380859375;
    float _1606 = ((cbLight._m0[_1555].x * _1561) * _1599) + (((cbLight._m0[_1565].x * _1529) * _1574) * _1597);
    float _1607 = ((_1561 * cbLight._m0[_1555].y) * _1599) + (((cbLight._m0[_1565].y * _1530) * _1574) * _1597);
    float _1608 = ((_1561 * cbLight._m0[_1555].z) * _1599) + (((cbLight._m0[_1565].z * _1531) * _1574) * _1597);
    uvec4 _1612 = floatBitsToUint(cbLight._m0[_1537 + 12u]);
    bool _1614 = _1612.x == 0u;
    float _1625;
    float _1627;
    float _1629;
    if (_1614)
    {
        _1625 = _1606;
        _1627 = _1607;
        _1629 = _1608;
    }
    else
    {
        uint _1633 = _1537 + 6u;
        float _1649 = (dot(vec3(cbLight._m0[_1537 + 2u].xyz), vec3(_282, _283, _284)) * 0.5) + 0.5;
        float _1650 = _1649 * _1649;
        float _3614 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1652 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _1625 = (((cbLight._m0[_1633].x * 0.3183098733425140380859375) * _1651) * _1652) + _1606;
        _1627 = (((cbLight._m0[_1633].y * 0.3183098733425140380859375) * _1651) * _1652) + _1607;
        _1629 = (((cbLight._m0[_1633].z * 0.3183098733425140380859375) * _1651) * _1652) + _1608;
    }
    bool _1632 = _1612.y == 0u;
    float _1670;
    float _1672;
    float _1674;
    if (_1632)
    {
        _1670 = _1625;
        _1672 = _1627;
        _1674 = _1629;
    }
    else
    {
        uint _1778 = _1537 + 7u;
        float _1794 = (dot(vec3(cbLight._m0[_1537 + 3u].xyz), vec3(_282, _283, _284)) * 0.5) + 0.5;
        float _1795 = _1794 * _1794;
        float _3630 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1797 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
        _1670 = (((cbLight._m0[_1778].x * 0.3183098733425140380859375) * _1796) * _1797) + _1625;
        _1672 = (((cbLight._m0[_1778].y * 0.3183098733425140380859375) * _1796) * _1797) + _1627;
        _1674 = (((cbLight._m0[_1778].z * 0.3183098733425140380859375) * _1796) * _1797) + _1629;
    }
    uint _1676 = _1537 + 8u;
    float _1682 = cbLight._m0[_1537].x + _362;
    float _1683 = cbLight._m0[_1537].y + _363;
    float _1684 = cbLight._m0[_1537].z + _364;
    float _1688 = inversesqrt(dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684)));
    float _1692 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1537].xyz));
    float _3646 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _1695 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _1696 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _1697 = dot(vec3(cbLight._m0[_1537].xyz), vec3(_1682 * _1688, _1683 * _1688, _1684 * _1688));
    float _3668 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1708 = (exp2(log2(1.0 - (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1714 = (0.5 / ((_1695 + 9.9999999392252902907785028219223e-09) + _1696)) * _1695;
    float _3679 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1716 = (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * 0.31831014156341552734375;
    uint _1730 = _1537 + 9u;
    float _1736 = cbLight._m0[_1578].x + _362;
    float _1737 = cbLight._m0[_1578].y + _363;
    float _1738 = cbLight._m0[_1578].z + _364;
    float _1742 = inversesqrt(dot(vec3(_1736, _1737, _1738), vec3(_1736, _1737, _1738)));
    float _1746 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1578].xyz));
    float _3690 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1749 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _1750 = dot(vec3(cbLight._m0[_1578].xyz), vec3(_1736 * _1742, _1737 * _1742, _1738 * _1742));
    float _3701 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1759 = (exp2(log2(1.0 - (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1763 = (0.5 / ((_1749 + 9.9999999392252902907785028219223e-09) + _1696)) * _1749;
    float _3712 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1765 = (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * 0.31831014156341552734375;
    float _1775 = (((_1759 * cbLight._m0[_1730].x) * _1765) * _1561) + ((((cbLight._m0[_1676].x * _1529) * _1708) * _1716) * _1574);
    float _1776 = (((_1759 * cbLight._m0[_1730].y) * _1765) * _1561) + ((((cbLight._m0[_1676].y * _1530) * _1708) * _1716) * _1574);
    float _1777 = (((_1759 * cbLight._m0[_1730].z) * _1765) * _1561) + ((((cbLight._m0[_1676].z * _1531) * _1708) * _1716) * _1574);
    float _1839;
    float _1841;
    float _1843;
    if (_1614)
    {
        _1839 = _1775;
        _1841 = _1776;
        _1843 = _1777;
    }
    else
    {
        uint _1845 = _1537 + 10u;
        uint _1851 = _1537 + 2u;
        float _1857 = cbLight._m0[_1851].x + _362;
        float _1858 = cbLight._m0[_1851].y + _363;
        float _1859 = cbLight._m0[_1851].z + _364;
        float _1863 = inversesqrt(dot(vec3(_1857, _1858, _1859), vec3(_1857, _1858, _1859)));
        float _1867 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1851].xyz));
        float _3723 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1870 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1871 = dot(vec3(cbLight._m0[_1851].xyz), vec3(_1857 * _1863, _1858 * _1863, _1859 * _1863));
        float _3734 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1880 = (exp2(log2(1.0 - (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1884 = (0.5 / ((_1870 + 9.9999999392252902907785028219223e-09) + _1696)) * _1870;
        float _3745 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1886 = (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * 0.31831014156341552734375;
        float _1887 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _1839 = (((_1880 * cbLight._m0[_1845].x) * _1886) * _1887) + _1775;
        _1841 = (((_1880 * cbLight._m0[_1845].y) * _1886) * _1887) + _1776;
        _1843 = (((_1880 * cbLight._m0[_1845].z) * _1886) * _1887) + _1777;
    }
    float _1922;
    float _1924;
    float _1926;
    if (_1632)
    {
        _1922 = _1839;
        _1924 = _1841;
        _1926 = _1843;
    }
    else
    {
        uint _1933 = _1537 + 11u;
        uint _1939 = _1537 + 3u;
        float _1945 = cbLight._m0[_1939].x + _362;
        float _1946 = cbLight._m0[_1939].y + _363;
        float _1947 = cbLight._m0[_1939].z + _364;
        float _1951 = inversesqrt(dot(vec3(_1945, _1946, _1947), vec3(_1945, _1946, _1947)));
        float _1955 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1939].xyz));
        float _3761 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1958 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1959 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_1945 * _1951, _1946 * _1951, _1947 * _1951));
        float _3772 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1968 = (exp2(log2(1.0 - (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1972 = (0.5 / ((_1958 + 9.9999999392252902907785028219223e-09) + _1696)) * _1958;
        float _3783 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1974 = (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * 0.31831014156341552734375;
        float _1975 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
        _1922 = (((_1968 * cbLight._m0[_1933].x) * _1974) * _1975) + _1839;
        _1924 = (((_1968 * cbLight._m0[_1933].y) * _1974) * _1975) + _1841;
        _1926 = (((_1968 * cbLight._m0[_1933].z) * _1974) * _1975) + _1843;
    }
    float _2109;
    float _2111;
    float _2113;
    float _2115;
    float _2117;
    float _2119;
    if (_1535.y == 0u)
    {
        float _2050 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2051 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2050;
        float _2052 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2050;
        float _2053 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2050;
        uvec4 _2065 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2066 = _2065.x;
        uint _2077 = uint((float(_2065.y) * floor(float(uint(cbSceneParam._m0[85u].y * _385) / _2066))) + floor(float(uint(cbSceneParam._m0[85u].x * _384) / _2066)));
        float _2087 = (log2(_2053 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2088 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        uint _2091 = uint(isnan(14.0) ? _2088 : (isnan(_2088) ? 14.0 : min(_2088, 14.0)));
        uvec4 _2096 = texelFetch(g_lightClusterGridBuffer, int(((_2091 << 2u) + (_2077 << 6u)) >> 2u));
        uint _2097 = _2096.x;
        uint _2098 = _2065.z;
        float _2226;
        float _2228;
        float _2230;
        float _2232;
        float _2234;
        float _2236;
        if (((((1u << ((_2098 >> 4u) & 15u)) + 4294967295u) & _2097) == 0u) || ((_2098 & 240u) == 0u))
        {
            _2226 = 0.0;
            _2228 = 0.0;
            _2230 = 0.0;
            _2232 = 0.0;
            _2234 = 0.0;
            _2236 = 0.0;
        }
        else
        {
            float _2227;
            float _2229;
            float _2231;
            float _2233;
            float _2235;
            float _2237;
            float _2386 = 0.0;
            float _2387 = 0.0;
            float _2388 = 0.0;
            float _2389 = 0.0;
            float _2390 = 0.0;
            float _2391 = 0.0;
            uint _2392 = 0u;
            uint _2401;
            bool _2402;
            for (;;)
            {
                _2401 = texelFetch(g_lightClassification, int((((_2091 << 5u) + (_2077 << 9u)) + (_2392 << 2u)) >> 2u)).x;
                _2402 = _2401 == 0u;
                float frontier_phi_81_pred;
                float frontier_phi_81_pred_1;
                float frontier_phi_81_pred_2;
                float frontier_phi_81_pred_3;
                float frontier_phi_81_pred_4;
                float frontier_phi_81_pred_5;
                if (_2402)
                {
                    frontier_phi_81_pred = _2391;
                    frontier_phi_81_pred_1 = _2390;
                    frontier_phi_81_pred_2 = _2389;
                    frontier_phi_81_pred_3 = _2388;
                    frontier_phi_81_pred_4 = _2387;
                    frontier_phi_81_pred_5 = _2386;
                }
                else
                {
                    float _2531;
                    float _2532;
                    float _2533;
                    float _2534;
                    float _2535;
                    float _2536;
                    uint _2537;
                    _2531 = _2386;
                    _2532 = _2387;
                    _2533 = _2388;
                    _2534 = _2389;
                    _2535 = _2390;
                    _2536 = _2391;
                    _2537 = _2401;
                    float _2458;
                    float _2459;
                    float _2460;
                    float _2461;
                    float _2462;
                    float _2463;
                    for (;;)
                    {
                        uint _2541 = uint(findLSB(_2537)) + (_2392 << 5u);
                        uint _2538 = (_2537 + 4294967295u) & _2537;
                        uint _2543 = _2541 * 48u;
                        vec4 _2557 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2543)).x, texelFetch(g_PointLightRenderingBuffer, int(_2543 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2543 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2543 + 3u)).x));
                        uint _2563 = (_2541 * 48u) + 4u;
                        vec4 _2576 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2563)).x, texelFetch(g_PointLightRenderingBuffer, int(_2563 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2563 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2563 + 3u)).x));
                        uint _2582 = (_2541 * 48u) + 8u;
                        vec3 _2593 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2582)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 2u)).x));
                        float _2597 = _2557.x - _2051;
                        float _2598 = _2557.y - _2052;
                        float _2599 = _2557.z - _2053;
                        float _2600 = dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599));
                        float _2603 = inversesqrt(_2600);
                        float _2612 = 1.0 - (_2600 * _2557.w);
                        float _3809 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
                        float _2613 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
                        float _2614 = sqrt(_2600) * _2576.w;
                        float _2617 = 1.39999997615814208984375 / (_2614 + 1.39999997615814208984375);
                        float _2618 = _2617 * _2617;
                        float _2621 = ((1.0 - _2618) * dot(vec3(_405, _408, _411), vec3(_2603 * _2597, _2603 * _2598, _2603 * _2599))) + _2618;
                        float _2624 = _2614 * _2614;
                        float _2628 = ((isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0))) * _2613) / ((_2624 * 0.699999988079071044921875) + 1.0);
                        float _2632 = (-0.0) - _2051;
                        float _2633 = (-0.0) - _2052;
                        float _2634 = (-0.0) - _2053;
                        float _2638 = inversesqrt(dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634)));
                        float _2642 = dot(vec3(_405, _408, _411), vec3(_2638 * _2632, _2638 * _2633, _2638 * _2634));
                        float _3825 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
                        float _3836 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
                        float _2646 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
                        float _2650 = (0.5 / (((isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) + 9.9999999392252902907785028219223e-09) + _2646)) * _2646;
                        float _3847 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
                        float _2659 = (((isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * 3.1415927410125732421875) / ((_2624 * 2.1991131305694580078125) + 3.141590118408203125)) * _2613;
                        _2461 = (_2628 * _2576.x) + _2534;
                        _2462 = (_2628 * _2576.y) + _2535;
                        _2463 = (_2628 * _2576.z) + _2536;
                        _2458 = (_2659 * _2593.x) + _2531;
                        _2459 = (_2659 * _2593.y) + _2532;
                        _2460 = (_2659 * _2593.z) + _2533;
                        if (_2538 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2531 = _2458;
                            _2532 = _2459;
                            _2533 = _2460;
                            _2534 = _2461;
                            _2535 = _2462;
                            _2536 = _2463;
                            _2537 = _2538;
                        }
                    }
                    frontier_phi_81_pred = _2463;
                    frontier_phi_81_pred_1 = _2462;
                    frontier_phi_81_pred_2 = _2461;
                    frontier_phi_81_pred_3 = _2460;
                    frontier_phi_81_pred_4 = _2459;
                    frontier_phi_81_pred_5 = _2458;
                }
                _2237 = frontier_phi_81_pred;
                _2235 = frontier_phi_81_pred_1;
                _2233 = frontier_phi_81_pred_2;
                _2231 = frontier_phi_81_pred_3;
                _2229 = frontier_phi_81_pred_4;
                _2227 = frontier_phi_81_pred_5;
                uint _2393 = _2392 + 1u;
                if (_2393 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2386 = _2227;
                    _2387 = _2229;
                    _2388 = _2231;
                    _2389 = _2233;
                    _2390 = _2235;
                    _2391 = _2237;
                    _2392 = _2393;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2226 = _2227;
            _2228 = _2229;
            _2230 = _2231;
            _2232 = _2233;
            _2234 = _2235;
            _2236 = _2237;
        }
        uvec4 _2240 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2241 = _2240.z;
        uint _2243 = (_2241 >> 8u) & 15u;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        if (((4294967295u << _2243) & _2097) == 0u)
        {
            _2357 = _2226;
            _2359 = _2228;
            _2361 = _2230;
            _2363 = _2232;
            _2365 = _2234;
            _2367 = _2236;
        }
        else
        {
            float _2382 = inversesqrt(dot(vec3(_2051, _2052, _2053), vec3(_2051, _2052, _2053)));
            float frontier_phi_73_74_ladder;
            float frontier_phi_73_74_ladder_1;
            float frontier_phi_73_74_ladder_2;
            float frontier_phi_73_74_ladder_3;
            float frontier_phi_73_74_ladder_4;
            float frontier_phi_73_74_ladder_5;
            if (_2243 < ((_2241 >> 12u) & 15u))
            {
                float _2358;
                float _2360;
                float _2362;
                float _2364;
                float _2366;
                float _2368;
                float _2514 = _2226;
                float _2515 = _2228;
                float _2516 = _2230;
                float _2517 = _2232;
                float _2518 = _2234;
                float _2519 = _2236;
                uint _2520 = _2243;
                uint _2529;
                bool _2530;
                for (;;)
                {
                    _2529 = texelFetch(g_lightClassification, int((((_2091 << 5u) + (_2077 << 9u)) + (_2520 << 2u)) >> 2u)).x;
                    _2530 = _2529 == 0u;
                    float frontier_phi_92_pred;
                    float frontier_phi_92_pred_1;
                    float frontier_phi_92_pred_2;
                    float frontier_phi_92_pred_3;
                    float frontier_phi_92_pred_4;
                    float frontier_phi_92_pred_5;
                    if (_2530)
                    {
                        frontier_phi_92_pred = _2518;
                        frontier_phi_92_pred_1 = _2517;
                        frontier_phi_92_pred_2 = _2516;
                        frontier_phi_92_pred_3 = _2515;
                        frontier_phi_92_pred_4 = _2514;
                        frontier_phi_92_pred_5 = _2519;
                    }
                    else
                    {
                        float _2673;
                        float _2674;
                        float _2675;
                        float _2676;
                        float _2677;
                        float _2678;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2929;
                        float _2930;
                        float _2686 = _2514;
                        float _2687 = _2515;
                        float _2688 = _2516;
                        float _2689 = _2517;
                        float _2690 = _2518;
                        float _2691 = _2519;
                        uint _2692 = _2529;
                        uint _2693;
                        vec4 _2718;
                        float _2719;
                        vec4 _2734;
                        vec3 _2746;
                        vec4 _2762;
                        vec4 _2778;
                        float _2825;
                        bool _2826;
                        for (;;)
                        {
                            uint _2703 = ((_2520 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2692));
                            _2693 = (_2692 + 4294967295u) & _2692;
                            uint _2705 = _2703 * 40u;
                            _2718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 3u)).x));
                            _2719 = _2718.w;
                            uint _2721 = (_2703 * 40u) + 4u;
                            _2734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 3u)).x));
                            uint _2736 = (_2703 * 40u) + 8u;
                            _2746 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 2u)).x));
                            uint _2749 = (_2703 * 40u) + 16u;
                            _2762 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 3u)).x));
                            uint _2765 = (_2703 * 40u) + 20u;
                            _2778 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 3u)).x));
                            uint _2781 = (_2703 * 40u) + 24u;
                            vec4 _2794 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 3u)).x));
                            uint _2800 = (_2703 * 40u) + 28u;
                            vec4 _2813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 3u)).x));
                            _2825 = fma(_2053, _2813.z, fma(_2052, _2813.y, _2813.x * _2051)) + _2813.w;
                            _2826 = !((fma(_2053, _2794.z, fma(_2052, _2794.y, _2794.x * _2051)) + _2794.w) <= 0.0);
                            float frontier_phi_98_pred;
                            float frontier_phi_98_pred_1;
                            float frontier_phi_98_pred_2;
                            float frontier_phi_98_pred_3;
                            float frontier_phi_98_pred_4;
                            float frontier_phi_98_pred_5;
                            if (_2826)
                            {
                                float _2853 = _2718.x - _2051;
                                float _2854 = _2718.y - _2052;
                                float _2855 = _2718.z - _2053;
                                float _2856 = dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855));
                                float _2859 = inversesqrt(_2856);
                                float _2860 = _2859 * _2853;
                                float _2861 = _2859 * _2854;
                                float _2862 = _2859 * _2855;
                                float _2866 = 1.0 - (_2856 / (_2719 * _2719));
                                float _3858 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                                float _2867 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
                                float _2871 = sqrt(_2856) * _2734.w;
                                float _2873 = 1.39999997615814208984375 / (_2871 + 1.39999997615814208984375);
                                float _2874 = _2873 * _2873;
                                float _2875 = 1.0 - _2874;
                                float _2877 = (_2875 * dot(vec3(_2860, _2861, _2862), vec3(_405, _408, _411))) + _2874;
                                float _2880 = _2871 * _2871;
                                float _2884 = (fma(_2053, _2762.z, fma(_2052, _2762.y, _2762.x * _2051)) + _2762.w) / _2825;
                                float _2885 = (fma(_2053, _2778.z, fma(_2052, _2778.y, _2778.x * _2051)) + _2778.w) / _2825;
                                float _2889 = 1.0 - dot(vec2(_2884, _2885), vec2(_2884, _2885));
                                float _3874 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                                float _2890 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
                                float _2891 = _2890 * (((isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0))) * _2867) / ((_2880 * 0.699999988079071044921875) + 1.0));
                                float _2901 = dot(vec3(_405, _408, _411), vec3((-0.0) - (_2051 * _2382), (-0.0) - (_2052 * _2382), (-0.0) - (_2053 * _2382)));
                                float _3885 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                                float _2909 = (_2875 * dot(vec3(_405, _408, _411), vec3(_2860, _2861, _2862))) + _2874;
                                float _3896 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                                float _2910 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
                                float _2914 = (0.5 / (((isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) + 9.9999999392252902907785028219223e-09) + _2910)) * _2910;
                                float _3907 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                                float _2921 = (_2890 * _2867) * (((isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * 3.1415927410125732421875) / ((_2880 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_98_pred = _2891 * _2734.y;
                                frontier_phi_98_pred_1 = _2891 * _2734.x;
                                frontier_phi_98_pred_2 = _2921 * _2746.z;
                                frontier_phi_98_pred_3 = _2921 * _2746.y;
                                frontier_phi_98_pred_4 = _2921 * _2746.x;
                                frontier_phi_98_pred_5 = _2891 * _2734.z;
                            }
                            else
                            {
                                frontier_phi_98_pred = 0.0;
                                frontier_phi_98_pred_1 = 0.0;
                                frontier_phi_98_pred_2 = 0.0;
                                frontier_phi_98_pred_3 = 0.0;
                                frontier_phi_98_pred_4 = 0.0;
                                frontier_phi_98_pred_5 = 0.0;
                            }
                            _2929 = frontier_phi_98_pred;
                            _2928 = frontier_phi_98_pred_1;
                            _2927 = frontier_phi_98_pred_2;
                            _2926 = frontier_phi_98_pred_3;
                            _2925 = frontier_phi_98_pred_4;
                            _2930 = frontier_phi_98_pred_5;
                            _2676 = _2928 + _2689;
                            _2677 = _2929 + _2690;
                            _2678 = _2930 + _2691;
                            _2673 = _2925 + _2686;
                            _2674 = _2926 + _2687;
                            _2675 = _2927 + _2688;
                            if (_2693 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2686 = _2673;
                                _2687 = _2674;
                                _2688 = _2675;
                                _2689 = _2676;
                                _2690 = _2677;
                                _2691 = _2678;
                                _2692 = _2693;
                                continue;
                            }
                        }
                        frontier_phi_92_pred = _2677;
                        frontier_phi_92_pred_1 = _2676;
                        frontier_phi_92_pred_2 = _2675;
                        frontier_phi_92_pred_3 = _2674;
                        frontier_phi_92_pred_4 = _2673;
                        frontier_phi_92_pred_5 = _2678;
                    }
                    _2366 = frontier_phi_92_pred;
                    _2364 = frontier_phi_92_pred_1;
                    _2362 = frontier_phi_92_pred_2;
                    _2360 = frontier_phi_92_pred_3;
                    _2358 = frontier_phi_92_pred_4;
                    _2368 = frontier_phi_92_pred_5;
                    uint _2521 = _2520 + 1u;
                    if (_2521 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2514 = _2358;
                        _2515 = _2360;
                        _2516 = _2362;
                        _2517 = _2364;
                        _2518 = _2366;
                        _2519 = _2368;
                        _2520 = _2521;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_73_74_ladder = _2368;
                frontier_phi_73_74_ladder_1 = _2364;
                frontier_phi_73_74_ladder_2 = _2366;
                frontier_phi_73_74_ladder_3 = _2360;
                frontier_phi_73_74_ladder_4 = _2358;
                frontier_phi_73_74_ladder_5 = _2362;
            }
            else
            {
                frontier_phi_73_74_ladder = _2236;
                frontier_phi_73_74_ladder_1 = _2232;
                frontier_phi_73_74_ladder_2 = _2234;
                frontier_phi_73_74_ladder_3 = _2228;
                frontier_phi_73_74_ladder_4 = _2226;
                frontier_phi_73_74_ladder_5 = _2230;
            }
            _2357 = frontier_phi_73_74_ladder_4;
            _2359 = frontier_phi_73_74_ladder_3;
            _2361 = frontier_phi_73_74_ladder_5;
            _2363 = frontier_phi_73_74_ladder_1;
            _2365 = frontier_phi_73_74_ladder_2;
            _2367 = frontier_phi_73_74_ladder;
        }
        float _2372 = isnan(1.0) ? _449 : (isnan(_449) ? 1.0 : min(_449, 1.0));
        _2109 = (_2372 * _2363) + _1670;
        _2111 = (_2372 * _2365) + _1672;
        _2113 = (_2372 * _2367) + _1674;
        _2115 = ((_2357 * 0.039999999105930328369140625) * _2372) + _1922;
        _2117 = ((_2359 * 0.039999999105930328369140625) * _2372) + _1924;
        _2119 = ((_2361 * 0.039999999105930328369140625) * _2372) + _1926;
    }
    else
    {
        _2109 = _1670;
        _2111 = _1672;
        _2113 = _1674;
        _2115 = _1922;
        _2117 = _1924;
        _2119 = _1926;
    }
    uint _2125 = _425 + uint(cbMatDynParam._m0[0u].w);
    float _2131 = cbInstanceData._m0[_2125].x * _273;
    float _2132 = cbInstanceData._m0[_2125].y * _275;
    float _2133 = cbInstanceData._m0[_2125].z * _276;
    float _3923 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _3934 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _3945 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _2150 = (((isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_2109 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _449))) + ((_2115 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _1287)) * cbPerFrame._m0[3u].x)) + _2131;
    float _2152 = (_2132 + ((_2117 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _1287)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_2111 + ((isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))) * _449)));
    float _2154 = (_2133 + ((_2119 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _1287)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_2113 + ((isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))) * _449)));
    float _2155 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2156 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2157 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2163 = cbMtdParam._m0[2u].x * _2131;
    float _2164 = cbMtdParam._m0[2u].y * _2132;
    float _2165 = cbMtdParam._m0[2u].z * _2133;
    float _3971 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2167 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    uint _2168 = _424 + 6u;
    float _2176 = _384 / cbSceneParam._m0[86u].x;
    float _2177 = _385 / cbSceneParam._m0[86u].y;
    vec4 _2191 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2176, _2177, (log2((isnan(cbSceneParam._m0[77u].w) ? _303 : (isnan(_303) ? cbSceneParam._m0[77u].w : min(_303, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2193 = _2191.x;
    float _2194 = _2191.y;
    float _2195 = _2191.z;
    float _2196 = _2191.w;
    float _2288;
    float _2290;
    float _2292;
    float _2294;
    if (_303 > cbSceneParam._m0[78u].w)
    {
        float _2251 = isnan(_303) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _303 : min(cbSceneParam._m0[80u].w, _303));
        float _2252 = _2251 / _303;
        float _2263 = _2252 * _355;
        float _2264 = _356 * _2252;
        float _2265 = (-0.0) - _2264;
        float _2266 = _2252 * _357;
        float _2268 = (cbSceneParam._m0[77u].w * _2265) / _2251;
        float _2269 = _2268 + cbSceneParam._m0[79u].w;
        float _2270 = cbSceneParam._m0[79u].w - _2264;
        float _2276 = sqrt(((_2263 * _2263) + (_2264 * _2264)) + (_2266 * _2266));
        float _2279 = (1.0 - (cbSceneParam._m0[77u].w / _2251)) * _2276;
        float _2284 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2286 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2471;
        if (abs((_2265 - _2268) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2471 = ((((_2269 > 0.0) ? exp2(_2284 * _2269) : (2.0 - exp2(_2286 * _2269))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2279;
        }
        else
        {
            float _2415 = 1.0 / cbSceneParam._m0[80u].x;
            float _2416 = isnan(_2270) ? _2269 : (isnan(_2269) ? _2270 : max(_2269, _2270));
            float _2417 = isnan(_2270) ? _2269 : (isnan(_2269) ? _2270 : min(_2269, _2270));
            float _2426 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : min(_2416, 0.0));
            float _2427 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : min(_2417, 0.0));
            _2471 = ((abs(_2276 / _2265) * cbSceneParam._m0[80u].y) * ((((_2426 - _2427) * 2.0) - ((exp2(_2284 * (isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0)))) - exp2(_2284 * (isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0))))) * _2415)) - ((exp2(_2286 * _2426) - exp2(_2286 * _2427)) * _2415))) + (_2279 * cbSceneParam._m0[80u].z);
        }
        vec4 _2473 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2176, _2177, 1.0), 0.0);
        float _2482 = exp2((_2471 * (-1.44269502162933349609375)) * (1.0 - _2473.w));
        float _2483 = log2(_2482);
        float _2499 = log2(_2196);
        _2288 = (exp2(_2499 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2483 * cbSceneParam._m0[78u].x)) * _2473.x) / cbSceneParam._m0[78u].x)) + _2193;
        _2290 = (exp2(_2499 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2483 * cbSceneParam._m0[78u].y)) * _2473.y) / cbSceneParam._m0[78u].y)) + _2194;
        _2292 = (exp2(_2499 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2483 * cbSceneParam._m0[78u].z)) * _2473.z) / cbSceneParam._m0[78u].z)) + _2195;
        _2294 = _2482 * _2196;
    }
    else
    {
        _2288 = _2193;
        _2290 = _2194;
        _2292 = _2195;
        _2294 = _2196;
    }
    bool _2509;
    vec4 _2304;
    vec4 _2327;
    float _2329;
    float _2333;
    float _2334;
    float _2335;
    float _2338;
    float _2341;
    float _2344;
    float _2345;
    bool _2356;
    for (;;)
    {
        _2304 = cbMatDynParam._m0[0u];
        float _2306 = roundEven(_2304.y);
        bool _2307 = _2306 == 3.0;
        float _2309 = log2(_2294);
        float _2313 = exp2(_2309 * cbSceneParam._m0[78u].x);
        float _2314 = exp2(_2309 * cbSceneParam._m0[78u].y);
        float _2315 = exp2(_2309 * cbSceneParam._m0[78u].z);
        float _2316 = _2313 * _2155;
        float _2317 = _2314 * _2156;
        float _2318 = _2315 * _2157;
        float _2325 = _371 + (-0.5);
        _2327 = cbMtdParam._m0[1u];
        _2329 = _2327.y * _2325;
        float _2332 = (_2306 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2333 = _2332 * (_2307 ? _2316 : (_2316 + (cbSceneParam._m0[72u].w * _2288)));
        _2334 = _2332 * (_2307 ? _2317 : (_2317 + (cbSceneParam._m0[72u].w * _2290)));
        _2335 = _2332 * (_2307 ? _2318 : (_2318 + (cbSceneParam._m0[72u].w * _2292)));
        _2338 = ((_2163 * _2167) * _2313) * _2332;
        _2341 = ((_2164 * _2167) * _2314) * _2332;
        _2344 = ((_2165 * _2167) * _2315) * _2332;
        _2345 = _2325 * 0.999000012874603271484375;
        _2356 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2356)
        {
            if ((cbInstanceData._m0[_424 + 7u].x + _2345) < 0.5)
            {
                _2509 = true;
                break;
            }
        }
        uint _2450 = _425 + uint(_2304.w);
        if ((cbInstanceData._m0[_2450].w < 1.0) && ((cbInstanceData._m0[_2450].w + _2345) < 0.5))
        {
            _2509 = true;
            break;
        }
        if ((_2329 + 1.0) < _2327.x)
        {
            _2509 = true;
            break;
        }
        _2509 = false;
        break;
    }
    float _2664;
    if (_2509)
    {
        discard_state = true;
        _2664 = 0.0;
    }
    else
    {
        _2664 = cbInstanceData._m0[_2168].w;
    }
    SV_Target.x = _2333;
    SV_Target.y = _2334;
    SV_Target.z = _2335;
    SV_Target.w = _2664;
    SV_Target_1.x = _2338;
    SV_Target_1.y = _2341;
    SV_Target_1.z = _2344;
    SV_Target_1.w = cbInstanceData._m0[_2168].w;
    discard_exit();
}


