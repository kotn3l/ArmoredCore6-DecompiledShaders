#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[13];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _734;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _167 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _168 = _167 * NORMAL.x;
    float _169 = _167 * NORMAL.y;
    float _170 = _167 * NORMAL.z;
    float _175;
    float _176;
    float _177;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _175 = (-0.0) - _168;
        _176 = (-0.0) - _169;
        _177 = (-0.0) - _170;
    }
    else
    {
        _175 = _168;
        _176 = _169;
        _177 = _170;
    }
    vec4 _197 = texture(sampler2D(M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _203 = _197.x * cbMtdParam._m0[9u].x;
    float _204 = _197.y * cbMtdParam._m0[9u].y;
    float _205 = _197.z * cbMtdParam._m0[9u].z;
    vec4 _217 = texture(sampler2D(M_A_M0_HSV0_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _235 = inversesqrt(dot(vec3(_175, _176, _177), vec3(_175, _176, _177)));
    float _236 = _235 * _175;
    float _237 = _235 * _176;
    float _238 = _235 * _177;
    float _3172 = isnan(0.0) ? _203 : (isnan(_203) ? 0.0 : max(_203, 0.0));
    float _3183 = isnan(0.0) ? _204 : (isnan(_204) ? 0.0 : max(_204, 0.0));
    float _3194 = isnan(0.0) ? _205 : (isnan(_205) ? 0.0 : max(_205, 0.0));
    float _258 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _299 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _309 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _299);
    float _310 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _299);
    float _311 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _299);
    float _315 = inversesqrt(dot(vec3(_309, _310, _311), vec3(_309, _310, _311)));
    float _316 = _309 * _315;
    float _317 = _310 * _315;
    float _318 = _311 * _315;
    float _324 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _325 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _346 = fma(_238, cbSceneParam._m0[5u].z, fma(_237, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _236));
    float _349 = fma(_238, cbSceneParam._m0[6u].z, fma(_237, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _236));
    float _352 = fma(_238, cbSceneParam._m0[7u].z, fma(_237, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _236));
    uint _365 = uint(roundEven(NORMAL.w)) * 13u;
    uint _366 = _365 + 9u;
    uint _367 = _366 + uint(cbMatDynParam._m0[0u].w);
    float _373 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0)))) * cbInstanceData._m0[_367].x;
    float _374 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0)))) * cbInstanceData._m0[_367].y;
    float _375 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0)))) * cbInstanceData._m0[_367].z;
    float _3205 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _376 = isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0));
    float _3216 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _377 = isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0));
    float _3227 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _378 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
    vec4 _387 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _324, cbSceneParam._m0[86u].y * _325));
    float _390 = _387.x * TEXCOORD.z;
    float _391 = dot(vec3(_236, _237, _238), vec3(_316, _317, _318));
    float _394 = _391 * 2.0;
    float _399 = (_394 * _236) - _316;
    float _400 = (_394 * _237) - _317;
    float _401 = (_394 * _238) - _318;
    float _423 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _427 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _431 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _733;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    float _748;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _458 = fma(_431, cbModelParam._m0[26u].z, fma(_427, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _423));
        float _462 = fma(_431, cbModelParam._m0[27u].z, fma(_427, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _423));
        float _466 = fma(_431, cbModelParam._m0[28u].z, fma(_427, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _423));
        float _491 = _423 + _236;
        float _492 = _427 + _237;
        float _493 = _431 + _238;
        float _503 = fma(_493, cbModelParam._m0[26u].z, fma(_492, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _491)) - _458;
        float _504 = fma(_493, cbModelParam._m0[27u].z, fma(_492, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _491)) - _462;
        float _505 = fma(_493, cbModelParam._m0[28u].z, fma(_492, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _491)) - _466;
        float _509 = inversesqrt(dot(vec3(_503, _504, _505), vec3(_503, _504, _505)));
        float _522 = ((_509 * _503) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_458 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _523 = ((_509 * _504) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_462 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _524 = ((_509 * _505) / cbModelParam._m0[34u].z) + ((((((_466 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _527 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_522, _523, _524), 0.0);
        vec4 _534 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_522, _523, _524), 0.0);
        vec4 _541 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_522, _523, _524), 0.0);
        vec4 _548 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_522, _523, _524), 0.0);
        float _561 = exp2((_527.w + (-0.5)) * 20.0) * 2.0;
        float _562 = _561 * (_527.x + (-0.5));
        float _563 = _561 * (_527.y + (-0.5));
        float _564 = _561 * (_527.z + (-0.5));
        float _571 = exp2((_534.w + (-0.5)) * 20.0) * 2.0;
        float _572 = _571 * (_534.x + (-0.5));
        float _573 = _571 * (_534.y + (-0.5));
        float _574 = _571 * (_534.z + (-0.5));
        float _581 = exp2((_541.w + (-0.5)) * 20.0) * 2.0;
        float _582 = _581 * (_541.x + (-0.5));
        float _583 = _581 * (_541.y + (-0.5));
        float _584 = _581 * (_541.z + (-0.5));
        float _591 = exp2((_548.w + (-0.5)) * 20.0) * 2.0;
        float _592 = _591 * (_548.x + (-0.5));
        float _593 = _591 * (_548.y + (-0.5));
        float _594 = _591 * (_548.z + (-0.5));
        float _595 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
        float _596 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
        float _597 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
        float _598 = _562 * 0.5;
        float _599 = _572 * 0.5;
        float _600 = _582 * 0.5;
        float _601 = dot(vec3(_598, _599, _600), vec3(_598, _599, _600));
        float _606 = (_601 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_601);
        float _615 = (dot(vec3(_236, _237, _238), vec3(_606 * _598, _606 * _599, _606 * _600)) + 1.0) * 0.5;
        float _3253 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
        float _625 = sqrt(((_599 * _599) + (_598 * _598)) + (_600 * _600)) / (_595 + 9.9999997473787516355514526367188e-06);
        float _3264 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
        float _626 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
        float _627 = _626 * 2.0;
        float _631 = (1.0 - _626) / (_626 + 1.0);
        float _3275 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _632 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
        float _641 = ((((1.0 - _632) * (_627 + 2.0)) * exp2(log2(isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0))) * (_627 + 1.0))) + _632) * _595;
        float _642 = _563 * 0.5;
        float _643 = _573 * 0.5;
        float _644 = _583 * 0.5;
        float _645 = dot(vec3(_642, _643, _644), vec3(_642, _643, _644));
        float _650 = (_645 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_645);
        float _658 = (dot(vec3(_236, _237, _238), vec3(_650 * _642, _650 * _643, _650 * _644)) + 1.0) * 0.5;
        float _3286 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _667 = sqrt(((_643 * _643) + (_642 * _642)) + (_644 * _644)) / (_596 + 9.9999997473787516355514526367188e-06);
        float _3297 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _668 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
        float _669 = _668 * 2.0;
        float _673 = (1.0 - _668) / (_668 + 1.0);
        float _3308 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
        float _674 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
        float _683 = ((((1.0 - _674) * (_669 + 2.0)) * exp2(log2(isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0))) * (_669 + 1.0))) + _674) * _596;
        float _684 = _564 * 0.5;
        float _685 = _574 * 0.5;
        float _686 = _584 * 0.5;
        float _687 = dot(vec3(_684, _685, _686), vec3(_684, _685, _686));
        float _692 = (_687 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_687);
        float _700 = (dot(vec3(_236, _237, _238), vec3(_692 * _684, _692 * _685, _692 * _686)) + 1.0) * 0.5;
        float _3319 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _709 = sqrt(((_685 * _685) + (_684 * _684)) + (_686 * _686)) / (_597 + 9.9999997473787516355514526367188e-06);
        float _3330 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _710 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
        float _711 = _710 * 2.0;
        float _715 = (1.0 - _710) / (_710 + 1.0);
        float _3341 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _716 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
        float _725 = ((((1.0 - _716) * (_711 + 2.0)) * exp2(log2(isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0))) * (_711 + 1.0))) + _716) * _597;
        _733 = _564;
        _735 = _563;
        _736 = _562;
        _737 = _574;
        _738 = _573;
        _739 = _572;
        _740 = _584;
        _741 = _583;
        _742 = _582;
        _743 = _597;
        _744 = _596;
        _745 = _595;
        _746 = cbModelParam._m0[36u].z * (isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0)));
        _747 = cbModelParam._m0[36u].z * (isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0)));
        _748 = cbModelParam._m0[36u].z * (isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0)));
    }
    else
    {
        _733 = _734;
        _735 = _734;
        _736 = _734;
        _737 = _734;
        _738 = _734;
        _739 = _734;
        _740 = _734;
        _741 = _734;
        _742 = _734;
        _743 = _734;
        _744 = _734;
        _745 = _734;
        _746 = 0.0;
        _747 = 0.0;
        _748 = 0.0;
    }
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _774 = fma(_431, cbModelParam._m0[30u].z, fma(_427, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _423));
        float _778 = fma(_431, cbModelParam._m0[31u].z, fma(_427, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _423));
        float _782 = fma(_431, cbModelParam._m0[32u].z, fma(_427, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _423));
        float _805 = _423 + _236;
        float _806 = _427 + _237;
        float _807 = _431 + _238;
        float _817 = fma(_807, cbModelParam._m0[30u].z, fma(_806, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _805)) - _774;
        float _818 = fma(_807, cbModelParam._m0[31u].z, fma(_806, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _805)) - _778;
        float _819 = fma(_807, cbModelParam._m0[32u].z, fma(_806, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _805)) - _782;
        float _823 = inversesqrt(dot(vec3(_817, _818, _819), vec3(_817, _818, _819)));
        float _836 = ((_823 * _817) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_774 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _837 = ((_823 * _818) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_778 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _838 = ((_823 * _819) / cbModelParam._m0[35u].z) + ((((((_782 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        float _873 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_840.x + (-0.5));
        float _875 = _873 * (_840.y + (-0.5));
        float _876 = _873 * (_840.z + (-0.5));
        float _883 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_847.x + (-0.5));
        float _885 = _883 * (_847.y + (-0.5));
        float _886 = _883 * (_847.z + (-0.5));
        float _893 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_854.x + (-0.5));
        float _895 = _893 * (_854.y + (-0.5));
        float _896 = _893 * (_854.z + (-0.5));
        float _903 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_861.x + (-0.5));
        float _905 = _903 * (_861.y + (-0.5));
        float _906 = _903 * (_861.z + (-0.5));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = _874 * 0.5;
        float _911 = _884 * 0.5;
        float _912 = _894 * 0.5;
        float _913 = dot(vec3(_910, _911, _912), vec3(_910, _911, _912));
        float _918 = (_913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_913);
        float _926 = (dot(vec3(_236, _237, _238), vec3(_918 * _910, _918 * _911, _918 * _912)) + 1.0) * 0.5;
        float _3382 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _935 = sqrt(((_911 * _911) + (_910 * _910)) + (_912 * _912)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3393 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _3404 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * (_937 + 1.0))) + _942) * _907;
        float _952 = _875 * 0.5;
        float _953 = _885 * 0.5;
        float _954 = _895 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_236, _237, _238), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3415 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3426 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3437 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * (_979 + 1.0))) + _984) * _908;
        float _994 = _876 * 0.5;
        float _995 = _886 * 0.5;
        float _996 = _896 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1010 = (dot(vec3(_236, _237, _238), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3448 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1019 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3459 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3470 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * (_1021 + 1.0))) + _1026) * _909;
        _1043 = _876;
        _1044 = _875;
        _1045 = _874;
        _1046 = _886;
        _1047 = _885;
        _1048 = _884;
        _1049 = _896;
        _1050 = _895;
        _1051 = _894;
        _1052 = _909;
        _1053 = _908;
        _1054 = _907;
        _1055 = cbModelParam._m0[36u].w * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
        _1056 = cbModelParam._m0[36u].w * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
        _1057 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
    }
    else
    {
        _1043 = _734;
        _1044 = _734;
        _1045 = _734;
        _1046 = _734;
        _1047 = _734;
        _1048 = _734;
        _1049 = _734;
        _1050 = _734;
        _1051 = _734;
        _1052 = _734;
        _1053 = _734;
        _1054 = _734;
        _1055 = 0.0;
        _1056 = 0.0;
        _1057 = 0.0;
    }
    float _1067 = (cbModelParam._m0[1u].x * (_1055 - _746)) + _746;
    float _1068 = (cbModelParam._m0[1u].x * (_1056 - _747)) + _747;
    float _1069 = (cbModelParam._m0[1u].x * (_1057 - _748)) + _748;
    float _1090 = fma(_1069, cbSceneParam._m0[89u].z, fma(_1068, cbSceneParam._m0[89u].y, _1067 * cbSceneParam._m0[89u].x));
    float _1093 = fma(_1069, cbSceneParam._m0[90u].z, fma(_1068, cbSceneParam._m0[90u].y, _1067 * cbSceneParam._m0[90u].x));
    float _1096 = fma(_1069, cbSceneParam._m0[91u].z, fma(_1068, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1067));
    float _1111 = _399 * 0.5;
    float _1112 = _400 * 0.5;
    float _1113 = _401 * 0.5;
    float _1114 = dot(vec4(_1111, _1112, _1113, 1.0), vec4(_1045, _1048, _1051, _1054));
    float _1117 = dot(vec4(_1111, _1112, _1113, 1.0), vec4(_1044, _1047, _1050, _1053));
    float _1120 = dot(vec4(_1111, _1112, _1113, 1.0), vec4(_1043, _1046, _1049, _1052));
    float _1154;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1127 = dot(vec4(_1111, _1112, _1113, 1.0), vec4(_733, _737, _740, _743));
        float _1131 = dot(vec4(_1111, _1112, _1113, 1.0), vec4(_735, _738, _741, _744));
        float _1135 = dot(vec4(_1111, _1112, _1113, 1.0), vec4(_736, _739, _742, _745));
        float _1142 = dot(vec4(cbModelParam._m0[39u]), vec4(_1111, _1112, _1113, 1.0));
        _1154 = dot(vec3(isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)), isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)), isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1142) ? 0.0 : (isnan(0.0) ? _1142 : max(0.0, _1142))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1154 = 1.0;
    }
    float _1165;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1156 = dot(vec4(cbModelParam._m0[40u]), vec4(_1111, _1112, _1113, 1.0));
        _1165 = dot(vec3(isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)), isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)), isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1156) ? 0.0 : (isnan(0.0) ? _1156 : max(0.0, _1156))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1165 = 1.0;
    }
    float _1169 = (_1165 * cbModelParam._m0[1u].x) + (_1154 * (1.0 - cbModelParam._m0[1u].x));
    float _1178 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1260;
    float _1262;
    float _1264;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1227 = fma(_431, cbModelParam._m0[13u].z, fma(_427, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _423)) + cbModelParam._m0[13u].w;
        float _1231 = fma(_431, cbModelParam._m0[14u].z, fma(_427, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _423)) + cbModelParam._m0[14u].w;
        float _1235 = fma(_431, cbModelParam._m0[15u].z, fma(_427, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _423)) + cbModelParam._m0[15u].w;
        float _1238 = fma(_401, cbModelParam._m0[13u].z, fma(_400, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _399));
        float _1241 = fma(_401, cbModelParam._m0[14u].z, fma(_400, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _399));
        float _1244 = fma(_401, cbModelParam._m0[15u].z, fma(_400, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _399));
        float _1270;
        if (_1238 > 0.0)
        {
            _1270 = abs((1.0 - _1227) / _1238);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1238 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1227 + 1.0) / _1238);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1270 = frontier_phi_16_14_ladder;
        }
        float _1445;
        if (_1241 > 0.0)
        {
            _1445 = abs((1.0 - _1231) / _1241);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1241 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1231 + 1.0) / _1241);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1445 = frontier_phi_25_21_ladder;
        }
        float _1742;
        if (_1244 > 0.0)
        {
            _1742 = abs((1.0 - _1235) / _1244);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1244 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1235 + 1.0) / _1244);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1742 = frontier_phi_37_32_ladder;
        }
        float _1744 = isnan(_1445) ? _1270 : (isnan(_1270) ? _1445 : min(_1270, _1445));
        float _1745 = isnan(_1742) ? _1744 : (isnan(_1744) ? _1742 : min(_1744, _1742));
        float _1749 = (_1745 * _1238) + _1227;
        float _1750 = (_1745 * _1241) + _1231;
        float _1751 = (_1745 * _1244) + _1235;
        float _1752 = _1745 * 9.9999997473787516355514526367188e-05;
        float _1754 = (-1.0) - _1752;
        float _1756 = _1752 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1751 > _1756) || ((_1751 < _1754) || ((_1750 > _1756) || ((_1750 < _1754) || ((_1749 < _1754) || (_1749 > _1756))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1896 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1751, cbModelParam._m0[9u].z, fma(_1750, cbModelParam._m0[9u].y, _1749 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1751, cbModelParam._m0[10u].z, fma(_1750, cbModelParam._m0[10u].y, _1749 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1751, cbModelParam._m0[11u].z, fma(_1750, cbModelParam._m0[11u].y, _1749 * cbModelParam._m0[11u].x))), _1178);
            frontier_phi_15_37_ladder = _1896.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1896.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1896.z * cbModelParam._m0[1u].y;
        }
        _1260 = frontier_phi_15_37_ladder_1;
        _1262 = frontier_phi_15_37_ladder;
        _1264 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1248 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_399, _400, _401), _1178);
        _1260 = _1248.x * cbModelParam._m0[1u].y;
        _1262 = _1248.y * cbModelParam._m0[1u].y;
        _1264 = _1248.z * cbModelParam._m0[1u].y;
    }
    float _1267 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1360;
    float _1362;
    float _1364;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1324 = fma(_431, cbModelParam._m0[21u].z, fma(_427, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _423)) + cbModelParam._m0[21u].w;
        float _1328 = fma(_431, cbModelParam._m0[22u].z, fma(_427, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _423)) + cbModelParam._m0[22u].w;
        float _1332 = fma(_431, cbModelParam._m0[23u].z, fma(_427, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _423)) + cbModelParam._m0[23u].w;
        float _1335 = fma(_401, cbModelParam._m0[21u].z, fma(_400, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _399));
        float _1338 = fma(_401, cbModelParam._m0[22u].z, fma(_400, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _399));
        float _1341 = fma(_401, cbModelParam._m0[23u].z, fma(_400, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _399));
        float _1450;
        if (_1335 > 0.0)
        {
            _1450 = abs((1.0 - _1324) / _1335);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1335 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1324 + 1.0) / _1335);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1450 = frontier_phi_27_23_ladder;
        }
        float _1769;
        if (_1338 > 0.0)
        {
            _1769 = abs((1.0 - _1328) / _1338);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1338 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1328 + 1.0) / _1338);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1769 = frontier_phi_39_34_ladder;
        }
        float _2042;
        if (_1341 > 0.0)
        {
            _2042 = abs((1.0 - _1332) / _1341);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1341 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1332 + 1.0) / _1341);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2042 = frontier_phi_49_46_ladder;
        }
        float _2044 = isnan(_1769) ? _1450 : (isnan(_1450) ? _1769 : min(_1450, _1769));
        float _2045 = isnan(_2042) ? _2044 : (isnan(_2044) ? _2042 : min(_2044, _2042));
        float _2049 = (_2045 * _1335) + _1324;
        float _2050 = (_2045 * _1338) + _1328;
        float _2051 = (_2045 * _1341) + _1332;
        float _2052 = _2045 * 9.9999997473787516355514526367188e-05;
        float _2053 = (-1.0) - _2052;
        float _2055 = _2052 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2051 > _2055) || ((_2051 < _2053) || ((_2050 > _2055) || ((_2050 < _2053) || ((_2049 < _2053) || (_2049 > _2055))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2142 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2051, cbModelParam._m0[17u].z, fma(_2050, cbModelParam._m0[17u].y, _2049 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2051, cbModelParam._m0[18u].z, fma(_2050, cbModelParam._m0[18u].y, _2049 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2051, cbModelParam._m0[19u].z, fma(_2050, cbModelParam._m0[19u].y, _2049 * cbModelParam._m0[19u].x))), _1267);
            frontier_phi_24_49_ladder = _2142.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2142.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2142.x * cbModelParam._m0[1u].z;
        }
        _1360 = frontier_phi_24_49_ladder_2;
        _1362 = frontier_phi_24_49_ladder_1;
        _1364 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1344 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_399, _400, _401), _1267);
        _1360 = _1344.x * cbModelParam._m0[1u].z;
        _1362 = _1344.y * cbModelParam._m0[1u].z;
        _1364 = _1344.z * cbModelParam._m0[1u].z;
    }
    float _1376 = _390 * 0.01200000010430812835693359375;
    float _1378 = _1376 * ((cbModelParam._m0[1u].w * (_1360 - _1260)) + _1260);
    float _1379 = _1376 * ((cbModelParam._m0[1u].w * (_1362 - _1262)) + _1262);
    float _1380 = _1376 * ((cbModelParam._m0[1u].w * (_1364 - _1264)) + _1264);
    float _1383 = fma(_1380, cbSceneParam._m0[89u].z, fma(_1379, cbSceneParam._m0[89u].y, _1378 * cbSceneParam._m0[89u].x));
    float _1386 = fma(_1380, cbSceneParam._m0[90u].z, fma(_1379, cbSceneParam._m0[90u].y, _1378 * cbSceneParam._m0[90u].x));
    float _1389 = fma(_1380, cbSceneParam._m0[91u].z, fma(_1379, cbSceneParam._m0[91u].y, _1378 * cbSceneParam._m0[91u].x));
    float _1424 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1428 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1432 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1436 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1437 = _1424 / _1436;
    float _1438 = _1428 / _1436;
    float _1439 = _1432 / _1436;
    float _1586;
    float _1587;
    float _1588;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1466 = ((uint(_1439 > cbSceneParam._m0[59u].y) + uint(_1439 > cbSceneParam._m0[59u].x)) + uint(_1439 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1467 = _1466 + 43u;
        uint _1475 = _1466 + 44u;
        uint _1483 = _1466 + 45u;
        uint _1491 = _1466 + 46u;
        float _1502 = fma(_1436, cbSceneParam._m0[_1467].w, fma(_1432, cbSceneParam._m0[_1467].z, fma(_1428, cbSceneParam._m0[_1467].y, _1424 * cbSceneParam._m0[_1467].x)));
        float _1506 = fma(_1436, cbSceneParam._m0[_1475].w, fma(_1432, cbSceneParam._m0[_1475].z, fma(_1428, cbSceneParam._m0[_1475].y, _1424 * cbSceneParam._m0[_1475].x)));
        float _1514 = fma(_1436, cbSceneParam._m0[_1491].w, fma(_1432, cbSceneParam._m0[_1491].z, fma(_1428, cbSceneParam._m0[_1491].y, _1424 * cbSceneParam._m0[_1491].x)));
        float _1519 = cbSceneParam._m0[33u].z * _1514;
        float _1521 = cbSceneParam._m0[33u].w * _1514;
        float _1524 = fma(_1436, cbSceneParam._m0[_1483].w, fma(_1432, cbSceneParam._m0[_1483].z, fma(_1428, cbSceneParam._m0[_1483].y, _1424 * cbSceneParam._m0[_1483].x))) / _1514;
        float _1572 = (cbSceneParam._m0[33u].x - sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439))) * cbSceneParam._m0[33u].y;
        float _3596 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1579 = (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1519 + _1502) / _1514, (_1521 + _1506) / _1514), _1524), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1521 + _1502) / _1514, (_1506 - _1519) / _1514), _1524), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1502 - _1519) / _1514, (_1506 - _1521) / _1514), _1524), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1502 - _1521) / _1514, (_1519 + _1506) / _1514), _1524), 0.0)).x), vec4(0.25)));
        _1586 = 1.0 - (_1579 * cbSceneParam._m0[34u].x);
        _1587 = 1.0 - (_1579 * cbSceneParam._m0[34u].y);
        _1588 = 1.0 - (_1579 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1586 = 1.0;
        _1587 = 1.0;
        _1588 = 1.0;
    }
    float _1652;
    float _1654;
    float _1656;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1640 = fma(_1436, cbSceneParam._m0[63u].w, fma(_1432, cbSceneParam._m0[63u].z, fma(_1428, cbSceneParam._m0[63u].y, _1424 * cbSceneParam._m0[63u].x)));
        float _1641 = fma(_1436, cbSceneParam._m0[60u].w, fma(_1432, cbSceneParam._m0[60u].z, fma(_1428, cbSceneParam._m0[60u].y, _1424 * cbSceneParam._m0[60u].x))) / _1640;
        float _1642 = fma(_1436, cbSceneParam._m0[61u].w, fma(_1432, cbSceneParam._m0[61u].z, fma(_1428, cbSceneParam._m0[61u].y, _1424 * cbSceneParam._m0[61u].x))) / _1640;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1641 >= cbSceneParam._m0[64u].x) && (_1642 >= cbSceneParam._m0[64u].y)) && (_1641 <= cbSceneParam._m0[64u].z)) && (_1642 <= cbSceneParam._m0[64u].w))
        {
            float _1782 = fma(_1436, cbSceneParam._m0[62u].w, fma(_1432, cbSceneParam._m0[62u].z, fma(_1428, cbSceneParam._m0[62u].y, _1424 * cbSceneParam._m0[62u].x))) / _1640;
            float _1786 = isnan(cbSceneParam._m0[41u].w) ? _1782 : (isnan(_1782) ? cbSceneParam._m0[41u].w : max(_1782, cbSceneParam._m0[41u].w));
            float _1829 = (cbSceneParam._m0[33u].x - sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439))) * cbSceneParam._m0[33u].y;
            float _3612 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
            float _1836 = (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1641, cbSceneParam._m0[33u].w + _1642), _1786), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1641, _1642 - cbSceneParam._m0[33u].z), _1786), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1641 - cbSceneParam._m0[33u].z, _1642 - cbSceneParam._m0[33u].w), _1786), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1641 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1642), _1786), 0.0)).x), vec4(0.25)));
            float _1840 = 1.0 - (_1836 * cbSceneParam._m0[34u].x);
            float _1841 = 1.0 - (_1836 * cbSceneParam._m0[34u].y);
            float _1842 = 1.0 - (_1836 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1841) ? _1587 : (isnan(_1587) ? _1841 : min(_1587, _1841));
            frontier_phi_36_35_ladder_1 = isnan(_1842) ? _1588 : (isnan(_1588) ? _1842 : min(_1588, _1842));
            frontier_phi_36_35_ladder_2 = isnan(_1840) ? _1586 : (isnan(_1586) ? _1840 : min(_1586, _1840));
        }
        else
        {
            frontier_phi_36_35_ladder = _1587;
            frontier_phi_36_35_ladder_1 = _1588;
            frontier_phi_36_35_ladder_2 = _1586;
        }
        _1652 = frontier_phi_36_35_ladder_2;
        _1654 = frontier_phi_36_35_ladder;
        _1656 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1652 = _1586;
        _1654 = _1587;
        _1656 = _1588;
    }
    uvec4 _1661 = floatBitsToUint(cbInstanceData._m0[_365 + 5u]);
    uint _1663 = _1661.x * 14u;
    uint _1664 = _1663 + 13u;
    float _1671 = _390 + (-1.0);
    float _1677 = (cbLight._m0[_1664].x * _1671) + 1.0;
    float _1678 = (cbLight._m0[_1664].y * _1671) + 1.0;
    float _1679 = (cbLight._m0[_1664].z * _1671) + 1.0;
    float _1680 = (cbLight._m0[_1664].w * _1671) + 1.0;
    uint _1681 = _1663 + 5u;
    float _1687 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
    uint _1691 = _1663 + 4u;
    float _1701 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
    uint _1705 = _1663 | 1u;
    float _1716 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_236, _237, _238));
    float _1719 = dot(vec3(cbLight._m0[_1705].xyz), vec3(_236, _237, _238));
    float _3648 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
    float _3659 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _1724 = (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * 0.3183098733425140380859375;
    float _1726 = (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * 0.3183098733425140380859375;
    float _1733 = ((cbLight._m0[_1681].x * _1687) * _1726) + (((cbLight._m0[_1691].x * _1652) * _1701) * _1724);
    float _1734 = ((_1687 * cbLight._m0[_1681].y) * _1726) + (((cbLight._m0[_1691].y * _1654) * _1701) * _1724);
    float _1735 = ((_1687 * cbLight._m0[_1681].z) * _1726) + (((cbLight._m0[_1691].z * _1656) * _1701) * _1724);
    uvec4 _1739 = floatBitsToUint(cbLight._m0[_1663 + 12u]);
    bool _1741 = _1739.x == 0u;
    float _1843;
    float _1845;
    float _1847;
    if (_1741)
    {
        _1843 = _1733;
        _1845 = _1734;
        _1847 = _1735;
    }
    else
    {
        uint _1851 = _1663 + 6u;
        float _1867 = (dot(vec3(cbLight._m0[_1663 + 2u].xyz), vec3(_236, _237, _238)) * 0.5) + 0.5;
        float _1868 = _1867 * _1867;
        float _3670 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1869 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1870 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
        _1843 = (((cbLight._m0[_1851].x * 0.3183098733425140380859375) * _1869) * _1870) + _1733;
        _1845 = (((cbLight._m0[_1851].y * 0.3183098733425140380859375) * _1869) * _1870) + _1734;
        _1847 = (((cbLight._m0[_1851].z * 0.3183098733425140380859375) * _1869) * _1870) + _1735;
    }
    bool _1850 = _1739.y == 0u;
    float _1905;
    float _1907;
    float _1909;
    if (_1850)
    {
        _1905 = _1843;
        _1907 = _1845;
        _1909 = _1847;
    }
    else
    {
        uint _2013 = _1663 + 7u;
        float _2029 = (dot(vec3(cbLight._m0[_1663 + 3u].xyz), vec3(_236, _237, _238)) * 0.5) + 0.5;
        float _2030 = _2029 * _2029;
        float _3686 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2031 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _2032 = isnan(1.0) ? _1680 : (isnan(_1680) ? 1.0 : min(_1680, 1.0));
        _1905 = (((cbLight._m0[_2013].x * 0.3183098733425140380859375) * _2031) * _2032) + _1843;
        _1907 = (((cbLight._m0[_2013].y * 0.3183098733425140380859375) * _2031) * _2032) + _1845;
        _1909 = (((cbLight._m0[_2013].z * 0.3183098733425140380859375) * _2031) * _2032) + _1847;
    }
    uint _1911 = _1663 + 8u;
    float _1917 = cbLight._m0[_1663].x + _316;
    float _1918 = cbLight._m0[_1663].y + _317;
    float _1919 = cbLight._m0[_1663].z + _318;
    float _1923 = inversesqrt(dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919)));
    float _1927 = dot(vec3(_236, _237, _238), vec3(cbLight._m0[_1663].xyz));
    float _3702 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1930 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _3713 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _1931 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _1932 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_1917 * _1923, _1918 * _1923, _1919 * _1923));
    float _3724 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1943 = (exp2(log2(1.0 - (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1949 = (0.5 / ((_1930 + 9.9999999392252902907785028219223e-09) + _1931)) * _1930;
    float _3735 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1951 = (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * 0.31831014156341552734375;
    uint _1965 = _1663 + 9u;
    float _1971 = cbLight._m0[_1705].x + _316;
    float _1972 = cbLight._m0[_1705].y + _317;
    float _1973 = cbLight._m0[_1705].z + _318;
    float _1977 = inversesqrt(dot(vec3(_1971, _1972, _1973), vec3(_1971, _1972, _1973)));
    float _1981 = dot(vec3(_236, _237, _238), vec3(cbLight._m0[_1705].xyz));
    float _3746 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1984 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _1985 = dot(vec3(cbLight._m0[_1705].xyz), vec3(_1971 * _1977, _1972 * _1977, _1973 * _1977));
    float _3757 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1994 = (exp2(log2(1.0 - (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1998 = (0.5 / ((_1984 + 9.9999999392252902907785028219223e-09) + _1931)) * _1984;
    float _3768 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2000 = (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * 0.31831014156341552734375;
    float _2010 = (((_1994 * cbLight._m0[_1965].x) * _2000) * _1687) + ((((cbLight._m0[_1911].x * _1652) * _1943) * _1951) * _1701);
    float _2011 = (((_1994 * cbLight._m0[_1965].y) * _2000) * _1687) + ((((cbLight._m0[_1911].y * _1654) * _1943) * _1951) * _1701);
    float _2012 = (((_1994 * cbLight._m0[_1965].z) * _2000) * _1687) + ((((cbLight._m0[_1911].z * _1656) * _1943) * _1951) * _1701);
    float _2068;
    float _2070;
    float _2072;
    if (_1741)
    {
        _2068 = _2010;
        _2070 = _2011;
        _2072 = _2012;
    }
    else
    {
        uint _2074 = _1663 + 10u;
        uint _2080 = _1663 + 2u;
        float _2086 = cbLight._m0[_2080].x + _316;
        float _2087 = cbLight._m0[_2080].y + _317;
        float _2088 = cbLight._m0[_2080].z + _318;
        float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
        float _2096 = dot(vec3(_236, _237, _238), vec3(cbLight._m0[_2080].xyz));
        float _3779 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2099 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _2100 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_2086 * _2092, _2087 * _2092, _2088 * _2092));
        float _3790 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2109 = (exp2(log2(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2113 = (0.5 / ((_2099 + 9.9999999392252902907785028219223e-09) + _1931)) * _2099;
        float _3801 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2115 = (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * 0.31831014156341552734375;
        float _2116 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
        _2068 = (((_2109 * cbLight._m0[_2074].x) * _2115) * _2116) + _2010;
        _2070 = (((_2109 * cbLight._m0[_2074].y) * _2115) * _2116) + _2011;
        _2072 = (((_2109 * cbLight._m0[_2074].z) * _2115) * _2116) + _2012;
    }
    float _2147;
    float _2149;
    float _2151;
    if (_1850)
    {
        _2147 = _2068;
        _2149 = _2070;
        _2151 = _2072;
    }
    else
    {
        uint _2158 = _1663 + 11u;
        uint _2164 = _1663 + 3u;
        float _2170 = cbLight._m0[_2164].x + _316;
        float _2171 = cbLight._m0[_2164].y + _317;
        float _2172 = cbLight._m0[_2164].z + _318;
        float _2176 = inversesqrt(dot(vec3(_2170, _2171, _2172), vec3(_2170, _2171, _2172)));
        float _2180 = dot(vec3(_236, _237, _238), vec3(cbLight._m0[_2164].xyz));
        float _3817 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2183 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _2184 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_2170 * _2176, _2171 * _2176, _2172 * _2176));
        float _3828 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2193 = (exp2(log2(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2197 = (0.5 / ((_2183 + 9.9999999392252902907785028219223e-09) + _1931)) * _2183;
        float _3839 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2199 = (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * 0.31831014156341552734375;
        float _2200 = isnan(1.0) ? _1680 : (isnan(_1680) ? 1.0 : min(_1680, 1.0));
        _2147 = (((_2193 * cbLight._m0[_2158].x) * _2199) * _2200) + _2068;
        _2149 = (((_2193 * cbLight._m0[_2158].y) * _2199) * _2200) + _2070;
        _2151 = (((_2193 * cbLight._m0[_2158].z) * _2199) * _2200) + _2072;
    }
    float _2265;
    float _2267;
    float _2269;
    float _2271;
    float _2273;
    float _2275;
    if (_1661.y == 0u)
    {
        uvec4 _2221 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2222 = _2221.x;
        uint _2233 = uint((float(_2221.y) * floor(float(uint(cbSceneParam._m0[85u].y * _325) / _2222))) + floor(float(uint(cbSceneParam._m0[85u].x * _324) / _2222)));
        float _2243 = (log2(_1439 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2244 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        uint _2247 = uint(isnan(14.0) ? _2244 : (isnan(_2244) ? 14.0 : min(_2244, 14.0)));
        uvec4 _2252 = texelFetch(g_lightClusterGridBuffer, int(((_2247 << 2u) + (_2233 << 6u)) >> 2u));
        uint _2253 = _2252.x;
        uint _2254 = _2221.z;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        float _2377;
        if (((((1u << ((_2254 >> 4u) & 15u)) + 4294967295u) & _2253) == 0u) || ((_2254 & 240u) == 0u))
        {
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
            _2377 = 0.0;
        }
        else
        {
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2376;
            float _2378;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            float _2521 = 0.0;
            float _2522 = 0.0;
            float _2523 = 0.0;
            uint _2524 = 0u;
            uint _2533;
            bool _2534;
            for (;;)
            {
                _2533 = texelFetch(g_lightClassification, int((((_2247 << 5u) + (_2233 << 9u)) + (_2524 << 2u)) >> 2u)).x;
                _2534 = _2533 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2534)
                {
                    frontier_phi_68_pred = _2523;
                    frontier_phi_68_pred_1 = _2522;
                    frontier_phi_68_pred_2 = _2521;
                    frontier_phi_68_pred_3 = _2519;
                    frontier_phi_68_pred_4 = _2518;
                    frontier_phi_68_pred_5 = _2520;
                }
                else
                {
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    uint _2648;
                    _2642 = _2518;
                    _2643 = _2519;
                    _2644 = _2520;
                    _2645 = _2521;
                    _2646 = _2522;
                    _2647 = _2523;
                    _2648 = _2533;
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    float _2579;
                    for (;;)
                    {
                        uint _2652 = uint(findLSB(_2648)) + (_2524 << 5u);
                        uint _2649 = (_2648 + 4294967295u) & _2648;
                        uint _2654 = _2652 * 48u;
                        vec4 _2668 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2654)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 3u)).x));
                        uint _2674 = (_2652 * 48u) + 4u;
                        vec4 _2687 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2674)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 3u)).x));
                        uint _2693 = (_2652 * 48u) + 8u;
                        vec3 _2704 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2693)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 2u)).x));
                        float _2708 = _2668.x - _1437;
                        float _2709 = _2668.y - _1438;
                        float _2710 = _2668.z - _1439;
                        float _2711 = dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710));
                        float _2714 = inversesqrt(_2711);
                        float _2723 = 1.0 - (_2711 * _2668.w);
                        float _3865 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                        float _2724 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
                        float _2725 = sqrt(_2711) * _2687.w;
                        float _2728 = 1.39999997615814208984375 / (_2725 + 1.39999997615814208984375);
                        float _2729 = _2728 * _2728;
                        float _2732 = ((1.0 - _2729) * dot(vec3(_346, _349, _352), vec3(_2714 * _2708, _2714 * _2709, _2714 * _2710))) + _2729;
                        float _2735 = _2725 * _2725;
                        float _2739 = ((isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0))) * _2724) / ((_2735 * 0.699999988079071044921875) + 1.0);
                        float _2743 = (-0.0) - _1437;
                        float _2744 = (-0.0) - _1438;
                        float _2745 = (-0.0) - _1439;
                        float _2749 = inversesqrt(dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745)));
                        float _2753 = dot(vec3(_346, _349, _352), vec3(_2749 * _2743, _2749 * _2744, _2749 * _2745));
                        float _3881 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                        float _3892 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
                        float _2757 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
                        float _2761 = (0.5 / (((isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) + 9.9999999392252902907785028219223e-09) + _2757)) * _2757;
                        float _3903 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
                        float _2770 = (((isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * 3.1415927410125732421875) / ((_2735 * 2.1991131305694580078125) + 3.141590118408203125)) * _2724;
                        _2577 = (_2739 * _2687.x) + _2645;
                        _2578 = (_2739 * _2687.y) + _2646;
                        _2579 = (_2739 * _2687.z) + _2647;
                        _2574 = (_2770 * _2704.x) + _2642;
                        _2575 = (_2770 * _2704.y) + _2643;
                        _2576 = (_2770 * _2704.z) + _2644;
                        if (_2649 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2642 = _2574;
                            _2643 = _2575;
                            _2644 = _2576;
                            _2645 = _2577;
                            _2646 = _2578;
                            _2647 = _2579;
                            _2648 = _2649;
                        }
                    }
                    frontier_phi_68_pred = _2579;
                    frontier_phi_68_pred_1 = _2578;
                    frontier_phi_68_pred_2 = _2577;
                    frontier_phi_68_pred_3 = _2575;
                    frontier_phi_68_pred_4 = _2574;
                    frontier_phi_68_pred_5 = _2576;
                }
                _2378 = frontier_phi_68_pred;
                _2376 = frontier_phi_68_pred_1;
                _2374 = frontier_phi_68_pred_2;
                _2370 = frontier_phi_68_pred_3;
                _2368 = frontier_phi_68_pred_4;
                _2372 = frontier_phi_68_pred_5;
                uint _2525 = _2524 + 1u;
                if (_2525 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2518 = _2368;
                    _2519 = _2370;
                    _2520 = _2372;
                    _2521 = _2374;
                    _2522 = _2376;
                    _2523 = _2378;
                    _2524 = _2525;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
            _2377 = _2378;
        }
        uvec4 _2381 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2382 = _2381.z;
        uint _2384 = (_2382 >> 8u) & 15u;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        float _2499;
        if (((4294967295u << _2384) & _2253) == 0u)
        {
            _2489 = _2367;
            _2491 = _2369;
            _2493 = _2371;
            _2495 = _2373;
            _2497 = _2375;
            _2499 = _2377;
        }
        else
        {
            float _2514 = inversesqrt(dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439)));
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2384 < ((_2382 >> 12u) & 15u))
            {
                float _2490;
                float _2492;
                float _2494;
                float _2496;
                float _2498;
                float _2500;
                float _2625 = _2367;
                float _2626 = _2369;
                float _2627 = _2371;
                float _2628 = _2373;
                float _2629 = _2375;
                float _2630 = _2377;
                uint _2631 = _2384;
                uint _2640;
                bool _2641;
                for (;;)
                {
                    _2640 = texelFetch(g_lightClassification, int((((_2247 << 5u) + (_2233 << 9u)) + (_2631 << 2u)) >> 2u)).x;
                    _2641 = _2640 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2641)
                    {
                        frontier_phi_74_pred = _2627;
                        frontier_phi_74_pred_1 = _2626;
                        frontier_phi_74_pred_2 = _2625;
                        frontier_phi_74_pred_3 = _2630;
                        frontier_phi_74_pred_4 = _2629;
                        frontier_phi_74_pred_5 = _2628;
                    }
                    else
                    {
                        float _2775;
                        float _2776;
                        float _2777;
                        float _2778;
                        float _2779;
                        float _2780;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3032;
                        float _2788 = _2625;
                        float _2789 = _2626;
                        float _2790 = _2627;
                        float _2791 = _2628;
                        float _2792 = _2629;
                        float _2793 = _2630;
                        uint _2794 = _2640;
                        uint _2795;
                        vec4 _2820;
                        float _2821;
                        vec4 _2836;
                        vec3 _2848;
                        vec4 _2864;
                        vec4 _2880;
                        float _2927;
                        bool _2928;
                        for (;;)
                        {
                            uint _2805 = ((_2631 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2794));
                            _2795 = (_2794 + 4294967295u) & _2794;
                            uint _2807 = _2805 * 40u;
                            _2820 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 3u)).x));
                            _2821 = _2820.w;
                            uint _2823 = (_2805 * 40u) + 4u;
                            _2836 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 3u)).x));
                            uint _2838 = (_2805 * 40u) + 8u;
                            _2848 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2838)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 2u)).x));
                            uint _2851 = (_2805 * 40u) + 16u;
                            _2864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 3u)).x));
                            uint _2867 = (_2805 * 40u) + 20u;
                            _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            uint _2883 = (_2805 * 40u) + 24u;
                            vec4 _2896 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 3u)).x));
                            uint _2902 = (_2805 * 40u) + 28u;
                            vec4 _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            _2927 = fma(_1439, _2915.z, fma(_1438, _2915.y, _2915.x * _1437)) + _2915.w;
                            _2928 = !((fma(_1439, _2896.z, fma(_1438, _2896.y, _2896.x * _1437)) + _2896.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_2928)
                            {
                                float _2955 = _2820.x - _1437;
                                float _2956 = _2820.y - _1438;
                                float _2957 = _2820.z - _1439;
                                float _2958 = dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957));
                                float _2961 = inversesqrt(_2958);
                                float _2962 = _2961 * _2955;
                                float _2963 = _2961 * _2956;
                                float _2964 = _2961 * _2957;
                                float _2968 = 1.0 - (_2958 / (_2821 * _2821));
                                float _3914 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                                float _2969 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
                                float _2973 = sqrt(_2958) * _2836.w;
                                float _2975 = 1.39999997615814208984375 / (_2973 + 1.39999997615814208984375);
                                float _2976 = _2975 * _2975;
                                float _2977 = 1.0 - _2976;
                                float _2979 = (_2977 * dot(vec3(_2962, _2963, _2964), vec3(_346, _349, _352))) + _2976;
                                float _2982 = _2973 * _2973;
                                float _2986 = (fma(_1439, _2864.z, fma(_1438, _2864.y, _2864.x * _1437)) + _2864.w) / _2927;
                                float _2987 = (fma(_1439, _2880.z, fma(_1438, _2880.y, _2880.x * _1437)) + _2880.w) / _2927;
                                float _2991 = 1.0 - dot(vec2(_2986, _2987), vec2(_2986, _2987));
                                float _3930 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                                float _2992 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
                                float _2993 = _2992 * (((isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0))) * _2969) / ((_2982 * 0.699999988079071044921875) + 1.0));
                                float _3003 = dot(vec3(_346, _349, _352), vec3((-0.0) - (_1437 * _2514), (-0.0) - (_1438 * _2514), (-0.0) - (_1439 * _2514)));
                                float _3941 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                                float _3011 = (_2977 * dot(vec3(_346, _349, _352), vec3(_2962, _2963, _2964))) + _2976;
                                float _3952 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                                float _3012 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
                                float _3016 = (0.5 / (((isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) + 9.9999999392252902907785028219223e-09) + _3012)) * _3012;
                                float _3963 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                                float _3023 = (_2992 * _2969) * (((isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * 3.1415927410125732421875) / ((_2982 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_80_pred = _3023 * _2848.z;
                                frontier_phi_80_pred_1 = _3023 * _2848.y;
                                frontier_phi_80_pred_2 = _3023 * _2848.x;
                                frontier_phi_80_pred_3 = _2993 * _2836.z;
                                frontier_phi_80_pred_4 = _2993 * _2836.y;
                                frontier_phi_80_pred_5 = _2993 * _2836.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3029 = frontier_phi_80_pred;
                            _3028 = frontier_phi_80_pred_1;
                            _3027 = frontier_phi_80_pred_2;
                            _3032 = frontier_phi_80_pred_3;
                            _3031 = frontier_phi_80_pred_4;
                            _3030 = frontier_phi_80_pred_5;
                            _2778 = _3030 + _2791;
                            _2779 = _3031 + _2792;
                            _2780 = _3032 + _2793;
                            _2775 = _3027 + _2788;
                            _2776 = _3028 + _2789;
                            _2777 = _3029 + _2790;
                            if (_2795 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2788 = _2775;
                                _2789 = _2776;
                                _2790 = _2777;
                                _2791 = _2778;
                                _2792 = _2779;
                                _2793 = _2780;
                                _2794 = _2795;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2777;
                        frontier_phi_74_pred_1 = _2776;
                        frontier_phi_74_pred_2 = _2775;
                        frontier_phi_74_pred_3 = _2780;
                        frontier_phi_74_pred_4 = _2779;
                        frontier_phi_74_pred_5 = _2778;
                    }
                    _2494 = frontier_phi_74_pred;
                    _2492 = frontier_phi_74_pred_1;
                    _2490 = frontier_phi_74_pred_2;
                    _2500 = frontier_phi_74_pred_3;
                    _2498 = frontier_phi_74_pred_4;
                    _2496 = frontier_phi_74_pred_5;
                    uint _2632 = _2631 + 1u;
                    if (_2632 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2625 = _2490;
                        _2626 = _2492;
                        _2627 = _2494;
                        _2628 = _2496;
                        _2629 = _2498;
                        _2630 = _2500;
                        _2631 = _2632;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2498;
                frontier_phi_62_63_ladder_1 = _2496;
                frontier_phi_62_63_ladder_2 = _2494;
                frontier_phi_62_63_ladder_3 = _2500;
                frontier_phi_62_63_ladder_4 = _2492;
                frontier_phi_62_63_ladder_5 = _2490;
            }
            else
            {
                frontier_phi_62_63_ladder = _2375;
                frontier_phi_62_63_ladder_1 = _2373;
                frontier_phi_62_63_ladder_2 = _2371;
                frontier_phi_62_63_ladder_3 = _2377;
                frontier_phi_62_63_ladder_4 = _2369;
                frontier_phi_62_63_ladder_5 = _2367;
            }
            _2489 = frontier_phi_62_63_ladder_5;
            _2491 = frontier_phi_62_63_ladder_4;
            _2493 = frontier_phi_62_63_ladder_2;
            _2495 = frontier_phi_62_63_ladder_1;
            _2497 = frontier_phi_62_63_ladder;
            _2499 = frontier_phi_62_63_ladder_3;
        }
        float _2504 = isnan(1.0) ? _390 : (isnan(_390) ? 1.0 : min(_390, 1.0));
        _2265 = (_2504 * _2495) + _1905;
        _2267 = (_2504 * _2497) + _1907;
        _2269 = (_2504 * _2499) + _1909;
        _2271 = ((_2489 * 0.039999999105930328369140625) * _2504) + _2147;
        _2273 = ((_2491 * 0.039999999105930328369140625) * _2504) + _2149;
        _2275 = ((_2493 * 0.039999999105930328369140625) * _2504) + _2151;
    }
    else
    {
        _2265 = _1905;
        _2267 = _1907;
        _2269 = _1909;
        _2271 = _2147;
        _2273 = _2149;
        _2275 = _2151;
    }
    uint _2281 = _366 + uint(cbMatDynParam._m0[0u].w);
    float _2289 = ((cbMtdParam._m0[11u].x * _217.x) * cbMtdParam._m0[10u].x) * cbInstanceData._m0[_2281].x;
    float _2292 = ((cbMtdParam._m0[11u].x * _217.y) * cbMtdParam._m0[10u].y) * cbInstanceData._m0[_2281].y;
    float _2295 = ((cbMtdParam._m0[11u].x * _217.z) * cbMtdParam._m0[10u].z) * cbInstanceData._m0[_2281].z;
    float _3979 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3990 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _4001 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _2312 = (((isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_2265 + ((isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0))) * _390))) + ((_2271 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _1169)) * cbPerFrame._m0[3u].x)) + _2289;
    float _2314 = (_2292 + ((_2273 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _1169)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_2267 + ((isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0))) * _390)));
    float _2316 = (_2295 + ((_2275 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _1169)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_2269 + ((isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0))) * _390)));
    float _4027 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2329 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    uint _2330 = _365 + 6u;
    float _2338 = _324 / cbSceneParam._m0[86u].x;
    float _2339 = _325 / cbSceneParam._m0[86u].y;
    vec4 _2353 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2338, _2339, (log2((isnan(cbSceneParam._m0[77u].w) ? _258 : (isnan(_258) ? cbSceneParam._m0[77u].w : min(_258, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2355 = _2353.x;
    float _2356 = _2353.y;
    float _2357 = _2353.z;
    float _2358 = _2353.w;
    float _2429;
    float _2431;
    float _2433;
    float _2435;
    if (_258 > cbSceneParam._m0[78u].w)
    {
        float _2392 = isnan(_258) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _258 : min(cbSceneParam._m0[80u].w, _258));
        float _2393 = _2392 / _258;
        float _2404 = _2393 * _309;
        float _2405 = _310 * _2393;
        float _2406 = (-0.0) - _2405;
        float _2407 = _2393 * _311;
        float _2409 = (cbSceneParam._m0[77u].w * _2406) / _2392;
        float _2410 = _2409 + cbSceneParam._m0[79u].w;
        float _2411 = cbSceneParam._m0[79u].w - _2405;
        float _2417 = sqrt(((_2404 * _2404) + (_2405 * _2405)) + (_2407 * _2407));
        float _2420 = (1.0 - (cbSceneParam._m0[77u].w / _2392)) * _2417;
        float _2425 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2427 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2587;
        if (abs((_2406 - _2409) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2587 = ((((_2410 > 0.0) ? exp2(_2425 * _2410) : (2.0 - exp2(_2427 * _2410))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2420;
        }
        else
        {
            float _2547 = 1.0 / cbSceneParam._m0[80u].x;
            float _2548 = isnan(_2411) ? _2410 : (isnan(_2410) ? _2411 : max(_2410, _2411));
            float _2549 = isnan(_2411) ? _2410 : (isnan(_2410) ? _2411 : min(_2410, _2411));
            float _2558 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : min(_2548, 0.0));
            float _2559 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : min(_2549, 0.0));
            _2587 = ((abs(_2417 / _2406) * cbSceneParam._m0[80u].y) * ((((_2558 - _2559) * 2.0) - ((exp2(_2425 * (isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0)))) - exp2(_2425 * (isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0))))) * _2547)) - ((exp2(_2427 * _2558) - exp2(_2427 * _2559)) * _2547))) + (_2420 * cbSceneParam._m0[80u].z);
        }
        vec4 _2589 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2338, _2339, 1.0), 0.0);
        float _2598 = exp2((_2587 * (-1.44269502162933349609375)) * (1.0 - _2589.w));
        float _2599 = log2(_2598);
        float _2615 = log2(_2358);
        _2429 = (exp2(_2615 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].x)) * _2589.x) / cbSceneParam._m0[78u].x)) + _2355;
        _2431 = (exp2(_2615 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].y)) * _2589.y) / cbSceneParam._m0[78u].y)) + _2356;
        _2433 = (exp2(_2615 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2599 * cbSceneParam._m0[78u].z)) * _2589.z) / cbSceneParam._m0[78u].z)) + _2357;
        _2435 = _2598 * _2358;
    }
    else
    {
        _2429 = _2355;
        _2431 = _2356;
        _2433 = _2357;
        _2435 = _2358;
    }
    float _2447 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2448 = _2447 == 3.0;
    float _2450 = log2(_2435);
    float _2454 = exp2(_2450 * cbSceneParam._m0[78u].x);
    float _2455 = exp2(_2450 * cbSceneParam._m0[78u].y);
    float _2456 = exp2(_2450 * cbSceneParam._m0[78u].z);
    float _2457 = _2454 * (isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0)));
    float _2458 = _2455 * (isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0)));
    float _2459 = _2456 * (isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0)));
    float _2468 = (_2447 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2468 * (_2448 ? _2457 : (_2457 + (cbSceneParam._m0[72u].w * _2429)));
    SV_Target.y = _2468 * (_2448 ? _2458 : (_2458 + (cbSceneParam._m0[72u].w * _2431)));
    SV_Target.z = _2468 * (_2448 ? _2459 : (_2459 + (cbSceneParam._m0[72u].w * _2433)));
    SV_Target.w = cbInstanceData._m0[_2330].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2289) * _2329) * _2454) * _2468;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2292) * _2329) * _2455) * _2468;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2295) * _2329) * _2456) * _2468;
    SV_Target_1.w = cbInstanceData._m0[_2330].w;
}


