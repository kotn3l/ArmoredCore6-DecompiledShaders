#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[21];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 6, component = 1) in float TEXCOORD_6;
layout(location = 7) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1346;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _242 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _243 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _244 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _248 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _249 = _248 * _242;
    float _250 = _248 * _243;
    float _251 = _248 * _244;
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = _255 * NORMAL.x;
    float _257 = _255 * NORMAL.y;
    float _258 = _255 * NORMAL.z;
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = _262 * TANGENT.x;
    float _264 = _262 * TANGENT.y;
    float _265 = _262 * TANGENT.z;
    float _269 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _270 = _269 * TANGENT_2.x;
    float _271 = _269 * TANGENT_2.y;
    float _272 = _269 * TANGENT_2.z;
    float _277;
    float _278;
    float _279;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _277 = (-0.0) - _256;
        _278 = (-0.0) - _257;
        _279 = (-0.0) - _258;
    }
    else
    {
        _277 = _256;
        _278 = _257;
        _279 = _258;
    }
    vec4 _317 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _329 = 1.0 - ((1.0 - _317.x) * 1.39999997615814208984375);
    float _3717 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _330 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _337 = (_330 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x)) + cbMtdParam._m0[15u].x;
    float _338 = (_330 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y)) + cbMtdParam._m0[15u].y;
    float _339 = (_330 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z)) + cbMtdParam._m0[15u].z;
    float _341 = 1.0 - ((1.0 - _317.y) * 1.39999997615814208984375);
    float _3728 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _342 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _349 = (_342 * (cbMtdParam._m0[13u].x - _337)) + _337;
    float _350 = (_342 * (cbMtdParam._m0[13u].y - _338)) + _338;
    float _351 = (_342 * (cbMtdParam._m0[13u].z - _339)) + _339;
    float _353 = 1.0 - ((1.0 - _317.z) * 1.39999997615814208984375);
    float _3739 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _354 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _383 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[19u].z;
    float _397 = ((cbMtdParam._m0[18u].y * (-1.39999997615814208984375)) * ((TEXCOORD_6 - _383) + (cbMtdParam._m0[17u].w * TEXCOORD_6))) + 1.0;
    float _3750 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _399 = 1.0 - (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)));
    float _400 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _401 = isnan(1.0) ? _400 : (isnan(_400) ? 1.0 : min(_400, 1.0));
    float _409 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5 - _383) + (cbMtdParam._m0[17u].z * TEXCOORD_5))) + 1.0;
    float _3771 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _411 = 1.0 - (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)));
    float _412 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _413 = isnan(1.0) ? _412 : (isnan(_412) ? 1.0 : min(_412, 1.0));
    vec4 _431 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _433 = _431.x;
    float _434 = _431.y;
    float _435 = _431.z;
    float _436 = cbMtdParam._m0[12u].x * _413;
    float _438 = cbMtdParam._m0[12u].y * _413;
    float _440 = cbMtdParam._m0[12u].z * _413;
    float _460 = _411 + _399;
    float _461 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _462 = isnan(1.0) ? _461 : (isnan(_461) ? 1.0 : min(_461, 1.0));
    vec4 _480 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _485 = _480.w;
    float _486 = _480.x * cbMtdParam._m0[10u].x;
    float _487 = _480.y * cbMtdParam._m0[10u].y;
    float _488 = _480.z * cbMtdParam._m0[10u].z;
    float _508 = ((_486 - (_462 * _486)) + ((((((_433 * (cbMtdParam._m0[11u].x - _436)) * _401) + (_436 * _433)) * 4.55000019073486328125) * _462) * _486)) * ((_354 * (cbMtdParam._m0[14u].x - _349)) + _349);
    float _509 = ((((((((_434 * (cbMtdParam._m0[11u].y - _438)) * _401) + (_438 * _434)) * 4.55000019073486328125) * _462) * _487) + _487) - (_462 * _487)) * ((_354 * (cbMtdParam._m0[14u].y - _350)) + _350);
    float _510 = ((((((((_435 * (cbMtdParam._m0[11u].z - _440)) * _401) + (_440 * _435)) * 4.55000019073486328125) * _462) * _488) + _488) - (_462 * _488)) * ((_354 * (cbMtdParam._m0[14u].z - _351)) + _351);
    vec4 _527 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _531 = _527.z;
    float _535 = (_527.x * 2.0) + (-1.0);
    float _537 = (_527.y * 2.0) + (-1.0);
    float _538 = dot(vec2(_535, _537), vec2(_535, _537));
    float _3802 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _543 = sqrt(1.0 - (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))));
    float _546 = fma(_543, _277, fma(_537, _270, _535 * _249));
    float _549 = fma(_543, _278, fma(_537, _271, _535 * _250));
    float _552 = fma(_543, _279, fma(_537, _272, _535 * _251));
    float _556 = inversesqrt(dot(vec3(_546, _549, _552), vec3(_546, _549, _552)));
    float _557 = _556 * _546;
    float _558 = _556 * _549;
    float _559 = _556 * _552;
    float _571 = abs((fract(cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3813 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _572 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _577 = (_572 * _572) * (3.0 - (_572 * 2.0));
    float _578 = isnan(cbMtdParam._m0[16u].z) ? _577 : (isnan(_577) ? cbMtdParam._m0[16u].z : max(_577, cbMtdParam._m0[16u].z));
    vec4 _597 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[19u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[19u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _602 = (isnan(cbMtdParam._m0[16u].w) ? _578 : (isnan(_578) ? cbMtdParam._m0[16u].w : min(_578, cbMtdParam._m0[16u].w))) * cbMtdParam._m0[17u].y;
    vec4 _630 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _636 = (_630.x * 2.0) + (-1.0);
    float _637 = (_630.y * 2.0) + (-1.0);
    float _638 = dot(vec2(_636, _637), vec2(_636, _637));
    float _3834 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _643 = sqrt(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))));
    float _646 = fma(_643, _277, fma(_637, _270, _636 * _249));
    float _649 = fma(_643, _278, fma(_637, _271, _636 * _250));
    float _652 = fma(_643, _279, fma(_637, _272, _636 * _251));
    float _656 = inversesqrt(dot(vec3(_646, _649, _652), vec3(_646, _649, _652)));
    float _657 = _656 * _646;
    float _658 = _656 * _649;
    float _659 = _656 * _652;
    float _662 = fma(_659, _232, fma(_658, _231, _657 * _230));
    float _665 = fma(_659, _265, fma(_658, _264, _657 * _263));
    float _668 = fma(_659, _279, fma(_658, _278, _657 * _277));
    float _672 = inversesqrt(dot(vec3(_662, _665, _668), vec3(_662, _665, _668)));
    float _676 = fma(_559, _232, fma(_558, _231, _557 * _230));
    float _679 = fma(_559, _265, fma(_558, _264, _557 * _263));
    float _682 = fma(_559, _279, fma(_558, _278, _557 * _277));
    float _686 = inversesqrt(dot(vec3(_676, _679, _682), vec3(_676, _679, _682)));
    vec4 _702 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _708 = (_702.x * 2.0) + (-1.0);
    float _709 = (_702.y * 2.0) + (-1.0);
    float _710 = dot(vec2(_708, _709), vec2(_708, _709));
    float _3845 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _715 = sqrt(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))));
    vec4 _730 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _736 = (_730.x * 2.0) + (-1.0);
    float _737 = (_730.y * 2.0) + (-1.0);
    float _738 = dot(vec2(_736, _737), vec2(_736, _737));
    float _3856 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _743 = sqrt(1.0 - (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))));
    float _746 = fma(_743, _277, fma(_737, _270, _736 * _249));
    float _749 = fma(_743, _278, fma(_737, _271, _736 * _250));
    float _752 = fma(_743, _279, fma(_737, _272, _736 * _251));
    float _756 = inversesqrt(dot(vec3(_746, _749, _752), vec3(_746, _749, _752)));
    float _757 = _756 * _746;
    float _758 = _756 * _749;
    float _759 = _756 * _752;
    float _762 = fma(_759, _232, fma(_758, _231, _757 * _230));
    float _765 = fma(_759, _265, fma(_758, _264, _757 * _263));
    float _768 = fma(_759, _279, fma(_758, _278, _757 * _277));
    float _772 = inversesqrt(dot(vec3(_762, _765, _768), vec3(_762, _765, _768)));
    float _788 = ((((_686 * _676) * cbMtdParam._m0[19u].x) + (((_662 * _401) * _672) * cbMtdParam._m0[18u].z)) + _708) + (((_762 * _413) * _772) * cbMtdParam._m0[18u].w);
    float _791 = ((((_686 * _679) * cbMtdParam._m0[19u].x) + (((_665 * _401) * _672) * cbMtdParam._m0[18u].z)) + _709) + (((_765 * _413) * _772) * cbMtdParam._m0[18u].w);
    float _794 = fma(_715, _277, fma(_791, _263, _788 * _230));
    float _797 = fma(_715, _278, fma(_791, _264, _788 * _231));
    float _800 = fma(_715, _279, fma(_791, _265, _788 * _232));
    float _804 = inversesqrt(dot(vec3(_794, _797, _800), vec3(_794, _797, _800)));
    float _805 = _804 * _794;
    float _806 = _804 * _797;
    float _807 = _804 * _800;
    float _3867 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _808 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _809 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _3889 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _3900 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _3911 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _3922 = isnan(0.0) ? cbMtdParam._m0[20u].x : (isnan(cbMtdParam._m0[20u].x) ? 0.0 : max(cbMtdParam._m0[20u].x, 0.0));
    float _813 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _829 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _879 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _869);
    float _880 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _869);
    float _881 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _869);
    float _885 = inversesqrt(dot(vec3(_879, _880, _881), vec3(_879, _880, _881)));
    float _886 = _879 * _885;
    float _887 = _880 * _885;
    float _888 = _881 * _885;
    float _894 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _895 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _913 = fma(_807, cbSceneParam._m0[5u].z, fma(_806, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _805));
    float _916 = fma(_807, cbSceneParam._m0[6u].z, fma(_806, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _805));
    float _919 = fma(_807, cbSceneParam._m0[7u].z, fma(_806, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _805));
    uint _932 = uint(roundEven(NORMAL.w)) * 13u;
    uint _933 = _932 + 9u;
    uint _934 = _933 + uint(cbMatDynParam._m0[0u].w);
    float _940 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * cbInstanceData._m0[_934].x;
    float _941 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * cbInstanceData._m0[_934].y;
    float _942 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * cbInstanceData._m0[_934].z;
    float _3933 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _3955 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _946 = 1.0 - _813;
    float _947 = _943 * _946;
    float _948 = _944 * _946;
    float _949 = _945 * _946;
    float _954 = (_943 + (-0.039999999105930328369140625)) * _813;
    float _955 = (_944 + (-0.039999999105930328369140625)) * _813;
    float _956 = (_945 + (-0.039999999105930328369140625)) * _813;
    float _957 = _954 + 0.039999999105930328369140625;
    float _959 = _955 + 0.039999999105930328369140625;
    float _960 = _956 + 0.039999999105930328369140625;
    vec4 _969 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _894, cbSceneParam._m0[86u].y * _895));
    float _972 = _969.x * TEXCOORD_7.w;
    float _973 = dot(vec3(_805, _806, _807), vec3(_886, _887, _888));
    float _976 = _973 * 2.0;
    float _980 = (_976 * _805) - _886;
    float _981 = (_976 * _806) - _887;
    float _982 = (_976 * _807) - _888;
    float _986 = abs(dot(vec3(_886, _887, _888), vec3(_805, _806, _807)));
    float _3966 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _988 = sqrt(_809);
    float _1000 = exp2((_988 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_988 * 3.0));
    float _1006 = (1.0 - _1000) * ((_988 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1007 = _1000 * _988;
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1345;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1070 = fma(_1043, cbModelParam._m0[26u].z, fma(_1039, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1035));
        float _1074 = fma(_1043, cbModelParam._m0[27u].z, fma(_1039, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1035));
        float _1078 = fma(_1043, cbModelParam._m0[28u].z, fma(_1039, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1035));
        float _1103 = _1035 + _805;
        float _1104 = _1039 + _806;
        float _1105 = _1043 + _807;
        float _1115 = fma(_1105, cbModelParam._m0[26u].z, fma(_1104, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1103)) - _1070;
        float _1116 = fma(_1105, cbModelParam._m0[27u].z, fma(_1104, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1103)) - _1074;
        float _1117 = fma(_1105, cbModelParam._m0[28u].z, fma(_1104, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1103)) - _1078;
        float _1121 = inversesqrt(dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117)));
        float _1134 = ((_1121 * _1115) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1070 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1135 = ((_1121 * _1116) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1074 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1121 * _1117) / cbModelParam._m0[34u].z) + ((((((_1078 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        float _1173 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1139.x + (-0.5));
        float _1175 = _1173 * (_1139.y + (-0.5));
        float _1176 = _1173 * (_1139.z + (-0.5));
        float _1183 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1146.x + (-0.5));
        float _1185 = _1183 * (_1146.y + (-0.5));
        float _1186 = _1183 * (_1146.z + (-0.5));
        float _1193 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1153.x + (-0.5));
        float _1195 = _1193 * (_1153.y + (-0.5));
        float _1196 = _1193 * (_1153.z + (-0.5));
        float _1203 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1160.x + (-0.5));
        float _1205 = _1203 * (_1160.y + (-0.5));
        float _1206 = _1203 * (_1160.z + (-0.5));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = _1174 * 0.5;
        float _1211 = _1184 * 0.5;
        float _1212 = _1194 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1227 = (dot(vec3(_805, _806, _807), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1237 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _4014 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1239 + 1.0))) + _1244) * _1207;
        float _1254 = _1175 * 0.5;
        float _1255 = _1185 * 0.5;
        float _1256 = _1195 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_805, _806, _807), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _4047 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1281 + 1.0))) + _1286) * _1208;
        float _1296 = _1176 * 0.5;
        float _1297 = _1186 * 0.5;
        float _1298 = _1196 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_805, _806, _807), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _4080 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1323 + 1.0))) + _1328) * _1209;
        _1345 = _1176;
        _1347 = _1175;
        _1348 = _1174;
        _1349 = _1186;
        _1350 = _1185;
        _1351 = _1184;
        _1352 = _1196;
        _1353 = _1195;
        _1354 = _1194;
        _1355 = _1209;
        _1356 = _1208;
        _1357 = _1207;
        _1358 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1359 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1360 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
    }
    else
    {
        _1345 = _1346;
        _1347 = _1346;
        _1348 = _1346;
        _1349 = _1346;
        _1350 = _1346;
        _1351 = _1346;
        _1352 = _1346;
        _1353 = _1346;
        _1354 = _1346;
        _1355 = _1346;
        _1356 = _1346;
        _1357 = _1346;
        _1358 = 0.0;
        _1359 = 0.0;
        _1360 = 0.0;
    }
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1386 = fma(_1043, cbModelParam._m0[30u].z, fma(_1039, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1035));
        float _1390 = fma(_1043, cbModelParam._m0[31u].z, fma(_1039, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1035));
        float _1394 = fma(_1043, cbModelParam._m0[32u].z, fma(_1039, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1035));
        float _1417 = _1035 + _805;
        float _1418 = _1039 + _806;
        float _1419 = _1043 + _807;
        float _1429 = fma(_1419, cbModelParam._m0[30u].z, fma(_1418, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1417)) - _1386;
        float _1430 = fma(_1419, cbModelParam._m0[31u].z, fma(_1418, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1417)) - _1390;
        float _1431 = fma(_1419, cbModelParam._m0[32u].z, fma(_1418, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1417)) - _1394;
        float _1435 = inversesqrt(dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431)));
        float _1448 = ((_1435 * _1429) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1386 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1449 = ((_1435 * _1430) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1390 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1450 = ((_1435 * _1431) / cbModelParam._m0[35u].z) + ((((((_1394 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        float _1485 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1452.x + (-0.5));
        float _1487 = _1485 * (_1452.y + (-0.5));
        float _1488 = _1485 * (_1452.z + (-0.5));
        float _1495 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1459.x + (-0.5));
        float _1497 = _1495 * (_1459.y + (-0.5));
        float _1498 = _1495 * (_1459.z + (-0.5));
        float _1505 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1466.x + (-0.5));
        float _1507 = _1505 * (_1466.y + (-0.5));
        float _1508 = _1505 * (_1466.z + (-0.5));
        float _1515 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1473.x + (-0.5));
        float _1517 = _1515 * (_1473.y + (-0.5));
        float _1518 = _1515 * (_1473.z + (-0.5));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1522 = _1486 * 0.5;
        float _1523 = _1496 * 0.5;
        float _1524 = _1506 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_805, _806, _807), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _4143 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1549 + 1.0))) + _1554) * _1519;
        float _1564 = _1487 * 0.5;
        float _1565 = _1497 * 0.5;
        float _1566 = _1507 * 0.5;
        float _1567 = dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566));
        float _1572 = (_1567 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1567);
        float _1580 = (dot(vec3(_805, _806, _807), vec3(_1572 * _1564, _1572 * _1565, _1572 * _1566)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1589 = sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1591 = _1590 * 2.0;
        float _1595 = (1.0 - _1590) / (_1590 + 1.0);
        float _4176 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1605 = ((((1.0 - _1596) * (_1591 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1591 + 1.0))) + _1596) * _1520;
        float _1606 = _1488 * 0.5;
        float _1607 = _1498 * 0.5;
        float _1608 = _1508 * 0.5;
        float _1609 = dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608));
        float _1614 = (_1609 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1609);
        float _1622 = (dot(vec3(_805, _806, _807), vec3(_1614 * _1606, _1614 * _1607, _1614 * _1608)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1631 = sqrt(((_1607 * _1607) + (_1606 * _1606)) + (_1608 * _1608)) / (_1521 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1633 = _1632 * 2.0;
        float _1637 = (1.0 - _1632) / (_1632 + 1.0);
        float _4209 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1647 = ((((1.0 - _1638) * (_1633 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1633 + 1.0))) + _1638) * _1521;
        _1655 = _1488;
        _1656 = _1487;
        _1657 = _1486;
        _1658 = _1498;
        _1659 = _1497;
        _1660 = _1496;
        _1661 = _1508;
        _1662 = _1507;
        _1663 = _1506;
        _1664 = _1521;
        _1665 = _1520;
        _1666 = _1519;
        _1667 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)));
        _1669 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)));
    }
    else
    {
        _1655 = _1346;
        _1656 = _1346;
        _1657 = _1346;
        _1658 = _1346;
        _1659 = _1346;
        _1660 = _1346;
        _1661 = _1346;
        _1662 = _1346;
        _1663 = _1346;
        _1664 = _1346;
        _1665 = _1346;
        _1666 = _1346;
        _1667 = 0.0;
        _1668 = 0.0;
        _1669 = 0.0;
    }
    float _1679 = (cbModelParam._m0[1u].x * (_1667 - _1358)) + _1358;
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1359)) + _1359;
    float _1681 = (cbModelParam._m0[1u].x * (_1669 - _1360)) + _1360;
    float _1702 = fma(_1681, cbSceneParam._m0[89u].z, fma(_1680, cbSceneParam._m0[89u].y, _1679 * cbSceneParam._m0[89u].x));
    float _1705 = fma(_1681, cbSceneParam._m0[90u].z, fma(_1680, cbSceneParam._m0[90u].y, _1679 * cbSceneParam._m0[90u].x));
    float _1708 = fma(_1681, cbSceneParam._m0[91u].z, fma(_1680, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1679));
    float _1723 = _980 * 0.5;
    float _1724 = _981 * 0.5;
    float _1725 = _982 * 0.5;
    float _1726 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1657, _1660, _1663, _1666));
    float _1729 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1732 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1655, _1658, _1661, _1664));
    float _1766;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1739 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1345, _1349, _1352, _1355));
        float _1743 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1347, _1350, _1353, _1356));
        float _1747 = dot(vec4(_1723, _1724, _1725, 1.0), vec4(_1348, _1351, _1354, _1357));
        float _1754 = dot(vec4(cbModelParam._m0[39u]), vec4(_1723, _1724, _1725, 1.0));
        _1766 = dot(vec3(isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1754) ? 0.0 : (isnan(0.0) ? _1754 : max(0.0, _1754))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1766 = 1.0;
    }
    float _1777;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1768 = dot(vec4(cbModelParam._m0[40u]), vec4(_1723, _1724, _1725, 1.0));
        _1777 = dot(vec3(isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1768) ? 0.0 : (isnan(0.0) ? _1768 : max(0.0, _1768))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1777 = 1.0;
    }
    float _1781 = (_1777 * cbModelParam._m0[1u].x) + (_1766 * (1.0 - cbModelParam._m0[1u].x));
    float _1791 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _809);
    float _1792 = isnan(_1791) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1791 : min(cbModelParam._m0[25u].z, _1791));
    float _1872;
    float _1874;
    float _1876;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1839 = fma(_1043, cbModelParam._m0[13u].z, fma(_1039, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1035)) + cbModelParam._m0[13u].w;
        float _1843 = fma(_1043, cbModelParam._m0[14u].z, fma(_1039, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1035)) + cbModelParam._m0[14u].w;
        float _1847 = fma(_1043, cbModelParam._m0[15u].z, fma(_1039, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1035)) + cbModelParam._m0[15u].w;
        float _1850 = fma(_982, cbModelParam._m0[13u].z, fma(_981, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _980));
        float _1853 = fma(_982, cbModelParam._m0[14u].z, fma(_981, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _980));
        float _1856 = fma(_982, cbModelParam._m0[15u].z, fma(_981, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _980));
        float _1884;
        if (_1850 > 0.0)
        {
            _1884 = abs((1.0 - _1839) / _1850);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1839 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1884 = frontier_phi_16_14_ladder;
        }
        float _2107;
        if (_1853 > 0.0)
        {
            _2107 = abs((1.0 - _1843) / _1853);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1843 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2107 = frontier_phi_25_21_ladder;
        }
        float _2364;
        if (_1856 > 0.0)
        {
            _2364 = abs((1.0 - _1847) / _1856);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1847 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2364 = frontier_phi_37_32_ladder;
        }
        float _2366 = isnan(_2107) ? _1884 : (isnan(_1884) ? _2107 : min(_1884, _2107));
        float _2367 = isnan(_2364) ? _2366 : (isnan(_2366) ? _2364 : min(_2366, _2364));
        float _2371 = (_2367 * _1850) + _1839;
        float _2372 = (_2367 * _1853) + _1843;
        float _2373 = (_2367 * _1856) + _1847;
        float _2374 = _2367 * 9.9999997473787516355514526367188e-05;
        float _2376 = (-1.0) - _2374;
        float _2378 = _2374 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2373 > _2378) || ((_2373 < _2376) || ((_2372 > _2378) || ((_2372 < _2376) || ((_2371 < _2376) || (_2371 > _2378))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2501 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2373, cbModelParam._m0[9u].z, fma(_2372, cbModelParam._m0[9u].y, _2371 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2373, cbModelParam._m0[10u].z, fma(_2372, cbModelParam._m0[10u].y, _2371 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2373, cbModelParam._m0[11u].z, fma(_2372, cbModelParam._m0[11u].y, _2371 * cbModelParam._m0[11u].x))), _1792);
            frontier_phi_15_37_ladder = _2501.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2501.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2501.x * cbModelParam._m0[1u].y;
        }
        _1872 = frontier_phi_15_37_ladder_2;
        _1874 = frontier_phi_15_37_ladder_1;
        _1876 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1860 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_980, _981, _982), _1792);
        _1872 = _1860.x * cbModelParam._m0[1u].y;
        _1874 = _1860.y * cbModelParam._m0[1u].y;
        _1876 = _1860.z * cbModelParam._m0[1u].y;
    }
    float _1880 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _809);
    float _1881 = isnan(_1880) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1880 : min(cbModelParam._m0[25u].w, _1880));
    float _1970;
    float _1972;
    float _1974;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1934 = fma(_1043, cbModelParam._m0[21u].z, fma(_1039, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1035)) + cbModelParam._m0[21u].w;
        float _1938 = fma(_1043, cbModelParam._m0[22u].z, fma(_1039, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1035)) + cbModelParam._m0[22u].w;
        float _1942 = fma(_1043, cbModelParam._m0[23u].z, fma(_1039, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1035)) + cbModelParam._m0[23u].w;
        float _1945 = fma(_982, cbModelParam._m0[21u].z, fma(_981, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _980));
        float _1948 = fma(_982, cbModelParam._m0[22u].z, fma(_981, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _980));
        float _1951 = fma(_982, cbModelParam._m0[23u].z, fma(_981, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _980));
        float _2112;
        if (_1945 > 0.0)
        {
            _2112 = abs((1.0 - _1934) / _1945);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1934 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2112 = frontier_phi_27_23_ladder;
        }
        float _2391;
        if (_1948 > 0.0)
        {
            _2391 = abs((1.0 - _1938) / _1948);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1938 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2391 = frontier_phi_39_34_ladder;
        }
        float _2604;
        if (_1951 > 0.0)
        {
            _2604 = abs((1.0 - _1942) / _1951);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1942 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2604 = frontier_phi_48_45_ladder;
        }
        float _2606 = isnan(_2391) ? _2112 : (isnan(_2112) ? _2391 : min(_2112, _2391));
        float _2607 = isnan(_2604) ? _2606 : (isnan(_2606) ? _2604 : min(_2606, _2604));
        float _2611 = (_2607 * _1945) + _1934;
        float _2612 = (_2607 * _1948) + _1938;
        float _2613 = (_2607 * _1951) + _1942;
        float _2614 = _2607 * 9.9999997473787516355514526367188e-05;
        float _2615 = (-1.0) - _2614;
        float _2617 = _2614 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2613 > _2617) || ((_2613 < _2615) || ((_2612 > _2617) || ((_2612 < _2615) || ((_2611 < _2615) || (_2611 > _2617))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2832 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2613, cbModelParam._m0[17u].z, fma(_2612, cbModelParam._m0[17u].y, _2611 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2613, cbModelParam._m0[18u].z, fma(_2612, cbModelParam._m0[18u].y, _2611 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2613, cbModelParam._m0[19u].z, fma(_2612, cbModelParam._m0[19u].y, _2611 * cbModelParam._m0[19u].x))), _1881);
            frontier_phi_24_48_ladder = _2832.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2832.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2832.x * cbModelParam._m0[1u].z;
        }
        _1970 = frontier_phi_24_48_ladder_2;
        _1972 = frontier_phi_24_48_ladder_1;
        _1974 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1954 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_980, _981, _982), _1881);
        _1970 = _1954.x * cbModelParam._m0[1u].z;
        _1972 = _1954.y * cbModelParam._m0[1u].z;
        _1974 = _1954.z * cbModelParam._m0[1u].z;
    }
    float _1987 = (((_1006 * _957) + _1007) * _972) * ((cbModelParam._m0[1u].w * (_1970 - _1872)) + _1872);
    float _1989 = (((_1006 * _959) + _1007) * _972) * ((cbModelParam._m0[1u].w * (_1972 - _1874)) + _1874);
    float _1991 = (((_1006 * _960) + _1007) * _972) * ((cbModelParam._m0[1u].w * (_1974 - _1876)) + _1876);
    float _1994 = fma(_1991, cbSceneParam._m0[89u].z, fma(_1989, cbSceneParam._m0[89u].y, _1987 * cbSceneParam._m0[89u].x));
    float _1997 = fma(_1991, cbSceneParam._m0[90u].z, fma(_1989, cbSceneParam._m0[90u].y, _1987 * cbSceneParam._m0[90u].x));
    float _2000 = fma(_1991, cbSceneParam._m0[91u].z, fma(_1989, cbSceneParam._m0[91u].y, _1987 * cbSceneParam._m0[91u].x));
    vec4 _2008 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_894, _895));
    float _2010 = _2008.w;
    float _2022 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2010);
    float _2023 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2010);
    float _2024 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2010);
    uvec4 _2028 = floatBitsToUint(cbInstanceData._m0[_932 + 5u]);
    uint _2030 = _2028.x * 14u;
    uint _2031 = _2030 + 13u;
    float _2038 = _972 + (-1.0);
    float _2043 = (cbLight._m0[_2031].x * _2038) + 1.0;
    float _2044 = (cbLight._m0[_2031].y * _2038) + 1.0;
    float _2045 = (cbLight._m0[_2031].z * _2038) + 1.0;
    float _2046 = (cbLight._m0[_2031].w * _2038) + 1.0;
    uint _2047 = _2030 + 5u;
    float _2053 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
    uint _2057 = _2030 + 4u;
    float _2066 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
    uint _2070 = _2030 | 1u;
    float _2081 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_805, _806, _807));
    float _2084 = dot(vec3(cbLight._m0[_2070].xyz), vec3(_805, _806, _807));
    float _4345 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _4356 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2089 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * 0.3183098733425140380859375;
    float _2091 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * 0.3183098733425140380859375;
    float _2098 = ((cbLight._m0[_2047].x * _2053) * _2091) + (((cbLight._m0[_2057].x * _2022) * _2066) * _2089);
    float _2099 = ((_2053 * cbLight._m0[_2047].y) * _2091) + (((cbLight._m0[_2057].y * _2023) * _2066) * _2089);
    float _2100 = ((_2053 * cbLight._m0[_2047].z) * _2091) + (((cbLight._m0[_2057].z * _2024) * _2066) * _2089);
    uvec4 _2104 = floatBitsToUint(cbLight._m0[_2030 + 12u]);
    bool _2106 = _2104.x == 0u;
    float _2117;
    float _2119;
    float _2121;
    if (_2106)
    {
        _2117 = _2098;
        _2119 = _2099;
        _2121 = _2100;
    }
    else
    {
        uint _2125 = _2030 + 6u;
        float _2141 = (dot(vec3(cbLight._m0[_2030 + 2u].xyz), vec3(_805, _806, _807)) * 0.5) + 0.5;
        float _2142 = _2141 * _2141;
        float _4367 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2143 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2144 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
        _2117 = (((cbLight._m0[_2125].x * 0.3183098733425140380859375) * _2143) * _2144) + _2098;
        _2119 = (((cbLight._m0[_2125].y * 0.3183098733425140380859375) * _2143) * _2144) + _2099;
        _2121 = (((cbLight._m0[_2125].z * 0.3183098733425140380859375) * _2143) * _2144) + _2100;
    }
    bool _2124 = _2104.y == 0u;
    float _2162;
    float _2164;
    float _2166;
    if (_2124)
    {
        _2162 = _2117;
        _2164 = _2119;
        _2166 = _2121;
    }
    else
    {
        uint _2335 = _2030 + 7u;
        float _2351 = (dot(vec3(cbLight._m0[_2030 + 3u].xyz), vec3(_805, _806, _807)) * 0.5) + 0.5;
        float _2352 = _2351 * _2351;
        float _4383 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2353 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2354 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2162 = (((cbLight._m0[_2335].x * 0.3183098733425140380859375) * _2353) * _2354) + _2117;
        _2164 = (((cbLight._m0[_2335].y * 0.3183098733425140380859375) * _2353) * _2354) + _2119;
        _2166 = (((cbLight._m0[_2335].z * 0.3183098733425140380859375) * _2353) * _2354) + _2121;
    }
    uint _2169 = _2030 + 8u;
    float _2182 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2030].w)) * _809) * 0.949999988079071044921875);
    float _2183 = _2182 * _2182;
    float _2184 = cbLight._m0[_2030].x + _886;
    float _2185 = cbLight._m0[_2030].y + _887;
    float _2186 = cbLight._m0[_2030].z + _888;
    float _2190 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
    float _2191 = _2190 * _2184;
    float _2192 = _2190 * _2185;
    float _2193 = _2190 * _2186;
    float _2194 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2030].xyz));
    float _4399 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2197 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _4410 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _2198 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2199 = dot(vec3(_805, _806, _807), vec3(_2191, _2192, _2193));
    float _4421 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2202 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _2203 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_2191, _2192, _2193));
    float _4432 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2207 = _2183 * _2183;
    float _2211 = ((_2202 * _2202) * (_2207 + (-1.0))) + 1.0;
    float _2219 = exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0);
    float _2220 = 0.959999978542327880859375 - _954;
    float _2222 = 0.959999978542327880859375 - _955;
    float _2223 = 0.959999978542327880859375 - _956;
    float _2230 = 1.0 - _2183;
    float _2241 = (0.5 / (((_2198 * ((_2197 * _2230) + _2183)) + 9.9999999392252902907785028219223e-09) + (((_2198 * _2230) + _2183) * _2197))) * _2197;
    float _4443 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2243 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2207 / ((_2211 * _2211) * 3.141590118408203125));
    uint _2257 = _2030 + 9u;
    float _2268 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2070].w)) * _809) * 0.949999988079071044921875);
    float _2269 = _2268 * _2268;
    float _2270 = cbLight._m0[_2070].x + _886;
    float _2271 = cbLight._m0[_2070].y + _887;
    float _2272 = cbLight._m0[_2070].z + _888;
    float _2276 = inversesqrt(dot(vec3(_2270, _2271, _2272), vec3(_2270, _2271, _2272)));
    float _2277 = _2276 * _2270;
    float _2278 = _2276 * _2271;
    float _2279 = _2276 * _2272;
    float _2280 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2070].xyz));
    float _4454 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2284 = dot(vec3(_805, _806, _807), vec3(_2277, _2278, _2279));
    float _4465 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2288 = dot(vec3(cbLight._m0[_2070].xyz), vec3(_2277, _2278, _2279));
    float _4476 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2292 = _2269 * _2269;
    float _2296 = ((_2287 * _2287) * (_2292 + (-1.0))) + 1.0;
    float _2303 = exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0);
    float _2310 = 1.0 - _2269;
    float _2320 = (0.5 / (((_2198 * ((_2283 * _2310) + _2269)) + 9.9999999392252902907785028219223e-09) + (((_2198 * _2310) + _2269) * _2283))) * _2283;
    float _4487 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2322 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2292 / ((_2296 * _2296) * 3.141590118408203125));
    float _2332 = (((((_2303 * _2220) + _957) * cbLight._m0[_2257].x) * _2322) * _2053) + ((((cbLight._m0[_2169].x * _2022) * ((_2219 * _2220) + _957)) * _2243) * _2066);
    float _2333 = (((((_2303 * _2222) + _959) * cbLight._m0[_2257].y) * _2322) * _2053) + ((((cbLight._m0[_2169].y * _2023) * ((_2219 * _2222) + _959)) * _2243) * _2066);
    float _2334 = (((((_2303 * _2223) + _960) * cbLight._m0[_2257].z) * _2322) * _2053) + ((((cbLight._m0[_2169].z * _2024) * ((_2219 * _2223) + _960)) * _2243) * _2066);
    float _2396;
    float _2398;
    float _2400;
    if (_2106)
    {
        _2396 = _2332;
        _2398 = _2333;
        _2400 = _2334;
    }
    else
    {
        uint _2402 = _2030 + 2u;
        uint _2406 = _2030 + 10u;
        float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2402].w)) * _809) * 0.949999988079071044921875);
        float _2421 = _2420 * _2420;
        float _2422 = cbLight._m0[_2402].x + _886;
        float _2423 = cbLight._m0[_2402].y + _887;
        float _2424 = cbLight._m0[_2402].z + _888;
        float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
        float _2429 = _2428 * _2422;
        float _2430 = _2428 * _2423;
        float _2431 = _2428 * _2424;
        float _2432 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2402].xyz));
        float _4498 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2435 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2436 = dot(vec3(_805, _806, _807), vec3(_2429, _2430, _2431));
        float _4509 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2439 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2440 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_2429, _2430, _2431));
        float _4520 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2444 = _2421 * _2421;
        float _2448 = ((_2439 * _2439) * (_2444 + (-1.0))) + 1.0;
        float _2455 = exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0);
        float _2462 = 1.0 - _2421;
        float _2472 = (0.5 / (((_2198 * ((_2435 * _2462) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2198 * _2462) + _2421) * _2435))) * _2435;
        float _4531 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2474 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2444 / ((_2448 * _2448) * 3.141590118408203125));
        float _2475 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
        _2396 = (((((_2455 * _2220) + _957) * cbLight._m0[_2406].x) * _2474) * _2475) + _2332;
        _2398 = (((((_2455 * _2222) + _959) * cbLight._m0[_2406].y) * _2474) * _2475) + _2333;
        _2400 = (((((_2455 * _2223) + _960) * cbLight._m0[_2406].z) * _2474) * _2475) + _2334;
    }
    float _2510;
    float _2512;
    float _2514;
    if (_2124)
    {
        _2510 = _2396;
        _2512 = _2398;
        _2514 = _2400;
    }
    else
    {
        uint _2521 = _2030 + 3u;
        uint _2525 = _2030 + 11u;
        float _2539 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2521].w)) * _809) * 0.949999988079071044921875);
        float _2540 = _2539 * _2539;
        float _2541 = cbLight._m0[_2521].x + _886;
        float _2542 = cbLight._m0[_2521].y + _887;
        float _2543 = cbLight._m0[_2521].z + _888;
        float _2547 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
        float _2548 = _2547 * _2541;
        float _2549 = _2547 * _2542;
        float _2550 = _2547 * _2543;
        float _2551 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2521].xyz));
        float _4547 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2554 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2555 = dot(vec3(_805, _806, _807), vec3(_2548, _2549, _2550));
        float _4558 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2559 = dot(vec3(cbLight._m0[_2521].xyz), vec3(_2548, _2549, _2550));
        float _4569 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2563 = _2540 * _2540;
        float _2567 = ((_2558 * _2558) * (_2563 + (-1.0))) + 1.0;
        float _2574 = exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0);
        float _2581 = 1.0 - _2540;
        float _2591 = (0.5 / (((_2198 * ((_2554 * _2581) + _2540)) + 9.9999999392252902907785028219223e-09) + (((_2198 * _2581) + _2540) * _2554))) * _2554;
        float _4580 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2593 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2563 / ((_2567 * _2567) * 3.141590118408203125));
        float _2594 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2510 = (((((_2574 * _2220) + _957) * cbLight._m0[_2525].x) * _2593) * _2594) + _2396;
        _2512 = (((((_2574 * _2222) + _959) * cbLight._m0[_2525].y) * _2593) * _2594) + _2398;
        _2514 = (((((_2574 * _2223) + _960) * cbLight._m0[_2525].z) * _2593) * _2594) + _2400;
    }
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    float _2736;
    float _2738;
    if (_2028.y == 0u)
    {
        float _2669 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2670 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2669;
        float _2671 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2669;
        float _2672 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2669;
        uvec4 _2684 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2685 = _2684.x;
        uint _2696 = uint((float(_2684.y) * floor(float(uint(cbSceneParam._m0[85u].y * _895) / _2685))) + floor(float(uint(cbSceneParam._m0[85u].x * _894) / _2685)));
        float _2706 = (log2(_2672 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2707 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        uint _2710 = uint(isnan(14.0) ? _2707 : (isnan(_2707) ? 14.0 : min(_2707, 14.0)));
        uvec4 _2715 = texelFetch(g_lightClusterGridBuffer, int(((_2710 << 2u) + (_2696 << 6u)) >> 2u));
        uint _2716 = _2715.x;
        uint _2717 = _2684.z;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        if (((((1u << ((_2717 >> 4u) & 15u)) + 4294967295u) & _2716) == 0u) || ((_2717 & 240u) == 0u))
        {
            _2837 = 0.0;
            _2839 = 0.0;
            _2841 = 0.0;
            _2843 = 0.0;
            _2845 = 0.0;
            _2847 = 0.0;
        }
        else
        {
            float _2838;
            float _2840;
            float _2842;
            float _2844;
            float _2846;
            float _2848;
            float _2981 = 0.0;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            uint _2987 = 0u;
            uint _2996;
            bool _2997;
            for (;;)
            {
                _2996 = texelFetch(g_lightClassification, int((((_2710 << 5u) + (_2696 << 9u)) + (_2987 << 2u)) >> 2u)).x;
                _2997 = _2996 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2997)
                {
                    frontier_phi_63_pred = _2986;
                    frontier_phi_63_pred_1 = _2985;
                    frontier_phi_63_pred_2 = _2984;
                    frontier_phi_63_pred_3 = _2983;
                    frontier_phi_63_pred_4 = _2982;
                    frontier_phi_63_pred_5 = _2981;
                }
                else
                {
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    uint _3111;
                    _3105 = _2981;
                    _3106 = _2982;
                    _3107 = _2983;
                    _3108 = _2984;
                    _3109 = _2985;
                    _3110 = _2986;
                    _3111 = _2996;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    for (;;)
                    {
                        uint _3115 = uint(findLSB(_3111)) + (_2987 << 5u);
                        uint _3112 = (_3111 + 4294967295u) & _3111;
                        uint _3117 = _3115 * 48u;
                        vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3117)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 3u)).x));
                        uint _3137 = (_3115 * 48u) + 4u;
                        vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3137)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 3u)).x));
                        uint _3156 = (_3115 * 48u) + 8u;
                        vec3 _3167 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3156)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 2u)).x));
                        float _3171 = _3131.x - _2670;
                        float _3172 = _3131.y - _2671;
                        float _3173 = _3131.z - _2672;
                        float _3174 = dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173));
                        float _3177 = inversesqrt(_3174);
                        float _3178 = _3177 * _3171;
                        float _3179 = _3177 * _3172;
                        float _3180 = _3177 * _3173;
                        float _3181 = dot(vec3(_913, _916, _919), vec3(_3178, _3179, _3180));
                        float _3186 = 1.0 - (_3174 * _3131.w);
                        float _4606 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                        float _3187 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3188 = sqrt(_3174) * _3150.w;
                        float _3190 = 1.39999997615814208984375 / (_3188 + 1.39999997615814208984375);
                        float _3191 = _3190 * _3190;
                        float _3194 = ((1.0 - _3191) * _3181) + _3191;
                        float _3197 = _3188 * _3188;
                        float _3201 = ((isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0))) * _3187) / ((_3197 * 0.699999988079071044921875) + 1.0);
                        float _3205 = (-0.0) - _2670;
                        float _3206 = (-0.0) - _2671;
                        float _3207 = (-0.0) - _2672;
                        float _3211 = inversesqrt(dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207)));
                        float _3212 = _3211 * _3205;
                        float _3213 = _3211 * _3206;
                        float _3214 = _3211 * _3207;
                        float _3222 = exp2(log2(1.0 / ((_3197 * 3.5) + 5.0)) * 0.25);
                        float _3223 = 1.0 - _988;
                        float _3230 = sqrt(1.0 - ((1.0 - (_3223 * _3223)) * (1.0 - (_3222 * _3222))));
                        float _3231 = _3230 * _3230;
                        float _3232 = _3231 * _3231;
                        float _3233 = _3212 + _3178;
                        float _3234 = _3213 + _3179;
                        float _3235 = _3214 + _3180;
                        float _3239 = inversesqrt(dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235)));
                        float _3243 = dot(vec3(_913, _916, _919), vec3(_3212, _3213, _3214));
                        float _4622 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3246 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3247 = dot(vec3(_913, _916, _919), vec3(_3239 * _3233, _3239 * _3234, _3239 * _3235));
                        float _4633 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3250 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3254 = ((_3250 * _3250) * (_3232 + (-1.0))) + 1.0;
                        float _3255 = _3190 * _3231;
                        float _3256 = _3255 * _3255;
                        float _3259 = ((1.0 - _3256) * _3181) + _3256;
                        float _4644 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3260 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3261 = 1.0 - _3231;
                        float _3271 = (0.5 / (((_3260 * ((_3246 * _3261) + _3231)) + 9.9999999392252902907785028219223e-09) + (((_3260 * _3261) + _3231) * _3246))) * _3260;
                        float _4655 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3282 = (((_3232 * 3.1415927410125732421875) * (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) / ((_3254 * _3254) * ((_3197 * 2.1991131305694580078125) + 3.141590118408203125))) * _3187;
                        _3040 = (_3201 * _3150.x) + _3108;
                        _3041 = (_3201 * _3150.y) + _3109;
                        _3042 = (_3201 * _3150.z) + _3110;
                        _3037 = (_3282 * _3167.x) + _3105;
                        _3038 = (_3282 * _3167.y) + _3106;
                        _3039 = (_3282 * _3167.z) + _3107;
                        if (_3112 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3105 = _3037;
                            _3106 = _3038;
                            _3107 = _3039;
                            _3108 = _3040;
                            _3109 = _3041;
                            _3110 = _3042;
                            _3111 = _3112;
                        }
                    }
                    frontier_phi_63_pred = _3042;
                    frontier_phi_63_pred_1 = _3041;
                    frontier_phi_63_pred_2 = _3040;
                    frontier_phi_63_pred_3 = _3039;
                    frontier_phi_63_pred_4 = _3038;
                    frontier_phi_63_pred_5 = _3037;
                }
                _2848 = frontier_phi_63_pred;
                _2846 = frontier_phi_63_pred_1;
                _2844 = frontier_phi_63_pred_2;
                _2842 = frontier_phi_63_pred_3;
                _2840 = frontier_phi_63_pred_4;
                _2838 = frontier_phi_63_pred_5;
                uint _2988 = _2987 + 1u;
                if (_2988 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2981 = _2838;
                    _2982 = _2840;
                    _2983 = _2842;
                    _2984 = _2844;
                    _2985 = _2846;
                    _2986 = _2848;
                    _2987 = _2988;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2837 = _2838;
            _2839 = _2840;
            _2841 = _2842;
            _2843 = _2844;
            _2845 = _2846;
            _2847 = _2848;
        }
        uvec4 _2851 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2852 = _2851.z;
        uint _2854 = (_2852 >> 8u) & 15u;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        if (((4294967295u << _2854) & _2716) == 0u)
        {
            _2949 = _2837;
            _2951 = _2839;
            _2953 = _2841;
            _2955 = _2843;
            _2957 = _2845;
            _2959 = _2847;
        }
        else
        {
            float _2974 = inversesqrt(dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672)));
            float _2975 = _2974 * _2670;
            float _2976 = _2974 * _2671;
            float _2977 = _2974 * _2672;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2854 < ((_2852 >> 12u) & 15u))
            {
                float _2950;
                float _2952;
                float _2954;
                float _2956;
                float _2958;
                float _2960;
                float _3088 = _2837;
                float _3089 = _2839;
                float _3090 = _2841;
                float _3091 = _2843;
                float _3092 = _2845;
                float _3093 = _2847;
                uint _3094 = _2854;
                uint _3103;
                bool _3104;
                for (;;)
                {
                    _3103 = texelFetch(g_lightClassification, int((((_2710 << 5u) + (_2696 << 9u)) + (_3094 << 2u)) >> 2u)).x;
                    _3104 = _3103 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3104)
                    {
                        frontier_phi_69_pred = _3093;
                        frontier_phi_69_pred_1 = _3092;
                        frontier_phi_69_pred_2 = _3091;
                        frontier_phi_69_pred_3 = _3090;
                        frontier_phi_69_pred_4 = _3089;
                        frontier_phi_69_pred_5 = _3088;
                    }
                    else
                    {
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3300 = _3088;
                        float _3301 = _3089;
                        float _3302 = _3090;
                        float _3303 = _3091;
                        float _3304 = _3092;
                        float _3305 = _3093;
                        uint _3306 = _3103;
                        uint _3307;
                        vec4 _3332;
                        float _3333;
                        vec4 _3348;
                        vec3 _3360;
                        vec4 _3375;
                        vec4 _3390;
                        float _3437;
                        bool _3438;
                        for (;;)
                        {
                            uint _3317 = ((_3094 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3306));
                            _3307 = (_3306 + 4294967295u) & _3306;
                            uint _3319 = _3317 * 40u;
                            _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            _3333 = _3332.w;
                            uint _3335 = (_3317 * 40u) + 4u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3350 = (_3317 * 40u) + 8u;
                            _3360 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x));
                            uint _3362 = (_3317 * 40u) + 16u;
                            _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3377 = (_3317 * 40u) + 20u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3393 = (_3317 * 40u) + 24u;
                            vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            uint _3412 = (_3317 * 40u) + 28u;
                            vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            _3437 = fma(_2672, _3425.z, fma(_2671, _3425.y, _3425.x * _2670)) + _3425.w;
                            _3438 = !((fma(_2672, _3406.z, fma(_2671, _3406.y, _3406.x * _2670)) + _3406.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3438)
                            {
                                float _3465 = _3332.x - _2670;
                                float _3466 = _3332.y - _2671;
                                float _3467 = _3332.z - _2672;
                                float _3468 = dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467));
                                float _3471 = inversesqrt(_3468);
                                float _3472 = _3471 * _3465;
                                float _3473 = _3471 * _3466;
                                float _3474 = _3471 * _3467;
                                float _3478 = 1.0 - (_3468 / (_3333 * _3333));
                                float _4666 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3479 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3483 = sqrt(_3468) * _3348.w;
                                float _3485 = 1.39999997615814208984375 / (_3483 + 1.39999997615814208984375);
                                float _3486 = _3485 * _3485;
                                float _3489 = ((1.0 - _3486) * dot(vec3(_3472, _3473, _3474), vec3(_913, _916, _919))) + _3486;
                                float _3492 = _3483 * _3483;
                                float _3496 = (fma(_2672, _3375.z, fma(_2671, _3375.y, _3375.x * _2670)) + _3375.w) / _3437;
                                float _3497 = (fma(_2672, _3390.z, fma(_2671, _3390.y, _3390.x * _2670)) + _3390.w) / _3437;
                                float _3501 = 1.0 - dot(vec2(_3496, _3497), vec2(_3496, _3497));
                                float _4682 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3502 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3503 = _3502 * (((isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0))) * _3479) / ((_3492 * 0.699999988079071044921875) + 1.0));
                                float _3515 = exp2(log2(1.0 / ((_3492 * 3.5) + 5.0)) * 0.25);
                                float _3516 = 1.0 - _988;
                                float _3523 = sqrt(1.0 - ((1.0 - (_3516 * _3516)) * (1.0 - (_3515 * _3515))));
                                float _3524 = _3523 * _3523;
                                float _3525 = _3524 * _3524;
                                float _3526 = _3472 - _2975;
                                float _3527 = _3473 - _2976;
                                float _3528 = _3474 - _2977;
                                float _3532 = inversesqrt(dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528)));
                                float _3536 = dot(vec3(_913, _916, _919), vec3((-0.0) - _2975, (-0.0) - _2976, (-0.0) - _2977));
                                float _4693 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3539 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3540 = dot(vec3(_913, _916, _919), vec3(_3532 * _3526, _3532 * _3527, _3532 * _3528));
                                float _4704 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3543 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3547 = ((_3543 * _3543) * (_3525 + (-1.0))) + 1.0;
                                float _3548 = _3485 * _3524;
                                float _3549 = _3548 * _3548;
                                float _3555 = ((1.0 - _3549) * dot(vec3(_913, _916, _919), vec3(_3472, _3473, _3474))) + _3549;
                                float _4715 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3556 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3557 = 1.0 - _3524;
                                float _3567 = (0.5 / (((_3556 * ((_3539 * _3557) + _3524)) + 9.9999999392252902907785028219223e-09) + (((_3556 * _3557) + _3524) * _3539))) * _3556;
                                float _4726 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3577 = (_3502 * _3479) * (((_3525 * 3.1415927410125732421875) * (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) / ((_3547 * _3547) * ((_3492 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3503 * _3348.z;
                                frontier_phi_75_pred_1 = _3503 * _3348.y;
                                frontier_phi_75_pred_2 = _3503 * _3348.x;
                                frontier_phi_75_pred_3 = _3577 * _3360.z;
                                frontier_phi_75_pred_4 = _3577 * _3360.y;
                                frontier_phi_75_pred_5 = _3577 * _3360.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3586 = frontier_phi_75_pred;
                            _3585 = frontier_phi_75_pred_1;
                            _3584 = frontier_phi_75_pred_2;
                            _3583 = frontier_phi_75_pred_3;
                            _3582 = frontier_phi_75_pred_4;
                            _3581 = frontier_phi_75_pred_5;
                            _3290 = _3584 + _3303;
                            _3291 = _3585 + _3304;
                            _3292 = _3586 + _3305;
                            _3287 = _3581 + _3300;
                            _3288 = _3582 + _3301;
                            _3289 = _3583 + _3302;
                            if (_3307 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3307;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3292;
                        frontier_phi_69_pred_1 = _3291;
                        frontier_phi_69_pred_2 = _3290;
                        frontier_phi_69_pred_3 = _3289;
                        frontier_phi_69_pred_4 = _3288;
                        frontier_phi_69_pred_5 = _3287;
                    }
                    _2960 = frontier_phi_69_pred;
                    _2958 = frontier_phi_69_pred_1;
                    _2956 = frontier_phi_69_pred_2;
                    _2954 = frontier_phi_69_pred_3;
                    _2952 = frontier_phi_69_pred_4;
                    _2950 = frontier_phi_69_pred_5;
                    uint _3095 = _3094 + 1u;
                    if (_3095 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3088 = _2950;
                        _3089 = _2952;
                        _3090 = _2954;
                        _3091 = _2956;
                        _3092 = _2958;
                        _3093 = _2960;
                        _3094 = _3095;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2960;
                frontier_phi_57_58_ladder_1 = _2958;
                frontier_phi_57_58_ladder_2 = _2956;
                frontier_phi_57_58_ladder_3 = _2954;
                frontier_phi_57_58_ladder_4 = _2952;
                frontier_phi_57_58_ladder_5 = _2950;
            }
            else
            {
                frontier_phi_57_58_ladder = _2847;
                frontier_phi_57_58_ladder_1 = _2845;
                frontier_phi_57_58_ladder_2 = _2843;
                frontier_phi_57_58_ladder_3 = _2841;
                frontier_phi_57_58_ladder_4 = _2839;
                frontier_phi_57_58_ladder_5 = _2837;
            }
            _2949 = frontier_phi_57_58_ladder_5;
            _2951 = frontier_phi_57_58_ladder_4;
            _2953 = frontier_phi_57_58_ladder_3;
            _2955 = frontier_phi_57_58_ladder_2;
            _2957 = frontier_phi_57_58_ladder_1;
            _2959 = frontier_phi_57_58_ladder;
        }
        float _2964 = isnan(1.0) ? _972 : (isnan(_972) ? 1.0 : min(_972, 1.0));
        _2728 = (_2964 * _2955) + _2162;
        _2730 = (_2964 * _2957) + _2164;
        _2732 = (_2964 * _2959) + _2166;
        _2734 = ((_2949 * _957) * _2964) + _2510;
        _2736 = ((_2951 * _959) * _2964) + _2512;
        _2738 = ((_2953 * _960) * _2964) + _2514;
    }
    else
    {
        _2728 = _2162;
        _2730 = _2164;
        _2732 = _2166;
        _2734 = _2510;
        _2736 = _2512;
        _2738 = _2514;
    }
    uint _2744 = _933 + uint(cbMatDynParam._m0[0u].w);
    float _4742 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _4753 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _4764 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _4775 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _2770 = (((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2728 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _972))) + ((_2734 + ((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1781)) * cbPerFrame._m0[3u].x)) + (((((_602 * _597.x) + cbMtdParam._m0[20u].y) * TEXCOORD_7.x) * cbMtdParam._m0[17u].x) * cbInstanceData._m0[_2744].x);
    float _2772 = (((((cbMtdParam._m0[20u].z + (_602 * _597.y)) * TEXCOORD_7.y) * cbMtdParam._m0[17u].x) * cbInstanceData._m0[_2744].y) + ((_2736 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1781)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2730 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _972)));
    float _2774 = (((((cbMtdParam._m0[20u].w + (_602 * _597.z)) * TEXCOORD_7.z) * cbMtdParam._m0[17u].x) * cbInstanceData._m0[_2744].z) + ((_2738 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1781)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2732 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _972)));
    float _2782 = cbInstanceData._m0[_932 + 6u].w * (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)));
    float _2787 = _894 / cbSceneParam._m0[86u].x;
    float _2788 = _895 / cbSceneParam._m0[86u].y;
    vec4 _2802 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2787, _2788, (log2((isnan(cbSceneParam._m0[77u].w) ? _829 : (isnan(_829) ? cbSceneParam._m0[77u].w : min(_829, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2804 = _2802.x;
    float _2805 = _2802.y;
    float _2806 = _2802.z;
    float _2807 = _2802.w;
    float _2899;
    float _2901;
    float _2903;
    float _2905;
    if (_829 > cbSceneParam._m0[78u].w)
    {
        float _2862 = isnan(_829) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _829 : min(cbSceneParam._m0[80u].w, _829));
        float _2863 = _2862 / _829;
        float _2874 = _2863 * _879;
        float _2875 = _880 * _2863;
        float _2876 = (-0.0) - _2875;
        float _2877 = _2863 * _881;
        float _2879 = (cbSceneParam._m0[77u].w * _2876) / _2862;
        float _2880 = _2879 + cbSceneParam._m0[79u].w;
        float _2881 = cbSceneParam._m0[79u].w - _2875;
        float _2887 = sqrt(((_2874 * _2874) + (_2875 * _2875)) + (_2877 * _2877));
        float _2890 = (1.0 - (cbSceneParam._m0[77u].w / _2862)) * _2887;
        float _2895 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2897 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3050;
        if (abs((_2876 - _2879) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3050 = ((((_2880 > 0.0) ? exp2(_2895 * _2880) : (2.0 - exp2(_2897 * _2880))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2890;
        }
        else
        {
            float _3010 = 1.0 / cbSceneParam._m0[80u].x;
            float _3011 = isnan(_2881) ? _2880 : (isnan(_2880) ? _2881 : max(_2880, _2881));
            float _3012 = isnan(_2881) ? _2880 : (isnan(_2880) ? _2881 : min(_2880, _2881));
            float _3021 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : min(_3011, 0.0));
            float _3022 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : min(_3012, 0.0));
            _3050 = ((abs(_2887 / _2876) * cbSceneParam._m0[80u].y) * ((((_3021 - _3022) * 2.0) - ((exp2(_2895 * (isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0)))) - exp2(_2895 * (isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0))))) * _3010)) - ((exp2(_2897 * _3021) - exp2(_2897 * _3022)) * _3010))) + (_2890 * cbSceneParam._m0[80u].z);
        }
        vec4 _3052 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2787, _2788, 1.0), 0.0);
        float _3061 = exp2((_3050 * (-1.44269502162933349609375)) * (1.0 - _3052.w));
        float _3062 = log2(_3061);
        float _3078 = log2(_2807);
        _2899 = (exp2(_3078 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3062 * cbSceneParam._m0[78u].x)) * _3052.x) / cbSceneParam._m0[78u].x)) + _2804;
        _2901 = (exp2(_3078 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3062 * cbSceneParam._m0[78u].y)) * _3052.y) / cbSceneParam._m0[78u].y)) + _2805;
        _2903 = (exp2(_3078 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3062 * cbSceneParam._m0[78u].z)) * _3052.z) / cbSceneParam._m0[78u].z)) + _2806;
        _2905 = _3061 * _2807;
    }
    else
    {
        _2899 = _2804;
        _2901 = _2805;
        _2903 = _2806;
        _2905 = _2807;
    }
    float _2917 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2918 = _2917 == 3.0;
    float _2919 = log2(_2905);
    float _2926 = exp2(_2919 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0)));
    float _2927 = exp2(_2919 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0)));
    float _2928 = exp2(_2919 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0)));
    float _2937 = (_2917 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2937 * (_2918 ? _2926 : (_2926 + (cbSceneParam._m0[72u].w * _2899)));
    SV_Target.y = _2937 * (_2918 ? _2927 : (_2927 + (cbSceneParam._m0[72u].w * _2901)));
    SV_Target.z = _2937 * (_2918 ? _2928 : (_2928 + (cbSceneParam._m0[72u].w * _2903)));
    SV_Target.w = _2782;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2782;
}


