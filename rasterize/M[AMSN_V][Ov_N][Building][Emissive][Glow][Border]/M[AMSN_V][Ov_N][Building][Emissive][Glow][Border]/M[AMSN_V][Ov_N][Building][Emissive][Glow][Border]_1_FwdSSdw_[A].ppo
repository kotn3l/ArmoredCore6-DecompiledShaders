#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[21];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 6, component = 1) in float TEXCOORD_6;
layout(location = 7) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1391;
float _3816;
float _3817;
float _3818;
float _3819;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _246 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _247 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _248 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _252 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _253 = _252 * _246;
    float _254 = _252 * _247;
    float _255 = _252 * _248;
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = _259 * NORMAL.x;
    float _261 = _259 * NORMAL.y;
    float _262 = _259 * NORMAL.z;
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = _266 * TANGENT.x;
    float _268 = _266 * TANGENT.y;
    float _269 = _266 * TANGENT.z;
    float _273 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _274 = _273 * TANGENT_2.x;
    float _275 = _273 * TANGENT_2.y;
    float _276 = _273 * TANGENT_2.z;
    float _281;
    float _282;
    float _283;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _281 = (-0.0) - _260;
        _282 = (-0.0) - _261;
        _283 = (-0.0) - _262;
    }
    else
    {
        _281 = _260;
        _282 = _261;
        _283 = _262;
    }
    vec4 _321 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _333 = 1.0 - ((1.0 - _321.x) * 1.39999997615814208984375);
    float _3828 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _334 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _341 = (_334 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x)) + cbMtdParam._m0[15u].x;
    float _342 = (_334 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y)) + cbMtdParam._m0[15u].y;
    float _343 = (_334 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z)) + cbMtdParam._m0[15u].z;
    float _345 = 1.0 - ((1.0 - _321.y) * 1.39999997615814208984375);
    float _3839 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _346 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _353 = (_346 * (cbMtdParam._m0[13u].x - _341)) + _341;
    float _354 = (_346 * (cbMtdParam._m0[13u].y - _342)) + _342;
    float _355 = (_346 * (cbMtdParam._m0[13u].z - _343)) + _343;
    float _357 = 1.0 - ((1.0 - _321.z) * 1.39999997615814208984375);
    float _3850 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _358 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _387 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[19u].z;
    float _401 = ((cbMtdParam._m0[18u].y * (-1.39999997615814208984375)) * ((TEXCOORD_6 - _387) + (cbMtdParam._m0[17u].w * TEXCOORD_6))) + 1.0;
    float _3861 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _403 = 1.0 - (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)));
    float _404 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _405 = isnan(1.0) ? _404 : (isnan(_404) ? 1.0 : min(_404, 1.0));
    float _413 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5 - _387) + (cbMtdParam._m0[17u].z * TEXCOORD_5))) + 1.0;
    float _3882 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _415 = 1.0 - (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)));
    float _416 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _417 = isnan(1.0) ? _416 : (isnan(_416) ? 1.0 : min(_416, 1.0));
    vec4 _435 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _437 = _435.x;
    float _438 = _435.y;
    float _439 = _435.z;
    float _440 = cbMtdParam._m0[12u].x * _417;
    float _442 = cbMtdParam._m0[12u].y * _417;
    float _444 = cbMtdParam._m0[12u].z * _417;
    float _464 = _415 + _403;
    float _465 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _466 = isnan(1.0) ? _465 : (isnan(_465) ? 1.0 : min(_465, 1.0));
    vec4 _484 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _489 = _484.w;
    float _490 = _484.x * cbMtdParam._m0[10u].x;
    float _491 = _484.y * cbMtdParam._m0[10u].y;
    float _492 = _484.z * cbMtdParam._m0[10u].z;
    float _512 = ((_490 - (_466 * _490)) + ((((((_437 * (cbMtdParam._m0[11u].x - _440)) * _405) + (_440 * _437)) * 4.55000019073486328125) * _466) * _490)) * ((_358 * (cbMtdParam._m0[14u].x - _353)) + _353);
    float _513 = ((((((((_438 * (cbMtdParam._m0[11u].y - _442)) * _405) + (_442 * _438)) * 4.55000019073486328125) * _466) * _491) + _491) - (_466 * _491)) * ((_358 * (cbMtdParam._m0[14u].y - _354)) + _354);
    float _514 = ((((((((_439 * (cbMtdParam._m0[11u].z - _444)) * _405) + (_444 * _439)) * 4.55000019073486328125) * _466) * _492) + _492) - (_466 * _492)) * ((_358 * (cbMtdParam._m0[14u].z - _355)) + _355);
    vec4 _531 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _535 = _531.z;
    float _539 = (_531.x * 2.0) + (-1.0);
    float _541 = (_531.y * 2.0) + (-1.0);
    float _542 = dot(vec2(_539, _541), vec2(_539, _541));
    float _3913 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))));
    float _550 = fma(_547, _281, fma(_541, _274, _539 * _253));
    float _553 = fma(_547, _282, fma(_541, _275, _539 * _254));
    float _556 = fma(_547, _283, fma(_541, _276, _539 * _255));
    float _560 = inversesqrt(dot(vec3(_550, _553, _556), vec3(_550, _553, _556)));
    float _561 = _560 * _550;
    float _562 = _560 * _553;
    float _563 = _560 * _556;
    float _575 = abs((fract(cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3924 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _576 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _581 = (_576 * _576) * (3.0 - (_576 * 2.0));
    float _582 = isnan(cbMtdParam._m0[16u].z) ? _581 : (isnan(_581) ? cbMtdParam._m0[16u].z : max(_581, cbMtdParam._m0[16u].z));
    vec4 _601 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[19u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[19u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _606 = (isnan(cbMtdParam._m0[16u].w) ? _582 : (isnan(_582) ? cbMtdParam._m0[16u].w : min(_582, cbMtdParam._m0[16u].w))) * cbMtdParam._m0[17u].y;
    vec4 _634 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _640 = (_634.x * 2.0) + (-1.0);
    float _641 = (_634.y * 2.0) + (-1.0);
    float _642 = dot(vec2(_640, _641), vec2(_640, _641));
    float _3945 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _647 = sqrt(1.0 - (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))));
    float _650 = fma(_647, _281, fma(_641, _274, _640 * _253));
    float _653 = fma(_647, _282, fma(_641, _275, _640 * _254));
    float _656 = fma(_647, _283, fma(_641, _276, _640 * _255));
    float _660 = inversesqrt(dot(vec3(_650, _653, _656), vec3(_650, _653, _656)));
    float _661 = _660 * _650;
    float _662 = _660 * _653;
    float _663 = _660 * _656;
    float _666 = fma(_663, _236, fma(_662, _235, _661 * _234));
    float _669 = fma(_663, _269, fma(_662, _268, _661 * _267));
    float _672 = fma(_663, _283, fma(_662, _282, _661 * _281));
    float _676 = inversesqrt(dot(vec3(_666, _669, _672), vec3(_666, _669, _672)));
    float _680 = fma(_563, _236, fma(_562, _235, _561 * _234));
    float _683 = fma(_563, _269, fma(_562, _268, _561 * _267));
    float _686 = fma(_563, _283, fma(_562, _282, _561 * _281));
    float _690 = inversesqrt(dot(vec3(_680, _683, _686), vec3(_680, _683, _686)));
    vec4 _706 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _712 = (_706.x * 2.0) + (-1.0);
    float _713 = (_706.y * 2.0) + (-1.0);
    float _714 = dot(vec2(_712, _713), vec2(_712, _713));
    float _3956 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _719 = sqrt(1.0 - (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))));
    vec4 _734 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _740 = (_734.x * 2.0) + (-1.0);
    float _741 = (_734.y * 2.0) + (-1.0);
    float _742 = dot(vec2(_740, _741), vec2(_740, _741));
    float _3967 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _747 = sqrt(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))));
    float _750 = fma(_747, _281, fma(_741, _274, _740 * _253));
    float _753 = fma(_747, _282, fma(_741, _275, _740 * _254));
    float _756 = fma(_747, _283, fma(_741, _276, _740 * _255));
    float _760 = inversesqrt(dot(vec3(_750, _753, _756), vec3(_750, _753, _756)));
    float _761 = _760 * _750;
    float _762 = _760 * _753;
    float _763 = _760 * _756;
    float _766 = fma(_763, _236, fma(_762, _235, _761 * _234));
    float _769 = fma(_763, _269, fma(_762, _268, _761 * _267));
    float _772 = fma(_763, _283, fma(_762, _282, _761 * _281));
    float _776 = inversesqrt(dot(vec3(_766, _769, _772), vec3(_766, _769, _772)));
    float _792 = ((((_690 * _680) * cbMtdParam._m0[19u].x) + (((_666 * _405) * _676) * cbMtdParam._m0[18u].z)) + _712) + (((_766 * _417) * _776) * cbMtdParam._m0[18u].w);
    float _795 = ((((_690 * _683) * cbMtdParam._m0[19u].x) + (((_669 * _405) * _676) * cbMtdParam._m0[18u].z)) + _713) + (((_769 * _417) * _776) * cbMtdParam._m0[18u].w);
    float _798 = fma(_719, _281, fma(_795, _267, _792 * _234));
    float _801 = fma(_719, _282, fma(_795, _268, _792 * _235));
    float _804 = fma(_719, _283, fma(_795, _269, _792 * _236));
    float _808 = inversesqrt(dot(vec3(_798, _801, _804), vec3(_798, _801, _804)));
    float _809 = _808 * _798;
    float _810 = _808 * _801;
    float _811 = _808 * _804;
    float _3978 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _812 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _3989 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _813 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _4011 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _4022 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _4033 = isnan(0.0) ? cbMtdParam._m0[20u].x : (isnan(cbMtdParam._m0[20u].x) ? 0.0 : max(cbMtdParam._m0[20u].x, 0.0));
    float _817 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _833 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _883 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _873);
    float _884 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _873);
    float _885 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _873);
    float _889 = inversesqrt(dot(vec3(_883, _884, _885), vec3(_883, _884, _885)));
    float _890 = _883 * _889;
    float _891 = _884 * _889;
    float _892 = _885 * _889;
    vec4 _897 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _899 = _897.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1070 = sqrt(((_883 * _883) + (_884 * _884)) + (_885 * _885));
        float _1076 = (cbMatDynParam._m0[5u].x * _1070) + cbMatDynParam._m0[5u].y;
        float _4044 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1081 = (cbMatDynParam._m0[5u].z * _1070) + cbMatDynParam._m0[5u].w;
        float _4055 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) - _1077)) + _1077) < ((_899 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _910 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _911 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _929 = fma(_811, cbSceneParam._m0[5u].z, fma(_810, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _809));
    float _932 = fma(_811, cbSceneParam._m0[6u].z, fma(_810, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _809));
    float _935 = fma(_811, cbSceneParam._m0[7u].z, fma(_810, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _809));
    uint _948 = uint(roundEven(NORMAL.w)) * 13u;
    uint _949 = _948 + 9u;
    uint _950 = _949 + uint(cbMatDynParam._m0[0u].w);
    float _956 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) * cbInstanceData._m0[_950].x;
    float _957 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * cbInstanceData._m0[_950].y;
    float _958 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * cbInstanceData._m0[_950].z;
    float _4066 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _959 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _4077 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _960 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _4088 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _961 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _962 = 1.0 - _817;
    float _963 = _959 * _962;
    float _964 = _960 * _962;
    float _965 = _961 * _962;
    float _970 = (_959 + (-0.039999999105930328369140625)) * _817;
    float _971 = (_960 + (-0.039999999105930328369140625)) * _817;
    float _972 = (_961 + (-0.039999999105930328369140625)) * _817;
    float _973 = _970 + 0.039999999105930328369140625;
    float _975 = _971 + 0.039999999105930328369140625;
    float _976 = _972 + 0.039999999105930328369140625;
    vec4 _985 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _910, cbSceneParam._m0[86u].y * _911));
    float _988 = _985.x * TEXCOORD_7.w;
    float _989 = dot(vec3(_809, _810, _811), vec3(_890, _891, _892));
    float _992 = _989 * 2.0;
    float _996 = (_992 * _809) - _890;
    float _997 = (_992 * _810) - _891;
    float _998 = (_992 * _811) - _892;
    float _1002 = abs(dot(vec3(_890, _891, _892), vec3(_809, _810, _811)));
    float _4099 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1004 = sqrt(_813);
    float _1016 = exp2((_1004 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1004 * 3.0));
    float _1022 = (1.0 - _1016) * ((_1004 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1023 = _1016 * _1004;
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1390;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1115 = fma(_1059, cbModelParam._m0[26u].z, fma(_1055, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1051));
        float _1119 = fma(_1059, cbModelParam._m0[27u].z, fma(_1055, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1051));
        float _1123 = fma(_1059, cbModelParam._m0[28u].z, fma(_1055, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1051));
        float _1148 = _1051 + _809;
        float _1149 = _1055 + _810;
        float _1150 = _1059 + _811;
        float _1160 = fma(_1150, cbModelParam._m0[26u].z, fma(_1149, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1148)) - _1115;
        float _1161 = fma(_1150, cbModelParam._m0[27u].z, fma(_1149, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1148)) - _1119;
        float _1162 = fma(_1150, cbModelParam._m0[28u].z, fma(_1149, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1148)) - _1123;
        float _1166 = inversesqrt(dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162)));
        float _1179 = ((_1166 * _1160) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1115 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1180 = ((_1166 * _1161) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1119 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1181 = ((_1166 * _1162) / cbModelParam._m0[34u].z) + ((((((_1123 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        float _1218 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1184.x + (-0.5));
        float _1220 = _1218 * (_1184.y + (-0.5));
        float _1221 = _1218 * (_1184.z + (-0.5));
        float _1228 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1191.x + (-0.5));
        float _1230 = _1228 * (_1191.y + (-0.5));
        float _1231 = _1228 * (_1191.z + (-0.5));
        float _1238 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1198.x + (-0.5));
        float _1240 = _1238 * (_1198.y + (-0.5));
        float _1241 = _1238 * (_1198.z + (-0.5));
        float _1248 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1205.x + (-0.5));
        float _1250 = _1248 * (_1205.y + (-0.5));
        float _1251 = _1248 * (_1205.z + (-0.5));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = _1219 * 0.5;
        float _1256 = _1229 * 0.5;
        float _1257 = _1239 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1272 = (dot(vec3(_809, _810, _811), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1282 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _4147 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1284 + 1.0))) + _1289) * _1252;
        float _1299 = _1220 * 0.5;
        float _1300 = _1230 * 0.5;
        float _1301 = _1240 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_809, _810, _811), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _4180 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1326 + 1.0))) + _1331) * _1253;
        float _1341 = _1221 * 0.5;
        float _1342 = _1231 * 0.5;
        float _1343 = _1241 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_809, _810, _811), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4213 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1368 + 1.0))) + _1373) * _1254;
        _1390 = _1221;
        _1392 = _1220;
        _1393 = _1219;
        _1394 = _1231;
        _1395 = _1230;
        _1396 = _1229;
        _1397 = _1241;
        _1398 = _1240;
        _1399 = _1239;
        _1400 = _1254;
        _1401 = _1253;
        _1402 = _1252;
        _1403 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1404 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1405 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
    }
    else
    {
        _1390 = _1391;
        _1392 = _1391;
        _1393 = _1391;
        _1394 = _1391;
        _1395 = _1391;
        _1396 = _1391;
        _1397 = _1391;
        _1398 = _1391;
        _1399 = _1391;
        _1400 = _1391;
        _1401 = _1391;
        _1402 = _1391;
        _1403 = 0.0;
        _1404 = 0.0;
        _1405 = 0.0;
    }
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1434 = fma(_1059, cbModelParam._m0[30u].z, fma(_1055, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1051));
        float _1438 = fma(_1059, cbModelParam._m0[31u].z, fma(_1055, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1051));
        float _1442 = fma(_1059, cbModelParam._m0[32u].z, fma(_1055, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1051));
        float _1465 = _1051 + _809;
        float _1466 = _1055 + _810;
        float _1467 = _1059 + _811;
        float _1477 = fma(_1467, cbModelParam._m0[30u].z, fma(_1466, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1465)) - _1434;
        float _1478 = fma(_1467, cbModelParam._m0[31u].z, fma(_1466, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1465)) - _1438;
        float _1479 = fma(_1467, cbModelParam._m0[32u].z, fma(_1466, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1465)) - _1442;
        float _1483 = inversesqrt(dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479)));
        float _1496 = ((_1483 * _1477) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1434 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1497 = ((_1483 * _1478) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1438 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1498 = ((_1483 * _1479) / cbModelParam._m0[35u].z) + ((((((_1442 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1500 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        vec4 _1507 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        float _1533 = exp2((_1500.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1500.x + (-0.5));
        float _1535 = _1533 * (_1500.y + (-0.5));
        float _1536 = _1533 * (_1500.z + (-0.5));
        float _1543 = exp2((_1507.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1507.x + (-0.5));
        float _1545 = _1543 * (_1507.y + (-0.5));
        float _1546 = _1543 * (_1507.z + (-0.5));
        float _1553 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1514.x + (-0.5));
        float _1555 = _1553 * (_1514.y + (-0.5));
        float _1556 = _1553 * (_1514.z + (-0.5));
        float _1563 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1521.x + (-0.5));
        float _1565 = _1563 * (_1521.y + (-0.5));
        float _1566 = _1563 * (_1521.z + (-0.5));
        float _1567 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1568 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1569 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1570 = _1534 * 0.5;
        float _1571 = _1544 * 0.5;
        float _1572 = _1554 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1586 = (dot(vec3(_809, _810, _811), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1595 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1567 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _4276 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1597 + 1.0))) + _1602) * _1567;
        float _1612 = _1535 * 0.5;
        float _1613 = _1545 * 0.5;
        float _1614 = _1555 * 0.5;
        float _1615 = dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614));
        float _1620 = (_1615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1615);
        float _1628 = (dot(vec3(_809, _810, _811), vec3(_1620 * _1612, _1620 * _1613, _1620 * _1614)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1637 = sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614)) / (_1568 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1639 = _1638 * 2.0;
        float _1643 = (1.0 - _1638) / (_1638 + 1.0);
        float _4309 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1653 = ((((1.0 - _1644) * (_1639 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1639 + 1.0))) + _1644) * _1568;
        float _1654 = _1536 * 0.5;
        float _1655 = _1546 * 0.5;
        float _1656 = _1556 * 0.5;
        float _1657 = dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656));
        float _1662 = (_1657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1657);
        float _1670 = (dot(vec3(_809, _810, _811), vec3(_1662 * _1654, _1662 * _1655, _1662 * _1656)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1679 = sqrt(((_1655 * _1655) + (_1654 * _1654)) + (_1656 * _1656)) / (_1569 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1681 = _1680 * 2.0;
        float _1685 = (1.0 - _1680) / (_1680 + 1.0);
        float _4342 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1695 = ((((1.0 - _1686) * (_1681 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1681 + 1.0))) + _1686) * _1569;
        _1703 = _1536;
        _1704 = _1535;
        _1705 = _1534;
        _1706 = _1546;
        _1707 = _1545;
        _1708 = _1544;
        _1709 = _1556;
        _1710 = _1555;
        _1711 = _1554;
        _1712 = _1569;
        _1713 = _1568;
        _1714 = _1567;
        _1715 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
        _1716 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)));
        _1717 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)));
    }
    else
    {
        _1703 = _1391;
        _1704 = _1391;
        _1705 = _1391;
        _1706 = _1391;
        _1707 = _1391;
        _1708 = _1391;
        _1709 = _1391;
        _1710 = _1391;
        _1711 = _1391;
        _1712 = _1391;
        _1713 = _1391;
        _1714 = _1391;
        _1715 = 0.0;
        _1716 = 0.0;
        _1717 = 0.0;
    }
    float _1727 = (cbModelParam._m0[1u].x * (_1715 - _1403)) + _1403;
    float _1728 = (cbModelParam._m0[1u].x * (_1716 - _1404)) + _1404;
    float _1729 = (cbModelParam._m0[1u].x * (_1717 - _1405)) + _1405;
    float _1750 = fma(_1729, cbSceneParam._m0[89u].z, fma(_1728, cbSceneParam._m0[89u].y, _1727 * cbSceneParam._m0[89u].x));
    float _1753 = fma(_1729, cbSceneParam._m0[90u].z, fma(_1728, cbSceneParam._m0[90u].y, _1727 * cbSceneParam._m0[90u].x));
    float _1756 = fma(_1729, cbSceneParam._m0[91u].z, fma(_1728, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1727));
    float _1771 = _996 * 0.5;
    float _1772 = _997 * 0.5;
    float _1773 = _998 * 0.5;
    float _1774 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1705, _1708, _1711, _1714));
    float _1777 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1704, _1707, _1710, _1713));
    float _1780 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1703, _1706, _1709, _1712));
    float _1814;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1787 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1390, _1394, _1397, _1400));
        float _1791 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1392, _1395, _1398, _1401));
        float _1795 = dot(vec4(_1771, _1772, _1773, 1.0), vec4(_1393, _1396, _1399, _1402));
        float _1802 = dot(vec4(cbModelParam._m0[39u]), vec4(_1771, _1772, _1773, 1.0));
        _1814 = dot(vec3(isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1802) ? 0.0 : (isnan(0.0) ? _1802 : max(0.0, _1802))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1814 = 1.0;
    }
    float _1825;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1816 = dot(vec4(cbModelParam._m0[40u]), vec4(_1771, _1772, _1773, 1.0));
        _1825 = dot(vec3(isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1816) ? 0.0 : (isnan(0.0) ? _1816 : max(0.0, _1816))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1825 = 1.0;
    }
    float _1829 = (_1825 * cbModelParam._m0[1u].x) + (_1814 * (1.0 - cbModelParam._m0[1u].x));
    float _1839 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _813);
    float _1840 = isnan(_1839) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1839 : min(cbModelParam._m0[25u].z, _1839));
    float _1920;
    float _1922;
    float _1924;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1887 = fma(_1059, cbModelParam._m0[13u].z, fma(_1055, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1051)) + cbModelParam._m0[13u].w;
        float _1891 = fma(_1059, cbModelParam._m0[14u].z, fma(_1055, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1051)) + cbModelParam._m0[14u].w;
        float _1895 = fma(_1059, cbModelParam._m0[15u].z, fma(_1055, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1051)) + cbModelParam._m0[15u].w;
        float _1898 = fma(_998, cbModelParam._m0[13u].z, fma(_997, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _996));
        float _1901 = fma(_998, cbModelParam._m0[14u].z, fma(_997, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _996));
        float _1904 = fma(_998, cbModelParam._m0[15u].z, fma(_997, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _996));
        float _1932;
        if (_1898 > 0.0)
        {
            _1932 = abs((1.0 - _1887) / _1898);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1887 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1932 = frontier_phi_19_17_ladder;
        }
        float _2155;
        if (_1901 > 0.0)
        {
            _2155 = abs((1.0 - _1891) / _1901);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1891 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2155 = frontier_phi_28_24_ladder;
        }
        float _2412;
        if (_1904 > 0.0)
        {
            _2412 = abs((1.0 - _1895) / _1904);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1895 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2412 = frontier_phi_40_35_ladder;
        }
        float _2414 = isnan(_2155) ? _1932 : (isnan(_1932) ? _2155 : min(_1932, _2155));
        float _2415 = isnan(_2412) ? _2414 : (isnan(_2414) ? _2412 : min(_2414, _2412));
        float _2419 = (_2415 * _1898) + _1887;
        float _2420 = (_2415 * _1901) + _1891;
        float _2421 = (_2415 * _1904) + _1895;
        float _2422 = _2415 * 9.9999997473787516355514526367188e-05;
        float _2424 = (-1.0) - _2422;
        float _2426 = _2422 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2421 > _2426) || ((_2421 < _2424) || ((_2420 > _2426) || ((_2420 < _2424) || ((_2419 < _2424) || (_2419 > _2426))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2549 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2421, cbModelParam._m0[9u].z, fma(_2420, cbModelParam._m0[9u].y, _2419 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2421, cbModelParam._m0[10u].z, fma(_2420, cbModelParam._m0[10u].y, _2419 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2421, cbModelParam._m0[11u].z, fma(_2420, cbModelParam._m0[11u].y, _2419 * cbModelParam._m0[11u].x))), _1840);
            frontier_phi_18_40_ladder = _2549.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2549.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2549.x * cbModelParam._m0[1u].y;
        }
        _1920 = frontier_phi_18_40_ladder_2;
        _1922 = frontier_phi_18_40_ladder_1;
        _1924 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1908 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_996, _997, _998), _1840);
        _1920 = _1908.x * cbModelParam._m0[1u].y;
        _1922 = _1908.y * cbModelParam._m0[1u].y;
        _1924 = _1908.z * cbModelParam._m0[1u].y;
    }
    float _1928 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _813);
    float _1929 = isnan(_1928) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1928 : min(cbModelParam._m0[25u].w, _1928));
    float _2018;
    float _2020;
    float _2022;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1982 = fma(_1059, cbModelParam._m0[21u].z, fma(_1055, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1051)) + cbModelParam._m0[21u].w;
        float _1986 = fma(_1059, cbModelParam._m0[22u].z, fma(_1055, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1051)) + cbModelParam._m0[22u].w;
        float _1990 = fma(_1059, cbModelParam._m0[23u].z, fma(_1055, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1051)) + cbModelParam._m0[23u].w;
        float _1993 = fma(_998, cbModelParam._m0[21u].z, fma(_997, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _996));
        float _1996 = fma(_998, cbModelParam._m0[22u].z, fma(_997, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _996));
        float _1999 = fma(_998, cbModelParam._m0[23u].z, fma(_997, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _996));
        float _2160;
        if (_1993 > 0.0)
        {
            _2160 = abs((1.0 - _1982) / _1993);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1982 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2160 = frontier_phi_30_26_ladder;
        }
        float _2439;
        if (_1996 > 0.0)
        {
            _2439 = abs((1.0 - _1986) / _1996);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1986 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2439 = frontier_phi_42_37_ladder;
        }
        float _2652;
        if (_1999 > 0.0)
        {
            _2652 = abs((1.0 - _1990) / _1999);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1990 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2652 = frontier_phi_51_48_ladder;
        }
        float _2654 = isnan(_2439) ? _2160 : (isnan(_2160) ? _2439 : min(_2160, _2439));
        float _2655 = isnan(_2652) ? _2654 : (isnan(_2654) ? _2652 : min(_2654, _2652));
        float _2659 = (_2655 * _1993) + _1982;
        float _2660 = (_2655 * _1996) + _1986;
        float _2661 = (_2655 * _1999) + _1990;
        float _2662 = _2655 * 9.9999997473787516355514526367188e-05;
        float _2663 = (-1.0) - _2662;
        float _2665 = _2662 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2661 > _2665) || ((_2661 < _2663) || ((_2660 > _2665) || ((_2660 < _2663) || ((_2659 < _2663) || (_2659 > _2665))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2880 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2661, cbModelParam._m0[17u].z, fma(_2660, cbModelParam._m0[17u].y, _2659 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2661, cbModelParam._m0[18u].z, fma(_2660, cbModelParam._m0[18u].y, _2659 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2661, cbModelParam._m0[19u].z, fma(_2660, cbModelParam._m0[19u].y, _2659 * cbModelParam._m0[19u].x))), _1929);
            frontier_phi_27_51_ladder = _2880.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2880.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2880.x * cbModelParam._m0[1u].z;
        }
        _2018 = frontier_phi_27_51_ladder_2;
        _2020 = frontier_phi_27_51_ladder_1;
        _2022 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2002 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_996, _997, _998), _1929);
        _2018 = _2002.x * cbModelParam._m0[1u].z;
        _2020 = _2002.y * cbModelParam._m0[1u].z;
        _2022 = _2002.z * cbModelParam._m0[1u].z;
    }
    float _2035 = (((_1022 * _973) + _1023) * _988) * ((cbModelParam._m0[1u].w * (_2018 - _1920)) + _1920);
    float _2037 = (((_1022 * _975) + _1023) * _988) * ((cbModelParam._m0[1u].w * (_2020 - _1922)) + _1922);
    float _2039 = (((_1022 * _976) + _1023) * _988) * ((cbModelParam._m0[1u].w * (_2022 - _1924)) + _1924);
    float _2042 = fma(_2039, cbSceneParam._m0[89u].z, fma(_2037, cbSceneParam._m0[89u].y, _2035 * cbSceneParam._m0[89u].x));
    float _2045 = fma(_2039, cbSceneParam._m0[90u].z, fma(_2037, cbSceneParam._m0[90u].y, _2035 * cbSceneParam._m0[90u].x));
    float _2048 = fma(_2039, cbSceneParam._m0[91u].z, fma(_2037, cbSceneParam._m0[91u].y, _2035 * cbSceneParam._m0[91u].x));
    vec4 _2056 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_910, _911));
    float _2058 = _2056.w;
    float _2070 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2058);
    float _2071 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2058);
    float _2072 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2058);
    uvec4 _2076 = floatBitsToUint(cbInstanceData._m0[_948 + 5u]);
    uint _2078 = _2076.x * 14u;
    uint _2079 = _2078 + 13u;
    float _2086 = _988 + (-1.0);
    float _2091 = (cbLight._m0[_2079].x * _2086) + 1.0;
    float _2092 = (cbLight._m0[_2079].y * _2086) + 1.0;
    float _2093 = (cbLight._m0[_2079].z * _2086) + 1.0;
    float _2094 = (cbLight._m0[_2079].w * _2086) + 1.0;
    uint _2095 = _2078 + 5u;
    float _2101 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
    uint _2105 = _2078 + 4u;
    float _2114 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
    uint _2118 = _2078 | 1u;
    float _2129 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_809, _810, _811));
    float _2132 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_809, _810, _811));
    float _4478 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _4489 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2137 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * 0.3183098733425140380859375;
    float _2139 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * 0.3183098733425140380859375;
    float _2146 = ((cbLight._m0[_2095].x * _2101) * _2139) + (((cbLight._m0[_2105].x * _2070) * _2114) * _2137);
    float _2147 = ((_2101 * cbLight._m0[_2095].y) * _2139) + (((cbLight._m0[_2105].y * _2071) * _2114) * _2137);
    float _2148 = ((_2101 * cbLight._m0[_2095].z) * _2139) + (((cbLight._m0[_2105].z * _2072) * _2114) * _2137);
    uvec4 _2152 = floatBitsToUint(cbLight._m0[_2078 + 12u]);
    bool _2154 = _2152.x == 0u;
    float _2165;
    float _2167;
    float _2169;
    if (_2154)
    {
        _2165 = _2146;
        _2167 = _2147;
        _2169 = _2148;
    }
    else
    {
        uint _2173 = _2078 + 6u;
        float _2189 = (dot(vec3(cbLight._m0[_2078 + 2u].xyz), vec3(_809, _810, _811)) * 0.5) + 0.5;
        float _2190 = _2189 * _2189;
        float _4500 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2191 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2192 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
        _2165 = (((cbLight._m0[_2173].x * 0.3183098733425140380859375) * _2191) * _2192) + _2146;
        _2167 = (((cbLight._m0[_2173].y * 0.3183098733425140380859375) * _2191) * _2192) + _2147;
        _2169 = (((cbLight._m0[_2173].z * 0.3183098733425140380859375) * _2191) * _2192) + _2148;
    }
    bool _2172 = _2152.y == 0u;
    float _2210;
    float _2212;
    float _2214;
    if (_2172)
    {
        _2210 = _2165;
        _2212 = _2167;
        _2214 = _2169;
    }
    else
    {
        uint _2383 = _2078 + 7u;
        float _2399 = (dot(vec3(cbLight._m0[_2078 + 3u].xyz), vec3(_809, _810, _811)) * 0.5) + 0.5;
        float _2400 = _2399 * _2399;
        float _4516 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2401 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2402 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
        _2210 = (((cbLight._m0[_2383].x * 0.3183098733425140380859375) * _2401) * _2402) + _2165;
        _2212 = (((cbLight._m0[_2383].y * 0.3183098733425140380859375) * _2401) * _2402) + _2167;
        _2214 = (((cbLight._m0[_2383].z * 0.3183098733425140380859375) * _2401) * _2402) + _2169;
    }
    uint _2217 = _2078 + 8u;
    float _2230 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2078].w)) * _813) * 0.949999988079071044921875);
    float _2231 = _2230 * _2230;
    float _2232 = cbLight._m0[_2078].x + _890;
    float _2233 = cbLight._m0[_2078].y + _891;
    float _2234 = cbLight._m0[_2078].z + _892;
    float _2238 = inversesqrt(dot(vec3(_2232, _2233, _2234), vec3(_2232, _2233, _2234)));
    float _2239 = _2238 * _2232;
    float _2240 = _2238 * _2233;
    float _2241 = _2238 * _2234;
    float _2242 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2078].xyz));
    float _4532 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2245 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _4543 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _2246 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _2247 = dot(vec3(_809, _810, _811), vec3(_2239, _2240, _2241));
    float _4554 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2250 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _2251 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_2239, _2240, _2241));
    float _4565 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2255 = _2231 * _2231;
    float _2259 = ((_2250 * _2250) * (_2255 + (-1.0))) + 1.0;
    float _2267 = exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0);
    float _2268 = 0.959999978542327880859375 - _970;
    float _2270 = 0.959999978542327880859375 - _971;
    float _2271 = 0.959999978542327880859375 - _972;
    float _2278 = 1.0 - _2231;
    float _2289 = (0.5 / (((_2246 * ((_2245 * _2278) + _2231)) + 9.9999999392252902907785028219223e-09) + (((_2246 * _2278) + _2231) * _2245))) * _2245;
    float _4576 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2291 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2255 / ((_2259 * _2259) * 3.141590118408203125));
    uint _2305 = _2078 + 9u;
    float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2118].w)) * _813) * 0.949999988079071044921875);
    float _2317 = _2316 * _2316;
    float _2318 = cbLight._m0[_2118].x + _890;
    float _2319 = cbLight._m0[_2118].y + _891;
    float _2320 = cbLight._m0[_2118].z + _892;
    float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
    float _2325 = _2324 * _2318;
    float _2326 = _2324 * _2319;
    float _2327 = _2324 * _2320;
    float _2328 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2118].xyz));
    float _4587 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
    float _2332 = dot(vec3(_809, _810, _811), vec3(_2325, _2326, _2327));
    float _4598 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _2336 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_2325, _2326, _2327));
    float _4609 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2340 = _2317 * _2317;
    float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
    float _2351 = exp2(log2(1.0 - (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) * 5.0);
    float _2358 = 1.0 - _2317;
    float _2368 = (0.5 / (((_2246 * ((_2331 * _2358) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_2246 * _2358) + _2317) * _2331))) * _2331;
    float _4620 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2370 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
    float _2380 = (((((_2351 * _2268) + _973) * cbLight._m0[_2305].x) * _2370) * _2101) + ((((cbLight._m0[_2217].x * _2070) * ((_2267 * _2268) + _973)) * _2291) * _2114);
    float _2381 = (((((_2351 * _2270) + _975) * cbLight._m0[_2305].y) * _2370) * _2101) + ((((cbLight._m0[_2217].y * _2071) * ((_2267 * _2270) + _975)) * _2291) * _2114);
    float _2382 = (((((_2351 * _2271) + _976) * cbLight._m0[_2305].z) * _2370) * _2101) + ((((cbLight._m0[_2217].z * _2072) * ((_2267 * _2271) + _976)) * _2291) * _2114);
    float _2444;
    float _2446;
    float _2448;
    if (_2154)
    {
        _2444 = _2380;
        _2446 = _2381;
        _2448 = _2382;
    }
    else
    {
        uint _2450 = _2078 + 2u;
        uint _2454 = _2078 + 10u;
        float _2468 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2450].w)) * _813) * 0.949999988079071044921875);
        float _2469 = _2468 * _2468;
        float _2470 = cbLight._m0[_2450].x + _890;
        float _2471 = cbLight._m0[_2450].y + _891;
        float _2472 = cbLight._m0[_2450].z + _892;
        float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
        float _2477 = _2476 * _2470;
        float _2478 = _2476 * _2471;
        float _2479 = _2476 * _2472;
        float _2480 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2450].xyz));
        float _4631 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2484 = dot(vec3(_809, _810, _811), vec3(_2477, _2478, _2479));
        float _4642 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2487 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2488 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_2477, _2478, _2479));
        float _4653 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2492 = _2469 * _2469;
        float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
        float _2503 = exp2(log2(1.0 - (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) * 5.0);
        float _2510 = 1.0 - _2469;
        float _2520 = (0.5 / (((_2246 * ((_2483 * _2510) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2246 * _2510) + _2469) * _2483))) * _2483;
        float _4664 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2522 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
        float _2523 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
        _2444 = (((((_2503 * _2268) + _973) * cbLight._m0[_2454].x) * _2522) * _2523) + _2380;
        _2446 = (((((_2503 * _2270) + _975) * cbLight._m0[_2454].y) * _2522) * _2523) + _2381;
        _2448 = (((((_2503 * _2271) + _976) * cbLight._m0[_2454].z) * _2522) * _2523) + _2382;
    }
    float _2558;
    float _2560;
    float _2562;
    if (_2172)
    {
        _2558 = _2444;
        _2560 = _2446;
        _2562 = _2448;
    }
    else
    {
        uint _2569 = _2078 + 3u;
        uint _2573 = _2078 + 11u;
        float _2587 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2569].w)) * _813) * 0.949999988079071044921875);
        float _2588 = _2587 * _2587;
        float _2589 = cbLight._m0[_2569].x + _890;
        float _2590 = cbLight._m0[_2569].y + _891;
        float _2591 = cbLight._m0[_2569].z + _892;
        float _2595 = inversesqrt(dot(vec3(_2589, _2590, _2591), vec3(_2589, _2590, _2591)));
        float _2596 = _2595 * _2589;
        float _2597 = _2595 * _2590;
        float _2598 = _2595 * _2591;
        float _2599 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2569].xyz));
        float _4680 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2602 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2603 = dot(vec3(_809, _810, _811), vec3(_2596, _2597, _2598));
        float _4691 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2607 = dot(vec3(cbLight._m0[_2569].xyz), vec3(_2596, _2597, _2598));
        float _4702 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2611 = _2588 * _2588;
        float _2615 = ((_2606 * _2606) * (_2611 + (-1.0))) + 1.0;
        float _2622 = exp2(log2(1.0 - (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) * 5.0);
        float _2629 = 1.0 - _2588;
        float _2639 = (0.5 / (((_2246 * ((_2602 * _2629) + _2588)) + 9.9999999392252902907785028219223e-09) + (((_2246 * _2629) + _2588) * _2602))) * _2602;
        float _4713 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2641 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2611 / ((_2615 * _2615) * 3.141590118408203125));
        float _2642 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
        _2558 = (((((_2622 * _2268) + _973) * cbLight._m0[_2573].x) * _2641) * _2642) + _2444;
        _2560 = (((((_2622 * _2270) + _975) * cbLight._m0[_2573].y) * _2641) * _2642) + _2446;
        _2562 = (((((_2622 * _2271) + _976) * cbLight._m0[_2573].z) * _2641) * _2642) + _2448;
    }
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    if (_2076.y == 0u)
    {
        float _2717 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2718 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2717;
        float _2719 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2717;
        float _2720 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2717;
        uvec4 _2732 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2733 = _2732.x;
        uint _2744 = uint((float(_2732.y) * floor(float(uint(cbSceneParam._m0[85u].y * _911) / _2733))) + floor(float(uint(cbSceneParam._m0[85u].x * _910) / _2733)));
        float _2754 = (log2(_2720 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2755 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        uint _2758 = uint(isnan(14.0) ? _2755 : (isnan(_2755) ? 14.0 : min(_2755, 14.0)));
        uvec4 _2763 = texelFetch(g_lightClusterGridBuffer, int(((_2758 << 2u) + (_2744 << 6u)) >> 2u));
        uint _2764 = _2763.x;
        uint _2765 = _2732.z;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        if (((((1u << ((_2765 >> 4u) & 15u)) + 4294967295u) & _2764) == 0u) || ((_2765 & 240u) == 0u))
        {
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
            _2891 = 0.0;
            _2893 = 0.0;
            _2895 = 0.0;
        }
        else
        {
            float _2886;
            float _2888;
            float _2890;
            float _2892;
            float _2894;
            float _2896;
            float _3037 = 0.0;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            float _3042 = 0.0;
            uint _3043 = 0u;
            uint _3052;
            bool _3053;
            for (;;)
            {
                _3052 = texelFetch(g_lightClassification, int((((_2758 << 5u) + (_2744 << 9u)) + (_3043 << 2u)) >> 2u)).x;
                _3053 = _3052 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3053)
                {
                    frontier_phi_68_pred = _3039;
                    frontier_phi_68_pred_1 = _3042;
                    frontier_phi_68_pred_2 = _3041;
                    frontier_phi_68_pred_3 = _3040;
                    frontier_phi_68_pred_4 = _3038;
                    frontier_phi_68_pred_5 = _3037;
                }
                else
                {
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    uint _3188;
                    _3182 = _3037;
                    _3183 = _3038;
                    _3184 = _3039;
                    _3185 = _3040;
                    _3186 = _3041;
                    _3187 = _3042;
                    _3188 = _3052;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    for (;;)
                    {
                        uint _3192 = uint(findLSB(_3188)) + (_3043 << 5u);
                        uint _3189 = (_3188 + 4294967295u) & _3188;
                        uint _3194 = _3192 * 48u;
                        vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3194)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 3u)).x));
                        uint _3214 = (_3192 * 48u) + 4u;
                        vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3214)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 3u)).x));
                        uint _3233 = (_3192 * 48u) + 8u;
                        vec3 _3244 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3233)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 2u)).x));
                        float _3248 = _3208.x - _2718;
                        float _3249 = _3208.y - _2719;
                        float _3250 = _3208.z - _2720;
                        float _3251 = dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250));
                        float _3254 = inversesqrt(_3251);
                        float _3255 = _3254 * _3248;
                        float _3256 = _3254 * _3249;
                        float _3257 = _3254 * _3250;
                        float _3258 = dot(vec3(_929, _932, _935), vec3(_3255, _3256, _3257));
                        float _3263 = 1.0 - (_3251 * _3208.w);
                        float _4739 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3264 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                        float _3265 = sqrt(_3251) * _3227.w;
                        float _3267 = 1.39999997615814208984375 / (_3265 + 1.39999997615814208984375);
                        float _3268 = _3267 * _3267;
                        float _3271 = ((1.0 - _3268) * _3258) + _3268;
                        float _3274 = _3265 * _3265;
                        float _3278 = ((isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0))) * _3264) / ((_3274 * 0.699999988079071044921875) + 1.0);
                        float _3282 = (-0.0) - _2718;
                        float _3283 = (-0.0) - _2719;
                        float _3284 = (-0.0) - _2720;
                        float _3288 = inversesqrt(dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284)));
                        float _3289 = _3288 * _3282;
                        float _3290 = _3288 * _3283;
                        float _3291 = _3288 * _3284;
                        float _3299 = exp2(log2(1.0 / ((_3274 * 3.5) + 5.0)) * 0.25);
                        float _3300 = 1.0 - _1004;
                        float _3307 = sqrt(1.0 - ((1.0 - (_3300 * _3300)) * (1.0 - (_3299 * _3299))));
                        float _3308 = _3307 * _3307;
                        float _3309 = _3308 * _3308;
                        float _3310 = _3289 + _3255;
                        float _3311 = _3290 + _3256;
                        float _3312 = _3291 + _3257;
                        float _3316 = inversesqrt(dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312)));
                        float _3320 = dot(vec3(_929, _932, _935), vec3(_3289, _3290, _3291));
                        float _4755 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3323 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                        float _3324 = dot(vec3(_929, _932, _935), vec3(_3316 * _3310, _3316 * _3311, _3316 * _3312));
                        float _4766 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                        float _3327 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                        float _3331 = ((_3327 * _3327) * (_3309 + (-1.0))) + 1.0;
                        float _3332 = _3267 * _3308;
                        float _3333 = _3332 * _3332;
                        float _3336 = ((1.0 - _3333) * _3258) + _3333;
                        float _4777 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                        float _3337 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3338 = 1.0 - _3308;
                        float _3348 = (0.5 / (((_3337 * ((_3323 * _3338) + _3308)) + 9.9999999392252902907785028219223e-09) + (((_3337 * _3338) + _3308) * _3323))) * _3337;
                        float _4788 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3359 = (((_3309 * 3.1415927410125732421875) * (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) / ((_3331 * _3331) * ((_3274 * 2.1991131305694580078125) + 3.141590118408203125))) * _3264;
                        _3112 = (_3278 * _3227.x) + _3185;
                        _3113 = (_3278 * _3227.y) + _3186;
                        _3114 = (_3278 * _3227.z) + _3187;
                        _3109 = (_3359 * _3244.x) + _3182;
                        _3110 = (_3359 * _3244.y) + _3183;
                        _3111 = (_3359 * _3244.z) + _3184;
                        if (_3189 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3182 = _3109;
                            _3183 = _3110;
                            _3184 = _3111;
                            _3185 = _3112;
                            _3186 = _3113;
                            _3187 = _3114;
                            _3188 = _3189;
                        }
                    }
                    frontier_phi_68_pred = _3111;
                    frontier_phi_68_pred_1 = _3114;
                    frontier_phi_68_pred_2 = _3113;
                    frontier_phi_68_pred_3 = _3112;
                    frontier_phi_68_pred_4 = _3110;
                    frontier_phi_68_pred_5 = _3109;
                }
                _2890 = frontier_phi_68_pred;
                _2896 = frontier_phi_68_pred_1;
                _2894 = frontier_phi_68_pred_2;
                _2892 = frontier_phi_68_pred_3;
                _2888 = frontier_phi_68_pred_4;
                _2886 = frontier_phi_68_pred_5;
                uint _3044 = _3043 + 1u;
                if (_3044 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3037 = _2886;
                    _3038 = _2888;
                    _3039 = _2890;
                    _3040 = _2892;
                    _3041 = _2894;
                    _3042 = _2896;
                    _3043 = _3044;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
            _2891 = _2892;
            _2893 = _2894;
            _2895 = _2896;
        }
        uvec4 _2899 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2900 = _2899.z;
        uint _2902 = (_2900 >> 8u) & 15u;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        if (((4294967295u << _2902) & _2764) == 0u)
        {
            _3005 = _2885;
            _3007 = _2887;
            _3009 = _2889;
            _3011 = _2891;
            _3013 = _2893;
            _3015 = _2895;
        }
        else
        {
            float _3030 = inversesqrt(dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720)));
            float _3031 = _3030 * _2718;
            float _3032 = _3030 * _2719;
            float _3033 = _3030 * _2720;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2902 < ((_2900 >> 12u) & 15u))
            {
                float _3006;
                float _3008;
                float _3010;
                float _3012;
                float _3014;
                float _3016;
                float _3165 = _2885;
                float _3166 = _2887;
                float _3167 = _2889;
                float _3168 = _2891;
                float _3169 = _2893;
                float _3170 = _2895;
                uint _3171 = _2902;
                uint _3180;
                bool _3181;
                for (;;)
                {
                    _3180 = texelFetch(g_lightClassification, int((((_2758 << 5u) + (_2744 << 9u)) + (_3171 << 2u)) >> 2u)).x;
                    _3181 = _3180 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3181)
                    {
                        frontier_phi_79_pred = _3170;
                        frontier_phi_79_pred_1 = _3169;
                        frontier_phi_79_pred_2 = _3168;
                        frontier_phi_79_pred_3 = _3167;
                        frontier_phi_79_pred_4 = _3166;
                        frontier_phi_79_pred_5 = _3165;
                    }
                    else
                    {
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3386 = _3165;
                        float _3387 = _3166;
                        float _3388 = _3167;
                        float _3389 = _3168;
                        float _3390 = _3169;
                        float _3391 = _3170;
                        uint _3392 = _3180;
                        uint _3393;
                        vec4 _3418;
                        float _3419;
                        vec4 _3434;
                        vec3 _3446;
                        vec4 _3461;
                        vec4 _3476;
                        float _3523;
                        bool _3524;
                        for (;;)
                        {
                            uint _3403 = ((_3171 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3392));
                            _3393 = (_3392 + 4294967295u) & _3392;
                            uint _3405 = _3403 * 40u;
                            _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            _3419 = _3418.w;
                            uint _3421 = (_3403 * 40u) + 4u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3436 = (_3403 * 40u) + 8u;
                            _3446 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x));
                            uint _3448 = (_3403 * 40u) + 16u;
                            _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            uint _3463 = (_3403 * 40u) + 20u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3479 = (_3403 * 40u) + 24u;
                            vec4 _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3498 = (_3403 * 40u) + 28u;
                            vec4 _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            _3523 = fma(_2720, _3511.z, fma(_2719, _3511.y, _3511.x * _2718)) + _3511.w;
                            _3524 = !((fma(_2720, _3492.z, fma(_2719, _3492.y, _3492.x * _2718)) + _3492.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3524)
                            {
                                float _3551 = _3418.x - _2718;
                                float _3552 = _3418.y - _2719;
                                float _3553 = _3418.z - _2720;
                                float _3554 = dot(vec3(_3551, _3552, _3553), vec3(_3551, _3552, _3553));
                                float _3557 = inversesqrt(_3554);
                                float _3558 = _3557 * _3551;
                                float _3559 = _3557 * _3552;
                                float _3560 = _3557 * _3553;
                                float _3564 = 1.0 - (_3554 / (_3419 * _3419));
                                float _4799 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3565 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3569 = sqrt(_3554) * _3434.w;
                                float _3571 = 1.39999997615814208984375 / (_3569 + 1.39999997615814208984375);
                                float _3572 = _3571 * _3571;
                                float _3575 = ((1.0 - _3572) * dot(vec3(_3558, _3559, _3560), vec3(_929, _932, _935))) + _3572;
                                float _3578 = _3569 * _3569;
                                float _3582 = (fma(_2720, _3461.z, fma(_2719, _3461.y, _3461.x * _2718)) + _3461.w) / _3523;
                                float _3583 = (fma(_2720, _3476.z, fma(_2719, _3476.y, _3476.x * _2718)) + _3476.w) / _3523;
                                float _3587 = 1.0 - dot(vec2(_3582, _3583), vec2(_3582, _3583));
                                float _4815 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3588 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                                float _3589 = _3588 * (((isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0))) * _3565) / ((_3578 * 0.699999988079071044921875) + 1.0));
                                float _3601 = exp2(log2(1.0 / ((_3578 * 3.5) + 5.0)) * 0.25);
                                float _3602 = 1.0 - _1004;
                                float _3609 = sqrt(1.0 - ((1.0 - (_3602 * _3602)) * (1.0 - (_3601 * _3601))));
                                float _3610 = _3609 * _3609;
                                float _3611 = _3610 * _3610;
                                float _3612 = _3558 - _3031;
                                float _3613 = _3559 - _3032;
                                float _3614 = _3560 - _3033;
                                float _3618 = inversesqrt(dot(vec3(_3612, _3613, _3614), vec3(_3612, _3613, _3614)));
                                float _3622 = dot(vec3(_929, _932, _935), vec3((-0.0) - _3031, (-0.0) - _3032, (-0.0) - _3033));
                                float _4826 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3625 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3626 = dot(vec3(_929, _932, _935), vec3(_3618 * _3612, _3618 * _3613, _3618 * _3614));
                                float _4837 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3629 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3633 = ((_3629 * _3629) * (_3611 + (-1.0))) + 1.0;
                                float _3634 = _3571 * _3610;
                                float _3635 = _3634 * _3634;
                                float _3641 = ((1.0 - _3635) * dot(vec3(_929, _932, _935), vec3(_3558, _3559, _3560))) + _3635;
                                float _4848 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3642 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3643 = 1.0 - _3610;
                                float _3653 = (0.5 / (((_3642 * ((_3625 * _3643) + _3610)) + 9.9999999392252902907785028219223e-09) + (((_3642 * _3643) + _3610) * _3625))) * _3642;
                                float _4859 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3663 = (_3588 * _3565) * (((_3611 * 3.1415927410125732421875) * (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0)))) / ((_3633 * _3633) * ((_3578 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3589 * _3434.z;
                                frontier_phi_85_pred_1 = _3589 * _3434.y;
                                frontier_phi_85_pred_2 = _3589 * _3434.x;
                                frontier_phi_85_pred_3 = _3663 * _3446.z;
                                frontier_phi_85_pred_4 = _3663 * _3446.y;
                                frontier_phi_85_pred_5 = _3663 * _3446.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3672 = frontier_phi_85_pred;
                            _3671 = frontier_phi_85_pred_1;
                            _3670 = frontier_phi_85_pred_2;
                            _3669 = frontier_phi_85_pred_3;
                            _3668 = frontier_phi_85_pred_4;
                            _3667 = frontier_phi_85_pred_5;
                            _3376 = _3670 + _3389;
                            _3377 = _3671 + _3390;
                            _3378 = _3672 + _3391;
                            _3373 = _3667 + _3386;
                            _3374 = _3668 + _3387;
                            _3375 = _3669 + _3388;
                            if (_3393 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3378;
                                _3392 = _3393;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3378;
                        frontier_phi_79_pred_1 = _3377;
                        frontier_phi_79_pred_2 = _3376;
                        frontier_phi_79_pred_3 = _3375;
                        frontier_phi_79_pred_4 = _3374;
                        frontier_phi_79_pred_5 = _3373;
                    }
                    _3016 = frontier_phi_79_pred;
                    _3014 = frontier_phi_79_pred_1;
                    _3012 = frontier_phi_79_pred_2;
                    _3010 = frontier_phi_79_pred_3;
                    _3008 = frontier_phi_79_pred_4;
                    _3006 = frontier_phi_79_pred_5;
                    uint _3172 = _3171 + 1u;
                    if (_3172 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3165 = _3006;
                        _3166 = _3008;
                        _3167 = _3010;
                        _3168 = _3012;
                        _3169 = _3014;
                        _3170 = _3016;
                        _3171 = _3172;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3012;
                frontier_phi_60_61_ladder_1 = _3016;
                frontier_phi_60_61_ladder_2 = _3014;
                frontier_phi_60_61_ladder_3 = _3010;
                frontier_phi_60_61_ladder_4 = _3008;
                frontier_phi_60_61_ladder_5 = _3006;
            }
            else
            {
                frontier_phi_60_61_ladder = _2891;
                frontier_phi_60_61_ladder_1 = _2895;
                frontier_phi_60_61_ladder_2 = _2893;
                frontier_phi_60_61_ladder_3 = _2889;
                frontier_phi_60_61_ladder_4 = _2887;
                frontier_phi_60_61_ladder_5 = _2885;
            }
            _3005 = frontier_phi_60_61_ladder_5;
            _3007 = frontier_phi_60_61_ladder_4;
            _3009 = frontier_phi_60_61_ladder_3;
            _3011 = frontier_phi_60_61_ladder;
            _3013 = frontier_phi_60_61_ladder_2;
            _3015 = frontier_phi_60_61_ladder_1;
        }
        float _3020 = isnan(1.0) ? _988 : (isnan(_988) ? 1.0 : min(_988, 1.0));
        _2776 = (_3020 * _3011) + _2210;
        _2778 = (_3020 * _3013) + _2212;
        _2780 = (_3020 * _3015) + _2214;
        _2782 = ((_3005 * _973) * _3020) + _2558;
        _2784 = ((_3007 * _975) * _3020) + _2560;
        _2786 = ((_3009 * _976) * _3020) + _2562;
    }
    else
    {
        _2776 = _2210;
        _2778 = _2212;
        _2780 = _2214;
        _2782 = _2558;
        _2784 = _2560;
        _2786 = _2562;
    }
    uint _2792 = _949 + uint(cbMatDynParam._m0[0u].w);
    float _4875 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _4886 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _4897 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _4908 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _2818 = (((isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * (_2776 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _988))) + ((_2782 + ((isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0))) * _1829)) * cbPerFrame._m0[3u].x)) + (((((_606 * _601.x) + cbMtdParam._m0[20u].y) * TEXCOORD_7.x) * cbMtdParam._m0[17u].x) * cbInstanceData._m0[_2792].x);
    float _2820 = (((((cbMtdParam._m0[20u].z + (_606 * _601.y)) * TEXCOORD_7.y) * cbMtdParam._m0[17u].x) * cbInstanceData._m0[_2792].y) + ((_2784 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1829)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (_2778 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _988)));
    float _2822 = (((((cbMtdParam._m0[20u].w + (_606 * _601.z)) * TEXCOORD_7.z) * cbMtdParam._m0[17u].x) * cbInstanceData._m0[_2792].z) + ((_2786 + ((isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0))) * _1829)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2780 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _988)));
    float _2823 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
    float _2824 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
    float _2825 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
    float _2830 = cbInstanceData._m0[_948 + 6u].w * (isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0)));
    float _2835 = _910 / cbSceneParam._m0[86u].x;
    float _2836 = _911 / cbSceneParam._m0[86u].y;
    vec4 _2850 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2835, _2836, (log2((isnan(cbSceneParam._m0[77u].w) ? _833 : (isnan(_833) ? cbSceneParam._m0[77u].w : min(_833, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2852 = _2850.x;
    float _2853 = _2850.y;
    float _2854 = _2850.z;
    float _2855 = _2850.w;
    float _2947;
    float _2949;
    float _2951;
    float _2953;
    if (_833 > cbSceneParam._m0[78u].w)
    {
        float _2910 = isnan(_833) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _833 : min(cbSceneParam._m0[80u].w, _833));
        float _2911 = _2910 / _833;
        float _2922 = _2911 * _883;
        float _2923 = _884 * _2911;
        float _2924 = (-0.0) - _2923;
        float _2925 = _2911 * _885;
        float _2927 = (cbSceneParam._m0[77u].w * _2924) / _2910;
        float _2928 = _2927 + cbSceneParam._m0[79u].w;
        float _2929 = cbSceneParam._m0[79u].w - _2923;
        float _2935 = sqrt(((_2922 * _2922) + (_2923 * _2923)) + (_2925 * _2925));
        float _2938 = (1.0 - (cbSceneParam._m0[77u].w / _2910)) * _2935;
        float _2943 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2945 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3122;
        if (abs((_2924 - _2927) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3122 = ((((_2928 > 0.0) ? exp2(_2943 * _2928) : (2.0 - exp2(_2945 * _2928))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2938;
        }
        else
        {
            float _3066 = 1.0 / cbSceneParam._m0[80u].x;
            float _3067 = isnan(_2929) ? _2928 : (isnan(_2928) ? _2929 : max(_2928, _2929));
            float _3068 = isnan(_2929) ? _2928 : (isnan(_2928) ? _2929 : min(_2928, _2929));
            float _3077 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : min(_3067, 0.0));
            float _3078 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : min(_3068, 0.0));
            _3122 = ((abs(_2935 / _2924) * cbSceneParam._m0[80u].y) * ((((_3077 - _3078) * 2.0) - ((exp2(_2943 * (isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0)))) - exp2(_2943 * (isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0))))) * _3066)) - ((exp2(_2945 * _3077) - exp2(_2945 * _3078)) * _3066))) + (_2938 * cbSceneParam._m0[80u].z);
        }
        vec4 _3124 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2835, _2836, 1.0), 0.0);
        float _3133 = exp2((_3122 * (-1.44269502162933349609375)) * (1.0 - _3124.w));
        float _3134 = log2(_3133);
        float _3150 = log2(_2855);
        _2947 = (exp2(_3150 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3134 * cbSceneParam._m0[78u].x)) * _3124.x) / cbSceneParam._m0[78u].x)) + _2852;
        _2949 = (exp2(_3150 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3134 * cbSceneParam._m0[78u].y)) * _3124.y) / cbSceneParam._m0[78u].y)) + _2853;
        _2951 = (exp2(_3150 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3134 * cbSceneParam._m0[78u].z)) * _3124.z) / cbSceneParam._m0[78u].z)) + _2854;
        _2953 = _3133 * _2855;
    }
    else
    {
        _2947 = _2852;
        _2949 = _2853;
        _2951 = _2854;
        _2953 = _2855;
    }
    bool _3160;
    vec4 _2963;
    vec4 _2985;
    float _2987;
    float _2991;
    float _2992;
    float _2993;
    float _2994;
    bool _3004;
    for (;;)
    {
        _2963 = cbMatDynParam._m0[0u];
        float _2965 = roundEven(_2963.y);
        bool _2966 = _2965 == 3.0;
        float _2967 = log2(_2953);
        float _2974 = exp2(_2967 * cbSceneParam._m0[78u].x) * _2823;
        float _2975 = exp2(_2967 * cbSceneParam._m0[78u].y) * _2824;
        float _2976 = exp2(_2967 * cbSceneParam._m0[78u].z) * _2825;
        float _2983 = _899 + (-0.5);
        _2985 = cbMtdParam._m0[1u];
        _2987 = _2985.y * _2983;
        float _2990 = (_2965 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2991 = _2990 * (_2966 ? _2974 : (_2974 + (cbSceneParam._m0[72u].w * _2947)));
        _2992 = _2990 * (_2966 ? _2975 : (_2975 + (cbSceneParam._m0[72u].w * _2949)));
        _2993 = _2990 * (_2966 ? _2976 : (_2976 + (cbSceneParam._m0[72u].w * _2951)));
        _2994 = _2983 * 0.999000012874603271484375;
        _3004 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3004)
        {
            if ((cbInstanceData._m0[_948 + 7u].x + _2994) < 0.5)
            {
                _3160 = true;
                break;
            }
        }
        uint _3101 = _949 + uint(_2963.w);
        if ((cbInstanceData._m0[_3101].w < 1.0) && ((cbInstanceData._m0[_3101].w + _2994) < 0.5))
        {
            _3160 = true;
            break;
        }
        if ((_2987 + _489) < _2985.x)
        {
            _3160 = true;
            break;
        }
        _3160 = false;
        break;
    }
    float _3364;
    if (_3160)
    {
        discard_state = true;
        _3364 = 0.0;
    }
    else
    {
        _3364 = _2830;
    }
    SV_Target.x = _2991;
    SV_Target.y = _2992;
    SV_Target.z = _2993;
    SV_Target.w = _3364;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2830;
    discard_exit();
}


