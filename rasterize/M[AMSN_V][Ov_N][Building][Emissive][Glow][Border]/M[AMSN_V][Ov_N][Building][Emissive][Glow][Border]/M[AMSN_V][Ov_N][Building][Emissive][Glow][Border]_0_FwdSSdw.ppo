#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[21];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 6, component = 1) in float TEXCOORD_6;
layout(location = 7) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1276;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _217 = _216 * _208;
    float _218 = _216 * _209;
    float _219 = _216 * _210;
    float _229 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _230 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _231 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _235 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _236 = _235 * _229;
    float _237 = _235 * _230;
    float _238 = _235 * _231;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    float _256 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _257 = _256 * TANGENT_2.x;
    float _258 = _256 * TANGENT_2.y;
    float _259 = _256 * TANGENT_2.z;
    float _264;
    float _265;
    float _266;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _264 = (-0.0) - _243;
        _265 = (-0.0) - _244;
        _266 = (-0.0) - _245;
    }
    else
    {
        _264 = _243;
        _265 = _244;
        _266 = _245;
    }
    vec4 _305 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _317 = 1.0 - ((1.0 - _305.x) * 1.39999997615814208984375);
    float _3633 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _318 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _325 = (_318 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x)) + cbMtdParam._m0[15u].x;
    float _326 = (_318 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y)) + cbMtdParam._m0[15u].y;
    float _327 = (_318 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z)) + cbMtdParam._m0[15u].z;
    float _329 = 1.0 - ((1.0 - _305.y) * 1.39999997615814208984375);
    float _3644 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _330 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _337 = (_330 * (cbMtdParam._m0[13u].x - _325)) + _325;
    float _338 = (_330 * (cbMtdParam._m0[13u].y - _326)) + _326;
    float _339 = (_330 * (cbMtdParam._m0[13u].z - _327)) + _327;
    float _341 = 1.0 - ((1.0 - _305.z) * 1.39999997615814208984375);
    float _3655 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _342 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _371 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[19u].z;
    float _385 = ((cbMtdParam._m0[18u].y * (-1.39999997615814208984375)) * ((TEXCOORD_6 - _371) + (cbMtdParam._m0[17u].w * TEXCOORD_6))) + 1.0;
    float _3666 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _387 = 1.0 - (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)));
    float _388 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _389 = isnan(1.0) ? _388 : (isnan(_388) ? 1.0 : min(_388, 1.0));
    float _397 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5 - _371) + (cbMtdParam._m0[17u].z * TEXCOORD_5))) + 1.0;
    float _3687 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _399 = 1.0 - (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)));
    float _400 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _401 = isnan(1.0) ? _400 : (isnan(_400) ? 1.0 : min(_400, 1.0));
    vec4 _419 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _421 = _419.x;
    float _422 = _419.y;
    float _423 = _419.z;
    float _424 = cbMtdParam._m0[12u].x * _401;
    float _426 = cbMtdParam._m0[12u].y * _401;
    float _428 = cbMtdParam._m0[12u].z * _401;
    float _448 = _399 + _387;
    float _449 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _450 = isnan(1.0) ? _449 : (isnan(_449) ? 1.0 : min(_449, 1.0));
    vec4 _468 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _473 = _468.w;
    float _474 = _468.x * cbMtdParam._m0[10u].x;
    float _475 = _468.y * cbMtdParam._m0[10u].y;
    float _476 = _468.z * cbMtdParam._m0[10u].z;
    float _496 = ((_474 - (_450 * _474)) + ((((((_421 * (cbMtdParam._m0[11u].x - _424)) * _389) + (_424 * _421)) * 4.55000019073486328125) * _450) * _474)) * ((_342 * (cbMtdParam._m0[14u].x - _337)) + _337);
    float _497 = ((((((((_422 * (cbMtdParam._m0[11u].y - _426)) * _389) + (_426 * _422)) * 4.55000019073486328125) * _450) * _475) + _475) - (_450 * _475)) * ((_342 * (cbMtdParam._m0[14u].y - _338)) + _338);
    float _498 = ((((((((_423 * (cbMtdParam._m0[11u].z - _428)) * _389) + (_428 * _423)) * 4.55000019073486328125) * _450) * _476) + _476) - (_450 * _476)) * ((_342 * (cbMtdParam._m0[14u].z - _339)) + _339);
    vec4 _515 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _519 = _515.z;
    float _523 = (_515.x * 2.0) + (-1.0);
    float _525 = (_515.y * 2.0) + (-1.0);
    float _526 = dot(vec2(_523, _525), vec2(_523, _525));
    float _3718 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _531 = sqrt(1.0 - (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))));
    float _534 = fma(_531, _264, fma(_525, _257, _523 * _236));
    float _537 = fma(_531, _265, fma(_525, _258, _523 * _237));
    float _540 = fma(_531, _266, fma(_525, _259, _523 * _238));
    float _544 = inversesqrt(dot(vec3(_534, _537, _540), vec3(_534, _537, _540)));
    float _545 = _544 * _534;
    float _546 = _544 * _537;
    float _547 = _544 * _540;
    vec4 _559 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _565 = (_559.x * 2.0) + (-1.0);
    float _566 = (_559.y * 2.0) + (-1.0);
    float _567 = dot(vec2(_565, _566), vec2(_565, _566));
    float _3729 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _572 = sqrt(1.0 - (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))));
    float _575 = fma(_572, _264, fma(_566, _257, _565 * _236));
    float _578 = fma(_572, _265, fma(_566, _258, _565 * _237));
    float _581 = fma(_572, _266, fma(_566, _259, _565 * _238));
    float _585 = inversesqrt(dot(vec3(_575, _578, _581), vec3(_575, _578, _581)));
    float _586 = _585 * _575;
    float _587 = _585 * _578;
    float _588 = _585 * _581;
    float _591 = fma(_588, _219, fma(_587, _218, _586 * _217));
    float _594 = fma(_588, _252, fma(_587, _251, _586 * _250));
    float _597 = fma(_588, _266, fma(_587, _265, _586 * _264));
    float _601 = inversesqrt(dot(vec3(_591, _594, _597), vec3(_591, _594, _597)));
    float _605 = fma(_547, _219, fma(_546, _218, _545 * _217));
    float _608 = fma(_547, _252, fma(_546, _251, _545 * _250));
    float _611 = fma(_547, _266, fma(_546, _265, _545 * _264));
    float _615 = inversesqrt(dot(vec3(_605, _608, _611), vec3(_605, _608, _611)));
    vec4 _631 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _637 = (_631.x * 2.0) + (-1.0);
    float _638 = (_631.y * 2.0) + (-1.0);
    float _639 = dot(vec2(_637, _638), vec2(_637, _638));
    float _3740 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _644 = sqrt(1.0 - (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))));
    vec4 _659 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _665 = (_659.x * 2.0) + (-1.0);
    float _666 = (_659.y * 2.0) + (-1.0);
    float _667 = dot(vec2(_665, _666), vec2(_665, _666));
    float _3751 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _672 = sqrt(1.0 - (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))));
    float _675 = fma(_672, _264, fma(_666, _257, _665 * _236));
    float _678 = fma(_672, _265, fma(_666, _258, _665 * _237));
    float _681 = fma(_672, _266, fma(_666, _259, _665 * _238));
    float _685 = inversesqrt(dot(vec3(_675, _678, _681), vec3(_675, _678, _681)));
    float _686 = _685 * _675;
    float _687 = _685 * _678;
    float _688 = _685 * _681;
    float _691 = fma(_688, _219, fma(_687, _218, _686 * _217));
    float _694 = fma(_688, _252, fma(_687, _251, _686 * _250));
    float _697 = fma(_688, _266, fma(_687, _265, _686 * _264));
    float _701 = inversesqrt(dot(vec3(_691, _694, _697), vec3(_691, _694, _697)));
    float _717 = ((((_615 * _605) * cbMtdParam._m0[19u].x) + (((_591 * _389) * _601) * cbMtdParam._m0[18u].z)) + _637) + (((_691 * _401) * _701) * cbMtdParam._m0[18u].w);
    float _720 = ((((_615 * _608) * cbMtdParam._m0[19u].x) + (((_594 * _389) * _601) * cbMtdParam._m0[18u].z)) + _638) + (((_694 * _401) * _701) * cbMtdParam._m0[18u].w);
    float _723 = fma(_644, _264, fma(_720, _250, _717 * _217));
    float _726 = fma(_644, _265, fma(_720, _251, _717 * _218));
    float _729 = fma(_644, _266, fma(_720, _252, _717 * _219));
    float _733 = inversesqrt(dot(vec3(_723, _726, _729), vec3(_723, _726, _729)));
    float _734 = _733 * _723;
    float _735 = _733 * _726;
    float _736 = _733 * _729;
    float _3762 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _737 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _3773 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _738 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _3784 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _3795 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _3806 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _3817 = isnan(0.0) ? cbMtdParam._m0[20u].x : (isnan(cbMtdParam._m0[20u].x) ? 0.0 : max(cbMtdParam._m0[20u].x, 0.0));
    float _742 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _758 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _808 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _798);
    float _809 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _798);
    float _810 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _798);
    float _814 = inversesqrt(dot(vec3(_808, _809, _810), vec3(_808, _809, _810)));
    float _815 = _808 * _814;
    float _816 = _809 * _814;
    float _817 = _810 * _814;
    float _823 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _824 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _842 = fma(_736, cbSceneParam._m0[5u].z, fma(_735, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _734));
    float _845 = fma(_736, cbSceneParam._m0[6u].z, fma(_735, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _734));
    float _848 = fma(_736, cbSceneParam._m0[7u].z, fma(_735, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _734));
    uint _861 = uint(roundEven(NORMAL.w)) * 13u;
    uint _863 = (_861 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _869 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * cbInstanceData._m0[_863].x;
    float _870 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0)))) * cbInstanceData._m0[_863].y;
    float _871 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0)))) * cbInstanceData._m0[_863].z;
    float _3828 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _3839 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _873 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _3850 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _874 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _875 = 1.0 - _742;
    float _876 = _872 * _875;
    float _877 = _873 * _875;
    float _878 = _874 * _875;
    float _883 = (_872 + (-0.039999999105930328369140625)) * _742;
    float _884 = (_873 + (-0.039999999105930328369140625)) * _742;
    float _885 = (_874 + (-0.039999999105930328369140625)) * _742;
    float _886 = _883 + 0.039999999105930328369140625;
    float _888 = _884 + 0.039999999105930328369140625;
    float _889 = _885 + 0.039999999105930328369140625;
    vec4 _898 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _823, cbSceneParam._m0[86u].y * _824));
    float _901 = _898.x * TEXCOORD_7.w;
    float _902 = dot(vec3(_734, _735, _736), vec3(_815, _816, _817));
    float _905 = _902 * 2.0;
    float _909 = (_905 * _734) - _815;
    float _910 = (_905 * _735) - _816;
    float _911 = (_905 * _736) - _817;
    float _915 = abs(dot(vec3(_815, _816, _817), vec3(_734, _735, _736)));
    float _3861 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _917 = sqrt(_738);
    float _930 = exp2((_917 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_917 * 3.0));
    float _936 = (1.0 - _930) * ((_917 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _937 = _930 * _917;
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _973 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1275;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1000 = fma(_973, cbModelParam._m0[26u].z, fma(_969, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _965));
        float _1004 = fma(_973, cbModelParam._m0[27u].z, fma(_969, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _965));
        float _1008 = fma(_973, cbModelParam._m0[28u].z, fma(_969, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _965));
        float _1033 = _965 + _734;
        float _1034 = _969 + _735;
        float _1035 = _973 + _736;
        float _1045 = fma(_1035, cbModelParam._m0[26u].z, fma(_1034, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1033)) - _1000;
        float _1046 = fma(_1035, cbModelParam._m0[27u].z, fma(_1034, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1033)) - _1004;
        float _1047 = fma(_1035, cbModelParam._m0[28u].z, fma(_1034, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1033)) - _1008;
        float _1051 = inversesqrt(dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047)));
        float _1064 = ((_1051 * _1045) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1000 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1051 * _1046) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1004 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1051 * _1047) / cbModelParam._m0[34u].z) + ((((((_1008 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1064, _1065, _1066), 0.0);
        float _1103 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1069.x + (-0.5));
        float _1105 = _1103 * (_1069.y + (-0.5));
        float _1106 = _1103 * (_1069.z + (-0.5));
        float _1113 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1076.x + (-0.5));
        float _1115 = _1113 * (_1076.y + (-0.5));
        float _1116 = _1113 * (_1076.z + (-0.5));
        float _1123 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1083.x + (-0.5));
        float _1125 = _1123 * (_1083.y + (-0.5));
        float _1126 = _1123 * (_1083.z + (-0.5));
        float _1133 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1090.x + (-0.5));
        float _1135 = _1133 * (_1090.y + (-0.5));
        float _1136 = _1133 * (_1090.z + (-0.5));
        float _1137 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = _1104 * 0.5;
        float _1141 = _1114 * 0.5;
        float _1142 = _1124 * 0.5;
        float _1143 = dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142));
        float _1148 = (_1143 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1143);
        float _1157 = (dot(vec3(_734, _735, _736), vec3(_1148 * _1140, _1148 * _1141, _1148 * _1142)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1167 = sqrt(((_1141 * _1141) + (_1140 * _1140)) + (_1142 * _1142)) / (_1137 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3909 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1169 + 1.0))) + _1174) * _1137;
        float _1184 = _1105 * 0.5;
        float _1185 = _1115 * 0.5;
        float _1186 = _1125 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_734, _735, _736), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _3942 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1211 + 1.0))) + _1216) * _1138;
        float _1226 = _1106 * 0.5;
        float _1227 = _1116 * 0.5;
        float _1228 = _1126 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_734, _735, _736), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3975 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1253 + 1.0))) + _1258) * _1139;
        _1275 = _1106;
        _1277 = _1105;
        _1278 = _1104;
        _1279 = _1116;
        _1280 = _1115;
        _1281 = _1114;
        _1282 = _1126;
        _1283 = _1125;
        _1284 = _1124;
        _1285 = _1139;
        _1286 = _1138;
        _1287 = _1137;
        _1288 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1290 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
    }
    else
    {
        _1275 = _1276;
        _1277 = _1276;
        _1278 = _1276;
        _1279 = _1276;
        _1280 = _1276;
        _1281 = _1276;
        _1282 = _1276;
        _1283 = _1276;
        _1284 = _1276;
        _1285 = _1276;
        _1286 = _1276;
        _1287 = _1276;
        _1288 = 0.0;
        _1289 = 0.0;
        _1290 = 0.0;
    }
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1316 = fma(_973, cbModelParam._m0[30u].z, fma(_969, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _965));
        float _1320 = fma(_973, cbModelParam._m0[31u].z, fma(_969, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _965));
        float _1324 = fma(_973, cbModelParam._m0[32u].z, fma(_969, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _965));
        float _1347 = _965 + _734;
        float _1348 = _969 + _735;
        float _1349 = _973 + _736;
        float _1359 = fma(_1349, cbModelParam._m0[30u].z, fma(_1348, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1347)) - _1316;
        float _1360 = fma(_1349, cbModelParam._m0[31u].z, fma(_1348, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1347)) - _1320;
        float _1361 = fma(_1349, cbModelParam._m0[32u].z, fma(_1348, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1347)) - _1324;
        float _1365 = inversesqrt(dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361)));
        float _1378 = ((_1365 * _1359) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1316 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1379 = ((_1365 * _1360) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1320 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1380 = ((_1365 * _1361) / cbModelParam._m0[35u].z) + ((((((_1324 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        float _1415 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1382.x + (-0.5));
        float _1417 = _1415 * (_1382.y + (-0.5));
        float _1418 = _1415 * (_1382.z + (-0.5));
        float _1425 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1389.x + (-0.5));
        float _1427 = _1425 * (_1389.y + (-0.5));
        float _1428 = _1425 * (_1389.z + (-0.5));
        float _1435 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1396.x + (-0.5));
        float _1437 = _1435 * (_1396.y + (-0.5));
        float _1438 = _1435 * (_1396.z + (-0.5));
        float _1445 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1403.x + (-0.5));
        float _1447 = _1445 * (_1403.y + (-0.5));
        float _1448 = _1445 * (_1403.z + (-0.5));
        float _1449 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = _1416 * 0.5;
        float _1453 = _1426 * 0.5;
        float _1454 = _1436 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_734, _735, _736), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1449 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _4038 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1479 + 1.0))) + _1484) * _1449;
        float _1494 = _1417 * 0.5;
        float _1495 = _1427 * 0.5;
        float _1496 = _1437 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_734, _735, _736), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _4071 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1521 + 1.0))) + _1526) * _1450;
        float _1536 = _1418 * 0.5;
        float _1537 = _1428 * 0.5;
        float _1538 = _1438 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_734, _735, _736), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4104 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1563 + 1.0))) + _1568) * _1451;
        _1585 = _1418;
        _1586 = _1417;
        _1587 = _1416;
        _1588 = _1428;
        _1589 = _1427;
        _1590 = _1426;
        _1591 = _1438;
        _1592 = _1437;
        _1593 = _1436;
        _1594 = _1451;
        _1595 = _1450;
        _1596 = _1449;
        _1597 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
        _1598 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
    }
    else
    {
        _1585 = _1276;
        _1586 = _1276;
        _1587 = _1276;
        _1588 = _1276;
        _1589 = _1276;
        _1590 = _1276;
        _1591 = _1276;
        _1592 = _1276;
        _1593 = _1276;
        _1594 = _1276;
        _1595 = _1276;
        _1596 = _1276;
        _1597 = 0.0;
        _1598 = 0.0;
        _1599 = 0.0;
    }
    float _1609 = (cbModelParam._m0[1u].x * (_1597 - _1288)) + _1288;
    float _1610 = (cbModelParam._m0[1u].x * (_1598 - _1289)) + _1289;
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1290)) + _1290;
    float _1632 = fma(_1611, cbSceneParam._m0[89u].z, fma(_1610, cbSceneParam._m0[89u].y, _1609 * cbSceneParam._m0[89u].x));
    float _1635 = fma(_1611, cbSceneParam._m0[90u].z, fma(_1610, cbSceneParam._m0[90u].y, _1609 * cbSceneParam._m0[90u].x));
    float _1638 = fma(_1611, cbSceneParam._m0[91u].z, fma(_1610, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1609));
    float _1653 = _909 * 0.5;
    float _1654 = _910 * 0.5;
    float _1655 = _911 * 0.5;
    float _1656 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1659 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1586, _1589, _1592, _1595));
    float _1662 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1585, _1588, _1591, _1594));
    float _1696;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1669 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1275, _1279, _1282, _1285));
        float _1673 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1277, _1280, _1283, _1286));
        float _1677 = dot(vec4(_1653, _1654, _1655, 1.0), vec4(_1278, _1281, _1284, _1287));
        float _1684 = dot(vec4(cbModelParam._m0[39u]), vec4(_1653, _1654, _1655, 1.0));
        _1696 = dot(vec3(isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1684) ? 0.0 : (isnan(0.0) ? _1684 : max(0.0, _1684))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1696 = 1.0;
    }
    float _1707;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1698 = dot(vec4(cbModelParam._m0[40u]), vec4(_1653, _1654, _1655, 1.0));
        _1707 = dot(vec3(isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1698) ? 0.0 : (isnan(0.0) ? _1698 : max(0.0, _1698))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1707 = 1.0;
    }
    float _1711 = (_1707 * cbModelParam._m0[1u].x) + (_1696 * (1.0 - cbModelParam._m0[1u].x));
    float _1721 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _738);
    float _1722 = isnan(_1721) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1721 : min(cbModelParam._m0[25u].z, _1721));
    float _1802;
    float _1804;
    float _1806;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1769 = fma(_973, cbModelParam._m0[13u].z, fma(_969, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _965)) + cbModelParam._m0[13u].w;
        float _1773 = fma(_973, cbModelParam._m0[14u].z, fma(_969, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _965)) + cbModelParam._m0[14u].w;
        float _1777 = fma(_973, cbModelParam._m0[15u].z, fma(_969, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _965)) + cbModelParam._m0[15u].w;
        float _1780 = fma(_911, cbModelParam._m0[13u].z, fma(_910, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _909));
        float _1783 = fma(_911, cbModelParam._m0[14u].z, fma(_910, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _909));
        float _1786 = fma(_911, cbModelParam._m0[15u].z, fma(_910, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _909));
        float _1814;
        if (_1780 > 0.0)
        {
            _1814 = abs((1.0 - _1769) / _1780);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1769 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1814 = frontier_phi_16_14_ladder;
        }
        float _2038;
        if (_1783 > 0.0)
        {
            _2038 = abs((1.0 - _1773) / _1783);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1773 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2038 = frontier_phi_25_21_ladder;
        }
        float _2295;
        if (_1786 > 0.0)
        {
            _2295 = abs((1.0 - _1777) / _1786);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1777 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2295 = frontier_phi_37_32_ladder;
        }
        float _2297 = isnan(_2038) ? _1814 : (isnan(_1814) ? _2038 : min(_1814, _2038));
        float _2298 = isnan(_2295) ? _2297 : (isnan(_2297) ? _2295 : min(_2297, _2295));
        float _2302 = (_2298 * _1780) + _1769;
        float _2303 = (_2298 * _1783) + _1773;
        float _2304 = (_2298 * _1786) + _1777;
        float _2305 = _2298 * 9.9999997473787516355514526367188e-05;
        float _2307 = (-1.0) - _2305;
        float _2309 = _2305 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2304 > _2309) || ((_2304 < _2307) || ((_2303 > _2309) || ((_2303 < _2307) || ((_2302 < _2307) || (_2302 > _2309))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2432 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2304, cbModelParam._m0[9u].z, fma(_2303, cbModelParam._m0[9u].y, _2302 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2304, cbModelParam._m0[10u].z, fma(_2303, cbModelParam._m0[10u].y, _2302 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2304, cbModelParam._m0[11u].z, fma(_2303, cbModelParam._m0[11u].y, _2302 * cbModelParam._m0[11u].x))), _1722);
            frontier_phi_15_37_ladder = _2432.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2432.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2432.x * cbModelParam._m0[1u].y;
        }
        _1802 = frontier_phi_15_37_ladder_2;
        _1804 = frontier_phi_15_37_ladder_1;
        _1806 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1790 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_909, _910, _911), _1722);
        _1802 = _1790.x * cbModelParam._m0[1u].y;
        _1804 = _1790.y * cbModelParam._m0[1u].y;
        _1806 = _1790.z * cbModelParam._m0[1u].y;
    }
    float _1810 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _738);
    float _1811 = isnan(_1810) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1810 : min(cbModelParam._m0[25u].w, _1810));
    float _1901;
    float _1903;
    float _1905;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1865 = fma(_973, cbModelParam._m0[21u].z, fma(_969, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _965)) + cbModelParam._m0[21u].w;
        float _1869 = fma(_973, cbModelParam._m0[22u].z, fma(_969, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _965)) + cbModelParam._m0[22u].w;
        float _1873 = fma(_973, cbModelParam._m0[23u].z, fma(_969, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _965)) + cbModelParam._m0[23u].w;
        float _1876 = fma(_911, cbModelParam._m0[21u].z, fma(_910, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _909));
        float _1879 = fma(_911, cbModelParam._m0[22u].z, fma(_910, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _909));
        float _1882 = fma(_911, cbModelParam._m0[23u].z, fma(_910, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _909));
        float _2043;
        if (_1876 > 0.0)
        {
            _2043 = abs((1.0 - _1865) / _1876);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1865 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2043 = frontier_phi_27_23_ladder;
        }
        float _2322;
        if (_1879 > 0.0)
        {
            _2322 = abs((1.0 - _1869) / _1879);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1869 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2322 = frontier_phi_39_34_ladder;
        }
        float _2535;
        if (_1882 > 0.0)
        {
            _2535 = abs((1.0 - _1873) / _1882);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1873 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2535 = frontier_phi_48_45_ladder;
        }
        float _2537 = isnan(_2322) ? _2043 : (isnan(_2043) ? _2322 : min(_2043, _2322));
        float _2538 = isnan(_2535) ? _2537 : (isnan(_2537) ? _2535 : min(_2537, _2535));
        float _2542 = (_2538 * _1876) + _1865;
        float _2543 = (_2538 * _1879) + _1869;
        float _2544 = (_2538 * _1882) + _1873;
        float _2545 = _2538 * 9.9999997473787516355514526367188e-05;
        float _2546 = (-1.0) - _2545;
        float _2548 = _2545 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2544 > _2548) || ((_2544 < _2546) || ((_2543 > _2548) || ((_2543 < _2546) || ((_2542 < _2546) || (_2542 > _2548))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2747 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2544, cbModelParam._m0[17u].z, fma(_2543, cbModelParam._m0[17u].y, _2542 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2544, cbModelParam._m0[18u].z, fma(_2543, cbModelParam._m0[18u].y, _2542 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2544, cbModelParam._m0[19u].z, fma(_2543, cbModelParam._m0[19u].y, _2542 * cbModelParam._m0[19u].x))), _1811);
            frontier_phi_24_48_ladder = _2747.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2747.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2747.x * cbModelParam._m0[1u].z;
        }
        _1901 = frontier_phi_24_48_ladder_2;
        _1903 = frontier_phi_24_48_ladder_1;
        _1905 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1885 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_909, _910, _911), _1811);
        _1901 = _1885.x * cbModelParam._m0[1u].z;
        _1903 = _1885.y * cbModelParam._m0[1u].z;
        _1905 = _1885.z * cbModelParam._m0[1u].z;
    }
    float _1918 = (((_936 * _886) + _937) * _901) * ((cbModelParam._m0[1u].w * (_1901 - _1802)) + _1802);
    float _1920 = (((_936 * _888) + _937) * _901) * ((cbModelParam._m0[1u].w * (_1903 - _1804)) + _1804);
    float _1922 = (((_936 * _889) + _937) * _901) * ((cbModelParam._m0[1u].w * (_1905 - _1806)) + _1806);
    float _1925 = fma(_1922, cbSceneParam._m0[89u].z, fma(_1920, cbSceneParam._m0[89u].y, _1918 * cbSceneParam._m0[89u].x));
    float _1928 = fma(_1922, cbSceneParam._m0[90u].z, fma(_1920, cbSceneParam._m0[90u].y, _1918 * cbSceneParam._m0[90u].x));
    float _1931 = fma(_1922, cbSceneParam._m0[91u].z, fma(_1920, cbSceneParam._m0[91u].y, _1918 * cbSceneParam._m0[91u].x));
    vec4 _1939 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_823, _824));
    float _1941 = _1939.w;
    float _1953 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1941);
    float _1954 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1941);
    float _1955 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1941);
    uvec4 _1959 = floatBitsToUint(cbInstanceData._m0[_861 + 5u]);
    uint _1961 = _1959.x * 14u;
    uint _1962 = _1961 + 13u;
    float _1969 = _901 + (-1.0);
    float _1974 = (cbLight._m0[_1962].x * _1969) + 1.0;
    float _1975 = (cbLight._m0[_1962].y * _1969) + 1.0;
    float _1976 = (cbLight._m0[_1962].z * _1969) + 1.0;
    float _1977 = (cbLight._m0[_1962].w * _1969) + 1.0;
    uint _1978 = _1961 + 5u;
    float _1984 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
    uint _1988 = _1961 + 4u;
    float _1997 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
    uint _2001 = _1961 | 1u;
    float _2012 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_734, _735, _736));
    float _2015 = dot(vec3(cbLight._m0[_2001].xyz), vec3(_734, _735, _736));
    float _4240 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _4251 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2020 = (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * 0.3183098733425140380859375;
    float _2022 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * 0.3183098733425140380859375;
    float _2029 = ((cbLight._m0[_1978].x * _1984) * _2022) + (((cbLight._m0[_1988].x * _1953) * _1997) * _2020);
    float _2030 = ((_1984 * cbLight._m0[_1978].y) * _2022) + (((cbLight._m0[_1988].y * _1954) * _1997) * _2020);
    float _2031 = ((_1984 * cbLight._m0[_1978].z) * _2022) + (((cbLight._m0[_1988].z * _1955) * _1997) * _2020);
    uvec4 _2035 = floatBitsToUint(cbLight._m0[_1961 + 12u]);
    bool _2037 = _2035.x == 0u;
    float _2048;
    float _2050;
    float _2052;
    if (_2037)
    {
        _2048 = _2029;
        _2050 = _2030;
        _2052 = _2031;
    }
    else
    {
        uint _2056 = _1961 + 6u;
        float _2072 = (dot(vec3(cbLight._m0[_1961 + 2u].xyz), vec3(_734, _735, _736)) * 0.5) + 0.5;
        float _2073 = _2072 * _2072;
        float _4262 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2074 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2075 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
        _2048 = (((cbLight._m0[_2056].x * 0.3183098733425140380859375) * _2074) * _2075) + _2029;
        _2050 = (((cbLight._m0[_2056].y * 0.3183098733425140380859375) * _2074) * _2075) + _2030;
        _2052 = (((cbLight._m0[_2056].z * 0.3183098733425140380859375) * _2074) * _2075) + _2031;
    }
    bool _2055 = _2035.y == 0u;
    float _2093;
    float _2095;
    float _2097;
    if (_2055)
    {
        _2093 = _2048;
        _2095 = _2050;
        _2097 = _2052;
    }
    else
    {
        uint _2266 = _1961 + 7u;
        float _2282 = (dot(vec3(cbLight._m0[_1961 + 3u].xyz), vec3(_734, _735, _736)) * 0.5) + 0.5;
        float _2283 = _2282 * _2282;
        float _4278 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2284 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2285 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2093 = (((cbLight._m0[_2266].x * 0.3183098733425140380859375) * _2284) * _2285) + _2048;
        _2095 = (((cbLight._m0[_2266].y * 0.3183098733425140380859375) * _2284) * _2285) + _2050;
        _2097 = (((cbLight._m0[_2266].z * 0.3183098733425140380859375) * _2284) * _2285) + _2052;
    }
    uint _2100 = _1961 + 8u;
    float _2113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1961].w)) * _738) * 0.949999988079071044921875);
    float _2114 = _2113 * _2113;
    float _2115 = cbLight._m0[_1961].x + _815;
    float _2116 = cbLight._m0[_1961].y + _816;
    float _2117 = cbLight._m0[_1961].z + _817;
    float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
    float _2122 = _2121 * _2115;
    float _2123 = _2121 * _2116;
    float _2124 = _2121 * _2117;
    float _2125 = dot(vec3(_734, _735, _736), vec3(cbLight._m0[_1961].xyz));
    float _4294 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _4305 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _2129 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _2130 = dot(vec3(_734, _735, _736), vec3(_2122, _2123, _2124));
    float _4316 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _2134 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_2122, _2123, _2124));
    float _4327 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2138 = _2114 * _2114;
    float _2142 = ((_2133 * _2133) * (_2138 + (-1.0))) + 1.0;
    float _2150 = exp2(log2(1.0 - (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) * 5.0);
    float _2151 = 0.959999978542327880859375 - _883;
    float _2153 = 0.959999978542327880859375 - _884;
    float _2154 = 0.959999978542327880859375 - _885;
    float _2161 = 1.0 - _2114;
    float _2172 = (0.5 / (((_2129 * ((_2128 * _2161) + _2114)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2161) + _2114) * _2128))) * _2128;
    float _4338 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2174 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2138 / ((_2142 * _2142) * 3.141590118408203125));
    uint _2188 = _1961 + 9u;
    float _2199 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2001].w)) * _738) * 0.949999988079071044921875);
    float _2200 = _2199 * _2199;
    float _2201 = cbLight._m0[_2001].x + _815;
    float _2202 = cbLight._m0[_2001].y + _816;
    float _2203 = cbLight._m0[_2001].z + _817;
    float _2207 = inversesqrt(dot(vec3(_2201, _2202, _2203), vec3(_2201, _2202, _2203)));
    float _2208 = _2207 * _2201;
    float _2209 = _2207 * _2202;
    float _2210 = _2207 * _2203;
    float _2211 = dot(vec3(_734, _735, _736), vec3(cbLight._m0[_2001].xyz));
    float _4349 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2214 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _2215 = dot(vec3(_734, _735, _736), vec3(_2208, _2209, _2210));
    float _4360 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2218 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _2219 = dot(vec3(cbLight._m0[_2001].xyz), vec3(_2208, _2209, _2210));
    float _4371 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2223 = _2200 * _2200;
    float _2227 = ((_2218 * _2218) * (_2223 + (-1.0))) + 1.0;
    float _2234 = exp2(log2(1.0 - (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0)))) * 5.0);
    float _2241 = 1.0 - _2200;
    float _2251 = (0.5 / (((_2129 * ((_2214 * _2241) + _2200)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2241) + _2200) * _2214))) * _2214;
    float _4382 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2253 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_2223 / ((_2227 * _2227) * 3.141590118408203125));
    float _2263 = (((((_2234 * _2151) + _886) * cbLight._m0[_2188].x) * _2253) * _1984) + ((((cbLight._m0[_2100].x * _1953) * ((_2150 * _2151) + _886)) * _2174) * _1997);
    float _2264 = (((((_2234 * _2153) + _888) * cbLight._m0[_2188].y) * _2253) * _1984) + ((((cbLight._m0[_2100].y * _1954) * ((_2150 * _2153) + _888)) * _2174) * _1997);
    float _2265 = (((((_2234 * _2154) + _889) * cbLight._m0[_2188].z) * _2253) * _1984) + ((((cbLight._m0[_2100].z * _1955) * ((_2150 * _2154) + _889)) * _2174) * _1997);
    float _2327;
    float _2329;
    float _2331;
    if (_2037)
    {
        _2327 = _2263;
        _2329 = _2264;
        _2331 = _2265;
    }
    else
    {
        uint _2333 = _1961 + 2u;
        uint _2337 = _1961 + 10u;
        float _2351 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2333].w)) * _738) * 0.949999988079071044921875);
        float _2352 = _2351 * _2351;
        float _2353 = cbLight._m0[_2333].x + _815;
        float _2354 = cbLight._m0[_2333].y + _816;
        float _2355 = cbLight._m0[_2333].z + _817;
        float _2359 = inversesqrt(dot(vec3(_2353, _2354, _2355), vec3(_2353, _2354, _2355)));
        float _2360 = _2359 * _2353;
        float _2361 = _2359 * _2354;
        float _2362 = _2359 * _2355;
        float _2363 = dot(vec3(_734, _735, _736), vec3(cbLight._m0[_2333].xyz));
        float _4393 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2366 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2367 = dot(vec3(_734, _735, _736), vec3(_2360, _2361, _2362));
        float _4404 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2370 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2371 = dot(vec3(cbLight._m0[_2333].xyz), vec3(_2360, _2361, _2362));
        float _4415 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2375 = _2352 * _2352;
        float _2379 = ((_2370 * _2370) * (_2375 + (-1.0))) + 1.0;
        float _2386 = exp2(log2(1.0 - (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0)))) * 5.0);
        float _2393 = 1.0 - _2352;
        float _2403 = (0.5 / (((_2129 * ((_2366 * _2393) + _2352)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2393) + _2352) * _2366))) * _2366;
        float _4426 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2405 = (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2375 / ((_2379 * _2379) * 3.141590118408203125));
        float _2406 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
        _2327 = (((((_2386 * _2151) + _886) * cbLight._m0[_2337].x) * _2405) * _2406) + _2263;
        _2329 = (((((_2386 * _2153) + _888) * cbLight._m0[_2337].y) * _2405) * _2406) + _2264;
        _2331 = (((((_2386 * _2154) + _889) * cbLight._m0[_2337].z) * _2405) * _2406) + _2265;
    }
    float _2441;
    float _2443;
    float _2445;
    if (_2055)
    {
        _2441 = _2327;
        _2443 = _2329;
        _2445 = _2331;
    }
    else
    {
        uint _2452 = _1961 + 3u;
        uint _2456 = _1961 + 11u;
        float _2470 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2452].w)) * _738) * 0.949999988079071044921875);
        float _2471 = _2470 * _2470;
        float _2472 = cbLight._m0[_2452].x + _815;
        float _2473 = cbLight._m0[_2452].y + _816;
        float _2474 = cbLight._m0[_2452].z + _817;
        float _2478 = inversesqrt(dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474)));
        float _2479 = _2478 * _2472;
        float _2480 = _2478 * _2473;
        float _2481 = _2478 * _2474;
        float _2482 = dot(vec3(_734, _735, _736), vec3(cbLight._m0[_2452].xyz));
        float _4442 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2485 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2486 = dot(vec3(_734, _735, _736), vec3(_2479, _2480, _2481));
        float _4453 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2490 = dot(vec3(cbLight._m0[_2452].xyz), vec3(_2479, _2480, _2481));
        float _4464 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2494 = _2471 * _2471;
        float _2498 = ((_2489 * _2489) * (_2494 + (-1.0))) + 1.0;
        float _2505 = exp2(log2(1.0 - (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) * 5.0);
        float _2512 = 1.0 - _2471;
        float _2522 = (0.5 / (((_2129 * ((_2485 * _2512) + _2471)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2512) + _2471) * _2485))) * _2485;
        float _4475 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2524 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2494 / ((_2498 * _2498) * 3.141590118408203125));
        float _2525 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2441 = (((((_2505 * _2151) + _886) * cbLight._m0[_2456].x) * _2524) * _2525) + _2327;
        _2443 = (((((_2505 * _2153) + _888) * cbLight._m0[_2456].y) * _2524) * _2525) + _2329;
        _2445 = (((((_2505 * _2154) + _889) * cbLight._m0[_2456].z) * _2524) * _2525) + _2331;
    }
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    float _2667;
    float _2669;
    if (_1959.y == 0u)
    {
        float _2600 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2601 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2600;
        float _2602 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2600;
        float _2603 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2600;
        uvec4 _2615 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2616 = _2615.x;
        uint _2627 = uint((float(_2615.y) * floor(float(uint(cbSceneParam._m0[85u].y * _824) / _2616))) + floor(float(uint(cbSceneParam._m0[85u].x * _823) / _2616)));
        float _2637 = (log2(_2603 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2638 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        uint _2641 = uint(isnan(14.0) ? _2638 : (isnan(_2638) ? 14.0 : min(_2638, 14.0)));
        uvec4 _2646 = texelFetch(g_lightClusterGridBuffer, int(((_2641 << 2u) + (_2627 << 6u)) >> 2u));
        uint _2647 = _2646.x;
        uint _2648 = _2615.z;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        if (((((1u << ((_2648 >> 4u) & 15u)) + 4294967295u) & _2647) == 0u) || ((_2648 & 240u) == 0u))
        {
            _2752 = 0.0;
            _2754 = 0.0;
            _2756 = 0.0;
            _2758 = 0.0;
            _2760 = 0.0;
            _2762 = 0.0;
        }
        else
        {
            float _2753;
            float _2755;
            float _2757;
            float _2759;
            float _2761;
            float _2763;
            float _2896 = 0.0;
            float _2897 = 0.0;
            float _2898 = 0.0;
            float _2899 = 0.0;
            float _2900 = 0.0;
            float _2901 = 0.0;
            uint _2902 = 0u;
            uint _2911;
            bool _2912;
            for (;;)
            {
                _2911 = texelFetch(g_lightClassification, int((((_2641 << 5u) + (_2627 << 9u)) + (_2902 << 2u)) >> 2u)).x;
                _2912 = _2911 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2912)
                {
                    frontier_phi_63_pred = _2901;
                    frontier_phi_63_pred_1 = _2900;
                    frontier_phi_63_pred_2 = _2899;
                    frontier_phi_63_pred_3 = _2898;
                    frontier_phi_63_pred_4 = _2897;
                    frontier_phi_63_pred_5 = _2896;
                }
                else
                {
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    uint _3026;
                    _3020 = _2896;
                    _3021 = _2897;
                    _3022 = _2898;
                    _3023 = _2899;
                    _3024 = _2900;
                    _3025 = _2901;
                    _3026 = _2911;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    for (;;)
                    {
                        uint _3030 = uint(findLSB(_3026)) + (_2902 << 5u);
                        uint _3027 = (_3026 + 4294967295u) & _3026;
                        uint _3032 = _3030 * 48u;
                        vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3032)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 3u)).x));
                        uint _3052 = (_3030 * 48u) + 4u;
                        vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3052)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 3u)).x));
                        uint _3071 = (_3030 * 48u) + 8u;
                        vec3 _3082 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3071)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 2u)).x));
                        float _3086 = _3046.x - _2601;
                        float _3087 = _3046.y - _2602;
                        float _3088 = _3046.z - _2603;
                        float _3089 = dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088));
                        float _3092 = inversesqrt(_3089);
                        float _3093 = _3092 * _3086;
                        float _3094 = _3092 * _3087;
                        float _3095 = _3092 * _3088;
                        float _3096 = dot(vec3(_842, _845, _848), vec3(_3093, _3094, _3095));
                        float _3101 = 1.0 - (_3089 * _3046.w);
                        float _4501 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3102 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3103 = sqrt(_3089) * _3065.w;
                        float _3105 = 1.39999997615814208984375 / (_3103 + 1.39999997615814208984375);
                        float _3106 = _3105 * _3105;
                        float _3109 = ((1.0 - _3106) * _3096) + _3106;
                        float _3112 = _3103 * _3103;
                        float _3116 = ((isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0))) * _3102) / ((_3112 * 0.699999988079071044921875) + 1.0);
                        float _3120 = (-0.0) - _2601;
                        float _3121 = (-0.0) - _2602;
                        float _3122 = (-0.0) - _2603;
                        float _3126 = inversesqrt(dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122)));
                        float _3127 = _3126 * _3120;
                        float _3128 = _3126 * _3121;
                        float _3129 = _3126 * _3122;
                        float _3137 = exp2(log2(1.0 / ((_3112 * 3.5) + 5.0)) * 0.25);
                        float _3138 = 1.0 - _917;
                        float _3145 = sqrt(1.0 - ((1.0 - (_3138 * _3138)) * (1.0 - (_3137 * _3137))));
                        float _3146 = _3145 * _3145;
                        float _3147 = _3146 * _3146;
                        float _3148 = _3127 + _3093;
                        float _3149 = _3128 + _3094;
                        float _3150 = _3129 + _3095;
                        float _3154 = inversesqrt(dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150)));
                        float _3158 = dot(vec3(_842, _845, _848), vec3(_3127, _3128, _3129));
                        float _4517 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3161 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3162 = dot(vec3(_842, _845, _848), vec3(_3154 * _3148, _3154 * _3149, _3154 * _3150));
                        float _4528 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3165 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                        float _3169 = ((_3165 * _3165) * (_3147 + (-1.0))) + 1.0;
                        float _3170 = _3105 * _3146;
                        float _3171 = _3170 * _3170;
                        float _3174 = ((1.0 - _3171) * _3096) + _3171;
                        float _4539 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                        float _3175 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3176 = 1.0 - _3146;
                        float _3186 = (0.5 / (((_3175 * ((_3161 * _3176) + _3146)) + 9.9999999392252902907785028219223e-09) + (((_3175 * _3176) + _3146) * _3161))) * _3175;
                        float _4550 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                        float _3197 = (((_3147 * 3.1415927410125732421875) * (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) / ((_3169 * _3169) * ((_3112 * 2.1991131305694580078125) + 3.141590118408203125))) * _3102;
                        _2955 = (_3116 * _3065.x) + _3023;
                        _2956 = (_3116 * _3065.y) + _3024;
                        _2957 = (_3116 * _3065.z) + _3025;
                        _2952 = (_3197 * _3082.x) + _3020;
                        _2953 = (_3197 * _3082.y) + _3021;
                        _2954 = (_3197 * _3082.z) + _3022;
                        if (_3027 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3020 = _2952;
                            _3021 = _2953;
                            _3022 = _2954;
                            _3023 = _2955;
                            _3024 = _2956;
                            _3025 = _2957;
                            _3026 = _3027;
                        }
                    }
                    frontier_phi_63_pred = _2957;
                    frontier_phi_63_pred_1 = _2956;
                    frontier_phi_63_pred_2 = _2955;
                    frontier_phi_63_pred_3 = _2954;
                    frontier_phi_63_pred_4 = _2953;
                    frontier_phi_63_pred_5 = _2952;
                }
                _2763 = frontier_phi_63_pred;
                _2761 = frontier_phi_63_pred_1;
                _2759 = frontier_phi_63_pred_2;
                _2757 = frontier_phi_63_pred_3;
                _2755 = frontier_phi_63_pred_4;
                _2753 = frontier_phi_63_pred_5;
                uint _2903 = _2902 + 1u;
                if (_2903 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2896 = _2753;
                    _2897 = _2755;
                    _2898 = _2757;
                    _2899 = _2759;
                    _2900 = _2761;
                    _2901 = _2763;
                    _2902 = _2903;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2752 = _2753;
            _2754 = _2755;
            _2756 = _2757;
            _2758 = _2759;
            _2760 = _2761;
            _2762 = _2763;
        }
        uvec4 _2766 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2767 = _2766.z;
        uint _2769 = (_2767 >> 8u) & 15u;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        if (((4294967295u << _2769) & _2647) == 0u)
        {
            _2864 = _2752;
            _2866 = _2754;
            _2868 = _2756;
            _2870 = _2758;
            _2872 = _2760;
            _2874 = _2762;
        }
        else
        {
            float _2889 = inversesqrt(dot(vec3(_2601, _2602, _2603), vec3(_2601, _2602, _2603)));
            float _2890 = _2889 * _2601;
            float _2891 = _2889 * _2602;
            float _2892 = _2889 * _2603;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2769 < ((_2767 >> 12u) & 15u))
            {
                float _2865;
                float _2867;
                float _2869;
                float _2871;
                float _2873;
                float _2875;
                float _3003 = _2752;
                float _3004 = _2754;
                float _3005 = _2756;
                float _3006 = _2758;
                float _3007 = _2760;
                float _3008 = _2762;
                uint _3009 = _2769;
                uint _3018;
                bool _3019;
                for (;;)
                {
                    _3018 = texelFetch(g_lightClassification, int((((_2641 << 5u) + (_2627 << 9u)) + (_3009 << 2u)) >> 2u)).x;
                    _3019 = _3018 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3019)
                    {
                        frontier_phi_69_pred = _3008;
                        frontier_phi_69_pred_1 = _3007;
                        frontier_phi_69_pred_2 = _3006;
                        frontier_phi_69_pred_3 = _3005;
                        frontier_phi_69_pred_4 = _3004;
                        frontier_phi_69_pred_5 = _3003;
                    }
                    else
                    {
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3215 = _3003;
                        float _3216 = _3004;
                        float _3217 = _3005;
                        float _3218 = _3006;
                        float _3219 = _3007;
                        float _3220 = _3008;
                        uint _3221 = _3018;
                        uint _3222;
                        vec4 _3247;
                        float _3248;
                        vec4 _3263;
                        vec3 _3275;
                        vec4 _3291;
                        vec4 _3306;
                        float _3353;
                        bool _3354;
                        for (;;)
                        {
                            uint _3232 = ((_3009 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3221));
                            _3222 = (_3221 + 4294967295u) & _3221;
                            uint _3234 = _3232 * 40u;
                            _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            _3248 = _3247.w;
                            uint _3250 = (_3232 * 40u) + 4u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3265 = (_3232 * 40u) + 8u;
                            _3275 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x));
                            uint _3278 = (_3232 * 40u) + 16u;
                            _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            uint _3293 = (_3232 * 40u) + 20u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            uint _3309 = (_3232 * 40u) + 24u;
                            vec4 _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3328 = (_3232 * 40u) + 28u;
                            vec4 _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            _3353 = fma(_2603, _3341.z, fma(_2602, _3341.y, _3341.x * _2601)) + _3341.w;
                            _3354 = !((fma(_2603, _3322.z, fma(_2602, _3322.y, _3322.x * _2601)) + _3322.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3354)
                            {
                                float _3381 = _3247.x - _2601;
                                float _3382 = _3247.y - _2602;
                                float _3383 = _3247.z - _2603;
                                float _3384 = dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383));
                                float _3387 = inversesqrt(_3384);
                                float _3388 = _3387 * _3381;
                                float _3389 = _3387 * _3382;
                                float _3390 = _3387 * _3383;
                                float _3394 = 1.0 - (_3384 / (_3248 * _3248));
                                float _4561 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3395 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3399 = sqrt(_3384) * _3263.w;
                                float _3401 = 1.39999997615814208984375 / (_3399 + 1.39999997615814208984375);
                                float _3402 = _3401 * _3401;
                                float _3405 = ((1.0 - _3402) * dot(vec3(_3388, _3389, _3390), vec3(_842, _845, _848))) + _3402;
                                float _3408 = _3399 * _3399;
                                float _3412 = (fma(_2603, _3291.z, fma(_2602, _3291.y, _3291.x * _2601)) + _3291.w) / _3353;
                                float _3413 = (fma(_2603, _3306.z, fma(_2602, _3306.y, _3306.x * _2601)) + _3306.w) / _3353;
                                float _3417 = 1.0 - dot(vec2(_3412, _3413), vec2(_3412, _3413));
                                float _4577 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3418 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3419 = _3418 * (((isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0))) * _3395) / ((_3408 * 0.699999988079071044921875) + 1.0));
                                float _3431 = exp2(log2(1.0 / ((_3408 * 3.5) + 5.0)) * 0.25);
                                float _3432 = 1.0 - _917;
                                float _3439 = sqrt(1.0 - ((1.0 - (_3432 * _3432)) * (1.0 - (_3431 * _3431))));
                                float _3440 = _3439 * _3439;
                                float _3441 = _3440 * _3440;
                                float _3442 = _3388 - _2890;
                                float _3443 = _3389 - _2891;
                                float _3444 = _3390 - _2892;
                                float _3448 = inversesqrt(dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444)));
                                float _3452 = dot(vec3(_842, _845, _848), vec3((-0.0) - _2890, (-0.0) - _2891, (-0.0) - _2892));
                                float _4588 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3455 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3456 = dot(vec3(_842, _845, _848), vec3(_3448 * _3442, _3448 * _3443, _3448 * _3444));
                                float _4599 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3459 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3463 = ((_3459 * _3459) * (_3441 + (-1.0))) + 1.0;
                                float _3464 = _3401 * _3440;
                                float _3465 = _3464 * _3464;
                                float _3471 = ((1.0 - _3465) * dot(vec3(_842, _845, _848), vec3(_3388, _3389, _3390))) + _3465;
                                float _4610 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3472 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3473 = 1.0 - _3440;
                                float _3483 = (0.5 / (((_3472 * ((_3455 * _3473) + _3440)) + 9.9999999392252902907785028219223e-09) + (((_3472 * _3473) + _3440) * _3455))) * _3472;
                                float _4621 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3493 = (_3418 * _3395) * (((_3441 * 3.1415927410125732421875) * (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) / ((_3463 * _3463) * ((_3408 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3419 * _3263.z;
                                frontier_phi_75_pred_1 = _3419 * _3263.y;
                                frontier_phi_75_pred_2 = _3419 * _3263.x;
                                frontier_phi_75_pred_3 = _3493 * _3275.z;
                                frontier_phi_75_pred_4 = _3493 * _3275.y;
                                frontier_phi_75_pred_5 = _3493 * _3275.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3502 = frontier_phi_75_pred;
                            _3501 = frontier_phi_75_pred_1;
                            _3500 = frontier_phi_75_pred_2;
                            _3499 = frontier_phi_75_pred_3;
                            _3498 = frontier_phi_75_pred_4;
                            _3497 = frontier_phi_75_pred_5;
                            _3205 = _3500 + _3218;
                            _3206 = _3501 + _3219;
                            _3207 = _3502 + _3220;
                            _3202 = _3497 + _3215;
                            _3203 = _3498 + _3216;
                            _3204 = _3499 + _3217;
                            if (_3222 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3222;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3207;
                        frontier_phi_69_pred_1 = _3206;
                        frontier_phi_69_pred_2 = _3205;
                        frontier_phi_69_pred_3 = _3204;
                        frontier_phi_69_pred_4 = _3203;
                        frontier_phi_69_pred_5 = _3202;
                    }
                    _2875 = frontier_phi_69_pred;
                    _2873 = frontier_phi_69_pred_1;
                    _2871 = frontier_phi_69_pred_2;
                    _2869 = frontier_phi_69_pred_3;
                    _2867 = frontier_phi_69_pred_4;
                    _2865 = frontier_phi_69_pred_5;
                    uint _3010 = _3009 + 1u;
                    if (_3010 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3003 = _2865;
                        _3004 = _2867;
                        _3005 = _2869;
                        _3006 = _2871;
                        _3007 = _2873;
                        _3008 = _2875;
                        _3009 = _3010;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2875;
                frontier_phi_57_58_ladder_1 = _2873;
                frontier_phi_57_58_ladder_2 = _2871;
                frontier_phi_57_58_ladder_3 = _2869;
                frontier_phi_57_58_ladder_4 = _2867;
                frontier_phi_57_58_ladder_5 = _2865;
            }
            else
            {
                frontier_phi_57_58_ladder = _2762;
                frontier_phi_57_58_ladder_1 = _2760;
                frontier_phi_57_58_ladder_2 = _2758;
                frontier_phi_57_58_ladder_3 = _2756;
                frontier_phi_57_58_ladder_4 = _2754;
                frontier_phi_57_58_ladder_5 = _2752;
            }
            _2864 = frontier_phi_57_58_ladder_5;
            _2866 = frontier_phi_57_58_ladder_4;
            _2868 = frontier_phi_57_58_ladder_3;
            _2870 = frontier_phi_57_58_ladder_2;
            _2872 = frontier_phi_57_58_ladder_1;
            _2874 = frontier_phi_57_58_ladder;
        }
        float _2879 = isnan(1.0) ? _901 : (isnan(_901) ? 1.0 : min(_901, 1.0));
        _2659 = (_2879 * _2870) + _2093;
        _2661 = (_2879 * _2872) + _2095;
        _2663 = (_2879 * _2874) + _2097;
        _2665 = ((_2864 * _886) * _2879) + _2441;
        _2667 = ((_2866 * _888) * _2879) + _2443;
        _2669 = ((_2868 * _889) * _2879) + _2445;
    }
    else
    {
        _2659 = _2093;
        _2661 = _2095;
        _2663 = _2097;
        _2665 = _2441;
        _2667 = _2443;
        _2669 = _2445;
    }
    float _4637 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4648 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _4659 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4670 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _2687 = ((isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2659 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _901))) + ((_2665 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1711)) * cbPerFrame._m0[3u].x);
    float _2688 = ((isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2661 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _901))) + ((_2667 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1711)) * cbPerFrame._m0[3u].x);
    float _2689 = ((isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2663 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _901))) + ((_2669 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1711)) * cbPerFrame._m0[3u].x);
    float _2697 = cbInstanceData._m0[_861 + 6u].w * (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)));
    float _2702 = _823 / cbSceneParam._m0[86u].x;
    float _2703 = _824 / cbSceneParam._m0[86u].y;
    vec4 _2717 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2702, _2703, (log2((isnan(cbSceneParam._m0[77u].w) ? _758 : (isnan(_758) ? cbSceneParam._m0[77u].w : min(_758, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2719 = _2717.x;
    float _2720 = _2717.y;
    float _2721 = _2717.z;
    float _2722 = _2717.w;
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    if (_758 > cbSceneParam._m0[78u].w)
    {
        float _2777 = isnan(_758) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _758 : min(cbSceneParam._m0[80u].w, _758));
        float _2778 = _2777 / _758;
        float _2789 = _2778 * _808;
        float _2790 = _809 * _2778;
        float _2791 = (-0.0) - _2790;
        float _2792 = _2778 * _810;
        float _2794 = (cbSceneParam._m0[77u].w * _2791) / _2777;
        float _2795 = _2794 + cbSceneParam._m0[79u].w;
        float _2796 = cbSceneParam._m0[79u].w - _2790;
        float _2802 = sqrt(((_2789 * _2789) + (_2790 * _2790)) + (_2792 * _2792));
        float _2805 = (1.0 - (cbSceneParam._m0[77u].w / _2777)) * _2802;
        float _2810 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2812 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2965;
        if (abs((_2791 - _2794) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2965 = ((((_2795 > 0.0) ? exp2(_2810 * _2795) : (2.0 - exp2(_2812 * _2795))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2805;
        }
        else
        {
            float _2925 = 1.0 / cbSceneParam._m0[80u].x;
            float _2926 = isnan(_2796) ? _2795 : (isnan(_2795) ? _2796 : max(_2795, _2796));
            float _2927 = isnan(_2796) ? _2795 : (isnan(_2795) ? _2796 : min(_2795, _2796));
            float _2936 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : min(_2926, 0.0));
            float _2937 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : min(_2927, 0.0));
            _2965 = ((abs(_2802 / _2791) * cbSceneParam._m0[80u].y) * ((((_2936 - _2937) * 2.0) - ((exp2(_2810 * (isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0)))) - exp2(_2810 * (isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0))))) * _2925)) - ((exp2(_2812 * _2936) - exp2(_2812 * _2937)) * _2925))) + (_2805 * cbSceneParam._m0[80u].z);
        }
        vec4 _2967 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2702, _2703, 1.0), 0.0);
        float _2976 = exp2((_2965 * (-1.44269502162933349609375)) * (1.0 - _2967.w));
        float _2977 = log2(_2976);
        float _2993 = log2(_2722);
        _2814 = (exp2(_2993 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].x)) * _2967.x) / cbSceneParam._m0[78u].x)) + _2719;
        _2816 = (exp2(_2993 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].y)) * _2967.y) / cbSceneParam._m0[78u].y)) + _2720;
        _2818 = (exp2(_2993 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].z)) * _2967.z) / cbSceneParam._m0[78u].z)) + _2721;
        _2820 = _2976 * _2722;
    }
    else
    {
        _2814 = _2719;
        _2816 = _2720;
        _2818 = _2721;
        _2820 = _2722;
    }
    float _2832 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2833 = _2832 == 3.0;
    float _2834 = log2(_2820);
    float _2841 = exp2(_2834 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0)));
    float _2842 = exp2(_2834 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0)));
    float _2843 = exp2(_2834 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0)));
    float _2852 = (_2832 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2852 * (_2833 ? _2841 : (_2841 + (cbSceneParam._m0[72u].w * _2814)));
    SV_Target.y = _2852 * (_2833 ? _2842 : (_2842 + (cbSceneParam._m0[72u].w * _2816)));
    SV_Target.z = _2852 * (_2833 ? _2843 : (_2843 + (cbSceneParam._m0[72u].w * _2818)));
    SV_Target.w = _2697;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2697;
}


