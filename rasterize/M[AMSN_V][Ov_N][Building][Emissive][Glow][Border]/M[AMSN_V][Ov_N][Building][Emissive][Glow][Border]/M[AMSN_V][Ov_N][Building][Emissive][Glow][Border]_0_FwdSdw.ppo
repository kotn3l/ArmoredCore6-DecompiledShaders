#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[21];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 6, component = 1) in float TEXCOORD_6;
layout(location = 7) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1278;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _231 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _232 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _233 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _237 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _238 = _237 * _231;
    float _239 = _237 * _232;
    float _240 = _237 * _233;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    float _258 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _259 = _258 * TANGENT_2.x;
    float _260 = _258 * TANGENT_2.y;
    float _261 = _258 * TANGENT_2.z;
    float _266;
    float _267;
    float _268;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _266 = (-0.0) - _245;
        _267 = (-0.0) - _246;
        _268 = (-0.0) - _247;
    }
    else
    {
        _266 = _245;
        _267 = _246;
        _268 = _247;
    }
    vec4 _307 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _319 = 1.0 - ((1.0 - _307.x) * 1.39999997615814208984375);
    float _3894 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _320 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _327 = (_320 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x)) + cbMtdParam._m0[15u].x;
    float _328 = (_320 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y)) + cbMtdParam._m0[15u].y;
    float _329 = (_320 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z)) + cbMtdParam._m0[15u].z;
    float _331 = 1.0 - ((1.0 - _307.y) * 1.39999997615814208984375);
    float _3905 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _332 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _339 = (_332 * (cbMtdParam._m0[13u].x - _327)) + _327;
    float _340 = (_332 * (cbMtdParam._m0[13u].y - _328)) + _328;
    float _341 = (_332 * (cbMtdParam._m0[13u].z - _329)) + _329;
    float _343 = 1.0 - ((1.0 - _307.z) * 1.39999997615814208984375);
    float _3916 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _344 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _373 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[19u].z;
    float _387 = ((cbMtdParam._m0[18u].y * (-1.39999997615814208984375)) * ((TEXCOORD_6 - _373) + (cbMtdParam._m0[17u].w * TEXCOORD_6))) + 1.0;
    float _3927 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _389 = 1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)));
    float _390 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _391 = isnan(1.0) ? _390 : (isnan(_390) ? 1.0 : min(_390, 1.0));
    float _399 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5 - _373) + (cbMtdParam._m0[17u].z * TEXCOORD_5))) + 1.0;
    float _3948 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _401 = 1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)));
    float _402 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _403 = isnan(1.0) ? _402 : (isnan(_402) ? 1.0 : min(_402, 1.0));
    vec4 _421 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _423 = _421.x;
    float _424 = _421.y;
    float _425 = _421.z;
    float _426 = cbMtdParam._m0[12u].x * _403;
    float _428 = cbMtdParam._m0[12u].y * _403;
    float _430 = cbMtdParam._m0[12u].z * _403;
    float _450 = _401 + _389;
    float _451 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _452 = isnan(1.0) ? _451 : (isnan(_451) ? 1.0 : min(_451, 1.0));
    vec4 _470 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _475 = _470.w;
    float _476 = _470.x * cbMtdParam._m0[10u].x;
    float _477 = _470.y * cbMtdParam._m0[10u].y;
    float _478 = _470.z * cbMtdParam._m0[10u].z;
    float _498 = ((_476 - (_452 * _476)) + ((((((_423 * (cbMtdParam._m0[11u].x - _426)) * _391) + (_426 * _423)) * 4.55000019073486328125) * _452) * _476)) * ((_344 * (cbMtdParam._m0[14u].x - _339)) + _339);
    float _499 = ((((((((_424 * (cbMtdParam._m0[11u].y - _428)) * _391) + (_428 * _424)) * 4.55000019073486328125) * _452) * _477) + _477) - (_452 * _477)) * ((_344 * (cbMtdParam._m0[14u].y - _340)) + _340);
    float _500 = ((((((((_425 * (cbMtdParam._m0[11u].z - _430)) * _391) + (_430 * _425)) * 4.55000019073486328125) * _452) * _478) + _478) - (_452 * _478)) * ((_344 * (cbMtdParam._m0[14u].z - _341)) + _341);
    vec4 _517 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _521 = _517.z;
    float _525 = (_517.x * 2.0) + (-1.0);
    float _527 = (_517.y * 2.0) + (-1.0);
    float _528 = dot(vec2(_525, _527), vec2(_525, _527));
    float _3979 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _533 = sqrt(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))));
    float _536 = fma(_533, _266, fma(_527, _259, _525 * _238));
    float _539 = fma(_533, _267, fma(_527, _260, _525 * _239));
    float _542 = fma(_533, _268, fma(_527, _261, _525 * _240));
    float _546 = inversesqrt(dot(vec3(_536, _539, _542), vec3(_536, _539, _542)));
    float _547 = _546 * _536;
    float _548 = _546 * _539;
    float _549 = _546 * _542;
    vec4 _561 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _567 = (_561.x * 2.0) + (-1.0);
    float _568 = (_561.y * 2.0) + (-1.0);
    float _569 = dot(vec2(_567, _568), vec2(_567, _568));
    float _3990 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _574 = sqrt(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))));
    float _577 = fma(_574, _266, fma(_568, _259, _567 * _238));
    float _580 = fma(_574, _267, fma(_568, _260, _567 * _239));
    float _583 = fma(_574, _268, fma(_568, _261, _567 * _240));
    float _587 = inversesqrt(dot(vec3(_577, _580, _583), vec3(_577, _580, _583)));
    float _588 = _587 * _577;
    float _589 = _587 * _580;
    float _590 = _587 * _583;
    float _593 = fma(_590, _221, fma(_589, _220, _588 * _219));
    float _596 = fma(_590, _254, fma(_589, _253, _588 * _252));
    float _599 = fma(_590, _268, fma(_589, _267, _588 * _266));
    float _603 = inversesqrt(dot(vec3(_593, _596, _599), vec3(_593, _596, _599)));
    float _607 = fma(_549, _221, fma(_548, _220, _547 * _219));
    float _610 = fma(_549, _254, fma(_548, _253, _547 * _252));
    float _613 = fma(_549, _268, fma(_548, _267, _547 * _266));
    float _617 = inversesqrt(dot(vec3(_607, _610, _613), vec3(_607, _610, _613)));
    vec4 _633 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _639 = (_633.x * 2.0) + (-1.0);
    float _640 = (_633.y * 2.0) + (-1.0);
    float _641 = dot(vec2(_639, _640), vec2(_639, _640));
    float _4001 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _646 = sqrt(1.0 - (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))));
    vec4 _661 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _667 = (_661.x * 2.0) + (-1.0);
    float _668 = (_661.y * 2.0) + (-1.0);
    float _669 = dot(vec2(_667, _668), vec2(_667, _668));
    float _4012 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _674 = sqrt(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))));
    float _677 = fma(_674, _266, fma(_668, _259, _667 * _238));
    float _680 = fma(_674, _267, fma(_668, _260, _667 * _239));
    float _683 = fma(_674, _268, fma(_668, _261, _667 * _240));
    float _687 = inversesqrt(dot(vec3(_677, _680, _683), vec3(_677, _680, _683)));
    float _688 = _687 * _677;
    float _689 = _687 * _680;
    float _690 = _687 * _683;
    float _693 = fma(_690, _221, fma(_689, _220, _688 * _219));
    float _696 = fma(_690, _254, fma(_689, _253, _688 * _252));
    float _699 = fma(_690, _268, fma(_689, _267, _688 * _266));
    float _703 = inversesqrt(dot(vec3(_693, _696, _699), vec3(_693, _696, _699)));
    float _719 = ((((_617 * _607) * cbMtdParam._m0[19u].x) + (((_593 * _391) * _603) * cbMtdParam._m0[18u].z)) + _639) + (((_693 * _403) * _703) * cbMtdParam._m0[18u].w);
    float _722 = ((((_617 * _610) * cbMtdParam._m0[19u].x) + (((_596 * _391) * _603) * cbMtdParam._m0[18u].z)) + _640) + (((_696 * _403) * _703) * cbMtdParam._m0[18u].w);
    float _725 = fma(_646, _266, fma(_722, _252, _719 * _219));
    float _728 = fma(_646, _267, fma(_722, _253, _719 * _220));
    float _731 = fma(_646, _268, fma(_722, _254, _719 * _221));
    float _735 = inversesqrt(dot(vec3(_725, _728, _731), vec3(_725, _728, _731)));
    float _736 = _735 * _725;
    float _737 = _735 * _728;
    float _738 = _735 * _731;
    float _4023 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _739 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _4034 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _740 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _4045 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _4056 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _4067 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _4078 = isnan(0.0) ? cbMtdParam._m0[20u].x : (isnan(cbMtdParam._m0[20u].x) ? 0.0 : max(cbMtdParam._m0[20u].x, 0.0));
    float _744 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _760 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _800 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _810 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _800);
    float _811 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _800);
    float _812 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _800);
    float _816 = inversesqrt(dot(vec3(_810, _811, _812), vec3(_810, _811, _812)));
    float _817 = _810 * _816;
    float _818 = _811 * _816;
    float _819 = _812 * _816;
    float _825 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _826 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _844 = fma(_738, cbSceneParam._m0[5u].z, fma(_737, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _736));
    float _847 = fma(_738, cbSceneParam._m0[6u].z, fma(_737, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _736));
    float _850 = fma(_738, cbSceneParam._m0[7u].z, fma(_737, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _736));
    uint _863 = uint(roundEven(NORMAL.w)) * 13u;
    uint _865 = (_863 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _871 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * cbInstanceData._m0[_865].x;
    float _872 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * cbInstanceData._m0[_865].y;
    float _873 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * cbInstanceData._m0[_865].z;
    float _4089 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _874 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _4100 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _875 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _4111 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _876 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _877 = 1.0 - _744;
    float _878 = _874 * _877;
    float _879 = _875 * _877;
    float _880 = _876 * _877;
    float _885 = (_874 + (-0.039999999105930328369140625)) * _744;
    float _886 = (_875 + (-0.039999999105930328369140625)) * _744;
    float _887 = (_876 + (-0.039999999105930328369140625)) * _744;
    float _888 = _885 + 0.039999999105930328369140625;
    float _890 = _886 + 0.039999999105930328369140625;
    float _891 = _887 + 0.039999999105930328369140625;
    vec4 _900 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _825, cbSceneParam._m0[86u].y * _826));
    float _903 = _900.x * TEXCOORD_7.w;
    float _904 = dot(vec3(_736, _737, _738), vec3(_817, _818, _819));
    float _907 = _904 * 2.0;
    float _911 = (_907 * _736) - _817;
    float _912 = (_907 * _737) - _818;
    float _913 = (_907 * _738) - _819;
    float _917 = abs(dot(vec3(_817, _818, _819), vec3(_736, _737, _738)));
    float _4122 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _919 = sqrt(_740);
    float _932 = exp2((_919 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_919 * 3.0));
    float _938 = (1.0 - _932) * ((_919 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _939 = _932 * _919;
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1277;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1002 = fma(_975, cbModelParam._m0[26u].z, fma(_971, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _967));
        float _1006 = fma(_975, cbModelParam._m0[27u].z, fma(_971, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _967));
        float _1010 = fma(_975, cbModelParam._m0[28u].z, fma(_971, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _967));
        float _1035 = _967 + _736;
        float _1036 = _971 + _737;
        float _1037 = _975 + _738;
        float _1047 = fma(_1037, cbModelParam._m0[26u].z, fma(_1036, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1035)) - _1002;
        float _1048 = fma(_1037, cbModelParam._m0[27u].z, fma(_1036, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1035)) - _1006;
        float _1049 = fma(_1037, cbModelParam._m0[28u].z, fma(_1036, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1035)) - _1010;
        float _1053 = inversesqrt(dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049)));
        float _1066 = ((_1053 * _1047) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1002 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1067 = ((_1053 * _1048) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1006 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1068 = ((_1053 * _1049) / cbModelParam._m0[34u].z) + ((((((_1010 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        float _1105 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1071.x + (-0.5));
        float _1107 = _1105 * (_1071.y + (-0.5));
        float _1108 = _1105 * (_1071.z + (-0.5));
        float _1115 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1078.x + (-0.5));
        float _1117 = _1115 * (_1078.y + (-0.5));
        float _1118 = _1115 * (_1078.z + (-0.5));
        float _1125 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1085.x + (-0.5));
        float _1127 = _1125 * (_1085.y + (-0.5));
        float _1128 = _1125 * (_1085.z + (-0.5));
        float _1135 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1092.x + (-0.5));
        float _1137 = _1135 * (_1092.y + (-0.5));
        float _1138 = _1135 * (_1092.z + (-0.5));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = _1106 * 0.5;
        float _1143 = _1116 * 0.5;
        float _1144 = _1126 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1159 = (dot(vec3(_736, _737, _738), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1169 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _4170 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1171 + 1.0))) + _1176) * _1139;
        float _1186 = _1107 * 0.5;
        float _1187 = _1117 * 0.5;
        float _1188 = _1127 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1202 = (dot(vec3(_736, _737, _738), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1211 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _4203 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1213 + 1.0))) + _1218) * _1140;
        float _1228 = _1108 * 0.5;
        float _1229 = _1118 * 0.5;
        float _1230 = _1128 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_736, _737, _738), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _4236 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1255 + 1.0))) + _1260) * _1141;
        _1277 = _1108;
        _1279 = _1107;
        _1280 = _1106;
        _1281 = _1118;
        _1282 = _1117;
        _1283 = _1116;
        _1284 = _1128;
        _1285 = _1127;
        _1286 = _1126;
        _1287 = _1141;
        _1288 = _1140;
        _1289 = _1139;
        _1290 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
        _1291 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
        _1292 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
    }
    else
    {
        _1277 = _1278;
        _1279 = _1278;
        _1280 = _1278;
        _1281 = _1278;
        _1282 = _1278;
        _1283 = _1278;
        _1284 = _1278;
        _1285 = _1278;
        _1286 = _1278;
        _1287 = _1278;
        _1288 = _1278;
        _1289 = _1278;
        _1290 = 0.0;
        _1291 = 0.0;
        _1292 = 0.0;
    }
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1318 = fma(_975, cbModelParam._m0[30u].z, fma(_971, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _967));
        float _1322 = fma(_975, cbModelParam._m0[31u].z, fma(_971, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _967));
        float _1326 = fma(_975, cbModelParam._m0[32u].z, fma(_971, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _967));
        float _1349 = _967 + _736;
        float _1350 = _971 + _737;
        float _1351 = _975 + _738;
        float _1361 = fma(_1351, cbModelParam._m0[30u].z, fma(_1350, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1349)) - _1318;
        float _1362 = fma(_1351, cbModelParam._m0[31u].z, fma(_1350, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1349)) - _1322;
        float _1363 = fma(_1351, cbModelParam._m0[32u].z, fma(_1350, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1349)) - _1326;
        float _1367 = inversesqrt(dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363)));
        float _1380 = ((_1367 * _1361) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1318 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1381 = ((_1367 * _1362) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1322 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1382 = ((_1367 * _1363) / cbModelParam._m0[35u].z) + ((((((_1326 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        float _1417 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1384.x + (-0.5));
        float _1419 = _1417 * (_1384.y + (-0.5));
        float _1420 = _1417 * (_1384.z + (-0.5));
        float _1427 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1391.x + (-0.5));
        float _1429 = _1427 * (_1391.y + (-0.5));
        float _1430 = _1427 * (_1391.z + (-0.5));
        float _1437 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1398.x + (-0.5));
        float _1439 = _1437 * (_1398.y + (-0.5));
        float _1440 = _1437 * (_1398.z + (-0.5));
        float _1447 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1405.x + (-0.5));
        float _1449 = _1447 * (_1405.y + (-0.5));
        float _1450 = _1447 * (_1405.z + (-0.5));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = _1418 * 0.5;
        float _1455 = _1428 * 0.5;
        float _1456 = _1438 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_736, _737, _738), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _4299 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1481 + 1.0))) + _1486) * _1451;
        float _1496 = _1419 * 0.5;
        float _1497 = _1429 * 0.5;
        float _1498 = _1439 * 0.5;
        float _1499 = dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498));
        float _1504 = (_1499 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1499);
        float _1512 = (dot(vec3(_736, _737, _738), vec3(_1504 * _1496, _1504 * _1497, _1504 * _1498)) + 1.0) * 0.5;
        float _4310 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1521 = sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4321 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _4332 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_1523 + 1.0))) + _1528) * _1452;
        float _1538 = _1420 * 0.5;
        float _1539 = _1430 * 0.5;
        float _1540 = _1440 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_736, _737, _738), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _4343 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4354 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _4365 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_1565 + 1.0))) + _1570) * _1453;
        _1587 = _1420;
        _1588 = _1419;
        _1589 = _1418;
        _1590 = _1430;
        _1591 = _1429;
        _1592 = _1428;
        _1593 = _1440;
        _1594 = _1439;
        _1595 = _1438;
        _1596 = _1453;
        _1597 = _1452;
        _1598 = _1451;
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
        _1600 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
        _1601 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
    }
    else
    {
        _1587 = _1278;
        _1588 = _1278;
        _1589 = _1278;
        _1590 = _1278;
        _1591 = _1278;
        _1592 = _1278;
        _1593 = _1278;
        _1594 = _1278;
        _1595 = _1278;
        _1596 = _1278;
        _1597 = _1278;
        _1598 = _1278;
        _1599 = 0.0;
        _1600 = 0.0;
        _1601 = 0.0;
    }
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1290)) + _1290;
    float _1612 = (cbModelParam._m0[1u].x * (_1600 - _1291)) + _1291;
    float _1613 = (cbModelParam._m0[1u].x * (_1601 - _1292)) + _1292;
    float _1634 = fma(_1613, cbSceneParam._m0[89u].z, fma(_1612, cbSceneParam._m0[89u].y, _1611 * cbSceneParam._m0[89u].x));
    float _1637 = fma(_1613, cbSceneParam._m0[90u].z, fma(_1612, cbSceneParam._m0[90u].y, _1611 * cbSceneParam._m0[90u].x));
    float _1640 = fma(_1613, cbSceneParam._m0[91u].z, fma(_1612, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1611));
    float _1655 = _911 * 0.5;
    float _1656 = _912 * 0.5;
    float _1657 = _913 * 0.5;
    float _1658 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1589, _1592, _1595, _1598));
    float _1661 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1588, _1591, _1594, _1597));
    float _1664 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1698;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1671 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1277, _1281, _1284, _1287));
        float _1675 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1279, _1282, _1285, _1288));
        float _1679 = dot(vec4(_1655, _1656, _1657, 1.0), vec4(_1280, _1283, _1286, _1289));
        float _1686 = dot(vec4(cbModelParam._m0[39u]), vec4(_1655, _1656, _1657, 1.0));
        _1698 = dot(vec3(isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1686) ? 0.0 : (isnan(0.0) ? _1686 : max(0.0, _1686))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1698 = 1.0;
    }
    float _1709;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1700 = dot(vec4(cbModelParam._m0[40u]), vec4(_1655, _1656, _1657, 1.0));
        _1709 = dot(vec3(isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1700) ? 0.0 : (isnan(0.0) ? _1700 : max(0.0, _1700))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1709 = 1.0;
    }
    float _1713 = (_1709 * cbModelParam._m0[1u].x) + (_1698 * (1.0 - cbModelParam._m0[1u].x));
    float _1723 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _740);
    float _1724 = isnan(_1723) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1723 : min(cbModelParam._m0[25u].z, _1723));
    float _1804;
    float _1806;
    float _1808;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1771 = fma(_975, cbModelParam._m0[13u].z, fma(_971, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _967)) + cbModelParam._m0[13u].w;
        float _1775 = fma(_975, cbModelParam._m0[14u].z, fma(_971, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _967)) + cbModelParam._m0[14u].w;
        float _1779 = fma(_975, cbModelParam._m0[15u].z, fma(_971, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _967)) + cbModelParam._m0[15u].w;
        float _1782 = fma(_913, cbModelParam._m0[13u].z, fma(_912, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _911));
        float _1785 = fma(_913, cbModelParam._m0[14u].z, fma(_912, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _911));
        float _1788 = fma(_913, cbModelParam._m0[15u].z, fma(_912, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _911));
        float _1816;
        if (_1782 > 0.0)
        {
            _1816 = abs((1.0 - _1771) / _1782);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1771 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1816 = frontier_phi_16_14_ladder;
        }
        float _1988;
        if (_1785 > 0.0)
        {
            _1988 = abs((1.0 - _1775) / _1785);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1775 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1988 = frontier_phi_25_21_ladder;
        }
        float _2283;
        if (_1788 > 0.0)
        {
            _2283 = abs((1.0 - _1779) / _1788);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1779 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2283 = frontier_phi_37_32_ladder;
        }
        float _2285 = isnan(_1988) ? _1816 : (isnan(_1816) ? _1988 : min(_1816, _1988));
        float _2286 = isnan(_2283) ? _2285 : (isnan(_2285) ? _2283 : min(_2285, _2283));
        float _2290 = (_2286 * _1782) + _1771;
        float _2291 = (_2286 * _1785) + _1775;
        float _2292 = (_2286 * _1788) + _1779;
        float _2293 = _2286 * 9.9999997473787516355514526367188e-05;
        float _2295 = (-1.0) - _2293;
        float _2297 = _2293 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2292 > _2297) || ((_2292 < _2295) || ((_2291 > _2297) || ((_2291 < _2295) || ((_2290 < _2295) || (_2290 > _2297))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2437 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2292, cbModelParam._m0[9u].z, fma(_2291, cbModelParam._m0[9u].y, _2290 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2292, cbModelParam._m0[10u].z, fma(_2291, cbModelParam._m0[10u].y, _2290 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2292, cbModelParam._m0[11u].z, fma(_2291, cbModelParam._m0[11u].y, _2290 * cbModelParam._m0[11u].x))), _1724);
            frontier_phi_15_37_ladder = _2437.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2437.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2437.z * cbModelParam._m0[1u].y;
        }
        _1804 = frontier_phi_15_37_ladder_1;
        _1806 = frontier_phi_15_37_ladder;
        _1808 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1792 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_911, _912, _913), _1724);
        _1804 = _1792.x * cbModelParam._m0[1u].y;
        _1806 = _1792.y * cbModelParam._m0[1u].y;
        _1808 = _1792.z * cbModelParam._m0[1u].y;
    }
    float _1812 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _740);
    float _1813 = isnan(_1812) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1812 : min(cbModelParam._m0[25u].w, _1812));
    float _1903;
    float _1905;
    float _1907;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1867 = fma(_975, cbModelParam._m0[21u].z, fma(_971, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _967)) + cbModelParam._m0[21u].w;
        float _1871 = fma(_975, cbModelParam._m0[22u].z, fma(_971, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _967)) + cbModelParam._m0[22u].w;
        float _1875 = fma(_975, cbModelParam._m0[23u].z, fma(_971, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _967)) + cbModelParam._m0[23u].w;
        float _1878 = fma(_913, cbModelParam._m0[21u].z, fma(_912, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _911));
        float _1881 = fma(_913, cbModelParam._m0[22u].z, fma(_912, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _911));
        float _1884 = fma(_913, cbModelParam._m0[23u].z, fma(_912, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _911));
        float _1993;
        if (_1878 > 0.0)
        {
            _1993 = abs((1.0 - _1867) / _1878);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1867 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1993 = frontier_phi_27_23_ladder;
        }
        float _2310;
        if (_1881 > 0.0)
        {
            _2310 = abs((1.0 - _1871) / _1881);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1871 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2310 = frontier_phi_39_34_ladder;
        }
        float _2648;
        if (_1884 > 0.0)
        {
            _2648 = abs((1.0 - _1875) / _1884);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1875 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2648 = frontier_phi_49_46_ladder;
        }
        float _2650 = isnan(_2310) ? _1993 : (isnan(_1993) ? _2310 : min(_1993, _2310));
        float _2651 = isnan(_2648) ? _2650 : (isnan(_2650) ? _2648 : min(_2650, _2648));
        float _2655 = (_2651 * _1878) + _1867;
        float _2656 = (_2651 * _1881) + _1871;
        float _2657 = (_2651 * _1884) + _1875;
        float _2658 = _2651 * 9.9999997473787516355514526367188e-05;
        float _2659 = (-1.0) - _2658;
        float _2661 = _2658 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2657 > _2661) || ((_2657 < _2659) || ((_2656 > _2661) || ((_2656 < _2659) || ((_2655 < _2659) || (_2655 > _2661))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2779 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2657, cbModelParam._m0[17u].z, fma(_2656, cbModelParam._m0[17u].y, _2655 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2657, cbModelParam._m0[18u].z, fma(_2656, cbModelParam._m0[18u].y, _2655 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2657, cbModelParam._m0[19u].z, fma(_2656, cbModelParam._m0[19u].y, _2655 * cbModelParam._m0[19u].x))), _1813);
            frontier_phi_24_49_ladder = _2779.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2779.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2779.x * cbModelParam._m0[1u].z;
        }
        _1903 = frontier_phi_24_49_ladder_2;
        _1905 = frontier_phi_24_49_ladder_1;
        _1907 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1887 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_911, _912, _913), _1813);
        _1903 = _1887.x * cbModelParam._m0[1u].z;
        _1905 = _1887.y * cbModelParam._m0[1u].z;
        _1907 = _1887.z * cbModelParam._m0[1u].z;
    }
    float _1920 = (((_938 * _888) + _939) * _903) * ((cbModelParam._m0[1u].w * (_1903 - _1804)) + _1804);
    float _1922 = (((_938 * _890) + _939) * _903) * ((cbModelParam._m0[1u].w * (_1905 - _1806)) + _1806);
    float _1924 = (((_938 * _891) + _939) * _903) * ((cbModelParam._m0[1u].w * (_1907 - _1808)) + _1808);
    float _1927 = fma(_1924, cbSceneParam._m0[89u].z, fma(_1922, cbSceneParam._m0[89u].y, _1920 * cbSceneParam._m0[89u].x));
    float _1930 = fma(_1924, cbSceneParam._m0[90u].z, fma(_1922, cbSceneParam._m0[90u].y, _1920 * cbSceneParam._m0[90u].x));
    float _1933 = fma(_1924, cbSceneParam._m0[91u].z, fma(_1922, cbSceneParam._m0[91u].y, _1920 * cbSceneParam._m0[91u].x));
    float _1967 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1971 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1975 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1979 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1980 = _1967 / _1979;
    float _1981 = _1971 / _1979;
    float _1982 = _1975 / _1979;
    float _2129;
    float _2130;
    float _2131;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2009 = ((uint(_1982 > cbSceneParam._m0[59u].y) + uint(_1982 > cbSceneParam._m0[59u].x)) + uint(_1982 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2010 = _2009 + 43u;
        uint _2018 = _2009 + 44u;
        uint _2026 = _2009 + 45u;
        uint _2034 = _2009 + 46u;
        float _2045 = fma(_1979, cbSceneParam._m0[_2010].w, fma(_1975, cbSceneParam._m0[_2010].z, fma(_1971, cbSceneParam._m0[_2010].y, _1967 * cbSceneParam._m0[_2010].x)));
        float _2049 = fma(_1979, cbSceneParam._m0[_2018].w, fma(_1975, cbSceneParam._m0[_2018].z, fma(_1971, cbSceneParam._m0[_2018].y, _1967 * cbSceneParam._m0[_2018].x)));
        float _2057 = fma(_1979, cbSceneParam._m0[_2034].w, fma(_1975, cbSceneParam._m0[_2034].z, fma(_1971, cbSceneParam._m0[_2034].y, _1967 * cbSceneParam._m0[_2034].x)));
        float _2062 = cbSceneParam._m0[33u].z * _2057;
        float _2064 = cbSceneParam._m0[33u].w * _2057;
        float _2067 = fma(_1979, cbSceneParam._m0[_2026].w, fma(_1975, cbSceneParam._m0[_2026].z, fma(_1971, cbSceneParam._m0[_2026].y, _1967 * cbSceneParam._m0[_2026].x))) / _2057;
        float _2115 = (cbSceneParam._m0[33u].x - sqrt(((_1981 * _1981) + (_1980 * _1980)) + (_1982 * _1982))) * cbSceneParam._m0[33u].y;
        float _4491 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2122 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2062 + _2045) / _2057, (_2064 + _2049) / _2057), _2067), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2064 + _2045) / _2057, (_2049 - _2062) / _2057), _2067), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2045 - _2062) / _2057, (_2049 - _2064) / _2057), _2067), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2045 - _2064) / _2057, (_2062 + _2049) / _2057), _2067), 0.0)).x), vec4(0.25)));
        _2129 = 1.0 - (_2122 * cbSceneParam._m0[34u].x);
        _2130 = 1.0 - (_2122 * cbSceneParam._m0[34u].y);
        _2131 = 1.0 - (_2122 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2129 = 1.0;
        _2130 = 1.0;
        _2131 = 1.0;
    }
    float _2195;
    float _2197;
    float _2199;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2183 = fma(_1979, cbSceneParam._m0[63u].w, fma(_1975, cbSceneParam._m0[63u].z, fma(_1971, cbSceneParam._m0[63u].y, _1967 * cbSceneParam._m0[63u].x)));
        float _2184 = fma(_1979, cbSceneParam._m0[60u].w, fma(_1975, cbSceneParam._m0[60u].z, fma(_1971, cbSceneParam._m0[60u].y, _1967 * cbSceneParam._m0[60u].x))) / _2183;
        float _2185 = fma(_1979, cbSceneParam._m0[61u].w, fma(_1975, cbSceneParam._m0[61u].z, fma(_1971, cbSceneParam._m0[61u].y, _1967 * cbSceneParam._m0[61u].x))) / _2183;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2184 >= cbSceneParam._m0[64u].x) && (_2185 >= cbSceneParam._m0[64u].y)) && (_2184 <= cbSceneParam._m0[64u].z)) && (_2185 <= cbSceneParam._m0[64u].w))
        {
            float _2323 = fma(_1979, cbSceneParam._m0[62u].w, fma(_1975, cbSceneParam._m0[62u].z, fma(_1971, cbSceneParam._m0[62u].y, _1967 * cbSceneParam._m0[62u].x))) / _2183;
            float _2327 = isnan(cbSceneParam._m0[41u].w) ? _2323 : (isnan(_2323) ? cbSceneParam._m0[41u].w : max(_2323, cbSceneParam._m0[41u].w));
            float _2370 = (cbSceneParam._m0[33u].x - sqrt(((_1981 * _1981) + (_1980 * _1980)) + (_1982 * _1982))) * cbSceneParam._m0[33u].y;
            float _4507 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
            float _2377 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2184, cbSceneParam._m0[33u].w + _2185), _2327), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2184, _2185 - cbSceneParam._m0[33u].z), _2327), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2184 - cbSceneParam._m0[33u].z, _2185 - cbSceneParam._m0[33u].w), _2327), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2184 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2185), _2327), 0.0)).x), vec4(0.25)));
            float _2381 = 1.0 - (_2377 * cbSceneParam._m0[34u].x);
            float _2382 = 1.0 - (_2377 * cbSceneParam._m0[34u].y);
            float _2383 = 1.0 - (_2377 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2382) ? _2130 : (isnan(_2130) ? _2382 : min(_2130, _2382));
            frontier_phi_36_35_ladder_1 = isnan(_2383) ? _2131 : (isnan(_2131) ? _2383 : min(_2131, _2383));
            frontier_phi_36_35_ladder_2 = isnan(_2381) ? _2129 : (isnan(_2129) ? _2381 : min(_2129, _2381));
        }
        else
        {
            frontier_phi_36_35_ladder = _2130;
            frontier_phi_36_35_ladder_1 = _2131;
            frontier_phi_36_35_ladder_2 = _2129;
        }
        _2195 = frontier_phi_36_35_ladder_2;
        _2197 = frontier_phi_36_35_ladder;
        _2199 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2195 = _2129;
        _2197 = _2130;
        _2199 = _2131;
    }
    uvec4 _2204 = floatBitsToUint(cbInstanceData._m0[_863 + 5u]);
    uint _2206 = _2204.x * 14u;
    uint _2207 = _2206 + 13u;
    float _2214 = _903 + (-1.0);
    float _2219 = (cbLight._m0[_2207].x * _2214) + 1.0;
    float _2220 = (cbLight._m0[_2207].y * _2214) + 1.0;
    float _2221 = (cbLight._m0[_2207].z * _2214) + 1.0;
    float _2222 = (cbLight._m0[_2207].w * _2214) + 1.0;
    uint _2223 = _2206 + 5u;
    float _2229 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
    uint _2233 = _2206 + 4u;
    float _2242 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
    uint _2246 = _2206 | 1u;
    float _2257 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_736, _737, _738));
    float _2260 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_736, _737, _738));
    float _4543 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _4554 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2265 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * 0.3183098733425140380859375;
    float _2267 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * 0.3183098733425140380859375;
    float _2274 = ((cbLight._m0[_2223].x * _2229) * _2267) + (((cbLight._m0[_2233].x * _2195) * _2242) * _2265);
    float _2275 = ((_2229 * cbLight._m0[_2223].y) * _2267) + (((cbLight._m0[_2233].y * _2197) * _2242) * _2265);
    float _2276 = ((_2229 * cbLight._m0[_2223].z) * _2267) + (((cbLight._m0[_2233].z * _2199) * _2242) * _2265);
    uvec4 _2280 = floatBitsToUint(cbLight._m0[_2206 + 12u]);
    bool _2282 = _2280.x == 0u;
    float _2384;
    float _2386;
    float _2388;
    if (_2282)
    {
        _2384 = _2274;
        _2386 = _2275;
        _2388 = _2276;
    }
    else
    {
        uint _2392 = _2206 + 6u;
        float _2408 = (dot(vec3(cbLight._m0[_2206 + 2u].xyz), vec3(_736, _737, _738)) * 0.5) + 0.5;
        float _2409 = _2408 * _2408;
        float _4565 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2410 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2411 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
        _2384 = (((cbLight._m0[_2392].x * 0.3183098733425140380859375) * _2410) * _2411) + _2274;
        _2386 = (((cbLight._m0[_2392].y * 0.3183098733425140380859375) * _2410) * _2411) + _2275;
        _2388 = (((cbLight._m0[_2392].z * 0.3183098733425140380859375) * _2410) * _2411) + _2276;
    }
    bool _2391 = _2280.y == 0u;
    float _2446;
    float _2448;
    float _2450;
    if (_2391)
    {
        _2446 = _2384;
        _2448 = _2386;
        _2450 = _2388;
    }
    else
    {
        uint _2619 = _2206 + 7u;
        float _2635 = (dot(vec3(cbLight._m0[_2206 + 3u].xyz), vec3(_736, _737, _738)) * 0.5) + 0.5;
        float _2636 = _2635 * _2635;
        float _4581 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2637 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _2638 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
        _2446 = (((cbLight._m0[_2619].x * 0.3183098733425140380859375) * _2637) * _2638) + _2384;
        _2448 = (((cbLight._m0[_2619].y * 0.3183098733425140380859375) * _2637) * _2638) + _2386;
        _2450 = (((cbLight._m0[_2619].z * 0.3183098733425140380859375) * _2637) * _2638) + _2388;
    }
    uint _2453 = _2206 + 8u;
    float _2466 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2206].w)) * _740) * 0.949999988079071044921875);
    float _2467 = _2466 * _2466;
    float _2468 = cbLight._m0[_2206].x + _817;
    float _2469 = cbLight._m0[_2206].y + _818;
    float _2470 = cbLight._m0[_2206].z + _819;
    float _2474 = inversesqrt(dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470)));
    float _2475 = _2474 * _2468;
    float _2476 = _2474 * _2469;
    float _2477 = _2474 * _2470;
    float _2478 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2206].xyz));
    float _4597 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2481 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _4608 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _2482 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
    float _2483 = dot(vec3(_736, _737, _738), vec3(_2475, _2476, _2477));
    float _4619 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2486 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
    float _2487 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_2475, _2476, _2477));
    float _4630 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2491 = _2467 * _2467;
    float _2495 = ((_2486 * _2486) * (_2491 + (-1.0))) + 1.0;
    float _2503 = exp2(log2(1.0 - (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) * 5.0);
    float _2504 = 0.959999978542327880859375 - _885;
    float _2506 = 0.959999978542327880859375 - _886;
    float _2507 = 0.959999978542327880859375 - _887;
    float _2514 = 1.0 - _2467;
    float _2525 = (0.5 / (((_2482 * ((_2481 * _2514) + _2467)) + 9.9999999392252902907785028219223e-09) + (((_2482 * _2514) + _2467) * _2481))) * _2481;
    float _4641 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2527 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2491 / ((_2495 * _2495) * 3.141590118408203125));
    uint _2541 = _2206 + 9u;
    float _2552 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2246].w)) * _740) * 0.949999988079071044921875);
    float _2553 = _2552 * _2552;
    float _2554 = cbLight._m0[_2246].x + _817;
    float _2555 = cbLight._m0[_2246].y + _818;
    float _2556 = cbLight._m0[_2246].z + _819;
    float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
    float _2561 = _2560 * _2554;
    float _2562 = _2560 * _2555;
    float _2563 = _2560 * _2556;
    float _2564 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2246].xyz));
    float _4652 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2567 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
    float _2568 = dot(vec3(_736, _737, _738), vec3(_2561, _2562, _2563));
    float _4663 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2571 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
    float _2572 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_2561, _2562, _2563));
    float _4674 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2576 = _2553 * _2553;
    float _2580 = ((_2571 * _2571) * (_2576 + (-1.0))) + 1.0;
    float _2587 = exp2(log2(1.0 - (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) * 5.0);
    float _2594 = 1.0 - _2553;
    float _2604 = (0.5 / (((_2482 * ((_2567 * _2594) + _2553)) + 9.9999999392252902907785028219223e-09) + (((_2482 * _2594) + _2553) * _2567))) * _2567;
    float _4685 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
    float _2606 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2576 / ((_2580 * _2580) * 3.141590118408203125));
    float _2616 = (((((_2587 * _2504) + _888) * cbLight._m0[_2541].x) * _2606) * _2229) + ((((cbLight._m0[_2453].x * _2195) * ((_2503 * _2504) + _888)) * _2527) * _2242);
    float _2617 = (((((_2587 * _2506) + _890) * cbLight._m0[_2541].y) * _2606) * _2229) + ((((cbLight._m0[_2453].y * _2197) * ((_2503 * _2506) + _890)) * _2527) * _2242);
    float _2618 = (((((_2587 * _2507) + _891) * cbLight._m0[_2541].z) * _2606) * _2229) + ((((cbLight._m0[_2453].z * _2199) * ((_2503 * _2507) + _891)) * _2527) * _2242);
    float _2674;
    float _2676;
    float _2678;
    if (_2282)
    {
        _2674 = _2616;
        _2676 = _2617;
        _2678 = _2618;
    }
    else
    {
        uint _2680 = _2206 + 2u;
        uint _2684 = _2206 + 10u;
        float _2698 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2680].w)) * _740) * 0.949999988079071044921875);
        float _2699 = _2698 * _2698;
        float _2700 = cbLight._m0[_2680].x + _817;
        float _2701 = cbLight._m0[_2680].y + _818;
        float _2702 = cbLight._m0[_2680].z + _819;
        float _2706 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
        float _2707 = _2706 * _2700;
        float _2708 = _2706 * _2701;
        float _2709 = _2706 * _2702;
        float _2710 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2680].xyz));
        float _4696 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2713 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2714 = dot(vec3(_736, _737, _738), vec3(_2707, _2708, _2709));
        float _4707 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2717 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
        float _2718 = dot(vec3(cbLight._m0[_2680].xyz), vec3(_2707, _2708, _2709));
        float _4718 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2722 = _2699 * _2699;
        float _2726 = ((_2717 * _2717) * (_2722 + (-1.0))) + 1.0;
        float _2733 = exp2(log2(1.0 - (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0)))) * 5.0);
        float _2740 = 1.0 - _2699;
        float _2750 = (0.5 / (((_2482 * ((_2713 * _2740) + _2699)) + 9.9999999392252902907785028219223e-09) + (((_2482 * _2740) + _2699) * _2713))) * _2713;
        float _4729 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2752 = (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2722 / ((_2726 * _2726) * 3.141590118408203125));
        float _2753 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
        _2674 = (((((_2733 * _2504) + _888) * cbLight._m0[_2684].x) * _2752) * _2753) + _2616;
        _2676 = (((((_2733 * _2506) + _890) * cbLight._m0[_2684].y) * _2752) * _2753) + _2617;
        _2678 = (((((_2733 * _2507) + _891) * cbLight._m0[_2684].z) * _2752) * _2753) + _2618;
    }
    float _2784;
    float _2786;
    float _2788;
    if (_2391)
    {
        _2784 = _2674;
        _2786 = _2676;
        _2788 = _2678;
    }
    else
    {
        uint _2795 = _2206 + 3u;
        uint _2799 = _2206 + 11u;
        float _2813 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2795].w)) * _740) * 0.949999988079071044921875);
        float _2814 = _2813 * _2813;
        float _2815 = cbLight._m0[_2795].x + _817;
        float _2816 = cbLight._m0[_2795].y + _818;
        float _2817 = cbLight._m0[_2795].z + _819;
        float _2821 = inversesqrt(dot(vec3(_2815, _2816, _2817), vec3(_2815, _2816, _2817)));
        float _2822 = _2821 * _2815;
        float _2823 = _2821 * _2816;
        float _2824 = _2821 * _2817;
        float _2825 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2795].xyz));
        float _4745 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2828 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
        float _2829 = dot(vec3(_736, _737, _738), vec3(_2822, _2823, _2824));
        float _4756 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2832 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
        float _2833 = dot(vec3(cbLight._m0[_2795].xyz), vec3(_2822, _2823, _2824));
        float _4767 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2837 = _2814 * _2814;
        float _2841 = ((_2832 * _2832) * (_2837 + (-1.0))) + 1.0;
        float _2848 = exp2(log2(1.0 - (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0)))) * 5.0);
        float _2855 = 1.0 - _2814;
        float _2865 = (0.5 / (((_2482 * ((_2828 * _2855) + _2814)) + 9.9999999392252902907785028219223e-09) + (((_2482 * _2855) + _2814) * _2828))) * _2828;
        float _4778 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2867 = (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2837 / ((_2841 * _2841) * 3.141590118408203125));
        float _2868 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
        _2784 = (((((_2848 * _2504) + _888) * cbLight._m0[_2799].x) * _2867) * _2868) + _2674;
        _2786 = (((((_2848 * _2506) + _890) * cbLight._m0[_2799].y) * _2867) * _2868) + _2676;
        _2788 = (((((_2848 * _2507) + _891) * cbLight._m0[_2799].z) * _2867) * _2868) + _2678;
    }
    float _2933;
    float _2935;
    float _2937;
    float _2939;
    float _2941;
    float _2943;
    if (_2204.y == 0u)
    {
        uvec4 _2889 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2890 = _2889.x;
        uint _2901 = uint((float(_2889.y) * floor(float(uint(cbSceneParam._m0[85u].y * _826) / _2890))) + floor(float(uint(cbSceneParam._m0[85u].x * _825) / _2890)));
        float _2911 = (log2(_1982 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2912 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        uint _2915 = uint(isnan(14.0) ? _2912 : (isnan(_2912) ? 14.0 : min(_2912, 14.0)));
        uvec4 _2920 = texelFetch(g_lightClusterGridBuffer, int(((_2915 << 2u) + (_2901 << 6u)) >> 2u));
        uint _2921 = _2920.x;
        uint _2922 = _2889.z;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        if (((((1u << ((_2922 >> 4u) & 15u)) + 4294967295u) & _2921) == 0u) || ((_2922 & 240u) == 0u))
        {
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
            _3011 = 0.0;
            _3013 = 0.0;
            _3015 = 0.0;
        }
        else
        {
            float _3006;
            float _3008;
            float _3010;
            float _3012;
            float _3014;
            float _3016;
            float _3149 = 0.0;
            float _3150 = 0.0;
            float _3151 = 0.0;
            float _3152 = 0.0;
            float _3153 = 0.0;
            float _3154 = 0.0;
            uint _3155 = 0u;
            uint _3164;
            bool _3165;
            for (;;)
            {
                _3164 = texelFetch(g_lightClassification, int((((_2915 << 5u) + (_2901 << 9u)) + (_3155 << 2u)) >> 2u)).x;
                _3165 = _3164 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3165)
                {
                    frontier_phi_68_pred = _3154;
                    frontier_phi_68_pred_1 = _3153;
                    frontier_phi_68_pred_2 = _3152;
                    frontier_phi_68_pred_3 = _3150;
                    frontier_phi_68_pred_4 = _3149;
                    frontier_phi_68_pred_5 = _3151;
                }
                else
                {
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    uint _3279;
                    _3273 = _3149;
                    _3274 = _3150;
                    _3275 = _3151;
                    _3276 = _3152;
                    _3277 = _3153;
                    _3278 = _3154;
                    _3279 = _3164;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    for (;;)
                    {
                        uint _3283 = uint(findLSB(_3279)) + (_3155 << 5u);
                        uint _3280 = (_3279 + 4294967295u) & _3279;
                        uint _3285 = _3283 * 48u;
                        vec4 _3299 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3285)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 3u)).x));
                        uint _3305 = (_3283 * 48u) + 4u;
                        vec4 _3318 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3305)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 3u)).x));
                        uint _3324 = (_3283 * 48u) + 8u;
                        vec3 _3335 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3324)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 2u)).x));
                        float _3339 = _3299.x - _1980;
                        float _3340 = _3299.y - _1981;
                        float _3341 = _3299.z - _1982;
                        float _3342 = dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341));
                        float _3345 = inversesqrt(_3342);
                        float _3346 = _3345 * _3339;
                        float _3347 = _3345 * _3340;
                        float _3348 = _3345 * _3341;
                        float _3349 = dot(vec3(_844, _847, _850), vec3(_3346, _3347, _3348));
                        float _3354 = 1.0 - (_3342 * _3299.w);
                        float _4804 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3355 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                        float _3356 = sqrt(_3342) * _3318.w;
                        float _3358 = 1.39999997615814208984375 / (_3356 + 1.39999997615814208984375);
                        float _3359 = _3358 * _3358;
                        float _3362 = ((1.0 - _3359) * _3349) + _3359;
                        float _3365 = _3356 * _3356;
                        float _3369 = ((isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0))) * _3355) / ((_3365 * 0.699999988079071044921875) + 1.0);
                        float _3373 = (-0.0) - _1980;
                        float _3374 = (-0.0) - _1981;
                        float _3375 = (-0.0) - _1982;
                        float _3379 = inversesqrt(dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375)));
                        float _3380 = _3379 * _3373;
                        float _3381 = _3379 * _3374;
                        float _3382 = _3379 * _3375;
                        float _3389 = exp2(log2(1.0 / ((_3365 * 3.5) + 5.0)) * 0.25);
                        float _3390 = 1.0 - _919;
                        float _3397 = sqrt(1.0 - ((1.0 - (_3390 * _3390)) * (1.0 - (_3389 * _3389))));
                        float _3398 = _3397 * _3397;
                        float _3399 = _3398 * _3398;
                        float _3400 = _3380 + _3346;
                        float _3401 = _3381 + _3347;
                        float _3402 = _3382 + _3348;
                        float _3406 = inversesqrt(dot(vec3(_3400, _3401, _3402), vec3(_3400, _3401, _3402)));
                        float _3410 = dot(vec3(_844, _847, _850), vec3(_3380, _3381, _3382));
                        float _4820 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3413 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                        float _3414 = dot(vec3(_844, _847, _850), vec3(_3406 * _3400, _3406 * _3401, _3406 * _3402));
                        float _4831 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                        float _3417 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                        float _3421 = ((_3417 * _3417) * (_3399 + (-1.0))) + 1.0;
                        float _3422 = _3358 * _3398;
                        float _3423 = _3422 * _3422;
                        float _3426 = ((1.0 - _3423) * _3349) + _3423;
                        float _4842 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                        float _3427 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                        float _3428 = 1.0 - _3398;
                        float _3438 = (0.5 / (((_3427 * ((_3413 * _3428) + _3398)) + 9.9999999392252902907785028219223e-09) + (((_3427 * _3428) + _3398) * _3413))) * _3427;
                        float _4853 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3449 = (((_3399 * 3.1415927410125732421875) * (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0)))) / ((_3421 * _3421) * ((_3365 * 2.1991131305694580078125) + 3.141590118408203125))) * _3355;
                        _3208 = (_3369 * _3318.x) + _3276;
                        _3209 = (_3369 * _3318.y) + _3277;
                        _3210 = (_3369 * _3318.z) + _3278;
                        _3205 = (_3449 * _3335.x) + _3273;
                        _3206 = (_3449 * _3335.y) + _3274;
                        _3207 = (_3449 * _3335.z) + _3275;
                        if (_3280 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3273 = _3205;
                            _3274 = _3206;
                            _3275 = _3207;
                            _3276 = _3208;
                            _3277 = _3209;
                            _3278 = _3210;
                            _3279 = _3280;
                        }
                    }
                    frontier_phi_68_pred = _3210;
                    frontier_phi_68_pred_1 = _3209;
                    frontier_phi_68_pred_2 = _3208;
                    frontier_phi_68_pred_3 = _3206;
                    frontier_phi_68_pred_4 = _3205;
                    frontier_phi_68_pred_5 = _3207;
                }
                _3016 = frontier_phi_68_pred;
                _3014 = frontier_phi_68_pred_1;
                _3012 = frontier_phi_68_pred_2;
                _3008 = frontier_phi_68_pred_3;
                _3006 = frontier_phi_68_pred_4;
                _3010 = frontier_phi_68_pred_5;
                uint _3156 = _3155 + 1u;
                if (_3156 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3149 = _3006;
                    _3150 = _3008;
                    _3151 = _3010;
                    _3152 = _3012;
                    _3153 = _3014;
                    _3154 = _3016;
                    _3155 = _3156;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
            _3011 = _3012;
            _3013 = _3014;
            _3015 = _3016;
        }
        uvec4 _3019 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3020 = _3019.z;
        uint _3022 = (_3020 >> 8u) & 15u;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        float _3125;
        float _3127;
        if (((4294967295u << _3022) & _2921) == 0u)
        {
            _3117 = _3005;
            _3119 = _3007;
            _3121 = _3009;
            _3123 = _3011;
            _3125 = _3013;
            _3127 = _3015;
        }
        else
        {
            float _3142 = inversesqrt(dot(vec3(_1980, _1981, _1982), vec3(_1980, _1981, _1982)));
            float _3143 = _3142 * _1980;
            float _3144 = _3142 * _1981;
            float _3145 = _3142 * _1982;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3022 < ((_3020 >> 12u) & 15u))
            {
                float _3118;
                float _3120;
                float _3122;
                float _3124;
                float _3126;
                float _3128;
                float _3256 = _3005;
                float _3257 = _3007;
                float _3258 = _3009;
                float _3259 = _3011;
                float _3260 = _3013;
                float _3261 = _3015;
                uint _3262 = _3022;
                uint _3271;
                bool _3272;
                for (;;)
                {
                    _3271 = texelFetch(g_lightClassification, int((((_2915 << 5u) + (_2901 << 9u)) + (_3262 << 2u)) >> 2u)).x;
                    _3272 = _3271 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3272)
                    {
                        frontier_phi_74_pred = _3258;
                        frontier_phi_74_pred_1 = _3257;
                        frontier_phi_74_pred_2 = _3256;
                        frontier_phi_74_pred_3 = _3261;
                        frontier_phi_74_pred_4 = _3260;
                        frontier_phi_74_pred_5 = _3259;
                    }
                    else
                    {
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3467 = _3256;
                        float _3468 = _3257;
                        float _3469 = _3258;
                        float _3470 = _3259;
                        float _3471 = _3260;
                        float _3472 = _3261;
                        uint _3473 = _3271;
                        uint _3474;
                        vec4 _3499;
                        float _3500;
                        vec4 _3515;
                        vec3 _3527;
                        vec4 _3543;
                        vec4 _3558;
                        float _3605;
                        bool _3606;
                        for (;;)
                        {
                            uint _3484 = ((_3262 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3473));
                            _3474 = (_3473 + 4294967295u) & _3473;
                            uint _3486 = _3484 * 40u;
                            _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            _3500 = _3499.w;
                            uint _3502 = (_3484 * 40u) + 4u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            uint _3517 = (_3484 * 40u) + 8u;
                            _3527 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x));
                            uint _3530 = (_3484 * 40u) + 16u;
                            _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            uint _3545 = (_3484 * 40u) + 20u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3561 = (_3484 * 40u) + 24u;
                            vec4 _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3580 = (_3484 * 40u) + 28u;
                            vec4 _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            _3605 = fma(_1982, _3593.z, fma(_1981, _3593.y, _3593.x * _1980)) + _3593.w;
                            _3606 = !((fma(_1982, _3574.z, fma(_1981, _3574.y, _3574.x * _1980)) + _3574.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3606)
                            {
                                float _3633 = _3499.x - _1980;
                                float _3634 = _3499.y - _1981;
                                float _3635 = _3499.z - _1982;
                                float _3636 = dot(vec3(_3633, _3634, _3635), vec3(_3633, _3634, _3635));
                                float _3639 = inversesqrt(_3636);
                                float _3640 = _3639 * _3633;
                                float _3641 = _3639 * _3634;
                                float _3642 = _3639 * _3635;
                                float _3646 = 1.0 - (_3636 / (_3500 * _3500));
                                float _4864 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3647 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                                float _3651 = sqrt(_3636) * _3515.w;
                                float _3653 = 1.39999997615814208984375 / (_3651 + 1.39999997615814208984375);
                                float _3654 = _3653 * _3653;
                                float _3657 = ((1.0 - _3654) * dot(vec3(_3640, _3641, _3642), vec3(_844, _847, _850))) + _3654;
                                float _3660 = _3651 * _3651;
                                float _3664 = (fma(_1982, _3543.z, fma(_1981, _3543.y, _3543.x * _1980)) + _3543.w) / _3605;
                                float _3665 = (fma(_1982, _3558.z, fma(_1981, _3558.y, _3558.x * _1980)) + _3558.w) / _3605;
                                float _3669 = 1.0 - dot(vec2(_3664, _3665), vec2(_3664, _3665));
                                float _4880 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3670 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3671 = _3670 * (((isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0))) * _3647) / ((_3660 * 0.699999988079071044921875) + 1.0));
                                float _3683 = exp2(log2(1.0 / ((_3660 * 3.5) + 5.0)) * 0.25);
                                float _3684 = 1.0 - _919;
                                float _3691 = sqrt(1.0 - ((1.0 - (_3684 * _3684)) * (1.0 - (_3683 * _3683))));
                                float _3692 = _3691 * _3691;
                                float _3693 = _3692 * _3692;
                                float _3694 = _3640 - _3143;
                                float _3695 = _3641 - _3144;
                                float _3696 = _3642 - _3145;
                                float _3700 = inversesqrt(dot(vec3(_3694, _3695, _3696), vec3(_3694, _3695, _3696)));
                                float _3704 = dot(vec3(_844, _847, _850), vec3((-0.0) - _3143, (-0.0) - _3144, (-0.0) - _3145));
                                float _4891 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3707 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                                float _3708 = dot(vec3(_844, _847, _850), vec3(_3700 * _3694, _3700 * _3695, _3700 * _3696));
                                float _4902 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3711 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                                float _3715 = ((_3711 * _3711) * (_3693 + (-1.0))) + 1.0;
                                float _3716 = _3653 * _3692;
                                float _3717 = _3716 * _3716;
                                float _3723 = ((1.0 - _3717) * dot(vec3(_844, _847, _850), vec3(_3640, _3641, _3642))) + _3717;
                                float _4913 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3724 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
                                float _3725 = 1.0 - _3692;
                                float _3735 = (0.5 / (((_3724 * ((_3707 * _3725) + _3692)) + 9.9999999392252902907785028219223e-09) + (((_3724 * _3725) + _3692) * _3707))) * _3724;
                                float _4924 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3745 = (_3670 * _3647) * (((_3693 * 3.1415927410125732421875) * (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0)))) / ((_3715 * _3715) * ((_3660 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3745 * _3527.z;
                                frontier_phi_80_pred_1 = _3745 * _3527.y;
                                frontier_phi_80_pred_2 = _3745 * _3527.x;
                                frontier_phi_80_pred_3 = _3671 * _3515.z;
                                frontier_phi_80_pred_4 = _3671 * _3515.y;
                                frontier_phi_80_pred_5 = _3671 * _3515.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3751 = frontier_phi_80_pred;
                            _3750 = frontier_phi_80_pred_1;
                            _3749 = frontier_phi_80_pred_2;
                            _3754 = frontier_phi_80_pred_3;
                            _3753 = frontier_phi_80_pred_4;
                            _3752 = frontier_phi_80_pred_5;
                            _3457 = _3752 + _3470;
                            _3458 = _3753 + _3471;
                            _3459 = _3754 + _3472;
                            _3454 = _3749 + _3467;
                            _3455 = _3750 + _3468;
                            _3456 = _3751 + _3469;
                            if (_3474 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3474;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3456;
                        frontier_phi_74_pred_1 = _3455;
                        frontier_phi_74_pred_2 = _3454;
                        frontier_phi_74_pred_3 = _3459;
                        frontier_phi_74_pred_4 = _3458;
                        frontier_phi_74_pred_5 = _3457;
                    }
                    _3122 = frontier_phi_74_pred;
                    _3120 = frontier_phi_74_pred_1;
                    _3118 = frontier_phi_74_pred_2;
                    _3128 = frontier_phi_74_pred_3;
                    _3126 = frontier_phi_74_pred_4;
                    _3124 = frontier_phi_74_pred_5;
                    uint _3263 = _3262 + 1u;
                    if (_3263 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3256 = _3118;
                        _3257 = _3120;
                        _3258 = _3122;
                        _3259 = _3124;
                        _3260 = _3126;
                        _3261 = _3128;
                        _3262 = _3263;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3126;
                frontier_phi_62_63_ladder_1 = _3124;
                frontier_phi_62_63_ladder_2 = _3122;
                frontier_phi_62_63_ladder_3 = _3128;
                frontier_phi_62_63_ladder_4 = _3120;
                frontier_phi_62_63_ladder_5 = _3118;
            }
            else
            {
                frontier_phi_62_63_ladder = _3013;
                frontier_phi_62_63_ladder_1 = _3011;
                frontier_phi_62_63_ladder_2 = _3009;
                frontier_phi_62_63_ladder_3 = _3015;
                frontier_phi_62_63_ladder_4 = _3007;
                frontier_phi_62_63_ladder_5 = _3005;
            }
            _3117 = frontier_phi_62_63_ladder_5;
            _3119 = frontier_phi_62_63_ladder_4;
            _3121 = frontier_phi_62_63_ladder_2;
            _3123 = frontier_phi_62_63_ladder_1;
            _3125 = frontier_phi_62_63_ladder;
            _3127 = frontier_phi_62_63_ladder_3;
        }
        float _3132 = isnan(1.0) ? _903 : (isnan(_903) ? 1.0 : min(_903, 1.0));
        _2933 = (_3132 * _3123) + _2446;
        _2935 = (_3132 * _3125) + _2448;
        _2937 = (_3132 * _3127) + _2450;
        _2939 = ((_3117 * _888) * _3132) + _2784;
        _2941 = ((_3119 * _890) * _3132) + _2786;
        _2943 = ((_3121 * _891) * _3132) + _2788;
    }
    else
    {
        _2933 = _2446;
        _2935 = _2448;
        _2937 = _2450;
        _2939 = _2784;
        _2941 = _2786;
        _2943 = _2788;
    }
    float _4940 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4951 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _4962 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _4973 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _2961 = ((isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0))) * (_2933 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _903))) + ((_2939 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1713)) * cbPerFrame._m0[3u].x);
    float _2962 = ((isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0))) * (_2935 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _903))) + ((_2941 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1713)) * cbPerFrame._m0[3u].x);
    float _2963 = ((isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0))) * (_2937 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _903))) + ((_2943 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1713)) * cbPerFrame._m0[3u].x);
    float _2971 = cbInstanceData._m0[_863 + 6u].w * (isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0)));
    float _2976 = _825 / cbSceneParam._m0[86u].x;
    float _2977 = _826 / cbSceneParam._m0[86u].y;
    vec4 _2991 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2976, _2977, (log2((isnan(cbSceneParam._m0[77u].w) ? _760 : (isnan(_760) ? cbSceneParam._m0[77u].w : min(_760, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2993 = _2991.x;
    float _2994 = _2991.y;
    float _2995 = _2991.z;
    float _2996 = _2991.w;
    float _3067;
    float _3069;
    float _3071;
    float _3073;
    if (_760 > cbSceneParam._m0[78u].w)
    {
        float _3030 = isnan(_760) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _760 : min(cbSceneParam._m0[80u].w, _760));
        float _3031 = _3030 / _760;
        float _3042 = _3031 * _810;
        float _3043 = _811 * _3031;
        float _3044 = (-0.0) - _3043;
        float _3045 = _3031 * _812;
        float _3047 = (cbSceneParam._m0[77u].w * _3044) / _3030;
        float _3048 = _3047 + cbSceneParam._m0[79u].w;
        float _3049 = cbSceneParam._m0[79u].w - _3043;
        float _3055 = sqrt(((_3042 * _3042) + (_3043 * _3043)) + (_3045 * _3045));
        float _3058 = (1.0 - (cbSceneParam._m0[77u].w / _3030)) * _3055;
        float _3063 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3065 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3218;
        if (abs((_3044 - _3047) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3218 = ((((_3048 > 0.0) ? exp2(_3063 * _3048) : (2.0 - exp2(_3065 * _3048))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3058;
        }
        else
        {
            float _3178 = 1.0 / cbSceneParam._m0[80u].x;
            float _3179 = isnan(_3049) ? _3048 : (isnan(_3048) ? _3049 : max(_3048, _3049));
            float _3180 = isnan(_3049) ? _3048 : (isnan(_3048) ? _3049 : min(_3048, _3049));
            float _3189 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : min(_3179, 0.0));
            float _3190 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : min(_3180, 0.0));
            _3218 = ((abs(_3055 / _3044) * cbSceneParam._m0[80u].y) * ((((_3189 - _3190) * 2.0) - ((exp2(_3063 * (isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0)))) - exp2(_3063 * (isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0))))) * _3178)) - ((exp2(_3065 * _3189) - exp2(_3065 * _3190)) * _3178))) + (_3058 * cbSceneParam._m0[80u].z);
        }
        vec4 _3220 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2976, _2977, 1.0), 0.0);
        float _3229 = exp2((_3218 * (-1.44269502162933349609375)) * (1.0 - _3220.w));
        float _3230 = log2(_3229);
        float _3246 = log2(_2996);
        _3067 = (exp2(_3246 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].x)) * _3220.x) / cbSceneParam._m0[78u].x)) + _2993;
        _3069 = (exp2(_3246 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].y)) * _3220.y) / cbSceneParam._m0[78u].y)) + _2994;
        _3071 = (exp2(_3246 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].z)) * _3220.z) / cbSceneParam._m0[78u].z)) + _2995;
        _3073 = _3229 * _2996;
    }
    else
    {
        _3067 = _2993;
        _3069 = _2994;
        _3071 = _2995;
        _3073 = _2996;
    }
    float _3085 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3086 = _3085 == 3.0;
    float _3087 = log2(_3073);
    float _3094 = exp2(_3087 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0)));
    float _3095 = exp2(_3087 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0)));
    float _3096 = exp2(_3087 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0)));
    float _3105 = (_3085 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3105 * (_3086 ? _3094 : (_3094 + (cbSceneParam._m0[72u].w * _3067)));
    SV_Target.y = _3105 * (_3086 ? _3095 : (_3095 + (cbSceneParam._m0[72u].w * _3069)));
    SV_Target.z = _3105 * (_3086 ? _3096 : (_3096 + (cbSceneParam._m0[72u].w * _3071)));
    SV_Target.w = _2971;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2971;
}


