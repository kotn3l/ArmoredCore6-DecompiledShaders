#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[21];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 6, component = 1) in float TEXCOORD_6;
layout(location = 7) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1344;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _240 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _241 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _242 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _246 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _247 = _246 * _240;
    float _248 = _246 * _241;
    float _249 = _246 * _242;
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = _253 * NORMAL.x;
    float _255 = _253 * NORMAL.y;
    float _256 = _253 * NORMAL.z;
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = _260 * TANGENT.x;
    float _262 = _260 * TANGENT.y;
    float _263 = _260 * TANGENT.z;
    float _267 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _268 = _267 * TANGENT_2.x;
    float _269 = _267 * TANGENT_2.y;
    float _270 = _267 * TANGENT_2.z;
    float _275;
    float _276;
    float _277;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _275 = (-0.0) - _254;
        _276 = (-0.0) - _255;
        _277 = (-0.0) - _256;
    }
    else
    {
        _275 = _254;
        _276 = _255;
        _277 = _256;
    }
    vec4 _315 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _327 = 1.0 - ((1.0 - _315.x) * 1.39999997615814208984375);
    float _3691 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _328 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _335 = (_328 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x)) + cbMtdParam._m0[15u].x;
    float _336 = (_328 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y)) + cbMtdParam._m0[15u].y;
    float _337 = (_328 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z)) + cbMtdParam._m0[15u].z;
    float _339 = 1.0 - ((1.0 - _315.y) * 1.39999997615814208984375);
    float _3702 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _340 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _347 = (_340 * (cbMtdParam._m0[13u].x - _335)) + _335;
    float _348 = (_340 * (cbMtdParam._m0[13u].y - _336)) + _336;
    float _349 = (_340 * (cbMtdParam._m0[13u].z - _337)) + _337;
    float _351 = 1.0 - ((1.0 - _315.z) * 1.39999997615814208984375);
    float _3713 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _352 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _381 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[19u].z;
    float _395 = ((cbMtdParam._m0[18u].y * (-1.39999997615814208984375)) * ((TEXCOORD_6 - _381) + (cbMtdParam._m0[17u].w * TEXCOORD_6))) + 1.0;
    float _3724 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _397 = 1.0 - (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)));
    float _398 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _399 = isnan(1.0) ? _398 : (isnan(_398) ? 1.0 : min(_398, 1.0));
    float _407 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5 - _381) + (cbMtdParam._m0[17u].z * TEXCOORD_5))) + 1.0;
    float _3745 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _409 = 1.0 - (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0)));
    float _410 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _411 = isnan(1.0) ? _410 : (isnan(_410) ? 1.0 : min(_410, 1.0));
    vec4 _429 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _431 = _429.x;
    float _432 = _429.y;
    float _433 = _429.z;
    float _434 = cbMtdParam._m0[12u].x * _411;
    float _436 = cbMtdParam._m0[12u].y * _411;
    float _438 = cbMtdParam._m0[12u].z * _411;
    float _458 = _409 + _397;
    float _459 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _460 = isnan(1.0) ? _459 : (isnan(_459) ? 1.0 : min(_459, 1.0));
    vec4 _478 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _483 = _478.w;
    float _484 = _478.x * cbMtdParam._m0[10u].x;
    float _485 = _478.y * cbMtdParam._m0[10u].y;
    float _486 = _478.z * cbMtdParam._m0[10u].z;
    float _506 = ((_484 - (_460 * _484)) + ((((((_431 * (cbMtdParam._m0[11u].x - _434)) * _399) + (_434 * _431)) * 4.55000019073486328125) * _460) * _484)) * ((_352 * (cbMtdParam._m0[14u].x - _347)) + _347);
    float _507 = ((((((((_432 * (cbMtdParam._m0[11u].y - _436)) * _399) + (_436 * _432)) * 4.55000019073486328125) * _460) * _485) + _485) - (_460 * _485)) * ((_352 * (cbMtdParam._m0[14u].y - _348)) + _348);
    float _508 = ((((((((_433 * (cbMtdParam._m0[11u].z - _438)) * _399) + (_438 * _433)) * 4.55000019073486328125) * _460) * _486) + _486) - (_460 * _486)) * ((_352 * (cbMtdParam._m0[14u].z - _349)) + _349);
    vec4 _525 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _529 = _525.z;
    float _533 = (_525.x * 2.0) + (-1.0);
    float _535 = (_525.y * 2.0) + (-1.0);
    float _536 = dot(vec2(_533, _535), vec2(_533, _535));
    float _3776 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _541 = sqrt(1.0 - (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))));
    float _544 = fma(_541, _275, fma(_535, _268, _533 * _247));
    float _547 = fma(_541, _276, fma(_535, _269, _533 * _248));
    float _550 = fma(_541, _277, fma(_535, _270, _533 * _249));
    float _554 = inversesqrt(dot(vec3(_544, _547, _550), vec3(_544, _547, _550)));
    float _555 = _554 * _544;
    float _556 = _554 * _547;
    float _557 = _554 * _550;
    float _569 = abs((fract(cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3787 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _570 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _575 = (_570 * _570) * (3.0 - (_570 * 2.0));
    float _576 = isnan(cbMtdParam._m0[16u].z) ? _575 : (isnan(_575) ? cbMtdParam._m0[16u].z : max(_575, cbMtdParam._m0[16u].z));
    vec4 _595 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[19u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[19u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _600 = (isnan(cbMtdParam._m0[16u].w) ? _576 : (isnan(_576) ? cbMtdParam._m0[16u].w : min(_576, cbMtdParam._m0[16u].w))) * cbMtdParam._m0[17u].y;
    vec4 _628 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _634 = (_628.x * 2.0) + (-1.0);
    float _635 = (_628.y * 2.0) + (-1.0);
    float _636 = dot(vec2(_634, _635), vec2(_634, _635));
    float _3808 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _641 = sqrt(1.0 - (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))));
    float _644 = fma(_641, _275, fma(_635, _268, _634 * _247));
    float _647 = fma(_641, _276, fma(_635, _269, _634 * _248));
    float _650 = fma(_641, _277, fma(_635, _270, _634 * _249));
    float _654 = inversesqrt(dot(vec3(_644, _647, _650), vec3(_644, _647, _650)));
    float _655 = _654 * _644;
    float _656 = _654 * _647;
    float _657 = _654 * _650;
    float _660 = fma(_657, _230, fma(_656, _229, _655 * _228));
    float _663 = fma(_657, _263, fma(_656, _262, _655 * _261));
    float _666 = fma(_657, _277, fma(_656, _276, _655 * _275));
    float _670 = inversesqrt(dot(vec3(_660, _663, _666), vec3(_660, _663, _666)));
    float _674 = fma(_557, _230, fma(_556, _229, _555 * _228));
    float _677 = fma(_557, _263, fma(_556, _262, _555 * _261));
    float _680 = fma(_557, _277, fma(_556, _276, _555 * _275));
    float _684 = inversesqrt(dot(vec3(_674, _677, _680), vec3(_674, _677, _680)));
    vec4 _700 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _706 = (_700.x * 2.0) + (-1.0);
    float _707 = (_700.y * 2.0) + (-1.0);
    float _708 = dot(vec2(_706, _707), vec2(_706, _707));
    float _3819 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _713 = sqrt(1.0 - (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))));
    vec4 _728 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _734 = (_728.x * 2.0) + (-1.0);
    float _735 = (_728.y * 2.0) + (-1.0);
    float _736 = dot(vec2(_734, _735), vec2(_734, _735));
    float _3830 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _741 = sqrt(1.0 - (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))));
    float _744 = fma(_741, _275, fma(_735, _268, _734 * _247));
    float _747 = fma(_741, _276, fma(_735, _269, _734 * _248));
    float _750 = fma(_741, _277, fma(_735, _270, _734 * _249));
    float _754 = inversesqrt(dot(vec3(_744, _747, _750), vec3(_744, _747, _750)));
    float _755 = _754 * _744;
    float _756 = _754 * _747;
    float _757 = _754 * _750;
    float _760 = fma(_757, _230, fma(_756, _229, _755 * _228));
    float _763 = fma(_757, _263, fma(_756, _262, _755 * _261));
    float _766 = fma(_757, _277, fma(_756, _276, _755 * _275));
    float _770 = inversesqrt(dot(vec3(_760, _763, _766), vec3(_760, _763, _766)));
    float _786 = ((((_684 * _674) * cbMtdParam._m0[19u].x) + (((_660 * _399) * _670) * cbMtdParam._m0[18u].z)) + _706) + (((_760 * _411) * _770) * cbMtdParam._m0[18u].w);
    float _789 = ((((_684 * _677) * cbMtdParam._m0[19u].x) + (((_663 * _399) * _670) * cbMtdParam._m0[18u].z)) + _707) + (((_763 * _411) * _770) * cbMtdParam._m0[18u].w);
    float _792 = fma(_713, _275, fma(_789, _261, _786 * _228));
    float _795 = fma(_713, _276, fma(_789, _262, _786 * _229));
    float _798 = fma(_713, _277, fma(_789, _263, _786 * _230));
    float _802 = inversesqrt(dot(vec3(_792, _795, _798), vec3(_792, _795, _798)));
    float _803 = _802 * _792;
    float _804 = _802 * _795;
    float _805 = _802 * _798;
    float _3841 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _806 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _3852 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _807 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _3874 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _3885 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _3896 = isnan(0.0) ? cbMtdParam._m0[20u].x : (isnan(cbMtdParam._m0[20u].x) ? 0.0 : max(cbMtdParam._m0[20u].x, 0.0));
    float _811 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _827 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _877 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _867);
    float _878 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _867);
    float _879 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _867);
    float _883 = inversesqrt(dot(vec3(_877, _878, _879), vec3(_877, _878, _879)));
    float _884 = _877 * _883;
    float _885 = _878 * _883;
    float _886 = _879 * _883;
    float _892 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _893 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _911 = fma(_805, cbSceneParam._m0[5u].z, fma(_804, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _803));
    float _914 = fma(_805, cbSceneParam._m0[6u].z, fma(_804, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _803));
    float _917 = fma(_805, cbSceneParam._m0[7u].z, fma(_804, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _803));
    uint _930 = uint(roundEven(NORMAL.w)) * 13u;
    uint _931 = _930 + 9u;
    uint _932 = _931 + uint(cbMatDynParam._m0[0u].w);
    float _938 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) * cbInstanceData._m0[_932].x;
    float _939 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * cbInstanceData._m0[_932].y;
    float _940 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * cbInstanceData._m0[_932].z;
    float _3907 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _944 = 1.0 - _811;
    float _945 = _941 * _944;
    float _946 = _942 * _944;
    float _947 = _943 * _944;
    float _952 = (_941 + (-0.039999999105930328369140625)) * _811;
    float _953 = (_942 + (-0.039999999105930328369140625)) * _811;
    float _954 = (_943 + (-0.039999999105930328369140625)) * _811;
    float _955 = _952 + 0.039999999105930328369140625;
    float _957 = _953 + 0.039999999105930328369140625;
    float _958 = _954 + 0.039999999105930328369140625;
    vec4 _967 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _892, cbSceneParam._m0[86u].y * _893));
    float _970 = _967.x * TEXCOORD_7.w;
    float _971 = dot(vec3(_803, _804, _805), vec3(_884, _885, _886));
    float _974 = _971 * 2.0;
    float _978 = (_974 * _803) - _884;
    float _979 = (_974 * _804) - _885;
    float _980 = (_974 * _805) - _886;
    float _984 = abs(dot(vec3(_884, _885, _886), vec3(_803, _804, _805)));
    float _3940 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _986 = sqrt(_807);
    float _998 = exp2((_986 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_986 * 3.0));
    float _1004 = (1.0 - _998) * ((_986 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1005 = _998 * _986;
    float _1033 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1343;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1068 = fma(_1041, cbModelParam._m0[26u].z, fma(_1037, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1033));
        float _1072 = fma(_1041, cbModelParam._m0[27u].z, fma(_1037, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1033));
        float _1076 = fma(_1041, cbModelParam._m0[28u].z, fma(_1037, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1033));
        float _1101 = _1033 + _803;
        float _1102 = _1037 + _804;
        float _1103 = _1041 + _805;
        float _1113 = fma(_1103, cbModelParam._m0[26u].z, fma(_1102, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1101)) - _1068;
        float _1114 = fma(_1103, cbModelParam._m0[27u].z, fma(_1102, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1101)) - _1072;
        float _1115 = fma(_1103, cbModelParam._m0[28u].z, fma(_1102, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1101)) - _1076;
        float _1119 = inversesqrt(dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115)));
        float _1132 = ((_1119 * _1113) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1068 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1133 = ((_1119 * _1114) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1072 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1119 * _1115) / cbModelParam._m0[34u].z) + ((((((_1076 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        float _1171 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1137.x + (-0.5));
        float _1173 = _1171 * (_1137.y + (-0.5));
        float _1174 = _1171 * (_1137.z + (-0.5));
        float _1181 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1144.x + (-0.5));
        float _1183 = _1181 * (_1144.y + (-0.5));
        float _1184 = _1181 * (_1144.z + (-0.5));
        float _1191 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1151.x + (-0.5));
        float _1193 = _1191 * (_1151.y + (-0.5));
        float _1194 = _1191 * (_1151.z + (-0.5));
        float _1201 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1158.x + (-0.5));
        float _1203 = _1201 * (_1158.y + (-0.5));
        float _1204 = _1201 * (_1158.z + (-0.5));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = _1172 * 0.5;
        float _1209 = _1182 * 0.5;
        float _1210 = _1192 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1225 = (dot(vec3(_803, _804, _805), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1235 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3988 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1237 + 1.0))) + _1242) * _1205;
        float _1252 = _1173 * 0.5;
        float _1253 = _1183 * 0.5;
        float _1254 = _1193 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_803, _804, _805), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _4021 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1279 + 1.0))) + _1284) * _1206;
        float _1294 = _1174 * 0.5;
        float _1295 = _1184 * 0.5;
        float _1296 = _1194 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_803, _804, _805), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _4054 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1321 + 1.0))) + _1326) * _1207;
        _1343 = _1174;
        _1345 = _1173;
        _1346 = _1172;
        _1347 = _1184;
        _1348 = _1183;
        _1349 = _1182;
        _1350 = _1194;
        _1351 = _1193;
        _1352 = _1192;
        _1353 = _1207;
        _1354 = _1206;
        _1355 = _1205;
        _1356 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1357 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1358 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
    }
    else
    {
        _1343 = _1344;
        _1345 = _1344;
        _1346 = _1344;
        _1347 = _1344;
        _1348 = _1344;
        _1349 = _1344;
        _1350 = _1344;
        _1351 = _1344;
        _1352 = _1344;
        _1353 = _1344;
        _1354 = _1344;
        _1355 = _1344;
        _1356 = 0.0;
        _1357 = 0.0;
        _1358 = 0.0;
    }
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1384 = fma(_1041, cbModelParam._m0[30u].z, fma(_1037, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1033));
        float _1388 = fma(_1041, cbModelParam._m0[31u].z, fma(_1037, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1033));
        float _1392 = fma(_1041, cbModelParam._m0[32u].z, fma(_1037, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1033));
        float _1415 = _1033 + _803;
        float _1416 = _1037 + _804;
        float _1417 = _1041 + _805;
        float _1427 = fma(_1417, cbModelParam._m0[30u].z, fma(_1416, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1415)) - _1384;
        float _1428 = fma(_1417, cbModelParam._m0[31u].z, fma(_1416, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1415)) - _1388;
        float _1429 = fma(_1417, cbModelParam._m0[32u].z, fma(_1416, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1415)) - _1392;
        float _1433 = inversesqrt(dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429)));
        float _1446 = ((_1433 * _1427) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1384 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1447 = ((_1433 * _1428) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1388 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1448 = ((_1433 * _1429) / cbModelParam._m0[35u].z) + ((((((_1392 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        float _1483 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1450.x + (-0.5));
        float _1485 = _1483 * (_1450.y + (-0.5));
        float _1486 = _1483 * (_1450.z + (-0.5));
        float _1493 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1457.x + (-0.5));
        float _1495 = _1493 * (_1457.y + (-0.5));
        float _1496 = _1493 * (_1457.z + (-0.5));
        float _1503 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1464.x + (-0.5));
        float _1505 = _1503 * (_1464.y + (-0.5));
        float _1506 = _1503 * (_1464.z + (-0.5));
        float _1513 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1471.x + (-0.5));
        float _1515 = _1513 * (_1471.y + (-0.5));
        float _1516 = _1513 * (_1471.z + (-0.5));
        float _1517 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = _1484 * 0.5;
        float _1521 = _1494 * 0.5;
        float _1522 = _1504 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_803, _804, _805), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4095 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1517 + 9.9999997473787516355514526367188e-06);
        float _4106 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4117 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1547 + 1.0))) + _1552) * _1517;
        float _1562 = _1485 * 0.5;
        float _1563 = _1495 * 0.5;
        float _1564 = _1505 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_803, _804, _805), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4150 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1589 + 1.0))) + _1594) * _1518;
        float _1604 = _1486 * 0.5;
        float _1605 = _1496 * 0.5;
        float _1606 = _1506 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_803, _804, _805), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4183 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1631 + 1.0))) + _1636) * _1519;
        _1653 = _1486;
        _1654 = _1485;
        _1655 = _1484;
        _1656 = _1496;
        _1657 = _1495;
        _1658 = _1494;
        _1659 = _1506;
        _1660 = _1505;
        _1661 = _1504;
        _1662 = _1519;
        _1663 = _1518;
        _1664 = _1517;
        _1665 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
        _1666 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
        _1667 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
    }
    else
    {
        _1653 = _1344;
        _1654 = _1344;
        _1655 = _1344;
        _1656 = _1344;
        _1657 = _1344;
        _1658 = _1344;
        _1659 = _1344;
        _1660 = _1344;
        _1661 = _1344;
        _1662 = _1344;
        _1663 = _1344;
        _1664 = _1344;
        _1665 = 0.0;
        _1666 = 0.0;
        _1667 = 0.0;
    }
    float _1677 = (cbModelParam._m0[1u].x * (_1665 - _1356)) + _1356;
    float _1678 = (cbModelParam._m0[1u].x * (_1666 - _1357)) + _1357;
    float _1679 = (cbModelParam._m0[1u].x * (_1667 - _1358)) + _1358;
    float _1700 = fma(_1679, cbSceneParam._m0[89u].z, fma(_1678, cbSceneParam._m0[89u].y, _1677 * cbSceneParam._m0[89u].x));
    float _1703 = fma(_1679, cbSceneParam._m0[90u].z, fma(_1678, cbSceneParam._m0[90u].y, _1677 * cbSceneParam._m0[90u].x));
    float _1706 = fma(_1679, cbSceneParam._m0[91u].z, fma(_1678, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1677));
    float _1721 = _978 * 0.5;
    float _1722 = _979 * 0.5;
    float _1723 = _980 * 0.5;
    float _1724 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1655, _1658, _1661, _1664));
    float _1727 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1654, _1657, _1660, _1663));
    float _1730 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1653, _1656, _1659, _1662));
    float _1764;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1737 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1343, _1347, _1350, _1353));
        float _1741 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1345, _1348, _1351, _1354));
        float _1745 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1346, _1349, _1352, _1355));
        float _1752 = dot(vec4(cbModelParam._m0[39u]), vec4(_1721, _1722, _1723, 1.0));
        _1764 = dot(vec3(isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1752) ? 0.0 : (isnan(0.0) ? _1752 : max(0.0, _1752))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1764 = 1.0;
    }
    float _1775;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1766 = dot(vec4(cbModelParam._m0[40u]), vec4(_1721, _1722, _1723, 1.0));
        _1775 = dot(vec3(isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1766) ? 0.0 : (isnan(0.0) ? _1766 : max(0.0, _1766))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1775 = 1.0;
    }
    float _1779 = (_1775 * cbModelParam._m0[1u].x) + (_1764 * (1.0 - cbModelParam._m0[1u].x));
    float _1789 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _807);
    float _1790 = isnan(_1789) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1789 : min(cbModelParam._m0[25u].z, _1789));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1837 = fma(_1041, cbModelParam._m0[13u].z, fma(_1037, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1033)) + cbModelParam._m0[13u].w;
        float _1841 = fma(_1041, cbModelParam._m0[14u].z, fma(_1037, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1033)) + cbModelParam._m0[14u].w;
        float _1845 = fma(_1041, cbModelParam._m0[15u].z, fma(_1037, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1033)) + cbModelParam._m0[15u].w;
        float _1848 = fma(_980, cbModelParam._m0[13u].z, fma(_979, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _978));
        float _1851 = fma(_980, cbModelParam._m0[14u].z, fma(_979, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _978));
        float _1854 = fma(_980, cbModelParam._m0[15u].z, fma(_979, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _978));
        float _1882;
        if (_1848 > 0.0)
        {
            _1882 = abs((1.0 - _1837) / _1848);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1837 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1882 = frontier_phi_16_14_ladder;
        }
        float _2084;
        if (_1851 > 0.0)
        {
            _2084 = abs((1.0 - _1841) / _1851);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1841 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2084 = frontier_phi_25_21_ladder;
        }
        float _2338;
        if (_1854 > 0.0)
        {
            _2338 = abs((1.0 - _1845) / _1854);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1845 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2338 = frontier_phi_37_32_ladder;
        }
        float _2340 = isnan(_2084) ? _1882 : (isnan(_1882) ? _2084 : min(_1882, _2084));
        float _2341 = isnan(_2338) ? _2340 : (isnan(_2340) ? _2338 : min(_2340, _2338));
        float _2345 = (_2341 * _1848) + _1837;
        float _2346 = (_2341 * _1851) + _1841;
        float _2347 = (_2341 * _1854) + _1845;
        float _2348 = _2341 * 9.9999997473787516355514526367188e-05;
        float _2350 = (-1.0) - _2348;
        float _2352 = _2348 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2347 > _2352) || ((_2347 < _2350) || ((_2346 > _2352) || ((_2346 < _2350) || ((_2345 < _2350) || (_2345 > _2352))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2475 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2347, cbModelParam._m0[9u].z, fma(_2346, cbModelParam._m0[9u].y, _2345 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2347, cbModelParam._m0[10u].z, fma(_2346, cbModelParam._m0[10u].y, _2345 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2347, cbModelParam._m0[11u].z, fma(_2346, cbModelParam._m0[11u].y, _2345 * cbModelParam._m0[11u].x))), _1790);
            frontier_phi_15_37_ladder = _2475.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2475.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2475.x * cbModelParam._m0[1u].y;
        }
        _1870 = frontier_phi_15_37_ladder_2;
        _1872 = frontier_phi_15_37_ladder_1;
        _1874 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1858 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_978, _979, _980), _1790);
        _1870 = _1858.x * cbModelParam._m0[1u].y;
        _1872 = _1858.y * cbModelParam._m0[1u].y;
        _1874 = _1858.z * cbModelParam._m0[1u].y;
    }
    float _1878 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _807);
    float _1879 = isnan(_1878) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1878 : min(cbModelParam._m0[25u].w, _1878));
    float _1968;
    float _1970;
    float _1972;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1932 = fma(_1041, cbModelParam._m0[21u].z, fma(_1037, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1033)) + cbModelParam._m0[21u].w;
        float _1936 = fma(_1041, cbModelParam._m0[22u].z, fma(_1037, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1033)) + cbModelParam._m0[22u].w;
        float _1940 = fma(_1041, cbModelParam._m0[23u].z, fma(_1037, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1033)) + cbModelParam._m0[23u].w;
        float _1943 = fma(_980, cbModelParam._m0[21u].z, fma(_979, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _978));
        float _1946 = fma(_980, cbModelParam._m0[22u].z, fma(_979, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _978));
        float _1949 = fma(_980, cbModelParam._m0[23u].z, fma(_979, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _978));
        float _2089;
        if (_1943 > 0.0)
        {
            _2089 = abs((1.0 - _1932) / _1943);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1932 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2089 = frontier_phi_27_23_ladder;
        }
        float _2365;
        if (_1946 > 0.0)
        {
            _2365 = abs((1.0 - _1936) / _1946);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1936 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2365 = frontier_phi_39_34_ladder;
        }
        float _2578;
        if (_1949 > 0.0)
        {
            _2578 = abs((1.0 - _1940) / _1949);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1940 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2578 = frontier_phi_48_45_ladder;
        }
        float _2580 = isnan(_2365) ? _2089 : (isnan(_2089) ? _2365 : min(_2089, _2365));
        float _2581 = isnan(_2578) ? _2580 : (isnan(_2580) ? _2578 : min(_2580, _2578));
        float _2585 = (_2581 * _1943) + _1932;
        float _2586 = (_2581 * _1946) + _1936;
        float _2587 = (_2581 * _1949) + _1940;
        float _2588 = _2581 * 9.9999997473787516355514526367188e-05;
        float _2589 = (-1.0) - _2588;
        float _2591 = _2588 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2587 > _2591) || ((_2587 < _2589) || ((_2586 > _2591) || ((_2586 < _2589) || ((_2585 < _2589) || (_2585 > _2591))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2806 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2587, cbModelParam._m0[17u].z, fma(_2586, cbModelParam._m0[17u].y, _2585 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2587, cbModelParam._m0[18u].z, fma(_2586, cbModelParam._m0[18u].y, _2585 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2587, cbModelParam._m0[19u].z, fma(_2586, cbModelParam._m0[19u].y, _2585 * cbModelParam._m0[19u].x))), _1879);
            frontier_phi_24_48_ladder = _2806.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2806.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2806.x * cbModelParam._m0[1u].z;
        }
        _1968 = frontier_phi_24_48_ladder_2;
        _1970 = frontier_phi_24_48_ladder_1;
        _1972 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1952 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_978, _979, _980), _1879);
        _1968 = _1952.x * cbModelParam._m0[1u].z;
        _1970 = _1952.y * cbModelParam._m0[1u].z;
        _1972 = _1952.z * cbModelParam._m0[1u].z;
    }
    float _1985 = (((_1004 * _955) + _1005) * _970) * ((cbModelParam._m0[1u].w * (_1968 - _1870)) + _1870);
    float _1987 = (((_1004 * _957) + _1005) * _970) * ((cbModelParam._m0[1u].w * (_1970 - _1872)) + _1872);
    float _1989 = (((_1004 * _958) + _1005) * _970) * ((cbModelParam._m0[1u].w * (_1972 - _1874)) + _1874);
    float _1992 = fma(_1989, cbSceneParam._m0[89u].z, fma(_1987, cbSceneParam._m0[89u].y, _1985 * cbSceneParam._m0[89u].x));
    float _1995 = fma(_1989, cbSceneParam._m0[90u].z, fma(_1987, cbSceneParam._m0[90u].y, _1985 * cbSceneParam._m0[90u].x));
    float _1998 = fma(_1989, cbSceneParam._m0[91u].z, fma(_1987, cbSceneParam._m0[91u].y, _1985 * cbSceneParam._m0[91u].x));
    uvec4 _2008 = floatBitsToUint(cbInstanceData._m0[_930 + 5u]);
    uint _2010 = _2008.x * 14u;
    uint _2011 = _2010 + 13u;
    float _2018 = _970 + (-1.0);
    float _2023 = (cbLight._m0[_2011].x * _2018) + 1.0;
    float _2024 = (cbLight._m0[_2011].y * _2018) + 1.0;
    float _2025 = (cbLight._m0[_2011].z * _2018) + 1.0;
    float _2026 = (cbLight._m0[_2011].w * _2018) + 1.0;
    uint _2027 = _2010 + 5u;
    float _2033 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
    uint _2037 = _2010 + 4u;
    float _2043 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
    uint _2047 = _2010 | 1u;
    float _2058 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_803, _804, _805));
    float _2061 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_803, _804, _805));
    float _4319 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _4330 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2066 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * 0.3183098733425140380859375;
    float _2068 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * 0.3183098733425140380859375;
    float _2075 = ((cbLight._m0[_2027].x * _2033) * _2068) + ((cbLight._m0[_2037].x * _2043) * _2066);
    float _2076 = ((_2033 * cbLight._m0[_2027].y) * _2068) + ((_2043 * cbLight._m0[_2037].y) * _2066);
    float _2077 = ((_2033 * cbLight._m0[_2027].z) * _2068) + ((_2043 * cbLight._m0[_2037].z) * _2066);
    uvec4 _2081 = floatBitsToUint(cbLight._m0[_2010 + 12u]);
    bool _2083 = _2081.x == 0u;
    float _2094;
    float _2096;
    float _2098;
    if (_2083)
    {
        _2094 = _2075;
        _2096 = _2076;
        _2098 = _2077;
    }
    else
    {
        uint _2102 = _2010 + 6u;
        float _2118 = (dot(vec3(cbLight._m0[_2010 + 2u].xyz), vec3(_803, _804, _805)) * 0.5) + 0.5;
        float _2119 = _2118 * _2118;
        float _4341 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2120 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2121 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2094 = (((cbLight._m0[_2102].x * 0.3183098733425140380859375) * _2120) * _2121) + _2075;
        _2096 = (((cbLight._m0[_2102].y * 0.3183098733425140380859375) * _2120) * _2121) + _2076;
        _2098 = (((cbLight._m0[_2102].z * 0.3183098733425140380859375) * _2120) * _2121) + _2077;
    }
    bool _2101 = _2081.y == 0u;
    float _2139;
    float _2141;
    float _2143;
    if (_2101)
    {
        _2139 = _2094;
        _2141 = _2096;
        _2143 = _2098;
    }
    else
    {
        uint _2309 = _2010 + 7u;
        float _2325 = (dot(vec3(cbLight._m0[_2010 + 3u].xyz), vec3(_803, _804, _805)) * 0.5) + 0.5;
        float _2326 = _2325 * _2325;
        float _4357 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2327 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _2328 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
        _2139 = (((cbLight._m0[_2309].x * 0.3183098733425140380859375) * _2327) * _2328) + _2094;
        _2141 = (((cbLight._m0[_2309].y * 0.3183098733425140380859375) * _2327) * _2328) + _2096;
        _2143 = (((cbLight._m0[_2309].z * 0.3183098733425140380859375) * _2327) * _2328) + _2098;
    }
    uint _2146 = _2010 + 8u;
    float _2159 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2010].w)) * _807) * 0.949999988079071044921875);
    float _2160 = _2159 * _2159;
    float _2161 = cbLight._m0[_2010].x + _884;
    float _2162 = cbLight._m0[_2010].y + _885;
    float _2163 = cbLight._m0[_2010].z + _886;
    float _2167 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
    float _2168 = _2167 * _2161;
    float _2169 = _2167 * _2162;
    float _2170 = _2167 * _2163;
    float _2171 = dot(vec3(_803, _804, _805), vec3(cbLight._m0[_2010].xyz));
    float _4373 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _4384 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _2175 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _2176 = dot(vec3(_803, _804, _805), vec3(_2168, _2169, _2170));
    float _4395 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2179 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _2180 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_2168, _2169, _2170));
    float _4406 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2184 = _2160 * _2160;
    float _2188 = ((_2179 * _2179) * (_2184 + (-1.0))) + 1.0;
    float _2196 = exp2(log2(1.0 - (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) * 5.0);
    float _2197 = 0.959999978542327880859375 - _952;
    float _2199 = 0.959999978542327880859375 - _953;
    float _2200 = 0.959999978542327880859375 - _954;
    float _2207 = 1.0 - _2160;
    float _2218 = (0.5 / (((_2175 * ((_2174 * _2207) + _2160)) + 9.9999999392252902907785028219223e-09) + (((_2175 * _2207) + _2160) * _2174))) * _2174;
    float _4417 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2220 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2184 / ((_2188 * _2188) * 3.141590118408203125));
    uint _2231 = _2010 + 9u;
    float _2242 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2047].w)) * _807) * 0.949999988079071044921875);
    float _2243 = _2242 * _2242;
    float _2244 = cbLight._m0[_2047].x + _884;
    float _2245 = cbLight._m0[_2047].y + _885;
    float _2246 = cbLight._m0[_2047].z + _886;
    float _2250 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
    float _2251 = _2250 * _2244;
    float _2252 = _2250 * _2245;
    float _2253 = _2250 * _2246;
    float _2254 = dot(vec3(_803, _804, _805), vec3(cbLight._m0[_2047].xyz));
    float _4428 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2257 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2258 = dot(vec3(_803, _804, _805), vec3(_2251, _2252, _2253));
    float _4439 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2261 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2262 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_2251, _2252, _2253));
    float _4450 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2266 = _2243 * _2243;
    float _2270 = ((_2261 * _2261) * (_2266 + (-1.0))) + 1.0;
    float _2277 = exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0);
    float _2284 = 1.0 - _2243;
    float _2294 = (0.5 / (((_2175 * ((_2257 * _2284) + _2243)) + 9.9999999392252902907785028219223e-09) + (((_2175 * _2284) + _2243) * _2257))) * _2257;
    float _4461 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2296 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2266 / ((_2270 * _2270) * 3.141590118408203125));
    float _2306 = (((((_2277 * _2197) + _955) * cbLight._m0[_2231].x) * _2296) * _2033) + (((((_2196 * _2197) + _955) * cbLight._m0[_2146].x) * _2220) * _2043);
    float _2307 = (((((_2277 * _2199) + _957) * cbLight._m0[_2231].y) * _2296) * _2033) + (((((_2196 * _2199) + _957) * cbLight._m0[_2146].y) * _2220) * _2043);
    float _2308 = (((((_2277 * _2200) + _958) * cbLight._m0[_2231].z) * _2296) * _2033) + (((((_2196 * _2200) + _958) * cbLight._m0[_2146].z) * _2220) * _2043);
    float _2370;
    float _2372;
    float _2374;
    if (_2083)
    {
        _2370 = _2306;
        _2372 = _2307;
        _2374 = _2308;
    }
    else
    {
        uint _2376 = _2010 + 2u;
        uint _2380 = _2010 + 10u;
        float _2394 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2376].w)) * _807) * 0.949999988079071044921875);
        float _2395 = _2394 * _2394;
        float _2396 = cbLight._m0[_2376].x + _884;
        float _2397 = cbLight._m0[_2376].y + _885;
        float _2398 = cbLight._m0[_2376].z + _886;
        float _2402 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
        float _2403 = _2402 * _2396;
        float _2404 = _2402 * _2397;
        float _2405 = _2402 * _2398;
        float _2406 = dot(vec3(_803, _804, _805), vec3(cbLight._m0[_2376].xyz));
        float _4472 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2409 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2410 = dot(vec3(_803, _804, _805), vec3(_2403, _2404, _2405));
        float _4483 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2413 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2414 = dot(vec3(cbLight._m0[_2376].xyz), vec3(_2403, _2404, _2405));
        float _4494 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2418 = _2395 * _2395;
        float _2422 = ((_2413 * _2413) * (_2418 + (-1.0))) + 1.0;
        float _2429 = exp2(log2(1.0 - (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) * 5.0);
        float _2436 = 1.0 - _2395;
        float _2446 = (0.5 / (((_2175 * ((_2409 * _2436) + _2395)) + 9.9999999392252902907785028219223e-09) + (((_2175 * _2436) + _2395) * _2409))) * _2409;
        float _4505 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2448 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2418 / ((_2422 * _2422) * 3.141590118408203125));
        float _2449 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2370 = (((((_2429 * _2197) + _955) * cbLight._m0[_2380].x) * _2448) * _2449) + _2306;
        _2372 = (((((_2429 * _2199) + _957) * cbLight._m0[_2380].y) * _2448) * _2449) + _2307;
        _2374 = (((((_2429 * _2200) + _958) * cbLight._m0[_2380].z) * _2448) * _2449) + _2308;
    }
    float _2484;
    float _2486;
    float _2488;
    if (_2101)
    {
        _2484 = _2370;
        _2486 = _2372;
        _2488 = _2374;
    }
    else
    {
        uint _2495 = _2010 + 3u;
        uint _2499 = _2010 + 11u;
        float _2513 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2495].w)) * _807) * 0.949999988079071044921875);
        float _2514 = _2513 * _2513;
        float _2515 = cbLight._m0[_2495].x + _884;
        float _2516 = cbLight._m0[_2495].y + _885;
        float _2517 = cbLight._m0[_2495].z + _886;
        float _2521 = inversesqrt(dot(vec3(_2515, _2516, _2517), vec3(_2515, _2516, _2517)));
        float _2522 = _2521 * _2515;
        float _2523 = _2521 * _2516;
        float _2524 = _2521 * _2517;
        float _2525 = dot(vec3(_803, _804, _805), vec3(cbLight._m0[_2495].xyz));
        float _4521 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2528 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2529 = dot(vec3(_803, _804, _805), vec3(_2522, _2523, _2524));
        float _4532 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2532 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2533 = dot(vec3(cbLight._m0[_2495].xyz), vec3(_2522, _2523, _2524));
        float _4543 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2537 = _2514 * _2514;
        float _2541 = ((_2532 * _2532) * (_2537 + (-1.0))) + 1.0;
        float _2548 = exp2(log2(1.0 - (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) * 5.0);
        float _2555 = 1.0 - _2514;
        float _2565 = (0.5 / (((_2175 * ((_2528 * _2555) + _2514)) + 9.9999999392252902907785028219223e-09) + (((_2175 * _2555) + _2514) * _2528))) * _2528;
        float _4554 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2567 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2537 / ((_2541 * _2541) * 3.141590118408203125));
        float _2568 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
        _2484 = (((((_2548 * _2197) + _955) * cbLight._m0[_2499].x) * _2567) * _2568) + _2370;
        _2486 = (((((_2548 * _2199) + _957) * cbLight._m0[_2499].y) * _2567) * _2568) + _2372;
        _2488 = (((((_2548 * _2200) + _958) * cbLight._m0[_2499].z) * _2567) * _2568) + _2374;
    }
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    float _2710;
    float _2712;
    if (_2008.y == 0u)
    {
        float _2643 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2644 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2643;
        float _2645 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2643;
        float _2646 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2643;
        uvec4 _2658 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2659 = _2658.x;
        uint _2670 = uint((float(_2658.y) * floor(float(uint(cbSceneParam._m0[85u].y * _893) / _2659))) + floor(float(uint(cbSceneParam._m0[85u].x * _892) / _2659)));
        float _2680 = (log2(_2646 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2681 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        uint _2684 = uint(isnan(14.0) ? _2681 : (isnan(_2681) ? 14.0 : min(_2681, 14.0)));
        uvec4 _2689 = texelFetch(g_lightClusterGridBuffer, int(((_2684 << 2u) + (_2670 << 6u)) >> 2u));
        uint _2690 = _2689.x;
        uint _2691 = _2658.z;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        if (((((1u << ((_2691 >> 4u) & 15u)) + 4294967295u) & _2690) == 0u) || ((_2691 & 240u) == 0u))
        {
            _2811 = 0.0;
            _2813 = 0.0;
            _2815 = 0.0;
            _2817 = 0.0;
            _2819 = 0.0;
            _2821 = 0.0;
        }
        else
        {
            float _2812;
            float _2814;
            float _2816;
            float _2818;
            float _2820;
            float _2822;
            float _2955 = 0.0;
            float _2956 = 0.0;
            float _2957 = 0.0;
            float _2958 = 0.0;
            float _2959 = 0.0;
            float _2960 = 0.0;
            uint _2961 = 0u;
            uint _2970;
            bool _2971;
            for (;;)
            {
                _2970 = texelFetch(g_lightClassification, int((((_2684 << 5u) + (_2670 << 9u)) + (_2961 << 2u)) >> 2u)).x;
                _2971 = _2970 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2971)
                {
                    frontier_phi_63_pred = _2960;
                    frontier_phi_63_pred_1 = _2959;
                    frontier_phi_63_pred_2 = _2958;
                    frontier_phi_63_pred_3 = _2957;
                    frontier_phi_63_pred_4 = _2956;
                    frontier_phi_63_pred_5 = _2955;
                }
                else
                {
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    uint _3085;
                    _3079 = _2955;
                    _3080 = _2956;
                    _3081 = _2957;
                    _3082 = _2958;
                    _3083 = _2959;
                    _3084 = _2960;
                    _3085 = _2970;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    for (;;)
                    {
                        uint _3089 = uint(findLSB(_3085)) + (_2961 << 5u);
                        uint _3086 = (_3085 + 4294967295u) & _3085;
                        uint _3091 = _3089 * 48u;
                        vec4 _3105 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3091)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 3u)).x));
                        uint _3111 = (_3089 * 48u) + 4u;
                        vec4 _3124 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3111)).x, texelFetch(g_PointLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3111 + 3u)).x));
                        uint _3130 = (_3089 * 48u) + 8u;
                        vec3 _3141 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3130)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 2u)).x));
                        float _3145 = _3105.x - _2644;
                        float _3146 = _3105.y - _2645;
                        float _3147 = _3105.z - _2646;
                        float _3148 = dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147));
                        float _3151 = inversesqrt(_3148);
                        float _3152 = _3151 * _3145;
                        float _3153 = _3151 * _3146;
                        float _3154 = _3151 * _3147;
                        float _3155 = dot(vec3(_911, _914, _917), vec3(_3152, _3153, _3154));
                        float _3160 = 1.0 - (_3148 * _3105.w);
                        float _4580 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3161 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                        float _3162 = sqrt(_3148) * _3124.w;
                        float _3164 = 1.39999997615814208984375 / (_3162 + 1.39999997615814208984375);
                        float _3165 = _3164 * _3164;
                        float _3168 = ((1.0 - _3165) * _3155) + _3165;
                        float _3171 = _3162 * _3162;
                        float _3175 = ((isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0))) * _3161) / ((_3171 * 0.699999988079071044921875) + 1.0);
                        float _3179 = (-0.0) - _2644;
                        float _3180 = (-0.0) - _2645;
                        float _3181 = (-0.0) - _2646;
                        float _3185 = inversesqrt(dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181)));
                        float _3186 = _3185 * _3179;
                        float _3187 = _3185 * _3180;
                        float _3188 = _3185 * _3181;
                        float _3196 = exp2(log2(1.0 / ((_3171 * 3.5) + 5.0)) * 0.25);
                        float _3197 = 1.0 - _986;
                        float _3204 = sqrt(1.0 - ((1.0 - (_3197 * _3197)) * (1.0 - (_3196 * _3196))));
                        float _3205 = _3204 * _3204;
                        float _3206 = _3205 * _3205;
                        float _3207 = _3186 + _3152;
                        float _3208 = _3187 + _3153;
                        float _3209 = _3188 + _3154;
                        float _3213 = inversesqrt(dot(vec3(_3207, _3208, _3209), vec3(_3207, _3208, _3209)));
                        float _3217 = dot(vec3(_911, _914, _917), vec3(_3186, _3187, _3188));
                        float _4596 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3220 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                        float _3221 = dot(vec3(_911, _914, _917), vec3(_3213 * _3207, _3213 * _3208, _3213 * _3209));
                        float _4607 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3224 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3228 = ((_3224 * _3224) * (_3206 + (-1.0))) + 1.0;
                        float _3229 = _3164 * _3205;
                        float _3230 = _3229 * _3229;
                        float _3233 = ((1.0 - _3230) * _3155) + _3230;
                        float _4618 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3234 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                        float _3235 = 1.0 - _3205;
                        float _3245 = (0.5 / (((_3234 * ((_3220 * _3235) + _3205)) + 9.9999999392252902907785028219223e-09) + (((_3234 * _3235) + _3205) * _3220))) * _3234;
                        float _4629 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                        float _3256 = (((_3206 * 3.1415927410125732421875) * (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) / ((_3228 * _3228) * ((_3171 * 2.1991131305694580078125) + 3.141590118408203125))) * _3161;
                        _3014 = (_3175 * _3124.x) + _3082;
                        _3015 = (_3175 * _3124.y) + _3083;
                        _3016 = (_3175 * _3124.z) + _3084;
                        _3011 = (_3256 * _3141.x) + _3079;
                        _3012 = (_3256 * _3141.y) + _3080;
                        _3013 = (_3256 * _3141.z) + _3081;
                        if (_3086 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3079 = _3011;
                            _3080 = _3012;
                            _3081 = _3013;
                            _3082 = _3014;
                            _3083 = _3015;
                            _3084 = _3016;
                            _3085 = _3086;
                        }
                    }
                    frontier_phi_63_pred = _3016;
                    frontier_phi_63_pred_1 = _3015;
                    frontier_phi_63_pred_2 = _3014;
                    frontier_phi_63_pred_3 = _3013;
                    frontier_phi_63_pred_4 = _3012;
                    frontier_phi_63_pred_5 = _3011;
                }
                _2822 = frontier_phi_63_pred;
                _2820 = frontier_phi_63_pred_1;
                _2818 = frontier_phi_63_pred_2;
                _2816 = frontier_phi_63_pred_3;
                _2814 = frontier_phi_63_pred_4;
                _2812 = frontier_phi_63_pred_5;
                uint _2962 = _2961 + 1u;
                if (_2962 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2955 = _2812;
                    _2956 = _2814;
                    _2957 = _2816;
                    _2958 = _2818;
                    _2959 = _2820;
                    _2960 = _2822;
                    _2961 = _2962;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2811 = _2812;
            _2813 = _2814;
            _2815 = _2816;
            _2817 = _2818;
            _2819 = _2820;
            _2821 = _2822;
        }
        uvec4 _2825 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2826 = _2825.z;
        uint _2828 = (_2826 >> 8u) & 15u;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        float _2933;
        if (((4294967295u << _2828) & _2690) == 0u)
        {
            _2923 = _2811;
            _2925 = _2813;
            _2927 = _2815;
            _2929 = _2817;
            _2931 = _2819;
            _2933 = _2821;
        }
        else
        {
            float _2948 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
            float _2949 = _2948 * _2644;
            float _2950 = _2948 * _2645;
            float _2951 = _2948 * _2646;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2828 < ((_2826 >> 12u) & 15u))
            {
                float _2924;
                float _2926;
                float _2928;
                float _2930;
                float _2932;
                float _2934;
                float _3062 = _2811;
                float _3063 = _2813;
                float _3064 = _2815;
                float _3065 = _2817;
                float _3066 = _2819;
                float _3067 = _2821;
                uint _3068 = _2828;
                uint _3077;
                bool _3078;
                for (;;)
                {
                    _3077 = texelFetch(g_lightClassification, int((((_2684 << 5u) + (_2670 << 9u)) + (_3068 << 2u)) >> 2u)).x;
                    _3078 = _3077 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3078)
                    {
                        frontier_phi_69_pred = _3067;
                        frontier_phi_69_pred_1 = _3066;
                        frontier_phi_69_pred_2 = _3065;
                        frontier_phi_69_pred_3 = _3064;
                        frontier_phi_69_pred_4 = _3063;
                        frontier_phi_69_pred_5 = _3062;
                    }
                    else
                    {
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3274 = _3062;
                        float _3275 = _3063;
                        float _3276 = _3064;
                        float _3277 = _3065;
                        float _3278 = _3066;
                        float _3279 = _3067;
                        uint _3280 = _3077;
                        uint _3281;
                        vec4 _3306;
                        float _3307;
                        vec4 _3322;
                        vec3 _3334;
                        vec4 _3349;
                        vec4 _3364;
                        float _3411;
                        bool _3412;
                        for (;;)
                        {
                            uint _3291 = ((_3068 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3280));
                            _3281 = (_3280 + 4294967295u) & _3280;
                            uint _3293 = _3291 * 40u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            _3307 = _3306.w;
                            uint _3309 = (_3291 * 40u) + 4u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3324 = (_3291 * 40u) + 8u;
                            _3334 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x));
                            uint _3336 = (_3291 * 40u) + 16u;
                            _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            uint _3351 = (_3291 * 40u) + 20u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3367 = (_3291 * 40u) + 24u;
                            vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3386 = (_3291 * 40u) + 28u;
                            vec4 _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            _3411 = fma(_2646, _3399.z, fma(_2645, _3399.y, _3399.x * _2644)) + _3399.w;
                            _3412 = !((fma(_2646, _3380.z, fma(_2645, _3380.y, _3380.x * _2644)) + _3380.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3412)
                            {
                                float _3439 = _3306.x - _2644;
                                float _3440 = _3306.y - _2645;
                                float _3441 = _3306.z - _2646;
                                float _3442 = dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441));
                                float _3445 = inversesqrt(_3442);
                                float _3446 = _3445 * _3439;
                                float _3447 = _3445 * _3440;
                                float _3448 = _3445 * _3441;
                                float _3452 = 1.0 - (_3442 / (_3307 * _3307));
                                float _4640 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3453 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                                float _3457 = sqrt(_3442) * _3322.w;
                                float _3459 = 1.39999997615814208984375 / (_3457 + 1.39999997615814208984375);
                                float _3460 = _3459 * _3459;
                                float _3463 = ((1.0 - _3460) * dot(vec3(_3446, _3447, _3448), vec3(_911, _914, _917))) + _3460;
                                float _3466 = _3457 * _3457;
                                float _3470 = (fma(_2646, _3349.z, fma(_2645, _3349.y, _3349.x * _2644)) + _3349.w) / _3411;
                                float _3471 = (fma(_2646, _3364.z, fma(_2645, _3364.y, _3364.x * _2644)) + _3364.w) / _3411;
                                float _3475 = 1.0 - dot(vec2(_3470, _3471), vec2(_3470, _3471));
                                float _4656 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3476 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3477 = _3476 * (((isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0))) * _3453) / ((_3466 * 0.699999988079071044921875) + 1.0));
                                float _3489 = exp2(log2(1.0 / ((_3466 * 3.5) + 5.0)) * 0.25);
                                float _3490 = 1.0 - _986;
                                float _3497 = sqrt(1.0 - ((1.0 - (_3490 * _3490)) * (1.0 - (_3489 * _3489))));
                                float _3498 = _3497 * _3497;
                                float _3499 = _3498 * _3498;
                                float _3500 = _3446 - _2949;
                                float _3501 = _3447 - _2950;
                                float _3502 = _3448 - _2951;
                                float _3506 = inversesqrt(dot(vec3(_3500, _3501, _3502), vec3(_3500, _3501, _3502)));
                                float _3510 = dot(vec3(_911, _914, _917), vec3((-0.0) - _2949, (-0.0) - _2950, (-0.0) - _2951));
                                float _4667 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3513 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3514 = dot(vec3(_911, _914, _917), vec3(_3506 * _3500, _3506 * _3501, _3506 * _3502));
                                float _4678 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3517 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3521 = ((_3517 * _3517) * (_3499 + (-1.0))) + 1.0;
                                float _3522 = _3459 * _3498;
                                float _3523 = _3522 * _3522;
                                float _3529 = ((1.0 - _3523) * dot(vec3(_911, _914, _917), vec3(_3446, _3447, _3448))) + _3523;
                                float _4689 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3530 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3531 = 1.0 - _3498;
                                float _3541 = (0.5 / (((_3530 * ((_3513 * _3531) + _3498)) + 9.9999999392252902907785028219223e-09) + (((_3530 * _3531) + _3498) * _3513))) * _3530;
                                float _4700 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3551 = (_3476 * _3453) * (((_3499 * 3.1415927410125732421875) * (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) / ((_3521 * _3521) * ((_3466 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3477 * _3322.z;
                                frontier_phi_75_pred_1 = _3477 * _3322.y;
                                frontier_phi_75_pred_2 = _3477 * _3322.x;
                                frontier_phi_75_pred_3 = _3551 * _3334.z;
                                frontier_phi_75_pred_4 = _3551 * _3334.y;
                                frontier_phi_75_pred_5 = _3551 * _3334.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3560 = frontier_phi_75_pred;
                            _3559 = frontier_phi_75_pred_1;
                            _3558 = frontier_phi_75_pred_2;
                            _3557 = frontier_phi_75_pred_3;
                            _3556 = frontier_phi_75_pred_4;
                            _3555 = frontier_phi_75_pred_5;
                            _3264 = _3558 + _3277;
                            _3265 = _3559 + _3278;
                            _3266 = _3560 + _3279;
                            _3261 = _3555 + _3274;
                            _3262 = _3556 + _3275;
                            _3263 = _3557 + _3276;
                            if (_3281 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3281;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3266;
                        frontier_phi_69_pred_1 = _3265;
                        frontier_phi_69_pred_2 = _3264;
                        frontier_phi_69_pred_3 = _3263;
                        frontier_phi_69_pred_4 = _3262;
                        frontier_phi_69_pred_5 = _3261;
                    }
                    _2934 = frontier_phi_69_pred;
                    _2932 = frontier_phi_69_pred_1;
                    _2930 = frontier_phi_69_pred_2;
                    _2928 = frontier_phi_69_pred_3;
                    _2926 = frontier_phi_69_pred_4;
                    _2924 = frontier_phi_69_pred_5;
                    uint _3069 = _3068 + 1u;
                    if (_3069 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3062 = _2924;
                        _3063 = _2926;
                        _3064 = _2928;
                        _3065 = _2930;
                        _3066 = _2932;
                        _3067 = _2934;
                        _3068 = _3069;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2934;
                frontier_phi_57_58_ladder_1 = _2932;
                frontier_phi_57_58_ladder_2 = _2930;
                frontier_phi_57_58_ladder_3 = _2928;
                frontier_phi_57_58_ladder_4 = _2926;
                frontier_phi_57_58_ladder_5 = _2924;
            }
            else
            {
                frontier_phi_57_58_ladder = _2821;
                frontier_phi_57_58_ladder_1 = _2819;
                frontier_phi_57_58_ladder_2 = _2817;
                frontier_phi_57_58_ladder_3 = _2815;
                frontier_phi_57_58_ladder_4 = _2813;
                frontier_phi_57_58_ladder_5 = _2811;
            }
            _2923 = frontier_phi_57_58_ladder_5;
            _2925 = frontier_phi_57_58_ladder_4;
            _2927 = frontier_phi_57_58_ladder_3;
            _2929 = frontier_phi_57_58_ladder_2;
            _2931 = frontier_phi_57_58_ladder_1;
            _2933 = frontier_phi_57_58_ladder;
        }
        float _2938 = isnan(1.0) ? _970 : (isnan(_970) ? 1.0 : min(_970, 1.0));
        _2702 = (_2938 * _2929) + _2139;
        _2704 = (_2938 * _2931) + _2141;
        _2706 = (_2938 * _2933) + _2143;
        _2708 = ((_2923 * _955) * _2938) + _2484;
        _2710 = ((_2925 * _957) * _2938) + _2486;
        _2712 = ((_2927 * _958) * _2938) + _2488;
    }
    else
    {
        _2702 = _2139;
        _2704 = _2141;
        _2706 = _2143;
        _2708 = _2484;
        _2710 = _2486;
        _2712 = _2488;
    }
    uint _2718 = _931 + uint(cbMatDynParam._m0[0u].w);
    float _4716 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _4727 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _4738 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _4749 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _2744 = (((isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2702 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _970))) + ((_2708 + ((isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))) * _1779)) * cbPerFrame._m0[3u].x)) + (((((_600 * _595.x) + cbMtdParam._m0[20u].y) * TEXCOORD_7.x) * cbMtdParam._m0[17u].x) * cbInstanceData._m0[_2718].x);
    float _2746 = (((((cbMtdParam._m0[20u].z + (_600 * _595.y)) * TEXCOORD_7.y) * cbMtdParam._m0[17u].x) * cbInstanceData._m0[_2718].y) + ((_2710 + ((isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))) * _1779)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2704 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _970)));
    float _2748 = (((((cbMtdParam._m0[20u].w + (_600 * _595.z)) * TEXCOORD_7.z) * cbMtdParam._m0[17u].x) * cbInstanceData._m0[_2718].z) + ((_2712 + ((isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))) * _1779)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2706 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _970)));
    float _2756 = cbInstanceData._m0[_930 + 6u].w * (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)));
    float _2761 = _892 / cbSceneParam._m0[86u].x;
    float _2762 = _893 / cbSceneParam._m0[86u].y;
    vec4 _2776 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2761, _2762, (log2((isnan(cbSceneParam._m0[77u].w) ? _827 : (isnan(_827) ? cbSceneParam._m0[77u].w : min(_827, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2778 = _2776.x;
    float _2779 = _2776.y;
    float _2780 = _2776.z;
    float _2781 = _2776.w;
    float _2873;
    float _2875;
    float _2877;
    float _2879;
    if (_827 > cbSceneParam._m0[78u].w)
    {
        float _2836 = isnan(_827) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _827 : min(cbSceneParam._m0[80u].w, _827));
        float _2837 = _2836 / _827;
        float _2848 = _2837 * _877;
        float _2849 = _878 * _2837;
        float _2850 = (-0.0) - _2849;
        float _2851 = _2837 * _879;
        float _2853 = (cbSceneParam._m0[77u].w * _2850) / _2836;
        float _2854 = _2853 + cbSceneParam._m0[79u].w;
        float _2855 = cbSceneParam._m0[79u].w - _2849;
        float _2861 = sqrt(((_2848 * _2848) + (_2849 * _2849)) + (_2851 * _2851));
        float _2864 = (1.0 - (cbSceneParam._m0[77u].w / _2836)) * _2861;
        float _2869 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2871 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3024;
        if (abs((_2850 - _2853) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3024 = ((((_2854 > 0.0) ? exp2(_2869 * _2854) : (2.0 - exp2(_2871 * _2854))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2864;
        }
        else
        {
            float _2984 = 1.0 / cbSceneParam._m0[80u].x;
            float _2985 = isnan(_2855) ? _2854 : (isnan(_2854) ? _2855 : max(_2854, _2855));
            float _2986 = isnan(_2855) ? _2854 : (isnan(_2854) ? _2855 : min(_2854, _2855));
            float _2995 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : min(_2985, 0.0));
            float _2996 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : min(_2986, 0.0));
            _3024 = ((abs(_2861 / _2850) * cbSceneParam._m0[80u].y) * ((((_2995 - _2996) * 2.0) - ((exp2(_2869 * (isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0)))) - exp2(_2869 * (isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0))))) * _2984)) - ((exp2(_2871 * _2995) - exp2(_2871 * _2996)) * _2984))) + (_2864 * cbSceneParam._m0[80u].z);
        }
        vec4 _3026 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2761, _2762, 1.0), 0.0);
        float _3035 = exp2((_3024 * (-1.44269502162933349609375)) * (1.0 - _3026.w));
        float _3036 = log2(_3035);
        float _3052 = log2(_2781);
        _2873 = (exp2(_3052 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3036 * cbSceneParam._m0[78u].x)) * _3026.x) / cbSceneParam._m0[78u].x)) + _2778;
        _2875 = (exp2(_3052 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3036 * cbSceneParam._m0[78u].y)) * _3026.y) / cbSceneParam._m0[78u].y)) + _2779;
        _2877 = (exp2(_3052 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3036 * cbSceneParam._m0[78u].z)) * _3026.z) / cbSceneParam._m0[78u].z)) + _2780;
        _2879 = _3035 * _2781;
    }
    else
    {
        _2873 = _2778;
        _2875 = _2779;
        _2877 = _2780;
        _2879 = _2781;
    }
    float _2891 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2892 = _2891 == 3.0;
    float _2893 = log2(_2879);
    float _2900 = exp2(_2893 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0)));
    float _2901 = exp2(_2893 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0)));
    float _2902 = exp2(_2893 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0)));
    float _2911 = (_2891 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2911 * (_2892 ? _2900 : (_2900 + (cbSceneParam._m0[72u].w * _2873)));
    SV_Target.y = _2911 * (_2892 ? _2901 : (_2901 + (cbSceneParam._m0[72u].w * _2875)));
    SV_Target.z = _2911 * (_2892 ? _2902 : (_2902 + (cbSceneParam._m0[72u].w * _2877)));
    SV_Target.w = _2756;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2756;
}


