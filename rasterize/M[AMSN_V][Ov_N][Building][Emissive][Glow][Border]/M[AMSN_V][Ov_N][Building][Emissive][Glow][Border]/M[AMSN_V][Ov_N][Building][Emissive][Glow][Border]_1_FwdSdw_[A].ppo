#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[21];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 6, component = 1) in float TEXCOORD_6;
layout(location = 7) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1393;
float _4077;
float _4078;
float _4079;
float _4080;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _248 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _249 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _250 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _254 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _255 = _254 * _248;
    float _256 = _254 * _249;
    float _257 = _254 * _250;
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = _261 * NORMAL.x;
    float _263 = _261 * NORMAL.y;
    float _264 = _261 * NORMAL.z;
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = _268 * TANGENT.x;
    float _270 = _268 * TANGENT.y;
    float _271 = _268 * TANGENT.z;
    float _275 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _276 = _275 * TANGENT_2.x;
    float _277 = _275 * TANGENT_2.y;
    float _278 = _275 * TANGENT_2.z;
    float _283;
    float _284;
    float _285;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _283 = (-0.0) - _262;
        _284 = (-0.0) - _263;
        _285 = (-0.0) - _264;
    }
    else
    {
        _283 = _262;
        _284 = _263;
        _285 = _264;
    }
    vec4 _323 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _335 = 1.0 - ((1.0 - _323.x) * 1.39999997615814208984375);
    float _4089 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _336 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _343 = (_336 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x)) + cbMtdParam._m0[15u].x;
    float _344 = (_336 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y)) + cbMtdParam._m0[15u].y;
    float _345 = (_336 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z)) + cbMtdParam._m0[15u].z;
    float _347 = 1.0 - ((1.0 - _323.y) * 1.39999997615814208984375);
    float _4100 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _348 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _355 = (_348 * (cbMtdParam._m0[13u].x - _343)) + _343;
    float _356 = (_348 * (cbMtdParam._m0[13u].y - _344)) + _344;
    float _357 = (_348 * (cbMtdParam._m0[13u].z - _345)) + _345;
    float _359 = 1.0 - ((1.0 - _323.z) * 1.39999997615814208984375);
    float _4111 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _360 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _389 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[19u].z;
    float _403 = ((cbMtdParam._m0[18u].y * (-1.39999997615814208984375)) * ((TEXCOORD_6 - _389) + (cbMtdParam._m0[17u].w * TEXCOORD_6))) + 1.0;
    float _4122 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _405 = 1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)));
    float _406 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _407 = isnan(1.0) ? _406 : (isnan(_406) ? 1.0 : min(_406, 1.0));
    float _415 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5 - _389) + (cbMtdParam._m0[17u].z * TEXCOORD_5))) + 1.0;
    float _4143 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _417 = 1.0 - (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)));
    float _418 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _419 = isnan(1.0) ? _418 : (isnan(_418) ? 1.0 : min(_418, 1.0));
    vec4 _437 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _439 = _437.x;
    float _440 = _437.y;
    float _441 = _437.z;
    float _442 = cbMtdParam._m0[12u].x * _419;
    float _444 = cbMtdParam._m0[12u].y * _419;
    float _446 = cbMtdParam._m0[12u].z * _419;
    float _466 = _417 + _405;
    float _467 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _468 = isnan(1.0) ? _467 : (isnan(_467) ? 1.0 : min(_467, 1.0));
    vec4 _486 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _491 = _486.w;
    float _492 = _486.x * cbMtdParam._m0[10u].x;
    float _493 = _486.y * cbMtdParam._m0[10u].y;
    float _494 = _486.z * cbMtdParam._m0[10u].z;
    float _514 = ((_492 - (_468 * _492)) + ((((((_439 * (cbMtdParam._m0[11u].x - _442)) * _407) + (_442 * _439)) * 4.55000019073486328125) * _468) * _492)) * ((_360 * (cbMtdParam._m0[14u].x - _355)) + _355);
    float _515 = ((((((((_440 * (cbMtdParam._m0[11u].y - _444)) * _407) + (_444 * _440)) * 4.55000019073486328125) * _468) * _493) + _493) - (_468 * _493)) * ((_360 * (cbMtdParam._m0[14u].y - _356)) + _356);
    float _516 = ((((((((_441 * (cbMtdParam._m0[11u].z - _446)) * _407) + (_446 * _441)) * 4.55000019073486328125) * _468) * _494) + _494) - (_468 * _494)) * ((_360 * (cbMtdParam._m0[14u].z - _357)) + _357);
    vec4 _533 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _537 = _533.z;
    float _541 = (_533.x * 2.0) + (-1.0);
    float _543 = (_533.y * 2.0) + (-1.0);
    float _544 = dot(vec2(_541, _543), vec2(_541, _543));
    float _4174 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _549 = sqrt(1.0 - (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))));
    float _552 = fma(_549, _283, fma(_543, _276, _541 * _255));
    float _555 = fma(_549, _284, fma(_543, _277, _541 * _256));
    float _558 = fma(_549, _285, fma(_543, _278, _541 * _257));
    float _562 = inversesqrt(dot(vec3(_552, _555, _558), vec3(_552, _555, _558)));
    float _563 = _562 * _552;
    float _564 = _562 * _555;
    float _565 = _562 * _558;
    float _577 = abs((fract(cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4185 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _578 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _583 = (_578 * _578) * (3.0 - (_578 * 2.0));
    float _584 = isnan(cbMtdParam._m0[16u].z) ? _583 : (isnan(_583) ? cbMtdParam._m0[16u].z : max(_583, cbMtdParam._m0[16u].z));
    vec4 _603 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[19u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[19u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _608 = (isnan(cbMtdParam._m0[16u].w) ? _584 : (isnan(_584) ? cbMtdParam._m0[16u].w : min(_584, cbMtdParam._m0[16u].w))) * cbMtdParam._m0[17u].y;
    vec4 _636 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _642 = (_636.x * 2.0) + (-1.0);
    float _643 = (_636.y * 2.0) + (-1.0);
    float _644 = dot(vec2(_642, _643), vec2(_642, _643));
    float _4206 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _649 = sqrt(1.0 - (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))));
    float _652 = fma(_649, _283, fma(_643, _276, _642 * _255));
    float _655 = fma(_649, _284, fma(_643, _277, _642 * _256));
    float _658 = fma(_649, _285, fma(_643, _278, _642 * _257));
    float _662 = inversesqrt(dot(vec3(_652, _655, _658), vec3(_652, _655, _658)));
    float _663 = _662 * _652;
    float _664 = _662 * _655;
    float _665 = _662 * _658;
    float _668 = fma(_665, _238, fma(_664, _237, _663 * _236));
    float _671 = fma(_665, _271, fma(_664, _270, _663 * _269));
    float _674 = fma(_665, _285, fma(_664, _284, _663 * _283));
    float _678 = inversesqrt(dot(vec3(_668, _671, _674), vec3(_668, _671, _674)));
    float _682 = fma(_565, _238, fma(_564, _237, _563 * _236));
    float _685 = fma(_565, _271, fma(_564, _270, _563 * _269));
    float _688 = fma(_565, _285, fma(_564, _284, _563 * _283));
    float _692 = inversesqrt(dot(vec3(_682, _685, _688), vec3(_682, _685, _688)));
    vec4 _708 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _714 = (_708.x * 2.0) + (-1.0);
    float _715 = (_708.y * 2.0) + (-1.0);
    float _716 = dot(vec2(_714, _715), vec2(_714, _715));
    float _4217 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _721 = sqrt(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))));
    vec4 _736 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _742 = (_736.x * 2.0) + (-1.0);
    float _743 = (_736.y * 2.0) + (-1.0);
    float _744 = dot(vec2(_742, _743), vec2(_742, _743));
    float _4228 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _749 = sqrt(1.0 - (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))));
    float _752 = fma(_749, _283, fma(_743, _276, _742 * _255));
    float _755 = fma(_749, _284, fma(_743, _277, _742 * _256));
    float _758 = fma(_749, _285, fma(_743, _278, _742 * _257));
    float _762 = inversesqrt(dot(vec3(_752, _755, _758), vec3(_752, _755, _758)));
    float _763 = _762 * _752;
    float _764 = _762 * _755;
    float _765 = _762 * _758;
    float _768 = fma(_765, _238, fma(_764, _237, _763 * _236));
    float _771 = fma(_765, _271, fma(_764, _270, _763 * _269));
    float _774 = fma(_765, _285, fma(_764, _284, _763 * _283));
    float _778 = inversesqrt(dot(vec3(_768, _771, _774), vec3(_768, _771, _774)));
    float _794 = ((((_692 * _682) * cbMtdParam._m0[19u].x) + (((_668 * _407) * _678) * cbMtdParam._m0[18u].z)) + _714) + (((_768 * _419) * _778) * cbMtdParam._m0[18u].w);
    float _797 = ((((_692 * _685) * cbMtdParam._m0[19u].x) + (((_671 * _407) * _678) * cbMtdParam._m0[18u].z)) + _715) + (((_771 * _419) * _778) * cbMtdParam._m0[18u].w);
    float _800 = fma(_721, _283, fma(_797, _269, _794 * _236));
    float _803 = fma(_721, _284, fma(_797, _270, _794 * _237));
    float _806 = fma(_721, _285, fma(_797, _271, _794 * _238));
    float _810 = inversesqrt(dot(vec3(_800, _803, _806), vec3(_800, _803, _806)));
    float _811 = _810 * _800;
    float _812 = _810 * _803;
    float _813 = _810 * _806;
    float _4239 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _814 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _4250 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _815 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _4261 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _4272 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _4283 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _4294 = isnan(0.0) ? cbMtdParam._m0[20u].x : (isnan(cbMtdParam._m0[20u].x) ? 0.0 : max(cbMtdParam._m0[20u].x, 0.0));
    float _819 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _835 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _875 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _885 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _875);
    float _886 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _875);
    float _887 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _875);
    float _891 = inversesqrt(dot(vec3(_885, _886, _887), vec3(_885, _886, _887)));
    float _892 = _885 * _891;
    float _893 = _886 * _891;
    float _894 = _887 * _891;
    vec4 _899 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _901 = _899.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1072 = sqrt(((_885 * _885) + (_886 * _886)) + (_887 * _887));
        float _1078 = (cbMatDynParam._m0[5u].x * _1072) + cbMatDynParam._m0[5u].y;
        float _4305 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1083 = (cbMatDynParam._m0[5u].z * _1072) + cbMatDynParam._m0[5u].w;
        float _4316 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) - _1079)) + _1079) < ((_901 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _912 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _913 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _931 = fma(_813, cbSceneParam._m0[5u].z, fma(_812, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _811));
    float _934 = fma(_813, cbSceneParam._m0[6u].z, fma(_812, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _811));
    float _937 = fma(_813, cbSceneParam._m0[7u].z, fma(_812, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _811));
    uint _950 = uint(roundEven(NORMAL.w)) * 13u;
    uint _951 = _950 + 9u;
    uint _952 = _951 + uint(cbMatDynParam._m0[0u].w);
    float _958 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * cbInstanceData._m0[_952].x;
    float _959 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) * cbInstanceData._m0[_952].y;
    float _960 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * cbInstanceData._m0[_952].z;
    float _4327 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _961 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _4338 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _962 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _4349 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _963 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _964 = 1.0 - _819;
    float _965 = _961 * _964;
    float _966 = _962 * _964;
    float _967 = _963 * _964;
    float _972 = (_961 + (-0.039999999105930328369140625)) * _819;
    float _973 = (_962 + (-0.039999999105930328369140625)) * _819;
    float _974 = (_963 + (-0.039999999105930328369140625)) * _819;
    float _975 = _972 + 0.039999999105930328369140625;
    float _977 = _973 + 0.039999999105930328369140625;
    float _978 = _974 + 0.039999999105930328369140625;
    vec4 _987 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _912, cbSceneParam._m0[86u].y * _913));
    float _990 = _987.x * TEXCOORD_7.w;
    float _991 = dot(vec3(_811, _812, _813), vec3(_892, _893, _894));
    float _994 = _991 * 2.0;
    float _998 = (_994 * _811) - _892;
    float _999 = (_994 * _812) - _893;
    float _1000 = (_994 * _813) - _894;
    float _1004 = abs(dot(vec3(_892, _893, _894), vec3(_811, _812, _813)));
    float _4360 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1006 = sqrt(_815);
    float _1018 = exp2((_1006 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1006 * 3.0));
    float _1024 = (1.0 - _1018) * ((_1006 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1025 = _1018 * _1006;
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1392;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1117 = fma(_1061, cbModelParam._m0[26u].z, fma(_1057, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1053));
        float _1121 = fma(_1061, cbModelParam._m0[27u].z, fma(_1057, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1053));
        float _1125 = fma(_1061, cbModelParam._m0[28u].z, fma(_1057, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1053));
        float _1150 = _1053 + _811;
        float _1151 = _1057 + _812;
        float _1152 = _1061 + _813;
        float _1162 = fma(_1152, cbModelParam._m0[26u].z, fma(_1151, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1150)) - _1117;
        float _1163 = fma(_1152, cbModelParam._m0[27u].z, fma(_1151, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1150)) - _1121;
        float _1164 = fma(_1152, cbModelParam._m0[28u].z, fma(_1151, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1150)) - _1125;
        float _1168 = inversesqrt(dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164)));
        float _1181 = ((_1168 * _1162) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1117 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1182 = ((_1168 * _1163) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1121 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1168 * _1164) / cbModelParam._m0[34u].z) + ((((((_1125 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        float _1220 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1186.x + (-0.5));
        float _1222 = _1220 * (_1186.y + (-0.5));
        float _1223 = _1220 * (_1186.z + (-0.5));
        float _1230 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1193.x + (-0.5));
        float _1232 = _1230 * (_1193.y + (-0.5));
        float _1233 = _1230 * (_1193.z + (-0.5));
        float _1240 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1200.x + (-0.5));
        float _1242 = _1240 * (_1200.y + (-0.5));
        float _1243 = _1240 * (_1200.z + (-0.5));
        float _1250 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1207.x + (-0.5));
        float _1252 = _1250 * (_1207.y + (-0.5));
        float _1253 = _1250 * (_1207.z + (-0.5));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = _1221 * 0.5;
        float _1258 = _1231 * 0.5;
        float _1259 = _1241 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1274 = (dot(vec3(_811, _812, _813), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _4386 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1284 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _4397 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _4408 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_1286 + 1.0))) + _1291) * _1254;
        float _1301 = _1222 * 0.5;
        float _1302 = _1232 * 0.5;
        float _1303 = _1242 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_811, _812, _813), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _4419 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _4430 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _4441 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_1328 + 1.0))) + _1333) * _1255;
        float _1343 = _1223 * 0.5;
        float _1344 = _1233 * 0.5;
        float _1345 = _1243 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_811, _812, _813), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _4452 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _4463 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _4474 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_1370 + 1.0))) + _1375) * _1256;
        _1392 = _1223;
        _1394 = _1222;
        _1395 = _1221;
        _1396 = _1233;
        _1397 = _1232;
        _1398 = _1231;
        _1399 = _1243;
        _1400 = _1242;
        _1401 = _1241;
        _1402 = _1256;
        _1403 = _1255;
        _1404 = _1254;
        _1405 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1406 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1407 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
    }
    else
    {
        _1392 = _1393;
        _1394 = _1393;
        _1395 = _1393;
        _1396 = _1393;
        _1397 = _1393;
        _1398 = _1393;
        _1399 = _1393;
        _1400 = _1393;
        _1401 = _1393;
        _1402 = _1393;
        _1403 = _1393;
        _1404 = _1393;
        _1405 = 0.0;
        _1406 = 0.0;
        _1407 = 0.0;
    }
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1436 = fma(_1061, cbModelParam._m0[30u].z, fma(_1057, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1053));
        float _1440 = fma(_1061, cbModelParam._m0[31u].z, fma(_1057, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1053));
        float _1444 = fma(_1061, cbModelParam._m0[32u].z, fma(_1057, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1053));
        float _1467 = _1053 + _811;
        float _1468 = _1057 + _812;
        float _1469 = _1061 + _813;
        float _1479 = fma(_1469, cbModelParam._m0[30u].z, fma(_1468, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1467)) - _1436;
        float _1480 = fma(_1469, cbModelParam._m0[31u].z, fma(_1468, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1467)) - _1440;
        float _1481 = fma(_1469, cbModelParam._m0[32u].z, fma(_1468, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1467)) - _1444;
        float _1485 = inversesqrt(dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481)));
        float _1498 = ((_1485 * _1479) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1436 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1499 = ((_1485 * _1480) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1440 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1500 = ((_1485 * _1481) / cbModelParam._m0[35u].z) + ((((((_1444 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        float _1535 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1502.x + (-0.5));
        float _1537 = _1535 * (_1502.y + (-0.5));
        float _1538 = _1535 * (_1502.z + (-0.5));
        float _1545 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1509.x + (-0.5));
        float _1547 = _1545 * (_1509.y + (-0.5));
        float _1548 = _1545 * (_1509.z + (-0.5));
        float _1555 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1556 = _1555 * (_1516.x + (-0.5));
        float _1557 = _1555 * (_1516.y + (-0.5));
        float _1558 = _1555 * (_1516.z + (-0.5));
        float _1565 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1566 = _1565 * (_1523.x + (-0.5));
        float _1567 = _1565 * (_1523.y + (-0.5));
        float _1568 = _1565 * (_1523.z + (-0.5));
        float _1569 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1570 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1571 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1572 = _1536 * 0.5;
        float _1573 = _1546 * 0.5;
        float _1574 = _1556 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_811, _812, _813), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4515 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1569 + 9.9999997473787516355514526367188e-06);
        float _4526 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4537 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_1599 + 1.0))) + _1604) * _1569;
        float _1614 = _1537 * 0.5;
        float _1615 = _1547 * 0.5;
        float _1616 = _1557 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1630 = (dot(vec3(_811, _812, _813), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4548 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1639 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1570 + 9.9999997473787516355514526367188e-06);
        float _4559 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4570 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_1641 + 1.0))) + _1646) * _1570;
        float _1656 = _1538 * 0.5;
        float _1657 = _1548 * 0.5;
        float _1658 = _1558 * 0.5;
        float _1659 = dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658));
        float _1664 = (_1659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1659);
        float _1672 = (dot(vec3(_811, _812, _813), vec3(_1664 * _1656, _1664 * _1657, _1664 * _1658)) + 1.0) * 0.5;
        float _4581 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1681 = sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658)) / (_1571 + 9.9999997473787516355514526367188e-06);
        float _4592 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _1683 = _1682 * 2.0;
        float _1687 = (1.0 - _1682) / (_1682 + 1.0);
        float _4603 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _1697 = ((((1.0 - _1688) * (_1683 + 2.0)) * exp2(log2(isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_1683 + 1.0))) + _1688) * _1571;
        _1705 = _1538;
        _1706 = _1537;
        _1707 = _1536;
        _1708 = _1548;
        _1709 = _1547;
        _1710 = _1546;
        _1711 = _1558;
        _1712 = _1557;
        _1713 = _1556;
        _1714 = _1571;
        _1715 = _1570;
        _1716 = _1569;
        _1717 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
        _1718 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
        _1719 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)));
    }
    else
    {
        _1705 = _1393;
        _1706 = _1393;
        _1707 = _1393;
        _1708 = _1393;
        _1709 = _1393;
        _1710 = _1393;
        _1711 = _1393;
        _1712 = _1393;
        _1713 = _1393;
        _1714 = _1393;
        _1715 = _1393;
        _1716 = _1393;
        _1717 = 0.0;
        _1718 = 0.0;
        _1719 = 0.0;
    }
    float _1729 = (cbModelParam._m0[1u].x * (_1717 - _1405)) + _1405;
    float _1730 = (cbModelParam._m0[1u].x * (_1718 - _1406)) + _1406;
    float _1731 = (cbModelParam._m0[1u].x * (_1719 - _1407)) + _1407;
    float _1752 = fma(_1731, cbSceneParam._m0[89u].z, fma(_1730, cbSceneParam._m0[89u].y, _1729 * cbSceneParam._m0[89u].x));
    float _1755 = fma(_1731, cbSceneParam._m0[90u].z, fma(_1730, cbSceneParam._m0[90u].y, _1729 * cbSceneParam._m0[90u].x));
    float _1758 = fma(_1731, cbSceneParam._m0[91u].z, fma(_1730, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1729));
    float _1773 = _998 * 0.5;
    float _1774 = _999 * 0.5;
    float _1775 = _1000 * 0.5;
    float _1776 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1707, _1710, _1713, _1716));
    float _1779 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1706, _1709, _1712, _1715));
    float _1782 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1705, _1708, _1711, _1714));
    float _1816;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1789 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1392, _1396, _1399, _1402));
        float _1793 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1394, _1397, _1400, _1403));
        float _1797 = dot(vec4(_1773, _1774, _1775, 1.0), vec4(_1395, _1398, _1401, _1404));
        float _1804 = dot(vec4(cbModelParam._m0[39u]), vec4(_1773, _1774, _1775, 1.0));
        _1816 = dot(vec3(isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)), isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1804) ? 0.0 : (isnan(0.0) ? _1804 : max(0.0, _1804))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1816 = 1.0;
    }
    float _1827;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1818 = dot(vec4(cbModelParam._m0[40u]), vec4(_1773, _1774, _1775, 1.0));
        _1827 = dot(vec3(isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1818) ? 0.0 : (isnan(0.0) ? _1818 : max(0.0, _1818))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1827 = 1.0;
    }
    float _1831 = (_1827 * cbModelParam._m0[1u].x) + (_1816 * (1.0 - cbModelParam._m0[1u].x));
    float _1841 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _815);
    float _1842 = isnan(_1841) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1841 : min(cbModelParam._m0[25u].z, _1841));
    float _1922;
    float _1924;
    float _1926;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1889 = fma(_1061, cbModelParam._m0[13u].z, fma(_1057, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1053)) + cbModelParam._m0[13u].w;
        float _1893 = fma(_1061, cbModelParam._m0[14u].z, fma(_1057, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1053)) + cbModelParam._m0[14u].w;
        float _1897 = fma(_1061, cbModelParam._m0[15u].z, fma(_1057, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1053)) + cbModelParam._m0[15u].w;
        float _1900 = fma(_1000, cbModelParam._m0[13u].z, fma(_999, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _998));
        float _1903 = fma(_1000, cbModelParam._m0[14u].z, fma(_999, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _998));
        float _1906 = fma(_1000, cbModelParam._m0[15u].z, fma(_999, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _998));
        float _1934;
        if (_1900 > 0.0)
        {
            _1934 = abs((1.0 - _1889) / _1900);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1889 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1934 = frontier_phi_19_17_ladder;
        }
        float _2105;
        if (_1903 > 0.0)
        {
            _2105 = abs((1.0 - _1893) / _1903);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1893 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2105 = frontier_phi_28_24_ladder;
        }
        float _2400;
        if (_1906 > 0.0)
        {
            _2400 = abs((1.0 - _1897) / _1906);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1897 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2400 = frontier_phi_40_35_ladder;
        }
        float _2402 = isnan(_2105) ? _1934 : (isnan(_1934) ? _2105 : min(_1934, _2105));
        float _2403 = isnan(_2400) ? _2402 : (isnan(_2402) ? _2400 : min(_2402, _2400));
        float _2407 = (_2403 * _1900) + _1889;
        float _2408 = (_2403 * _1903) + _1893;
        float _2409 = (_2403 * _1906) + _1897;
        float _2410 = _2403 * 9.9999997473787516355514526367188e-05;
        float _2412 = (-1.0) - _2410;
        float _2414 = _2410 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2409 > _2414) || ((_2409 < _2412) || ((_2408 > _2414) || ((_2408 < _2412) || ((_2407 < _2412) || (_2407 > _2414))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2554 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2409, cbModelParam._m0[9u].z, fma(_2408, cbModelParam._m0[9u].y, _2407 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2409, cbModelParam._m0[10u].z, fma(_2408, cbModelParam._m0[10u].y, _2407 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2409, cbModelParam._m0[11u].z, fma(_2408, cbModelParam._m0[11u].y, _2407 * cbModelParam._m0[11u].x))), _1842);
            frontier_phi_18_40_ladder = _2554.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2554.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2554.x * cbModelParam._m0[1u].y;
        }
        _1922 = frontier_phi_18_40_ladder_2;
        _1924 = frontier_phi_18_40_ladder_1;
        _1926 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1910 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_998, _999, _1000), _1842);
        _1922 = _1910.x * cbModelParam._m0[1u].y;
        _1924 = _1910.y * cbModelParam._m0[1u].y;
        _1926 = _1910.z * cbModelParam._m0[1u].y;
    }
    float _1930 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _815);
    float _1931 = isnan(_1930) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1930 : min(cbModelParam._m0[25u].w, _1930));
    float _2020;
    float _2022;
    float _2024;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1984 = fma(_1061, cbModelParam._m0[21u].z, fma(_1057, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1053)) + cbModelParam._m0[21u].w;
        float _1988 = fma(_1061, cbModelParam._m0[22u].z, fma(_1057, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1053)) + cbModelParam._m0[22u].w;
        float _1992 = fma(_1061, cbModelParam._m0[23u].z, fma(_1057, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1053)) + cbModelParam._m0[23u].w;
        float _1995 = fma(_1000, cbModelParam._m0[21u].z, fma(_999, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _998));
        float _1998 = fma(_1000, cbModelParam._m0[22u].z, fma(_999, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _998));
        float _2001 = fma(_1000, cbModelParam._m0[23u].z, fma(_999, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _998));
        float _2110;
        if (_1995 > 0.0)
        {
            _2110 = abs((1.0 - _1984) / _1995);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1984 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2110 = frontier_phi_30_26_ladder;
        }
        float _2427;
        if (_1998 > 0.0)
        {
            _2427 = abs((1.0 - _1988) / _1998);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1998 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1988 + 1.0) / _1998);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2427 = frontier_phi_42_37_ladder;
        }
        float _2765;
        if (_2001 > 0.0)
        {
            _2765 = abs((1.0 - _1992) / _2001);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1992 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2765 = frontier_phi_52_49_ladder;
        }
        float _2767 = isnan(_2427) ? _2110 : (isnan(_2110) ? _2427 : min(_2110, _2427));
        float _2768 = isnan(_2765) ? _2767 : (isnan(_2767) ? _2765 : min(_2767, _2765));
        float _2772 = (_2768 * _1995) + _1984;
        float _2773 = (_2768 * _1998) + _1988;
        float _2774 = (_2768 * _2001) + _1992;
        float _2775 = _2768 * 9.9999997473787516355514526367188e-05;
        float _2776 = (-1.0) - _2775;
        float _2778 = _2775 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2774 > _2778) || ((_2774 < _2776) || ((_2773 > _2778) || ((_2773 < _2776) || ((_2772 < _2776) || (_2772 > _2778))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2896 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2774, cbModelParam._m0[17u].z, fma(_2773, cbModelParam._m0[17u].y, _2772 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2774, cbModelParam._m0[18u].z, fma(_2773, cbModelParam._m0[18u].y, _2772 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2774, cbModelParam._m0[19u].z, fma(_2773, cbModelParam._m0[19u].y, _2772 * cbModelParam._m0[19u].x))), _1931);
            frontier_phi_27_52_ladder = _2896.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2896.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2896.x * cbModelParam._m0[1u].z;
        }
        _2020 = frontier_phi_27_52_ladder_2;
        _2022 = frontier_phi_27_52_ladder_1;
        _2024 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _2004 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_998, _999, _1000), _1931);
        _2020 = _2004.x * cbModelParam._m0[1u].z;
        _2022 = _2004.y * cbModelParam._m0[1u].z;
        _2024 = _2004.z * cbModelParam._m0[1u].z;
    }
    float _2037 = (((_1024 * _975) + _1025) * _990) * ((cbModelParam._m0[1u].w * (_2020 - _1922)) + _1922);
    float _2039 = (((_1024 * _977) + _1025) * _990) * ((cbModelParam._m0[1u].w * (_2022 - _1924)) + _1924);
    float _2041 = (((_1024 * _978) + _1025) * _990) * ((cbModelParam._m0[1u].w * (_2024 - _1926)) + _1926);
    float _2044 = fma(_2041, cbSceneParam._m0[89u].z, fma(_2039, cbSceneParam._m0[89u].y, _2037 * cbSceneParam._m0[89u].x));
    float _2047 = fma(_2041, cbSceneParam._m0[90u].z, fma(_2039, cbSceneParam._m0[90u].y, _2037 * cbSceneParam._m0[90u].x));
    float _2050 = fma(_2041, cbSceneParam._m0[91u].z, fma(_2039, cbSceneParam._m0[91u].y, _2037 * cbSceneParam._m0[91u].x));
    float _2084 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2088 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2092 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2096 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2097 = _2084 / _2096;
    float _2098 = _2088 / _2096;
    float _2099 = _2092 / _2096;
    float _2246;
    float _2247;
    float _2248;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2126 = ((uint(_2099 > cbSceneParam._m0[59u].y) + uint(_2099 > cbSceneParam._m0[59u].x)) + uint(_2099 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2127 = _2126 + 43u;
        uint _2135 = _2126 + 44u;
        uint _2143 = _2126 + 45u;
        uint _2151 = _2126 + 46u;
        float _2162 = fma(_2096, cbSceneParam._m0[_2127].w, fma(_2092, cbSceneParam._m0[_2127].z, fma(_2088, cbSceneParam._m0[_2127].y, _2084 * cbSceneParam._m0[_2127].x)));
        float _2166 = fma(_2096, cbSceneParam._m0[_2135].w, fma(_2092, cbSceneParam._m0[_2135].z, fma(_2088, cbSceneParam._m0[_2135].y, _2084 * cbSceneParam._m0[_2135].x)));
        float _2174 = fma(_2096, cbSceneParam._m0[_2151].w, fma(_2092, cbSceneParam._m0[_2151].z, fma(_2088, cbSceneParam._m0[_2151].y, _2084 * cbSceneParam._m0[_2151].x)));
        float _2179 = cbSceneParam._m0[33u].z * _2174;
        float _2181 = cbSceneParam._m0[33u].w * _2174;
        float _2184 = fma(_2096, cbSceneParam._m0[_2143].w, fma(_2092, cbSceneParam._m0[_2143].z, fma(_2088, cbSceneParam._m0[_2143].y, _2084 * cbSceneParam._m0[_2143].x))) / _2174;
        float _2232 = (cbSceneParam._m0[33u].x - sqrt(((_2098 * _2098) + (_2097 * _2097)) + (_2099 * _2099))) * cbSceneParam._m0[33u].y;
        float _4729 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2239 = (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2179 + _2162) / _2174, (_2181 + _2166) / _2174), _2184), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2181 + _2162) / _2174, (_2166 - _2179) / _2174), _2184), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2162 - _2179) / _2174, (_2166 - _2181) / _2174), _2184), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2162 - _2181) / _2174, (_2179 + _2166) / _2174), _2184), 0.0)).x), vec4(0.25)));
        _2246 = 1.0 - (_2239 * cbSceneParam._m0[34u].x);
        _2247 = 1.0 - (_2239 * cbSceneParam._m0[34u].y);
        _2248 = 1.0 - (_2239 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2246 = 1.0;
        _2247 = 1.0;
        _2248 = 1.0;
    }
    float _2312;
    float _2314;
    float _2316;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2300 = fma(_2096, cbSceneParam._m0[63u].w, fma(_2092, cbSceneParam._m0[63u].z, fma(_2088, cbSceneParam._m0[63u].y, _2084 * cbSceneParam._m0[63u].x)));
        float _2301 = fma(_2096, cbSceneParam._m0[60u].w, fma(_2092, cbSceneParam._m0[60u].z, fma(_2088, cbSceneParam._m0[60u].y, _2084 * cbSceneParam._m0[60u].x))) / _2300;
        float _2302 = fma(_2096, cbSceneParam._m0[61u].w, fma(_2092, cbSceneParam._m0[61u].z, fma(_2088, cbSceneParam._m0[61u].y, _2084 * cbSceneParam._m0[61u].x))) / _2300;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2301 >= cbSceneParam._m0[64u].x) && (_2302 >= cbSceneParam._m0[64u].y)) && (_2301 <= cbSceneParam._m0[64u].z)) && (_2302 <= cbSceneParam._m0[64u].w))
        {
            float _2440 = fma(_2096, cbSceneParam._m0[62u].w, fma(_2092, cbSceneParam._m0[62u].z, fma(_2088, cbSceneParam._m0[62u].y, _2084 * cbSceneParam._m0[62u].x))) / _2300;
            float _2444 = isnan(cbSceneParam._m0[41u].w) ? _2440 : (isnan(_2440) ? cbSceneParam._m0[41u].w : max(_2440, cbSceneParam._m0[41u].w));
            float _2487 = (cbSceneParam._m0[33u].x - sqrt(((_2098 * _2098) + (_2097 * _2097)) + (_2099 * _2099))) * cbSceneParam._m0[33u].y;
            float _4745 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
            float _2494 = (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2301, cbSceneParam._m0[33u].w + _2302), _2444), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2301, _2302 - cbSceneParam._m0[33u].z), _2444), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2301 - cbSceneParam._m0[33u].z, _2302 - cbSceneParam._m0[33u].w), _2444), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2301 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2302), _2444), 0.0)).x), vec4(0.25)));
            float _2498 = 1.0 - (_2494 * cbSceneParam._m0[34u].x);
            float _2499 = 1.0 - (_2494 * cbSceneParam._m0[34u].y);
            float _2500 = 1.0 - (_2494 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2499) ? _2247 : (isnan(_2247) ? _2499 : min(_2247, _2499));
            frontier_phi_39_38_ladder_1 = isnan(_2498) ? _2246 : (isnan(_2246) ? _2498 : min(_2246, _2498));
            frontier_phi_39_38_ladder_2 = isnan(_2500) ? _2248 : (isnan(_2248) ? _2500 : min(_2248, _2500));
        }
        else
        {
            frontier_phi_39_38_ladder = _2247;
            frontier_phi_39_38_ladder_1 = _2246;
            frontier_phi_39_38_ladder_2 = _2248;
        }
        _2312 = frontier_phi_39_38_ladder_1;
        _2314 = frontier_phi_39_38_ladder;
        _2316 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2312 = _2246;
        _2314 = _2247;
        _2316 = _2248;
    }
    uvec4 _2321 = floatBitsToUint(cbInstanceData._m0[_950 + 5u]);
    uint _2323 = _2321.x * 14u;
    uint _2324 = _2323 + 13u;
    float _2331 = _990 + (-1.0);
    float _2336 = (cbLight._m0[_2324].x * _2331) + 1.0;
    float _2337 = (cbLight._m0[_2324].y * _2331) + 1.0;
    float _2338 = (cbLight._m0[_2324].z * _2331) + 1.0;
    float _2339 = (cbLight._m0[_2324].w * _2331) + 1.0;
    uint _2340 = _2323 + 5u;
    float _2346 = isnan(1.0) ? _2337 : (isnan(_2337) ? 1.0 : min(_2337, 1.0));
    uint _2350 = _2323 + 4u;
    float _2359 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
    uint _2363 = _2323 | 1u;
    float _2374 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_811, _812, _813));
    float _2377 = dot(vec3(cbLight._m0[_2363].xyz), vec3(_811, _812, _813));
    float _4781 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _4792 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2382 = (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * 0.3183098733425140380859375;
    float _2384 = (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0))) * 0.3183098733425140380859375;
    float _2391 = ((cbLight._m0[_2340].x * _2346) * _2384) + (((cbLight._m0[_2350].x * _2312) * _2359) * _2382);
    float _2392 = ((_2346 * cbLight._m0[_2340].y) * _2384) + (((cbLight._m0[_2350].y * _2314) * _2359) * _2382);
    float _2393 = ((_2346 * cbLight._m0[_2340].z) * _2384) + (((cbLight._m0[_2350].z * _2316) * _2359) * _2382);
    uvec4 _2397 = floatBitsToUint(cbLight._m0[_2323 + 12u]);
    bool _2399 = _2397.x == 0u;
    float _2501;
    float _2503;
    float _2505;
    if (_2399)
    {
        _2501 = _2391;
        _2503 = _2392;
        _2505 = _2393;
    }
    else
    {
        uint _2509 = _2323 + 6u;
        float _2525 = (dot(vec3(cbLight._m0[_2323 + 2u].xyz), vec3(_811, _812, _813)) * 0.5) + 0.5;
        float _2526 = _2525 * _2525;
        float _4803 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2527 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
        float _2528 = isnan(1.0) ? _2338 : (isnan(_2338) ? 1.0 : min(_2338, 1.0));
        _2501 = (((cbLight._m0[_2509].x * 0.3183098733425140380859375) * _2527) * _2528) + _2391;
        _2503 = (((cbLight._m0[_2509].y * 0.3183098733425140380859375) * _2527) * _2528) + _2392;
        _2505 = (((cbLight._m0[_2509].z * 0.3183098733425140380859375) * _2527) * _2528) + _2393;
    }
    bool _2508 = _2397.y == 0u;
    float _2563;
    float _2565;
    float _2567;
    if (_2508)
    {
        _2563 = _2501;
        _2565 = _2503;
        _2567 = _2505;
    }
    else
    {
        uint _2736 = _2323 + 7u;
        float _2752 = (dot(vec3(cbLight._m0[_2323 + 3u].xyz), vec3(_811, _812, _813)) * 0.5) + 0.5;
        float _2753 = _2752 * _2752;
        float _4819 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2754 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
        float _2755 = isnan(1.0) ? _2339 : (isnan(_2339) ? 1.0 : min(_2339, 1.0));
        _2563 = (((cbLight._m0[_2736].x * 0.3183098733425140380859375) * _2754) * _2755) + _2501;
        _2565 = (((cbLight._m0[_2736].y * 0.3183098733425140380859375) * _2754) * _2755) + _2503;
        _2567 = (((cbLight._m0[_2736].z * 0.3183098733425140380859375) * _2754) * _2755) + _2505;
    }
    uint _2570 = _2323 + 8u;
    float _2583 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2323].w)) * _815) * 0.949999988079071044921875);
    float _2584 = _2583 * _2583;
    float _2585 = cbLight._m0[_2323].x + _892;
    float _2586 = cbLight._m0[_2323].y + _893;
    float _2587 = cbLight._m0[_2323].z + _894;
    float _2591 = inversesqrt(dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587)));
    float _2592 = _2591 * _2585;
    float _2593 = _2591 * _2586;
    float _2594 = _2591 * _2587;
    float _2595 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2323].xyz));
    float _4835 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2598 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
    float _4846 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _2599 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
    float _2600 = dot(vec3(_811, _812, _813), vec3(_2592, _2593, _2594));
    float _4857 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2603 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
    float _2604 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_2592, _2593, _2594));
    float _4868 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
    float _2608 = _2584 * _2584;
    float _2612 = ((_2603 * _2603) * (_2608 + (-1.0))) + 1.0;
    float _2620 = exp2(log2(1.0 - (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0)))) * 5.0);
    float _2621 = 0.959999978542327880859375 - _972;
    float _2623 = 0.959999978542327880859375 - _973;
    float _2624 = 0.959999978542327880859375 - _974;
    float _2631 = 1.0 - _2584;
    float _2642 = (0.5 / (((_2599 * ((_2598 * _2631) + _2584)) + 9.9999999392252902907785028219223e-09) + (((_2599 * _2631) + _2584) * _2598))) * _2598;
    float _4879 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2644 = (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2608 / ((_2612 * _2612) * 3.141590118408203125));
    uint _2658 = _2323 + 9u;
    float _2669 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2363].w)) * _815) * 0.949999988079071044921875);
    float _2670 = _2669 * _2669;
    float _2671 = cbLight._m0[_2363].x + _892;
    float _2672 = cbLight._m0[_2363].y + _893;
    float _2673 = cbLight._m0[_2363].z + _894;
    float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
    float _2678 = _2677 * _2671;
    float _2679 = _2677 * _2672;
    float _2680 = _2677 * _2673;
    float _2681 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2363].xyz));
    float _4890 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2684 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
    float _2685 = dot(vec3(_811, _812, _813), vec3(_2678, _2679, _2680));
    float _4901 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2688 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
    float _2689 = dot(vec3(cbLight._m0[_2363].xyz), vec3(_2678, _2679, _2680));
    float _4912 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
    float _2693 = _2670 * _2670;
    float _2697 = ((_2688 * _2688) * (_2693 + (-1.0))) + 1.0;
    float _2704 = exp2(log2(1.0 - (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0)))) * 5.0);
    float _2711 = 1.0 - _2670;
    float _2721 = (0.5 / (((_2599 * ((_2684 * _2711) + _2670)) + 9.9999999392252902907785028219223e-09) + (((_2599 * _2711) + _2670) * _2684))) * _2684;
    float _4923 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2723 = (isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0))) * (_2693 / ((_2697 * _2697) * 3.141590118408203125));
    float _2733 = (((((_2704 * _2621) + _975) * cbLight._m0[_2658].x) * _2723) * _2346) + ((((cbLight._m0[_2570].x * _2312) * ((_2620 * _2621) + _975)) * _2644) * _2359);
    float _2734 = (((((_2704 * _2623) + _977) * cbLight._m0[_2658].y) * _2723) * _2346) + ((((cbLight._m0[_2570].y * _2314) * ((_2620 * _2623) + _977)) * _2644) * _2359);
    float _2735 = (((((_2704 * _2624) + _978) * cbLight._m0[_2658].z) * _2723) * _2346) + ((((cbLight._m0[_2570].z * _2316) * ((_2620 * _2624) + _978)) * _2644) * _2359);
    float _2791;
    float _2793;
    float _2795;
    if (_2399)
    {
        _2791 = _2733;
        _2793 = _2734;
        _2795 = _2735;
    }
    else
    {
        uint _2797 = _2323 + 2u;
        uint _2801 = _2323 + 10u;
        float _2815 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2797].w)) * _815) * 0.949999988079071044921875);
        float _2816 = _2815 * _2815;
        float _2817 = cbLight._m0[_2797].x + _892;
        float _2818 = cbLight._m0[_2797].y + _893;
        float _2819 = cbLight._m0[_2797].z + _894;
        float _2823 = inversesqrt(dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819)));
        float _2824 = _2823 * _2817;
        float _2825 = _2823 * _2818;
        float _2826 = _2823 * _2819;
        float _2827 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2797].xyz));
        float _4934 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2830 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
        float _2831 = dot(vec3(_811, _812, _813), vec3(_2824, _2825, _2826));
        float _4945 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2834 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
        float _2835 = dot(vec3(cbLight._m0[_2797].xyz), vec3(_2824, _2825, _2826));
        float _4956 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2839 = _2816 * _2816;
        float _2843 = ((_2834 * _2834) * (_2839 + (-1.0))) + 1.0;
        float _2850 = exp2(log2(1.0 - (isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0)))) * 5.0);
        float _2857 = 1.0 - _2816;
        float _2867 = (0.5 / (((_2599 * ((_2830 * _2857) + _2816)) + 9.9999999392252902907785028219223e-09) + (((_2599 * _2857) + _2816) * _2830))) * _2830;
        float _4967 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2869 = (isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0))) * (_2839 / ((_2843 * _2843) * 3.141590118408203125));
        float _2870 = isnan(1.0) ? _2338 : (isnan(_2338) ? 1.0 : min(_2338, 1.0));
        _2791 = (((((_2850 * _2621) + _975) * cbLight._m0[_2801].x) * _2869) * _2870) + _2733;
        _2793 = (((((_2850 * _2623) + _977) * cbLight._m0[_2801].y) * _2869) * _2870) + _2734;
        _2795 = (((((_2850 * _2624) + _978) * cbLight._m0[_2801].z) * _2869) * _2870) + _2735;
    }
    float _2901;
    float _2903;
    float _2905;
    if (_2508)
    {
        _2901 = _2791;
        _2903 = _2793;
        _2905 = _2795;
    }
    else
    {
        uint _2912 = _2323 + 3u;
        uint _2916 = _2323 + 11u;
        float _2930 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2912].w)) * _815) * 0.949999988079071044921875);
        float _2931 = _2930 * _2930;
        float _2932 = cbLight._m0[_2912].x + _892;
        float _2933 = cbLight._m0[_2912].y + _893;
        float _2934 = cbLight._m0[_2912].z + _894;
        float _2938 = inversesqrt(dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934)));
        float _2939 = _2938 * _2932;
        float _2940 = _2938 * _2933;
        float _2941 = _2938 * _2934;
        float _2942 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2912].xyz));
        float _4983 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2945 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
        float _2946 = dot(vec3(_811, _812, _813), vec3(_2939, _2940, _2941));
        float _4994 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2949 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
        float _2950 = dot(vec3(cbLight._m0[_2912].xyz), vec3(_2939, _2940, _2941));
        float _5005 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        float _2954 = _2931 * _2931;
        float _2958 = ((_2949 * _2949) * (_2954 + (-1.0))) + 1.0;
        float _2965 = exp2(log2(1.0 - (isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0)))) * 5.0);
        float _2972 = 1.0 - _2931;
        float _2982 = (0.5 / (((_2599 * ((_2945 * _2972) + _2931)) + 9.9999999392252902907785028219223e-09) + (((_2599 * _2972) + _2931) * _2945))) * _2945;
        float _5016 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
        float _2984 = (isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0))) * (_2954 / ((_2958 * _2958) * 3.141590118408203125));
        float _2985 = isnan(1.0) ? _2339 : (isnan(_2339) ? 1.0 : min(_2339, 1.0));
        _2901 = (((((_2965 * _2621) + _975) * cbLight._m0[_2916].x) * _2984) * _2985) + _2791;
        _2903 = (((((_2965 * _2623) + _977) * cbLight._m0[_2916].y) * _2984) * _2985) + _2793;
        _2905 = (((((_2965 * _2624) + _978) * cbLight._m0[_2916].z) * _2984) * _2985) + _2795;
    }
    float _3050;
    float _3052;
    float _3054;
    float _3056;
    float _3058;
    float _3060;
    if (_2321.y == 0u)
    {
        uvec4 _3006 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3007 = _3006.x;
        uint _3018 = uint((float(_3006.y) * floor(float(uint(cbSceneParam._m0[85u].y * _913) / _3007))) + floor(float(uint(cbSceneParam._m0[85u].x * _912) / _3007)));
        float _3028 = (log2(_2099 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3029 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
        uint _3032 = uint(isnan(14.0) ? _3029 : (isnan(_3029) ? 14.0 : min(_3029, 14.0)));
        uvec4 _3037 = texelFetch(g_lightClusterGridBuffer, int(((_3032 << 2u) + (_3018 << 6u)) >> 2u));
        uint _3038 = _3037.x;
        uint _3039 = _3006.z;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        if (((((1u << ((_3039 >> 4u) & 15u)) + 4294967295u) & _3038) == 0u) || ((_3039 & 240u) == 0u))
        {
            _3138 = 0.0;
            _3140 = 0.0;
            _3142 = 0.0;
            _3144 = 0.0;
            _3146 = 0.0;
            _3148 = 0.0;
        }
        else
        {
            float _3139;
            float _3141;
            float _3143;
            float _3145;
            float _3147;
            float _3149;
            float _3290 = 0.0;
            float _3291 = 0.0;
            float _3292 = 0.0;
            float _3293 = 0.0;
            float _3294 = 0.0;
            float _3295 = 0.0;
            uint _3296 = 0u;
            uint _3305;
            bool _3306;
            for (;;)
            {
                _3305 = texelFetch(g_lightClassification, int((((_3032 << 5u) + (_3018 << 9u)) + (_3296 << 2u)) >> 2u)).x;
                _3306 = _3305 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3306)
                {
                    frontier_phi_73_pred = _3295;
                    frontier_phi_73_pred_1 = _3294;
                    frontier_phi_73_pred_2 = _3293;
                    frontier_phi_73_pred_3 = _3292;
                    frontier_phi_73_pred_4 = _3291;
                    frontier_phi_73_pred_5 = _3290;
                }
                else
                {
                    float _3435;
                    float _3436;
                    float _3437;
                    float _3438;
                    float _3439;
                    float _3440;
                    uint _3441;
                    _3435 = _3290;
                    _3436 = _3291;
                    _3437 = _3292;
                    _3438 = _3293;
                    _3439 = _3294;
                    _3440 = _3295;
                    _3441 = _3305;
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    float _3366;
                    float _3367;
                    for (;;)
                    {
                        uint _3445 = uint(findLSB(_3441)) + (_3296 << 5u);
                        uint _3442 = (_3441 + 4294967295u) & _3441;
                        uint _3447 = _3445 * 48u;
                        vec4 _3461 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3447)).x, texelFetch(g_PointLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3447 + 3u)).x));
                        uint _3467 = (_3445 * 48u) + 4u;
                        vec4 _3480 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3467)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 3u)).x));
                        uint _3486 = (_3445 * 48u) + 8u;
                        vec3 _3497 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3486)).x, texelFetch(g_PointLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3486 + 2u)).x));
                        float _3501 = _3461.x - _2097;
                        float _3502 = _3461.y - _2098;
                        float _3503 = _3461.z - _2099;
                        float _3504 = dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503));
                        float _3507 = inversesqrt(_3504);
                        float _3508 = _3507 * _3501;
                        float _3509 = _3507 * _3502;
                        float _3510 = _3507 * _3503;
                        float _3511 = dot(vec3(_931, _934, _937), vec3(_3508, _3509, _3510));
                        float _3516 = 1.0 - (_3504 * _3461.w);
                        float _5042 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                        float _3517 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
                        float _3518 = sqrt(_3504) * _3480.w;
                        float _3520 = 1.39999997615814208984375 / (_3518 + 1.39999997615814208984375);
                        float _3521 = _3520 * _3520;
                        float _3524 = ((1.0 - _3521) * _3511) + _3521;
                        float _3527 = _3518 * _3518;
                        float _3531 = ((isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0))) * _3517) / ((_3527 * 0.699999988079071044921875) + 1.0);
                        float _3535 = (-0.0) - _2097;
                        float _3536 = (-0.0) - _2098;
                        float _3537 = (-0.0) - _2099;
                        float _3541 = inversesqrt(dot(vec3(_3535, _3536, _3537), vec3(_3535, _3536, _3537)));
                        float _3542 = _3541 * _3535;
                        float _3543 = _3541 * _3536;
                        float _3544 = _3541 * _3537;
                        float _3551 = exp2(log2(1.0 / ((_3527 * 3.5) + 5.0)) * 0.25);
                        float _3552 = 1.0 - _1006;
                        float _3559 = sqrt(1.0 - ((1.0 - (_3552 * _3552)) * (1.0 - (_3551 * _3551))));
                        float _3560 = _3559 * _3559;
                        float _3561 = _3560 * _3560;
                        float _3562 = _3542 + _3508;
                        float _3563 = _3543 + _3509;
                        float _3564 = _3544 + _3510;
                        float _3568 = inversesqrt(dot(vec3(_3562, _3563, _3564), vec3(_3562, _3563, _3564)));
                        float _3572 = dot(vec3(_931, _934, _937), vec3(_3542, _3543, _3544));
                        float _5058 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                        float _3575 = isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0));
                        float _3576 = dot(vec3(_931, _934, _937), vec3(_3568 * _3562, _3568 * _3563, _3568 * _3564));
                        float _5069 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                        float _3579 = isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0));
                        float _3583 = ((_3579 * _3579) * (_3561 + (-1.0))) + 1.0;
                        float _3584 = _3520 * _3560;
                        float _3585 = _3584 * _3584;
                        float _3588 = ((1.0 - _3585) * _3511) + _3585;
                        float _5080 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                        float _3589 = isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0));
                        float _3590 = 1.0 - _3560;
                        float _3600 = (0.5 / (((_3589 * ((_3575 * _3590) + _3560)) + 9.9999999392252902907785028219223e-09) + (((_3589 * _3590) + _3560) * _3575))) * _3589;
                        float _5091 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                        float _3611 = (((_3561 * 3.1415927410125732421875) * (isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0)))) / ((_3583 * _3583) * ((_3527 * 2.1991131305694580078125) + 3.141590118408203125))) * _3517;
                        _3365 = (_3531 * _3480.x) + _3438;
                        _3366 = (_3531 * _3480.y) + _3439;
                        _3367 = (_3531 * _3480.z) + _3440;
                        _3362 = (_3611 * _3497.x) + _3435;
                        _3363 = (_3611 * _3497.y) + _3436;
                        _3364 = (_3611 * _3497.z) + _3437;
                        if (_3442 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3435 = _3362;
                            _3436 = _3363;
                            _3437 = _3364;
                            _3438 = _3365;
                            _3439 = _3366;
                            _3440 = _3367;
                            _3441 = _3442;
                        }
                    }
                    frontier_phi_73_pred = _3367;
                    frontier_phi_73_pred_1 = _3366;
                    frontier_phi_73_pred_2 = _3365;
                    frontier_phi_73_pred_3 = _3364;
                    frontier_phi_73_pred_4 = _3363;
                    frontier_phi_73_pred_5 = _3362;
                }
                _3149 = frontier_phi_73_pred;
                _3147 = frontier_phi_73_pred_1;
                _3145 = frontier_phi_73_pred_2;
                _3143 = frontier_phi_73_pred_3;
                _3141 = frontier_phi_73_pred_4;
                _3139 = frontier_phi_73_pred_5;
                uint _3297 = _3296 + 1u;
                if (_3297 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3290 = _3139;
                    _3291 = _3141;
                    _3292 = _3143;
                    _3293 = _3145;
                    _3294 = _3147;
                    _3295 = _3149;
                    _3296 = _3297;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3138 = _3139;
            _3140 = _3141;
            _3142 = _3143;
            _3144 = _3145;
            _3146 = _3147;
            _3148 = _3149;
        }
        uvec4 _3152 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3153 = _3152.z;
        uint _3155 = (_3153 >> 8u) & 15u;
        float _3258;
        float _3260;
        float _3262;
        float _3264;
        float _3266;
        float _3268;
        if (((4294967295u << _3155) & _3038) == 0u)
        {
            _3258 = _3138;
            _3260 = _3140;
            _3262 = _3142;
            _3264 = _3144;
            _3266 = _3146;
            _3268 = _3148;
        }
        else
        {
            float _3283 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
            float _3284 = _3283 * _2097;
            float _3285 = _3283 * _2098;
            float _3286 = _3283 * _2099;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3155 < ((_3153 >> 12u) & 15u))
            {
                float _3259;
                float _3261;
                float _3263;
                float _3265;
                float _3267;
                float _3269;
                float _3418 = _3138;
                float _3419 = _3140;
                float _3420 = _3142;
                float _3421 = _3144;
                float _3422 = _3146;
                float _3423 = _3148;
                uint _3424 = _3155;
                uint _3433;
                bool _3434;
                for (;;)
                {
                    _3433 = texelFetch(g_lightClassification, int((((_3032 << 5u) + (_3018 << 9u)) + (_3424 << 2u)) >> 2u)).x;
                    _3434 = _3433 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3434)
                    {
                        frontier_phi_84_pred = _3422;
                        frontier_phi_84_pred_1 = _3421;
                        frontier_phi_84_pred_2 = _3420;
                        frontier_phi_84_pred_3 = _3419;
                        frontier_phi_84_pred_4 = _3418;
                        frontier_phi_84_pred_5 = _3423;
                    }
                    else
                    {
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3919;
                        float _3920;
                        float _3921;
                        float _3922;
                        float _3923;
                        float _3924;
                        float _3638 = _3418;
                        float _3639 = _3419;
                        float _3640 = _3420;
                        float _3641 = _3421;
                        float _3642 = _3422;
                        float _3643 = _3423;
                        uint _3644 = _3433;
                        uint _3645;
                        vec4 _3670;
                        float _3671;
                        vec4 _3686;
                        vec3 _3698;
                        vec4 _3713;
                        vec4 _3728;
                        float _3775;
                        bool _3776;
                        for (;;)
                        {
                            uint _3655 = ((_3424 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3644));
                            _3645 = (_3644 + 4294967295u) & _3644;
                            uint _3657 = _3655 * 40u;
                            _3670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 3u)).x));
                            _3671 = _3670.w;
                            uint _3673 = (_3655 * 40u) + 4u;
                            _3686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 3u)).x));
                            uint _3688 = (_3655 * 40u) + 8u;
                            _3698 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x));
                            uint _3700 = (_3655 * 40u) + 16u;
                            _3713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 3u)).x));
                            uint _3715 = (_3655 * 40u) + 20u;
                            _3728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 3u)).x));
                            uint _3731 = (_3655 * 40u) + 24u;
                            vec4 _3744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 3u)).x));
                            uint _3750 = (_3655 * 40u) + 28u;
                            vec4 _3763 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 3u)).x));
                            _3775 = fma(_2099, _3763.z, fma(_2098, _3763.y, _3763.x * _2097)) + _3763.w;
                            _3776 = !((fma(_2099, _3744.z, fma(_2098, _3744.y, _3744.x * _2097)) + _3744.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3776)
                            {
                                float _3803 = _3670.x - _2097;
                                float _3804 = _3670.y - _2098;
                                float _3805 = _3670.z - _2099;
                                float _3806 = dot(vec3(_3803, _3804, _3805), vec3(_3803, _3804, _3805));
                                float _3809 = inversesqrt(_3806);
                                float _3810 = _3809 * _3803;
                                float _3811 = _3809 * _3804;
                                float _3812 = _3809 * _3805;
                                float _3816 = 1.0 - (_3806 / (_3671 * _3671));
                                float _5102 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3817 = isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0));
                                float _3821 = sqrt(_3806) * _3686.w;
                                float _3823 = 1.39999997615814208984375 / (_3821 + 1.39999997615814208984375);
                                float _3824 = _3823 * _3823;
                                float _3827 = ((1.0 - _3824) * dot(vec3(_3810, _3811, _3812), vec3(_931, _934, _937))) + _3824;
                                float _3830 = _3821 * _3821;
                                float _3834 = (fma(_2099, _3713.z, fma(_2098, _3713.y, _3713.x * _2097)) + _3713.w) / _3775;
                                float _3835 = (fma(_2099, _3728.z, fma(_2098, _3728.y, _3728.x * _2097)) + _3728.w) / _3775;
                                float _3839 = 1.0 - dot(vec2(_3834, _3835), vec2(_3834, _3835));
                                float _5118 = isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0));
                                float _3840 = isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0));
                                float _3841 = _3840 * (((isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0))) * _3817) / ((_3830 * 0.699999988079071044921875) + 1.0));
                                float _3853 = exp2(log2(1.0 / ((_3830 * 3.5) + 5.0)) * 0.25);
                                float _3854 = 1.0 - _1006;
                                float _3861 = sqrt(1.0 - ((1.0 - (_3854 * _3854)) * (1.0 - (_3853 * _3853))));
                                float _3862 = _3861 * _3861;
                                float _3863 = _3862 * _3862;
                                float _3864 = _3810 - _3284;
                                float _3865 = _3811 - _3285;
                                float _3866 = _3812 - _3286;
                                float _3870 = inversesqrt(dot(vec3(_3864, _3865, _3866), vec3(_3864, _3865, _3866)));
                                float _3874 = dot(vec3(_931, _934, _937), vec3((-0.0) - _3284, (-0.0) - _3285, (-0.0) - _3286));
                                float _5129 = isnan(0.0) ? _3874 : (isnan(_3874) ? 0.0 : max(_3874, 0.0));
                                float _3877 = isnan(1.0) ? _5129 : (isnan(_5129) ? 1.0 : min(_5129, 1.0));
                                float _3878 = dot(vec3(_931, _934, _937), vec3(_3870 * _3864, _3870 * _3865, _3870 * _3866));
                                float _5140 = isnan(0.0) ? _3878 : (isnan(_3878) ? 0.0 : max(_3878, 0.0));
                                float _3881 = isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0));
                                float _3885 = ((_3881 * _3881) * (_3863 + (-1.0))) + 1.0;
                                float _3886 = _3823 * _3862;
                                float _3887 = _3886 * _3886;
                                float _3893 = ((1.0 - _3887) * dot(vec3(_931, _934, _937), vec3(_3810, _3811, _3812))) + _3887;
                                float _5151 = isnan(0.0) ? _3893 : (isnan(_3893) ? 0.0 : max(_3893, 0.0));
                                float _3894 = isnan(1.0) ? _5151 : (isnan(_5151) ? 1.0 : min(_5151, 1.0));
                                float _3895 = 1.0 - _3862;
                                float _3905 = (0.5 / (((_3894 * ((_3877 * _3895) + _3862)) + 9.9999999392252902907785028219223e-09) + (((_3894 * _3895) + _3862) * _3877))) * _3894;
                                float _5162 = isnan(0.0) ? _3905 : (isnan(_3905) ? 0.0 : max(_3905, 0.0));
                                float _3915 = (_3840 * _3817) * (((_3863 * 3.1415927410125732421875) * (isnan(1.0) ? _5162 : (isnan(_5162) ? 1.0 : min(_5162, 1.0)))) / ((_3885 * _3885) * ((_3830 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3841 * _3686.y;
                                frontier_phi_90_pred_1 = _3841 * _3686.x;
                                frontier_phi_90_pred_2 = _3915 * _3698.z;
                                frontier_phi_90_pred_3 = _3915 * _3698.y;
                                frontier_phi_90_pred_4 = _3915 * _3698.x;
                                frontier_phi_90_pred_5 = _3841 * _3686.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3923 = frontier_phi_90_pred;
                            _3922 = frontier_phi_90_pred_1;
                            _3921 = frontier_phi_90_pred_2;
                            _3920 = frontier_phi_90_pred_3;
                            _3919 = frontier_phi_90_pred_4;
                            _3924 = frontier_phi_90_pred_5;
                            _3628 = _3922 + _3641;
                            _3629 = _3923 + _3642;
                            _3630 = _3924 + _3643;
                            _3625 = _3919 + _3638;
                            _3626 = _3920 + _3639;
                            _3627 = _3921 + _3640;
                            if (_3645 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3638 = _3625;
                                _3639 = _3626;
                                _3640 = _3627;
                                _3641 = _3628;
                                _3642 = _3629;
                                _3643 = _3630;
                                _3644 = _3645;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3629;
                        frontier_phi_84_pred_1 = _3628;
                        frontier_phi_84_pred_2 = _3627;
                        frontier_phi_84_pred_3 = _3626;
                        frontier_phi_84_pred_4 = _3625;
                        frontier_phi_84_pred_5 = _3630;
                    }
                    _3267 = frontier_phi_84_pred;
                    _3265 = frontier_phi_84_pred_1;
                    _3263 = frontier_phi_84_pred_2;
                    _3261 = frontier_phi_84_pred_3;
                    _3259 = frontier_phi_84_pred_4;
                    _3269 = frontier_phi_84_pred_5;
                    uint _3425 = _3424 + 1u;
                    if (_3425 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3418 = _3259;
                        _3419 = _3261;
                        _3420 = _3263;
                        _3421 = _3265;
                        _3422 = _3267;
                        _3423 = _3269;
                        _3424 = _3425;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3269;
                frontier_phi_65_66_ladder_1 = _3265;
                frontier_phi_65_66_ladder_2 = _3267;
                frontier_phi_65_66_ladder_3 = _3261;
                frontier_phi_65_66_ladder_4 = _3259;
                frontier_phi_65_66_ladder_5 = _3263;
            }
            else
            {
                frontier_phi_65_66_ladder = _3148;
                frontier_phi_65_66_ladder_1 = _3144;
                frontier_phi_65_66_ladder_2 = _3146;
                frontier_phi_65_66_ladder_3 = _3140;
                frontier_phi_65_66_ladder_4 = _3138;
                frontier_phi_65_66_ladder_5 = _3142;
            }
            _3258 = frontier_phi_65_66_ladder_4;
            _3260 = frontier_phi_65_66_ladder_3;
            _3262 = frontier_phi_65_66_ladder_5;
            _3264 = frontier_phi_65_66_ladder_1;
            _3266 = frontier_phi_65_66_ladder_2;
            _3268 = frontier_phi_65_66_ladder;
        }
        float _3273 = isnan(1.0) ? _990 : (isnan(_990) ? 1.0 : min(_990, 1.0));
        _3050 = (_3273 * _3264) + _2563;
        _3052 = (_3273 * _3266) + _2565;
        _3054 = (_3273 * _3268) + _2567;
        _3056 = ((_3258 * _975) * _3273) + _2901;
        _3058 = ((_3260 * _977) * _3273) + _2903;
        _3060 = ((_3262 * _978) * _3273) + _2905;
    }
    else
    {
        _3050 = _2563;
        _3052 = _2565;
        _3054 = _2567;
        _3056 = _2901;
        _3058 = _2903;
        _3060 = _2905;
    }
    uint _3066 = _951 + uint(cbMatDynParam._m0[0u].w);
    float _5178 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _5189 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _5200 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _5211 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _3092 = (((isnan(1.0) ? _5178 : (isnan(_5178) ? 1.0 : min(_5178, 1.0))) * (_3050 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _990))) + ((_3056 + ((isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0))) * _1831)) * cbPerFrame._m0[3u].x)) + (((((_608 * _603.x) + cbMtdParam._m0[20u].y) * TEXCOORD_7.x) * cbMtdParam._m0[17u].x) * cbInstanceData._m0[_3066].x);
    float _3094 = (((((cbMtdParam._m0[20u].z + (_608 * _603.y)) * TEXCOORD_7.y) * cbMtdParam._m0[17u].x) * cbInstanceData._m0[_3066].y) + ((_3058 + ((isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0))) * _1831)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5189 : (isnan(_5189) ? 1.0 : min(_5189, 1.0))) * (_3052 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _990)));
    float _3096 = (((((cbMtdParam._m0[20u].w + (_608 * _603.z)) * TEXCOORD_7.z) * cbMtdParam._m0[17u].x) * cbInstanceData._m0[_3066].z) + ((_3060 + ((isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))) * _1831)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5200 : (isnan(_5200) ? 1.0 : min(_5200, 1.0))) * (_3054 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _990)));
    float _3097 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
    float _3098 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
    float _3099 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
    float _3104 = cbInstanceData._m0[_950 + 6u].w * (isnan(1.0) ? _5211 : (isnan(_5211) ? 1.0 : min(_5211, 1.0)));
    float _3109 = _912 / cbSceneParam._m0[86u].x;
    float _3110 = _913 / cbSceneParam._m0[86u].y;
    vec4 _3124 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3109, _3110, (log2((isnan(cbSceneParam._m0[77u].w) ? _835 : (isnan(_835) ? cbSceneParam._m0[77u].w : min(_835, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3126 = _3124.x;
    float _3127 = _3124.y;
    float _3128 = _3124.z;
    float _3129 = _3124.w;
    float _3200;
    float _3202;
    float _3204;
    float _3206;
    if (_835 > cbSceneParam._m0[78u].w)
    {
        float _3163 = isnan(_835) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _835 : min(cbSceneParam._m0[80u].w, _835));
        float _3164 = _3163 / _835;
        float _3175 = _3164 * _885;
        float _3176 = _886 * _3164;
        float _3177 = (-0.0) - _3176;
        float _3178 = _3164 * _887;
        float _3180 = (cbSceneParam._m0[77u].w * _3177) / _3163;
        float _3181 = _3180 + cbSceneParam._m0[79u].w;
        float _3182 = cbSceneParam._m0[79u].w - _3176;
        float _3188 = sqrt(((_3175 * _3175) + (_3176 * _3176)) + (_3178 * _3178));
        float _3191 = (1.0 - (cbSceneParam._m0[77u].w / _3163)) * _3188;
        float _3196 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3198 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3375;
        if (abs((_3177 - _3180) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3375 = ((((_3181 > 0.0) ? exp2(_3196 * _3181) : (2.0 - exp2(_3198 * _3181))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3191;
        }
        else
        {
            float _3319 = 1.0 / cbSceneParam._m0[80u].x;
            float _3320 = isnan(_3182) ? _3181 : (isnan(_3181) ? _3182 : max(_3181, _3182));
            float _3321 = isnan(_3182) ? _3181 : (isnan(_3181) ? _3182 : min(_3181, _3182));
            float _3330 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : min(_3320, 0.0));
            float _3331 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : min(_3321, 0.0));
            _3375 = ((abs(_3188 / _3177) * cbSceneParam._m0[80u].y) * ((((_3330 - _3331) * 2.0) - ((exp2(_3196 * (isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0)))) - exp2(_3196 * (isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0))))) * _3319)) - ((exp2(_3198 * _3330) - exp2(_3198 * _3331)) * _3319))) + (_3191 * cbSceneParam._m0[80u].z);
        }
        vec4 _3377 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3109, _3110, 1.0), 0.0);
        float _3386 = exp2((_3375 * (-1.44269502162933349609375)) * (1.0 - _3377.w));
        float _3387 = log2(_3386);
        float _3403 = log2(_3129);
        _3200 = (exp2(_3403 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3387 * cbSceneParam._m0[78u].x)) * _3377.x) / cbSceneParam._m0[78u].x)) + _3126;
        _3202 = (exp2(_3403 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3387 * cbSceneParam._m0[78u].y)) * _3377.y) / cbSceneParam._m0[78u].y)) + _3127;
        _3204 = (exp2(_3403 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3387 * cbSceneParam._m0[78u].z)) * _3377.z) / cbSceneParam._m0[78u].z)) + _3128;
        _3206 = _3386 * _3129;
    }
    else
    {
        _3200 = _3126;
        _3202 = _3127;
        _3204 = _3128;
        _3206 = _3129;
    }
    bool _3413;
    vec4 _3216;
    vec4 _3238;
    float _3240;
    float _3244;
    float _3245;
    float _3246;
    float _3247;
    bool _3257;
    for (;;)
    {
        _3216 = cbMatDynParam._m0[0u];
        float _3218 = roundEven(_3216.y);
        bool _3219 = _3218 == 3.0;
        float _3220 = log2(_3206);
        float _3227 = exp2(_3220 * cbSceneParam._m0[78u].x) * _3097;
        float _3228 = exp2(_3220 * cbSceneParam._m0[78u].y) * _3098;
        float _3229 = exp2(_3220 * cbSceneParam._m0[78u].z) * _3099;
        float _3236 = _901 + (-0.5);
        _3238 = cbMtdParam._m0[1u];
        _3240 = _3238.y * _3236;
        float _3243 = (_3218 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3244 = _3243 * (_3219 ? _3227 : (_3227 + (cbSceneParam._m0[72u].w * _3200)));
        _3245 = _3243 * (_3219 ? _3228 : (_3228 + (cbSceneParam._m0[72u].w * _3202)));
        _3246 = _3243 * (_3219 ? _3229 : (_3229 + (cbSceneParam._m0[72u].w * _3204)));
        _3247 = _3236 * 0.999000012874603271484375;
        _3257 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3257)
        {
            if ((cbInstanceData._m0[_950 + 7u].x + _3247) < 0.5)
            {
                _3413 = true;
                break;
            }
        }
        uint _3354 = _951 + uint(_3216.w);
        if ((cbInstanceData._m0[_3354].w < 1.0) && ((cbInstanceData._m0[_3354].w + _3247) < 0.5))
        {
            _3413 = true;
            break;
        }
        if ((_3240 + _491) < _3238.x)
        {
            _3413 = true;
            break;
        }
        _3413 = false;
        break;
    }
    float _3616;
    if (_3413)
    {
        discard_state = true;
        _3616 = 0.0;
    }
    else
    {
        _3616 = _3104;
    }
    SV_Target.x = _3244;
    SV_Target.y = _3245;
    SV_Target.z = _3246;
    SV_Target.w = _3616;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3104;
    discard_exit();
}


