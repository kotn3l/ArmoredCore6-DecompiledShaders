#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[21];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_5;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in float TEXCOORD_5;
layout(location = 6, component = 1) in float TEXCOORD_6;
layout(location = 7) in vec4 TEXCOORD_7;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1348;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _244 = ((NORMAL.y * TANGENT_2.z) - (NORMAL.z * TANGENT_2.y)) * TANGENT_2.w;
    float _245 = ((NORMAL.z * TANGENT_2.x) - (NORMAL.x * TANGENT_2.z)) * TANGENT_2.w;
    float _246 = ((NORMAL.x * TANGENT_2.y) - (NORMAL.y * TANGENT_2.x)) * TANGENT_2.w;
    float _250 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _251 = _250 * _244;
    float _252 = _250 * _245;
    float _253 = _250 * _246;
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = _257 * NORMAL.x;
    float _259 = _257 * NORMAL.y;
    float _260 = _257 * NORMAL.z;
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = _264 * TANGENT.x;
    float _266 = _264 * TANGENT.y;
    float _267 = _264 * TANGENT.z;
    float _271 = inversesqrt(dot(vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z), vec3(TANGENT_2.x, TANGENT_2.y, TANGENT_2.z)));
    float _272 = _271 * TANGENT_2.x;
    float _273 = _271 * TANGENT_2.y;
    float _274 = _271 * TANGENT_2.z;
    float _279;
    float _280;
    float _281;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _279 = (-0.0) - _258;
        _280 = (-0.0) - _259;
        _281 = (-0.0) - _260;
    }
    else
    {
        _279 = _258;
        _280 = _259;
        _281 = _260;
    }
    vec4 _319 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _331 = 1.0 - ((1.0 - _319.x) * 1.39999997615814208984375);
    float _3978 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _332 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _339 = (_332 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[15u].x)) + cbMtdParam._m0[15u].x;
    float _340 = (_332 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[15u].y)) + cbMtdParam._m0[15u].y;
    float _341 = (_332 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[15u].z)) + cbMtdParam._m0[15u].z;
    float _343 = 1.0 - ((1.0 - _319.y) * 1.39999997615814208984375);
    float _3989 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _344 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _351 = (_344 * (cbMtdParam._m0[13u].x - _339)) + _339;
    float _352 = (_344 * (cbMtdParam._m0[13u].y - _340)) + _340;
    float _353 = (_344 * (cbMtdParam._m0[13u].z - _341)) + _341;
    float _355 = 1.0 - ((1.0 - _319.z) * 1.39999997615814208984375);
    float _4000 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _356 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _385 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w)).x * cbMtdParam._m0[19u].z;
    float _399 = ((cbMtdParam._m0[18u].y * (-1.39999997615814208984375)) * ((TEXCOORD_6 - _385) + (cbMtdParam._m0[17u].w * TEXCOORD_6))) + 1.0;
    float _4011 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _401 = 1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)));
    float _402 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _403 = isnan(1.0) ? _402 : (isnan(_402) ? 1.0 : min(_402, 1.0));
    float _411 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * ((TEXCOORD_5 - _385) + (cbMtdParam._m0[17u].z * TEXCOORD_5))) + 1.0;
    float _4032 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _413 = 1.0 - (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)));
    float _414 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _415 = isnan(1.0) ? _414 : (isnan(_414) ? 1.0 : min(_414, 1.0));
    vec4 _433 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _435 = _433.x;
    float _436 = _433.y;
    float _437 = _433.z;
    float _438 = cbMtdParam._m0[12u].x * _415;
    float _440 = cbMtdParam._m0[12u].y * _415;
    float _442 = cbMtdParam._m0[12u].z * _415;
    float _462 = _413 + _401;
    float _463 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _464 = isnan(1.0) ? _463 : (isnan(_463) ? 1.0 : min(_463, 1.0));
    vec4 _482 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.z) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.w) + cbTextureTilingScale._m0[0u].w));
    float _487 = _482.w;
    float _488 = _482.x * cbMtdParam._m0[10u].x;
    float _489 = _482.y * cbMtdParam._m0[10u].y;
    float _490 = _482.z * cbMtdParam._m0[10u].z;
    float _510 = ((_488 - (_464 * _488)) + ((((((_435 * (cbMtdParam._m0[11u].x - _438)) * _403) + (_438 * _435)) * 4.55000019073486328125) * _464) * _488)) * ((_356 * (cbMtdParam._m0[14u].x - _351)) + _351);
    float _511 = ((((((((_436 * (cbMtdParam._m0[11u].y - _440)) * _403) + (_440 * _436)) * 4.55000019073486328125) * _464) * _489) + _489) - (_464 * _489)) * ((_356 * (cbMtdParam._m0[14u].y - _352)) + _352);
    float _512 = ((((((((_437 * (cbMtdParam._m0[11u].z - _442)) * _403) + (_442 * _437)) * 4.55000019073486328125) * _464) * _490) + _490) - (_464 * _490)) * ((_356 * (cbMtdParam._m0[14u].z - _353)) + _353);
    vec4 _529 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.z) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.w) + cbTextureTilingScale._m0[8u].w));
    float _533 = _529.z;
    float _537 = (_529.x * 2.0) + (-1.0);
    float _539 = (_529.y * 2.0) + (-1.0);
    float _540 = dot(vec2(_537, _539), vec2(_537, _539));
    float _4063 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _545 = sqrt(1.0 - (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))));
    float _548 = fma(_545, _279, fma(_539, _272, _537 * _251));
    float _551 = fma(_545, _280, fma(_539, _273, _537 * _252));
    float _554 = fma(_545, _281, fma(_539, _274, _537 * _253));
    float _558 = inversesqrt(dot(vec3(_548, _551, _554), vec3(_548, _551, _554)));
    float _559 = _558 * _548;
    float _560 = _558 * _551;
    float _561 = _558 * _554;
    float _573 = abs((fract(cbMtdParam._m0[16u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4074 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _574 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _579 = (_574 * _574) * (3.0 - (_574 * 2.0));
    float _580 = isnan(cbMtdParam._m0[16u].z) ? _579 : (isnan(_579) ? cbMtdParam._m0[16u].z : max(_579, cbMtdParam._m0[16u].z));
    vec4 _599 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_0, SS_DiffuseMap), vec2((((cbMtdParam._m0[19u].y * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[1u].x) + cbTextureTilingScale._m0[1u].z, (((cbMtdParam._m0[19u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[1u].y) + cbTextureTilingScale._m0[1u].w));
    float _604 = (isnan(cbMtdParam._m0[16u].w) ? _580 : (isnan(_580) ? cbMtdParam._m0[16u].w : min(_580, cbMtdParam._m0[16u].w))) * cbMtdParam._m0[17u].y;
    vec4 _632 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    float _638 = (_632.x * 2.0) + (-1.0);
    float _639 = (_632.y * 2.0) + (-1.0);
    float _640 = dot(vec2(_638, _639), vec2(_638, _639));
    float _4095 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _645 = sqrt(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))));
    float _648 = fma(_645, _279, fma(_639, _272, _638 * _251));
    float _651 = fma(_645, _280, fma(_639, _273, _638 * _252));
    float _654 = fma(_645, _281, fma(_639, _274, _638 * _253));
    float _658 = inversesqrt(dot(vec3(_648, _651, _654), vec3(_648, _651, _654)));
    float _659 = _658 * _648;
    float _660 = _658 * _651;
    float _661 = _658 * _654;
    float _664 = fma(_661, _234, fma(_660, _233, _659 * _232));
    float _667 = fma(_661, _267, fma(_660, _266, _659 * _265));
    float _670 = fma(_661, _281, fma(_660, _280, _659 * _279));
    float _674 = inversesqrt(dot(vec3(_664, _667, _670), vec3(_664, _667, _670)));
    float _678 = fma(_561, _234, fma(_560, _233, _559 * _232));
    float _681 = fma(_561, _267, fma(_560, _266, _559 * _265));
    float _684 = fma(_561, _281, fma(_560, _280, _559 * _279));
    float _688 = inversesqrt(dot(vec3(_678, _681, _684), vec3(_678, _681, _684)));
    vec4 _704 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _710 = (_704.x * 2.0) + (-1.0);
    float _711 = (_704.y * 2.0) + (-1.0);
    float _712 = dot(vec2(_710, _711), vec2(_710, _711));
    float _4106 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _717 = sqrt(1.0 - (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))));
    vec4 _732 = texture(sampler2D(M_AMSN_V_Ov_N_Building_Emissive_Glow_Border_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.z) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.w) + cbTextureTilingScale._m0[7u].w));
    float _738 = (_732.x * 2.0) + (-1.0);
    float _739 = (_732.y * 2.0) + (-1.0);
    float _740 = dot(vec2(_738, _739), vec2(_738, _739));
    float _4117 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _745 = sqrt(1.0 - (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))));
    float _748 = fma(_745, _279, fma(_739, _272, _738 * _251));
    float _751 = fma(_745, _280, fma(_739, _273, _738 * _252));
    float _754 = fma(_745, _281, fma(_739, _274, _738 * _253));
    float _758 = inversesqrt(dot(vec3(_748, _751, _754), vec3(_748, _751, _754)));
    float _759 = _758 * _748;
    float _760 = _758 * _751;
    float _761 = _758 * _754;
    float _764 = fma(_761, _234, fma(_760, _233, _759 * _232));
    float _767 = fma(_761, _267, fma(_760, _266, _759 * _265));
    float _770 = fma(_761, _281, fma(_760, _280, _759 * _279));
    float _774 = inversesqrt(dot(vec3(_764, _767, _770), vec3(_764, _767, _770)));
    float _790 = ((((_688 * _678) * cbMtdParam._m0[19u].x) + (((_664 * _403) * _674) * cbMtdParam._m0[18u].z)) + _710) + (((_764 * _415) * _774) * cbMtdParam._m0[18u].w);
    float _793 = ((((_688 * _681) * cbMtdParam._m0[19u].x) + (((_667 * _403) * _674) * cbMtdParam._m0[18u].z)) + _711) + (((_767 * _415) * _774) * cbMtdParam._m0[18u].w);
    float _796 = fma(_717, _279, fma(_793, _265, _790 * _232));
    float _799 = fma(_717, _280, fma(_793, _266, _790 * _233));
    float _802 = fma(_717, _281, fma(_793, _267, _790 * _234));
    float _806 = inversesqrt(dot(vec3(_796, _799, _802), vec3(_796, _799, _802)));
    float _807 = _806 * _796;
    float _808 = _806 * _799;
    float _809 = _806 * _802;
    float _4128 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _810 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _4139 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _811 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _4150 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _4161 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _4172 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _4183 = isnan(0.0) ? cbMtdParam._m0[20u].x : (isnan(cbMtdParam._m0[20u].x) ? 0.0 : max(cbMtdParam._m0[20u].x, 0.0));
    float _815 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _831 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _881 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _871);
    float _882 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _871);
    float _883 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _871);
    float _887 = inversesqrt(dot(vec3(_881, _882, _883), vec3(_881, _882, _883)));
    float _888 = _881 * _887;
    float _889 = _882 * _887;
    float _890 = _883 * _887;
    float _896 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _897 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _915 = fma(_809, cbSceneParam._m0[5u].z, fma(_808, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _807));
    float _918 = fma(_809, cbSceneParam._m0[6u].z, fma(_808, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _807));
    float _921 = fma(_809, cbSceneParam._m0[7u].z, fma(_808, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _807));
    uint _934 = uint(roundEven(NORMAL.w)) * 13u;
    uint _935 = _934 + 9u;
    uint _936 = _935 + uint(cbMatDynParam._m0[0u].w);
    float _942 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * cbInstanceData._m0[_936].x;
    float _943 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * cbInstanceData._m0[_936].y;
    float _944 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * cbInstanceData._m0[_936].z;
    float _4194 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _4205 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _4216 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _948 = 1.0 - _815;
    float _949 = _945 * _948;
    float _950 = _946 * _948;
    float _951 = _947 * _948;
    float _956 = (_945 + (-0.039999999105930328369140625)) * _815;
    float _957 = (_946 + (-0.039999999105930328369140625)) * _815;
    float _958 = (_947 + (-0.039999999105930328369140625)) * _815;
    float _959 = _956 + 0.039999999105930328369140625;
    float _961 = _957 + 0.039999999105930328369140625;
    float _962 = _958 + 0.039999999105930328369140625;
    vec4 _971 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _896, cbSceneParam._m0[86u].y * _897));
    float _974 = _971.x * TEXCOORD_7.w;
    float _975 = dot(vec3(_807, _808, _809), vec3(_888, _889, _890));
    float _978 = _975 * 2.0;
    float _982 = (_978 * _807) - _888;
    float _983 = (_978 * _808) - _889;
    float _984 = (_978 * _809) - _890;
    float _988 = abs(dot(vec3(_888, _889, _890), vec3(_807, _808, _809)));
    float _4227 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _990 = sqrt(_811);
    float _1002 = exp2((_990 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_990 * 3.0));
    float _1008 = (1.0 - _1002) * ((_990 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1009 = _1002 * _990;
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1347;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1072 = fma(_1045, cbModelParam._m0[26u].z, fma(_1041, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1037));
        float _1076 = fma(_1045, cbModelParam._m0[27u].z, fma(_1041, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1037));
        float _1080 = fma(_1045, cbModelParam._m0[28u].z, fma(_1041, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1037));
        float _1105 = _1037 + _807;
        float _1106 = _1041 + _808;
        float _1107 = _1045 + _809;
        float _1117 = fma(_1107, cbModelParam._m0[26u].z, fma(_1106, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1105)) - _1072;
        float _1118 = fma(_1107, cbModelParam._m0[27u].z, fma(_1106, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1105)) - _1076;
        float _1119 = fma(_1107, cbModelParam._m0[28u].z, fma(_1106, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1105)) - _1080;
        float _1123 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
        float _1136 = ((_1123 * _1117) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1072 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1123 * _1118) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1076 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1123 * _1119) / cbModelParam._m0[34u].z) + ((((((_1080 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        float _1175 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1141.x + (-0.5));
        float _1177 = _1175 * (_1141.y + (-0.5));
        float _1178 = _1175 * (_1141.z + (-0.5));
        float _1185 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1148.x + (-0.5));
        float _1187 = _1185 * (_1148.y + (-0.5));
        float _1188 = _1185 * (_1148.z + (-0.5));
        float _1195 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1155.x + (-0.5));
        float _1197 = _1195 * (_1155.y + (-0.5));
        float _1198 = _1195 * (_1155.z + (-0.5));
        float _1205 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1162.x + (-0.5));
        float _1207 = _1205 * (_1162.y + (-0.5));
        float _1208 = _1205 * (_1162.z + (-0.5));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = _1176 * 0.5;
        float _1213 = _1186 * 0.5;
        float _1214 = _1196 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1229 = (dot(vec3(_807, _808, _809), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _4253 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1239 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _4264 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _4275 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_1241 + 1.0))) + _1246) * _1209;
        float _1256 = _1177 * 0.5;
        float _1257 = _1187 * 0.5;
        float _1258 = _1197 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_807, _808, _809), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _4308 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1283 + 1.0))) + _1288) * _1210;
        float _1298 = _1178 * 0.5;
        float _1299 = _1188 * 0.5;
        float _1300 = _1198 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_807, _808, _809), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _4341 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1325 + 1.0))) + _1330) * _1211;
        _1347 = _1178;
        _1349 = _1177;
        _1350 = _1176;
        _1351 = _1188;
        _1352 = _1187;
        _1353 = _1186;
        _1354 = _1198;
        _1355 = _1197;
        _1356 = _1196;
        _1357 = _1211;
        _1358 = _1210;
        _1359 = _1209;
        _1360 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1362 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
    }
    else
    {
        _1347 = _1348;
        _1349 = _1348;
        _1350 = _1348;
        _1351 = _1348;
        _1352 = _1348;
        _1353 = _1348;
        _1354 = _1348;
        _1355 = _1348;
        _1356 = _1348;
        _1357 = _1348;
        _1358 = _1348;
        _1359 = _1348;
        _1360 = 0.0;
        _1361 = 0.0;
        _1362 = 0.0;
    }
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1388 = fma(_1045, cbModelParam._m0[30u].z, fma(_1041, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1037));
        float _1392 = fma(_1045, cbModelParam._m0[31u].z, fma(_1041, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1037));
        float _1396 = fma(_1045, cbModelParam._m0[32u].z, fma(_1041, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1037));
        float _1419 = _1037 + _807;
        float _1420 = _1041 + _808;
        float _1421 = _1045 + _809;
        float _1431 = fma(_1421, cbModelParam._m0[30u].z, fma(_1420, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1419)) - _1388;
        float _1432 = fma(_1421, cbModelParam._m0[31u].z, fma(_1420, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1419)) - _1392;
        float _1433 = fma(_1421, cbModelParam._m0[32u].z, fma(_1420, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1419)) - _1396;
        float _1437 = inversesqrt(dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433)));
        float _1450 = ((_1437 * _1431) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1388 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1451 = ((_1437 * _1432) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1392 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1452 = ((_1437 * _1433) / cbModelParam._m0[35u].z) + ((((((_1396 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        float _1487 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1454.x + (-0.5));
        float _1489 = _1487 * (_1454.y + (-0.5));
        float _1490 = _1487 * (_1454.z + (-0.5));
        float _1497 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1461.x + (-0.5));
        float _1499 = _1497 * (_1461.y + (-0.5));
        float _1500 = _1497 * (_1461.z + (-0.5));
        float _1507 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1468.x + (-0.5));
        float _1509 = _1507 * (_1468.y + (-0.5));
        float _1510 = _1507 * (_1468.z + (-0.5));
        float _1517 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1475.x + (-0.5));
        float _1519 = _1517 * (_1475.y + (-0.5));
        float _1520 = _1517 * (_1475.z + (-0.5));
        float _1521 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = _1488 * 0.5;
        float _1525 = _1498 * 0.5;
        float _1526 = _1508 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1540 = (dot(vec3(_807, _808, _809), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _4382 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1549 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1521 + 9.9999997473787516355514526367188e-06);
        float _4393 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1551 = _1550 * 2.0;
        float _1555 = (1.0 - _1550) / (_1550 + 1.0);
        float _4404 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _1565 = ((((1.0 - _1556) * (_1551 + 2.0)) * exp2(log2(isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_1551 + 1.0))) + _1556) * _1521;
        float _1566 = _1489 * 0.5;
        float _1567 = _1499 * 0.5;
        float _1568 = _1509 * 0.5;
        float _1569 = dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568));
        float _1574 = (_1569 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1569);
        float _1582 = (dot(vec3(_807, _808, _809), vec3(_1574 * _1566, _1574 * _1567, _1574 * _1568)) + 1.0) * 0.5;
        float _4415 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1591 = sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4426 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1593 = _1592 * 2.0;
        float _1597 = (1.0 - _1592) / (_1592 + 1.0);
        float _4437 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1607 = ((((1.0 - _1598) * (_1593 + 2.0)) * exp2(log2(isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_1593 + 1.0))) + _1598) * _1522;
        float _1608 = _1490 * 0.5;
        float _1609 = _1500 * 0.5;
        float _1610 = _1510 * 0.5;
        float _1611 = dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610));
        float _1616 = (_1611 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1611);
        float _1624 = (dot(vec3(_807, _808, _809), vec3(_1616 * _1608, _1616 * _1609, _1616 * _1610)) + 1.0) * 0.5;
        float _4448 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1633 = sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4459 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1635 = _1634 * 2.0;
        float _1639 = (1.0 - _1634) / (_1634 + 1.0);
        float _4470 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1649 = ((((1.0 - _1640) * (_1635 + 2.0)) * exp2(log2(isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_1635 + 1.0))) + _1640) * _1523;
        _1657 = _1490;
        _1658 = _1489;
        _1659 = _1488;
        _1660 = _1500;
        _1661 = _1499;
        _1662 = _1498;
        _1663 = _1510;
        _1664 = _1509;
        _1665 = _1508;
        _1666 = _1523;
        _1667 = _1522;
        _1668 = _1521;
        _1669 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)));
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)));
        _1671 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)));
    }
    else
    {
        _1657 = _1348;
        _1658 = _1348;
        _1659 = _1348;
        _1660 = _1348;
        _1661 = _1348;
        _1662 = _1348;
        _1663 = _1348;
        _1664 = _1348;
        _1665 = _1348;
        _1666 = _1348;
        _1667 = _1348;
        _1668 = _1348;
        _1669 = 0.0;
        _1670 = 0.0;
        _1671 = 0.0;
    }
    float _1681 = (cbModelParam._m0[1u].x * (_1669 - _1360)) + _1360;
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1361)) + _1361;
    float _1683 = (cbModelParam._m0[1u].x * (_1671 - _1362)) + _1362;
    float _1704 = fma(_1683, cbSceneParam._m0[89u].z, fma(_1682, cbSceneParam._m0[89u].y, _1681 * cbSceneParam._m0[89u].x));
    float _1707 = fma(_1683, cbSceneParam._m0[90u].z, fma(_1682, cbSceneParam._m0[90u].y, _1681 * cbSceneParam._m0[90u].x));
    float _1710 = fma(_1683, cbSceneParam._m0[91u].z, fma(_1682, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1681));
    float _1725 = _982 * 0.5;
    float _1726 = _983 * 0.5;
    float _1727 = _984 * 0.5;
    float _1728 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1659, _1662, _1665, _1668));
    float _1731 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1734 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1657, _1660, _1663, _1666));
    float _1768;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1741 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1347, _1351, _1354, _1357));
        float _1745 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1349, _1352, _1355, _1358));
        float _1749 = dot(vec4(_1725, _1726, _1727, 1.0), vec4(_1350, _1353, _1356, _1359));
        float _1756 = dot(vec4(cbModelParam._m0[39u]), vec4(_1725, _1726, _1727, 1.0));
        _1768 = dot(vec3(isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1756) ? 0.0 : (isnan(0.0) ? _1756 : max(0.0, _1756))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1768 = 1.0;
    }
    float _1779;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1770 = dot(vec4(cbModelParam._m0[40u]), vec4(_1725, _1726, _1727, 1.0));
        _1779 = dot(vec3(isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1770) ? 0.0 : (isnan(0.0) ? _1770 : max(0.0, _1770))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1779 = 1.0;
    }
    float _1783 = (_1779 * cbModelParam._m0[1u].x) + (_1768 * (1.0 - cbModelParam._m0[1u].x));
    float _1793 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _811);
    float _1794 = isnan(_1793) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1793 : min(cbModelParam._m0[25u].z, _1793));
    float _1874;
    float _1876;
    float _1878;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1841 = fma(_1045, cbModelParam._m0[13u].z, fma(_1041, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1037)) + cbModelParam._m0[13u].w;
        float _1845 = fma(_1045, cbModelParam._m0[14u].z, fma(_1041, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1037)) + cbModelParam._m0[14u].w;
        float _1849 = fma(_1045, cbModelParam._m0[15u].z, fma(_1041, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1037)) + cbModelParam._m0[15u].w;
        float _1852 = fma(_984, cbModelParam._m0[13u].z, fma(_983, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _982));
        float _1855 = fma(_984, cbModelParam._m0[14u].z, fma(_983, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _982));
        float _1858 = fma(_984, cbModelParam._m0[15u].z, fma(_983, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _982));
        float _1886;
        if (_1852 > 0.0)
        {
            _1886 = abs((1.0 - _1841) / _1852);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1841 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1886 = frontier_phi_16_14_ladder;
        }
        float _2057;
        if (_1855 > 0.0)
        {
            _2057 = abs((1.0 - _1845) / _1855);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1845 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2057 = frontier_phi_25_21_ladder;
        }
        float _2352;
        if (_1858 > 0.0)
        {
            _2352 = abs((1.0 - _1849) / _1858);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1849 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2352 = frontier_phi_37_32_ladder;
        }
        float _2354 = isnan(_2057) ? _1886 : (isnan(_1886) ? _2057 : min(_1886, _2057));
        float _2355 = isnan(_2352) ? _2354 : (isnan(_2354) ? _2352 : min(_2354, _2352));
        float _2359 = (_2355 * _1852) + _1841;
        float _2360 = (_2355 * _1855) + _1845;
        float _2361 = (_2355 * _1858) + _1849;
        float _2362 = _2355 * 9.9999997473787516355514526367188e-05;
        float _2364 = (-1.0) - _2362;
        float _2366 = _2362 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2361 > _2366) || ((_2361 < _2364) || ((_2360 > _2366) || ((_2360 < _2364) || ((_2359 < _2364) || (_2359 > _2366))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2506 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2361, cbModelParam._m0[9u].z, fma(_2360, cbModelParam._m0[9u].y, _2359 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2361, cbModelParam._m0[10u].z, fma(_2360, cbModelParam._m0[10u].y, _2359 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2361, cbModelParam._m0[11u].z, fma(_2360, cbModelParam._m0[11u].y, _2359 * cbModelParam._m0[11u].x))), _1794);
            frontier_phi_15_37_ladder = _2506.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2506.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2506.z * cbModelParam._m0[1u].y;
        }
        _1874 = frontier_phi_15_37_ladder_1;
        _1876 = frontier_phi_15_37_ladder;
        _1878 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1862 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_982, _983, _984), _1794);
        _1874 = _1862.x * cbModelParam._m0[1u].y;
        _1876 = _1862.y * cbModelParam._m0[1u].y;
        _1878 = _1862.z * cbModelParam._m0[1u].y;
    }
    float _1882 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _811);
    float _1883 = isnan(_1882) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1882 : min(cbModelParam._m0[25u].w, _1882));
    float _1972;
    float _1974;
    float _1976;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1936 = fma(_1045, cbModelParam._m0[21u].z, fma(_1041, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1037)) + cbModelParam._m0[21u].w;
        float _1940 = fma(_1045, cbModelParam._m0[22u].z, fma(_1041, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1037)) + cbModelParam._m0[22u].w;
        float _1944 = fma(_1045, cbModelParam._m0[23u].z, fma(_1041, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1037)) + cbModelParam._m0[23u].w;
        float _1947 = fma(_984, cbModelParam._m0[21u].z, fma(_983, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _982));
        float _1950 = fma(_984, cbModelParam._m0[22u].z, fma(_983, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _982));
        float _1953 = fma(_984, cbModelParam._m0[23u].z, fma(_983, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _982));
        float _2062;
        if (_1947 > 0.0)
        {
            _2062 = abs((1.0 - _1936) / _1947);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1936 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2062 = frontier_phi_27_23_ladder;
        }
        float _2379;
        if (_1950 > 0.0)
        {
            _2379 = abs((1.0 - _1940) / _1950);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1940 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2379 = frontier_phi_39_34_ladder;
        }
        float _2717;
        if (_1953 > 0.0)
        {
            _2717 = abs((1.0 - _1944) / _1953);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1944 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2717 = frontier_phi_49_46_ladder;
        }
        float _2719 = isnan(_2379) ? _2062 : (isnan(_2062) ? _2379 : min(_2062, _2379));
        float _2720 = isnan(_2717) ? _2719 : (isnan(_2719) ? _2717 : min(_2719, _2717));
        float _2724 = (_2720 * _1947) + _1936;
        float _2725 = (_2720 * _1950) + _1940;
        float _2726 = (_2720 * _1953) + _1944;
        float _2727 = _2720 * 9.9999997473787516355514526367188e-05;
        float _2728 = (-1.0) - _2727;
        float _2730 = _2727 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2726 > _2730) || ((_2726 < _2728) || ((_2725 > _2730) || ((_2725 < _2728) || ((_2724 < _2728) || (_2724 > _2730))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2848 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2726, cbModelParam._m0[17u].z, fma(_2725, cbModelParam._m0[17u].y, _2724 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2726, cbModelParam._m0[18u].z, fma(_2725, cbModelParam._m0[18u].y, _2724 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2726, cbModelParam._m0[19u].z, fma(_2725, cbModelParam._m0[19u].y, _2724 * cbModelParam._m0[19u].x))), _1883);
            frontier_phi_24_49_ladder = _2848.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2848.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2848.x * cbModelParam._m0[1u].z;
        }
        _1972 = frontier_phi_24_49_ladder_2;
        _1974 = frontier_phi_24_49_ladder_1;
        _1976 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1956 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_982, _983, _984), _1883);
        _1972 = _1956.x * cbModelParam._m0[1u].z;
        _1974 = _1956.y * cbModelParam._m0[1u].z;
        _1976 = _1956.z * cbModelParam._m0[1u].z;
    }
    float _1989 = (((_1008 * _959) + _1009) * _974) * ((cbModelParam._m0[1u].w * (_1972 - _1874)) + _1874);
    float _1991 = (((_1008 * _961) + _1009) * _974) * ((cbModelParam._m0[1u].w * (_1974 - _1876)) + _1876);
    float _1993 = (((_1008 * _962) + _1009) * _974) * ((cbModelParam._m0[1u].w * (_1976 - _1878)) + _1878);
    float _1996 = fma(_1993, cbSceneParam._m0[89u].z, fma(_1991, cbSceneParam._m0[89u].y, _1989 * cbSceneParam._m0[89u].x));
    float _1999 = fma(_1993, cbSceneParam._m0[90u].z, fma(_1991, cbSceneParam._m0[90u].y, _1989 * cbSceneParam._m0[90u].x));
    float _2002 = fma(_1993, cbSceneParam._m0[91u].z, fma(_1991, cbSceneParam._m0[91u].y, _1989 * cbSceneParam._m0[91u].x));
    float _2036 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2040 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2044 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2048 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2049 = _2036 / _2048;
    float _2050 = _2040 / _2048;
    float _2051 = _2044 / _2048;
    float _2198;
    float _2199;
    float _2200;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2078 = ((uint(_2051 > cbSceneParam._m0[59u].y) + uint(_2051 > cbSceneParam._m0[59u].x)) + uint(_2051 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2079 = _2078 + 43u;
        uint _2087 = _2078 + 44u;
        uint _2095 = _2078 + 45u;
        uint _2103 = _2078 + 46u;
        float _2114 = fma(_2048, cbSceneParam._m0[_2079].w, fma(_2044, cbSceneParam._m0[_2079].z, fma(_2040, cbSceneParam._m0[_2079].y, _2036 * cbSceneParam._m0[_2079].x)));
        float _2118 = fma(_2048, cbSceneParam._m0[_2087].w, fma(_2044, cbSceneParam._m0[_2087].z, fma(_2040, cbSceneParam._m0[_2087].y, _2036 * cbSceneParam._m0[_2087].x)));
        float _2126 = fma(_2048, cbSceneParam._m0[_2103].w, fma(_2044, cbSceneParam._m0[_2103].z, fma(_2040, cbSceneParam._m0[_2103].y, _2036 * cbSceneParam._m0[_2103].x)));
        float _2131 = cbSceneParam._m0[33u].z * _2126;
        float _2133 = cbSceneParam._m0[33u].w * _2126;
        float _2136 = fma(_2048, cbSceneParam._m0[_2095].w, fma(_2044, cbSceneParam._m0[_2095].z, fma(_2040, cbSceneParam._m0[_2095].y, _2036 * cbSceneParam._m0[_2095].x))) / _2126;
        float _2184 = (cbSceneParam._m0[33u].x - sqrt(((_2050 * _2050) + (_2049 * _2049)) + (_2051 * _2051))) * cbSceneParam._m0[33u].y;
        float _4596 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
        float _2191 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2131 + _2114) / _2126, (_2133 + _2118) / _2126), _2136), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2133 + _2114) / _2126, (_2118 - _2131) / _2126), _2136), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2114 - _2131) / _2126, (_2118 - _2133) / _2126), _2136), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2114 - _2133) / _2126, (_2131 + _2118) / _2126), _2136), 0.0)).x), vec4(0.25)));
        _2198 = 1.0 - (_2191 * cbSceneParam._m0[34u].x);
        _2199 = 1.0 - (_2191 * cbSceneParam._m0[34u].y);
        _2200 = 1.0 - (_2191 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2198 = 1.0;
        _2199 = 1.0;
        _2200 = 1.0;
    }
    float _2264;
    float _2266;
    float _2268;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2252 = fma(_2048, cbSceneParam._m0[63u].w, fma(_2044, cbSceneParam._m0[63u].z, fma(_2040, cbSceneParam._m0[63u].y, _2036 * cbSceneParam._m0[63u].x)));
        float _2253 = fma(_2048, cbSceneParam._m0[60u].w, fma(_2044, cbSceneParam._m0[60u].z, fma(_2040, cbSceneParam._m0[60u].y, _2036 * cbSceneParam._m0[60u].x))) / _2252;
        float _2254 = fma(_2048, cbSceneParam._m0[61u].w, fma(_2044, cbSceneParam._m0[61u].z, fma(_2040, cbSceneParam._m0[61u].y, _2036 * cbSceneParam._m0[61u].x))) / _2252;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2253 >= cbSceneParam._m0[64u].x) && (_2254 >= cbSceneParam._m0[64u].y)) && (_2253 <= cbSceneParam._m0[64u].z)) && (_2254 <= cbSceneParam._m0[64u].w))
        {
            float _2392 = fma(_2048, cbSceneParam._m0[62u].w, fma(_2044, cbSceneParam._m0[62u].z, fma(_2040, cbSceneParam._m0[62u].y, _2036 * cbSceneParam._m0[62u].x))) / _2252;
            float _2396 = isnan(cbSceneParam._m0[41u].w) ? _2392 : (isnan(_2392) ? cbSceneParam._m0[41u].w : max(_2392, cbSceneParam._m0[41u].w));
            float _2439 = (cbSceneParam._m0[33u].x - sqrt(((_2050 * _2050) + (_2049 * _2049)) + (_2051 * _2051))) * cbSceneParam._m0[33u].y;
            float _4612 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
            float _2446 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2253, cbSceneParam._m0[33u].w + _2254), _2396), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2253, _2254 - cbSceneParam._m0[33u].z), _2396), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2253 - cbSceneParam._m0[33u].z, _2254 - cbSceneParam._m0[33u].w), _2396), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2253 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2254), _2396), 0.0)).x), vec4(0.25)));
            float _2450 = 1.0 - (_2446 * cbSceneParam._m0[34u].x);
            float _2451 = 1.0 - (_2446 * cbSceneParam._m0[34u].y);
            float _2452 = 1.0 - (_2446 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2451) ? _2199 : (isnan(_2199) ? _2451 : min(_2199, _2451));
            frontier_phi_36_35_ladder_1 = isnan(_2452) ? _2200 : (isnan(_2200) ? _2452 : min(_2200, _2452));
            frontier_phi_36_35_ladder_2 = isnan(_2450) ? _2198 : (isnan(_2198) ? _2450 : min(_2198, _2450));
        }
        else
        {
            frontier_phi_36_35_ladder = _2199;
            frontier_phi_36_35_ladder_1 = _2200;
            frontier_phi_36_35_ladder_2 = _2198;
        }
        _2264 = frontier_phi_36_35_ladder_2;
        _2266 = frontier_phi_36_35_ladder;
        _2268 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2264 = _2198;
        _2266 = _2199;
        _2268 = _2200;
    }
    uvec4 _2273 = floatBitsToUint(cbInstanceData._m0[_934 + 5u]);
    uint _2275 = _2273.x * 14u;
    uint _2276 = _2275 + 13u;
    float _2283 = _974 + (-1.0);
    float _2288 = (cbLight._m0[_2276].x * _2283) + 1.0;
    float _2289 = (cbLight._m0[_2276].y * _2283) + 1.0;
    float _2290 = (cbLight._m0[_2276].z * _2283) + 1.0;
    float _2291 = (cbLight._m0[_2276].w * _2283) + 1.0;
    uint _2292 = _2275 + 5u;
    float _2298 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
    uint _2302 = _2275 + 4u;
    float _2311 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
    uint _2315 = _2275 | 1u;
    float _2326 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_807, _808, _809));
    float _2329 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_807, _808, _809));
    float _4648 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _4659 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2334 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * 0.3183098733425140380859375;
    float _2336 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * 0.3183098733425140380859375;
    float _2343 = ((cbLight._m0[_2292].x * _2298) * _2336) + (((cbLight._m0[_2302].x * _2264) * _2311) * _2334);
    float _2344 = ((_2298 * cbLight._m0[_2292].y) * _2336) + (((cbLight._m0[_2302].y * _2266) * _2311) * _2334);
    float _2345 = ((_2298 * cbLight._m0[_2292].z) * _2336) + (((cbLight._m0[_2302].z * _2268) * _2311) * _2334);
    uvec4 _2349 = floatBitsToUint(cbLight._m0[_2275 + 12u]);
    bool _2351 = _2349.x == 0u;
    float _2453;
    float _2455;
    float _2457;
    if (_2351)
    {
        _2453 = _2343;
        _2455 = _2344;
        _2457 = _2345;
    }
    else
    {
        uint _2461 = _2275 + 6u;
        float _2477 = (dot(vec3(cbLight._m0[_2275 + 2u].xyz), vec3(_807, _808, _809)) * 0.5) + 0.5;
        float _2478 = _2477 * _2477;
        float _4670 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2479 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2480 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
        _2453 = (((cbLight._m0[_2461].x * 0.3183098733425140380859375) * _2479) * _2480) + _2343;
        _2455 = (((cbLight._m0[_2461].y * 0.3183098733425140380859375) * _2479) * _2480) + _2344;
        _2457 = (((cbLight._m0[_2461].z * 0.3183098733425140380859375) * _2479) * _2480) + _2345;
    }
    bool _2460 = _2349.y == 0u;
    float _2515;
    float _2517;
    float _2519;
    if (_2460)
    {
        _2515 = _2453;
        _2517 = _2455;
        _2519 = _2457;
    }
    else
    {
        uint _2688 = _2275 + 7u;
        float _2704 = (dot(vec3(cbLight._m0[_2275 + 3u].xyz), vec3(_807, _808, _809)) * 0.5) + 0.5;
        float _2705 = _2704 * _2704;
        float _4686 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2706 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2707 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2515 = (((cbLight._m0[_2688].x * 0.3183098733425140380859375) * _2706) * _2707) + _2453;
        _2517 = (((cbLight._m0[_2688].y * 0.3183098733425140380859375) * _2706) * _2707) + _2455;
        _2519 = (((cbLight._m0[_2688].z * 0.3183098733425140380859375) * _2706) * _2707) + _2457;
    }
    uint _2522 = _2275 + 8u;
    float _2535 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2275].w)) * _811) * 0.949999988079071044921875);
    float _2536 = _2535 * _2535;
    float _2537 = cbLight._m0[_2275].x + _888;
    float _2538 = cbLight._m0[_2275].y + _889;
    float _2539 = cbLight._m0[_2275].z + _890;
    float _2543 = inversesqrt(dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539)));
    float _2544 = _2543 * _2537;
    float _2545 = _2543 * _2538;
    float _2546 = _2543 * _2539;
    float _2547 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2275].xyz));
    float _4702 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2550 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
    float _4713 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _2551 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
    float _2552 = dot(vec3(_807, _808, _809), vec3(_2544, _2545, _2546));
    float _4724 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2555 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
    float _2556 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_2544, _2545, _2546));
    float _4735 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2560 = _2536 * _2536;
    float _2564 = ((_2555 * _2555) * (_2560 + (-1.0))) + 1.0;
    float _2572 = exp2(log2(1.0 - (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0)))) * 5.0);
    float _2573 = 0.959999978542327880859375 - _956;
    float _2575 = 0.959999978542327880859375 - _957;
    float _2576 = 0.959999978542327880859375 - _958;
    float _2583 = 1.0 - _2536;
    float _2594 = (0.5 / (((_2551 * ((_2550 * _2583) + _2536)) + 9.9999999392252902907785028219223e-09) + (((_2551 * _2583) + _2536) * _2550))) * _2550;
    float _4746 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2596 = (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2560 / ((_2564 * _2564) * 3.141590118408203125));
    uint _2610 = _2275 + 9u;
    float _2621 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2315].w)) * _811) * 0.949999988079071044921875);
    float _2622 = _2621 * _2621;
    float _2623 = cbLight._m0[_2315].x + _888;
    float _2624 = cbLight._m0[_2315].y + _889;
    float _2625 = cbLight._m0[_2315].z + _890;
    float _2629 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
    float _2630 = _2629 * _2623;
    float _2631 = _2629 * _2624;
    float _2632 = _2629 * _2625;
    float _2633 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2315].xyz));
    float _4757 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2636 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
    float _2637 = dot(vec3(_807, _808, _809), vec3(_2630, _2631, _2632));
    float _4768 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2640 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
    float _2641 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_2630, _2631, _2632));
    float _4779 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2645 = _2622 * _2622;
    float _2649 = ((_2640 * _2640) * (_2645 + (-1.0))) + 1.0;
    float _2656 = exp2(log2(1.0 - (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0)))) * 5.0);
    float _2663 = 1.0 - _2622;
    float _2673 = (0.5 / (((_2551 * ((_2636 * _2663) + _2622)) + 9.9999999392252902907785028219223e-09) + (((_2551 * _2663) + _2622) * _2636))) * _2636;
    float _4790 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2675 = (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2645 / ((_2649 * _2649) * 3.141590118408203125));
    float _2685 = (((((_2656 * _2573) + _959) * cbLight._m0[_2610].x) * _2675) * _2298) + ((((cbLight._m0[_2522].x * _2264) * ((_2572 * _2573) + _959)) * _2596) * _2311);
    float _2686 = (((((_2656 * _2575) + _961) * cbLight._m0[_2610].y) * _2675) * _2298) + ((((cbLight._m0[_2522].y * _2266) * ((_2572 * _2575) + _961)) * _2596) * _2311);
    float _2687 = (((((_2656 * _2576) + _962) * cbLight._m0[_2610].z) * _2675) * _2298) + ((((cbLight._m0[_2522].z * _2268) * ((_2572 * _2576) + _962)) * _2596) * _2311);
    float _2743;
    float _2745;
    float _2747;
    if (_2351)
    {
        _2743 = _2685;
        _2745 = _2686;
        _2747 = _2687;
    }
    else
    {
        uint _2749 = _2275 + 2u;
        uint _2753 = _2275 + 10u;
        float _2767 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2749].w)) * _811) * 0.949999988079071044921875);
        float _2768 = _2767 * _2767;
        float _2769 = cbLight._m0[_2749].x + _888;
        float _2770 = cbLight._m0[_2749].y + _889;
        float _2771 = cbLight._m0[_2749].z + _890;
        float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
        float _2776 = _2775 * _2769;
        float _2777 = _2775 * _2770;
        float _2778 = _2775 * _2771;
        float _2779 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2749].xyz));
        float _4801 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2782 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
        float _2783 = dot(vec3(_807, _808, _809), vec3(_2776, _2777, _2778));
        float _4812 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2786 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
        float _2787 = dot(vec3(cbLight._m0[_2749].xyz), vec3(_2776, _2777, _2778));
        float _4823 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2791 = _2768 * _2768;
        float _2795 = ((_2786 * _2786) * (_2791 + (-1.0))) + 1.0;
        float _2802 = exp2(log2(1.0 - (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0)))) * 5.0);
        float _2809 = 1.0 - _2768;
        float _2819 = (0.5 / (((_2551 * ((_2782 * _2809) + _2768)) + 9.9999999392252902907785028219223e-09) + (((_2551 * _2809) + _2768) * _2782))) * _2782;
        float _4834 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2821 = (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * (_2791 / ((_2795 * _2795) * 3.141590118408203125));
        float _2822 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
        _2743 = (((((_2802 * _2573) + _959) * cbLight._m0[_2753].x) * _2821) * _2822) + _2685;
        _2745 = (((((_2802 * _2575) + _961) * cbLight._m0[_2753].y) * _2821) * _2822) + _2686;
        _2747 = (((((_2802 * _2576) + _962) * cbLight._m0[_2753].z) * _2821) * _2822) + _2687;
    }
    float _2853;
    float _2855;
    float _2857;
    if (_2460)
    {
        _2853 = _2743;
        _2855 = _2745;
        _2857 = _2747;
    }
    else
    {
        uint _2864 = _2275 + 3u;
        uint _2868 = _2275 + 11u;
        float _2882 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2864].w)) * _811) * 0.949999988079071044921875);
        float _2883 = _2882 * _2882;
        float _2884 = cbLight._m0[_2864].x + _888;
        float _2885 = cbLight._m0[_2864].y + _889;
        float _2886 = cbLight._m0[_2864].z + _890;
        float _2890 = inversesqrt(dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886)));
        float _2891 = _2890 * _2884;
        float _2892 = _2890 * _2885;
        float _2893 = _2890 * _2886;
        float _2894 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2864].xyz));
        float _4850 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2897 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
        float _2898 = dot(vec3(_807, _808, _809), vec3(_2891, _2892, _2893));
        float _4861 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2901 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
        float _2902 = dot(vec3(cbLight._m0[_2864].xyz), vec3(_2891, _2892, _2893));
        float _4872 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2906 = _2883 * _2883;
        float _2910 = ((_2901 * _2901) * (_2906 + (-1.0))) + 1.0;
        float _2917 = exp2(log2(1.0 - (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0)))) * 5.0);
        float _2924 = 1.0 - _2883;
        float _2934 = (0.5 / (((_2551 * ((_2897 * _2924) + _2883)) + 9.9999999392252902907785028219223e-09) + (((_2551 * _2924) + _2883) * _2897))) * _2897;
        float _4883 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2936 = (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0))) * (_2906 / ((_2910 * _2910) * 3.141590118408203125));
        float _2937 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2853 = (((((_2917 * _2573) + _959) * cbLight._m0[_2868].x) * _2936) * _2937) + _2743;
        _2855 = (((((_2917 * _2575) + _961) * cbLight._m0[_2868].y) * _2936) * _2937) + _2745;
        _2857 = (((((_2917 * _2576) + _962) * cbLight._m0[_2868].z) * _2936) * _2937) + _2747;
    }
    float _3002;
    float _3004;
    float _3006;
    float _3008;
    float _3010;
    float _3012;
    if (_2273.y == 0u)
    {
        uvec4 _2958 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2959 = _2958.x;
        uint _2970 = uint((float(_2958.y) * floor(float(uint(cbSceneParam._m0[85u].y * _897) / _2959))) + floor(float(uint(cbSceneParam._m0[85u].x * _896) / _2959)));
        float _2980 = (log2(_2051 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2981 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
        uint _2984 = uint(isnan(14.0) ? _2981 : (isnan(_2981) ? 14.0 : min(_2981, 14.0)));
        uvec4 _2989 = texelFetch(g_lightClusterGridBuffer, int(((_2984 << 2u) + (_2970 << 6u)) >> 2u));
        uint _2990 = _2989.x;
        uint _2991 = _2958.z;
        float _3090;
        float _3092;
        float _3094;
        float _3096;
        float _3098;
        float _3100;
        if (((((1u << ((_2991 >> 4u) & 15u)) + 4294967295u) & _2990) == 0u) || ((_2991 & 240u) == 0u))
        {
            _3090 = 0.0;
            _3092 = 0.0;
            _3094 = 0.0;
            _3096 = 0.0;
            _3098 = 0.0;
            _3100 = 0.0;
        }
        else
        {
            float _3091;
            float _3093;
            float _3095;
            float _3097;
            float _3099;
            float _3101;
            float _3234 = 0.0;
            float _3235 = 0.0;
            float _3236 = 0.0;
            float _3237 = 0.0;
            float _3238 = 0.0;
            float _3239 = 0.0;
            uint _3240 = 0u;
            uint _3249;
            bool _3250;
            for (;;)
            {
                _3249 = texelFetch(g_lightClassification, int((((_2984 << 5u) + (_2970 << 9u)) + (_3240 << 2u)) >> 2u)).x;
                _3250 = _3249 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3250)
                {
                    frontier_phi_68_pred = _3239;
                    frontier_phi_68_pred_1 = _3238;
                    frontier_phi_68_pred_2 = _3237;
                    frontier_phi_68_pred_3 = _3235;
                    frontier_phi_68_pred_4 = _3234;
                    frontier_phi_68_pred_5 = _3236;
                }
                else
                {
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    uint _3364;
                    _3358 = _3234;
                    _3359 = _3235;
                    _3360 = _3236;
                    _3361 = _3237;
                    _3362 = _3238;
                    _3363 = _3239;
                    _3364 = _3249;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    for (;;)
                    {
                        uint _3368 = uint(findLSB(_3364)) + (_3240 << 5u);
                        uint _3365 = (_3364 + 4294967295u) & _3364;
                        uint _3370 = _3368 * 48u;
                        vec4 _3384 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3370)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 3u)).x));
                        uint _3390 = (_3368 * 48u) + 4u;
                        vec4 _3403 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3390)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 3u)).x));
                        uint _3409 = (_3368 * 48u) + 8u;
                        vec3 _3420 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3409)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 2u)).x));
                        float _3424 = _3384.x - _2049;
                        float _3425 = _3384.y - _2050;
                        float _3426 = _3384.z - _2051;
                        float _3427 = dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426));
                        float _3430 = inversesqrt(_3427);
                        float _3431 = _3430 * _3424;
                        float _3432 = _3430 * _3425;
                        float _3433 = _3430 * _3426;
                        float _3434 = dot(vec3(_915, _918, _921), vec3(_3431, _3432, _3433));
                        float _3439 = 1.0 - (_3427 * _3384.w);
                        float _4909 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3440 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                        float _3441 = sqrt(_3427) * _3403.w;
                        float _3443 = 1.39999997615814208984375 / (_3441 + 1.39999997615814208984375);
                        float _3444 = _3443 * _3443;
                        float _3447 = ((1.0 - _3444) * _3434) + _3444;
                        float _3450 = _3441 * _3441;
                        float _3454 = ((isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0))) * _3440) / ((_3450 * 0.699999988079071044921875) + 1.0);
                        float _3458 = (-0.0) - _2049;
                        float _3459 = (-0.0) - _2050;
                        float _3460 = (-0.0) - _2051;
                        float _3464 = inversesqrt(dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460)));
                        float _3465 = _3464 * _3458;
                        float _3466 = _3464 * _3459;
                        float _3467 = _3464 * _3460;
                        float _3474 = exp2(log2(1.0 / ((_3450 * 3.5) + 5.0)) * 0.25);
                        float _3475 = 1.0 - _990;
                        float _3482 = sqrt(1.0 - ((1.0 - (_3475 * _3475)) * (1.0 - (_3474 * _3474))));
                        float _3483 = _3482 * _3482;
                        float _3484 = _3483 * _3483;
                        float _3485 = _3465 + _3431;
                        float _3486 = _3466 + _3432;
                        float _3487 = _3467 + _3433;
                        float _3491 = inversesqrt(dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487)));
                        float _3495 = dot(vec3(_915, _918, _921), vec3(_3465, _3466, _3467));
                        float _4925 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                        float _3498 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                        float _3499 = dot(vec3(_915, _918, _921), vec3(_3491 * _3485, _3491 * _3486, _3491 * _3487));
                        float _4936 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3502 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                        float _3506 = ((_3502 * _3502) * (_3484 + (-1.0))) + 1.0;
                        float _3507 = _3443 * _3483;
                        float _3508 = _3507 * _3507;
                        float _3511 = ((1.0 - _3508) * _3434) + _3508;
                        float _4947 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3512 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                        float _3513 = 1.0 - _3483;
                        float _3523 = (0.5 / (((_3512 * ((_3498 * _3513) + _3483)) + 9.9999999392252902907785028219223e-09) + (((_3512 * _3513) + _3483) * _3498))) * _3512;
                        float _4958 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3534 = (((_3484 * 3.1415927410125732421875) * (isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0)))) / ((_3506 * _3506) * ((_3450 * 2.1991131305694580078125) + 3.141590118408203125))) * _3440;
                        _3293 = (_3454 * _3403.x) + _3361;
                        _3294 = (_3454 * _3403.y) + _3362;
                        _3295 = (_3454 * _3403.z) + _3363;
                        _3290 = (_3534 * _3420.x) + _3358;
                        _3291 = (_3534 * _3420.y) + _3359;
                        _3292 = (_3534 * _3420.z) + _3360;
                        if (_3365 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3358 = _3290;
                            _3359 = _3291;
                            _3360 = _3292;
                            _3361 = _3293;
                            _3362 = _3294;
                            _3363 = _3295;
                            _3364 = _3365;
                        }
                    }
                    frontier_phi_68_pred = _3295;
                    frontier_phi_68_pred_1 = _3294;
                    frontier_phi_68_pred_2 = _3293;
                    frontier_phi_68_pred_3 = _3291;
                    frontier_phi_68_pred_4 = _3290;
                    frontier_phi_68_pred_5 = _3292;
                }
                _3101 = frontier_phi_68_pred;
                _3099 = frontier_phi_68_pred_1;
                _3097 = frontier_phi_68_pred_2;
                _3093 = frontier_phi_68_pred_3;
                _3091 = frontier_phi_68_pred_4;
                _3095 = frontier_phi_68_pred_5;
                uint _3241 = _3240 + 1u;
                if (_3241 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3234 = _3091;
                    _3235 = _3093;
                    _3236 = _3095;
                    _3237 = _3097;
                    _3238 = _3099;
                    _3239 = _3101;
                    _3240 = _3241;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3090 = _3091;
            _3092 = _3093;
            _3094 = _3095;
            _3096 = _3097;
            _3098 = _3099;
            _3100 = _3101;
        }
        uvec4 _3104 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3105 = _3104.z;
        uint _3107 = (_3105 >> 8u) & 15u;
        float _3202;
        float _3204;
        float _3206;
        float _3208;
        float _3210;
        float _3212;
        if (((4294967295u << _3107) & _2990) == 0u)
        {
            _3202 = _3090;
            _3204 = _3092;
            _3206 = _3094;
            _3208 = _3096;
            _3210 = _3098;
            _3212 = _3100;
        }
        else
        {
            float _3227 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
            float _3228 = _3227 * _2049;
            float _3229 = _3227 * _2050;
            float _3230 = _3227 * _2051;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3107 < ((_3105 >> 12u) & 15u))
            {
                float _3203;
                float _3205;
                float _3207;
                float _3209;
                float _3211;
                float _3213;
                float _3341 = _3090;
                float _3342 = _3092;
                float _3343 = _3094;
                float _3344 = _3096;
                float _3345 = _3098;
                float _3346 = _3100;
                uint _3347 = _3107;
                uint _3356;
                bool _3357;
                for (;;)
                {
                    _3356 = texelFetch(g_lightClassification, int((((_2984 << 5u) + (_2970 << 9u)) + (_3347 << 2u)) >> 2u)).x;
                    _3357 = _3356 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3357)
                    {
                        frontier_phi_74_pred = _3343;
                        frontier_phi_74_pred_1 = _3342;
                        frontier_phi_74_pred_2 = _3341;
                        frontier_phi_74_pred_3 = _3346;
                        frontier_phi_74_pred_4 = _3345;
                        frontier_phi_74_pred_5 = _3344;
                    }
                    else
                    {
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3833;
                        float _3834;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _3838;
                        float _3552 = _3341;
                        float _3553 = _3342;
                        float _3554 = _3343;
                        float _3555 = _3344;
                        float _3556 = _3345;
                        float _3557 = _3346;
                        uint _3558 = _3356;
                        uint _3559;
                        vec4 _3584;
                        float _3585;
                        vec4 _3600;
                        vec3 _3612;
                        vec4 _3627;
                        vec4 _3642;
                        float _3689;
                        bool _3690;
                        for (;;)
                        {
                            uint _3569 = ((_3347 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3558));
                            _3559 = (_3558 + 4294967295u) & _3558;
                            uint _3571 = _3569 * 40u;
                            _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            _3585 = _3584.w;
                            uint _3587 = (_3569 * 40u) + 4u;
                            _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            uint _3602 = (_3569 * 40u) + 8u;
                            _3612 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x));
                            uint _3614 = (_3569 * 40u) + 16u;
                            _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            uint _3629 = (_3569 * 40u) + 20u;
                            _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            uint _3645 = (_3569 * 40u) + 24u;
                            vec4 _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            uint _3664 = (_3569 * 40u) + 28u;
                            vec4 _3677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 3u)).x));
                            _3689 = fma(_2051, _3677.z, fma(_2050, _3677.y, _3677.x * _2049)) + _3677.w;
                            _3690 = !((fma(_2051, _3658.z, fma(_2050, _3658.y, _3658.x * _2049)) + _3658.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3690)
                            {
                                float _3717 = _3584.x - _2049;
                                float _3718 = _3584.y - _2050;
                                float _3719 = _3584.z - _2051;
                                float _3720 = dot(vec3(_3717, _3718, _3719), vec3(_3717, _3718, _3719));
                                float _3723 = inversesqrt(_3720);
                                float _3724 = _3723 * _3717;
                                float _3725 = _3723 * _3718;
                                float _3726 = _3723 * _3719;
                                float _3730 = 1.0 - (_3720 / (_3585 * _3585));
                                float _4969 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3731 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                                float _3735 = sqrt(_3720) * _3600.w;
                                float _3737 = 1.39999997615814208984375 / (_3735 + 1.39999997615814208984375);
                                float _3738 = _3737 * _3737;
                                float _3741 = ((1.0 - _3738) * dot(vec3(_3724, _3725, _3726), vec3(_915, _918, _921))) + _3738;
                                float _3744 = _3735 * _3735;
                                float _3748 = (fma(_2051, _3627.z, fma(_2050, _3627.y, _3627.x * _2049)) + _3627.w) / _3689;
                                float _3749 = (fma(_2051, _3642.z, fma(_2050, _3642.y, _3642.x * _2049)) + _3642.w) / _3689;
                                float _3753 = 1.0 - dot(vec2(_3748, _3749), vec2(_3748, _3749));
                                float _4985 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3754 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                                float _3755 = _3754 * (((isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0))) * _3731) / ((_3744 * 0.699999988079071044921875) + 1.0));
                                float _3767 = exp2(log2(1.0 / ((_3744 * 3.5) + 5.0)) * 0.25);
                                float _3768 = 1.0 - _990;
                                float _3775 = sqrt(1.0 - ((1.0 - (_3768 * _3768)) * (1.0 - (_3767 * _3767))));
                                float _3776 = _3775 * _3775;
                                float _3777 = _3776 * _3776;
                                float _3778 = _3724 - _3228;
                                float _3779 = _3725 - _3229;
                                float _3780 = _3726 - _3230;
                                float _3784 = inversesqrt(dot(vec3(_3778, _3779, _3780), vec3(_3778, _3779, _3780)));
                                float _3788 = dot(vec3(_915, _918, _921), vec3((-0.0) - _3228, (-0.0) - _3229, (-0.0) - _3230));
                                float _4996 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3791 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                                float _3792 = dot(vec3(_915, _918, _921), vec3(_3784 * _3778, _3784 * _3779, _3784 * _3780));
                                float _5007 = isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0));
                                float _3795 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
                                float _3799 = ((_3795 * _3795) * (_3777 + (-1.0))) + 1.0;
                                float _3800 = _3737 * _3776;
                                float _3801 = _3800 * _3800;
                                float _3807 = ((1.0 - _3801) * dot(vec3(_915, _918, _921), vec3(_3724, _3725, _3726))) + _3801;
                                float _5018 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3808 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
                                float _3809 = 1.0 - _3776;
                                float _3819 = (0.5 / (((_3808 * ((_3791 * _3809) + _3776)) + 9.9999999392252902907785028219223e-09) + (((_3808 * _3809) + _3776) * _3791))) * _3808;
                                float _5029 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3829 = (_3754 * _3731) * (((_3777 * 3.1415927410125732421875) * (isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0)))) / ((_3799 * _3799) * ((_3744 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3829 * _3612.z;
                                frontier_phi_80_pred_1 = _3829 * _3612.y;
                                frontier_phi_80_pred_2 = _3829 * _3612.x;
                                frontier_phi_80_pred_3 = _3755 * _3600.z;
                                frontier_phi_80_pred_4 = _3755 * _3600.y;
                                frontier_phi_80_pred_5 = _3755 * _3600.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3835 = frontier_phi_80_pred;
                            _3834 = frontier_phi_80_pred_1;
                            _3833 = frontier_phi_80_pred_2;
                            _3838 = frontier_phi_80_pred_3;
                            _3837 = frontier_phi_80_pred_4;
                            _3836 = frontier_phi_80_pred_5;
                            _3542 = _3836 + _3555;
                            _3543 = _3837 + _3556;
                            _3544 = _3838 + _3557;
                            _3539 = _3833 + _3552;
                            _3540 = _3834 + _3553;
                            _3541 = _3835 + _3554;
                            if (_3559 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3541;
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3544;
                                _3558 = _3559;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3541;
                        frontier_phi_74_pred_1 = _3540;
                        frontier_phi_74_pred_2 = _3539;
                        frontier_phi_74_pred_3 = _3544;
                        frontier_phi_74_pred_4 = _3543;
                        frontier_phi_74_pred_5 = _3542;
                    }
                    _3207 = frontier_phi_74_pred;
                    _3205 = frontier_phi_74_pred_1;
                    _3203 = frontier_phi_74_pred_2;
                    _3213 = frontier_phi_74_pred_3;
                    _3211 = frontier_phi_74_pred_4;
                    _3209 = frontier_phi_74_pred_5;
                    uint _3348 = _3347 + 1u;
                    if (_3348 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3341 = _3203;
                        _3342 = _3205;
                        _3343 = _3207;
                        _3344 = _3209;
                        _3345 = _3211;
                        _3346 = _3213;
                        _3347 = _3348;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3211;
                frontier_phi_62_63_ladder_1 = _3209;
                frontier_phi_62_63_ladder_2 = _3207;
                frontier_phi_62_63_ladder_3 = _3213;
                frontier_phi_62_63_ladder_4 = _3205;
                frontier_phi_62_63_ladder_5 = _3203;
            }
            else
            {
                frontier_phi_62_63_ladder = _3098;
                frontier_phi_62_63_ladder_1 = _3096;
                frontier_phi_62_63_ladder_2 = _3094;
                frontier_phi_62_63_ladder_3 = _3100;
                frontier_phi_62_63_ladder_4 = _3092;
                frontier_phi_62_63_ladder_5 = _3090;
            }
            _3202 = frontier_phi_62_63_ladder_5;
            _3204 = frontier_phi_62_63_ladder_4;
            _3206 = frontier_phi_62_63_ladder_2;
            _3208 = frontier_phi_62_63_ladder_1;
            _3210 = frontier_phi_62_63_ladder;
            _3212 = frontier_phi_62_63_ladder_3;
        }
        float _3217 = isnan(1.0) ? _974 : (isnan(_974) ? 1.0 : min(_974, 1.0));
        _3002 = (_3217 * _3208) + _2515;
        _3004 = (_3217 * _3210) + _2517;
        _3006 = (_3217 * _3212) + _2519;
        _3008 = ((_3202 * _959) * _3217) + _2853;
        _3010 = ((_3204 * _961) * _3217) + _2855;
        _3012 = ((_3206 * _962) * _3217) + _2857;
    }
    else
    {
        _3002 = _2515;
        _3004 = _2517;
        _3006 = _2519;
        _3008 = _2853;
        _3010 = _2855;
        _3012 = _2857;
    }
    uint _3018 = _935 + uint(cbMatDynParam._m0[0u].w);
    float _5045 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _5056 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _5067 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _5078 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _3044 = (((isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0))) * (_3002 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _974))) + ((_3008 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1783)) * cbPerFrame._m0[3u].x)) + (((((_604 * _599.x) + cbMtdParam._m0[20u].y) * TEXCOORD_7.x) * cbMtdParam._m0[17u].x) * cbInstanceData._m0[_3018].x);
    float _3046 = (((((cbMtdParam._m0[20u].z + (_604 * _599.y)) * TEXCOORD_7.y) * cbMtdParam._m0[17u].x) * cbInstanceData._m0[_3018].y) + ((_3010 + ((isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))) * _1783)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0))) * (_3004 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _974)));
    float _3048 = (((((cbMtdParam._m0[20u].w + (_604 * _599.z)) * TEXCOORD_7.z) * cbMtdParam._m0[17u].x) * cbInstanceData._m0[_3018].z) + ((_3012 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1783)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0))) * (_3006 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _974)));
    float _3056 = cbInstanceData._m0[_934 + 6u].w * (isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0)));
    float _3061 = _896 / cbSceneParam._m0[86u].x;
    float _3062 = _897 / cbSceneParam._m0[86u].y;
    vec4 _3076 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3061, _3062, (log2((isnan(cbSceneParam._m0[77u].w) ? _831 : (isnan(_831) ? cbSceneParam._m0[77u].w : min(_831, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3078 = _3076.x;
    float _3079 = _3076.y;
    float _3080 = _3076.z;
    float _3081 = _3076.w;
    float _3152;
    float _3154;
    float _3156;
    float _3158;
    if (_831 > cbSceneParam._m0[78u].w)
    {
        float _3115 = isnan(_831) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _831 : min(cbSceneParam._m0[80u].w, _831));
        float _3116 = _3115 / _831;
        float _3127 = _3116 * _881;
        float _3128 = _882 * _3116;
        float _3129 = (-0.0) - _3128;
        float _3130 = _3116 * _883;
        float _3132 = (cbSceneParam._m0[77u].w * _3129) / _3115;
        float _3133 = _3132 + cbSceneParam._m0[79u].w;
        float _3134 = cbSceneParam._m0[79u].w - _3128;
        float _3140 = sqrt(((_3127 * _3127) + (_3128 * _3128)) + (_3130 * _3130));
        float _3143 = (1.0 - (cbSceneParam._m0[77u].w / _3115)) * _3140;
        float _3148 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3150 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3303;
        if (abs((_3129 - _3132) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3303 = ((((_3133 > 0.0) ? exp2(_3148 * _3133) : (2.0 - exp2(_3150 * _3133))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3143;
        }
        else
        {
            float _3263 = 1.0 / cbSceneParam._m0[80u].x;
            float _3264 = isnan(_3134) ? _3133 : (isnan(_3133) ? _3134 : max(_3133, _3134));
            float _3265 = isnan(_3134) ? _3133 : (isnan(_3133) ? _3134 : min(_3133, _3134));
            float _3274 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : min(_3264, 0.0));
            float _3275 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : min(_3265, 0.0));
            _3303 = ((abs(_3140 / _3129) * cbSceneParam._m0[80u].y) * ((((_3274 - _3275) * 2.0) - ((exp2(_3148 * (isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0)))) - exp2(_3148 * (isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0))))) * _3263)) - ((exp2(_3150 * _3274) - exp2(_3150 * _3275)) * _3263))) + (_3143 * cbSceneParam._m0[80u].z);
        }
        vec4 _3305 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3061, _3062, 1.0), 0.0);
        float _3314 = exp2((_3303 * (-1.44269502162933349609375)) * (1.0 - _3305.w));
        float _3315 = log2(_3314);
        float _3331 = log2(_3081);
        _3152 = (exp2(_3331 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3315 * cbSceneParam._m0[78u].x)) * _3305.x) / cbSceneParam._m0[78u].x)) + _3078;
        _3154 = (exp2(_3331 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3315 * cbSceneParam._m0[78u].y)) * _3305.y) / cbSceneParam._m0[78u].y)) + _3079;
        _3156 = (exp2(_3331 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3315 * cbSceneParam._m0[78u].z)) * _3305.z) / cbSceneParam._m0[78u].z)) + _3080;
        _3158 = _3314 * _3081;
    }
    else
    {
        _3152 = _3078;
        _3154 = _3079;
        _3156 = _3080;
        _3158 = _3081;
    }
    float _3170 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3171 = _3170 == 3.0;
    float _3172 = log2(_3158);
    float _3179 = exp2(_3172 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0)));
    float _3180 = exp2(_3172 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0)));
    float _3181 = exp2(_3172 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0)));
    float _3190 = (_3170 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3190 * (_3171 ? _3179 : (_3179 + (cbSceneParam._m0[72u].w * _3152)));
    SV_Target.y = _3190 * (_3171 ? _3180 : (_3180 + (cbSceneParam._m0[72u].w * _3154)));
    SV_Target.z = _3190 * (_3171 ? _3181 : (_3181 + (cbSceneParam._m0[72u].w * _3156)));
    SV_Target.w = _3056;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3056;
}


