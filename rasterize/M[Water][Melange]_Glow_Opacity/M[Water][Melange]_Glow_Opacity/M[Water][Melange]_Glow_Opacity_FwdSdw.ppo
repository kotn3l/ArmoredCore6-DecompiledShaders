#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[39];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_8;
layout(set = 0, binding = 7) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1557;
uint _3245;
uint _3246;
uint _3247;
uint _3505;
uint _3506;
uint _3507;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    float _289 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _299 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _289);
    float _300 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _289);
    float _301 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _289);
    float _317 = cbMtdParam._m0[18u].w - cbMtdParam._m0[18u].z;
    float _319 = (sqrt(((_299 * _299) + (_300 * _300)) + (_301 * _301)) - cbMtdParam._m0[18u].z) / (isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0)));
    float _324 = cbMtdParam._m0[19u].x + _319;
    float _326 = _324 * cbMtdParam._m0[19u].z;
    float _3761 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _329 = (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * cbMtdParam._m0[23u].z;
    float _3772 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _330 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _3783 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _335 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _338 = ((cbMtdParam._m0[18u].x - cbMtdParam._m0[17u].x) * _335) + cbMtdParam._m0[17u].x;
    float _359 = cbMtdParam._m0[20u].w * _324;
    float _3794 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    vec4 _377 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _380 = _377.x;
    float _404 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _380)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _380))) - POSITION_1.w) / cbMtdParam._m0[17u].w;
    float _3805 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _410 = 1.0 - (isnan(cbMtdParam._m0[22u].x) ? _405 : (isnan(_405) ? cbMtdParam._m0[22u].x : max(_405, cbMtdParam._m0[22u].x)));
    float _429 = (cbMtdParam._m0[25u].x + cbPerFrame._m0[22u].x) * cbMtdParam._m0[17u].y;
    float _437 = cbMtdParam._m0[30u].w * TEXCOORD.x;
    float _438 = cbMtdParam._m0[31u].x * TEXCOORD.y;
    vec4 _452 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_2, SS_BumpMap), vec2((((_429 * cbMtdParam._m0[31u].w) + _437) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_438 + (_429 * cbMtdParam._m0[32u].x)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _454 = _452.x;
    float _455 = _452.y;
    float _458 = _452.z - _335;
    float _3821 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _471 = (_459 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _473 = (_459 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _486 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((_471 + (cbMtdParam._m0[27u].y * _429)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_473 + (cbMtdParam._m0[27u].z * _429)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _490 = _486.z;
    vec4 _503 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((_471 + (cbMtdParam._m0[26u].w * _429)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_473 + (cbMtdParam._m0[27u].x * _429)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _507 = _503.z;
    float _510 = (_410 - _452.w) + (isnan(_507) ? _490 : (isnan(_490) ? _507 : max(_490, _507)));
    float _3837 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _512 = (((cbMtdParam._m0[21u].w + TEXCOORD_3.x) - (_410 * cbMtdParam._m0[18u].y)) * (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) * (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)));
    float _514 = _512 - (_512 * TEXCOORD_7.w);
    float _524 = (POSITION_1.w - cbMtdParam._m0[24u].z) * (1.0 / cbMtdParam._m0[24u].y);
    float _3848 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _539 = (cbMtdParam._m0[29u].w * _429) + _437;
    float _540 = (cbMtdParam._m0[30u].x * _429) + _438;
    float _547 = cbMtdParam._m0[29u].y * _429;
    float _548 = cbMtdParam._m0[29u].z * _429;
    vec4 _566 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * (_547 + (_437 * cbMtdParam._m0[31u].y))) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (_548 + (_438 * cbMtdParam._m0[31u].z))) + cbTextureTilingScale._m0[3u].w));
    float _573 = (_566.x * 2.0) + (-1.0);
    float _575 = (_566.y * 2.0) + (-1.0);
    float _579 = 1.0 - dot(vec2(_573, _575), vec2(_573, _575));
    float _3859 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _581 = sqrt(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)));
    float _584 = fma(_581, _236, fma(_575, _243, _573 * _229));
    float _587 = fma(_581, _237, fma(_575, _244, _573 * _230));
    float _590 = fma(_581, _238, fma(_575, _245, _573 * _231));
    float _594 = inversesqrt(dot(vec3(_584, _587, _590), vec3(_584, _587, _590)));
    float _595 = cbPerFrame._m0[22u].x * 2.0;
    float _596 = _595 * cbMtdParam._m0[23u].x;
    float _600 = ((_584 * 0.5) * _594) + (-0.25);
    float _604 = ((_587 * 0.5) * _594) + (-0.25);
    float _605 = _604 * cbMtdParam._m0[23u].y;
    float _607 = (-0.0) - (cbMtdParam._m0[23u].y * _600);
    float _608 = fract(_596);
    float _610 = fract(_596 + 0.5);
    float _621 = abs((_608 * 2.0) + (-1.0));
    vec4 _638 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_608 * _607) + _539) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_605 * _608) + _540) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _640 = _638.x;
    float _641 = _638.y;
    float _642 = _638.z;
    vec4 _643 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_610 * _607) + _539) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_605 * _610) + _540) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _654 = ((_643.x - _640) * _621) + _640;
    float _655 = ((_643.y - _641) * _621) + _641;
    float _656 = ((_643.z - _642) * _621) + _642;
    float _672 = (cbMtdParam._m0[28u].w * _429) + _437;
    float _673 = (cbMtdParam._m0[29u].x * _429) + _438;
    float _676 = _595 * cbMtdParam._m0[22u].w;
    float _677 = _604 * cbMtdParam._m0[22u].z;
    float _679 = (-0.0) - (cbMtdParam._m0[22u].z * _600);
    float _680 = fract(_676);
    float _682 = fract(_676 + 0.5);
    float _693 = abs((_680 * 2.0) + (-1.0));
    vec4 _710 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_680 * _679) + _672) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_677 * _680) + _673) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _712 = _710.x;
    float _713 = _710.y;
    float _714 = _710.z;
    vec4 _715 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_682 * _679) + _672) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_677 * _682) + _673) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _747 = (((((cbMtdParam._m0[14u].x - cbMtdParam._m0[16u].x) * _654) * cbMtdParam._m0[25u].y) + cbMtdParam._m0[16u].x) * (((_715.x - _712) * _693) + _712)) + (_654 * cbMtdParam._m0[15u].x);
    float _750 = (((((cbMtdParam._m0[14u].y - cbMtdParam._m0[16u].y) * _655) * cbMtdParam._m0[25u].y) + cbMtdParam._m0[16u].y) * (((_715.y - _713) * _693) + _713)) + (_655 * cbMtdParam._m0[15u].y);
    float _753 = ((((cbMtdParam._m0[25u].y * _656) * (cbMtdParam._m0[14u].z - cbMtdParam._m0[16u].z)) + cbMtdParam._m0[16u].z) * (((_715.z - _714) * _693) + _714)) + (_656 * cbMtdParam._m0[15u].z);
    float _757 = _747 - (_747 * _525);
    float _758 = _750 - (_750 * _525);
    float _759 = _753 - (_753 * _525);
    float _764 = (POSITION_1.w - cbMtdParam._m0[24u].x) * (1.0 / cbMtdParam._m0[23u].w);
    float _3870 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _765 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _775 = (cbMtdParam._m0[30u].y * _429) + _437;
    float _776 = (cbMtdParam._m0[30u].z * _429) + _438;
    vec4 _789 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((_437 * cbMtdParam._m0[32u].y) + _547)) + cbTextureTilingScale._m0[3u].z, (((_438 * cbMtdParam._m0[32u].z) + _548) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _795 = (_789.x * 2.0) + (-1.0);
    float _796 = (_789.y * 2.0) + (-1.0);
    float _800 = 1.0 - dot(vec2(_795, _796), vec2(_795, _796));
    float _3881 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _802 = sqrt(isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)));
    float _805 = fma(_802, _236, fma(_796, _243, _795 * _229));
    float _808 = fma(_802, _237, fma(_796, _244, _795 * _230));
    float _811 = fma(_802, _238, fma(_796, _245, _795 * _231));
    float _815 = inversesqrt(dot(vec3(_805, _808, _811), vec3(_805, _808, _811)));
    float _816 = _595 * cbMtdParam._m0[26u].x;
    float _823 = (((_808 * 0.5) * _815) + (-0.25)) * cbMtdParam._m0[25u].w;
    float _825 = (-0.0) - (cbMtdParam._m0[25u].w * (((_805 * 0.5) * _815) + (-0.25)));
    float _826 = fract(_816);
    float _828 = fract(_816 + 0.5);
    float _831 = (_826 * _825) + _775;
    float _832 = (_823 * _826) + _776;
    float _835 = (_828 * _825) + _775;
    float _836 = (_823 * _828) + _776;
    float _839 = abs((_826 * 2.0) + (-1.0));
    vec4 _856 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_831 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_832 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _858 = _856.x;
    float _859 = _856.y;
    float _860 = _856.z;
    vec4 _861 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_835 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_836 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _872 = ((_861.x - _858) * _839) + _858;
    float _873 = ((_861.y - _859) * _839) + _859;
    float _874 = ((_861.z - _860) * _839) + _860;
    vec4 _899 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_9, SS_DiffuseMap), vec2((_831 * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (_832 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _901 = _899.x;
    float _902 = _899.y;
    float _903 = _899.z;
    vec4 _904 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_9, SS_DiffuseMap), vec2((_835 * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (_836 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _955 = (cbMtdParam._m0[24u].w * cbMtdParam._m0[13u].x) * ((_757 + (_514 * cbMtdParam._m0[12u].x)) + ((((_872 * cbMtdParam._m0[9u].x) - _757) + (((((cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x) * _872) * cbMtdParam._m0[25u].z) + cbMtdParam._m0[10u].x) * (((_904.x - _901) * _839) + _901))) * _765));
    float _957 = (cbMtdParam._m0[24u].w * cbMtdParam._m0[13u].y) * ((_758 + (_514 * cbMtdParam._m0[12u].y)) + ((((_873 * cbMtdParam._m0[9u].y) - _758) + (((((cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y) * _873) * cbMtdParam._m0[25u].z) + cbMtdParam._m0[10u].y) * (((_904.y - _902) * _839) + _902))) * _765));
    float _959 = (cbMtdParam._m0[24u].w * cbMtdParam._m0[13u].z) * ((_759 + (_514 * cbMtdParam._m0[12u].z)) + ((((_874 * cbMtdParam._m0[9u].z) - _759) + ((((cbMtdParam._m0[25u].z * _874) * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z) * (((_904.z - _903) * _839) + _903))) * _765));
    float _3892 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _966 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _976 = _319 / cbMtdParam._m0[20u].y;
    float _3903 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _977 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    vec4 _1025 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((_1005 / cbMtdParam._m0[19u].y) + (cbMtdParam._m0[32u].w * _429))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((_1009 / cbMtdParam._m0[19u].y) + (cbMtdParam._m0[33u].x * _429))) + cbTextureTilingScale._m0[1u].w));
    float _1029 = _459 * 0.23999999463558197021484375;
    float _1031 = _459 * (-0.20000000298023223876953125);
    float _1042 = cbMtdParam._m0[33u].w * TEXCOORD.x;
    float _1043 = cbMtdParam._m0[34u].x * TEXCOORD.y;
    vec4 _1058 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[33u].y * _429) + _1029) + _1042) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[33u].z * _429) + _1031) + _1043) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1074 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1042 + _1029) + (cbMtdParam._m0[34u].y * _429)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1043 + _1031) + (cbMtdParam._m0[34u].z * _429)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1094 = (((_503.x + (-0.5)) * 0.5) + _486.x) + (((_1058.x + (-1.0)) + _1074.x) * cbMtdParam._m0[21u].z);
    float _1095 = (((_503.y + (-0.5)) * 0.5) + _486.y) + (((_1058.y + (-1.0)) + _1074.y) * cbMtdParam._m0[21u].z);
    float _1100 = ((_1025.x - _1094) * _977) + _1094;
    float _1101 = ((_1025.y - _1095) * _977) + _1095;
    float _1103 = _319 / cbMtdParam._m0[20u].x;
    float _3914 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1104 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _1120 = ((((_966 * (0.5 - _454)) + _454) + (((_1100 + (-0.5)) + ((0.5 - _1100) * _1104)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1121 = ((((_966 * (0.5 - _455)) + _455) + (((_1101 + (-0.5)) + ((0.5 - _1101) * _1104)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1122 = dot(vec2(_1120, _1121), vec2(_1120, _1121));
    float _3925 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _1127 = sqrt(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))));
    float _1129 = cbMtdParam._m0[21u].x * _324;
    float _3936 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _1135 = ((cbMtdParam._m0[21u].y - cbMtdParam._m0[19u].w) * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) + cbMtdParam._m0[19u].w;
    float _1140 = _1120 - (_1135 * _1120);
    float _1141 = _1121 - (_1135 * _1121);
    float _1142 = (_1135 * (1.0 - _1127)) + _1127;
    float _1152 = fma(_1127, _236, fma(_1121, _243, _1120 * _229));
    float _1155 = fma(_1127, _237, fma(_1121, _244, _1120 * _230));
    float _1158 = fma(_1127, _238, fma(_1121, _245, _1120 * _231));
    float _1162 = inversesqrt(dot(vec3(_1152, _1155, _1158), vec3(_1152, _1155, _1158)));
    float _1163 = _1162 * _1152;
    float _1164 = _1162 * _1155;
    float _1165 = _1162 * _1158;
    float _1168 = fma(_1142, _236, fma(_1141, _243, _1140 * _229));
    float _1171 = fma(_1142, _237, fma(_1141, _244, _1140 * _230));
    float _1174 = fma(_1142, _238, fma(_1141, _245, _1140 * _231));
    float _1178 = inversesqrt(dot(vec3(_1168, _1171, _1174), vec3(_1168, _1171, _1174)));
    float _1179 = _1178 * _1168;
    float _1180 = _1178 * _1171;
    float _1181 = _1178 * _1174;
    float _3947 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _3958 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _1183 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _1197 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1217 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1226 = cbSceneParam._m0[71u].x - (_1005 / _1217);
    float _1227 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1217);
    float _1228 = cbSceneParam._m0[71u].z - (_1009 / _1217);
    float _1232 = inversesqrt(dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228)));
    float _1233 = _1226 * _1232;
    float _1234 = _1227 * _1232;
    float _1235 = _1228 * _1232;
    float _1240 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1241 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1243 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1252 = (_1243.x * 2.0) + (-1.0);
    float _1253 = (_1243.y * 2.0) + (-1.0);
    float _1254 = (_1243.z * 2.0) + (-1.0);
    float _1258 = inversesqrt(dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254)));
    float _1269 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _1243.w;
    float _1276 = (((_1252 * _1258) - _1163) * _1269) + _1163;
    float _1277 = (((_1253 * _1258) - _1164) * _1269) + _1164;
    float _1278 = (((_1254 * _1258) - _1165) * _1269) + _1165;
    float _1296 = fma(_1278, cbSceneParam._m0[5u].z, fma(_1277, cbSceneParam._m0[5u].y, _1276 * cbSceneParam._m0[5u].x));
    float _1299 = fma(_1278, cbSceneParam._m0[6u].z, fma(_1277, cbSceneParam._m0[6u].y, _1276 * cbSceneParam._m0[6u].x));
    float _1302 = fma(_1278, cbSceneParam._m0[7u].z, fma(_1277, cbSceneParam._m0[7u].y, _1276 * cbSceneParam._m0[7u].x));
    vec4 _1311 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1240, cbSceneParam._m0[86u].y * _1241));
    float _1314 = _1311.x * TEXCOORD_3.w;
    float _1318 = abs(dot(vec3(_1233, _1234, _1235), vec3(_1276, _1277, _1278)));
    float _3969 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
    float _1330 = dot(vec3(_1179, _1180, _1181), vec3(_1233, _1234, _1235)) * 2.0;
    float _1334 = (_1330 * _1179) - _1233;
    float _1335 = (_1330 * _1180) - _1234;
    float _1336 = (_1330 * _1181) - _1235;
    float _1340 = abs(dot(vec3(_1233, _1234, _1235), vec3(_1179, _1180, _1181)));
    float _3980 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
    float _1342 = sqrt(_1183);
    float _1354 = exp2((_1342 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1342 * 3.0));
    float _1385 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1389 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1393 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1556;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1419 = fma(_1393, cbModelParam._m0[26u].z, fma(_1389, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1385));
        float _1423 = fma(_1393, cbModelParam._m0[27u].z, fma(_1389, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1385));
        float _1427 = fma(_1393, cbModelParam._m0[28u].z, fma(_1389, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1385));
        float _1450 = _1385 + _1179;
        float _1451 = _1389 + _1180;
        float _1452 = _1393 + _1181;
        float _1462 = fma(_1452, cbModelParam._m0[26u].z, fma(_1451, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1450)) - _1419;
        float _1463 = fma(_1452, cbModelParam._m0[27u].z, fma(_1451, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1450)) - _1423;
        float _1464 = fma(_1452, cbModelParam._m0[28u].z, fma(_1451, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1450)) - _1427;
        float _1468 = inversesqrt(dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464)));
        float _1480 = ((_1468 * _1462) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1419 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1481 = ((_1468 * _1463) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1423 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1482 = ((_1468 * _1464) / cbModelParam._m0[34u].z) + ((((((_1427 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        float _1519 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1506.x + (-0.5));
        float _1551 = _1549 * (_1506.y + (-0.5));
        float _1552 = _1549 * (_1506.z + (-0.5));
        _1556 = _1519 * (_1485.z + (-0.5));
        _1558 = _1519 * (_1485.y + (-0.5));
        _1559 = _1519 * (_1485.x + (-0.5));
        _1560 = _1529 * (_1492.z + (-0.5));
        _1561 = _1529 * (_1492.y + (-0.5));
        _1562 = _1529 * (_1492.x + (-0.5));
        _1563 = _1539 * (_1499.z + (-0.5));
        _1564 = _1539 * (_1499.y + (-0.5));
        _1565 = _1539 * (_1499.x + (-0.5));
        _1566 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        _1567 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        _1568 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
    }
    else
    {
        _1556 = _1557;
        _1558 = _1557;
        _1559 = _1557;
        _1560 = _1557;
        _1561 = _1557;
        _1562 = _1557;
        _1563 = _1557;
        _1564 = _1557;
        _1565 = _1557;
        _1566 = _1557;
        _1567 = _1557;
        _1568 = _1557;
    }
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1591 = fma(_1393, cbModelParam._m0[30u].z, fma(_1389, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1385));
        float _1595 = fma(_1393, cbModelParam._m0[31u].z, fma(_1389, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1385));
        float _1599 = fma(_1393, cbModelParam._m0[32u].z, fma(_1389, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1385));
        float _1622 = _1385 + _1179;
        float _1623 = _1389 + _1180;
        float _1624 = _1393 + _1181;
        float _1634 = fma(_1624, cbModelParam._m0[30u].z, fma(_1623, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1622)) - _1591;
        float _1635 = fma(_1624, cbModelParam._m0[31u].z, fma(_1623, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1622)) - _1595;
        float _1636 = fma(_1624, cbModelParam._m0[32u].z, fma(_1623, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1622)) - _1599;
        float _1640 = inversesqrt(dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636)));
        float _1652 = ((_1640 * _1634) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1591 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1653 = ((_1640 * _1635) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1595 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1654 = ((_1640 * _1636) / cbModelParam._m0[35u].z) + ((((((_1599 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1656 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1652, _1653, _1654), 0.0);
        vec4 _1663 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1652, _1653, _1654), 0.0);
        vec4 _1670 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1652, _1653, _1654), 0.0);
        vec4 _1677 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1652, _1653, _1654), 0.0);
        float _1689 = exp2((_1656.w + (-0.5)) * 20.0) * 2.0;
        float _1699 = exp2((_1663.w + (-0.5)) * 20.0) * 2.0;
        float _1709 = exp2((_1670.w + (-0.5)) * 20.0) * 2.0;
        float _1719 = exp2((_1677.w + (-0.5)) * 20.0) * 2.0;
        float _1720 = _1719 * (_1677.x + (-0.5));
        float _1721 = _1719 * (_1677.y + (-0.5));
        float _1722 = _1719 * (_1677.z + (-0.5));
        _1726 = _1689 * (_1656.z + (-0.5));
        _1727 = _1689 * (_1656.y + (-0.5));
        _1728 = _1689 * (_1656.x + (-0.5));
        _1729 = _1699 * (_1663.z + (-0.5));
        _1730 = _1699 * (_1663.y + (-0.5));
        _1731 = _1699 * (_1663.x + (-0.5));
        _1732 = _1709 * (_1670.z + (-0.5));
        _1733 = _1709 * (_1670.y + (-0.5));
        _1734 = _1709 * (_1670.x + (-0.5));
        _1735 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        _1736 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        _1737 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    }
    else
    {
        _1726 = _1557;
        _1727 = _1557;
        _1728 = _1557;
        _1729 = _1557;
        _1730 = _1557;
        _1731 = _1557;
        _1732 = _1557;
        _1733 = _1557;
        _1734 = _1557;
        _1735 = _1557;
        _1736 = _1557;
        _1737 = _1557;
    }
    float _1751 = _1334 * 0.5;
    float _1752 = _1335 * 0.5;
    float _1753 = _1336 * 0.5;
    float _1754 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1728, _1731, _1734, _1737));
    float _1757 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1727, _1730, _1733, _1736));
    float _1760 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1726, _1729, _1732, _1735));
    float _1795;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1767 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1556, _1560, _1563, _1566));
        float _1771 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1558, _1561, _1564, _1567));
        float _1775 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1559, _1562, _1565, _1568));
        float _1782 = dot(vec4(cbModelParam._m0[39u]), vec4(_1751, _1752, _1753, 1.0));
        _1795 = dot(vec3(isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1782) ? 0.0 : (isnan(0.0) ? _1782 : max(0.0, _1782))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1795 = 1.0;
    }
    float _1806;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1797 = dot(vec4(cbModelParam._m0[40u]), vec4(_1751, _1752, _1753, 1.0));
        _1806 = dot(vec3(isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1797) ? 0.0 : (isnan(0.0) ? _1797 : max(0.0, _1797))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1806 = 1.0;
    }
    float _1810 = (_1806 * cbModelParam._m0[1u].x) + (_1795 * (1.0 - cbModelParam._m0[1u].x));
    float _1817 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1183);
    float _1818 = isnan(_1817) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1817 : min(cbModelParam._m0[25u].z, _1817));
    float _1898;
    float _1900;
    float _1902;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1865 = fma(_1393, cbModelParam._m0[13u].z, fma(_1389, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1385)) + cbModelParam._m0[13u].w;
        float _1869 = fma(_1393, cbModelParam._m0[14u].z, fma(_1389, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1385)) + cbModelParam._m0[14u].w;
        float _1873 = fma(_1393, cbModelParam._m0[15u].z, fma(_1389, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1385)) + cbModelParam._m0[15u].w;
        float _1876 = fma(_1336, cbModelParam._m0[13u].z, fma(_1335, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1334));
        float _1879 = fma(_1336, cbModelParam._m0[14u].z, fma(_1335, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1334));
        float _1882 = fma(_1336, cbModelParam._m0[15u].z, fma(_1335, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1334));
        float _1910;
        if (_1876 > 0.0)
        {
            _1910 = abs((1.0 - _1865) / _1876);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1865 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1910 = frontier_phi_14_12_ladder;
        }
        float _2097;
        if (_1879 > 0.0)
        {
            _2097 = abs((1.0 - _1869) / _1879);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1869 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2097 = frontier_phi_23_19_ladder;
        }
        float _2503;
        if (_1882 > 0.0)
        {
            _2503 = abs((1.0 - _1873) / _1882);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1873 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2503 = frontier_phi_35_30_ladder;
        }
        float _2505 = isnan(_2097) ? _1910 : (isnan(_1910) ? _2097 : min(_1910, _2097));
        float _2506 = isnan(_2503) ? _2505 : (isnan(_2505) ? _2503 : min(_2505, _2503));
        float _2510 = (_2506 * _1876) + _1865;
        float _2511 = (_2506 * _1879) + _1869;
        float _2512 = (_2506 * _1882) + _1873;
        float _2513 = _2506 * 9.9999997473787516355514526367188e-05;
        float _2515 = (-1.0) - _2513;
        float _2517 = _2513 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2512 > _2517) || ((_2512 < _2515) || ((_2511 > _2517) || ((_2511 < _2515) || ((_2510 < _2515) || (_2510 > _2517))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2872 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2512, cbModelParam._m0[9u].z, fma(_2511, cbModelParam._m0[9u].y, _2510 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2512, cbModelParam._m0[10u].z, fma(_2511, cbModelParam._m0[10u].y, _2510 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2512, cbModelParam._m0[11u].z, fma(_2511, cbModelParam._m0[11u].y, _2510 * cbModelParam._m0[11u].x))), _1818);
            frontier_phi_13_35_ladder = _2872.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2872.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2872.x * cbModelParam._m0[1u].y;
        }
        _1898 = frontier_phi_13_35_ladder_2;
        _1900 = frontier_phi_13_35_ladder_1;
        _1902 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1886 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1334, _1335, _1336), _1818);
        _1898 = _1886.x * cbModelParam._m0[1u].y;
        _1900 = _1886.y * cbModelParam._m0[1u].y;
        _1902 = _1886.z * cbModelParam._m0[1u].y;
    }
    float _1906 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1183);
    float _1907 = isnan(_1906) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1906 : min(cbModelParam._m0[25u].w, _1906));
    float _1996;
    float _1998;
    float _2000;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1960 = fma(_1393, cbModelParam._m0[21u].z, fma(_1389, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1385)) + cbModelParam._m0[21u].w;
        float _1964 = fma(_1393, cbModelParam._m0[22u].z, fma(_1389, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1385)) + cbModelParam._m0[22u].w;
        float _1968 = fma(_1393, cbModelParam._m0[23u].z, fma(_1389, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1385)) + cbModelParam._m0[23u].w;
        float _1971 = fma(_1336, cbModelParam._m0[21u].z, fma(_1335, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1334));
        float _1974 = fma(_1336, cbModelParam._m0[22u].z, fma(_1335, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1334));
        float _1977 = fma(_1336, cbModelParam._m0[23u].z, fma(_1335, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1334));
        float _2102;
        if (_1971 > 0.0)
        {
            _2102 = abs((1.0 - _1960) / _1971);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1960 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2102 = frontier_phi_25_21_ladder;
        }
        float _2530;
        if (_1974 > 0.0)
        {
            _2530 = abs((1.0 - _1964) / _1974);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1964 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2530 = frontier_phi_37_32_ladder;
        }
        float _3030;
        if (_1977 > 0.0)
        {
            _3030 = abs((1.0 - _1968) / _1977);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1968 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _3030 = frontier_phi_49_44_ladder;
        }
        float _3032 = isnan(_2530) ? _2102 : (isnan(_2102) ? _2530 : min(_2102, _2530));
        float _3033 = isnan(_3030) ? _3032 : (isnan(_3032) ? _3030 : min(_3032, _3030));
        float _3037 = (_3033 * _1971) + _1960;
        float _3038 = (_3033 * _1974) + _1964;
        float _3039 = (_3033 * _1977) + _1968;
        float _3040 = _3033 * 9.9999997473787516355514526367188e-05;
        float _3041 = (-1.0) - _3040;
        float _3043 = _3040 + 1.0;
        float frontier_phi_22_49_ladder;
        float frontier_phi_22_49_ladder_1;
        float frontier_phi_22_49_ladder_2;
        if ((_3039 > _3043) || ((_3039 < _3041) || ((_3038 > _3043) || ((_3038 < _3041) || ((_3037 < _3041) || (_3037 > _3043))))))
        {
            frontier_phi_22_49_ladder = 0.0;
            frontier_phi_22_49_ladder_1 = 0.0;
            frontier_phi_22_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3148 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3039, cbModelParam._m0[17u].z, fma(_3038, cbModelParam._m0[17u].y, _3037 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3039, cbModelParam._m0[18u].z, fma(_3038, cbModelParam._m0[18u].y, _3037 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3039, cbModelParam._m0[19u].z, fma(_3038, cbModelParam._m0[19u].y, _3037 * cbModelParam._m0[19u].x))), _1907);
            frontier_phi_22_49_ladder = _3148.z * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_1 = _3148.y * cbModelParam._m0[1u].z;
            frontier_phi_22_49_ladder_2 = _3148.x * cbModelParam._m0[1u].z;
        }
        _1996 = frontier_phi_22_49_ladder_2;
        _1998 = frontier_phi_22_49_ladder_1;
        _2000 = frontier_phi_22_49_ladder;
    }
    else
    {
        vec4 _1980 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1334, _1335, _1336), _1907);
        _1996 = _1980.x * cbModelParam._m0[1u].z;
        _1998 = _1980.y * cbModelParam._m0[1u].z;
        _2000 = _1980.z * cbModelParam._m0[1u].z;
    }
    float _2012 = ((((1.0 - _1354) * ((_1342 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1354 * _1342)) * _1314;
    float _2013 = _2012 * ((cbModelParam._m0[1u].w * (_1996 - _1898)) + _1898);
    float _2014 = _2012 * ((cbModelParam._m0[1u].w * (_1998 - _1900)) + _1900);
    float _2015 = _2012 * ((cbModelParam._m0[1u].w * (_2000 - _1902)) + _1902);
    float _2036 = fma(_2015, cbSceneParam._m0[89u].z, fma(_2014, cbSceneParam._m0[89u].y, _2013 * cbSceneParam._m0[89u].x));
    float _2039 = fma(_2015, cbSceneParam._m0[90u].z, fma(_2014, cbSceneParam._m0[90u].y, _2013 * cbSceneParam._m0[90u].x));
    float _2042 = fma(_2015, cbSceneParam._m0[91u].z, fma(_2014, cbSceneParam._m0[91u].y, _2013 * cbSceneParam._m0[91u].x));
    float _2076 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2080 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2084 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2088 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2089 = _2076 / _2088;
    float _2090 = _2080 / _2088;
    float _2091 = _2084 / _2088;
    float _2237;
    float _2238;
    float _2239;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2118 = ((uint(_2091 > cbSceneParam._m0[59u].y) + uint(_2091 > cbSceneParam._m0[59u].x)) + uint(_2091 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2119 = _2118 + 43u;
        uint _2127 = _2118 + 44u;
        uint _2135 = _2118 + 45u;
        uint _2143 = _2118 + 46u;
        float _2154 = fma(_2088, cbSceneParam._m0[_2119].w, fma(_2084, cbSceneParam._m0[_2119].z, fma(_2080, cbSceneParam._m0[_2119].y, _2076 * cbSceneParam._m0[_2119].x)));
        float _2158 = fma(_2088, cbSceneParam._m0[_2127].w, fma(_2084, cbSceneParam._m0[_2127].z, fma(_2080, cbSceneParam._m0[_2127].y, _2076 * cbSceneParam._m0[_2127].x)));
        float _2166 = fma(_2088, cbSceneParam._m0[_2143].w, fma(_2084, cbSceneParam._m0[_2143].z, fma(_2080, cbSceneParam._m0[_2143].y, _2076 * cbSceneParam._m0[_2143].x)));
        float _2170 = cbSceneParam._m0[33u].z * _2166;
        float _2172 = cbSceneParam._m0[33u].w * _2166;
        float _2175 = fma(_2088, cbSceneParam._m0[_2135].w, fma(_2084, cbSceneParam._m0[_2135].z, fma(_2080, cbSceneParam._m0[_2135].y, _2076 * cbSceneParam._m0[_2135].x))) / _2166;
        float _2223 = (cbSceneParam._m0[33u].x - sqrt(((_2090 * _2090) + (_2089 * _2089)) + (_2091 * _2091))) * cbSceneParam._m0[33u].y;
        float _4106 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2230 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2170 + _2154) / _2166, (_2172 + _2158) / _2166), _2175), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2172 + _2154) / _2166, (_2158 - _2170) / _2166), _2175), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2154 - _2170) / _2166, (_2158 - _2172) / _2166), _2175), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2154 - _2172) / _2166, (_2170 + _2158) / _2166), _2175), 0.0)).x), vec4(0.25)));
        _2237 = 1.0 - (_2230 * cbSceneParam._m0[34u].x);
        _2238 = 1.0 - (_2230 * cbSceneParam._m0[34u].y);
        _2239 = 1.0 - (_2230 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2237 = 1.0;
        _2238 = 1.0;
        _2239 = 1.0;
    }
    float _2303;
    float _2305;
    float _2307;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2291 = fma(_2088, cbSceneParam._m0[63u].w, fma(_2084, cbSceneParam._m0[63u].z, fma(_2080, cbSceneParam._m0[63u].y, _2076 * cbSceneParam._m0[63u].x)));
        float _2292 = fma(_2088, cbSceneParam._m0[60u].w, fma(_2084, cbSceneParam._m0[60u].z, fma(_2080, cbSceneParam._m0[60u].y, _2076 * cbSceneParam._m0[60u].x))) / _2291;
        float _2293 = fma(_2088, cbSceneParam._m0[61u].w, fma(_2084, cbSceneParam._m0[61u].z, fma(_2080, cbSceneParam._m0[61u].y, _2076 * cbSceneParam._m0[61u].x))) / _2291;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2292 >= cbSceneParam._m0[64u].x) && (_2293 >= cbSceneParam._m0[64u].y)) && (_2292 <= cbSceneParam._m0[64u].z)) && (_2293 <= cbSceneParam._m0[64u].w))
        {
            float _2543 = fma(_2088, cbSceneParam._m0[62u].w, fma(_2084, cbSceneParam._m0[62u].z, fma(_2080, cbSceneParam._m0[62u].y, _2076 * cbSceneParam._m0[62u].x))) / _2291;
            float _2547 = isnan(cbSceneParam._m0[41u].w) ? _2543 : (isnan(_2543) ? cbSceneParam._m0[41u].w : max(_2543, cbSceneParam._m0[41u].w));
            float _2590 = (cbSceneParam._m0[33u].x - sqrt(((_2090 * _2090) + (_2089 * _2089)) + (_2091 * _2091))) * cbSceneParam._m0[33u].y;
            float _4122 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
            float _2597 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2292, cbSceneParam._m0[33u].w + _2293), _2547), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2292, _2293 - cbSceneParam._m0[33u].z), _2547), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2292 - cbSceneParam._m0[33u].z, _2293 - cbSceneParam._m0[33u].w), _2547), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2292 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2293), _2547), 0.0)).x), vec4(0.25)));
            float _2601 = 1.0 - (_2597 * cbSceneParam._m0[34u].x);
            float _2602 = 1.0 - (_2597 * cbSceneParam._m0[34u].y);
            float _2603 = 1.0 - (_2597 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2603) ? _2239 : (isnan(_2239) ? _2603 : min(_2239, _2603));
            frontier_phi_34_33_ladder_1 = isnan(_2601) ? _2237 : (isnan(_2237) ? _2601 : min(_2237, _2601));
            frontier_phi_34_33_ladder_2 = isnan(_2602) ? _2238 : (isnan(_2238) ? _2602 : min(_2238, _2602));
        }
        else
        {
            frontier_phi_34_33_ladder = _2239;
            frontier_phi_34_33_ladder_1 = _2237;
            frontier_phi_34_33_ladder_2 = _2238;
        }
        _2303 = frontier_phi_34_33_ladder_1;
        _2305 = frontier_phi_34_33_ladder_2;
        _2307 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2303 = _2237;
        _2305 = _2238;
        _2307 = _2239;
    }
    uint _2309 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _2313 = floatBitsToUint(cbInstanceData._m0[_2309 + 5u]);
    uint _2315 = _2313.x * 14u;
    uint _2316 = _2315 + 13u;
    float _2321 = _1314 + (-1.0);
    float _2324 = (cbLight._m0[_2316].x * _2321) + 1.0;
    float _2325 = (cbLight._m0[_2316].y * _2321) + 1.0;
    uint _2329 = _2315 + 8u;
    float _2345 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2315].w)) * _1183) * 0.949999988079071044921875);
    float _2346 = _2345 * _2345;
    float _2347 = cbLight._m0[_2315].x + _1233;
    float _2348 = cbLight._m0[_2315].y + _1234;
    float _2349 = cbLight._m0[_2315].z + _1235;
    float _2353 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
    float _2354 = _2353 * _2347;
    float _2355 = _2353 * _2348;
    float _2356 = _2353 * _2349;
    float _2357 = dot(vec3(_1276, _1277, _1278), vec3(cbLight._m0[_2315].xyz));
    float _4148 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2360 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _2361 = dot(vec3(_1276, _1277, _1278), vec3(_1233, _1234, _1235));
    float _4159 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _2365 = dot(vec3(_1276, _1277, _1278), vec3(_2354, _2355, _2356));
    float _4170 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2368 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _2369 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_2354, _2355, _2356));
    float _4181 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2373 = _2346 * _2346;
    float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
    float _2388 = (exp2(log2(1.0 - (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2389 = 1.0 - _2346;
    float _2400 = (0.5 / (((_2364 * ((_2360 * _2389) + _2346)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2389) + _2346) * _2360))) * _2360;
    float _4192 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2402 = (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
    float _2403 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
    uint _2416 = _2315 | 1u;
    uint _2420 = _2315 + 9u;
    float _2434 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2416].w)) * _1183) * 0.949999988079071044921875);
    float _2435 = _2434 * _2434;
    float _2436 = cbLight._m0[_2416].x + _1233;
    float _2437 = cbLight._m0[_2416].y + _1234;
    float _2438 = cbLight._m0[_2416].z + _1235;
    float _2442 = inversesqrt(dot(vec3(_2436, _2437, _2438), vec3(_2436, _2437, _2438)));
    float _2443 = _2442 * _2436;
    float _2444 = _2442 * _2437;
    float _2445 = _2442 * _2438;
    float _2446 = dot(vec3(_1276, _1277, _1278), vec3(cbLight._m0[_2416].xyz));
    float _4208 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _2450 = dot(vec3(_1276, _1277, _1278), vec3(_2443, _2444, _2445));
    float _4219 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2453 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _2454 = dot(vec3(cbLight._m0[_2416].xyz), vec3(_2443, _2444, _2445));
    float _4230 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2458 = _2435 * _2435;
    float _2462 = ((_2453 * _2453) * (_2458 + (-1.0))) + 1.0;
    float _2471 = (exp2(log2(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2472 = 1.0 - _2435;
    float _2482 = (0.5 / (((_2364 * ((_2449 * _2472) + _2435)) + 9.9999999392252902907785028219223e-09) + (((_2364 * _2472) + _2435) * _2449))) * _2449;
    float _4241 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2484 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2458 / ((_2462 * _2462) * 3.141590118408203125));
    float _2485 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
    float _2495 = (((_2471 * cbLight._m0[_2420].x) * _2484) * _2485) + ((((cbLight._m0[_2329].x * _2303) * _2388) * _2402) * _2403);
    float _2496 = (((_2471 * cbLight._m0[_2420].y) * _2484) * _2485) + ((((cbLight._m0[_2329].y * _2305) * _2388) * _2402) * _2403);
    float _2497 = (((_2471 * cbLight._m0[_2420].z) * _2484) * _2485) + ((((cbLight._m0[_2329].z * _2307) * _2388) * _2402) * _2403);
    float _2660;
    float _2662;
    float _2664;
    if (_2313.y == 0u)
    {
        uvec4 _2615 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2616 = _2615.x;
        uint _2627 = uint((float(_2615.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1241) / _2616))) + floor(float(uint(cbSceneParam._m0[85u].x * _1240) / _2616)));
        float _2637 = (log2(_2091 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2638 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        uint _2641 = uint(isnan(14.0) ? _2638 : (isnan(_2638) ? 14.0 : min(_2638, 14.0)));
        uvec4 _2646 = texelFetch(g_lightClusterGridBuffer, int(((_2641 << 2u) + (_2627 << 6u)) >> 2u));
        uint _2647 = _2646.x;
        uint _2648 = _2615.z;
        float _2881;
        float _2883;
        float _2885;
        if (((((1u << ((_2648 >> 4u) & 15u)) + 4294967295u) & _2647) == 0u) || ((_2648 & 240u) == 0u))
        {
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
        }
        else
        {
            float _2882;
            float _2884;
            float _2886;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            uint _3082 = 0u;
            uint _3091;
            bool _3092;
            for (;;)
            {
                _3091 = texelFetch(g_lightClassification, int((((_2641 << 5u) + (_2627 << 9u)) + (_3082 << 2u)) >> 2u)).x;
                _3092 = _3091 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                if (_3092)
                {
                    frontier_phi_58_pred = _3081;
                    frontier_phi_58_pred_1 = _3080;
                    frontier_phi_58_pred_2 = _3079;
                }
                else
                {
                    float _3215;
                    float _3216;
                    float _3217;
                    uint _3218;
                    _3215 = _3079;
                    _3216 = _3080;
                    _3217 = _3081;
                    _3218 = _3091;
                    float _3153;
                    float _3154;
                    float _3155;
                    for (;;)
                    {
                        uint _3222 = uint(findLSB(_3218)) + (_3082 << 5u);
                        uint _3219 = (_3218 + 4294967295u) & _3218;
                        uint _3224 = _3222 * 48u;
                        vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3224)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 3u)).x));
                        uint _3255 = (_3222 * 48u) + 8u;
                        vec3 _3266 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3255)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 2u)).x));
                        float _3270 = _3238.x - _2089;
                        float _3271 = _3238.y - _2090;
                        float _3272 = _3238.z - _2091;
                        float _3273 = dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272));
                        float _3276 = inversesqrt(_3273);
                        float _3277 = _3276 * _3270;
                        float _3278 = _3276 * _3271;
                        float _3279 = _3276 * _3272;
                        float _3285 = 1.0 - (_3273 * _3238.w);
                        float _4267 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3287 = sqrt(_3273) * uintBitsToFloat(uvec4(_3245, _3246, _3247, texelFetch(g_PointLightRenderingBuffer, int(((_3222 * 48u) + 4u) + 3u)).x)).w;
                        float _3291 = _3287 * _3287;
                        float _3292 = (-0.0) - _2089;
                        float _3293 = (-0.0) - _2090;
                        float _3294 = (-0.0) - _2091;
                        float _3298 = inversesqrt(dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294)));
                        float _3299 = _3298 * _3292;
                        float _3300 = _3298 * _3293;
                        float _3301 = _3298 * _3294;
                        float _3308 = exp2(log2(1.0 / ((_3291 * 3.5) + 5.0)) * 0.25);
                        float _3309 = 1.0 - _1342;
                        float _3316 = sqrt(1.0 - ((1.0 - (_3309 * _3309)) * (1.0 - (_3308 * _3308))));
                        float _3317 = _3316 * _3316;
                        float _3318 = _3317 * _3317;
                        float _3319 = _3299 + _3277;
                        float _3320 = _3300 + _3278;
                        float _3321 = _3301 + _3279;
                        float _3325 = inversesqrt(dot(vec3(_3319, _3320, _3321), vec3(_3319, _3320, _3321)));
                        float _3329 = dot(vec3(_1296, _1299, _1302), vec3(_3299, _3300, _3301));
                        float _4278 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3332 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                        float _3333 = dot(vec3(_1296, _1299, _1302), vec3(_3325 * _3319, _3325 * _3320, _3325 * _3321));
                        float _4289 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3336 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                        float _3340 = ((_3336 * _3336) * (_3318 + (-1.0))) + 1.0;
                        float _3341 = (1.39999997615814208984375 / (_3287 + 1.39999997615814208984375)) * _3317;
                        float _3342 = _3341 * _3341;
                        float _3345 = ((1.0 - _3342) * dot(vec3(_1296, _1299, _1302), vec3(_3277, _3278, _3279))) + _3342;
                        float _4300 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3346 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                        float _3347 = 1.0 - _3317;
                        float _3357 = (0.5 / (((_3346 * ((_3332 * _3347) + _3317)) + 9.9999999392252902907785028219223e-09) + (((_3346 * _3347) + _3317) * _3332))) * _3346;
                        float _4311 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                        float _3368 = (((_3318 * 3.1415927410125732421875) * (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) / ((_3340 * _3340) * ((_3291 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)));
                        _3153 = (_3368 * _3266.x) + _3215;
                        _3154 = (_3368 * _3266.y) + _3216;
                        _3155 = (_3368 * _3266.z) + _3217;
                        if (_3219 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3215 = _3153;
                            _3216 = _3154;
                            _3217 = _3155;
                            _3218 = _3219;
                        }
                    }
                    frontier_phi_58_pred = _3155;
                    frontier_phi_58_pred_1 = _3154;
                    frontier_phi_58_pred_2 = _3153;
                }
                _2886 = frontier_phi_58_pred;
                _2884 = frontier_phi_58_pred_1;
                _2882 = frontier_phi_58_pred_2;
                uint _3083 = _3082 + 1u;
                if (_3083 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3079 = _2882;
                    _3080 = _2884;
                    _3081 = _2886;
                    _3082 = _3083;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
        }
        uvec4 _2889 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2890 = _2889.z;
        uint _2892 = (_2890 >> 8u) & 15u;
        float _3056;
        float _3058;
        float _3060;
        if (((4294967295u << _2892) & _2647) == 0u)
        {
            _3056 = _2881;
            _3058 = _2883;
            _3060 = _2885;
        }
        else
        {
            float _3072 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
            float _3073 = _3072 * _2089;
            float _3074 = _3072 * _2090;
            float _3075 = _3072 * _2091;
            float frontier_phi_51_52_ladder;
            float frontier_phi_51_52_ladder_1;
            float frontier_phi_51_52_ladder_2;
            if (_2892 < ((_2890 >> 12u) & 15u))
            {
                float _3057;
                float _3059;
                float _3061;
                float _3201 = _2881;
                float _3202 = _2883;
                float _3203 = _2885;
                uint _3204 = _2892;
                uint _3213;
                bool _3214;
                for (;;)
                {
                    _3213 = texelFetch(g_lightClassification, int((((_2641 << 5u) + (_2627 << 9u)) + (_3204 << 2u)) >> 2u)).x;
                    _3214 = _3213 == 0u;
                    float frontier_phi_64_pred;
                    float frontier_phi_64_pred_1;
                    float frontier_phi_64_pred_2;
                    if (_3214)
                    {
                        frontier_phi_64_pred = _3203;
                        frontier_phi_64_pred_1 = _3202;
                        frontier_phi_64_pred_2 = _3201;
                    }
                    else
                    {
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3383 = _3201;
                        float _3384 = _3202;
                        float _3385 = _3203;
                        uint _3386 = _3213;
                        uint _3387;
                        uint _3397;
                        vec4 _3412;
                        float _3413;
                        vec3 _3425;
                        vec4 _3440;
                        vec4 _3455;
                        float _3501;
                        bool _3502;
                        for (;;)
                        {
                            _3397 = ((_3204 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3386));
                            _3387 = (_3386 + 4294967295u) & _3386;
                            uint _3399 = _3397 * 40u;
                            _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            _3413 = _3412.w;
                            uint _3415 = (_3397 * 40u) + 8u;
                            _3425 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x));
                            uint _3427 = (_3397 * 40u) + 16u;
                            _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3442 = (_3397 * 40u) + 20u;
                            _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            uint _3457 = (_3397 * 40u) + 24u;
                            vec4 _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            uint _3476 = (_3397 * 40u) + 28u;
                            vec4 _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            _3501 = fma(_2091, _3489.z, fma(_2090, _3489.y, _3489.x * _2089)) + _3489.w;
                            _3502 = !((fma(_2091, _3470.z, fma(_2090, _3470.y, _3470.x * _2089)) + _3470.w) <= 0.0);
                            float frontier_phi_70_pred;
                            float frontier_phi_70_pred_1;
                            float frontier_phi_70_pred_2;
                            if (_3502)
                            {
                                float _3536 = _3412.x - _2089;
                                float _3537 = _3412.y - _2090;
                                float _3538 = _3412.z - _2091;
                                float _3539 = dot(vec3(_3536, _3537, _3538), vec3(_3536, _3537, _3538));
                                float _3542 = inversesqrt(_3539);
                                float _3543 = _3542 * _3536;
                                float _3544 = _3542 * _3537;
                                float _3545 = _3542 * _3538;
                                float _3549 = 1.0 - (_3539 / (_3413 * _3413));
                                float _4322 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3551 = sqrt(_3539) * uintBitsToFloat(uvec4(_3505, _3506, _3507, texelFetch(g_SpotLightRenderingBuffer, int(((_3397 * 40u) + 4u) + 3u)).x)).w;
                                float _3554 = _3551 * _3551;
                                float _3555 = (fma(_2091, _3440.z, fma(_2090, _3440.y, _3440.x * _2089)) + _3440.w) / _3501;
                                float _3556 = (fma(_2091, _3455.z, fma(_2090, _3455.y, _3455.x * _2089)) + _3455.w) / _3501;
                                float _3560 = 1.0 - dot(vec2(_3555, _3556), vec2(_3555, _3556));
                                float _4333 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3570 = exp2(log2(1.0 / ((_3554 * 3.5) + 5.0)) * 0.25);
                                float _3571 = 1.0 - _1342;
                                float _3578 = sqrt(1.0 - ((1.0 - (_3571 * _3571)) * (1.0 - (_3570 * _3570))));
                                float _3579 = _3578 * _3578;
                                float _3580 = _3579 * _3579;
                                float _3581 = _3543 - _3073;
                                float _3582 = _3544 - _3074;
                                float _3583 = _3545 - _3075;
                                float _3587 = inversesqrt(dot(vec3(_3581, _3582, _3583), vec3(_3581, _3582, _3583)));
                                float _3591 = dot(vec3(_1296, _1299, _1302), vec3((-0.0) - _3073, (-0.0) - _3074, (-0.0) - _3075));
                                float _4344 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3594 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                                float _3595 = dot(vec3(_1296, _1299, _1302), vec3(_3587 * _3581, _3587 * _3582, _3587 * _3583));
                                float _4355 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3598 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                                float _3602 = ((_3598 * _3598) * (_3580 + (-1.0))) + 1.0;
                                float _3603 = (1.39999997615814208984375 / (_3551 + 1.39999997615814208984375)) * _3579;
                                float _3604 = _3603 * _3603;
                                float _3610 = ((1.0 - _3604) * dot(vec3(_1296, _1299, _1302), vec3(_3543, _3544, _3545))) + _3604;
                                float _4366 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3611 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3612 = 1.0 - _3579;
                                float _3622 = (0.5 / (((_3611 * ((_3594 * _3612) + _3579)) + 9.9999999392252902907785028219223e-09) + (((_3611 * _3612) + _3579) * _3594))) * _3611;
                                float _4377 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3632 = ((isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) * (((_3580 * 3.1415927410125732421875) * (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) / ((_3602 * _3602) * ((_3554 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_70_pred = _3632 * _3425.x;
                                frontier_phi_70_pred_1 = _3632 * _3425.z;
                                frontier_phi_70_pred_2 = _3632 * _3425.y;
                            }
                            else
                            {
                                frontier_phi_70_pred = 0.0;
                                frontier_phi_70_pred_1 = 0.0;
                                frontier_phi_70_pred_2 = 0.0;
                            }
                            _3636 = frontier_phi_70_pred;
                            _3638 = frontier_phi_70_pred_1;
                            _3637 = frontier_phi_70_pred_2;
                            _3373 = _3636 + _3383;
                            _3374 = _3637 + _3384;
                            _3375 = _3638 + _3385;
                            if (_3387 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3383 = _3373;
                                _3384 = _3374;
                                _3385 = _3375;
                                _3386 = _3387;
                                continue;
                            }
                        }
                        frontier_phi_64_pred = _3375;
                        frontier_phi_64_pred_1 = _3374;
                        frontier_phi_64_pred_2 = _3373;
                    }
                    _3061 = frontier_phi_64_pred;
                    _3059 = frontier_phi_64_pred_1;
                    _3057 = frontier_phi_64_pred_2;
                    uint _3205 = _3204 + 1u;
                    if (_3205 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3201 = _3057;
                        _3202 = _3059;
                        _3203 = _3061;
                        _3204 = _3205;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_51_52_ladder = _3059;
                frontier_phi_51_52_ladder_1 = _3057;
                frontier_phi_51_52_ladder_2 = _3061;
            }
            else
            {
                frontier_phi_51_52_ladder = _2883;
                frontier_phi_51_52_ladder_1 = _2881;
                frontier_phi_51_52_ladder_2 = _2885;
            }
            _3056 = frontier_phi_51_52_ladder_1;
            _3058 = frontier_phi_51_52_ladder;
            _3060 = frontier_phi_51_52_ladder_2;
        }
        float _3065 = isnan(1.0) ? _1314 : (isnan(_1314) ? 1.0 : min(_1314, 1.0));
        _2660 = ((_3056 * 0.039999999105930328369140625) * _3065) + _2495;
        _2662 = ((_3058 * 0.039999999105930328369140625) * _3065) + _2496;
        _2664 = ((_3060 * 0.039999999105930328369140625) * _3065) + _2497;
    }
    else
    {
        _2660 = _2495;
        _2662 = _2496;
        _2664 = _2497;
    }
    uint _2671 = (_2309 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _2677 = cbInstanceData._m0[_2671].x * (_955 - (_955 * TEXCOORD_7.x));
    float _2678 = cbInstanceData._m0[_2671].y * (_957 - (_957 * TEXCOORD_7.y));
    float _2679 = cbInstanceData._m0[_2671].z * (_959 - (_959 * TEXCOORD_7.z));
    float _2699 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2700 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2701 = cbSceneParam._m0[86u].x * ((_1240 / cbSceneParam._m0[86u].x) + ((0.0999999940395355224609375 / (_1197 + 10.0)) * dot(vec3(_1276, _1277, _1278), vec3(_229, _230, _231))));
    float _2702 = isnan(_2699) ? _2701 : (isnan(_2701) ? _2699 : min(_2701, _2699));
    float _2703 = isnan(_2700) ? _1241 : (isnan(_1241) ? _2700 : min(_1241, _2700));
    vec4 _2705 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2702, _2703), 0.0);
    float _2707 = _2705.x;
    bool _2727 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2707)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2707))) > _1197;
    float _2728 = _2727 ? _2702 : _1240;
    float _2729 = _2727 ? _2703 : _1241;
    vec4 _2731 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2728, _2729));
    vec4 _2736 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2728, _2729));
    float _2738 = _2736.x;
    float _2758 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2738)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2738))) - _1197;
    bool _2765 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2769 = (isnan(_2758) ? 0.0 : (isnan(0.0) ? _2758 : max(0.0, _2758))) * (-1.44269502162933349609375);
    float _2789 = 0.4799999892711639404296875 - (exp2(log2(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * 5.0) * 0.4799999892711639404296875);
    float _2800 = (_2677 + ((_2660 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1810)) * cbPerFrame._m0[3u].x)) + (((_2789 * _2731.x) * exp2(_2769 * (_2765 ? 0.0 : cbMtdParam._m0[35u].y))) * cbSceneParam._m0[72u].w);
    float _2802 = (_2678 + ((_2662 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1810)) * cbPerFrame._m0[3u].x)) + (((_2789 * _2731.y) * exp2(_2769 * (_2765 ? 0.0 : cbMtdParam._m0[35u].z))) * cbSceneParam._m0[72u].w);
    float _2804 = (_2679 + ((_2664 + ((isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0))) * _1810)) * cbPerFrame._m0[3u].x)) + (((_2789 * _2731.z) * exp2(_2769 * (_2765 ? 0.0 : cbMtdParam._m0[35u].w))) * cbSceneParam._m0[72u].w);
    float _4423 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2817 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _2827 = _1240 / cbSceneParam._m0[86u].x;
    float _2828 = _1241 / cbSceneParam._m0[86u].y;
    vec4 _2842 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2827, _2828, (log2((isnan(cbSceneParam._m0[77u].w) ? _1197 : (isnan(_1197) ? cbSceneParam._m0[77u].w : min(_1197, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2844 = _2842.x;
    float _2845 = _2842.y;
    float _2846 = _2842.z;
    float _2847 = _2842.w;
    float _2936;
    float _2938;
    float _2940;
    float _2942;
    if (_1197 > cbSceneParam._m0[78u].w)
    {
        float _2900 = isnan(_1197) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1197 : min(cbSceneParam._m0[80u].w, _1197));
        float _2901 = _2900 / _1197;
        float _2912 = _2901 * _1226;
        float _2913 = _1227 * _2901;
        float _2914 = (-0.0) - _2913;
        float _2915 = _2901 * _1228;
        float _2917 = (cbSceneParam._m0[77u].w * _2914) / _2900;
        float _2918 = _2917 + cbSceneParam._m0[79u].w;
        float _2919 = cbSceneParam._m0[79u].w - _2913;
        float _2925 = sqrt(((_2912 * _2912) + (_2913 * _2913)) + (_2915 * _2915));
        float _2928 = (1.0 - (cbSceneParam._m0[77u].w / _2900)) * _2925;
        float _2933 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2934 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3163;
        if (abs((_2914 - _2917) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3163 = ((((_2918 > 0.0) ? exp2(_2933 * _2918) : (2.0 - exp2(_2934 * _2918))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2928;
        }
        else
        {
            float _3105 = 1.0 / cbSceneParam._m0[80u].x;
            float _3106 = isnan(_2919) ? _2918 : (isnan(_2918) ? _2919 : max(_2918, _2919));
            float _3107 = isnan(_2919) ? _2918 : (isnan(_2918) ? _2919 : min(_2918, _2919));
            float _3116 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : min(_3106, 0.0));
            float _3117 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : min(_3107, 0.0));
            _3163 = ((abs(_2925 / _2914) * cbSceneParam._m0[80u].y) * ((((_3116 - _3117) * 2.0) - ((exp2(_2933 * (isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0)))) - exp2(_2933 * (isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0))))) * _3105)) - ((exp2(_2934 * _3116) - exp2(_2934 * _3117)) * _3105))) + (_2928 * cbSceneParam._m0[80u].z);
        }
        vec4 _3165 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2827, _2828, 1.0), 0.0);
        float _3174 = exp2((_3163 * (-1.44269502162933349609375)) * (1.0 - _3165.w));
        float _3175 = log2(_3174);
        float _3191 = log2(_2847);
        _2936 = (exp2(_3191 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3175 * cbSceneParam._m0[78u].x)) * _3165.x) / cbSceneParam._m0[78u].x)) + _2844;
        _2938 = (exp2(_3191 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3175 * cbSceneParam._m0[78u].y)) * _3165.y) / cbSceneParam._m0[78u].y)) + _2845;
        _2940 = (exp2(_3191 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3175 * cbSceneParam._m0[78u].z)) * _3165.z) / cbSceneParam._m0[78u].z)) + _2846;
        _2942 = _3174 * _2847;
    }
    else
    {
        _2936 = _2844;
        _2938 = _2845;
        _2940 = _2846;
        _2942 = _2847;
    }
    bool _2954 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2955 = log2(_2942);
    float _2959 = exp2(_2955 * cbSceneParam._m0[78u].x);
    float _2960 = exp2(_2955 * cbSceneParam._m0[78u].y);
    float _2961 = exp2(_2955 * cbSceneParam._m0[78u].z);
    float _2962 = _2959 * (isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0)));
    float _2963 = _2960 * (isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0)));
    float _2964 = _2961 * (isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0)));
    vec4 _2972 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1240, _1241));
    float _2974 = _2972.x;
    float _2995 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2974)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2974))) - _1197) * cbMtdParam._m0[20u].z;
    float _4474 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
    float _2996 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    float _2997 = (cbInstanceData._m0[_2309 + 6u].w * (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * _2996;
    float _3006 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3006 * (_2954 ? _2962 : (_2962 + (cbSceneParam._m0[72u].w * _2936)));
    SV_Target.y = _3006 * (_2954 ? _2963 : (_2963 + (cbSceneParam._m0[72u].w * _2938)));
    SV_Target.z = _3006 * (_2954 ? _2964 : (_2964 + (cbSceneParam._m0[72u].w * _2940)));
    SV_Target.w = _2997;
    SV_Target_1.x = ((((cbMtdParam._m0[2u].x * _2677) * _2817) * _2959) * _2996) * _3006;
    SV_Target_1.y = ((((cbMtdParam._m0[2u].y * _2678) * _2817) * _2960) * _2996) * _3006;
    SV_Target_1.z = ((((cbMtdParam._m0[2u].z * _2679) * _2817) * _2961) * _2996) * _3006;
    SV_Target_1.w = _2997;
}


