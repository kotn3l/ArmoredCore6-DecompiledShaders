#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[39];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_8;
layout(set = 0, binding = 7) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1599;
uint _3048;
uint _3049;
uint _3050;
uint _3339;
uint _3340;
uint _3341;
float _3594;
float _3595;
float _3596;
float _3597;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _231 = _230 * _222;
    float _232 = _230 * _223;
    float _233 = _230 * _224;
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = _244 * TANGENT.x;
    float _246 = _244 * TANGENT.y;
    float _247 = _244 * TANGENT.z;
    float _291 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _301 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _291);
    float _302 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _291);
    float _303 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _291);
    float _319 = cbMtdParam._m0[18u].w - cbMtdParam._m0[18u].z;
    float _321 = (sqrt(((_301 * _301) + (_302 * _302)) + (_303 * _303)) - cbMtdParam._m0[18u].z) / (isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0)));
    float _326 = cbMtdParam._m0[19u].x + _321;
    float _328 = _326 * cbMtdParam._m0[19u].z;
    float _3611 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _331 = (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * cbMtdParam._m0[23u].z;
    float _3622 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _332 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _3633 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _337 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _340 = ((cbMtdParam._m0[18u].x - cbMtdParam._m0[17u].x) * _337) + cbMtdParam._m0[17u].x;
    float _361 = cbMtdParam._m0[20u].w * _326;
    float _3644 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    vec4 _379 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _382 = _379.x;
    float _406 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _382)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _382))) - POSITION_1.w) / cbMtdParam._m0[17u].w;
    float _3655 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _407 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _412 = 1.0 - (isnan(cbMtdParam._m0[22u].x) ? _407 : (isnan(_407) ? cbMtdParam._m0[22u].x : max(_407, cbMtdParam._m0[22u].x)));
    float _431 = (cbMtdParam._m0[25u].x + cbPerFrame._m0[22u].x) * cbMtdParam._m0[17u].y;
    float _439 = cbMtdParam._m0[30u].w * TEXCOORD.x;
    float _440 = cbMtdParam._m0[31u].x * TEXCOORD.y;
    vec4 _454 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_2, SS_BumpMap), vec2((((_431 * cbMtdParam._m0[31u].w) + _439) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_440 + (_431 * cbMtdParam._m0[32u].x)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _456 = _454.x;
    float _457 = _454.y;
    float _460 = _454.z - _337;
    float _3671 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _473 = (_461 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _475 = (_461 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _488 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((_473 + (cbMtdParam._m0[27u].y * _431)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_475 + (cbMtdParam._m0[27u].z * _431)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _492 = _488.z;
    vec4 _505 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((_473 + (cbMtdParam._m0[26u].w * _431)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_475 + (cbMtdParam._m0[27u].x * _431)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _509 = _505.z;
    float _512 = (_412 - _454.w) + (isnan(_509) ? _492 : (isnan(_492) ? _509 : max(_492, _509)));
    float _3687 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _514 = (((cbMtdParam._m0[21u].w + TEXCOORD_3.x) - (_412 * cbMtdParam._m0[18u].y)) * (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)))) * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)));
    float _516 = _514 - (_514 * TEXCOORD_7.w);
    float _526 = (POSITION_1.w - cbMtdParam._m0[24u].z) * (1.0 / cbMtdParam._m0[24u].y);
    float _3698 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _541 = (cbMtdParam._m0[29u].w * _431) + _439;
    float _542 = (cbMtdParam._m0[30u].x * _431) + _440;
    float _549 = cbMtdParam._m0[29u].y * _431;
    float _550 = cbMtdParam._m0[29u].z * _431;
    vec4 _568 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * (_549 + (_439 * cbMtdParam._m0[31u].y))) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (_550 + (_440 * cbMtdParam._m0[31u].z))) + cbTextureTilingScale._m0[3u].w));
    float _575 = (_568.x * 2.0) + (-1.0);
    float _577 = (_568.y * 2.0) + (-1.0);
    float _581 = 1.0 - dot(vec2(_575, _577), vec2(_575, _577));
    float _3709 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _583 = sqrt(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)));
    float _586 = fma(_583, _238, fma(_577, _245, _575 * _231));
    float _589 = fma(_583, _239, fma(_577, _246, _575 * _232));
    float _592 = fma(_583, _240, fma(_577, _247, _575 * _233));
    float _596 = inversesqrt(dot(vec3(_586, _589, _592), vec3(_586, _589, _592)));
    float _597 = cbPerFrame._m0[22u].x * 2.0;
    float _598 = _597 * cbMtdParam._m0[23u].x;
    float _602 = ((_586 * 0.5) * _596) + (-0.25);
    float _606 = ((_589 * 0.5) * _596) + (-0.25);
    float _607 = _606 * cbMtdParam._m0[23u].y;
    float _609 = (-0.0) - (cbMtdParam._m0[23u].y * _602);
    float _610 = fract(_598);
    float _612 = fract(_598 + 0.5);
    float _623 = abs((_610 * 2.0) + (-1.0));
    vec4 _640 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_610 * _609) + _541) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_607 * _610) + _542) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _642 = _640.x;
    float _643 = _640.y;
    float _644 = _640.z;
    vec4 _645 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_612 * _609) + _541) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_607 * _612) + _542) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _656 = ((_645.x - _642) * _623) + _642;
    float _657 = ((_645.y - _643) * _623) + _643;
    float _658 = ((_645.z - _644) * _623) + _644;
    float _674 = (cbMtdParam._m0[28u].w * _431) + _439;
    float _675 = (cbMtdParam._m0[29u].x * _431) + _440;
    float _678 = _597 * cbMtdParam._m0[22u].w;
    float _679 = _606 * cbMtdParam._m0[22u].z;
    float _681 = (-0.0) - (cbMtdParam._m0[22u].z * _602);
    float _682 = fract(_678);
    float _684 = fract(_678 + 0.5);
    float _695 = abs((_682 * 2.0) + (-1.0));
    vec4 _712 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_682 * _681) + _674) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_679 * _682) + _675) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _714 = _712.x;
    float _715 = _712.y;
    float _716 = _712.z;
    vec4 _717 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_684 * _681) + _674) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_679 * _684) + _675) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _749 = (((((cbMtdParam._m0[14u].x - cbMtdParam._m0[16u].x) * _656) * cbMtdParam._m0[25u].y) + cbMtdParam._m0[16u].x) * (((_717.x - _714) * _695) + _714)) + (_656 * cbMtdParam._m0[15u].x);
    float _752 = (((((cbMtdParam._m0[14u].y - cbMtdParam._m0[16u].y) * _657) * cbMtdParam._m0[25u].y) + cbMtdParam._m0[16u].y) * (((_717.y - _715) * _695) + _715)) + (_657 * cbMtdParam._m0[15u].y);
    float _755 = ((((cbMtdParam._m0[25u].y * _658) * (cbMtdParam._m0[14u].z - cbMtdParam._m0[16u].z)) + cbMtdParam._m0[16u].z) * (((_717.z - _716) * _695) + _716)) + (_658 * cbMtdParam._m0[15u].z);
    float _759 = _749 - (_749 * _527);
    float _760 = _752 - (_752 * _527);
    float _761 = _755 - (_755 * _527);
    float _766 = (POSITION_1.w - cbMtdParam._m0[24u].x) * (1.0 / cbMtdParam._m0[23u].w);
    float _3720 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _767 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _777 = (cbMtdParam._m0[30u].y * _431) + _439;
    float _778 = (cbMtdParam._m0[30u].z * _431) + _440;
    vec4 _791 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((_439 * cbMtdParam._m0[32u].y) + _549)) + cbTextureTilingScale._m0[3u].z, (((_440 * cbMtdParam._m0[32u].z) + _550) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _797 = (_791.x * 2.0) + (-1.0);
    float _798 = (_791.y * 2.0) + (-1.0);
    float _802 = 1.0 - dot(vec2(_797, _798), vec2(_797, _798));
    float _3731 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _804 = sqrt(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)));
    float _807 = fma(_804, _238, fma(_798, _245, _797 * _231));
    float _810 = fma(_804, _239, fma(_798, _246, _797 * _232));
    float _813 = fma(_804, _240, fma(_798, _247, _797 * _233));
    float _817 = inversesqrt(dot(vec3(_807, _810, _813), vec3(_807, _810, _813)));
    float _818 = _597 * cbMtdParam._m0[26u].x;
    float _825 = (((_810 * 0.5) * _817) + (-0.25)) * cbMtdParam._m0[25u].w;
    float _827 = (-0.0) - (cbMtdParam._m0[25u].w * (((_807 * 0.5) * _817) + (-0.25)));
    float _828 = fract(_818);
    float _830 = fract(_818 + 0.5);
    float _833 = (_828 * _827) + _777;
    float _834 = (_825 * _828) + _778;
    float _837 = (_830 * _827) + _777;
    float _838 = (_825 * _830) + _778;
    float _841 = abs((_828 * 2.0) + (-1.0));
    vec4 _858 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_833 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_834 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _860 = _858.x;
    float _861 = _858.y;
    float _862 = _858.z;
    vec4 _863 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_837 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_838 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _874 = ((_863.x - _860) * _841) + _860;
    float _875 = ((_863.y - _861) * _841) + _861;
    float _876 = ((_863.z - _862) * _841) + _862;
    vec4 _901 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_9, SS_DiffuseMap), vec2((_833 * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (_834 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _903 = _901.x;
    float _904 = _901.y;
    float _905 = _901.z;
    vec4 _906 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_9, SS_DiffuseMap), vec2((_837 * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (_838 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _957 = (cbMtdParam._m0[24u].w * cbMtdParam._m0[13u].x) * ((_759 + (_516 * cbMtdParam._m0[12u].x)) + ((((_874 * cbMtdParam._m0[9u].x) - _759) + (((((cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x) * _874) * cbMtdParam._m0[25u].z) + cbMtdParam._m0[10u].x) * (((_906.x - _903) * _841) + _903))) * _767));
    float _959 = (cbMtdParam._m0[24u].w * cbMtdParam._m0[13u].y) * ((_760 + (_516 * cbMtdParam._m0[12u].y)) + ((((_875 * cbMtdParam._m0[9u].y) - _760) + (((((cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y) * _875) * cbMtdParam._m0[25u].z) + cbMtdParam._m0[10u].y) * (((_906.y - _904) * _841) + _904))) * _767));
    float _961 = (cbMtdParam._m0[24u].w * cbMtdParam._m0[13u].z) * ((_761 + (_516 * cbMtdParam._m0[12u].z)) + ((((_876 * cbMtdParam._m0[9u].z) - _761) + ((((cbMtdParam._m0[25u].z * _876) * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z) * (((_906.z - _905) * _841) + _905))) * _767));
    float _3742 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _968 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _978 = _321 / cbMtdParam._m0[20u].y;
    float _3753 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _979 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    vec4 _1027 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((_1007 / cbMtdParam._m0[19u].y) + (cbMtdParam._m0[32u].w * _431))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((_1011 / cbMtdParam._m0[19u].y) + (cbMtdParam._m0[33u].x * _431))) + cbTextureTilingScale._m0[1u].w));
    float _1031 = _461 * 0.23999999463558197021484375;
    float _1033 = _461 * (-0.20000000298023223876953125);
    float _1044 = cbMtdParam._m0[33u].w * TEXCOORD.x;
    float _1045 = cbMtdParam._m0[34u].x * TEXCOORD.y;
    vec4 _1060 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[33u].y * _431) + _1031) + _1044) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[33u].z * _431) + _1033) + _1045) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1076 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1044 + _1031) + (cbMtdParam._m0[34u].y * _431)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1045 + _1033) + (cbMtdParam._m0[34u].z * _431)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1096 = (((_505.x + (-0.5)) * 0.5) + _488.x) + (((_1060.x + (-1.0)) + _1076.x) * cbMtdParam._m0[21u].z);
    float _1097 = (((_505.y + (-0.5)) * 0.5) + _488.y) + (((_1060.y + (-1.0)) + _1076.y) * cbMtdParam._m0[21u].z);
    float _1102 = ((_1027.x - _1096) * _979) + _1096;
    float _1103 = ((_1027.y - _1097) * _979) + _1097;
    float _1105 = _321 / cbMtdParam._m0[20u].x;
    float _3764 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1106 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _1122 = ((((_968 * (0.5 - _456)) + _456) + (((_1102 + (-0.5)) + ((0.5 - _1102) * _1106)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1123 = ((((_968 * (0.5 - _457)) + _457) + (((_1103 + (-0.5)) + ((0.5 - _1103) * _1106)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1124 = dot(vec2(_1122, _1123), vec2(_1122, _1123));
    float _3775 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _1129 = sqrt(1.0 - (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))));
    float _1131 = cbMtdParam._m0[21u].x * _326;
    float _3786 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _1137 = ((cbMtdParam._m0[21u].y - cbMtdParam._m0[19u].w) * (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) + cbMtdParam._m0[19u].w;
    float _1142 = _1122 - (_1137 * _1122);
    float _1143 = _1123 - (_1137 * _1123);
    float _1144 = (_1137 * (1.0 - _1129)) + _1129;
    float _1154 = fma(_1129, _238, fma(_1123, _245, _1122 * _231));
    float _1157 = fma(_1129, _239, fma(_1123, _246, _1122 * _232));
    float _1160 = fma(_1129, _240, fma(_1123, _247, _1122 * _233));
    float _1164 = inversesqrt(dot(vec3(_1154, _1157, _1160), vec3(_1154, _1157, _1160)));
    float _1165 = _1164 * _1154;
    float _1166 = _1164 * _1157;
    float _1167 = _1164 * _1160;
    float _1170 = fma(_1144, _238, fma(_1143, _245, _1142 * _231));
    float _1173 = fma(_1144, _239, fma(_1143, _246, _1142 * _232));
    float _1176 = fma(_1144, _240, fma(_1143, _247, _1142 * _233));
    float _1180 = inversesqrt(dot(vec3(_1170, _1173, _1176), vec3(_1170, _1173, _1176)));
    float _1181 = _1180 * _1170;
    float _1182 = _1180 * _1173;
    float _1183 = _1180 * _1176;
    float _3797 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3808 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _1185 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _1199 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1219 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1228 = cbSceneParam._m0[71u].x - (_1007 / _1219);
    float _1229 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1219);
    float _1230 = cbSceneParam._m0[71u].z - (_1011 / _1219);
    float _1234 = inversesqrt(dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230)));
    float _1235 = _1228 * _1234;
    float _1236 = _1229 * _1234;
    float _1237 = _1230 * _1234;
    vec4 _1242 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1244 = _1242.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1418 = sqrt(((_1228 * _1228) + (_1229 * _1229)) + (_1230 * _1230));
        float _1424 = (cbMatDynParam._m0[5u].x * _1418) + cbMatDynParam._m0[5u].y;
        float _3819 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1429 = (cbMatDynParam._m0[5u].z * _1418) + cbMatDynParam._m0[5u].w;
        float _3830 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) - _1425)) + _1425) < ((_1244 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1254 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1255 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1257 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1266 = (_1257.x * 2.0) + (-1.0);
    float _1267 = (_1257.y * 2.0) + (-1.0);
    float _1268 = (_1257.z * 2.0) + (-1.0);
    float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
    float _1283 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _1257.w;
    float _1290 = (((_1266 * _1272) - _1165) * _1283) + _1165;
    float _1291 = (((_1267 * _1272) - _1166) * _1283) + _1166;
    float _1292 = (((_1268 * _1272) - _1167) * _1283) + _1167;
    float _1310 = fma(_1292, cbSceneParam._m0[5u].z, fma(_1291, cbSceneParam._m0[5u].y, _1290 * cbSceneParam._m0[5u].x));
    float _1313 = fma(_1292, cbSceneParam._m0[6u].z, fma(_1291, cbSceneParam._m0[6u].y, _1290 * cbSceneParam._m0[6u].x));
    float _1316 = fma(_1292, cbSceneParam._m0[7u].z, fma(_1291, cbSceneParam._m0[7u].y, _1290 * cbSceneParam._m0[7u].x));
    vec4 _1325 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1254, cbSceneParam._m0[86u].y * _1255));
    float _1328 = _1325.x * TEXCOORD_3.w;
    float _1332 = abs(dot(vec3(_1235, _1236, _1237), vec3(_1290, _1291, _1292)));
    float _3841 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
    float _1344 = dot(vec3(_1181, _1182, _1183), vec3(_1235, _1236, _1237)) * 2.0;
    float _1348 = (_1344 * _1181) - _1235;
    float _1349 = (_1344 * _1182) - _1236;
    float _1350 = (_1344 * _1183) - _1237;
    float _1354 = abs(dot(vec3(_1235, _1236, _1237), vec3(_1181, _1182, _1183)));
    float _3852 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
    float _1356 = sqrt(_1185);
    float _1368 = exp2((_1356 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1356 * 3.0));
    float _1399 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1403 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1407 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1598;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1461 = fma(_1407, cbModelParam._m0[26u].z, fma(_1403, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1399));
        float _1465 = fma(_1407, cbModelParam._m0[27u].z, fma(_1403, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1399));
        float _1469 = fma(_1407, cbModelParam._m0[28u].z, fma(_1403, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1399));
        float _1492 = _1399 + _1181;
        float _1493 = _1403 + _1182;
        float _1494 = _1407 + _1183;
        float _1504 = fma(_1494, cbModelParam._m0[26u].z, fma(_1493, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1492)) - _1461;
        float _1505 = fma(_1494, cbModelParam._m0[27u].z, fma(_1493, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1492)) - _1465;
        float _1506 = fma(_1494, cbModelParam._m0[28u].z, fma(_1493, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1492)) - _1469;
        float _1510 = inversesqrt(dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506)));
        float _1522 = ((_1510 * _1504) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1461 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1523 = ((_1510 * _1505) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1465 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1524 = ((_1510 * _1506) / cbModelParam._m0[34u].z) + ((((((_1469 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1522, _1523, _1524), 0.0);
        float _1561 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1548.x + (-0.5));
        float _1593 = _1591 * (_1548.y + (-0.5));
        float _1594 = _1591 * (_1548.z + (-0.5));
        _1598 = _1561 * (_1527.z + (-0.5));
        _1600 = _1561 * (_1527.y + (-0.5));
        _1601 = _1561 * (_1527.x + (-0.5));
        _1602 = _1571 * (_1534.z + (-0.5));
        _1603 = _1571 * (_1534.y + (-0.5));
        _1604 = _1571 * (_1534.x + (-0.5));
        _1605 = _1581 * (_1541.z + (-0.5));
        _1606 = _1581 * (_1541.y + (-0.5));
        _1607 = _1581 * (_1541.x + (-0.5));
        _1608 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        _1609 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        _1610 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
    }
    else
    {
        _1598 = _1599;
        _1600 = _1599;
        _1601 = _1599;
        _1602 = _1599;
        _1603 = _1599;
        _1604 = _1599;
        _1605 = _1599;
        _1606 = _1599;
        _1607 = _1599;
        _1608 = _1599;
        _1609 = _1599;
        _1610 = _1599;
    }
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1636 = fma(_1407, cbModelParam._m0[30u].z, fma(_1403, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1399));
        float _1640 = fma(_1407, cbModelParam._m0[31u].z, fma(_1403, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1399));
        float _1644 = fma(_1407, cbModelParam._m0[32u].z, fma(_1403, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1399));
        float _1667 = _1399 + _1181;
        float _1668 = _1403 + _1182;
        float _1669 = _1407 + _1183;
        float _1679 = fma(_1669, cbModelParam._m0[30u].z, fma(_1668, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1667)) - _1636;
        float _1680 = fma(_1669, cbModelParam._m0[31u].z, fma(_1668, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1667)) - _1640;
        float _1681 = fma(_1669, cbModelParam._m0[32u].z, fma(_1668, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1667)) - _1644;
        float _1685 = inversesqrt(dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681)));
        float _1697 = ((_1685 * _1679) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1636 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1698 = ((_1685 * _1680) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1640 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1699 = ((_1685 * _1681) / cbModelParam._m0[35u].z) + ((((((_1644 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1701 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1697, _1698, _1699), 0.0);
        vec4 _1708 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1697, _1698, _1699), 0.0);
        vec4 _1715 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1697, _1698, _1699), 0.0);
        vec4 _1722 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1697, _1698, _1699), 0.0);
        float _1734 = exp2((_1701.w + (-0.5)) * 20.0) * 2.0;
        float _1744 = exp2((_1708.w + (-0.5)) * 20.0) * 2.0;
        float _1754 = exp2((_1715.w + (-0.5)) * 20.0) * 2.0;
        float _1764 = exp2((_1722.w + (-0.5)) * 20.0) * 2.0;
        float _1765 = _1764 * (_1722.x + (-0.5));
        float _1766 = _1764 * (_1722.y + (-0.5));
        float _1767 = _1764 * (_1722.z + (-0.5));
        _1771 = _1734 * (_1701.z + (-0.5));
        _1772 = _1734 * (_1701.y + (-0.5));
        _1773 = _1734 * (_1701.x + (-0.5));
        _1774 = _1744 * (_1708.z + (-0.5));
        _1775 = _1744 * (_1708.y + (-0.5));
        _1776 = _1744 * (_1708.x + (-0.5));
        _1777 = _1754 * (_1715.z + (-0.5));
        _1778 = _1754 * (_1715.y + (-0.5));
        _1779 = _1754 * (_1715.x + (-0.5));
        _1780 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        _1781 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        _1782 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    }
    else
    {
        _1771 = _1599;
        _1772 = _1599;
        _1773 = _1599;
        _1774 = _1599;
        _1775 = _1599;
        _1776 = _1599;
        _1777 = _1599;
        _1778 = _1599;
        _1779 = _1599;
        _1780 = _1599;
        _1781 = _1599;
        _1782 = _1599;
    }
    float _1796 = _1348 * 0.5;
    float _1797 = _1349 * 0.5;
    float _1798 = _1350 * 0.5;
    float _1799 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1773, _1776, _1779, _1782));
    float _1802 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1772, _1775, _1778, _1781));
    float _1805 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1771, _1774, _1777, _1780));
    float _1840;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1812 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1598, _1602, _1605, _1608));
        float _1816 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1600, _1603, _1606, _1609));
        float _1820 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1601, _1604, _1607, _1610));
        float _1827 = dot(vec4(cbModelParam._m0[39u]), vec4(_1796, _1797, _1798, 1.0));
        _1840 = dot(vec3(isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1827) ? 0.0 : (isnan(0.0) ? _1827 : max(0.0, _1827))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1840 = 1.0;
    }
    float _1851;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1842 = dot(vec4(cbModelParam._m0[40u]), vec4(_1796, _1797, _1798, 1.0));
        _1851 = dot(vec3(isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1842) ? 0.0 : (isnan(0.0) ? _1842 : max(0.0, _1842))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1851 = 1.0;
    }
    float _1855 = (_1851 * cbModelParam._m0[1u].x) + (_1840 * (1.0 - cbModelParam._m0[1u].x));
    float _1862 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1185);
    float _1863 = isnan(_1862) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1862 : min(cbModelParam._m0[25u].z, _1862));
    float _1943;
    float _1945;
    float _1947;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1910 = fma(_1407, cbModelParam._m0[13u].z, fma(_1403, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1399)) + cbModelParam._m0[13u].w;
        float _1914 = fma(_1407, cbModelParam._m0[14u].z, fma(_1403, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1399)) + cbModelParam._m0[14u].w;
        float _1918 = fma(_1407, cbModelParam._m0[15u].z, fma(_1403, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1399)) + cbModelParam._m0[15u].w;
        float _1921 = fma(_1350, cbModelParam._m0[13u].z, fma(_1349, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1348));
        float _1924 = fma(_1350, cbModelParam._m0[14u].z, fma(_1349, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1348));
        float _1927 = fma(_1350, cbModelParam._m0[15u].z, fma(_1349, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1348));
        float _1955;
        if (_1921 > 0.0)
        {
            _1955 = abs((1.0 - _1910) / _1921);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1910 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1955 = frontier_phi_17_15_ladder;
        }
        float _2306;
        if (_1924 > 0.0)
        {
            _2306 = abs((1.0 - _1914) / _1924);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1914 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2306 = frontier_phi_26_22_ladder;
        }
        float _2777;
        if (_1927 > 0.0)
        {
            _2777 = abs((1.0 - _1918) / _1927);
        }
        else
        {
            float frontier_phi_40_33_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_40_33_ladder = abs((_1918 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_40_33_ladder = 5000.0;
            }
            _2777 = frontier_phi_40_33_ladder;
        }
        float _2779 = isnan(_2306) ? _1955 : (isnan(_1955) ? _2306 : min(_1955, _2306));
        float _2780 = isnan(_2777) ? _2779 : (isnan(_2779) ? _2777 : min(_2779, _2777));
        float _2784 = (_2780 * _1921) + _1910;
        float _2785 = (_2780 * _1924) + _1914;
        float _2786 = (_2780 * _1927) + _1918;
        float _2787 = _2780 * 9.9999997473787516355514526367188e-05;
        float _2788 = (-1.0) - _2787;
        float _2790 = _2787 + 1.0;
        float frontier_phi_16_40_ladder;
        float frontier_phi_16_40_ladder_1;
        float frontier_phi_16_40_ladder_2;
        if ((_2786 > _2790) || ((_2786 < _2788) || ((_2785 > _2790) || ((_2785 < _2788) || ((_2784 < _2788) || (_2784 > _2790))))))
        {
            frontier_phi_16_40_ladder = 0.0;
            frontier_phi_16_40_ladder_1 = 0.0;
            frontier_phi_16_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2916 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2786, cbModelParam._m0[9u].z, fma(_2785, cbModelParam._m0[9u].y, _2784 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2786, cbModelParam._m0[10u].z, fma(_2785, cbModelParam._m0[10u].y, _2784 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2786, cbModelParam._m0[11u].z, fma(_2785, cbModelParam._m0[11u].y, _2784 * cbModelParam._m0[11u].x))), _1863);
            frontier_phi_16_40_ladder = _2916.z * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_1 = _2916.x * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_2 = _2916.y * cbModelParam._m0[1u].y;
        }
        _1943 = frontier_phi_16_40_ladder_1;
        _1945 = frontier_phi_16_40_ladder_2;
        _1947 = frontier_phi_16_40_ladder;
    }
    else
    {
        vec4 _1931 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1348, _1349, _1350), _1863);
        _1943 = _1931.x * cbModelParam._m0[1u].y;
        _1945 = _1931.y * cbModelParam._m0[1u].y;
        _1947 = _1931.z * cbModelParam._m0[1u].y;
    }
    float _1951 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1185);
    float _1952 = isnan(_1951) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1951 : min(cbModelParam._m0[25u].w, _1951));
    float _2041;
    float _2043;
    float _2045;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2005 = fma(_1407, cbModelParam._m0[21u].z, fma(_1403, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1399)) + cbModelParam._m0[21u].w;
        float _2009 = fma(_1407, cbModelParam._m0[22u].z, fma(_1403, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1399)) + cbModelParam._m0[22u].w;
        float _2013 = fma(_1407, cbModelParam._m0[23u].z, fma(_1403, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1399)) + cbModelParam._m0[23u].w;
        float _2016 = fma(_1350, cbModelParam._m0[21u].z, fma(_1349, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1348));
        float _2019 = fma(_1350, cbModelParam._m0[22u].z, fma(_1349, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1348));
        float _2022 = fma(_1350, cbModelParam._m0[23u].z, fma(_1349, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1348));
        float _2311;
        if (_2016 > 0.0)
        {
            _2311 = abs((1.0 - _2005) / _2016);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2005 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2311 = frontier_phi_28_24_ladder;
        }
        float _2803;
        if (_2019 > 0.0)
        {
            _2803 = abs((1.0 - _2009) / _2019);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_2009 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2803 = frontier_phi_42_35_ladder;
        }
        float _2978;
        if (_2022 > 0.0)
        {
            _2978 = abs((1.0 - _2013) / _2022);
        }
        else
        {
            float frontier_phi_60_53_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_60_53_ladder = abs((_2013 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_60_53_ladder = 5000.0;
            }
            _2978 = frontier_phi_60_53_ladder;
        }
        float _2980 = isnan(_2803) ? _2311 : (isnan(_2311) ? _2803 : min(_2311, _2803));
        float _2981 = isnan(_2978) ? _2980 : (isnan(_2980) ? _2978 : min(_2980, _2978));
        float _2985 = (_2981 * _2016) + _2005;
        float _2986 = (_2981 * _2019) + _2009;
        float _2987 = (_2981 * _2022) + _2013;
        float _2988 = _2981 * 9.9999997473787516355514526367188e-05;
        float _2989 = (-1.0) - _2988;
        float _2991 = _2988 + 1.0;
        float frontier_phi_25_60_ladder;
        float frontier_phi_25_60_ladder_1;
        float frontier_phi_25_60_ladder_2;
        if ((_2987 > _2991) || ((_2987 < _2989) || ((_2986 > _2991) || ((_2986 < _2989) || ((_2985 < _2989) || (_2985 > _2991))))))
        {
            frontier_phi_25_60_ladder = 0.0;
            frontier_phi_25_60_ladder_1 = 0.0;
            frontier_phi_25_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3202 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2987, cbModelParam._m0[17u].z, fma(_2986, cbModelParam._m0[17u].y, _2985 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2987, cbModelParam._m0[18u].z, fma(_2986, cbModelParam._m0[18u].y, _2985 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2987, cbModelParam._m0[19u].z, fma(_2986, cbModelParam._m0[19u].y, _2985 * cbModelParam._m0[19u].x))), _1952);
            frontier_phi_25_60_ladder = _3202.z * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_1 = _3202.y * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_2 = _3202.x * cbModelParam._m0[1u].z;
        }
        _2041 = frontier_phi_25_60_ladder_2;
        _2043 = frontier_phi_25_60_ladder_1;
        _2045 = frontier_phi_25_60_ladder;
    }
    else
    {
        vec4 _2025 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1348, _1349, _1350), _1952);
        _2041 = _2025.x * cbModelParam._m0[1u].z;
        _2043 = _2025.y * cbModelParam._m0[1u].z;
        _2045 = _2025.z * cbModelParam._m0[1u].z;
    }
    float _2057 = ((((1.0 - _1368) * ((_1356 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1368 * _1356)) * _1328;
    float _2058 = _2057 * ((cbModelParam._m0[1u].w * (_2041 - _1943)) + _1943);
    float _2059 = _2057 * ((cbModelParam._m0[1u].w * (_2043 - _1945)) + _1945);
    float _2060 = _2057 * ((cbModelParam._m0[1u].w * (_2045 - _1947)) + _1947);
    float _2081 = fma(_2060, cbSceneParam._m0[89u].z, fma(_2059, cbSceneParam._m0[89u].y, _2058 * cbSceneParam._m0[89u].x));
    float _2084 = fma(_2060, cbSceneParam._m0[90u].z, fma(_2059, cbSceneParam._m0[90u].y, _2058 * cbSceneParam._m0[90u].x));
    float _2087 = fma(_2060, cbSceneParam._m0[91u].z, fma(_2059, cbSceneParam._m0[91u].y, _2058 * cbSceneParam._m0[91u].x));
    vec4 _2095 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1254, _1255));
    float _2097 = _2095.w;
    uint _2112 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _2116 = floatBitsToUint(cbInstanceData._m0[_2112 + 5u]);
    uint _2118 = _2116.x * 14u;
    uint _2119 = _2118 + 13u;
    float _2124 = _1328 + (-1.0);
    float _2127 = (cbLight._m0[_2119].x * _2124) + 1.0;
    float _2128 = (cbLight._m0[_2119].y * _2124) + 1.0;
    uint _2132 = _2118 + 8u;
    float _2148 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2118].w)) * _1185) * 0.949999988079071044921875);
    float _2149 = _2148 * _2148;
    float _2150 = cbLight._m0[_2118].x + _1235;
    float _2151 = cbLight._m0[_2118].y + _1236;
    float _2152 = cbLight._m0[_2118].z + _1237;
    float _2156 = inversesqrt(dot(vec3(_2150, _2151, _2152), vec3(_2150, _2151, _2152)));
    float _2157 = _2156 * _2150;
    float _2158 = _2156 * _2151;
    float _2159 = _2156 * _2152;
    float _2160 = dot(vec3(_1290, _1291, _1292), vec3(cbLight._m0[_2118].xyz));
    float _3978 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _2164 = dot(vec3(_1290, _1291, _1292), vec3(_1235, _1236, _1237));
    float _3989 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2167 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _2168 = dot(vec3(_1290, _1291, _1292), vec3(_2157, _2158, _2159));
    float _4000 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2171 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _2172 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_2157, _2158, _2159));
    float _4011 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2176 = _2149 * _2149;
    float _2180 = ((_2171 * _2171) * (_2176 + (-1.0))) + 1.0;
    float _2191 = (exp2(log2(1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2192 = 1.0 - _2149;
    float _2203 = (0.5 / (((_2167 * ((_2163 * _2192) + _2149)) + 9.9999999392252902907785028219223e-09) + (((_2167 * _2192) + _2149) * _2163))) * _2163;
    float _4022 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2205 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_2176 / ((_2180 * _2180) * 3.141590118408203125));
    float _2206 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
    uint _2219 = _2118 | 1u;
    uint _2223 = _2118 + 9u;
    float _2237 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2219].w)) * _1185) * 0.949999988079071044921875);
    float _2238 = _2237 * _2237;
    float _2239 = cbLight._m0[_2219].x + _1235;
    float _2240 = cbLight._m0[_2219].y + _1236;
    float _2241 = cbLight._m0[_2219].z + _1237;
    float _2245 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
    float _2246 = _2245 * _2239;
    float _2247 = _2245 * _2240;
    float _2248 = _2245 * _2241;
    float _2249 = dot(vec3(_1290, _1291, _1292), vec3(cbLight._m0[_2219].xyz));
    float _4038 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2252 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _2253 = dot(vec3(_1290, _1291, _1292), vec3(_2246, _2247, _2248));
    float _4049 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2256 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _2257 = dot(vec3(cbLight._m0[_2219].xyz), vec3(_2246, _2247, _2248));
    float _4060 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2261 = _2238 * _2238;
    float _2265 = ((_2256 * _2256) * (_2261 + (-1.0))) + 1.0;
    float _2274 = (exp2(log2(1.0 - (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2275 = 1.0 - _2238;
    float _2285 = (0.5 / (((_2167 * ((_2252 * _2275) + _2238)) + 9.9999999392252902907785028219223e-09) + (((_2167 * _2275) + _2238) * _2252))) * _2252;
    float _4071 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2287 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_2261 / ((_2265 * _2265) * 3.141590118408203125));
    float _2288 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
    float _2298 = (((_2274 * cbLight._m0[_2223].x) * _2287) * _2288) + ((((cbLight._m0[_2132].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2097))) * _2191) * _2205) * _2206);
    float _2299 = (((_2274 * cbLight._m0[_2223].y) * _2287) * _2288) + ((((cbLight._m0[_2132].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2097))) * _2191) * _2205) * _2206);
    float _2300 = (((_2274 * cbLight._m0[_2223].z) * _2287) * _2288) + ((((cbLight._m0[_2132].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2097))) * _2191) * _2205) * _2206);
    float _2415;
    float _2417;
    float _2419;
    if (_2116.y == 0u)
    {
        float _2355 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2356 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2355;
        float _2357 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2355;
        float _2358 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2355;
        uvec4 _2370 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2371 = _2370.x;
        uint _2382 = uint((float(_2370.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1255) / _2371))) + floor(float(uint(cbSceneParam._m0[85u].x * _1254) / _2371)));
        float _2392 = (log2(_2358 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2393 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        uint _2396 = uint(isnan(14.0) ? _2393 : (isnan(_2393) ? 14.0 : min(_2393, 14.0)));
        uvec4 _2401 = texelFetch(g_lightClusterGridBuffer, int(((_2396 << 2u) + (_2382 << 6u)) >> 2u));
        uint _2402 = _2401.x;
        uint _2403 = _2370.z;
        float _2619;
        float _2621;
        float _2623;
        if (((((1u << ((_2403 >> 4u) & 15u)) + 4294967295u) & _2402) == 0u) || ((_2403 & 240u) == 0u))
        {
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
        }
        else
        {
            float _2620;
            float _2622;
            float _2624;
            float _2831 = 0.0;
            float _2832 = 0.0;
            float _2833 = 0.0;
            uint _2834 = 0u;
            uint _2843;
            bool _2844;
            for (;;)
            {
                _2843 = texelFetch(g_lightClassification, int((((_2396 << 5u) + (_2382 << 9u)) + (_2834 << 2u)) >> 2u)).x;
                _2844 = _2843 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                if (_2844)
                {
                    frontier_phi_55_pred = _2833;
                    frontier_phi_55_pred_1 = _2832;
                    frontier_phi_55_pred_2 = _2831;
                }
                else
                {
                    float _3018;
                    float _3019;
                    float _3020;
                    uint _3021;
                    _3018 = _2831;
                    _3019 = _2832;
                    _3020 = _2833;
                    _3021 = _2843;
                    float _2925;
                    float _2926;
                    float _2927;
                    for (;;)
                    {
                        uint _3025 = uint(findLSB(_3021)) + (_2834 << 5u);
                        uint _3022 = (_3021 + 4294967295u) & _3021;
                        uint _3027 = _3025 * 48u;
                        vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3027)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 3u)).x));
                        uint _3058 = (_3025 * 48u) + 8u;
                        vec3 _3069 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3058)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3058 + 2u)).x));
                        float _3073 = _3041.x - _2356;
                        float _3074 = _3041.y - _2357;
                        float _3075 = _3041.z - _2358;
                        float _3076 = dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075));
                        float _3079 = inversesqrt(_3076);
                        float _3080 = _3079 * _3073;
                        float _3081 = _3079 * _3074;
                        float _3082 = _3079 * _3075;
                        float _3088 = 1.0 - (_3076 * _3041.w);
                        float _4097 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3090 = sqrt(_3076) * uintBitsToFloat(uvec4(_3048, _3049, _3050, texelFetch(g_PointLightRenderingBuffer, int(((_3025 * 48u) + 4u) + 3u)).x)).w;
                        float _3094 = _3090 * _3090;
                        float _3095 = (-0.0) - _2356;
                        float _3096 = (-0.0) - _2357;
                        float _3097 = (-0.0) - _2358;
                        float _3101 = inversesqrt(dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097)));
                        float _3102 = _3101 * _3095;
                        float _3103 = _3101 * _3096;
                        float _3104 = _3101 * _3097;
                        float _3112 = exp2(log2(1.0 / ((_3094 * 3.5) + 5.0)) * 0.25);
                        float _3113 = 1.0 - _1356;
                        float _3120 = sqrt(1.0 - ((1.0 - (_3113 * _3113)) * (1.0 - (_3112 * _3112))));
                        float _3121 = _3120 * _3120;
                        float _3122 = _3121 * _3121;
                        float _3123 = _3102 + _3080;
                        float _3124 = _3103 + _3081;
                        float _3125 = _3104 + _3082;
                        float _3129 = inversesqrt(dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125)));
                        float _3133 = dot(vec3(_1310, _1313, _1316), vec3(_3102, _3103, _3104));
                        float _4108 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3136 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                        float _3137 = dot(vec3(_1310, _1313, _1316), vec3(_3129 * _3123, _3129 * _3124, _3129 * _3125));
                        float _4119 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3140 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                        float _3144 = ((_3140 * _3140) * (_3122 + (-1.0))) + 1.0;
                        float _3145 = (1.39999997615814208984375 / (_3090 + 1.39999997615814208984375)) * _3121;
                        float _3146 = _3145 * _3145;
                        float _3149 = ((1.0 - _3146) * dot(vec3(_1310, _1313, _1316), vec3(_3080, _3081, _3082))) + _3146;
                        float _4130 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3150 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                        float _3151 = 1.0 - _3121;
                        float _3161 = (0.5 / (((_3150 * ((_3136 * _3151) + _3121)) + 9.9999999392252902907785028219223e-09) + (((_3150 * _3151) + _3121) * _3136))) * _3150;
                        float _4141 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                        float _3172 = (((_3122 * 3.1415927410125732421875) * (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) / ((_3144 * _3144) * ((_3094 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)));
                        _2925 = (_3172 * _3069.x) + _3018;
                        _2926 = (_3172 * _3069.y) + _3019;
                        _2927 = (_3172 * _3069.z) + _3020;
                        if (_3022 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3018 = _2925;
                            _3019 = _2926;
                            _3020 = _2927;
                            _3021 = _3022;
                        }
                    }
                    frontier_phi_55_pred = _2927;
                    frontier_phi_55_pred_1 = _2926;
                    frontier_phi_55_pred_2 = _2925;
                }
                _2624 = frontier_phi_55_pred;
                _2622 = frontier_phi_55_pred_1;
                _2620 = frontier_phi_55_pred_2;
                uint _2835 = _2834 + 1u;
                if (_2835 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2831 = _2620;
                    _2832 = _2622;
                    _2833 = _2624;
                    _2834 = _2835;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
        }
        uvec4 _2627 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2628 = _2627.z;
        uint _2630 = (_2628 >> 8u) & 15u;
        float _2808;
        float _2810;
        float _2812;
        if (((4294967295u << _2630) & _2402) == 0u)
        {
            _2808 = _2619;
            _2810 = _2621;
            _2812 = _2623;
        }
        else
        {
            float _2824 = inversesqrt(dot(vec3(_2356, _2357, _2358), vec3(_2356, _2357, _2358)));
            float _2825 = _2824 * _2356;
            float _2826 = _2824 * _2357;
            float _2827 = _2824 * _2358;
            float frontier_phi_44_45_ladder;
            float frontier_phi_44_45_ladder_1;
            float frontier_phi_44_45_ladder_2;
            if (_2630 < ((_2628 >> 12u) & 15u))
            {
                float _2809;
                float _2811;
                float _2813;
                float _3004 = _2619;
                float _3005 = _2621;
                float _3006 = _2623;
                uint _3007 = _2630;
                uint _3016;
                bool _3017;
                for (;;)
                {
                    _3016 = texelFetch(g_lightClassification, int((((_2396 << 5u) + (_2382 << 9u)) + (_3007 << 2u)) >> 2u)).x;
                    _3017 = _3016 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    if (_3017)
                    {
                        frontier_phi_69_pred = _3004;
                        frontier_phi_69_pred_1 = _3005;
                        frontier_phi_69_pred_2 = _3006;
                    }
                    else
                    {
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3217 = _3004;
                        float _3218 = _3005;
                        float _3219 = _3006;
                        uint _3220 = _3016;
                        uint _3221;
                        uint _3231;
                        vec4 _3246;
                        float _3247;
                        vec3 _3259;
                        vec4 _3274;
                        vec4 _3289;
                        float _3335;
                        bool _3336;
                        for (;;)
                        {
                            _3231 = ((_3007 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3220));
                            _3221 = (_3220 + 4294967295u) & _3220;
                            uint _3233 = _3231 * 40u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            _3247 = _3246.w;
                            uint _3249 = (_3231 * 40u) + 8u;
                            _3259 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x));
                            uint _3261 = (_3231 * 40u) + 16u;
                            _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            uint _3276 = (_3231 * 40u) + 20u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3291 = (_3231 * 40u) + 24u;
                            vec4 _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3310 = (_3231 * 40u) + 28u;
                            vec4 _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            _3335 = fma(_2358, _3323.z, fma(_2357, _3323.y, _3323.x * _2356)) + _3323.w;
                            _3336 = !((fma(_2358, _3304.z, fma(_2357, _3304.y, _3304.x * _2356)) + _3304.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            if (_3336)
                            {
                                float _3370 = _3246.x - _2356;
                                float _3371 = _3246.y - _2357;
                                float _3372 = _3246.z - _2358;
                                float _3373 = dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372));
                                float _3376 = inversesqrt(_3373);
                                float _3377 = _3376 * _3370;
                                float _3378 = _3376 * _3371;
                                float _3379 = _3376 * _3372;
                                float _3383 = 1.0 - (_3373 / (_3247 * _3247));
                                float _4152 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3385 = sqrt(_3373) * uintBitsToFloat(uvec4(_3339, _3340, _3341, texelFetch(g_SpotLightRenderingBuffer, int(((_3231 * 40u) + 4u) + 3u)).x)).w;
                                float _3388 = _3385 * _3385;
                                float _3389 = (fma(_2358, _3274.z, fma(_2357, _3274.y, _3274.x * _2356)) + _3274.w) / _3335;
                                float _3390 = (fma(_2358, _3289.z, fma(_2357, _3289.y, _3289.x * _2356)) + _3289.w) / _3335;
                                float _3394 = 1.0 - dot(vec2(_3389, _3390), vec2(_3389, _3390));
                                float _4163 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3404 = exp2(log2(1.0 / ((_3388 * 3.5) + 5.0)) * 0.25);
                                float _3405 = 1.0 - _1356;
                                float _3412 = sqrt(1.0 - ((1.0 - (_3405 * _3405)) * (1.0 - (_3404 * _3404))));
                                float _3413 = _3412 * _3412;
                                float _3414 = _3413 * _3413;
                                float _3415 = _3377 - _2825;
                                float _3416 = _3378 - _2826;
                                float _3417 = _3379 - _2827;
                                float _3421 = inversesqrt(dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417)));
                                float _3425 = dot(vec3(_1310, _1313, _1316), vec3((-0.0) - _2825, (-0.0) - _2826, (-0.0) - _2827));
                                float _4174 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3428 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                                float _3429 = dot(vec3(_1310, _1313, _1316), vec3(_3421 * _3415, _3421 * _3416, _3421 * _3417));
                                float _4185 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3432 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                                float _3436 = ((_3432 * _3432) * (_3414 + (-1.0))) + 1.0;
                                float _3437 = (1.39999997615814208984375 / (_3385 + 1.39999997615814208984375)) * _3413;
                                float _3438 = _3437 * _3437;
                                float _3444 = ((1.0 - _3438) * dot(vec3(_1310, _1313, _1316), vec3(_3377, _3378, _3379))) + _3438;
                                float _4196 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                                float _3445 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                                float _3446 = 1.0 - _3413;
                                float _3456 = (0.5 / (((_3445 * ((_3428 * _3446) + _3413)) + 9.9999999392252902907785028219223e-09) + (((_3445 * _3446) + _3413) * _3428))) * _3445;
                                float _4207 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3466 = ((isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * (((_3414 * 3.1415927410125732421875) * (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) / ((_3436 * _3436) * ((_3388 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3466 * _3259.z;
                                frontier_phi_75_pred_1 = _3466 * _3259.x;
                                frontier_phi_75_pred_2 = _3466 * _3259.y;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                            }
                            _3472 = frontier_phi_75_pred;
                            _3470 = frontier_phi_75_pred_1;
                            _3471 = frontier_phi_75_pred_2;
                            _3207 = _3470 + _3217;
                            _3208 = _3471 + _3218;
                            _3209 = _3472 + _3219;
                            if (_3221 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3217 = _3207;
                                _3218 = _3208;
                                _3219 = _3209;
                                _3220 = _3221;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3207;
                        frontier_phi_69_pred_1 = _3208;
                        frontier_phi_69_pred_2 = _3209;
                    }
                    _2809 = frontier_phi_69_pred;
                    _2811 = frontier_phi_69_pred_1;
                    _2813 = frontier_phi_69_pred_2;
                    uint _3008 = _3007 + 1u;
                    if (_3008 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3004 = _2809;
                        _3005 = _2811;
                        _3006 = _2813;
                        _3007 = _3008;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_44_45_ladder = _2813;
                frontier_phi_44_45_ladder_1 = _2811;
                frontier_phi_44_45_ladder_2 = _2809;
            }
            else
            {
                frontier_phi_44_45_ladder = _2623;
                frontier_phi_44_45_ladder_1 = _2621;
                frontier_phi_44_45_ladder_2 = _2619;
            }
            _2808 = frontier_phi_44_45_ladder_2;
            _2810 = frontier_phi_44_45_ladder_1;
            _2812 = frontier_phi_44_45_ladder;
        }
        float _2817 = isnan(1.0) ? _1328 : (isnan(_1328) ? 1.0 : min(_1328, 1.0));
        _2415 = ((_2808 * 0.039999999105930328369140625) * _2817) + _2298;
        _2417 = ((_2810 * 0.039999999105930328369140625) * _2817) + _2299;
        _2419 = ((_2812 * 0.039999999105930328369140625) * _2817) + _2300;
    }
    else
    {
        _2415 = _2298;
        _2417 = _2299;
        _2419 = _2300;
    }
    uint _2425 = _2112 + 9u;
    uint _2426 = _2425 + uint(cbMatDynParam._m0[0u].w);
    float _2432 = cbInstanceData._m0[_2426].x * (_957 - (_957 * TEXCOORD_7.x));
    float _2433 = cbInstanceData._m0[_2426].y * (_959 - (_959 * TEXCOORD_7.y));
    float _2434 = cbInstanceData._m0[_2426].z * (_961 - (_961 * TEXCOORD_7.z));
    float _2454 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2455 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2456 = cbSceneParam._m0[86u].x * ((_1254 / cbSceneParam._m0[86u].x) + ((0.0999999940395355224609375 / (_1199 + 10.0)) * dot(vec3(_1290, _1291, _1292), vec3(_231, _232, _233))));
    float _2457 = isnan(_2454) ? _2456 : (isnan(_2456) ? _2454 : min(_2456, _2454));
    float _2458 = isnan(_2455) ? _1255 : (isnan(_1255) ? _2455 : min(_1255, _2455));
    vec4 _2460 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2457, _2458), 0.0);
    float _2462 = _2460.x;
    bool _2482 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2462)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2462))) > _1199;
    float _2483 = _2482 ? _2457 : _1254;
    float _2484 = _2482 ? _2458 : _1255;
    vec4 _2486 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2483, _2484));
    vec4 _2491 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2483, _2484));
    float _2493 = _2491.x;
    float _2513 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2493)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2493))) - _1199;
    bool _2520 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2524 = (isnan(_2513) ? 0.0 : (isnan(0.0) ? _2513 : max(0.0, _2513))) * (-1.44269502162933349609375);
    float _2544 = 0.4799999892711639404296875 - (exp2(log2(1.0 - (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * 5.0) * 0.4799999892711639404296875);
    float _2555 = (_2432 + ((_2415 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1855)) * cbPerFrame._m0[3u].x)) + (((_2544 * _2486.x) * exp2(_2524 * (_2520 ? 0.0 : cbMtdParam._m0[35u].y))) * cbSceneParam._m0[72u].w);
    float _2557 = (_2433 + ((_2417 + ((isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))) * _1855)) * cbPerFrame._m0[3u].x)) + (((_2544 * _2486.y) * exp2(_2524 * (_2520 ? 0.0 : cbMtdParam._m0[35u].z))) * cbSceneParam._m0[72u].w);
    float _2559 = (_2434 + ((_2419 + ((isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))) * _1855)) * cbPerFrame._m0[3u].x)) + (((_2544 * _2486.z) * exp2(_2524 * (_2520 ? 0.0 : cbMtdParam._m0[35u].w))) * cbSceneParam._m0[72u].w);
    float _2560 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2561 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2562 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2568 = cbMtdParam._m0[2u].x * _2432;
    float _2569 = cbMtdParam._m0[2u].y * _2433;
    float _2570 = cbMtdParam._m0[2u].z * _2434;
    float _4253 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2572 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _2577 = cbInstanceData._m0[_2112 + 6u].w * (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)));
    float _2582 = _1254 / cbSceneParam._m0[86u].x;
    float _2583 = _1255 / cbSceneParam._m0[86u].y;
    vec4 _2597 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2582, _2583, (log2((isnan(cbSceneParam._m0[77u].w) ? _1199 : (isnan(_1199) ? cbSceneParam._m0[77u].w : min(_1199, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2599 = _2597.x;
    float _2600 = _2597.y;
    float _2601 = _2597.z;
    float _2602 = _2597.w;
    float _2675;
    float _2677;
    float _2679;
    float _2681;
    if (_1199 > cbSceneParam._m0[78u].w)
    {
        float _2638 = isnan(_1199) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1199 : min(cbSceneParam._m0[80u].w, _1199));
        float _2639 = _2638 / _1199;
        float _2650 = _2639 * _1228;
        float _2651 = _1229 * _2639;
        float _2652 = (-0.0) - _2651;
        float _2653 = _2639 * _1230;
        float _2655 = (cbSceneParam._m0[77u].w * _2652) / _2638;
        float _2656 = _2655 + cbSceneParam._m0[79u].w;
        float _2657 = cbSceneParam._m0[79u].w - _2651;
        float _2663 = sqrt(((_2650 * _2650) + (_2651 * _2651)) + (_2653 * _2653));
        float _2666 = (1.0 - (cbSceneParam._m0[77u].w / _2638)) * _2663;
        float _2672 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2673 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2935;
        if (abs((_2652 - _2655) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2935 = ((((_2656 > 0.0) ? exp2(_2672 * _2656) : (2.0 - exp2(_2673 * _2656))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2666;
        }
        else
        {
            float _2857 = 1.0 / cbSceneParam._m0[80u].x;
            float _2858 = isnan(_2657) ? _2656 : (isnan(_2656) ? _2657 : max(_2656, _2657));
            float _2859 = isnan(_2657) ? _2656 : (isnan(_2656) ? _2657 : min(_2656, _2657));
            float _2868 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : min(_2858, 0.0));
            float _2869 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : min(_2859, 0.0));
            _2935 = ((abs(_2663 / _2652) * cbSceneParam._m0[80u].y) * ((((_2868 - _2869) * 2.0) - ((exp2(_2672 * (isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0)))) - exp2(_2672 * (isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0))))) * _2857)) - ((exp2(_2673 * _2868) - exp2(_2673 * _2869)) * _2857))) + (_2666 * cbSceneParam._m0[80u].z);
        }
        vec4 _2937 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2582, _2583, 1.0), 0.0);
        float _2946 = exp2((_2935 * (-1.44269502162933349609375)) * (1.0 - _2937.w));
        float _2947 = log2(_2946);
        float _2963 = log2(_2602);
        _2675 = (exp2(_2963 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2947 * cbSceneParam._m0[78u].x)) * _2937.x) / cbSceneParam._m0[78u].x)) + _2599;
        _2677 = (exp2(_2963 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2947 * cbSceneParam._m0[78u].y)) * _2937.y) / cbSceneParam._m0[78u].y)) + _2600;
        _2679 = (exp2(_2963 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2947 * cbSceneParam._m0[78u].z)) * _2937.z) / cbSceneParam._m0[78u].z)) + _2601;
        _2681 = _2946 * _2602;
    }
    else
    {
        _2675 = _2599;
        _2677 = _2600;
        _2679 = _2601;
        _2681 = _2602;
    }
    bool _2973;
    float _2736;
    vec4 _2739;
    float _2741;
    vec4 _2743;
    float _2751;
    float _2752;
    float _2753;
    float _2757;
    float _2761;
    float _2765;
    float _2766;
    bool _2776;
    for (;;)
    {
        bool _2693 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2694 = log2(_2681);
        float _2698 = exp2(_2694 * cbSceneParam._m0[78u].x);
        float _2699 = exp2(_2694 * cbSceneParam._m0[78u].y);
        float _2700 = exp2(_2694 * cbSceneParam._m0[78u].z);
        float _2701 = _2698 * _2560;
        float _2702 = _2699 * _2561;
        float _2703 = _2700 * _2562;
        vec4 _2711 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1254, _1255));
        float _2713 = _2711.x;
        float _2734 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2713)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2713))) - _1199) * cbMtdParam._m0[20u].z;
        float _4304 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2735 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        _2736 = _2577 * _2735;
        float _2737 = _1244 + (-0.5);
        _2739 = cbMtdParam._m0[1u];
        _2741 = _2739.y * _2737;
        _2743 = cbMatDynParam._m0[0u];
        float _2750 = (roundEven(_2743.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2751 = _2750 * (_2693 ? _2701 : (_2701 + (cbSceneParam._m0[72u].w * _2675)));
        _2752 = _2750 * (_2693 ? _2702 : (_2702 + (cbSceneParam._m0[72u].w * _2677)));
        _2753 = _2750 * (_2693 ? _2703 : (_2703 + (cbSceneParam._m0[72u].w * _2679)));
        _2757 = (((_2568 * _2572) * _2698) * _2735) * _2750;
        _2761 = (((_2569 * _2572) * _2699) * _2735) * _2750;
        _2765 = (((_2570 * _2572) * _2700) * _2735) * _2750;
        _2766 = _2737 * 0.999000012874603271484375;
        _2776 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2776)
        {
            if ((cbInstanceData._m0[_2112 + 7u].x + _2766) < 0.5)
            {
                _2973 = true;
                break;
            }
        }
        uint _2892 = _2425 + uint(_2743.w);
        if ((cbInstanceData._m0[_2892].w < 1.0) && ((cbInstanceData._m0[_2892].w + _2766) < 0.5))
        {
            _2973 = true;
            break;
        }
        if ((_2741 + 1.0) < _2739.x)
        {
            _2973 = true;
            break;
        }
        _2973 = false;
        break;
    }
    float _3177;
    if (_2973)
    {
        discard_state = true;
        _3177 = 0.0;
    }
    else
    {
        _3177 = _2736;
    }
    SV_Target.x = _2751;
    SV_Target.y = _2752;
    SV_Target.z = _2753;
    SV_Target.w = _3177;
    SV_Target_1.x = _2757;
    SV_Target_1.y = _2761;
    SV_Target_1.z = _2765;
    SV_Target_1.w = _2736;
    discard_exit();
}


