#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[39];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_8;
layout(set = 0, binding = 7) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1555;
uint _2972;
uint _2973;
uint _2974;
uint _3254;
uint _3255;
uint _3256;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _227 = _226 * _218;
    float _228 = _226 * _219;
    float _229 = _226 * _220;
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = _240 * TANGENT.x;
    float _242 = _240 * TANGENT.y;
    float _243 = _240 * TANGENT.z;
    float _287 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _297 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _287);
    float _298 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _287);
    float _299 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _287);
    float _315 = cbMtdParam._m0[18u].w - cbMtdParam._m0[18u].z;
    float _317 = (sqrt(((_297 * _297) + (_298 * _298)) + (_299 * _299)) - cbMtdParam._m0[18u].z) / (isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0)));
    float _322 = cbMtdParam._m0[19u].x + _317;
    float _324 = _322 * cbMtdParam._m0[19u].z;
    float _3501 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _327 = (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * cbMtdParam._m0[23u].z;
    float _3512 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _328 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _3523 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _333 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _336 = ((cbMtdParam._m0[18u].x - cbMtdParam._m0[17u].x) * _333) + cbMtdParam._m0[17u].x;
    float _357 = cbMtdParam._m0[20u].w * _322;
    float _3534 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    vec4 _375 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _378 = _375.x;
    float _402 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _378)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _378))) - POSITION_1.w) / cbMtdParam._m0[17u].w;
    float _3545 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _403 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    float _408 = 1.0 - (isnan(cbMtdParam._m0[22u].x) ? _403 : (isnan(_403) ? cbMtdParam._m0[22u].x : max(_403, cbMtdParam._m0[22u].x)));
    float _427 = (cbMtdParam._m0[25u].x + cbPerFrame._m0[22u].x) * cbMtdParam._m0[17u].y;
    float _435 = cbMtdParam._m0[30u].w * TEXCOORD.x;
    float _436 = cbMtdParam._m0[31u].x * TEXCOORD.y;
    vec4 _450 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_2, SS_BumpMap), vec2((((_427 * cbMtdParam._m0[31u].w) + _435) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_436 + (_427 * cbMtdParam._m0[32u].x)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _452 = _450.x;
    float _453 = _450.y;
    float _456 = _450.z - _333;
    float _3561 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _469 = (_457 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _471 = (_457 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _484 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((_469 + (cbMtdParam._m0[27u].y * _427)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_471 + (cbMtdParam._m0[27u].z * _427)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _488 = _484.z;
    vec4 _501 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((_469 + (cbMtdParam._m0[26u].w * _427)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_471 + (cbMtdParam._m0[27u].x * _427)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _505 = _501.z;
    float _508 = (_408 - _450.w) + (isnan(_505) ? _488 : (isnan(_488) ? _505 : max(_488, _505)));
    float _3577 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _510 = (((cbMtdParam._m0[21u].w + TEXCOORD_3.x) - (_408 * cbMtdParam._m0[18u].y)) * (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)))) * (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)));
    float _512 = _510 - (_510 * TEXCOORD_7.w);
    float _522 = (POSITION_1.w - cbMtdParam._m0[24u].z) * (1.0 / cbMtdParam._m0[24u].y);
    float _3588 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _537 = (cbMtdParam._m0[29u].w * _427) + _435;
    float _538 = (cbMtdParam._m0[30u].x * _427) + _436;
    float _545 = cbMtdParam._m0[29u].y * _427;
    float _546 = cbMtdParam._m0[29u].z * _427;
    vec4 _564 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * (_545 + (_435 * cbMtdParam._m0[31u].y))) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (_546 + (_436 * cbMtdParam._m0[31u].z))) + cbTextureTilingScale._m0[3u].w));
    float _571 = (_564.x * 2.0) + (-1.0);
    float _573 = (_564.y * 2.0) + (-1.0);
    float _577 = 1.0 - dot(vec2(_571, _573), vec2(_571, _573));
    float _3599 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _579 = sqrt(isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)));
    float _582 = fma(_579, _234, fma(_573, _241, _571 * _227));
    float _585 = fma(_579, _235, fma(_573, _242, _571 * _228));
    float _588 = fma(_579, _236, fma(_573, _243, _571 * _229));
    float _592 = inversesqrt(dot(vec3(_582, _585, _588), vec3(_582, _585, _588)));
    float _593 = cbPerFrame._m0[22u].x * 2.0;
    float _594 = _593 * cbMtdParam._m0[23u].x;
    float _598 = ((_582 * 0.5) * _592) + (-0.25);
    float _602 = ((_585 * 0.5) * _592) + (-0.25);
    float _603 = _602 * cbMtdParam._m0[23u].y;
    float _605 = (-0.0) - (cbMtdParam._m0[23u].y * _598);
    float _606 = fract(_594);
    float _608 = fract(_594 + 0.5);
    float _619 = abs((_606 * 2.0) + (-1.0));
    vec4 _636 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_606 * _605) + _537) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_603 * _606) + _538) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _638 = _636.x;
    float _639 = _636.y;
    float _640 = _636.z;
    vec4 _641 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_608 * _605) + _537) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_603 * _608) + _538) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _652 = ((_641.x - _638) * _619) + _638;
    float _653 = ((_641.y - _639) * _619) + _639;
    float _654 = ((_641.z - _640) * _619) + _640;
    float _670 = (cbMtdParam._m0[28u].w * _427) + _435;
    float _671 = (cbMtdParam._m0[29u].x * _427) + _436;
    float _674 = _593 * cbMtdParam._m0[22u].w;
    float _675 = _602 * cbMtdParam._m0[22u].z;
    float _677 = (-0.0) - (cbMtdParam._m0[22u].z * _598);
    float _678 = fract(_674);
    float _680 = fract(_674 + 0.5);
    float _691 = abs((_678 * 2.0) + (-1.0));
    vec4 _708 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_678 * _677) + _670) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_675 * _678) + _671) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _710 = _708.x;
    float _711 = _708.y;
    float _712 = _708.z;
    vec4 _713 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_680 * _677) + _670) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_675 * _680) + _671) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _745 = (((((cbMtdParam._m0[14u].x - cbMtdParam._m0[16u].x) * _652) * cbMtdParam._m0[25u].y) + cbMtdParam._m0[16u].x) * (((_713.x - _710) * _691) + _710)) + (_652 * cbMtdParam._m0[15u].x);
    float _748 = (((((cbMtdParam._m0[14u].y - cbMtdParam._m0[16u].y) * _653) * cbMtdParam._m0[25u].y) + cbMtdParam._m0[16u].y) * (((_713.y - _711) * _691) + _711)) + (_653 * cbMtdParam._m0[15u].y);
    float _751 = ((((cbMtdParam._m0[25u].y * _654) * (cbMtdParam._m0[14u].z - cbMtdParam._m0[16u].z)) + cbMtdParam._m0[16u].z) * (((_713.z - _712) * _691) + _712)) + (_654 * cbMtdParam._m0[15u].z);
    float _755 = _745 - (_745 * _523);
    float _756 = _748 - (_748 * _523);
    float _757 = _751 - (_751 * _523);
    float _762 = (POSITION_1.w - cbMtdParam._m0[24u].x) * (1.0 / cbMtdParam._m0[23u].w);
    float _3610 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _763 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _773 = (cbMtdParam._m0[30u].y * _427) + _435;
    float _774 = (cbMtdParam._m0[30u].z * _427) + _436;
    vec4 _787 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((_435 * cbMtdParam._m0[32u].y) + _545)) + cbTextureTilingScale._m0[3u].z, (((_436 * cbMtdParam._m0[32u].z) + _546) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _793 = (_787.x * 2.0) + (-1.0);
    float _794 = (_787.y * 2.0) + (-1.0);
    float _798 = 1.0 - dot(vec2(_793, _794), vec2(_793, _794));
    float _3621 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _800 = sqrt(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)));
    float _803 = fma(_800, _234, fma(_794, _241, _793 * _227));
    float _806 = fma(_800, _235, fma(_794, _242, _793 * _228));
    float _809 = fma(_800, _236, fma(_794, _243, _793 * _229));
    float _813 = inversesqrt(dot(vec3(_803, _806, _809), vec3(_803, _806, _809)));
    float _814 = _593 * cbMtdParam._m0[26u].x;
    float _821 = (((_806 * 0.5) * _813) + (-0.25)) * cbMtdParam._m0[25u].w;
    float _823 = (-0.0) - (cbMtdParam._m0[25u].w * (((_803 * 0.5) * _813) + (-0.25)));
    float _824 = fract(_814);
    float _826 = fract(_814 + 0.5);
    float _829 = (_824 * _823) + _773;
    float _830 = (_821 * _824) + _774;
    float _833 = (_826 * _823) + _773;
    float _834 = (_821 * _826) + _774;
    float _837 = abs((_824 * 2.0) + (-1.0));
    vec4 _854 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_829 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_830 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _856 = _854.x;
    float _857 = _854.y;
    float _858 = _854.z;
    vec4 _859 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_833 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_834 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _870 = ((_859.x - _856) * _837) + _856;
    float _871 = ((_859.y - _857) * _837) + _857;
    float _872 = ((_859.z - _858) * _837) + _858;
    vec4 _897 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_9, SS_DiffuseMap), vec2((_829 * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (_830 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _899 = _897.x;
    float _900 = _897.y;
    float _901 = _897.z;
    vec4 _902 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_9, SS_DiffuseMap), vec2((_833 * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (_834 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _953 = (cbMtdParam._m0[24u].w * cbMtdParam._m0[13u].x) * ((_755 + (_512 * cbMtdParam._m0[12u].x)) + ((((_870 * cbMtdParam._m0[9u].x) - _755) + (((((cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x) * _870) * cbMtdParam._m0[25u].z) + cbMtdParam._m0[10u].x) * (((_902.x - _899) * _837) + _899))) * _763));
    float _955 = (cbMtdParam._m0[24u].w * cbMtdParam._m0[13u].y) * ((_756 + (_512 * cbMtdParam._m0[12u].y)) + ((((_871 * cbMtdParam._m0[9u].y) - _756) + (((((cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y) * _871) * cbMtdParam._m0[25u].z) + cbMtdParam._m0[10u].y) * (((_902.y - _900) * _837) + _900))) * _763));
    float _957 = (cbMtdParam._m0[24u].w * cbMtdParam._m0[13u].z) * ((_757 + (_512 * cbMtdParam._m0[12u].z)) + ((((_872 * cbMtdParam._m0[9u].z) - _757) + ((((cbMtdParam._m0[25u].z * _872) * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z) * (((_902.z - _901) * _837) + _901))) * _763));
    float _3632 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _964 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _974 = _317 / cbMtdParam._m0[20u].y;
    float _3643 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _975 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    vec4 _1023 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((_1003 / cbMtdParam._m0[19u].y) + (cbMtdParam._m0[32u].w * _427))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((_1007 / cbMtdParam._m0[19u].y) + (cbMtdParam._m0[33u].x * _427))) + cbTextureTilingScale._m0[1u].w));
    float _1027 = _457 * 0.23999999463558197021484375;
    float _1029 = _457 * (-0.20000000298023223876953125);
    float _1040 = cbMtdParam._m0[33u].w * TEXCOORD.x;
    float _1041 = cbMtdParam._m0[34u].x * TEXCOORD.y;
    vec4 _1056 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[33u].y * _427) + _1027) + _1040) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[33u].z * _427) + _1029) + _1041) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1072 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1040 + _1027) + (cbMtdParam._m0[34u].y * _427)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1041 + _1029) + (cbMtdParam._m0[34u].z * _427)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1092 = (((_501.x + (-0.5)) * 0.5) + _484.x) + (((_1056.x + (-1.0)) + _1072.x) * cbMtdParam._m0[21u].z);
    float _1093 = (((_501.y + (-0.5)) * 0.5) + _484.y) + (((_1056.y + (-1.0)) + _1072.y) * cbMtdParam._m0[21u].z);
    float _1098 = ((_1023.x - _1092) * _975) + _1092;
    float _1099 = ((_1023.y - _1093) * _975) + _1093;
    float _1101 = _317 / cbMtdParam._m0[20u].x;
    float _3654 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1102 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _1118 = ((((_964 * (0.5 - _452)) + _452) + (((_1098 + (-0.5)) + ((0.5 - _1098) * _1102)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1119 = ((((_964 * (0.5 - _453)) + _453) + (((_1099 + (-0.5)) + ((0.5 - _1099) * _1102)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1120 = dot(vec2(_1118, _1119), vec2(_1118, _1119));
    float _3665 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _1125 = sqrt(1.0 - (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))));
    float _1127 = cbMtdParam._m0[21u].x * _322;
    float _3676 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _1133 = ((cbMtdParam._m0[21u].y - cbMtdParam._m0[19u].w) * (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) + cbMtdParam._m0[19u].w;
    float _1138 = _1118 - (_1133 * _1118);
    float _1139 = _1119 - (_1133 * _1119);
    float _1140 = (_1133 * (1.0 - _1125)) + _1125;
    float _1150 = fma(_1125, _234, fma(_1119, _241, _1118 * _227));
    float _1153 = fma(_1125, _235, fma(_1119, _242, _1118 * _228));
    float _1156 = fma(_1125, _236, fma(_1119, _243, _1118 * _229));
    float _1160 = inversesqrt(dot(vec3(_1150, _1153, _1156), vec3(_1150, _1153, _1156)));
    float _1161 = _1160 * _1150;
    float _1162 = _1160 * _1153;
    float _1163 = _1160 * _1156;
    float _1166 = fma(_1140, _234, fma(_1139, _241, _1138 * _227));
    float _1169 = fma(_1140, _235, fma(_1139, _242, _1138 * _228));
    float _1172 = fma(_1140, _236, fma(_1139, _243, _1138 * _229));
    float _1176 = inversesqrt(dot(vec3(_1166, _1169, _1172), vec3(_1166, _1169, _1172)));
    float _1177 = _1176 * _1166;
    float _1178 = _1176 * _1169;
    float _1179 = _1176 * _1172;
    float _3687 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _3698 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _1181 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _1195 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1215 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1224 = cbSceneParam._m0[71u].x - (_1003 / _1215);
    float _1225 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1215);
    float _1226 = cbSceneParam._m0[71u].z - (_1007 / _1215);
    float _1230 = inversesqrt(dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226)));
    float _1231 = _1224 * _1230;
    float _1232 = _1225 * _1230;
    float _1233 = _1226 * _1230;
    float _1238 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1239 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1241 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1250 = (_1241.x * 2.0) + (-1.0);
    float _1251 = (_1241.y * 2.0) + (-1.0);
    float _1252 = (_1241.z * 2.0) + (-1.0);
    float _1256 = inversesqrt(dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252)));
    float _1267 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _1241.w;
    float _1274 = (((_1250 * _1256) - _1161) * _1267) + _1161;
    float _1275 = (((_1251 * _1256) - _1162) * _1267) + _1162;
    float _1276 = (((_1252 * _1256) - _1163) * _1267) + _1163;
    float _1294 = fma(_1276, cbSceneParam._m0[5u].z, fma(_1275, cbSceneParam._m0[5u].y, _1274 * cbSceneParam._m0[5u].x));
    float _1297 = fma(_1276, cbSceneParam._m0[6u].z, fma(_1275, cbSceneParam._m0[6u].y, _1274 * cbSceneParam._m0[6u].x));
    float _1300 = fma(_1276, cbSceneParam._m0[7u].z, fma(_1275, cbSceneParam._m0[7u].y, _1274 * cbSceneParam._m0[7u].x));
    vec4 _1309 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1238, cbSceneParam._m0[86u].y * _1239));
    float _1312 = _1309.x * TEXCOORD_3.w;
    float _1316 = abs(dot(vec3(_1231, _1232, _1233), vec3(_1274, _1275, _1276)));
    float _3709 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
    float _1328 = dot(vec3(_1177, _1178, _1179), vec3(_1231, _1232, _1233)) * 2.0;
    float _1332 = (_1328 * _1177) - _1231;
    float _1333 = (_1328 * _1178) - _1232;
    float _1334 = (_1328 * _1179) - _1233;
    float _1338 = abs(dot(vec3(_1231, _1232, _1233), vec3(_1177, _1178, _1179)));
    float _3720 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
    float _1340 = sqrt(_1181);
    float _1352 = exp2((_1340 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1340 * 3.0));
    float _1383 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1387 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1391 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1554;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1417 = fma(_1391, cbModelParam._m0[26u].z, fma(_1387, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1383));
        float _1421 = fma(_1391, cbModelParam._m0[27u].z, fma(_1387, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1383));
        float _1425 = fma(_1391, cbModelParam._m0[28u].z, fma(_1387, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1383));
        float _1448 = _1383 + _1177;
        float _1449 = _1387 + _1178;
        float _1450 = _1391 + _1179;
        float _1460 = fma(_1450, cbModelParam._m0[26u].z, fma(_1449, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1448)) - _1417;
        float _1461 = fma(_1450, cbModelParam._m0[27u].z, fma(_1449, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1448)) - _1421;
        float _1462 = fma(_1450, cbModelParam._m0[28u].z, fma(_1449, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1448)) - _1425;
        float _1466 = inversesqrt(dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462)));
        float _1478 = ((_1466 * _1460) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1417 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1479 = ((_1466 * _1461) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1421 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1480 = ((_1466 * _1462) / cbModelParam._m0[34u].z) + ((((((_1425 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        float _1517 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1504.x + (-0.5));
        float _1549 = _1547 * (_1504.y + (-0.5));
        float _1550 = _1547 * (_1504.z + (-0.5));
        _1554 = _1517 * (_1483.z + (-0.5));
        _1556 = _1517 * (_1483.y + (-0.5));
        _1557 = _1517 * (_1483.x + (-0.5));
        _1558 = _1527 * (_1490.z + (-0.5));
        _1559 = _1527 * (_1490.y + (-0.5));
        _1560 = _1527 * (_1490.x + (-0.5));
        _1561 = _1537 * (_1497.z + (-0.5));
        _1562 = _1537 * (_1497.y + (-0.5));
        _1563 = _1537 * (_1497.x + (-0.5));
        _1564 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        _1565 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        _1566 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
    }
    else
    {
        _1554 = _1555;
        _1556 = _1555;
        _1557 = _1555;
        _1558 = _1555;
        _1559 = _1555;
        _1560 = _1555;
        _1561 = _1555;
        _1562 = _1555;
        _1563 = _1555;
        _1564 = _1555;
        _1565 = _1555;
        _1566 = _1555;
    }
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1589 = fma(_1391, cbModelParam._m0[30u].z, fma(_1387, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1383));
        float _1593 = fma(_1391, cbModelParam._m0[31u].z, fma(_1387, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1383));
        float _1597 = fma(_1391, cbModelParam._m0[32u].z, fma(_1387, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1383));
        float _1620 = _1383 + _1177;
        float _1621 = _1387 + _1178;
        float _1622 = _1391 + _1179;
        float _1632 = fma(_1622, cbModelParam._m0[30u].z, fma(_1621, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1620)) - _1589;
        float _1633 = fma(_1622, cbModelParam._m0[31u].z, fma(_1621, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1620)) - _1593;
        float _1634 = fma(_1622, cbModelParam._m0[32u].z, fma(_1621, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1620)) - _1597;
        float _1638 = inversesqrt(dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634)));
        float _1650 = ((_1638 * _1632) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1589 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1651 = ((_1638 * _1633) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1593 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1652 = ((_1638 * _1634) / cbModelParam._m0[35u].z) + ((((((_1597 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1654 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1650, _1651, _1652), 0.0);
        vec4 _1661 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1650, _1651, _1652), 0.0);
        vec4 _1668 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1650, _1651, _1652), 0.0);
        vec4 _1675 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1650, _1651, _1652), 0.0);
        float _1687 = exp2((_1654.w + (-0.5)) * 20.0) * 2.0;
        float _1697 = exp2((_1661.w + (-0.5)) * 20.0) * 2.0;
        float _1707 = exp2((_1668.w + (-0.5)) * 20.0) * 2.0;
        float _1717 = exp2((_1675.w + (-0.5)) * 20.0) * 2.0;
        float _1718 = _1717 * (_1675.x + (-0.5));
        float _1719 = _1717 * (_1675.y + (-0.5));
        float _1720 = _1717 * (_1675.z + (-0.5));
        _1724 = _1687 * (_1654.z + (-0.5));
        _1725 = _1687 * (_1654.y + (-0.5));
        _1726 = _1687 * (_1654.x + (-0.5));
        _1727 = _1697 * (_1661.z + (-0.5));
        _1728 = _1697 * (_1661.y + (-0.5));
        _1729 = _1697 * (_1661.x + (-0.5));
        _1730 = _1707 * (_1668.z + (-0.5));
        _1731 = _1707 * (_1668.y + (-0.5));
        _1732 = _1707 * (_1668.x + (-0.5));
        _1733 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        _1734 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        _1735 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    }
    else
    {
        _1724 = _1555;
        _1725 = _1555;
        _1726 = _1555;
        _1727 = _1555;
        _1728 = _1555;
        _1729 = _1555;
        _1730 = _1555;
        _1731 = _1555;
        _1732 = _1555;
        _1733 = _1555;
        _1734 = _1555;
        _1735 = _1555;
    }
    float _1749 = _1332 * 0.5;
    float _1750 = _1333 * 0.5;
    float _1751 = _1334 * 0.5;
    float _1752 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1726, _1729, _1732, _1735));
    float _1755 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1725, _1728, _1731, _1734));
    float _1758 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1724, _1727, _1730, _1733));
    float _1793;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1765 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1554, _1558, _1561, _1564));
        float _1769 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1556, _1559, _1562, _1565));
        float _1773 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1557, _1560, _1563, _1566));
        float _1780 = dot(vec4(cbModelParam._m0[39u]), vec4(_1749, _1750, _1751, 1.0));
        _1793 = dot(vec3(isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1780) ? 0.0 : (isnan(0.0) ? _1780 : max(0.0, _1780))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1793 = 1.0;
    }
    float _1804;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1795 = dot(vec4(cbModelParam._m0[40u]), vec4(_1749, _1750, _1751, 1.0));
        _1804 = dot(vec3(isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1795) ? 0.0 : (isnan(0.0) ? _1795 : max(0.0, _1795))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1804 = 1.0;
    }
    float _1808 = (_1804 * cbModelParam._m0[1u].x) + (_1793 * (1.0 - cbModelParam._m0[1u].x));
    float _1815 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1181);
    float _1816 = isnan(_1815) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1815 : min(cbModelParam._m0[25u].z, _1815));
    float _1896;
    float _1898;
    float _1900;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1863 = fma(_1391, cbModelParam._m0[13u].z, fma(_1387, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1383)) + cbModelParam._m0[13u].w;
        float _1867 = fma(_1391, cbModelParam._m0[14u].z, fma(_1387, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1383)) + cbModelParam._m0[14u].w;
        float _1871 = fma(_1391, cbModelParam._m0[15u].z, fma(_1387, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1383)) + cbModelParam._m0[15u].w;
        float _1874 = fma(_1334, cbModelParam._m0[13u].z, fma(_1333, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1332));
        float _1877 = fma(_1334, cbModelParam._m0[14u].z, fma(_1333, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1332));
        float _1880 = fma(_1334, cbModelParam._m0[15u].z, fma(_1333, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1332));
        float _1908;
        if (_1874 > 0.0)
        {
            _1908 = abs((1.0 - _1863) / _1874);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1863 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1908 = frontier_phi_14_12_ladder;
        }
        float _2259;
        if (_1877 > 0.0)
        {
            _2259 = abs((1.0 - _1867) / _1877);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1867 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2259 = frontier_phi_23_19_ladder;
        }
        float _2722;
        if (_1880 > 0.0)
        {
            _2722 = abs((1.0 - _1871) / _1880);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1871 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _2722 = frontier_phi_37_30_ladder;
        }
        float _2724 = isnan(_2259) ? _1908 : (isnan(_1908) ? _2259 : min(_1908, _2259));
        float _2725 = isnan(_2722) ? _2724 : (isnan(_2724) ? _2722 : min(_2724, _2722));
        float _2729 = (_2725 * _1874) + _1863;
        float _2730 = (_2725 * _1877) + _1867;
        float _2731 = (_2725 * _1880) + _1871;
        float _2732 = _2725 * 9.9999997473787516355514526367188e-05;
        float _2733 = (-1.0) - _2732;
        float _2735 = _2732 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_2731 > _2735) || ((_2731 < _2733) || ((_2730 > _2735) || ((_2730 < _2733) || ((_2729 < _2733) || (_2729 > _2735))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2845 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2731, cbModelParam._m0[9u].z, fma(_2730, cbModelParam._m0[9u].y, _2729 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2731, cbModelParam._m0[10u].z, fma(_2730, cbModelParam._m0[10u].y, _2729 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2731, cbModelParam._m0[11u].z, fma(_2730, cbModelParam._m0[11u].y, _2729 * cbModelParam._m0[11u].x))), _1816);
            frontier_phi_13_37_ladder = _2845.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2845.x * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2845.z * cbModelParam._m0[1u].y;
        }
        _1896 = frontier_phi_13_37_ladder_1;
        _1898 = frontier_phi_13_37_ladder;
        _1900 = frontier_phi_13_37_ladder_2;
    }
    else
    {
        vec4 _1884 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1332, _1333, _1334), _1816);
        _1896 = _1884.x * cbModelParam._m0[1u].y;
        _1898 = _1884.y * cbModelParam._m0[1u].y;
        _1900 = _1884.z * cbModelParam._m0[1u].y;
    }
    float _1904 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1181);
    float _1905 = isnan(_1904) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1904 : min(cbModelParam._m0[25u].w, _1904));
    float _1994;
    float _1996;
    float _1998;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1958 = fma(_1391, cbModelParam._m0[21u].z, fma(_1387, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1383)) + cbModelParam._m0[21u].w;
        float _1962 = fma(_1391, cbModelParam._m0[22u].z, fma(_1387, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1383)) + cbModelParam._m0[22u].w;
        float _1966 = fma(_1391, cbModelParam._m0[23u].z, fma(_1387, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1383)) + cbModelParam._m0[23u].w;
        float _1969 = fma(_1334, cbModelParam._m0[21u].z, fma(_1333, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1332));
        float _1972 = fma(_1334, cbModelParam._m0[22u].z, fma(_1333, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1332));
        float _1975 = fma(_1334, cbModelParam._m0[23u].z, fma(_1333, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1332));
        float _2264;
        if (_1969 > 0.0)
        {
            _2264 = abs((1.0 - _1958) / _1969);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1958 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2264 = frontier_phi_25_21_ladder;
        }
        float _2748;
        if (_1972 > 0.0)
        {
            _2748 = abs((1.0 - _1962) / _1972);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1962 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2748 = frontier_phi_39_32_ladder;
        }
        float _2902;
        if (_1975 > 0.0)
        {
            _2902 = abs((1.0 - _1966) / _1975);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1966 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2902 = frontier_phi_53_48_ladder;
        }
        float _2904 = isnan(_2748) ? _2264 : (isnan(_2264) ? _2748 : min(_2264, _2748));
        float _2905 = isnan(_2902) ? _2904 : (isnan(_2904) ? _2902 : min(_2904, _2902));
        float _2909 = (_2905 * _1969) + _1958;
        float _2910 = (_2905 * _1972) + _1962;
        float _2911 = (_2905 * _1975) + _1966;
        float _2912 = _2905 * 9.9999997473787516355514526367188e-05;
        float _2913 = (-1.0) - _2912;
        float _2915 = _2912 + 1.0;
        float frontier_phi_22_53_ladder;
        float frontier_phi_22_53_ladder_1;
        float frontier_phi_22_53_ladder_2;
        if ((_2911 > _2915) || ((_2911 < _2913) || ((_2910 > _2915) || ((_2910 < _2913) || ((_2909 < _2913) || (_2909 > _2915))))))
        {
            frontier_phi_22_53_ladder = 0.0;
            frontier_phi_22_53_ladder_1 = 0.0;
            frontier_phi_22_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3117 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2911, cbModelParam._m0[17u].z, fma(_2910, cbModelParam._m0[17u].y, _2909 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2911, cbModelParam._m0[18u].z, fma(_2910, cbModelParam._m0[18u].y, _2909 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2911, cbModelParam._m0[19u].z, fma(_2910, cbModelParam._m0[19u].y, _2909 * cbModelParam._m0[19u].x))), _1905);
            frontier_phi_22_53_ladder = _3117.z * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_1 = _3117.y * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_2 = _3117.x * cbModelParam._m0[1u].z;
        }
        _1994 = frontier_phi_22_53_ladder_2;
        _1996 = frontier_phi_22_53_ladder_1;
        _1998 = frontier_phi_22_53_ladder;
    }
    else
    {
        vec4 _1978 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1332, _1333, _1334), _1905);
        _1994 = _1978.x * cbModelParam._m0[1u].z;
        _1996 = _1978.y * cbModelParam._m0[1u].z;
        _1998 = _1978.z * cbModelParam._m0[1u].z;
    }
    float _2010 = ((((1.0 - _1352) * ((_1340 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1352 * _1340)) * _1312;
    float _2011 = _2010 * ((cbModelParam._m0[1u].w * (_1994 - _1896)) + _1896);
    float _2012 = _2010 * ((cbModelParam._m0[1u].w * (_1996 - _1898)) + _1898);
    float _2013 = _2010 * ((cbModelParam._m0[1u].w * (_1998 - _1900)) + _1900);
    float _2034 = fma(_2013, cbSceneParam._m0[89u].z, fma(_2012, cbSceneParam._m0[89u].y, _2011 * cbSceneParam._m0[89u].x));
    float _2037 = fma(_2013, cbSceneParam._m0[90u].z, fma(_2012, cbSceneParam._m0[90u].y, _2011 * cbSceneParam._m0[90u].x));
    float _2040 = fma(_2013, cbSceneParam._m0[91u].z, fma(_2012, cbSceneParam._m0[91u].y, _2011 * cbSceneParam._m0[91u].x));
    vec4 _2048 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1238, _1239));
    float _2050 = _2048.w;
    uint _2065 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _2069 = floatBitsToUint(cbInstanceData._m0[_2065 + 5u]);
    uint _2071 = _2069.x * 14u;
    uint _2072 = _2071 + 13u;
    float _2077 = _1312 + (-1.0);
    float _2080 = (cbLight._m0[_2072].x * _2077) + 1.0;
    float _2081 = (cbLight._m0[_2072].y * _2077) + 1.0;
    uint _2085 = _2071 + 8u;
    float _2101 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2071].w)) * _1181) * 0.949999988079071044921875);
    float _2102 = _2101 * _2101;
    float _2103 = cbLight._m0[_2071].x + _1231;
    float _2104 = cbLight._m0[_2071].y + _1232;
    float _2105 = cbLight._m0[_2071].z + _1233;
    float _2109 = inversesqrt(dot(vec3(_2103, _2104, _2105), vec3(_2103, _2104, _2105)));
    float _2110 = _2109 * _2103;
    float _2111 = _2109 * _2104;
    float _2112 = _2109 * _2105;
    float _2113 = dot(vec3(_1274, _1275, _1276), vec3(cbLight._m0[_2071].xyz));
    float _3846 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _2117 = dot(vec3(_1274, _1275, _1276), vec3(_1231, _1232, _1233));
    float _3857 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _2121 = dot(vec3(_1274, _1275, _1276), vec3(_2110, _2111, _2112));
    float _3868 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2124 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _2125 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_2110, _2111, _2112));
    float _3879 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2129 = _2102 * _2102;
    float _2133 = ((_2124 * _2124) * (_2129 + (-1.0))) + 1.0;
    float _2144 = (exp2(log2(1.0 - (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2145 = 1.0 - _2102;
    float _2156 = (0.5 / (((_2120 * ((_2116 * _2145) + _2102)) + 9.9999999392252902907785028219223e-09) + (((_2120 * _2145) + _2102) * _2116))) * _2116;
    float _3890 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2158 = (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_2129 / ((_2133 * _2133) * 3.141590118408203125));
    float _2159 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
    uint _2172 = _2071 | 1u;
    uint _2176 = _2071 + 9u;
    float _2190 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2172].w)) * _1181) * 0.949999988079071044921875);
    float _2191 = _2190 * _2190;
    float _2192 = cbLight._m0[_2172].x + _1231;
    float _2193 = cbLight._m0[_2172].y + _1232;
    float _2194 = cbLight._m0[_2172].z + _1233;
    float _2198 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
    float _2199 = _2198 * _2192;
    float _2200 = _2198 * _2193;
    float _2201 = _2198 * _2194;
    float _2202 = dot(vec3(_1274, _1275, _1276), vec3(cbLight._m0[_2172].xyz));
    float _3906 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2205 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _2206 = dot(vec3(_1274, _1275, _1276), vec3(_2199, _2200, _2201));
    float _3917 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _2210 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_2199, _2200, _2201));
    float _3928 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2214 = _2191 * _2191;
    float _2218 = ((_2209 * _2209) * (_2214 + (-1.0))) + 1.0;
    float _2227 = (exp2(log2(1.0 - (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2228 = 1.0 - _2191;
    float _2238 = (0.5 / (((_2120 * ((_2205 * _2228) + _2191)) + 9.9999999392252902907785028219223e-09) + (((_2120 * _2228) + _2191) * _2205))) * _2205;
    float _3939 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2240 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_2214 / ((_2218 * _2218) * 3.141590118408203125));
    float _2241 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
    float _2251 = (((_2227 * cbLight._m0[_2176].x) * _2240) * _2241) + ((((cbLight._m0[_2085].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2050))) * _2144) * _2158) * _2159);
    float _2252 = (((_2227 * cbLight._m0[_2176].y) * _2240) * _2241) + ((((cbLight._m0[_2085].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2050))) * _2144) * _2158) * _2159);
    float _2253 = (((_2227 * cbLight._m0[_2176].z) * _2240) * _2241) + ((((cbLight._m0[_2085].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2050))) * _2144) * _2158) * _2159);
    float _2368;
    float _2370;
    float _2372;
    if (_2069.y == 0u)
    {
        float _2308 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2309 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2308;
        float _2310 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2308;
        float _2311 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2308;
        uvec4 _2323 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2324 = _2323.x;
        uint _2335 = uint((float(_2323.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1239) / _2324))) + floor(float(uint(cbSceneParam._m0[85u].x * _1238) / _2324)));
        float _2345 = (log2(_2311 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2346 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        uint _2349 = uint(isnan(14.0) ? _2346 : (isnan(_2346) ? 14.0 : min(_2346, 14.0)));
        uvec4 _2354 = texelFetch(g_lightClusterGridBuffer, int(((_2349 << 2u) + (_2335 << 6u)) >> 2u));
        uint _2355 = _2354.x;
        uint _2356 = _2323.z;
        float _2572;
        float _2574;
        float _2576;
        if (((((1u << ((_2356 >> 4u) & 15u)) + 4294967295u) & _2355) == 0u) || ((_2356 & 240u) == 0u))
        {
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
        }
        else
        {
            float _2573;
            float _2575;
            float _2577;
            float _2776 = 0.0;
            float _2777 = 0.0;
            float _2778 = 0.0;
            uint _2779 = 0u;
            uint _2788;
            bool _2789;
            for (;;)
            {
                _2788 = texelFetch(g_lightClassification, int((((_2349 << 5u) + (_2335 << 9u)) + (_2779 << 2u)) >> 2u)).x;
                _2789 = _2788 == 0u;
                float frontier_phi_50_pred;
                float frontier_phi_50_pred_1;
                float frontier_phi_50_pred_2;
                if (_2789)
                {
                    frontier_phi_50_pred = _2778;
                    frontier_phi_50_pred_1 = _2776;
                    frontier_phi_50_pred_2 = _2777;
                }
                else
                {
                    float _2942;
                    float _2943;
                    float _2944;
                    uint _2945;
                    _2942 = _2776;
                    _2943 = _2777;
                    _2944 = _2778;
                    _2945 = _2788;
                    float _2854;
                    float _2855;
                    float _2856;
                    for (;;)
                    {
                        uint _2949 = uint(findLSB(_2945)) + (_2779 << 5u);
                        uint _2946 = (_2945 + 4294967295u) & _2945;
                        uint _2951 = _2949 * 48u;
                        vec4 _2965 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2951)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 3u)).x));
                        uint _2982 = (_2949 * 48u) + 8u;
                        vec3 _2993 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2982)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2982 + 2u)).x));
                        float _2997 = _2965.x - _2309;
                        float _2998 = _2965.y - _2310;
                        float _2999 = _2965.z - _2311;
                        float _3000 = dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999));
                        float _3003 = inversesqrt(_3000);
                        float _3004 = _3003 * _2997;
                        float _3005 = _3003 * _2998;
                        float _3006 = _3003 * _2999;
                        float _3012 = 1.0 - (_3000 * _2965.w);
                        float _3965 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3014 = sqrt(_3000) * uintBitsToFloat(uvec4(_2972, _2973, _2974, texelFetch(g_PointLightRenderingBuffer, int(((_2949 * 48u) + 4u) + 3u)).x)).w;
                        float _3018 = _3014 * _3014;
                        float _3019 = (-0.0) - _2309;
                        float _3020 = (-0.0) - _2310;
                        float _3021 = (-0.0) - _2311;
                        float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
                        float _3026 = _3025 * _3019;
                        float _3027 = _3025 * _3020;
                        float _3028 = _3025 * _3021;
                        float _3036 = exp2(log2(1.0 / ((_3018 * 3.5) + 5.0)) * 0.25);
                        float _3037 = 1.0 - _1340;
                        float _3044 = sqrt(1.0 - ((1.0 - (_3037 * _3037)) * (1.0 - (_3036 * _3036))));
                        float _3045 = _3044 * _3044;
                        float _3046 = _3045 * _3045;
                        float _3047 = _3026 + _3004;
                        float _3048 = _3027 + _3005;
                        float _3049 = _3028 + _3006;
                        float _3053 = inversesqrt(dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049)));
                        float _3057 = dot(vec3(_1294, _1297, _1300), vec3(_3026, _3027, _3028));
                        float _3976 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3060 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
                        float _3061 = dot(vec3(_1294, _1297, _1300), vec3(_3053 * _3047, _3053 * _3048, _3053 * _3049));
                        float _3987 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                        float _3064 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
                        float _3068 = ((_3064 * _3064) * (_3046 + (-1.0))) + 1.0;
                        float _3069 = (1.39999997615814208984375 / (_3014 + 1.39999997615814208984375)) * _3045;
                        float _3070 = _3069 * _3069;
                        float _3073 = ((1.0 - _3070) * dot(vec3(_1294, _1297, _1300), vec3(_3004, _3005, _3006))) + _3070;
                        float _3998 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3074 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                        float _3075 = 1.0 - _3045;
                        float _3085 = (0.5 / (((_3074 * ((_3060 * _3075) + _3045)) + 9.9999999392252902907785028219223e-09) + (((_3074 * _3075) + _3045) * _3060))) * _3074;
                        float _4009 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3096 = (((_3046 * 3.1415927410125732421875) * (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) / ((_3068 * _3068) * ((_3018 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)));
                        _2854 = (_3096 * _2993.x) + _2942;
                        _2855 = (_3096 * _2993.y) + _2943;
                        _2856 = (_3096 * _2993.z) + _2944;
                        if (_2946 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2942 = _2854;
                            _2943 = _2855;
                            _2944 = _2856;
                            _2945 = _2946;
                        }
                    }
                    frontier_phi_50_pred = _2856;
                    frontier_phi_50_pred_1 = _2854;
                    frontier_phi_50_pred_2 = _2855;
                }
                _2577 = frontier_phi_50_pred;
                _2573 = frontier_phi_50_pred_1;
                _2575 = frontier_phi_50_pred_2;
                uint _2780 = _2779 + 1u;
                if (_2780 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2776 = _2573;
                    _2777 = _2575;
                    _2778 = _2577;
                    _2779 = _2780;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
        }
        uvec4 _2580 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2581 = _2580.z;
        uint _2583 = (_2581 >> 8u) & 15u;
        float _2753;
        float _2755;
        float _2757;
        if (((4294967295u << _2583) & _2355) == 0u)
        {
            _2753 = _2572;
            _2755 = _2574;
            _2757 = _2576;
        }
        else
        {
            float _2769 = inversesqrt(dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311)));
            float _2770 = _2769 * _2309;
            float _2771 = _2769 * _2310;
            float _2772 = _2769 * _2311;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            if (_2583 < ((_2581 >> 12u) & 15u))
            {
                float _2754;
                float _2756;
                float _2758;
                float _2928 = _2572;
                float _2929 = _2574;
                float _2930 = _2576;
                uint _2931 = _2583;
                uint _2940;
                bool _2941;
                for (;;)
                {
                    _2940 = texelFetch(g_lightClassification, int((((_2349 << 5u) + (_2335 << 9u)) + (_2931 << 2u)) >> 2u)).x;
                    _2941 = _2940 == 0u;
                    float frontier_phi_59_pred;
                    float frontier_phi_59_pred_1;
                    float frontier_phi_59_pred_2;
                    if (_2941)
                    {
                        frontier_phi_59_pred = _2928;
                        frontier_phi_59_pred_1 = _2930;
                        frontier_phi_59_pred_2 = _2929;
                    }
                    else
                    {
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3132 = _2928;
                        float _3133 = _2929;
                        float _3134 = _2930;
                        uint _3135 = _2940;
                        uint _3136;
                        uint _3146;
                        vec4 _3161;
                        float _3162;
                        vec3 _3174;
                        vec4 _3189;
                        vec4 _3204;
                        float _3250;
                        bool _3251;
                        for (;;)
                        {
                            _3146 = ((_2931 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3135));
                            _3136 = (_3135 + 4294967295u) & _3135;
                            uint _3148 = _3146 * 40u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            _3162 = _3161.w;
                            uint _3164 = (_3146 * 40u) + 8u;
                            _3174 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x));
                            uint _3176 = (_3146 * 40u) + 16u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3191 = (_3146 * 40u) + 20u;
                            _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            uint _3206 = (_3146 * 40u) + 24u;
                            vec4 _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3225 = (_3146 * 40u) + 28u;
                            vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            _3250 = fma(_2311, _3238.z, fma(_2310, _3238.y, _3238.x * _2309)) + _3238.w;
                            _3251 = !((fma(_2311, _3219.z, fma(_2310, _3219.y, _3219.x * _2309)) + _3219.w) <= 0.0);
                            float frontier_phi_65_pred;
                            float frontier_phi_65_pred_1;
                            float frontier_phi_65_pred_2;
                            if (_3251)
                            {
                                float _3285 = _3161.x - _2309;
                                float _3286 = _3161.y - _2310;
                                float _3287 = _3161.z - _2311;
                                float _3288 = dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287));
                                float _3291 = inversesqrt(_3288);
                                float _3292 = _3291 * _3285;
                                float _3293 = _3291 * _3286;
                                float _3294 = _3291 * _3287;
                                float _3298 = 1.0 - (_3288 / (_3162 * _3162));
                                float _4020 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3300 = sqrt(_3288) * uintBitsToFloat(uvec4(_3254, _3255, _3256, texelFetch(g_SpotLightRenderingBuffer, int(((_3146 * 40u) + 4u) + 3u)).x)).w;
                                float _3303 = _3300 * _3300;
                                float _3304 = (fma(_2311, _3189.z, fma(_2310, _3189.y, _3189.x * _2309)) + _3189.w) / _3250;
                                float _3305 = (fma(_2311, _3204.z, fma(_2310, _3204.y, _3204.x * _2309)) + _3204.w) / _3250;
                                float _3309 = 1.0 - dot(vec2(_3304, _3305), vec2(_3304, _3305));
                                float _4031 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3319 = exp2(log2(1.0 / ((_3303 * 3.5) + 5.0)) * 0.25);
                                float _3320 = 1.0 - _1340;
                                float _3327 = sqrt(1.0 - ((1.0 - (_3320 * _3320)) * (1.0 - (_3319 * _3319))));
                                float _3328 = _3327 * _3327;
                                float _3329 = _3328 * _3328;
                                float _3330 = _3292 - _2770;
                                float _3331 = _3293 - _2771;
                                float _3332 = _3294 - _2772;
                                float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                                float _3340 = dot(vec3(_1294, _1297, _1300), vec3((-0.0) - _2770, (-0.0) - _2771, (-0.0) - _2772));
                                float _4042 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3343 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                                float _3344 = dot(vec3(_1294, _1297, _1300), vec3(_3336 * _3330, _3336 * _3331, _3336 * _3332));
                                float _4053 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3347 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
                                float _3351 = ((_3347 * _3347) * (_3329 + (-1.0))) + 1.0;
                                float _3352 = (1.39999997615814208984375 / (_3300 + 1.39999997615814208984375)) * _3328;
                                float _3353 = _3352 * _3352;
                                float _3359 = ((1.0 - _3353) * dot(vec3(_1294, _1297, _1300), vec3(_3292, _3293, _3294))) + _3353;
                                float _4064 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3360 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
                                float _3361 = 1.0 - _3328;
                                float _3371 = (0.5 / (((_3360 * ((_3343 * _3361) + _3328)) + 9.9999999392252902907785028219223e-09) + (((_3360 * _3361) + _3328) * _3343))) * _3360;
                                float _4075 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3381 = ((isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * (((_3329 * 3.1415927410125732421875) * (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) / ((_3351 * _3351) * ((_3303 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_65_pred = _3381 * _3174.z;
                                frontier_phi_65_pred_1 = _3381 * _3174.y;
                                frontier_phi_65_pred_2 = _3381 * _3174.x;
                            }
                            else
                            {
                                frontier_phi_65_pred = 0.0;
                                frontier_phi_65_pred_1 = 0.0;
                                frontier_phi_65_pred_2 = 0.0;
                            }
                            _3387 = frontier_phi_65_pred;
                            _3386 = frontier_phi_65_pred_1;
                            _3385 = frontier_phi_65_pred_2;
                            _3122 = _3385 + _3132;
                            _3123 = _3386 + _3133;
                            _3124 = _3387 + _3134;
                            if (_3136 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3132 = _3122;
                                _3133 = _3123;
                                _3134 = _3124;
                                _3135 = _3136;
                                continue;
                            }
                        }
                        frontier_phi_59_pred = _3122;
                        frontier_phi_59_pred_1 = _3124;
                        frontier_phi_59_pred_2 = _3123;
                    }
                    _2754 = frontier_phi_59_pred;
                    _2758 = frontier_phi_59_pred_1;
                    _2756 = frontier_phi_59_pred_2;
                    uint _2932 = _2931 + 1u;
                    if (_2932 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2928 = _2754;
                        _2929 = _2756;
                        _2930 = _2758;
                        _2931 = _2932;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2758;
                frontier_phi_41_42_ladder_1 = _2754;
                frontier_phi_41_42_ladder_2 = _2756;
            }
            else
            {
                frontier_phi_41_42_ladder = _2576;
                frontier_phi_41_42_ladder_1 = _2572;
                frontier_phi_41_42_ladder_2 = _2574;
            }
            _2753 = frontier_phi_41_42_ladder_1;
            _2755 = frontier_phi_41_42_ladder_2;
            _2757 = frontier_phi_41_42_ladder;
        }
        float _2762 = isnan(1.0) ? _1312 : (isnan(_1312) ? 1.0 : min(_1312, 1.0));
        _2368 = ((_2753 * 0.039999999105930328369140625) * _2762) + _2251;
        _2370 = ((_2755 * 0.039999999105930328369140625) * _2762) + _2252;
        _2372 = ((_2757 * 0.039999999105930328369140625) * _2762) + _2253;
    }
    else
    {
        _2368 = _2251;
        _2370 = _2252;
        _2372 = _2253;
    }
    uint _2379 = (_2065 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _2385 = cbInstanceData._m0[_2379].x * (_953 - (_953 * TEXCOORD_7.x));
    float _2386 = cbInstanceData._m0[_2379].y * (_955 - (_955 * TEXCOORD_7.y));
    float _2387 = cbInstanceData._m0[_2379].z * (_957 - (_957 * TEXCOORD_7.z));
    float _2407 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2408 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2409 = cbSceneParam._m0[86u].x * ((_1238 / cbSceneParam._m0[86u].x) + ((0.0999999940395355224609375 / (_1195 + 10.0)) * dot(vec3(_1274, _1275, _1276), vec3(_227, _228, _229))));
    float _2410 = isnan(_2407) ? _2409 : (isnan(_2409) ? _2407 : min(_2409, _2407));
    float _2411 = isnan(_2408) ? _1239 : (isnan(_1239) ? _2408 : min(_1239, _2408));
    vec4 _2413 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2410, _2411), 0.0);
    float _2415 = _2413.x;
    bool _2435 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2415)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2415))) > _1195;
    float _2436 = _2435 ? _2410 : _1238;
    float _2437 = _2435 ? _2411 : _1239;
    vec4 _2439 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2436, _2437));
    vec4 _2444 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2436, _2437));
    float _2446 = _2444.x;
    float _2466 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2446)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2446))) - _1195;
    bool _2473 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2477 = (isnan(_2466) ? 0.0 : (isnan(0.0) ? _2466 : max(0.0, _2466))) * (-1.44269502162933349609375);
    float _2497 = 0.4799999892711639404296875 - (exp2(log2(1.0 - (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * 5.0) * 0.4799999892711639404296875);
    float _2508 = (_2385 + ((_2368 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1808)) * cbPerFrame._m0[3u].x)) + (((_2497 * _2439.x) * exp2(_2477 * (_2473 ? 0.0 : cbMtdParam._m0[35u].y))) * cbSceneParam._m0[72u].w);
    float _2510 = (_2386 + ((_2370 + ((isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))) * _1808)) * cbPerFrame._m0[3u].x)) + (((_2497 * _2439.y) * exp2(_2477 * (_2473 ? 0.0 : cbMtdParam._m0[35u].z))) * cbSceneParam._m0[72u].w);
    float _2512 = (_2387 + ((_2372 + ((isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0))) * _1808)) * cbPerFrame._m0[3u].x)) + (((_2497 * _2439.z) * exp2(_2477 * (_2473 ? 0.0 : cbMtdParam._m0[35u].w))) * cbSceneParam._m0[72u].w);
    float _4121 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2525 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _2535 = _1238 / cbSceneParam._m0[86u].x;
    float _2536 = _1239 / cbSceneParam._m0[86u].y;
    vec4 _2550 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, (log2((isnan(cbSceneParam._m0[77u].w) ? _1195 : (isnan(_1195) ? cbSceneParam._m0[77u].w : min(_1195, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2552 = _2550.x;
    float _2553 = _2550.y;
    float _2554 = _2550.z;
    float _2555 = _2550.w;
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    if (_1195 > cbSceneParam._m0[78u].w)
    {
        float _2591 = isnan(_1195) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1195 : min(cbSceneParam._m0[80u].w, _1195));
        float _2592 = _2591 / _1195;
        float _2603 = _2592 * _1224;
        float _2604 = _1225 * _2592;
        float _2605 = (-0.0) - _2604;
        float _2606 = _2592 * _1226;
        float _2608 = (cbSceneParam._m0[77u].w * _2605) / _2591;
        float _2609 = _2608 + cbSceneParam._m0[79u].w;
        float _2610 = cbSceneParam._m0[79u].w - _2604;
        float _2616 = sqrt(((_2603 * _2603) + (_2604 * _2604)) + (_2606 * _2606));
        float _2619 = (1.0 - (cbSceneParam._m0[77u].w / _2591)) * _2616;
        float _2625 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2626 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2864;
        if (abs((_2605 - _2608) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2864 = ((((_2609 > 0.0) ? exp2(_2625 * _2609) : (2.0 - exp2(_2626 * _2609))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2619;
        }
        else
        {
            float _2802 = 1.0 / cbSceneParam._m0[80u].x;
            float _2803 = isnan(_2610) ? _2609 : (isnan(_2609) ? _2610 : max(_2609, _2610));
            float _2804 = isnan(_2610) ? _2609 : (isnan(_2609) ? _2610 : min(_2609, _2610));
            float _2813 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : min(_2803, 0.0));
            float _2814 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : min(_2804, 0.0));
            _2864 = ((abs(_2616 / _2605) * cbSceneParam._m0[80u].y) * ((((_2813 - _2814) * 2.0) - ((exp2(_2625 * (isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0)))) - exp2(_2625 * (isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0))))) * _2802)) - ((exp2(_2626 * _2813) - exp2(_2626 * _2814)) * _2802))) + (_2619 * cbSceneParam._m0[80u].z);
        }
        vec4 _2866 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, 1.0), 0.0);
        float _2875 = exp2((_2864 * (-1.44269502162933349609375)) * (1.0 - _2866.w));
        float _2876 = log2(_2875);
        float _2892 = log2(_2555);
        _2628 = (exp2(_2892 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2876 * cbSceneParam._m0[78u].x)) * _2866.x) / cbSceneParam._m0[78u].x)) + _2552;
        _2630 = (exp2(_2892 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2876 * cbSceneParam._m0[78u].y)) * _2866.y) / cbSceneParam._m0[78u].y)) + _2553;
        _2632 = (exp2(_2892 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2876 * cbSceneParam._m0[78u].z)) * _2866.z) / cbSceneParam._m0[78u].z)) + _2554;
        _2634 = _2875 * _2555;
    }
    else
    {
        _2628 = _2552;
        _2630 = _2553;
        _2632 = _2554;
        _2634 = _2555;
    }
    bool _2646 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2647 = log2(_2634);
    float _2651 = exp2(_2647 * cbSceneParam._m0[78u].x);
    float _2652 = exp2(_2647 * cbSceneParam._m0[78u].y);
    float _2653 = exp2(_2647 * cbSceneParam._m0[78u].z);
    float _2654 = _2651 * (isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0)));
    float _2655 = _2652 * (isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0)));
    float _2656 = _2653 * (isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0)));
    vec4 _2664 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1238, _1239));
    float _2666 = _2664.x;
    float _2687 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2666)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2666))) - _1195) * cbMtdParam._m0[20u].z;
    float _4172 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
    float _2688 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _2689 = (cbInstanceData._m0[_2065 + 6u].w * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) * _2688;
    float _2698 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2698 * (_2646 ? _2654 : (_2654 + (cbSceneParam._m0[72u].w * _2628)));
    SV_Target.y = _2698 * (_2646 ? _2655 : (_2655 + (cbSceneParam._m0[72u].w * _2630)));
    SV_Target.z = _2698 * (_2646 ? _2656 : (_2656 + (cbSceneParam._m0[72u].w * _2632)));
    SV_Target.w = _2689;
    SV_Target_1.x = ((((cbMtdParam._m0[2u].x * _2385) * _2525) * _2651) * _2688) * _2698;
    SV_Target_1.y = ((((cbMtdParam._m0[2u].y * _2386) * _2525) * _2652) * _2688) * _2698;
    SV_Target_1.z = ((((cbMtdParam._m0[2u].z * _2387) * _2525) * _2653) * _2688) * _2698;
    SV_Target_1.w = _2689;
}


