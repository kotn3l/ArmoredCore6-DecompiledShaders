#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[39];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_8;
layout(set = 0, binding = 7) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1601;
uint _3321;
uint _3322;
uint _3323;
uint _3590;
uint _3591;
uint _3592;
float _3854;
float _3855;
float _3856;
float _3857;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _233 = _232 * _224;
    float _234 = _232 * _225;
    float _235 = _232 * _226;
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = _246 * TANGENT.x;
    float _248 = _246 * TANGENT.y;
    float _249 = _246 * TANGENT.z;
    float _293 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _303 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _293);
    float _304 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _293);
    float _305 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _293);
    float _321 = cbMtdParam._m0[18u].w - cbMtdParam._m0[18u].z;
    float _323 = (sqrt(((_303 * _303) + (_304 * _304)) + (_305 * _305)) - cbMtdParam._m0[18u].z) / (isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0)));
    float _328 = cbMtdParam._m0[19u].x + _323;
    float _330 = _328 * cbMtdParam._m0[19u].z;
    float _3871 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _333 = (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * cbMtdParam._m0[23u].z;
    float _3882 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _334 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _3893 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _339 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _342 = ((cbMtdParam._m0[18u].x - cbMtdParam._m0[17u].x) * _339) + cbMtdParam._m0[17u].x;
    float _363 = cbMtdParam._m0[20u].w * _328;
    float _3904 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    vec4 _381 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _384 = _381.x;
    float _408 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _384)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _384))) - POSITION_1.w) / cbMtdParam._m0[17u].w;
    float _3915 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _414 = 1.0 - (isnan(cbMtdParam._m0[22u].x) ? _409 : (isnan(_409) ? cbMtdParam._m0[22u].x : max(_409, cbMtdParam._m0[22u].x)));
    float _433 = (cbMtdParam._m0[25u].x + cbPerFrame._m0[22u].x) * cbMtdParam._m0[17u].y;
    float _441 = cbMtdParam._m0[30u].w * TEXCOORD.x;
    float _442 = cbMtdParam._m0[31u].x * TEXCOORD.y;
    vec4 _456 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_2, SS_BumpMap), vec2((((_433 * cbMtdParam._m0[31u].w) + _441) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_442 + (_433 * cbMtdParam._m0[32u].x)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _458 = _456.x;
    float _459 = _456.y;
    float _462 = _456.z - _339;
    float _3931 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _475 = (_463 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _477 = (_463 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _490 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((_475 + (cbMtdParam._m0[27u].y * _433)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_477 + (cbMtdParam._m0[27u].z * _433)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _494 = _490.z;
    vec4 _507 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((_475 + (cbMtdParam._m0[26u].w * _433)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_477 + (cbMtdParam._m0[27u].x * _433)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _511 = _507.z;
    float _514 = (_414 - _456.w) + (isnan(_511) ? _494 : (isnan(_494) ? _511 : max(_494, _511)));
    float _3947 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _516 = (((cbMtdParam._m0[21u].w + TEXCOORD_3.x) - (_414 * cbMtdParam._m0[18u].y)) * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)));
    float _518 = _516 - (_516 * TEXCOORD_7.w);
    float _528 = (POSITION_1.w - cbMtdParam._m0[24u].z) * (1.0 / cbMtdParam._m0[24u].y);
    float _3958 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _529 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _543 = (cbMtdParam._m0[29u].w * _433) + _441;
    float _544 = (cbMtdParam._m0[30u].x * _433) + _442;
    float _551 = cbMtdParam._m0[29u].y * _433;
    float _552 = cbMtdParam._m0[29u].z * _433;
    vec4 _570 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * (_551 + (_441 * cbMtdParam._m0[31u].y))) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (_552 + (_442 * cbMtdParam._m0[31u].z))) + cbTextureTilingScale._m0[3u].w));
    float _577 = (_570.x * 2.0) + (-1.0);
    float _579 = (_570.y * 2.0) + (-1.0);
    float _583 = 1.0 - dot(vec2(_577, _579), vec2(_577, _579));
    float _3969 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _585 = sqrt(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)));
    float _588 = fma(_585, _240, fma(_579, _247, _577 * _233));
    float _591 = fma(_585, _241, fma(_579, _248, _577 * _234));
    float _594 = fma(_585, _242, fma(_579, _249, _577 * _235));
    float _598 = inversesqrt(dot(vec3(_588, _591, _594), vec3(_588, _591, _594)));
    float _599 = cbPerFrame._m0[22u].x * 2.0;
    float _600 = _599 * cbMtdParam._m0[23u].x;
    float _604 = ((_588 * 0.5) * _598) + (-0.25);
    float _608 = ((_591 * 0.5) * _598) + (-0.25);
    float _609 = _608 * cbMtdParam._m0[23u].y;
    float _611 = (-0.0) - (cbMtdParam._m0[23u].y * _604);
    float _612 = fract(_600);
    float _614 = fract(_600 + 0.5);
    float _625 = abs((_612 * 2.0) + (-1.0));
    vec4 _642 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_612 * _611) + _543) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_609 * _612) + _544) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _644 = _642.x;
    float _645 = _642.y;
    float _646 = _642.z;
    vec4 _647 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_614 * _611) + _543) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_609 * _614) + _544) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _658 = ((_647.x - _644) * _625) + _644;
    float _659 = ((_647.y - _645) * _625) + _645;
    float _660 = ((_647.z - _646) * _625) + _646;
    float _676 = (cbMtdParam._m0[28u].w * _433) + _441;
    float _677 = (cbMtdParam._m0[29u].x * _433) + _442;
    float _680 = _599 * cbMtdParam._m0[22u].w;
    float _681 = _608 * cbMtdParam._m0[22u].z;
    float _683 = (-0.0) - (cbMtdParam._m0[22u].z * _604);
    float _684 = fract(_680);
    float _686 = fract(_680 + 0.5);
    float _697 = abs((_684 * 2.0) + (-1.0));
    vec4 _714 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_684 * _683) + _676) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_681 * _684) + _677) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _716 = _714.x;
    float _717 = _714.y;
    float _718 = _714.z;
    vec4 _719 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_686 * _683) + _676) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_681 * _686) + _677) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _751 = (((((cbMtdParam._m0[14u].x - cbMtdParam._m0[16u].x) * _658) * cbMtdParam._m0[25u].y) + cbMtdParam._m0[16u].x) * (((_719.x - _716) * _697) + _716)) + (_658 * cbMtdParam._m0[15u].x);
    float _754 = (((((cbMtdParam._m0[14u].y - cbMtdParam._m0[16u].y) * _659) * cbMtdParam._m0[25u].y) + cbMtdParam._m0[16u].y) * (((_719.y - _717) * _697) + _717)) + (_659 * cbMtdParam._m0[15u].y);
    float _757 = ((((cbMtdParam._m0[25u].y * _660) * (cbMtdParam._m0[14u].z - cbMtdParam._m0[16u].z)) + cbMtdParam._m0[16u].z) * (((_719.z - _718) * _697) + _718)) + (_660 * cbMtdParam._m0[15u].z);
    float _761 = _751 - (_751 * _529);
    float _762 = _754 - (_754 * _529);
    float _763 = _757 - (_757 * _529);
    float _768 = (POSITION_1.w - cbMtdParam._m0[24u].x) * (1.0 / cbMtdParam._m0[23u].w);
    float _3980 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _769 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _779 = (cbMtdParam._m0[30u].y * _433) + _441;
    float _780 = (cbMtdParam._m0[30u].z * _433) + _442;
    vec4 _793 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((_441 * cbMtdParam._m0[32u].y) + _551)) + cbTextureTilingScale._m0[3u].z, (((_442 * cbMtdParam._m0[32u].z) + _552) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _799 = (_793.x * 2.0) + (-1.0);
    float _800 = (_793.y * 2.0) + (-1.0);
    float _804 = 1.0 - dot(vec2(_799, _800), vec2(_799, _800));
    float _3991 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _806 = sqrt(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)));
    float _809 = fma(_806, _240, fma(_800, _247, _799 * _233));
    float _812 = fma(_806, _241, fma(_800, _248, _799 * _234));
    float _815 = fma(_806, _242, fma(_800, _249, _799 * _235));
    float _819 = inversesqrt(dot(vec3(_809, _812, _815), vec3(_809, _812, _815)));
    float _820 = _599 * cbMtdParam._m0[26u].x;
    float _827 = (((_812 * 0.5) * _819) + (-0.25)) * cbMtdParam._m0[25u].w;
    float _829 = (-0.0) - (cbMtdParam._m0[25u].w * (((_809 * 0.5) * _819) + (-0.25)));
    float _830 = fract(_820);
    float _832 = fract(_820 + 0.5);
    float _835 = (_830 * _829) + _779;
    float _836 = (_827 * _830) + _780;
    float _839 = (_832 * _829) + _779;
    float _840 = (_827 * _832) + _780;
    float _843 = abs((_830 * 2.0) + (-1.0));
    vec4 _860 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_835 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_836 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _862 = _860.x;
    float _863 = _860.y;
    float _864 = _860.z;
    vec4 _865 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_839 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_840 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _876 = ((_865.x - _862) * _843) + _862;
    float _877 = ((_865.y - _863) * _843) + _863;
    float _878 = ((_865.z - _864) * _843) + _864;
    vec4 _903 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_9, SS_DiffuseMap), vec2((_835 * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (_836 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _905 = _903.x;
    float _906 = _903.y;
    float _907 = _903.z;
    vec4 _908 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_9, SS_DiffuseMap), vec2((_839 * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (_840 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _959 = (cbMtdParam._m0[24u].w * cbMtdParam._m0[13u].x) * ((_761 + (_518 * cbMtdParam._m0[12u].x)) + ((((_876 * cbMtdParam._m0[9u].x) - _761) + (((((cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x) * _876) * cbMtdParam._m0[25u].z) + cbMtdParam._m0[10u].x) * (((_908.x - _905) * _843) + _905))) * _769));
    float _961 = (cbMtdParam._m0[24u].w * cbMtdParam._m0[13u].y) * ((_762 + (_518 * cbMtdParam._m0[12u].y)) + ((((_877 * cbMtdParam._m0[9u].y) - _762) + (((((cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y) * _877) * cbMtdParam._m0[25u].z) + cbMtdParam._m0[10u].y) * (((_908.y - _906) * _843) + _906))) * _769));
    float _963 = (cbMtdParam._m0[24u].w * cbMtdParam._m0[13u].z) * ((_763 + (_518 * cbMtdParam._m0[12u].z)) + ((((_878 * cbMtdParam._m0[9u].z) - _763) + ((((cbMtdParam._m0[25u].z * _878) * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z) * (((_908.z - _907) * _843) + _907))) * _769));
    float _4002 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _970 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _980 = _323 / cbMtdParam._m0[20u].y;
    float _4013 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _981 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    vec4 _1029 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((_1009 / cbMtdParam._m0[19u].y) + (cbMtdParam._m0[32u].w * _433))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((_1013 / cbMtdParam._m0[19u].y) + (cbMtdParam._m0[33u].x * _433))) + cbTextureTilingScale._m0[1u].w));
    float _1033 = _463 * 0.23999999463558197021484375;
    float _1035 = _463 * (-0.20000000298023223876953125);
    float _1046 = cbMtdParam._m0[33u].w * TEXCOORD.x;
    float _1047 = cbMtdParam._m0[34u].x * TEXCOORD.y;
    vec4 _1062 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[33u].y * _433) + _1033) + _1046) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[33u].z * _433) + _1035) + _1047) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1078 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1046 + _1033) + (cbMtdParam._m0[34u].y * _433)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1047 + _1035) + (cbMtdParam._m0[34u].z * _433)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1098 = (((_507.x + (-0.5)) * 0.5) + _490.x) + (((_1062.x + (-1.0)) + _1078.x) * cbMtdParam._m0[21u].z);
    float _1099 = (((_507.y + (-0.5)) * 0.5) + _490.y) + (((_1062.y + (-1.0)) + _1078.y) * cbMtdParam._m0[21u].z);
    float _1104 = ((_1029.x - _1098) * _981) + _1098;
    float _1105 = ((_1029.y - _1099) * _981) + _1099;
    float _1107 = _323 / cbMtdParam._m0[20u].x;
    float _4024 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1108 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _1124 = ((((_970 * (0.5 - _458)) + _458) + (((_1104 + (-0.5)) + ((0.5 - _1104) * _1108)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1125 = ((((_970 * (0.5 - _459)) + _459) + (((_1105 + (-0.5)) + ((0.5 - _1105) * _1108)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1126 = dot(vec2(_1124, _1125), vec2(_1124, _1125));
    float _4035 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _1131 = sqrt(1.0 - (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))));
    float _1133 = cbMtdParam._m0[21u].x * _328;
    float _4046 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _1139 = ((cbMtdParam._m0[21u].y - cbMtdParam._m0[19u].w) * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) + cbMtdParam._m0[19u].w;
    float _1144 = _1124 - (_1139 * _1124);
    float _1145 = _1125 - (_1139 * _1125);
    float _1146 = (_1139 * (1.0 - _1131)) + _1131;
    float _1156 = fma(_1131, _240, fma(_1125, _247, _1124 * _233));
    float _1159 = fma(_1131, _241, fma(_1125, _248, _1124 * _234));
    float _1162 = fma(_1131, _242, fma(_1125, _249, _1124 * _235));
    float _1166 = inversesqrt(dot(vec3(_1156, _1159, _1162), vec3(_1156, _1159, _1162)));
    float _1167 = _1166 * _1156;
    float _1168 = _1166 * _1159;
    float _1169 = _1166 * _1162;
    float _1172 = fma(_1146, _240, fma(_1145, _247, _1144 * _233));
    float _1175 = fma(_1146, _241, fma(_1145, _248, _1144 * _234));
    float _1178 = fma(_1146, _242, fma(_1145, _249, _1144 * _235));
    float _1182 = inversesqrt(dot(vec3(_1172, _1175, _1178), vec3(_1172, _1175, _1178)));
    float _1183 = _1182 * _1172;
    float _1184 = _1182 * _1175;
    float _1185 = _1182 * _1178;
    float _4057 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _4068 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _1187 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _1201 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1221 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1230 = cbSceneParam._m0[71u].x - (_1009 / _1221);
    float _1231 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1221);
    float _1232 = cbSceneParam._m0[71u].z - (_1013 / _1221);
    float _1236 = inversesqrt(dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232)));
    float _1237 = _1230 * _1236;
    float _1238 = _1231 * _1236;
    float _1239 = _1232 * _1236;
    vec4 _1244 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1246 = _1244.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1420 = sqrt(((_1230 * _1230) + (_1231 * _1231)) + (_1232 * _1232));
        float _1426 = (cbMatDynParam._m0[5u].x * _1420) + cbMatDynParam._m0[5u].y;
        float _4079 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1431 = (cbMatDynParam._m0[5u].z * _1420) + cbMatDynParam._m0[5u].w;
        float _4090 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) - _1427)) + _1427) < ((_1246 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1256 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1257 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1259 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1268 = (_1259.x * 2.0) + (-1.0);
    float _1269 = (_1259.y * 2.0) + (-1.0);
    float _1270 = (_1259.z * 2.0) + (-1.0);
    float _1274 = inversesqrt(dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270)));
    float _1285 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _1259.w;
    float _1292 = (((_1268 * _1274) - _1167) * _1285) + _1167;
    float _1293 = (((_1269 * _1274) - _1168) * _1285) + _1168;
    float _1294 = (((_1270 * _1274) - _1169) * _1285) + _1169;
    float _1312 = fma(_1294, cbSceneParam._m0[5u].z, fma(_1293, cbSceneParam._m0[5u].y, _1292 * cbSceneParam._m0[5u].x));
    float _1315 = fma(_1294, cbSceneParam._m0[6u].z, fma(_1293, cbSceneParam._m0[6u].y, _1292 * cbSceneParam._m0[6u].x));
    float _1318 = fma(_1294, cbSceneParam._m0[7u].z, fma(_1293, cbSceneParam._m0[7u].y, _1292 * cbSceneParam._m0[7u].x));
    vec4 _1327 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1256, cbSceneParam._m0[86u].y * _1257));
    float _1330 = _1327.x * TEXCOORD_3.w;
    float _1334 = abs(dot(vec3(_1237, _1238, _1239), vec3(_1292, _1293, _1294)));
    float _4101 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
    float _1346 = dot(vec3(_1183, _1184, _1185), vec3(_1237, _1238, _1239)) * 2.0;
    float _1350 = (_1346 * _1183) - _1237;
    float _1351 = (_1346 * _1184) - _1238;
    float _1352 = (_1346 * _1185) - _1239;
    float _1356 = abs(dot(vec3(_1237, _1238, _1239), vec3(_1183, _1184, _1185)));
    float _4112 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
    float _1358 = sqrt(_1187);
    float _1370 = exp2((_1358 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1358 * 3.0));
    float _1401 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1405 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1409 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1600;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1463 = fma(_1409, cbModelParam._m0[26u].z, fma(_1405, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1401));
        float _1467 = fma(_1409, cbModelParam._m0[27u].z, fma(_1405, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1401));
        float _1471 = fma(_1409, cbModelParam._m0[28u].z, fma(_1405, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1401));
        float _1494 = _1401 + _1183;
        float _1495 = _1405 + _1184;
        float _1496 = _1409 + _1185;
        float _1506 = fma(_1496, cbModelParam._m0[26u].z, fma(_1495, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1494)) - _1463;
        float _1507 = fma(_1496, cbModelParam._m0[27u].z, fma(_1495, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1494)) - _1467;
        float _1508 = fma(_1496, cbModelParam._m0[28u].z, fma(_1495, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1494)) - _1471;
        float _1512 = inversesqrt(dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508)));
        float _1524 = ((_1512 * _1506) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1463 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1525 = ((_1512 * _1507) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1467 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1526 = ((_1512 * _1508) / cbModelParam._m0[34u].z) + ((((((_1471 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1524, _1525, _1526), 0.0);
        float _1563 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1550.x + (-0.5));
        float _1595 = _1593 * (_1550.y + (-0.5));
        float _1596 = _1593 * (_1550.z + (-0.5));
        _1600 = _1563 * (_1529.z + (-0.5));
        _1602 = _1563 * (_1529.y + (-0.5));
        _1603 = _1563 * (_1529.x + (-0.5));
        _1604 = _1573 * (_1536.z + (-0.5));
        _1605 = _1573 * (_1536.y + (-0.5));
        _1606 = _1573 * (_1536.x + (-0.5));
        _1607 = _1583 * (_1543.z + (-0.5));
        _1608 = _1583 * (_1543.y + (-0.5));
        _1609 = _1583 * (_1543.x + (-0.5));
        _1610 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        _1611 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        _1612 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
    }
    else
    {
        _1600 = _1601;
        _1602 = _1601;
        _1603 = _1601;
        _1604 = _1601;
        _1605 = _1601;
        _1606 = _1601;
        _1607 = _1601;
        _1608 = _1601;
        _1609 = _1601;
        _1610 = _1601;
        _1611 = _1601;
        _1612 = _1601;
    }
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1638 = fma(_1409, cbModelParam._m0[30u].z, fma(_1405, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1401));
        float _1642 = fma(_1409, cbModelParam._m0[31u].z, fma(_1405, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1401));
        float _1646 = fma(_1409, cbModelParam._m0[32u].z, fma(_1405, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1401));
        float _1669 = _1401 + _1183;
        float _1670 = _1405 + _1184;
        float _1671 = _1409 + _1185;
        float _1681 = fma(_1671, cbModelParam._m0[30u].z, fma(_1670, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1669)) - _1638;
        float _1682 = fma(_1671, cbModelParam._m0[31u].z, fma(_1670, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1669)) - _1642;
        float _1683 = fma(_1671, cbModelParam._m0[32u].z, fma(_1670, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1669)) - _1646;
        float _1687 = inversesqrt(dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683)));
        float _1699 = ((_1687 * _1681) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1638 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1700 = ((_1687 * _1682) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1642 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1701 = ((_1687 * _1683) / cbModelParam._m0[35u].z) + ((((((_1646 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1703 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1699, _1700, _1701), 0.0);
        vec4 _1710 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1699, _1700, _1701), 0.0);
        vec4 _1717 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1699, _1700, _1701), 0.0);
        vec4 _1724 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1699, _1700, _1701), 0.0);
        float _1736 = exp2((_1703.w + (-0.5)) * 20.0) * 2.0;
        float _1746 = exp2((_1710.w + (-0.5)) * 20.0) * 2.0;
        float _1756 = exp2((_1717.w + (-0.5)) * 20.0) * 2.0;
        float _1766 = exp2((_1724.w + (-0.5)) * 20.0) * 2.0;
        float _1767 = _1766 * (_1724.x + (-0.5));
        float _1768 = _1766 * (_1724.y + (-0.5));
        float _1769 = _1766 * (_1724.z + (-0.5));
        _1773 = _1736 * (_1703.z + (-0.5));
        _1774 = _1736 * (_1703.y + (-0.5));
        _1775 = _1736 * (_1703.x + (-0.5));
        _1776 = _1746 * (_1710.z + (-0.5));
        _1777 = _1746 * (_1710.y + (-0.5));
        _1778 = _1746 * (_1710.x + (-0.5));
        _1779 = _1756 * (_1717.z + (-0.5));
        _1780 = _1756 * (_1717.y + (-0.5));
        _1781 = _1756 * (_1717.x + (-0.5));
        _1782 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        _1783 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        _1784 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    }
    else
    {
        _1773 = _1601;
        _1774 = _1601;
        _1775 = _1601;
        _1776 = _1601;
        _1777 = _1601;
        _1778 = _1601;
        _1779 = _1601;
        _1780 = _1601;
        _1781 = _1601;
        _1782 = _1601;
        _1783 = _1601;
        _1784 = _1601;
    }
    float _1798 = _1350 * 0.5;
    float _1799 = _1351 * 0.5;
    float _1800 = _1352 * 0.5;
    float _1801 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1775, _1778, _1781, _1784));
    float _1804 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1774, _1777, _1780, _1783));
    float _1807 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1773, _1776, _1779, _1782));
    float _1842;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1814 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1600, _1604, _1607, _1610));
        float _1818 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1602, _1605, _1608, _1611));
        float _1822 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1603, _1606, _1609, _1612));
        float _1829 = dot(vec4(cbModelParam._m0[39u]), vec4(_1798, _1799, _1800, 1.0));
        _1842 = dot(vec3(isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1829) ? 0.0 : (isnan(0.0) ? _1829 : max(0.0, _1829))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1842 = 1.0;
    }
    float _1853;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1844 = dot(vec4(cbModelParam._m0[40u]), vec4(_1798, _1799, _1800, 1.0));
        _1853 = dot(vec3(isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1844) ? 0.0 : (isnan(0.0) ? _1844 : max(0.0, _1844))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1853 = 1.0;
    }
    float _1857 = (_1853 * cbModelParam._m0[1u].x) + (_1842 * (1.0 - cbModelParam._m0[1u].x));
    float _1864 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1187);
    float _1865 = isnan(_1864) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1864 : min(cbModelParam._m0[25u].z, _1864));
    float _1945;
    float _1947;
    float _1949;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1912 = fma(_1409, cbModelParam._m0[13u].z, fma(_1405, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1401)) + cbModelParam._m0[13u].w;
        float _1916 = fma(_1409, cbModelParam._m0[14u].z, fma(_1405, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1401)) + cbModelParam._m0[14u].w;
        float _1920 = fma(_1409, cbModelParam._m0[15u].z, fma(_1405, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1401)) + cbModelParam._m0[15u].w;
        float _1923 = fma(_1352, cbModelParam._m0[13u].z, fma(_1351, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1350));
        float _1926 = fma(_1352, cbModelParam._m0[14u].z, fma(_1351, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1350));
        float _1929 = fma(_1352, cbModelParam._m0[15u].z, fma(_1351, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1350));
        float _1957;
        if (_1923 > 0.0)
        {
            _1957 = abs((1.0 - _1912) / _1923);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1912 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1957 = frontier_phi_17_15_ladder;
        }
        float _2144;
        if (_1926 > 0.0)
        {
            _2144 = abs((1.0 - _1916) / _1926);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1916 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2144 = frontier_phi_26_22_ladder;
        }
        float _2550;
        if (_1929 > 0.0)
        {
            _2550 = abs((1.0 - _1920) / _1929);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1920 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2550 = frontier_phi_38_33_ladder;
        }
        float _2552 = isnan(_2144) ? _1957 : (isnan(_1957) ? _2144 : min(_1957, _2144));
        float _2553 = isnan(_2550) ? _2552 : (isnan(_2552) ? _2550 : min(_2552, _2550));
        float _2557 = (_2553 * _1923) + _1912;
        float _2558 = (_2553 * _1926) + _1916;
        float _2559 = (_2553 * _1929) + _1920;
        float _2560 = _2553 * 9.9999997473787516355514526367188e-05;
        float _2562 = (-1.0) - _2560;
        float _2564 = _2560 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2559 > _2564) || ((_2559 < _2562) || ((_2558 > _2564) || ((_2558 < _2562) || ((_2557 < _2562) || (_2557 > _2564))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2919 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2559, cbModelParam._m0[9u].z, fma(_2558, cbModelParam._m0[9u].y, _2557 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2559, cbModelParam._m0[10u].z, fma(_2558, cbModelParam._m0[10u].y, _2557 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2559, cbModelParam._m0[11u].z, fma(_2558, cbModelParam._m0[11u].y, _2557 * cbModelParam._m0[11u].x))), _1865);
            frontier_phi_16_38_ladder = _2919.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2919.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2919.x * cbModelParam._m0[1u].y;
        }
        _1945 = frontier_phi_16_38_ladder_2;
        _1947 = frontier_phi_16_38_ladder_1;
        _1949 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1933 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1350, _1351, _1352), _1865);
        _1945 = _1933.x * cbModelParam._m0[1u].y;
        _1947 = _1933.y * cbModelParam._m0[1u].y;
        _1949 = _1933.z * cbModelParam._m0[1u].y;
    }
    float _1953 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1187);
    float _1954 = isnan(_1953) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1953 : min(cbModelParam._m0[25u].w, _1953));
    float _2043;
    float _2045;
    float _2047;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2007 = fma(_1409, cbModelParam._m0[21u].z, fma(_1405, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1401)) + cbModelParam._m0[21u].w;
        float _2011 = fma(_1409, cbModelParam._m0[22u].z, fma(_1405, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1401)) + cbModelParam._m0[22u].w;
        float _2015 = fma(_1409, cbModelParam._m0[23u].z, fma(_1405, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1401)) + cbModelParam._m0[23u].w;
        float _2018 = fma(_1352, cbModelParam._m0[21u].z, fma(_1351, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1350));
        float _2021 = fma(_1352, cbModelParam._m0[22u].z, fma(_1351, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1350));
        float _2024 = fma(_1352, cbModelParam._m0[23u].z, fma(_1351, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1350));
        float _2149;
        if (_2018 > 0.0)
        {
            _2149 = abs((1.0 - _2007) / _2018);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2007 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2149 = frontier_phi_28_24_ladder;
        }
        float _2577;
        if (_2021 > 0.0)
        {
            _2577 = abs((1.0 - _2011) / _2021);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2011 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2577 = frontier_phi_40_35_ladder;
        }
        float _3085;
        if (_2024 > 0.0)
        {
            _3085 = abs((1.0 - _2015) / _2024);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_2015 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _3085 = frontier_phi_52_47_ladder;
        }
        float _3087 = isnan(_2577) ? _2149 : (isnan(_2149) ? _2577 : min(_2149, _2577));
        float _3088 = isnan(_3085) ? _3087 : (isnan(_3087) ? _3085 : min(_3087, _3085));
        float _3092 = (_3088 * _2018) + _2007;
        float _3093 = (_3088 * _2021) + _2011;
        float _3094 = (_3088 * _2024) + _2015;
        float _3095 = _3088 * 9.9999997473787516355514526367188e-05;
        float _3096 = (-1.0) - _3095;
        float _3098 = _3095 + 1.0;
        float frontier_phi_25_52_ladder;
        float frontier_phi_25_52_ladder_1;
        float frontier_phi_25_52_ladder_2;
        if ((_3094 > _3098) || ((_3094 < _3096) || ((_3093 > _3098) || ((_3093 < _3096) || ((_3092 < _3096) || (_3092 > _3098))))))
        {
            frontier_phi_25_52_ladder = 0.0;
            frontier_phi_25_52_ladder_1 = 0.0;
            frontier_phi_25_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3219 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3094, cbModelParam._m0[17u].z, fma(_3093, cbModelParam._m0[17u].y, _3092 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3094, cbModelParam._m0[18u].z, fma(_3093, cbModelParam._m0[18u].y, _3092 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3094, cbModelParam._m0[19u].z, fma(_3093, cbModelParam._m0[19u].y, _3092 * cbModelParam._m0[19u].x))), _1954);
            frontier_phi_25_52_ladder = _3219.z * cbModelParam._m0[1u].z;
            frontier_phi_25_52_ladder_1 = _3219.y * cbModelParam._m0[1u].z;
            frontier_phi_25_52_ladder_2 = _3219.x * cbModelParam._m0[1u].z;
        }
        _2043 = frontier_phi_25_52_ladder_2;
        _2045 = frontier_phi_25_52_ladder_1;
        _2047 = frontier_phi_25_52_ladder;
    }
    else
    {
        vec4 _2027 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1350, _1351, _1352), _1954);
        _2043 = _2027.x * cbModelParam._m0[1u].z;
        _2045 = _2027.y * cbModelParam._m0[1u].z;
        _2047 = _2027.z * cbModelParam._m0[1u].z;
    }
    float _2059 = ((((1.0 - _1370) * ((_1358 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1370 * _1358)) * _1330;
    float _2060 = _2059 * ((cbModelParam._m0[1u].w * (_2043 - _1945)) + _1945);
    float _2061 = _2059 * ((cbModelParam._m0[1u].w * (_2045 - _1947)) + _1947);
    float _2062 = _2059 * ((cbModelParam._m0[1u].w * (_2047 - _1949)) + _1949);
    float _2083 = fma(_2062, cbSceneParam._m0[89u].z, fma(_2061, cbSceneParam._m0[89u].y, _2060 * cbSceneParam._m0[89u].x));
    float _2086 = fma(_2062, cbSceneParam._m0[90u].z, fma(_2061, cbSceneParam._m0[90u].y, _2060 * cbSceneParam._m0[90u].x));
    float _2089 = fma(_2062, cbSceneParam._m0[91u].z, fma(_2061, cbSceneParam._m0[91u].y, _2060 * cbSceneParam._m0[91u].x));
    float _2123 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2127 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2131 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2135 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2136 = _2123 / _2135;
    float _2137 = _2127 / _2135;
    float _2138 = _2131 / _2135;
    float _2284;
    float _2285;
    float _2286;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2165 = ((uint(_2138 > cbSceneParam._m0[59u].y) + uint(_2138 > cbSceneParam._m0[59u].x)) + uint(_2138 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2166 = _2165 + 43u;
        uint _2174 = _2165 + 44u;
        uint _2182 = _2165 + 45u;
        uint _2190 = _2165 + 46u;
        float _2201 = fma(_2135, cbSceneParam._m0[_2166].w, fma(_2131, cbSceneParam._m0[_2166].z, fma(_2127, cbSceneParam._m0[_2166].y, _2123 * cbSceneParam._m0[_2166].x)));
        float _2205 = fma(_2135, cbSceneParam._m0[_2174].w, fma(_2131, cbSceneParam._m0[_2174].z, fma(_2127, cbSceneParam._m0[_2174].y, _2123 * cbSceneParam._m0[_2174].x)));
        float _2213 = fma(_2135, cbSceneParam._m0[_2190].w, fma(_2131, cbSceneParam._m0[_2190].z, fma(_2127, cbSceneParam._m0[_2190].y, _2123 * cbSceneParam._m0[_2190].x)));
        float _2217 = cbSceneParam._m0[33u].z * _2213;
        float _2219 = cbSceneParam._m0[33u].w * _2213;
        float _2222 = fma(_2135, cbSceneParam._m0[_2182].w, fma(_2131, cbSceneParam._m0[_2182].z, fma(_2127, cbSceneParam._m0[_2182].y, _2123 * cbSceneParam._m0[_2182].x))) / _2213;
        float _2270 = (cbSceneParam._m0[33u].x - sqrt(((_2137 * _2137) + (_2136 * _2136)) + (_2138 * _2138))) * cbSceneParam._m0[33u].y;
        float _4238 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2277 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2217 + _2201) / _2213, (_2219 + _2205) / _2213), _2222), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2219 + _2201) / _2213, (_2205 - _2217) / _2213), _2222), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2201 - _2217) / _2213, (_2205 - _2219) / _2213), _2222), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2201 - _2219) / _2213, (_2217 + _2205) / _2213), _2222), 0.0)).x), vec4(0.25)));
        _2284 = 1.0 - (_2277 * cbSceneParam._m0[34u].x);
        _2285 = 1.0 - (_2277 * cbSceneParam._m0[34u].y);
        _2286 = 1.0 - (_2277 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2284 = 1.0;
        _2285 = 1.0;
        _2286 = 1.0;
    }
    float _2350;
    float _2352;
    float _2354;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2338 = fma(_2135, cbSceneParam._m0[63u].w, fma(_2131, cbSceneParam._m0[63u].z, fma(_2127, cbSceneParam._m0[63u].y, _2123 * cbSceneParam._m0[63u].x)));
        float _2339 = fma(_2135, cbSceneParam._m0[60u].w, fma(_2131, cbSceneParam._m0[60u].z, fma(_2127, cbSceneParam._m0[60u].y, _2123 * cbSceneParam._m0[60u].x))) / _2338;
        float _2340 = fma(_2135, cbSceneParam._m0[61u].w, fma(_2131, cbSceneParam._m0[61u].z, fma(_2127, cbSceneParam._m0[61u].y, _2123 * cbSceneParam._m0[61u].x))) / _2338;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2339 >= cbSceneParam._m0[64u].x) && (_2340 >= cbSceneParam._m0[64u].y)) && (_2339 <= cbSceneParam._m0[64u].z)) && (_2340 <= cbSceneParam._m0[64u].w))
        {
            float _2590 = fma(_2135, cbSceneParam._m0[62u].w, fma(_2131, cbSceneParam._m0[62u].z, fma(_2127, cbSceneParam._m0[62u].y, _2123 * cbSceneParam._m0[62u].x))) / _2338;
            float _2594 = isnan(cbSceneParam._m0[41u].w) ? _2590 : (isnan(_2590) ? cbSceneParam._m0[41u].w : max(_2590, cbSceneParam._m0[41u].w));
            float _2637 = (cbSceneParam._m0[33u].x - sqrt(((_2137 * _2137) + (_2136 * _2136)) + (_2138 * _2138))) * cbSceneParam._m0[33u].y;
            float _4254 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
            float _2644 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2339, cbSceneParam._m0[33u].w + _2340), _2594), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2339, _2340 - cbSceneParam._m0[33u].z), _2594), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2339 - cbSceneParam._m0[33u].z, _2340 - cbSceneParam._m0[33u].w), _2594), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2339 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2340), _2594), 0.0)).x), vec4(0.25)));
            float _2648 = 1.0 - (_2644 * cbSceneParam._m0[34u].x);
            float _2649 = 1.0 - (_2644 * cbSceneParam._m0[34u].y);
            float _2650 = 1.0 - (_2644 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2648) ? _2284 : (isnan(_2284) ? _2648 : min(_2284, _2648));
            frontier_phi_37_36_ladder_1 = isnan(_2649) ? _2285 : (isnan(_2285) ? _2649 : min(_2285, _2649));
            frontier_phi_37_36_ladder_2 = isnan(_2650) ? _2286 : (isnan(_2286) ? _2650 : min(_2286, _2650));
        }
        else
        {
            frontier_phi_37_36_ladder = _2284;
            frontier_phi_37_36_ladder_1 = _2285;
            frontier_phi_37_36_ladder_2 = _2286;
        }
        _2350 = frontier_phi_37_36_ladder;
        _2352 = frontier_phi_37_36_ladder_1;
        _2354 = frontier_phi_37_36_ladder_2;
    }
    else
    {
        _2350 = _2284;
        _2352 = _2285;
        _2354 = _2286;
    }
    uint _2356 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _2360 = floatBitsToUint(cbInstanceData._m0[_2356 + 5u]);
    uint _2362 = _2360.x * 14u;
    uint _2363 = _2362 + 13u;
    float _2368 = _1330 + (-1.0);
    float _2371 = (cbLight._m0[_2363].x * _2368) + 1.0;
    float _2372 = (cbLight._m0[_2363].y * _2368) + 1.0;
    uint _2376 = _2362 + 8u;
    float _2392 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2362].w)) * _1187) * 0.949999988079071044921875);
    float _2393 = _2392 * _2392;
    float _2394 = cbLight._m0[_2362].x + _1237;
    float _2395 = cbLight._m0[_2362].y + _1238;
    float _2396 = cbLight._m0[_2362].z + _1239;
    float _2400 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
    float _2401 = _2400 * _2394;
    float _2402 = _2400 * _2395;
    float _2403 = _2400 * _2396;
    float _2404 = dot(vec3(_1292, _1293, _1294), vec3(cbLight._m0[_2362].xyz));
    float _4280 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2407 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _2408 = dot(vec3(_1292, _1293, _1294), vec3(_1237, _1238, _1239));
    float _4291 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2412 = dot(vec3(_1292, _1293, _1294), vec3(_2401, _2402, _2403));
    float _4302 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2415 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2416 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_2401, _2402, _2403));
    float _4313 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2420 = _2393 * _2393;
    float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
    float _2435 = (exp2(log2(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2436 = 1.0 - _2393;
    float _2447 = (0.5 / (((_2411 * ((_2407 * _2436) + _2393)) + 9.9999999392252902907785028219223e-09) + (((_2411 * _2436) + _2393) * _2407))) * _2407;
    float _4324 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2449 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
    float _2450 = isnan(1.0) ? _2371 : (isnan(_2371) ? 1.0 : min(_2371, 1.0));
    uint _2463 = _2362 | 1u;
    uint _2467 = _2362 + 9u;
    float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2463].w)) * _1187) * 0.949999988079071044921875);
    float _2482 = _2481 * _2481;
    float _2483 = cbLight._m0[_2463].x + _1237;
    float _2484 = cbLight._m0[_2463].y + _1238;
    float _2485 = cbLight._m0[_2463].z + _1239;
    float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
    float _2490 = _2489 * _2483;
    float _2491 = _2489 * _2484;
    float _2492 = _2489 * _2485;
    float _2493 = dot(vec3(_1292, _1293, _1294), vec3(cbLight._m0[_2463].xyz));
    float _4340 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2496 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _2497 = dot(vec3(_1292, _1293, _1294), vec3(_2490, _2491, _2492));
    float _4351 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2500 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _2501 = dot(vec3(cbLight._m0[_2463].xyz), vec3(_2490, _2491, _2492));
    float _4362 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2505 = _2482 * _2482;
    float _2509 = ((_2500 * _2500) * (_2505 + (-1.0))) + 1.0;
    float _2518 = (exp2(log2(1.0 - (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2519 = 1.0 - _2482;
    float _2529 = (0.5 / (((_2411 * ((_2496 * _2519) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2411 * _2519) + _2482) * _2496))) * _2496;
    float _4373 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2531 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2505 / ((_2509 * _2509) * 3.141590118408203125));
    float _2532 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
    float _2542 = (((_2518 * cbLight._m0[_2467].x) * _2531) * _2532) + ((((cbLight._m0[_2376].x * _2350) * _2435) * _2449) * _2450);
    float _2543 = (((_2518 * cbLight._m0[_2467].y) * _2531) * _2532) + ((((cbLight._m0[_2376].y * _2352) * _2435) * _2449) * _2450);
    float _2544 = (((_2518 * cbLight._m0[_2467].z) * _2531) * _2532) + ((((cbLight._m0[_2376].z * _2354) * _2435) * _2449) * _2450);
    float _2707;
    float _2709;
    float _2711;
    if (_2360.y == 0u)
    {
        uvec4 _2662 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2663 = _2662.x;
        uint _2674 = uint((float(_2662.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1257) / _2663))) + floor(float(uint(cbSceneParam._m0[85u].x * _1256) / _2663)));
        float _2684 = (log2(_2138 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2685 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        uint _2688 = uint(isnan(14.0) ? _2685 : (isnan(_2685) ? 14.0 : min(_2685, 14.0)));
        uvec4 _2693 = texelFetch(g_lightClusterGridBuffer, int(((_2688 << 2u) + (_2674 << 6u)) >> 2u));
        uint _2694 = _2693.x;
        uint _2695 = _2662.z;
        float _2928;
        float _2930;
        float _2932;
        if (((((1u << ((_2695 >> 4u) & 15u)) + 4294967295u) & _2694) == 0u) || ((_2695 & 240u) == 0u))
        {
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
        }
        else
        {
            float _2929;
            float _2931;
            float _2933;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            uint _3137 = 0u;
            uint _3146;
            bool _3147;
            for (;;)
            {
                _3146 = texelFetch(g_lightClassification, int((((_2688 << 5u) + (_2674 << 9u)) + (_3137 << 2u)) >> 2u)).x;
                _3147 = _3146 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                if (_3147)
                {
                    frontier_phi_63_pred = _3136;
                    frontier_phi_63_pred_1 = _3135;
                    frontier_phi_63_pred_2 = _3134;
                }
                else
                {
                    float _3291;
                    float _3292;
                    float _3293;
                    uint _3294;
                    _3291 = _3134;
                    _3292 = _3135;
                    _3293 = _3136;
                    _3294 = _3146;
                    float _3224;
                    float _3225;
                    float _3226;
                    for (;;)
                    {
                        uint _3298 = uint(findLSB(_3294)) + (_3137 << 5u);
                        uint _3295 = (_3294 + 4294967295u) & _3294;
                        uint _3300 = _3298 * 48u;
                        vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3300)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 3u)).x));
                        uint _3331 = (_3298 * 48u) + 8u;
                        vec3 _3342 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3331)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 2u)).x));
                        float _3346 = _3314.x - _2136;
                        float _3347 = _3314.y - _2137;
                        float _3348 = _3314.z - _2138;
                        float _3349 = dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348));
                        float _3352 = inversesqrt(_3349);
                        float _3353 = _3352 * _3346;
                        float _3354 = _3352 * _3347;
                        float _3355 = _3352 * _3348;
                        float _3361 = 1.0 - (_3349 * _3314.w);
                        float _4399 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3363 = sqrt(_3349) * uintBitsToFloat(uvec4(_3321, _3322, _3323, texelFetch(g_PointLightRenderingBuffer, int(((_3298 * 48u) + 4u) + 3u)).x)).w;
                        float _3367 = _3363 * _3363;
                        float _3368 = (-0.0) - _2136;
                        float _3369 = (-0.0) - _2137;
                        float _3370 = (-0.0) - _2138;
                        float _3374 = inversesqrt(dot(vec3(_3368, _3369, _3370), vec3(_3368, _3369, _3370)));
                        float _3375 = _3374 * _3368;
                        float _3376 = _3374 * _3369;
                        float _3377 = _3374 * _3370;
                        float _3384 = exp2(log2(1.0 / ((_3367 * 3.5) + 5.0)) * 0.25);
                        float _3385 = 1.0 - _1358;
                        float _3392 = sqrt(1.0 - ((1.0 - (_3385 * _3385)) * (1.0 - (_3384 * _3384))));
                        float _3393 = _3392 * _3392;
                        float _3394 = _3393 * _3393;
                        float _3395 = _3375 + _3353;
                        float _3396 = _3376 + _3354;
                        float _3397 = _3377 + _3355;
                        float _3401 = inversesqrt(dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397)));
                        float _3405 = dot(vec3(_1312, _1315, _1318), vec3(_3375, _3376, _3377));
                        float _4410 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3408 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                        float _3409 = dot(vec3(_1312, _1315, _1318), vec3(_3401 * _3395, _3401 * _3396, _3401 * _3397));
                        float _4421 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                        float _3412 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                        float _3416 = ((_3412 * _3412) * (_3394 + (-1.0))) + 1.0;
                        float _3417 = (1.39999997615814208984375 / (_3363 + 1.39999997615814208984375)) * _3393;
                        float _3418 = _3417 * _3417;
                        float _3421 = ((1.0 - _3418) * dot(vec3(_1312, _1315, _1318), vec3(_3353, _3354, _3355))) + _3418;
                        float _4432 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3422 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                        float _3423 = 1.0 - _3393;
                        float _3433 = (0.5 / (((_3422 * ((_3408 * _3423) + _3393)) + 9.9999999392252902907785028219223e-09) + (((_3422 * _3423) + _3393) * _3408))) * _3422;
                        float _4443 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3444 = (((_3394 * 3.1415927410125732421875) * (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) / ((_3416 * _3416) * ((_3367 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)));
                        _3224 = (_3444 * _3342.x) + _3291;
                        _3225 = (_3444 * _3342.y) + _3292;
                        _3226 = (_3444 * _3342.z) + _3293;
                        if (_3295 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3291 = _3224;
                            _3292 = _3225;
                            _3293 = _3226;
                            _3294 = _3295;
                        }
                    }
                    frontier_phi_63_pred = _3226;
                    frontier_phi_63_pred_1 = _3225;
                    frontier_phi_63_pred_2 = _3224;
                }
                _2933 = frontier_phi_63_pred;
                _2931 = frontier_phi_63_pred_1;
                _2929 = frontier_phi_63_pred_2;
                uint _3138 = _3137 + 1u;
                if (_3138 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3134 = _2929;
                    _3135 = _2931;
                    _3136 = _2933;
                    _3137 = _3138;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
        }
        uvec4 _2936 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2937 = _2936.z;
        uint _2939 = (_2937 >> 8u) & 15u;
        float _3111;
        float _3113;
        float _3115;
        if (((4294967295u << _2939) & _2694) == 0u)
        {
            _3111 = _2928;
            _3113 = _2930;
            _3115 = _2932;
        }
        else
        {
            float _3127 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
            float _3128 = _3127 * _2136;
            float _3129 = _3127 * _2137;
            float _3130 = _3127 * _2138;
            float frontier_phi_54_55_ladder;
            float frontier_phi_54_55_ladder_1;
            float frontier_phi_54_55_ladder_2;
            if (_2939 < ((_2937 >> 12u) & 15u))
            {
                float _3112;
                float _3114;
                float _3116;
                float _3277 = _2928;
                float _3278 = _2930;
                float _3279 = _2932;
                uint _3280 = _2939;
                uint _3289;
                bool _3290;
                for (;;)
                {
                    _3289 = texelFetch(g_lightClassification, int((((_2688 << 5u) + (_2674 << 9u)) + (_3280 << 2u)) >> 2u)).x;
                    _3290 = _3289 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    if (_3290)
                    {
                        frontier_phi_74_pred = _3279;
                        frontier_phi_74_pred_1 = _3278;
                        frontier_phi_74_pred_2 = _3277;
                    }
                    else
                    {
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3468 = _3277;
                        float _3469 = _3278;
                        float _3470 = _3279;
                        uint _3471 = _3289;
                        uint _3472;
                        uint _3482;
                        vec4 _3497;
                        float _3498;
                        vec3 _3510;
                        vec4 _3525;
                        vec4 _3540;
                        float _3586;
                        bool _3587;
                        for (;;)
                        {
                            _3482 = ((_3280 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3471));
                            _3472 = (_3471 + 4294967295u) & _3471;
                            uint _3484 = _3482 * 40u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            _3498 = _3497.w;
                            uint _3500 = (_3482 * 40u) + 8u;
                            _3510 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x));
                            uint _3512 = (_3482 * 40u) + 16u;
                            _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            uint _3527 = (_3482 * 40u) + 20u;
                            _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3542 = (_3482 * 40u) + 24u;
                            vec4 _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            uint _3561 = (_3482 * 40u) + 28u;
                            vec4 _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            _3586 = fma(_2138, _3574.z, fma(_2137, _3574.y, _3574.x * _2136)) + _3574.w;
                            _3587 = !((fma(_2138, _3555.z, fma(_2137, _3555.y, _3555.x * _2136)) + _3555.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            if (_3587)
                            {
                                float _3621 = _3497.x - _2136;
                                float _3622 = _3497.y - _2137;
                                float _3623 = _3497.z - _2138;
                                float _3624 = dot(vec3(_3621, _3622, _3623), vec3(_3621, _3622, _3623));
                                float _3627 = inversesqrt(_3624);
                                float _3628 = _3627 * _3621;
                                float _3629 = _3627 * _3622;
                                float _3630 = _3627 * _3623;
                                float _3634 = 1.0 - (_3624 / (_3498 * _3498));
                                float _4454 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3636 = sqrt(_3624) * uintBitsToFloat(uvec4(_3590, _3591, _3592, texelFetch(g_SpotLightRenderingBuffer, int(((_3482 * 40u) + 4u) + 3u)).x)).w;
                                float _3639 = _3636 * _3636;
                                float _3640 = (fma(_2138, _3525.z, fma(_2137, _3525.y, _3525.x * _2136)) + _3525.w) / _3586;
                                float _3641 = (fma(_2138, _3540.z, fma(_2137, _3540.y, _3540.x * _2136)) + _3540.w) / _3586;
                                float _3645 = 1.0 - dot(vec2(_3640, _3641), vec2(_3640, _3641));
                                float _4465 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3655 = exp2(log2(1.0 / ((_3639 * 3.5) + 5.0)) * 0.25);
                                float _3656 = 1.0 - _1358;
                                float _3663 = sqrt(1.0 - ((1.0 - (_3656 * _3656)) * (1.0 - (_3655 * _3655))));
                                float _3664 = _3663 * _3663;
                                float _3665 = _3664 * _3664;
                                float _3666 = _3628 - _3128;
                                float _3667 = _3629 - _3129;
                                float _3668 = _3630 - _3130;
                                float _3672 = inversesqrt(dot(vec3(_3666, _3667, _3668), vec3(_3666, _3667, _3668)));
                                float _3676 = dot(vec3(_1312, _1315, _1318), vec3((-0.0) - _3128, (-0.0) - _3129, (-0.0) - _3130));
                                float _4476 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3679 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                                float _3680 = dot(vec3(_1312, _1315, _1318), vec3(_3672 * _3666, _3672 * _3667, _3672 * _3668));
                                float _4487 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3683 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3687 = ((_3683 * _3683) * (_3665 + (-1.0))) + 1.0;
                                float _3688 = (1.39999997615814208984375 / (_3636 + 1.39999997615814208984375)) * _3664;
                                float _3689 = _3688 * _3688;
                                float _3695 = ((1.0 - _3689) * dot(vec3(_1312, _1315, _1318), vec3(_3628, _3629, _3630))) + _3689;
                                float _4498 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3696 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                                float _3697 = 1.0 - _3664;
                                float _3707 = (0.5 / (((_3696 * ((_3679 * _3697) + _3664)) + 9.9999999392252902907785028219223e-09) + (((_3696 * _3697) + _3664) * _3679))) * _3696;
                                float _4509 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3717 = ((isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * (((_3665 * 3.1415927410125732421875) * (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) / ((_3687 * _3687) * ((_3639 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3717 * _3510.z;
                                frontier_phi_80_pred_1 = _3717 * _3510.y;
                                frontier_phi_80_pred_2 = _3717 * _3510.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                            }
                            _3723 = frontier_phi_80_pred;
                            _3722 = frontier_phi_80_pred_1;
                            _3721 = frontier_phi_80_pred_2;
                            _3458 = _3721 + _3468;
                            _3459 = _3722 + _3469;
                            _3460 = _3723 + _3470;
                            if (_3472 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3468 = _3458;
                                _3469 = _3459;
                                _3470 = _3460;
                                _3471 = _3472;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3460;
                        frontier_phi_74_pred_1 = _3459;
                        frontier_phi_74_pred_2 = _3458;
                    }
                    _3116 = frontier_phi_74_pred;
                    _3114 = frontier_phi_74_pred_1;
                    _3112 = frontier_phi_74_pred_2;
                    uint _3281 = _3280 + 1u;
                    if (_3281 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3277 = _3112;
                        _3278 = _3114;
                        _3279 = _3116;
                        _3280 = _3281;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_54_55_ladder = _3116;
                frontier_phi_54_55_ladder_1 = _3114;
                frontier_phi_54_55_ladder_2 = _3112;
            }
            else
            {
                frontier_phi_54_55_ladder = _2932;
                frontier_phi_54_55_ladder_1 = _2930;
                frontier_phi_54_55_ladder_2 = _2928;
            }
            _3111 = frontier_phi_54_55_ladder_2;
            _3113 = frontier_phi_54_55_ladder_1;
            _3115 = frontier_phi_54_55_ladder;
        }
        float _3120 = isnan(1.0) ? _1330 : (isnan(_1330) ? 1.0 : min(_1330, 1.0));
        _2707 = ((_3111 * 0.039999999105930328369140625) * _3120) + _2542;
        _2709 = ((_3113 * 0.039999999105930328369140625) * _3120) + _2543;
        _2711 = ((_3115 * 0.039999999105930328369140625) * _3120) + _2544;
    }
    else
    {
        _2707 = _2542;
        _2709 = _2543;
        _2711 = _2544;
    }
    uint _2717 = _2356 + 9u;
    uint _2718 = _2717 + uint(cbMatDynParam._m0[0u].w);
    float _2724 = cbInstanceData._m0[_2718].x * (_959 - (_959 * TEXCOORD_7.x));
    float _2725 = cbInstanceData._m0[_2718].y * (_961 - (_961 * TEXCOORD_7.y));
    float _2726 = cbInstanceData._m0[_2718].z * (_963 - (_963 * TEXCOORD_7.z));
    float _2746 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2747 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2748 = cbSceneParam._m0[86u].x * ((_1256 / cbSceneParam._m0[86u].x) + ((0.0999999940395355224609375 / (_1201 + 10.0)) * dot(vec3(_1292, _1293, _1294), vec3(_233, _234, _235))));
    float _2749 = isnan(_2746) ? _2748 : (isnan(_2748) ? _2746 : min(_2748, _2746));
    float _2750 = isnan(_2747) ? _1257 : (isnan(_1257) ? _2747 : min(_1257, _2747));
    vec4 _2752 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2749, _2750), 0.0);
    float _2754 = _2752.x;
    bool _2774 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2754)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2754))) > _1201;
    float _2775 = _2774 ? _2749 : _1256;
    float _2776 = _2774 ? _2750 : _1257;
    vec4 _2778 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2775, _2776));
    vec4 _2783 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2775, _2776));
    float _2785 = _2783.x;
    float _2805 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2785)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2785))) - _1201;
    bool _2812 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2816 = (isnan(_2805) ? 0.0 : (isnan(0.0) ? _2805 : max(0.0, _2805))) * (-1.44269502162933349609375);
    float _2836 = 0.4799999892711639404296875 - (exp2(log2(1.0 - (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) * 5.0) * 0.4799999892711639404296875);
    float _2847 = (_2724 + ((_2707 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1857)) * cbPerFrame._m0[3u].x)) + (((_2836 * _2778.x) * exp2(_2816 * (_2812 ? 0.0 : cbMtdParam._m0[35u].y))) * cbSceneParam._m0[72u].w);
    float _2849 = (_2725 + ((_2709 + ((isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0))) * _1857)) * cbPerFrame._m0[3u].x)) + (((_2836 * _2778.y) * exp2(_2816 * (_2812 ? 0.0 : cbMtdParam._m0[35u].z))) * cbSceneParam._m0[72u].w);
    float _2851 = (_2726 + ((_2711 + ((isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0))) * _1857)) * cbPerFrame._m0[3u].x)) + (((_2836 * _2778.z) * exp2(_2816 * (_2812 ? 0.0 : cbMtdParam._m0[35u].w))) * cbSceneParam._m0[72u].w);
    float _2852 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
    float _2853 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
    float _2854 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
    float _2860 = cbMtdParam._m0[2u].x * _2724;
    float _2861 = cbMtdParam._m0[2u].y * _2725;
    float _2862 = cbMtdParam._m0[2u].z * _2726;
    float _4555 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2864 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _2869 = cbInstanceData._m0[_2356 + 6u].w * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)));
    float _2874 = _1256 / cbSceneParam._m0[86u].x;
    float _2875 = _1257 / cbSceneParam._m0[86u].y;
    vec4 _2889 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2874, _2875, (log2((isnan(cbSceneParam._m0[77u].w) ? _1201 : (isnan(_1201) ? cbSceneParam._m0[77u].w : min(_1201, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2891 = _2889.x;
    float _2892 = _2889.y;
    float _2893 = _2889.z;
    float _2894 = _2889.w;
    float _2983;
    float _2985;
    float _2987;
    float _2989;
    if (_1201 > cbSceneParam._m0[78u].w)
    {
        float _2947 = isnan(_1201) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1201 : min(cbSceneParam._m0[80u].w, _1201));
        float _2948 = _2947 / _1201;
        float _2959 = _2948 * _1230;
        float _2960 = _1231 * _2948;
        float _2961 = (-0.0) - _2960;
        float _2962 = _2948 * _1232;
        float _2964 = (cbSceneParam._m0[77u].w * _2961) / _2947;
        float _2965 = _2964 + cbSceneParam._m0[79u].w;
        float _2966 = cbSceneParam._m0[79u].w - _2960;
        float _2972 = sqrt(((_2959 * _2959) + (_2960 * _2960)) + (_2962 * _2962));
        float _2975 = (1.0 - (cbSceneParam._m0[77u].w / _2947)) * _2972;
        float _2980 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2981 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3234;
        if (abs((_2961 - _2964) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3234 = ((((_2965 > 0.0) ? exp2(_2980 * _2965) : (2.0 - exp2(_2981 * _2965))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2975;
        }
        else
        {
            float _3160 = 1.0 / cbSceneParam._m0[80u].x;
            float _3161 = isnan(_2966) ? _2965 : (isnan(_2965) ? _2966 : max(_2965, _2966));
            float _3162 = isnan(_2966) ? _2965 : (isnan(_2965) ? _2966 : min(_2965, _2966));
            float _3171 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : min(_3161, 0.0));
            float _3172 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : min(_3162, 0.0));
            _3234 = ((abs(_2972 / _2961) * cbSceneParam._m0[80u].y) * ((((_3171 - _3172) * 2.0) - ((exp2(_2980 * (isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0)))) - exp2(_2980 * (isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0))))) * _3160)) - ((exp2(_2981 * _3171) - exp2(_2981 * _3172)) * _3160))) + (_2975 * cbSceneParam._m0[80u].z);
        }
        vec4 _3236 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2874, _2875, 1.0), 0.0);
        float _3245 = exp2((_3234 * (-1.44269502162933349609375)) * (1.0 - _3236.w));
        float _3246 = log2(_3245);
        float _3262 = log2(_2894);
        _2983 = (exp2(_3262 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3246 * cbSceneParam._m0[78u].x)) * _3236.x) / cbSceneParam._m0[78u].x)) + _2891;
        _2985 = (exp2(_3262 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3246 * cbSceneParam._m0[78u].y)) * _3236.y) / cbSceneParam._m0[78u].y)) + _2892;
        _2987 = (exp2(_3262 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3246 * cbSceneParam._m0[78u].z)) * _3236.z) / cbSceneParam._m0[78u].z)) + _2893;
        _2989 = _3245 * _2894;
    }
    else
    {
        _2983 = _2891;
        _2985 = _2892;
        _2987 = _2893;
        _2989 = _2894;
    }
    bool _3272;
    float _3044;
    vec4 _3047;
    float _3049;
    vec4 _3051;
    float _3059;
    float _3060;
    float _3061;
    float _3065;
    float _3069;
    float _3073;
    float _3074;
    bool _3084;
    for (;;)
    {
        bool _3001 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _3002 = log2(_2989);
        float _3006 = exp2(_3002 * cbSceneParam._m0[78u].x);
        float _3007 = exp2(_3002 * cbSceneParam._m0[78u].y);
        float _3008 = exp2(_3002 * cbSceneParam._m0[78u].z);
        float _3009 = _3006 * _2852;
        float _3010 = _3007 * _2853;
        float _3011 = _3008 * _2854;
        vec4 _3019 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1256, _1257));
        float _3021 = _3019.x;
        float _3042 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _3021)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _3021))) - _1201) * cbMtdParam._m0[20u].z;
        float _4606 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
        float _3043 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        _3044 = _2869 * _3043;
        float _3045 = _1246 + (-0.5);
        _3047 = cbMtdParam._m0[1u];
        _3049 = _3047.y * _3045;
        _3051 = cbMatDynParam._m0[0u];
        float _3058 = (roundEven(_3051.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3059 = _3058 * (_3001 ? _3009 : (_3009 + (cbSceneParam._m0[72u].w * _2983)));
        _3060 = _3058 * (_3001 ? _3010 : (_3010 + (cbSceneParam._m0[72u].w * _2985)));
        _3061 = _3058 * (_3001 ? _3011 : (_3011 + (cbSceneParam._m0[72u].w * _2987)));
        _3065 = (((_2860 * _2864) * _3006) * _3043) * _3058;
        _3069 = (((_2861 * _2864) * _3007) * _3043) * _3058;
        _3073 = (((_2862 * _2864) * _3008) * _3043) * _3058;
        _3074 = _3045 * 0.999000012874603271484375;
        _3084 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3084)
        {
            if ((cbInstanceData._m0[_2356 + 7u].x + _3074) < 0.5)
            {
                _3272 = true;
                break;
            }
        }
        uint _3195 = _2717 + uint(_3051.w);
        if ((cbInstanceData._m0[_3195].w < 1.0) && ((cbInstanceData._m0[_3195].w + _3074) < 0.5))
        {
            _3272 = true;
            break;
        }
        if ((_3049 + 1.0) < _3047.x)
        {
            _3272 = true;
            break;
        }
        _3272 = false;
        break;
    }
    float _3449;
    if (_3272)
    {
        discard_state = true;
        _3449 = 0.0;
    }
    else
    {
        _3449 = _3044;
    }
    SV_Target.x = _3059;
    SV_Target.y = _3060;
    SV_Target.z = _3061;
    SV_Target.w = _3449;
    SV_Target_1.x = _3065;
    SV_Target_1.y = _3069;
    SV_Target_1.z = _3073;
    SV_Target_1.w = _3044;
    discard_exit();
}


