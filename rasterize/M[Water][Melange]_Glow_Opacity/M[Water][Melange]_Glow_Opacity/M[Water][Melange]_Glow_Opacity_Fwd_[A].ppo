#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[39];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_8;
layout(set = 0, binding = 7) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1597;
uint _3025;
uint _3026;
uint _3027;
uint _3316;
uint _3317;
uint _3318;
float _3571;
float _3572;
float _3573;
float _3574;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    float _289 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _299 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _289);
    float _300 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _289);
    float _301 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _289);
    float _317 = cbMtdParam._m0[18u].w - cbMtdParam._m0[18u].z;
    float _319 = (sqrt(((_299 * _299) + (_300 * _300)) + (_301 * _301)) - cbMtdParam._m0[18u].z) / (isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0)));
    float _324 = cbMtdParam._m0[19u].x + _319;
    float _326 = _324 * cbMtdParam._m0[19u].z;
    float _3588 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _329 = (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * cbMtdParam._m0[23u].z;
    float _3599 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _330 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _3610 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _335 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _338 = ((cbMtdParam._m0[18u].x - cbMtdParam._m0[17u].x) * _335) + cbMtdParam._m0[17u].x;
    float _359 = cbMtdParam._m0[20u].w * _324;
    float _3621 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    vec4 _377 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _380 = _377.x;
    float _404 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _380)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _380))) - POSITION_1.w) / cbMtdParam._m0[17u].w;
    float _3632 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _410 = 1.0 - (isnan(cbMtdParam._m0[22u].x) ? _405 : (isnan(_405) ? cbMtdParam._m0[22u].x : max(_405, cbMtdParam._m0[22u].x)));
    float _429 = (cbMtdParam._m0[25u].x + cbPerFrame._m0[22u].x) * cbMtdParam._m0[17u].y;
    float _437 = cbMtdParam._m0[30u].w * TEXCOORD.x;
    float _438 = cbMtdParam._m0[31u].x * TEXCOORD.y;
    vec4 _452 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_2, SS_BumpMap), vec2((((_429 * cbMtdParam._m0[31u].w) + _437) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_438 + (_429 * cbMtdParam._m0[32u].x)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _454 = _452.x;
    float _455 = _452.y;
    float _458 = _452.z - _335;
    float _3648 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _471 = (_459 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _473 = (_459 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _486 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((_471 + (cbMtdParam._m0[27u].y * _429)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_473 + (cbMtdParam._m0[27u].z * _429)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _490 = _486.z;
    vec4 _503 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((_471 + (cbMtdParam._m0[26u].w * _429)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_473 + (cbMtdParam._m0[27u].x * _429)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _507 = _503.z;
    float _510 = (_410 - _452.w) + (isnan(_507) ? _490 : (isnan(_490) ? _507 : max(_490, _507)));
    float _3664 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _512 = (((cbMtdParam._m0[21u].w + TEXCOORD_3.x) - (_410 * cbMtdParam._m0[18u].y)) * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0)));
    float _514 = _512 - (_512 * TEXCOORD_7.w);
    float _524 = (POSITION_1.w - cbMtdParam._m0[24u].z) * (1.0 / cbMtdParam._m0[24u].y);
    float _3675 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _539 = (cbMtdParam._m0[29u].w * _429) + _437;
    float _540 = (cbMtdParam._m0[30u].x * _429) + _438;
    float _547 = cbMtdParam._m0[29u].y * _429;
    float _548 = cbMtdParam._m0[29u].z * _429;
    vec4 _566 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * (_547 + (_437 * cbMtdParam._m0[31u].y))) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (_548 + (_438 * cbMtdParam._m0[31u].z))) + cbTextureTilingScale._m0[3u].w));
    float _573 = (_566.x * 2.0) + (-1.0);
    float _575 = (_566.y * 2.0) + (-1.0);
    float _579 = 1.0 - dot(vec2(_573, _575), vec2(_573, _575));
    float _3686 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _581 = sqrt(isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0)));
    float _584 = fma(_581, _236, fma(_575, _243, _573 * _229));
    float _587 = fma(_581, _237, fma(_575, _244, _573 * _230));
    float _590 = fma(_581, _238, fma(_575, _245, _573 * _231));
    float _594 = inversesqrt(dot(vec3(_584, _587, _590), vec3(_584, _587, _590)));
    float _595 = cbPerFrame._m0[22u].x * 2.0;
    float _596 = _595 * cbMtdParam._m0[23u].x;
    float _600 = ((_584 * 0.5) * _594) + (-0.25);
    float _604 = ((_587 * 0.5) * _594) + (-0.25);
    float _605 = _604 * cbMtdParam._m0[23u].y;
    float _607 = (-0.0) - (cbMtdParam._m0[23u].y * _600);
    float _608 = fract(_596);
    float _610 = fract(_596 + 0.5);
    float _621 = abs((_608 * 2.0) + (-1.0));
    vec4 _638 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_608 * _607) + _539) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_605 * _608) + _540) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _640 = _638.x;
    float _641 = _638.y;
    float _642 = _638.z;
    vec4 _643 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_610 * _607) + _539) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_605 * _610) + _540) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _654 = ((_643.x - _640) * _621) + _640;
    float _655 = ((_643.y - _641) * _621) + _641;
    float _656 = ((_643.z - _642) * _621) + _642;
    float _672 = (cbMtdParam._m0[28u].w * _429) + _437;
    float _673 = (cbMtdParam._m0[29u].x * _429) + _438;
    float _676 = _595 * cbMtdParam._m0[22u].w;
    float _677 = _604 * cbMtdParam._m0[22u].z;
    float _679 = (-0.0) - (cbMtdParam._m0[22u].z * _600);
    float _680 = fract(_676);
    float _682 = fract(_676 + 0.5);
    float _693 = abs((_680 * 2.0) + (-1.0));
    vec4 _710 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_680 * _679) + _672) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_677 * _680) + _673) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _712 = _710.x;
    float _713 = _710.y;
    float _714 = _710.z;
    vec4 _715 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_682 * _679) + _672) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_677 * _682) + _673) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _747 = (((((cbMtdParam._m0[14u].x - cbMtdParam._m0[16u].x) * _654) * cbMtdParam._m0[25u].y) + cbMtdParam._m0[16u].x) * (((_715.x - _712) * _693) + _712)) + (_654 * cbMtdParam._m0[15u].x);
    float _750 = (((((cbMtdParam._m0[14u].y - cbMtdParam._m0[16u].y) * _655) * cbMtdParam._m0[25u].y) + cbMtdParam._m0[16u].y) * (((_715.y - _713) * _693) + _713)) + (_655 * cbMtdParam._m0[15u].y);
    float _753 = ((((cbMtdParam._m0[25u].y * _656) * (cbMtdParam._m0[14u].z - cbMtdParam._m0[16u].z)) + cbMtdParam._m0[16u].z) * (((_715.z - _714) * _693) + _714)) + (_656 * cbMtdParam._m0[15u].z);
    float _757 = _747 - (_747 * _525);
    float _758 = _750 - (_750 * _525);
    float _759 = _753 - (_753 * _525);
    float _764 = (POSITION_1.w - cbMtdParam._m0[24u].x) * (1.0 / cbMtdParam._m0[23u].w);
    float _3697 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _765 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _775 = (cbMtdParam._m0[30u].y * _429) + _437;
    float _776 = (cbMtdParam._m0[30u].z * _429) + _438;
    vec4 _789 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((_437 * cbMtdParam._m0[32u].y) + _547)) + cbTextureTilingScale._m0[3u].z, (((_438 * cbMtdParam._m0[32u].z) + _548) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _795 = (_789.x * 2.0) + (-1.0);
    float _796 = (_789.y * 2.0) + (-1.0);
    float _800 = 1.0 - dot(vec2(_795, _796), vec2(_795, _796));
    float _3708 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _802 = sqrt(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)));
    float _805 = fma(_802, _236, fma(_796, _243, _795 * _229));
    float _808 = fma(_802, _237, fma(_796, _244, _795 * _230));
    float _811 = fma(_802, _238, fma(_796, _245, _795 * _231));
    float _815 = inversesqrt(dot(vec3(_805, _808, _811), vec3(_805, _808, _811)));
    float _816 = _595 * cbMtdParam._m0[26u].x;
    float _823 = (((_808 * 0.5) * _815) + (-0.25)) * cbMtdParam._m0[25u].w;
    float _825 = (-0.0) - (cbMtdParam._m0[25u].w * (((_805 * 0.5) * _815) + (-0.25)));
    float _826 = fract(_816);
    float _828 = fract(_816 + 0.5);
    float _831 = (_826 * _825) + _775;
    float _832 = (_823 * _826) + _776;
    float _835 = (_828 * _825) + _775;
    float _836 = (_823 * _828) + _776;
    float _839 = abs((_826 * 2.0) + (-1.0));
    vec4 _856 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_831 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_832 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _858 = _856.x;
    float _859 = _856.y;
    float _860 = _856.z;
    vec4 _861 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_835 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_836 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _872 = ((_861.x - _858) * _839) + _858;
    float _873 = ((_861.y - _859) * _839) + _859;
    float _874 = ((_861.z - _860) * _839) + _860;
    vec4 _899 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_9, SS_DiffuseMap), vec2((_831 * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (_832 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _901 = _899.x;
    float _902 = _899.y;
    float _903 = _899.z;
    vec4 _904 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_9, SS_DiffuseMap), vec2((_835 * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (_836 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _955 = (cbMtdParam._m0[24u].w * cbMtdParam._m0[13u].x) * ((_757 + (_514 * cbMtdParam._m0[12u].x)) + ((((_872 * cbMtdParam._m0[9u].x) - _757) + (((((cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x) * _872) * cbMtdParam._m0[25u].z) + cbMtdParam._m0[10u].x) * (((_904.x - _901) * _839) + _901))) * _765));
    float _957 = (cbMtdParam._m0[24u].w * cbMtdParam._m0[13u].y) * ((_758 + (_514 * cbMtdParam._m0[12u].y)) + ((((_873 * cbMtdParam._m0[9u].y) - _758) + (((((cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y) * _873) * cbMtdParam._m0[25u].z) + cbMtdParam._m0[10u].y) * (((_904.y - _902) * _839) + _902))) * _765));
    float _959 = (cbMtdParam._m0[24u].w * cbMtdParam._m0[13u].z) * ((_759 + (_514 * cbMtdParam._m0[12u].z)) + ((((_874 * cbMtdParam._m0[9u].z) - _759) + ((((cbMtdParam._m0[25u].z * _874) * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z) * (((_904.z - _903) * _839) + _903))) * _765));
    float _3719 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _966 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _976 = _319 / cbMtdParam._m0[20u].y;
    float _3730 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _977 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    vec4 _1025 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((_1005 / cbMtdParam._m0[19u].y) + (cbMtdParam._m0[32u].w * _429))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((_1009 / cbMtdParam._m0[19u].y) + (cbMtdParam._m0[33u].x * _429))) + cbTextureTilingScale._m0[1u].w));
    float _1029 = _459 * 0.23999999463558197021484375;
    float _1031 = _459 * (-0.20000000298023223876953125);
    float _1042 = cbMtdParam._m0[33u].w * TEXCOORD.x;
    float _1043 = cbMtdParam._m0[34u].x * TEXCOORD.y;
    vec4 _1058 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[33u].y * _429) + _1029) + _1042) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[33u].z * _429) + _1031) + _1043) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1074 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1042 + _1029) + (cbMtdParam._m0[34u].y * _429)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1043 + _1031) + (cbMtdParam._m0[34u].z * _429)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1094 = (((_503.x + (-0.5)) * 0.5) + _486.x) + (((_1058.x + (-1.0)) + _1074.x) * cbMtdParam._m0[21u].z);
    float _1095 = (((_503.y + (-0.5)) * 0.5) + _486.y) + (((_1058.y + (-1.0)) + _1074.y) * cbMtdParam._m0[21u].z);
    float _1100 = ((_1025.x - _1094) * _977) + _1094;
    float _1101 = ((_1025.y - _1095) * _977) + _1095;
    float _1103 = _319 / cbMtdParam._m0[20u].x;
    float _3741 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1104 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _1120 = ((((_966 * (0.5 - _454)) + _454) + (((_1100 + (-0.5)) + ((0.5 - _1100) * _1104)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1121 = ((((_966 * (0.5 - _455)) + _455) + (((_1101 + (-0.5)) + ((0.5 - _1101) * _1104)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1122 = dot(vec2(_1120, _1121), vec2(_1120, _1121));
    float _3752 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _1127 = sqrt(1.0 - (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))));
    float _1129 = cbMtdParam._m0[21u].x * _324;
    float _3763 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _1135 = ((cbMtdParam._m0[21u].y - cbMtdParam._m0[19u].w) * (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) + cbMtdParam._m0[19u].w;
    float _1140 = _1120 - (_1135 * _1120);
    float _1141 = _1121 - (_1135 * _1121);
    float _1142 = (_1135 * (1.0 - _1127)) + _1127;
    float _1152 = fma(_1127, _236, fma(_1121, _243, _1120 * _229));
    float _1155 = fma(_1127, _237, fma(_1121, _244, _1120 * _230));
    float _1158 = fma(_1127, _238, fma(_1121, _245, _1120 * _231));
    float _1162 = inversesqrt(dot(vec3(_1152, _1155, _1158), vec3(_1152, _1155, _1158)));
    float _1163 = _1162 * _1152;
    float _1164 = _1162 * _1155;
    float _1165 = _1162 * _1158;
    float _1168 = fma(_1142, _236, fma(_1141, _243, _1140 * _229));
    float _1171 = fma(_1142, _237, fma(_1141, _244, _1140 * _230));
    float _1174 = fma(_1142, _238, fma(_1141, _245, _1140 * _231));
    float _1178 = inversesqrt(dot(vec3(_1168, _1171, _1174), vec3(_1168, _1171, _1174)));
    float _1179 = _1178 * _1168;
    float _1180 = _1178 * _1171;
    float _1181 = _1178 * _1174;
    float _3774 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _3785 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _1183 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _1197 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1217 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1226 = cbSceneParam._m0[71u].x - (_1005 / _1217);
    float _1227 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1217);
    float _1228 = cbSceneParam._m0[71u].z - (_1009 / _1217);
    float _1232 = inversesqrt(dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228)));
    float _1233 = _1226 * _1232;
    float _1234 = _1227 * _1232;
    float _1235 = _1228 * _1232;
    vec4 _1240 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1242 = _1240.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1416 = sqrt(((_1226 * _1226) + (_1227 * _1227)) + (_1228 * _1228));
        float _1422 = (cbMatDynParam._m0[5u].x * _1416) + cbMatDynParam._m0[5u].y;
        float _3796 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1427 = (cbMatDynParam._m0[5u].z * _1416) + cbMatDynParam._m0[5u].w;
        float _3807 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) - _1423)) + _1423) < ((_1242 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1252 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1253 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1255 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1264 = (_1255.x * 2.0) + (-1.0);
    float _1265 = (_1255.y * 2.0) + (-1.0);
    float _1266 = (_1255.z * 2.0) + (-1.0);
    float _1270 = inversesqrt(dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266)));
    float _1281 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _1255.w;
    float _1288 = (((_1264 * _1270) - _1163) * _1281) + _1163;
    float _1289 = (((_1265 * _1270) - _1164) * _1281) + _1164;
    float _1290 = (((_1266 * _1270) - _1165) * _1281) + _1165;
    float _1308 = fma(_1290, cbSceneParam._m0[5u].z, fma(_1289, cbSceneParam._m0[5u].y, _1288 * cbSceneParam._m0[5u].x));
    float _1311 = fma(_1290, cbSceneParam._m0[6u].z, fma(_1289, cbSceneParam._m0[6u].y, _1288 * cbSceneParam._m0[6u].x));
    float _1314 = fma(_1290, cbSceneParam._m0[7u].z, fma(_1289, cbSceneParam._m0[7u].y, _1288 * cbSceneParam._m0[7u].x));
    vec4 _1323 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1252, cbSceneParam._m0[86u].y * _1253));
    float _1326 = _1323.x * TEXCOORD_3.w;
    float _1330 = abs(dot(vec3(_1233, _1234, _1235), vec3(_1288, _1289, _1290)));
    float _3818 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
    float _1342 = dot(vec3(_1179, _1180, _1181), vec3(_1233, _1234, _1235)) * 2.0;
    float _1346 = (_1342 * _1179) - _1233;
    float _1347 = (_1342 * _1180) - _1234;
    float _1348 = (_1342 * _1181) - _1235;
    float _1352 = abs(dot(vec3(_1233, _1234, _1235), vec3(_1179, _1180, _1181)));
    float _3829 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
    float _1354 = sqrt(_1183);
    float _1366 = exp2((_1354 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1354 * 3.0));
    float _1397 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1401 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1405 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1596;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1459 = fma(_1405, cbModelParam._m0[26u].z, fma(_1401, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1397));
        float _1463 = fma(_1405, cbModelParam._m0[27u].z, fma(_1401, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1397));
        float _1467 = fma(_1405, cbModelParam._m0[28u].z, fma(_1401, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1397));
        float _1490 = _1397 + _1179;
        float _1491 = _1401 + _1180;
        float _1492 = _1405 + _1181;
        float _1502 = fma(_1492, cbModelParam._m0[26u].z, fma(_1491, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1490)) - _1459;
        float _1503 = fma(_1492, cbModelParam._m0[27u].z, fma(_1491, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1490)) - _1463;
        float _1504 = fma(_1492, cbModelParam._m0[28u].z, fma(_1491, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1490)) - _1467;
        float _1508 = inversesqrt(dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504)));
        float _1520 = ((_1508 * _1502) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1459 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1521 = ((_1508 * _1503) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1463 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1522 = ((_1508 * _1504) / cbModelParam._m0[34u].z) + ((((((_1467 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1525 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1520, _1521, _1522), 0.0);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1520, _1521, _1522), 0.0);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1520, _1521, _1522), 0.0);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1520, _1521, _1522), 0.0);
        float _1559 = exp2((_1525.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1589 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1546.x + (-0.5));
        float _1591 = _1589 * (_1546.y + (-0.5));
        float _1592 = _1589 * (_1546.z + (-0.5));
        _1596 = _1559 * (_1525.z + (-0.5));
        _1598 = _1559 * (_1525.y + (-0.5));
        _1599 = _1559 * (_1525.x + (-0.5));
        _1600 = _1569 * (_1532.z + (-0.5));
        _1601 = _1569 * (_1532.y + (-0.5));
        _1602 = _1569 * (_1532.x + (-0.5));
        _1603 = _1579 * (_1539.z + (-0.5));
        _1604 = _1579 * (_1539.y + (-0.5));
        _1605 = _1579 * (_1539.x + (-0.5));
        _1606 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        _1607 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        _1608 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
    }
    else
    {
        _1596 = _1597;
        _1598 = _1597;
        _1599 = _1597;
        _1600 = _1597;
        _1601 = _1597;
        _1602 = _1597;
        _1603 = _1597;
        _1604 = _1597;
        _1605 = _1597;
        _1606 = _1597;
        _1607 = _1597;
        _1608 = _1597;
    }
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1634 = fma(_1405, cbModelParam._m0[30u].z, fma(_1401, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1397));
        float _1638 = fma(_1405, cbModelParam._m0[31u].z, fma(_1401, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1397));
        float _1642 = fma(_1405, cbModelParam._m0[32u].z, fma(_1401, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1397));
        float _1665 = _1397 + _1179;
        float _1666 = _1401 + _1180;
        float _1667 = _1405 + _1181;
        float _1677 = fma(_1667, cbModelParam._m0[30u].z, fma(_1666, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1665)) - _1634;
        float _1678 = fma(_1667, cbModelParam._m0[31u].z, fma(_1666, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1665)) - _1638;
        float _1679 = fma(_1667, cbModelParam._m0[32u].z, fma(_1666, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1665)) - _1642;
        float _1683 = inversesqrt(dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679)));
        float _1695 = ((_1683 * _1677) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1634 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1696 = ((_1683 * _1678) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1638 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1697 = ((_1683 * _1679) / cbModelParam._m0[35u].z) + ((((((_1642 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1699 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1695, _1696, _1697), 0.0);
        vec4 _1706 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1695, _1696, _1697), 0.0);
        vec4 _1713 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1695, _1696, _1697), 0.0);
        vec4 _1720 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1695, _1696, _1697), 0.0);
        float _1732 = exp2((_1699.w + (-0.5)) * 20.0) * 2.0;
        float _1742 = exp2((_1706.w + (-0.5)) * 20.0) * 2.0;
        float _1752 = exp2((_1713.w + (-0.5)) * 20.0) * 2.0;
        float _1762 = exp2((_1720.w + (-0.5)) * 20.0) * 2.0;
        float _1763 = _1762 * (_1720.x + (-0.5));
        float _1764 = _1762 * (_1720.y + (-0.5));
        float _1765 = _1762 * (_1720.z + (-0.5));
        _1769 = _1732 * (_1699.z + (-0.5));
        _1770 = _1732 * (_1699.y + (-0.5));
        _1771 = _1732 * (_1699.x + (-0.5));
        _1772 = _1742 * (_1706.z + (-0.5));
        _1773 = _1742 * (_1706.y + (-0.5));
        _1774 = _1742 * (_1706.x + (-0.5));
        _1775 = _1752 * (_1713.z + (-0.5));
        _1776 = _1752 * (_1713.y + (-0.5));
        _1777 = _1752 * (_1713.x + (-0.5));
        _1778 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        _1779 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        _1780 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    }
    else
    {
        _1769 = _1597;
        _1770 = _1597;
        _1771 = _1597;
        _1772 = _1597;
        _1773 = _1597;
        _1774 = _1597;
        _1775 = _1597;
        _1776 = _1597;
        _1777 = _1597;
        _1778 = _1597;
        _1779 = _1597;
        _1780 = _1597;
    }
    float _1794 = _1346 * 0.5;
    float _1795 = _1347 * 0.5;
    float _1796 = _1348 * 0.5;
    float _1797 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1771, _1774, _1777, _1780));
    float _1800 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1770, _1773, _1776, _1779));
    float _1803 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1769, _1772, _1775, _1778));
    float _1838;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1810 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1596, _1600, _1603, _1606));
        float _1814 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1598, _1601, _1604, _1607));
        float _1818 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1599, _1602, _1605, _1608));
        float _1825 = dot(vec4(cbModelParam._m0[39u]), vec4(_1794, _1795, _1796, 1.0));
        _1838 = dot(vec3(isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1825) ? 0.0 : (isnan(0.0) ? _1825 : max(0.0, _1825))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1838 = 1.0;
    }
    float _1849;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1840 = dot(vec4(cbModelParam._m0[40u]), vec4(_1794, _1795, _1796, 1.0));
        _1849 = dot(vec3(isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1840) ? 0.0 : (isnan(0.0) ? _1840 : max(0.0, _1840))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1849 = 1.0;
    }
    float _1853 = (_1849 * cbModelParam._m0[1u].x) + (_1838 * (1.0 - cbModelParam._m0[1u].x));
    float _1860 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1183);
    float _1861 = isnan(_1860) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1860 : min(cbModelParam._m0[25u].z, _1860));
    float _1941;
    float _1943;
    float _1945;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1908 = fma(_1405, cbModelParam._m0[13u].z, fma(_1401, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1397)) + cbModelParam._m0[13u].w;
        float _1912 = fma(_1405, cbModelParam._m0[14u].z, fma(_1401, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1397)) + cbModelParam._m0[14u].w;
        float _1916 = fma(_1405, cbModelParam._m0[15u].z, fma(_1401, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1397)) + cbModelParam._m0[15u].w;
        float _1919 = fma(_1348, cbModelParam._m0[13u].z, fma(_1347, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1346));
        float _1922 = fma(_1348, cbModelParam._m0[14u].z, fma(_1347, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1346));
        float _1925 = fma(_1348, cbModelParam._m0[15u].z, fma(_1347, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1346));
        float _1953;
        if (_1919 > 0.0)
        {
            _1953 = abs((1.0 - _1908) / _1919);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1908 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1953 = frontier_phi_17_15_ladder;
        }
        float _2283;
        if (_1922 > 0.0)
        {
            _2283 = abs((1.0 - _1912) / _1922);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1912 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2283 = frontier_phi_26_22_ladder;
        }
        float _2754;
        if (_1925 > 0.0)
        {
            _2754 = abs((1.0 - _1916) / _1925);
        }
        else
        {
            float frontier_phi_40_33_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_40_33_ladder = abs((_1916 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_40_33_ladder = 5000.0;
            }
            _2754 = frontier_phi_40_33_ladder;
        }
        float _2756 = isnan(_2283) ? _1953 : (isnan(_1953) ? _2283 : min(_1953, _2283));
        float _2757 = isnan(_2754) ? _2756 : (isnan(_2756) ? _2754 : min(_2756, _2754));
        float _2761 = (_2757 * _1919) + _1908;
        float _2762 = (_2757 * _1922) + _1912;
        float _2763 = (_2757 * _1925) + _1916;
        float _2764 = _2757 * 9.9999997473787516355514526367188e-05;
        float _2765 = (-1.0) - _2764;
        float _2767 = _2764 + 1.0;
        float frontier_phi_16_40_ladder;
        float frontier_phi_16_40_ladder_1;
        float frontier_phi_16_40_ladder_2;
        if ((_2763 > _2767) || ((_2763 < _2765) || ((_2762 > _2767) || ((_2762 < _2765) || ((_2761 < _2765) || (_2761 > _2767))))))
        {
            frontier_phi_16_40_ladder = 0.0;
            frontier_phi_16_40_ladder_1 = 0.0;
            frontier_phi_16_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2893 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2763, cbModelParam._m0[9u].z, fma(_2762, cbModelParam._m0[9u].y, _2761 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2763, cbModelParam._m0[10u].z, fma(_2762, cbModelParam._m0[10u].y, _2761 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2763, cbModelParam._m0[11u].z, fma(_2762, cbModelParam._m0[11u].y, _2761 * cbModelParam._m0[11u].x))), _1861);
            frontier_phi_16_40_ladder = _2893.z * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_1 = _2893.x * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_2 = _2893.y * cbModelParam._m0[1u].y;
        }
        _1941 = frontier_phi_16_40_ladder_1;
        _1943 = frontier_phi_16_40_ladder_2;
        _1945 = frontier_phi_16_40_ladder;
    }
    else
    {
        vec4 _1929 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1346, _1347, _1348), _1861);
        _1941 = _1929.x * cbModelParam._m0[1u].y;
        _1943 = _1929.y * cbModelParam._m0[1u].y;
        _1945 = _1929.z * cbModelParam._m0[1u].y;
    }
    float _1949 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1183);
    float _1950 = isnan(_1949) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1949 : min(cbModelParam._m0[25u].w, _1949));
    float _2039;
    float _2041;
    float _2043;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2003 = fma(_1405, cbModelParam._m0[21u].z, fma(_1401, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1397)) + cbModelParam._m0[21u].w;
        float _2007 = fma(_1405, cbModelParam._m0[22u].z, fma(_1401, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1397)) + cbModelParam._m0[22u].w;
        float _2011 = fma(_1405, cbModelParam._m0[23u].z, fma(_1401, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1397)) + cbModelParam._m0[23u].w;
        float _2014 = fma(_1348, cbModelParam._m0[21u].z, fma(_1347, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1346));
        float _2017 = fma(_1348, cbModelParam._m0[22u].z, fma(_1347, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1346));
        float _2020 = fma(_1348, cbModelParam._m0[23u].z, fma(_1347, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1346));
        float _2288;
        if (_2014 > 0.0)
        {
            _2288 = abs((1.0 - _2003) / _2014);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2003 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2288 = frontier_phi_28_24_ladder;
        }
        float _2780;
        if (_2017 > 0.0)
        {
            _2780 = abs((1.0 - _2007) / _2017);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_2007 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _2780 = frontier_phi_42_35_ladder;
        }
        float _2955;
        if (_2020 > 0.0)
        {
            _2955 = abs((1.0 - _2011) / _2020);
        }
        else
        {
            float frontier_phi_60_53_ladder;
            if (_2020 < 0.0)
            {
                frontier_phi_60_53_ladder = abs((_2011 + 1.0) / _2020);
            }
            else
            {
                frontier_phi_60_53_ladder = 5000.0;
            }
            _2955 = frontier_phi_60_53_ladder;
        }
        float _2957 = isnan(_2780) ? _2288 : (isnan(_2288) ? _2780 : min(_2288, _2780));
        float _2958 = isnan(_2955) ? _2957 : (isnan(_2957) ? _2955 : min(_2957, _2955));
        float _2962 = (_2958 * _2014) + _2003;
        float _2963 = (_2958 * _2017) + _2007;
        float _2964 = (_2958 * _2020) + _2011;
        float _2965 = _2958 * 9.9999997473787516355514526367188e-05;
        float _2966 = (-1.0) - _2965;
        float _2968 = _2965 + 1.0;
        float frontier_phi_25_60_ladder;
        float frontier_phi_25_60_ladder_1;
        float frontier_phi_25_60_ladder_2;
        if ((_2964 > _2968) || ((_2964 < _2966) || ((_2963 > _2968) || ((_2963 < _2966) || ((_2962 < _2966) || (_2962 > _2968))))))
        {
            frontier_phi_25_60_ladder = 0.0;
            frontier_phi_25_60_ladder_1 = 0.0;
            frontier_phi_25_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3179 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2964, cbModelParam._m0[17u].z, fma(_2963, cbModelParam._m0[17u].y, _2962 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2964, cbModelParam._m0[18u].z, fma(_2963, cbModelParam._m0[18u].y, _2962 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2964, cbModelParam._m0[19u].z, fma(_2963, cbModelParam._m0[19u].y, _2962 * cbModelParam._m0[19u].x))), _1950);
            frontier_phi_25_60_ladder = _3179.z * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_1 = _3179.y * cbModelParam._m0[1u].z;
            frontier_phi_25_60_ladder_2 = _3179.x * cbModelParam._m0[1u].z;
        }
        _2039 = frontier_phi_25_60_ladder_2;
        _2041 = frontier_phi_25_60_ladder_1;
        _2043 = frontier_phi_25_60_ladder;
    }
    else
    {
        vec4 _2023 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1346, _1347, _1348), _1950);
        _2039 = _2023.x * cbModelParam._m0[1u].z;
        _2041 = _2023.y * cbModelParam._m0[1u].z;
        _2043 = _2023.z * cbModelParam._m0[1u].z;
    }
    float _2055 = ((((1.0 - _1366) * ((_1354 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1366 * _1354)) * _1326;
    float _2056 = _2055 * ((cbModelParam._m0[1u].w * (_2039 - _1941)) + _1941);
    float _2057 = _2055 * ((cbModelParam._m0[1u].w * (_2041 - _1943)) + _1943);
    float _2058 = _2055 * ((cbModelParam._m0[1u].w * (_2043 - _1945)) + _1945);
    float _2079 = fma(_2058, cbSceneParam._m0[89u].z, fma(_2057, cbSceneParam._m0[89u].y, _2056 * cbSceneParam._m0[89u].x));
    float _2082 = fma(_2058, cbSceneParam._m0[90u].z, fma(_2057, cbSceneParam._m0[90u].y, _2056 * cbSceneParam._m0[90u].x));
    float _2085 = fma(_2058, cbSceneParam._m0[91u].z, fma(_2057, cbSceneParam._m0[91u].y, _2056 * cbSceneParam._m0[91u].x));
    uint _2092 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _2096 = floatBitsToUint(cbInstanceData._m0[_2092 + 5u]);
    uint _2098 = _2096.x * 14u;
    uint _2099 = _2098 + 13u;
    float _2104 = _1326 + (-1.0);
    float _2107 = (cbLight._m0[_2099].x * _2104) + 1.0;
    float _2108 = (cbLight._m0[_2099].y * _2104) + 1.0;
    uint _2112 = _2098 + 8u;
    float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _1183) * 0.949999988079071044921875);
    float _2129 = _2128 * _2128;
    float _2130 = cbLight._m0[_2098].x + _1233;
    float _2131 = cbLight._m0[_2098].y + _1234;
    float _2132 = cbLight._m0[_2098].z + _1235;
    float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
    float _2137 = _2136 * _2130;
    float _2138 = _2136 * _2131;
    float _2139 = _2136 * _2132;
    float _2140 = dot(vec3(_1288, _1289, _1290), vec3(cbLight._m0[_2098].xyz));
    float _3955 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _2144 = dot(vec3(_1288, _1289, _1290), vec3(_1233, _1234, _1235));
    float _3966 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _2148 = dot(vec3(_1288, _1289, _1290), vec3(_2137, _2138, _2139));
    float _3977 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _2152 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2137, _2138, _2139));
    float _3988 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2156 = _2129 * _2129;
    float _2160 = ((_2151 * _2151) * (_2156 + (-1.0))) + 1.0;
    float _2171 = (exp2(log2(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2172 = 1.0 - _2129;
    float _2183 = (0.5 / (((_2147 * ((_2143 * _2172) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2172) + _2129) * _2143))) * _2143;
    float _3999 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2185 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_2156 / ((_2160 * _2160) * 3.141590118408203125));
    float _2186 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
    uint _2196 = _2098 | 1u;
    uint _2200 = _2098 + 9u;
    float _2214 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2196].w)) * _1183) * 0.949999988079071044921875);
    float _2215 = _2214 * _2214;
    float _2216 = cbLight._m0[_2196].x + _1233;
    float _2217 = cbLight._m0[_2196].y + _1234;
    float _2218 = cbLight._m0[_2196].z + _1235;
    float _2222 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
    float _2223 = _2222 * _2216;
    float _2224 = _2222 * _2217;
    float _2225 = _2222 * _2218;
    float _2226 = dot(vec3(_1288, _1289, _1290), vec3(cbLight._m0[_2196].xyz));
    float _4015 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _2230 = dot(vec3(_1288, _1289, _1290), vec3(_2223, _2224, _2225));
    float _4026 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _2234 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_2223, _2224, _2225));
    float _4037 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2238 = _2215 * _2215;
    float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
    float _2251 = (exp2(log2(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2252 = 1.0 - _2215;
    float _2262 = (0.5 / (((_2147 * ((_2229 * _2252) + _2215)) + 9.9999999392252902907785028219223e-09) + (((_2147 * _2252) + _2215) * _2229))) * _2229;
    float _4048 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2264 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
    float _2265 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
    float _2275 = (((_2251 * cbLight._m0[_2200].x) * _2264) * _2265) + (((_2171 * cbLight._m0[_2112].x) * _2185) * _2186);
    float _2276 = (((_2251 * cbLight._m0[_2200].y) * _2264) * _2265) + (((_2171 * cbLight._m0[_2112].y) * _2185) * _2186);
    float _2277 = (((_2251 * cbLight._m0[_2200].z) * _2264) * _2265) + (((_2171 * cbLight._m0[_2112].z) * _2185) * _2186);
    float _2392;
    float _2394;
    float _2396;
    if (_2096.y == 0u)
    {
        float _2332 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2333 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2332;
        float _2334 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2332;
        float _2335 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2332;
        uvec4 _2347 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2348 = _2347.x;
        uint _2359 = uint((float(_2347.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1253) / _2348))) + floor(float(uint(cbSceneParam._m0[85u].x * _1252) / _2348)));
        float _2369 = (log2(_2335 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2370 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        uint _2373 = uint(isnan(14.0) ? _2370 : (isnan(_2370) ? 14.0 : min(_2370, 14.0)));
        uvec4 _2378 = texelFetch(g_lightClusterGridBuffer, int(((_2373 << 2u) + (_2359 << 6u)) >> 2u));
        uint _2379 = _2378.x;
        uint _2380 = _2347.z;
        float _2596;
        float _2598;
        float _2600;
        if (((((1u << ((_2380 >> 4u) & 15u)) + 4294967295u) & _2379) == 0u) || ((_2380 & 240u) == 0u))
        {
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
        }
        else
        {
            float _2597;
            float _2599;
            float _2601;
            float _2808 = 0.0;
            float _2809 = 0.0;
            float _2810 = 0.0;
            uint _2811 = 0u;
            uint _2820;
            bool _2821;
            for (;;)
            {
                _2820 = texelFetch(g_lightClassification, int((((_2373 << 5u) + (_2359 << 9u)) + (_2811 << 2u)) >> 2u)).x;
                _2821 = _2820 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                if (_2821)
                {
                    frontier_phi_55_pred = _2810;
                    frontier_phi_55_pred_1 = _2809;
                    frontier_phi_55_pred_2 = _2808;
                }
                else
                {
                    float _2995;
                    float _2996;
                    float _2997;
                    uint _2998;
                    _2995 = _2808;
                    _2996 = _2809;
                    _2997 = _2810;
                    _2998 = _2820;
                    float _2902;
                    float _2903;
                    float _2904;
                    for (;;)
                    {
                        uint _3002 = uint(findLSB(_2998)) + (_2811 << 5u);
                        uint _2999 = (_2998 + 4294967295u) & _2998;
                        uint _3004 = _3002 * 48u;
                        vec4 _3018 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3004)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 3u)).x));
                        uint _3035 = (_3002 * 48u) + 8u;
                        vec3 _3046 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3035)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 2u)).x));
                        float _3050 = _3018.x - _2333;
                        float _3051 = _3018.y - _2334;
                        float _3052 = _3018.z - _2335;
                        float _3053 = dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052));
                        float _3056 = inversesqrt(_3053);
                        float _3057 = _3056 * _3050;
                        float _3058 = _3056 * _3051;
                        float _3059 = _3056 * _3052;
                        float _3065 = 1.0 - (_3053 * _3018.w);
                        float _4074 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3067 = sqrt(_3053) * uintBitsToFloat(uvec4(_3025, _3026, _3027, texelFetch(g_PointLightRenderingBuffer, int(((_3002 * 48u) + 4u) + 3u)).x)).w;
                        float _3071 = _3067 * _3067;
                        float _3072 = (-0.0) - _2333;
                        float _3073 = (-0.0) - _2334;
                        float _3074 = (-0.0) - _2335;
                        float _3078 = inversesqrt(dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074)));
                        float _3079 = _3078 * _3072;
                        float _3080 = _3078 * _3073;
                        float _3081 = _3078 * _3074;
                        float _3089 = exp2(log2(1.0 / ((_3071 * 3.5) + 5.0)) * 0.25);
                        float _3090 = 1.0 - _1354;
                        float _3097 = sqrt(1.0 - ((1.0 - (_3090 * _3090)) * (1.0 - (_3089 * _3089))));
                        float _3098 = _3097 * _3097;
                        float _3099 = _3098 * _3098;
                        float _3100 = _3079 + _3057;
                        float _3101 = _3080 + _3058;
                        float _3102 = _3081 + _3059;
                        float _3106 = inversesqrt(dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102)));
                        float _3110 = dot(vec3(_1308, _1311, _1314), vec3(_3079, _3080, _3081));
                        float _4085 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3113 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                        float _3114 = dot(vec3(_1308, _1311, _1314), vec3(_3106 * _3100, _3106 * _3101, _3106 * _3102));
                        float _4096 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3117 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                        float _3121 = ((_3117 * _3117) * (_3099 + (-1.0))) + 1.0;
                        float _3122 = (1.39999997615814208984375 / (_3067 + 1.39999997615814208984375)) * _3098;
                        float _3123 = _3122 * _3122;
                        float _3126 = ((1.0 - _3123) * dot(vec3(_1308, _1311, _1314), vec3(_3057, _3058, _3059))) + _3123;
                        float _4107 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3127 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                        float _3128 = 1.0 - _3098;
                        float _3138 = (0.5 / (((_3127 * ((_3113 * _3128) + _3098)) + 9.9999999392252902907785028219223e-09) + (((_3127 * _3128) + _3098) * _3113))) * _3127;
                        float _4118 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3149 = (((_3099 * 3.1415927410125732421875) * (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) / ((_3121 * _3121) * ((_3071 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)));
                        _2902 = (_3149 * _3046.x) + _2995;
                        _2903 = (_3149 * _3046.y) + _2996;
                        _2904 = (_3149 * _3046.z) + _2997;
                        if (_2999 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2995 = _2902;
                            _2996 = _2903;
                            _2997 = _2904;
                            _2998 = _2999;
                        }
                    }
                    frontier_phi_55_pred = _2904;
                    frontier_phi_55_pred_1 = _2903;
                    frontier_phi_55_pred_2 = _2902;
                }
                _2601 = frontier_phi_55_pred;
                _2599 = frontier_phi_55_pred_1;
                _2597 = frontier_phi_55_pred_2;
                uint _2812 = _2811 + 1u;
                if (_2812 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2808 = _2597;
                    _2809 = _2599;
                    _2810 = _2601;
                    _2811 = _2812;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
        }
        uvec4 _2604 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2605 = _2604.z;
        uint _2607 = (_2605 >> 8u) & 15u;
        float _2785;
        float _2787;
        float _2789;
        if (((4294967295u << _2607) & _2379) == 0u)
        {
            _2785 = _2596;
            _2787 = _2598;
            _2789 = _2600;
        }
        else
        {
            float _2801 = inversesqrt(dot(vec3(_2333, _2334, _2335), vec3(_2333, _2334, _2335)));
            float _2802 = _2801 * _2333;
            float _2803 = _2801 * _2334;
            float _2804 = _2801 * _2335;
            float frontier_phi_44_45_ladder;
            float frontier_phi_44_45_ladder_1;
            float frontier_phi_44_45_ladder_2;
            if (_2607 < ((_2605 >> 12u) & 15u))
            {
                float _2786;
                float _2788;
                float _2790;
                float _2981 = _2596;
                float _2982 = _2598;
                float _2983 = _2600;
                uint _2984 = _2607;
                uint _2993;
                bool _2994;
                for (;;)
                {
                    _2993 = texelFetch(g_lightClassification, int((((_2373 << 5u) + (_2359 << 9u)) + (_2984 << 2u)) >> 2u)).x;
                    _2994 = _2993 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    if (_2994)
                    {
                        frontier_phi_69_pred = _2981;
                        frontier_phi_69_pred_1 = _2982;
                        frontier_phi_69_pred_2 = _2983;
                    }
                    else
                    {
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3194 = _2981;
                        float _3195 = _2982;
                        float _3196 = _2983;
                        uint _3197 = _2993;
                        uint _3198;
                        uint _3208;
                        vec4 _3223;
                        float _3224;
                        vec3 _3236;
                        vec4 _3251;
                        vec4 _3266;
                        float _3312;
                        bool _3313;
                        for (;;)
                        {
                            _3208 = ((_2984 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3197));
                            _3198 = (_3197 + 4294967295u) & _3197;
                            uint _3210 = _3208 * 40u;
                            _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            _3224 = _3223.w;
                            uint _3226 = (_3208 * 40u) + 8u;
                            _3236 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x));
                            uint _3238 = (_3208 * 40u) + 16u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3253 = (_3208 * 40u) + 20u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3268 = (_3208 * 40u) + 24u;
                            vec4 _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            uint _3287 = (_3208 * 40u) + 28u;
                            vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            _3312 = fma(_2335, _3300.z, fma(_2334, _3300.y, _3300.x * _2333)) + _3300.w;
                            _3313 = !((fma(_2335, _3281.z, fma(_2334, _3281.y, _3281.x * _2333)) + _3281.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            if (_3313)
                            {
                                float _3347 = _3223.x - _2333;
                                float _3348 = _3223.y - _2334;
                                float _3349 = _3223.z - _2335;
                                float _3350 = dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349));
                                float _3353 = inversesqrt(_3350);
                                float _3354 = _3353 * _3347;
                                float _3355 = _3353 * _3348;
                                float _3356 = _3353 * _3349;
                                float _3360 = 1.0 - (_3350 / (_3224 * _3224));
                                float _4129 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3362 = sqrt(_3350) * uintBitsToFloat(uvec4(_3316, _3317, _3318, texelFetch(g_SpotLightRenderingBuffer, int(((_3208 * 40u) + 4u) + 3u)).x)).w;
                                float _3365 = _3362 * _3362;
                                float _3366 = (fma(_2335, _3251.z, fma(_2334, _3251.y, _3251.x * _2333)) + _3251.w) / _3312;
                                float _3367 = (fma(_2335, _3266.z, fma(_2334, _3266.y, _3266.x * _2333)) + _3266.w) / _3312;
                                float _3371 = 1.0 - dot(vec2(_3366, _3367), vec2(_3366, _3367));
                                float _4140 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3381 = exp2(log2(1.0 / ((_3365 * 3.5) + 5.0)) * 0.25);
                                float _3382 = 1.0 - _1354;
                                float _3389 = sqrt(1.0 - ((1.0 - (_3382 * _3382)) * (1.0 - (_3381 * _3381))));
                                float _3390 = _3389 * _3389;
                                float _3391 = _3390 * _3390;
                                float _3392 = _3354 - _2802;
                                float _3393 = _3355 - _2803;
                                float _3394 = _3356 - _2804;
                                float _3398 = inversesqrt(dot(vec3(_3392, _3393, _3394), vec3(_3392, _3393, _3394)));
                                float _3402 = dot(vec3(_1308, _1311, _1314), vec3((-0.0) - _2802, (-0.0) - _2803, (-0.0) - _2804));
                                float _4151 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3405 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                                float _3406 = dot(vec3(_1308, _1311, _1314), vec3(_3398 * _3392, _3398 * _3393, _3398 * _3394));
                                float _4162 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3409 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                                float _3413 = ((_3409 * _3409) * (_3391 + (-1.0))) + 1.0;
                                float _3414 = (1.39999997615814208984375 / (_3362 + 1.39999997615814208984375)) * _3390;
                                float _3415 = _3414 * _3414;
                                float _3421 = ((1.0 - _3415) * dot(vec3(_1308, _1311, _1314), vec3(_3354, _3355, _3356))) + _3415;
                                float _4173 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3422 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                                float _3423 = 1.0 - _3390;
                                float _3433 = (0.5 / (((_3422 * ((_3405 * _3423) + _3390)) + 9.9999999392252902907785028219223e-09) + (((_3422 * _3423) + _3390) * _3405))) * _3422;
                                float _4184 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3443 = ((isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * (((_3391 * 3.1415927410125732421875) * (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) / ((_3413 * _3413) * ((_3365 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3443 * _3236.z;
                                frontier_phi_75_pred_1 = _3443 * _3236.x;
                                frontier_phi_75_pred_2 = _3443 * _3236.y;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                            }
                            _3449 = frontier_phi_75_pred;
                            _3447 = frontier_phi_75_pred_1;
                            _3448 = frontier_phi_75_pred_2;
                            _3184 = _3447 + _3194;
                            _3185 = _3448 + _3195;
                            _3186 = _3449 + _3196;
                            if (_3198 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3194 = _3184;
                                _3195 = _3185;
                                _3196 = _3186;
                                _3197 = _3198;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3184;
                        frontier_phi_69_pred_1 = _3185;
                        frontier_phi_69_pred_2 = _3186;
                    }
                    _2786 = frontier_phi_69_pred;
                    _2788 = frontier_phi_69_pred_1;
                    _2790 = frontier_phi_69_pred_2;
                    uint _2985 = _2984 + 1u;
                    if (_2985 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2981 = _2786;
                        _2982 = _2788;
                        _2983 = _2790;
                        _2984 = _2985;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_44_45_ladder = _2790;
                frontier_phi_44_45_ladder_1 = _2788;
                frontier_phi_44_45_ladder_2 = _2786;
            }
            else
            {
                frontier_phi_44_45_ladder = _2600;
                frontier_phi_44_45_ladder_1 = _2598;
                frontier_phi_44_45_ladder_2 = _2596;
            }
            _2785 = frontier_phi_44_45_ladder_2;
            _2787 = frontier_phi_44_45_ladder_1;
            _2789 = frontier_phi_44_45_ladder;
        }
        float _2794 = isnan(1.0) ? _1326 : (isnan(_1326) ? 1.0 : min(_1326, 1.0));
        _2392 = ((_2785 * 0.039999999105930328369140625) * _2794) + _2275;
        _2394 = ((_2787 * 0.039999999105930328369140625) * _2794) + _2276;
        _2396 = ((_2789 * 0.039999999105930328369140625) * _2794) + _2277;
    }
    else
    {
        _2392 = _2275;
        _2394 = _2276;
        _2396 = _2277;
    }
    uint _2402 = _2092 + 9u;
    uint _2403 = _2402 + uint(cbMatDynParam._m0[0u].w);
    float _2409 = cbInstanceData._m0[_2403].x * (_955 - (_955 * TEXCOORD_7.x));
    float _2410 = cbInstanceData._m0[_2403].y * (_957 - (_957 * TEXCOORD_7.y));
    float _2411 = cbInstanceData._m0[_2403].z * (_959 - (_959 * TEXCOORD_7.z));
    float _2431 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2432 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2433 = cbSceneParam._m0[86u].x * ((_1252 / cbSceneParam._m0[86u].x) + ((0.0999999940395355224609375 / (_1197 + 10.0)) * dot(vec3(_1288, _1289, _1290), vec3(_229, _230, _231))));
    float _2434 = isnan(_2431) ? _2433 : (isnan(_2433) ? _2431 : min(_2433, _2431));
    float _2435 = isnan(_2432) ? _1253 : (isnan(_1253) ? _2432 : min(_1253, _2432));
    vec4 _2437 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2434, _2435), 0.0);
    float _2439 = _2437.x;
    bool _2459 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2439)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2439))) > _1197;
    float _2460 = _2459 ? _2434 : _1252;
    float _2461 = _2459 ? _2435 : _1253;
    vec4 _2463 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2460, _2461));
    vec4 _2468 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2460, _2461));
    float _2470 = _2468.x;
    float _2490 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2470)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2470))) - _1197;
    bool _2497 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2501 = (isnan(_2490) ? 0.0 : (isnan(0.0) ? _2490 : max(0.0, _2490))) * (-1.44269502162933349609375);
    float _2521 = 0.4799999892711639404296875 - (exp2(log2(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) * 5.0) * 0.4799999892711639404296875);
    float _2532 = (_2409 + ((_2392 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1853)) * cbPerFrame._m0[3u].x)) + (((_2521 * _2463.x) * exp2(_2501 * (_2497 ? 0.0 : cbMtdParam._m0[35u].y))) * cbSceneParam._m0[72u].w);
    float _2534 = (_2410 + ((_2394 + ((isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))) * _1853)) * cbPerFrame._m0[3u].x)) + (((_2521 * _2463.y) * exp2(_2501 * (_2497 ? 0.0 : cbMtdParam._m0[35u].z))) * cbSceneParam._m0[72u].w);
    float _2536 = (_2411 + ((_2396 + ((isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0))) * _1853)) * cbPerFrame._m0[3u].x)) + (((_2521 * _2463.z) * exp2(_2501 * (_2497 ? 0.0 : cbMtdParam._m0[35u].w))) * cbSceneParam._m0[72u].w);
    float _2537 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2538 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2539 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2545 = cbMtdParam._m0[2u].x * _2409;
    float _2546 = cbMtdParam._m0[2u].y * _2410;
    float _2547 = cbMtdParam._m0[2u].z * _2411;
    float _4230 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2549 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _2554 = cbInstanceData._m0[_2092 + 6u].w * (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)));
    float _2559 = _1252 / cbSceneParam._m0[86u].x;
    float _2560 = _1253 / cbSceneParam._m0[86u].y;
    vec4 _2574 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2559, _2560, (log2((isnan(cbSceneParam._m0[77u].w) ? _1197 : (isnan(_1197) ? cbSceneParam._m0[77u].w : min(_1197, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2576 = _2574.x;
    float _2577 = _2574.y;
    float _2578 = _2574.z;
    float _2579 = _2574.w;
    float _2652;
    float _2654;
    float _2656;
    float _2658;
    if (_1197 > cbSceneParam._m0[78u].w)
    {
        float _2615 = isnan(_1197) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1197 : min(cbSceneParam._m0[80u].w, _1197));
        float _2616 = _2615 / _1197;
        float _2627 = _2616 * _1226;
        float _2628 = _1227 * _2616;
        float _2629 = (-0.0) - _2628;
        float _2630 = _2616 * _1228;
        float _2632 = (cbSceneParam._m0[77u].w * _2629) / _2615;
        float _2633 = _2632 + cbSceneParam._m0[79u].w;
        float _2634 = cbSceneParam._m0[79u].w - _2628;
        float _2640 = sqrt(((_2627 * _2627) + (_2628 * _2628)) + (_2630 * _2630));
        float _2643 = (1.0 - (cbSceneParam._m0[77u].w / _2615)) * _2640;
        float _2649 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2650 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2912;
        if (abs((_2629 - _2632) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2912 = ((((_2633 > 0.0) ? exp2(_2649 * _2633) : (2.0 - exp2(_2650 * _2633))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2643;
        }
        else
        {
            float _2834 = 1.0 / cbSceneParam._m0[80u].x;
            float _2835 = isnan(_2634) ? _2633 : (isnan(_2633) ? _2634 : max(_2633, _2634));
            float _2836 = isnan(_2634) ? _2633 : (isnan(_2633) ? _2634 : min(_2633, _2634));
            float _2845 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : min(_2835, 0.0));
            float _2846 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : min(_2836, 0.0));
            _2912 = ((abs(_2640 / _2629) * cbSceneParam._m0[80u].y) * ((((_2845 - _2846) * 2.0) - ((exp2(_2649 * (isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0)))) - exp2(_2649 * (isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0))))) * _2834)) - ((exp2(_2650 * _2845) - exp2(_2650 * _2846)) * _2834))) + (_2643 * cbSceneParam._m0[80u].z);
        }
        vec4 _2914 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2559, _2560, 1.0), 0.0);
        float _2923 = exp2((_2912 * (-1.44269502162933349609375)) * (1.0 - _2914.w));
        float _2924 = log2(_2923);
        float _2940 = log2(_2579);
        _2652 = (exp2(_2940 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2924 * cbSceneParam._m0[78u].x)) * _2914.x) / cbSceneParam._m0[78u].x)) + _2576;
        _2654 = (exp2(_2940 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2924 * cbSceneParam._m0[78u].y)) * _2914.y) / cbSceneParam._m0[78u].y)) + _2577;
        _2656 = (exp2(_2940 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2924 * cbSceneParam._m0[78u].z)) * _2914.z) / cbSceneParam._m0[78u].z)) + _2578;
        _2658 = _2923 * _2579;
    }
    else
    {
        _2652 = _2576;
        _2654 = _2577;
        _2656 = _2578;
        _2658 = _2579;
    }
    bool _2950;
    float _2713;
    vec4 _2716;
    float _2718;
    vec4 _2720;
    float _2728;
    float _2729;
    float _2730;
    float _2734;
    float _2738;
    float _2742;
    float _2743;
    bool _2753;
    for (;;)
    {
        bool _2670 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2671 = log2(_2658);
        float _2675 = exp2(_2671 * cbSceneParam._m0[78u].x);
        float _2676 = exp2(_2671 * cbSceneParam._m0[78u].y);
        float _2677 = exp2(_2671 * cbSceneParam._m0[78u].z);
        float _2678 = _2675 * _2537;
        float _2679 = _2676 * _2538;
        float _2680 = _2677 * _2539;
        vec4 _2688 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1252, _1253));
        float _2690 = _2688.x;
        float _2711 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2690)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2690))) - _1197) * cbMtdParam._m0[20u].z;
        float _4281 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2712 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        _2713 = _2554 * _2712;
        float _2714 = _1242 + (-0.5);
        _2716 = cbMtdParam._m0[1u];
        _2718 = _2716.y * _2714;
        _2720 = cbMatDynParam._m0[0u];
        float _2727 = (roundEven(_2720.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2728 = _2727 * (_2670 ? _2678 : (_2678 + (cbSceneParam._m0[72u].w * _2652)));
        _2729 = _2727 * (_2670 ? _2679 : (_2679 + (cbSceneParam._m0[72u].w * _2654)));
        _2730 = _2727 * (_2670 ? _2680 : (_2680 + (cbSceneParam._m0[72u].w * _2656)));
        _2734 = (((_2545 * _2549) * _2675) * _2712) * _2727;
        _2738 = (((_2546 * _2549) * _2676) * _2712) * _2727;
        _2742 = (((_2547 * _2549) * _2677) * _2712) * _2727;
        _2743 = _2714 * 0.999000012874603271484375;
        _2753 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2753)
        {
            if ((cbInstanceData._m0[_2092 + 7u].x + _2743) < 0.5)
            {
                _2950 = true;
                break;
            }
        }
        uint _2869 = _2402 + uint(_2720.w);
        if ((cbInstanceData._m0[_2869].w < 1.0) && ((cbInstanceData._m0[_2869].w + _2743) < 0.5))
        {
            _2950 = true;
            break;
        }
        if ((_2718 + 1.0) < _2716.x)
        {
            _2950 = true;
            break;
        }
        _2950 = false;
        break;
    }
    float _3154;
    if (_2950)
    {
        discard_state = true;
        _3154 = 0.0;
    }
    else
    {
        _3154 = _2713;
    }
    SV_Target.x = _2728;
    SV_Target.y = _2729;
    SV_Target.z = _2730;
    SV_Target.w = _3154;
    SV_Target_1.x = _2734;
    SV_Target_1.y = _2738;
    SV_Target_1.z = _2742;
    SV_Target_1.w = _2713;
    discard_exit();
}


