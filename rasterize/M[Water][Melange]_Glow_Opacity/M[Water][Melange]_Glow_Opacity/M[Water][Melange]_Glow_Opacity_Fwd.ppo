#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[39];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 55) uniform texture2D g_RefractionTexture;
layout(set = 0, binding = 57) uniform texture2D g_WaterSimulationNormalTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_4;
layout(set = 0, binding = 5) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_8;
layout(set = 0, binding = 7) uniform texture2D M_Water_Melange_Glow_Opacity_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 6) in vec4 TEXCOORD_7;
layout(location = 7) in float TEXCOORD_12;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1553;
uint _2949;
uint _2950;
uint _2951;
uint _3231;
uint _3232;
uint _3233;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = _238 * TANGENT.x;
    float _240 = _238 * TANGENT.y;
    float _241 = _238 * TANGENT.z;
    float _285 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _295 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _285);
    float _296 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _285);
    float _297 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _285);
    float _313 = cbMtdParam._m0[18u].w - cbMtdParam._m0[18u].z;
    float _315 = (sqrt(((_295 * _295) + (_296 * _296)) + (_297 * _297)) - cbMtdParam._m0[18u].z) / (isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0)));
    float _320 = cbMtdParam._m0[19u].x + _315;
    float _322 = _320 * cbMtdParam._m0[19u].z;
    float _3478 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _325 = (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * cbMtdParam._m0[23u].z;
    float _3489 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _326 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    float _3500 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _331 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _334 = ((cbMtdParam._m0[18u].x - cbMtdParam._m0[17u].x) * _331) + cbMtdParam._m0[17u].x;
    float _355 = cbMtdParam._m0[20u].w * _320;
    float _3511 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    vec4 _373 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _376 = _373.x;
    float _400 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _376)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _376))) - POSITION_1.w) / cbMtdParam._m0[17u].w;
    float _3522 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _401 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _406 = 1.0 - (isnan(cbMtdParam._m0[22u].x) ? _401 : (isnan(_401) ? cbMtdParam._m0[22u].x : max(_401, cbMtdParam._m0[22u].x)));
    float _425 = (cbMtdParam._m0[25u].x + cbPerFrame._m0[22u].x) * cbMtdParam._m0[17u].y;
    float _433 = cbMtdParam._m0[30u].w * TEXCOORD.x;
    float _434 = cbMtdParam._m0[31u].x * TEXCOORD.y;
    vec4 _448 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_2, SS_BumpMap), vec2((((_425 * cbMtdParam._m0[31u].w) + _433) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, ((_434 + (_425 * cbMtdParam._m0[32u].x)) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _450 = _448.x;
    float _451 = _448.y;
    float _454 = _448.z - _331;
    float _3538 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _467 = (_455 * 0.00999999977648258209228515625) + TEXCOORD.x;
    float _469 = (_455 * (-0.00999999977648258209228515625)) + TEXCOORD.y;
    vec4 _482 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((_467 + (cbMtdParam._m0[27u].y * _425)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_469 + (cbMtdParam._m0[27u].z * _425)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _486 = _482.z;
    vec4 _499 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((_467 + (cbMtdParam._m0[26u].w * _425)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((_469 + (cbMtdParam._m0[27u].x * _425)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _503 = _499.z;
    float _506 = (_406 - _448.w) + (isnan(_503) ? _486 : (isnan(_486) ? _503 : max(_486, _503)));
    float _3554 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _508 = (((cbMtdParam._m0[21u].w + TEXCOORD_3.x) - (_406 * cbMtdParam._m0[18u].y)) * (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0)))) * (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)));
    float _510 = _508 - (_508 * TEXCOORD_7.w);
    float _520 = (POSITION_1.w - cbMtdParam._m0[24u].z) * (1.0 / cbMtdParam._m0[24u].y);
    float _3565 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _535 = (cbMtdParam._m0[29u].w * _425) + _433;
    float _536 = (cbMtdParam._m0[30u].x * _425) + _434;
    float _543 = cbMtdParam._m0[29u].y * _425;
    float _544 = cbMtdParam._m0[29u].z * _425;
    vec4 _562 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * (_543 + (_433 * cbMtdParam._m0[31u].y))) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * (_544 + (_434 * cbMtdParam._m0[31u].z))) + cbTextureTilingScale._m0[3u].w));
    float _569 = (_562.x * 2.0) + (-1.0);
    float _571 = (_562.y * 2.0) + (-1.0);
    float _575 = 1.0 - dot(vec2(_569, _571), vec2(_569, _571));
    float _3576 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _577 = sqrt(isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0)));
    float _580 = fma(_577, _232, fma(_571, _239, _569 * _225));
    float _583 = fma(_577, _233, fma(_571, _240, _569 * _226));
    float _586 = fma(_577, _234, fma(_571, _241, _569 * _227));
    float _590 = inversesqrt(dot(vec3(_580, _583, _586), vec3(_580, _583, _586)));
    float _591 = cbPerFrame._m0[22u].x * 2.0;
    float _592 = _591 * cbMtdParam._m0[23u].x;
    float _596 = ((_580 * 0.5) * _590) + (-0.25);
    float _600 = ((_583 * 0.5) * _590) + (-0.25);
    float _601 = _600 * cbMtdParam._m0[23u].y;
    float _603 = (-0.0) - (cbMtdParam._m0[23u].y * _596);
    float _604 = fract(_592);
    float _606 = fract(_592 + 0.5);
    float _617 = abs((_604 * 2.0) + (-1.0));
    vec4 _634 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_604 * _603) + _535) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_601 * _604) + _536) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _636 = _634.x;
    float _637 = _634.y;
    float _638 = _634.z;
    vec4 _639 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_5, SS_DiffuseMap), vec2((((_606 * _603) + _535) * cbTextureTilingScale._m0[5u].x) + cbTextureTilingScale._m0[5u].z, (((_601 * _606) + _536) * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    float _650 = ((_639.x - _636) * _617) + _636;
    float _651 = ((_639.y - _637) * _617) + _637;
    float _652 = ((_639.z - _638) * _617) + _638;
    float _668 = (cbMtdParam._m0[28u].w * _425) + _433;
    float _669 = (cbMtdParam._m0[29u].x * _425) + _434;
    float _672 = _591 * cbMtdParam._m0[22u].w;
    float _673 = _600 * cbMtdParam._m0[22u].z;
    float _675 = (-0.0) - (cbMtdParam._m0[22u].z * _596);
    float _676 = fract(_672);
    float _678 = fract(_672 + 0.5);
    float _689 = abs((_676 * 2.0) + (-1.0));
    vec4 _706 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_676 * _675) + _668) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_673 * _676) + _669) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _708 = _706.x;
    float _709 = _706.y;
    float _710 = _706.z;
    vec4 _711 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((_678 * _675) + _668) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((_673 * _678) + _669) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w));
    float _743 = (((((cbMtdParam._m0[14u].x - cbMtdParam._m0[16u].x) * _650) * cbMtdParam._m0[25u].y) + cbMtdParam._m0[16u].x) * (((_711.x - _708) * _689) + _708)) + (_650 * cbMtdParam._m0[15u].x);
    float _746 = (((((cbMtdParam._m0[14u].y - cbMtdParam._m0[16u].y) * _651) * cbMtdParam._m0[25u].y) + cbMtdParam._m0[16u].y) * (((_711.y - _709) * _689) + _709)) + (_651 * cbMtdParam._m0[15u].y);
    float _749 = ((((cbMtdParam._m0[25u].y * _652) * (cbMtdParam._m0[14u].z - cbMtdParam._m0[16u].z)) + cbMtdParam._m0[16u].z) * (((_711.z - _710) * _689) + _710)) + (_652 * cbMtdParam._m0[15u].z);
    float _753 = _743 - (_743 * _521);
    float _754 = _746 - (_746 * _521);
    float _755 = _749 - (_749 * _521);
    float _760 = (POSITION_1.w - cbMtdParam._m0[24u].x) * (1.0 / cbMtdParam._m0[23u].w);
    float _3587 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _761 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _771 = (cbMtdParam._m0[30u].y * _425) + _433;
    float _772 = (cbMtdParam._m0[30u].z * _425) + _434;
    vec4 _785 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * ((_433 * cbMtdParam._m0[32u].y) + _543)) + cbTextureTilingScale._m0[3u].z, (((_434 * cbMtdParam._m0[32u].z) + _544) * cbTextureTilingScale._m0[3u].y) + cbTextureTilingScale._m0[3u].w));
    float _791 = (_785.x * 2.0) + (-1.0);
    float _792 = (_785.y * 2.0) + (-1.0);
    float _796 = 1.0 - dot(vec2(_791, _792), vec2(_791, _792));
    float _3598 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _798 = sqrt(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)));
    float _801 = fma(_798, _232, fma(_792, _239, _791 * _225));
    float _804 = fma(_798, _233, fma(_792, _240, _791 * _226));
    float _807 = fma(_798, _234, fma(_792, _241, _791 * _227));
    float _811 = inversesqrt(dot(vec3(_801, _804, _807), vec3(_801, _804, _807)));
    float _812 = _591 * cbMtdParam._m0[26u].x;
    float _819 = (((_804 * 0.5) * _811) + (-0.25)) * cbMtdParam._m0[25u].w;
    float _821 = (-0.0) - (cbMtdParam._m0[25u].w * (((_801 * 0.5) * _811) + (-0.25)));
    float _822 = fract(_812);
    float _824 = fract(_812 + 0.5);
    float _827 = (_822 * _821) + _771;
    float _828 = (_819 * _822) + _772;
    float _831 = (_824 * _821) + _771;
    float _832 = (_819 * _824) + _772;
    float _835 = abs((_822 * 2.0) + (-1.0));
    vec4 _852 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_827 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_828 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _854 = _852.x;
    float _855 = _852.y;
    float _856 = _852.z;
    vec4 _857 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_8, SS_DiffuseMap), vec2((_831 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_832 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _868 = ((_857.x - _854) * _835) + _854;
    float _869 = ((_857.y - _855) * _835) + _855;
    float _870 = ((_857.z - _856) * _835) + _856;
    vec4 _895 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_9, SS_DiffuseMap), vec2((_827 * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (_828 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _897 = _895.x;
    float _898 = _895.y;
    float _899 = _895.z;
    vec4 _900 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_9, SS_DiffuseMap), vec2((_831 * cbTextureTilingScale._m0[7u].x) + cbTextureTilingScale._m0[7u].z, (_832 * cbTextureTilingScale._m0[7u].y) + cbTextureTilingScale._m0[7u].w));
    float _951 = (cbMtdParam._m0[24u].w * cbMtdParam._m0[13u].x) * ((_753 + (_510 * cbMtdParam._m0[12u].x)) + ((((_868 * cbMtdParam._m0[9u].x) - _753) + (((((cbMtdParam._m0[11u].x - cbMtdParam._m0[10u].x) * _868) * cbMtdParam._m0[25u].z) + cbMtdParam._m0[10u].x) * (((_900.x - _897) * _835) + _897))) * _761));
    float _953 = (cbMtdParam._m0[24u].w * cbMtdParam._m0[13u].y) * ((_754 + (_510 * cbMtdParam._m0[12u].y)) + ((((_869 * cbMtdParam._m0[9u].y) - _754) + (((((cbMtdParam._m0[11u].y - cbMtdParam._m0[10u].y) * _869) * cbMtdParam._m0[25u].z) + cbMtdParam._m0[10u].y) * (((_900.y - _898) * _835) + _898))) * _761));
    float _955 = (cbMtdParam._m0[24u].w * cbMtdParam._m0[13u].z) * ((_755 + (_510 * cbMtdParam._m0[12u].z)) + ((((_870 * cbMtdParam._m0[9u].z) - _755) + ((((cbMtdParam._m0[25u].z * _870) * (cbMtdParam._m0[11u].z - cbMtdParam._m0[10u].z)) + cbMtdParam._m0[10u].z) * (((_900.z - _899) * _835) + _899))) * _761));
    float _3609 = isnan(0.0) ? TEXCOORD_3.y : (isnan(TEXCOORD_3.y) ? 0.0 : max(TEXCOORD_3.y, 0.0));
    float _962 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _972 = _315 / cbMtdParam._m0[20u].y;
    float _3620 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _973 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    vec4 _1021 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * ((_1001 / cbMtdParam._m0[19u].y) + (cbMtdParam._m0[32u].w * _425))) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * ((_1005 / cbMtdParam._m0[19u].y) + (cbMtdParam._m0[33u].x * _425))) + cbTextureTilingScale._m0[1u].w));
    float _1025 = _455 * 0.23999999463558197021484375;
    float _1027 = _455 * (-0.20000000298023223876953125);
    float _1038 = cbMtdParam._m0[33u].w * TEXCOORD.x;
    float _1039 = cbMtdParam._m0[34u].x * TEXCOORD.y;
    vec4 _1054 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2(((((cbMtdParam._m0[33u].y * _425) + _1025) + _1038) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((((cbMtdParam._m0[33u].z * _425) + _1027) + _1039) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    vec4 _1070 = texture(sampler2D(M_Water_Melange_Glow_Opacity_snp_0_Texture2D_0, SS_BumpMap), vec2((((_1038 + _1025) + (cbMtdParam._m0[34u].y * _425)) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (((_1039 + _1027) + (cbMtdParam._m0[34u].z * _425)) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _1090 = (((_499.x + (-0.5)) * 0.5) + _482.x) + (((_1054.x + (-1.0)) + _1070.x) * cbMtdParam._m0[21u].z);
    float _1091 = (((_499.y + (-0.5)) * 0.5) + _482.y) + (((_1054.y + (-1.0)) + _1070.y) * cbMtdParam._m0[21u].z);
    float _1096 = ((_1021.x - _1090) * _973) + _1090;
    float _1097 = ((_1021.y - _1091) * _973) + _1091;
    float _1099 = _315 / cbMtdParam._m0[20u].x;
    float _3631 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1100 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _1116 = ((((_962 * (0.5 - _450)) + _450) + (((_1096 + (-0.5)) + ((0.5 - _1096) * _1100)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1117 = ((((_962 * (0.5 - _451)) + _451) + (((_1097 + (-0.5)) + ((0.5 - _1097) * _1100)) * 0.60000002384185791015625)) * 2.0) + (-1.0);
    float _1118 = dot(vec2(_1116, _1117), vec2(_1116, _1117));
    float _3642 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _1123 = sqrt(1.0 - (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))));
    float _1125 = cbMtdParam._m0[21u].x * _320;
    float _3653 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _1131 = ((cbMtdParam._m0[21u].y - cbMtdParam._m0[19u].w) * (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0)))) + cbMtdParam._m0[19u].w;
    float _1136 = _1116 - (_1131 * _1116);
    float _1137 = _1117 - (_1131 * _1117);
    float _1138 = (_1131 * (1.0 - _1123)) + _1123;
    float _1148 = fma(_1123, _232, fma(_1117, _239, _1116 * _225));
    float _1151 = fma(_1123, _233, fma(_1117, _240, _1116 * _226));
    float _1154 = fma(_1123, _234, fma(_1117, _241, _1116 * _227));
    float _1158 = inversesqrt(dot(vec3(_1148, _1151, _1154), vec3(_1148, _1151, _1154)));
    float _1159 = _1158 * _1148;
    float _1160 = _1158 * _1151;
    float _1161 = _1158 * _1154;
    float _1164 = fma(_1138, _232, fma(_1137, _239, _1136 * _225));
    float _1167 = fma(_1138, _233, fma(_1137, _240, _1136 * _226));
    float _1170 = fma(_1138, _234, fma(_1137, _241, _1136 * _227));
    float _1174 = inversesqrt(dot(vec3(_1164, _1167, _1170), vec3(_1164, _1167, _1170)));
    float _1175 = _1174 * _1164;
    float _1176 = _1174 * _1167;
    float _1177 = _1174 * _1170;
    float _3664 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _3675 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _1179 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _1193 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1213 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1222 = cbSceneParam._m0[71u].x - (_1001 / _1213);
    float _1223 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1213);
    float _1224 = cbSceneParam._m0[71u].z - (_1005 / _1213);
    float _1228 = inversesqrt(dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224)));
    float _1229 = _1222 * _1228;
    float _1230 = _1223 * _1228;
    float _1231 = _1224 * _1228;
    float _1236 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1237 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1239 = texture(sampler2D(g_WaterSimulationNormalTexture, SS_ClampLinear), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1248 = (_1239.x * 2.0) + (-1.0);
    float _1249 = (_1239.y * 2.0) + (-1.0);
    float _1250 = (_1239.z * 2.0) + (-1.0);
    float _1254 = inversesqrt(dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250)));
    float _1265 = ((TEXCOORD.w >= 1.0) || (((TEXCOORD.z <= 0.0) || (TEXCOORD.z >= 1.0)) || (TEXCOORD.w <= 0.0))) ? 0.0 : _1239.w;
    float _1272 = (((_1248 * _1254) - _1159) * _1265) + _1159;
    float _1273 = (((_1249 * _1254) - _1160) * _1265) + _1160;
    float _1274 = (((_1250 * _1254) - _1161) * _1265) + _1161;
    float _1292 = fma(_1274, cbSceneParam._m0[5u].z, fma(_1273, cbSceneParam._m0[5u].y, _1272 * cbSceneParam._m0[5u].x));
    float _1295 = fma(_1274, cbSceneParam._m0[6u].z, fma(_1273, cbSceneParam._m0[6u].y, _1272 * cbSceneParam._m0[6u].x));
    float _1298 = fma(_1274, cbSceneParam._m0[7u].z, fma(_1273, cbSceneParam._m0[7u].y, _1272 * cbSceneParam._m0[7u].x));
    vec4 _1307 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1236, cbSceneParam._m0[86u].y * _1237));
    float _1310 = _1307.x * TEXCOORD_3.w;
    float _1314 = abs(dot(vec3(_1229, _1230, _1231), vec3(_1272, _1273, _1274)));
    float _3686 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
    float _1326 = dot(vec3(_1175, _1176, _1177), vec3(_1229, _1230, _1231)) * 2.0;
    float _1330 = (_1326 * _1175) - _1229;
    float _1331 = (_1326 * _1176) - _1230;
    float _1332 = (_1326 * _1177) - _1231;
    float _1336 = abs(dot(vec3(_1229, _1230, _1231), vec3(_1175, _1176, _1177)));
    float _3697 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
    float _1338 = sqrt(_1179);
    float _1350 = exp2((_1338 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1338 * 3.0));
    float _1381 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1385 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1389 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1552;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1415 = fma(_1389, cbModelParam._m0[26u].z, fma(_1385, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1381));
        float _1419 = fma(_1389, cbModelParam._m0[27u].z, fma(_1385, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1381));
        float _1423 = fma(_1389, cbModelParam._m0[28u].z, fma(_1385, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1381));
        float _1446 = _1381 + _1175;
        float _1447 = _1385 + _1176;
        float _1448 = _1389 + _1177;
        float _1458 = fma(_1448, cbModelParam._m0[26u].z, fma(_1447, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1446)) - _1415;
        float _1459 = fma(_1448, cbModelParam._m0[27u].z, fma(_1447, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1446)) - _1419;
        float _1460 = fma(_1448, cbModelParam._m0[28u].z, fma(_1447, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1446)) - _1423;
        float _1464 = inversesqrt(dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460)));
        float _1476 = ((_1464 * _1458) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1415 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1477 = ((_1464 * _1459) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1419 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1478 = ((_1464 * _1460) / cbModelParam._m0[34u].z) + ((((((_1423 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        float _1515 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1502.x + (-0.5));
        float _1547 = _1545 * (_1502.y + (-0.5));
        float _1548 = _1545 * (_1502.z + (-0.5));
        _1552 = _1515 * (_1481.z + (-0.5));
        _1554 = _1515 * (_1481.y + (-0.5));
        _1555 = _1515 * (_1481.x + (-0.5));
        _1556 = _1525 * (_1488.z + (-0.5));
        _1557 = _1525 * (_1488.y + (-0.5));
        _1558 = _1525 * (_1488.x + (-0.5));
        _1559 = _1535 * (_1495.z + (-0.5));
        _1560 = _1535 * (_1495.y + (-0.5));
        _1561 = _1535 * (_1495.x + (-0.5));
        _1562 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        _1563 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        _1564 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
    }
    else
    {
        _1552 = _1553;
        _1554 = _1553;
        _1555 = _1553;
        _1556 = _1553;
        _1557 = _1553;
        _1558 = _1553;
        _1559 = _1553;
        _1560 = _1553;
        _1561 = _1553;
        _1562 = _1553;
        _1563 = _1553;
        _1564 = _1553;
    }
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1587 = fma(_1389, cbModelParam._m0[30u].z, fma(_1385, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1381));
        float _1591 = fma(_1389, cbModelParam._m0[31u].z, fma(_1385, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1381));
        float _1595 = fma(_1389, cbModelParam._m0[32u].z, fma(_1385, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1381));
        float _1618 = _1381 + _1175;
        float _1619 = _1385 + _1176;
        float _1620 = _1389 + _1177;
        float _1630 = fma(_1620, cbModelParam._m0[30u].z, fma(_1619, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1618)) - _1587;
        float _1631 = fma(_1620, cbModelParam._m0[31u].z, fma(_1619, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1618)) - _1591;
        float _1632 = fma(_1620, cbModelParam._m0[32u].z, fma(_1619, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1618)) - _1595;
        float _1636 = inversesqrt(dot(vec3(_1630, _1631, _1632), vec3(_1630, _1631, _1632)));
        float _1648 = ((_1636 * _1630) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1587 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1649 = ((_1636 * _1631) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1591 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1650 = ((_1636 * _1632) / cbModelParam._m0[35u].z) + ((((((_1595 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1652 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1648, _1649, _1650), 0.0);
        vec4 _1659 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1648, _1649, _1650), 0.0);
        vec4 _1666 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1648, _1649, _1650), 0.0);
        vec4 _1673 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1648, _1649, _1650), 0.0);
        float _1685 = exp2((_1652.w + (-0.5)) * 20.0) * 2.0;
        float _1695 = exp2((_1659.w + (-0.5)) * 20.0) * 2.0;
        float _1705 = exp2((_1666.w + (-0.5)) * 20.0) * 2.0;
        float _1715 = exp2((_1673.w + (-0.5)) * 20.0) * 2.0;
        float _1716 = _1715 * (_1673.x + (-0.5));
        float _1717 = _1715 * (_1673.y + (-0.5));
        float _1718 = _1715 * (_1673.z + (-0.5));
        _1722 = _1685 * (_1652.z + (-0.5));
        _1723 = _1685 * (_1652.y + (-0.5));
        _1724 = _1685 * (_1652.x + (-0.5));
        _1725 = _1695 * (_1659.z + (-0.5));
        _1726 = _1695 * (_1659.y + (-0.5));
        _1727 = _1695 * (_1659.x + (-0.5));
        _1728 = _1705 * (_1666.z + (-0.5));
        _1729 = _1705 * (_1666.y + (-0.5));
        _1730 = _1705 * (_1666.x + (-0.5));
        _1731 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        _1732 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        _1733 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
    }
    else
    {
        _1722 = _1553;
        _1723 = _1553;
        _1724 = _1553;
        _1725 = _1553;
        _1726 = _1553;
        _1727 = _1553;
        _1728 = _1553;
        _1729 = _1553;
        _1730 = _1553;
        _1731 = _1553;
        _1732 = _1553;
        _1733 = _1553;
    }
    float _1747 = _1330 * 0.5;
    float _1748 = _1331 * 0.5;
    float _1749 = _1332 * 0.5;
    float _1750 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1724, _1727, _1730, _1733));
    float _1753 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1723, _1726, _1729, _1732));
    float _1756 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1722, _1725, _1728, _1731));
    float _1791;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1763 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1552, _1556, _1559, _1562));
        float _1767 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1554, _1557, _1560, _1563));
        float _1771 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1555, _1558, _1561, _1564));
        float _1778 = dot(vec4(cbModelParam._m0[39u]), vec4(_1747, _1748, _1749, 1.0));
        _1791 = dot(vec3(isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1778) ? 0.0 : (isnan(0.0) ? _1778 : max(0.0, _1778))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1791 = 1.0;
    }
    float _1802;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1793 = dot(vec4(cbModelParam._m0[40u]), vec4(_1747, _1748, _1749, 1.0));
        _1802 = dot(vec3(isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1793) ? 0.0 : (isnan(0.0) ? _1793 : max(0.0, _1793))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1802 = 1.0;
    }
    float _1806 = (_1802 * cbModelParam._m0[1u].x) + (_1791 * (1.0 - cbModelParam._m0[1u].x));
    float _1813 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1179);
    float _1814 = isnan(_1813) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1813 : min(cbModelParam._m0[25u].z, _1813));
    float _1894;
    float _1896;
    float _1898;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1861 = fma(_1389, cbModelParam._m0[13u].z, fma(_1385, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1381)) + cbModelParam._m0[13u].w;
        float _1865 = fma(_1389, cbModelParam._m0[14u].z, fma(_1385, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1381)) + cbModelParam._m0[14u].w;
        float _1869 = fma(_1389, cbModelParam._m0[15u].z, fma(_1385, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1381)) + cbModelParam._m0[15u].w;
        float _1872 = fma(_1332, cbModelParam._m0[13u].z, fma(_1331, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1330));
        float _1875 = fma(_1332, cbModelParam._m0[14u].z, fma(_1331, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1330));
        float _1878 = fma(_1332, cbModelParam._m0[15u].z, fma(_1331, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1330));
        float _1906;
        if (_1872 > 0.0)
        {
            _1906 = abs((1.0 - _1861) / _1872);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1861 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1906 = frontier_phi_14_12_ladder;
        }
        float _2236;
        if (_1875 > 0.0)
        {
            _2236 = abs((1.0 - _1865) / _1875);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1865 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2236 = frontier_phi_23_19_ladder;
        }
        float _2699;
        if (_1878 > 0.0)
        {
            _2699 = abs((1.0 - _1869) / _1878);
        }
        else
        {
            float frontier_phi_37_30_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_37_30_ladder = abs((_1869 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_37_30_ladder = 5000.0;
            }
            _2699 = frontier_phi_37_30_ladder;
        }
        float _2701 = isnan(_2236) ? _1906 : (isnan(_1906) ? _2236 : min(_1906, _2236));
        float _2702 = isnan(_2699) ? _2701 : (isnan(_2701) ? _2699 : min(_2701, _2699));
        float _2706 = (_2702 * _1872) + _1861;
        float _2707 = (_2702 * _1875) + _1865;
        float _2708 = (_2702 * _1878) + _1869;
        float _2709 = _2702 * 9.9999997473787516355514526367188e-05;
        float _2710 = (-1.0) - _2709;
        float _2712 = _2709 + 1.0;
        float frontier_phi_13_37_ladder;
        float frontier_phi_13_37_ladder_1;
        float frontier_phi_13_37_ladder_2;
        if ((_2708 > _2712) || ((_2708 < _2710) || ((_2707 > _2712) || ((_2707 < _2710) || ((_2706 < _2710) || (_2706 > _2712))))))
        {
            frontier_phi_13_37_ladder = 0.0;
            frontier_phi_13_37_ladder_1 = 0.0;
            frontier_phi_13_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2822 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2708, cbModelParam._m0[9u].z, fma(_2707, cbModelParam._m0[9u].y, _2706 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2708, cbModelParam._m0[10u].z, fma(_2707, cbModelParam._m0[10u].y, _2706 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2708, cbModelParam._m0[11u].z, fma(_2707, cbModelParam._m0[11u].y, _2706 * cbModelParam._m0[11u].x))), _1814);
            frontier_phi_13_37_ladder = _2822.y * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_1 = _2822.x * cbModelParam._m0[1u].y;
            frontier_phi_13_37_ladder_2 = _2822.z * cbModelParam._m0[1u].y;
        }
        _1894 = frontier_phi_13_37_ladder_1;
        _1896 = frontier_phi_13_37_ladder;
        _1898 = frontier_phi_13_37_ladder_2;
    }
    else
    {
        vec4 _1882 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1330, _1331, _1332), _1814);
        _1894 = _1882.x * cbModelParam._m0[1u].y;
        _1896 = _1882.y * cbModelParam._m0[1u].y;
        _1898 = _1882.z * cbModelParam._m0[1u].y;
    }
    float _1902 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1179);
    float _1903 = isnan(_1902) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1902 : min(cbModelParam._m0[25u].w, _1902));
    float _1992;
    float _1994;
    float _1996;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1956 = fma(_1389, cbModelParam._m0[21u].z, fma(_1385, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1381)) + cbModelParam._m0[21u].w;
        float _1960 = fma(_1389, cbModelParam._m0[22u].z, fma(_1385, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1381)) + cbModelParam._m0[22u].w;
        float _1964 = fma(_1389, cbModelParam._m0[23u].z, fma(_1385, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1381)) + cbModelParam._m0[23u].w;
        float _1967 = fma(_1332, cbModelParam._m0[21u].z, fma(_1331, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1330));
        float _1970 = fma(_1332, cbModelParam._m0[22u].z, fma(_1331, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1330));
        float _1973 = fma(_1332, cbModelParam._m0[23u].z, fma(_1331, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1330));
        float _2241;
        if (_1967 > 0.0)
        {
            _2241 = abs((1.0 - _1956) / _1967);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1956 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2241 = frontier_phi_25_21_ladder;
        }
        float _2725;
        if (_1970 > 0.0)
        {
            _2725 = abs((1.0 - _1960) / _1970);
        }
        else
        {
            float frontier_phi_39_32_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_39_32_ladder = abs((_1960 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_39_32_ladder = 5000.0;
            }
            _2725 = frontier_phi_39_32_ladder;
        }
        float _2879;
        if (_1973 > 0.0)
        {
            _2879 = abs((1.0 - _1964) / _1973);
        }
        else
        {
            float frontier_phi_53_48_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_53_48_ladder = abs((_1964 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_53_48_ladder = 5000.0;
            }
            _2879 = frontier_phi_53_48_ladder;
        }
        float _2881 = isnan(_2725) ? _2241 : (isnan(_2241) ? _2725 : min(_2241, _2725));
        float _2882 = isnan(_2879) ? _2881 : (isnan(_2881) ? _2879 : min(_2881, _2879));
        float _2886 = (_2882 * _1967) + _1956;
        float _2887 = (_2882 * _1970) + _1960;
        float _2888 = (_2882 * _1973) + _1964;
        float _2889 = _2882 * 9.9999997473787516355514526367188e-05;
        float _2890 = (-1.0) - _2889;
        float _2892 = _2889 + 1.0;
        float frontier_phi_22_53_ladder;
        float frontier_phi_22_53_ladder_1;
        float frontier_phi_22_53_ladder_2;
        if ((_2888 > _2892) || ((_2888 < _2890) || ((_2887 > _2892) || ((_2887 < _2890) || ((_2886 < _2890) || (_2886 > _2892))))))
        {
            frontier_phi_22_53_ladder = 0.0;
            frontier_phi_22_53_ladder_1 = 0.0;
            frontier_phi_22_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3094 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2888, cbModelParam._m0[17u].z, fma(_2887, cbModelParam._m0[17u].y, _2886 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2888, cbModelParam._m0[18u].z, fma(_2887, cbModelParam._m0[18u].y, _2886 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2888, cbModelParam._m0[19u].z, fma(_2887, cbModelParam._m0[19u].y, _2886 * cbModelParam._m0[19u].x))), _1903);
            frontier_phi_22_53_ladder = _3094.z * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_1 = _3094.y * cbModelParam._m0[1u].z;
            frontier_phi_22_53_ladder_2 = _3094.x * cbModelParam._m0[1u].z;
        }
        _1992 = frontier_phi_22_53_ladder_2;
        _1994 = frontier_phi_22_53_ladder_1;
        _1996 = frontier_phi_22_53_ladder;
    }
    else
    {
        vec4 _1976 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1330, _1331, _1332), _1903);
        _1992 = _1976.x * cbModelParam._m0[1u].z;
        _1994 = _1976.y * cbModelParam._m0[1u].z;
        _1996 = _1976.z * cbModelParam._m0[1u].z;
    }
    float _2008 = ((((1.0 - _1350) * ((_1338 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1350 * _1338)) * _1310;
    float _2009 = _2008 * ((cbModelParam._m0[1u].w * (_1992 - _1894)) + _1894);
    float _2010 = _2008 * ((cbModelParam._m0[1u].w * (_1994 - _1896)) + _1896);
    float _2011 = _2008 * ((cbModelParam._m0[1u].w * (_1996 - _1898)) + _1898);
    float _2032 = fma(_2011, cbSceneParam._m0[89u].z, fma(_2010, cbSceneParam._m0[89u].y, _2009 * cbSceneParam._m0[89u].x));
    float _2035 = fma(_2011, cbSceneParam._m0[90u].z, fma(_2010, cbSceneParam._m0[90u].y, _2009 * cbSceneParam._m0[90u].x));
    float _2038 = fma(_2011, cbSceneParam._m0[91u].z, fma(_2010, cbSceneParam._m0[91u].y, _2009 * cbSceneParam._m0[91u].x));
    uint _2045 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _2049 = floatBitsToUint(cbInstanceData._m0[_2045 + 5u]);
    uint _2051 = _2049.x * 14u;
    uint _2052 = _2051 + 13u;
    float _2057 = _1310 + (-1.0);
    float _2060 = (cbLight._m0[_2052].x * _2057) + 1.0;
    float _2061 = (cbLight._m0[_2052].y * _2057) + 1.0;
    uint _2065 = _2051 + 8u;
    float _2081 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2051].w)) * _1179) * 0.949999988079071044921875);
    float _2082 = _2081 * _2081;
    float _2083 = cbLight._m0[_2051].x + _1229;
    float _2084 = cbLight._m0[_2051].y + _1230;
    float _2085 = cbLight._m0[_2051].z + _1231;
    float _2089 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
    float _2090 = _2089 * _2083;
    float _2091 = _2089 * _2084;
    float _2092 = _2089 * _2085;
    float _2093 = dot(vec3(_1272, _1273, _1274), vec3(cbLight._m0[_2051].xyz));
    float _3823 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _2097 = dot(vec3(_1272, _1273, _1274), vec3(_1229, _1230, _1231));
    float _3834 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _2101 = dot(vec3(_1272, _1273, _1274), vec3(_2090, _2091, _2092));
    float _3845 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2104 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _2105 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2090, _2091, _2092));
    float _3856 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2109 = _2082 * _2082;
    float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
    float _2124 = (exp2(log2(1.0 - (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2125 = 1.0 - _2082;
    float _2136 = (0.5 / (((_2100 * ((_2096 * _2125) + _2082)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2125) + _2082) * _2096))) * _2096;
    float _3867 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2138 = (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
    float _2139 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
    uint _2149 = _2051 | 1u;
    uint _2153 = _2051 + 9u;
    float _2167 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _1179) * 0.949999988079071044921875);
    float _2168 = _2167 * _2167;
    float _2169 = cbLight._m0[_2149].x + _1229;
    float _2170 = cbLight._m0[_2149].y + _1230;
    float _2171 = cbLight._m0[_2149].z + _1231;
    float _2175 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
    float _2176 = _2175 * _2169;
    float _2177 = _2175 * _2170;
    float _2178 = _2175 * _2171;
    float _2179 = dot(vec3(_1272, _1273, _1274), vec3(cbLight._m0[_2149].xyz));
    float _3883 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _2183 = dot(vec3(_1272, _1273, _1274), vec3(_2176, _2177, _2178));
    float _3894 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2186 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _2187 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2176, _2177, _2178));
    float _3905 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2191 = _2168 * _2168;
    float _2195 = ((_2186 * _2186) * (_2191 + (-1.0))) + 1.0;
    float _2204 = (exp2(log2(1.0 - (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2205 = 1.0 - _2168;
    float _2215 = (0.5 / (((_2100 * ((_2182 * _2205) + _2168)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2205) + _2168) * _2182))) * _2182;
    float _3916 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2217 = (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_2191 / ((_2195 * _2195) * 3.141590118408203125));
    float _2218 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
    float _2228 = (((_2204 * cbLight._m0[_2153].x) * _2217) * _2218) + (((_2124 * cbLight._m0[_2065].x) * _2138) * _2139);
    float _2229 = (((_2204 * cbLight._m0[_2153].y) * _2217) * _2218) + (((_2124 * cbLight._m0[_2065].y) * _2138) * _2139);
    float _2230 = (((_2204 * cbLight._m0[_2153].z) * _2217) * _2218) + (((_2124 * cbLight._m0[_2065].z) * _2138) * _2139);
    float _2345;
    float _2347;
    float _2349;
    if (_2049.y == 0u)
    {
        float _2285 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2286 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2285;
        float _2287 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2285;
        float _2288 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2285;
        uvec4 _2300 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2301 = _2300.x;
        uint _2312 = uint((float(_2300.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1237) / _2301))) + floor(float(uint(cbSceneParam._m0[85u].x * _1236) / _2301)));
        float _2322 = (log2(_2288 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2323 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        uint _2326 = uint(isnan(14.0) ? _2323 : (isnan(_2323) ? 14.0 : min(_2323, 14.0)));
        uvec4 _2331 = texelFetch(g_lightClusterGridBuffer, int(((_2326 << 2u) + (_2312 << 6u)) >> 2u));
        uint _2332 = _2331.x;
        uint _2333 = _2300.z;
        float _2549;
        float _2551;
        float _2553;
        if (((((1u << ((_2333 >> 4u) & 15u)) + 4294967295u) & _2332) == 0u) || ((_2333 & 240u) == 0u))
        {
            _2549 = 0.0;
            _2551 = 0.0;
            _2553 = 0.0;
        }
        else
        {
            float _2550;
            float _2552;
            float _2554;
            float _2753 = 0.0;
            float _2754 = 0.0;
            float _2755 = 0.0;
            uint _2756 = 0u;
            uint _2765;
            bool _2766;
            for (;;)
            {
                _2765 = texelFetch(g_lightClassification, int((((_2326 << 5u) + (_2312 << 9u)) + (_2756 << 2u)) >> 2u)).x;
                _2766 = _2765 == 0u;
                float frontier_phi_50_pred;
                float frontier_phi_50_pred_1;
                float frontier_phi_50_pred_2;
                if (_2766)
                {
                    frontier_phi_50_pred = _2755;
                    frontier_phi_50_pred_1 = _2753;
                    frontier_phi_50_pred_2 = _2754;
                }
                else
                {
                    float _2919;
                    float _2920;
                    float _2921;
                    uint _2922;
                    _2919 = _2753;
                    _2920 = _2754;
                    _2921 = _2755;
                    _2922 = _2765;
                    float _2831;
                    float _2832;
                    float _2833;
                    for (;;)
                    {
                        uint _2926 = uint(findLSB(_2922)) + (_2756 << 5u);
                        uint _2923 = (_2922 + 4294967295u) & _2922;
                        uint _2928 = _2926 * 48u;
                        vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2928)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 3u)).x));
                        uint _2959 = (_2926 * 48u) + 8u;
                        vec3 _2970 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2959)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 2u)).x));
                        float _2974 = _2942.x - _2286;
                        float _2975 = _2942.y - _2287;
                        float _2976 = _2942.z - _2288;
                        float _2977 = dot(vec3(_2974, _2975, _2976), vec3(_2974, _2975, _2976));
                        float _2980 = inversesqrt(_2977);
                        float _2981 = _2980 * _2974;
                        float _2982 = _2980 * _2975;
                        float _2983 = _2980 * _2976;
                        float _2989 = 1.0 - (_2977 * _2942.w);
                        float _3942 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2991 = sqrt(_2977) * uintBitsToFloat(uvec4(_2949, _2950, _2951, texelFetch(g_PointLightRenderingBuffer, int(((_2926 * 48u) + 4u) + 3u)).x)).w;
                        float _2995 = _2991 * _2991;
                        float _2996 = (-0.0) - _2286;
                        float _2997 = (-0.0) - _2287;
                        float _2998 = (-0.0) - _2288;
                        float _3002 = inversesqrt(dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998)));
                        float _3003 = _3002 * _2996;
                        float _3004 = _3002 * _2997;
                        float _3005 = _3002 * _2998;
                        float _3013 = exp2(log2(1.0 / ((_2995 * 3.5) + 5.0)) * 0.25);
                        float _3014 = 1.0 - _1338;
                        float _3021 = sqrt(1.0 - ((1.0 - (_3014 * _3014)) * (1.0 - (_3013 * _3013))));
                        float _3022 = _3021 * _3021;
                        float _3023 = _3022 * _3022;
                        float _3024 = _3003 + _2981;
                        float _3025 = _3004 + _2982;
                        float _3026 = _3005 + _2983;
                        float _3030 = inversesqrt(dot(vec3(_3024, _3025, _3026), vec3(_3024, _3025, _3026)));
                        float _3034 = dot(vec3(_1292, _1295, _1298), vec3(_3003, _3004, _3005));
                        float _3953 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3037 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
                        float _3038 = dot(vec3(_1292, _1295, _1298), vec3(_3030 * _3024, _3030 * _3025, _3030 * _3026));
                        float _3964 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3041 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
                        float _3045 = ((_3041 * _3041) * (_3023 + (-1.0))) + 1.0;
                        float _3046 = (1.39999997615814208984375 / (_2991 + 1.39999997615814208984375)) * _3022;
                        float _3047 = _3046 * _3046;
                        float _3050 = ((1.0 - _3047) * dot(vec3(_1292, _1295, _1298), vec3(_2981, _2982, _2983))) + _3047;
                        float _3975 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3051 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
                        float _3052 = 1.0 - _3022;
                        float _3062 = (0.5 / (((_3051 * ((_3037 * _3052) + _3022)) + 9.9999999392252902907785028219223e-09) + (((_3051 * _3052) + _3022) * _3037))) * _3051;
                        float _3986 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3073 = (((_3023 * 3.1415927410125732421875) * (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) / ((_3045 * _3045) * ((_2995 * 2.1991131305694580078125) + 3.141590118408203125))) * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)));
                        _2831 = (_3073 * _2970.x) + _2919;
                        _2832 = (_3073 * _2970.y) + _2920;
                        _2833 = (_3073 * _2970.z) + _2921;
                        if (_2923 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2919 = _2831;
                            _2920 = _2832;
                            _2921 = _2833;
                            _2922 = _2923;
                        }
                    }
                    frontier_phi_50_pred = _2833;
                    frontier_phi_50_pred_1 = _2831;
                    frontier_phi_50_pred_2 = _2832;
                }
                _2554 = frontier_phi_50_pred;
                _2550 = frontier_phi_50_pred_1;
                _2552 = frontier_phi_50_pred_2;
                uint _2757 = _2756 + 1u;
                if (_2757 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2753 = _2550;
                    _2754 = _2552;
                    _2755 = _2554;
                    _2756 = _2757;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2549 = _2550;
            _2551 = _2552;
            _2553 = _2554;
        }
        uvec4 _2557 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2558 = _2557.z;
        uint _2560 = (_2558 >> 8u) & 15u;
        float _2730;
        float _2732;
        float _2734;
        if (((4294967295u << _2560) & _2332) == 0u)
        {
            _2730 = _2549;
            _2732 = _2551;
            _2734 = _2553;
        }
        else
        {
            float _2746 = inversesqrt(dot(vec3(_2286, _2287, _2288), vec3(_2286, _2287, _2288)));
            float _2747 = _2746 * _2286;
            float _2748 = _2746 * _2287;
            float _2749 = _2746 * _2288;
            float frontier_phi_41_42_ladder;
            float frontier_phi_41_42_ladder_1;
            float frontier_phi_41_42_ladder_2;
            if (_2560 < ((_2558 >> 12u) & 15u))
            {
                float _2731;
                float _2733;
                float _2735;
                float _2905 = _2549;
                float _2906 = _2551;
                float _2907 = _2553;
                uint _2908 = _2560;
                uint _2917;
                bool _2918;
                for (;;)
                {
                    _2917 = texelFetch(g_lightClassification, int((((_2326 << 5u) + (_2312 << 9u)) + (_2908 << 2u)) >> 2u)).x;
                    _2918 = _2917 == 0u;
                    float frontier_phi_59_pred;
                    float frontier_phi_59_pred_1;
                    float frontier_phi_59_pred_2;
                    if (_2918)
                    {
                        frontier_phi_59_pred = _2905;
                        frontier_phi_59_pred_1 = _2907;
                        frontier_phi_59_pred_2 = _2906;
                    }
                    else
                    {
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3109 = _2905;
                        float _3110 = _2906;
                        float _3111 = _2907;
                        uint _3112 = _2917;
                        uint _3113;
                        uint _3123;
                        vec4 _3138;
                        float _3139;
                        vec3 _3151;
                        vec4 _3166;
                        vec4 _3181;
                        float _3227;
                        bool _3228;
                        for (;;)
                        {
                            _3123 = ((_2908 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3112));
                            _3113 = (_3112 + 4294967295u) & _3112;
                            uint _3125 = _3123 * 40u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            _3139 = _3138.w;
                            uint _3141 = (_3123 * 40u) + 8u;
                            _3151 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x));
                            uint _3153 = (_3123 * 40u) + 16u;
                            _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3168 = (_3123 * 40u) + 20u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            uint _3183 = (_3123 * 40u) + 24u;
                            vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3202 = (_3123 * 40u) + 28u;
                            vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            _3227 = fma(_2288, _3215.z, fma(_2287, _3215.y, _3215.x * _2286)) + _3215.w;
                            _3228 = !((fma(_2288, _3196.z, fma(_2287, _3196.y, _3196.x * _2286)) + _3196.w) <= 0.0);
                            float frontier_phi_65_pred;
                            float frontier_phi_65_pred_1;
                            float frontier_phi_65_pred_2;
                            if (_3228)
                            {
                                float _3262 = _3138.x - _2286;
                                float _3263 = _3138.y - _2287;
                                float _3264 = _3138.z - _2288;
                                float _3265 = dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264));
                                float _3268 = inversesqrt(_3265);
                                float _3269 = _3268 * _3262;
                                float _3270 = _3268 * _3263;
                                float _3271 = _3268 * _3264;
                                float _3275 = 1.0 - (_3265 / (_3139 * _3139));
                                float _3997 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3277 = sqrt(_3265) * uintBitsToFloat(uvec4(_3231, _3232, _3233, texelFetch(g_SpotLightRenderingBuffer, int(((_3123 * 40u) + 4u) + 3u)).x)).w;
                                float _3280 = _3277 * _3277;
                                float _3281 = (fma(_2288, _3166.z, fma(_2287, _3166.y, _3166.x * _2286)) + _3166.w) / _3227;
                                float _3282 = (fma(_2288, _3181.z, fma(_2287, _3181.y, _3181.x * _2286)) + _3181.w) / _3227;
                                float _3286 = 1.0 - dot(vec2(_3281, _3282), vec2(_3281, _3282));
                                float _4008 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3296 = exp2(log2(1.0 / ((_3280 * 3.5) + 5.0)) * 0.25);
                                float _3297 = 1.0 - _1338;
                                float _3304 = sqrt(1.0 - ((1.0 - (_3297 * _3297)) * (1.0 - (_3296 * _3296))));
                                float _3305 = _3304 * _3304;
                                float _3306 = _3305 * _3305;
                                float _3307 = _3269 - _2747;
                                float _3308 = _3270 - _2748;
                                float _3309 = _3271 - _2749;
                                float _3313 = inversesqrt(dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309)));
                                float _3317 = dot(vec3(_1292, _1295, _1298), vec3((-0.0) - _2747, (-0.0) - _2748, (-0.0) - _2749));
                                float _4019 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3320 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
                                float _3321 = dot(vec3(_1292, _1295, _1298), vec3(_3313 * _3307, _3313 * _3308, _3313 * _3309));
                                float _4030 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3324 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
                                float _3328 = ((_3324 * _3324) * (_3306 + (-1.0))) + 1.0;
                                float _3329 = (1.39999997615814208984375 / (_3277 + 1.39999997615814208984375)) * _3305;
                                float _3330 = _3329 * _3329;
                                float _3336 = ((1.0 - _3330) * dot(vec3(_1292, _1295, _1298), vec3(_3269, _3270, _3271))) + _3330;
                                float _4041 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3337 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
                                float _3338 = 1.0 - _3305;
                                float _3348 = (0.5 / (((_3337 * ((_3320 * _3338) + _3305)) + 9.9999999392252902907785028219223e-09) + (((_3337 * _3338) + _3305) * _3320))) * _3337;
                                float _4052 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3358 = ((isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * (((_3306 * 3.1415927410125732421875) * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) / ((_3328 * _3328) * ((_3280 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_65_pred = _3358 * _3151.z;
                                frontier_phi_65_pred_1 = _3358 * _3151.y;
                                frontier_phi_65_pred_2 = _3358 * _3151.x;
                            }
                            else
                            {
                                frontier_phi_65_pred = 0.0;
                                frontier_phi_65_pred_1 = 0.0;
                                frontier_phi_65_pred_2 = 0.0;
                            }
                            _3364 = frontier_phi_65_pred;
                            _3363 = frontier_phi_65_pred_1;
                            _3362 = frontier_phi_65_pred_2;
                            _3099 = _3362 + _3109;
                            _3100 = _3363 + _3110;
                            _3101 = _3364 + _3111;
                            if (_3113 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3109 = _3099;
                                _3110 = _3100;
                                _3111 = _3101;
                                _3112 = _3113;
                                continue;
                            }
                        }
                        frontier_phi_59_pred = _3099;
                        frontier_phi_59_pred_1 = _3101;
                        frontier_phi_59_pred_2 = _3100;
                    }
                    _2731 = frontier_phi_59_pred;
                    _2735 = frontier_phi_59_pred_1;
                    _2733 = frontier_phi_59_pred_2;
                    uint _2909 = _2908 + 1u;
                    if (_2909 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2905 = _2731;
                        _2906 = _2733;
                        _2907 = _2735;
                        _2908 = _2909;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_41_42_ladder = _2735;
                frontier_phi_41_42_ladder_1 = _2731;
                frontier_phi_41_42_ladder_2 = _2733;
            }
            else
            {
                frontier_phi_41_42_ladder = _2553;
                frontier_phi_41_42_ladder_1 = _2549;
                frontier_phi_41_42_ladder_2 = _2551;
            }
            _2730 = frontier_phi_41_42_ladder_1;
            _2732 = frontier_phi_41_42_ladder_2;
            _2734 = frontier_phi_41_42_ladder;
        }
        float _2739 = isnan(1.0) ? _1310 : (isnan(_1310) ? 1.0 : min(_1310, 1.0));
        _2345 = ((_2730 * 0.039999999105930328369140625) * _2739) + _2228;
        _2347 = ((_2732 * 0.039999999105930328369140625) * _2739) + _2229;
        _2349 = ((_2734 * 0.039999999105930328369140625) * _2739) + _2230;
    }
    else
    {
        _2345 = _2228;
        _2347 = _2229;
        _2349 = _2230;
    }
    uint _2356 = (_2045 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _2362 = cbInstanceData._m0[_2356].x * (_951 - (_951 * TEXCOORD_7.x));
    float _2363 = cbInstanceData._m0[_2356].y * (_953 - (_953 * TEXCOORD_7.y));
    float _2364 = cbInstanceData._m0[_2356].z * (_955 - (_955 * TEXCOORD_7.z));
    float _2384 = cbSceneParam._m0[86u].x - (cbSceneParam._m0[85u].z * 0.5);
    float _2385 = cbSceneParam._m0[86u].y - (cbSceneParam._m0[85u].w * 0.5);
    float _2386 = cbSceneParam._m0[86u].x * ((_1236 / cbSceneParam._m0[86u].x) + ((0.0999999940395355224609375 / (_1193 + 10.0)) * dot(vec3(_1272, _1273, _1274), vec3(_225, _226, _227))));
    float _2387 = isnan(_2384) ? _2386 : (isnan(_2386) ? _2384 : min(_2386, _2384));
    float _2388 = isnan(_2385) ? _1237 : (isnan(_1237) ? _2385 : min(_1237, _2385));
    vec4 _2390 = textureLod(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2387, _2388), 0.0);
    float _2392 = _2390.x;
    bool _2412 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2392)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2392))) > _1193;
    float _2413 = _2412 ? _2387 : _1236;
    float _2414 = _2412 ? _2388 : _1237;
    vec4 _2416 = texture(sampler2D(g_RefractionTexture, SS_ClampLinear), vec2(_2413, _2414));
    vec4 _2421 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_2413, _2414));
    float _2423 = _2421.x;
    float _2443 = ((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2423)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2423))) - _1193;
    bool _2450 = floatBitsToUint(cbSceneParam._m0[69u]).z != 0u;
    float _2454 = (isnan(_2443) ? 0.0 : (isnan(0.0) ? _2443 : max(0.0, _2443))) * (-1.44269502162933349609375);
    float _2474 = 0.4799999892711639404296875 - (exp2(log2(1.0 - (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0)))) * 5.0) * 0.4799999892711639404296875);
    float _2485 = (_2362 + ((_2345 + ((isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))) * _1806)) * cbPerFrame._m0[3u].x)) + (((_2474 * _2416.x) * exp2(_2454 * (_2450 ? 0.0 : cbMtdParam._m0[35u].y))) * cbSceneParam._m0[72u].w);
    float _2487 = (_2363 + ((_2347 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1806)) * cbPerFrame._m0[3u].x)) + (((_2474 * _2416.y) * exp2(_2454 * (_2450 ? 0.0 : cbMtdParam._m0[35u].z))) * cbSceneParam._m0[72u].w);
    float _2489 = (_2364 + ((_2349 + ((isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))) * _1806)) * cbPerFrame._m0[3u].x)) + (((_2474 * _2416.z) * exp2(_2454 * (_2450 ? 0.0 : cbMtdParam._m0[35u].w))) * cbSceneParam._m0[72u].w);
    float _4098 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2502 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _2512 = _1236 / cbSceneParam._m0[86u].x;
    float _2513 = _1237 / cbSceneParam._m0[86u].y;
    vec4 _2527 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2512, _2513, (log2((isnan(cbSceneParam._m0[77u].w) ? _1193 : (isnan(_1193) ? cbSceneParam._m0[77u].w : min(_1193, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2529 = _2527.x;
    float _2530 = _2527.y;
    float _2531 = _2527.z;
    float _2532 = _2527.w;
    float _2605;
    float _2607;
    float _2609;
    float _2611;
    if (_1193 > cbSceneParam._m0[78u].w)
    {
        float _2568 = isnan(_1193) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1193 : min(cbSceneParam._m0[80u].w, _1193));
        float _2569 = _2568 / _1193;
        float _2580 = _2569 * _1222;
        float _2581 = _1223 * _2569;
        float _2582 = (-0.0) - _2581;
        float _2583 = _2569 * _1224;
        float _2585 = (cbSceneParam._m0[77u].w * _2582) / _2568;
        float _2586 = _2585 + cbSceneParam._m0[79u].w;
        float _2587 = cbSceneParam._m0[79u].w - _2581;
        float _2593 = sqrt(((_2580 * _2580) + (_2581 * _2581)) + (_2583 * _2583));
        float _2596 = (1.0 - (cbSceneParam._m0[77u].w / _2568)) * _2593;
        float _2602 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2603 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2841;
        if (abs((_2582 - _2585) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2841 = ((((_2586 > 0.0) ? exp2(_2602 * _2586) : (2.0 - exp2(_2603 * _2586))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2596;
        }
        else
        {
            float _2779 = 1.0 / cbSceneParam._m0[80u].x;
            float _2780 = isnan(_2587) ? _2586 : (isnan(_2586) ? _2587 : max(_2586, _2587));
            float _2781 = isnan(_2587) ? _2586 : (isnan(_2586) ? _2587 : min(_2586, _2587));
            float _2790 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : min(_2780, 0.0));
            float _2791 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : min(_2781, 0.0));
            _2841 = ((abs(_2593 / _2582) * cbSceneParam._m0[80u].y) * ((((_2790 - _2791) * 2.0) - ((exp2(_2602 * (isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0)))) - exp2(_2602 * (isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0))))) * _2779)) - ((exp2(_2603 * _2790) - exp2(_2603 * _2791)) * _2779))) + (_2596 * cbSceneParam._m0[80u].z);
        }
        vec4 _2843 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2512, _2513, 1.0), 0.0);
        float _2852 = exp2((_2841 * (-1.44269502162933349609375)) * (1.0 - _2843.w));
        float _2853 = log2(_2852);
        float _2869 = log2(_2532);
        _2605 = (exp2(_2869 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2853 * cbSceneParam._m0[78u].x)) * _2843.x) / cbSceneParam._m0[78u].x)) + _2529;
        _2607 = (exp2(_2869 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2853 * cbSceneParam._m0[78u].y)) * _2843.y) / cbSceneParam._m0[78u].y)) + _2530;
        _2609 = (exp2(_2869 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2853 * cbSceneParam._m0[78u].z)) * _2843.z) / cbSceneParam._m0[78u].z)) + _2531;
        _2611 = _2852 * _2532;
    }
    else
    {
        _2605 = _2529;
        _2607 = _2530;
        _2609 = _2531;
        _2611 = _2532;
    }
    bool _2623 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2624 = log2(_2611);
    float _2628 = exp2(_2624 * cbSceneParam._m0[78u].x);
    float _2629 = exp2(_2624 * cbSceneParam._m0[78u].y);
    float _2630 = exp2(_2624 * cbSceneParam._m0[78u].z);
    float _2631 = _2628 * (isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0)));
    float _2632 = _2629 * (isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0)));
    float _2633 = _2630 * (isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0)));
    vec4 _2641 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_1236, _1237));
    float _2643 = _2641.x;
    float _2664 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2643)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2643))) - _1193) * cbMtdParam._m0[20u].z;
    float _4149 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2665 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _2666 = (cbInstanceData._m0[_2045 + 6u].w * (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0)))) * _2665;
    float _2675 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2675 * (_2623 ? _2631 : (_2631 + (cbSceneParam._m0[72u].w * _2605)));
    SV_Target.y = _2675 * (_2623 ? _2632 : (_2632 + (cbSceneParam._m0[72u].w * _2607)));
    SV_Target.z = _2675 * (_2623 ? _2633 : (_2633 + (cbSceneParam._m0[72u].w * _2609)));
    SV_Target.w = _2666;
    SV_Target_1.x = ((((cbMtdParam._m0[2u].x * _2362) * _2502) * _2628) * _2665) * _2675;
    SV_Target_1.y = ((((cbMtdParam._m0[2u].y * _2363) * _2502) * _2629) * _2665) * _2675;
    SV_Target_1.z = ((((cbMtdParam._m0[2u].z * _2364) * _2502) * _2630) * _2665) * _2675;
    SV_Target_1.w = _2666;
}


