#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _921;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220;
    float _221;
    float _222;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
    }
    else
    {
        _220 = _206;
        _221 = _207;
        _222 = _208;
    }
    vec4 _236 = texture(sampler2D(P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _236.x;
    float _240 = _236.y;
    float _241 = _236.z;
    float _242 = _236.w;
    vec4 _258 = texture(sampler2D(P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _261 = _258.x + cbMtdParam._m0[9u].x;
    vec4 _273 = texture(sampler2D(P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _277 = _273.z;
    float _281 = (_273.x * 2.0) + (-1.0);
    float _283 = (_273.y * 2.0) + (-1.0);
    float _284 = dot(vec2(_281, _283), vec2(_281, _283));
    float _3298 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _290 = sqrt(1.0 - (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0))));
    vec4 _303 = texture(sampler2D(P_AMSN_Emissive_Glow_MaterialEx_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _313 = fma(_290, _220, fma(_283, _212 * TANGENT.x, (_198 * _190) * _281));
    float _316 = fma(_290, _221, fma(_283, _212 * TANGENT.y, (_198 * _191) * _281));
    float _319 = fma(_290, _222, fma(_283, _212 * TANGENT.z, (_198 * _192) * _281));
    float _323 = inversesqrt(dot(vec3(_313, _316, _319), vec3(_313, _316, _319)));
    float _324 = _323 * _313;
    float _325 = _323 * _316;
    float _326 = _323 * _319;
    float _3309 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _327 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
    float _3320 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _328 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
    float _3331 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3342 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3353 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3364 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _332 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _348 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _390 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _400 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _390);
    float _401 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _390);
    float _402 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _390);
    float _406 = inversesqrt(dot(vec3(_400, _401, _402), vec3(_400, _401, _402)));
    float _407 = _400 * _406;
    float _408 = _401 * _406;
    float _409 = _402 * _406;
    float _415 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _416 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _418 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _420 = _418.w;
    float _441 = fma(_326, cbSceneParam._m0[5u].z, fma(_325, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _324));
    float _444 = fma(_326, cbSceneParam._m0[6u].z, fma(_325, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _324));
    float _447 = fma(_326, cbSceneParam._m0[7u].z, fma(_325, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _324));
    vec4 _449 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _460 = (((_449.y - _328) + (_449.w * _328)) * cbMtdParam._m0[3u].x) + _328;
    uint _473 = uint(roundEven(NORMAL.w)) * 13u;
    uint _475 = _473 + 9u;
    uint _476 = _475 + uint(cbMatDynParam._m0[0u].w);
    float _482 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0)))) * cbInstanceData._m0[_476].x;
    float _483 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0)))) * cbInstanceData._m0[_476].y;
    float _484 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0)))) * cbInstanceData._m0[_476].z;
    float _3375 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _485 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
    float _3386 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _486 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    float _3397 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _487 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    vec4 _488 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _493 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _504 = (((_493.x - _332) + (_493.w * _332)) * cbMtdParam._m0[3u].x) + _332;
    float _517 = (cbMtdParam._m0[3u].x * (((_485 * _420) - _485) + _488.x)) + _485;
    float _518 = (cbMtdParam._m0[3u].x * (((_486 * _420) - _486) + _488.y)) + _486;
    float _519 = (cbMtdParam._m0[3u].x * (((_487 * _420) - _487) + _488.z)) + _487;
    float _520 = 1.0 - _504;
    float _521 = _520 * _517;
    float _522 = _520 * _518;
    float _523 = _520 * _519;
    float _528 = (_517 + (-0.039999999105930328369140625)) * _504;
    float _529 = (_518 + (-0.039999999105930328369140625)) * _504;
    float _530 = (_519 + (-0.039999999105930328369140625)) * _504;
    float _531 = _528 + 0.039999999105930328369140625;
    float _533 = _529 + 0.039999999105930328369140625;
    float _534 = _530 + 0.039999999105930328369140625;
    vec4 _543 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _415, cbSceneParam._m0[86u].y * _416));
    float _546 = _543.x * TEXCOORD_4;
    float _547 = dot(vec3(_324, _325, _326), vec3(_407, _408, _409));
    float _550 = _547 * 2.0;
    float _554 = (_550 * _324) - _407;
    float _555 = (_550 * _325) - _408;
    float _556 = (_550 * _326) - _409;
    float _560 = abs(dot(vec3(_407, _408, _409), vec3(_324, _325, _326)));
    float _3408 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _562 = sqrt(_460);
    float _575 = exp2((_562 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_562 * 3.0));
    float _581 = (1.0 - _575) * ((_562 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _582 = _575 * _562;
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _920;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _645 = fma(_618, cbModelParam._m0[26u].z, fma(_614, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _610));
        float _649 = fma(_618, cbModelParam._m0[27u].z, fma(_614, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _610));
        float _653 = fma(_618, cbModelParam._m0[28u].z, fma(_614, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _610));
        float _678 = _610 + _324;
        float _679 = _614 + _325;
        float _680 = _618 + _326;
        float _690 = fma(_680, cbModelParam._m0[26u].z, fma(_679, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _678)) - _645;
        float _691 = fma(_680, cbModelParam._m0[27u].z, fma(_679, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _678)) - _649;
        float _692 = fma(_680, cbModelParam._m0[28u].z, fma(_679, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _678)) - _653;
        float _696 = inversesqrt(dot(vec3(_690, _691, _692), vec3(_690, _691, _692)));
        float _709 = ((_696 * _690) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_645 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _710 = ((_696 * _691) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_649 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _711 = ((_696 * _692) / cbModelParam._m0[34u].z) + ((((((_653 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        vec4 _728 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        vec4 _735 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_709, _710, _711), 0.0);
        float _748 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_714.x + (-0.5));
        float _750 = _748 * (_714.y + (-0.5));
        float _751 = _748 * (_714.z + (-0.5));
        float _758 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_721.x + (-0.5));
        float _760 = _758 * (_721.y + (-0.5));
        float _761 = _758 * (_721.z + (-0.5));
        float _768 = exp2((_728.w + (-0.5)) * 20.0) * 2.0;
        float _769 = _768 * (_728.x + (-0.5));
        float _770 = _768 * (_728.y + (-0.5));
        float _771 = _768 * (_728.z + (-0.5));
        float _778 = exp2((_735.w + (-0.5)) * 20.0) * 2.0;
        float _779 = _778 * (_735.x + (-0.5));
        float _780 = _778 * (_735.y + (-0.5));
        float _781 = _778 * (_735.z + (-0.5));
        float _782 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _783 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _784 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _785 = _749 * 0.5;
        float _786 = _759 * 0.5;
        float _787 = _769 * 0.5;
        float _788 = dot(vec3(_785, _786, _787), vec3(_785, _786, _787));
        float _793 = (_788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_788);
        float _802 = (dot(vec3(_324, _325, _326), vec3(_793 * _785, _793 * _786, _793 * _787)) + 1.0) * 0.5;
        float _3434 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _812 = sqrt(((_786 * _786) + (_785 * _785)) + (_787 * _787)) / (_782 + 9.9999997473787516355514526367188e-06);
        float _3445 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _814 = _813 * 2.0;
        float _818 = (1.0 - _813) / (_813 + 1.0);
        float _3456 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _828 = ((((1.0 - _819) * (_814 + 2.0)) * exp2(log2(isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * (_814 + 1.0))) + _819) * _782;
        float _829 = _750 * 0.5;
        float _830 = _760 * 0.5;
        float _831 = _770 * 0.5;
        float _832 = dot(vec3(_829, _830, _831), vec3(_829, _830, _831));
        float _837 = (_832 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_832);
        float _845 = (dot(vec3(_324, _325, _326), vec3(_837 * _829, _837 * _830, _837 * _831)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _854 = sqrt(((_830 * _830) + (_829 * _829)) + (_831 * _831)) / (_783 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _856 = _855 * 2.0;
        float _860 = (1.0 - _855) / (_855 + 1.0);
        float _3489 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _870 = ((((1.0 - _861) * (_856 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_856 + 1.0))) + _861) * _783;
        float _871 = _751 * 0.5;
        float _872 = _761 * 0.5;
        float _873 = _771 * 0.5;
        float _874 = dot(vec3(_871, _872, _873), vec3(_871, _872, _873));
        float _879 = (_874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_874);
        float _887 = (dot(vec3(_324, _325, _326), vec3(_879 * _871, _879 * _872, _879 * _873)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _896 = sqrt(((_872 * _872) + (_871 * _871)) + (_873 * _873)) / (_784 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _898 = _897 * 2.0;
        float _902 = (1.0 - _897) / (_897 + 1.0);
        float _3522 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _912 = ((((1.0 - _903) * (_898 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_898 + 1.0))) + _903) * _784;
        _920 = _751;
        _922 = _750;
        _923 = _749;
        _924 = _761;
        _925 = _760;
        _926 = _759;
        _927 = _771;
        _928 = _770;
        _929 = _769;
        _930 = _784;
        _931 = _783;
        _932 = _782;
        _933 = cbModelParam._m0[36u].z * (isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0)));
        _934 = cbModelParam._m0[36u].z * (isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0)));
        _935 = cbModelParam._m0[36u].z * (isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0)));
    }
    else
    {
        _920 = _921;
        _922 = _921;
        _923 = _921;
        _924 = _921;
        _925 = _921;
        _926 = _921;
        _927 = _921;
        _928 = _921;
        _929 = _921;
        _930 = _921;
        _931 = _921;
        _932 = _921;
        _933 = 0.0;
        _934 = 0.0;
        _935 = 0.0;
    }
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _961 = fma(_618, cbModelParam._m0[30u].z, fma(_614, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _610));
        float _965 = fma(_618, cbModelParam._m0[31u].z, fma(_614, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _610));
        float _969 = fma(_618, cbModelParam._m0[32u].z, fma(_614, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _610));
        float _992 = _610 + _324;
        float _993 = _614 + _325;
        float _994 = _618 + _326;
        float _1004 = fma(_994, cbModelParam._m0[30u].z, fma(_993, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _992)) - _961;
        float _1005 = fma(_994, cbModelParam._m0[31u].z, fma(_993, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _992)) - _965;
        float _1006 = fma(_994, cbModelParam._m0[32u].z, fma(_993, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _992)) - _969;
        float _1010 = inversesqrt(dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006)));
        float _1023 = ((_1010 * _1004) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_961 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1010 * _1005) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_965 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1010 * _1006) / cbModelParam._m0[35u].z) + ((((((_969 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        float _1060 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1027.x + (-0.5));
        float _1062 = _1060 * (_1027.y + (-0.5));
        float _1063 = _1060 * (_1027.z + (-0.5));
        float _1070 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1034.x + (-0.5));
        float _1072 = _1070 * (_1034.y + (-0.5));
        float _1073 = _1070 * (_1034.z + (-0.5));
        float _1080 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1041.x + (-0.5));
        float _1082 = _1080 * (_1041.y + (-0.5));
        float _1083 = _1080 * (_1041.z + (-0.5));
        float _1090 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1048.x + (-0.5));
        float _1092 = _1090 * (_1048.y + (-0.5));
        float _1093 = _1090 * (_1048.z + (-0.5));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = _1061 * 0.5;
        float _1098 = _1071 * 0.5;
        float _1099 = _1081 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1113 = (dot(vec3(_324, _325, _326), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1122 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _3585 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_1124 + 1.0))) + _1129) * _1094;
        float _1139 = _1062 * 0.5;
        float _1140 = _1072 * 0.5;
        float _1141 = _1082 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1155 = (dot(vec3(_324, _325, _326), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1164 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3618 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1166 + 1.0))) + _1171) * _1095;
        float _1181 = _1063 * 0.5;
        float _1182 = _1073 * 0.5;
        float _1183 = _1083 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_324, _325, _326), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3651 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1208 + 1.0))) + _1213) * _1096;
        _1230 = _1063;
        _1231 = _1062;
        _1232 = _1061;
        _1233 = _1073;
        _1234 = _1072;
        _1235 = _1071;
        _1236 = _1083;
        _1237 = _1082;
        _1238 = _1081;
        _1239 = _1096;
        _1240 = _1095;
        _1241 = _1094;
        _1242 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
        _1243 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
        _1244 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
    }
    else
    {
        _1230 = _921;
        _1231 = _921;
        _1232 = _921;
        _1233 = _921;
        _1234 = _921;
        _1235 = _921;
        _1236 = _921;
        _1237 = _921;
        _1238 = _921;
        _1239 = _921;
        _1240 = _921;
        _1241 = _921;
        _1242 = 0.0;
        _1243 = 0.0;
        _1244 = 0.0;
    }
    float _1254 = (cbModelParam._m0[1u].x * (_1242 - _933)) + _933;
    float _1255 = (cbModelParam._m0[1u].x * (_1243 - _934)) + _934;
    float _1256 = (cbModelParam._m0[1u].x * (_1244 - _935)) + _935;
    float _1277 = fma(_1256, cbSceneParam._m0[89u].z, fma(_1255, cbSceneParam._m0[89u].y, _1254 * cbSceneParam._m0[89u].x));
    float _1280 = fma(_1256, cbSceneParam._m0[90u].z, fma(_1255, cbSceneParam._m0[90u].y, _1254 * cbSceneParam._m0[90u].x));
    float _1283 = fma(_1256, cbSceneParam._m0[91u].z, fma(_1255, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1254));
    float _1298 = _554 * 0.5;
    float _1299 = _555 * 0.5;
    float _1300 = _556 * 0.5;
    float _1301 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_1232, _1235, _1238, _1241));
    float _1304 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_1231, _1234, _1237, _1240));
    float _1307 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_1230, _1233, _1236, _1239));
    float _1341;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1314 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_920, _924, _927, _930));
        float _1318 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_922, _925, _928, _931));
        float _1322 = dot(vec4(_1298, _1299, _1300, 1.0), vec4(_923, _926, _929, _932));
        float _1329 = dot(vec4(cbModelParam._m0[39u]), vec4(_1298, _1299, _1300, 1.0));
        _1341 = dot(vec3(isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)), isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1329) ? 0.0 : (isnan(0.0) ? _1329 : max(0.0, _1329))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1341 = 1.0;
    }
    float _1352;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1343 = dot(vec4(cbModelParam._m0[40u]), vec4(_1298, _1299, _1300, 1.0));
        _1352 = dot(vec3(isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1343) ? 0.0 : (isnan(0.0) ? _1343 : max(0.0, _1343))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1352 = 1.0;
    }
    float _1356 = (_1352 * cbModelParam._m0[1u].x) + (_1341 * (1.0 - cbModelParam._m0[1u].x));
    float _1366 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _460);
    float _1367 = isnan(_1366) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1366 : min(cbModelParam._m0[25u].z, _1366));
    float _1449;
    float _1451;
    float _1453;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1416 = fma(_618, cbModelParam._m0[13u].z, fma(_614, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _610)) + cbModelParam._m0[13u].w;
        float _1420 = fma(_618, cbModelParam._m0[14u].z, fma(_614, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _610)) + cbModelParam._m0[14u].w;
        float _1424 = fma(_618, cbModelParam._m0[15u].z, fma(_614, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _610)) + cbModelParam._m0[15u].w;
        float _1427 = fma(_556, cbModelParam._m0[13u].z, fma(_555, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _554));
        float _1430 = fma(_556, cbModelParam._m0[14u].z, fma(_555, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _554));
        float _1433 = fma(_556, cbModelParam._m0[15u].z, fma(_555, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _554));
        float _1461;
        if (_1427 > 0.0)
        {
            _1461 = abs((1.0 - _1416) / _1427);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1427 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1416 + 1.0) / _1427);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1461 = frontier_phi_16_14_ladder;
        }
        float _1669;
        if (_1430 > 0.0)
        {
            _1669 = abs((1.0 - _1420) / _1430);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1430 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1420 + 1.0) / _1430);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1669 = frontier_phi_25_21_ladder;
        }
        float _1923;
        if (_1433 > 0.0)
        {
            _1923 = abs((1.0 - _1424) / _1433);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1424 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1923 = frontier_phi_37_32_ladder;
        }
        float _1925 = isnan(_1669) ? _1461 : (isnan(_1461) ? _1669 : min(_1461, _1669));
        float _1926 = isnan(_1923) ? _1925 : (isnan(_1925) ? _1923 : min(_1925, _1923));
        float _1930 = (_1926 * _1427) + _1416;
        float _1931 = (_1926 * _1430) + _1420;
        float _1932 = (_1926 * _1433) + _1424;
        float _1933 = _1926 * 9.9999997473787516355514526367188e-05;
        float _1935 = (-1.0) - _1933;
        float _1937 = _1933 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1932 > _1937) || ((_1932 < _1935) || ((_1931 > _1937) || ((_1931 < _1935) || ((_1930 < _1935) || (_1930 > _1937))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2060 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1932, cbModelParam._m0[9u].z, fma(_1931, cbModelParam._m0[9u].y, _1930 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1932, cbModelParam._m0[10u].z, fma(_1931, cbModelParam._m0[10u].y, _1930 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1932, cbModelParam._m0[11u].z, fma(_1931, cbModelParam._m0[11u].y, _1930 * cbModelParam._m0[11u].x))), _1367);
            frontier_phi_15_37_ladder = _2060.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2060.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2060.x * cbModelParam._m0[1u].y;
        }
        _1449 = frontier_phi_15_37_ladder_2;
        _1451 = frontier_phi_15_37_ladder_1;
        _1453 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1437 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_554, _555, _556), _1367);
        _1449 = _1437.x * cbModelParam._m0[1u].y;
        _1451 = _1437.y * cbModelParam._m0[1u].y;
        _1453 = _1437.z * cbModelParam._m0[1u].y;
    }
    float _1457 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _460);
    float _1458 = isnan(_1457) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1457 : min(cbModelParam._m0[25u].w, _1457));
    float _1551;
    float _1553;
    float _1555;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1515 = fma(_618, cbModelParam._m0[21u].z, fma(_614, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _610)) + cbModelParam._m0[21u].w;
        float _1519 = fma(_618, cbModelParam._m0[22u].z, fma(_614, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _610)) + cbModelParam._m0[22u].w;
        float _1523 = fma(_618, cbModelParam._m0[23u].z, fma(_614, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _610)) + cbModelParam._m0[23u].w;
        float _1526 = fma(_556, cbModelParam._m0[21u].z, fma(_555, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _554));
        float _1529 = fma(_556, cbModelParam._m0[22u].z, fma(_555, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _554));
        float _1532 = fma(_556, cbModelParam._m0[23u].z, fma(_555, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _554));
        float _1674;
        if (_1526 > 0.0)
        {
            _1674 = abs((1.0 - _1515) / _1526);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1515 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1674 = frontier_phi_27_23_ladder;
        }
        float _1950;
        if (_1529 > 0.0)
        {
            _1950 = abs((1.0 - _1519) / _1529);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1519 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1950 = frontier_phi_39_34_ladder;
        }
        float _2163;
        if (_1532 > 0.0)
        {
            _2163 = abs((1.0 - _1523) / _1532);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1523 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2163 = frontier_phi_48_45_ladder;
        }
        float _2165 = isnan(_1950) ? _1674 : (isnan(_1674) ? _1950 : min(_1674, _1950));
        float _2166 = isnan(_2163) ? _2165 : (isnan(_2165) ? _2163 : min(_2165, _2163));
        float _2170 = (_2166 * _1526) + _1515;
        float _2171 = (_2166 * _1529) + _1519;
        float _2172 = (_2166 * _1532) + _1523;
        float _2173 = _2166 * 9.9999997473787516355514526367188e-05;
        float _2174 = (-1.0) - _2173;
        float _2176 = _2173 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2172 > _2176) || ((_2172 < _2174) || ((_2171 > _2176) || ((_2171 < _2174) || ((_2170 < _2174) || (_2170 > _2176))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2401 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2172, cbModelParam._m0[17u].z, fma(_2171, cbModelParam._m0[17u].y, _2170 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2172, cbModelParam._m0[18u].z, fma(_2171, cbModelParam._m0[18u].y, _2170 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2172, cbModelParam._m0[19u].z, fma(_2171, cbModelParam._m0[19u].y, _2170 * cbModelParam._m0[19u].x))), _1458);
            frontier_phi_24_48_ladder = _2401.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2401.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2401.x * cbModelParam._m0[1u].z;
        }
        _1551 = frontier_phi_24_48_ladder_2;
        _1553 = frontier_phi_24_48_ladder_1;
        _1555 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1535 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_554, _555, _556), _1458);
        _1551 = _1535.x * cbModelParam._m0[1u].z;
        _1553 = _1535.y * cbModelParam._m0[1u].z;
        _1555 = _1535.z * cbModelParam._m0[1u].z;
    }
    float _1568 = (((_581 * _531) + _582) * _546) * ((cbModelParam._m0[1u].w * (_1551 - _1449)) + _1449);
    float _1570 = (((_581 * _533) + _582) * _546) * ((cbModelParam._m0[1u].w * (_1553 - _1451)) + _1451);
    float _1572 = (((_581 * _534) + _582) * _546) * ((cbModelParam._m0[1u].w * (_1555 - _1453)) + _1453);
    float _1575 = fma(_1572, cbSceneParam._m0[89u].z, fma(_1570, cbSceneParam._m0[89u].y, _1568 * cbSceneParam._m0[89u].x));
    float _1578 = fma(_1572, cbSceneParam._m0[90u].z, fma(_1570, cbSceneParam._m0[90u].y, _1568 * cbSceneParam._m0[90u].x));
    float _1581 = fma(_1572, cbSceneParam._m0[91u].z, fma(_1570, cbSceneParam._m0[91u].y, _1568 * cbSceneParam._m0[91u].x));
    uvec4 _1591 = floatBitsToUint(cbInstanceData._m0[_473 + 5u]);
    uint _1593 = _1591.x * 14u;
    uint _1594 = _1593 + 13u;
    float _1601 = _546 + (-1.0);
    float _1606 = (cbLight._m0[_1594].x * _1601) + 1.0;
    float _1607 = (cbLight._m0[_1594].y * _1601) + 1.0;
    float _1608 = (cbLight._m0[_1594].z * _1601) + 1.0;
    float _1609 = (cbLight._m0[_1594].w * _1601) + 1.0;
    uint _1610 = _1593 + 5u;
    float _1616 = isnan(1.0) ? _1607 : (isnan(_1607) ? 1.0 : min(_1607, 1.0));
    uint _1620 = _1593 + 4u;
    float _1627 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
    uint _1631 = _1593 | 1u;
    float _1642 = dot(vec3(cbLight._m0[_1593].xyz), vec3(_324, _325, _326));
    float _1645 = dot(vec3(cbLight._m0[_1631].xyz), vec3(_324, _325, _326));
    float _3787 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
    float _3798 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
    float _1650 = (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * 0.3183098733425140380859375;
    float _1652 = (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * 0.3183098733425140380859375;
    float _1659 = ((cbLight._m0[_1610].x * _1616) * _1652) + ((cbLight._m0[_1620].x * _1627) * _1650);
    float _1660 = ((_1616 * cbLight._m0[_1610].y) * _1652) + ((_1627 * cbLight._m0[_1620].y) * _1650);
    float _1661 = ((_1616 * cbLight._m0[_1610].z) * _1652) + ((_1627 * cbLight._m0[_1620].z) * _1650);
    uvec4 _1666 = floatBitsToUint(cbLight._m0[_1593 + 12u]);
    bool _1668 = _1666.x == 0u;
    float _1679;
    float _1681;
    float _1683;
    if (_1668)
    {
        _1679 = _1659;
        _1681 = _1660;
        _1683 = _1661;
    }
    else
    {
        uint _1687 = _1593 + 6u;
        float _1703 = (dot(vec3(cbLight._m0[_1593 + 2u].xyz), vec3(_324, _325, _326)) * 0.5) + 0.5;
        float _1704 = _1703 * _1703;
        float _3809 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1706 = isnan(1.0) ? _1608 : (isnan(_1608) ? 1.0 : min(_1608, 1.0));
        _1679 = (((cbLight._m0[_1687].x * 0.3183098733425140380859375) * _1705) * _1706) + _1659;
        _1681 = (((cbLight._m0[_1687].y * 0.3183098733425140380859375) * _1705) * _1706) + _1660;
        _1683 = (((cbLight._m0[_1687].z * 0.3183098733425140380859375) * _1705) * _1706) + _1661;
    }
    bool _1686 = _1666.y == 0u;
    float _1724;
    float _1726;
    float _1728;
    if (_1686)
    {
        _1724 = _1679;
        _1726 = _1681;
        _1728 = _1683;
    }
    else
    {
        uint _1894 = _1593 + 7u;
        float _1910 = (dot(vec3(cbLight._m0[_1593 + 3u].xyz), vec3(_324, _325, _326)) * 0.5) + 0.5;
        float _1911 = _1910 * _1910;
        float _3825 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1912 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1913 = isnan(1.0) ? _1609 : (isnan(_1609) ? 1.0 : min(_1609, 1.0));
        _1724 = (((cbLight._m0[_1894].x * 0.3183098733425140380859375) * _1912) * _1913) + _1679;
        _1726 = (((cbLight._m0[_1894].y * 0.3183098733425140380859375) * _1912) * _1913) + _1681;
        _1728 = (((cbLight._m0[_1894].z * 0.3183098733425140380859375) * _1912) * _1913) + _1683;
    }
    uint _1731 = _1593 + 8u;
    float _1744 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1593].w)) * _460) * 0.949999988079071044921875);
    float _1745 = _1744 * _1744;
    float _1746 = cbLight._m0[_1593].x + _407;
    float _1747 = cbLight._m0[_1593].y + _408;
    float _1748 = cbLight._m0[_1593].z + _409;
    float _1752 = inversesqrt(dot(vec3(_1746, _1747, _1748), vec3(_1746, _1747, _1748)));
    float _1753 = _1752 * _1746;
    float _1754 = _1752 * _1747;
    float _1755 = _1752 * _1748;
    float _1756 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_1593].xyz));
    float _3841 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1759 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _3852 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _1760 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _1761 = dot(vec3(_324, _325, _326), vec3(_1753, _1754, _1755));
    float _3863 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1764 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _1765 = dot(vec3(cbLight._m0[_1593].xyz), vec3(_1753, _1754, _1755));
    float _3874 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1769 = _1745 * _1745;
    float _1773 = ((_1764 * _1764) * (_1769 + (-1.0))) + 1.0;
    float _1781 = exp2(log2(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * 5.0);
    float _1782 = 0.959999978542327880859375 - _528;
    float _1784 = 0.959999978542327880859375 - _529;
    float _1785 = 0.959999978542327880859375 - _530;
    float _1792 = 1.0 - _1745;
    float _1803 = (0.5 / (((_1760 * ((_1759 * _1792) + _1745)) + 9.9999999392252902907785028219223e-09) + (((_1760 * _1792) + _1745) * _1759))) * _1759;
    float _3885 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1805 = (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1769 / ((_1773 * _1773) * 3.141590118408203125));
    uint _1816 = _1593 + 9u;
    float _1827 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1631].w)) * _460) * 0.949999988079071044921875);
    float _1828 = _1827 * _1827;
    float _1829 = cbLight._m0[_1631].x + _407;
    float _1830 = cbLight._m0[_1631].y + _408;
    float _1831 = cbLight._m0[_1631].z + _409;
    float _1835 = inversesqrt(dot(vec3(_1829, _1830, _1831), vec3(_1829, _1830, _1831)));
    float _1836 = _1835 * _1829;
    float _1837 = _1835 * _1830;
    float _1838 = _1835 * _1831;
    float _1839 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_1631].xyz));
    float _3896 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1842 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _1843 = dot(vec3(_324, _325, _326), vec3(_1836, _1837, _1838));
    float _3907 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1846 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _1847 = dot(vec3(cbLight._m0[_1631].xyz), vec3(_1836, _1837, _1838));
    float _3918 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1851 = _1828 * _1828;
    float _1855 = ((_1846 * _1846) * (_1851 + (-1.0))) + 1.0;
    float _1862 = exp2(log2(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * 5.0);
    float _1869 = 1.0 - _1828;
    float _1879 = (0.5 / (((_1760 * ((_1842 * _1869) + _1828)) + 9.9999999392252902907785028219223e-09) + (((_1760 * _1869) + _1828) * _1842))) * _1842;
    float _3929 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1881 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1851 / ((_1855 * _1855) * 3.141590118408203125));
    float _1891 = (((((_1862 * _1782) + _531) * cbLight._m0[_1816].x) * _1881) * _1616) + (((((_1781 * _1782) + _531) * cbLight._m0[_1731].x) * _1805) * _1627);
    float _1892 = (((((_1862 * _1784) + _533) * cbLight._m0[_1816].y) * _1881) * _1616) + (((((_1781 * _1784) + _533) * cbLight._m0[_1731].y) * _1805) * _1627);
    float _1893 = (((((_1862 * _1785) + _534) * cbLight._m0[_1816].z) * _1881) * _1616) + (((((_1781 * _1785) + _534) * cbLight._m0[_1731].z) * _1805) * _1627);
    float _1955;
    float _1957;
    float _1959;
    if (_1668)
    {
        _1955 = _1891;
        _1957 = _1892;
        _1959 = _1893;
    }
    else
    {
        uint _1961 = _1593 + 2u;
        uint _1965 = _1593 + 10u;
        float _1979 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1961].w)) * _460) * 0.949999988079071044921875);
        float _1980 = _1979 * _1979;
        float _1981 = cbLight._m0[_1961].x + _407;
        float _1982 = cbLight._m0[_1961].y + _408;
        float _1983 = cbLight._m0[_1961].z + _409;
        float _1987 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
        float _1988 = _1987 * _1981;
        float _1989 = _1987 * _1982;
        float _1990 = _1987 * _1983;
        float _1991 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_1961].xyz));
        float _3940 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1994 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1995 = dot(vec3(_324, _325, _326), vec3(_1988, _1989, _1990));
        float _3951 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1998 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1999 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_1988, _1989, _1990));
        float _3962 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2003 = _1980 * _1980;
        float _2007 = ((_1998 * _1998) * (_2003 + (-1.0))) + 1.0;
        float _2014 = exp2(log2(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * 5.0);
        float _2021 = 1.0 - _1980;
        float _2031 = (0.5 / (((_1760 * ((_1994 * _2021) + _1980)) + 9.9999999392252902907785028219223e-09) + (((_1760 * _2021) + _1980) * _1994))) * _1994;
        float _3973 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2033 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_2003 / ((_2007 * _2007) * 3.141590118408203125));
        float _2034 = isnan(1.0) ? _1608 : (isnan(_1608) ? 1.0 : min(_1608, 1.0));
        _1955 = (((((_2014 * _1782) + _531) * cbLight._m0[_1965].x) * _2033) * _2034) + _1891;
        _1957 = (((((_2014 * _1784) + _533) * cbLight._m0[_1965].y) * _2033) * _2034) + _1892;
        _1959 = (((((_2014 * _1785) + _534) * cbLight._m0[_1965].z) * _2033) * _2034) + _1893;
    }
    float _2069;
    float _2071;
    float _2073;
    if (_1686)
    {
        _2069 = _1955;
        _2071 = _1957;
        _2073 = _1959;
    }
    else
    {
        uint _2080 = _1593 + 3u;
        uint _2084 = _1593 + 11u;
        float _2098 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2080].w)) * _460) * 0.949999988079071044921875);
        float _2099 = _2098 * _2098;
        float _2100 = cbLight._m0[_2080].x + _407;
        float _2101 = cbLight._m0[_2080].y + _408;
        float _2102 = cbLight._m0[_2080].z + _409;
        float _2106 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
        float _2107 = _2106 * _2100;
        float _2108 = _2106 * _2101;
        float _2109 = _2106 * _2102;
        float _2110 = dot(vec3(_324, _325, _326), vec3(cbLight._m0[_2080].xyz));
        float _3989 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2113 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _2114 = dot(vec3(_324, _325, _326), vec3(_2107, _2108, _2109));
        float _4000 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2117 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _2118 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_2107, _2108, _2109));
        float _4011 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2122 = _2099 * _2099;
        float _2126 = ((_2117 * _2117) * (_2122 + (-1.0))) + 1.0;
        float _2133 = exp2(log2(1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * 5.0);
        float _2140 = 1.0 - _2099;
        float _2150 = (0.5 / (((_1760 * ((_2113 * _2140) + _2099)) + 9.9999999392252902907785028219223e-09) + (((_1760 * _2140) + _2099) * _2113))) * _2113;
        float _4022 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2152 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_2122 / ((_2126 * _2126) * 3.141590118408203125));
        float _2153 = isnan(1.0) ? _1609 : (isnan(_1609) ? 1.0 : min(_1609, 1.0));
        _2069 = (((((_2133 * _1782) + _531) * cbLight._m0[_2084].x) * _2152) * _2153) + _1955;
        _2071 = (((((_2133 * _1784) + _533) * cbLight._m0[_2084].y) * _2152) * _2153) + _1957;
        _2073 = (((((_2133 * _1785) + _534) * cbLight._m0[_2084].z) * _2152) * _2153) + _1959;
    }
    float _2287;
    float _2289;
    float _2291;
    float _2293;
    float _2295;
    float _2297;
    if (_1591.y == 0u)
    {
        float _2228 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2229 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2228;
        float _2230 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2228;
        float _2231 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2228;
        uvec4 _2243 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2244 = _2243.x;
        uint _2255 = uint((float(_2243.y) * floor(float(uint(cbSceneParam._m0[85u].y * _416) / _2244))) + floor(float(uint(cbSceneParam._m0[85u].x * _415) / _2244)));
        float _2265 = (log2(_2231 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2266 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        uint _2269 = uint(isnan(14.0) ? _2266 : (isnan(_2266) ? 14.0 : min(_2266, 14.0)));
        uvec4 _2274 = texelFetch(g_lightClusterGridBuffer, int(((_2269 << 2u) + (_2255 << 6u)) >> 2u));
        uint _2275 = _2274.x;
        uint _2276 = _2243.z;
        float _2406;
        float _2408;
        float _2410;
        float _2412;
        float _2414;
        float _2416;
        if (((((1u << ((_2276 >> 4u) & 15u)) + 4294967295u) & _2275) == 0u) || ((_2276 & 240u) == 0u))
        {
            _2406 = 0.0;
            _2408 = 0.0;
            _2410 = 0.0;
            _2412 = 0.0;
            _2414 = 0.0;
            _2416 = 0.0;
        }
        else
        {
            float _2407;
            float _2409;
            float _2411;
            float _2413;
            float _2415;
            float _2417;
            float _2559 = 0.0;
            float _2560 = 0.0;
            float _2561 = 0.0;
            float _2562 = 0.0;
            float _2563 = 0.0;
            float _2564 = 0.0;
            uint _2565 = 0u;
            uint _2574;
            bool _2575;
            for (;;)
            {
                _2574 = texelFetch(g_lightClassification, int((((_2269 << 5u) + (_2255 << 9u)) + (_2565 << 2u)) >> 2u)).x;
                _2575 = _2574 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2575)
                {
                    frontier_phi_63_pred = _2564;
                    frontier_phi_63_pred_1 = _2563;
                    frontier_phi_63_pred_2 = _2562;
                    frontier_phi_63_pred_3 = _2561;
                    frontier_phi_63_pred_4 = _2560;
                    frontier_phi_63_pred_5 = _2559;
                }
                else
                {
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    float _2687;
                    float _2688;
                    uint _2689;
                    _2683 = _2559;
                    _2684 = _2560;
                    _2685 = _2561;
                    _2686 = _2562;
                    _2687 = _2563;
                    _2688 = _2564;
                    _2689 = _2574;
                    float _2615;
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    for (;;)
                    {
                        uint _2693 = uint(findLSB(_2689)) + (_2565 << 5u);
                        uint _2690 = (_2689 + 4294967295u) & _2689;
                        uint _2695 = _2693 * 48u;
                        vec4 _2709 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2695)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 3u)).x));
                        uint _2715 = (_2693 * 48u) + 4u;
                        vec4 _2728 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2715)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 3u)).x));
                        uint _2734 = (_2693 * 48u) + 8u;
                        vec3 _2745 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2734)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 2u)).x));
                        float _2749 = _2709.x - _2229;
                        float _2750 = _2709.y - _2230;
                        float _2751 = _2709.z - _2231;
                        float _2752 = dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751));
                        float _2755 = inversesqrt(_2752);
                        float _2756 = _2755 * _2749;
                        float _2757 = _2755 * _2750;
                        float _2758 = _2755 * _2751;
                        float _2759 = dot(vec3(_441, _444, _447), vec3(_2756, _2757, _2758));
                        float _2764 = 1.0 - (_2752 * _2709.w);
                        float _4048 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                        float _2765 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                        float _2766 = sqrt(_2752) * _2728.w;
                        float _2769 = 1.39999997615814208984375 / (_2766 + 1.39999997615814208984375);
                        float _2770 = _2769 * _2769;
                        float _2773 = ((1.0 - _2770) * _2759) + _2770;
                        float _2776 = _2766 * _2766;
                        float _2780 = ((isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0))) * _2765) / ((_2776 * 0.699999988079071044921875) + 1.0);
                        float _2784 = (-0.0) - _2229;
                        float _2785 = (-0.0) - _2230;
                        float _2786 = (-0.0) - _2231;
                        float _2790 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
                        float _2791 = _2790 * _2784;
                        float _2792 = _2790 * _2785;
                        float _2793 = _2790 * _2786;
                        float _2801 = exp2(log2(1.0 / ((_2776 * 3.5) + 5.0)) * 0.25);
                        float _2802 = 1.0 - _562;
                        float _2809 = sqrt(1.0 - ((1.0 - (_2802 * _2802)) * (1.0 - (_2801 * _2801))));
                        float _2810 = _2809 * _2809;
                        float _2811 = _2810 * _2810;
                        float _2812 = _2791 + _2756;
                        float _2813 = _2792 + _2757;
                        float _2814 = _2793 + _2758;
                        float _2818 = inversesqrt(dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814)));
                        float _2822 = dot(vec3(_441, _444, _447), vec3(_2791, _2792, _2793));
                        float _4064 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _2825 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
                        float _2826 = dot(vec3(_441, _444, _447), vec3(_2818 * _2812, _2818 * _2813, _2818 * _2814));
                        float _4075 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2829 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                        float _2833 = ((_2829 * _2829) * (_2811 + (-1.0))) + 1.0;
                        float _2834 = _2769 * _2810;
                        float _2835 = _2834 * _2834;
                        float _2838 = ((1.0 - _2835) * _2759) + _2835;
                        float _4086 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                        float _2839 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                        float _2840 = 1.0 - _2810;
                        float _2850 = (0.5 / (((_2839 * ((_2825 * _2840) + _2810)) + 9.9999999392252902907785028219223e-09) + (((_2839 * _2840) + _2810) * _2825))) * _2839;
                        float _4097 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                        float _2861 = (((_2811 * 3.1415927410125732421875) * (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) / ((_2833 * _2833) * ((_2776 * 2.1991131305694580078125) + 3.141590118408203125))) * _2765;
                        _2618 = (_2780 * _2728.x) + _2686;
                        _2619 = (_2780 * _2728.y) + _2687;
                        _2620 = (_2780 * _2728.z) + _2688;
                        _2615 = (_2861 * _2745.x) + _2683;
                        _2616 = (_2861 * _2745.y) + _2684;
                        _2617 = (_2861 * _2745.z) + _2685;
                        if (_2690 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2683 = _2615;
                            _2684 = _2616;
                            _2685 = _2617;
                            _2686 = _2618;
                            _2687 = _2619;
                            _2688 = _2620;
                            _2689 = _2690;
                        }
                    }
                    frontier_phi_63_pred = _2620;
                    frontier_phi_63_pred_1 = _2619;
                    frontier_phi_63_pred_2 = _2618;
                    frontier_phi_63_pred_3 = _2617;
                    frontier_phi_63_pred_4 = _2616;
                    frontier_phi_63_pred_5 = _2615;
                }
                _2417 = frontier_phi_63_pred;
                _2415 = frontier_phi_63_pred_1;
                _2413 = frontier_phi_63_pred_2;
                _2411 = frontier_phi_63_pred_3;
                _2409 = frontier_phi_63_pred_4;
                _2407 = frontier_phi_63_pred_5;
                uint _2566 = _2565 + 1u;
                if (_2566 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2559 = _2407;
                    _2560 = _2409;
                    _2561 = _2411;
                    _2562 = _2413;
                    _2563 = _2415;
                    _2564 = _2417;
                    _2565 = _2566;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2406 = _2407;
            _2408 = _2409;
            _2410 = _2411;
            _2412 = _2413;
            _2414 = _2415;
            _2416 = _2417;
        }
        uvec4 _2420 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2421 = _2420.z;
        uint _2423 = (_2421 >> 8u) & 15u;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        if (((4294967295u << _2423) & _2275) == 0u)
        {
            _2527 = _2406;
            _2529 = _2408;
            _2531 = _2410;
            _2533 = _2412;
            _2535 = _2414;
            _2537 = _2416;
        }
        else
        {
            float _2552 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
            float _2553 = _2552 * _2229;
            float _2554 = _2552 * _2230;
            float _2555 = _2552 * _2231;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2423 < ((_2421 >> 12u) & 15u))
            {
                float _2528;
                float _2530;
                float _2532;
                float _2534;
                float _2536;
                float _2538;
                float _2666 = _2406;
                float _2667 = _2408;
                float _2668 = _2410;
                float _2669 = _2412;
                float _2670 = _2414;
                float _2671 = _2416;
                uint _2672 = _2423;
                uint _2681;
                bool _2682;
                for (;;)
                {
                    _2681 = texelFetch(g_lightClassification, int((((_2269 << 5u) + (_2255 << 9u)) + (_2672 << 2u)) >> 2u)).x;
                    _2682 = _2681 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2682)
                    {
                        frontier_phi_69_pred = _2671;
                        frontier_phi_69_pred_1 = _2670;
                        frontier_phi_69_pred_2 = _2669;
                        frontier_phi_69_pred_3 = _2668;
                        frontier_phi_69_pred_4 = _2667;
                        frontier_phi_69_pred_5 = _2666;
                    }
                    else
                    {
                        float _2866;
                        float _2867;
                        float _2868;
                        float _2869;
                        float _2870;
                        float _2871;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _2879 = _2666;
                        float _2880 = _2667;
                        float _2881 = _2668;
                        float _2882 = _2669;
                        float _2883 = _2670;
                        float _2884 = _2671;
                        uint _2885 = _2681;
                        uint _2886;
                        vec4 _2911;
                        float _2912;
                        vec4 _2927;
                        vec3 _2939;
                        vec4 _2955;
                        vec4 _2971;
                        float _3018;
                        bool _3019;
                        for (;;)
                        {
                            uint _2896 = ((_2672 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2885));
                            _2886 = (_2885 + 4294967295u) & _2885;
                            uint _2898 = _2896 * 40u;
                            _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            _2912 = _2911.w;
                            uint _2914 = (_2896 * 40u) + 4u;
                            _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            uint _2929 = (_2896 * 40u) + 8u;
                            _2939 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x));
                            uint _2942 = (_2896 * 40u) + 16u;
                            _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            uint _2958 = (_2896 * 40u) + 20u;
                            _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            uint _2974 = (_2896 * 40u) + 24u;
                            vec4 _2987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2974 + 3u)).x));
                            uint _2993 = (_2896 * 40u) + 28u;
                            vec4 _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            _3018 = fma(_2231, _3006.z, fma(_2230, _3006.y, _3006.x * _2229)) + _3006.w;
                            _3019 = !((fma(_2231, _2987.z, fma(_2230, _2987.y, _2987.x * _2229)) + _2987.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3019)
                            {
                                float _3046 = _2911.x - _2229;
                                float _3047 = _2911.y - _2230;
                                float _3048 = _2911.z - _2231;
                                float _3049 = dot(vec3(_3046, _3047, _3048), vec3(_3046, _3047, _3048));
                                float _3052 = inversesqrt(_3049);
                                float _3053 = _3052 * _3046;
                                float _3054 = _3052 * _3047;
                                float _3055 = _3052 * _3048;
                                float _3059 = 1.0 - (_3049 / (_2912 * _2912));
                                float _4108 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3060 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                                float _3064 = sqrt(_3049) * _2927.w;
                                float _3066 = 1.39999997615814208984375 / (_3064 + 1.39999997615814208984375);
                                float _3067 = _3066 * _3066;
                                float _3070 = ((1.0 - _3067) * dot(vec3(_3053, _3054, _3055), vec3(_441, _444, _447))) + _3067;
                                float _3073 = _3064 * _3064;
                                float _3077 = (fma(_2231, _2955.z, fma(_2230, _2955.y, _2955.x * _2229)) + _2955.w) / _3018;
                                float _3078 = (fma(_2231, _2971.z, fma(_2230, _2971.y, _2971.x * _2229)) + _2971.w) / _3018;
                                float _3082 = 1.0 - dot(vec2(_3077, _3078), vec2(_3077, _3078));
                                float _4124 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                                float _3083 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                                float _3084 = _3083 * (((isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0))) * _3060) / ((_3073 * 0.699999988079071044921875) + 1.0));
                                float _3096 = exp2(log2(1.0 / ((_3073 * 3.5) + 5.0)) * 0.25);
                                float _3097 = 1.0 - _562;
                                float _3104 = sqrt(1.0 - ((1.0 - (_3097 * _3097)) * (1.0 - (_3096 * _3096))));
                                float _3105 = _3104 * _3104;
                                float _3106 = _3105 * _3105;
                                float _3107 = _3053 - _2553;
                                float _3108 = _3054 - _2554;
                                float _3109 = _3055 - _2555;
                                float _3113 = inversesqrt(dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109)));
                                float _3117 = dot(vec3(_441, _444, _447), vec3((-0.0) - _2553, (-0.0) - _2554, (-0.0) - _2555));
                                float _4135 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3120 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                                float _3121 = dot(vec3(_441, _444, _447), vec3(_3113 * _3107, _3113 * _3108, _3113 * _3109));
                                float _4146 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                                float _3124 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                                float _3128 = ((_3124 * _3124) * (_3106 + (-1.0))) + 1.0;
                                float _3129 = _3066 * _3105;
                                float _3130 = _3129 * _3129;
                                float _3136 = ((1.0 - _3130) * dot(vec3(_441, _444, _447), vec3(_3053, _3054, _3055))) + _3130;
                                float _4157 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3137 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3138 = 1.0 - _3105;
                                float _3148 = (0.5 / (((_3137 * ((_3120 * _3138) + _3105)) + 9.9999999392252902907785028219223e-09) + (((_3137 * _3138) + _3105) * _3120))) * _3137;
                                float _4168 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                                float _3158 = (_3083 * _3060) * (((_3106 * 3.1415927410125732421875) * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) / ((_3128 * _3128) * ((_3073 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3084 * _2927.z;
                                frontier_phi_75_pred_1 = _3084 * _2927.y;
                                frontier_phi_75_pred_2 = _3084 * _2927.x;
                                frontier_phi_75_pred_3 = _3158 * _2939.z;
                                frontier_phi_75_pred_4 = _3158 * _2939.y;
                                frontier_phi_75_pred_5 = _3158 * _2939.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3167 = frontier_phi_75_pred;
                            _3166 = frontier_phi_75_pred_1;
                            _3165 = frontier_phi_75_pred_2;
                            _3164 = frontier_phi_75_pred_3;
                            _3163 = frontier_phi_75_pred_4;
                            _3162 = frontier_phi_75_pred_5;
                            _2869 = _3165 + _2882;
                            _2870 = _3166 + _2883;
                            _2871 = _3167 + _2884;
                            _2866 = _3162 + _2879;
                            _2867 = _3163 + _2880;
                            _2868 = _3164 + _2881;
                            if (_2886 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2879 = _2866;
                                _2880 = _2867;
                                _2881 = _2868;
                                _2882 = _2869;
                                _2883 = _2870;
                                _2884 = _2871;
                                _2885 = _2886;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2871;
                        frontier_phi_69_pred_1 = _2870;
                        frontier_phi_69_pred_2 = _2869;
                        frontier_phi_69_pred_3 = _2868;
                        frontier_phi_69_pred_4 = _2867;
                        frontier_phi_69_pred_5 = _2866;
                    }
                    _2538 = frontier_phi_69_pred;
                    _2536 = frontier_phi_69_pred_1;
                    _2534 = frontier_phi_69_pred_2;
                    _2532 = frontier_phi_69_pred_3;
                    _2530 = frontier_phi_69_pred_4;
                    _2528 = frontier_phi_69_pred_5;
                    uint _2673 = _2672 + 1u;
                    if (_2673 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2666 = _2528;
                        _2667 = _2530;
                        _2668 = _2532;
                        _2669 = _2534;
                        _2670 = _2536;
                        _2671 = _2538;
                        _2672 = _2673;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2538;
                frontier_phi_57_58_ladder_1 = _2536;
                frontier_phi_57_58_ladder_2 = _2534;
                frontier_phi_57_58_ladder_3 = _2532;
                frontier_phi_57_58_ladder_4 = _2530;
                frontier_phi_57_58_ladder_5 = _2528;
            }
            else
            {
                frontier_phi_57_58_ladder = _2416;
                frontier_phi_57_58_ladder_1 = _2414;
                frontier_phi_57_58_ladder_2 = _2412;
                frontier_phi_57_58_ladder_3 = _2410;
                frontier_phi_57_58_ladder_4 = _2408;
                frontier_phi_57_58_ladder_5 = _2406;
            }
            _2527 = frontier_phi_57_58_ladder_5;
            _2529 = frontier_phi_57_58_ladder_4;
            _2531 = frontier_phi_57_58_ladder_3;
            _2533 = frontier_phi_57_58_ladder_2;
            _2535 = frontier_phi_57_58_ladder_1;
            _2537 = frontier_phi_57_58_ladder;
        }
        float _2542 = isnan(1.0) ? _546 : (isnan(_546) ? 1.0 : min(_546, 1.0));
        _2287 = (_2542 * _2533) + _1724;
        _2289 = (_2542 * _2535) + _1726;
        _2291 = (_2542 * _2537) + _1728;
        _2293 = ((_2527 * _531) * _2542) + _2069;
        _2295 = ((_2529 * _533) * _2542) + _2071;
        _2297 = ((_2531 * _534) * _2542) + _2073;
    }
    else
    {
        _2287 = _1724;
        _2289 = _1726;
        _2291 = _1728;
        _2293 = _2069;
        _2295 = _2071;
        _2297 = _2073;
    }
    uint _2303 = _475 + uint(cbMatDynParam._m0[0u].w);
    float _2309 = (_303.x * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2303].x;
    float _2310 = (_303.y * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2303].y;
    float _2311 = (_303.z * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2303].z;
    float _4184 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _4195 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _4206 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _4217 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _2329 = (((isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2287 + ((isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))) * _546))) + ((_2293 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _1356)) * cbPerFrame._m0[3u].x)) + _2309;
    float _2331 = (_2310 + ((_2295 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _1356)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2289 + ((isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))) * _546)));
    float _2333 = (_2311 + ((_2297 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _1356)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2291 + ((isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))) * _546)));
    float _4243 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2346 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _2351 = cbInstanceData._m0[_473 + 6u].w * (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)));
    float _2356 = _415 / cbSceneParam._m0[86u].x;
    float _2357 = _416 / cbSceneParam._m0[86u].y;
    vec4 _2371 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2356, _2357, (log2((isnan(cbSceneParam._m0[77u].w) ? _348 : (isnan(_348) ? cbSceneParam._m0[77u].w : min(_348, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2373 = _2371.x;
    float _2374 = _2371.y;
    float _2375 = _2371.z;
    float _2376 = _2371.w;
    float _2468;
    float _2470;
    float _2472;
    float _2474;
    if (_348 > cbSceneParam._m0[78u].w)
    {
        float _2431 = isnan(_348) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _348 : min(cbSceneParam._m0[80u].w, _348));
        float _2432 = _2431 / _348;
        float _2443 = _2432 * _400;
        float _2444 = _401 * _2432;
        float _2445 = (-0.0) - _2444;
        float _2446 = _2432 * _402;
        float _2448 = (cbSceneParam._m0[77u].w * _2445) / _2431;
        float _2449 = _2448 + cbSceneParam._m0[79u].w;
        float _2450 = cbSceneParam._m0[79u].w - _2444;
        float _2456 = sqrt(((_2443 * _2443) + (_2444 * _2444)) + (_2446 * _2446));
        float _2459 = (1.0 - (cbSceneParam._m0[77u].w / _2431)) * _2456;
        float _2464 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2466 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2628;
        if (abs((_2445 - _2448) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2628 = ((((_2449 > 0.0) ? exp2(_2464 * _2449) : (2.0 - exp2(_2466 * _2449))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2459;
        }
        else
        {
            float _2588 = 1.0 / cbSceneParam._m0[80u].x;
            float _2589 = isnan(_2450) ? _2449 : (isnan(_2449) ? _2450 : max(_2449, _2450));
            float _2590 = isnan(_2450) ? _2449 : (isnan(_2449) ? _2450 : min(_2449, _2450));
            float _2599 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : min(_2589, 0.0));
            float _2600 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : min(_2590, 0.0));
            _2628 = ((abs(_2456 / _2445) * cbSceneParam._m0[80u].y) * ((((_2599 - _2600) * 2.0) - ((exp2(_2464 * (isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0)))) - exp2(_2464 * (isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0))))) * _2588)) - ((exp2(_2466 * _2599) - exp2(_2466 * _2600)) * _2588))) + (_2459 * cbSceneParam._m0[80u].z);
        }
        vec4 _2630 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2356, _2357, 1.0), 0.0);
        float _2639 = exp2((_2628 * (-1.44269502162933349609375)) * (1.0 - _2630.w));
        float _2640 = log2(_2639);
        float _2656 = log2(_2376);
        _2468 = (exp2(_2656 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2640 * cbSceneParam._m0[78u].x)) * _2630.x) / cbSceneParam._m0[78u].x)) + _2373;
        _2470 = (exp2(_2656 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2640 * cbSceneParam._m0[78u].y)) * _2630.y) / cbSceneParam._m0[78u].y)) + _2374;
        _2472 = (exp2(_2656 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2640 * cbSceneParam._m0[78u].z)) * _2630.z) / cbSceneParam._m0[78u].z)) + _2375;
        _2474 = _2639 * _2376;
    }
    else
    {
        _2468 = _2373;
        _2470 = _2374;
        _2472 = _2375;
        _2474 = _2376;
    }
    float _2486 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2487 = _2486 == 3.0;
    float _2488 = log2(_2474);
    float _2492 = exp2(_2488 * cbSceneParam._m0[78u].x);
    float _2493 = exp2(_2488 * cbSceneParam._m0[78u].y);
    float _2494 = exp2(_2488 * cbSceneParam._m0[78u].z);
    float _2495 = _2492 * (isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0)));
    float _2496 = _2493 * (isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0)));
    float _2497 = _2494 * (isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0)));
    float _2506 = (_2486 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2506 * (_2487 ? _2495 : (_2495 + (cbSceneParam._m0[72u].w * _2468)));
    SV_Target.y = _2506 * (_2487 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2470)));
    SV_Target.z = _2506 * (_2487 ? _2497 : (_2497 + (cbSceneParam._m0[72u].w * _2472)));
    SV_Target.w = _2351;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2309) * _2346) * _2492) * _2506;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2310) * _2346) * _2493) * _2506;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2311) * _2346) * _2494) * _2506;
    SV_Target_1.w = _2351;
}


