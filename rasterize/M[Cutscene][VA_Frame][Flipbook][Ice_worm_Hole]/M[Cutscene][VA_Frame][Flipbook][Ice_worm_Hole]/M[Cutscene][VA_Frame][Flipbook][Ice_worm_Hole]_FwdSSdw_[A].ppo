#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1316;
float _3761;
float _3762;
float _3763;
float _3764;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = cbMtdParam._m0[15u].y + TEXCOORD.x;
    float _251 = cbMtdParam._m0[15u].z + TEXCOORD.y;
    vec4 _264 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _250) + cbTextureTilingScale._m0[0u].z, (_251 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _270 = _264.x * cbMtdParam._m0[9u].w;
    float _271 = _264.y * cbMtdParam._m0[10u].x;
    float _272 = _264.z * cbMtdParam._m0[10u].y;
    float _286 = cbMtdParam._m0[17u].y + TEXCOORD.x;
    float _287 = cbMtdParam._m0[17u].z + TEXCOORD.y;
    vec4 _300 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _286) + cbTextureTilingScale._m0[5u].z, (_287 * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    uvec4 _317 = floatBitsToUint(cbMtdParam._m0[9u]);
    vec4 _331 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _333 = _331.x;
    float _344 = exp2(log2(((_317.z != 0u) ? (1.0 - _333) : _333) * cbMtdParam._m0[14u].w) * cbMtdParam._m0[15u].x);
    float _3773 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _352 = cbMtdParam._m0[16u].x * cbMtdParam._m0[15u].w;
    float _355 = (_352 + (-1.0)) * cbMtdParam._m0[14u].x;
    bool _357 = _317.y != 0u;
    float _369 = (cbMtdParam._m0[16u].w + cbMtdParam._m0[14u].y) + ((TEXCOORD.z - cbMtdParam._m0[16u].w) * cbMtdParam._m0[16u].y);
    float _371 = (cbMtdParam._m0[17u].x + cbMtdParam._m0[13u].w) + ((TEXCOORD.w - cbMtdParam._m0[17u].x) * cbMtdParam._m0[16u].z);
    float _3784 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3795 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    uint _377 = uint(int(floor(_355)));
    uint _379 = _377 + 1u;
    uint _380 = uint(int(_352));
    uint _381 = _380 * 3u;
    uint _382 = _377 - _381 * (_377 / _381);
    uint _383 = _379 - _381 * (_379 / _381);
    float _386 = float(int(_382 - _380 * (_382 / _380)));
    float _390 = float(int(_383 - _380 * (_383 / _380)));
    float _394 = 1.0 / cbMtdParam._m0[15u].w;
    float _395 = 1.0 / cbMtdParam._m0[16u].x;
    float _396 = fract(_357 ? _369 : (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))));
    float _397 = fract(_357 ? _371 : (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))));
    vec4 _425 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_8, SS_WrapLinear), vec2((((_396 + (_386 - cbMtdParam._m0[15u].w * trunc(_386 / cbMtdParam._m0[15u].w))) * _394) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_397 + floor(_386 / cbMtdParam._m0[15u].w)) * _395) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _427 = _425.x;
    float _430 = ((texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_8, SS_WrapLinear), vec2((((_396 + (_390 - cbMtdParam._m0[15u].w * trunc(_390 / cbMtdParam._m0[15u].w))) * _394) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_397 + floor(_390 / cbMtdParam._m0[15u].w)) * _395) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x - _427) * fract(_355)) + _427;
    float _436 = exp2(log2(((_430 * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) + _430) * cbMtdParam._m0[13u].x) * cbMtdParam._m0[13u].y);
    float _3806 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _444 = (_437 * ((_300.x * cbMtdParam._m0[11u].w) - _270)) + _270;
    float _445 = (_437 * ((_300.y * cbMtdParam._m0[12u].x) - _271)) + _271;
    float _446 = (_437 * ((_300.z * cbMtdParam._m0[12u].y) - _272)) + _272;
    vec4 _456 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _458 = _456.x;
    bool _464 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _481 = ((_464 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _458)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _458))) - POSITION_1.w) / cbMtdParam._m0[13u].z;
    float _3817 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _482 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _3828 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _501 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _250) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _251) + cbTextureTilingScale._m0[2u].w)).x + cbMtdParam._m0[12u].w;
    float _523 = (((cbMtdParam._m0[14u].z - _501) + texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _286) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _287) + cbTextureTilingScale._m0[6u].w)).x) * _437) + _501;
    vec4 _535 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _250) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _251) + cbTextureTilingScale._m0[1u].w));
    float _537 = _535.x;
    float _538 = _535.y;
    float _539 = _535.z;
    vec4 _552 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * _286) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _287) + cbTextureTilingScale._m0[7u].w));
    float _565 = ((_552.z - _539) * _437) + _539;
    float _569 = ((((_552.x - _537) * _437) + _537) * 2.0) + (-1.0);
    float _570 = ((((_552.y - _538) * _437) + _538) * 2.0) + (-1.0);
    float _571 = dot(vec2(_569, _570), vec2(_569, _570));
    float _3839 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _576 = sqrt(1.0 - (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))));
    bool _581 = floatBitsToUint(cbMtdParam._m0[9u]).x != 0u;
    float _602 = fma(_576, _224 * NORMAL.x, fma(_570, _231 * TANGENT.x, (_217 * _209) * _569));
    float _605 = fma(_576, _224 * NORMAL.y, fma(_570, _231 * TANGENT.y, (_217 * _210) * _569));
    float _608 = fma(_576, _224 * NORMAL.z, fma(_570, _231 * TANGENT.z, (_217 * _211) * _569));
    float _612 = inversesqrt(dot(vec3(_602, _605, _608), vec3(_602, _605, _608)));
    float _613 = _612 * _602;
    float _614 = _612 * _605;
    float _615 = _612 * _608;
    float _3850 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _616 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _3861 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _617 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _3872 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _618 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _3883 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _619 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _3894 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _620 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _3905 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _621 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _626 = _464 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _676 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _666);
    float _677 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _666);
    float _678 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _666);
    float _682 = inversesqrt(dot(vec3(_676, _677, _678), vec3(_676, _677, _678)));
    float _683 = _676 * _682;
    float _684 = _677 * _682;
    float _685 = _678 * _682;
    vec4 _690 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _692 = _690.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _995 = sqrt(((_676 * _676) + (_677 * _677)) + (_678 * _678));
        float _1001 = (cbMatDynParam._m0[5u].x * _995) + cbMatDynParam._m0[5u].y;
        float _3916 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1006 = (cbMatDynParam._m0[5u].z * _995) + cbMatDynParam._m0[5u].w;
        float _3927 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) - _1002)) + _1002) < ((_692 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _702 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _703 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _705 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _707 = _705.w;
    float _725 = fma(_615, cbSceneParam._m0[5u].z, fma(_614, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _613));
    float _728 = fma(_615, cbSceneParam._m0[6u].z, fma(_614, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _613));
    float _731 = fma(_615, cbSceneParam._m0[7u].z, fma(_614, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _613));
    vec4 _733 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _735 = _733.x;
    float _747 = (((_733.y - _617) + (_733.w * _617)) * cbMtdParam._m0[3u].x) + _617;
    vec4 _748 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _764 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_735 * _735)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _748.z;
    float _772 = (((cbMatDynParam._m0[15u].x - _621) * cbMatDynParam._m0[15u].w) * _764) + _621;
    float _780 = ((_764 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _747)) + _747;
    uint _804 = uint(roundEven(NORMAL.w)) * 13u;
    uint _805 = _804 + 9u;
    uint _806 = _805 + uint(cbMatDynParam._m0[0u].w);
    float _812 = (cbMtdParam._m0[0u].x * _618) * cbInstanceData._m0[_806].x;
    float _813 = (cbMtdParam._m0[0u].y * _619) * cbInstanceData._m0[_806].y;
    float _814 = (cbMtdParam._m0[0u].z * _620) * cbInstanceData._m0[_806].z;
    float _3938 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _816 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _3960 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _817 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    vec4 _818 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    vec4 _823 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _834 = (((_823.x - _772) + (_823.w * _772)) * cbMtdParam._m0[3u].x) + _772;
    float _847 = (cbMtdParam._m0[3u].x * (((_815 * _707) - _815) + _818.x)) + _815;
    float _848 = (cbMtdParam._m0[3u].x * (((_816 * _707) - _816) + _818.y)) + _816;
    float _849 = (cbMtdParam._m0[3u].x * (((_817 * _707) - _817) + _818.z)) + _817;
    float _863 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_772 * (_618 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_772 * (_619 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_772 * (_620 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y)).z;
    float _867 = _863 * cbMatDynParam._m0[13u].w;
    float _877 = (_867 * (cbMatDynParam._m0[13u].x - _847)) + _847;
    float _878 = (_867 * (cbMatDynParam._m0[13u].y - _848)) + _848;
    float _879 = (_867 * (cbMatDynParam._m0[13u].z - _849)) + _849;
    float _887 = ((_863 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _834)) + _834;
    float _888 = 1.0 - _887;
    float _889 = _888 * _877;
    float _890 = _888 * _878;
    float _891 = _888 * _879;
    float _895 = (_877 + (-0.039999999105930328369140625)) * _887;
    float _896 = (_878 + (-0.039999999105930328369140625)) * _887;
    float _897 = (_879 + (-0.039999999105930328369140625)) * _887;
    float _898 = _895 + 0.039999999105930328369140625;
    float _899 = _896 + 0.039999999105930328369140625;
    float _900 = _897 + 0.039999999105930328369140625;
    vec4 _909 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _702, cbSceneParam._m0[86u].y * _703));
    float _912 = _909.x * TEXCOORD_6;
    float _913 = dot(vec3(_613, _614, _615), vec3(_683, _684, _685));
    float _916 = _913 * 2.0;
    float _920 = (_916 * _613) - _683;
    float _921 = (_916 * _614) - _684;
    float _922 = (_916 * _615) - _685;
    float _926 = abs(dot(vec3(_683, _684, _685), vec3(_613, _614, _615)));
    float _3971 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _928 = sqrt(_780);
    float _941 = exp2((_928 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_928 * 3.0));
    float _947 = (1.0 - _941) * ((_928 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _948 = _941 * _928;
    float _976 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1315;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1040 = fma(_984, cbModelParam._m0[26u].z, fma(_980, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _976));
        float _1044 = fma(_984, cbModelParam._m0[27u].z, fma(_980, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _976));
        float _1048 = fma(_984, cbModelParam._m0[28u].z, fma(_980, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _976));
        float _1073 = _976 + _613;
        float _1074 = _980 + _614;
        float _1075 = _984 + _615;
        float _1085 = fma(_1075, cbModelParam._m0[26u].z, fma(_1074, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1073)) - _1040;
        float _1086 = fma(_1075, cbModelParam._m0[27u].z, fma(_1074, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1073)) - _1044;
        float _1087 = fma(_1075, cbModelParam._m0[28u].z, fma(_1074, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1073)) - _1048;
        float _1091 = inversesqrt(dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087)));
        float _1104 = ((_1091 * _1085) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1040 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1091 * _1086) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1044 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1091 * _1087) / cbModelParam._m0[34u].z) + ((((((_1048 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        float _1143 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1109.x + (-0.5));
        float _1145 = _1143 * (_1109.y + (-0.5));
        float _1146 = _1143 * (_1109.z + (-0.5));
        float _1153 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1116.x + (-0.5));
        float _1155 = _1153 * (_1116.y + (-0.5));
        float _1156 = _1153 * (_1116.z + (-0.5));
        float _1163 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1123.x + (-0.5));
        float _1165 = _1163 * (_1123.y + (-0.5));
        float _1166 = _1163 * (_1123.z + (-0.5));
        float _1173 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1130.x + (-0.5));
        float _1175 = _1173 * (_1130.y + (-0.5));
        float _1176 = _1173 * (_1130.z + (-0.5));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = _1144 * 0.5;
        float _1181 = _1154 * 0.5;
        float _1182 = _1164 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1197 = (dot(vec3(_613, _614, _615), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1207 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _4019 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1209 + 1.0))) + _1214) * _1177;
        float _1224 = _1145 * 0.5;
        float _1225 = _1155 * 0.5;
        float _1226 = _1165 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_613, _614, _615), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _4052 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1251 + 1.0))) + _1256) * _1178;
        float _1266 = _1146 * 0.5;
        float _1267 = _1156 * 0.5;
        float _1268 = _1166 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_613, _614, _615), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _4085 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1293 + 1.0))) + _1298) * _1179;
        _1315 = _1146;
        _1317 = _1145;
        _1318 = _1144;
        _1319 = _1156;
        _1320 = _1155;
        _1321 = _1154;
        _1322 = _1166;
        _1323 = _1165;
        _1324 = _1164;
        _1325 = _1179;
        _1326 = _1178;
        _1327 = _1177;
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
    }
    else
    {
        _1315 = _1316;
        _1317 = _1316;
        _1318 = _1316;
        _1319 = _1316;
        _1320 = _1316;
        _1321 = _1316;
        _1322 = _1316;
        _1323 = _1316;
        _1324 = _1316;
        _1325 = _1316;
        _1326 = _1316;
        _1327 = _1316;
        _1328 = 0.0;
        _1329 = 0.0;
        _1330 = 0.0;
    }
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1359 = fma(_984, cbModelParam._m0[30u].z, fma(_980, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _976));
        float _1363 = fma(_984, cbModelParam._m0[31u].z, fma(_980, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _976));
        float _1367 = fma(_984, cbModelParam._m0[32u].z, fma(_980, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _976));
        float _1390 = _976 + _613;
        float _1391 = _980 + _614;
        float _1392 = _984 + _615;
        float _1402 = fma(_1392, cbModelParam._m0[30u].z, fma(_1391, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1390)) - _1359;
        float _1403 = fma(_1392, cbModelParam._m0[31u].z, fma(_1391, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1390)) - _1363;
        float _1404 = fma(_1392, cbModelParam._m0[32u].z, fma(_1391, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1390)) - _1367;
        float _1408 = inversesqrt(dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404)));
        float _1421 = ((_1408 * _1402) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1359 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1422 = ((_1408 * _1403) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1363 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1423 = ((_1408 * _1404) / cbModelParam._m0[35u].z) + ((((((_1367 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        float _1458 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1425.x + (-0.5));
        float _1460 = _1458 * (_1425.y + (-0.5));
        float _1461 = _1458 * (_1425.z + (-0.5));
        float _1468 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1432.x + (-0.5));
        float _1470 = _1468 * (_1432.y + (-0.5));
        float _1471 = _1468 * (_1432.z + (-0.5));
        float _1478 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1439.x + (-0.5));
        float _1480 = _1478 * (_1439.y + (-0.5));
        float _1481 = _1478 * (_1439.z + (-0.5));
        float _1488 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1446.x + (-0.5));
        float _1490 = _1488 * (_1446.y + (-0.5));
        float _1491 = _1488 * (_1446.z + (-0.5));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = _1459 * 0.5;
        float _1496 = _1469 * 0.5;
        float _1497 = _1479 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1511 = (dot(vec3(_613, _614, _615), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1520 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1522 = _1521 * 2.0;
        float _1526 = (1.0 - _1521) / (_1521 + 1.0);
        float _4148 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1536 = ((((1.0 - _1527) * (_1522 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1522 + 1.0))) + _1527) * _1492;
        float _1537 = _1460 * 0.5;
        float _1538 = _1470 * 0.5;
        float _1539 = _1480 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_613, _614, _615), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4181 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1564 + 1.0))) + _1569) * _1493;
        float _1579 = _1461 * 0.5;
        float _1580 = _1471 * 0.5;
        float _1581 = _1481 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_613, _614, _615), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4214 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1606 + 1.0))) + _1611) * _1494;
        _1628 = _1461;
        _1629 = _1460;
        _1630 = _1459;
        _1631 = _1471;
        _1632 = _1470;
        _1633 = _1469;
        _1634 = _1481;
        _1635 = _1480;
        _1636 = _1479;
        _1637 = _1494;
        _1638 = _1493;
        _1639 = _1492;
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)));
        _1641 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
    }
    else
    {
        _1628 = _1316;
        _1629 = _1316;
        _1630 = _1316;
        _1631 = _1316;
        _1632 = _1316;
        _1633 = _1316;
        _1634 = _1316;
        _1635 = _1316;
        _1636 = _1316;
        _1637 = _1316;
        _1638 = _1316;
        _1639 = _1316;
        _1640 = 0.0;
        _1641 = 0.0;
        _1642 = 0.0;
    }
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1328)) + _1328;
    float _1653 = (cbModelParam._m0[1u].x * (_1641 - _1329)) + _1329;
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1330)) + _1330;
    float _1675 = fma(_1654, cbSceneParam._m0[89u].z, fma(_1653, cbSceneParam._m0[89u].y, _1652 * cbSceneParam._m0[89u].x));
    float _1678 = fma(_1654, cbSceneParam._m0[90u].z, fma(_1653, cbSceneParam._m0[90u].y, _1652 * cbSceneParam._m0[90u].x));
    float _1681 = fma(_1654, cbSceneParam._m0[91u].z, fma(_1653, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1652));
    float _1696 = _920 * 0.5;
    float _1697 = _921 * 0.5;
    float _1698 = _922 * 0.5;
    float _1699 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1702 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1629, _1632, _1635, _1638));
    float _1705 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1736;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1712 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1315, _1319, _1322, _1325));
        float _1716 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1317, _1320, _1323, _1326));
        float _1720 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1318, _1321, _1324, _1327));
        float _1727 = dot(vec4(cbModelParam._m0[39u]), vec4(_1696, _1697, _1698, 1.0));
        _1736 = dot(vec3(isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1727) ? 0.0 : (isnan(0.0) ? _1727 : max(0.0, _1727))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1736 = 1.0;
    }
    float _1747;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1738 = dot(vec4(cbModelParam._m0[40u]), vec4(_1696, _1697, _1698, 1.0));
        _1747 = dot(vec3(isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1738) ? 0.0 : (isnan(0.0) ? _1738 : max(0.0, _1738))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1747 = 1.0;
    }
    float _1751 = (_1747 * cbModelParam._m0[1u].x) + (_1736 * (1.0 - cbModelParam._m0[1u].x));
    float _1761 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _780);
    float _1762 = isnan(_1761) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1761 : min(cbModelParam._m0[25u].z, _1761));
    float _1842;
    float _1844;
    float _1846;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1809 = fma(_984, cbModelParam._m0[13u].z, fma(_980, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _976)) + cbModelParam._m0[13u].w;
        float _1813 = fma(_984, cbModelParam._m0[14u].z, fma(_980, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _976)) + cbModelParam._m0[14u].w;
        float _1817 = fma(_984, cbModelParam._m0[15u].z, fma(_980, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _976)) + cbModelParam._m0[15u].w;
        float _1820 = fma(_922, cbModelParam._m0[13u].z, fma(_921, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _920));
        float _1823 = fma(_922, cbModelParam._m0[14u].z, fma(_921, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _920));
        float _1826 = fma(_922, cbModelParam._m0[15u].z, fma(_921, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _920));
        float _1854;
        if (_1820 > 0.0)
        {
            _1854 = abs((1.0 - _1809) / _1820);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1809 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1854 = frontier_phi_17_15_ladder;
        }
        float _2080;
        if (_1823 > 0.0)
        {
            _2080 = abs((1.0 - _1813) / _1823);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1813 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2080 = frontier_phi_26_22_ladder;
        }
        float _2337;
        if (_1826 > 0.0)
        {
            _2337 = abs((1.0 - _1817) / _1826);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1817 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2337 = frontier_phi_38_33_ladder;
        }
        float _2339 = isnan(_2080) ? _1854 : (isnan(_1854) ? _2080 : min(_1854, _2080));
        float _2340 = isnan(_2337) ? _2339 : (isnan(_2339) ? _2337 : min(_2339, _2337));
        float _2344 = (_2340 * _1820) + _1809;
        float _2345 = (_2340 * _1823) + _1813;
        float _2346 = (_2340 * _1826) + _1817;
        float _2347 = _2340 * 9.9999997473787516355514526367188e-05;
        float _2349 = (-1.0) - _2347;
        float _2351 = _2347 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2346 > _2351) || ((_2346 < _2349) || ((_2345 > _2351) || ((_2345 < _2349) || ((_2344 < _2349) || (_2344 > _2351))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2474 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2346, cbModelParam._m0[9u].z, fma(_2345, cbModelParam._m0[9u].y, _2344 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2346, cbModelParam._m0[10u].z, fma(_2345, cbModelParam._m0[10u].y, _2344 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2346, cbModelParam._m0[11u].z, fma(_2345, cbModelParam._m0[11u].y, _2344 * cbModelParam._m0[11u].x))), _1762);
            frontier_phi_16_38_ladder = _2474.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2474.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2474.x * cbModelParam._m0[1u].y;
        }
        _1842 = frontier_phi_16_38_ladder_2;
        _1844 = frontier_phi_16_38_ladder_1;
        _1846 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1830 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_920, _921, _922), _1762);
        _1842 = _1830.x * cbModelParam._m0[1u].y;
        _1844 = _1830.y * cbModelParam._m0[1u].y;
        _1846 = _1830.z * cbModelParam._m0[1u].y;
    }
    float _1850 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _780);
    float _1851 = isnan(_1850) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1850 : min(cbModelParam._m0[25u].w, _1850));
    float _1942;
    float _1944;
    float _1946;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1906 = fma(_984, cbModelParam._m0[21u].z, fma(_980, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _976)) + cbModelParam._m0[21u].w;
        float _1910 = fma(_984, cbModelParam._m0[22u].z, fma(_980, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _976)) + cbModelParam._m0[22u].w;
        float _1914 = fma(_984, cbModelParam._m0[23u].z, fma(_980, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _976)) + cbModelParam._m0[23u].w;
        float _1917 = fma(_922, cbModelParam._m0[21u].z, fma(_921, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _920));
        float _1920 = fma(_922, cbModelParam._m0[22u].z, fma(_921, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _920));
        float _1923 = fma(_922, cbModelParam._m0[23u].z, fma(_921, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _920));
        float _2085;
        if (_1917 > 0.0)
        {
            _2085 = abs((1.0 - _1906) / _1917);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1906 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2085 = frontier_phi_28_24_ladder;
        }
        float _2364;
        if (_1920 > 0.0)
        {
            _2364 = abs((1.0 - _1910) / _1920);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1910 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2364 = frontier_phi_40_35_ladder;
        }
        float _2577;
        if (_1923 > 0.0)
        {
            _2577 = abs((1.0 - _1914) / _1923);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1914 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2577 = frontier_phi_49_46_ladder;
        }
        float _2579 = isnan(_2364) ? _2085 : (isnan(_2085) ? _2364 : min(_2085, _2364));
        float _2580 = isnan(_2577) ? _2579 : (isnan(_2579) ? _2577 : min(_2579, _2577));
        float _2584 = (_2580 * _1917) + _1906;
        float _2585 = (_2580 * _1920) + _1910;
        float _2586 = (_2580 * _1923) + _1914;
        float _2587 = _2580 * 9.9999997473787516355514526367188e-05;
        float _2588 = (-1.0) - _2587;
        float _2590 = _2587 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2586 > _2590) || ((_2586 < _2588) || ((_2585 > _2590) || ((_2585 < _2588) || ((_2584 < _2588) || (_2584 > _2590))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2816 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2586, cbModelParam._m0[17u].z, fma(_2585, cbModelParam._m0[17u].y, _2584 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2586, cbModelParam._m0[18u].z, fma(_2585, cbModelParam._m0[18u].y, _2584 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2586, cbModelParam._m0[19u].z, fma(_2585, cbModelParam._m0[19u].y, _2584 * cbModelParam._m0[19u].x))), _1851);
            frontier_phi_25_49_ladder = _2816.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2816.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2816.x * cbModelParam._m0[1u].z;
        }
        _1942 = frontier_phi_25_49_ladder_2;
        _1944 = frontier_phi_25_49_ladder_1;
        _1946 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1926 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_920, _921, _922), _1851);
        _1942 = _1926.x * cbModelParam._m0[1u].z;
        _1944 = _1926.y * cbModelParam._m0[1u].z;
        _1946 = _1926.z * cbModelParam._m0[1u].z;
    }
    float _1959 = (((_947 * _898) + _948) * _912) * ((cbModelParam._m0[1u].w * (_1942 - _1842)) + _1842);
    float _1961 = (((_947 * _899) + _948) * _912) * ((cbModelParam._m0[1u].w * (_1944 - _1844)) + _1844);
    float _1963 = (((_947 * _900) + _948) * _912) * ((cbModelParam._m0[1u].w * (_1946 - _1846)) + _1846);
    float _1966 = fma(_1963, cbSceneParam._m0[89u].z, fma(_1961, cbSceneParam._m0[89u].y, _1959 * cbSceneParam._m0[89u].x));
    float _1969 = fma(_1963, cbSceneParam._m0[90u].z, fma(_1961, cbSceneParam._m0[90u].y, _1959 * cbSceneParam._m0[90u].x));
    float _1972 = fma(_1963, cbSceneParam._m0[91u].z, fma(_1961, cbSceneParam._m0[91u].y, _1959 * cbSceneParam._m0[91u].x));
    vec4 _1980 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_702, _703));
    float _1982 = _1980.w;
    float _1994 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1982);
    float _1995 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1982);
    float _1996 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1982);
    uvec4 _2000 = floatBitsToUint(cbInstanceData._m0[_804 + 5u]);
    uint _2002 = _2000.x * 14u;
    uint _2003 = _2002 + 13u;
    float _2010 = _912 + (-1.0);
    float _2015 = (cbLight._m0[_2003].x * _2010) + 1.0;
    float _2016 = (cbLight._m0[_2003].y * _2010) + 1.0;
    float _2017 = (cbLight._m0[_2003].z * _2010) + 1.0;
    float _2018 = (cbLight._m0[_2003].w * _2010) + 1.0;
    uint _2019 = _2002 + 5u;
    float _2025 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
    uint _2029 = _2002 + 4u;
    float _2039 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
    uint _2043 = _2002 | 1u;
    float _2054 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_613, _614, _615));
    float _2057 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_613, _614, _615));
    float _4350 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _4361 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2062 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * 0.3183098733425140380859375;
    float _2064 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * 0.3183098733425140380859375;
    float _2071 = ((cbLight._m0[_2019].x * _2025) * _2064) + (((cbLight._m0[_2029].x * _1994) * _2039) * _2062);
    float _2072 = ((_2025 * cbLight._m0[_2019].y) * _2064) + (((cbLight._m0[_2029].y * _1995) * _2039) * _2062);
    float _2073 = ((_2025 * cbLight._m0[_2019].z) * _2064) + (((cbLight._m0[_2029].z * _1996) * _2039) * _2062);
    uvec4 _2077 = floatBitsToUint(cbLight._m0[_2002 + 12u]);
    bool _2079 = _2077.x == 0u;
    float _2090;
    float _2092;
    float _2094;
    if (_2079)
    {
        _2090 = _2071;
        _2092 = _2072;
        _2094 = _2073;
    }
    else
    {
        uint _2098 = _2002 + 6u;
        float _2114 = (dot(vec3(cbLight._m0[_2002 + 2u].xyz), vec3(_613, _614, _615)) * 0.5) + 0.5;
        float _2115 = _2114 * _2114;
        float _4372 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2116 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2117 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2090 = (((cbLight._m0[_2098].x * 0.3183098733425140380859375) * _2116) * _2117) + _2071;
        _2092 = (((cbLight._m0[_2098].y * 0.3183098733425140380859375) * _2116) * _2117) + _2072;
        _2094 = (((cbLight._m0[_2098].z * 0.3183098733425140380859375) * _2116) * _2117) + _2073;
    }
    bool _2097 = _2077.y == 0u;
    float _2135;
    float _2137;
    float _2139;
    if (_2097)
    {
        _2135 = _2090;
        _2137 = _2092;
        _2139 = _2094;
    }
    else
    {
        uint _2308 = _2002 + 7u;
        float _2324 = (dot(vec3(cbLight._m0[_2002 + 3u].xyz), vec3(_613, _614, _615)) * 0.5) + 0.5;
        float _2325 = _2324 * _2324;
        float _4388 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2326 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2327 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2135 = (((cbLight._m0[_2308].x * 0.3183098733425140380859375) * _2326) * _2327) + _2090;
        _2137 = (((cbLight._m0[_2308].y * 0.3183098733425140380859375) * _2326) * _2327) + _2092;
        _2139 = (((cbLight._m0[_2308].z * 0.3183098733425140380859375) * _2326) * _2327) + _2094;
    }
    uint _2142 = _2002 + 8u;
    float _2155 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2002].w)) * _780) * 0.949999988079071044921875);
    float _2156 = _2155 * _2155;
    float _2157 = cbLight._m0[_2002].x + _683;
    float _2158 = cbLight._m0[_2002].y + _684;
    float _2159 = cbLight._m0[_2002].z + _685;
    float _2163 = inversesqrt(dot(vec3(_2157, _2158, _2159), vec3(_2157, _2158, _2159)));
    float _2164 = _2163 * _2157;
    float _2165 = _2163 * _2158;
    float _2166 = _2163 * _2159;
    float _2167 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2002].xyz));
    float _4404 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _4415 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _2171 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _2172 = dot(vec3(_613, _614, _615), vec3(_2164, _2165, _2166));
    float _4426 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _2176 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_2164, _2165, _2166));
    float _4437 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2180 = _2156 * _2156;
    float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
    float _2192 = exp2(log2(1.0 - (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) * 5.0);
    float _2193 = 0.959999978542327880859375 - _895;
    float _2195 = 0.959999978542327880859375 - _896;
    float _2196 = 0.959999978542327880859375 - _897;
    float _2203 = 1.0 - _2156;
    float _2214 = (0.5 / (((_2171 * ((_2170 * _2203) + _2156)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2203) + _2156) * _2170))) * _2170;
    float _4448 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2216 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
    uint _2230 = _2002 + 9u;
    float _2241 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2043].w)) * _780) * 0.949999988079071044921875);
    float _2242 = _2241 * _2241;
    float _2243 = cbLight._m0[_2043].x + _683;
    float _2244 = cbLight._m0[_2043].y + _684;
    float _2245 = cbLight._m0[_2043].z + _685;
    float _2249 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
    float _2250 = _2249 * _2243;
    float _2251 = _2249 * _2244;
    float _2252 = _2249 * _2245;
    float _2253 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2043].xyz));
    float _4459 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2256 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2257 = dot(vec3(_613, _614, _615), vec3(_2250, _2251, _2252));
    float _4470 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2260 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2261 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2250, _2251, _2252));
    float _4481 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2265 = _2242 * _2242;
    float _2269 = ((_2260 * _2260) * (_2265 + (-1.0))) + 1.0;
    float _2276 = exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0);
    float _2283 = 1.0 - _2242;
    float _2293 = (0.5 / (((_2171 * ((_2256 * _2283) + _2242)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2283) + _2242) * _2256))) * _2256;
    float _4492 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2295 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2265 / ((_2269 * _2269) * 3.141590118408203125));
    float _2305 = (((((_2276 * _2193) + _898) * cbLight._m0[_2230].x) * _2295) * _2025) + ((((cbLight._m0[_2142].x * _1994) * ((_2192 * _2193) + _898)) * _2216) * _2039);
    float _2306 = (((((_2276 * _2195) + _899) * cbLight._m0[_2230].y) * _2295) * _2025) + ((((cbLight._m0[_2142].y * _1995) * ((_2192 * _2195) + _899)) * _2216) * _2039);
    float _2307 = (((((_2276 * _2196) + _900) * cbLight._m0[_2230].z) * _2295) * _2025) + ((((cbLight._m0[_2142].z * _1996) * ((_2192 * _2196) + _900)) * _2216) * _2039);
    float _2369;
    float _2371;
    float _2373;
    if (_2079)
    {
        _2369 = _2305;
        _2371 = _2306;
        _2373 = _2307;
    }
    else
    {
        uint _2375 = _2002 + 2u;
        uint _2379 = _2002 + 10u;
        float _2393 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2375].w)) * _780) * 0.949999988079071044921875);
        float _2394 = _2393 * _2393;
        float _2395 = cbLight._m0[_2375].x + _683;
        float _2396 = cbLight._m0[_2375].y + _684;
        float _2397 = cbLight._m0[_2375].z + _685;
        float _2401 = inversesqrt(dot(vec3(_2395, _2396, _2397), vec3(_2395, _2396, _2397)));
        float _2402 = _2401 * _2395;
        float _2403 = _2401 * _2396;
        float _2404 = _2401 * _2397;
        float _2405 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2375].xyz));
        float _4503 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2409 = dot(vec3(_613, _614, _615), vec3(_2402, _2403, _2404));
        float _4514 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2412 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2413 = dot(vec3(cbLight._m0[_2375].xyz), vec3(_2402, _2403, _2404));
        float _4525 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2417 = _2394 * _2394;
        float _2421 = ((_2412 * _2412) * (_2417 + (-1.0))) + 1.0;
        float _2428 = exp2(log2(1.0 - (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) * 5.0);
        float _2435 = 1.0 - _2394;
        float _2445 = (0.5 / (((_2171 * ((_2408 * _2435) + _2394)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2435) + _2394) * _2408))) * _2408;
        float _4536 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2447 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2417 / ((_2421 * _2421) * 3.141590118408203125));
        float _2448 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2369 = (((((_2428 * _2193) + _898) * cbLight._m0[_2379].x) * _2447) * _2448) + _2305;
        _2371 = (((((_2428 * _2195) + _899) * cbLight._m0[_2379].y) * _2447) * _2448) + _2306;
        _2373 = (((((_2428 * _2196) + _900) * cbLight._m0[_2379].z) * _2447) * _2448) + _2307;
    }
    float _2483;
    float _2485;
    float _2487;
    if (_2097)
    {
        _2483 = _2369;
        _2485 = _2371;
        _2487 = _2373;
    }
    else
    {
        uint _2494 = _2002 + 3u;
        uint _2498 = _2002 + 11u;
        float _2512 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2494].w)) * _780) * 0.949999988079071044921875);
        float _2513 = _2512 * _2512;
        float _2514 = cbLight._m0[_2494].x + _683;
        float _2515 = cbLight._m0[_2494].y + _684;
        float _2516 = cbLight._m0[_2494].z + _685;
        float _2520 = inversesqrt(dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516)));
        float _2521 = _2520 * _2514;
        float _2522 = _2520 * _2515;
        float _2523 = _2520 * _2516;
        float _2524 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2494].xyz));
        float _4552 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2528 = dot(vec3(_613, _614, _615), vec3(_2521, _2522, _2523));
        float _4563 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2531 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2532 = dot(vec3(cbLight._m0[_2494].xyz), vec3(_2521, _2522, _2523));
        float _4574 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2536 = _2513 * _2513;
        float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
        float _2547 = exp2(log2(1.0 - (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) * 5.0);
        float _2554 = 1.0 - _2513;
        float _2564 = (0.5 / (((_2171 * ((_2527 * _2554) + _2513)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2554) + _2513) * _2527))) * _2527;
        float _4585 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2566 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
        float _2567 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2483 = (((((_2547 * _2193) + _898) * cbLight._m0[_2498].x) * _2566) * _2567) + _2369;
        _2485 = (((((_2547 * _2195) + _899) * cbLight._m0[_2498].y) * _2566) * _2567) + _2371;
        _2487 = (((((_2547 * _2196) + _900) * cbLight._m0[_2498].z) * _2566) * _2567) + _2373;
    }
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    float _2710;
    float _2712;
    if (_2000.y == 0u)
    {
        float _2642 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2643 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2642;
        float _2644 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2642;
        float _2645 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2642;
        uvec4 _2657 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2658 = _2657.x;
        uint _2669 = uint((float(_2657.y) * floor(float(uint(cbSceneParam._m0[85u].y * _703) / _2658))) + floor(float(uint(cbSceneParam._m0[85u].x * _702) / _2658)));
        float _2679 = (log2(_2645 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2680 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        uint _2683 = uint(isnan(14.0) ? _2680 : (isnan(_2680) ? 14.0 : min(_2680, 14.0)));
        uvec4 _2688 = texelFetch(g_lightClusterGridBuffer, int(((_2683 << 2u) + (_2669 << 6u)) >> 2u));
        uint _2689 = _2688.x;
        uint _2690 = _2657.z;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        if (((((1u << ((_2690 >> 4u) & 15u)) + 4294967295u) & _2689) == 0u) || ((_2690 & 240u) == 0u))
        {
            _2821 = 0.0;
            _2823 = 0.0;
            _2825 = 0.0;
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
        }
        else
        {
            float _2822;
            float _2824;
            float _2826;
            float _2828;
            float _2830;
            float _2832;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            uint _2988 = 0u;
            uint _2997;
            bool _2998;
            for (;;)
            {
                _2997 = texelFetch(g_lightClassification, int((((_2683 << 5u) + (_2669 << 9u)) + (_2988 << 2u)) >> 2u)).x;
                _2998 = _2997 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2998)
                {
                    frontier_phi_66_pred = _2982;
                    frontier_phi_66_pred_1 = _2987;
                    frontier_phi_66_pred_2 = _2986;
                    frontier_phi_66_pred_3 = _2985;
                    frontier_phi_66_pred_4 = _2984;
                    frontier_phi_66_pred_5 = _2983;
                }
                else
                {
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    uint _3133;
                    _3127 = _2982;
                    _3128 = _2983;
                    _3129 = _2984;
                    _3130 = _2985;
                    _3131 = _2986;
                    _3132 = _2987;
                    _3133 = _2997;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    for (;;)
                    {
                        uint _3137 = uint(findLSB(_3133)) + (_2988 << 5u);
                        uint _3134 = (_3133 + 4294967295u) & _3133;
                        uint _3139 = _3137 * 48u;
                        vec4 _3153 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3139)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 3u)).x));
                        uint _3159 = (_3137 * 48u) + 4u;
                        vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3159)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 3u)).x));
                        uint _3178 = (_3137 * 48u) + 8u;
                        vec3 _3189 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x));
                        float _3193 = _3153.x - _2643;
                        float _3194 = _3153.y - _2644;
                        float _3195 = _3153.z - _2645;
                        float _3196 = dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195));
                        float _3199 = inversesqrt(_3196);
                        float _3200 = _3199 * _3193;
                        float _3201 = _3199 * _3194;
                        float _3202 = _3199 * _3195;
                        float _3203 = dot(vec3(_725, _728, _731), vec3(_3200, _3201, _3202));
                        float _3208 = 1.0 - (_3196 * _3153.w);
                        float _4611 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3209 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                        float _3210 = sqrt(_3196) * _3172.w;
                        float _3213 = 1.39999997615814208984375 / (_3210 + 1.39999997615814208984375);
                        float _3214 = _3213 * _3213;
                        float _3217 = ((1.0 - _3214) * _3203) + _3214;
                        float _3220 = _3210 * _3210;
                        float _3224 = ((isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0))) * _3209) / ((_3220 * 0.699999988079071044921875) + 1.0);
                        float _3228 = (-0.0) - _2643;
                        float _3229 = (-0.0) - _2644;
                        float _3230 = (-0.0) - _2645;
                        float _3234 = inversesqrt(dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230)));
                        float _3235 = _3234 * _3228;
                        float _3236 = _3234 * _3229;
                        float _3237 = _3234 * _3230;
                        float _3245 = exp2(log2(1.0 / ((_3220 * 3.5) + 5.0)) * 0.25);
                        float _3246 = 1.0 - _928;
                        float _3253 = sqrt(1.0 - ((1.0 - (_3246 * _3246)) * (1.0 - (_3245 * _3245))));
                        float _3254 = _3253 * _3253;
                        float _3255 = _3254 * _3254;
                        float _3256 = _3235 + _3200;
                        float _3257 = _3236 + _3201;
                        float _3258 = _3237 + _3202;
                        float _3262 = inversesqrt(dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258)));
                        float _3266 = dot(vec3(_725, _728, _731), vec3(_3235, _3236, _3237));
                        float _4627 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3269 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3270 = dot(vec3(_725, _728, _731), vec3(_3262 * _3256, _3262 * _3257, _3262 * _3258));
                        float _4638 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3273 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3277 = ((_3273 * _3273) * (_3255 + (-1.0))) + 1.0;
                        float _3278 = _3213 * _3254;
                        float _3279 = _3278 * _3278;
                        float _3282 = ((1.0 - _3279) * _3203) + _3279;
                        float _4649 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3283 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3284 = 1.0 - _3254;
                        float _3294 = (0.5 / (((_3283 * ((_3269 * _3284) + _3254)) + 9.9999999392252902907785028219223e-09) + (((_3283 * _3284) + _3254) * _3269))) * _3283;
                        float _4660 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3305 = (((_3255 * 3.1415927410125732421875) * (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) / ((_3277 * _3277) * ((_3220 * 2.1991131305694580078125) + 3.141590118408203125))) * _3209;
                        _3057 = (_3224 * _3172.x) + _3130;
                        _3058 = (_3224 * _3172.y) + _3131;
                        _3059 = (_3224 * _3172.z) + _3132;
                        _3054 = (_3305 * _3189.x) + _3127;
                        _3055 = (_3305 * _3189.y) + _3128;
                        _3056 = (_3305 * _3189.z) + _3129;
                        if (_3134 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3127 = _3054;
                            _3128 = _3055;
                            _3129 = _3056;
                            _3130 = _3057;
                            _3131 = _3058;
                            _3132 = _3059;
                            _3133 = _3134;
                        }
                    }
                    frontier_phi_66_pred = _3054;
                    frontier_phi_66_pred_1 = _3059;
                    frontier_phi_66_pred_2 = _3058;
                    frontier_phi_66_pred_3 = _3057;
                    frontier_phi_66_pred_4 = _3056;
                    frontier_phi_66_pred_5 = _3055;
                }
                _2822 = frontier_phi_66_pred;
                _2832 = frontier_phi_66_pred_1;
                _2830 = frontier_phi_66_pred_2;
                _2828 = frontier_phi_66_pred_3;
                _2826 = frontier_phi_66_pred_4;
                _2824 = frontier_phi_66_pred_5;
                uint _2989 = _2988 + 1u;
                if (_2989 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2982 = _2822;
                    _2983 = _2824;
                    _2984 = _2826;
                    _2985 = _2828;
                    _2986 = _2830;
                    _2987 = _2832;
                    _2988 = _2989;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2821 = _2822;
            _2823 = _2824;
            _2825 = _2826;
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
        }
        uvec4 _2835 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2836 = _2835.z;
        uint _2838 = (_2836 >> 8u) & 15u;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        if (((4294967295u << _2838) & _2689) == 0u)
        {
            _2950 = _2821;
            _2952 = _2823;
            _2954 = _2825;
            _2956 = _2827;
            _2958 = _2829;
            _2960 = _2831;
        }
        else
        {
            float _2975 = inversesqrt(dot(vec3(_2643, _2644, _2645), vec3(_2643, _2644, _2645)));
            float _2976 = _2975 * _2643;
            float _2977 = _2975 * _2644;
            float _2978 = _2975 * _2645;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2838 < ((_2836 >> 12u) & 15u))
            {
                float _2951;
                float _2953;
                float _2955;
                float _2957;
                float _2959;
                float _2961;
                float _3110 = _2821;
                float _3111 = _2823;
                float _3112 = _2825;
                float _3113 = _2827;
                float _3114 = _2829;
                float _3115 = _2831;
                uint _3116 = _2838;
                uint _3125;
                bool _3126;
                for (;;)
                {
                    _3125 = texelFetch(g_lightClassification, int((((_2683 << 5u) + (_2669 << 9u)) + (_3116 << 2u)) >> 2u)).x;
                    _3126 = _3125 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3126)
                    {
                        frontier_phi_77_pred = _3115;
                        frontier_phi_77_pred_1 = _3114;
                        frontier_phi_77_pred_2 = _3113;
                        frontier_phi_77_pred_3 = _3112;
                        frontier_phi_77_pred_4 = _3111;
                        frontier_phi_77_pred_5 = _3110;
                    }
                    else
                    {
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3332 = _3110;
                        float _3333 = _3111;
                        float _3334 = _3112;
                        float _3335 = _3113;
                        float _3336 = _3114;
                        float _3337 = _3115;
                        uint _3338 = _3125;
                        uint _3339;
                        vec4 _3364;
                        float _3365;
                        vec4 _3380;
                        vec3 _3392;
                        vec4 _3407;
                        vec4 _3423;
                        float _3470;
                        bool _3471;
                        for (;;)
                        {
                            uint _3349 = ((_3116 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3338));
                            _3339 = (_3338 + 4294967295u) & _3338;
                            uint _3351 = _3349 * 40u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            _3365 = _3364.w;
                            uint _3367 = (_3349 * 40u) + 4u;
                            _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3382 = (_3349 * 40u) + 8u;
                            _3392 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x));
                            uint _3394 = (_3349 * 40u) + 16u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3410 = (_3349 * 40u) + 20u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            uint _3426 = (_3349 * 40u) + 24u;
                            vec4 _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            uint _3445 = (_3349 * 40u) + 28u;
                            vec4 _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            _3470 = fma(_2645, _3458.z, fma(_2644, _3458.y, _3458.x * _2643)) + _3458.w;
                            _3471 = !((fma(_2645, _3439.z, fma(_2644, _3439.y, _3439.x * _2643)) + _3439.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3471)
                            {
                                float _3498 = _3364.x - _2643;
                                float _3499 = _3364.y - _2644;
                                float _3500 = _3364.z - _2645;
                                float _3501 = dot(vec3(_3498, _3499, _3500), vec3(_3498, _3499, _3500));
                                float _3504 = inversesqrt(_3501);
                                float _3505 = _3504 * _3498;
                                float _3506 = _3504 * _3499;
                                float _3507 = _3504 * _3500;
                                float _3511 = 1.0 - (_3501 / (_3365 * _3365));
                                float _4671 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3512 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                                float _3516 = sqrt(_3501) * _3380.w;
                                float _3518 = 1.39999997615814208984375 / (_3516 + 1.39999997615814208984375);
                                float _3519 = _3518 * _3518;
                                float _3522 = ((1.0 - _3519) * dot(vec3(_3505, _3506, _3507), vec3(_725, _728, _731))) + _3519;
                                float _3525 = _3516 * _3516;
                                float _3529 = (fma(_2645, _3407.z, fma(_2644, _3407.y, _3407.x * _2643)) + _3407.w) / _3470;
                                float _3530 = (fma(_2645, _3423.z, fma(_2644, _3423.y, _3423.x * _2643)) + _3423.w) / _3470;
                                float _3534 = 1.0 - dot(vec2(_3529, _3530), vec2(_3529, _3530));
                                float _4687 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3535 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3536 = _3535 * (((isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0))) * _3512) / ((_3525 * 0.699999988079071044921875) + 1.0));
                                float _3548 = exp2(log2(1.0 / ((_3525 * 3.5) + 5.0)) * 0.25);
                                float _3549 = 1.0 - _928;
                                float _3556 = sqrt(1.0 - ((1.0 - (_3549 * _3549)) * (1.0 - (_3548 * _3548))));
                                float _3557 = _3556 * _3556;
                                float _3558 = _3557 * _3557;
                                float _3559 = _3505 - _2976;
                                float _3560 = _3506 - _2977;
                                float _3561 = _3507 - _2978;
                                float _3565 = inversesqrt(dot(vec3(_3559, _3560, _3561), vec3(_3559, _3560, _3561)));
                                float _3569 = dot(vec3(_725, _728, _731), vec3((-0.0) - _2976, (-0.0) - _2977, (-0.0) - _2978));
                                float _4698 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3572 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3573 = dot(vec3(_725, _728, _731), vec3(_3565 * _3559, _3565 * _3560, _3565 * _3561));
                                float _4709 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3576 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3580 = ((_3576 * _3576) * (_3558 + (-1.0))) + 1.0;
                                float _3581 = _3518 * _3557;
                                float _3582 = _3581 * _3581;
                                float _3588 = ((1.0 - _3582) * dot(vec3(_725, _728, _731), vec3(_3505, _3506, _3507))) + _3582;
                                float _4720 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3589 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3590 = 1.0 - _3557;
                                float _3600 = (0.5 / (((_3589 * ((_3572 * _3590) + _3557)) + 9.9999999392252902907785028219223e-09) + (((_3589 * _3590) + _3557) * _3572))) * _3589;
                                float _4731 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3610 = (_3535 * _3512) * (((_3558 * 3.1415927410125732421875) * (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0)))) / ((_3580 * _3580) * ((_3525 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3536 * _3380.y;
                                frontier_phi_83_pred_1 = _3536 * _3380.x;
                                frontier_phi_83_pred_2 = _3610 * _3392.z;
                                frontier_phi_83_pred_3 = _3610 * _3392.y;
                                frontier_phi_83_pred_4 = _3610 * _3392.x;
                                frontier_phi_83_pred_5 = _3536 * _3380.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3618 = frontier_phi_83_pred;
                            _3617 = frontier_phi_83_pred_1;
                            _3616 = frontier_phi_83_pred_2;
                            _3615 = frontier_phi_83_pred_3;
                            _3614 = frontier_phi_83_pred_4;
                            _3619 = frontier_phi_83_pred_5;
                            _3322 = _3617 + _3335;
                            _3323 = _3618 + _3336;
                            _3324 = _3619 + _3337;
                            _3319 = _3614 + _3332;
                            _3320 = _3615 + _3333;
                            _3321 = _3616 + _3334;
                            if (_3339 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3339;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3324;
                        frontier_phi_77_pred_1 = _3323;
                        frontier_phi_77_pred_2 = _3322;
                        frontier_phi_77_pred_3 = _3321;
                        frontier_phi_77_pred_4 = _3320;
                        frontier_phi_77_pred_5 = _3319;
                    }
                    _2961 = frontier_phi_77_pred;
                    _2959 = frontier_phi_77_pred_1;
                    _2957 = frontier_phi_77_pred_2;
                    _2955 = frontier_phi_77_pred_3;
                    _2953 = frontier_phi_77_pred_4;
                    _2951 = frontier_phi_77_pred_5;
                    uint _3117 = _3116 + 1u;
                    if (_3117 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3110 = _2951;
                        _3111 = _2953;
                        _3112 = _2955;
                        _3113 = _2957;
                        _3114 = _2959;
                        _3115 = _2961;
                        _3116 = _3117;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2955;
                frontier_phi_58_59_ladder_1 = _2961;
                frontier_phi_58_59_ladder_2 = _2959;
                frontier_phi_58_59_ladder_3 = _2957;
                frontier_phi_58_59_ladder_4 = _2953;
                frontier_phi_58_59_ladder_5 = _2951;
            }
            else
            {
                frontier_phi_58_59_ladder = _2825;
                frontier_phi_58_59_ladder_1 = _2831;
                frontier_phi_58_59_ladder_2 = _2829;
                frontier_phi_58_59_ladder_3 = _2827;
                frontier_phi_58_59_ladder_4 = _2823;
                frontier_phi_58_59_ladder_5 = _2821;
            }
            _2950 = frontier_phi_58_59_ladder_5;
            _2952 = frontier_phi_58_59_ladder_4;
            _2954 = frontier_phi_58_59_ladder;
            _2956 = frontier_phi_58_59_ladder_3;
            _2958 = frontier_phi_58_59_ladder_2;
            _2960 = frontier_phi_58_59_ladder_1;
        }
        float _2965 = isnan(1.0) ? _912 : (isnan(_912) ? 1.0 : min(_912, 1.0));
        _2702 = (_2965 * _2956) + _2135;
        _2704 = (_2965 * _2958) + _2137;
        _2706 = (_2965 * _2960) + _2139;
        _2708 = ((_2950 * _898) * _2965) + _2483;
        _2710 = ((_2952 * _899) * _2965) + _2485;
        _2712 = ((_2954 * _900) * _2965) + _2487;
    }
    else
    {
        _2702 = _2135;
        _2704 = _2137;
        _2706 = _2139;
        _2708 = _2483;
        _2710 = _2485;
        _2712 = _2487;
    }
    uint _2718 = _805 + uint(cbMatDynParam._m0[0u].w);
    float _2724 = cbInstanceData._m0[_2718].x * (_581 ? cbMtdParam._m0[17u].w : cbMtdParam._m0[10u].w);
    float _2725 = cbInstanceData._m0[_2718].y * (_581 ? cbMtdParam._m0[18u].x : cbMtdParam._m0[11u].x);
    float _2726 = cbInstanceData._m0[_2718].z * (_581 ? cbMtdParam._m0[18u].y : cbMtdParam._m0[11u].y);
    float _4747 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _4758 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _4769 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _4780 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _2744 = (((isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2702 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _912))) + ((_2708 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1751)) * cbPerFrame._m0[3u].x)) + _2724;
    float _2746 = (_2725 + ((_2710 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1751)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2704 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _912)));
    float _2748 = (_2726 + ((_2712 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1751)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2706 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _912)));
    float _2749 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
    float _2750 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
    float _2751 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
    float _2757 = cbMtdParam._m0[2u].x * _2724;
    float _2758 = cbMtdParam._m0[2u].y * _2725;
    float _2759 = cbMtdParam._m0[2u].z * _2726;
    float _4806 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2761 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
    float _2766 = cbInstanceData._m0[_804 + 6u].w * (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0)));
    float _2771 = _702 / cbSceneParam._m0[86u].x;
    float _2772 = _703 / cbSceneParam._m0[86u].y;
    vec4 _2786 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2771, _2772, (log2((isnan(cbSceneParam._m0[77u].w) ? _626 : (isnan(_626) ? cbSceneParam._m0[77u].w : min(_626, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2788 = _2786.x;
    float _2789 = _2786.y;
    float _2790 = _2786.z;
    float _2791 = _2786.w;
    float _2883;
    float _2885;
    float _2887;
    float _2889;
    if (_626 > cbSceneParam._m0[78u].w)
    {
        float _2846 = isnan(_626) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _626 : min(cbSceneParam._m0[80u].w, _626));
        float _2847 = _2846 / _626;
        float _2858 = _2847 * _676;
        float _2859 = _677 * _2847;
        float _2860 = (-0.0) - _2859;
        float _2861 = _2847 * _678;
        float _2863 = (cbSceneParam._m0[77u].w * _2860) / _2846;
        float _2864 = _2863 + cbSceneParam._m0[79u].w;
        float _2865 = cbSceneParam._m0[79u].w - _2859;
        float _2871 = sqrt(((_2858 * _2858) + (_2859 * _2859)) + (_2861 * _2861));
        float _2874 = (1.0 - (cbSceneParam._m0[77u].w / _2846)) * _2871;
        float _2879 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2881 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3067;
        if (abs((_2860 - _2863) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3067 = ((((_2864 > 0.0) ? exp2(_2879 * _2864) : (2.0 - exp2(_2881 * _2864))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2874;
        }
        else
        {
            float _3011 = 1.0 / cbSceneParam._m0[80u].x;
            float _3012 = isnan(_2865) ? _2864 : (isnan(_2864) ? _2865 : max(_2864, _2865));
            float _3013 = isnan(_2865) ? _2864 : (isnan(_2864) ? _2865 : min(_2864, _2865));
            float _3022 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : min(_3012, 0.0));
            float _3023 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : min(_3013, 0.0));
            _3067 = ((abs(_2871 / _2860) * cbSceneParam._m0[80u].y) * ((((_3022 - _3023) * 2.0) - ((exp2(_2879 * (isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0)))) - exp2(_2879 * (isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0))))) * _3011)) - ((exp2(_2881 * _3022) - exp2(_2881 * _3023)) * _3011))) + (_2874 * cbSceneParam._m0[80u].z);
        }
        vec4 _3069 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2771, _2772, 1.0), 0.0);
        float _3078 = exp2((_3067 * (-1.44269502162933349609375)) * (1.0 - _3069.w));
        float _3079 = log2(_3078);
        float _3095 = log2(_2791);
        _2883 = (exp2(_3095 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3079 * cbSceneParam._m0[78u].x)) * _3069.x) / cbSceneParam._m0[78u].x)) + _2788;
        _2885 = (exp2(_3095 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3079 * cbSceneParam._m0[78u].y)) * _3069.y) / cbSceneParam._m0[78u].y)) + _2789;
        _2887 = (exp2(_3095 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3079 * cbSceneParam._m0[78u].z)) * _3069.z) / cbSceneParam._m0[78u].z)) + _2790;
        _2889 = _3078 * _2791;
    }
    else
    {
        _2883 = _2788;
        _2885 = _2789;
        _2887 = _2790;
        _2889 = _2791;
    }
    bool _3105;
    vec4 _2899;
    vec4 _2921;
    float _2923;
    float _2927;
    float _2928;
    float _2929;
    float _2932;
    float _2935;
    float _2938;
    float _2939;
    bool _2949;
    for (;;)
    {
        _2899 = cbMatDynParam._m0[0u];
        float _2901 = roundEven(_2899.y);
        bool _2902 = _2901 == 3.0;
        float _2903 = log2(_2889);
        float _2907 = exp2(_2903 * cbSceneParam._m0[78u].x);
        float _2908 = exp2(_2903 * cbSceneParam._m0[78u].y);
        float _2909 = exp2(_2903 * cbSceneParam._m0[78u].z);
        float _2910 = _2907 * _2749;
        float _2911 = _2908 * _2750;
        float _2912 = _2909 * _2751;
        float _2919 = _692 + (-0.5);
        _2921 = cbMtdParam._m0[1u];
        _2923 = _2921.y * _2919;
        float _2926 = (_2901 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2927 = _2926 * (_2902 ? _2910 : (_2910 + (cbSceneParam._m0[72u].w * _2883)));
        _2928 = _2926 * (_2902 ? _2911 : (_2911 + (cbSceneParam._m0[72u].w * _2885)));
        _2929 = _2926 * (_2902 ? _2912 : (_2912 + (cbSceneParam._m0[72u].w * _2887)));
        _2932 = ((_2757 * _2761) * _2907) * _2926;
        _2935 = ((_2758 * _2761) * _2908) * _2926;
        _2938 = ((_2759 * _2761) * _2909) * _2926;
        _2939 = _2919 * 0.999000012874603271484375;
        _2949 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2949)
        {
            if ((cbInstanceData._m0[_804 + 7u].x + _2939) < 0.5)
            {
                _3105 = true;
                break;
            }
        }
        uint _3046 = _805 + uint(_2899.w);
        if ((cbInstanceData._m0[_3046].w < 1.0) && ((cbInstanceData._m0[_3046].w + _2939) < 0.5))
        {
            _3105 = true;
            break;
        }
        if ((_2923 + 1.0) < _2921.x)
        {
            _3105 = true;
            break;
        }
        _3105 = false;
        break;
    }
    float _3310;
    if (_3105)
    {
        discard_state = true;
        _3310 = 0.0;
    }
    else
    {
        _3310 = _2766;
    }
    SV_Target.x = _2927;
    SV_Target.y = _2928;
    SV_Target.z = _2929;
    SV_Target.w = _3310;
    SV_Target_1.x = _2932;
    SV_Target_1.y = _2935;
    SV_Target_1.z = _2938;
    SV_Target_1.w = _2766;
    discard_exit();
}


