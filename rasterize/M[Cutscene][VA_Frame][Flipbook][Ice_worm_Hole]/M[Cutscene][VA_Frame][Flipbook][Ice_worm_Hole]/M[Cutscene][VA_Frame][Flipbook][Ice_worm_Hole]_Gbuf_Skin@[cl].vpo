#version 460
#extension GL_EXT_samplerless_texture_functions : require

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_4;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 BLENDINDICES;
layout(location = 4) in vec4 BLENDWEIGHT;
layout(location = 5) in vec4 COLOR_1;
layout(location = 6) in ivec4 TEXCOORD;
layout(location = 7) in ivec2 TEXCOORD_1;
layout(location = 8) in vec4 TEXCOORD_4;
layout(location = 9) in vec4 TEXCOORD_5;
layout(location = 10) in vec4 TEXCOORD_2;
layout(location = 1) out vec4 POSITION_1;
layout(location = 2) out vec4 NORMAL_1;
layout(location = 3) out vec4 TANGENT_1;
layout(location = 4) out vec4 TEXCOORD_3;
layout(location = 5) out vec4 TEXCOORD_4_1;
layout(location = 6) out float TEXCOORD_6;

void main()
{
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    POSITION_1.x = 0.0;
    POSITION_1.y = 0.0;
    POSITION_1.z = 0.0;
    POSITION_1.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_3.x = 0.0;
    TEXCOORD_3.y = 0.0;
    TEXCOORD_3.z = 0.0;
    TEXCOORD_3.w = 0.0;
    TEXCOORD_4_1.x = 0.0;
    TEXCOORD_4_1.y = 0.0;
    TEXCOORD_4_1.z = 0.0;
    TEXCOORD_4_1.w = 0.0;
    TEXCOORD_6 = 0.0;
    float _221 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _223 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _224 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    precise float _234 = float(int(uvec2(textureSize(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_4, int(0u))).y)) + (-1.0);
    float _629 = isnan(0.0) ? cbMtdParam._m0[3u].z : (isnan(cbMtdParam._m0[3u].z) ? 0.0 : max(cbMtdParam._m0[3u].z, 0.0));
    precise float _242 = (isnan(1.0) ? _629 : (isnan(_629) ? 1.0 : min(_629, 1.0))) * _234;
    precise float _243 = TEXCOORD_2.x * 255.0;
    precise float _245 = TEXCOORD_2.y * 255.0;
    precise float _246 = _245 * 256.0;
    precise float _248 = _243 + _246;
    precise float _249 = _248 + 0.5;
    float _251 = floor(_242);
    uint _252 = uint(int(_249));
    uint _253 = uint(int(_251));
    vec4 _254 = texelFetch(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_3, ivec2(uvec2(_252, _253)), int(0u));
    float _256 = _254.x;
    float _257 = _254.y;
    float _258 = _254.z;
    precise float _266 = _251 + 1.0;
    uint _268 = uint(int(isnan(_234) ? _266 : (isnan(_266) ? _234 : min(_266, _234))));
    vec4 _269 = texelFetch(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_3, ivec2(uvec2(_252, _268)), int(0u));
    float _274 = fract(_242);
    vec4 _287 = texelFetch(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_4, ivec2(uvec2(_252, _253)), int(0u));
    float _289 = _287.x;
    float _290 = _287.y;
    float _291 = _287.z;
    vec4 _292 = texelFetch(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_4, ivec2(uvec2(_252, _268)), int(0u));
    precise float _297 = _292.x - _289;
    precise float _298 = _292.y - _290;
    precise float _299 = _292.z - _291;
    precise float _300 = _274 * _297;
    precise float _301 = _274 * _298;
    precise float _302 = _274 * _299;
    precise float _303 = _289 + _300;
    precise float _304 = _290 + _301;
    precise float _305 = _291 + _302;
    uint _310 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + (uint(gl_InstanceIndex) - uint(gl_BaseInstance));
    uvec4 _312 = texelFetch(g_InstanceIndexBuffer, int(_310));
    uint _313 = _312.x;
    precise float _314 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _317 = isnan(_314) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _314 : max(0.001000000047497451305389404296875, _314));
    precise float _319 = BLENDWEIGHT.x / _317;
    precise float _320 = BLENDWEIGHT.y / _317;
    precise float _321 = BLENDWEIGHT.z / _317;
    precise float _322 = BLENDWEIGHT.w / _317;
    uvec4 _329 = floatBitsToUint(cbInstanceData._m0[(_313 * 13u) + 4u]);
    uint _330 = _329.x;
    uint _332 = (_330 + uint(float(BLENDINDICES.x))) * 3u;
    uint _339 = _332 + 1u;
    uint _346 = _332 + 2u;
    precise float _353 = _319 * cbObjMatrix._m0[_332].x;
    precise float _354 = _319 * cbObjMatrix._m0[_339].x;
    precise float _355 = _319 * cbObjMatrix._m0[_346].x;
    precise float _356 = _319 * cbObjMatrix._m0[_332].y;
    precise float _357 = _319 * cbObjMatrix._m0[_339].y;
    precise float _358 = _319 * cbObjMatrix._m0[_346].y;
    precise float _359 = _319 * cbObjMatrix._m0[_332].z;
    precise float _360 = _319 * cbObjMatrix._m0[_339].z;
    precise float _361 = _319 * cbObjMatrix._m0[_346].z;
    precise float _362 = _319 * cbObjMatrix._m0[_332].w;
    precise float _363 = _319 * cbObjMatrix._m0[_339].w;
    precise float _364 = _319 * cbObjMatrix._m0[_346].w;
    uint _367 = (_330 + uint(float(BLENDINDICES.y))) * 3u;
    uint _374 = _367 + 1u;
    uint _381 = _367 + 2u;
    precise float _388 = _320 * cbObjMatrix._m0[_367].x;
    precise float _389 = _320 * cbObjMatrix._m0[_374].x;
    precise float _390 = _320 * cbObjMatrix._m0[_381].x;
    precise float _391 = _320 * cbObjMatrix._m0[_367].y;
    precise float _392 = _320 * cbObjMatrix._m0[_374].y;
    precise float _393 = _320 * cbObjMatrix._m0[_381].y;
    precise float _394 = _320 * cbObjMatrix._m0[_367].z;
    precise float _395 = _320 * cbObjMatrix._m0[_374].z;
    precise float _396 = _320 * cbObjMatrix._m0[_381].z;
    precise float _397 = _320 * cbObjMatrix._m0[_367].w;
    precise float _398 = _320 * cbObjMatrix._m0[_374].w;
    precise float _399 = _320 * cbObjMatrix._m0[_381].w;
    precise float _400 = _353 + _388;
    precise float _401 = _354 + _389;
    precise float _402 = _355 + _390;
    precise float _403 = _356 + _391;
    precise float _404 = _357 + _392;
    precise float _405 = _358 + _393;
    precise float _406 = _359 + _394;
    precise float _407 = _360 + _395;
    precise float _408 = _361 + _396;
    precise float _409 = _362 + _397;
    precise float _410 = _363 + _398;
    precise float _411 = _364 + _399;
    uint _414 = (_330 + uint(float(BLENDINDICES.z))) * 3u;
    uint _421 = _414 + 1u;
    uint _428 = _414 + 2u;
    precise float _435 = _321 * cbObjMatrix._m0[_414].x;
    precise float _436 = _321 * cbObjMatrix._m0[_421].x;
    precise float _437 = _321 * cbObjMatrix._m0[_428].x;
    precise float _438 = _321 * cbObjMatrix._m0[_414].y;
    precise float _439 = _321 * cbObjMatrix._m0[_421].y;
    precise float _440 = _321 * cbObjMatrix._m0[_428].y;
    precise float _441 = _321 * cbObjMatrix._m0[_414].z;
    precise float _442 = _321 * cbObjMatrix._m0[_421].z;
    precise float _443 = _321 * cbObjMatrix._m0[_428].z;
    precise float _444 = _321 * cbObjMatrix._m0[_414].w;
    precise float _445 = _321 * cbObjMatrix._m0[_421].w;
    precise float _446 = _321 * cbObjMatrix._m0[_428].w;
    precise float _447 = _400 + _435;
    precise float _448 = _401 + _436;
    precise float _449 = _402 + _437;
    precise float _450 = _403 + _438;
    precise float _451 = _404 + _439;
    precise float _452 = _405 + _440;
    precise float _453 = _406 + _441;
    precise float _454 = _407 + _442;
    precise float _455 = _408 + _443;
    precise float _456 = _409 + _444;
    precise float _457 = _410 + _445;
    precise float _458 = _411 + _446;
    uint _461 = (_330 + uint(float(BLENDINDICES.w))) * 3u;
    uint _468 = _461 + 1u;
    uint _475 = _461 + 2u;
    precise float _482 = _322 * cbObjMatrix._m0[_461].x;
    precise float _483 = _322 * cbObjMatrix._m0[_468].x;
    precise float _484 = _322 * cbObjMatrix._m0[_475].x;
    precise float _485 = _322 * cbObjMatrix._m0[_461].y;
    precise float _486 = _322 * cbObjMatrix._m0[_468].y;
    precise float _487 = _322 * cbObjMatrix._m0[_475].y;
    precise float _488 = _322 * cbObjMatrix._m0[_461].z;
    precise float _489 = _322 * cbObjMatrix._m0[_468].z;
    precise float _490 = _322 * cbObjMatrix._m0[_475].z;
    precise float _491 = _322 * cbObjMatrix._m0[_461].w;
    precise float _492 = _322 * cbObjMatrix._m0[_468].w;
    precise float _493 = _322 * cbObjMatrix._m0[_475].w;
    precise float _494 = _447 + _482;
    precise float _495 = _448 + _483;
    precise float _496 = _449 + _484;
    precise float _497 = _450 + _485;
    precise float _498 = _451 + _486;
    precise float _499 = _452 + _487;
    precise float _500 = _453 + _488;
    precise float _501 = _454 + _489;
    precise float _502 = _455 + _490;
    precise float _503 = _456 + _491;
    precise float _504 = _457 + _492;
    precise float _505 = _458 + _493;
    precise float _506 = POSITION.x * _494;
    precise float _507 = POSITION.y * _497;
    precise float _508 = _507 + _506;
    precise float _509 = POSITION.z * _500;
    precise float _510 = _509 + _508;
    precise float _511 = 1.0 * _503;
    precise float _512 = _511 + _510;
    precise float _513 = POSITION.x * _495;
    precise float _514 = POSITION.y * _498;
    precise float _515 = _514 + _513;
    precise float _516 = POSITION.z * _501;
    precise float _517 = _516 + _515;
    precise float _518 = 1.0 * _504;
    precise float _519 = _518 + _517;
    precise float _520 = POSITION.x * _496;
    precise float _521 = POSITION.y * _499;
    precise float _522 = _521 + _520;
    precise float _523 = POSITION.z * _502;
    precise float _524 = _523 + _522;
    precise float _525 = 1.0 * _505;
    precise float _526 = _525 + _524;
    precise float _527 = _303 + _512;
    precise float _528 = _304 + _519;
    precise float _529 = _305 + _526;
    precise float _545 = _527 - cbSceneParam._m0[3u].x;
    precise float _546 = _528 - cbSceneParam._m0[3u].y;
    precise float _547 = _529 - cbSceneParam._m0[3u].z;
    precise float _575 = _545 * cbSceneParam._m0[24u].x;
    precise float _576 = _546 * cbSceneParam._m0[24u].y;
    precise float _577 = _576 + _575;
    precise float _578 = _547 * cbSceneParam._m0[24u].z;
    precise float _579 = _578 + _577;
    precise float _580 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _581 = _580 + _579;
    precise float _582 = _545 * cbSceneParam._m0[25u].x;
    precise float _583 = _546 * cbSceneParam._m0[25u].y;
    precise float _584 = _583 + _582;
    precise float _585 = _547 * cbSceneParam._m0[25u].z;
    precise float _586 = _585 + _584;
    precise float _587 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _588 = _587 + _586;
    precise float _589 = _545 * cbSceneParam._m0[26u].x;
    precise float _590 = _546 * cbSceneParam._m0[26u].y;
    precise float _591 = _590 + _589;
    precise float _592 = _547 * cbSceneParam._m0[26u].z;
    precise float _593 = _592 + _591;
    precise float _594 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _595 = _594 + _593;
    precise float _596 = _545 * cbSceneParam._m0[27u].x;
    precise float _597 = _546 * cbSceneParam._m0[27u].y;
    precise float _598 = _597 + _596;
    precise float _599 = _547 * cbSceneParam._m0[27u].z;
    precise float _600 = _599 + _598;
    precise float _601 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _602 = _601 + _600;
    gl_Position.x = _581;
    gl_Position.y = _588;
    gl_Position.z = _595;
    gl_Position.w = _602;
    POSITION_1.x = _581;
    POSITION_1.y = _588;
    POSITION_1.z = _595;
    POSITION_1.w = _602;
    NORMAL_1.x = (((_269.x - _256) * 2.0) * _274) + ((_256 * 2.0) + (-1.0));
    NORMAL_1.y = (((_269.y - _257) * 2.0) * _274) + ((_257 * 2.0) + (-1.0));
    NORMAL_1.z = (_274 * ((_269.z - _258) * 2.0)) + ((_258 * 2.0) + (-1.0));
    NORMAL_1.w = float(_313);
    TANGENT_1.x = fma(_224, _500, fma(_223, _497, _494 * _221));
    TANGENT_1.y = fma(_224, _501, fma(_223, _498, _495 * _221));
    TANGENT_1.z = fma(_224, _502, fma(_223, _499, _496 * _221));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_3.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_3.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_3.z = ((float(int(uint(TEXCOORD.z))) * 0.00048828125) * cbTexScroll._m0[1u].x) + cbTexScroll._m0[1u].z;
    TEXCOORD_3.w = ((float(int(uint(TEXCOORD.w))) * 0.00048828125) * cbTexScroll._m0[1u].y) + cbTexScroll._m0[1u].w;
    TEXCOORD_4_1.x = ((float(int(uint(TEXCOORD_1.x))) * 0.00048828125) * cbTexScroll._m0[2u].x) + cbTexScroll._m0[2u].z;
    TEXCOORD_4_1.y = ((float(int(uint(TEXCOORD_1.y))) * 0.00048828125) * cbTexScroll._m0[2u].y) + cbTexScroll._m0[2u].w;
    TEXCOORD_4_1.z = TEXCOORD_2.x;
    TEXCOORD_4_1.w = TEXCOORD_2.y;
    TEXCOORD_6 = COLOR_1.x;
}


