#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_5;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_6;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_6;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1318;
float _4022;
float _4023;
float _4024;
float _4025;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = cbMtdParam._m0[15u].y + TEXCOORD.x;
    float _253 = cbMtdParam._m0[15u].z + TEXCOORD.y;
    vec4 _266 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * _252) + cbTextureTilingScale._m0[0u].z, (_253 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].w;
    float _273 = _266.y * cbMtdParam._m0[10u].x;
    float _274 = _266.z * cbMtdParam._m0[10u].y;
    float _288 = cbMtdParam._m0[17u].y + TEXCOORD.x;
    float _289 = cbMtdParam._m0[17u].z + TEXCOORD.y;
    vec4 _302 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _288) + cbTextureTilingScale._m0[5u].z, (_289 * cbTextureTilingScale._m0[5u].y) + cbTextureTilingScale._m0[5u].w));
    uvec4 _319 = floatBitsToUint(cbMtdParam._m0[9u]);
    vec4 _333 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _335 = _333.x;
    float _346 = exp2(log2(((_319.z != 0u) ? (1.0 - _335) : _335) * cbMtdParam._m0[14u].w) * cbMtdParam._m0[15u].x);
    float _4034 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _354 = cbMtdParam._m0[16u].x * cbMtdParam._m0[15u].w;
    float _357 = (_354 + (-1.0)) * cbMtdParam._m0[14u].x;
    bool _359 = _319.y != 0u;
    float _371 = (cbMtdParam._m0[16u].w + cbMtdParam._m0[14u].y) + ((TEXCOORD.z - cbMtdParam._m0[16u].w) * cbMtdParam._m0[16u].y);
    float _373 = (cbMtdParam._m0[17u].x + cbMtdParam._m0[13u].w) + ((TEXCOORD.w - cbMtdParam._m0[17u].x) * cbMtdParam._m0[16u].z);
    float _4045 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _4056 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    uint _379 = uint(int(floor(_357)));
    uint _381 = _379 + 1u;
    uint _382 = uint(int(_354));
    uint _383 = _382 * 3u;
    uint _384 = _379 - _383 * (_379 / _383);
    uint _385 = _381 - _383 * (_381 / _383);
    float _388 = float(int(_384 - _382 * (_384 / _382)));
    float _392 = float(int(_385 - _382 * (_385 / _382)));
    float _396 = 1.0 / cbMtdParam._m0[15u].w;
    float _397 = 1.0 / cbMtdParam._m0[16u].x;
    float _398 = fract(_359 ? _371 : (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))));
    float _399 = fract(_359 ? _373 : (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))));
    vec4 _427 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_8, SS_WrapLinear), vec2((((_398 + (_388 - cbMtdParam._m0[15u].w * trunc(_388 / cbMtdParam._m0[15u].w))) * _396) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_399 + floor(_388 / cbMtdParam._m0[15u].w)) * _397) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _429 = _427.x;
    float _432 = ((texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_8, SS_WrapLinear), vec2((((_398 + (_392 - cbMtdParam._m0[15u].w * trunc(_392 / cbMtdParam._m0[15u].w))) * _396) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, (((_399 + floor(_392 / cbMtdParam._m0[15u].w)) * _397) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w)).x - _429) * fract(_357)) + _429;
    float _438 = exp2(log2(((_432 * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) + _432) * cbMtdParam._m0[13u].x) * cbMtdParam._m0[13u].y);
    float _4067 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _446 = (_439 * ((_302.x * cbMtdParam._m0[11u].w) - _272)) + _272;
    float _447 = (_439 * ((_302.y * cbMtdParam._m0[12u].x) - _273)) + _273;
    float _448 = (_439 * ((_302.z * cbMtdParam._m0[12u].y) - _274)) + _274;
    vec4 _458 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _460 = _458.x;
    bool _466 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _483 = ((_466 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _460)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _460))) - POSITION_1.w) / cbMtdParam._m0[13u].z;
    float _4078 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _485 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _503 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _252) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _253) + cbTextureTilingScale._m0[2u].w)).x + cbMtdParam._m0[12u].w;
    float _525 = (((cbMtdParam._m0[14u].z - _503) + texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _288) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _289) + cbTextureTilingScale._m0[6u].w)).x) * _439) + _503;
    vec4 _537 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _252) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _253) + cbTextureTilingScale._m0[1u].w));
    float _539 = _537.x;
    float _540 = _537.y;
    float _541 = _537.z;
    vec4 _554 = texture(sampler2D(M_Cutscene_VA_Frame_Flipbook_Ice_worm_Hole_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * _288) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _289) + cbTextureTilingScale._m0[7u].w));
    float _567 = ((_554.z - _541) * _439) + _541;
    float _571 = ((((_554.x - _539) * _439) + _539) * 2.0) + (-1.0);
    float _572 = ((((_554.y - _540) * _439) + _540) * 2.0) + (-1.0);
    float _573 = dot(vec2(_571, _572), vec2(_571, _572));
    float _4100 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _578 = sqrt(1.0 - (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))));
    bool _583 = floatBitsToUint(cbMtdParam._m0[9u]).x != 0u;
    float _604 = fma(_578, _226 * NORMAL.x, fma(_572, _233 * TANGENT.x, (_219 * _211) * _571));
    float _607 = fma(_578, _226 * NORMAL.y, fma(_572, _233 * TANGENT.y, (_219 * _212) * _571));
    float _610 = fma(_578, _226 * NORMAL.z, fma(_572, _233 * TANGENT.z, (_219 * _213) * _571));
    float _614 = inversesqrt(dot(vec3(_604, _607, _610), vec3(_604, _607, _610)));
    float _615 = _614 * _604;
    float _616 = _614 * _607;
    float _617 = _614 * _610;
    float _4111 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _618 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _4122 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _619 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _4133 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _620 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _621 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _4155 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _622 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _4166 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _623 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _628 = _466 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _678 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _668);
    float _679 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _668);
    float _680 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _668);
    float _684 = inversesqrt(dot(vec3(_678, _679, _680), vec3(_678, _679, _680)));
    float _685 = _678 * _684;
    float _686 = _679 * _684;
    float _687 = _680 * _684;
    vec4 _692 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _694 = _692.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _997 = sqrt(((_678 * _678) + (_679 * _679)) + (_680 * _680));
        float _1003 = (cbMatDynParam._m0[5u].x * _997) + cbMatDynParam._m0[5u].y;
        float _4177 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1008 = (cbMatDynParam._m0[5u].z * _997) + cbMatDynParam._m0[5u].w;
        float _4188 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) - _1004)) + _1004) < ((_694 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _704 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _705 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _707 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _709 = _707.w;
    float _727 = fma(_617, cbSceneParam._m0[5u].z, fma(_616, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _615));
    float _730 = fma(_617, cbSceneParam._m0[6u].z, fma(_616, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _615));
    float _733 = fma(_617, cbSceneParam._m0[7u].z, fma(_616, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _615));
    vec4 _735 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _737 = _735.x;
    float _749 = (((_735.y - _619) + (_735.w * _619)) * cbMtdParam._m0[3u].x) + _619;
    vec4 _750 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _766 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(cbMtdParam._m0[3u].x * (_737 * _737)), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _750.z;
    float _774 = (((cbMatDynParam._m0[15u].x - _623) * cbMatDynParam._m0[15u].w) * _766) + _623;
    float _782 = ((_766 * cbMatDynParam._m0[16u].z) * (cbMatDynParam._m0[16u].x - _749)) + _749;
    uint _806 = uint(roundEven(NORMAL.w)) * 13u;
    uint _807 = _806 + 9u;
    uint _808 = _807 + uint(cbMatDynParam._m0[0u].w);
    float _814 = (cbMtdParam._m0[0u].x * _620) * cbInstanceData._m0[_808].x;
    float _815 = (cbMtdParam._m0[0u].y * _621) * cbInstanceData._m0[_808].y;
    float _816 = (cbMtdParam._m0[0u].z * _622) * cbInstanceData._m0[_808].z;
    float _4199 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _817 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _4210 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _818 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _4221 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _819 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    vec4 _820 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    vec4 _825 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y));
    float _836 = (((_825.x - _774) + (_825.w * _774)) * cbMtdParam._m0[3u].x) + _774;
    float _849 = (cbMtdParam._m0[3u].x * (((_817 * _709) - _817) + _820.x)) + _817;
    float _850 = (cbMtdParam._m0[3u].x * (((_818 * _709) - _818) + _820.y)) + _818;
    float _851 = (cbMtdParam._m0[3u].x * (((_819 * _709) - _819) + _820.z)) + _819;
    float _865 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3((_774 * (_620 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_774 * (_621 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625, (_774 * (_622 + (-0.039999999105930328369140625))) + 0.039999999105930328369140625), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.x, TEXCOORD_4.y)).z;
    float _869 = _865 * cbMatDynParam._m0[13u].w;
    float _879 = (_869 * (cbMatDynParam._m0[13u].x - _849)) + _849;
    float _880 = (_869 * (cbMatDynParam._m0[13u].y - _850)) + _850;
    float _881 = (_869 * (cbMatDynParam._m0[13u].z - _851)) + _851;
    float _889 = ((_865 * cbMatDynParam._m0[15u].w) * (cbMatDynParam._m0[15u].x - _836)) + _836;
    float _890 = 1.0 - _889;
    float _891 = _890 * _879;
    float _892 = _890 * _880;
    float _893 = _890 * _881;
    float _897 = (_879 + (-0.039999999105930328369140625)) * _889;
    float _898 = (_880 + (-0.039999999105930328369140625)) * _889;
    float _899 = (_881 + (-0.039999999105930328369140625)) * _889;
    float _900 = _897 + 0.039999999105930328369140625;
    float _901 = _898 + 0.039999999105930328369140625;
    float _902 = _899 + 0.039999999105930328369140625;
    vec4 _911 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _704, cbSceneParam._m0[86u].y * _705));
    float _914 = _911.x * TEXCOORD_6;
    float _915 = dot(vec3(_615, _616, _617), vec3(_685, _686, _687));
    float _918 = _915 * 2.0;
    float _922 = (_918 * _615) - _685;
    float _923 = (_918 * _616) - _686;
    float _924 = (_918 * _617) - _687;
    float _928 = abs(dot(vec3(_685, _686, _687), vec3(_615, _616, _617)));
    float _4232 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _930 = sqrt(_782);
    float _943 = exp2((_930 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_930 * 3.0));
    float _949 = (1.0 - _943) * ((_930 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _950 = _943 * _930;
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1317;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1042 = fma(_986, cbModelParam._m0[26u].z, fma(_982, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _978));
        float _1046 = fma(_986, cbModelParam._m0[27u].z, fma(_982, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _978));
        float _1050 = fma(_986, cbModelParam._m0[28u].z, fma(_982, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _978));
        float _1075 = _978 + _615;
        float _1076 = _982 + _616;
        float _1077 = _986 + _617;
        float _1087 = fma(_1077, cbModelParam._m0[26u].z, fma(_1076, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1075)) - _1042;
        float _1088 = fma(_1077, cbModelParam._m0[27u].z, fma(_1076, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1075)) - _1046;
        float _1089 = fma(_1077, cbModelParam._m0[28u].z, fma(_1076, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1075)) - _1050;
        float _1093 = inversesqrt(dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089)));
        float _1106 = ((_1093 * _1087) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1042 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1093 * _1088) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1046 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1093 * _1089) / cbModelParam._m0[34u].z) + ((((((_1050 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        float _1145 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1111.x + (-0.5));
        float _1147 = _1145 * (_1111.y + (-0.5));
        float _1148 = _1145 * (_1111.z + (-0.5));
        float _1155 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1118.x + (-0.5));
        float _1157 = _1155 * (_1118.y + (-0.5));
        float _1158 = _1155 * (_1118.z + (-0.5));
        float _1165 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1125.x + (-0.5));
        float _1167 = _1165 * (_1125.y + (-0.5));
        float _1168 = _1165 * (_1125.z + (-0.5));
        float _1175 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1132.x + (-0.5));
        float _1177 = _1175 * (_1132.y + (-0.5));
        float _1178 = _1175 * (_1132.z + (-0.5));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = _1146 * 0.5;
        float _1183 = _1156 * 0.5;
        float _1184 = _1166 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1199 = (dot(vec3(_615, _616, _617), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1209 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _4280 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1211 + 1.0))) + _1216) * _1179;
        float _1226 = _1147 * 0.5;
        float _1227 = _1157 * 0.5;
        float _1228 = _1167 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_615, _616, _617), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _4313 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1253 + 1.0))) + _1258) * _1180;
        float _1268 = _1148 * 0.5;
        float _1269 = _1158 * 0.5;
        float _1270 = _1168 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_615, _616, _617), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _4346 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1295 + 1.0))) + _1300) * _1181;
        _1317 = _1148;
        _1319 = _1147;
        _1320 = _1146;
        _1321 = _1158;
        _1322 = _1157;
        _1323 = _1156;
        _1324 = _1168;
        _1325 = _1167;
        _1326 = _1166;
        _1327 = _1181;
        _1328 = _1180;
        _1329 = _1179;
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
    }
    else
    {
        _1317 = _1318;
        _1319 = _1318;
        _1320 = _1318;
        _1321 = _1318;
        _1322 = _1318;
        _1323 = _1318;
        _1324 = _1318;
        _1325 = _1318;
        _1326 = _1318;
        _1327 = _1318;
        _1328 = _1318;
        _1329 = _1318;
        _1330 = 0.0;
        _1331 = 0.0;
        _1332 = 0.0;
    }
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1361 = fma(_986, cbModelParam._m0[30u].z, fma(_982, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _978));
        float _1365 = fma(_986, cbModelParam._m0[31u].z, fma(_982, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _978));
        float _1369 = fma(_986, cbModelParam._m0[32u].z, fma(_982, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _978));
        float _1392 = _978 + _615;
        float _1393 = _982 + _616;
        float _1394 = _986 + _617;
        float _1404 = fma(_1394, cbModelParam._m0[30u].z, fma(_1393, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1392)) - _1361;
        float _1405 = fma(_1394, cbModelParam._m0[31u].z, fma(_1393, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1392)) - _1365;
        float _1406 = fma(_1394, cbModelParam._m0[32u].z, fma(_1393, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1392)) - _1369;
        float _1410 = inversesqrt(dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406)));
        float _1423 = ((_1410 * _1404) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1361 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1424 = ((_1410 * _1405) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1365 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1425 = ((_1410 * _1406) / cbModelParam._m0[35u].z) + ((((((_1369 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        float _1460 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1427.x + (-0.5));
        float _1462 = _1460 * (_1427.y + (-0.5));
        float _1463 = _1460 * (_1427.z + (-0.5));
        float _1470 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1434.x + (-0.5));
        float _1472 = _1470 * (_1434.y + (-0.5));
        float _1473 = _1470 * (_1434.z + (-0.5));
        float _1480 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1441.x + (-0.5));
        float _1482 = _1480 * (_1441.y + (-0.5));
        float _1483 = _1480 * (_1441.z + (-0.5));
        float _1490 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1448.x + (-0.5));
        float _1492 = _1490 * (_1448.y + (-0.5));
        float _1493 = _1490 * (_1448.z + (-0.5));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = _1461 * 0.5;
        float _1498 = _1471 * 0.5;
        float _1499 = _1481 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_615, _616, _617), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4387 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4398 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4409 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_1524 + 1.0))) + _1529) * _1494;
        float _1539 = _1462 * 0.5;
        float _1540 = _1472 * 0.5;
        float _1541 = _1482 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_615, _616, _617), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4420 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _4431 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4442 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_1566 + 1.0))) + _1571) * _1495;
        float _1581 = _1463 * 0.5;
        float _1582 = _1473 * 0.5;
        float _1583 = _1483 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_615, _616, _617), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4453 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _4464 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4475 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_1608 + 1.0))) + _1613) * _1496;
        _1630 = _1463;
        _1631 = _1462;
        _1632 = _1461;
        _1633 = _1473;
        _1634 = _1472;
        _1635 = _1471;
        _1636 = _1483;
        _1637 = _1482;
        _1638 = _1481;
        _1639 = _1496;
        _1640 = _1495;
        _1641 = _1494;
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
        _1643 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
        _1644 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
    }
    else
    {
        _1630 = _1318;
        _1631 = _1318;
        _1632 = _1318;
        _1633 = _1318;
        _1634 = _1318;
        _1635 = _1318;
        _1636 = _1318;
        _1637 = _1318;
        _1638 = _1318;
        _1639 = _1318;
        _1640 = _1318;
        _1641 = _1318;
        _1642 = 0.0;
        _1643 = 0.0;
        _1644 = 0.0;
    }
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1330)) + _1330;
    float _1655 = (cbModelParam._m0[1u].x * (_1643 - _1331)) + _1331;
    float _1656 = (cbModelParam._m0[1u].x * (_1644 - _1332)) + _1332;
    float _1677 = fma(_1656, cbSceneParam._m0[89u].z, fma(_1655, cbSceneParam._m0[89u].y, _1654 * cbSceneParam._m0[89u].x));
    float _1680 = fma(_1656, cbSceneParam._m0[90u].z, fma(_1655, cbSceneParam._m0[90u].y, _1654 * cbSceneParam._m0[90u].x));
    float _1683 = fma(_1656, cbSceneParam._m0[91u].z, fma(_1655, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1654));
    float _1698 = _922 * 0.5;
    float _1699 = _923 * 0.5;
    float _1700 = _924 * 0.5;
    float _1701 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1632, _1635, _1638, _1641));
    float _1704 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1631, _1634, _1637, _1640));
    float _1707 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1738;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1714 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1317, _1321, _1324, _1327));
        float _1718 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1319, _1322, _1325, _1328));
        float _1722 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1320, _1323, _1326, _1329));
        float _1729 = dot(vec4(cbModelParam._m0[39u]), vec4(_1698, _1699, _1700, 1.0));
        _1738 = dot(vec3(isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1729) ? 0.0 : (isnan(0.0) ? _1729 : max(0.0, _1729))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1738 = 1.0;
    }
    float _1749;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1740 = dot(vec4(cbModelParam._m0[40u]), vec4(_1698, _1699, _1700, 1.0));
        _1749 = dot(vec3(isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1740) ? 0.0 : (isnan(0.0) ? _1740 : max(0.0, _1740))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1749 = 1.0;
    }
    float _1753 = (_1749 * cbModelParam._m0[1u].x) + (_1738 * (1.0 - cbModelParam._m0[1u].x));
    float _1763 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _782);
    float _1764 = isnan(_1763) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1763 : min(cbModelParam._m0[25u].z, _1763));
    float _1844;
    float _1846;
    float _1848;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1811 = fma(_986, cbModelParam._m0[13u].z, fma(_982, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _978)) + cbModelParam._m0[13u].w;
        float _1815 = fma(_986, cbModelParam._m0[14u].z, fma(_982, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _978)) + cbModelParam._m0[14u].w;
        float _1819 = fma(_986, cbModelParam._m0[15u].z, fma(_982, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _978)) + cbModelParam._m0[15u].w;
        float _1822 = fma(_924, cbModelParam._m0[13u].z, fma(_923, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _922));
        float _1825 = fma(_924, cbModelParam._m0[14u].z, fma(_923, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _922));
        float _1828 = fma(_924, cbModelParam._m0[15u].z, fma(_923, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _922));
        float _1856;
        if (_1822 > 0.0)
        {
            _1856 = abs((1.0 - _1811) / _1822);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1811 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1856 = frontier_phi_17_15_ladder;
        }
        float _2029;
        if (_1825 > 0.0)
        {
            _2029 = abs((1.0 - _1815) / _1825);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1815 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2029 = frontier_phi_26_22_ladder;
        }
        float _2325;
        if (_1828 > 0.0)
        {
            _2325 = abs((1.0 - _1819) / _1828);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1819 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2325 = frontier_phi_38_33_ladder;
        }
        float _2327 = isnan(_2029) ? _1856 : (isnan(_1856) ? _2029 : min(_1856, _2029));
        float _2328 = isnan(_2325) ? _2327 : (isnan(_2327) ? _2325 : min(_2327, _2325));
        float _2332 = (_2328 * _1822) + _1811;
        float _2333 = (_2328 * _1825) + _1815;
        float _2334 = (_2328 * _1828) + _1819;
        float _2335 = _2328 * 9.9999997473787516355514526367188e-05;
        float _2337 = (-1.0) - _2335;
        float _2339 = _2335 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2334 > _2339) || ((_2334 < _2337) || ((_2333 > _2339) || ((_2333 < _2337) || ((_2332 < _2337) || (_2332 > _2339))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2479 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2334, cbModelParam._m0[9u].z, fma(_2333, cbModelParam._m0[9u].y, _2332 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2334, cbModelParam._m0[10u].z, fma(_2333, cbModelParam._m0[10u].y, _2332 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2334, cbModelParam._m0[11u].z, fma(_2333, cbModelParam._m0[11u].y, _2332 * cbModelParam._m0[11u].x))), _1764);
            frontier_phi_16_38_ladder = _2479.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2479.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2479.x * cbModelParam._m0[1u].y;
        }
        _1844 = frontier_phi_16_38_ladder_2;
        _1846 = frontier_phi_16_38_ladder_1;
        _1848 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1832 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_922, _923, _924), _1764);
        _1844 = _1832.x * cbModelParam._m0[1u].y;
        _1846 = _1832.y * cbModelParam._m0[1u].y;
        _1848 = _1832.z * cbModelParam._m0[1u].y;
    }
    float _1852 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _782);
    float _1853 = isnan(_1852) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1852 : min(cbModelParam._m0[25u].w, _1852));
    float _1944;
    float _1946;
    float _1948;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1908 = fma(_986, cbModelParam._m0[21u].z, fma(_982, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _978)) + cbModelParam._m0[21u].w;
        float _1912 = fma(_986, cbModelParam._m0[22u].z, fma(_982, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _978)) + cbModelParam._m0[22u].w;
        float _1916 = fma(_986, cbModelParam._m0[23u].z, fma(_982, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _978)) + cbModelParam._m0[23u].w;
        float _1919 = fma(_924, cbModelParam._m0[21u].z, fma(_923, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _922));
        float _1922 = fma(_924, cbModelParam._m0[22u].z, fma(_923, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _922));
        float _1925 = fma(_924, cbModelParam._m0[23u].z, fma(_923, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _922));
        float _2034;
        if (_1919 > 0.0)
        {
            _2034 = abs((1.0 - _1908) / _1919);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1908 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2034 = frontier_phi_28_24_ladder;
        }
        float _2352;
        if (_1922 > 0.0)
        {
            _2352 = abs((1.0 - _1912) / _1922);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1912 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2352 = frontier_phi_40_35_ladder;
        }
        float _2690;
        if (_1925 > 0.0)
        {
            _2690 = abs((1.0 - _1916) / _1925);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1916 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2690 = frontier_phi_50_47_ladder;
        }
        float _2692 = isnan(_2352) ? _2034 : (isnan(_2034) ? _2352 : min(_2034, _2352));
        float _2693 = isnan(_2690) ? _2692 : (isnan(_2692) ? _2690 : min(_2692, _2690));
        float _2697 = (_2693 * _1919) + _1908;
        float _2698 = (_2693 * _1922) + _1912;
        float _2699 = (_2693 * _1925) + _1916;
        float _2700 = _2693 * 9.9999997473787516355514526367188e-05;
        float _2701 = (-1.0) - _2700;
        float _2703 = _2700 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2699 > _2703) || ((_2699 < _2701) || ((_2698 > _2703) || ((_2698 < _2701) || ((_2697 < _2701) || (_2697 > _2703))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2821 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2699, cbModelParam._m0[17u].z, fma(_2698, cbModelParam._m0[17u].y, _2697 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2699, cbModelParam._m0[18u].z, fma(_2698, cbModelParam._m0[18u].y, _2697 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2699, cbModelParam._m0[19u].z, fma(_2698, cbModelParam._m0[19u].y, _2697 * cbModelParam._m0[19u].x))), _1853);
            frontier_phi_25_50_ladder = _2821.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2821.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2821.x * cbModelParam._m0[1u].z;
        }
        _1944 = frontier_phi_25_50_ladder_2;
        _1946 = frontier_phi_25_50_ladder_1;
        _1948 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1928 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_922, _923, _924), _1853);
        _1944 = _1928.x * cbModelParam._m0[1u].z;
        _1946 = _1928.y * cbModelParam._m0[1u].z;
        _1948 = _1928.z * cbModelParam._m0[1u].z;
    }
    float _1961 = (((_949 * _900) + _950) * _914) * ((cbModelParam._m0[1u].w * (_1944 - _1844)) + _1844);
    float _1963 = (((_949 * _901) + _950) * _914) * ((cbModelParam._m0[1u].w * (_1946 - _1846)) + _1846);
    float _1965 = (((_949 * _902) + _950) * _914) * ((cbModelParam._m0[1u].w * (_1948 - _1848)) + _1848);
    float _1968 = fma(_1965, cbSceneParam._m0[89u].z, fma(_1963, cbSceneParam._m0[89u].y, _1961 * cbSceneParam._m0[89u].x));
    float _1971 = fma(_1965, cbSceneParam._m0[90u].z, fma(_1963, cbSceneParam._m0[90u].y, _1961 * cbSceneParam._m0[90u].x));
    float _1974 = fma(_1965, cbSceneParam._m0[91u].z, fma(_1963, cbSceneParam._m0[91u].y, _1961 * cbSceneParam._m0[91u].x));
    float _2008 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2012 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2016 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2020 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2021 = _2008 / _2020;
    float _2022 = _2012 / _2020;
    float _2023 = _2016 / _2020;
    float _2170;
    float _2171;
    float _2172;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2050 = ((uint(_2023 > cbSceneParam._m0[59u].y) + uint(_2023 > cbSceneParam._m0[59u].x)) + uint(_2023 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2051 = _2050 + 43u;
        uint _2059 = _2050 + 44u;
        uint _2067 = _2050 + 45u;
        uint _2075 = _2050 + 46u;
        float _2086 = fma(_2020, cbSceneParam._m0[_2051].w, fma(_2016, cbSceneParam._m0[_2051].z, fma(_2012, cbSceneParam._m0[_2051].y, _2008 * cbSceneParam._m0[_2051].x)));
        float _2090 = fma(_2020, cbSceneParam._m0[_2059].w, fma(_2016, cbSceneParam._m0[_2059].z, fma(_2012, cbSceneParam._m0[_2059].y, _2008 * cbSceneParam._m0[_2059].x)));
        float _2098 = fma(_2020, cbSceneParam._m0[_2075].w, fma(_2016, cbSceneParam._m0[_2075].z, fma(_2012, cbSceneParam._m0[_2075].y, _2008 * cbSceneParam._m0[_2075].x)));
        float _2103 = cbSceneParam._m0[33u].z * _2098;
        float _2105 = cbSceneParam._m0[33u].w * _2098;
        float _2108 = fma(_2020, cbSceneParam._m0[_2067].w, fma(_2016, cbSceneParam._m0[_2067].z, fma(_2012, cbSceneParam._m0[_2067].y, _2008 * cbSceneParam._m0[_2067].x))) / _2098;
        float _2156 = (cbSceneParam._m0[33u].x - sqrt(((_2022 * _2022) + (_2021 * _2021)) + (_2023 * _2023))) * cbSceneParam._m0[33u].y;
        float _4601 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2163 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2103 + _2086) / _2098, (_2105 + _2090) / _2098), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2105 + _2086) / _2098, (_2090 - _2103) / _2098), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2086 - _2103) / _2098, (_2090 - _2105) / _2098), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2086 - _2105) / _2098, (_2103 + _2090) / _2098), _2108), 0.0)).x), vec4(0.25)));
        _2170 = 1.0 - (_2163 * cbSceneParam._m0[34u].x);
        _2171 = 1.0 - (_2163 * cbSceneParam._m0[34u].y);
        _2172 = 1.0 - (_2163 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2170 = 1.0;
        _2171 = 1.0;
        _2172 = 1.0;
    }
    float _2236;
    float _2238;
    float _2240;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2224 = fma(_2020, cbSceneParam._m0[63u].w, fma(_2016, cbSceneParam._m0[63u].z, fma(_2012, cbSceneParam._m0[63u].y, _2008 * cbSceneParam._m0[63u].x)));
        float _2225 = fma(_2020, cbSceneParam._m0[60u].w, fma(_2016, cbSceneParam._m0[60u].z, fma(_2012, cbSceneParam._m0[60u].y, _2008 * cbSceneParam._m0[60u].x))) / _2224;
        float _2226 = fma(_2020, cbSceneParam._m0[61u].w, fma(_2016, cbSceneParam._m0[61u].z, fma(_2012, cbSceneParam._m0[61u].y, _2008 * cbSceneParam._m0[61u].x))) / _2224;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2225 >= cbSceneParam._m0[64u].x) && (_2226 >= cbSceneParam._m0[64u].y)) && (_2225 <= cbSceneParam._m0[64u].z)) && (_2226 <= cbSceneParam._m0[64u].w))
        {
            float _2365 = fma(_2020, cbSceneParam._m0[62u].w, fma(_2016, cbSceneParam._m0[62u].z, fma(_2012, cbSceneParam._m0[62u].y, _2008 * cbSceneParam._m0[62u].x))) / _2224;
            float _2369 = isnan(cbSceneParam._m0[41u].w) ? _2365 : (isnan(_2365) ? cbSceneParam._m0[41u].w : max(_2365, cbSceneParam._m0[41u].w));
            float _2412 = (cbSceneParam._m0[33u].x - sqrt(((_2022 * _2022) + (_2021 * _2021)) + (_2023 * _2023))) * cbSceneParam._m0[33u].y;
            float _4617 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
            float _2419 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2225, cbSceneParam._m0[33u].w + _2226), _2369), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2225, _2226 - cbSceneParam._m0[33u].z), _2369), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2225 - cbSceneParam._m0[33u].z, _2226 - cbSceneParam._m0[33u].w), _2369), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2225 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2226), _2369), 0.0)).x), vec4(0.25)));
            float _2423 = 1.0 - (_2419 * cbSceneParam._m0[34u].x);
            float _2424 = 1.0 - (_2419 * cbSceneParam._m0[34u].y);
            float _2425 = 1.0 - (_2419 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2425) ? _2172 : (isnan(_2172) ? _2425 : min(_2172, _2425));
            frontier_phi_37_36_ladder_1 = isnan(_2424) ? _2171 : (isnan(_2171) ? _2424 : min(_2171, _2424));
            frontier_phi_37_36_ladder_2 = isnan(_2423) ? _2170 : (isnan(_2170) ? _2423 : min(_2170, _2423));
        }
        else
        {
            frontier_phi_37_36_ladder = _2172;
            frontier_phi_37_36_ladder_1 = _2171;
            frontier_phi_37_36_ladder_2 = _2170;
        }
        _2236 = frontier_phi_37_36_ladder_2;
        _2238 = frontier_phi_37_36_ladder_1;
        _2240 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2236 = _2170;
        _2238 = _2171;
        _2240 = _2172;
    }
    uvec4 _2245 = floatBitsToUint(cbInstanceData._m0[_806 + 5u]);
    uint _2247 = _2245.x * 14u;
    uint _2248 = _2247 + 13u;
    float _2255 = _914 + (-1.0);
    float _2260 = (cbLight._m0[_2248].x * _2255) + 1.0;
    float _2261 = (cbLight._m0[_2248].y * _2255) + 1.0;
    float _2262 = (cbLight._m0[_2248].z * _2255) + 1.0;
    float _2263 = (cbLight._m0[_2248].w * _2255) + 1.0;
    uint _2264 = _2247 + 5u;
    float _2270 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
    uint _2274 = _2247 + 4u;
    float _2284 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
    uint _2288 = _2247 | 1u;
    float _2299 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_615, _616, _617));
    float _2302 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_615, _616, _617));
    float _4653 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _4664 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2307 = (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * 0.3183098733425140380859375;
    float _2309 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * 0.3183098733425140380859375;
    float _2316 = ((cbLight._m0[_2264].x * _2270) * _2309) + (((cbLight._m0[_2274].x * _2236) * _2284) * _2307);
    float _2317 = ((_2270 * cbLight._m0[_2264].y) * _2309) + (((cbLight._m0[_2274].y * _2238) * _2284) * _2307);
    float _2318 = ((_2270 * cbLight._m0[_2264].z) * _2309) + (((cbLight._m0[_2274].z * _2240) * _2284) * _2307);
    uvec4 _2322 = floatBitsToUint(cbLight._m0[_2247 + 12u]);
    bool _2324 = _2322.x == 0u;
    float _2426;
    float _2428;
    float _2430;
    if (_2324)
    {
        _2426 = _2316;
        _2428 = _2317;
        _2430 = _2318;
    }
    else
    {
        uint _2434 = _2247 + 6u;
        float _2450 = (dot(vec3(cbLight._m0[_2247 + 2u].xyz), vec3(_615, _616, _617)) * 0.5) + 0.5;
        float _2451 = _2450 * _2450;
        float _4675 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2452 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2453 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
        _2426 = (((cbLight._m0[_2434].x * 0.3183098733425140380859375) * _2452) * _2453) + _2316;
        _2428 = (((cbLight._m0[_2434].y * 0.3183098733425140380859375) * _2452) * _2453) + _2317;
        _2430 = (((cbLight._m0[_2434].z * 0.3183098733425140380859375) * _2452) * _2453) + _2318;
    }
    bool _2433 = _2322.y == 0u;
    float _2488;
    float _2490;
    float _2492;
    if (_2433)
    {
        _2488 = _2426;
        _2490 = _2428;
        _2492 = _2430;
    }
    else
    {
        uint _2661 = _2247 + 7u;
        float _2677 = (dot(vec3(cbLight._m0[_2247 + 3u].xyz), vec3(_615, _616, _617)) * 0.5) + 0.5;
        float _2678 = _2677 * _2677;
        float _4691 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2679 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2680 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
        _2488 = (((cbLight._m0[_2661].x * 0.3183098733425140380859375) * _2679) * _2680) + _2426;
        _2490 = (((cbLight._m0[_2661].y * 0.3183098733425140380859375) * _2679) * _2680) + _2428;
        _2492 = (((cbLight._m0[_2661].z * 0.3183098733425140380859375) * _2679) * _2680) + _2430;
    }
    uint _2495 = _2247 + 8u;
    float _2508 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2247].w)) * _782) * 0.949999988079071044921875);
    float _2509 = _2508 * _2508;
    float _2510 = cbLight._m0[_2247].x + _685;
    float _2511 = cbLight._m0[_2247].y + _686;
    float _2512 = cbLight._m0[_2247].z + _687;
    float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
    float _2517 = _2516 * _2510;
    float _2518 = _2516 * _2511;
    float _2519 = _2516 * _2512;
    float _2520 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_2247].xyz));
    float _4707 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2523 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _4718 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _2524 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _2525 = dot(vec3(_615, _616, _617), vec3(_2517, _2518, _2519));
    float _4729 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2528 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    float _2529 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_2517, _2518, _2519));
    float _4740 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2533 = _2509 * _2509;
    float _2537 = ((_2528 * _2528) * (_2533 + (-1.0))) + 1.0;
    float _2545 = exp2(log2(1.0 - (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) * 5.0);
    float _2546 = 0.959999978542327880859375 - _897;
    float _2548 = 0.959999978542327880859375 - _898;
    float _2549 = 0.959999978542327880859375 - _899;
    float _2556 = 1.0 - _2509;
    float _2567 = (0.5 / (((_2524 * ((_2523 * _2556) + _2509)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2556) + _2509) * _2523))) * _2523;
    float _4751 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2569 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2533 / ((_2537 * _2537) * 3.141590118408203125));
    uint _2583 = _2247 + 9u;
    float _2594 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2288].w)) * _782) * 0.949999988079071044921875);
    float _2595 = _2594 * _2594;
    float _2596 = cbLight._m0[_2288].x + _685;
    float _2597 = cbLight._m0[_2288].y + _686;
    float _2598 = cbLight._m0[_2288].z + _687;
    float _2602 = inversesqrt(dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598)));
    float _2603 = _2602 * _2596;
    float _2604 = _2602 * _2597;
    float _2605 = _2602 * _2598;
    float _2606 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_2288].xyz));
    float _4762 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2609 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
    float _2610 = dot(vec3(_615, _616, _617), vec3(_2603, _2604, _2605));
    float _4773 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2613 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
    float _2614 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_2603, _2604, _2605));
    float _4784 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2618 = _2595 * _2595;
    float _2622 = ((_2613 * _2613) * (_2618 + (-1.0))) + 1.0;
    float _2629 = exp2(log2(1.0 - (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) * 5.0);
    float _2636 = 1.0 - _2595;
    float _2646 = (0.5 / (((_2524 * ((_2609 * _2636) + _2595)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2636) + _2595) * _2609))) * _2609;
    float _4795 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2648 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2618 / ((_2622 * _2622) * 3.141590118408203125));
    float _2658 = (((((_2629 * _2546) + _900) * cbLight._m0[_2583].x) * _2648) * _2270) + ((((cbLight._m0[_2495].x * _2236) * ((_2545 * _2546) + _900)) * _2569) * _2284);
    float _2659 = (((((_2629 * _2548) + _901) * cbLight._m0[_2583].y) * _2648) * _2270) + ((((cbLight._m0[_2495].y * _2238) * ((_2545 * _2548) + _901)) * _2569) * _2284);
    float _2660 = (((((_2629 * _2549) + _902) * cbLight._m0[_2583].z) * _2648) * _2270) + ((((cbLight._m0[_2495].z * _2240) * ((_2545 * _2549) + _902)) * _2569) * _2284);
    float _2716;
    float _2718;
    float _2720;
    if (_2324)
    {
        _2716 = _2658;
        _2718 = _2659;
        _2720 = _2660;
    }
    else
    {
        uint _2722 = _2247 + 2u;
        uint _2726 = _2247 + 10u;
        float _2740 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2722].w)) * _782) * 0.949999988079071044921875);
        float _2741 = _2740 * _2740;
        float _2742 = cbLight._m0[_2722].x + _685;
        float _2743 = cbLight._m0[_2722].y + _686;
        float _2744 = cbLight._m0[_2722].z + _687;
        float _2748 = inversesqrt(dot(vec3(_2742, _2743, _2744), vec3(_2742, _2743, _2744)));
        float _2749 = _2748 * _2742;
        float _2750 = _2748 * _2743;
        float _2751 = _2748 * _2744;
        float _2752 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_2722].xyz));
        float _4806 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2755 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2756 = dot(vec3(_615, _616, _617), vec3(_2749, _2750, _2751));
        float _4817 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2759 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
        float _2760 = dot(vec3(cbLight._m0[_2722].xyz), vec3(_2749, _2750, _2751));
        float _4828 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2764 = _2741 * _2741;
        float _2768 = ((_2759 * _2759) * (_2764 + (-1.0))) + 1.0;
        float _2775 = exp2(log2(1.0 - (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0)))) * 5.0);
        float _2782 = 1.0 - _2741;
        float _2792 = (0.5 / (((_2524 * ((_2755 * _2782) + _2741)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2782) + _2741) * _2755))) * _2755;
        float _4839 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2794 = (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (_2764 / ((_2768 * _2768) * 3.141590118408203125));
        float _2795 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
        _2716 = (((((_2775 * _2546) + _900) * cbLight._m0[_2726].x) * _2794) * _2795) + _2658;
        _2718 = (((((_2775 * _2548) + _901) * cbLight._m0[_2726].y) * _2794) * _2795) + _2659;
        _2720 = (((((_2775 * _2549) + _902) * cbLight._m0[_2726].z) * _2794) * _2795) + _2660;
    }
    float _2826;
    float _2828;
    float _2830;
    if (_2433)
    {
        _2826 = _2716;
        _2828 = _2718;
        _2830 = _2720;
    }
    else
    {
        uint _2837 = _2247 + 3u;
        uint _2841 = _2247 + 11u;
        float _2855 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2837].w)) * _782) * 0.949999988079071044921875);
        float _2856 = _2855 * _2855;
        float _2857 = cbLight._m0[_2837].x + _685;
        float _2858 = cbLight._m0[_2837].y + _686;
        float _2859 = cbLight._m0[_2837].z + _687;
        float _2863 = inversesqrt(dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859)));
        float _2864 = _2863 * _2857;
        float _2865 = _2863 * _2858;
        float _2866 = _2863 * _2859;
        float _2867 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_2837].xyz));
        float _4855 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2870 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
        float _2871 = dot(vec3(_615, _616, _617), vec3(_2864, _2865, _2866));
        float _4866 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        float _2874 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
        float _2875 = dot(vec3(cbLight._m0[_2837].xyz), vec3(_2864, _2865, _2866));
        float _4877 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        float _2879 = _2856 * _2856;
        float _2883 = ((_2874 * _2874) * (_2879 + (-1.0))) + 1.0;
        float _2890 = exp2(log2(1.0 - (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0)))) * 5.0);
        float _2897 = 1.0 - _2856;
        float _2907 = (0.5 / (((_2524 * ((_2870 * _2897) + _2856)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2897) + _2856) * _2870))) * _2870;
        float _4888 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
        float _2909 = (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2879 / ((_2883 * _2883) * 3.141590118408203125));
        float _2910 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
        _2826 = (((((_2890 * _2546) + _900) * cbLight._m0[_2841].x) * _2909) * _2910) + _2716;
        _2828 = (((((_2890 * _2548) + _901) * cbLight._m0[_2841].y) * _2909) * _2910) + _2718;
        _2830 = (((((_2890 * _2549) + _902) * cbLight._m0[_2841].z) * _2909) * _2910) + _2720;
    }
    float _2976;
    float _2978;
    float _2980;
    float _2982;
    float _2984;
    float _2986;
    if (_2245.y == 0u)
    {
        uvec4 _2931 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2932 = _2931.x;
        uint _2943 = uint((float(_2931.y) * floor(float(uint(cbSceneParam._m0[85u].y * _705) / _2932))) + floor(float(uint(cbSceneParam._m0[85u].x * _704) / _2932)));
        float _2953 = (log2(_2023 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2954 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        uint _2957 = uint(isnan(14.0) ? _2954 : (isnan(_2954) ? 14.0 : min(_2954, 14.0)));
        uvec4 _2962 = texelFetch(g_lightClusterGridBuffer, int(((_2957 << 2u) + (_2943 << 6u)) >> 2u));
        uint _2963 = _2962.x;
        uint _2964 = _2931.z;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        if (((((1u << ((_2964 >> 4u) & 15u)) + 4294967295u) & _2963) == 0u) || ((_2964 & 240u) == 0u))
        {
            _3074 = 0.0;
            _3076 = 0.0;
            _3078 = 0.0;
            _3080 = 0.0;
            _3082 = 0.0;
            _3084 = 0.0;
        }
        else
        {
            float _3075;
            float _3077;
            float _3079;
            float _3081;
            float _3083;
            float _3085;
            float _3235 = 0.0;
            float _3236 = 0.0;
            float _3237 = 0.0;
            float _3238 = 0.0;
            float _3239 = 0.0;
            float _3240 = 0.0;
            uint _3241 = 0u;
            uint _3250;
            bool _3251;
            for (;;)
            {
                _3250 = texelFetch(g_lightClassification, int((((_2957 << 5u) + (_2943 << 9u)) + (_3241 << 2u)) >> 2u)).x;
                _3251 = _3250 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3251)
                {
                    frontier_phi_71_pred = _3240;
                    frontier_phi_71_pred_1 = _3239;
                    frontier_phi_71_pred_2 = _3238;
                    frontier_phi_71_pred_3 = _3237;
                    frontier_phi_71_pred_4 = _3236;
                    frontier_phi_71_pred_5 = _3235;
                }
                else
                {
                    float _3380;
                    float _3381;
                    float _3382;
                    float _3383;
                    float _3384;
                    float _3385;
                    uint _3386;
                    _3380 = _3235;
                    _3381 = _3236;
                    _3382 = _3237;
                    _3383 = _3238;
                    _3384 = _3239;
                    _3385 = _3240;
                    _3386 = _3250;
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    for (;;)
                    {
                        uint _3390 = uint(findLSB(_3386)) + (_3241 << 5u);
                        uint _3387 = (_3386 + 4294967295u) & _3386;
                        uint _3392 = _3390 * 48u;
                        vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3392)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 3u)).x));
                        uint _3412 = (_3390 * 48u) + 4u;
                        vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3412)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 3u)).x));
                        uint _3431 = (_3390 * 48u) + 8u;
                        vec3 _3442 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3431)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 2u)).x));
                        float _3446 = _3406.x - _2021;
                        float _3447 = _3406.y - _2022;
                        float _3448 = _3406.z - _2023;
                        float _3449 = dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448));
                        float _3452 = inversesqrt(_3449);
                        float _3453 = _3452 * _3446;
                        float _3454 = _3452 * _3447;
                        float _3455 = _3452 * _3448;
                        float _3456 = dot(vec3(_727, _730, _733), vec3(_3453, _3454, _3455));
                        float _3461 = 1.0 - (_3449 * _3406.w);
                        float _4914 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3462 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                        float _3463 = sqrt(_3449) * _3425.w;
                        float _3466 = 1.39999997615814208984375 / (_3463 + 1.39999997615814208984375);
                        float _3467 = _3466 * _3466;
                        float _3470 = ((1.0 - _3467) * _3456) + _3467;
                        float _3473 = _3463 * _3463;
                        float _3477 = ((isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0))) * _3462) / ((_3473 * 0.699999988079071044921875) + 1.0);
                        float _3481 = (-0.0) - _2021;
                        float _3482 = (-0.0) - _2022;
                        float _3483 = (-0.0) - _2023;
                        float _3487 = inversesqrt(dot(vec3(_3481, _3482, _3483), vec3(_3481, _3482, _3483)));
                        float _3488 = _3487 * _3481;
                        float _3489 = _3487 * _3482;
                        float _3490 = _3487 * _3483;
                        float _3497 = exp2(log2(1.0 / ((_3473 * 3.5) + 5.0)) * 0.25);
                        float _3498 = 1.0 - _930;
                        float _3505 = sqrt(1.0 - ((1.0 - (_3498 * _3498)) * (1.0 - (_3497 * _3497))));
                        float _3506 = _3505 * _3505;
                        float _3507 = _3506 * _3506;
                        float _3508 = _3488 + _3453;
                        float _3509 = _3489 + _3454;
                        float _3510 = _3490 + _3455;
                        float _3514 = inversesqrt(dot(vec3(_3508, _3509, _3510), vec3(_3508, _3509, _3510)));
                        float _3518 = dot(vec3(_727, _730, _733), vec3(_3488, _3489, _3490));
                        float _4930 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3521 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                        float _3522 = dot(vec3(_727, _730, _733), vec3(_3514 * _3508, _3514 * _3509, _3514 * _3510));
                        float _4941 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3525 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                        float _3529 = ((_3525 * _3525) * (_3507 + (-1.0))) + 1.0;
                        float _3530 = _3466 * _3506;
                        float _3531 = _3530 * _3530;
                        float _3534 = ((1.0 - _3531) * _3456) + _3531;
                        float _4952 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                        float _3535 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                        float _3536 = 1.0 - _3506;
                        float _3546 = (0.5 / (((_3535 * ((_3521 * _3536) + _3506)) + 9.9999999392252902907785028219223e-09) + (((_3535 * _3536) + _3506) * _3521))) * _3535;
                        float _4963 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                        float _3557 = (((_3507 * 3.1415927410125732421875) * (isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0)))) / ((_3529 * _3529) * ((_3473 * 2.1991131305694580078125) + 3.141590118408203125))) * _3462;
                        _3310 = (_3477 * _3425.x) + _3383;
                        _3311 = (_3477 * _3425.y) + _3384;
                        _3312 = (_3477 * _3425.z) + _3385;
                        _3307 = (_3557 * _3442.x) + _3380;
                        _3308 = (_3557 * _3442.y) + _3381;
                        _3309 = (_3557 * _3442.z) + _3382;
                        if (_3387 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3380 = _3307;
                            _3381 = _3308;
                            _3382 = _3309;
                            _3383 = _3310;
                            _3384 = _3311;
                            _3385 = _3312;
                            _3386 = _3387;
                        }
                    }
                    frontier_phi_71_pred = _3312;
                    frontier_phi_71_pred_1 = _3311;
                    frontier_phi_71_pred_2 = _3310;
                    frontier_phi_71_pred_3 = _3309;
                    frontier_phi_71_pred_4 = _3308;
                    frontier_phi_71_pred_5 = _3307;
                }
                _3085 = frontier_phi_71_pred;
                _3083 = frontier_phi_71_pred_1;
                _3081 = frontier_phi_71_pred_2;
                _3079 = frontier_phi_71_pred_3;
                _3077 = frontier_phi_71_pred_4;
                _3075 = frontier_phi_71_pred_5;
                uint _3242 = _3241 + 1u;
                if (_3242 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3235 = _3075;
                    _3236 = _3077;
                    _3237 = _3079;
                    _3238 = _3081;
                    _3239 = _3083;
                    _3240 = _3085;
                    _3241 = _3242;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3074 = _3075;
            _3076 = _3077;
            _3078 = _3079;
            _3080 = _3081;
            _3082 = _3083;
            _3084 = _3085;
        }
        uvec4 _3088 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3089 = _3088.z;
        uint _3091 = (_3089 >> 8u) & 15u;
        float _3203;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        float _3213;
        if (((4294967295u << _3091) & _2963) == 0u)
        {
            _3203 = _3074;
            _3205 = _3076;
            _3207 = _3078;
            _3209 = _3080;
            _3211 = _3082;
            _3213 = _3084;
        }
        else
        {
            float _3228 = inversesqrt(dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023)));
            float _3229 = _3228 * _2021;
            float _3230 = _3228 * _2022;
            float _3231 = _3228 * _2023;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3091 < ((_3089 >> 12u) & 15u))
            {
                float _3204;
                float _3206;
                float _3208;
                float _3210;
                float _3212;
                float _3214;
                float _3363 = _3074;
                float _3364 = _3076;
                float _3365 = _3078;
                float _3366 = _3080;
                float _3367 = _3082;
                float _3368 = _3084;
                uint _3369 = _3091;
                uint _3378;
                bool _3379;
                for (;;)
                {
                    _3378 = texelFetch(g_lightClassification, int((((_2957 << 5u) + (_2943 << 9u)) + (_3369 << 2u)) >> 2u)).x;
                    _3379 = _3378 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3379)
                    {
                        frontier_phi_82_pred = _3368;
                        frontier_phi_82_pred_1 = _3367;
                        frontier_phi_82_pred_2 = _3366;
                        frontier_phi_82_pred_3 = _3365;
                        frontier_phi_82_pred_4 = _3364;
                        frontier_phi_82_pred_5 = _3363;
                    }
                    else
                    {
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3866;
                        float _3867;
                        float _3868;
                        float _3869;
                        float _3870;
                        float _3871;
                        float _3584 = _3363;
                        float _3585 = _3364;
                        float _3586 = _3365;
                        float _3587 = _3366;
                        float _3588 = _3367;
                        float _3589 = _3368;
                        uint _3590 = _3378;
                        uint _3591;
                        vec4 _3616;
                        float _3617;
                        vec4 _3632;
                        vec3 _3644;
                        vec4 _3659;
                        vec4 _3675;
                        float _3722;
                        bool _3723;
                        for (;;)
                        {
                            uint _3601 = ((_3369 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3590));
                            _3591 = (_3590 + 4294967295u) & _3590;
                            uint _3603 = _3601 * 40u;
                            _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            _3617 = _3616.w;
                            uint _3619 = (_3601 * 40u) + 4u;
                            _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            uint _3634 = (_3601 * 40u) + 8u;
                            _3644 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x));
                            uint _3646 = (_3601 * 40u) + 16u;
                            _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            uint _3662 = (_3601 * 40u) + 20u;
                            _3675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 3u)).x));
                            uint _3678 = (_3601 * 40u) + 24u;
                            vec4 _3691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 3u)).x));
                            uint _3697 = (_3601 * 40u) + 28u;
                            vec4 _3710 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 3u)).x));
                            _3722 = fma(_2023, _3710.z, fma(_2022, _3710.y, _3710.x * _2021)) + _3710.w;
                            _3723 = !((fma(_2023, _3691.z, fma(_2022, _3691.y, _3691.x * _2021)) + _3691.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3723)
                            {
                                float _3750 = _3616.x - _2021;
                                float _3751 = _3616.y - _2022;
                                float _3752 = _3616.z - _2023;
                                float _3753 = dot(vec3(_3750, _3751, _3752), vec3(_3750, _3751, _3752));
                                float _3756 = inversesqrt(_3753);
                                float _3757 = _3756 * _3750;
                                float _3758 = _3756 * _3751;
                                float _3759 = _3756 * _3752;
                                float _3763 = 1.0 - (_3753 / (_3617 * _3617));
                                float _4974 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3764 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                                float _3768 = sqrt(_3753) * _3632.w;
                                float _3770 = 1.39999997615814208984375 / (_3768 + 1.39999997615814208984375);
                                float _3771 = _3770 * _3770;
                                float _3774 = ((1.0 - _3771) * dot(vec3(_3757, _3758, _3759), vec3(_727, _730, _733))) + _3771;
                                float _3777 = _3768 * _3768;
                                float _3781 = (fma(_2023, _3659.z, fma(_2022, _3659.y, _3659.x * _2021)) + _3659.w) / _3722;
                                float _3782 = (fma(_2023, _3675.z, fma(_2022, _3675.y, _3675.x * _2021)) + _3675.w) / _3722;
                                float _3786 = 1.0 - dot(vec2(_3781, _3782), vec2(_3781, _3782));
                                float _4990 = isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0));
                                float _3787 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                                float _3788 = _3787 * (((isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0))) * _3764) / ((_3777 * 0.699999988079071044921875) + 1.0));
                                float _3800 = exp2(log2(1.0 / ((_3777 * 3.5) + 5.0)) * 0.25);
                                float _3801 = 1.0 - _930;
                                float _3808 = sqrt(1.0 - ((1.0 - (_3801 * _3801)) * (1.0 - (_3800 * _3800))));
                                float _3809 = _3808 * _3808;
                                float _3810 = _3809 * _3809;
                                float _3811 = _3757 - _3229;
                                float _3812 = _3758 - _3230;
                                float _3813 = _3759 - _3231;
                                float _3817 = inversesqrt(dot(vec3(_3811, _3812, _3813), vec3(_3811, _3812, _3813)));
                                float _3821 = dot(vec3(_727, _730, _733), vec3((-0.0) - _3229, (-0.0) - _3230, (-0.0) - _3231));
                                float _5001 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3824 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3825 = dot(vec3(_727, _730, _733), vec3(_3817 * _3811, _3817 * _3812, _3817 * _3813));
                                float _5012 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                                float _3828 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                                float _3832 = ((_3828 * _3828) * (_3810 + (-1.0))) + 1.0;
                                float _3833 = _3770 * _3809;
                                float _3834 = _3833 * _3833;
                                float _3840 = ((1.0 - _3834) * dot(vec3(_727, _730, _733), vec3(_3757, _3758, _3759))) + _3834;
                                float _5023 = isnan(0.0) ? _3840 : (isnan(_3840) ? 0.0 : max(_3840, 0.0));
                                float _3841 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                                float _3842 = 1.0 - _3809;
                                float _3852 = (0.5 / (((_3841 * ((_3824 * _3842) + _3809)) + 9.9999999392252902907785028219223e-09) + (((_3841 * _3842) + _3809) * _3824))) * _3841;
                                float _5034 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                                float _3862 = (_3787 * _3764) * (((_3810 * 3.1415927410125732421875) * (isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0)))) / ((_3832 * _3832) * ((_3777 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3788 * _3632.z;
                                frontier_phi_88_pred_1 = _3788 * _3632.y;
                                frontier_phi_88_pred_2 = _3788 * _3632.x;
                                frontier_phi_88_pred_3 = _3862 * _3644.z;
                                frontier_phi_88_pred_4 = _3862 * _3644.y;
                                frontier_phi_88_pred_5 = _3862 * _3644.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3871 = frontier_phi_88_pred;
                            _3870 = frontier_phi_88_pred_1;
                            _3869 = frontier_phi_88_pred_2;
                            _3868 = frontier_phi_88_pred_3;
                            _3867 = frontier_phi_88_pred_4;
                            _3866 = frontier_phi_88_pred_5;
                            _3574 = _3869 + _3587;
                            _3575 = _3870 + _3588;
                            _3576 = _3871 + _3589;
                            _3571 = _3866 + _3584;
                            _3572 = _3867 + _3585;
                            _3573 = _3868 + _3586;
                            if (_3591 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3574;
                                _3588 = _3575;
                                _3589 = _3576;
                                _3590 = _3591;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3576;
                        frontier_phi_82_pred_1 = _3575;
                        frontier_phi_82_pred_2 = _3574;
                        frontier_phi_82_pred_3 = _3573;
                        frontier_phi_82_pred_4 = _3572;
                        frontier_phi_82_pred_5 = _3571;
                    }
                    _3214 = frontier_phi_82_pred;
                    _3212 = frontier_phi_82_pred_1;
                    _3210 = frontier_phi_82_pred_2;
                    _3208 = frontier_phi_82_pred_3;
                    _3206 = frontier_phi_82_pred_4;
                    _3204 = frontier_phi_82_pred_5;
                    uint _3370 = _3369 + 1u;
                    if (_3370 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3363 = _3204;
                        _3364 = _3206;
                        _3365 = _3208;
                        _3366 = _3210;
                        _3367 = _3212;
                        _3368 = _3214;
                        _3369 = _3370;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3210;
                frontier_phi_63_64_ladder_1 = _3214;
                frontier_phi_63_64_ladder_2 = _3212;
                frontier_phi_63_64_ladder_3 = _3208;
                frontier_phi_63_64_ladder_4 = _3206;
                frontier_phi_63_64_ladder_5 = _3204;
            }
            else
            {
                frontier_phi_63_64_ladder = _3080;
                frontier_phi_63_64_ladder_1 = _3084;
                frontier_phi_63_64_ladder_2 = _3082;
                frontier_phi_63_64_ladder_3 = _3078;
                frontier_phi_63_64_ladder_4 = _3076;
                frontier_phi_63_64_ladder_5 = _3074;
            }
            _3203 = frontier_phi_63_64_ladder_5;
            _3205 = frontier_phi_63_64_ladder_4;
            _3207 = frontier_phi_63_64_ladder_3;
            _3209 = frontier_phi_63_64_ladder;
            _3211 = frontier_phi_63_64_ladder_2;
            _3213 = frontier_phi_63_64_ladder_1;
        }
        float _3218 = isnan(1.0) ? _914 : (isnan(_914) ? 1.0 : min(_914, 1.0));
        _2976 = (_3218 * _3209) + _2488;
        _2978 = (_3218 * _3211) + _2490;
        _2980 = (_3218 * _3213) + _2492;
        _2982 = ((_3203 * _900) * _3218) + _2826;
        _2984 = ((_3205 * _901) * _3218) + _2828;
        _2986 = ((_3207 * _902) * _3218) + _2830;
    }
    else
    {
        _2976 = _2488;
        _2978 = _2490;
        _2980 = _2492;
        _2982 = _2826;
        _2984 = _2828;
        _2986 = _2830;
    }
    uint _2992 = _807 + uint(cbMatDynParam._m0[0u].w);
    float _2998 = cbInstanceData._m0[_2992].x * (_583 ? cbMtdParam._m0[17u].w : cbMtdParam._m0[10u].w);
    float _2999 = cbInstanceData._m0[_2992].y * (_583 ? cbMtdParam._m0[18u].x : cbMtdParam._m0[11u].x);
    float _3000 = cbInstanceData._m0[_2992].z * (_583 ? cbMtdParam._m0[18u].y : cbMtdParam._m0[11u].y);
    float _5050 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _5061 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _5072 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _5083 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3018 = (((isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0))) * (_2976 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _914))) + ((_2982 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1753)) * cbPerFrame._m0[3u].x)) + _2998;
    float _3020 = (_2999 + ((_2984 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1753)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0))) * (_2978 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _914)));
    float _3022 = (_3000 + ((_2986 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1753)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0))) * (_2980 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _914)));
    float _3023 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
    float _3024 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
    float _3025 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
    float _3031 = cbMtdParam._m0[2u].x * _2998;
    float _3032 = cbMtdParam._m0[2u].y * _2999;
    float _3033 = cbMtdParam._m0[2u].z * _3000;
    float _5109 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3035 = isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0));
    float _3040 = cbInstanceData._m0[_806 + 6u].w * (isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0)));
    float _3045 = _704 / cbSceneParam._m0[86u].x;
    float _3046 = _705 / cbSceneParam._m0[86u].y;
    vec4 _3060 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3045, _3046, (log2((isnan(cbSceneParam._m0[77u].w) ? _628 : (isnan(_628) ? cbSceneParam._m0[77u].w : min(_628, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3062 = _3060.x;
    float _3063 = _3060.y;
    float _3064 = _3060.z;
    float _3065 = _3060.w;
    float _3136;
    float _3138;
    float _3140;
    float _3142;
    if (_628 > cbSceneParam._m0[78u].w)
    {
        float _3099 = isnan(_628) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _628 : min(cbSceneParam._m0[80u].w, _628));
        float _3100 = _3099 / _628;
        float _3111 = _3100 * _678;
        float _3112 = _679 * _3100;
        float _3113 = (-0.0) - _3112;
        float _3114 = _3100 * _680;
        float _3116 = (cbSceneParam._m0[77u].w * _3113) / _3099;
        float _3117 = _3116 + cbSceneParam._m0[79u].w;
        float _3118 = cbSceneParam._m0[79u].w - _3112;
        float _3124 = sqrt(((_3111 * _3111) + (_3112 * _3112)) + (_3114 * _3114));
        float _3127 = (1.0 - (cbSceneParam._m0[77u].w / _3099)) * _3124;
        float _3132 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3134 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3320;
        if (abs((_3113 - _3116) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3320 = ((((_3117 > 0.0) ? exp2(_3132 * _3117) : (2.0 - exp2(_3134 * _3117))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3127;
        }
        else
        {
            float _3264 = 1.0 / cbSceneParam._m0[80u].x;
            float _3265 = isnan(_3118) ? _3117 : (isnan(_3117) ? _3118 : max(_3117, _3118));
            float _3266 = isnan(_3118) ? _3117 : (isnan(_3117) ? _3118 : min(_3117, _3118));
            float _3275 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : min(_3265, 0.0));
            float _3276 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : min(_3266, 0.0));
            _3320 = ((abs(_3124 / _3113) * cbSceneParam._m0[80u].y) * ((((_3275 - _3276) * 2.0) - ((exp2(_3132 * (isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0)))) - exp2(_3132 * (isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0))))) * _3264)) - ((exp2(_3134 * _3275) - exp2(_3134 * _3276)) * _3264))) + (_3127 * cbSceneParam._m0[80u].z);
        }
        vec4 _3322 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3045, _3046, 1.0), 0.0);
        float _3331 = exp2((_3320 * (-1.44269502162933349609375)) * (1.0 - _3322.w));
        float _3332 = log2(_3331);
        float _3348 = log2(_3065);
        _3136 = (exp2(_3348 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3332 * cbSceneParam._m0[78u].x)) * _3322.x) / cbSceneParam._m0[78u].x)) + _3062;
        _3138 = (exp2(_3348 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3332 * cbSceneParam._m0[78u].y)) * _3322.y) / cbSceneParam._m0[78u].y)) + _3063;
        _3140 = (exp2(_3348 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3332 * cbSceneParam._m0[78u].z)) * _3322.z) / cbSceneParam._m0[78u].z)) + _3064;
        _3142 = _3331 * _3065;
    }
    else
    {
        _3136 = _3062;
        _3138 = _3063;
        _3140 = _3064;
        _3142 = _3065;
    }
    bool _3358;
    vec4 _3152;
    vec4 _3174;
    float _3176;
    float _3180;
    float _3181;
    float _3182;
    float _3185;
    float _3188;
    float _3191;
    float _3192;
    bool _3202;
    for (;;)
    {
        _3152 = cbMatDynParam._m0[0u];
        float _3154 = roundEven(_3152.y);
        bool _3155 = _3154 == 3.0;
        float _3156 = log2(_3142);
        float _3160 = exp2(_3156 * cbSceneParam._m0[78u].x);
        float _3161 = exp2(_3156 * cbSceneParam._m0[78u].y);
        float _3162 = exp2(_3156 * cbSceneParam._m0[78u].z);
        float _3163 = _3160 * _3023;
        float _3164 = _3161 * _3024;
        float _3165 = _3162 * _3025;
        float _3172 = _694 + (-0.5);
        _3174 = cbMtdParam._m0[1u];
        _3176 = _3174.y * _3172;
        float _3179 = (_3154 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3180 = _3179 * (_3155 ? _3163 : (_3163 + (cbSceneParam._m0[72u].w * _3136)));
        _3181 = _3179 * (_3155 ? _3164 : (_3164 + (cbSceneParam._m0[72u].w * _3138)));
        _3182 = _3179 * (_3155 ? _3165 : (_3165 + (cbSceneParam._m0[72u].w * _3140)));
        _3185 = ((_3031 * _3035) * _3160) * _3179;
        _3188 = ((_3032 * _3035) * _3161) * _3179;
        _3191 = ((_3033 * _3035) * _3162) * _3179;
        _3192 = _3172 * 0.999000012874603271484375;
        _3202 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3202)
        {
            if ((cbInstanceData._m0[_806 + 7u].x + _3192) < 0.5)
            {
                _3358 = true;
                break;
            }
        }
        uint _3299 = _807 + uint(_3152.w);
        if ((cbInstanceData._m0[_3299].w < 1.0) && ((cbInstanceData._m0[_3299].w + _3192) < 0.5))
        {
            _3358 = true;
            break;
        }
        if ((_3176 + 1.0) < _3174.x)
        {
            _3358 = true;
            break;
        }
        _3358 = false;
        break;
    }
    float _3562;
    if (_3358)
    {
        discard_state = true;
        _3562 = 0.0;
    }
    else
    {
        _3562 = _3040;
    }
    SV_Target.x = _3180;
    SV_Target.y = _3181;
    SV_Target.z = _3182;
    SV_Target.w = _3562;
    SV_Target_1.x = _3185;
    SV_Target_1.y = _3188;
    SV_Target_1.z = _3191;
    SV_Target_1.w = _3040;
    discard_exit();
}


